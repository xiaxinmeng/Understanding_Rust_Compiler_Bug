{"sha": "c0b7e71bec30753a1c4c387c8b14710b8674649f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYjdlNzFiZWMzMDc1M2ExYzRjMzg3YzhiMTQ3MTBiODY3NDY0OWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-22T22:34:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-22T22:34:22Z"}, "message": "Auto merge of #64151 - estebank:binding-error, r=varkor\n\nOn obligation errors point at the unfulfilled binding when possible\n\nCC #42855, #64130, #64135. Fix #61860.", "tree": {"sha": "6b7e7eac12374942aacfb071b5d0cda2a70ba5ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b7e7eac12374942aacfb071b5d0cda2a70ba5ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0b7e71bec30753a1c4c387c8b14710b8674649f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b7e71bec30753a1c4c387c8b14710b8674649f", "html_url": "https://github.com/rust-lang/rust/commit/c0b7e71bec30753a1c4c387c8b14710b8674649f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0b7e71bec30753a1c4c387c8b14710b8674649f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dd1884891636d0eb51157d137230076bcf20627", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd1884891636d0eb51157d137230076bcf20627", "html_url": "https://github.com/rust-lang/rust/commit/1dd1884891636d0eb51157d137230076bcf20627"}, {"sha": "ff75124a377f60ee4bd084ca2569e1530ff52856", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff75124a377f60ee4bd084ca2569e1530ff52856", "html_url": "https://github.com/rust-lang/rust/commit/ff75124a377f60ee4bd084ca2569e1530ff52856"}], "stats": {"total": 1641, "additions": 904, "deletions": 737}, "files": [{"sha": "66a3c8e555405966fae917a6ccfe9f7aa1a6fdf1", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -14,6 +14,8 @@\n     os.path.join(os.path.dirname(__file__), '../test/ui/derives/'))\n \n TEMPLATE = \"\"\"\\\n+// ignore-x86\n+// ^ due to stderr output differences\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n {error_deriving}"}, {"sha": "f6b872623d78976722bc659dbd399de8bf63bcde", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1893,10 +1893,13 @@ impl<'a> LoweringContext<'a> {\n                         if let Ok(snippet) = self.sess.source_map().span_to_snippet(data.span) {\n                             // Do not suggest going from `Trait()` to `Trait<>`\n                             if data.inputs.len() > 0 {\n+                                let split = snippet.find('(').unwrap();\n+                                let trait_name = &snippet[0..split];\n+                                let args = &snippet[split + 1 .. snippet.len() - 1];\n                                 err.span_suggestion(\n                                     data.span,\n                                     \"use angle brackets instead\",\n-                                    format!(\"<{}>\", &snippet[1..snippet.len() - 1]),\n+                                    format!(\"{}<{}>\", trait_name, args),\n                                     Applicability::MaybeIncorrect,\n                                 );\n                             }"}, {"sha": "92a8c008047333b2394b7b0c232032835669a93d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2750,3 +2750,15 @@ pub enum Node<'hir> {\n \n     Crate,\n }\n+\n+impl Node<'_> {\n+    pub fn ident(&self) -> Option<Ident> {\n+        match self {\n+            Node::TraitItem(TraitItem { ident, .. }) |\n+            Node::ImplItem(ImplItem { ident, .. }) |\n+            Node::ForeignItem(ForeignItem { ident, .. }) |\n+            Node::Item(Item { ident, .. }) => Some(*ident),\n+            _ => None,\n+        }\n+    }\n+}"}, {"sha": "aff866fa76d5f4ccd275638fd2a3ea154814c136", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -40,10 +40,12 @@ use syntax::symbol::{sym, kw};\n use syntax_pos::{DUMMY_SP, Span, ExpnKind};\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n-    pub fn report_fulfillment_errors(&self,\n-                                     errors: &[FulfillmentError<'tcx>],\n-                                     body_id: Option<hir::BodyId>,\n-                                     fallback_has_occurred: bool) {\n+    pub fn report_fulfillment_errors(\n+        &self,\n+        errors: &[FulfillmentError<'tcx>],\n+        body_id: Option<hir::BodyId>,\n+        fallback_has_occurred: bool,\n+    ) {\n         #[derive(Debug)]\n         struct ErrorDescriptor<'tcx> {\n             predicate: ty::Predicate<'tcx>,\n@@ -1053,6 +1055,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 .filter(|c| !c.is_whitespace())\n                 .take_while(|c| *c == '&')\n                 .count();\n+            if let Some('\\'') = snippet.chars()\n+                .filter(|c| !c.is_whitespace())\n+                .skip(refs_number)\n+                .next()\n+            { // Do not suggest removal of borrow from type arguments.\n+                return;\n+            }\n \n             let mut trait_type = trait_ref.self_ty();\n \n@@ -1651,6 +1660,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     err.note(&msg);\n                 }\n             }\n+            ObligationCauseCode::BindingObligation(item_def_id, span) => {\n+                let item_name = tcx.def_path_str(item_def_id);\n+                let msg = format!(\"required by this bound in `{}`\", item_name);\n+                if let Some(ident) = tcx.opt_item_name(item_def_id) {\n+                    err.span_label(ident.span, \"\");\n+                }\n+                if span != DUMMY_SP {\n+                    err.span_label(span, &msg);\n+                } else {\n+                    err.note(&msg);\n+                }\n+            }\n             ObligationCauseCode::ObjectCastObligation(object_ty) => {\n                 err.note(&format!(\"required for the cast to the object type `{}`\",\n                                   self.ty_to_string(object_ty)));"}, {"sha": "1123422ad6008244666bad70a1d8ee24ea7380a6", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -176,6 +176,9 @@ pub enum ObligationCauseCode<'tcx> {\n     /// also implement all supertraits of `X`.\n     ItemObligation(DefId),\n \n+    /// Like `ItemObligation`, but with extra detail on the source of the obligation.\n+    BindingObligation(DefId, Span),\n+\n     /// A type like `&'a T` is WF only if `T: 'a`.\n     ReferenceOutlivesReferent(Ty<'tcx>),\n "}, {"sha": "68c97226f89cfd7fb156669108a8c7cb85e5d83e", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -472,6 +472,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::TupleElem => Some(super::TupleElem),\n             super::ProjectionWf(proj) => tcx.lift(&proj).map(super::ProjectionWf),\n             super::ItemObligation(def_id) => Some(super::ItemObligation(def_id)),\n+            super::BindingObligation(def_id, span) => Some(super::BindingObligation(def_id, span)),\n             super::ReferenceOutlivesReferent(ty) => {\n                 tcx.lift(&ty).map(super::ReferenceOutlivesReferent)\n             }"}, {"sha": "8bb9648e031ef5e98c4979fd8c234ded1303939d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2797,6 +2797,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n+    pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {\n+        self.hir().as_local_hir_id(def_id).and_then(|hir_id| self.hir().get(hir_id).ident())\n+    }\n+\n     pub fn opt_associated_item(self, def_id: DefId) -> Option<AssocItem> {\n         let is_associated_item = if let Some(hir_id) = self.hir().as_local_hir_id(def_id) {\n             match self.hir().get(hir_id) {"}, {"sha": "710d847384e6cb28fcc5f295b820a4311bf4bed1", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn confirm_builtin_call(\n         &self,\n-        call_expr: &hir::Expr,\n+        call_expr: &'tcx hir::Expr,\n         callee_ty: Ty<'tcx>,\n         arg_exprs: &'tcx [hir::Expr],\n         expected: Expectation<'tcx>,\n@@ -425,7 +425,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n         self.check_argument_types(\n             call_expr.span,\n-            call_expr.span,\n+            call_expr,\n             inputs,\n             &expected_arg_tys[..],\n             arg_exprs,\n@@ -439,7 +439,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn confirm_deferred_closure_call(\n         &self,\n-        call_expr: &hir::Expr,\n+        call_expr: &'tcx hir::Expr,\n         arg_exprs: &'tcx [hir::Expr],\n         expected: Expectation<'tcx>,\n         fn_sig: ty::FnSig<'tcx>,\n@@ -458,7 +458,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.check_argument_types(\n             call_expr.span,\n-            call_expr.span,\n+            call_expr,\n             fn_sig.inputs(),\n             &expected_arg_tys,\n             arg_exprs,\n@@ -472,14 +472,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn confirm_overloaded_call(\n         &self,\n-        call_expr: &hir::Expr,\n+        call_expr: &'tcx hir::Expr,\n         arg_exprs: &'tcx [hir::Expr],\n         expected: Expectation<'tcx>,\n         method_callee: MethodCallee<'tcx>,\n     ) -> Ty<'tcx> {\n         let output_type = self.check_method_argument_types(\n             call_expr.span,\n-            call_expr.span,\n+            call_expr,\n             Ok(method_callee),\n             arg_exprs,\n             TupleArgumentsFlag::TupleArguments,"}, {"sha": "e34a2c6f61c24dd5139f45258dc5907658bd2281", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -796,7 +796,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Call the generic checker.\n         self.check_method_argument_types(\n             span,\n-            expr.span,\n+            expr,\n             method,\n             &args[1..],\n             DontTupleArguments,"}, {"sha": "38071a9e74da879792124e8e7715da558541b366", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 107, "deletions": 24, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2617,16 +2617,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// As `instantiate_type_scheme`, but for the bounds found in a\n     /// generic type scheme.\n-    fn instantiate_bounds(&self, span: Span, def_id: DefId, substs: SubstsRef<'tcx>)\n-                          -> ty::InstantiatedPredicates<'tcx> {\n+    fn instantiate_bounds(\n+        &self,\n+        span: Span,\n+        def_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+    ) -> (ty::InstantiatedPredicates<'tcx>, Vec<Span>) {\n         let bounds = self.tcx.predicates_of(def_id);\n+        let spans: Vec<Span> = bounds.predicates.iter().map(|(_, span)| *span).collect();\n         let result = bounds.instantiate(self.tcx, substs);\n         let result = self.normalize_associated_types_in(span, &result);\n-        debug!(\"instantiate_bounds(bounds={:?}, substs={:?}) = {:?}\",\n+        debug!(\n+            \"instantiate_bounds(bounds={:?}, substs={:?}) = {:?}, {:?}\",\n                bounds,\n                substs,\n-               result);\n-        result\n+            result,\n+            spans,\n+        );\n+        (result, spans)\n     }\n \n     /// Replaces the opaque types from the given value with type variables,\n@@ -3062,12 +3070,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_method_argument_types(\n         &self,\n         sp: Span,\n-        expr_sp: Span,\n+        expr: &'tcx hir::Expr,\n         method: Result<MethodCallee<'tcx>, ()>,\n         args_no_rcvr: &'tcx [hir::Expr],\n         tuple_arguments: TupleArgumentsFlag,\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n+\n         let has_error = match method {\n             Ok(method) => {\n                 method.substs.references_error() || method.sig.references_error()\n@@ -3082,8 +3091,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 TupleArguments => vec![self.tcx.intern_tup(&err_inputs[..])],\n             };\n \n-            self.check_argument_types(sp, expr_sp, &err_inputs[..], &[], args_no_rcvr,\n-                                      false, tuple_arguments, None);\n+            self.check_argument_types(\n+                sp,\n+                expr,\n+                &err_inputs[..],\n+                &[],\n+                args_no_rcvr,\n+                false,\n+                tuple_arguments,\n+                None,\n+            );\n             return self.tcx.types.err;\n         }\n \n@@ -3095,9 +3112,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             method.sig.output(),\n             &method.sig.inputs()[1..]\n         );\n-        self.check_argument_types(sp, expr_sp, &method.sig.inputs()[1..], &expected_arg_tys[..],\n-                                  args_no_rcvr, method.sig.c_variadic, tuple_arguments,\n-                                  self.tcx.hir().span_if_local(method.def_id));\n+        self.check_argument_types(\n+            sp,\n+            expr,\n+            &method.sig.inputs()[1..],\n+            &expected_arg_tys[..],\n+            args_no_rcvr,\n+            method.sig.c_variadic,\n+            tuple_arguments,\n+            self.tcx.hir().span_if_local(method.def_id),\n+        );\n         method.sig.output()\n     }\n \n@@ -3174,7 +3198,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_argument_types(\n         &self,\n         sp: Span,\n-        expr_sp: Span,\n+        expr: &'tcx hir::Expr,\n         fn_inputs: &[Ty<'tcx>],\n         expected_arg_tys: &[Ty<'tcx>],\n         args: &'tcx [hir::Expr],\n@@ -3183,7 +3207,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         def_span: Option<Span>,\n     ) {\n         let tcx = self.tcx;\n-\n         // Grab the argument types, supplying fresh type variables\n         // if the wrong number of arguments were supplied\n         let supplied_arg_count = if tuple_arguments == DontTupleArguments {\n@@ -3194,8 +3217,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // All the input types from the fn signature must outlive the call\n         // so as to validate implied bounds.\n-        for &fn_input_ty in fn_inputs {\n-            self.register_wf_obligation(fn_input_ty, sp, traits::MiscObligation);\n+        for (fn_input_ty, arg_expr) in fn_inputs.iter().zip(args.iter()) {\n+            self.register_wf_obligation(fn_input_ty, arg_expr.span, traits::MiscObligation);\n         }\n \n         let expected_arg_count = fn_inputs.len();\n@@ -3217,7 +3240,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.span_label(def_s, \"defined here\");\n             }\n             if sugg_unit {\n-                let sugg_span = tcx.sess.source_map().end_point(expr_sp);\n+                let sugg_span = tcx.sess.source_map().end_point(expr.span);\n                 // remove closing `)` from the span\n                 let sugg_span = sugg_span.shrink_to_lo();\n                 err.span_suggestion(\n@@ -3311,6 +3334,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // the call. This helps coercions.\n             if check_closures {\n                 self.select_obligations_where_possible(false, |errors| {\n+                    self.point_at_type_arg_instead_of_call_if_possible(errors, expr);\n                     self.point_at_arg_instead_of_call_if_possible(\n                         errors,\n                         &final_arg_types[..],\n@@ -3448,6 +3472,50 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Given a vec of evaluated `FullfillmentError`s and an `fn` call expression, we walk the\n+    /// `PathSegment`s and resolve their type parameters to see if any of the `FullfillmentError`s\n+    /// were caused by them. If they were, we point at the corresponding type argument's span\n+    /// instead of the `fn` call path span.\n+    fn point_at_type_arg_instead_of_call_if_possible(\n+        &self,\n+        errors: &mut Vec<traits::FulfillmentError<'_>>,\n+        call_expr: &'tcx hir::Expr,\n+    ) {\n+        if let hir::ExprKind::Call(path, _) = &call_expr.node {\n+            if let hir::ExprKind::Path(qpath) = &path.node {\n+                if let hir::QPath::Resolved(_, path) = &qpath {\n+                    for error in errors {\n+                        if let ty::Predicate::Trait(predicate) = error.obligation.predicate {\n+                            // If any of the type arguments in this path segment caused the\n+                            // `FullfillmentError`, point at its span (#61860).\n+                            for arg in path.segments.iter()\n+                                .filter_map(|seg| seg.args.as_ref())\n+                                .flat_map(|a| a.args.iter())\n+                            {\n+                                if let hir::GenericArg::Type(hir_ty) = &arg {\n+                                    if let hir::TyKind::Path(\n+                                        hir::QPath::TypeRelative(..),\n+                                    ) = &hir_ty.node {\n+                                        // Avoid ICE with associated types. As this is best\n+                                        // effort only, it's ok to ignore the case. It\n+                                        // would trigger in `is_send::<T::AssocType>();`\n+                                        // from `typeck-default-trait-impl-assoc-type.rs`.\n+                                    } else {\n+                                        let ty = AstConv::ast_ty_to_ty(self, hir_ty);\n+                                        let ty = self.resolve_vars_if_possible(&ty);\n+                                        if ty == predicate.skip_binder().self_ty() {\n+                                            error.obligation.cause.span = hir_ty.span;\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     // AST fragment checking\n     fn check_lit(&self,\n                  lit: &hir::Lit,\n@@ -3604,7 +3672,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.write_user_type_annotation_from_substs(hir_id, did, substs, None);\n \n             // Check bounds on type arguments used in the path.\n-            let bounds = self.instantiate_bounds(path_span, did, substs);\n+            let (bounds, _) = self.instantiate_bounds(path_span, did, substs);\n             let cause = traits::ObligationCause::new(\n                 path_span,\n                 self.body_id,\n@@ -4728,13 +4796,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // First, store the \"user substs\" for later.\n         self.write_user_type_annotation_from_substs(hir_id, def_id, substs, user_self_ty);\n \n-        // Add all the obligations that are required, substituting and\n-        // normalized appropriately.\n-        let bounds = self.instantiate_bounds(span, def_id, &substs);\n-        self.add_obligations_for_parameters(\n-            traits::ObligationCause::new(span, self.body_id, traits::ItemObligation(def_id)),\n-            &bounds,\n-        );\n+        self.add_required_obligations(span, def_id, &substs);\n \n         // Substitute the values for the type parameters into the type of\n         // the referenced item.\n@@ -4771,6 +4833,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         (ty_substituted, res)\n     }\n \n+    /// Add all the obligations that are required, substituting and normalized appropriately.\n+    fn add_required_obligations(&self, span: Span, def_id: DefId, substs: &SubstsRef<'tcx>) {\n+        let (bounds, spans) = self.instantiate_bounds(span, def_id, &substs);\n+\n+        for (i, mut obligation) in traits::predicates_for_generics(\n+            traits::ObligationCause::new(\n+                span,\n+                self.body_id,\n+                traits::ItemObligation(def_id),\n+            ),\n+            self.param_env,\n+            &bounds,\n+        ).into_iter().enumerate() {\n+            // This makes the error point at the bound, but we want to point at the argument\n+            if let Some(span) = spans.get(i) {\n+                obligation.cause.code = traits::BindingObligation(def_id, *span);\n+            }\n+            self.register_predicate(obligation);\n+        }\n+    }\n+\n     fn check_rustc_args_require_const(&self,\n                                       def_id: DefId,\n                                       hir_id: hir::HirId,"}, {"sha": "87839f8c70ee83641254b6e28c4c4ce3c723d72e", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -129,10 +129,11 @@ impl<'a> Parser<'a> {\n         self.parse_path(style)\n     }\n \n-    crate fn parse_path_segments(&mut self,\n-                           segments: &mut Vec<PathSegment>,\n-                           style: PathStyle)\n-                           -> PResult<'a, ()> {\n+    crate fn parse_path_segments(\n+        &mut self,\n+        segments: &mut Vec<PathSegment>,\n+        style: PathStyle,\n+    ) -> PResult<'a, ()> {\n         loop {\n             let segment = self.parse_path_segment(style)?;\n             if style == PathStyle::Expr {\n@@ -201,7 +202,7 @@ impl<'a> Parser<'a> {\n             } else {\n                 // `(T, U) -> R`\n                 let (inputs, _) = self.parse_paren_comma_seq(|p| p.parse_ty())?;\n-                let span = lo.to(self.prev_span);\n+                let span = ident.span.to(self.prev_span);\n                 let output = if self.eat(&token::RArrow) {\n                     Some(self.parse_ty_common(false, false, false)?)\n                 } else {"}, {"sha": "fbe2d192d0cce3584b84e39c13605f5ec253b0c6", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -7,7 +7,7 @@ LL |     f1(|_: (), _: ()| {});\n    |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n ...\n LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n-   | ------------------------------------ required by `f1`\n+   |    --                   ------------ required by this bound in `f1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:2:5\n@@ -18,7 +18,7 @@ LL |     f1(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), &()) -> _`\n ...\n LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n-   | ------------------------------------ required by `f1`\n+   |    --                   ------------ required by this bound in `f1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n@@ -29,7 +29,7 @@ LL |     f2(|_: (), _: ()| {});\n    |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n ...\n LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n-   | ----------------------------------------------- required by `f2`\n+   |    --                   ----------------------- required by this bound in `f2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n@@ -40,7 +40,7 @@ LL |     f2(|_: (), _: ()| {});\n    |     expected signature of `fn(&'a (), &()) -> _`\n ...\n LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n-   | ----------------------------------------------- required by `f2`\n+   |    --                           --------------- required by this bound in `f2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n@@ -51,7 +51,7 @@ LL |     f3(|_: (), _: ()| {});\n    |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n ...\n LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n-   | ------------------------------------------- required by `f3`\n+   |    --                       --------------- required by this bound in `f3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n@@ -62,7 +62,7 @@ LL |     f3(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), &()) -> _`\n ...\n LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n-   | ------------------------------------------- required by `f3`\n+   |    --                       --------------- required by this bound in `f3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n@@ -73,7 +73,7 @@ LL |     f4(|_: (), _: ()| {});\n    |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n ...\n LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n-   | ----------------------------------------------- required by `f4`\n+   |    --                   ----------------------- required by this bound in `f4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n@@ -84,7 +84,7 @@ LL |     f4(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), &'r ()) -> _`\n ...\n LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n-   | ----------------------------------------------- required by `f4`\n+   |    --                           --------------- required by this bound in `f4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n@@ -95,7 +95,7 @@ LL |     f5(|_: (), _: ()| {});\n    |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n ...\n LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n-   | -------------------------------------------------- required by `f5`\n+   |    --                   -------------------------- required by this bound in `f5`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n@@ -106,7 +106,7 @@ LL |     f5(|_: (), _: ()| {});\n    |     expected signature of `fn(&'r (), &'r ()) -> _`\n ...\n LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n-   | -------------------------------------------------- required by `f5`\n+   |    --                           ------------------ required by this bound in `f5`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n@@ -117,7 +117,7 @@ LL |     g1(|_: (), _: ()| {});\n    |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>) -> _`\n ...\n LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n-   | ------------------------------------------------- required by `g1`\n+   |    --                   ------------------------- required by this bound in `g1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n@@ -128,7 +128,7 @@ LL |     g1(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n ...\n LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n-   | ------------------------------------------------- required by `g1`\n+   |    --                   ------------------------- required by this bound in `g1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n@@ -139,7 +139,7 @@ LL |     g2(|_: (), _: ()| {});\n    |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n ...\n LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n-   | ---------------------------------------- required by `g2`\n+   |    --                   ---------------- required by this bound in `g2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n@@ -150,7 +150,7 @@ LL |     g2(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), for<'r> fn(&'r ())) -> _`\n ...\n LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n-   | ---------------------------------------- required by `g2`\n+   |    --                   ---------------- required by this bound in `g2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n@@ -161,7 +161,7 @@ LL |     g3(|_: (), _: ()| {});\n    |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n ...\n LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n-   | ------------------------------------------------------------ required by `g3`\n+   |    --                   ------------------------------------ required by this bound in `g3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n@@ -172,7 +172,7 @@ LL |     g3(|_: (), _: ()| {});\n    |     expected signature of `fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n ...\n LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n-   | ------------------------------------------------------------ required by `g3`\n+   |    --                           ---------------------------- required by this bound in `g3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n@@ -183,7 +183,7 @@ LL |     g4(|_: (), _: ()| {});\n    |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n ...\n LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n-   | --------------------------------------------------- required by `g4`\n+   |    --                   --------------------------- required by this bound in `g4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n@@ -194,7 +194,7 @@ LL |     g4(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), for<'r> fn(&'r ())) -> _`\n ...\n LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n-   | --------------------------------------------------- required by `g4`\n+   |    --                   --------------------------- required by this bound in `g4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n@@ -205,7 +205,7 @@ LL |     h1(|_: (), _: (), _: (), _: ()| {});\n    |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<(dyn for<'t0> std::ops::Fn(&'t0 ()) + 'static)>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n ...\n LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n-   | -------------------------------------------------------------------- required by `h1`\n+   |    --                   -------------------------------------------- required by this bound in `h1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n@@ -216,7 +216,7 @@ LL |     h1(|_: (), _: (), _: (), _: ()| {});\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>, &(), for<'r, 's> fn(&'r (), &'s ())) -> _`\n ...\n LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n-   | -------------------------------------------------------------------- required by `h1`\n+   |    --                   -------------------------------------------- required by this bound in `h1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n@@ -227,7 +227,7 @@ LL |     h2(|_: (), _: (), _: (), _: ()| {});\n    |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n ...\n LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n-   | --------------------------------------------------------------------------------- required by `h2`\n+   |    --                   --------------------------------------------------------- required by this bound in `h2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n@@ -238,7 +238,7 @@ LL |     h2(|_: (), _: (), _: (), _: ()| {});\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>, &'t0 (), for<'r, 's> fn(&'r (), &'s ())) -> _`\n ...\n LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n-   | --------------------------------------------------------------------------------- required by `h2`\n+   |    --                            ------------------------------------------------ required by this bound in `h2`\n \n error: aborting due to 22 previous errors\n "}, {"sha": "6a2135ca46445bceacffd8e7627cfcc74ff0cf2a", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:31:10\n    |\n LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n-   | ------------------------------------ required by `blue_car`\n+   |    --------       ---------- required by this bound in `blue_car`\n ...\n LL | fn b() { blue_car(ModelT); }\n    |          ^^^^^^^^ expected struct `Black`, found struct `Blue`\n@@ -14,7 +14,7 @@ error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:32:10\n    |\n LL | fn black_car<C:Car<Color=Black>>(c: C) {\n-   | -------------------------------------- required by `black_car`\n+   |    ---------       ----------- required by this bound in `black_car`\n ...\n LL | fn c() { black_car(ModelU); }\n    |          ^^^^^^^^^ expected struct `Blue`, found struct `Black`"}, {"sha": "83d89924944ab9202b8b4c1d15ef39e86fd1c628", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -13,7 +13,7 @@ error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:38:5\n    |\n LL | fn foo1<I: Foo<A=Bar>>(x: I) {\n-   | ---------------------------- required by `foo1`\n+   |    ----        ----- required by this bound in `foo1`\n ...\n LL |     foo1(a);\n    |     ^^^^ expected usize, found struct `Bar`"}, {"sha": "45b6cc9ba5f982761c276dc5c26148064aa5ed72", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 45, "deletions": 59, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,105 +1,91 @@\n error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n   --> $DIR/associated-types-eq-hr.rs:82:5\n    |\n-LL | / fn foo<T>()\n-LL | |     where T : for<'x> TheTrait<&'x isize, A = &'x isize>\n-LL | | {\n-LL | |     // ok for IntStruct, but not UintStruct\n-LL | | }\n-   | |_- required by `foo`\n+LL | fn foo<T>()\n+   |    ---\n+LL |     where T : for<'x> TheTrait<&'x isize, A = &'x isize>\n+   |                                           ------------- required by this bound in `foo`\n ...\n-LL |       foo::<UintStruct>();\n-   |       ^^^^^^^^^^^^^^^^^ expected usize, found isize\n+LL |     foo::<UintStruct>();\n+   |     ^^^^^^^^^^^^^^^^^ expected usize, found isize\n    |\n    = note: expected type `&usize`\n               found type `&isize`\n \n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n   --> $DIR/associated-types-eq-hr.rs:86:5\n    |\n-LL | / fn bar<T>()\n-LL | |     where T : for<'x> TheTrait<&'x isize, A = &'x usize>\n-LL | | {\n-LL | |     // ok for UintStruct, but not IntStruct\n-LL | | }\n-   | |_- required by `bar`\n+LL | fn bar<T>()\n+   |    ---\n+LL |     where T : for<'x> TheTrait<&'x isize, A = &'x usize>\n+   |                                           ------------- required by this bound in `bar`\n ...\n-LL |       bar::<IntStruct>();\n-   |       ^^^^^^^^^^^^^^^^ expected isize, found usize\n+LL |     bar::<IntStruct>();\n+   |     ^^^^^^^^^^^^^^^^ expected isize, found usize\n    |\n    = note: expected type `&isize`\n               found type `&usize`\n \n error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n-  --> $DIR/associated-types-eq-hr.rs:91:5\n+  --> $DIR/associated-types-eq-hr.rs:91:17\n    |\n-LL | / fn tuple_one<T>()\n-LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n-LL | | {\n-LL | |     // not ok for tuple, two lifetimes and we pick first\n-LL | | }\n-   | |_- required by `tuple_one`\n+LL | fn tuple_one<T>()\n+   |    ---------\n+LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n+   |               ---------------------------------------------------------- required by this bound in `tuple_one`\n ...\n-LL |       tuple_one::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+LL |     tuple_one::<Tuple>();\n+   |                 ^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n    |\n    = help: the following implementations were found:\n              <Tuple as TheTrait<(&'a isize, &'a isize)>>\n \n error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize, &'y isize)>>::A == &'x isize`\n   --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n-LL | / fn tuple_one<T>()\n-LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n-LL | | {\n-LL | |     // not ok for tuple, two lifetimes and we pick first\n-LL | | }\n-   | |_- required by `tuple_one`\n+LL | fn tuple_one<T>()\n+   |    ---------\n+LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n+   |                                                           ------------- required by this bound in `tuple_one`\n ...\n-LL |       tuple_one::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n+LL |     tuple_one::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n \n error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n-  --> $DIR/associated-types-eq-hr.rs:97:5\n+  --> $DIR/associated-types-eq-hr.rs:97:17\n    |\n-LL | / fn tuple_two<T>()\n-LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n-LL | | {\n-LL | |     // not ok for tuple, two lifetimes and we pick second\n-LL | | }\n-   | |_- required by `tuple_two`\n+LL | fn tuple_two<T>()\n+   |    ---------\n+LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n+   |               ---------------------------------------------------------- required by this bound in `tuple_two`\n ...\n-LL |       tuple_two::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+LL |     tuple_two::<Tuple>();\n+   |                 ^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n    |\n    = help: the following implementations were found:\n              <Tuple as TheTrait<(&'a isize, &'a isize)>>\n \n error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize, &'y isize)>>::A == &'y isize`\n   --> $DIR/associated-types-eq-hr.rs:97:5\n    |\n-LL | / fn tuple_two<T>()\n-LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n-LL | | {\n-LL | |     // not ok for tuple, two lifetimes and we pick second\n-LL | | }\n-   | |_- required by `tuple_two`\n+LL | fn tuple_two<T>()\n+   |    ---------\n+LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n+   |                                                           ------------- required by this bound in `tuple_two`\n ...\n-LL |       tuple_two::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n+LL |     tuple_two::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n \n error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n-  --> $DIR/associated-types-eq-hr.rs:107:5\n+  --> $DIR/associated-types-eq-hr.rs:107:18\n    |\n-LL | / fn tuple_four<T>()\n-LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize)>\n-LL | | {\n-LL | |     // not ok for tuple, two lifetimes, and lifetime matching is invariant\n-LL | | }\n-   | |_- required by `tuple_four`\n+LL | fn tuple_four<T>()\n+   |    ----------\n+LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize)>\n+   |               ------------------------------------------- required by this bound in `tuple_four`\n ...\n-LL |       tuple_four::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+LL |     tuple_four::<Tuple>();\n+   |                  ^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n    |\n    = help: the following implementations were found:\n              <Tuple as TheTrait<(&'a isize, &'a isize)>>"}, {"sha": "c8f8725afc45cd9ec7465fbc9abb89f58f53bd7b", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<Adapter<I> as Iterator>::Item == std::op\n   --> $DIR/associated-types-issue-20346.rs:34:5\n    |\n LL | fn is_iterator_of<A, I: Iterator<Item=A>>(_: &I) {}\n-   | ------------------------------------------------ required by `is_iterator_of`\n+   |    --------------                ------ required by this bound in `is_iterator_of`\n ...\n LL |     is_iterator_of::<Option<T>, _>(&adapter);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter, found enum `std::option::Option`"}, {"sha": "c7de186c1d3e072a680c085793a542e1f585b3fc", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -5,7 +5,7 @@ LL |     want_y(t);\n    |     ^^^^^^ expected associated type, found i32\n ...\n LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n-   | ------------------------------ required by `want_y`\n+   |    ------       ----- required by this bound in `want_y`\n    |\n    = note: expected type `<T as Foo>::Y`\n               found type `i32`\n@@ -19,7 +19,7 @@ LL |     want_x(t);\n    |     ^^^^^^ expected associated type, found u32\n ...\n LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n-   | ------------------------------ required by `want_x`\n+   |    ------       ----- required by this bound in `want_x`\n    |\n    = note: expected type `<T as Foo>::X`\n               found type `u32`"}, {"sha": "bb2e7251849d3e7720c5a6dfd1f28d64d2f70900", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -12,7 +12,7 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:29:5\n    |\n LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n-   | -------------------------------- required by `f1`\n+   |        --    --- required by this bound in `f1`\n ...\n LL |     f1(2u32, 4u32);\n    |     ^^ the trait `Foo` is not implemented for `u32`\n@@ -27,7 +27,7 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:35:5\n    |\n LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n-   | -------------------------------- required by `f1`\n+   |        --    --- required by this bound in `f1`\n ...\n LL |     f1(2u32, 4i32);\n    |     ^^ the trait `Foo` is not implemented for `u32`"}, {"sha": "74c9ad2c39e67f36f37334d19aa6ebb729425812", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,13 +1,13 @@\n error[E0271]: type mismatch resolving `for<'a> <&'a _ as Mirror>::Image == _`\n   --> $DIR/higher-ranked-projection.rs:25:5\n    |\n-LL | / fn foo<U, T>(_t: T)\n-LL | |     where for<'a> &'a T: Mirror<Image=U>\n-LL | | {}\n-   | |__- required by `foo`\n+LL | fn foo<U, T>(_t: T)\n+   |    ---\n+LL |     where for<'a> &'a T: Mirror<Image=U>\n+   |                                 ------- required by this bound in `foo`\n ...\n-LL |       foo(());\n-   |       ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n+LL |     foo(());\n+   |     ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n \n error: aborting due to previous error\n "}, {"sha": "001e0b1cad305879d094bff49f2c6c93ffd4d272", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n   --> $DIR/async-fn-nonsend.rs:50:5\n    |\n LL | fn assert_send(_: impl Send) {}\n-   | ---------------------------- required by `assert_send`\n+   |    -----------         ---- required by this bound in `assert_send`\n ...\n LL |     assert_send(local_dropped_before_await());\n    |     ^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n@@ -19,7 +19,7 @@ error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n   --> $DIR/async-fn-nonsend.rs:52:5\n    |\n LL | fn assert_send(_: impl Send) {}\n-   | ---------------------------- required by `assert_send`\n+   |    -----------         ---- required by this bound in `assert_send`\n ...\n LL |     assert_send(non_send_temporary_in_match());\n    |     ^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n@@ -36,7 +36,7 @@ error[E0277]: `dyn std::fmt::Write` cannot be sent between threads safely\n   --> $DIR/async-fn-nonsend.rs:54:5\n    |\n LL | fn assert_send(_: impl Send) {}\n-   | ---------------------------- required by `assert_send`\n+   |    -----------         ---- required by this bound in `assert_send`\n ...\n LL |     assert_send(non_sync_with_method_call());\n    |     ^^^^^^^^^^^ `dyn std::fmt::Write` cannot be sent between threads safely\n@@ -55,7 +55,7 @@ error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between thr\n   --> $DIR/async-fn-nonsend.rs:54:5\n    |\n LL | fn assert_send(_: impl Send) {}\n-   | ---------------------------- required by `assert_send`\n+   |    -----------         ---- required by this bound in `assert_send`\n ...\n LL |     assert_send(non_sync_with_method_call());\n    |     ^^^^^^^^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely"}, {"sha": "788474365c9e5aaaf1ad537f54d0a4f27f595e58", "filename": "src/test/ui/async-await/issues/issue-62009-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,4 +1,6 @@\n // edition:2018\n+// ignore-x86\n+// ^ due to stderr output differences\n \n async fn print_dur() {}\n "}, {"sha": "f63eaa4c48a97ea5100937f4d48e1f8852fb2ea8", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,13 +1,13 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:6:5\n+  --> $DIR/issue-62009-1.rs:8:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     async { let (); }.await;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:8:5\n+  --> $DIR/issue-62009-1.rs:10:5\n    |\n LL |   fn main() {\n    |      ---- this is not `async`\n@@ -19,21 +19,24 @@ LL | |     }.await;\n    | |___________^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:12:5\n+  --> $DIR/issue-62009-1.rs:14:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n ...\n LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n-error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]: std::future::Future` is not satisfied\n-  --> $DIR/issue-62009-1.rs:12:5\n+error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]: std::future::Future` is not satisfied\n+  --> $DIR/issue-62009-1.rs:14:5\n    |\n LL |     (|_| 2333).await;\n-   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n+   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]`\n+   | \n+  ::: $SRC_DIR/libstd/future.rs:LL:COL\n    |\n-   = note: required by `std::future::poll_with_tls_context`\n+LL |     F: Future\n+   |        ------ required by this bound in `std::future::poll_with_tls_context`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c6bc306e45a1c2274d80a8147eaebeb8791fe633", "filename": "src/test/ui/chalkify/type_inference.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -11,7 +11,7 @@ error[E0277]: the trait bound `{float}: Bar` is not satisfied\n   --> $DIR/type_inference.rs:25:5\n    |\n LL | fn only_bar<T: Bar>(_x: T) { }\n-   | -------------------------- required by `only_bar`\n+   |    --------    --- required by this bound in `only_bar`\n ...\n LL |     only_bar(x);\n    |     ^^^^^^^^ the trait `Bar` is not implemented for `{float}`"}, {"sha": "a6b52b258f005084002c61dcb366e41f9164a98f", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.nll.stderr", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,44 +1,41 @@\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:30:5\n    |\n-LL | / fn with_closure_expecting_fn_with_free_region<F>(_: F)\n-LL | |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_- required by `with_closure_expecting_fn_with_free_region`\n+LL | fn with_closure_expecting_fn_with_free_region<F>(_: F)\n+   |    ------------------------------------------\n+LL |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n+   |                      ------------------------- required by this bound in `with_closure_expecting_fn_with_free_region`\n ...\n-LL |       with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n-   |       |\n-   |       expected signature of `fn(fn(&'a u32), &i32) -> _`\n+LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(fn(&'a u32), &i32) -> _`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:37:5\n    |\n-LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-LL | |     where F: FnOnce(fn(&u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_- required by `with_closure_expecting_fn_with_bound_region`\n+LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n+   |    -------------------------------------------\n+LL |     where F: FnOnce(fn(&u32), &i32)\n+   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n ...\n-LL |       with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n-   |       |\n-   |       expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:46:5\n    |\n-LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-LL | |     where F: FnOnce(fn(&u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_- required by `with_closure_expecting_fn_with_bound_region`\n+LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n+   |    -------------------------------------------\n+LL |     where F: FnOnce(fn(&u32), &i32)\n+   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n ...\n-LL |       with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n-   |       |\n-   |       expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ac4666fe36de6c92e2266e08fc327de84a39d06a", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -39,44 +39,41 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:30:5\n    |\n-LL | / fn with_closure_expecting_fn_with_free_region<F>(_: F)\n-LL | |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_- required by `with_closure_expecting_fn_with_free_region`\n+LL | fn with_closure_expecting_fn_with_free_region<F>(_: F)\n+   |    ------------------------------------------\n+LL |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n+   |                      ------------------------- required by this bound in `with_closure_expecting_fn_with_free_region`\n ...\n-LL |       with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n-   |       |\n-   |       expected signature of `fn(fn(&'a u32), &i32) -> _`\n+LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(fn(&'a u32), &i32) -> _`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:37:5\n    |\n-LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-LL | |     where F: FnOnce(fn(&u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_- required by `with_closure_expecting_fn_with_bound_region`\n+LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n+   |    -------------------------------------------\n+LL |     where F: FnOnce(fn(&u32), &i32)\n+   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n ...\n-LL |       with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n-   |       |\n-   |       expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:46:5\n    |\n-LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-LL | |     where F: FnOnce(fn(&u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_- required by `with_closure_expecting_fn_with_bound_region`\n+LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n+   |    -------------------------------------------\n+LL |     where F: FnOnce(fn(&u32), &i32)\n+   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n ...\n-LL |       with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n-   |       |\n-   |       expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "9fbe95a9c39451edc207498bb60e653575b65fbf", "filename": "src/test/ui/closure-expected-type/expect-infer-var-appearing-twice.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,16 +1,15 @@\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-infer-var-appearing-twice.rs:14:5\n    |\n-LL | / fn with_closure<F, A>(_: F)\n-LL | |     where F: FnOnce(A, A)\n-LL | | {\n-LL | | }\n-   | |_- required by `with_closure`\n+LL | fn with_closure<F, A>(_: F)\n+   |    ------------\n+LL |     where F: FnOnce(A, A)\n+   |              ------------ required by this bound in `with_closure`\n ...\n-LL |       with_closure(|x: u32, y: i32| {\n-   |       ^^^^^^^^^^^^ ---------------- found signature of `fn(u32, i32) -> _`\n-   |       |\n-   |       expected signature of `fn(_, _) -> _`\n+LL |     with_closure(|x: u32, y: i32| {\n+   |     ^^^^^^^^^^^^ ---------------- found signature of `fn(u32, i32) -> _`\n+   |     |\n+   |     expected signature of `fn(_, _) -> _`\n \n error: aborting due to previous error\n "}, {"sha": "4b703eded69c361b1b81b5a80f6625c0cff11c90", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `F` cannot be shared between threads safely\n   --> $DIR/closure-bounds-subtype.rs:13:22\n    |\n LL | fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n-   | ------------------------------------------------------------ required by `take_const_owned`\n+   |    ----------------                              ---- required by this bound in `take_const_owned`\n ...\n LL |     take_const_owned(f);\n    |                      ^ `F` cannot be shared between threads safely"}, {"sha": "951a3bcb5f4233d73a9086d3cc2469983367b9ff", "filename": "src/test/ui/closures/closure-move-sync.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n use std::thread;\n use std::sync::mpsc::channel;\n "}, {"sha": "f676df9c559ebc67e3d889b4d0ca3287181e5b61", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,24 +1,32 @@\n error[E0277]: `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n-  --> $DIR/closure-move-sync.rs:6:13\n+  --> $DIR/closure-move-sync.rs:8:13\n    |\n LL |     let t = thread::spawn(|| {\n    |             ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n+   | \n+  ::: $SRC_DIR/libstd/thread/mod.rs:LL:COL\n+   |\n+LL |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n+   |                          ---- required by this bound in `std::thread::spawn`\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::sync::mpsc::Receiver<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:6:27: 9:6 recv:&std::sync::mpsc::Receiver<()>]`\n-   = note: required by `std::thread::spawn`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:8:27: 11:6 recv:&std::sync::mpsc::Receiver<()>]`\n \n error[E0277]: `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n-  --> $DIR/closure-move-sync.rs:18:5\n+  --> $DIR/closure-move-sync.rs:20:5\n    |\n LL |     thread::spawn(|| tx.send(()).unwrap());\n    |     ^^^^^^^^^^^^^ `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n+   | \n+  ::: $SRC_DIR/libstd/thread/mod.rs:LL:COL\n+   |\n+LL |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n+   |                          ---- required by this bound in `std::thread::spawn`\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender<()>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::sync::mpsc::Sender<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:18:19: 18:42 tx:&std::sync::mpsc::Sender<()>]`\n-   = note: required by `std::thread::spawn`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:20:19: 20:42 tx:&std::sync::mpsc::Sender<()>]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d3fb8a09414ce1351f8f347ffb626320ac82c4a1", "filename": "src/test/ui/defaulted-never-note.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fdefaulted-never-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fdefaulted-never-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdefaulted-never-note.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -19,7 +19,8 @@ trait ImplementedForUnitButNotNever {}\n impl ImplementedForUnitButNotNever for () {}\n \n fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n-//~^ NOTE required by `foo`\n+//~^ NOTE required by this bound in `foo`\n+//~| NOTE\n \n fn smeg() {\n     let _x = return;"}, {"sha": "28c9da059edaaa47d760948a20dedc08195f9ef6", "filename": "src/test/ui/defaulted-never-note.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fdefaulted-never-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fdefaulted-never-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdefaulted-never-note.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `!: ImplementedForUnitButNotNever` is not satisfied\n-  --> $DIR/defaulted-never-note.rs:26:5\n+  --> $DIR/defaulted-never-note.rs:27:5\n    |\n LL | fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n-   | ----------------------------------------------- required by `foo`\n+   |    ---    ----------------------------- required by this bound in `foo`\n ...\n LL |     foo(_x);\n    |     ^^^ the trait `ImplementedForUnitButNotNever` is not implemented for `!`"}, {"sha": "ed87360a0be9fec5aefd7da2bb8b2aeb613b19e5", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "708ebca9fb15306c14d4a1699255bce345035e88", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,10 +1,13 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-enum-struct-variant.rs:9:6\n+  --> $DIR/derives-span-Hash-enum-struct-variant.rs:11:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ the trait `std::hash::Hash` is not implemented for `Error`\n+   | \n+  ::: $SRC_DIR/libcore/hash/mod.rs:LL:COL\n    |\n-   = note: required by `std::hash::Hash::hash`\n+LL |     fn hash<H: Hasher>(&self, state: &mut H);\n+   |             - required by this bound in `std::hash::Hash::hash`\n \n error: aborting due to previous error\n "}, {"sha": "5b3649c9826e6160447b470ab658f7d2096ac0e1", "filename": "src/test/ui/derives/derives-span-Hash-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "dc171cbe5dd1374e92a1d02a33b9f0f50a19fdc1", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,10 +1,13 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-enum.rs:9:6\n+  --> $DIR/derives-span-Hash-enum.rs:11:6\n    |\n LL |      Error\n    |      ^^^^^ the trait `std::hash::Hash` is not implemented for `Error`\n+   | \n+  ::: $SRC_DIR/libcore/hash/mod.rs:LL:COL\n    |\n-   = note: required by `std::hash::Hash::hash`\n+LL |     fn hash<H: Hasher>(&self, state: &mut H);\n+   |             - required by this bound in `std::hash::Hash::hash`\n \n error: aborting due to previous error\n "}, {"sha": "ead70861a0ad6854622063947f914cb5beb0f44e", "filename": "src/test/ui/derives/derives-span-Hash-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "429449b82bf64a9e3aef7985bd6cc4bb9eeb6c1c", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,10 +1,13 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-struct.rs:8:5\n+  --> $DIR/derives-span-Hash-struct.rs:10:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ the trait `std::hash::Hash` is not implemented for `Error`\n+   | \n+  ::: $SRC_DIR/libcore/hash/mod.rs:LL:COL\n    |\n-   = note: required by `std::hash::Hash::hash`\n+LL |     fn hash<H: Hasher>(&self, state: &mut H);\n+   |             - required by this bound in `std::hash::Hash::hash`\n \n error: aborting due to previous error\n "}, {"sha": "820f13ed18ef28106e2eb0ed6627cca7b36cfa06", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "a6c4c479b24d71d4cadae2f5ac199fe77a600017", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,10 +1,13 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-tuple-struct.rs:8:5\n+  --> $DIR/derives-span-Hash-tuple-struct.rs:10:5\n    |\n LL |     Error\n    |     ^^^^^ the trait `std::hash::Hash` is not implemented for `Error`\n+   | \n+  ::: $SRC_DIR/libcore/hash/mod.rs:LL:COL\n    |\n-   = note: required by `std::hash::Hash::hash`\n+LL |     fn hash<H: Hasher>(&self, state: &mut H);\n+   |             - required by this bound in `std::hash::Hash::hash`\n \n error: aborting due to previous error\n "}, {"sha": "4cca14ae089e940dda218083f83585b3ee081505", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `C: std::marker::Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:31:13\n    |\n LL | fn is_copy<T: Copy>(_: T) {}\n-   | ------------------------- required by `is_copy`\n+   |    -------    ---- required by this bound in `is_copy`\n ...\n LL |     is_copy(B { a: 1, b: C });\n    |             ^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `C`\n@@ -13,7 +13,7 @@ error[E0277]: the trait bound `C: std::clone::Clone` is not satisfied\n   --> $DIR/deriving-copyclone.rs:32:14\n    |\n LL | fn is_clone<T: Clone>(_: T) {}\n-   | --------------------------- required by `is_clone`\n+   |    --------    ----- required by this bound in `is_clone`\n ...\n LL |     is_clone(B { a: 1, b: C });\n    |              ^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `C`\n@@ -24,7 +24,7 @@ error[E0277]: the trait bound `D: std::marker::Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:35:13\n    |\n LL | fn is_copy<T: Copy>(_: T) {}\n-   | ------------------------- required by `is_copy`\n+   |    -------    ---- required by this bound in `is_copy`\n ...\n LL |     is_copy(B { a: 1, b: D });\n    |             ^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `D`"}, {"sha": "b05b92bf1e94b915a7b0b99f776adbff39013b24", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0275]: overflow evaluating the requirement `J: std::marker::Send`\n   --> $DIR/recursion_limit.rs:34:5\n    |\n LL | fn is_send<T:Send>() { }\n-   | -------------------- required by `is_send`\n+   |    -------   ---- required by this bound in `is_send`\n ...\n LL |     is_send::<A>();\n    |     ^^^^^^^^^^^^"}, {"sha": "bcbd3a91cb951e1326fff0573e5aec028f2faec2", "filename": "src/test/ui/error-codes/E0214.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,11 +1,11 @@\n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/E0214.rs:2:15\n+  --> $DIR/E0214.rs:2:12\n    |\n LL |     let v: Vec(&str) = vec![\"foo\"];\n-   |               ^^^^^^\n-   |               |\n-   |               only `Fn` traits may use parentheses\n-   |               help: use angle brackets instead: `<&str>`\n+   |            ^^^^^^^^^\n+   |            |\n+   |            only `Fn` traits may use parentheses\n+   |            help: use angle brackets instead: `Vec<&str>`\n \n error: aborting due to previous error\n "}, {"sha": "c56853f45a0b0150112d32d1a33a38e1ec8b7f4f", "filename": "src/test/ui/error-codes/E0271.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<i8 as Trait>::AssociatedType == u32`\n   --> $DIR/E0271.rs:10:5\n    |\n LL | fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n-   | -------------------------------------------------- required by `foo`\n+   |    ---                         ------------------ required by this bound in `foo`\n ...\n LL |     foo(3_i8);\n    |     ^^^ expected reference, found u32"}, {"sha": "407e51e4f5f9c5a08a7be211ffe596d61ce0aae3", "filename": "src/test/ui/error-codes/E0277-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `*const u8` cannot be sent between threads safely\n   --> $DIR/E0277-2.rs:16:5\n    |\n LL | fn is_send<T: Send>() { }\n-   | --------------------- required by `is_send`\n+   |    -------    ---- required by this bound in `is_send`\n ...\n LL |     is_send::<Foo>();\n    |     ^^^^^^^^^^^^^^ `*const u8` cannot be sent between threads safely"}, {"sha": "a069d048c88621060e5ebd1840522572362f25a5", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -14,7 +14,7 @@ error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/E0277.rs:17:15\n    |\n LL | fn some_func<T: Foo>(foo: T) {\n-   | ---------------------------- required by `some_func`\n+   |    ---------    --- required by this bound in `some_func`\n ...\n LL |     some_func(5i32);\n    |               ^^^^ the trait `Foo` is not implemented for `i32`"}, {"sha": "d0148f418e33b709cdb43231bb600a65cedfe26d", "filename": "src/test/ui/error-should-say-copy-not-pod.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not sa\n   --> $DIR/error-should-say-copy-not-pod.rs:6:17\n    |\n LL | fn check_bound<T:Copy>(_: T) {}\n-   | ---------------------------- required by `check_bound`\n+   |    -----------   ---- required by this bound in `check_bound`\n ...\n LL |     check_bound(\"nocopy\".to_string());\n    |                 ^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`"}, {"sha": "c395f3875ea0e0419912ab8d2b5dabc55fe08ecc", "filename": "src/test/ui/extern/extern-types-not-sync-send.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,22 +1,22 @@\n error[E0277]: `A` cannot be shared between threads safely\n-  --> $DIR/extern-types-not-sync-send.rs:13:5\n+  --> $DIR/extern-types-not-sync-send.rs:13:19\n    |\n LL | fn assert_sync<T: ?Sized + Sync>() { }\n-   | ---------------------------------- required by `assert_sync`\n+   |    -----------             ---- required by this bound in `assert_sync`\n ...\n LL |     assert_sync::<A>();\n-   |     ^^^^^^^^^^^^^^^^ `A` cannot be shared between threads safely\n+   |                   ^ `A` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `A`\n \n error[E0277]: `A` cannot be sent between threads safely\n-  --> $DIR/extern-types-not-sync-send.rs:16:5\n+  --> $DIR/extern-types-not-sync-send.rs:16:19\n    |\n LL | fn assert_send<T: ?Sized + Send>() { }\n-   | ---------------------------------- required by `assert_send`\n+   |    -----------             ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<A>();\n-   |     ^^^^^^^^^^^^^^^^ `A` cannot be sent between threads safely\n+   |                   ^ `A` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `A`\n "}, {"sha": "0417186eed346c4c91d17203654f62e5a21b0a08", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/extern-types-unsized.rs:22:5\n+  --> $DIR/extern-types-unsized.rs:22:20\n    |\n LL | fn assert_sized<T>() { }\n-   | -------------------- required by `assert_sized`\n+   |    ------------ - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<A>();\n-   |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `A`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n@@ -14,7 +14,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/extern-types-unsized.rs:25:5\n    |\n LL | fn assert_sized<T>() { }\n-   | -------------------- required by `assert_sized`\n+   |    ------------ - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<Foo>();\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -27,7 +27,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/extern-types-unsized.rs:28:5\n    |\n LL | fn assert_sized<T>() { }\n-   | -------------------- required by `assert_sized`\n+   |    ------------ - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<Bar<A>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -40,7 +40,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/extern-types-unsized.rs:31:5\n    |\n LL | fn assert_sized<T>() { }\n-   | -------------------- required by `assert_sized`\n+   |    ------------ - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<Bar<Bar<A>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "9a6af8119a8c596a267b856b5e8571b85030e203", "filename": "src/test/ui/extern/extern-wrong-value-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: expected a `std::ops::Fn<()>` closure, found `extern \"C\" fn() {f}`\n   --> $DIR/extern-wrong-value-type.rs:9:11\n    |\n LL | fn is_fn<F>(_: F) where F: Fn() {}\n-   | ------------------------------- required by `is_fn`\n+   |    -----                   ---- required by this bound in `is_fn`\n ...\n LL |     is_fn(f);\n    |           ^ expected an `Fn<()>` closure, found `extern \"C\" fn() {f}`"}, {"sha": "c05379c71eeaf3d81e0b15c5bb1c4edd902ca9d3", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -44,10 +44,10 @@ LL | impl Fn<()> for Foo {\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0229]: associated type bindings are not allowed here\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:15:12\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:15:6\n    |\n LL | impl FnOnce() for Foo1 {\n-   |            ^^ associated type not allowed here\n+   |      ^^^^^^^^ associated type not allowed here\n \n error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:21:6"}, {"sha": "be6e41afaf81169788ad66b7aae26c18d739c36a", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between thr\n   --> $DIR/send-sync.rs:8:5\n    |\n LL | fn send<T: Send>(_: T) {}\n-   | ---------------------- required by `send`\n+   |    ----    ---- required by this bound in `send`\n ...\n LL |     send(format_args!(\"{:?}\", c));\n    |     ^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n@@ -20,7 +20,7 @@ error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between thr\n   --> $DIR/send-sync.rs:9:5\n    |\n LL | fn sync<T: Sync>(_: T) {}\n-   | ---------------------- required by `sync`\n+   |    ----    ---- required by this bound in `sync`\n ...\n LL |     sync(format_args!(\"{:?}\", c));\n    |     ^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely"}, {"sha": "f891b9c6439bee12a81ef898e11d6a40c26c83ca", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -29,7 +29,7 @@ error[E0277]: expected a `std::ops::Fn<(isize,)>` closure, found `{integer}`\n   --> $DIR/fn-trait-formatting.rs:19:14\n    |\n LL | fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n-   | ------------------------------------------------ required by `needs_fn`\n+   |    --------                   ------------------ required by this bound in `needs_fn`\n ...\n LL |     needs_fn(1);\n    |              ^ expected an `Fn<(isize,)>` closure, found `{integer}`"}, {"sha": "c9a71e03858f144dc66f8aaf0b4b4493cb3ad1a8", "filename": "src/test/ui/generator-yielding-or-returning-itself.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -16,14 +16,13 @@ LL | |     })\n error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 32:6 _] as std::ops::Generator>::Yield == [generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 32:6 _]`\n   --> $DIR/generator-yielding-or-returning-itself.rs:28:5\n    |\n-LL | / pub fn want_cyclic_generator_yield<T>(_: T)\n-LL | |     where T: Generator<Yield = T, Return = ()>\n-LL | | {\n-LL | | }\n-   | |_- required by `want_cyclic_generator_yield`\n+LL | pub fn want_cyclic_generator_yield<T>(_: T)\n+   |        ---------------------------\n+LL |     where T: Generator<Yield = T, Return = ()>\n+   |                        --------- required by this bound in `want_cyclic_generator_yield`\n ...\n-LL |       want_cyclic_generator_yield(|| {\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n+LL |     want_cyclic_generator_yield(|| {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n    |\n    = note: closures cannot capture themselves or take themselves as argument;\n            this error may be the result of a recent compiler bug-fix,"}, {"sha": "620db245d3e57d5b8f599c6b990af827b5980f18", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n   --> $DIR/not-send-sync.rs:16:5\n    |\n LL |     fn assert_send<T: Send>(_: T) {}\n-   |     ----------------------------- required by `main::assert_send`\n+   |        -----------    ---- required by this bound in `main::assert_send`\n ...\n LL |     assert_send(|| {\n    |     ^^^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely\n@@ -15,7 +15,7 @@ error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n   --> $DIR/not-send-sync.rs:9:5\n    |\n LL |     fn assert_sync<T: Sync>(_: T) {}\n-   |     ----------------------------- required by `main::assert_sync`\n+   |        -----------    ---- required by this bound in `main::assert_sync`\n ...\n LL |     assert_sync(|| {\n    |     ^^^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely"}, {"sha": "f2b1078e2b532eb541c4b3179c646bac515d5961", "filename": "src/test/ui/generator/static-not-unpin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `[static generator@$DIR/static-not-unpin.rs:11:25:\n   --> $DIR/static-not-unpin.rs:14:18\n    |\n LL | fn assert_unpin<T: Unpin>(_: T) {\n-   | ------------------------------- required by `assert_unpin`\n+   |    ------------    ----- required by this bound in `assert_unpin`\n ...\n LL |     assert_unpin(generator);\n    |                  ^^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6 _]`"}, {"sha": "9fef1e33543991eca162da09704ec55a6143c11d", "filename": "src/test/ui/hrtb/due-to-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,15 +2,12 @@ error: implementation of `Foo` is not general enough\n   --> $DIR/due-to-where-clause.rs:5:5\n    |\n LL |     test::<FooS>(&mut 42);\n-   |     ^^^^^^^^^^^^ doesn't satisfy where-clause\n+   |     ^^^^^^^^^^^^ implementation of `Foo` is not general enough\n ...\n LL | trait Foo<'a> {}\n    | ---------------- trait `Foo` defined here\n-...\n-LL | fn test<'a, F>(data: &'a mut u32) where F: for<'b> Foo<'b> {}\n-   | ------------------------------------------------------------- due to a where-clause on `test`...\n    |\n-   = note: ...`FooS<'_>` must implement `Foo<'0>`, for any lifetime `'0`...\n+   = note: `FooS<'_>` must implement `Foo<'0>`, for any lifetime `'0`...\n    = note: ...but `FooS<'_>` actually implements `Foo<'1>`, for some specific lifetime `'1`\n \n error: aborting due to previous error"}, {"sha": "9822b48f4f48fe4412697e1690b82c3c6684fe6a", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,14 +1,13 @@\n error[E0277]: the trait bound `for<'a, 'b> SomeStruct: Foo<(&'a isize, &'b isize)>` is not satisfied\n-  --> $DIR/hrtb-conflate-regions.rs:27:10\n+  --> $DIR/hrtb-conflate-regions.rs:27:22\n    |\n-LL | / fn want_foo2<T>()\n-LL | |     where T : for<'a,'b> Foo<(&'a isize, &'b isize)>\n-LL | | {\n-LL | | }\n-   | |_- required by `want_foo2`\n+LL | fn want_foo2<T>()\n+   |    ---------\n+LL |     where T : for<'a,'b> Foo<(&'a isize, &'b isize)>\n+   |               -------------------------------------- required by this bound in `want_foo2`\n ...\n-LL |   fn b() { want_foo2::<SomeStruct>(); }\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a, 'b> Foo<(&'a isize, &'b isize)>` is not implemented for `SomeStruct`\n+LL | fn b() { want_foo2::<SomeStruct>(); }\n+   |                      ^^^^^^^^^^ the trait `for<'a, 'b> Foo<(&'a isize, &'b isize)>` is not implemented for `SomeStruct`\n    |\n    = help: the following implementations were found:\n              <SomeStruct as Foo<(&'a isize, &'a isize)>>"}, {"sha": "969d9eda7351970b8541e4d039b5d9ca469a2ed6", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,15 +1,14 @@\n error[E0277]: the trait bound `(): Trait<for<'b> fn(&'b u32)>` is not satisfied\n-  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n+  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:11\n    |\n-LL | / fn foo<T>()\n-LL | | where\n-LL | |     T: Trait<for<'b> fn(&'b u32)>,\n-LL | | {\n-LL | | }\n-   | |_- required by `foo`\n+LL | fn foo<T>()\n+   |    ---\n+LL | where\n+LL |     T: Trait<for<'b> fn(&'b u32)>,\n+   |        -------------------------- required by this bound in `foo`\n ...\n-LL |       foo::<()>();\n-   |       ^^^^^^^^^ the trait `Trait<for<'b> fn(&'b u32)>` is not implemented for `()`\n+LL |     foo::<()>();\n+   |           ^^ the trait `Trait<for<'b> fn(&'b u32)>` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as Trait<fn(&'a u32)>>"}, {"sha": "dddc2bcce49e5d06b2466d2324c62415530c9a72", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-covariant.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,15 +1,14 @@\n error[E0277]: the trait bound `(): Trait<for<'b> fn(fn(&'b u32))>` is not satisfied\n-  --> $DIR/hrtb-exists-forall-trait-covariant.rs:36:5\n+  --> $DIR/hrtb-exists-forall-trait-covariant.rs:36:11\n    |\n-LL | / fn foo<T>()\n-LL | | where\n-LL | |     T: Trait<for<'b> fn(fn(&'b u32))>,\n-LL | | {\n-LL | | }\n-   | |_- required by `foo`\n+LL | fn foo<T>()\n+   |    ---\n+LL | where\n+LL |     T: Trait<for<'b> fn(fn(&'b u32))>,\n+   |        ------------------------------ required by this bound in `foo`\n ...\n-LL |       foo::<()>();\n-   |       ^^^^^^^^^ the trait `Trait<for<'b> fn(fn(&'b u32))>` is not implemented for `()`\n+LL |     foo::<()>();\n+   |           ^^ the trait `Trait<for<'b> fn(fn(&'b u32))>` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as Trait<fn(fn(&'a u32))>>"}, {"sha": "23ef75944d317bc0c352d5efe08af8ef384d11f5", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,15 +1,14 @@\n error[E0277]: the trait bound `(): Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` is not satisfied\n-  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n+  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:11\n    |\n-LL | / fn foo<T>()\n-LL | | where\n-LL | |     T: Trait<for<'b> fn(Cell<&'b u32>)>,\n-LL | | {\n-LL | | }\n-   | |_- required by `foo`\n+LL | fn foo<T>()\n+   |    ---\n+LL | where\n+LL |     T: Trait<for<'b> fn(Cell<&'b u32>)>,\n+   |        -------------------------------- required by this bound in `foo`\n ...\n-LL |       foo::<()>();\n-   |       ^^^^^^^^^ the trait `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` is not implemented for `()`\n+LL |     foo::<()>();\n+   |           ^^ the trait `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as Trait<fn(std::cell::Cell<&'a u32>)>>"}, {"sha": "c2cc8ebad272658a2f8f2bbb3ad8397f052467be", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,14 +1,13 @@\n error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:47:26\n    |\n-LL | / fn want_bar_for_any_ccx<B>(b: &B)\n-LL | |     where B : for<'ccx> Bar<'ccx>\n-LL | | {\n-LL | | }\n-   | |_- required by `want_bar_for_any_ccx`\n+LL | fn want_bar_for_any_ccx<B>(b: &B)\n+   |    --------------------\n+LL |     where B : for<'ccx> Bar<'ccx>\n+   |               ------------------- required by this bound in `want_bar_for_any_ccx`\n ...\n-LL |       want_bar_for_any_ccx(b);\n-   |                            ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n+LL |     want_bar_for_any_ccx(b);\n+   |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n    |\n    = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n "}, {"sha": "a93814ad4c25e8f8912c492a4c49154e5b9e9476", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.stderr", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,33 +1,26 @@\n error[E0277]: the trait bound `for<'tcx> F: Foo<'tcx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:18:26\n    |\n-LL |       want_foo_for_any_tcx(f);\n-   |                            ^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n+LL |     want_foo_for_any_tcx(f);\n+   |                          ^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n ...\n-LL | / fn want_foo_for_any_tcx<F>(f: &F)\n-LL | |     where F : for<'tcx> Foo<'tcx>\n-LL | | {\n-LL | |     want_foo_for_some_tcx(f);\n-LL | |     want_foo_for_any_tcx(f);\n-LL | | }\n-   | |_- required by `want_foo_for_any_tcx`\n+LL | fn want_foo_for_any_tcx<F>(f: &F)\n+   |    --------------------\n+LL |     where F : for<'tcx> Foo<'tcx>\n+   |               ------------------- required by this bound in `want_foo_for_any_tcx`\n    |\n    = help: consider adding a `where for<'tcx> F: Foo<'tcx>` bound\n \n error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:35:26\n    |\n-LL |       want_bar_for_any_ccx(b);\n-   |                            ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n+LL |     want_bar_for_any_ccx(b);\n+   |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n ...\n-LL | / fn want_bar_for_any_ccx<B>(b: &B)\n-LL | |     where B : for<'ccx> Bar<'ccx>\n-LL | | {\n-LL | |     want_foo_for_some_tcx(b);\n-...  |\n-LL | |     want_bar_for_any_ccx(b);\n-LL | | }\n-   | |_- required by `want_bar_for_any_ccx`\n+LL | fn want_bar_for_any_ccx<B>(b: &B)\n+   |    --------------------\n+LL |     where B : for<'ccx> Bar<'ccx>\n+   |               ------------------- required by this bound in `want_bar_for_any_ccx`\n    |\n    = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n "}, {"sha": "6ec0beefd60e39f900989e54ba590dbefde98788", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,29 +1,27 @@\n error[E0277]: the trait bound `for<'a> StaticInt: Foo<&'a isize>` is not satisfied\n-  --> $DIR/hrtb-just-for-static.rs:24:5\n+  --> $DIR/hrtb-just-for-static.rs:24:17\n    |\n-LL | / fn want_hrtb<T>()\n-LL | |     where T : for<'a> Foo<&'a isize>\n-LL | | {\n-LL | | }\n-   | |_- required by `want_hrtb`\n+LL | fn want_hrtb<T>()\n+   |    ---------\n+LL |     where T : for<'a> Foo<&'a isize>\n+   |               ---------------------- required by this bound in `want_hrtb`\n ...\n-LL |       want_hrtb::<StaticInt>()\n-   |       ^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `StaticInt`\n+LL |     want_hrtb::<StaticInt>()\n+   |                 ^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `StaticInt`\n    |\n    = help: the following implementations were found:\n              <StaticInt as Foo<&'static isize>>\n \n error[E0277]: the trait bound `for<'a> &'a u32: Foo<&'a isize>` is not satisfied\n-  --> $DIR/hrtb-just-for-static.rs:30:5\n+  --> $DIR/hrtb-just-for-static.rs:30:17\n    |\n-LL | / fn want_hrtb<T>()\n-LL | |     where T : for<'a> Foo<&'a isize>\n-LL | | {\n-LL | | }\n-   | |_- required by `want_hrtb`\n+LL | fn want_hrtb<T>()\n+   |    ---------\n+LL |     where T : for<'a> Foo<&'a isize>\n+   |               ---------------------- required by this bound in `want_hrtb`\n ...\n-LL |       want_hrtb::<&'a u32>()\n-   |       ^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `&'a u32`\n+LL |     want_hrtb::<&'a u32>()\n+   |                 ^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `&'a u32`\n    |\n    = help: the following implementations were found:\n              <&'a u32 as Foo<&'a isize>>"}, {"sha": "c818041e596321a53f88ab251889a450c3a675a9", "filename": "src/test/ui/hrtb/issue-46989.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `for<'r> fn(&'r i32): Foo` is not satisfied\n-  --> $DIR/issue-46989.rs:40:5\n+  --> $DIR/issue-46989.rs:40:18\n    |\n LL | fn assert_foo<T: Foo>() {}\n-   | ----------------------- required by `assert_foo`\n+   |    ----------    --- required by this bound in `assert_foo`\n ...\n LL |     assert_foo::<fn(&i32)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `for<'r> fn(&'r i32)`\n+   |                  ^^^^^^^^ the trait `Foo` is not implemented for `for<'r> fn(&'r i32)`\n    |\n    = help: the following implementations were found:\n              <fn(A) as Foo>"}, {"sha": "d11941fee18249cf74ee46113ad55b96df3a7176", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -73,7 +73,7 @@ error[E0277]: `std::rc::Rc<std::string::String>` cannot be sent between threads\n   --> $DIR/auto-trait-leak.rs:15:5\n    |\n LL | fn send<T: Send>(_: T) {}\n-   | ---------------------- required by `send`\n+   |    ----    ---- required by this bound in `send`\n ...\n LL |     send(cycle2().clone());\n    |     ^^^^ `std::rc::Rc<std::string::String>` cannot be sent between threads safely"}, {"sha": "d163e1dff7ac981cd284aa37c16ef1f20506ace6", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads\n   --> $DIR/auto-trait-leak2.rs:13:5\n    |\n LL | fn send<T: Send>(_: T) {}\n-   | ---------------------- required by `send`\n+   |    ----    ---- required by this bound in `send`\n ...\n LL |     send(before());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n@@ -15,7 +15,7 @@ error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads\n   --> $DIR/auto-trait-leak2.rs:16:5\n    |\n LL | fn send<T: Send>(_: T) {}\n-   | ---------------------- required by `send`\n+   |    ----    ---- required by this bound in `send`\n ...\n LL |     send(after());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely"}, {"sha": "6968e3669caec844d795ae9418d0485cd66faff5", "filename": "src/test/ui/interior-mutability/interior-mutability.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n use std::cell::Cell;\n use std::panic::catch_unwind;\n fn main() {"}, {"sha": "b76fce288055263c6485af758cbcd6441f6d5c42", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,14 +1,18 @@\n error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/interior-mutability.rs:5:5\n+  --> $DIR/interior-mutability.rs:7:5\n    |\n LL |     catch_unwind(|| { x.set(23); });\n    |     ^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   | \n+  ::: $SRC_DIR/libstd/panic.rs:LL:COL\n+   |\n+LL | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n+   |                                        ---------- required by this bound in `std::panic::catch_unwind`\n    |\n    = help: within `std::cell::Cell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<i32>`\n    = note: required because it appears within the type `std::cell::Cell<i32>`\n    = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `&std::cell::Cell<i32>`\n-   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:5:18: 5:35 x:&std::cell::Cell<i32>]`\n-   = note: required by `std::panic::catch_unwind`\n+   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:7:18: 7:35 x:&std::cell::Cell<i32>]`\n \n error: aborting due to previous error\n "}, {"sha": "089968ede7d0ff4453e5b6a41f80aa53c1dcb4ee", "filename": "src/test/ui/issues/issue-1920-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `foo::issue_1920::S: std::clone::Clone` is not satisfied\n-  --> $DIR/issue-1920-1.rs:12:5\n+  --> $DIR/issue-1920-1.rs:12:20\n    |\n LL | fn assert_clone<T>() where T : Clone { }\n-   | ------------------------------------ required by `assert_clone`\n+   |    ------------                ----- required by this bound in `assert_clone`\n ...\n LL |     assert_clone::<foo::issue_1920::S>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `foo::issue_1920::S`\n+   |                    ^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `foo::issue_1920::S`\n \n error: aborting due to previous error\n "}, {"sha": "eaf34e076c088b88e32d0550754aacf932f17e60", "filename": "src/test/ui/issues/issue-1920-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `bar::S: std::clone::Clone` is not satisfied\n-  --> $DIR/issue-1920-2.rs:10:5\n+  --> $DIR/issue-1920-2.rs:10:20\n    |\n LL | fn assert_clone<T>() where T : Clone { }\n-   | ------------------------------------ required by `assert_clone`\n+   |    ------------                ----- required by this bound in `assert_clone`\n ...\n LL |     assert_clone::<bar::S>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `bar::S`\n+   |                    ^^^^^^ the trait `std::clone::Clone` is not implemented for `bar::S`\n \n error: aborting due to previous error\n "}, {"sha": "0550f5feba5bee6677f82e438de6b0e498148f63", "filename": "src/test/ui/issues/issue-1920-3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `issue_1920::S: std::clone::Clone` is not satisfied\n-  --> $DIR/issue-1920-3.rs:14:5\n+  --> $DIR/issue-1920-3.rs:14:20\n    |\n LL | fn assert_clone<T>() where T : Clone { }\n-   | ------------------------------------ required by `assert_clone`\n+   |    ------------                ----- required by this bound in `assert_clone`\n ...\n LL |     assert_clone::<foo::issue_1920::S>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `issue_1920::S`\n+   |                    ^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `issue_1920::S`\n \n error: aborting due to previous error\n "}, {"sha": "dfb39743352fce1893413c96260f6cbe3c8cfe79", "filename": "src/test/ui/issues/issue-21160.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n struct Bar;\n \n impl Bar {"}, {"sha": "9f88fa2fadd4cc68143b7213aced019efbf95896", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,10 +1,13 @@\n error[E0277]: the trait bound `Bar: std::hash::Hash` is not satisfied\n-  --> $DIR/issue-21160.rs:8:12\n+  --> $DIR/issue-21160.rs:10:12\n    |\n LL | struct Foo(Bar);\n    |            ^^^ the trait `std::hash::Hash` is not implemented for `Bar`\n+   | \n+  ::: $SRC_DIR/libcore/hash/mod.rs:LL:COL\n    |\n-   = note: required by `std::hash::Hash::hash`\n+LL |     fn hash<H: Hasher>(&self, state: &mut H);\n+   |             - required by this bound in `std::hash::Hash::hash`\n \n error: aborting due to previous error\n "}, {"sha": "2bede9120cf1d1673a72f73da8a587f4ae776e81", "filename": "src/test/ui/issues/issue-21763.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n   --> $DIR/issue-21763.rs:9:5\n    |\n LL | fn foo<T: Send>() {}\n-   | ----------------- required by `foo`\n+   |    ---    ---- required by this bound in `foo`\n ...\n LL |     foo::<HashMap<Rc<()>, Rc<()>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely"}, {"sha": "c3b419fe939cb0b10092678db0987531d736d457", "filename": "src/test/ui/issues/issue-23589.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,11 +1,11 @@\n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-23589.rs:2:15\n+  --> $DIR/issue-23589.rs:2:12\n    |\n LL |     let v: Vec(&str) = vec!['1', '2'];\n-   |               ^^^^^^\n-   |               |\n-   |               only `Fn` traits may use parentheses\n-   |               help: use angle brackets instead: `<&str>`\n+   |            ^^^^^^^^^\n+   |            |\n+   |            only `Fn` traits may use parentheses\n+   |            help: use angle brackets instead: `Vec<&str>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-23589.rs:2:29"}, {"sha": "0a13a2bc33023c24aca7c0281b362b3658157025", "filename": "src/test/ui/issues/issue-25076.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `(): InOut<_>` is not satisfied\n   --> $DIR/issue-25076.rs:10:20\n    |\n LL | fn do_fold<B, F: InOut<B, Out=B>>(init: B, f: F) {}\n-   | ------------------------------------------------ required by `do_fold`\n+   |    -------       --------------- required by this bound in `do_fold`\n ...\n LL |     do_fold(bot(), ());\n    |                    ^^ the trait `InOut<_>` is not implemented for `()`"}, {"sha": "e3564e867017451ced460d043bc06eaa556c40e9", "filename": "src/test/ui/issues/issue-32963.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -13,7 +13,7 @@ error[E0277]: the trait bound `dyn Misc: std::marker::Copy` is not satisfied\n   --> $DIR/issue-32963.rs:8:5\n    |\n LL | fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n-   | ------------------------------------------ required by `size_of_copy`\n+   |    ------------    ---- required by this bound in `size_of_copy`\n ...\n LL |     size_of_copy::<dyn Misc + Copy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `dyn Misc`"}, {"sha": "976e3064db64b7f9532e5bb2a40ed2339a27cfda", "filename": "src/test/ui/issues/issue-32995-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,27 +1,27 @@\n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:4:28\n+  --> $DIR/issue-32995-2.rs:4:22\n    |\n LL |     { fn f<X: ::std::marker()::Send>() {} }\n-   |                            ^^\n+   |                      ^^^^^^^^\n    |\n    = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:8:35\n+  --> $DIR/issue-32995-2.rs:8:29\n    |\n LL |     { fn f() -> impl ::std::marker()::Send { } }\n-   |                                   ^^\n+   |                             ^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:16:19\n+  --> $DIR/issue-32995-2.rs:16:13\n    |\n LL | impl ::std::marker()::Copy for X {}\n-   |                   ^^\n+   |             ^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>"}, {"sha": "724e82a59dc3519ae984ab7b7812490c0fa81947", "filename": "src/test/ui/issues/issue-32995.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,63 +1,63 @@\n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:4:17\n+  --> $DIR/issue-32995.rs:4:12\n    |\n LL |     let x: usize() = 1;\n-   |                 ^^\n+   |            ^^^^^^^\n    |\n    = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:8:24\n+  --> $DIR/issue-32995.rs:8:19\n    |\n LL |     let b: ::std::boxed()::Box<_> = Box::new(1);\n-   |                        ^^\n+   |                   ^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:12:25\n+  --> $DIR/issue-32995.rs:12:20\n    |\n LL |     let p = ::std::str::()::from_utf8(b\"foo\").unwrap();\n-   |                         ^^\n+   |                    ^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:16:36\n+  --> $DIR/issue-32995.rs:16:25\n    |\n LL |     let p = ::std::str::from_utf8::()(b\"foo\").unwrap();\n-   |                                    ^^\n+   |                         ^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:20:35\n+  --> $DIR/issue-32995.rs:20:29\n    |\n LL |     let o : Box<dyn (::std::marker()::Send)> = Box::new(1);\n-   |                                   ^^\n+   |                             ^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:24:41\n+  --> $DIR/issue-32995.rs:24:35\n    |\n LL |     let o : Box<dyn Send + ::std::marker()::Sync> = Box::new(1);\n-   |                                         ^^\n+   |                                   ^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:30:14\n+  --> $DIR/issue-32995.rs:30:13\n    |\n LL |     let d : X() = Default::default();\n-   |              ^^\n+   |             ^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>"}, {"sha": "b1b3041ea027508317937e36332d9f0636986af6", "filename": "src/test/ui/issues/issue-39687.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-39687.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-39687.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39687.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,8 +1,8 @@\n error[E0229]: associated type bindings are not allowed here\n-  --> $DIR/issue-39687.rs:4:16\n+  --> $DIR/issue-39687.rs:4:14\n    |\n LL |     <fn() as Fn()>::call;\n-   |                ^^ associated type not allowed here\n+   |              ^^^^ associated type not allowed here\n \n error: aborting due to previous error\n "}, {"sha": "3fe47e249f10c0447bd407cc7b5e33a43a95f13c", "filename": "src/test/ui/issues/issue-40827.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<Foo>` cannot be sent between threads safely\n   --> $DIR/issue-40827.rs:14:5\n    |\n LL | fn f<T: Send>(_: T) {}\n-   | ------------------- required by `f`\n+   |    -    ---- required by this bound in `f`\n ...\n LL |     f(Foo(Arc::new(Bar::B(None))));\n    |     ^ `std::rc::Rc<Foo>` cannot be sent between threads safely\n@@ -16,7 +16,7 @@ error[E0277]: `std::rc::Rc<Foo>` cannot be shared between threads safely\n   --> $DIR/issue-40827.rs:14:5\n    |\n LL | fn f<T: Send>(_: T) {}\n-   | ------------------- required by `f`\n+   |    -    ---- required by this bound in `f`\n ...\n LL |     f(Foo(Arc::new(Bar::B(None))));\n    |     ^ `std::rc::Rc<Foo>` cannot be shared between threads safely"}, {"sha": "2c57b8585d92400a0eae4b899a836bfc0a659521", "filename": "src/test/ui/issues/issue-43623.stderr", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,31 +1,27 @@\n error[E0631]: type mismatch in function arguments\n   --> $DIR/issue-43623.rs:14:5\n    |\n-LL | / pub fn break_me<T, F>(f: F)\n-LL | | where T: for<'b> Trait<'b>,\n-LL | |       F: for<'b> FnMut(<T as Trait<'b>>::Assoc) {\n-LL | |     break_me::<Type, fn(_)>;\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   | |     |\n-   | |     expected signature of `for<'b> fn(<Type as Trait<'b>>::Assoc) -> _`\n-   | |     found signature of `fn(_) -> _`\n-LL | |\n-LL | |\n-LL | | }\n-   | |_- required by `break_me`\n+LL | pub fn break_me<T, F>(f: F)\n+   |        --------\n+LL | where T: for<'b> Trait<'b>,\n+LL |       F: for<'b> FnMut(<T as Trait<'b>>::Assoc) {\n+   |          -------------------------------------- required by this bound in `break_me`\n+LL |     break_me::<Type, fn(_)>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     expected signature of `for<'b> fn(<Type as Trait<'b>>::Assoc) -> _`\n+   |     found signature of `fn(_) -> _`\n \n error[E0271]: type mismatch resolving `for<'b> <fn(_) as std::ops::FnOnce<(<Type as Trait<'b>>::Assoc,)>>::Output == ()`\n   --> $DIR/issue-43623.rs:14:5\n    |\n-LL | / pub fn break_me<T, F>(f: F)\n-LL | | where T: for<'b> Trait<'b>,\n-LL | |       F: for<'b> FnMut(<T as Trait<'b>>::Assoc) {\n-LL | |     break_me::<Type, fn(_)>;\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'b, found concrete lifetime\n-LL | |\n-LL | |\n-LL | | }\n-   | |_- required by `break_me`\n+LL | pub fn break_me<T, F>(f: F)\n+   |        --------\n+LL | where T: for<'b> Trait<'b>,\n+LL |       F: for<'b> FnMut(<T as Trait<'b>>::Assoc) {\n+   |                  ------------------------------ required by this bound in `break_me`\n+LL |     break_me::<Type, fn(_)>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'b, found concrete lifetime\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6cde93734667fca1fba59aca6b65f9274ee65428", "filename": "src/test/ui/issues/issue-47706.stderr", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -10,18 +10,17 @@ LL |         self.foo.map(Foo::new)\n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/issue-47706.rs:27:9\n    |\n-LL |       Bar(i32),\n-   |       -------- takes 1 argument\n+LL |     Bar(i32),\n+   |     -------- takes 1 argument\n ...\n-LL | / fn foo<F>(f: F)\n-LL | | where\n-LL | |     F: Fn(),\n-LL | | {\n-LL | | }\n-   | |_- required by `foo`\n+LL | fn foo<F>(f: F)\n+   |    ---\n+LL | where\n+LL |     F: Fn(),\n+   |        ---- required by this bound in `foo`\n ...\n-LL |       foo(Qux::Bar);\n-   |           ^^^^^^^^ expected function that takes 0 arguments\n+LL |     foo(Qux::Bar);\n+   |         ^^^^^^^^ expected function that takes 0 arguments\n \n error: aborting due to 2 previous errors\n "}, {"sha": "69c1d85e4e12d031e249e235834a7a950ba94091", "filename": "src/test/ui/issues/issue-60283.stderr", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,27 +1,29 @@\n error[E0631]: type mismatch in function arguments\n   --> $DIR/issue-60283.rs:14:13\n    |\n-LL | / pub fn foo<T, F>(_: T, _: F)\n-LL | | where T: for<'a> Trait<'a>,\n-LL | |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n-   | |_________________________________________________- required by `foo`\n+LL | pub fn foo<T, F>(_: T, _: F)\n+   |        ---\n+LL | where T: for<'a> Trait<'a>,\n+LL |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n+   |          ------------------------------------- required by this bound in `foo`\n ...\n-LL |       foo((), drop)\n-   |               ^^^^\n-   |               |\n-   |               expected signature of `for<'a> fn(<() as Trait<'a>>::Item) -> _`\n-   |               found signature of `fn(_) -> _`\n+LL |     foo((), drop)\n+   |             ^^^^\n+   |             |\n+   |             expected signature of `for<'a> fn(<() as Trait<'a>>::Item) -> _`\n+   |             found signature of `fn(_) -> _`\n \n error[E0271]: type mismatch resolving `for<'a> <fn(_) {std::mem::drop::<_>} as std::ops::FnOnce<(<() as Trait<'a>>::Item,)>>::Output == ()`\n   --> $DIR/issue-60283.rs:14:5\n    |\n-LL | / pub fn foo<T, F>(_: T, _: F)\n-LL | | where T: for<'a> Trait<'a>,\n-LL | |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n-   | |_________________________________________________- required by `foo`\n+LL | pub fn foo<T, F>(_: T, _: F)\n+   |        ---\n+LL | where T: for<'a> Trait<'a>,\n+LL |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n+   |                  ----------------------------- required by this bound in `foo`\n ...\n-LL |       foo((), drop)\n-   |       ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n+LL |     foo((), drop)\n+   |     ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3ca9cf7e973dbddb0f13d0d0a58a433453d2af42", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,68 +1,68 @@\n error[E0277]: the trait bound `&'static mut isize: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:27:5\n+  --> $DIR/kindck-copy.rs:27:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<&'static mut isize>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'static mut isize`\n+   |                   ^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'static mut isize`\n    |\n    = help: the following implementations were found:\n              <isize as std::marker::Copy>\n \n error[E0277]: the trait bound `&'a mut isize: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:28:5\n+  --> $DIR/kindck-copy.rs:28:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<&'a mut isize>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut isize`\n+   |                   ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut isize`\n    |\n    = help: the following implementations were found:\n              <isize as std::marker::Copy>\n \n error[E0277]: the trait bound `std::boxed::Box<isize>: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:31:5\n+  --> $DIR/kindck-copy.rs:31:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Box<isize>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<isize>`\n+   |                   ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<isize>`\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:32:5\n+  --> $DIR/kindck-copy.rs:32:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<String>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n+   |                   ^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n \n error[E0277]: the trait bound `std::vec::Vec<isize>: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:33:5\n+  --> $DIR/kindck-copy.rs:33:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Vec<isize> >();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::vec::Vec<isize>`\n+   |                   ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::vec::Vec<isize>`\n \n error[E0277]: the trait bound `std::boxed::Box<&'a mut isize>: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:34:5\n+  --> $DIR/kindck-copy.rs:34:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Box<&'a mut isize>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<&'a mut isize>`\n+   |                   ^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<&'a mut isize>`\n \n error[E0277]: the trait bound `std::boxed::Box<dyn Dummy>: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:42:5\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<dyn Dummy>`\n@@ -71,37 +71,37 @@ error[E0277]: the trait bound `std::boxed::Box<dyn Dummy + std::marker::Send>: s\n   --> $DIR/kindck-copy.rs:43:5\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Box<dyn Dummy + Send>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<dyn Dummy + std::marker::Send>`\n \n error[E0277]: the trait bound `&'a mut (dyn Dummy + std::marker::Send + 'a): std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:46:5\n+  --> $DIR/kindck-copy.rs:46:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<&'a mut (dyn Dummy + Send)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut (dyn Dummy + std::marker::Send + 'a)`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut (dyn Dummy + std::marker::Send + 'a)`\n \n error[E0277]: the trait bound `MyNoncopyStruct: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:64:5\n+  --> $DIR/kindck-copy.rs:64:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<MyNoncopyStruct>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `MyNoncopyStruct`\n+   |                   ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `MyNoncopyStruct`\n \n error[E0277]: the trait bound `std::rc::Rc<isize>: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:67:5\n+  --> $DIR/kindck-copy.rs:67:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Rc<isize>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::rc::Rc<isize>`\n+   |                   ^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::rc::Rc<isize>`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "8e98911324411c2439b4ee928f7bd94eeea874c4", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `std::boxed::Box<{integer}>: std::marker::Copy` is\n   --> $DIR/kindck-impl-type-params-2.rs:13:16\n    |\n LL | fn take_param<T:Foo>(foo: &T) { }\n-   | ----------------------------- required by `take_param`\n+   |    ----------   --- required by this bound in `take_param`\n ...\n LL |     take_param(&x);\n    |                ^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<{integer}>`"}, {"sha": "27901d069279950282da9542c63b5ec4ca140dc5", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `std::boxed::Box<{integer}>: std::marker::Copy` is\n   --> $DIR/kindck-inherited-copy-bound.rs:18:16\n    |\n LL | fn take_param<T:Foo>(foo: &T) { }\n-   | ----------------------------- required by `take_param`\n+   |    ----------   --- required by this bound in `take_param`\n ...\n LL |     take_param(&x);\n    |                ^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<{integer}>`"}, {"sha": "40b67f8fe8cd70145a710dd180cf7f334678f3fe", "filename": "src/test/ui/kindck/kindck-nonsendable-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<usize>` cannot be sent between threads safely\n   --> $DIR/kindck-nonsendable-1.rs:9:5\n    |\n LL | fn bar<F:FnOnce() + Send>(_: F) { }\n-   | ------------------------------- required by `bar`\n+   |    ---              ---- required by this bound in `bar`\n ...\n LL |     bar(move|| foo(x));\n    |     ^^^ `std::rc::Rc<usize>` cannot be sent between threads safely"}, {"sha": "8708537f8630f69ba326feeab9518c3c25c9672e", "filename": "src/test/ui/kindck/kindck-send-object.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `(dyn Dummy + 'static)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object.rs:12:5\n    |\n LL | fn assert_send<T:Send>() { }\n-   | ------------------------ required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<&'static (dyn Dummy + 'static)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n@@ -14,7 +14,7 @@ error[E0277]: `dyn Dummy` cannot be sent between threads safely\n   --> $DIR/kindck-send-object.rs:17:5\n    |\n LL | fn assert_send<T:Send>() { }\n-   | ------------------------ required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely"}, {"sha": "f882e06ed222aae51777fab677b5f37bfd491d5a", "filename": "src/test/ui/kindck/kindck-send-object1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object1.rs:10:5\n    |\n LL | fn assert_send<T:Send+'static>() { }\n-   | -------------------------------- required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<&'a dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n@@ -14,7 +14,7 @@ error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n   --> $DIR/kindck-send-object1.rs:29:5\n    |\n LL | fn assert_send<T:Send+'static>() { }\n-   | -------------------------------- required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely"}, {"sha": "436b92637aaad1d6918573c5edced8ef346c21b6", "filename": "src/test/ui/kindck/kindck-send-object1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object1.rs:10:5\n    |\n LL | fn assert_send<T:Send+'static>() { }\n-   | -------------------------------- required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<&'a dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n@@ -22,7 +22,7 @@ error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n   --> $DIR/kindck-send-object1.rs:29:5\n    |\n LL | fn assert_send<T:Send+'static>() { }\n-   | -------------------------------- required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely"}, {"sha": "6cb82edf263b1083a3b4dd44ec12ae4798f53b1b", "filename": "src/test/ui/kindck/kindck-send-object2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `(dyn Dummy + 'static)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object2.rs:7:5\n    |\n LL | fn assert_send<T:Send>() { }\n-   | ------------------------ required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<&'static dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n@@ -14,7 +14,7 @@ error[E0277]: `dyn Dummy` cannot be sent between threads safely\n   --> $DIR/kindck-send-object2.rs:12:5\n    |\n LL | fn assert_send<T:Send>() { }\n-   | ------------------------ required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely"}, {"sha": "c74034954245837de0222061790baff66786f7bd", "filename": "src/test/ui/kindck/kindck-send-owned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `*mut u8` cannot be sent between threads safely\n   --> $DIR/kindck-send-owned.rs:12:5\n    |\n LL | fn assert_send<T:Send>() { }\n-   | ------------------------ required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<Box<*mut u8>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut u8` cannot be sent between threads safely"}, {"sha": "05ed51d0f117597bbb99ff5f1d9ae8b34a2b7072", "filename": "src/test/ui/kindck/kindck-send-unsafe.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `*mut &'a isize` cannot be sent between threads safely\n-  --> $DIR/kindck-send-unsafe.rs:6:5\n+  --> $DIR/kindck-send-unsafe.rs:6:19\n    |\n LL | fn assert_send<T:Send>() { }\n-   | ------------------------ required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<*mut &'a isize>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut &'a isize` cannot be sent between threads safely\n+   |                   ^^^^^^^^^^^^^^ `*mut &'a isize` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `*mut &'a isize`\n "}, {"sha": "4508870746bcbd2ffc932aeaa864b759e2a86a04", "filename": "src/test/ui/marker_trait_attr/overlap-marker-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `NotDebugOrDisplay: Marker` is not satisfied\n-  --> $DIR/overlap-marker-trait.rs:27:5\n+  --> $DIR/overlap-marker-trait.rs:27:17\n    |\n LL | fn is_marker<T: Marker>() { }\n-   | ------------------------- required by `is_marker`\n+   |    ---------    ------ required by this bound in `is_marker`\n ...\n LL |     is_marker::<NotDebugOrDisplay>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n+   |                 ^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n \n error: aborting due to previous error\n "}, {"sha": "88c1efdbb90f4d64620e50981cabfef5c1f325ec", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:7:5\n    |\n LL | fn foo<F: Fn(usize)>(_: F) {}\n-   | -------------------------- required by `foo`\n+   |    ---    --------- required by this bound in `foo`\n ...\n LL |     foo(|_: isize| {});\n    |     ^^^ ---------- found signature of `fn(isize) -> _`\n@@ -13,7 +13,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:8:5\n    |\n LL | fn bar<F: Fn<usize>>(_: F) {}\n-   | -------------------------- required by `bar`\n+   |    ---    --------- required by this bound in `bar`\n ...\n LL |     bar(|_: isize| {});\n    |     ^^^ ---------- found signature of `fn(isize) -> _`\n@@ -24,7 +24,7 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:9:9\n    |\n LL | fn foo<F: Fn(usize)>(_: F) {}\n-   | -------------------------- required by `foo`\n+   |    ---    --------- required by this bound in `foo`\n ...\n LL |     fn f(_: u64) {}\n    |     ------------ found signature of `fn(u64) -> _`\n@@ -36,7 +36,7 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:10:9\n    |\n LL | fn bar<F: Fn<usize>>(_: F) {}\n-   | -------------------------- required by `bar`\n+   |    ---    --------- required by this bound in `bar`\n LL | fn main() {\n LL |     fn f(_: u64) {}\n    |     ------------ found signature of `fn(u64) -> _`"}, {"sha": "ed2b3f0c3ce6c4e81fb6971cf31b11353efe6263", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -46,7 +46,7 @@ error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n   --> $DIR/closure-arg-count.rs:13:5\n    |\n LL | fn f<F: Fn<usize>>(_: F) {}\n-   | ------------------------ required by `f`\n+   |    -    --------- required by this bound in `f`\n ...\n LL |     f(|| panic!());\n    |     ^ -- takes 0 arguments\n@@ -61,7 +61,7 @@ error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n   --> $DIR/closure-arg-count.rs:15:5\n    |\n LL | fn f<F: Fn<usize>>(_: F) {}\n-   | ------------------------ required by `f`\n+   |    -    --------- required by this bound in `f`\n ...\n LL |     f(  move    || panic!());\n    |     ^   ---------- takes 0 arguments\n@@ -143,7 +143,7 @@ LL |     call(Foo);\n    |          ^^^ expected function that takes 0 arguments\n ...\n LL | fn call<F, R>(_: F) where F: FnOnce() -> R {}\n-   | ------------------------------------------ required by `call`\n+   |    ----                      ------------- required by this bound in `call`\n LL | struct Foo(u8);\n    | --------------- takes 1 argument\n "}, {"sha": "85cad61210ebf7734fe37073611d859ac27808a0", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -26,7 +26,7 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/closure-arg-type-mismatch.rs:10:9\n    |\n LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   | ------------------------------ required by `baz`\n+   |    ---    ------------- required by this bound in `baz`\n LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n LL |     baz(f);\n    |         ^\n@@ -38,7 +38,7 @@ error[E0271]: type mismatch resolving `for<'r> <fn(*mut &'a u32) as std::ops::Fn\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   | ------------------------------ required by `baz`\n+   |    ---    ------------- required by this bound in `baz`\n LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n LL |     baz(f);\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime"}, {"sha": "fd2b9f3c66b0451346c313cbbb0c236fa945e545", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/closure-mismatch.r\n   --> $DIR/closure-mismatch.rs:8:5\n    |\n LL | fn baz<T: Foo>(_: T) {}\n-   | -------------------- required by `baz`\n+   |    ---    --- required by this bound in `baz`\n ...\n LL |     baz(|_| ());\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime\n@@ -13,7 +13,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-mismatch.rs:8:5\n    |\n LL | fn baz<T: Foo>(_: T) {}\n-   | -------------------- required by `baz`\n+   |    ---    --- required by this bound in `baz`\n ...\n LL |     baz(|_| ());\n    |     ^^^ ------ found signature of `fn(_) -> _`"}, {"sha": "1a82dd53edc702964396823b5e4dad154b1b7353", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -5,7 +5,7 @@ LL | fn takes_mut(x: &mut isize) { }\n    | --------------------------- found signature of `for<'r> fn(&'r mut isize) -> _`\n LL | \n LL | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n-   | --------------------------------------------- required by `apply`\n+   |    -----                            --------- required by this bound in `apply`\n ...\n LL |     apply(&3, takes_mut);\n    |               ^^^^^^^^^ expected signature of `fn(&{integer}) -> _`\n@@ -17,7 +17,7 @@ LL | fn takes_imm(x: &isize) { }\n    | ----------------------- found signature of `for<'r> fn(&'r isize) -> _`\n ...\n LL | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n-   | --------------------------------------------- required by `apply`\n+   |    -----                            --------- required by this bound in `apply`\n ...\n LL |     apply(&mut 3, takes_imm);\n    |                   ^^^^^^^^^ expected signature of `fn(&mut {integer}) -> _`"}, {"sha": "2bd4d3384469ff8d81b1b59315d6600654022caa", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -5,7 +5,8 @@ use std::ops::FnMut;\n fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n \n fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n-//~^ NOTE required by `call_it`\n+//~^ NOTE required by this bound in `call_it`\n+//~| NOTE\n     f(2, y)\n }\n "}, {"sha": "2daf4781c7e6f3e4ef83182288a60c97809fbb36", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,8 +1,8 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/unboxed-closures-vtable-mismatch.rs:15:24\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:16:24\n    |\n LL | fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n-   | -------------------------------------------------------------------- required by `call_it`\n+   |    -------   ------------------------- required by this bound in `call_it`\n ...\n LL |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n    |                       ----------------------------- found signature of `fn(usize, isize) -> _`"}, {"sha": "0290efc3d9679ab451c92ac6a9a1dd7e1c091b35", "filename": "src/test/ui/mut/mutable-enum-indirect.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `NoSync` cannot be shared between threads safely\n   --> $DIR/mutable-enum-indirect.rs:17:5\n    |\n LL | fn bar<T: Sync>(_: T) {}\n-   | --------------------- required by `bar`\n+   |    ---    ---- required by this bound in `bar`\n ...\n LL |     bar(&x);\n    |     ^^^ `NoSync` cannot be shared between threads safely"}, {"sha": "71a06fce4b9e15ba90be86b0eb95faccc993da83", "filename": "src/test/ui/mutexguard-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmutexguard-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fmutexguard-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmutexguard-sync.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n   --> $DIR/mutexguard-sync.rs:11:15\n    |\n LL | fn test_sync<T: Sync>(_t: T) {}\n-   | ---------------------------- required by `test_sync`\n+   |    ---------    ---- required by this bound in `test_sync`\n ...\n LL |     test_sync(guard);\n    |               ^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely"}, {"sha": "aa21928aaeff28e0d30d93238581e35577e64988", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -70,7 +70,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:33:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m1::S{});\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -79,7 +79,7 @@ error[E0277]: the trait bound `c::S: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:35:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m2::S{});\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `c::S`\n@@ -88,7 +88,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:36:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m2::S);\n    |           ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -97,7 +97,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:39:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm1::S{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -106,7 +106,7 @@ error[E0277]: the trait bound `namespace_mix::c::S: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:41:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm2::S{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::S`\n@@ -115,7 +115,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:42:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm2::S);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -124,7 +124,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:55:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m3::TS{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -133,7 +133,7 @@ error[E0277]: the trait bound `fn() -> c::TS {c::TS}: Impossible` is not satisfi\n   --> $DIR/namespace-mix.rs:56:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m3::TS);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `fn() -> c::TS {c::TS}`\n@@ -142,7 +142,7 @@ error[E0277]: the trait bound `c::TS: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:57:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m4::TS{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::TS`\n@@ -151,7 +151,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:58:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m4::TS);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -160,7 +160,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:61:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm3::TS{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -169,7 +169,7 @@ error[E0277]: the trait bound `fn() -> namespace_mix::c::TS {namespace_mix::c::T\n   --> $DIR/namespace-mix.rs:62:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm3::TS);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::TS {namespace_mix::c::TS}`\n@@ -178,7 +178,7 @@ error[E0277]: the trait bound `namespace_mix::c::TS: Impossible` is not satisfie\n   --> $DIR/namespace-mix.rs:63:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm4::TS{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::TS`\n@@ -187,7 +187,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:64:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm4::TS);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -196,7 +196,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:77:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m5::US{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -205,7 +205,7 @@ error[E0277]: the trait bound `c::US: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:78:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m5::US);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::US`\n@@ -214,7 +214,7 @@ error[E0277]: the trait bound `c::US: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:79:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m6::US{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::US`\n@@ -223,7 +223,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:80:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m6::US);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -232,7 +232,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:83:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm5::US{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -241,7 +241,7 @@ error[E0277]: the trait bound `namespace_mix::c::US: Impossible` is not satisfie\n   --> $DIR/namespace-mix.rs:84:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm5::US);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n@@ -250,7 +250,7 @@ error[E0277]: the trait bound `namespace_mix::c::US: Impossible` is not satisfie\n   --> $DIR/namespace-mix.rs:85:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm6::US{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n@@ -259,7 +259,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:86:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm6::US);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -268,7 +268,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:99:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m7::V{});\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -277,7 +277,7 @@ error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:101:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m8::V{});\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n@@ -286,7 +286,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:102:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m8::V);\n    |           ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -295,7 +295,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:105:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm7::V{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -304,7 +304,7 @@ error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:107:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm8::V{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n@@ -313,7 +313,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:108:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm8::V);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -322,7 +322,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:121:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m9::TV{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -331,7 +331,7 @@ error[E0277]: the trait bound `fn() -> c::E {c::E::TV}: Impossible` is not satis\n   --> $DIR/namespace-mix.rs:122:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m9::TV);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `fn() -> c::E {c::E::TV}`\n@@ -340,7 +340,7 @@ error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:123:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(mA::TV{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n@@ -349,7 +349,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:124:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(mA::TV);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -358,7 +358,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:127:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm9::TV{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -367,7 +367,7 @@ error[E0277]: the trait bound `fn() -> namespace_mix::c::E {namespace_mix::xm7::\n   --> $DIR/namespace-mix.rs:128:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm9::TV);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::E {namespace_mix::xm7::TV}`\n@@ -376,7 +376,7 @@ error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:129:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xmA::TV{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n@@ -385,7 +385,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:130:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xmA::TV);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -394,7 +394,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:143:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(mB::UV{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -403,7 +403,7 @@ error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:144:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(mB::UV);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::E`\n@@ -412,7 +412,7 @@ error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:145:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(mC::UV{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n@@ -421,7 +421,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:146:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(mC::UV);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -430,7 +430,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:149:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xmB::UV{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -439,7 +439,7 @@ error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:150:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xmB::UV);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n@@ -448,7 +448,7 @@ error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:151:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xmC::UV{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n@@ -457,7 +457,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:152:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xmC::UV);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`"}, {"sha": "01fc29713a45dd2e27c970cdb7c4698cc11eb7ce", "filename": "src/test/ui/no-send-res-ports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n use std::thread;\n use std::rc::Rc;\n "}, {"sha": "dc186f7c85e94725728d917c131b5815b1fc2f02", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,14 +1,18 @@\n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n-  --> $DIR/no-send-res-ports.rs:25:5\n+  --> $DIR/no-send-res-ports.rs:27:5\n    |\n LL |     thread::spawn(move|| {\n    |     ^^^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n+   | \n+  ::: $SRC_DIR/libstd/thread/mod.rs:LL:COL\n    |\n-   = help: within `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6 x:main::Foo]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n+LL |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n+   |                          ---- required by this bound in `std::thread::spawn`\n+   |\n+   = help: within `[closure@$DIR/no-send-res-ports.rs:27:19: 31:6 x:main::Foo]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `Port<()>`\n    = note: required because it appears within the type `main::Foo`\n-   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6 x:main::Foo]`\n-   = note: required by `std::thread::spawn`\n+   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:27:19: 31:6 x:main::Foo]`\n \n error: aborting due to previous error\n "}, {"sha": "8a4b2e9c7a7c14267fb50b210859e6cc5a373216", "filename": "src/test/ui/no_send-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fno_send-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fno_send-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-enum.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `NoSend` cannot be sent between threads safely\n   --> $DIR/no_send-enum.rs:16:5\n    |\n LL | fn bar<T: Send>(_: T) {}\n-   | --------------------- required by `bar`\n+   |    ---    ---- required by this bound in `bar`\n ...\n LL |     bar(x);\n    |     ^^^ `NoSend` cannot be sent between threads safely"}, {"sha": "bd646d0509daf487465ac857813d7f9847fbf307", "filename": "src/test/ui/no_send-rc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fno_send-rc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fno_send-rc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-rc.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<{integer}>` cannot be sent between threads safely\n   --> $DIR/no_send-rc.rs:7:9\n    |\n LL | fn bar<T: Send>(_: T) {}\n-   | --------------------- required by `bar`\n+   |    ---    ---- required by this bound in `bar`\n ...\n LL |     bar(x);\n    |         ^ `std::rc::Rc<{integer}>` cannot be sent between threads safely"}, {"sha": "4823852c2ff8061484dada19553f69526e520d7c", "filename": "src/test/ui/no_send-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fno_send-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fno_send-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-struct.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `Foo` cannot be sent between threads safely\n   --> $DIR/no_send-struct.rs:15:9\n    |\n LL | fn bar<T: Send>(_: T) {}\n-   | --------------------- required by `bar`\n+   |    ---    ---- required by this bound in `bar`\n ...\n LL |     bar(x);\n    |         ^ `Foo` cannot be sent between threads safely"}, {"sha": "f42228ef6ab42088acba038f4bd51eaf1bd9e1cb", "filename": "src/test/ui/no_share-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fno_share-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fno_share-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-enum.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `NoSync` cannot be shared between threads safely\n   --> $DIR/no_share-enum.rs:14:5\n    |\n LL | fn bar<T: Sync>(_: T) {}\n-   | --------------------- required by `bar`\n+   |    ---    ---- required by this bound in `bar`\n ...\n LL |     bar(x);\n    |     ^^^ `NoSync` cannot be shared between threads safely"}, {"sha": "620b5427b9aec7eeb22c4075a17b143cef764a44", "filename": "src/test/ui/no_share-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fno_share-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fno_share-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-struct.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `Foo` cannot be shared between threads safely\n   --> $DIR/no_share-struct.rs:12:9\n    |\n LL | fn bar<T: Sync>(_: T) {}\n-   | --------------------- required by `bar`\n+   |    ---    ---- required by this bound in `bar`\n ...\n LL |     bar(x);\n    |         ^ `Foo` cannot be shared between threads safely"}, {"sha": "6668d2d0db1916edb8f8db33993cb444876a0267", "filename": "src/test/ui/not-panic/not-panic-safe-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutabil\n   --> $DIR/not-panic-safe-2.rs:10:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<Rc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n@@ -15,7 +15,7 @@ error[E0277]: the type `std::cell::UnsafeCell<isize>` may contain interior mutab\n   --> $DIR/not-panic-safe-2.rs:10:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<Rc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary"}, {"sha": "c23b08fc9eda97fdd27e28d3cac000265b4511ba", "filename": "src/test/ui/not-panic/not-panic-safe-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutabil\n   --> $DIR/not-panic-safe-3.rs:10:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<Arc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n@@ -15,7 +15,7 @@ error[E0277]: the type `std::cell::UnsafeCell<isize>` may contain interior mutab\n   --> $DIR/not-panic-safe-3.rs:10:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<Arc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary"}, {"sha": "916804a834f58d5b351a0a2723fe13b68f8211da", "filename": "src/test/ui/not-panic/not-panic-safe-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutabil\n   --> $DIR/not-panic-safe-4.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<&RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n@@ -15,7 +15,7 @@ error[E0277]: the type `std::cell::UnsafeCell<isize>` may contain interior mutab\n   --> $DIR/not-panic-safe-4.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<&RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary"}, {"sha": "d5c189723f402809c5cbb25f76fd34299e65f138", "filename": "src/test/ui/not-panic/not-panic-safe-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutabil\n   --> $DIR/not-panic-safe-5.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<*const UnsafeCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary"}, {"sha": "c8013a836a177ae1e993bc2a2a45c7e97ab72788", "filename": "src/test/ui/not-panic/not-panic-safe-6.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutabil\n   --> $DIR/not-panic-safe-6.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<*mut RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n@@ -15,7 +15,7 @@ error[E0277]: the type `std::cell::UnsafeCell<isize>` may contain interior mutab\n   --> $DIR/not-panic-safe-6.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<*mut RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary"}, {"sha": "aa18b923044c6a52d8db6ad3d1b082eb9755b28b", "filename": "src/test/ui/not-panic/not-panic-safe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `&mut i32` may not be safely transferred across an unwind\n   --> $DIR/not-panic-safe.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<&mut i32>();\n    |     ^^^^^^^^^^^^^^^^^^ `&mut i32` may not be safely transferred across an unwind boundary"}, {"sha": "8bb4ce2e2c77340904ff5a0d95759e38c469f552", "filename": "src/test/ui/not-sync.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fnot-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fnot-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-sync.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,66 +1,66 @@\n error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:8:5\n+  --> $DIR/not-sync.rs:8:12\n    |\n LL | fn test<T: Sync>() {}\n-   | ------------------ required by `test`\n+   |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<Cell<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n \n error[E0277]: `std::cell::RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:10:5\n+  --> $DIR/not-sync.rs:10:12\n    |\n LL | fn test<T: Sync>() {}\n-   | ------------------ required by `test`\n+   |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<RefCell<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ `std::cell::RefCell<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^^^^^^ `std::cell::RefCell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n \n error[E0277]: `std::rc::Rc<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:13:5\n+  --> $DIR/not-sync.rs:13:12\n    |\n LL | fn test<T: Sync>() {}\n-   | ------------------ required by `test`\n+   |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<Rc<i32>>();\n-   |     ^^^^^^^^^^^^^^^ `std::rc::Rc<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^ `std::rc::Rc<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::rc::Rc<i32>`\n \n error[E0277]: `std::rc::Weak<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:15:5\n+  --> $DIR/not-sync.rs:15:12\n    |\n LL | fn test<T: Sync>() {}\n-   | ------------------ required by `test`\n+   |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<Weak<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^ `std::rc::Weak<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^^^ `std::rc::Weak<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::rc::Weak<i32>`\n \n error[E0277]: `std::sync::mpsc::Receiver<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:18:5\n+  --> $DIR/not-sync.rs:18:12\n    |\n LL | fn test<T: Sync>() {}\n-   | ------------------ required by `test`\n+   |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<Receiver<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Receiver<i32>`\n \n error[E0277]: `std::sync::mpsc::Sender<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:20:5\n+  --> $DIR/not-sync.rs:20:12\n    |\n LL | fn test<T: Sync>() {}\n-   | ------------------ required by `test`\n+   |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<Sender<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^ `std::sync::mpsc::Sender<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^^^^^ `std::sync::mpsc::Sender<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender<i32>`\n "}, {"sha": "7ac199d0943839f134790d1f017443141f935049", "filename": "src/test/ui/object-does-not-impl-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `std::boxed::Box<dyn Foo>: Foo` is not satisfied\n   --> $DIR/object-does-not-impl-trait.rs:6:44\n    |\n LL | fn take_foo<F:Foo>(f: F) {}\n-   | ------------------------ required by `take_foo`\n+   |    --------   --- required by this bound in `take_foo`\n LL | fn take_object(f: Box<dyn Foo>) { take_foo(f); }\n    |                                            ^ the trait `Foo` is not implemented for `std::boxed::Box<dyn Foo>`\n "}, {"sha": "8fe7ed4a20443757c2f2a659947628c31aa282cc", "filename": "src/test/ui/on-unimplemented/on-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `std::option::Option<std::vec::Vec<u8>>: MyFromIte\n   --> $DIR/on-trait.rs:28:30\n    |\n LL | fn collect<A, I: Iterator<Item=A>, B: MyFromIterator<A>>(it: I) -> B {\n-   | -------------------------------------------------------------------- required by `collect`\n+   |    -------                            ----------------- required by this bound in `collect`\n ...\n LL |     let y: Option<Vec<u8>> = collect(x.iter()); // this should give approximately the same error for x.iter().collect()\n    |                              ^^^^^^^ a collection of type `std::option::Option<std::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n@@ -13,7 +13,7 @@ error[E0277]: the trait bound `std::string::String: Bar::Foo<u8, _, u32>` is not\n   --> $DIR/on-trait.rs:31:21\n    |\n LL | fn foobar<U: Clone, T: Foo<u8, U, u32>>() -> T {\n-   | ---------------------------------------------- required by `foobar`\n+   |    ------              --------------- required by this bound in `foobar`\n ...\n LL |     let x: String = foobar();\n    |                     ^^^^^^ test error `std::string::String` with `u8` `_` `u32` in `Bar::Foo`"}, {"sha": "15ebcd17b0dbc7d37170d79bf40d99846a13d8fd", "filename": "src/test/ui/overlap-marker-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Foverlap-marker-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Foverlap-marker-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverlap-marker-trait.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `NotDebugOrDisplay: Marker` is not satisfied\n-  --> $DIR/overlap-marker-trait.rs:30:5\n+  --> $DIR/overlap-marker-trait.rs:30:17\n    |\n LL | fn is_marker<T: Marker>() { }\n-   | ------------------------- required by `is_marker`\n+   |    ---------    ------ required by this bound in `is_marker`\n ...\n LL |     is_marker::<NotDebugOrDisplay>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n+   |                 ^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n \n error: aborting due to previous error\n "}, {"sha": "8f32fb0eca106c595b2667726b01cd286511a714", "filename": "src/test/ui/parser/type-parameters-in-field-exprs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -11,10 +11,10 @@ LL |     f.x::<>;\n    |          ^^\n \n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:17:10\n+  --> $DIR/type-parameters-in-field-exprs.rs:17:7\n    |\n LL |     f.x::();\n-   |          ^^\n+   |       ^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ac48ee0cb0fe37696a571ef6db264762a7ec11e0", "filename": "src/test/ui/phantom-oibit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-oibit.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/phantom-oibit.rs:21:12\n    |\n LL | fn is_zen<T: Zen>(_: T) {}\n-   | ----------------------- required by `is_zen`\n+   |    ------    --- required by this bound in `is_zen`\n ...\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n@@ -17,7 +17,7 @@ error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/phantom-oibit.rs:26:12\n    |\n LL | fn is_zen<T: Zen>(_: T) {}\n-   | ----------------------- required by `is_zen`\n+   |    ------    --- required by this bound in `is_zen`\n ...\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely"}, {"sha": "01975d40fdf1f4b0c3b292deb99aa8209a87223f", "filename": "src/test/ui/regions/regions-close-object-into-object-5.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -52,26 +52,26 @@ LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n    |         ^^^^^^\n    |\n-note: ...so that the reference type `&dyn A<T>` does not outlive the data it points at\n+note: ...so that the type `T` will meet its required lifetime bounds\n   --> $DIR/regions-close-object-into-object-5.rs:17:9\n    |\n LL |     box B(&*v) as Box<X>\n    |         ^^^^^^\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:9\n+  --> $DIR/regions-close-object-into-object-5.rs:17:11\n    |\n LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n    |          - help: consider adding an explicit lifetime bound `T: 'static`...\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n-   |         ^^^^^^\n+   |           ^^^\n    |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-close-object-into-object-5.rs:17:9\n+note: ...so that the reference type `&dyn A<T>` does not outlive the data it points at\n+  --> $DIR/regions-close-object-into-object-5.rs:17:11\n    |\n LL |     box B(&*v) as Box<X>\n-   |         ^^^^^^\n+   |           ^^^\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:11"}, {"sha": "c27cea302fc408672b31bb360edd1c6c41ef3bc8", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,4 +1,6 @@\n // compile-flags: --test\n+// ignore-x86\n+// ^ due to stderr output differences\n \n use std::num::ParseFloatError;\n "}, {"sha": "6aa95c308f24814a4f53e37d2db51f7f50724c17", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,13 +1,17 @@\n error[E0277]: `main` has invalid return type `std::result::Result<f32, std::num::ParseFloatError>`\n-  --> $DIR/termination-trait-test-wrong-type.rs:6:1\n+  --> $DIR/termination-trait-test-wrong-type.rs:8:1\n    |\n LL | / fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n LL | |     \"0\".parse()\n LL | | }\n    | |_^ `main` can only return types that implement `std::process::Termination`\n+   | \n+  ::: $SRC_DIR/libtest/lib.rs:LL:COL\n+   |\n+LL |   pub fn assert_test_result<T: Termination>(result: T) {\n+   |                                ----------- required by this bound in `test::assert_test_result`\n    |\n    = help: the trait `std::process::Termination` is not implemented for `std::result::Result<f32, std::num::ParseFloatError>`\n-   = note: required by `test::assert_test_result`\n \n error: aborting due to previous error\n "}, {"sha": "3c957970e51c2a00305e0a7c3cf4554f750be564", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/str-mut-idx.rs:4:15\n    |\n LL | fn bot<T>() -> T { loop {} }\n-   | ---------------- required by `bot`\n+   |    --- - required by this bound in `bot`\n ...\n LL |     s[1..2] = bot();\n    |               ^^^ doesn't have a size known at compile-time"}, {"sha": "cb55203c88e3159f5f07b4105ef39e08c6ff8f4f", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -62,7 +62,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/substs-ppaux.rs:49:5\n    |\n LL |     fn bar<'a, T>() where T: 'a {}\n-   |     --------------------------- required by `Foo::bar`\n+   |        ---                   -- required by this bound in `Foo::bar`\n ...\n LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "cafcba97b92c8b8b030e89e2d5eddd958c1163fd", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -62,7 +62,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/substs-ppaux.rs:49:5\n    |\n LL |     fn bar<'a, T>() where T: 'a {}\n-   |     --------------------------- required by `Foo::bar`\n+   |        ---                   -- required by this bound in `Foo::bar`\n ...\n LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "1cc704b44336621a2e2907836f119a9ed3552285", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `fn() -> impl std::future::Future {foo}: std::futu\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:9:9\n    |\n LL | fn bar(f: impl Future<Output=()>) {}\n-   | --------------------------------- required by `bar`\n+   |    ---         ----------------- required by this bound in `bar`\n ...\n LL |     bar(foo);\n    |         ^^^"}, {"sha": "7a49031bde7c2d7798542fdd99765286ac18168f", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `fn() -> impl T {foo}: T` is not satisfied\n   --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:17:9\n    |\n LL | fn bar(f: impl T<O=()>) {}\n-   | ----------------------- required by `bar`\n+   |    ---         ------- required by this bound in `bar`\n ...\n LL |     bar(foo);\n    |         ^^^"}, {"sha": "fb3e1096ad54cbf86589f8e407e01a9e31b56da5", "filename": "src/test/ui/suggestions/into-str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `&str: std::convert::From<std::string::String>` is\n   --> $DIR/into-str.rs:4:5\n    |\n LL | fn foo<'a, T>(_t: T) where T: Into<&'a str> {}\n-   | ------------------------------------------- required by `foo`\n+   |    ---                        ------------- required by this bound in `foo`\n ...\n LL |     foo(String::new());\n    |     ^^^ the trait `std::convert::From<std::string::String>` is not implemented for `&str`"}, {"sha": "cad5c81f5a6ca4bf8bdc7e625af685fccd9818dc", "filename": "src/test/ui/traits/trait-alias/trait-alias-cross-crate.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,22 +1,22 @@\n error[E0277]: `std::rc::Rc<u32>` cannot be sent between threads safely\n-  --> $DIR/trait-alias-cross-crate.rs:14:5\n+  --> $DIR/trait-alias-cross-crate.rs:14:17\n    |\n LL | fn use_alias<T: SendSync>() {}\n-   | --------------------------- required by `use_alias`\n+   |    ---------    -------- required by this bound in `use_alias`\n ...\n LL |     use_alias::<Rc<u32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ `std::rc::Rc<u32>` cannot be sent between threads safely\n+   |                 ^^^^^^^ `std::rc::Rc<u32>` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `std::rc::Rc<u32>`\n \n error[E0277]: `std::rc::Rc<u32>` cannot be shared between threads safely\n-  --> $DIR/trait-alias-cross-crate.rs:14:5\n+  --> $DIR/trait-alias-cross-crate.rs:14:17\n    |\n LL | fn use_alias<T: SendSync>() {}\n-   | --------------------------- required by `use_alias`\n+   |    ---------    -------- required by this bound in `use_alias`\n ...\n LL |     use_alias::<Rc<u32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ `std::rc::Rc<u32>` cannot be shared between threads safely\n+   |                 ^^^^^^^ `std::rc::Rc<u32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::rc::Rc<u32>`\n "}, {"sha": "5ed14a6a86685e78079c9a6ee921d4707cc92c5d", "filename": "src/test/ui/traits/trait-suggest-where-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n use std::mem;\n \n struct Misc<T:?Sized>(T);"}, {"sha": "d15edaa9c814683bc64ea3cd76c9cef10baa0852", "filename": "src/test/ui/traits/trait-suggest-where-clause.stderr", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,28 +1,36 @@\n error[E0277]: the size for values of type `U` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:7:5\n+  --> $DIR/trait-suggest-where-clause.rs:9:20\n    |\n LL |     mem::size_of::<U>();\n-   |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/libcore/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `U`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where U: std::marker::Sized` bound\n-   = note: required by `std::mem::size_of`\n \n error[E0277]: the size for values of type `U` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:10:5\n+  --> $DIR/trait-suggest-where-clause.rs:12:5\n    |\n LL |     mem::size_of::<Misc<U>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/libcore/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n    |\n    = help: within `Misc<U>`, the trait `std::marker::Sized` is not implemented for `U`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where U: std::marker::Sized` bound\n    = note: required because it appears within the type `Misc<U>`\n-   = note: required by `std::mem::size_of`\n \n error[E0277]: the trait bound `u64: std::convert::From<T>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:15:5\n+  --> $DIR/trait-suggest-where-clause.rs:17:5\n    |\n LL |     <u64 as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<T>` is not implemented for `u64`\n@@ -31,7 +39,7 @@ LL |     <u64 as From<T>>::from;\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the trait bound `u64: std::convert::From<<T as std::iter::Iterator>::Item>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:18:5\n+  --> $DIR/trait-suggest-where-clause.rs:20:5\n    |\n LL |     <u64 as From<<T as Iterator>::Item>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<<T as std::iter::Iterator>::Item>` is not implemented for `u64`\n@@ -40,32 +48,40 @@ LL |     <u64 as From<<T as Iterator>::Item>>::from;\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the trait bound `Misc<_>: std::convert::From<T>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:23:5\n+  --> $DIR/trait-suggest-where-clause.rs:25:5\n    |\n LL |     <Misc<_> as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<T>` is not implemented for `Misc<_>`\n    |\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the size for values of type `[T]` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:28:5\n+  --> $DIR/trait-suggest-where-clause.rs:30:20\n    |\n LL |     mem::size_of::<[T]>();\n-   |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/libcore/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[T]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required by `std::mem::size_of`\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:31:5\n+  --> $DIR/trait-suggest-where-clause.rs:33:5\n    |\n LL |     mem::size_of::<[&U]>();\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/libcore/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[&U]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required by `std::mem::size_of`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "6fd6a37b22dfe75eb71e0428ac029f3c4e48657d", "filename": "src/test/ui/traits/traits-inductive-overflow-simultaneous.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-simultaneous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-simultaneous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-simultaneous.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0275]: overflow evaluating the requirement `{integer}: Tweedledum`\n   --> $DIR/traits-inductive-overflow-simultaneous.rs:18:5\n    |\n LL | fn is_ee<T: Combo>(t: T) {\n-   | ------------------------ required by `is_ee`\n+   |    -----    ----- required by this bound in `is_ee`\n ...\n LL |     is_ee(4);\n    |     ^^^^^"}, {"sha": "40c2c2e4c9d10d3ed294b3e3d78645b72c80cbd1", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-oibit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -8,7 +8,7 @@ error[E0277]: the trait bound `NoClone: std::marker::Copy` is not satisfied\n   --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:15:23\n    |\n LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n-   | --------------------------------- required by `copy`\n+   |    ----    ----- required by this bound in `copy`\n ...\n LL |     let (a, b) = copy(NoClone);\n    |                       ^^^^^^^ the trait `std::marker::Copy` is not implemented for `NoClone`"}, {"sha": "96a9343d4ebfb370c7198e6f7d22b84e4bbf3e70", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0275]: overflow evaluating the requirement `NoClone: Magic`\n   --> $DIR/traits-inductive-overflow-supertrait.rs:13:18\n    |\n LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n-   | --------------------------------- required by `copy`\n+   |    ----    ----- required by this bound in `copy`\n ...\n LL |     let (a, b) = copy(NoClone);\n    |                  ^^^^"}, {"sha": "447fc56434831cd0699ccb86454f9fc9466570c8", "filename": "src/test/ui/traits/traits-inductive-overflow-two-traits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0275]: overflow evaluating the requirement `*mut (): Magic`\n   --> $DIR/traits-inductive-overflow-two-traits.rs:19:5\n    |\n LL | fn wizard<T: Magic>() { check::<<T as Magic>::X>(); }\n-   | --------------------- required by `wizard`\n+   |    ------    ----- required by this bound in `wizard`\n ...\n LL |     wizard::<*mut ()>();\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "22b6d2a0c4e98737c20e309019221ce1aca3b1ed", "filename": "src/test/ui/traits/traits-negative-impls.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -24,7 +24,7 @@ error[E0277]: `dummy1b::TestType` cannot be sent between threads safely\n   --> $DIR/traits-negative-impls.rs:32:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n-   | ------------------------- required by `is_send`\n+   |    -------    ---- required by this bound in `is_send`\n ...\n LL |     is_send(TestType);\n    |             ^^^^^^^^ `dummy1b::TestType` cannot be sent between threads safely\n@@ -35,7 +35,7 @@ error[E0277]: `dummy1c::TestType` cannot be sent between threads safely\n   --> $DIR/traits-negative-impls.rs:40:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n-   | ------------------------- required by `is_send`\n+   |    -------    ---- required by this bound in `is_send`\n ...\n LL |     is_send((8, TestType));\n    |             ^^^^^^^^^^^^^ `dummy1c::TestType` cannot be sent between threads safely\n@@ -47,7 +47,7 @@ error[E0277]: `dummy2::TestType` cannot be sent between threads safely\n   --> $DIR/traits-negative-impls.rs:48:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n-   | ------------------------- required by `is_send`\n+   |    -------    ---- required by this bound in `is_send`\n ...\n LL |     is_send(Box::new(TestType));\n    |             ^^^^^^^^^^^^^^^^^^ `dummy2::TestType` cannot be sent between threads safely\n@@ -60,7 +60,7 @@ error[E0277]: `dummy3::TestType` cannot be sent between threads safely\n   --> $DIR/traits-negative-impls.rs:56:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n-   | ------------------------- required by `is_send`\n+   |    -------    ---- required by this bound in `is_send`\n ...\n LL |     is_send(Box::new(Outer2(TestType)));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ `dummy3::TestType` cannot be sent between threads safely\n@@ -74,7 +74,7 @@ error[E0277]: `main::TestType` cannot be sent between threads safely\n   --> $DIR/traits-negative-impls.rs:66:13\n    |\n LL | fn is_sync<T: Sync>(_: T) {}\n-   | ------------------------- required by `is_sync`\n+   |    -------    ---- required by this bound in `is_sync`\n ...\n LL |     is_sync(Outer2(TestType));\n    |             ^^^^^^^^^^^^^^^^ `main::TestType` cannot be sent between threads safely"}, {"sha": "acf309ac6087221235e883bdb99467983291a40c", "filename": "src/test/ui/trivial-bounds/trivial-bounds-leak.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -34,7 +34,7 @@ LL |     generic_function(5i32);\n    |                      ^^^^ the trait `Foo` is not implemented for `i32`\n ...\n LL | fn generic_function<T: Foo>(t: T) {}\n-   | --------------------------------- required by `generic_function`\n+   |    ----------------    --- required by this bound in `generic_function`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d2f1a04837b86b4a21bc18aca2bc3d84bb9d63d2", "filename": "src/test/ui/try-operator-on-main.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -17,13 +17,13 @@ LL |     ()?;\n    = note: required by `std::ops::Try::into_result`\n \n error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n-  --> $DIR/try-operator-on-main.rs:15:5\n+  --> $DIR/try-operator-on-main.rs:15:25\n    |\n LL |     try_trait_generic::<()>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Try` is not implemented for `()`\n+   |                         ^^ the trait `std::ops::Try` is not implemented for `()`\n ...\n LL | fn try_trait_generic<T: Try>() -> T {\n-   | ----------------------------------- required by `try_trait_generic`\n+   |    -----------------    --- required by this bound in `try_trait_generic`\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n   --> $DIR/try-operator-on-main.rs:22:5"}, {"sha": "0d0acfde88605f467410b4286468490da55f70bd", "filename": "src/test/ui/type/ascription/issue-34255-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -5,10 +5,10 @@ LL |         input_cells: Vec::new()\n    |         ^^^^^^^^^^^ a field by this name exists in `Self`\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-34255-1.rs:7:30\n+  --> $DIR/issue-34255-1.rs:7:27\n    |\n LL |         input_cells: Vec::new()\n-   |                              ^^\n+   |                           ^^^^^\n    |\n    = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "ddf16f76995171d518decdf3003ea3ae73979814", "filename": "src/test/ui/type/type-annotation-needed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,5 +1,6 @@\n fn foo<T: Into<String>>(x: i32) {}\n //~^ NOTE required by\n+//~| NOTE\n \n fn main() {\n     foo(42);"}, {"sha": "01287b727d2f8bfa1bec64189ac13751305b1480", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,8 +1,8 @@\n error[E0283]: type annotations required: cannot resolve `_: std::convert::Into<std::string::String>`\n-  --> $DIR/type-annotation-needed.rs:5:5\n+  --> $DIR/type-annotation-needed.rs:6:5\n    |\n LL | fn foo<T: Into<String>>(x: i32) {}\n-   | ------------------------------- required by `foo`\n+   |    ---    ------------ required by this bound in `foo`\n ...\n LL |     foo(42);\n    |     ^^^"}, {"sha": "b842d0ae1a2489d49617be319935f7167e542dee", "filename": "src/test/ui/typeck/typeck-default-trait-impl-assoc-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -5,7 +5,7 @@ LL |     is_send::<T::AssocType>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `<T as Trait>::AssocType` cannot be sent between threads safely\n ...\n LL | fn is_send<T:Send>() {\n-   | -------------------- required by `is_send`\n+   |    -------   ---- required by this bound in `is_send`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `<T as Trait>::AssocType`\n    = help: consider adding a `where <T as Trait>::AssocType: std::marker::Send` bound"}, {"sha": "f060afea24e7f7a00305dca646bb00376545bcbb", "filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `MyS2: MyTrait` is not satisfied in `(MyS2, MyS)`\n   --> $DIR/typeck-default-trait-impl-constituent-types-2.rs:16:5\n    |\n LL | fn is_mytrait<T: MyTrait>() {}\n-   | --------------------------- required by `is_mytrait`\n+   |    ----------    ------- required by this bound in `is_mytrait`\n ...\n LL |     is_mytrait::<(MyS2, MyS)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ within `(MyS2, MyS)`, the trait `MyTrait` is not implemented for `MyS2`"}, {"sha": "22a2cb3e0ecb8c61bdaa97c038a58eea58ae1af5", "filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `MyS2: MyTrait` is not satisfied\n-  --> $DIR/typeck-default-trait-impl-constituent-types.rs:20:5\n+  --> $DIR/typeck-default-trait-impl-constituent-types.rs:20:18\n    |\n LL | fn is_mytrait<T: MyTrait>() {}\n-   | --------------------------- required by `is_mytrait`\n+   |    ----------    ------- required by this bound in `is_mytrait`\n ...\n LL |     is_mytrait::<MyS2>();\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `MyS2`\n+   |                  ^^^^ the trait `MyTrait` is not implemented for `MyS2`\n    |\n    = help: the following implementations were found:\n              <MyS2 as MyTrait>"}, {"sha": "e30d4dfa1b3c49d7b074604a0a855fb54c813562", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-send.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `MyNotSendable` cannot be sent between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-send.rs:19:5\n+  --> $DIR/typeck-default-trait-impl-negation-send.rs:19:15\n    |\n LL | fn is_send<T: Send>() {}\n-   | --------------------- required by `is_send`\n+   |    -------    ---- required by this bound in `is_send`\n ...\n LL |     is_send::<MyNotSendable>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ `MyNotSendable` cannot be sent between threads safely\n+   |               ^^^^^^^^^^^^^ `MyNotSendable` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `MyNotSendable`\n "}, {"sha": "4dd8e01cf2d36227a367b8addc78114da5075770", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-sync.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,19 +1,19 @@\n error[E0277]: `MyNotSync` cannot be shared between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:33:5\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:33:15\n    |\n LL | fn is_sync<T: Sync>() {}\n-   | --------------------- required by `is_sync`\n+   |    -------    ---- required by this bound in `is_sync`\n ...\n LL |     is_sync::<MyNotSync>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ `MyNotSync` cannot be shared between threads safely\n+   |               ^^^^^^^^^ `MyNotSync` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `MyNotSync`\n \n error[E0277]: `std::cell::UnsafeCell<u8>` cannot be shared between threads safely\n   --> $DIR/typeck-default-trait-impl-negation-sync.rs:36:5\n    |\n LL | fn is_sync<T: Sync>() {}\n-   | --------------------- required by `is_sync`\n+   |    -------    ---- required by this bound in `is_sync`\n ...\n LL |     is_sync::<MyTypeWUnsafe>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<u8>` cannot be shared between threads safely\n@@ -25,7 +25,7 @@ error[E0277]: `Managed` cannot be shared between threads safely\n   --> $DIR/typeck-default-trait-impl-negation-sync.rs:39:5\n    |\n LL | fn is_sync<T: Sync>() {}\n-   | --------------------- required by `is_sync`\n+   |    -------    ---- required by this bound in `is_sync`\n ...\n LL |     is_sync::<MyTypeManaged>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `Managed` cannot be shared between threads safely"}, {"sha": "4b13fcc885a0d5d7d12653f19adbd68ed805e1eb", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,23 +1,23 @@\n error[E0277]: the trait bound `ThisImplsUnsafeTrait: MyTrait` is not satisfied\n-  --> $DIR/typeck-default-trait-impl-negation.rs:21:5\n+  --> $DIR/typeck-default-trait-impl-negation.rs:21:19\n    |\n LL | fn is_my_trait<T: MyTrait>() {}\n-   | ---------------------------- required by `is_my_trait`\n+   |    -----------    ------- required by this bound in `is_my_trait`\n ...\n LL |     is_my_trait::<ThisImplsUnsafeTrait>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `ThisImplsUnsafeTrait`\n+   |                   ^^^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `ThisImplsUnsafeTrait`\n    |\n    = help: the following implementations were found:\n              <ThisImplsUnsafeTrait as MyTrait>\n \n error[E0277]: the trait bound `ThisImplsTrait: MyUnsafeTrait` is not satisfied\n-  --> $DIR/typeck-default-trait-impl-negation.rs:24:5\n+  --> $DIR/typeck-default-trait-impl-negation.rs:24:26\n    |\n LL | fn is_my_unsafe_trait<T: MyUnsafeTrait>() {}\n-   | ----------------------------------------- required by `is_my_unsafe_trait`\n+   |    ------------------    ------------- required by this bound in `is_my_unsafe_trait`\n ...\n LL |     is_my_unsafe_trait::<ThisImplsTrait>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `MyUnsafeTrait` is not implemented for `ThisImplsTrait`\n+   |                          ^^^^^^^^^^^^^^ the trait `MyUnsafeTrait` is not implemented for `ThisImplsTrait`\n    |\n    = help: the following implementations were found:\n              <ThisImplsTrait as MyUnsafeTrait>"}, {"sha": "1587730441820011954e522f0f46733cd36fc7b5", "filename": "src/test/ui/typeck/typeck-default-trait-impl-precedence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `u32: Signed` is not satisfied\n   --> $DIR/typeck-default-trait-impl-precedence.rs:18:5\n    |\n LL | fn is_defaulted<T:Defaulted>() { }\n-   | ------------------------------ required by `is_defaulted`\n+   |    ------------   --------- required by this bound in `is_defaulted`\n ...\n LL |     is_defaulted::<&'static u32>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Signed` is not implemented for `u32`"}, {"sha": "b3139083b1ac8ec7186785e3df8a7b5f5df81bc3", "filename": "src/test/ui/typeck/typeck-default-trait-impl-send-param.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/typeck-default-trait-impl-send-param.rs:5:5\n+  --> $DIR/typeck-default-trait-impl-send-param.rs:5:15\n    |\n LL |     is_send::<T>()\n-   |     ^^^^^^^^^^^^ `T` cannot be sent between threads safely\n+   |               ^ `T` cannot be sent between threads safely\n ...\n LL | fn is_send<T:Send>() {\n-   | -------------------- required by `is_send`\n+   |    -------   ---- required by this bound in `is_send`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n    = help: consider adding a `where T: std::marker::Send` bound"}, {"sha": "d08613238f86652ed20e14486525de3ffbb546af", "filename": "src/test/ui/typeck/typeck-unsafe-always-share.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::cell::UnsafeCell<MySync<{integer}>>` cannot be shared betwee\n   --> $DIR/typeck-unsafe-always-share.rs:19:10\n    |\n LL | fn test<T: Sync>(s: T) {}\n-   | ---------------------- required by `test`\n+   |    ----    ---- required by this bound in `test`\n ...\n LL |     test(us);\n    |          ^^ `std::cell::UnsafeCell<MySync<{integer}>>` cannot be shared between threads safely\n@@ -13,7 +13,7 @@ error[E0277]: `std::cell::UnsafeCell<NoSync>` cannot be shared between threads s\n   --> $DIR/typeck-unsafe-always-share.rs:23:10\n    |\n LL | fn test<T: Sync>(s: T) {}\n-   | ---------------------- required by `test`\n+   |    ----    ---- required by this bound in `test`\n ...\n LL |     test(uns);\n    |          ^^^ `std::cell::UnsafeCell<NoSync>` cannot be shared between threads safely\n@@ -24,7 +24,7 @@ error[E0277]: `std::cell::UnsafeCell<NoSync>` cannot be shared between threads s\n   --> $DIR/typeck-unsafe-always-share.rs:27:5\n    |\n LL | fn test<T: Sync>(s: T) {}\n-   | ---------------------- required by `test`\n+   |    ----    ---- required by this bound in `test`\n ...\n LL |     test(ms);\n    |     ^^^^ `std::cell::UnsafeCell<NoSync>` cannot be shared between threads safely\n@@ -36,7 +36,7 @@ error[E0277]: `NoSync` cannot be shared between threads safely\n   --> $DIR/typeck-unsafe-always-share.rs:30:10\n    |\n LL | fn test<T: Sync>(s: T) {}\n-   | ---------------------- required by `test`\n+   |    ----    ---- required by this bound in `test`\n ...\n LL |     test(NoSync);\n    |          ^^^^^^ `NoSync` cannot be shared between threads safely"}, {"sha": "6ec4063828917ecfe546eb794453e2978c50d2e7", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `dyn Foo<(isize,), isize, Output = ()>: Eq<dyn Foo\n   --> $DIR/unboxed-closure-sugar-default.rs:21:5\n    |\n LL | fn eq<A: ?Sized,B: ?Sized>() where A : Eq<B> { }\n-   | -------------------------------------------- required by `eq`\n+   |    --                                  ----- required by this bound in `eq`\n ...\n LL |     eq::<dyn Foo<(isize,), isize, Output=()>, dyn Foo(isize)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Eq<dyn Foo<(isize,), Output = ()>>` is not implemented for `dyn Foo<(isize,), isize, Output = ()>`"}, {"sha": "8dd32ee7f104aafa9e4b578667f16909acd2e606", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-equiv.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `dyn Foo<(char,), Output = ()>: Eq<dyn Foo<(), Out\n   --> $DIR/unboxed-closure-sugar-equiv.rs:43:5\n    |\n LL |   fn eq<A: ?Sized,B: ?Sized +Eq<A>>() { }\n-   |   ----------------------------------- required by `eq`\n+   |      --                      ----- required by this bound in `eq`\n ...\n LL | /     eq::< dyn Foo<(),Output=()>,\n LL | |           dyn Foo(char)                                               >();"}, {"sha": "32619420f6d53bee9d99f1299b6cc74698368877", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,8 +1,8 @@\n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/unboxed-closure-sugar-used-on-struct-1.rs:8:19\n+  --> $DIR/unboxed-closure-sugar-used-on-struct-1.rs:8:16\n    |\n LL |     let x: Box<Bar()> = panic!();\n-   |                   ^^ only `Fn` traits may use parentheses\n+   |                ^^^^^ only `Fn` traits may use parentheses\n \n error[E0107]: wrong number of type arguments: expected 1, found 0\n   --> $DIR/unboxed-closure-sugar-used-on-struct-1.rs:8:16"}, {"sha": "f5cf6db30f99c8ad0b30e2120cf26ff3862c8c3f", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-3.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,11 +1,11 @@\n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/unboxed-closure-sugar-used-on-struct-3.rs:14:18\n+  --> $DIR/unboxed-closure-sugar-used-on-struct-3.rs:14:13\n    |\n LL |     let b = Bar::(isize, usize)::new(); // OK too (for the parser)\n-   |                  ^^^^^^^^^^^^^^\n-   |                  |\n-   |                  only `Fn` traits may use parentheses\n-   |                  help: use angle brackets instead: `<isize, usize>`\n+   |             ^^^^^^^^^^^^^^^^^^^\n+   |             |\n+   |             only `Fn` traits may use parentheses\n+   |             help: use angle brackets instead: `Bar::<isize, usize>`\n \n error: aborting due to previous error\n "}, {"sha": "ba93b60dad878ccac9da4f50cf35247b000940f1", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,8 +1,8 @@\n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/unboxed-closure-sugar-used-on-struct.rs:7:18\n+  --> $DIR/unboxed-closure-sugar-used-on-struct.rs:7:15\n    |\n LL | fn foo(b: Box<Bar()>) {\n-   |                  ^^ only `Fn` traits may use parentheses\n+   |               ^^^^^ only `Fn` traits may use parentheses\n \n error[E0107]: wrong number of type arguments: expected 1, found 0\n   --> $DIR/unboxed-closure-sugar-used-on-struct.rs:7:15"}, {"sha": "59e7bc8c832d645ff39746f1b30cb10b382653ac", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,8 +1,8 @@\n error[E0220]: associated type `Output` not found for `One<()>`\n-  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-1.rs:5:19\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-1.rs:5:16\n    |\n LL | fn foo(_: &dyn One())\n-   |                   ^^ associated type `Output` not found\n+   |                ^^^^^ associated type `Output` not found\n \n error: aborting due to previous error\n "}, {"sha": "f42ac38d370d57e2b73ca6e66ed65746f5e501fe", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -5,10 +5,10 @@ LL | fn foo(_: &dyn Three())\n    |                ^^^^^^^ expected 3 type arguments\n \n error[E0220]: associated type `Output` not found for `Three<(), [type error], [type error]>`\n-  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:5:21\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:5:16\n    |\n LL | fn foo(_: &dyn Three())\n-   |                     ^^ associated type `Output` not found\n+   |                ^^^^^^^ associated type `Output` not found\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8185a798e7b65518f6c8540dfc4e792837c63b93", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,14 +1,14 @@\n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:5:19\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:5:15\n    |\n LL | fn foo(_: dyn Zero())\n-   |                   ^^ unexpected type argument\n+   |               ^^^^^^ unexpected type argument\n \n error[E0220]: associated type `Output` not found for `Zero`\n-  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:5:19\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:5:15\n    |\n LL | fn foo(_: dyn Zero())\n-   |                   ^^ associated type `Output` not found\n+   |               ^^^^^^ associated type `Output` not found\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c81402a3dcc004cc53a79fa788ec94f40b36eb78", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,8 +1,8 @@\n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/unboxed-closure-sugar-wrong-trait.rs:5:13\n+  --> $DIR/unboxed-closure-sugar-wrong-trait.rs:5:8\n    |\n LL | fn f<F:Trait(isize) -> isize>(x: F) {}\n-   |             ^^^^^^^ unexpected type argument\n+   |        ^^^^^^^^^^^^ unexpected type argument\n \n error[E0220]: associated type `Output` not found for `Trait`\n   --> $DIR/unboxed-closure-sugar-wrong-trait.rs:5:24"}, {"sha": "dc7661815310d8c9c6f55f345777ecba7c63e036", "filename": "src/test/ui/unboxed-closures/unboxed-closures-fnmut-as-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: expected a `std::ops::Fn<(isize,)>` closure, found `S`\n   --> $DIR/unboxed-closures-fnmut-as-fn.rs:28:21\n    |\n LL | fn call_it<F:Fn(isize)->isize>(f: &F, x: isize) -> isize {\n-   | -------------------------------------------------------- required by `call_it`\n+   |    -------   ---------------- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&S, 22);\n    |                     ^^ expected an `Fn<(isize,)>` closure, found `S`"}, {"sha": "0b86719df848ab9a1e53a76c80a7dfea35dd0a8a", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `for<'r> unsaf\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   | --------------------------------------------------------- required by `call_it`\n+   |    -------   ----------------- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n@@ -13,7 +13,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> u\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   | --------------------------------------------------------- required by `call_it`\n+   |    -------               ----- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n@@ -24,7 +24,7 @@ error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `for<'r> un\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:18:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   | -------------------------------------------------------------------- required by `call_it_mut`\n+   |    -----------   -------------------- required by this bound in `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n@@ -35,7 +35,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> u\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:18:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   | -------------------------------------------------------------------- required by `call_it_mut`\n+   |    -----------                  ----- required by this bound in `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n@@ -46,7 +46,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> u\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:24:26\n    |\n LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n-   | ----------------------------------------------------------------- required by `call_it_once`\n+   |    ------------                   ----- required by this bound in `call_it_once`\n ...\n LL |     let z = call_it_once(square, 22);\n    |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`"}, {"sha": "17faf047c14e3559f93e23a73063f80860d4e243", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-abi.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `for<'r> exter\n   --> $DIR/unboxed-closures-wrong-abi.rs:12:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   | --------------------------------------------------------- required by `call_it`\n+   |    -------   ----------------- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n@@ -13,7 +13,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> e\n   --> $DIR/unboxed-closures-wrong-abi.rs:12:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   | --------------------------------------------------------- required by `call_it`\n+   |    -------               ----- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n@@ -24,7 +24,7 @@ error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `for<'r> ex\n   --> $DIR/unboxed-closures-wrong-abi.rs:18:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   | -------------------------------------------------------------------- required by `call_it_mut`\n+   |    -----------   -------------------- required by this bound in `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n@@ -35,7 +35,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> e\n   --> $DIR/unboxed-closures-wrong-abi.rs:18:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   | -------------------------------------------------------------------- required by `call_it_mut`\n+   |    -----------                  ----- required by this bound in `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n@@ -46,7 +46,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> e\n   --> $DIR/unboxed-closures-wrong-abi.rs:24:26\n    |\n LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n-   | ----------------------------------------------------------------- required by `call_it_once`\n+   |    ------------                   ----- required by this bound in `call_it_once`\n ...\n LL |     let z = call_it_once(square, 22);\n    |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`"}, {"sha": "5b1d6eb5b681bdcd135286b77799a03aa4b8f929", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `unsafe fn(isi\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   | --------------------------------------------------------- required by `call_it`\n+   |    -------   ----------------- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n@@ -13,7 +13,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   | --------------------------------------------------------- required by `call_it`\n+   |    -------               ----- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n@@ -24,7 +24,7 @@ error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `unsafe fn(\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:19:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   | -------------------------------------------------------------------- required by `call_it_mut`\n+   |    -----------   -------------------- required by this bound in `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n@@ -35,7 +35,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:19:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   | -------------------------------------------------------------------- required by `call_it_mut`\n+   |    -----------                  ----- required by this bound in `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n@@ -46,7 +46,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:25:26\n    |\n LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n-   | ----------------------------------------------------------------- required by `call_it_once`\n+   |    ------------                   ----- required by this bound in `call_it_once`\n ...\n LL |     let z = call_it_once(square, 22);\n    |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`"}, {"sha": "e56176690a113d9898e041cbff0885723f44ebc7", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,10 +1,10 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/unsized-bare-typaram.rs:2:23\n+  --> $DIR/unsized-bare-typaram.rs:2:29\n    |\n LL | fn bar<T: Sized>() { }\n-   | ------------------ required by `bar`\n+   |    --- - required by this bound in `bar`\n LL | fn foo<T: ?Sized>() { bar::<T>() }\n-   |                       ^^^^^^^^ doesn't have a size known at compile-time\n+   |                             ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "0d4776ff6c25b6139d1d1734007a5344c488f2a5", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -15,7 +15,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/unsized-struct.rs:13:24\n    |\n LL | fn is_sized<T:Sized>() { }\n-   | ---------------------- required by `is_sized`\n+   |    -------- - required by this bound in `is_sized`\n ...\n LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n    |                        ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "c821a08f6b585d3519c0c496bae3b578227e7222", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -5,7 +5,7 @@ LL |     f2::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n LL | fn f2<X>(x: &X) {\n-   | --------------- required by `f2`\n+   |    -- - required by this bound in `f2`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n@@ -18,7 +18,7 @@ LL |     f4::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n LL | fn f4<X: T>(x: &X) {\n-   | ------------------ required by `f4`\n+   |    -- - required by this bound in `f4`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n@@ -28,7 +28,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:33:8\n    |\n LL | fn f5<Y>(x: &Y) {}\n-   | --------------- required by `f5`\n+   |    -- - required by this bound in `f5`\n ...\n LL |     f5(x1);\n    |        ^^ doesn't have a size known at compile-time\n@@ -67,7 +67,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:45:8\n    |\n LL | fn f5<Y>(x: &Y) {}\n-   | --------------- required by `f5`\n+   |    -- - required by this bound in `f5`\n ...\n LL |     f5(&(32, *x1));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "727c9b8e0672141dbca32dc81a757f669815b9c8", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-inherent-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/where-clause-constraints-are-local-for-inherent-impl.rs:13:22\n    |\n LL | fn require_copy<T: Copy>(x: T) {}\n-   | ------------------------------ required by `require_copy`\n+   |    ------------    ---- required by this bound in `require_copy`\n ...\n LL |         require_copy(self.x);\n    |                      ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "1c1937c3074db760b273a6261797ef32d95deeab", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-trait-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/where-clause-constraints-are-local-for-trait-impl.rs:18:22\n    |\n LL | fn require_copy<T: Copy>(x: T) {}\n-   | ------------------------------ required by `require_copy`\n+   |    ------------    ---- required by this bound in `require_copy`\n ...\n LL |         require_copy(self.x);\n    |                      ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "1c859ac648c3b0875e5af117d2ff4ea5a2f52e45", "filename": "src/test/ui/where-clauses/where-clauses-unsatisfied.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Struct: std::cmp::Eq` is not satisfied\n   --> $DIR/where-clauses-unsatisfied.rs:6:10\n    |\n LL | fn equal<T>(a: &T, b: &T) -> bool where T : Eq { a == b }\n-   | ---------------------------------------------- required by `equal`\n+   |    -----                                    -- required by this bound in `equal`\n ...\n LL |     drop(equal(&Struct, &Struct))\n    |          ^^^^^ the trait `std::cmp::Eq` is not implemented for `Struct`"}, {"sha": "b18b36d029d702f6a2a8c16a76f3af673a29e191", "filename": "src/test/ui/where-clauses/where-for-self-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b7e71bec30753a1c4c387c8b14710b8674649f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr?ref=c0b7e71bec30753a1c4c387c8b14710b8674649f", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: the trait bound `for<'a> &'a _: Bar` is not satisfied\n   --> $DIR/where-for-self-2.rs:21:5\n    |\n-LL | / fn foo<T>(x: &T)\n-LL | |     where for<'a> &'a T: Bar\n-LL | | {}\n-   | |__- required by `foo`\n+LL | fn foo<T>(x: &T)\n+   |    ---\n+LL |     where for<'a> &'a T: Bar\n+   |                          --- required by this bound in `foo`\n ...\n-LL |       foo(&X);\n-   |       ^^^ the trait `for<'a> Bar` is not implemented for `&'a _`\n+LL |     foo(&X);\n+   |     ^^^ the trait `for<'a> Bar` is not implemented for `&'a _`\n    |\n    = help: the following implementations were found:\n              <&'static u32 as Bar>"}]}