{"sha": "b04bfb4aea99436a62f6a98056e805eb9b0629cc", "node_id": "C_kwDOAAsO6NoAKGIwNGJmYjRhZWE5OTQzNmE2MmY2YTk4MDU2ZTgwNWViOWIwNjI5Y2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-03T12:17:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-03T12:17:19Z"}, "message": "Auto merge of #97437 - jyn514:impl-asrawfd-arc, r=dtolnay\n\n`impl<T: AsRawFd> AsRawFd for {Arc,Box}<T>`\n\nThis allows implementing traits that require a raw FD on Arc and Box.\n\nPreviously, you'd have to add the function to the trait itself:\n\n```rust\ntrait MyTrait {\n    fn as_raw_fd(&self) -> RawFd;\n}\n\nimpl<T: MyTrait> MyTrait for Arc<T> {\n    fn as_raw_fd(&self) -> RawFd {\n        (**self).as_raw_fd()\n    }\n}\n```\n\nIn particular, this leads to lots of \"multiple applicable items in scope\" errors because you have to disambiguate `MyTrait::as_raw_fd` from `AsRawFd::as_raw_fd` at each call site. In generic contexts, when passing the type to a function that takes `impl AsRawFd` it's also sometimes required to use `T: MyTrait + AsRawFd`, which wouldn't be necessary if I could write `MyTrait: AsRawFd`.\n\nAfter this PR, the code can be simpler:\n```rust\ntrait MyTrait: AsRawFd {}\n\nimpl<T: MyTrait> MyTrait for Arc<T> {}\n```", "tree": {"sha": "eef697fac1f57d2430ef72c8261c02311e549d91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eef697fac1f57d2430ef72c8261c02311e549d91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b04bfb4aea99436a62f6a98056e805eb9b0629cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b04bfb4aea99436a62f6a98056e805eb9b0629cc", "html_url": "https://github.com/rust-lang/rust/commit/b04bfb4aea99436a62f6a98056e805eb9b0629cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b04bfb4aea99436a62f6a98056e805eb9b0629cc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f99f9e48ed77a99747c6d07b42fdfe500f1a7de0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f99f9e48ed77a99747c6d07b42fdfe500f1a7de0", "html_url": "https://github.com/rust-lang/rust/commit/f99f9e48ed77a99747c6d07b42fdfe500f1a7de0"}, {"sha": "cf483a130cdfa1e72678fd98c74b11fedb3ae8dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf483a130cdfa1e72678fd98c74b11fedb3ae8dd", "html_url": "https://github.com/rust-lang/rust/commit/cf483a130cdfa1e72678fd98c74b11fedb3ae8dd"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "d661a13edc5e57a464a33c133e06690717de02f5", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b04bfb4aea99436a62f6a98056e805eb9b0629cc/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bfb4aea99436a62f6a98056e805eb9b0629cc/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=b04bfb4aea99436a62f6a98056e805eb9b0629cc", "patch": "@@ -355,3 +355,34 @@ impl From<OwnedFd> for crate::net::UdpSocket {\n         ))))\n     }\n }\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+/// This impl allows implementing traits that require `AsFd` on Arc.\n+/// ```\n+/// # #[cfg(any(unix, target_os = \"wasi\"))] mod group_cfg {\n+/// # #[cfg(target_os = \"wasi\")]\n+/// # use std::os::wasi::io::AsFd;\n+/// # #[cfg(unix)]\n+/// # use std::os::unix::io::AsFd;\n+/// use std::net::UdpSocket;\n+/// use std::sync::Arc;\n+///\n+/// trait MyTrait: AsFd {}\n+/// impl MyTrait for Arc<UdpSocket> {}\n+/// impl MyTrait for Box<UdpSocket> {}\n+/// # }\n+/// ```\n+impl<T: AsFd> AsFd for crate::sync::Arc<T> {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        (**self).as_fd()\n+    }\n+}\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl<T: AsFd> AsFd for Box<T> {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        (**self).as_fd()\n+    }\n+}"}, {"sha": "345beb1824dfafdb1e209c64d6eb4f42c1cd65a2", "filename": "library/std/src/os/fd/raw.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b04bfb4aea99436a62f6a98056e805eb9b0629cc/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bfb4aea99436a62f6a98056e805eb9b0629cc/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs?ref=b04bfb4aea99436a62f6a98056e805eb9b0629cc", "patch": "@@ -222,3 +222,34 @@ impl<'a> AsRawFd for io::StderrLock<'a> {\n         libc::STDERR_FILENO\n     }\n }\n+\n+/// This impl allows implementing traits that require `AsRawFd` on Arc.\n+/// ```\n+/// # #[cfg(any(unix, target_os = \"wasi\"))] mod group_cfg {\n+/// # #[cfg(target_os = \"wasi\")]\n+/// # use std::os::wasi::io::AsRawFd;\n+/// # #[cfg(unix)]\n+/// # use std::os::unix::io::AsRawFd;\n+/// use std::net::UdpSocket;\n+/// use std::sync::Arc;\n+/// trait MyTrait: AsRawFd {\n+/// }\n+/// impl MyTrait for Arc<UdpSocket> {}\n+/// impl MyTrait for Box<UdpSocket> {}\n+/// # }\n+/// ```\n+#[stable(feature = \"asrawfd_ptrs\", since = \"1.63.0\")]\n+impl<T: AsRawFd> AsRawFd for crate::sync::Arc<T> {\n+    #[inline]\n+    fn as_raw_fd(&self) -> RawFd {\n+        (**self).as_raw_fd()\n+    }\n+}\n+\n+#[stable(feature = \"asrawfd_ptrs\", since = \"1.63.0\")]\n+impl<T: AsRawFd> AsRawFd for Box<T> {\n+    #[inline]\n+    fn as_raw_fd(&self) -> RawFd {\n+        (**self).as_raw_fd()\n+    }\n+}"}]}