{"sha": "5b255883f5bb92772a04e60d57fb2bffd037b890", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMjU1ODgzZjViYjkyNzcyYTA0ZTYwZDU3ZmIyYmZmZDAzN2I4OTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-30T11:02:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-30T11:02:43Z"}, "message": "Auto merge of #4972 - JohnTitor:rustup, r=llogiq\n\nRustup to rust-lang/rust#66942\n\nchangelog: none", "tree": {"sha": "51fc4e489b70c607cc978f5a73fe7613294f2301", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51fc4e489b70c607cc978f5a73fe7613294f2301"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b255883f5bb92772a04e60d57fb2bffd037b890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b255883f5bb92772a04e60d57fb2bffd037b890", "html_url": "https://github.com/rust-lang/rust/commit/5b255883f5bb92772a04e60d57fb2bffd037b890", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b255883f5bb92772a04e60d57fb2bffd037b890/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c807fbc8ba41432388b6f590668ba81314c07c32", "url": "https://api.github.com/repos/rust-lang/rust/commits/c807fbc8ba41432388b6f590668ba81314c07c32", "html_url": "https://github.com/rust-lang/rust/commit/c807fbc8ba41432388b6f590668ba81314c07c32"}, {"sha": "790012ad7767fd38f9aa16cfafeb8459249c082e", "url": "https://api.github.com/repos/rust-lang/rust/commits/790012ad7767fd38f9aa16cfafeb8459249c082e", "html_url": "https://github.com/rust-lang/rust/commit/790012ad7767fd38f9aa16cfafeb8459249c082e"}], "stats": {"total": 272, "additions": 141, "deletions": 131}, "files": [{"sha": "802ed6ec8e4bee57d3fc5fe0ac568c1ecdf75e7e", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -60,7 +60,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonminimalBool {\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         _: intravisit::FnKind<'tcx>,\n-        _: &'tcx FnDecl,\n+        _: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         _: Span,\n         _: HirId,"}, {"sha": "05cbd625170e3126cb0f139c164a1e8c9e05a983", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -287,7 +287,7 @@ fn get_types_from_cast<'a>(expr: &'a Expr<'_>, func: &'a str, types: &'a [&str])\n }\n \n /// Gets the type which implements the called function\n-fn get_implementing_type<'a>(path: &QPath, candidates: &'a [&str], function: &str) -> Option<&'a str> {\n+fn get_implementing_type<'a>(path: &QPath<'_>, candidates: &'a [&str], function: &str) -> Option<&'a str> {\n     if_chain! {\n         if let QPath::TypeRelative(ref ty, ref path) = &path;\n         if path.ident.name.as_str() == function;\n@@ -304,7 +304,7 @@ fn get_implementing_type<'a>(path: &QPath, candidates: &'a [&str], function: &st\n }\n \n /// Gets the type as a string, if it is a supported integer\n-fn int_ty_to_sym(path: &QPath) -> Option<&str> {\n+fn int_ty_to_sym<'tcx>(path: &QPath<'_>) -> Option<&'tcx str> {\n     if_chain! {\n         if let QPath::Resolved(_, ref path) = *path;\n         if let [ty] = &*path.segments;"}, {"sha": "083b20716f0c38bab9a3a96bad8be590d6ec0659", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -47,7 +47,7 @@ impl CognitiveComplexity {\n         &mut self,\n         cx: &'a LateContext<'a, 'tcx>,\n         kind: FnKind<'tcx>,\n-        decl: &'tcx FnDecl,\n+        decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         body_span: Span,\n     ) {\n@@ -116,7 +116,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CognitiveComplexity {\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         kind: FnKind<'tcx>,\n-        decl: &'tcx FnDecl,\n+        decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n         hir_id: HirId,"}, {"sha": "540976a0fb90047fd9aee53c1dcea5a31243d244", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -320,7 +320,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n     }\n \n     /// Lookup a possibly constant expression from a `ExprKind::Path`.\n-    fn fetch_path(&mut self, qpath: &QPath, id: HirId) -> Option<Constant> {\n+    fn fetch_path(&mut self, qpath: &QPath<'_>, id: HirId) -> Option<Constant> {\n         let res = self.tables.qpath_res(qpath, id);\n         match res {\n             Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) => {"}, {"sha": "dd6e826a3a256aadaef6dd7e0aae9ac04e2b9800", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -84,7 +84,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Derive {\n fn check_hash_peq<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     span: Span,\n-    trait_ref: &TraitRef,\n+    trait_ref: &TraitRef<'_>,\n     ty: Ty<'tcx>,\n     hash_is_automatically_derived: bool,\n ) {\n@@ -130,7 +130,7 @@ fn check_hash_peq<'a, 'tcx>(\n }\n \n /// Implementation of the `EXPL_IMPL_CLONE_ON_COPY` lint.\n-fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item<'_>, trait_ref: &TraitRef, ty: Ty<'tcx>) {\n+fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item<'_>, trait_ref: &TraitRef<'_>, ty: Ty<'tcx>) {\n     if match_path(&trait_ref.path, &paths::CLONE_TRAIT) {\n         if !is_copy(cx, ty) {\n             return;"}, {"sha": "d5caf7db989c42063a2f7056b5c2d51e86836571", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -190,7 +190,7 @@ fn lint_for_missing_headers<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     hir_id: hir::HirId,\n     span: impl Into<MultiSpan> + Copy,\n-    sig: &hir::FnSig,\n+    sig: &hir::FnSig<'_>,\n     headers: DocHeaders,\n ) {\n     if !cx.access_levels.is_exported(hir_id) {"}, {"sha": "7dfc99b5f945ee66a74be3bc659f15dbd88b2422", "filename": "clippy_lints/src/drop_bounds.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fdrop_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fdrop_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_bounds.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -39,21 +39,21 @@ const DROP_BOUNDS_SUMMARY: &str = \"Bounds of the form `T: Drop` are useless. \\\n declare_lint_pass!(DropBounds => [DROP_BOUNDS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DropBounds {\n-    fn check_generic_param(&mut self, cx: &rustc::lint::LateContext<'a, 'tcx>, p: &'tcx GenericParam) {\n-        for bound in &p.bounds {\n+    fn check_generic_param(&mut self, cx: &rustc::lint::LateContext<'a, 'tcx>, p: &'tcx GenericParam<'_>) {\n+        for bound in p.bounds.iter() {\n             lint_bound(cx, bound);\n         }\n     }\n-    fn check_where_predicate(&mut self, cx: &rustc::lint::LateContext<'a, 'tcx>, p: &'tcx WherePredicate) {\n+    fn check_where_predicate(&mut self, cx: &rustc::lint::LateContext<'a, 'tcx>, p: &'tcx WherePredicate<'_>) {\n         if let WherePredicate::BoundPredicate(WhereBoundPredicate { bounds, .. }) = p {\n-            for bound in bounds {\n+            for bound in *bounds {\n                 lint_bound(cx, bound);\n             }\n         }\n     }\n }\n \n-fn lint_bound<'a, 'tcx>(cx: &rustc::lint::LateContext<'a, 'tcx>, bound: &'tcx GenericBound) {\n+fn lint_bound<'a, 'tcx>(cx: &rustc::lint::LateContext<'a, 'tcx>, bound: &'tcx GenericBound<'_>) {\n     if_chain! {\n         if let GenericBound::Trait(t, _) = bound;\n         if let Some(def_id) = t.trait_ref.path.res.opt_def_id();"}, {"sha": "4f0fde8fbe983119c0bf285ea51367ce971c1df7", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxedLocal {\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         _: visit::FnKind<'tcx>,\n-        _: &'tcx FnDecl,\n+        _: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         _: Span,\n         hir_id: HirId,"}, {"sha": "71d0aba8acac2d1c118def6e8865ae8bc96f932e", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FallibleImplFrom {\n     }\n }\n \n-fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_items: &[hir::ImplItemRef]) {\n+fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_items: &[hir::ImplItemRef<'_>]) {\n     use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n     use rustc::hir::*;\n "}, {"sha": "5b6d1d72fbe017fcc14b9620e774dfa87a0e26f9", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -187,7 +187,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         kind: intravisit::FnKind<'tcx>,\n-        decl: &'tcx hir::FnDecl,\n+        decl: &'tcx hir::FnDecl<'_>,\n         body: &'tcx hir::Body<'_>,\n         span: Span,\n         hir_id: hir::HirId,\n@@ -306,7 +306,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n }\n \n impl<'a, 'tcx> Functions {\n-    fn check_arg_number(self, cx: &LateContext<'_, '_>, decl: &hir::FnDecl, fn_span: Span) {\n+    fn check_arg_number(self, cx: &LateContext<'_, '_>, decl: &hir::FnDecl<'_>, fn_span: Span) {\n         let args = decl.inputs.len() as u64;\n         if args > self.threshold {\n             span_lint(\n@@ -375,7 +375,7 @@ impl<'a, 'tcx> Functions {\n     fn check_raw_ptr(\n         cx: &LateContext<'a, 'tcx>,\n         unsafety: hir::Unsafety,\n-        decl: &'tcx hir::FnDecl,\n+        decl: &'tcx hir::FnDecl<'_>,\n         body: &'tcx hir::Body<'_>,\n         hir_id: hir::HirId,\n     ) {\n@@ -402,7 +402,7 @@ impl<'a, 'tcx> Functions {\n \n fn check_needless_must_use(\n     cx: &LateContext<'_, '_>,\n-    decl: &hir::FnDecl,\n+    decl: &hir::FnDecl<'_>,\n     item_id: hir::HirId,\n     item_span: Span,\n     fn_header_span: Span,\n@@ -439,7 +439,7 @@ fn check_needless_must_use(\n \n fn check_must_use_candidate<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n-    decl: &'tcx hir::FnDecl,\n+    decl: &'tcx hir::FnDecl<'_>,\n     body: &'tcx hir::Body<'_>,\n     item_span: Span,\n     item_id: hir::HirId,\n@@ -467,7 +467,7 @@ fn check_must_use_candidate<'a, 'tcx>(\n     });\n }\n \n-fn returns_unit(decl: &hir::FnDecl) -> bool {\n+fn returns_unit(decl: &hir::FnDecl<'_>) -> bool {\n     match decl.output {\n         hir::FunctionRetTy::DefaultReturn(_) => true,\n         hir::FunctionRetTy::Return(ref ty) => match ty.kind {\n@@ -518,7 +518,7 @@ fn is_mutable_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, span: Span,\n     }\n }\n \n-fn raw_ptr_arg(arg: &hir::Param<'_>, ty: &hir::Ty) -> Option<hir::HirId> {\n+fn raw_ptr_arg(arg: &hir::Param<'_>, ty: &hir::Ty<'_>) -> Option<hir::HirId> {\n     if let (&hir::PatKind::Binding(_, id, _, _), &hir::TyKind::Ptr(_)) = (&arg.pat.kind, &ty.kind) {\n         Some(id)\n     } else {"}, {"sha": "b326fe24d553c345770bcd7ca8d07fb662242940", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -129,7 +129,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitReturn {\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         _: FnKind<'tcx>,\n-        _: &'tcx FnDecl,\n+        _: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n         _: HirId,"}, {"sha": "6508e7ec4f6cad6b2186912264de2c4a7b24e0f7", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -166,8 +166,8 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item<'_>, trait_i\n     }\n }\n \n-fn check_impl_items(cx: &LateContext<'_, '_>, item: &Item<'_>, impl_items: &[ImplItemRef]) {\n-    fn is_named_self(cx: &LateContext<'_, '_>, item: &ImplItemRef, name: &str) -> bool {\n+fn check_impl_items(cx: &LateContext<'_, '_>, item: &Item<'_>, impl_items: &[ImplItemRef<'_>]) {\n+    fn is_named_self(cx: &LateContext<'_, '_>, item: &ImplItemRef<'_>, name: &str) -> bool {\n         item.ident.name.as_str() == name\n             && if let AssocItemKind::Method { has_self } = item.kind {\n                 has_self && {"}, {"sha": "89bbd766c3813ce5ef41d915413981f5e5735464", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -112,9 +112,9 @@ enum RefLt {\n \n fn check_fn_inner<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n-    decl: &'tcx FnDecl,\n+    decl: &'tcx FnDecl<'_>,\n     body: Option<BodyId>,\n-    generics: &'tcx Generics,\n+    generics: &'tcx Generics<'_>,\n     span: Span,\n     report_extra_lifetimes: bool,\n ) {\n@@ -128,7 +128,7 @@ fn check_fn_inner<'a, 'tcx>(\n         _ => false,\n     });\n     for typ in types {\n-        for bound in &typ.bounds {\n+        for bound in typ.bounds {\n             let mut visitor = RefVisitor::new(cx);\n             walk_param_bound(&mut visitor, bound);\n             if visitor.lts.iter().any(|lt| matches!(lt, RefLt::Named(_))) {\n@@ -173,9 +173,9 @@ fn check_fn_inner<'a, 'tcx>(\n \n fn could_use_elision<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n-    func: &'tcx FnDecl,\n+    func: &'tcx FnDecl<'_>,\n     body: Option<BodyId>,\n-    named_generics: &'tcx [GenericParam],\n+    named_generics: &'tcx [GenericParam<'_>],\n     bounds_lts: Vec<&'tcx Lifetime>,\n ) -> bool {\n     // There are two scenarios where elision works:\n@@ -192,7 +192,7 @@ fn could_use_elision<'a, 'tcx>(\n     let mut output_visitor = RefVisitor::new(cx);\n \n     // extract lifetimes in input argument types\n-    for arg in &func.inputs {\n+    for arg in func.inputs {\n         input_visitor.visit_ty(arg);\n     }\n     // extract lifetimes in output type\n@@ -258,7 +258,7 @@ fn could_use_elision<'a, 'tcx>(\n     }\n }\n \n-fn allowed_lts_from(named_generics: &[GenericParam]) -> FxHashSet<RefLt> {\n+fn allowed_lts_from(named_generics: &[GenericParam<'_>]) -> FxHashSet<RefLt> {\n     let mut allowed_lts = FxHashSet::default();\n     for par in named_generics.iter() {\n         if let GenericParamKind::Lifetime { .. } = par.kind {\n@@ -328,7 +328,7 @@ impl<'v, 't> RefVisitor<'v, 't> {\n         }\n     }\n \n-    fn collect_anonymous_lifetimes(&mut self, qpath: &QPath, ty: &Ty) {\n+    fn collect_anonymous_lifetimes(&mut self, qpath: &QPath<'_>, ty: &Ty<'_>) {\n         if let Some(ref last_path_segment) = last_path_segment(qpath).args {\n             if !last_path_segment.parenthesized\n                 && !last_path_segment.args.iter().any(|arg| match arg {\n@@ -363,7 +363,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n         self.record(&Some(*lifetime));\n     }\n \n-    fn visit_ty(&mut self, ty: &'tcx Ty) {\n+    fn visit_ty(&mut self, ty: &'tcx Ty<'_>) {\n         match ty.kind {\n             TyKind::Rptr(ref lt, _) if lt.is_elided() => {\n                 self.record(&None);\n@@ -374,7 +374,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n             TyKind::Def(item, _) => {\n                 let map = self.cx.tcx.hir();\n                 if let ItemKind::OpaqueTy(ref exist_ty) = map.expect_item(item.id).kind {\n-                    for bound in &exist_ty.bounds {\n+                    for bound in exist_ty.bounds {\n                         if let GenericBound::Outlives(_) = *bound {\n                             self.record(&None);\n                         }\n@@ -384,7 +384,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 }\n                 walk_ty(self, ty);\n             },\n-            TyKind::TraitObject(ref bounds, ref lt) => {\n+            TyKind::TraitObject(bounds, ref lt) => {\n                 if !lt.is_elided() {\n                     self.abort = true;\n                 }\n@@ -404,8 +404,8 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n \n /// Are any lifetimes mentioned in the `where` clause? If so, we don't try to\n /// reason about elision.\n-fn has_where_lifetimes<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, where_clause: &'tcx WhereClause) -> bool {\n-    for predicate in &where_clause.predicates {\n+fn has_where_lifetimes<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, where_clause: &'tcx WhereClause<'_>) -> bool {\n+    for predicate in where_clause.predicates {\n         match *predicate {\n             WherePredicate::RegionPredicate(..) => return true,\n             WherePredicate::BoundPredicate(ref pred) => {\n@@ -457,7 +457,7 @@ impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n         self.map.remove(&lifetime.name.ident().name);\n     }\n \n-    fn visit_generic_param(&mut self, param: &'tcx GenericParam) {\n+    fn visit_generic_param(&mut self, param: &'tcx GenericParam<'_>) {\n         // don't actually visit `<'a>` or `<'a: 'b>`\n         // we've already visited the `'a` declarations and\n         // don't want to spuriously remove them\n@@ -472,7 +472,7 @@ impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n     }\n }\n \n-fn report_extra_lifetimes<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, func: &'tcx FnDecl, generics: &'tcx Generics) {\n+fn report_extra_lifetimes<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, func: &'tcx FnDecl<'_>, generics: &'tcx Generics<'_>) {\n     let hs = generics\n         .params\n         .iter()"}, {"sha": "bd3e73fbe352b960801ae5eb2346c2a15e7db2ae", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -3109,8 +3109,8 @@ enum OutType {\n }\n \n impl OutType {\n-    fn matches(self, cx: &LateContext<'_, '_>, ty: &hir::FunctionRetTy) -> bool {\n-        let is_unit = |ty: &hir::Ty| SpanlessEq::new(cx).eq_ty_kind(&ty.kind, &hir::TyKind::Tup(vec![].into()));\n+    fn matches(self, cx: &LateContext<'_, '_>, ty: &hir::FunctionRetTy<'_>) -> bool {\n+        let is_unit = |ty: &hir::Ty<'_>| SpanlessEq::new(cx).eq_ty_kind(&ty.kind, &hir::TyKind::Tup(&[]));\n         match (self, ty) {\n             (Self::Unit, &hir::DefaultReturn(_)) => true,\n             (Self::Unit, &hir::Return(ref ty)) if is_unit(ty) => true,\n@@ -3122,7 +3122,7 @@ impl OutType {\n     }\n }\n \n-fn is_bool(ty: &hir::Ty) -> bool {\n+fn is_bool(ty: &hir::Ty<'_>) -> bool {\n     if let hir::TyKind::Path(ref p) = ty.kind {\n         match_qpath(p, &[\"bool\"])\n     } else {"}, {"sha": "ebca11e1851304b0154e779abe5696e33c4e3fe9", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -83,7 +83,7 @@ struct UnwrapVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UnwrapVisitor<'a, 'tcx> {\n-    fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n+    fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n         self.identifiers.insert(ident(path));\n         walk_path(self, path);\n     }\n@@ -100,7 +100,7 @@ struct MapExprVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n-    fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n+    fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n         if self.identifiers.contains(&ident(path)) {\n             self.found_identifier = true;\n             return;\n@@ -113,7 +113,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n     }\n }\n \n-fn ident(path: &Path) -> Symbol {\n+fn ident(path: &Path<'_>) -> Symbol {\n     path.segments\n         .last()\n         .expect(\"segments should be composed of at least 1 element\")"}, {"sha": "248b6e4229a4206949af7eb42fe24c2582245c29", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -237,7 +237,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         k: FnKind<'tcx>,\n-        decl: &'tcx FnDecl,\n+        decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         _: Span,\n         _: HirId,\n@@ -626,7 +626,7 @@ fn non_macro_local(cx: &LateContext<'_, '_>, res: def::Res) -> bool {\n     }\n }\n \n-fn check_cast(cx: &LateContext<'_, '_>, span: Span, e: &Expr<'_>, ty: &Ty) {\n+fn check_cast(cx: &LateContext<'_, '_>, span: Span, e: &Expr<'_>, ty: &Ty<'_>) {\n     if_chain! {\n         if let TyKind::Ptr(ref mut_ty) = ty.kind;\n         if let ExprKind::Lit(ref lit) = e.kind;"}, {"sha": "cbfbc6988520273e1cec0b9c8bbe6f93484a07ad", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{has_drop, is_entrypoint_fn, span_lint, trait_ref_of_method};\n use rustc::declare_lint_pass;\n use rustc::hir;\n use rustc::hir::intravisit::FnKind;\n-use rustc::hir::{Body, Constness, FnDecl, HirId, HirVec};\n+use rustc::hir::{Body, Constness, FnDecl, HirId};\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintPass};\n use rustc_mir::transform::qualify_min_const_fn::is_min_const_fn;\n use rustc_session::declare_tool_lint;\n@@ -76,7 +76,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n         &mut self,\n         cx: &LateContext<'_, '_>,\n         kind: FnKind<'_>,\n-        _: &FnDecl,\n+        _: &FnDecl<'_>,\n         _: &Body<'_>,\n         span: Span,\n         hir_id: HirId,\n@@ -98,7 +98,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n             FnKind::Method(_, sig, ..) => {\n                 if trait_ref_of_method(cx, hir_id).is_some()\n                     || already_const(sig.header)\n-                    || method_accepts_dropable(cx, &sig.decl.inputs)\n+                    || method_accepts_dropable(cx, sig.decl.inputs)\n                 {\n                     return;\n                 }\n@@ -120,7 +120,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n \n /// Returns true if any of the method parameters is a type that implements `Drop`. The method\n /// can't be made const then, because `drop` can't be const-evaluated.\n-fn method_accepts_dropable(cx: &LateContext<'_, '_>, param_tys: &HirVec<hir::Ty>) -> bool {\n+fn method_accepts_dropable(cx: &LateContext<'_, '_>, param_tys: &[hir::Ty<'_>]) -> bool {\n     // If any of the params are dropable, return true\n     param_tys.iter().any(|hir_ty| {\n         let ty_ty = hir_ty_to_ty(cx.tcx, hir_ty);"}, {"sha": "62aa79bb95a45f4c1282e93ead2798b840d9c4c3", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableKeyType {\n     }\n }\n \n-fn check_sig<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item_hir_id: hir::HirId, decl: &hir::FnDecl) {\n+fn check_sig<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item_hir_id: hir::HirId, decl: &hir::FnDecl<'_>) {\n     let fn_def_id = cx.tcx.hir().local_def_id(item_hir_id);\n     let fn_sig = cx.tcx.fn_sig(fn_def_id);\n     for (hir_ty, ty) in decl.inputs.iter().zip(fn_sig.inputs().skip_binder().iter()) {"}, {"sha": "66cd61e2a6f11fb5ffc85070eddf372c80335929", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -32,7 +32,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutMut {\n         intravisit::walk_block(&mut MutVisitor { cx }, block);\n     }\n \n-    fn check_ty(&mut self, cx: &LateContext<'a, 'tcx>, ty: &'tcx hir::Ty) {\n+    fn check_ty(&mut self, cx: &LateContext<'a, 'tcx>, ty: &'tcx hir::Ty<'_>) {\n         use rustc::hir::intravisit::Visitor;\n \n         MutVisitor { cx }.visit_ty(ty);\n@@ -77,7 +77,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n+    fn visit_ty(&mut self, ty: &'tcx hir::Ty<'_>) {\n         if let hir::TyKind::Rptr(\n             _,\n             hir::MutTy {"}, {"sha": "eaae13377ac55c76a519b7e8fb12280ba70e890b", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         kind: FnKind<'tcx>,\n-        decl: &'tcx FnDecl,\n+        decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n         hir_id: HirId,"}, {"sha": "ff21a72e3baca069823aa0bac0b37c982736ad30", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -145,7 +145,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ptr {\n }\n \n #[allow(clippy::too_many_lines)]\n-fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: HirId, opt_body_id: Option<BodyId>) {\n+fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id: Option<BodyId>) {\n     let fn_def_id = cx.tcx.hir().local_def_id(fn_id);\n     let sig = cx.tcx.fn_sig(fn_def_id);\n     let fn_ty = sig.skip_binder();\n@@ -285,7 +285,7 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: HirId, opt_body_id:\n     }\n }\n \n-fn get_rptr_lm(ty: &Ty) -> Option<(&Lifetime, Mutability, Span)> {\n+fn get_rptr_lm<'tcx>(ty: &'tcx Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutability, Span)> {\n     if let TyKind::Rptr(ref lt, ref m) = ty.kind {\n         Some((lt, m.mutbl, ty.span))\n     } else {"}, {"sha": "043c344ed5ffdb1e911c150a0484b1a66da52928", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         _: FnKind<'tcx>,\n-        _: &'tcx FnDecl,\n+        _: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         _: Span,\n         _: HirId,"}, {"sha": "fabaa29d7c5ef384fe3f80387daffa235f15ef68", "filename": "clippy_lints/src/redundant_pattern_matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -172,8 +172,8 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n \n fn find_good_method_for_match<'a>(\n     arms: &[Arm<'_>],\n-    path_left: &QPath,\n-    path_right: &QPath,\n+    path_left: &QPath<'_>,\n+    path_right: &QPath<'_>,\n     expected_left: &[&str],\n     expected_right: &[&str],\n     should_be_left: &'a str,"}, {"sha": "fc59ec3a3fe10090cdab3c419406e4b7bf7d19a3", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Shadow {\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         _: FnKind<'tcx>,\n-        decl: &'tcx FnDecl,\n+        decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         _: Span,\n         _: HirId,\n@@ -100,7 +100,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Shadow {\n     }\n }\n \n-fn check_fn<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl, body: &'tcx Body<'_>) {\n+fn check_fn<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl<'_>, body: &'tcx Body<'_>) {\n     let mut bindings = Vec::new();\n     for arg in iter_input_pats(decl, body) {\n         if let PatKind::Binding(.., ident, _) = arg.pat.kind {\n@@ -345,7 +345,7 @@ fn check_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>, bindin\n     }\n }\n \n-fn check_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty, bindings: &mut Vec<(Name, Span)>) {\n+fn check_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty<'_>, bindings: &mut Vec<(Name, Span)>) {\n     match ty.kind {\n         TyKind::Slice(ref sty) => check_ty(cx, sty, bindings),\n         TyKind::Array(ref fty, ref anon_const) => {\n@@ -355,7 +355,7 @@ fn check_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty, bindings: &mut V\n         TyKind::Ptr(MutTy { ty: ref mty, .. }) | TyKind::Rptr(_, MutTy { ty: ref mty, .. }) => {\n             check_ty(cx, mty, bindings)\n         },\n-        TyKind::Tup(ref tup) => {\n+        TyKind::Tup(tup) => {\n             for t in tup {\n                 check_ty(cx, t, bindings)\n             }\n@@ -377,6 +377,6 @@ fn is_self_shadow(name: Name, expr: &Expr<'_>) -> bool {\n     }\n }\n \n-fn path_eq_name(name: Name, path: &Path) -> bool {\n+fn path_eq_name(name: Name, path: &Path<'_>) -> bool {\n     !path.is_global() && path.segments.len() == 1 && path.segments[0].ident.as_str() == name.as_str()\n }"}, {"sha": "70943894cd271a702a29f0f393eab2655f01bc46", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -32,7 +32,7 @@ declare_clippy_lint! {\n impl_lint_pass!(TraitBounds => [TYPE_REPETITION_IN_BOUNDS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n-    fn check_generics(&mut self, cx: &LateContext<'a, 'tcx>, gen: &'tcx Generics) {\n+    fn check_generics(&mut self, cx: &LateContext<'a, 'tcx>, gen: &'tcx Generics<'_>) {\n         if in_macro(gen.span) {\n             return;\n         }\n@@ -42,7 +42,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n             hasher.finish()\n         };\n         let mut map = FxHashMap::default();\n-        for bound in &gen.where_clause.predicates {\n+        for bound in gen.where_clause.predicates {\n             if let WherePredicate::BoundPredicate(ref p) = bound {\n                 let h = hash(&p.bounded_ty);\n                 if let Some(ref v) = map.insert(h, p.bounds.iter().collect::<Vec<_>>()) {"}, {"sha": "b4fed7ae81208fae12fdb27da31edbb994baf094", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -618,7 +618,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n /// the type's `ToString` implementation. In weird cases it could lead to types\n /// with invalid `'_`\n /// lifetime, but it should be rare.\n-fn get_type_snippet(cx: &LateContext<'_, '_>, path: &QPath, to_ref_ty: Ty<'_>) -> String {\n+fn get_type_snippet(cx: &LateContext<'_, '_>, path: &QPath<'_>, to_ref_ty: Ty<'_>) -> String {\n     let seg = last_path_segment(path);\n     if_chain! {\n         if let Some(ref params) = seg.args;"}, {"sha": "1359fa331b6cb7838a47d09a6fb81d6fbcfb2a6d", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'tcx> TriviallyCopyPassByRef {\n         Self { limit }\n     }\n \n-    fn check_poly_fn(&mut self, cx: &LateContext<'_, 'tcx>, hir_id: HirId, decl: &FnDecl, span: Option<Span>) {\n+    fn check_poly_fn(&mut self, cx: &LateContext<'_, 'tcx>, hir_id: HirId, decl: &FnDecl<'_>, span: Option<Span>) {\n         let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n \n         let fn_sig = cx.tcx.fn_sig(fn_def_id);\n@@ -142,7 +142,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         kind: FnKind<'tcx>,\n-        decl: &'tcx FnDecl,\n+        decl: &'tcx FnDecl<'_>,\n         _body: &'tcx Body<'_>,\n         span: Span,\n         hir_id: HirId,"}, {"sha": "d282987b30efd70744997522e0ab3c1c64f5a6e1", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -170,7 +170,15 @@ declare_clippy_lint! {\n declare_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Types {\n-    fn check_fn(&mut self, cx: &LateContext<'_, '_>, _: FnKind<'_>, decl: &FnDecl, _: &Body<'_>, _: Span, id: HirId) {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'_, '_>,\n+        _: FnKind<'_>,\n+        decl: &FnDecl<'_>,\n+        _: &Body<'_>,\n+        _: Span,\n+        id: HirId,\n+    ) {\n         // Skip trait implementations; see issue #605.\n         if let Some(hir::Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(id)) {\n             if let ItemKind::Impl(_, _, _, _, Some(..), _, _) = item.kind {\n@@ -200,8 +208,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Types {\n     }\n }\n \n-fn check_fn_decl(cx: &LateContext<'_, '_>, decl: &FnDecl) {\n-    for input in &decl.inputs {\n+fn check_fn_decl(cx: &LateContext<'_, '_>, decl: &FnDecl<'_>) {\n+    for input in decl.inputs {\n         check_ty(cx, input, false);\n     }\n \n@@ -211,7 +219,7 @@ fn check_fn_decl(cx: &LateContext<'_, '_>, decl: &FnDecl) {\n }\n \n /// Checks if `qpath` has last segment with type parameter matching `path`\n-fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath, path: &[&str]) -> bool {\n+fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath<'_>, path: &[&str]) -> bool {\n     let last = last_path_segment(qpath);\n     if_chain! {\n         if let Some(ref params) = last.args;\n@@ -236,7 +244,7 @@ fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath, path: &[&str])\n /// The parameter `is_local` distinguishes the context of the type; types from\n /// local bindings should only be checked for the `BORROWED_BOX` lint.\n #[allow(clippy::too_many_lines)]\n-fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n+fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty<'_>, is_local: bool) {\n     if hir_ty.span.from_expansion() {\n         return;\n     }\n@@ -359,7 +367,7 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n         TyKind::Slice(ref ty) | TyKind::Array(ref ty, _) | TyKind::Ptr(MutTy { ref ty, .. }) => {\n             check_ty(cx, ty, is_local)\n         },\n-        TyKind::Tup(ref tys) => {\n+        TyKind::Tup(tys) => {\n             for ty in tys {\n                 check_ty(cx, ty, is_local);\n             }\n@@ -368,7 +376,7 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n     }\n }\n \n-fn check_ty_rptr(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool, lt: &Lifetime, mut_ty: &MutTy) {\n+fn check_ty_rptr(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty<'_>, is_local: bool, lt: &Lifetime, mut_ty: &MutTy<'_>) {\n     match mut_ty.ty.kind {\n         TyKind::Path(ref qpath) => {\n             let hir_id = mut_ty.ty.hir_id;\n@@ -425,10 +433,10 @@ fn check_ty_rptr(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool, lt:\n }\n \n // Returns true if given type is `Any` trait.\n-fn is_any_trait(t: &hir::Ty) -> bool {\n+fn is_any_trait(t: &hir::Ty<'_>) -> bool {\n     if_chain! {\n         if let TyKind::TraitObject(ref traits, _) = t.kind;\n-        if traits.len() >= 1;\n+        if !traits.is_empty();\n         // Only Send/Sync can be used as additional traits, so it is enough to\n         // check only the first trait.\n         if match_path(&traits[0].trait_ref.path, &paths::ANY_TRAIT);\n@@ -1394,7 +1402,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexity {\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         _: FnKind<'tcx>,\n-        decl: &'tcx FnDecl,\n+        decl: &'tcx FnDecl<'_>,\n         _: &'tcx Body<'_>,\n         _: Span,\n         _: HirId,\n@@ -1440,16 +1448,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexity {\n }\n \n impl<'a, 'tcx> TypeComplexity {\n-    fn check_fndecl(&self, cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl) {\n-        for arg in &decl.inputs {\n+    fn check_fndecl(&self, cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl<'_>) {\n+        for arg in decl.inputs {\n             self.check_type(cx, arg);\n         }\n         if let Return(ref ty) = decl.output {\n             self.check_type(cx, ty);\n         }\n     }\n \n-    fn check_type(&self, cx: &LateContext<'_, '_>, ty: &hir::Ty) {\n+    fn check_type(&self, cx: &LateContext<'_, '_>, ty: &hir::Ty<'_>) {\n         if ty.span.from_expansion() {\n             return;\n         }\n@@ -1479,7 +1487,7 @@ struct TypeComplexityVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n-    fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n+    fn visit_ty(&mut self, ty: &'tcx hir::Ty<'_>) {\n         let (add_score, sub_nest) = match ty.kind {\n             // _, &x and *x have only small overhead; don't mess with nesting level\n             TyKind::Infer | TyKind::Ptr(..) | TyKind::Rptr(..) => (1, 0),\n@@ -2131,7 +2139,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n             ItemKind::Fn(ref sig, ref generics, body_id) => {\n                 let body = cx.tcx.hir().body(body_id);\n \n-                for ty in &sig.decl.inputs {\n+                for ty in sig.decl.inputs {\n                     let mut vis = ImplicitHasherTypeVisitor::new(cx);\n                     vis.visit_ty(ty);\n \n@@ -2179,7 +2187,7 @@ enum ImplicitHasherType<'tcx> {\n \n impl<'tcx> ImplicitHasherType<'tcx> {\n     /// Checks that `ty` is a target type without a `BuildHasher`.\n-    fn new<'a>(cx: &LateContext<'a, 'tcx>, hir_ty: &hir::Ty) -> Option<Self> {\n+    fn new<'a>(cx: &LateContext<'a, 'tcx>, hir_ty: &hir::Ty<'_>) -> Option<Self> {\n         if let TyKind::Path(QPath::Resolved(None, ref path)) = hir_ty.kind {\n             let params: Vec<_> = path\n                 .segments\n@@ -2258,7 +2266,7 @@ impl<'a, 'tcx> ImplicitHasherTypeVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ImplicitHasherTypeVisitor<'a, 'tcx> {\n-    fn visit_ty(&mut self, t: &'tcx hir::Ty) {\n+    fn visit_ty(&mut self, t: &'tcx hir::Ty<'_>) {\n         if let Some(target) = ImplicitHasherType::new(self.cx, t) {\n             self.found.push(target);\n         }"}, {"sha": "ec9362fe35cb6a04342e788218bf81222e9c7877", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -86,7 +86,7 @@ struct UnusedSelfVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UnusedSelfVisitor<'a, 'tcx> {\n-    fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n+    fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n         if self.uses_self {\n             // This function already uses `self`\n             return;"}, {"sha": "a5634cc6073b11fa6db1e6a2e96841f48a49daad", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -70,7 +70,7 @@ struct UnwrappableVariablesVisitor<'a, 'tcx> {\n #[derive(Copy, Clone, Debug)]\n struct UnwrapInfo<'tcx> {\n     /// The variable that is checked\n-    ident: &'tcx Path,\n+    ident: &'tcx Path<'tcx>,\n     /// The check, like `x.is_ok()`\n     check: &'tcx Expr<'tcx>,\n     /// Whether `is_some()` or `is_ok()` was called (as opposed to `is_err()` or `is_none()`).\n@@ -191,7 +191,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Unwrap {\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         kind: FnKind<'tcx>,\n-        decl: &'tcx FnDecl,\n+        decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n         fn_id: HirId,"}, {"sha": "d06ed77c22996355d73124bc044e22dcf61fdd90", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -52,7 +52,7 @@ declare_lint_pass!(UseSelf => [USE_SELF]);\n \n const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";\n \n-fn span_use_self_lint(cx: &LateContext<'_, '_>, path: &Path, last_segment: Option<&PathSegment>) {\n+fn span_use_self_lint(cx: &LateContext<'_, '_>, path: &Path<'_>, last_segment: Option<&PathSegment<'_>>) {\n     let last_segment = last_segment.unwrap_or_else(|| path.segments.last().expect(SEGMENTS_MSG));\n \n     // Path segments only include actual path, no methods or fields.\n@@ -84,7 +84,7 @@ struct TraitImplTyVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for TraitImplTyVisitor<'a, 'tcx> {\n-    fn visit_ty(&mut self, t: &'tcx hir::Ty) {\n+    fn visit_ty(&mut self, t: &'tcx hir::Ty<'_>) {\n         let trait_ty = self.trait_type_walker.next();\n         let impl_ty = self.impl_type_walker.next();\n \n@@ -116,7 +116,7 @@ fn check_trait_method_impl_decl<'a, 'tcx>(\n     cx: &'a LateContext<'a, 'tcx>,\n     item_type: Ty<'tcx>,\n     impl_item: &ImplItem<'_>,\n-    impl_decl: &'tcx FnDecl,\n+    impl_decl: &'tcx FnDecl<'_>,\n     impl_trait_ref: &ty::TraitRef<'_>,\n ) {\n     let trait_method = cx\n@@ -218,12 +218,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n }\n \n struct UseSelfVisitor<'a, 'tcx> {\n-    item_path: &'a Path,\n+    item_path: &'a Path<'a>,\n     cx: &'a LateContext<'a, 'tcx>,\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n-    fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n+    fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n         if !path.segments.iter().any(|p| p.ident.span.is_dummy()) {\n             if path.segments.len() >= 2 {\n                 let last_but_one = &path.segments[path.segments.len() - 2];"}, {"sha": "27ab2fb675aa00103597fa0f8aa5aa4a995979f1", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -172,7 +172,7 @@ impl PrintVisitor {\n         }\n     }\n \n-    fn print_qpath(&mut self, path: &QPath) {\n+    fn print_qpath(&mut self, path: &QPath<'_>) {\n         print!(\"    if match_qpath({}, &[\", self.current);\n         print_path(path, &mut true);\n         println!(\"]);\");\n@@ -725,10 +725,10 @@ fn loop_desugaring_name(des: hir::LoopSource) -> &'static str {\n     }\n }\n \n-fn print_path(path: &QPath, first: &mut bool) {\n+fn print_path(path: &QPath<'_>, first: &mut bool) {\n     match *path {\n         QPath::Resolved(_, ref path) => {\n-            for segment in &path.segments {\n+            for segment in path.segments {\n                 if *first {\n                     *first = false;\n                 } else {"}, {"sha": "824c062843e6835be0cb9516fb7f8100bda22eac", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -167,7 +167,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         }\n     }\n \n-    fn eq_generic_arg(&mut self, left: &GenericArg, right: &GenericArg) -> bool {\n+    fn eq_generic_arg(&mut self, left: &GenericArg<'_>, right: &GenericArg<'_>) -> bool {\n         match (left, right) {\n             (GenericArg::Lifetime(l_lt), GenericArg::Lifetime(r_lt)) => Self::eq_lifetime(l_lt, r_lt),\n             (GenericArg::Type(l_ty), GenericArg::Type(r_ty)) => self.eq_ty(l_ty, r_ty),\n@@ -209,7 +209,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     }\n \n     #[allow(clippy::similar_names)]\n-    fn eq_qpath(&mut self, left: &QPath, right: &QPath) -> bool {\n+    fn eq_qpath(&mut self, left: &QPath<'_>, right: &QPath<'_>) -> bool {\n         match (left, right) {\n             (&QPath::Resolved(ref lty, ref lpath), &QPath::Resolved(ref rty, ref rpath)) => {\n                 both(lty, rty, |l, r| self.eq_ty(l, r)) && self.eq_path(lpath, rpath)\n@@ -221,12 +221,12 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         }\n     }\n \n-    fn eq_path(&mut self, left: &Path, right: &Path) -> bool {\n+    fn eq_path(&mut self, left: &Path<'_>, right: &Path<'_>) -> bool {\n         left.is_global() == right.is_global()\n             && over(&left.segments, &right.segments, |l, r| self.eq_path_segment(l, r))\n     }\n \n-    fn eq_path_parameters(&mut self, left: &GenericArgs, right: &GenericArgs) -> bool {\n+    fn eq_path_parameters(&mut self, left: &GenericArgs<'_>, right: &GenericArgs<'_>) -> bool {\n         if !(left.parenthesized || right.parenthesized) {\n             over(&left.args, &right.args, |l, r| self.eq_generic_arg(l, r)) // FIXME(flip1995): may not work\n                 && over(&left.bindings, &right.bindings, |l, r| self.eq_type_binding(l, r))\n@@ -240,11 +240,11 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         }\n     }\n \n-    pub fn eq_path_segments(&mut self, left: &[PathSegment], right: &[PathSegment]) -> bool {\n+    pub fn eq_path_segments(&mut self, left: &[PathSegment<'_>], right: &[PathSegment<'_>]) -> bool {\n         left.len() == right.len() && left.iter().zip(right).all(|(l, r)| self.eq_path_segment(l, r))\n     }\n \n-    pub fn eq_path_segment(&mut self, left: &PathSegment, right: &PathSegment) -> bool {\n+    pub fn eq_path_segment(&mut self, left: &PathSegment<'_>, right: &PathSegment<'_>) -> bool {\n         // The == of idents doesn't work with different contexts,\n         // we have to be explicit about hygiene\n         if left.ident.as_str() != right.ident.as_str() {\n@@ -257,12 +257,12 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         }\n     }\n \n-    pub fn eq_ty(&mut self, left: &Ty, right: &Ty) -> bool {\n+    pub fn eq_ty(&mut self, left: &Ty<'_>, right: &Ty<'_>) -> bool {\n         self.eq_ty_kind(&left.kind, &right.kind)\n     }\n \n     #[allow(clippy::similar_names)]\n-    pub fn eq_ty_kind(&mut self, left: &TyKind, right: &TyKind) -> bool {\n+    pub fn eq_ty_kind(&mut self, left: &TyKind<'_>, right: &TyKind<'_>) -> bool {\n         match (left, right) {\n             (&TyKind::Slice(ref l_vec), &TyKind::Slice(ref r_vec)) => self.eq_ty(l_vec, r_vec),\n             (&TyKind::Array(ref lt, ref ll_id), &TyKind::Array(ref rt, ref rl_id)) => {\n@@ -293,7 +293,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         }\n     }\n \n-    fn eq_type_binding(&mut self, left: &TypeBinding, right: &TypeBinding) -> bool {\n+    fn eq_type_binding(&mut self, left: &TypeBinding<'_>, right: &TypeBinding<'_>) -> bool {\n         left.ident.name == right.ident.name && self.eq_ty(&left.ty(), &right.ty())\n     }\n }\n@@ -544,7 +544,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         n.as_str().hash(&mut self.s);\n     }\n \n-    pub fn hash_qpath(&mut self, p: &QPath) {\n+    pub fn hash_qpath(&mut self, p: &QPath<'_>) {\n         match *p {\n             QPath::Resolved(_, ref path) => {\n                 self.hash_path(path);\n@@ -556,9 +556,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         // self.cx.tables.qpath_res(p, id).hash(&mut self.s);\n     }\n \n-    pub fn hash_path(&mut self, p: &Path) {\n+    pub fn hash_path(&mut self, p: &Path<'_>) {\n         p.is_global().hash(&mut self.s);\n-        for p in &p.segments {\n+        for p in p.segments {\n             self.hash_name(p.ident.name);\n         }\n     }\n@@ -603,11 +603,11 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         }\n     }\n \n-    pub fn hash_ty(&mut self, ty: &Ty) {\n+    pub fn hash_ty(&mut self, ty: &Ty<'_>) {\n         self.hash_tykind(&ty.kind);\n     }\n \n-    pub fn hash_tykind(&mut self, ty: &TyKind) {\n+    pub fn hash_tykind(&mut self, ty: &TyKind<'_>) {\n         std::mem::discriminant(ty).hash(&mut self.s);\n         match ty {\n             TyKind::Slice(ty) => {\n@@ -629,7 +629,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             TyKind::BareFn(bfn) => {\n                 bfn.unsafety.hash(&mut self.s);\n                 bfn.abi.hash(&mut self.s);\n-                for arg in &bfn.decl.inputs {\n+                for arg in bfn.decl.inputs {\n                     self.hash_ty(&arg);\n                 }\n                 match bfn.decl.output {\n@@ -643,7 +643,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 bfn.decl.c_variadic.hash(&mut self.s);\n             },\n             TyKind::Tup(ty_list) => {\n-                for ty in ty_list {\n+                for ty in *ty_list {\n                     self.hash_ty(ty);\n                 }\n             },\n@@ -652,7 +652,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     if let Some(ref ty) = maybe_ty {\n                         self.hash_ty(ty);\n                     }\n-                    for segment in &path.segments {\n+                    for segment in path.segments {\n                         segment.ident.name.hash(&mut self.s);\n                     }\n                 },\n@@ -662,7 +662,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 },\n             },\n             TyKind::Def(_, arg_list) => {\n-                for arg in arg_list {\n+                for arg in *arg_list {\n                     match arg {\n                         GenericArg::Lifetime(ref l) => self.hash_lifetime(l),\n                         GenericArg::Type(ref ty) => self.hash_ty(&ty),"}, {"sha": "4af825816439f9c86a1d0cf2a09783455b9ffbd5", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -214,7 +214,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     }\n }\n \n-fn is_lint_ref_type<'tcx>(cx: &LateContext<'_, 'tcx>, ty: &Ty) -> bool {\n+fn is_lint_ref_type<'tcx>(cx: &LateContext<'_, 'tcx>, ty: &Ty<'_>) -> bool {\n     if let TyKind::Rptr(\n         _,\n         MutTy {\n@@ -243,7 +243,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n \n-    fn visit_path(&mut self, path: &'tcx Path, _: HirId) {\n+    fn visit_path(&mut self, path: &'tcx Path<'_>, _: HirId) {\n         if path.segments.len() == 1 {\n             self.output.insert(path.segments[0].ident.name);\n         }"}, {"sha": "ae0cc8e4a08896266c7501e1c7c5e24791e4f45d", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -162,14 +162,14 @@ pub fn match_var(expr: &Expr<'_>, var: Name) -> bool {\n     false\n }\n \n-pub fn last_path_segment(path: &QPath) -> &PathSegment {\n+pub fn last_path_segment<'tcx>(path: &QPath<'tcx>) -> &'tcx PathSegment<'tcx> {\n     match *path {\n         QPath::Resolved(_, ref path) => path.segments.last().expect(\"A path must have at least one segment\"),\n         QPath::TypeRelative(_, ref seg) => seg,\n     }\n }\n \n-pub fn single_segment_path(path: &QPath) -> Option<&PathSegment> {\n+pub fn single_segment_path<'tcx>(path: &QPath<'tcx>) -> Option<&'tcx PathSegment<'tcx>> {\n     match *path {\n         QPath::Resolved(_, ref path) if path.segments.len() == 1 => Some(&path.segments[0]),\n         QPath::Resolved(..) => None,\n@@ -186,7 +186,7 @@ pub fn single_segment_path(path: &QPath) -> Option<&PathSegment> {\n /// ```rust,ignore\n /// match_qpath(path, &[\"std\", \"rt\", \"begin_unwind\"])\n /// ```\n-pub fn match_qpath(path: &QPath, segments: &[&str]) -> bool {\n+pub fn match_qpath(path: &QPath<'_>, segments: &[&str]) -> bool {\n     match *path {\n         QPath::Resolved(_, ref path) => match_path(path, segments),\n         QPath::TypeRelative(ref ty, ref segment) => match ty.kind {\n@@ -216,7 +216,7 @@ pub fn match_qpath(path: &QPath, segments: &[&str]) -> bool {\n ///     // This is a `rustc::lint::Lint`.\n /// }\n /// ```\n-pub fn match_path(path: &Path, segments: &[&str]) -> bool {\n+pub fn match_path(path: &Path<'_>, segments: &[&str]) -> bool {\n     path.segments\n         .iter()\n         .rev()\n@@ -275,7 +275,7 @@ pub fn path_to_res(cx: &LateContext<'_, '_>, path: &[&str]) -> Option<def::Res>\n     }\n }\n \n-pub fn qpath_res(cx: &LateContext<'_, '_>, qpath: &hir::QPath, id: hir::HirId) -> Res {\n+pub fn qpath_res(cx: &LateContext<'_, '_>, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {\n     match qpath {\n         hir::QPath::Resolved(_, path) => path.res,\n         hir::QPath::TypeRelative(..) => {\n@@ -340,7 +340,7 @@ pub fn implements_trait<'a, 'tcx>(\n ///     }\n /// }\n /// ```\n-pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'_, 'tcx>, hir_id: HirId) -> Option<&'tcx TraitRef> {\n+pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'_, 'tcx>, hir_id: HirId) -> Option<&'tcx TraitRef<'tcx>> {\n     // Get the implemented trait for the current function\n     let parent_impl = cx.tcx.hir().get_parent_item(hir_id);\n     if_chain! {\n@@ -661,7 +661,7 @@ pub fn get_enclosing_block<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, hir_id: HirId)\n }\n \n /// Returns the base type for HIR references and pointers.\n-pub fn walk_ptrs_hir_ty(ty: &hir::Ty) -> &hir::Ty {\n+pub fn walk_ptrs_hir_ty<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> &'tcx hir::Ty<'tcx> {\n     match ty.kind {\n         TyKind::Ptr(ref mut_ty) | TyKind::Rptr(_, ref mut_ty) => walk_ptrs_hir_ty(&mut_ty.ty),\n         _ => ty,\n@@ -826,7 +826,7 @@ pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_, '_>, expr: &Exp\n \n /// Returns `true` if a pattern is refutable.\n pub fn is_refutable(cx: &LateContext<'_, '_>, pat: &Pat<'_>) -> bool {\n-    fn is_enum_variant(cx: &LateContext<'_, '_>, qpath: &QPath, id: HirId) -> bool {\n+    fn is_enum_variant(cx: &LateContext<'_, '_>, qpath: &QPath<'_>, id: HirId) -> bool {\n         matches!(\n             cx.tables.qpath_res(qpath, id),\n             def::Res::Def(DefKind::Variant, ..) | Res::Def(DefKind::Ctor(def::CtorOf::Variant, _), _)\n@@ -892,7 +892,7 @@ pub fn is_self(slf: &Param<'_>) -> bool {\n     }\n }\n \n-pub fn is_self_ty(slf: &hir::Ty) -> bool {\n+pub fn is_self_ty(slf: &hir::Ty<'_>) -> bool {\n     if_chain! {\n         if let TyKind::Path(ref qp) = slf.kind;\n         if let QPath::Resolved(None, ref path) = *qp;\n@@ -904,7 +904,7 @@ pub fn is_self_ty(slf: &hir::Ty) -> bool {\n     false\n }\n \n-pub fn iter_input_pats<'tcx>(decl: &FnDecl, body: &'tcx Body<'_>) -> impl Iterator<Item = &'tcx Param<'tcx>> {\n+pub fn iter_input_pats<'tcx>(decl: &FnDecl<'_>, body: &'tcx Body<'_>) -> impl Iterator<Item = &'tcx Param<'tcx>> {\n     (0..decl.inputs.len()).map(move |i| &body.params[i])\n }\n "}, {"sha": "d60ab7e7265a75ca77c00e7646cba07e3521716d", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -23,7 +23,7 @@ pub fn mutated_variables<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &'a LateContext<'a,\n }\n \n pub fn is_potentially_mutated<'a, 'tcx>(\n-    variable: &'tcx Path,\n+    variable: &'tcx Path<'_>,\n     expr: &'tcx Expr<'_>,\n     cx: &'a LateContext<'a, 'tcx>,\n ) -> bool {"}, {"sha": "92b6f7015557701aaee4c7fb07aa4fb2b26c5d02", "filename": "mini-macro/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b255883f5bb92772a04e60d57fb2bffd037b890/mini-macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b255883f5bb92772a04e60d57fb2bffd037b890/mini-macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mini-macro%2Fsrc%2Flib.rs?ref=5b255883f5bb92772a04e60d57fb2bffd037b890", "patch": "@@ -1,5 +1,7 @@\n #![feature(proc_macro_quote, proc_macro_hygiene)]\n #![deny(rust_2018_idioms)]\n+// FIXME: Remove this attribute once the weird failure is gone.\n+#![allow(unused_extern_crates)]\n extern crate proc_macro;\n \n use proc_macro::{quote, TokenStream};"}]}