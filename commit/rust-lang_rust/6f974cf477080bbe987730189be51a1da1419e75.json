{"sha": "6f974cf477080bbe987730189be51a1da1419e75", "node_id": "C_kwDOAAsO6NoAKDZmOTc0Y2Y0NzcwODBiYmU5ODc3MzAxODliZTUxYTFkYTE0MTllNzU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-02T11:20:10Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-02T11:20:10Z"}, "message": "fix: Fix and re-enable format string completions", "tree": {"sha": "427a82a075ff98f75ec23b3605bf83d85bec408d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/427a82a075ff98f75ec23b3605bf83d85bec408d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f974cf477080bbe987730189be51a1da1419e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f974cf477080bbe987730189be51a1da1419e75", "html_url": "https://github.com/rust-lang/rust/commit/6f974cf477080bbe987730189be51a1da1419e75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f974cf477080bbe987730189be51a1da1419e75/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4800c05a206eb156617b76fdb30af0b6c2c0fb26", "url": "https://api.github.com/repos/rust-lang/rust/commits/4800c05a206eb156617b76fdb30af0b6c2c0fb26", "html_url": "https://github.com/rust-lang/rust/commit/4800c05a206eb156617b76fdb30af0b6c2c0fb26"}], "stats": {"total": 129, "additions": 74, "deletions": 55}, "files": [{"sha": "6b6759ebfd9570992213bde2799574393c9abde8", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f974cf477080bbe987730189be51a1da1419e75/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f974cf477080bbe987730189be51a1da1419e75/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=6f974cf477080bbe987730189be51a1da1419e75", "patch": "@@ -62,6 +62,7 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n     Some(())\n }\n \n+// FIXME?: Move this functionality to (un)qualified_path, make this module work solely for builtin/known attributes for their inputs?\n fn complete_new_attribute(acc: &mut Completions, ctx: &CompletionContext, attribute: &ast::Attr) {\n     let is_inner = attribute.kind() == ast::AttrKind::Inner;\n     let attribute_annotated_item_kind ="}, {"sha": "87052d020a4379251c52c247793fbe404a122454", "filename": "crates/ide_completion/src/completions/format_string.rs", "status": "modified", "additions": 73, "deletions": 55, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/6f974cf477080bbe987730189be51a1da1419e75/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fformat_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f974cf477080bbe987730189be51a1da1419e75/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fformat_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fformat_string.rs?ref=6f974cf477080bbe987730189be51a1da1419e75", "patch": "@@ -8,15 +8,14 @@ use crate::{context::CompletionContext, CompletionItem, CompletionItemKind, Comp\n \n /// Complete identifiers in format strings.\n pub(crate) fn format_string(acc: &mut Completions, ctx: &CompletionContext) {\n-    if true {\n-        return;\n-    }\n-    let string = match ast::String::cast(ctx.token.clone()) {\n-        Some(it) if is_format_string(&it) => it,\n+    let string = match ast::String::cast(ctx.token.clone())\n+        .zip(ast::String::cast(ctx.original_token.clone()))\n+    {\n+        Some((expanded, original)) if is_format_string(&expanded) => original,\n         _ => return,\n     };\n     let cursor = ctx.position.offset;\n-    let lit_start = ctx.token.text_range().start();\n+    let lit_start = ctx.original_token.text_range().start();\n     let cursor_in_lit = cursor - lit_start;\n \n     let prefix = &string.text()[..cursor_in_lit.into()];\n@@ -39,72 +38,91 @@ pub(crate) fn format_string(acc: &mut Completions, ctx: &CompletionContext) {\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::tests::completion_list_no_kw;\n+    use crate::tests::{check_edit, completion_list_no_kw};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let actual = completion_list_no_kw(ra_fixture);\n         expect.assert_eq(&actual);\n     }\n \n+    #[test]\n+    fn works_when_wrapped() {\n+        check(\n+            r#\"\n+macro_rules! format_args {\n+    ($lit:literal $(tt:tt)*) => { 0 },\n+}\n+macro_rules! print {\n+    ($($arg:tt)*) => (std::io::_print(format_args!($($arg)*)));\n+}\n+fn main() {\n+    let foobar = 1;\n+    print!(\"f$0\");\n+}\n+\"#,\n+            expect![[]],\n+        );\n+    }\n+\n     #[test]\n     fn no_completion_without_brace() {\n         check(\n             r#\"\n macro_rules! format_args {\n-($lit:literal $(tt:tt)*) => { 0 },\n+    ($lit:literal $(tt:tt)*) => { 0 },\n }\n fn main() {\n-let foobar = 1;\n-format_args!(\"f$0\");\n+    let foobar = 1;\n+    format_args!(\"f$0\");\n }\n \"#,\n             expect![[]],\n         );\n     }\n \n-    //     #[test]\n-    //     fn completes_locals() {\n-    //         check_edit(\n-    //             \"foobar\",\n-    //             r#\"\n-    // macro_rules! format_args {\n-    //     ($lit:literal $(tt:tt)*) => { 0 },\n-    // }\n-    // fn main() {\n-    //     let foobar = 1;\n-    //     format_args!(\"{f$0\");\n-    // }\n-    // \"#,\n-    //             r#\"\n-    // macro_rules! format_args {\n-    //     ($lit:literal $(tt:tt)*) => { 0 },\n-    // }\n-    // fn main() {\n-    //     let foobar = 1;\n-    //     format_args!(\"{foobar\");\n-    // }\n-    // \"#,\n-    //         );\n-    //         check_edit(\n-    //             \"foobar\",\n-    //             r#\"\n-    // macro_rules! format_args {\n-    //     ($lit:literal $(tt:tt)*) => { 0 },\n-    // }\n-    // fn main() {\n-    //     let foobar = 1;\n-    //     format_args!(\"{$0\");\n-    // }\n-    // \"#,\n-    //             r#\"\n-    // macro_rules! format_args {\n-    //     ($lit:literal $(tt:tt)*) => { 0 },\n-    // }\n-    // fn main() {\n-    //     let foobar = 1;\n-    //     format_args!(\"{foobar\");\n-    // }\n-    // \"#,\n-    //         );\n-    //     }\n+    #[test]\n+    fn completes_locals() {\n+        check_edit(\n+            \"foobar\",\n+            r#\"\n+macro_rules! format_args {\n+    ($lit:literal $(tt:tt)*) => { 0 },\n+}\n+fn main() {\n+    let foobar = 1;\n+    format_args!(\"{f$0\");\n+}\n+\"#,\n+            r#\"\n+macro_rules! format_args {\n+    ($lit:literal $(tt:tt)*) => { 0 },\n+}\n+fn main() {\n+    let foobar = 1;\n+    format_args!(\"{foobar\");\n+}\n+\"#,\n+        );\n+        check_edit(\n+            \"foobar\",\n+            r#\"\n+macro_rules! format_args {\n+    ($lit:literal $(tt:tt)*) => { 0 },\n+}\n+fn main() {\n+    let foobar = 1;\n+    format_args!(\"{$0\");\n+}\n+\"#,\n+            r#\"\n+macro_rules! format_args {\n+    ($lit:literal $(tt:tt)*) => { 0 },\n+}\n+fn main() {\n+    let foobar = 1;\n+    format_args!(\"{foobar\");\n+}\n+\"#,\n+        );\n+    }\n }"}]}