{"sha": "16104474ad9472481ac7e3da67a35e1d3ad0b2ad", "node_id": "C_kwDOAAsO6NoAKDE2MTA0NDc0YWQ5NDcyNDgxYWM3ZTNkYTY3YTM1ZTFkM2FkMGIyYWQ", "commit": {"author": {"name": "Pointerbender", "email": "pointerbender@gmail.com", "date": "2022-10-20T06:37:47Z"}, "committer": {"name": "Pointerbender", "email": "pointerbender@gmail.com", "date": "2022-10-20T06:37:47Z"}, "message": "clarify documentation about the memory layout of `UnsafeCell`", "tree": {"sha": "68ed681c464a8523b596a00fb02564ed54cdcaf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68ed681c464a8523b596a00fb02564ed54cdcaf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16104474ad9472481ac7e3da67a35e1d3ad0b2ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16104474ad9472481ac7e3da67a35e1d3ad0b2ad", "html_url": "https://github.com/rust-lang/rust/commit/16104474ad9472481ac7e3da67a35e1d3ad0b2ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16104474ad9472481ac7e3da67a35e1d3ad0b2ad/comments", "author": {"login": "Pointerbender", "id": 81013316, "node_id": "MDQ6VXNlcjgxMDEzMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/81013316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pointerbender", "html_url": "https://github.com/Pointerbender", "followers_url": "https://api.github.com/users/Pointerbender/followers", "following_url": "https://api.github.com/users/Pointerbender/following{/other_user}", "gists_url": "https://api.github.com/users/Pointerbender/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pointerbender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pointerbender/subscriptions", "organizations_url": "https://api.github.com/users/Pointerbender/orgs", "repos_url": "https://api.github.com/users/Pointerbender/repos", "events_url": "https://api.github.com/users/Pointerbender/events{/privacy}", "received_events_url": "https://api.github.com/users/Pointerbender/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Pointerbender", "id": 81013316, "node_id": "MDQ6VXNlcjgxMDEzMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/81013316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pointerbender", "html_url": "https://github.com/Pointerbender", "followers_url": "https://api.github.com/users/Pointerbender/followers", "following_url": "https://api.github.com/users/Pointerbender/following{/other_user}", "gists_url": "https://api.github.com/users/Pointerbender/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pointerbender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pointerbender/subscriptions", "organizations_url": "https://api.github.com/users/Pointerbender/orgs", "repos_url": "https://api.github.com/users/Pointerbender/repos", "events_url": "https://api.github.com/users/Pointerbender/events{/privacy}", "received_events_url": "https://api.github.com/users/Pointerbender/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb9467515b5a9b15aaa905683c6b4dd9e851056c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb9467515b5a9b15aaa905683c6b4dd9e851056c", "html_url": "https://github.com/rust-lang/rust/commit/cb9467515b5a9b15aaa905683c6b4dd9e851056c"}], "stats": {"total": 59, "additions": 34, "deletions": 25}, "files": [{"sha": "12c6f21172596ad823611e9efe2e5343b57eea4f", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/16104474ad9472481ac7e3da67a35e1d3ad0b2ad/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16104474ad9472481ac7e3da67a35e1d3ad0b2ad/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=16104474ad9472481ac7e3da67a35e1d3ad0b2ad", "patch": "@@ -1825,35 +1825,44 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n /// Therefore this is not a valid conversion, despite `NonNull<u8>` and `UnsafeCell<NonNull<u8>>>`\n /// having the same memory layout. This is because `UnsafeCell` disables niche optimizations in\n /// order to avoid its interior mutability property from spreading from `T` into the `Outer` type,\n-/// thus this can cause distortions in the type size in these cases. Furthermore, it is only valid\n-/// to obtain a `*mut T` pointer to the contents of a _shared_ `UnsafeCell<T>` through [`.get()`]\n-/// or [`.raw_get()`]. A `&mut T` reference can be obtained by either dereferencing this pointer or\n-/// by calling [`.get_mut()`] on an _exclusive_ `UnsafeCell<T>`, e.g.:\n+/// thus this can cause distortions in the type size in these cases.\n+///\n+/// Note that it is still only valid to obtain a `*mut T` pointer to the contents of a\n+/// _shared_ `UnsafeCell<T>` through [`.get()`]  or [`.raw_get()`]. A `&mut T` reference\n+/// can be obtained by either dereferencing this pointer or by calling [`.get_mut()`]\n+/// on an _exclusive_ `UnsafeCell<T>`. Even though `T` and `UnsafeCell<T>` have the\n+/// same memory layout, the following is not allowed and undefined behavior:\n+///\n+/// ```rust,no_run\n+/// # use std::cell::UnsafeCell;\n+/// unsafe fn not_allowed<T>(ptr: &UnsafeCell<T>) -> &mut T {\n+///   let t = ptr as *const UnsafeCell<T> as *mut T;\n+///   // This is undefined behavior, because the `*mut T` pointer\n+///   // was not obtained through `.get()` nor `.raw_get()`:\n+///   unsafe { &mut *t }\n+/// }\n+/// ```\n+///\n+/// Instead, do this:\n ///\n /// ```rust\n-/// use std::cell::UnsafeCell;\n+/// # use std::cell::UnsafeCell;\n+/// // Safety: the caller must ensure that there are no references that\n+/// // point to the *contents* of the `UnsafeCell`.\n+/// unsafe fn get_mut<T>(ptr: &UnsafeCell<T>) -> &mut T {\n+///   unsafe { &mut *ptr.get() }\n+/// }\n+/// ```\n ///\n-/// let mut x: UnsafeCell<u32> = UnsafeCell::new(5);\n-/// let shared: &UnsafeCell<u32> = &x;\n-/// // using `.get()` is okay:\n-/// unsafe {\n-///     // SAFETY: there exist no other references to the contents of `x`\n-///     let exclusive: &mut u32 = &mut *shared.get();\n-/// };\n-/// // using `.raw_get()` is also okay:\n-/// unsafe {\n-///     // SAFETY: there exist no other references to the contents of `x` in this scope\n-///     let exclusive: &mut u32 = &mut *UnsafeCell::raw_get(shared as *const _);\n-/// };\n-/// // using `.get_mut()` is always safe:\n-/// let exclusive: &mut u32 = x.get_mut();\n+/// Coverting in the other direction from a `&mut T`\n+/// to an `&UnsafeCell<T>` is allowed:\n ///\n-/// // when we have exclusive access, we can convert it to a shared `&UnsafeCell`:\n-/// unsafe {\n-///     // SAFETY: `u32` has no niche, therefore it has the same layout as `UnsafeCell<u32>`\n-///     let shared: &UnsafeCell<u32> = &*(exclusive as *mut _ as *const UnsafeCell<u32>);\n-///     // SAFETY: there exist no other *active* references to the contents of `x` in this scope\n-///     let exclusive: &mut u32 = &mut *shared.get();\n+/// ```rust\n+/// # use std::cell::UnsafeCell;\n+/// fn get_shared<T>(ptr: &mut T) -> &UnsafeCell<T> {\n+///   let t = ptr as *mut T as *const UnsafeCell<T>;\n+///   // SAFETY: `T` and `UnsafeCell<T>` have the same memory layout\n+///   unsafe { &*t }\n /// }\n /// ```\n ///"}]}