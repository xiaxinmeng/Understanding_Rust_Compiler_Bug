{"sha": "04253791952d85a4da5d19d228cbac92e37ee2b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MjUzNzkxOTUyZDg1YTRkYTVkMTlkMjI4Y2JhYzkyZTM3ZWUyYjk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-31T02:31:12Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T09:39:24Z"}, "message": "parser: inline `parse_assoc_fn` and friends.", "tree": {"sha": "93f5cd21bbc0418c80f8e23c8439f2ee411a29c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93f5cd21bbc0418c80f8e23c8439f2ee411a29c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04253791952d85a4da5d19d228cbac92e37ee2b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04253791952d85a4da5d19d228cbac92e37ee2b9", "html_url": "https://github.com/rust-lang/rust/commit/04253791952d85a4da5d19d228cbac92e37ee2b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04253791952d85a4da5d19d228cbac92e37ee2b9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b05e9d2b4d8692a9f0932e9098727762bfad6efe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b05e9d2b4d8692a9f0932e9098727762bfad6efe", "html_url": "https://github.com/rust-lang/rust/commit/b05e9d2b4d8692a9f0932e9098727762bfad6efe"}], "stats": {"total": 63, "additions": 21, "deletions": 42}, "files": [{"sha": "8ba957c6b3b52a149233bd4d0fd2df9f22b1a17e", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 21, "deletions": 42, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/04253791952d85a4da5d19d228cbac92e37ee2b9/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04253791952d85a4da5d19d228cbac92e37ee2b9/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=04253791952d85a4da5d19d228cbac92e37ee2b9", "patch": "@@ -98,7 +98,10 @@ impl<'a> Parser<'a> {\n \n         if self.is_fn_front_matter() {\n             // FUNCTION ITEM\n-            return self.parse_item_fn(lo, vis, attrs);\n+            let (ident, sig, generics, body) =\n+                self.parse_fn(&mut false, &mut attrs, &ParamCfg::FREE)?;\n+            let kind = ItemKind::Fn(sig, generics, body);\n+            return self.mk_item_with_info(attrs, lo, vis, (ident, kind, None));\n         }\n \n         if self.eat_keyword(kw::Extern) {\n@@ -741,7 +744,9 @@ impl<'a> Parser<'a> {\n         let (name, kind, generics) = if self.eat_keyword(kw::Type) {\n             self.parse_assoc_ty()?\n         } else if self.is_fn_front_matter() {\n-            self.parse_assoc_fn(at_end, &mut attrs, is_name_required)?\n+            let cfg = ParamCfg { is_name_required };\n+            let (ident, sig, generics, body) = self.parse_fn(at_end, &mut attrs, &cfg)?;\n+            (ident, AssocItemKind::Fn(sig, body), generics)\n         } else if let Some(mac) = self.parse_assoc_macro_invoc(\"associated\", Some(&vis), at_end)? {\n             (Ident::invalid(), AssocItemKind::Macro(mac), Generics::default())\n         } else {\n@@ -968,7 +973,7 @@ impl<'a> Parser<'a> {\n     pub fn parse_foreign_item(&mut self) -> PResult<'a, P<ForeignItem>> {\n         maybe_whole!(self, NtForeignItem, |ni| ni);\n \n-        let attrs = self.parse_outer_attributes()?;\n+        let mut attrs = self.parse_outer_attributes()?;\n         let lo = self.token.span;\n         let vis = self.parse_visibility(FollowedByType::No)?;\n \n@@ -977,7 +982,19 @@ impl<'a> Parser<'a> {\n             self.parse_item_foreign_type(vis, lo, attrs)\n         } else if self.is_fn_front_matter() {\n             // FOREIGN FUNCTION ITEM\n-            self.parse_item_foreign_fn(vis, lo, attrs)\n+            let (ident, sig, generics, body) =\n+                self.parse_fn(&mut false, &mut attrs, &ParamCfg::FREE)?;\n+            let kind = ForeignItemKind::Fn(sig, generics, body);\n+            let span = lo.to(self.prev_span);\n+            Ok(P(ast::ForeignItem {\n+                ident,\n+                attrs,\n+                kind,\n+                id: DUMMY_NODE_ID,\n+                span,\n+                vis,\n+                tokens: None,\n+            }))\n         } else if self.is_static_global() {\n             // FOREIGN STATIC ITEM\n             self.bump(); // `static`\n@@ -1603,44 +1620,6 @@ impl ParamCfg {\n \n /// Parsing of functions and methods.\n impl<'a> Parser<'a> {\n-    /// Parses an item-position function declaration.\n-    fn parse_item_fn(\n-        &mut self,\n-        lo: Span,\n-        vis: Visibility,\n-        mut attrs: Vec<Attribute>,\n-    ) -> PResult<'a, Option<P<Item>>> {\n-        let (ident, sig, generics, body) =\n-            self.parse_fn(&mut false, &mut attrs, &ParamCfg::FREE)?;\n-        let kind = ItemKind::Fn(sig, generics, body);\n-        self.mk_item_with_info(attrs, lo, vis, (ident, kind, None))\n-    }\n-\n-    /// Parses a function declaration from a foreign module.\n-    fn parse_item_foreign_fn(\n-        &mut self,\n-        vis: ast::Visibility,\n-        lo: Span,\n-        mut attrs: Vec<Attribute>,\n-    ) -> PResult<'a, P<ForeignItem>> {\n-        let (ident, sig, generics, body) =\n-            self.parse_fn(&mut false, &mut attrs, &ParamCfg::FREE)?;\n-        let kind = ForeignItemKind::Fn(sig, generics, body);\n-        let span = lo.to(self.prev_span);\n-        Ok(P(ast::ForeignItem { ident, attrs, kind, id: DUMMY_NODE_ID, span, vis, tokens: None }))\n-    }\n-\n-    fn parse_assoc_fn(\n-        &mut self,\n-        at_end: &mut bool,\n-        attrs: &mut Vec<Attribute>,\n-        is_name_required: fn(&token::Token) -> bool,\n-    ) -> PResult<'a, (Ident, AssocItemKind, Generics)> {\n-        let cfg = ParamCfg { is_name_required };\n-        let (ident, sig, generics, body) = self.parse_fn(at_end, attrs, &cfg)?;\n-        Ok((ident, AssocItemKind::Fn(sig, body), generics))\n-    }\n-\n     /// Parse a function starting from the front matter (`const ...`) to the body `{ ... }` or `;`.\n     fn parse_fn(\n         &mut self,"}]}