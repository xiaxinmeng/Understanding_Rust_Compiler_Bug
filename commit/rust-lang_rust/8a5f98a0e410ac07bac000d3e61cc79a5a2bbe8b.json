{"sha": "8a5f98a0e410ac07bac000d3e61cc79a5a2bbe8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNWY5OGEwZTQxMGFjMDdiYWMwMDBkM2U2MWNjNzlhNWEyYmJlOGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-09T14:58:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-09T14:58:24Z"}, "message": "Auto merge of #6866 - anall:ice6840, r=flip1995\n\nFix ICE 6840 - make is_normalizable more strict\n\nfixes #6840\n\nmake `is_normalizable` more strict, which should catch this ICE and related cases\n\nchangelog: Fix ICE in [`zero_sized_map_values`]", "tree": {"sha": "b339d706e1985d38e7f5e73a0006c9a72b32a43e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b339d706e1985d38e7f5e73a0006c9a72b32a43e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a5f98a0e410ac07bac000d3e61cc79a5a2bbe8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5f98a0e410ac07bac000d3e61cc79a5a2bbe8b", "html_url": "https://github.com/rust-lang/rust/commit/8a5f98a0e410ac07bac000d3e61cc79a5a2bbe8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a5f98a0e410ac07bac000d3e61cc79a5a2bbe8b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "627e910fe570239baaa318734378466a8501f073", "url": "https://api.github.com/repos/rust-lang/rust/commits/627e910fe570239baaa318734378466a8501f073", "html_url": "https://github.com/rust-lang/rust/commit/627e910fe570239baaa318734378466a8501f073"}, {"sha": "9707599714c755c16e0e90b1c91420341704e5fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/9707599714c755c16e0e90b1c91420341704e5fe", "html_url": "https://github.com/rust-lang/rust/commit/9707599714c755c16e0e90b1c91420341704e5fe"}], "stats": {"total": 74, "additions": 71, "deletions": 3}, "files": [{"sha": "755a17a9f762358d804ef8a9791045c4ab6b73f4", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8a5f98a0e410ac07bac000d3e61cc79a5a2bbe8b/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5f98a0e410ac07bac000d3e61cc79a5a2bbe8b/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=8a5f98a0e410ac07bac000d3e61cc79a5a2bbe8b", "patch": "@@ -85,6 +85,7 @@ use rustc_trait_selection::traits::query::normalize::AtExt;\n use smallvec::SmallVec;\n \n use crate::consts::{constant, Constant};\n+use std::collections::HashMap;\n \n pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<RustcVersion> {\n     if let Ok(version) = RustcVersion::parse(msrv) {\n@@ -1494,13 +1495,49 @@ pub fn match_function_call<'tcx>(\n     None\n }\n \n+// FIXME: Per https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/infer/at/struct.At.html#method.normalize\n+// this function can be removed once the `normalizie` method does not panic when normalization does\n+// not succeed\n /// Checks if `Ty` is normalizable. This function is useful\n /// to avoid crashes on `layout_of`.\n pub fn is_normalizable<'tcx>(cx: &LateContext<'tcx>, param_env: ty::ParamEnv<'tcx>, ty: Ty<'tcx>) -> bool {\n-    cx.tcx.infer_ctxt().enter(|infcx| {\n+    is_normalizable_helper(cx, param_env, ty, &mut HashMap::new())\n+}\n+\n+fn is_normalizable_helper<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    ty: Ty<'tcx>,\n+    cache: &mut HashMap<Ty<'tcx>, bool>,\n+) -> bool {\n+    if let Some(&cached_result) = cache.get(ty) {\n+        return cached_result;\n+    }\n+    // prevent recursive loops, false-negative is better than endless loop leading to stack overflow\n+    cache.insert(ty, false);\n+    let result = cx.tcx.infer_ctxt().enter(|infcx| {\n         let cause = rustc_middle::traits::ObligationCause::dummy();\n-        infcx.at(&cause, param_env).normalize(ty).is_ok()\n-    })\n+        if infcx.at(&cause, param_env).normalize(ty).is_ok() {\n+            match ty.kind() {\n+                ty::Adt(def, substs) => def.variants.iter().all(|variant| {\n+                    variant\n+                        .fields\n+                        .iter()\n+                        .all(|field| is_normalizable_helper(cx, param_env, field.ty(cx.tcx, substs), cache))\n+                }),\n+                _ => ty.walk().all(|generic_arg| match generic_arg.unpack() {\n+                    GenericArgKind::Type(inner_ty) if inner_ty != ty => {\n+                        is_normalizable_helper(cx, param_env, inner_ty, cache)\n+                    },\n+                    _ => true, // if inner_ty == ty, we've already checked it\n+                }),\n+            }\n+        } else {\n+            false\n+        }\n+    });\n+    cache.insert(ty, result);\n+    result\n }\n \n pub fn match_def_path<'tcx>(cx: &LateContext<'tcx>, did: DefId, syms: &[&str]) -> bool {"}, {"sha": "d789f60c5d5a0dd5a21aad82437bb58d6d29fd77", "filename": "tests/ui/crashes/ice-6840.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8a5f98a0e410ac07bac000d3e61cc79a5a2bbe8b/tests%2Fui%2Fcrashes%2Fice-6840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5f98a0e410ac07bac000d3e61cc79a5a2bbe8b/tests%2Fui%2Fcrashes%2Fice-6840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6840.rs?ref=8a5f98a0e410ac07bac000d3e61cc79a5a2bbe8b", "patch": "@@ -0,0 +1,31 @@\n+//! This is a reproducer for the ICE 6840: https://github.com/rust-lang/rust-clippy/issues/6840.\n+//! The ICE is caused by `TyCtxt::layout_of` and `is_normalizable` not being strict enough\n+#![allow(dead_code)]\n+use std::collections::HashMap;\n+\n+pub trait Rule {\n+    type DependencyKey;\n+}\n+\n+pub struct RuleEdges<R: Rule> {\n+    dependencies: R::DependencyKey,\n+}\n+\n+type RuleDependencyEdges<R> = HashMap<u32, RuleEdges<R>>;\n+\n+// reproducer from the GitHub issue ends here\n+//   but check some additional variants\n+type RuleDependencyEdgesArray<R> = HashMap<u32, [RuleEdges<R>; 8]>;\n+type RuleDependencyEdgesSlice<R> = HashMap<u32, &'static [RuleEdges<R>]>;\n+type RuleDependencyEdgesRef<R> = HashMap<u32, &'static RuleEdges<R>>;\n+type RuleDependencyEdgesRaw<R> = HashMap<u32, *const RuleEdges<R>>;\n+type RuleDependencyEdgesTuple<R> = HashMap<u32, (RuleEdges<R>, RuleEdges<R>)>;\n+\n+// and an additional checks to make sure fix doesn't have stack-overflow issue\n+//   on self-containing types\n+pub struct SelfContaining {\n+    inner: Box<SelfContaining>,\n+}\n+type SelfContainingEdges = HashMap<u32, SelfContaining>;\n+\n+fn main() {}"}]}