{"sha": "96e988fcc3be11acc89dc2c1957bc14e8f39c911", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZTk4OGZjYzNiZTExYWNjODlkYzJjMTk1N2JjMTRlOGYzOWM5MTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-09-11T13:47:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-11T13:47:33Z"}, "message": "Merge #5951 #5975\n\n5951: Rename record_field_pat to record_pat_field r=jonas-schievink a=pksunkara\n\nThe token was renamed but not this.\n\n5975: Report better errors in project.json/sysroot r=jonas-schievink a=jonas-schievink\n\nThis does a bunch of light refactoring so that the `Sysroot` is loaded later, which makes sure that any errors are reported to the user. I then added a check that reports an error if libcore is missing in the loaded sysroot. Since a sysroot without libcore is very useless, this indicates a configuration error.\n\nCo-authored-by: Pavan Kumar Sunkara <pavan.sss1991@gmail.com>\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "b5bea2b98dd1b6fee1d1ffa06858ef6d6cbfadc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5bea2b98dd1b6fee1d1ffa06858ef6d6cbfadc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96e988fcc3be11acc89dc2c1957bc14e8f39c911", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfW3/1CRBK7hj4Ov3rIwAAdHIIAJp8rKMXXmnTXCCoxzAFLiTA\nE5KWBRua1JuPS5Zu3pdYJ1b109BfRiQs7OpyuBfekFthFbdbu0DiRaFaL4eN7ADO\nf7N5mJWOFVObHK1XoHm2q5Hbn7t9xkw52GFSTacLmrMRzGg4T454rY5TFwXcW6hX\nUKMqdlQWwS6fvTWz2kCQX5Mq2LGhtSWdZ2UOypClLyCD/TEegCI1fuMORqkpRnBx\nchR6fgBW9AY5O3GoqP/I8PapHx14ejZUUn3Hc387JZLHNG8KRrSojmGbfKz1ofQr\n8tSTAXNXXCcQLzBKNiz8hX5IxcUt/3kNnFJi7bnj+5WwZhkxtjSuHGnFGnu/yIQ=\n=TW07\n-----END PGP SIGNATURE-----\n", "payload": "tree b5bea2b98dd1b6fee1d1ffa06858ef6d6cbfadc2\nparent 87c8dfcadd42f3ca85a8f1cb22679266415a3596\nparent 4d97f5f037c1b061215d4b0fb32d48a1b8be836f\nparent 681ac6294ada917b8c5fbba60f9ba1c82da338aa\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1599832053 +0000\ncommitter GitHub <noreply@github.com> 1599832053 +0000\n\nMerge #5951 #5975\n\n5951: Rename record_field_pat to record_pat_field r=jonas-schievink a=pksunkara\n\nThe token was renamed but not this.\n\n5975: Report better errors in project.json/sysroot r=jonas-schievink a=jonas-schievink\n\nThis does a bunch of light refactoring so that the `Sysroot` is loaded later, which makes sure that any errors are reported to the user. I then added a check that reports an error if libcore is missing in the loaded sysroot. Since a sysroot without libcore is very useless, this indicates a configuration error.\n\nCo-authored-by: Pavan Kumar Sunkara <pavan.sss1991@gmail.com>\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96e988fcc3be11acc89dc2c1957bc14e8f39c911", "html_url": "https://github.com/rust-lang/rust/commit/96e988fcc3be11acc89dc2c1957bc14e8f39c911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96e988fcc3be11acc89dc2c1957bc14e8f39c911/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87c8dfcadd42f3ca85a8f1cb22679266415a3596", "url": "https://api.github.com/repos/rust-lang/rust/commits/87c8dfcadd42f3ca85a8f1cb22679266415a3596", "html_url": "https://github.com/rust-lang/rust/commit/87c8dfcadd42f3ca85a8f1cb22679266415a3596"}, {"sha": "4d97f5f037c1b061215d4b0fb32d48a1b8be836f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d97f5f037c1b061215d4b0fb32d48a1b8be836f", "html_url": "https://github.com/rust-lang/rust/commit/4d97f5f037c1b061215d4b0fb32d48a1b8be836f"}, {"sha": "681ac6294ada917b8c5fbba60f9ba1c82da338aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/681ac6294ada917b8c5fbba60f9ba1c82da338aa", "html_url": "https://github.com/rust-lang/rust/commit/681ac6294ada917b8c5fbba60f9ba1c82da338aa"}], "stats": {"total": 87, "additions": 53, "deletions": 34}, "files": [{"sha": "0516a05b4154f3c863cef5695332e1f02a6c7741", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=96e988fcc3be11acc89dc2c1957bc14e8f39c911", "patch": "@@ -207,8 +207,8 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_record_field(field)\n     }\n \n-    pub fn resolve_record_field_pat(&self, field: &ast::RecordPatField) -> Option<Field> {\n-        self.imp.resolve_record_field_pat(field)\n+    pub fn resolve_record_pat_field(&self, field: &ast::RecordPatField) -> Option<Field> {\n+        self.imp.resolve_record_pat_field(field)\n     }\n \n     pub fn resolve_macro_call(&self, macro_call: &ast::MacroCall) -> Option<MacroDef> {\n@@ -433,8 +433,8 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(field.syntax()).resolve_record_field(self.db, field)\n     }\n \n-    fn resolve_record_field_pat(&self, field: &ast::RecordPatField) -> Option<Field> {\n-        self.analyze(field.syntax()).resolve_record_field_pat(self.db, field)\n+    fn resolve_record_pat_field(&self, field: &ast::RecordPatField) -> Option<Field> {\n+        self.analyze(field.syntax()).resolve_record_pat_field(self.db, field)\n     }\n \n     fn resolve_macro_call(&self, macro_call: &ast::MacroCall) -> Option<MacroDef> {"}, {"sha": "1aef0f33f5f84fa6e6d23ddd42c30ad197a2c9d7", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=96e988fcc3be11acc89dc2c1957bc14e8f39c911", "patch": "@@ -179,13 +179,13 @@ impl SourceAnalyzer {\n         Some((struct_field.into(), local))\n     }\n \n-    pub(crate) fn resolve_record_field_pat(\n+    pub(crate) fn resolve_record_pat_field(\n         &self,\n         _db: &dyn HirDatabase,\n         field: &ast::RecordPatField,\n     ) -> Option<Field> {\n         let pat_id = self.pat_id(&field.pat()?)?;\n-        let struct_field = self.infer.as_ref()?.record_field_pat_resolution(pat_id)?;\n+        let struct_field = self.infer.as_ref()?.record_pat_field_resolution(pat_id)?;\n         Some(struct_field.into())\n     }\n "}, {"sha": "2b53b8297314941f5b917917ff7939d908b83bfc", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=96e988fcc3be11acc89dc2c1957bc14e8f39c911", "patch": "@@ -125,7 +125,7 @@ pub struct InferenceResult {\n     field_resolutions: FxHashMap<ExprId, FieldId>,\n     /// For each field in record literal, records the field it resolves to.\n     record_field_resolutions: FxHashMap<ExprId, FieldId>,\n-    record_field_pat_resolutions: FxHashMap<PatId, FieldId>,\n+    record_pat_field_resolutions: FxHashMap<PatId, FieldId>,\n     /// For each struct literal, records the variant it resolves to.\n     variant_resolutions: FxHashMap<ExprOrPatId, VariantId>,\n     /// For each associated item record what it resolves to\n@@ -146,8 +146,8 @@ impl InferenceResult {\n     pub fn record_field_resolution(&self, expr: ExprId) -> Option<FieldId> {\n         self.record_field_resolutions.get(&expr).copied()\n     }\n-    pub fn record_field_pat_resolution(&self, pat: PatId) -> Option<FieldId> {\n-        self.record_field_pat_resolutions.get(&pat).copied()\n+    pub fn record_pat_field_resolution(&self, pat: PatId) -> Option<FieldId> {\n+        self.record_pat_field_resolutions.get(&pat).copied()\n     }\n     pub fn variant_resolution_for_expr(&self, id: ExprId) -> Option<VariantId> {\n         self.variant_resolutions.get(&id.into()).copied()"}, {"sha": "dde38bc397b6eb184e342760001496badb8e3e58", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=96e988fcc3be11acc89dc2c1957bc14e8f39c911", "patch": "@@ -70,7 +70,7 @@ impl<'a> InferenceContext<'a> {\n             let matching_field = var_data.as_ref().and_then(|it| it.field(&subpat.name));\n             if let Some(local_id) = matching_field {\n                 let field_def = FieldId { parent: def.unwrap(), local_id };\n-                self.result.record_field_pat_resolutions.insert(subpat.pat, field_def);\n+                self.result.record_pat_field_resolutions.insert(subpat.pat, field_def);\n             }\n \n             let expected_ty ="}, {"sha": "f8c7aa491ea56ef205d0adc306aadcb9f059ceca", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=96e988fcc3be11acc89dc2c1957bc14e8f39c911", "patch": "@@ -157,9 +157,9 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n             ast::IdentPat(it) => {\n                 let local = sema.to_def(&it)?;\n \n-                if let Some(record_field_pat) = it.syntax().parent().and_then(ast::RecordPatField::cast) {\n-                    if record_field_pat.name_ref().is_none() {\n-                        if let Some(field) = sema.resolve_record_field_pat(&record_field_pat) {\n+                if let Some(record_pat_field) = it.syntax().parent().and_then(ast::RecordPatField::cast) {\n+                    if record_pat_field.name_ref().is_none() {\n+                        if let Some(field) = sema.resolve_record_pat_field(&record_pat_field) {\n                             let field = Definition::Field(field);\n                             return Some(NameClass::FieldShorthand { local, field });\n                         }\n@@ -275,8 +275,8 @@ pub fn classify_name_ref(\n         }\n     }\n \n-    if let Some(record_field_pat) = ast::RecordPatField::cast(parent.clone()) {\n-        if let Some(field) = sema.resolve_record_field_pat(&record_field_pat) {\n+    if let Some(record_pat_field) = ast::RecordPatField::cast(parent.clone()) {\n+        if let Some(field) = sema.resolve_record_pat_field(&record_pat_field) {\n             let field = Definition::Field(field);\n             return Some(NameRefClass::Definition(field));\n         }"}, {"sha": "7e7f73deeac9db2111aa8a208a058cc4ba1511bf", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=96e988fcc3be11acc89dc2c1957bc14e8f39c911", "patch": "@@ -188,7 +188,7 @@ fn tuple_pat_fields(p: &mut Parser) {\n     p.expect(T![')']);\n }\n \n-// test record_field_pat_list\n+// test record_pat_field_list\n // fn foo() {\n //     let S {} = ();\n //     let S { f, ref mut g } = ();\n@@ -208,7 +208,7 @@ fn record_pat_field_list(p: &mut Parser) {\n             c => {\n                 let m = p.start();\n                 match c {\n-                    // test record_field_pat\n+                    // test record_pat_field\n                     // fn foo() {\n                     //     let S { 0: 1 } = ();\n                     //     let S { x: 1 } = ();"}, {"sha": "288c39e49478b2fd23b8420e91c6f8fd55487816", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=96e988fcc3be11acc89dc2c1957bc14e8f39c911", "patch": "@@ -33,7 +33,7 @@ pub enum ProjectWorkspace {\n     /// Project workspace was discovered by running `cargo metadata` and `rustc --print sysroot`.\n     Cargo { cargo: CargoWorkspace, sysroot: Sysroot },\n     /// Project workspace was manually specified using a `rust-project.json` file.\n-    Json { project: ProjectJson },\n+    Json { project: ProjectJson, sysroot: Option<Sysroot> },\n }\n \n impl fmt::Debug for ProjectWorkspace {\n@@ -44,10 +44,10 @@ impl fmt::Debug for ProjectWorkspace {\n                 .field(\"n_packages\", &cargo.packages().len())\n                 .field(\"n_sysroot_crates\", &sysroot.crates().len())\n                 .finish(),\n-            ProjectWorkspace::Json { project } => {\n+            ProjectWorkspace::Json { project, sysroot } => {\n                 let mut debug_struct = f.debug_struct(\"Json\");\n                 debug_struct.field(\"n_crates\", &project.n_crates());\n-                if let Some(sysroot) = &project.sysroot {\n+                if let Some(sysroot) = sysroot {\n                     debug_struct.field(\"n_sysroot_crates\", &sysroot.crates().len());\n                 }\n                 debug_struct.finish()\n@@ -169,7 +169,11 @@ impl ProjectWorkspace {\n                 })?;\n                 let project_location = project_json.parent().unwrap().to_path_buf();\n                 let project = ProjectJson::new(&project_location, data);\n-                ProjectWorkspace::Json { project }\n+                let sysroot = match &project.sysroot_src {\n+                    Some(path) => Some(Sysroot::load(path)?),\n+                    None => None,\n+                };\n+                ProjectWorkspace::Json { project, sysroot }\n             }\n             ProjectManifest::CargoToml(cargo_toml) => {\n                 let cargo_version = utf8_stdout({\n@@ -203,12 +207,21 @@ impl ProjectWorkspace {\n         Ok(res)\n     }\n \n+    pub fn load_inline(project_json: ProjectJson) -> Result<ProjectWorkspace> {\n+        let sysroot = match &project_json.sysroot_src {\n+            Some(path) => Some(Sysroot::load(path)?),\n+            None => None,\n+        };\n+\n+        Ok(ProjectWorkspace::Json { project: project_json, sysroot })\n+    }\n+\n     /// Returns the roots for the current `ProjectWorkspace`\n     /// The return type contains the path and whether or not\n     /// the root is a member of the current workspace\n     pub fn to_roots(&self) -> Vec<PackageRoot> {\n         match self {\n-            ProjectWorkspace::Json { project } => project\n+            ProjectWorkspace::Json { project, sysroot } => project\n                 .crates()\n                 .map(|(_, krate)| PackageRoot {\n                     is_member: krate.is_workspace_member,\n@@ -217,7 +230,7 @@ impl ProjectWorkspace {\n                 })\n                 .collect::<FxHashSet<_>>()\n                 .into_iter()\n-                .chain(project.sysroot.as_ref().into_iter().flat_map(|sysroot| {\n+                .chain(sysroot.as_ref().into_iter().flat_map(|sysroot| {\n                     sysroot.crates().map(move |krate| PackageRoot {\n                         is_member: false,\n                         include: vec![sysroot[krate].root_dir().to_path_buf()],\n@@ -255,7 +268,7 @@ impl ProjectWorkspace {\n \n     pub fn proc_macro_dylib_paths(&self) -> Vec<AbsPathBuf> {\n         match self {\n-            ProjectWorkspace::Json { project } => project\n+            ProjectWorkspace::Json { project, sysroot: _ } => project\n                 .crates()\n                 .filter_map(|(_, krate)| krate.proc_macro_dylib_path.as_ref())\n                 .cloned()\n@@ -285,9 +298,8 @@ impl ProjectWorkspace {\n     ) -> CrateGraph {\n         let mut crate_graph = CrateGraph::default();\n         match self {\n-            ProjectWorkspace::Json { project } => {\n-                let sysroot_dps = project\n-                    .sysroot\n+            ProjectWorkspace::Json { project, sysroot } => {\n+                let sysroot_dps = sysroot\n                     .as_ref()\n                     .map(|sysroot| sysroot_to_crate_graph(&mut crate_graph, sysroot, target, load));\n "}, {"sha": "979e9005839069e386ea46590b24f8f0fd81b7e0", "filename": "crates/project_model/src/project_json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fproject_json.rs?ref=96e988fcc3be11acc89dc2c1957bc14e8f39c911", "patch": "@@ -7,12 +7,12 @@ use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::FxHashMap;\n use serde::{de, Deserialize};\n \n-use crate::{cfg_flag::CfgFlag, Sysroot};\n+use crate::cfg_flag::CfgFlag;\n \n /// Roots and crates that compose this Rust project.\n #[derive(Clone, Debug, Eq, PartialEq)]\n pub struct ProjectJson {\n-    pub(crate) sysroot: Option<Sysroot>,\n+    pub(crate) sysroot_src: Option<AbsPathBuf>,\n     crates: Vec<Crate>,\n }\n \n@@ -35,7 +35,7 @@ pub struct Crate {\n impl ProjectJson {\n     pub fn new(base: &AbsPath, data: ProjectJsonData) -> ProjectJson {\n         ProjectJson {\n-            sysroot: data.sysroot_src.map(|it| base.join(it)).map(|it| Sysroot::load(&it)),\n+            sysroot_src: data.sysroot_src.map(|it| base.join(it)),\n             crates: data\n                 .crates\n                 .into_iter()"}, {"sha": "871808d89e5d1e536ec3e2dc6953d5e721fdff64", "filename": "crates/project_model/src/sysroot.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fsysroot.rs?ref=96e988fcc3be11acc89dc2c1957bc14e8f39c911", "patch": "@@ -51,11 +51,11 @@ impl Sysroot {\n     pub fn discover(cargo_toml: &AbsPath) -> Result<Sysroot> {\n         let current_dir = cargo_toml.parent().unwrap();\n         let sysroot_src_dir = discover_sysroot_src_dir(current_dir)?;\n-        let res = Sysroot::load(&sysroot_src_dir);\n+        let res = Sysroot::load(&sysroot_src_dir)?;\n         Ok(res)\n     }\n \n-    pub fn load(sysroot_src_dir: &AbsPath) -> Sysroot {\n+    pub fn load(sysroot_src_dir: &AbsPath) -> Result<Sysroot> {\n         let mut sysroot = Sysroot { crates: Arena::default() };\n \n         for name in SYSROOT_CRATES.trim().lines() {\n@@ -89,7 +89,14 @@ impl Sysroot {\n             }\n         }\n \n-        sysroot\n+        if sysroot.by_name(\"core\").is_none() {\n+            anyhow::bail!(\n+                \"could not find libcore in sysroot path `{}`\",\n+                sysroot_src_dir.as_ref().display()\n+            );\n+        }\n+\n+        Ok(sysroot)\n     }\n \n     fn by_name(&self, name: &str) -> Option<SysrootCrate> {"}, {"sha": "bab6f8a71bbbc3ae6c24512f60782c9d0a4ce6be", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=96e988fcc3be11acc89dc2c1957bc14e8f39c911", "patch": "@@ -109,7 +109,7 @@ impl GlobalState {\n                             )\n                         }\n                         LinkedProject::InlineJsonProject(it) => {\n-                            Ok(project_model::ProjectWorkspace::Json { project: it.clone() })\n+                            project_model::ProjectWorkspace::load_inline(it.clone())\n                         }\n                     })\n                     .collect::<Vec<_>>();"}, {"sha": "866e60ed8a16f7022d67dc2cf54061a5ee89c6fa", "filename": "crates/syntax/test_data/parser/inline/ok/0102_record_pat_field_list.rast", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_pat_field_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_pat_field_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_pat_field_list.rast?ref=96e988fcc3be11acc89dc2c1957bc14e8f39c911", "previous_filename": "crates/syntax/test_data/parser/inline/ok/0102_record_field_pat_list.rast"}, {"sha": "da3412fa8a94a44de833d2edfae5d7b9dd1e2660", "filename": "crates/syntax/test_data/parser/inline/ok/0102_record_pat_field_list.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_pat_field_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_pat_field_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_pat_field_list.rs?ref=96e988fcc3be11acc89dc2c1957bc14e8f39c911", "previous_filename": "crates/syntax/test_data/parser/inline/ok/0102_record_field_pat_list.rs"}, {"sha": "925409bdfe3b11a7cbd9f07eab3335af0a056b8e", "filename": "crates/syntax/test_data/parser/inline/ok/0145_record_pat_field.rast", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_pat_field.rast", "raw_url": "https://github.com/rust-lang/rust/raw/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_pat_field.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_pat_field.rast?ref=96e988fcc3be11acc89dc2c1957bc14e8f39c911", "previous_filename": "crates/syntax/test_data/parser/inline/ok/0145_record_field_pat.rast"}, {"sha": "26b1d5f895202062e05f3a8dd06980d1291081e6", "filename": "crates/syntax/test_data/parser/inline/ok/0145_record_pat_field.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_pat_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e988fcc3be11acc89dc2c1957bc14e8f39c911/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_pat_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_pat_field.rs?ref=96e988fcc3be11acc89dc2c1957bc14e8f39c911", "previous_filename": "crates/syntax/test_data/parser/inline/ok/0145_record_field_pat.rs"}]}