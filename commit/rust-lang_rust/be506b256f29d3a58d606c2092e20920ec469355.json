{"sha": "be506b256f29d3a58d606c2092e20920ec469355", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNTA2YjI1NmYyOWQzYTU4ZDYwNmMyMDkyZTIwOTIwZWM0NjkzNTU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-03-08T18:44:10Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-03-08T18:44:10Z"}, "message": "Rollup merge of #31772 - nodakai:patch-1, r=steveklabnik\n\nClarify the semantics of enum discriminants\n\ncf. https://doc.rust-lang.org/error-index.html#E0082\n\n> The default type for enum discriminants is isize, but it can be adjusted by adding the repr attribute to the enum declaration.\n\nIt would be great if anyone could check my English.", "tree": {"sha": "5be4f4711ee51213249a97984145c7bc0ff9103f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5be4f4711ee51213249a97984145c7bc0ff9103f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be506b256f29d3a58d606c2092e20920ec469355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be506b256f29d3a58d606c2092e20920ec469355", "html_url": "https://github.com/rust-lang/rust/commit/be506b256f29d3a58d606c2092e20920ec469355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be506b256f29d3a58d606c2092e20920ec469355/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f0479b2a5fc16814b68efe9e87dddf231b8941d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f0479b2a5fc16814b68efe9e87dddf231b8941d", "html_url": "https://github.com/rust-lang/rust/commit/8f0479b2a5fc16814b68efe9e87dddf231b8941d"}, {"sha": "969d027e3597a0e4a6d06e4c2637b84b8a15d01c", "url": "https://api.github.com/repos/rust-lang/rust/commits/969d027e3597a0e4a6d06e4c2637b84b8a15d01c", "html_url": "https://github.com/rust-lang/rust/commit/969d027e3597a0e4a6d06e4c2637b84b8a15d01c"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "7022c9b72cf3996aa6e6b179993dc04a7078cfdb", "filename": "src/doc/reference.md", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be506b256f29d3a58d606c2092e20920ec469355/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/be506b256f29d3a58d606c2092e20920ec469355/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=be506b256f29d3a58d606c2092e20920ec469355", "patch": "@@ -1195,18 +1195,24 @@ a = Animal::Cat { name: \"Spotty\".to_string(), weight: 2.7 };\n In this example, `Cat` is a _struct-like enum variant_,\n whereas `Dog` is simply called an enum variant.\n \n-Enums have a discriminant. You can assign them explicitly:\n+Each enum value has a _discriminant_ which is an integer associated to it. You\n+can specify it explicitly:\n \n ```\n enum Foo {\n     Bar = 123,\n }\n ```\n \n-If a discriminant isn't assigned, they start at zero, and add one for each\n+The right hand side of the specification is interpreted as an `isize` value,\n+but the compiler is allowed to use a smaller type in the actual memory layout.\n+The [`repr` attribute](#ffi-attributes) can be added in order to change\n+the type of the right hand side and specify the memory layout.\n+\n+If a discriminant isn't specified, they start at zero, and add one for each\n variant, in order.\n \n-You can cast an enum to get this value:\n+You can cast an enum to get its discriminant:\n \n ```\n # enum Foo { Bar = 123 }"}, {"sha": "cfe76206b02903bf65a8e7974ae539a0fdeaa150", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/be506b256f29d3a58d606c2092e20920ec469355/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be506b256f29d3a58d606c2092e20920ec469355/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=be506b256f29d3a58d606c2092e20920ec469355", "patch": "@@ -1133,15 +1133,16 @@ enum Bad {\n }\n ```\n \n-Here `X` will have already been assigned the discriminant 0 by the time `Y` is\n+Here `X` will have already been specified the discriminant 0 by the time `Y` is\n encountered, so a conflict occurs.\n \"##,\n \n E0082: r##\"\n-The default type for enum discriminants is `isize`, but it can be adjusted by\n-adding the `repr` attribute to the enum declaration. This error indicates that\n-an integer literal given as a discriminant is not a member of the discriminant\n-type. For example:\n+When you specify enum discriminants with `=`, the compiler expects `isize`\n+values by default. Or you can add the `repr` attibute to the enum declaration\n+for an explicit choice of the discriminant type. In either cases, the\n+discriminant values must fall within a valid range for the expected type;\n+otherwise this error is raised. For example:\n \n ```compile_fail\n #[repr(u8)]\n@@ -1152,11 +1153,19 @@ enum Thing {\n ```\n \n Here, 1024 lies outside the valid range for `u8`, so the discriminant for `A` is\n-invalid. You may want to change representation types to fix this, or else change\n-invalid discriminant values so that they fit within the existing type.\n+invalid. Here is another, more subtle example which depends on target word size:\n \n-Note also that without a representation manually defined, the compiler will\n-optimize by using the smallest integer type possible.\n+```compile_fail\n+enum DependsOnPointerSize {\n+    A = 1 << 32\n+}\n+```\n+\n+Here, `1 << 32` is interpreted as an `isize` value. So it is invalid for 32 bit\n+target (`target_pointer_width = \"32\"`) but valid for 64 bit target.\n+\n+You may want to change representation types to fix this, or else change invalid\n+discriminant values so that they fit within the existing type.\n \"##,\n \n E0084: r##\""}]}