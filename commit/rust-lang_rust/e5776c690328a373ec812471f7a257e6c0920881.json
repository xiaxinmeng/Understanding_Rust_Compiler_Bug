{"sha": "e5776c690328a373ec812471f7a257e6c0920881", "node_id": "C_kwDOAAsO6NoAKGU1Nzc2YzY5MDMyOGEzNzNlYzgxMjQ3MWY3YTI1N2U2YzA5MjA4ODE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-27T20:00:24Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-27T20:00:24Z"}, "message": "Use already resolved self_ty in confirm_fn_pointer_candidate", "tree": {"sha": "0f2eb4cf8c9dc1a3de707318c02eaee3f09e8770", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f2eb4cf8c9dc1a3de707318c02eaee3f09e8770"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5776c690328a373ec812471f7a257e6c0920881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5776c690328a373ec812471f7a257e6c0920881", "html_url": "https://github.com/rust-lang/rust/commit/e5776c690328a373ec812471f7a257e6c0920881", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5776c690328a373ec812471f7a257e6c0920881/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ee5cf5a93923dae9c98bffb11545fc3a31368d", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ee5cf5a93923dae9c98bffb11545fc3a31368d", "html_url": "https://github.com/rust-lang/rust/commit/57ee5cf5a93923dae9c98bffb11545fc3a31368d"}], "stats": {"total": 57, "additions": 56, "deletions": 1}, "files": [{"sha": "dd49dcecf77e395cb9609d334ac6aa91626ea095", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5776c690328a373ec812471f7a257e6c0920881/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5776c690328a373ec812471f7a257e6c0920881/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=e5776c690328a373ec812471f7a257e6c0920881", "patch": "@@ -626,7 +626,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // the signature, as evidenced by how we treat it during projection.\n         // The safe thing to do here is to liberate it, though, which should\n         // have no worse effect than skipping the binder here.\n-        let liberated_fn_ty = self.infcx.replace_bound_vars_with_placeholders(obligation.self_ty());\n+        let liberated_fn_ty =\n+            self.infcx.replace_bound_vars_with_placeholders(obligation.predicate.rebind(self_ty));\n         let output_ty = self\n             .infcx\n             .replace_bound_vars_with_placeholders(liberated_fn_ty.fn_sig(self.tcx()).output());"}, {"sha": "de394ca9ad6d41c06f8e940175bec6425e9fd587", "filename": "src/test/ui/function-pointer/issue-102289.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e5776c690328a373ec812471f7a257e6c0920881/src%2Ftest%2Fui%2Ffunction-pointer%2Fissue-102289.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5776c690328a373ec812471f7a257e6c0920881/src%2Ftest%2Fui%2Ffunction-pointer%2Fissue-102289.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunction-pointer%2Fissue-102289.rs?ref=e5776c690328a373ec812471f7a257e6c0920881", "patch": "@@ -0,0 +1,54 @@\n+// check-pass\n+\n+pub(crate) trait Parser: Sized {\n+    type Output;\n+    fn parse(&mut self, _input: &str) -> Result<(), ()> {\n+        loop {}\n+    }\n+    fn map<F, B>(self, _f: F) -> Map<Self, F>\n+    where\n+        F: FnMut(Self::Output) -> B,\n+    {\n+        todo!()\n+    }\n+}\n+\n+pub(crate) struct Chainl1<P, Op>(P, Op);\n+impl<P, Op> Parser for Chainl1<P, Op>\n+where\n+    P: Parser,\n+    Op: Parser,\n+    Op::Output: FnOnce(P::Output, P::Output) -> P::Output,\n+{\n+    type Output = P::Output;\n+}\n+pub(crate) fn chainl1<P, Op>(_parser: P, _op: Op) -> Chainl1<P, Op>\n+where\n+    P: Parser,\n+    Op: Parser,\n+    Op::Output: FnOnce(P::Output, P::Output) -> P::Output,\n+{\n+    loop {}\n+}\n+\n+pub(crate) struct Map<P, F>(P, F);\n+impl<A, B, P, F> Parser for Map<P, F>\n+where\n+    P: Parser<Output = A>,\n+    F: FnMut(A) -> B,\n+{\n+    type Output = B;\n+}\n+\n+impl Parser for u32 {\n+    type Output = ();\n+}\n+\n+pub fn chainl1_error_consume() {\n+    fn first<T, U>(t: T, _: U) -> T {\n+        t\n+    }\n+    let _ = chainl1(1, 1.map(|_| first)).parse(\"\");\n+}\n+\n+fn main() {}"}]}