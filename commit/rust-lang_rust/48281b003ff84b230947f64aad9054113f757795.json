{"sha": "48281b003ff84b230947f64aad9054113f757795", "node_id": "C_kwDOAAsO6NoAKDQ4MjgxYjAwM2ZmODRiMjMwOTQ3ZjY0YWFkOTA1NDExM2Y3NTc3OTU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-04T22:38:12Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-08T02:06:48Z"}, "message": "Adjust spacing in suggestion, add a test", "tree": {"sha": "37910733f65f7c1b263f5e1f51d9b3821b29201e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37910733f65f7c1b263f5e1f51d9b3821b29201e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48281b003ff84b230947f64aad9054113f757795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48281b003ff84b230947f64aad9054113f757795", "html_url": "https://github.com/rust-lang/rust/commit/48281b003ff84b230947f64aad9054113f757795", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48281b003ff84b230947f64aad9054113f757795/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30e3673d437d7ca049d6080eee19e696c3d7429f", "url": "https://api.github.com/repos/rust-lang/rust/commits/30e3673d437d7ca049d6080eee19e696c3d7429f", "html_url": "https://github.com/rust-lang/rust/commit/30e3673d437d7ca049d6080eee19e696c3d7429f"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "e4ad96b659b0813f4b20df58cb7fe146ab56ce91", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48281b003ff84b230947f64aad9054113f757795/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48281b003ff84b230947f64aad9054113f757795/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=48281b003ff84b230947f64aad9054113f757795", "patch": "@@ -115,9 +115,9 @@ pub fn suggest_arbitrary_trait_bound<'tcx>(\n         // FIXME: this case overlaps with code in TyCtxt::note_and_explain_type_err.\n         // That should be extracted into a helper function.\n         if constraint.ends_with('>') {\n-            constraint = format!(\"{}, {}={}>\", &constraint[..constraint.len() - 1], name, term);\n+            constraint = format!(\"{}, {} = {}>\", &constraint[..constraint.len() - 1], name, term);\n         } else {\n-            constraint.push_str(&format!(\"<{}={}>\", name, term));\n+            constraint.push_str(&format!(\"<{} = {}>\", name, term));\n         }\n     }\n "}, {"sha": "ecbeb9d79b118923057e35e56b48e91f911e1de2", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48281b003ff84b230947f64aad9054113f757795/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48281b003ff84b230947f64aad9054113f757795/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=48281b003ff84b230947f64aad9054113f757795", "patch": "@@ -608,13 +608,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         // That should be extracted into a helper function.\n                         if constraint.ends_with('>') {\n                             constraint = format!(\n-                                \"{}, {}={}>\",\n+                                \"{}, {} = {}>\",\n                                 &constraint[..constraint.len() - 1],\n                                 name,\n                                 term\n                             );\n                         } else {\n-                            constraint.push_str(&format!(\"<{}={}>\", name, term));\n+                            constraint.push_str(&format!(\"<{} = {}>\", name, term));\n                         }\n                     }\n "}, {"sha": "ee758f19ec105345066f5437ce2e17aaf125cc63", "filename": "src/test/ui/generic-associated-types/missing-bounds.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48281b003ff84b230947f64aad9054113f757795/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/48281b003ff84b230947f64aad9054113f757795/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed?ref=48281b003ff84b230947f64aad9054113f757795", "patch": "@@ -24,7 +24,7 @@ impl<B: Add + Add<Output = B>> Add for C<B> {\n \n struct D<B>(B);\n \n-impl<B: std::ops::Add<Output=B>> Add for D<B> {\n+impl<B: std::ops::Add<Output = B>> Add for D<B> {\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {"}, {"sha": "c913483a8747c15ef849f859570306d64a177578", "filename": "src/test/ui/generic-associated-types/missing-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48281b003ff84b230947f64aad9054113f757795/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48281b003ff84b230947f64aad9054113f757795/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr?ref=48281b003ff84b230947f64aad9054113f757795", "patch": "@@ -66,8 +66,8 @@ LL |         Self(self.0 + rhs.0)\n    |\n help: consider restricting type parameter `B`\n    |\n-LL | impl<B: std::ops::Add<Output=B>> Add for D<B> {\n-   |       +++++++++++++++++++++++++\n+LL | impl<B: std::ops::Add<Output = B>> Add for D<B> {\n+   |       +++++++++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/missing-bounds.rs:42:14"}, {"sha": "1e7569fa45106c60b8660a83af58f6c6c3757648", "filename": "src/test/ui/suggestions/issue-97677.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48281b003ff84b230947f64aad9054113f757795/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97677.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/48281b003ff84b230947f64aad9054113f757795/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97677.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97677.fixed?ref=48281b003ff84b230947f64aad9054113f757795", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-fn add_ten<N: std::ops::Add<i32, Output=N>>(n: N) -> N {\n+fn add_ten<N: std::ops::Add<i32, Output = N>>(n: N) -> N {\n     n + 10\n     //~^ ERROR cannot add `{integer}` to `N`\n }"}, {"sha": "575d79267f20d718957f456241a28b7ec1c3d66a", "filename": "src/test/ui/suggestions/issue-97677.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48281b003ff84b230947f64aad9054113f757795/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97677.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48281b003ff84b230947f64aad9054113f757795/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97677.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97677.stderr?ref=48281b003ff84b230947f64aad9054113f757795", "patch": "@@ -8,8 +8,8 @@ LL |     n + 10\n    |\n help: consider restricting type parameter `N`\n    |\n-LL | fn add_ten<N: std::ops::Add<i32, Output=N>>(n: N) -> N {\n-   |             ++++++++++++++++++++++++++++++\n+LL | fn add_ten<N: std::ops::Add<i32, Output = N>>(n: N) -> N {\n+   |             ++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "60f5ba45c268d1ae6463509a16cc32c8b4f0e5e1", "filename": "src/test/ui/suggestions/restrict-type-not-param.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48281b003ff84b230947f64aad9054113f757795/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48281b003ff84b230947f64aad9054113f757795/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-not-param.rs?ref=48281b003ff84b230947f64aad9054113f757795", "patch": "@@ -0,0 +1,12 @@\n+use std::ops::Add;\n+\n+struct Wrapper<T>(T);\n+\n+trait Foo {}\n+\n+fn qux<T>(a: Wrapper<T>, b: T) -> T {\n+    a + b\n+    //~^ ERROR cannot add `T` to `Wrapper<T>`\n+}\n+\n+fn main() {}"}, {"sha": "e7d9c5ecbe48208a720fac6deb23cfff4778b96a", "filename": "src/test/ui/suggestions/restrict-type-not-param.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/48281b003ff84b230947f64aad9054113f757795/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-not-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48281b003ff84b230947f64aad9054113f757795/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-not-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-not-param.stderr?ref=48281b003ff84b230947f64aad9054113f757795", "patch": "@@ -0,0 +1,26 @@\n+error[E0369]: cannot add `T` to `Wrapper<T>`\n+  --> $DIR/restrict-type-not-param.rs:8:7\n+   |\n+LL |     a + b\n+   |     - ^ - T\n+   |     |\n+   |     Wrapper<T>\n+   |\n+note: an implementation of `Add<_>` might be missing for `Wrapper<T>`\n+  --> $DIR/restrict-type-not-param.rs:3:1\n+   |\n+LL | struct Wrapper<T>(T);\n+   | ^^^^^^^^^^^^^^^^^ must implement `Add<_>`\n+note: the following trait must be implemented\n+  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+   |\n+LL | pub trait Add<Rhs = Self> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn qux<T>(a: Wrapper<T>, b: T) -> T where Wrapper<T>: Add<T, Output = T> {\n+   |                                     ++++++++++++++++++++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0369`."}, {"sha": "fe5e1d6d2854de0b98f0588d188734ff3404213b", "filename": "src/test/ui/traits/resolution-in-overloaded-op.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48281b003ff84b230947f64aad9054113f757795/src%2Ftest%2Fui%2Ftraits%2Fresolution-in-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48281b003ff84b230947f64aad9054113f757795/src%2Ftest%2Fui%2Ftraits%2Fresolution-in-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fresolution-in-overloaded-op.stderr?ref=48281b003ff84b230947f64aad9054113f757795", "patch": "@@ -8,8 +8,8 @@ LL |     a * b\n    |\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-LL | fn foo<T: MyMul<f64, f64>>(a: &T, b: f64) -> f64 where &T: Mul<f64, Output=f64> {\n-   |                                                  ++++++++++++++++++++++++++++++\n+LL | fn foo<T: MyMul<f64, f64>>(a: &T, b: f64) -> f64 where &T: Mul<f64, Output = f64> {\n+   |                                                  ++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}]}