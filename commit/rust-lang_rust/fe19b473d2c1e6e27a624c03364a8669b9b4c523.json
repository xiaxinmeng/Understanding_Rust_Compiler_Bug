{"sha": "fe19b473d2c1e6e27a624c03364a8669b9b4c523", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMTliNDczZDJjMWU2ZTI3YTYyNGMwMzM2NGE4NjY5YjliNGM1MjM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-28T14:22:15Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-28T14:22:15Z"}, "message": "Rollup merge of #33820 - jonathandturner:format_readability_updates, r=nikomatsakis\n\nIncrease spacing in error format for readability.\n\nTwo small tweaks that seem to help readability quite a bit:\n* Add spacing header<->snippet, but use the |> on the side for visual consistency\n* Fix #33819\n* Fix #33763\n* Move format-sensitive test (issue-26480 in cfail) to ui test\n\nr? @nikomatsakis", "tree": {"sha": "967812b972f1c5f197f1e93d205bec03c298d632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/967812b972f1c5f197f1e93d205bec03c298d632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe19b473d2c1e6e27a624c03364a8669b9b4c523", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe19b473d2c1e6e27a624c03364a8669b9b4c523", "html_url": "https://github.com/rust-lang/rust/commit/fe19b473d2c1e6e27a624c03364a8669b9b4c523", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe19b473d2c1e6e27a624c03364a8669b9b4c523/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d68b3d106b293e29502d1c9dc1018ff59b90603", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d68b3d106b293e29502d1c9dc1018ff59b90603", "html_url": "https://github.com/rust-lang/rust/commit/7d68b3d106b293e29502d1c9dc1018ff59b90603"}, {"sha": "df87a781de531b0578cfe6c9e0a6cb624951f67c", "url": "https://api.github.com/repos/rust-lang/rust/commits/df87a781de531b0578cfe6c9e0a6cb624951f67c", "html_url": "https://github.com/rust-lang/rust/commit/df87a781de531b0578cfe6c9e0a6cb624951f67c"}], "stats": {"total": 149, "additions": 117, "deletions": 32}, "files": [{"sha": "819717628d62dbfb66f74aac3e86b867fea03678", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=fe19b473d2c1e6e27a624c03364a8669b9b4c523", "patch": "@@ -977,7 +977,11 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                         if let Categorization::Local(local_id) = err.cmt.cat {\n                             let span = self.tcx.map.span(local_id);\n                             if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(span) {\n-                                if snippet != \"self\" {\n+                                if snippet.starts_with(\"ref \") {\n+                                    db.span_label(span,\n+                                        &format!(\"use `{}` here to make mutable\",\n+                                            snippet.replace(\"ref \", \"ref mut \")));\n+                                } else if snippet != \"self\" {\n                                     db.span_label(span,\n                                         &format!(\"use `mut {}` here to make mutable\", snippet));\n                                 }"}, {"sha": "6b15aa4f92c573dcf527dca2a7f7d5147226003e", "filename": "src/libsyntax/errors/emitter.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Flibsyntax%2Ferrors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Flibsyntax%2Ferrors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Femitter.rs?ref=fe19b473d2c1e6e27a624c03364a8669b9b4c523", "patch": "@@ -682,6 +682,7 @@ mod test {\n         println!(\"r#\\\"\\n{}\\\"#\", str);\n         assert_eq!(str, &r#\"\n   --> dummy.txt:11:1\n+   |>\n 11 |>         e-l\u00e4-v\u00e4n\n    |> ^\n \"#[1..]);\n@@ -746,6 +747,7 @@ mod test {\n \n         let expect_start = &r#\"\n  --> dummy.txt:1:6\n+  |>\n 1 |> _____aaaaaa____bbbbbb__cccccdd_\n   |>      ^^^^^^    ^^^^^^  ^^^^^^^\n \"#[1..];\n@@ -818,6 +820,7 @@ mod test {\n \n         let expect0 = &r#\"\n    --> dummy.txt:5:1\n+    |>\n 5   |> ccccc\n     |> ^\n ...\n@@ -830,6 +833,7 @@ mod test {\n \n         let expect = &r#\"\n    --> dummy.txt:1:1\n+    |>\n 1   |> aaaaa\n     |> ^\n ..."}, {"sha": "2a43a14ddf873bebdb6fa53da50e57dc78502b77", "filename": "src/libsyntax/errors/snippet/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs?ref=fe19b473d2c1e6e27a624c03364a8669b9b4c523", "patch": "@@ -478,6 +478,13 @@ impl FileInfo {\n                         }],\n                         kind: RenderedLineKind::PrimaryFileName,\n                     });\n+                    output.push(RenderedLine {\n+                        text: vec![StyledString {\n+                            text: \"\".to_string(),\n+                            style: Style::FileNameStyle,\n+                        }],\n+                        kind: RenderedLineKind::Annotations,\n+                    });\n                 }\n                 None => {\n                     output.push(RenderedLine {\n@@ -487,6 +494,13 @@ impl FileInfo {\n                         }],\n                         kind: RenderedLineKind::OtherFileName,\n                     });\n+                    output.push(RenderedLine {\n+                        text: vec![StyledString {\n+                            text: \"\".to_string(),\n+                            style: Style::FileNameStyle,\n+                        }],\n+                        kind: RenderedLineKind::Annotations,\n+                    });\n                 }\n             }\n         }"}, {"sha": "51fe4572dbc633818459549e6add6167e8b656c4", "filename": "src/libsyntax/errors/snippet/test.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs?ref=fe19b473d2c1e6e27a624c03364a8669b9b4c523", "patch": "@@ -98,6 +98,7 @@ fn foo() {\n     let text = make_string(&lines);\n     assert_eq!(&text[..], &\"\n  --> foo.rs:3:2\n+  |>\n 3 |> \\tbar;\n   |> \\t^^^\n \"[1..]);\n@@ -130,6 +131,7 @@ fn foo() {\n     println!(\"text=\\n{}\", text);\n     assert_eq!(&text[..], &r#\"\n  ::: foo.rs\n+  |>\n 3 |>     vec.push(vec.pop().unwrap());\n   |>     ---      ---                - previous borrow ends here\n   |>     |        |\n@@ -199,12 +201,14 @@ fn bar() {\n     // Note that the `|>` remain aligned across both files:\n     assert_eq!(&text[..], &r#\"\n    --> foo.rs:3:14\n+    |>\n 3   |>     vec.push(vec.pop().unwrap());\n     |>     ---      ^^^                - c\n     |>     |        |\n     |>     |        b\n     |>     a\n    ::: bar.rs\n+    |>\n 17  |>     vec.push();\n     |>     ---       - f\n     |>     |\n@@ -249,6 +253,7 @@ fn foo() {\n     println!(\"text=\\n{}\", text);\n     assert_eq!(&text[..], &r#\"\n    ::: foo.rs\n+    |>\n 3   |>     let name = find_id(&data, 22).unwrap();\n     |>                         ---- immutable borrow begins here\n ...\n@@ -288,6 +293,7 @@ fn foo() {\n     println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n     assert_eq!(&text[..], &r#\"\n  ::: foo.rs\n+  |>\n 3 |>     vec.push(vec.pop().unwrap());\n   |>     --------           ------ D\n   |>     ||\n@@ -324,6 +330,7 @@ fn foo() {\n     println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n     assert_eq!(&text[..], &r#\"\n  ::: foo.rs\n+  |>\n 3 |>     vec.push(vec.pop().unwrap());\n   |>     ---      ---                - previous borrow ends here\n   |>     |        |\n@@ -362,6 +369,7 @@ fn foo() {\n     println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n     assert_eq!(&text[..], &r#\"\n    ::: foo.rs\n+    |>\n 4   |>     let mut vec2 = vec;\n     |>                    --- `vec` moved here because it has type `collections::vec::Vec<i32>`\n ...\n@@ -398,6 +406,7 @@ fn foo() {\n     println!(\"text=&r#\\\"\\n{}\\n\\\"#[1..]\", text);\n     assert_eq!(text, &r#\"\n  ::: foo.rs\n+  |>\n 3 |>     let mut vec = vec![0, 1, 2];\n   |>             ---   ---\n 4 |>     let mut vec2 = vec;\n@@ -429,6 +438,7 @@ impl SomeTrait for () {\n     println!(\"r#\\\"\\n{}\\\"\", text);\n     assert_eq!(text, &r#\"\n  ::: foo.rs\n+  |>\n 3 |>     fn foo(x: u32) {\n   |>     -\n \"#[1..]);\n@@ -458,6 +468,7 @@ fn span_overlap_label() {\n     println!(\"r#\\\"\\n{}\\\"\", text);\n     assert_eq!(text, &r#\"\n  ::: foo.rs\n+  |>\n 2 |>     fn foo(x: u32) {\n   |>     --------------\n   |>     |      |\n@@ -492,6 +503,7 @@ fn span_overlap_label2() {\n     println!(\"r#\\\"\\n{}\\\"\", text);\n     assert_eq!(text, &r#\"\n  ::: foo.rs\n+  |>\n 2 |>     fn foo(x: u32) {\n   |>     --------------\n   |>     |      |\n@@ -537,6 +549,7 @@ fn span_overlap_label3() {\n     println!(\"r#\\\"\\n{}\\\"\", text);\n     assert_eq!(text, &r#\"\n  ::: foo.rs\n+  |>\n 3 |>        let closure = || {\n   |>                      - foo\n 4 |>            inner\n@@ -577,6 +590,7 @@ fn main() {\n     println!(\"r#\\\"\\n{}\\\"\", text);\n     assert_eq!(text, &r#\"\n   --> foo.rs:11:2\n+   |>\n 11 |> }\n    |>  -\n \"#[1..]);"}, {"sha": "9c9677c1e98638d996bf7fc4ee3e9eda1538725e", "filename": "src/test/compile-fail/issue-33819.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Ftest%2Fcompile-fail%2Fissue-33819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Ftest%2Fcompile-fail%2Fissue-33819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-33819.rs?ref=fe19b473d2c1e6e27a624c03364a8669b9b4c523", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+fn main() {\n+    let mut op = Some(2);\n+    match op {\n+        Some(ref v) => { let a = &mut v; },\n+        //~^ ERROR:cannot borrow immutable\n+        //~| use `ref mut v` here to make mutable\n+        None => {},\n+    }\n+}"}, {"sha": "da8769e616c3f0ae545554aebb55edcc0eb6e964", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=fe19b473d2c1e6e27a624c03364a8669b9b4c523", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rand, core)]\n+#![feature(rand)]\n \n use std::fs::File;\n use std::io::prelude::*;\n@@ -18,6 +18,11 @@ use std::process::Command;\n use std::__rand::{thread_rng, Rng};\n use std::{char, env};\n \n+pub fn check_old_skool() -> bool {\n+    use std::env;\n+    env::var(\"RUST_NEW_ERROR_FORMAT\").is_err()\n+}\n+\n // creates a file with `fn main() { <random ident> }` and checks the\n // compiler emits a span of the appropriate length (for the\n // \"unresolved name\" message); currently just using the number of code\n@@ -65,10 +70,17 @@ fn main() {\n \n         let err = String::from_utf8_lossy(&result.stderr);\n \n-        // the span should end the line (e.g no extra ~'s)\n-        let expected_span = format!(\"^{}\\n\", repeat(\"~\").take(n - 1)\n-                                                        .collect::<String>());\n-        assert!(err.contains(&expected_span));\n+        if check_old_skool() {\n+            // the span should end the line (e.g no extra ~'s)\n+            let expected_span = format!(\"^{}\\n\", repeat(\"~\").take(n - 1)\n+                                                            .collect::<String>());\n+            assert!(err.contains(&expected_span));\n+        } else {\n+            // the span should end the line (e.g no extra ~'s)\n+            let expected_span = format!(\"^{}\\n\", repeat(\"^\").take(n - 1)\n+                                                            .collect::<String>());\n+            assert!(err.contains(&expected_span));\n+        }\n     }\n \n     // Test multi-column characters and tabs\n@@ -77,9 +89,6 @@ fn main() {\n                        r#\"extern \"\uf937\uf922\uf92ba\u0301\u0301\u0301\" fn foo() {{}} extern \"\uf937\uf922\uf92ba\u0301\u0301\" fn bar() {{}}\"#);\n     }\n \n-    // Extra characters. Every line is preceded by `filename:lineno <actual code>`\n-    let offset = main_file.to_str().unwrap().len() + 3;\n-\n     let result = Command::new(\"sh\")\n                          .arg(\"-c\")\n                          .arg(format!(\"{} {}\",\n@@ -91,17 +100,31 @@ fn main() {\n \n     // Test both the length of the snake and the leading spaces up to it\n \n-    // First snake is 8 ~s long, with 7 preceding spaces (excluding file name/line offset)\n-    let expected_span = format!(\"\\n{}^{}\\n\",\n-                                repeat(\" \").take(offset + 7).collect::<String>(),\n-                                repeat(\"~\").take(8).collect::<String>());\n-    assert!(err.contains(&expected_span));\n-    // Second snake is only 7 ~s long, with 36 preceding spaces,\n-    // because rustc counts chars() now rather than width(). This\n-    // is because width() functions are to be removed from\n-    // librustc_unicode\n-    let expected_span = format!(\"\\n{}^{}\\n\",\n-                                repeat(\" \").take(offset + 36).collect::<String>(),\n-                                repeat(\"~\").take(7).collect::<String>());\n-    assert!(err.contains(&expected_span));\n+    if check_old_skool() {\n+        // Extra characters. Every line is preceded by `filename:lineno <actual code>`\n+        let offset = main_file.to_str().unwrap().len() + 3;\n+\n+        // First snake is 8 ~s long, with 7 preceding spaces (excluding file name/line offset)\n+        let expected_span = format!(\"\\n{}^{}\\n\",\n+                                    repeat(\" \").take(offset + 7).collect::<String>(),\n+                                    repeat(\"~\").take(8).collect::<String>());\n+        assert!(err.contains(&expected_span));\n+        // Second snake is only 7 ~s long, with 36 preceding spaces,\n+        // because rustc counts chars() now rather than width(). This\n+        // is because width() functions are to be removed from\n+        // librustc_unicode\n+        let expected_span = format!(\"\\n{}^{}\\n\",\n+                                    repeat(\" \").take(offset + 36).collect::<String>(),\n+                                    repeat(\"~\").take(7).collect::<String>());\n+        assert!(err.contains(&expected_span));\n+    } else {\n+        let expected_span = format!(\"\\n  |>{}{}\\n\",\n+                                    repeat(\" \").take(8).collect::<String>(),\n+                                    repeat(\"^\").take(9).collect::<String>());\n+        assert!(err.contains(&expected_span));\n+        let expected_span = format!(\"\\n  |>{}{}\\n\",\n+                                    repeat(\" \").take(37).collect::<String>(),\n+                                    repeat(\"^\").take(8).collect::<String>());\n+        assert!(err.contains(&expected_span));\n+    }\n }"}, {"sha": "96db31f4b116fb87bd823ca9b6eb9b1a3c80192e", "filename": "src/test/ui/mismatched_types/issue-26480.rs", "status": "renamed", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.rs?ref=fe19b473d2c1e6e27a624c03364a8669b9b4c523", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// rustc-env:RUST_NEW_ERROR_FORMAT\n extern {\n     fn write(fildes: i32, buf: *const i8, nbyte: u64) -> i64;\n }\n@@ -24,25 +25,16 @@ macro_rules! write {\n         unsafe {\n             write(stdout, $arr.as_ptr() as *const i8,\n                   $arr.len() * size_of($arr[0]));\n-            //~^ ERROR mismatched types\n-            //~| expected u64, found usize\n-            //~| expected type\n-            //~| found type\n         }\n     }}\n }\n \n macro_rules! cast {\n-    ($x:expr) => ($x as ()) //~ ERROR non-scalar cast\n+    ($x:expr) => ($x as ())\n }\n \n fn main() {\n     let hello = ['H', 'e', 'y'];\n     write!(hello);\n-    //~^ NOTE in this expansion of write!\n-    //~| NOTE in this expansion of write!\n-    //~| NOTE in this expansion of write!\n-\n     cast!(2);\n-    //~^ NOTE in this expansion of cast!\n }", "previous_filename": "src/test/compile-fail/issue-26480.rs"}, {"sha": "c00594a59c1150fc6f8dde664fcf3b440a736c4b", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=fe19b473d2c1e6e27a624c03364a8669b9b4c523", "patch": "@@ -0,0 +1,15 @@\n+error: mismatched types [--explain E0308]\n+  --> $DIR/issue-26480.rs:27:19\n+   |>\n+27 |>                   $arr.len() * size_of($arr[0]));\n+   |>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u64, found usize\n+$DIR/issue-26480.rs:38:5: 38:19: note: in this expansion of write! (defined in $DIR/issue-26480.rs)\n+\n+error: non-scalar cast: `_` as `()`\n+  --> $DIR/issue-26480.rs:33:19\n+   |>\n+33 |>     ($x:expr) => ($x as ())\n+   |>                   ^^^^^^^^\n+$DIR/issue-26480.rs:39:5: 39:14: note: in this expansion of cast! (defined in $DIR/issue-26480.rs)\n+\n+error: aborting due to 2 previous errors"}, {"sha": "1af332ee5bea7036b7f216bb554b6c3420a4f67e", "filename": "src/test/ui/mismatched_types/main.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe19b473d2c1e6e27a624c03364a8669b9b4c523/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr?ref=fe19b473d2c1e6e27a624c03364a8669b9b4c523", "patch": "@@ -1,5 +1,6 @@\n error: mismatched types [--explain E0308]\n   --> $DIR/main.rs:14:18\n+   |>\n 14 |>     let x: u32 = (\n    |>                  ^ expected u32, found ()\n note: expected type `u32`"}]}