{"sha": "2c293bd01bcf832ba5e190789322935329d6ccd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMjkzYmQwMWJjZjgzMmJhNWUxOTA3ODkzMjI5MzUzMjlkNmNjZDQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-08-09T07:16:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-09T07:16:42Z"}, "message": "Merge pull request #1863 from topecongiro/issue-1862\n\nKeep the pre-comment on the same line with item if it fits max width", "tree": {"sha": "9ffe0103f2e17d57910bfe6cbc95b6cf1d4a5cd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ffe0103f2e17d57910bfe6cbc95b6cf1d4a5cd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c293bd01bcf832ba5e190789322935329d6ccd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c293bd01bcf832ba5e190789322935329d6ccd4", "html_url": "https://github.com/rust-lang/rust/commit/2c293bd01bcf832ba5e190789322935329d6ccd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c293bd01bcf832ba5e190789322935329d6ccd4/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1b2dc8e0a5954030f1a9d5760fbc1a7d4f39c54", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b2dc8e0a5954030f1a9d5760fbc1a7d4f39c54", "html_url": "https://github.com/rust-lang/rust/commit/b1b2dc8e0a5954030f1a9d5760fbc1a7d4f39c54"}, {"sha": "021f922b9c48d455f80fe34ab38cff7fe25cbd63", "url": "https://api.github.com/repos/rust-lang/rust/commits/021f922b9c48d455f80fe34ab38cff7fe25cbd63", "html_url": "https://github.com/rust-lang/rust/commit/021f922b9c48d455f80fe34ab38cff7fe25cbd63"}], "stats": {"total": 92, "additions": 81, "deletions": 11}, "files": [{"sha": "731d310a5d408108b5c7ba347129f6dc87b11a44", "filename": "src/lists.rs", "status": "modified", "additions": 57, "deletions": 7, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/2c293bd01bcf832ba5e190789322935329d6ccd4/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c293bd01bcf832ba5e190789322935329d6ccd4/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=2c293bd01bcf832ba5e190789322935329d6ccd4", "patch": "@@ -76,9 +76,20 @@ impl AsRef<ListItem> for ListItem {\n     }\n }\n \n+#[derive(PartialEq, Eq)]\n+pub enum ListItemCommentStyle {\n+    // Try to keep the comment on the same line with the item.\n+    SameLine,\n+    // Put the comment on the previous or the next line of the item.\n+    DifferentLine,\n+    // No comment available.\n+    None,\n+}\n+\n pub struct ListItem {\n     // None for comments mean that they are not present.\n     pub pre_comment: Option<String>,\n+    pub pre_comment_style: ListItemCommentStyle,\n     // Item should include attributes and doc comments. None indicates a failed\n     // rewrite.\n     pub item: Option<String>,\n@@ -111,6 +122,7 @@ impl ListItem {\n     pub fn from_str<S: Into<String>>(s: S) -> ListItem {\n         ListItem {\n             pre_comment: None,\n+            pre_comment_style: ListItemCommentStyle::None,\n             item: Some(s.into()),\n             post_comment: None,\n             new_lines: false,\n@@ -279,8 +291,23 @@ where\n             result.push_str(&comment);\n \n             if tactic == DefinitiveListTactic::Vertical {\n-                result.push('\\n');\n-                result.push_str(indent_str);\n+                // We cannot keep pre-comments on the same line if the comment if normalized.\n+                let keep_comment = if formatting.config.normalize_comments() {\n+                    false\n+                } else if item.pre_comment_style == ListItemCommentStyle::DifferentLine {\n+                    false\n+                } else {\n+                    // We will try to keep the comment on the same line with the item here.\n+                    // 1 = ` `\n+                    let total_width = total_item_width(item) + item_sep_len + 1;\n+                    total_width <= formatting.shape.width\n+                };\n+                if keep_comment {\n+                    result.push(' ');\n+                } else {\n+                    result.push('\\n');\n+                    result.push_str(indent_str);\n+                }\n             } else {\n                 result.push(' ');\n             }\n@@ -448,12 +475,34 @@ where\n                 .span_to_snippet(mk_sp(self.prev_span_end, (self.get_lo)(&item)))\n                 .unwrap();\n             let trimmed_pre_snippet = pre_snippet.trim();\n-            let has_pre_comment =\n-                trimmed_pre_snippet.contains(\"//\") || trimmed_pre_snippet.contains(\"/*\");\n-            let pre_comment = if has_pre_comment {\n-                Some(trimmed_pre_snippet.to_owned())\n+            let has_single_line_comment = trimmed_pre_snippet.starts_with(\"//\");\n+            let has_block_comment = trimmed_pre_snippet.starts_with(\"/*\");\n+            let (pre_comment, pre_comment_style) = if has_single_line_comment {\n+                (\n+                    Some(trimmed_pre_snippet.to_owned()),\n+                    ListItemCommentStyle::DifferentLine,\n+                )\n+            } else if has_block_comment {\n+                let comment_end = pre_snippet.chars().rev().position(|c| c == '/').unwrap();\n+                if pre_snippet\n+                    .chars()\n+                    .rev()\n+                    .take(comment_end + 1)\n+                    .find(|c| *c == '\\n')\n+                    .is_some()\n+                {\n+                    (\n+                        Some(trimmed_pre_snippet.to_owned()),\n+                        ListItemCommentStyle::DifferentLine,\n+                    )\n+                } else {\n+                    (\n+                        Some(trimmed_pre_snippet.to_owned()),\n+                        ListItemCommentStyle::SameLine,\n+                    )\n+                }\n             } else {\n-                None\n+                (None, ListItemCommentStyle::None)\n             };\n \n             // Post-comment\n@@ -542,6 +591,7 @@ where\n \n             ListItem {\n                 pre_comment: pre_comment,\n+                pre_comment_style: pre_comment_style,\n                 item: (self.get_item_string)(&item),\n                 post_comment: post_comment,\n                 new_lines: new_lines,"}, {"sha": "3b4e6356ff9031aa089eef396a6ece7dea479819", "filename": "tests/source/expr-block.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c293bd01bcf832ba5e190789322935329d6ccd4/tests%2Fsource%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c293bd01bcf832ba5e190789322935329d6ccd4/tests%2Fsource%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr-block.rs?ref=2c293bd01bcf832ba5e190789322935329d6ccd4", "patch": "@@ -272,3 +272,13 @@ fn combine_block() {\n         ),\n     }\n }\n+\n+fn issue_1862() {\n+    foo(\n+        /* bar = */ None ,\n+        something_something,\n+        /* baz = */ None ,\n+        /* This comment waaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaay too long to be kept on the same line */ None ,\n+        /* com */ this_last_arg_is_tooooooooooooooooooooooooooooooooo_long_to_be_kept_with_the_pre_comment ,\n+    )\n+}"}, {"sha": "68c5421c3ca26b8cd1061236eb4a73aba73d4c67", "filename": "tests/target/expr-block.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c293bd01bcf832ba5e190789322935329d6ccd4/tests%2Ftarget%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c293bd01bcf832ba5e190789322935329d6ccd4/tests%2Ftarget%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-block.rs?ref=2c293bd01bcf832ba5e190789322935329d6ccd4", "patch": "@@ -81,8 +81,7 @@ fn arrays() {\n     ];\n \n     let y = [\n-        /* comment */\n-        1,\n+        /* comment */ 1,\n         2, /* post comment */\n         3,\n     ];\n@@ -92,8 +91,7 @@ fn arrays() {\n             test123: value_one_two_three_four,\n             turbo: coolio(),\n         },\n-        /* comment  */\n-        1,\n+        /* comment  */ 1,\n     ];\n \n     let a = WeightedChoice::new(&mut [\n@@ -323,3 +321,15 @@ fn combine_block() {\n         ),\n     }\n }\n+\n+fn issue_1862() {\n+    foo(\n+        /* bar = */ None,\n+        something_something,\n+        /* baz = */ None,\n+        /* This comment waaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaay too long to be kept on the same line */\n+        None,\n+        /* com */\n+        this_last_arg_is_tooooooooooooooooooooooooooooooooo_long_to_be_kept_with_the_pre_comment,\n+    )\n+}"}]}