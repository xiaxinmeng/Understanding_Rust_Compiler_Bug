{"sha": "f15e4b30c0d217b647e443333902ca7a948e0f58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNWU0YjMwYzBkMjE3YjY0N2U0NDMzMzM5MDJjYTdhOTQ4ZTBmNTg=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-23T17:02:26Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-23T17:02:26Z"}, "message": "fix Predicate perf regression", "tree": {"sha": "cd1c17b85b02c162afc5c975d2fe7fbc670b74ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd1c17b85b02c162afc5c975d2fe7fbc670b74ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f15e4b30c0d217b647e443333902ca7a948e0f58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f15e4b30c0d217b647e443333902ca7a948e0f58", "html_url": "https://github.com/rust-lang/rust/commit/f15e4b30c0d217b647e443333902ca7a948e0f58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f15e4b30c0d217b647e443333902ca7a948e0f58/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "url": "https://api.github.com/repos/rust-lang/rust/commits/810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "html_url": "https://github.com/rust-lang/rust/commit/810dbf7770cfaa52ed5cdc2f833fa11e4034c029"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "17b7b4e680f5e4764b4d953b6abbcce49b26585b", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f15e4b30c0d217b647e443333902ca7a948e0f58/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f15e4b30c0d217b647e443333902ca7a948e0f58/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=f15e4b30c0d217b647e443333902ca7a948e0f58", "patch": "@@ -10,50 +10,44 @@ pub fn anonymize_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     pred: ty::Predicate<'tcx>,\n ) -> ty::Predicate<'tcx> {\n-    match pred.kind() {\n+    let kind = pred.kind();\n+    let new = match kind {\n         &ty::PredicateKind::Trait(ref data, constness) => {\n             ty::PredicateKind::Trait(tcx.anonymize_late_bound_regions(data), constness)\n-                .to_predicate(tcx)\n         }\n \n         ty::PredicateKind::RegionOutlives(data) => {\n             ty::PredicateKind::RegionOutlives(tcx.anonymize_late_bound_regions(data))\n-                .to_predicate(tcx)\n         }\n \n         ty::PredicateKind::TypeOutlives(data) => {\n             ty::PredicateKind::TypeOutlives(tcx.anonymize_late_bound_regions(data))\n-                .to_predicate(tcx)\n         }\n \n         ty::PredicateKind::Projection(data) => {\n-            ty::PredicateKind::Projection(tcx.anonymize_late_bound_regions(data)).to_predicate(tcx)\n+            ty::PredicateKind::Projection(tcx.anonymize_late_bound_regions(data))\n         }\n \n-        &ty::PredicateKind::WellFormed(data) => {\n-            ty::PredicateKind::WellFormed(data).to_predicate(tcx)\n-        }\n+        &ty::PredicateKind::WellFormed(data) => ty::PredicateKind::WellFormed(data),\n \n-        &ty::PredicateKind::ObjectSafe(data) => {\n-            ty::PredicateKind::ObjectSafe(data).to_predicate(tcx)\n-        }\n+        &ty::PredicateKind::ObjectSafe(data) => ty::PredicateKind::ObjectSafe(data),\n \n         &ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n-            ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind).to_predicate(tcx)\n+            ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind)\n         }\n \n         ty::PredicateKind::Subtype(data) => {\n-            ty::PredicateKind::Subtype(tcx.anonymize_late_bound_regions(data)).to_predicate(tcx)\n+            ty::PredicateKind::Subtype(tcx.anonymize_late_bound_regions(data))\n         }\n \n         &ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n-            ty::PredicateKind::ConstEvaluatable(def_id, substs).to_predicate(tcx)\n+            ty::PredicateKind::ConstEvaluatable(def_id, substs)\n         }\n \n-        ty::PredicateKind::ConstEquate(c1, c2) => {\n-            ty::PredicateKind::ConstEquate(c1, c2).to_predicate(tcx)\n-        }\n-    }\n+        ty::PredicateKind::ConstEquate(c1, c2) => ty::PredicateKind::ConstEquate(c1, c2),\n+    };\n+\n+    if new != *kind { new.to_predicate(tcx) } else { pred }\n }\n \n struct PredicateSet<'tcx> {"}, {"sha": "8fa7061998fd81e9a61829c07216236509f7f7c7", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f15e4b30c0d217b647e443333902ca7a948e0f58/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f15e4b30c0d217b647e443333902ca7a948e0f58/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=f15e4b30c0d217b647e443333902ca7a948e0f58", "patch": "@@ -1032,6 +1032,7 @@ impl<'tcx> PartialEq for Predicate<'tcx> {\n impl<'tcx> Eq for Predicate<'tcx> {}\n \n impl<'tcx> Predicate<'tcx> {\n+    #[inline(always)]\n     pub fn kind(self) -> &'tcx PredicateKind<'tcx> {\n         self.kind\n     }\n@@ -1166,7 +1167,8 @@ impl<'tcx> Predicate<'tcx> {\n         // this trick achieves that).\n \n         let substs = &trait_ref.skip_binder().substs;\n-        let predicate = match self.kind() {\n+        let kind = self.kind();\n+        let new = match kind {\n             &PredicateKind::Trait(ref binder, constness) => {\n                 PredicateKind::Trait(binder.map_bound(|data| data.subst(tcx, substs)), constness)\n             }\n@@ -1195,7 +1197,7 @@ impl<'tcx> Predicate<'tcx> {\n             }\n         };\n \n-        predicate.to_predicate(tcx)\n+        if new != *kind { new.to_predicate(tcx) } else { self }\n     }\n }\n \n@@ -1314,6 +1316,7 @@ pub trait ToPredicate<'tcx> {\n }\n \n impl ToPredicate<'tcx> for PredicateKind<'tcx> {\n+    #[inline(always)]\n     fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         tcx.mk_predicate(*self)\n     }"}]}