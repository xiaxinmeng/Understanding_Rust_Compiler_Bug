{"sha": "84a89ed3effb37c86ca686adbb447275f3562a09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YTg5ZWQzZWZmYjM3Yzg2Y2E2ODZhZGJiNDQ3Mjc1ZjM1NjJhMDk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-10T17:36:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-14T17:14:11Z"}, "message": "compiletest: Re-add raise_fd_limit\n\nThis apparently fixes obscure bugs on OSX!", "tree": {"sha": "1689c638f327a7595772818cc5c5937f4fc1baa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1689c638f327a7595772818cc5c5937f4fc1baa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84a89ed3effb37c86ca686adbb447275f3562a09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84a89ed3effb37c86ca686adbb447275f3562a09", "html_url": "https://github.com/rust-lang/rust/commit/84a89ed3effb37c86ca686adbb447275f3562a09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84a89ed3effb37c86ca686adbb447275f3562a09/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0516c4099e68cfce267562c4460dc9a47be6776e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0516c4099e68cfce267562c4460dc9a47be6776e", "html_url": "https://github.com/rust-lang/rust/commit/0516c4099e68cfce267562c4460dc9a47be6776e"}], "stats": {"total": 83, "additions": 70, "deletions": 13}, "files": [{"sha": "b93ab5d31345be3987bf193dd1182cc91b6c16dd", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=84a89ed3effb37c86ca686adbb447275f3562a09", "patch": "@@ -12,9 +12,7 @@\n \n #![feature(box_syntax)]\n #![feature(collections)]\n-#![feature(old_io)]\n #![feature(rustc_private)]\n-#![feature(unboxed_closures)]\n #![feature(std_misc)]\n #![feature(test)]\n #![feature(path_ext)]\n@@ -42,6 +40,7 @@ pub mod header;\n pub mod runtest;\n pub mod common;\n pub mod errors;\n+mod raise_fd_limit;\n \n pub fn main() {\n     let config = parse_config(env::args().collect());\n@@ -245,11 +244,7 @@ pub fn run_tests(config: &Config) {\n     // sadly osx needs some file descriptor limits raised for running tests in\n     // parallel (especially when we have lots and lots of child processes).\n     // For context, see #8904\n-    #[allow(deprecated)]\n-    fn raise_fd_limit() {\n-        std::old_io::test::raise_fd_limit();\n-    }\n-    raise_fd_limit();\n+    raise_fd_limit::raise_fd_limit();\n     // Prevent issue #21352 UAC blocking .exe containing 'patch' etc. on Windows\n     // If #11207 is resolved (adding manifest to .exe) this becomes unnecessary\n     env::set_var(\"__COMPAT_LAYER\", \"RunAsInvoker\");"}, {"sha": "bf252fa0e7431905470be0283ea3584b11750319", "filename": "src/compiletest/raise_fd_limit.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Fcompiletest%2Fraise_fd_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Fcompiletest%2Fraise_fd_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fraise_fd_limit.rs?ref=84a89ed3effb37c86ca686adbb447275f3562a09", "patch": "@@ -0,0 +1,67 @@\n+/// darwin_fd_limit exists to work around an issue where launchctl on Mac OS X\n+/// defaults the rlimit maxfiles to 256/unlimited. The default soft limit of 256\n+/// ends up being far too low for our multithreaded scheduler testing, depending\n+/// on the number of cores available.\n+///\n+/// This fixes issue #7772.\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+#[allow(non_camel_case_types)]\n+pub fn raise_fd_limit() {\n+    use libc;\n+\n+    type rlim_t = libc::uint64_t;\n+    #[repr(C)]\n+    struct rlimit {\n+        rlim_cur: rlim_t,\n+        rlim_max: rlim_t\n+    }\n+    extern {\n+        // name probably doesn't need to be mut, but the C function doesn't\n+        // specify const\n+        fn sysctl(name: *mut libc::c_int, namelen: libc::c_uint,\n+                  oldp: *mut libc::c_void, oldlenp: *mut libc::size_t,\n+                  newp: *mut libc::c_void, newlen: libc::size_t) -> libc::c_int;\n+        fn getrlimit(resource: libc::c_int, rlp: *mut rlimit) -> libc::c_int;\n+        fn setrlimit(resource: libc::c_int, rlp: *const rlimit) -> libc::c_int;\n+    }\n+    static CTL_KERN: libc::c_int = 1;\n+    static KERN_MAXFILESPERPROC: libc::c_int = 29;\n+    static RLIMIT_NOFILE: libc::c_int = 8;\n+\n+    // The strategy here is to fetch the current resource limits, read the\n+    // kern.maxfilesperproc sysctl value, and bump the soft resource limit for\n+    // maxfiles up to the sysctl value.\n+    use ptr::null_mut;\n+    use mem::size_of_val;\n+    use io;\n+\n+    // Fetch the kern.maxfilesperproc value\n+    let mut mib: [libc::c_int; 2] = [CTL_KERN, KERN_MAXFILESPERPROC];\n+    let mut maxfiles: libc::c_int = 0;\n+    let mut size: libc::size_t = size_of_val(&maxfiles) as libc::size_t;\n+    if sysctl(&mut mib[0], 2, &mut maxfiles as *mut _ as *mut _, &mut size,\n+              null_mut(), 0) != 0 {\n+        let err = io::Error::last_os_error();\n+        panic!(\"raise_fd_limit: error calling sysctl: {}\", err);\n+    }\n+\n+    // Fetch the current resource limits\n+    let mut rlim = rlimit{rlim_cur: 0, rlim_max: 0};\n+    if getrlimit(RLIMIT_NOFILE, &mut rlim) != 0 {\n+        let err = io::Error::last_os_error();\n+        panic!(\"raise_fd_limit: error calling getrlimit: {}\", err);\n+    }\n+\n+    // Bump the soft limit to the smaller of kern.maxfilesperproc and the hard\n+    // limit\n+    rlim.rlim_cur = ::cmp::min(maxfiles as rlim_t, rlim.rlim_max);\n+\n+    // Set our newly-increased resource limit\n+    if setrlimit(RLIMIT_NOFILE, &rlim) != 0 {\n+        let err = io::Error::last_os_error();\n+        panic!(\"raise_fd_limit: error calling setrlimit: {}\", err);\n+    }\n+}\n+\n+#[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n+pub fn raise_fd_limit() {}"}, {"sha": "55f158675321bf920c853755d5faa22d739a6cf5", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=84a89ed3effb37c86ca686adbb447275f3562a09", "patch": "@@ -29,7 +29,6 @@ use std::net::TcpStream;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Output, ExitStatus};\n use std::str;\n-use std::time::Duration;\n use test::MetricMap;\n \n pub fn run(config: Config, testfile: &Path) {\n@@ -452,11 +451,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                 .expect(&format!(\"failed to exec `{:?}`\", config.adb_path));\n             loop {\n                 //waiting 1 second for gdbserver start\n-                #[allow(deprecated)]\n-                fn sleep() {\n-                    ::std::old_io::timer::sleep(Duration::milliseconds(1000));\n-                }\n-                sleep();\n+                ::std::thread::sleep_ms(1000);\n                 if TcpStream::connect(\"127.0.0.1:5039\").is_ok() {\n                     break\n                 }"}]}