{"sha": "b541d3da5d9f89407c7072f4a6d65872cf30a577", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NDFkM2RhNWQ5Zjg5NDA3YzcwNzJmNGE2ZDY1ODcyY2YzMGE1Nzc=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-05-31T20:20:50Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-06-04T19:39:12Z"}, "message": "Add `-Z span-debug` to allow for easier debugging of proc macros\n\nCurrently, the `Debug` impl for `proc_macro::Span` just prints out\nthe byte range. This can make debugging proc macros (either as a crate\nauthor or as a compiler developer) very frustrating, since neither the\nactual filename nor the `SyntaxContext` is displayed.\n\nThis commit adds a perma-unstable flag `-Z span-debug`. When enabled,\nthe `Debug` impl for `proc_macro::Span` simply forwards directly to\n`rustc_span::Span`. Once #72618 is merged, this will start displaying\nactual line numbers.\n\nWhile `Debug` impls are not subject to Rust's normal stability\nguarnatees, we probably shouldn't expose any additional information on\nstable until `#![feature(proc_macro_span)]` is stabilized. Otherwise,\nwe would be providing a 'backdoor' way to access information that's\nsupposed be behind unstable APIs.", "tree": {"sha": "090f52a1196afb99016986ef147be1b483b266bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/090f52a1196afb99016986ef147be1b483b266bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b541d3da5d9f89407c7072f4a6d65872cf30a577", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl7ZTeEACgkQtAh+UQ6Y\nsWQZfQ/9ErzITCyI5PodnIAZ1wsmJO56vGkfuPg7UEpcxeqsy4z2VCDK5JFTlw6Q\nQ8UPEq22pU5/I/aCEsPXF/VXxjziqAmRUP2pmRmGha29euQchJ7HQ/9/AMvRSzcH\nX9dIfs/xf304s/Bqdm7sDupCPZmo0HImjyPoJ3ePh6O5iJs4da02yTDzIOBGLt+f\nRYSPClJrFfSdiGJQ2J7zZ5cdqY4fWNDquE+uZxL1ZCQH0Og4VE0HqaxPVHMZDiyJ\nBP+qWRlV2PxZUmSRllsOTb6X6ChJR1kAdro+P7lIEZpMaGgMsYbwOSSGdBKSlDIn\nU2IZRJwJJVhxL3TgSvsrUbRJh+fGqsPFG/fqPSOI8cGWCldRlyIVo901GJxbyren\nWcpM2Ikj/z5yvRcRRfZB/rWFTeP/XJMLt4VBnXsjACZiRQxkc3GEH4lNvgL2WdSC\nVYTMUJU0zFdx1UyTM8nqwmt4VL3vCCncBjpC7uPLvLkzidGEcFFvGwO8Yod4pnfG\nkXTomTIIKxuZRy0fNGBUE7YfkNxCLvO1Lth05UTTWKQPtkXbqkXMnzVoApabsGgo\nSUyciua8WoUo9/s5e7pifq43C+cSF+68a8KDCWHgbAHilzXzvrFmhHQ3siLR3Oft\nX+SmhnvayYgXOsbakYUAkCkWhi8A8SUTVlIys8JSwe90rs/VU+g=\n=f4yx\n-----END PGP SIGNATURE-----", "payload": "tree 090f52a1196afb99016986ef147be1b483b266bb\nparent 3d5d0f898c2f3998e50c2180c6202f193c3acdbc\nauthor Aaron Hill <aa1ronham@gmail.com> 1590956450 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1591299552 -0400\n\nAdd `-Z span-debug` to allow for easier debugging of proc macros\n\nCurrently, the `Debug` impl for `proc_macro::Span` just prints out\nthe byte range. This can make debugging proc macros (either as a crate\nauthor or as a compiler developer) very frustrating, since neither the\nactual filename nor the `SyntaxContext` is displayed.\n\nThis commit adds a perma-unstable flag `-Z span-debug`. When enabled,\nthe `Debug` impl for `proc_macro::Span` simply forwards directly to\n`rustc_span::Span`. Once #72618 is merged, this will start displaying\nactual line numbers.\n\nWhile `Debug` impls are not subject to Rust's normal stability\nguarnatees, we probably shouldn't expose any additional information on\nstable until `#![feature(proc_macro_span)]` is stabilized. Otherwise,\nwe would be providing a 'backdoor' way to access information that's\nsupposed be behind unstable APIs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b541d3da5d9f89407c7072f4a6d65872cf30a577", "html_url": "https://github.com/rust-lang/rust/commit/b541d3da5d9f89407c7072f4a6d65872cf30a577", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b541d3da5d9f89407c7072f4a6d65872cf30a577/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d5d0f898c2f3998e50c2180c6202f193c3acdbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5d0f898c2f3998e50c2180c6202f193c3acdbc", "html_url": "https://github.com/rust-lang/rust/commit/3d5d0f898c2f3998e50c2180c6202f193c3acdbc"}], "stats": {"total": 221, "additions": 220, "deletions": 1}, "files": [{"sha": "4e41bd4bbfa08c42532c299ff3093698b44e3142", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b541d3da5d9f89407c7072f4a6d65872cf30a577/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b541d3da5d9f89407c7072f4a6d65872cf30a577/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=b541d3da5d9f89407c7072f4a6d65872cf30a577", "patch": "@@ -1789,6 +1789,7 @@ pub struct ExpansionConfig<'feat> {\n     pub trace_mac: bool,\n     pub should_test: bool, // If false, strip `#[test]` nodes\n     pub keep_macs: bool,\n+    pub span_debug: bool, // If true, use verbose debugging for `proc_macro::Span`\n }\n \n impl<'feat> ExpansionConfig<'feat> {\n@@ -1800,6 +1801,7 @@ impl<'feat> ExpansionConfig<'feat> {\n             trace_mac: false,\n             should_test: false,\n             keep_macs: false,\n+            span_debug: false,\n         }\n     }\n "}, {"sha": "79fa091ba180888e17d73986e103e6a2737df634", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b541d3da5d9f89407c7072f4a6d65872cf30a577/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b541d3da5d9f89407c7072f4a6d65872cf30a577/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=b541d3da5d9f89407c7072f4a6d65872cf30a577", "patch": "@@ -352,6 +352,7 @@ pub(crate) struct Rustc<'a> {\n     def_site: Span,\n     call_site: Span,\n     mixed_site: Span,\n+    span_debug: bool,\n }\n \n impl<'a> Rustc<'a> {\n@@ -362,6 +363,7 @@ impl<'a> Rustc<'a> {\n             def_site: cx.with_def_site_ctxt(expn_data.def_site),\n             call_site: cx.with_call_site_ctxt(expn_data.call_site),\n             mixed_site: cx.with_mixed_site_ctxt(expn_data.call_site),\n+            span_debug: cx.ecfg.span_debug,\n         }\n     }\n \n@@ -646,7 +648,11 @@ impl server::Diagnostic for Rustc<'_> {\n \n impl server::Span for Rustc<'_> {\n     fn debug(&mut self, span: Self::Span) -> String {\n-        format!(\"{:?} bytes({}..{})\", span.ctxt(), span.lo().0, span.hi().0)\n+        if self.span_debug {\n+            format!(\"{:?}\", span)\n+        } else {\n+            format!(\"{:?} bytes({}..{})\", span.ctxt(), span.lo().0, span.hi().0)\n+        }\n     }\n     fn def_site(&mut self) -> Self::Span {\n         self.def_site"}, {"sha": "9a60e74d94d01fe9055cb12fb34185c5552da9c5", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b541d3da5d9f89407c7072f4a6d65872cf30a577/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b541d3da5d9f89407c7072f4a6d65872cf30a577/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=b541d3da5d9f89407c7072f4a6d65872cf30a577", "patch": "@@ -291,6 +291,7 @@ fn configure_and_expand_inner<'a>(\n             recursion_limit: sess.recursion_limit(),\n             trace_mac: sess.opts.debugging_opts.trace_macros,\n             should_test: sess.opts.test,\n+            span_debug: sess.opts.debugging_opts.span_debug,\n             ..rustc_expand::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n "}, {"sha": "87647f3b0b017c84dadc9d46803043794f040cdd", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b541d3da5d9f89407c7072f4a6d65872cf30a577/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b541d3da5d9f89407c7072f4a6d65872cf30a577/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=b541d3da5d9f89407c7072f4a6d65872cf30a577", "patch": "@@ -506,6 +506,7 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(save_analysis, true);\n     untracked!(self_profile, SwitchWithOptPath::Enabled(None));\n     untracked!(self_profile_events, Some(vec![String::new()]));\n+    untracked!(span_debug, true);\n     untracked!(span_free_formats, true);\n     untracked!(strip, Strip::None);\n     untracked!(terminal_width, Some(80));"}, {"sha": "d22c6ec9d7d010930110db39125fedcee8fef86c", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b541d3da5d9f89407c7072f4a6d65872cf30a577/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b541d3da5d9f89407c7072f4a6d65872cf30a577/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=b541d3da5d9f89407c7072f4a6d65872cf30a577", "patch": "@@ -996,6 +996,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"make the current crate share its generic instantiations\"),\n     show_span: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"show spans for compiler debugging (expr|pat|ty)\"),\n+    span_debug: bool = (false, parse_bool, [UNTRACKED],\n+        \"forward proc_macro::Span's `Debug` impl to `Span`\"),\n     // o/w tests have closure@path\n     span_free_formats: bool = (false, parse_bool, [UNTRACKED],\n         \"exclude spans when debug-printing compiler state (default: no)\"),"}, {"sha": "fd34eb974c094676105acd0514e22b97693e1931", "filename": "src/test/ui/proc-macro/debug/dump-debug-span-debug.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b541d3da5d9f89407c7072f4a6d65872cf30a577/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug-span-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b541d3da5d9f89407c7072f4a6d65872cf30a577/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug-span-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug-span-debug.rs?ref=b541d3da5d9f89407c7072f4a6d65872cf30a577", "patch": "@@ -0,0 +1,41 @@\n+// run-pass\n+// aux-build:macro-dump-debug.rs\n+// compile-flags: -Z span-debug\n+\n+extern crate macro_dump_debug;\n+use macro_dump_debug::dump_debug;\n+\n+dump_debug! {\n+    ident   // ident\n+    r#ident // raw ident\n+    ,       // alone punct\n+    ==>     // joint punct\n+    ()      // empty group\n+    [_]     // nonempty group\n+\n+    // unsuffixed literals\n+    0\n+    1.0\n+    \"S\"\n+    b\"B\"\n+    r\"R\"\n+    r##\"R\"##\n+    br\"BR\"\n+    br##\"BR\"##\n+    'C'\n+    b'B'\n+\n+    // suffixed literals\n+    0q\n+    1.0q\n+    \"S\"q\n+    b\"B\"q\n+    r\"R\"q\n+    r##\"R\"##q\n+    br\"BR\"q\n+    br##\"BR\"##q\n+    'C'q\n+    b'B'q\n+}\n+\n+fn main() {}"}, {"sha": "163a2c9f44cad0d450363742fed6bdb59ce440b2", "filename": "src/test/ui/proc-macro/debug/dump-debug-span-debug.stderr", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/b541d3da5d9f89407c7072f4a6d65872cf30a577/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug-span-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b541d3da5d9f89407c7072f4a6d65872cf30a577/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug-span-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug-span-debug.stderr?ref=b541d3da5d9f89407c7072f4a6d65872cf30a577", "patch": "@@ -0,0 +1,166 @@\n+TokenStream [Ident { ident: \"ident\", span: $DIR/dump-debug-span-debug.rs:9:5: 9:10 }, Ident { ident: \"r#ident\", span: $DIR/dump-debug-span-debug.rs:10:5: 10:12 }, Punct { ch: ',', spacing: Alone, span: $DIR/dump-debug-span-debug.rs:11:5: 11:6 }, Punct { ch: '=', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:12:5: 12:7 }, Punct { ch: '=', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:12:5: 12:7 }, Punct { ch: '>', spacing: Alone, span: $DIR/dump-debug-span-debug.rs:12:7: 12:8 }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/dump-debug-span-debug.rs:13:5: 13:7 }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: \"_\", span: $DIR/dump-debug-span-debug.rs:14:6: 14:7 }], span: $DIR/dump-debug-span-debug.rs:14:5: 14:8 }, Literal { kind: Integer, symbol: \"0\", suffix: None, span: $DIR/dump-debug-span-debug.rs:17:5: 17:6 }, Literal { kind: Float, symbol: \"1.0\", suffix: None, span: $DIR/dump-debug-span-debug.rs:18:5: 18:8 }, Literal { kind: Str, symbol: \"S\", suffix: None, span: $DIR/dump-debug-span-debug.rs:19:5: 19:8 }, Literal { kind: ByteStr, symbol: \"B\", suffix: None, span: $DIR/dump-debug-span-debug.rs:20:5: 20:9 }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: None, span: $DIR/dump-debug-span-debug.rs:21:5: 21:9 }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: None, span: $DIR/dump-debug-span-debug.rs:22:5: 22:13 }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: None, span: $DIR/dump-debug-span-debug.rs:23:5: 23:11 }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: None, span: $DIR/dump-debug-span-debug.rs:24:5: 24:15 }, Literal { kind: Char, symbol: \"C\", suffix: None, span: $DIR/dump-debug-span-debug.rs:25:5: 25:8 }, Literal { kind: Byte, symbol: \"B\", suffix: None, span: $DIR/dump-debug-span-debug.rs:26:5: 26:9 }, Literal { kind: Integer, symbol: \"0\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:29:5: 29:7 }, Literal { kind: Float, symbol: \"1.0\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:30:5: 30:9 }, Literal { kind: Str, symbol: \"S\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:31:5: 31:9 }, Literal { kind: ByteStr, symbol: \"B\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:32:5: 32:10 }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:33:5: 33:10 }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:34:5: 34:14 }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:35:5: 35:12 }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:36:5: 36:16 }, Literal { kind: Char, symbol: \"C\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:37:5: 37:9 }, Literal { kind: Byte, symbol: \"B\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:38:5: 38:10 }]\n+TokenStream [\n+    Ident {\n+        ident: \"ident\",\n+        span: $DIR/dump-debug-span-debug.rs:9:5: 9:10,\n+    },\n+    Ident {\n+        ident: \"r#ident\",\n+        span: $DIR/dump-debug-span-debug.rs:10:5: 10:12,\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/dump-debug-span-debug.rs:11:5: 11:6,\n+    },\n+    Punct {\n+        ch: '=',\n+        spacing: Joint,\n+        span: $DIR/dump-debug-span-debug.rs:12:5: 12:7,\n+    },\n+    Punct {\n+        ch: '=',\n+        spacing: Joint,\n+        span: $DIR/dump-debug-span-debug.rs:12:5: 12:7,\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/dump-debug-span-debug.rs:12:7: 12:8,\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [],\n+        span: $DIR/dump-debug-span-debug.rs:13:5: 13:7,\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"_\",\n+                span: $DIR/dump-debug-span-debug.rs:14:6: 14:7,\n+            },\n+        ],\n+        span: $DIR/dump-debug-span-debug.rs:14:5: 14:8,\n+    },\n+    Literal {\n+        kind: Integer,\n+        symbol: \"0\",\n+        suffix: None,\n+        span: $DIR/dump-debug-span-debug.rs:17:5: 17:6,\n+    },\n+    Literal {\n+        kind: Float,\n+        symbol: \"1.0\",\n+        suffix: None,\n+        span: $DIR/dump-debug-span-debug.rs:18:5: 18:8,\n+    },\n+    Literal {\n+        kind: Str,\n+        symbol: \"S\",\n+        suffix: None,\n+        span: $DIR/dump-debug-span-debug.rs:19:5: 19:8,\n+    },\n+    Literal {\n+        kind: ByteStr,\n+        symbol: \"B\",\n+        suffix: None,\n+        span: $DIR/dump-debug-span-debug.rs:20:5: 20:9,\n+    },\n+    Literal {\n+        kind: StrRaw(0),\n+        symbol: \"R\",\n+        suffix: None,\n+        span: $DIR/dump-debug-span-debug.rs:21:5: 21:9,\n+    },\n+    Literal {\n+        kind: StrRaw(2),\n+        symbol: \"R\",\n+        suffix: None,\n+        span: $DIR/dump-debug-span-debug.rs:22:5: 22:13,\n+    },\n+    Literal {\n+        kind: ByteStrRaw(0),\n+        symbol: \"BR\",\n+        suffix: None,\n+        span: $DIR/dump-debug-span-debug.rs:23:5: 23:11,\n+    },\n+    Literal {\n+        kind: ByteStrRaw(2),\n+        symbol: \"BR\",\n+        suffix: None,\n+        span: $DIR/dump-debug-span-debug.rs:24:5: 24:15,\n+    },\n+    Literal {\n+        kind: Char,\n+        symbol: \"C\",\n+        suffix: None,\n+        span: $DIR/dump-debug-span-debug.rs:25:5: 25:8,\n+    },\n+    Literal {\n+        kind: Byte,\n+        symbol: \"B\",\n+        suffix: None,\n+        span: $DIR/dump-debug-span-debug.rs:26:5: 26:9,\n+    },\n+    Literal {\n+        kind: Integer,\n+        symbol: \"0\",\n+        suffix: Some(\"q\"),\n+        span: $DIR/dump-debug-span-debug.rs:29:5: 29:7,\n+    },\n+    Literal {\n+        kind: Float,\n+        symbol: \"1.0\",\n+        suffix: Some(\"q\"),\n+        span: $DIR/dump-debug-span-debug.rs:30:5: 30:9,\n+    },\n+    Literal {\n+        kind: Str,\n+        symbol: \"S\",\n+        suffix: Some(\"q\"),\n+        span: $DIR/dump-debug-span-debug.rs:31:5: 31:9,\n+    },\n+    Literal {\n+        kind: ByteStr,\n+        symbol: \"B\",\n+        suffix: Some(\"q\"),\n+        span: $DIR/dump-debug-span-debug.rs:32:5: 32:10,\n+    },\n+    Literal {\n+        kind: StrRaw(0),\n+        symbol: \"R\",\n+        suffix: Some(\"q\"),\n+        span: $DIR/dump-debug-span-debug.rs:33:5: 33:10,\n+    },\n+    Literal {\n+        kind: StrRaw(2),\n+        symbol: \"R\",\n+        suffix: Some(\"q\"),\n+        span: $DIR/dump-debug-span-debug.rs:34:5: 34:14,\n+    },\n+    Literal {\n+        kind: ByteStrRaw(0),\n+        symbol: \"BR\",\n+        suffix: Some(\"q\"),\n+        span: $DIR/dump-debug-span-debug.rs:35:5: 35:12,\n+    },\n+    Literal {\n+        kind: ByteStrRaw(2),\n+        symbol: \"BR\",\n+        suffix: Some(\"q\"),\n+        span: $DIR/dump-debug-span-debug.rs:36:5: 36:16,\n+    },\n+    Literal {\n+        kind: Char,\n+        symbol: \"C\",\n+        suffix: Some(\"q\"),\n+        span: $DIR/dump-debug-span-debug.rs:37:5: 37:9,\n+    },\n+    Literal {\n+        kind: Byte,\n+        symbol: \"B\",\n+        suffix: Some(\"q\"),\n+        span: $DIR/dump-debug-span-debug.rs:38:5: 38:10,\n+    },\n+]"}]}