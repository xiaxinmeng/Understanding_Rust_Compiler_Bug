{"sha": "4967bd0508a4d04797e0fff49517b7abbc086b74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NjdiZDA1MDhhNGQwNDc5N2UwZmZmNDk1MTdiN2FiYmMwODZiNzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-25T20:11:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-25T20:11:11Z"}, "message": "auto merge of #7325 : artagnon/rust/resolve-module, r=cmr\n\nFix #7322.\r\n\r\nI started out with a band-aid approach to special-case the duplicate module error using `is_duplicate_module`, but thought this would be better in the long term.", "tree": {"sha": "836eb9cd378ba3a0521fc62327226ab772425bb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/836eb9cd378ba3a0521fc62327226ab772425bb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4967bd0508a4d04797e0fff49517b7abbc086b74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4967bd0508a4d04797e0fff49517b7abbc086b74", "html_url": "https://github.com/rust-lang/rust/commit/4967bd0508a4d04797e0fff49517b7abbc086b74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4967bd0508a4d04797e0fff49517b7abbc086b74/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "032dcc57e8876e960837c3a050be2c7570e7eafd", "url": "https://api.github.com/repos/rust-lang/rust/commits/032dcc57e8876e960837c3a050be2c7570e7eafd", "html_url": "https://github.com/rust-lang/rust/commit/032dcc57e8876e960837c3a050be2c7570e7eafd"}, {"sha": "f982f42f3c1c45ed1be4c0fd5a90e639e43e3f95", "url": "https://api.github.com/repos/rust-lang/rust/commits/f982f42f3c1c45ed1be4c0fd5a90e639e43e3f95", "html_url": "https://github.com/rust-lang/rust/commit/f982f42f3c1c45ed1be4c0fd5a90e639e43e3f95"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "a566d7d804a2a57ee029ad223cc559c870f08206", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4967bd0508a4d04797e0fff49517b7abbc086b74/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4967bd0508a4d04797e0fff49517b7abbc086b74/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=4967bd0508a4d04797e0fff49517b7abbc086b74", "patch": "@@ -101,6 +101,14 @@ pub enum Namespace {\n     ValueNS\n }\n \n+#[deriving(Eq)]\n+pub enum NamespaceError {\n+    NoError,\n+    ModuleError,\n+    TypeError,\n+    ValueError\n+}\n+\n /// A NamespaceResult represents the result of resolving an import in\n /// a particular namespace. The result is either definitely-resolved,\n /// definitely- unresolved, or unknown.\n@@ -759,10 +767,12 @@ pub fn PrimitiveTypeTable() -> PrimitiveTypeTable {\n }\n \n \n-pub fn namespace_to_str(ns: Namespace) -> ~str {\n+pub fn namespace_error_to_str(ns: NamespaceError) -> &'static str {\n     match ns {\n-        TypeNS  => ~\"type\",\n-        ValueNS => ~\"value\",\n+        NoError     => \"\",\n+        ModuleError => \"module\",\n+        TypeError   => \"type\",\n+        ValueError  => \"value\",\n     }\n }\n \n@@ -993,21 +1003,25 @@ impl Resolver {\n                 // * If no duplicate checking was requested at all, do\n                 //   nothing.\n \n-                let mut is_duplicate = false;\n+                let mut duplicate_type = NoError;\n                 let ns = match duplicate_checking_mode {\n                     ForbidDuplicateModules => {\n-                        is_duplicate = child.get_module_if_available().is_some();\n+                        if (child.get_module_if_available().is_some()) {\n+                            duplicate_type = ModuleError;\n+                        }\n                         Some(TypeNS)\n                     }\n                     ForbidDuplicateTypes => {\n                         match child.def_for_namespace(TypeNS) {\n                             Some(def_mod(_)) | None => {}\n-                            Some(_) => is_duplicate = true\n+                            Some(_) => duplicate_type = TypeError\n                         }\n                         Some(TypeNS)\n                     }\n                     ForbidDuplicateValues => {\n-                        is_duplicate = child.defined_in_namespace(ValueNS);\n+                        if child.defined_in_namespace(ValueNS) {\n+                            duplicate_type = ValueError;\n+                        }\n                         Some(ValueNS)\n                     }\n                     ForbidDuplicateTypesAndValues => {\n@@ -1016,31 +1030,31 @@ impl Resolver {\n                             Some(def_mod(_)) | None => {}\n                             Some(_) => {\n                                 n = Some(TypeNS);\n-                                is_duplicate = true;\n+                                duplicate_type = TypeError;\n                             }\n                         };\n                         if child.defined_in_namespace(ValueNS) {\n-                            is_duplicate = true;\n+                            duplicate_type = ValueError;\n                             n = Some(ValueNS);\n                         }\n                         n\n                     }\n                     OverwriteDuplicates => None\n                 };\n-                if is_duplicate {\n+                if (duplicate_type != NoError) {\n                     // Return an error here by looking up the namespace that\n                     // had the duplicate.\n                     let ns = ns.unwrap();\n                     self.session.span_err(sp,\n                         fmt!(\"duplicate definition of %s `%s`\",\n-                             namespace_to_str(ns),\n+                             namespace_error_to_str(duplicate_type),\n                              self.session.str_of(name)));\n                     {\n                         let r = child.span_for_namespace(ns);\n                         for r.iter().advance |sp| {\n                             self.session.span_note(*sp,\n-                                 fmt!(\"first definition of %s %s here:\",\n-                                      namespace_to_str(ns),\n+                                 fmt!(\"first definition of %s `%s` here\",\n+                                      namespace_error_to_str(duplicate_type),\n                                       self.session.str_of(name)));\n                         }\n                     }"}, {"sha": "5502b18f094130910049e6f28d78ae2ce6f3f88e", "filename": "src/test/compile-fail/issue-3099-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4967bd0508a4d04797e0fff49517b7abbc086b74/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4967bd0508a4d04797e0fff49517b7abbc086b74/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs?ref=4967bd0508a4d04797e0fff49517b7abbc086b74", "patch": "@@ -10,6 +10,6 @@\n \n pub mod a {}\n \n-pub mod a {} //~ ERROR duplicate definition of type `a`\n+pub mod a {} //~ ERROR duplicate definition of module `a`\n \n fn main() {}"}]}