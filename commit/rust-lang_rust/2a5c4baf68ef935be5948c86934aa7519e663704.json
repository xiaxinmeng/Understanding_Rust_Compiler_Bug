{"sha": "2a5c4baf68ef935be5948c86934aa7519e663704", "node_id": "C_kwDOAAsO6NoAKDJhNWM0YmFmNjhlZjkzNWJlNTk0OGM4NjkzNGFhNzUxOWU2NjM3MDQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-17T05:43:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-17T05:43:55Z"}, "message": "Rollup merge of #110145 - WaffleLapkin:share_slice_of_bytes, r=Nilstrieb\n\nShare slice of bytes\n\nr? `@Nilstrieb`\ncc `@noamtashma`", "tree": {"sha": "81deb1ae7bfcef9d7bf79bb5c0ba419b45a81687", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81deb1ae7bfcef9d7bf79bb5c0ba419b45a81687"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a5c4baf68ef935be5948c86934aa7519e663704", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkZGmbCRBK7hj4Ov3rIwAAM+EIAFCMtHnx+ti5TtAT1/g8RtEE\n1PhROEjNAk0TUWfBq7jxyMfaNCcR8Nw5MNdkNOTTeusI+DUoM71uHIfHGGorHsbr\nH5/AtHcgi1bONDoAhm1PweJDiuz8yQ3eCBkAj++iQ4VNWyoPfM4VAQdypH0f2Gps\nNQmSZrgCxAdojU+kEKT1C1oYDDoU0/z2x+2IMre1U9hUW/BN/RCo6Tc8Yz10R2PJ\nVcQQiM3gpaVKCAdOG/cW84wL/3FFqWe6xQA457VldYeUBCGUSiVfFMKj2QbLPq0z\ncSBNANcq4YzUdPD+Ct/N5V20aNaNgEP8nbcukUrc9HMSi3FO9jd6sOphenAyxfg=\n=5mT9\n-----END PGP SIGNATURE-----\n", "payload": "tree 81deb1ae7bfcef9d7bf79bb5c0ba419b45a81687\nparent c0784db3deddfb09f52c65373ef50b14d82494cc\nparent a6197a5dcad33acd67a8455196b8dbaab525e3f9\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1684302235 +0530\ncommitter GitHub <noreply@github.com> 1684302235 +0530\n\nRollup merge of #110145 - WaffleLapkin:share_slice_of_bytes, r=Nilstrieb\n\nShare slice of bytes\n\nr? `@Nilstrieb`\ncc `@noamtashma`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a5c4baf68ef935be5948c86934aa7519e663704", "html_url": "https://github.com/rust-lang/rust/commit/2a5c4baf68ef935be5948c86934aa7519e663704", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a5c4baf68ef935be5948c86934aa7519e663704/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0784db3deddfb09f52c65373ef50b14d82494cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0784db3deddfb09f52c65373ef50b14d82494cc", "html_url": "https://github.com/rust-lang/rust/commit/c0784db3deddfb09f52c65373ef50b14d82494cc"}, {"sha": "a6197a5dcad33acd67a8455196b8dbaab525e3f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6197a5dcad33acd67a8455196b8dbaab525e3f9", "html_url": "https://github.com/rust-lang/rust/commit/a6197a5dcad33acd67a8455196b8dbaab525e3f9"}], "stats": {"total": 101, "additions": 64, "deletions": 37}, "files": [{"sha": "8bf84772f0869024be1f34732579633e97d105ac", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=2a5c4baf68ef935be5948c86934aa7519e663704", "patch": "@@ -14,8 +14,7 @@ use snap::write::FrameEncoder;\n \n use object::elf::NT_GNU_PROPERTY_TYPE_0;\n use rustc_data_structures::memmap::Mmap;\n-use rustc_data_structures::owned_slice::try_slice_owned;\n-use rustc_data_structures::sync::MetadataRef;\n+use rustc_data_structures::owned_slice::{try_slice_owned, OwnedSlice};\n use rustc_metadata::fs::METADATA_FILENAME;\n use rustc_metadata::EncodedMetadata;\n use rustc_session::cstore::MetadataLoader;\n@@ -39,7 +38,7 @@ pub struct DefaultMetadataLoader;\n fn load_metadata_with(\n     path: &Path,\n     f: impl for<'a> FnOnce(&'a [u8]) -> Result<&'a [u8], String>,\n-) -> Result<MetadataRef, String> {\n+) -> Result<OwnedSlice, String> {\n     let file =\n         File::open(path).map_err(|e| format!(\"failed to open file '{}': {}\", path.display(), e))?;\n \n@@ -49,7 +48,7 @@ fn load_metadata_with(\n }\n \n impl MetadataLoader for DefaultMetadataLoader {\n-    fn get_rlib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n+    fn get_rlib_metadata(&self, _target: &Target, path: &Path) -> Result<OwnedSlice, String> {\n         load_metadata_with(path, |data| {\n             let archive = object::read::archive::ArchiveFile::parse(&*data)\n                 .map_err(|e| format!(\"failed to parse rlib '{}': {}\", path.display(), e))?;\n@@ -69,7 +68,7 @@ impl MetadataLoader for DefaultMetadataLoader {\n         })\n     }\n \n-    fn get_dylib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n+    fn get_dylib_metadata(&self, _target: &Target, path: &Path) -> Result<OwnedSlice, String> {\n         load_metadata_with(path, |data| search_for_section(path, data, \".rustc\"))\n     }\n }"}, {"sha": "d83bfc74082f6c9764db6c435e93fd24263d16bf", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=2a5c4baf68ef935be5948c86934aa7519e663704", "patch": "@@ -1,10 +1,13 @@\n+use std::any::Any;\n+\n use super::write::WriteBackendMethods;\n use super::CodegenObject;\n use crate::back::write::TargetMachineFactoryFn;\n use crate::{CodegenResults, ModuleCodegen};\n \n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sync::{DynSend, DynSync};\n use rustc_errors::ErrorGuaranteed;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n@@ -20,11 +23,6 @@ use rustc_span::symbol::Symbol;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::spec::Target;\n \n-pub use rustc_data_structures::sync::MetadataRef;\n-\n-use rustc_data_structures::sync::{DynSend, DynSync};\n-use std::any::Any;\n-\n pub trait BackendTypes {\n     type Value: CodegenObject;\n     type Function: CodegenObject;"}, {"sha": "cbb3047d88412c6b682175ea6f13449faf40022c", "filename": "compiler/rustc_data_structures/src/owned_slice.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs?ref=2a5c4baf68ef935be5948c86934aa7519e663704", "patch": "@@ -1,13 +1,14 @@\n use std::{borrow::Borrow, ops::Deref};\n \n+use crate::sync::Lrc;\n // Use our fake Send/Sync traits when on not parallel compiler,\n // so that `OwnedSlice` only implements/requires Send/Sync\n // for parallel compiler builds.\n use crate::sync::{Send, Sync};\n \n /// An owned slice.\n ///\n-/// This is similar to `Box<[u8]>` but allows slicing and using anything as the\n+/// This is similar to `Lrc<[u8]>` but allows slicing and using anything as the\n /// backing buffer.\n ///\n /// See [`slice_owned`] for `OwnedSlice` construction and examples.\n@@ -16,6 +17,7 @@ use crate::sync::{Send, Sync};\n ///\n /// This is essentially a replacement for `owning_ref` which is a lot simpler\n /// and even sound! \ud83c\udf38\n+#[derive(Clone)]\n pub struct OwnedSlice {\n     /// This is conceptually a `&'self.owner [u8]`.\n     bytes: *const [u8],\n@@ -31,7 +33,7 @@ pub struct OwnedSlice {\n     //       \\/\n     //      \u2282(\u00b4\uff65\u25e1\uff65\u2282 )\u2218\u02da\u02f3\u00b0 (I am the phantom remnant of #97770)\n     #[expect(dead_code)]\n-    owner: Box<dyn Send + Sync>,\n+    owner: Lrc<dyn Send + Sync>,\n }\n \n /// Makes an [`OwnedSlice`] out of an `owner` and a `slicer` function.\n@@ -72,23 +74,50 @@ where\n     O: Send + Sync + 'static,\n     F: FnOnce(&O) -> Result<&[u8], E>,\n {\n-    // We box the owner of the bytes, so it doesn't move.\n+    // We wrap the owner of the bytes in, so it doesn't move.\n     //\n     // Since the owner does not move and we don't access it in any way\n-    // before drop, there is nothing that can invalidate the bytes pointer.\n+    // before dropping, there is nothing that can invalidate the bytes pointer.\n     //\n     // Thus, \"extending\" the lifetime of the reference returned from `F` is fine.\n     // We pretend that we pass it a reference that lives as long as the returned slice.\n     //\n     // N.B. the HRTB on the `slicer` is important \u2014 without it the caller could provide\n     // a short lived slice, unrelated to the owner.\n \n-    let owner = Box::new(owner);\n+    let owner = Lrc::new(owner);\n     let bytes = slicer(&*owner)?;\n \n     Ok(OwnedSlice { bytes, owner })\n }\n \n+impl OwnedSlice {\n+    /// Slice this slice by `slicer`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// # use rustc_data_structures::owned_slice::{OwnedSlice, slice_owned};\n+    /// let vec = vec![1, 2, 3, 4];\n+    ///\n+    /// // Identical to slicing via `&v[1..3]` but produces an owned slice\n+    /// let slice: OwnedSlice = slice_owned(vec, |v| &v[..]);\n+    /// assert_eq!(&*slice, [1, 2, 3, 4]);\n+    ///\n+    /// let slice = slice.slice(|slice| &slice[1..][..2]);\n+    /// assert_eq!(&*slice, [2, 3]);\n+    /// ```\n+    ///\n+    pub fn slice(self, slicer: impl FnOnce(&[u8]) -> &[u8]) -> OwnedSlice {\n+        // This is basically identical to `try_slice_owned`,\n+        // `slicer` can only return slices of its argument or some static data,\n+        // both of which are valid while `owner` is alive.\n+\n+        let bytes = slicer(&self);\n+        OwnedSlice { bytes, ..self }\n+    }\n+}\n+\n impl Deref for OwnedSlice {\n     type Target = [u8];\n \n@@ -108,11 +137,11 @@ impl Borrow<[u8]> for OwnedSlice {\n     }\n }\n \n-// Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Box<dyn Send + Sync>)`, which is `Send`\n+// Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Arc<dyn Send + Sync>)`, which is `Send`\n #[cfg(parallel_compiler)]\n unsafe impl Send for OwnedSlice {}\n \n-// Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Box<dyn Send + Sync>)`, which is `Sync`\n+// Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Arc<dyn Send + Sync>)`, which is `Sync`\n #[cfg(parallel_compiler)]\n unsafe impl Sync for OwnedSlice {}\n "}, {"sha": "1eb5378cd1ad8058d24557c196f999a3a053b7df", "filename": "compiler/rustc_data_structures/src/owned_slice/tests.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs?ref=2a5c4baf68ef935be5948c86934aa7519e663704", "patch": "@@ -26,7 +26,7 @@ fn static_storage() {\n }\n \n #[test]\n-fn slice_the_slice() {\n+fn slice_owned_the_slice() {\n     let slice = slice_owned(vec![1, 2, 3, 4, 5, 6], Vec::as_slice);\n     let slice = slice_owned(slice, |s| &s[1..][..4]);\n     let slice = slice_owned(slice, |s| s);\n@@ -35,6 +35,16 @@ fn slice_the_slice() {\n     assert_eq!(&*slice, &[1, 2, 3, 4, 5, 6][1..][..4][1..]);\n }\n \n+#[test]\n+fn slice_the_slice() {\n+    let slice = slice_owned(vec![1, 2, 3, 4, 5, 6], Vec::as_slice)\n+        .slice(|s| &s[1..][..4])\n+        .slice(|s| s)\n+        .slice(|s| &s[1..]);\n+\n+    assert_eq!(&*slice, &[1, 2, 3, 4, 5, 6][1..][..4][1..]);\n+}\n+\n #[test]\n fn try_and_fail() {\n     let res = try_slice_owned(vec![0], |v| v.get(12..).ok_or(()));"}, {"sha": "6c3197d8ec2c5dd70327493f145d18b0da1b502a", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=2a5c4baf68ef935be5948c86934aa7519e663704", "patch": "@@ -40,7 +40,6 @@\n //! [^2] `MTLockRef` is a typedef.\n \n pub use crate::marker::*;\n-use crate::owned_slice::OwnedSlice;\n use std::collections::HashMap;\n use std::hash::{BuildHasher, Hash};\n use std::ops::{Deref, DerefMut};\n@@ -92,6 +91,7 @@ mod mode {\n }\n \n pub use mode::{is_dyn_thread_safe, set_dyn_thread_safe_mode};\n+\n cfg_if! {\n     if #[cfg(not(parallel_compiler))] {\n         pub unsafe auto trait Send {}\n@@ -244,8 +244,6 @@ cfg_if! {\n             r\n         }\n \n-        pub type MetadataRef = OwnedSlice;\n-\n         pub use std::rc::Rc as Lrc;\n         pub use std::rc::Weak as Weak;\n         pub use std::cell::Ref as ReadGuard;\n@@ -517,8 +515,6 @@ cfg_if! {\n             }\n         }\n \n-        pub type MetadataRef = OwnedSlice;\n-\n         /// This makes locks panic if they are already held.\n         /// It is only useful when you are running in a single thread\n         const ERROR_CHECKING: bool = false;"}, {"sha": "6c4d121fd0145d52bff6d87c1eb949e15c1b6407", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=2a5c4baf68ef935be5948c86934aa7519e663704", "patch": "@@ -220,7 +220,6 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::owned_slice::slice_owned;\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::MetadataRef;\n use rustc_errors::{DiagnosticArgValue, FatalError, IntoDiagnosticArg};\n use rustc_fs_util::try_canonicalize;\n use rustc_session::config::{self, CrateType};\n@@ -782,7 +781,7 @@ fn get_metadata_section<'p>(\n     if !filename.exists() {\n         return Err(MetadataError::NotPresent(filename));\n     }\n-    let raw_bytes: MetadataRef = match flavor {\n+    let raw_bytes = match flavor {\n         CrateFlavor::Rlib => {\n             loader.get_rlib_metadata(target, filename).map_err(MetadataError::LoadFailure)?\n         }\n@@ -843,7 +842,7 @@ fn get_metadata_section<'p>(\n             slice_owned(mmap, Deref::deref)\n         }\n     };\n-    let blob = MetadataBlob::new(raw_bytes);\n+    let blob = MetadataBlob(raw_bytes);\n     if blob.is_compatible() {\n         Ok(blob)\n     } else {"}, {"sha": "699e1f49ed6ca8cdf8d11e422a60003273eb41f5", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=2a5c4baf68ef935be5948c86934aa7519e663704", "patch": "@@ -7,6 +7,7 @@ use crate::rmeta::*;\n use rustc_ast as ast;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::owned_slice::OwnedSlice;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{AppendOnlyVec, Lock, Lrc, OnceCell};\n use rustc_data_structures::unhash::UnhashMap;\n@@ -50,7 +51,7 @@ mod cstore_impl;\n /// A `MetadataBlob` internally is just a reference counted pointer to\n /// the actual data, so cloning it is cheap.\n #[derive(Clone)]\n-pub(crate) struct MetadataBlob(Lrc<MetadataRef>);\n+pub(crate) struct MetadataBlob(pub(crate) OwnedSlice);\n \n impl std::ops::Deref for MetadataBlob {\n     type Target = [u8];\n@@ -660,10 +661,6 @@ impl<'a, 'tcx, I: Idx, T> Decodable<DecodeContext<'a, 'tcx>> for LazyTable<I, T>\n implement_ty_decoder!(DecodeContext<'a, 'tcx>);\n \n impl MetadataBlob {\n-    pub(crate) fn new(metadata_ref: MetadataRef) -> MetadataBlob {\n-        MetadataBlob(Lrc::new(metadata_ref))\n-    }\n-\n     pub(crate) fn is_compatible(&self) -> bool {\n         self.blob().starts_with(METADATA_HEADER)\n     }"}, {"sha": "4f280bb9d80e221114bdac6bb8803fa355f31d9e", "filename": "compiler/rustc_metadata/src/rmeta/def_path_hash_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs?ref=2a5c4baf68ef935be5948c86934aa7519e663704", "patch": "@@ -1,6 +1,5 @@\n use crate::rmeta::DecodeContext;\n use crate::rmeta::EncodeContext;\n-use rustc_data_structures::owned_slice::slice_owned;\n use rustc_data_structures::owned_slice::OwnedSlice;\n use rustc_hir::def_path_hash_map::{Config as HashMapConfig, DefPathHashMap};\n use rustc_middle::parameterized_over_tcx;\n@@ -47,7 +46,7 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefPathHashMapRef<'static>\n     fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefPathHashMapRef<'static> {\n         let len = d.read_usize();\n         let pos = d.position();\n-        let o = slice_owned(d.blob().clone(), |blob| &blob[pos..pos + len]);\n+        let o = d.blob().clone().0.slice(|blob| &blob[pos..pos + len]);\n \n         // Although we already have the data we need via the `OwnedSlice`, we still need\n         // to advance the `DecodeContext`'s position so it's in a valid state after"}, {"sha": "987a484049f6c25f5a53d3b9a9fec84499097d56", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=2a5c4baf68ef935be5948c86934aa7519e663704", "patch": "@@ -7,7 +7,6 @@ use table::TableBuilder;\n use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::MetadataRef;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, DocLinkResMap};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, DefPathHash, StableCrateId};"}, {"sha": "dc475e8c6d57c9cab7f7e83280a706127e30f490", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5c4baf68ef935be5948c86934aa7519e663704/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=2a5c4baf68ef935be5948c86934aa7519e663704", "patch": "@@ -6,7 +6,8 @@ use crate::search_paths::PathKind;\n use crate::utils::NativeLibKind;\n use crate::Session;\n use rustc_ast as ast;\n-use rustc_data_structures::sync::{self, AppendOnlyIndexVec, MetadataRef, RwLock};\n+use rustc_data_structures::owned_slice::OwnedSlice;\n+use rustc_data_structures::sync::{self, AppendOnlyIndexVec, RwLock};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash, Definitions};\n use rustc_span::hygiene::{ExpnHash, ExpnId};\n@@ -203,8 +204,8 @@ pub enum ExternCrateSource {\n /// metadata in library -- this trait just serves to decouple rustc_metadata from\n /// the archive reader, which depends on LLVM.\n pub trait MetadataLoader: std::fmt::Debug {\n-    fn get_rlib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String>;\n-    fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String>;\n+    fn get_rlib_metadata(&self, target: &Target, filename: &Path) -> Result<OwnedSlice, String>;\n+    fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<OwnedSlice, String>;\n }\n \n pub type MetadataLoaderDyn = dyn MetadataLoader + Send + Sync + sync::DynSend + sync::DynSync;"}]}