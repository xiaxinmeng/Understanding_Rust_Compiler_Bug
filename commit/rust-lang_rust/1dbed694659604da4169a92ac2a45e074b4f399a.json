{"sha": "1dbed694659604da4169a92ac2a45e074b4f399a", "node_id": "C_kwDOAAsO6NoAKDFkYmVkNjk0NjU5NjA0ZGE0MTY5YTkyYWMyYTQ1ZTA3NGI0ZjM5OWE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-06T04:46:04Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-06T21:21:19Z"}, "message": "Optimize `TyKind::eq`.", "tree": {"sha": "f012d0954374547d5627a0b2de5ea7bab11ed8d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f012d0954374547d5627a0b2de5ea7bab11ed8d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dbed694659604da4169a92ac2a45e074b4f399a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dbed694659604da4169a92ac2a45e074b4f399a", "html_url": "https://github.com/rust-lang/rust/commit/1dbed694659604da4169a92ac2a45e074b4f399a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dbed694659604da4169a92ac2a45e074b4f399a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14ea63a7e005f9ca48bc13df6cb4fc5afe32febe", "url": "https://api.github.com/repos/rust-lang/rust/commits/14ea63a7e005f9ca48bc13df6cb4fc5afe32febe", "html_url": "https://github.com/rust-lang/rust/commit/14ea63a7e005f9ca48bc13df6cb4fc5afe32febe"}], "stats": {"total": 86, "additions": 45, "deletions": 41}, "files": [{"sha": "3ede95e84313dde8cdc4e15a01dd8d4693bb6e3a", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 45, "deletions": 41, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/1dbed694659604da4169a92ac2a45e074b4f399a/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbed694659604da4169a92ac2a45e074b4f399a/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=1dbed694659604da4169a92ac2a45e074b4f399a", "patch": "@@ -310,47 +310,51 @@ impl<I: Interner> Clone for TyKind<I> {\n impl<I: Interner> PartialEq for TyKind<I> {\n     #[inline]\n     fn eq(&self, other: &TyKind<I>) -> bool {\n-        tykind_discriminant(self) == tykind_discriminant(other)\n-            && match (self, other) {\n-                (Int(a_i), Int(b_i)) => a_i == b_i,\n-                (Uint(a_u), Uint(b_u)) => a_u == b_u,\n-                (Float(a_f), Float(b_f)) => a_f == b_f,\n-                (Adt(a_d, a_s), Adt(b_d, b_s)) => a_d == b_d && a_s == b_s,\n-                (Foreign(a_d), Foreign(b_d)) => a_d == b_d,\n-                (Array(a_t, a_c), Array(b_t, b_c)) => a_t == b_t && a_c == b_c,\n-                (Slice(a_t), Slice(b_t)) => a_t == b_t,\n-                (RawPtr(a_t), RawPtr(b_t)) => a_t == b_t,\n-                (Ref(a_r, a_t, a_m), Ref(b_r, b_t, b_m)) => a_r == b_r && a_t == b_t && a_m == b_m,\n-                (FnDef(a_d, a_s), FnDef(b_d, b_s)) => a_d == b_d && a_s == b_s,\n-                (FnPtr(a_s), FnPtr(b_s)) => a_s == b_s,\n-                (Dynamic(a_p, a_r, a_repr), Dynamic(b_p, b_r, b_repr)) => {\n-                    a_p == b_p && a_r == b_r && a_repr == b_repr\n-                }\n-                (Closure(a_d, a_s), Closure(b_d, b_s)) => a_d == b_d && a_s == b_s,\n-                (Generator(a_d, a_s, a_m), Generator(b_d, b_s, b_m)) => {\n-                    a_d == b_d && a_s == b_s && a_m == b_m\n-                }\n-                (GeneratorWitness(a_g), GeneratorWitness(b_g)) => a_g == b_g,\n-                (\n-                    &GeneratorWitnessMIR(ref a_d, ref a_s),\n-                    &GeneratorWitnessMIR(ref b_d, ref b_s),\n-                ) => a_d == b_d && a_s == b_s,\n-                (Tuple(a_t), Tuple(b_t)) => a_t == b_t,\n-                (Alias(a_i, a_p), Alias(b_i, b_p)) => a_i == b_i && a_p == b_p,\n-                (Param(a_p), Param(b_p)) => a_p == b_p,\n-                (Bound(a_d, a_b), Bound(b_d, b_b)) => a_d == b_d && a_b == b_b,\n-                (Placeholder(a_p), Placeholder(b_p)) => a_p == b_p,\n-                (Infer(a_t), Infer(b_t)) => a_t == b_t,\n-                (Error(a_e), Error(b_e)) => a_e == b_e,\n-                (Bool, Bool) | (Char, Char) | (Str, Str) | (Never, Never) => true,\n-                _ => {\n-                    debug_assert!(\n-                        false,\n-                        \"This branch must be unreachable, maybe the match is missing an arm? self = self = {self:?}, other = {other:?}\"\n-                    );\n-                    true\n-                }\n+        // You might expect this `match` to be preceded with this:\n+        //\n+        //   tykind_discriminant(self) == tykind_discriminant(other) &&\n+        //\n+        // but the data patterns in practice are such that a comparison\n+        // succeeds 99%+ of the time, and it's faster to omit it.\n+        match (self, other) {\n+            (Int(a_i), Int(b_i)) => a_i == b_i,\n+            (Uint(a_u), Uint(b_u)) => a_u == b_u,\n+            (Float(a_f), Float(b_f)) => a_f == b_f,\n+            (Adt(a_d, a_s), Adt(b_d, b_s)) => a_d == b_d && a_s == b_s,\n+            (Foreign(a_d), Foreign(b_d)) => a_d == b_d,\n+            (Array(a_t, a_c), Array(b_t, b_c)) => a_t == b_t && a_c == b_c,\n+            (Slice(a_t), Slice(b_t)) => a_t == b_t,\n+            (RawPtr(a_t), RawPtr(b_t)) => a_t == b_t,\n+            (Ref(a_r, a_t, a_m), Ref(b_r, b_t, b_m)) => a_r == b_r && a_t == b_t && a_m == b_m,\n+            (FnDef(a_d, a_s), FnDef(b_d, b_s)) => a_d == b_d && a_s == b_s,\n+            (FnPtr(a_s), FnPtr(b_s)) => a_s == b_s,\n+            (Dynamic(a_p, a_r, a_repr), Dynamic(b_p, b_r, b_repr)) => {\n+                a_p == b_p && a_r == b_r && a_repr == b_repr\n             }\n+            (Closure(a_d, a_s), Closure(b_d, b_s)) => a_d == b_d && a_s == b_s,\n+            (Generator(a_d, a_s, a_m), Generator(b_d, b_s, b_m)) => {\n+                a_d == b_d && a_s == b_s && a_m == b_m\n+            }\n+            (GeneratorWitness(a_g), GeneratorWitness(b_g)) => a_g == b_g,\n+            (&GeneratorWitnessMIR(ref a_d, ref a_s), &GeneratorWitnessMIR(ref b_d, ref b_s)) => {\n+                a_d == b_d && a_s == b_s\n+            }\n+            (Tuple(a_t), Tuple(b_t)) => a_t == b_t,\n+            (Alias(a_i, a_p), Alias(b_i, b_p)) => a_i == b_i && a_p == b_p,\n+            (Param(a_p), Param(b_p)) => a_p == b_p,\n+            (Bound(a_d, a_b), Bound(b_d, b_b)) => a_d == b_d && a_b == b_b,\n+            (Placeholder(a_p), Placeholder(b_p)) => a_p == b_p,\n+            (Infer(a_t), Infer(b_t)) => a_t == b_t,\n+            (Error(a_e), Error(b_e)) => a_e == b_e,\n+            (Bool, Bool) | (Char, Char) | (Str, Str) | (Never, Never) => true,\n+            _ => {\n+                debug_assert!(\n+                    tykind_discriminant(self) != tykind_discriminant(other),\n+                    \"This branch must be unreachable, maybe the match is missing an arm? self = self = {self:?}, other = {other:?}\"\n+                );\n+                false\n+            }\n+        }\n     }\n }\n \n@@ -408,7 +412,7 @@ impl<I: Interner> Ord for TyKind<I> {\n                 (Error(a_e), Error(b_e)) => a_e.cmp(b_e),\n                 (Bool, Bool) | (Char, Char) | (Str, Str) | (Never, Never) => Ordering::Equal,\n                 _ => {\n-                    debug_assert!(false, \"This branch must be unreachable, maybe the match is missing an arm? self = self = {self:?}, other = {other:?}\");\n+                    debug_assert!(false, \"This branch must be unreachable, maybe the match is missing an arm? self = {self:?}, other = {other:?}\");\n                     Ordering::Equal\n                 }\n             }"}]}