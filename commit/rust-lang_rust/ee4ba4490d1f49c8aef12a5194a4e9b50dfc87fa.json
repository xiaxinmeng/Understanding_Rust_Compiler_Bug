{"sha": "ee4ba4490d1f49c8aef12a5194a4e9b50dfc87fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNGJhNDQ5MGQxZjQ5YzhhZWYxMmE1MTk0YTRlOWI1MGRmYzg3ZmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-06T22:21:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-06T22:23:03Z"}, "message": "Issue #3402: Load immediate rvalues right away\n\nShould lead to smaller stack frames, hopefully reducing\nthe perf hits we saw", "tree": {"sha": "e2a152ae8565824181eba9e4c86911cd4d968fe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2a152ae8565824181eba9e4c86911cd4d968fe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee4ba4490d1f49c8aef12a5194a4e9b50dfc87fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee4ba4490d1f49c8aef12a5194a4e9b50dfc87fa", "html_url": "https://github.com/rust-lang/rust/commit/ee4ba4490d1f49c8aef12a5194a4e9b50dfc87fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee4ba4490d1f49c8aef12a5194a4e9b50dfc87fa/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe9f0556d28e99417cef022c7486fe01440906f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9f0556d28e99417cef022c7486fe01440906f0", "html_url": "https://github.com/rust-lang/rust/commit/fe9f0556d28e99417cef022c7486fe01440906f0"}], "stats": {"total": 86, "additions": 73, "deletions": 13}, "files": [{"sha": "d6338eb85650bd53c8ecf8852d5d93fd1cc06231", "filename": "src/rustc/middle/trans/datum.rs", "status": "modified", "additions": 61, "deletions": 13, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ee4ba4490d1f49c8aef12a5194a4e9b50dfc87fa/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee4ba4490d1f49c8aef12a5194a4e9b50dfc87fa/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=ee4ba4490d1f49c8aef12a5194a4e9b50dfc87fa", "patch": "@@ -373,18 +373,39 @@ impl Datum {\n              self.source)\n     }\n \n+    fn to_value_datum(bcx: block) -> Datum {\n+        /*!\n+         *\n+         * Yields a by-ref form of this datum.  This may involve\n+         * creation of a temporary stack slot.  The value returned by\n+         * this function is not separately rooted from this datum, so\n+         * it will not live longer than the current datum. */\n+\n+        match self.mode {\n+            ByValue => self,\n+            ByRef => {\n+                Datum {val: self.to_value_llval(bcx), mode: ByValue,\n+                       ty: self.ty, source: FromRvalue}\n+            }\n+        }\n+    }\n+\n     fn to_value_llval(bcx: block) -> ValueRef {\n         /*!\n          *\n          * Yields the value itself. */\n \n-        match self.mode {\n-            ByValue => self.val,\n-            ByRef => Load(bcx, self.val)\n+        if ty::type_is_nil(self.ty) || ty::type_is_bot(self.ty) {\n+            C_nil()\n+        } else {\n+            match self.mode {\n+                ByValue => self.val,\n+                ByRef => Load(bcx, self.val)\n+            }\n         }\n     }\n \n-    fn to_ref(bcx: block) -> Datum {\n+    fn to_ref_datum(bcx: block) -> Datum {\n         /*!\n          *\n          * Yields a by-ref form of this datum.  This may involve\n@@ -405,25 +426,52 @@ impl Datum {\n         match self.mode {\n             ByRef => self.val,\n             ByValue => {\n-                let slot = alloc_ty(bcx, self.ty);\n-                Store(bcx, self.val, slot);\n-                slot\n+                if ty::type_is_nil(self.ty) || ty::type_is_bot(self.ty) {\n+                    C_null(T_ptr(type_of::type_of(bcx.ccx(), self.ty)))\n+                } else {\n+                    let slot = alloc_ty(bcx, self.ty);\n+                    Store(bcx, self.val, slot);\n+                    slot\n+                }\n             }\n         }\n     }\n \n-    fn to_appropriate_llval(bcx: block) -> ValueRef {\n+    fn appropriate_mode() -> DatumMode {\n         /*!\n          *\n-         * Yields something that is by value if the type is immediate\n-         * and by ref otherwise. */\n+         * Indicates the \"appropriate\" mode for this value,\n+         * which is either by ref or by value, depending\n+         * on whether type is iimmediate or what. */\n \n         if ty::type_is_nil(self.ty) || ty::type_is_bot(self.ty) {\n-            self.to_value_llval(bcx)\n+            ByValue\n         } else if ty::type_is_immediate(self.ty) {\n-            self.to_value_llval(bcx)\n+            ByValue\n         } else {\n-            self.to_ref_llval(bcx)\n+            ByRef\n+        }\n+    }\n+\n+    fn to_appropriate_llval(bcx: block) -> ValueRef {\n+        /*!\n+         *\n+         * Yields an llvalue with the `appropriate_mode()`. */\n+\n+        match self.appropriate_mode() {\n+            ByValue => self.to_value_llval(bcx),\n+            ByRef => self.to_ref_llval(bcx)\n+        }\n+    }\n+\n+    fn to_appropriate_datum(bcx: block) -> Datum {\n+        /*!\n+         *\n+         * Yields a datum with the `appropriate_mode()`. */\n+\n+        match self.appropriate_mode() {\n+            ByValue => self.to_value_datum(bcx),\n+            ByRef => self.to_ref_datum(bcx)\n         }\n     }\n "}, {"sha": "1e9c36b1e7eb482ad94d5dc3d2a0dd69f650f370", "filename": "src/rustc/middle/trans/expr.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee4ba4490d1f49c8aef12a5194a4e9b50dfc87fa/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee4ba4490d1f49c8aef12a5194a4e9b50dfc87fa/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=ee4ba4490d1f49c8aef12a5194a4e9b50dfc87fa", "patch": "@@ -206,6 +206,18 @@ fn trans_to_datum(bcx: block, expr: @ast::expr) -> DatumBlock {\n             } else {\n                 let scratch = scratch_datum(bcx, ty, false);\n                 bcx = trans_rvalue_dps(bcx, expr, SaveIn(scratch.val));\n+\n+                // Note: this is not obviously a good idea.  It causes\n+                // immediate values to be loaded immediately after a\n+                // return from a call or other similar expression,\n+                // which in turn leads to alloca's having shorter\n+                // lifetimes and hence larger stack frames.  However,\n+                // in turn it can lead to more register pressure.\n+                // Still, in practice it seems to increase\n+                // performance, since we have fewer problems with\n+                // morestack churn.\n+                let scratch = scratch.to_appropriate_datum(bcx);\n+\n                 scratch.add_clean(bcx);\n                 return DatumBlock {bcx: bcx, datum: scratch};\n             }"}]}