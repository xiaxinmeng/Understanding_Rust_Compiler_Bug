{"sha": "1821e3d75ca7a0165a0919d32b2244751ef8b2e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MjFlM2Q3NWNhN2EwMTY1YTA5MTlkMzJiMjI0NDc1MWVmOGIyZTQ=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-07-18T22:06:52Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-07-18T22:27:39Z"}, "message": "re-add Layout::for_value_raw\n\nThis was accidentally removed in rust-lang/rust#70362\n56cbf2f22aeb6448acd7eb49e9b2554c80bdbf79", "tree": {"sha": "5432e1cab99d5ca0ad3ceadbe8cbfb8ca69bb67a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5432e1cab99d5ca0ad3ceadbe8cbfb8ca69bb67a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1821e3d75ca7a0165a0919d32b2244751ef8b2e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1821e3d75ca7a0165a0919d32b2244751ef8b2e4", "html_url": "https://github.com/rust-lang/rust/commit/1821e3d75ca7a0165a0919d32b2244751ef8b2e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1821e3d75ca7a0165a0919d32b2244751ef8b2e4/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e", "html_url": "https://github.com/rust-lang/rust/commit/1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "7129f0f24029187bbb93712012dbf5c232f8501f", "filename": "src/libcore/alloc/layout.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1821e3d75ca7a0165a0919d32b2244751ef8b2e4/src%2Flibcore%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1821e3d75ca7a0165a0919d32b2244751ef8b2e4/src%2Flibcore%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc%2Flayout.rs?ref=1821e3d75ca7a0165a0919d32b2244751ef8b2e4", "patch": "@@ -131,7 +131,42 @@ impl Layout {\n     pub fn for_value<T: ?Sized>(t: &T) -> Self {\n         let (size, align) = (mem::size_of_val(t), mem::align_of_val(t));\n         debug_assert!(Layout::from_size_align(size, align).is_ok());\n-        // SAFETY: see rationale in `new` for why this is using an unsafe variant below\n+        // SAFETY: see rationale in `new` for why this is using the unsafe variant\n+        unsafe { Layout::from_size_align_unchecked(size, align) }\n+    }\n+\n+    /// Produces layout describing a record that could be used to\n+    /// allocate backing structure for `T` (which could be a trait\n+    /// or other unsized type like a slice).\n+    ///\n+    /// # Safety\n+    ///\n+    /// This function is only safe to call if the following conditions hold:\n+    ///\n+    /// - If `T` is `Sized`, this function is always safe to call.\n+    /// - If the unsized tail of `T` is:\n+    ///     - a [slice], then the length of the slice tail must be an intialized\n+    ///       integer, and the size of the *entire value*\n+    ///       (dynamic tail length + statically sized prefix) must fit in `isize`.\n+    ///     - a [trait object], then the vtable part of the pointer must point\n+    ///       to a valid vtable for the type `T` acquired by an unsizing coersion,\n+    ///       and the size of the *entire value*\n+    ///       (dynamic tail length + statically sized prefix) must fit in `isize`.\n+    ///     - an (unstable) [extern type], then this function is always safe to\n+    ///       call, but may panic or otherwise return the wrong value, as the\n+    ///       extern type's layout is not known. This is the same behavior as\n+    ///       [`Layout::for_value`] on a reference to an extern type tail.\n+    ///     - otherwise, it is conservatively not allowed to call this function.\n+    ///\n+    /// [slice]: ../../std/primitive.slice.html\n+    /// [trait object]: ../../book/ch17-02-trait-objects.html\n+    /// [extern type]: ../../unstable-book/language-features/extern-types.html\n+    #[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n+    pub unsafe fn for_value_raw<T: ?Sized>(t: *const T) -> Self {\n+        // SAFETY: we pass along the prerequisites of these functions to the caller\n+        let (size, align) = unsafe { (mem::size_of_val_raw(t), mem::align_of_val_raw(t)) };\n+        debug_assert!(Layout::from_size_align(size, align).is_ok());\n+        // SAFETY: see rationale in `new` for why this is using the unsafe variant\n         unsafe { Layout::from_size_align_unchecked(size, align) }\n     }\n "}]}