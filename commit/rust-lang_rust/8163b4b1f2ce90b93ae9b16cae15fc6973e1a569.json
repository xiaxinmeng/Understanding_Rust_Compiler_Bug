{"sha": "8163b4b1f2ce90b93ae9b16cae15fc6973e1a569", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjNiNGIxZjJjZTkwYjkzYWU5YjE2Y2FlMTVmYzY5NzNlMWE1Njk=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-05T14:14:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-05T14:14:40Z"}, "message": "Rollup merge of #39107 - llogiq:branchless_filter_count, r=alexcrichton\n\nbranchless .filter(_).count()\n\nI found that the branchless version is only slower if we have little to no branch misses, which usually isn't the case. I notice speedups between -5% (perfect prediction) and 60% (real world data).", "tree": {"sha": "781c442e33e7e80d70ca173a2a0174beba32ca76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/781c442e33e7e80d70ca173a2a0174beba32ca76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8163b4b1f2ce90b93ae9b16cae15fc6973e1a569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8163b4b1f2ce90b93ae9b16cae15fc6973e1a569", "html_url": "https://github.com/rust-lang/rust/commit/8163b4b1f2ce90b93ae9b16cae15fc6973e1a569", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8163b4b1f2ce90b93ae9b16cae15fc6973e1a569/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f8ce9efb9ff27af430d398ca472049e3595aaa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8ce9efb9ff27af430d398ca472049e3595aaa6", "html_url": "https://github.com/rust-lang/rust/commit/4f8ce9efb9ff27af430d398ca472049e3595aaa6"}, {"sha": "bfabe817de438c63777aa8c01d6998b5158f7fdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfabe817de438c63777aa8c01d6998b5158f7fdb", "html_url": "https://github.com/rust-lang/rust/commit/bfabe817de438c63777aa8c01d6998b5158f7fdb"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "d9b8c5ea589fd57aa74a840b889ae5aad9deb4de", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8163b4b1f2ce90b93ae9b16cae15fc6973e1a569/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8163b4b1f2ce90b93ae9b16cae15fc6973e1a569/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=8163b4b1f2ce90b93ae9b16cae15fc6973e1a569", "patch": "@@ -1086,7 +1086,7 @@ impl<I: Iterator, P> Iterator for Filter<I, P> where P: FnMut(&I::Item) -> bool\n \n     #[inline]\n     fn next(&mut self) -> Option<I::Item> {\n-        for x in self.iter.by_ref() {\n+        for x in &mut self.iter {\n             if (self.predicate)(&x) {\n                 return Some(x);\n             }\n@@ -1099,6 +1099,26 @@ impl<I: Iterator, P> Iterator for Filter<I, P> where P: FnMut(&I::Item) -> bool\n         let (_, upper) = self.iter.size_hint();\n         (0, upper) // can't know a lower bound, due to the predicate\n     }\n+\n+    // this special case allows the compiler to make `.filter(_).count()`\n+    // branchless. Barring perfect branch prediction (which is unattainable in\n+    // the general case), this will be much faster in >90% of cases (containing\n+    // virtually all real workloads) and only a tiny bit slower in the rest.\n+    //\n+    // Having this specialization thus allows us to write `.filter(p).count()`\n+    // where we would otherwise write `.map(|x| p(x) as usize).sum()`, which is\n+    // less readable and also less backwards-compatible to Rust before 1.10.\n+    //\n+    // Using the branchless version will also simplify the LLVM byte code, thus\n+    // leaving more budget for LLVM optimizations.\n+    #[inline]\n+    fn count(mut self) -> usize {\n+        let mut count = 0;\n+        for x in &mut self.iter {\n+            count += (self.predicate)(&x) as usize;\n+        }\n+        count\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "c7833dbd15629431504d6b9935a5334022926bc4", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8163b4b1f2ce90b93ae9b16cae15fc6973e1a569/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8163b4b1f2ce90b93ae9b16cae15fc6973e1a569/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=8163b4b1f2ce90b93ae9b16cae15fc6973e1a569", "patch": "@@ -191,6 +191,12 @@ fn test_iterator_enumerate_count() {\n     assert_eq!(xs.iter().count(), 6);\n }\n \n+#[test]\n+fn test_iterator_filter_count() {\n+    let xs = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n+    assert_eq!(xs.iter().filter(|&&x| x % 2 == 0).count(), 5);\n+}\n+\n #[test]\n fn test_iterator_peekable() {\n     let xs = vec![0, 1, 2, 3, 4, 5];"}]}