{"sha": "2b328ea5ee537078abd72f309934f8e6bf004764", "node_id": "C_kwDOAAsO6NoAKDJiMzI4ZWE1ZWU1MzcwNzhhYmQ3MmYzMDk5MzRmOGU2YmYwMDQ3NjQ", "commit": {"author": {"name": "Sage Mitchell", "email": "dev@mx00s.com", "date": "2022-09-04T15:07:00Z"}, "committer": {"name": "Sage Mitchell", "email": "dev@mx00s.com", "date": "2022-09-04T15:07:53Z"}, "message": "Address feedback from PR #101401", "tree": {"sha": "c1cff7b4168e29f977933d34b23a8a0bc34131b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1cff7b4168e29f977933d34b23a8a0bc34131b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b328ea5ee537078abd72f309934f8e6bf004764", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEs9hX5gDsx8ZkW964PfAIyjJfApcFAmMUv0kACgkQPfAIyjJf\nApe5gRAAwx3H4Ogq9NRZmhEXrYCslF9oz1Xe2uPzugrKBvknro8R5Cg9PQEOG9Nk\nVIDDyoiPYzLWDvlzI44YiN//wL8ujGCxQQlX2o3jhOpW7BoI8UXJfQHT5wHvJam5\n7FFkR+/SdV6W1k+EqN3ByTew41GzxvIY17wMo4LZsX6If42xhm1MI/YDgj0ekUPB\nc8OVkqdZEe/c1DHeKZYlfWjWIYEnN3c8CEwaFPYQeJtJ3TEY2j4vcPGLf6E+/t8p\nkSPdFWe2funChz94X7ylqlpQPF0GsX8YybfqbTj73lB8B1EL1xXrRsuXlxaFScNS\nMGF6cjRyJ7LfBpEXdN+xKYxQigpqMuQYkZVPWiD4JYRvtC1FEPKrASoPO5MhQQQH\nQHmUpLAuBbYLMzx1M6nkJEEkxT0zF1D0XSC01+6i7S3uvQ7WTwMCKFmiz99jHjnX\nx+pmVCuFhcGTOb59svOjCVRv//R2fLKtrX2Y5BwRRhGjrl0uT5Uc5f4uM9iLATrq\nt+bzBVLKAiI60ZHY4lmtrxhm0PxyP4Hti36D+Jp/RDN9M/++GxBrfHFsHBTfDNX9\n5+Uyrc99woK0s5FyuTdANpLU1jhPlSJZGS59sQ0SDnODD3oL3Pj7Ra43DaUP5uFT\nvq08lV1u6EiqnYPrM9T/eAZr0/TKzbILpIflB82PuMhi1N80Mv0=\n=TNJo\n-----END PGP SIGNATURE-----", "payload": "tree c1cff7b4168e29f977933d34b23a8a0bc34131b2\nparent 4a3e169da746783fa7bf7cc61faa077e16989c5b\nauthor Sage Mitchell <dev@mx00s.com> 1662304020 -0700\ncommitter Sage Mitchell <dev@mx00s.com> 1662304073 -0700\n\nAddress feedback from PR #101401\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b328ea5ee537078abd72f309934f8e6bf004764", "html_url": "https://github.com/rust-lang/rust/commit/2b328ea5ee537078abd72f309934f8e6bf004764", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b328ea5ee537078abd72f309934f8e6bf004764/comments", "author": {"login": "mx00s", "id": 59317985, "node_id": "MDQ6VXNlcjU5MzE3OTg1", "avatar_url": "https://avatars.githubusercontent.com/u/59317985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mx00s", "html_url": "https://github.com/mx00s", "followers_url": "https://api.github.com/users/mx00s/followers", "following_url": "https://api.github.com/users/mx00s/following{/other_user}", "gists_url": "https://api.github.com/users/mx00s/gists{/gist_id}", "starred_url": "https://api.github.com/users/mx00s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mx00s/subscriptions", "organizations_url": "https://api.github.com/users/mx00s/orgs", "repos_url": "https://api.github.com/users/mx00s/repos", "events_url": "https://api.github.com/users/mx00s/events{/privacy}", "received_events_url": "https://api.github.com/users/mx00s/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mx00s", "id": 59317985, "node_id": "MDQ6VXNlcjU5MzE3OTg1", "avatar_url": "https://avatars.githubusercontent.com/u/59317985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mx00s", "html_url": "https://github.com/mx00s", "followers_url": "https://api.github.com/users/mx00s/followers", "following_url": "https://api.github.com/users/mx00s/following{/other_user}", "gists_url": "https://api.github.com/users/mx00s/gists{/gist_id}", "starred_url": "https://api.github.com/users/mx00s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mx00s/subscriptions", "organizations_url": "https://api.github.com/users/mx00s/orgs", "repos_url": "https://api.github.com/users/mx00s/repos", "events_url": "https://api.github.com/users/mx00s/events{/privacy}", "received_events_url": "https://api.github.com/users/mx00s/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a3e169da746783fa7bf7cc61faa077e16989c5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a3e169da746783fa7bf7cc61faa077e16989c5b", "html_url": "https://github.com/rust-lang/rust/commit/4a3e169da746783fa7bf7cc61faa077e16989c5b"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "7301da2afec466e59140835acbd166859d0cca78", "filename": "library/core/src/unicode/unicode_data.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2b328ea5ee537078abd72f309934f8e6bf004764/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b328ea5ee537078abd72f309934f8e6bf004764/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs?ref=2b328ea5ee537078abd72f309934f8e6bf004764", "patch": "@@ -18,12 +18,16 @@ const fn bitset_search<\n     let bucket_idx = (needle / 64) as usize;\n     let chunk_map_idx = bucket_idx / CHUNK_SIZE;\n     let chunk_piece = bucket_idx % CHUNK_SIZE;\n+    // FIXME: const-hack: Revert to `slice::get` after `const_slice_index`\n+    // feature stabilizes.\n     let chunk_idx = if chunk_map_idx < chunk_idx_map.len() {\n         chunk_idx_map[chunk_map_idx]\n     } else {\n         return false;\n     };\n     let idx = bitset_chunk_idx[chunk_idx as usize][chunk_piece] as usize;\n+    // FIXME: const-hack: Revert to `slice::get` after `const_slice_index`\n+    // feature stabilizes.\n     let word = if idx < bitset_canonical.len() {\n         bitset_canonical[idx]\n     } else {\n@@ -319,14 +323,14 @@ pub mod grapheme_extend {\n \n #[rustfmt::skip]\n pub mod lowercase {\n-    const BITSET_CHUNKS_MAP: [u8; 123] = [\n+    const BITSET_CHUNKS_MAP: &'static [u8; 123] = &[\n         14, 17, 0, 0, 9, 0, 0, 12, 13, 10, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 4, 1, 0, 15, 0, 8, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0,\n         3, 0, 0, 7,\n     ];\n-    const BITSET_INDEX_CHUNKS: [[u8; 16]; 19] = [\n+    const BITSET_INDEX_CHUNKS: &'static [[u8; 16]; 19] = &[\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 14, 55, 0],\n@@ -347,7 +351,7 @@ pub mod lowercase {\n         [16, 49, 2, 20, 66, 9, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n         [63, 39, 54, 12, 73, 61, 18, 1, 6, 62, 71, 19, 68, 69, 3, 44],\n     ];\n-    const BITSET_CANONICAL: [u64; 55] = [\n+    const BITSET_CANONICAL: &'static [u64; 55] = &[\n         0b0000000000000000000000000000000000000000000000000000000000000000,\n         0b1111111111111111110000000000000000000000000011111111111111111111,\n         0b1010101010101010101010101010101010101010101010101010100000000010,\n@@ -404,7 +408,7 @@ pub mod lowercase {\n         0b1110011111111111111111111111111111111111111111110000000000000000,\n         0b1110101111000000000000000000000000001111111111111111111111111100,\n     ];\n-    const BITSET_MAPPING: [(u8, u8); 20] = [\n+    const BITSET_MAPPING: &'static [(u8, u8); 20] = &[\n         (0, 64), (1, 188), (1, 183), (1, 176), (1, 109), (1, 124), (1, 126), (1, 66), (1, 70),\n         (1, 77), (2, 146), (2, 144), (2, 83), (3, 12), (3, 6), (4, 156), (4, 78), (5, 187),\n         (6, 132), (7, 93),\n@@ -456,14 +460,14 @@ pub mod n {\n \n #[rustfmt::skip]\n pub mod uppercase {\n-    const BITSET_CHUNKS_MAP: [u8; 125] = [\n+    const BITSET_CHUNKS_MAP: &'static [u8; 125] = &[\n         12, 15, 6, 6, 0, 6, 6, 2, 4, 11, 6, 16, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n         6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n         6, 6, 6, 5, 6, 14, 6, 10, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n         6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 13, 6, 6,\n         6, 6, 9, 6, 3,\n     ];\n-    const BITSET_INDEX_CHUNKS: [[u8; 16]; 17] = [\n+    const BITSET_INDEX_CHUNKS: &'static [[u8; 16]; 17] = &[\n         [43, 43, 5, 34, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 5, 1],\n         [43, 43, 5, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n         [43, 43, 39, 43, 43, 43, 43, 43, 17, 17, 62, 17, 42, 29, 24, 23],\n@@ -482,7 +486,7 @@ pub mod uppercase {\n         [57, 19, 2, 18, 10, 47, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n         [57, 37, 17, 27, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n     ];\n-    const BITSET_CANONICAL: [u64; 43] = [\n+    const BITSET_CANONICAL: &'static [u64; 43] = &[\n         0b0000011111111111111111111111111000000000000000000000000000000000,\n         0b0000000000111111111111111111111111111111111111111111111111111111,\n         0b0101010101010101010101010101010101010101010101010101010000000001,\n@@ -527,7 +531,7 @@ pub mod uppercase {\n         0b1111011111111111000000000000000000000000000000000000000000000000,\n         0b1111111100000000111111110000000000111111000000001111111100000000,\n     ];\n-    const BITSET_MAPPING: [(u8, u8); 25] = [\n+    const BITSET_MAPPING: &'static [(u8, u8); 25] = &[\n         (0, 187), (0, 177), (0, 171), (0, 167), (0, 164), (0, 32), (0, 47), (0, 51), (0, 121),\n         (0, 117), (0, 109), (1, 150), (1, 148), (1, 142), (1, 134), (1, 131), (1, 64), (2, 164),\n         (2, 146), (2, 20), (3, 146), (3, 140), (3, 134), (4, 178), (4, 171),"}, {"sha": "3a5b869f72f76d05beb08d12f96c29e2bce4e6b8", "filename": "src/tools/unicode-table-generator/src/range_search.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b328ea5ee537078abd72f309934f8e6bf004764/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b328ea5ee537078abd72f309934f8e6bf004764/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs?ref=2b328ea5ee537078abd72f309934f8e6bf004764", "patch": "@@ -16,12 +16,16 @@ const fn bitset_search<\n     let bucket_idx = (needle / 64) as usize;\n     let chunk_map_idx = bucket_idx / CHUNK_SIZE;\n     let chunk_piece = bucket_idx % CHUNK_SIZE;\n+    // FIXME: const-hack: Revert to `slice::get` after `const_slice_index`\n+    // feature stabilizes.\n     let chunk_idx = if chunk_map_idx < chunk_idx_map.len() {\n         chunk_idx_map[chunk_map_idx]\n     } else {\n         return false;\n     };\n     let idx = bitset_chunk_idx[chunk_idx as usize][chunk_piece] as usize;\n+    // FIXME: const-hack: Revert to `slice::get` after `const_slice_index`\n+    // feature stabilizes.\n     let word = if idx < bitset_canonical.len() {\n         bitset_canonical[idx]\n     } else {"}, {"sha": "890ff986c2be05c6178b0c79fd637c88e17e1b28", "filename": "src/tools/unicode-table-generator/src/raw_emitter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b328ea5ee537078abd72f309934f8e6bf004764/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b328ea5ee537078abd72f309934f8e6bf004764/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs?ref=2b328ea5ee537078abd72f309934f8e6bf004764", "patch": "@@ -76,15 +76,15 @@ impl RawEmitter {\n \n         writeln!(\n             &mut self.file,\n-            \"const BITSET_CANONICAL: [u64; {}] = [{}];\",\n+            \"const BITSET_CANONICAL: &'static [u64; {}] = &[{}];\",\n             canonicalized.canonical_words.len(),\n             fmt_list(canonicalized.canonical_words.iter().map(|v| Bits(*v))),\n         )\n         .unwrap();\n         self.bytes_used += 8 * canonicalized.canonical_words.len();\n         writeln!(\n             &mut self.file,\n-            \"const BITSET_MAPPING: [(u8, u8); {}] = [{}];\",\n+            \"const BITSET_MAPPING: &'static [(u8, u8); {}] = &[{}];\",\n             canonicalized.canonicalized_words.len(),\n             fmt_list(&canonicalized.canonicalized_words),\n         )\n@@ -135,15 +135,15 @@ impl RawEmitter {\n \n         writeln!(\n             &mut self.file,\n-            \"const BITSET_CHUNKS_MAP: [u8; {}] = [{}];\",\n+            \"const BITSET_CHUNKS_MAP: &'static [u8; {}] = &[{}];\",\n             chunk_indices.len(),\n             fmt_list(&chunk_indices),\n         )\n         .unwrap();\n         self.bytes_used += chunk_indices.len();\n         writeln!(\n             &mut self.file,\n-            \"const BITSET_INDEX_CHUNKS: [[u8; {}]; {}] = [{}];\",\n+            \"const BITSET_INDEX_CHUNKS: &'static [[u8; {}]; {}] = &[{}];\",\n             chunk_length,\n             chunks.len(),\n             fmt_list(chunks.iter()),"}]}