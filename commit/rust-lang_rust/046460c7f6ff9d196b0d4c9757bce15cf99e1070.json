{"sha": "046460c7f6ff9d196b0d4c9757bce15cf99e1070", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NjQ2MGM3ZjZmZjlkMTk2YjBkNGM5NzU3YmNlMTVjZjk5ZTEwNzA=", "commit": {"author": {"name": "Simon BD", "email": "simon@server", "date": "2012-10-25T00:21:39Z"}, "committer": {"name": "Simon BD", "email": "simon@server", "date": "2012-10-25T00:21:39Z"}, "message": "Remove some code that MergeState used to prevent double frees", "tree": {"sha": "8cf5cd40726729c1567df6bf238128f34a6484f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cf5cd40726729c1567df6bf238128f34a6484f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/046460c7f6ff9d196b0d4c9757bce15cf99e1070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/046460c7f6ff9d196b0d4c9757bce15cf99e1070", "html_url": "https://github.com/rust-lang/rust/commit/046460c7f6ff9d196b0d4c9757bce15cf99e1070", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/046460c7f6ff9d196b0d4c9757bce15cf99e1070/comments", "author": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "committer": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19a59cb748b6715cd940eb6fa5ae4e1841dcfcf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/19a59cb748b6715cd940eb6fa5ae4e1841dcfcf4", "html_url": "https://github.com/rust-lang/rust/commit/19a59cb748b6715cd940eb6fa5ae4e1841dcfcf4"}], "stats": {"total": 34, "additions": 1, "deletions": 33}, "files": [{"sha": "05d8533a3533e1f9178e93754b4c8ba0d0a0b4dc", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/046460c7f6ff9d196b0d4c9757bce15cf99e1070/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046460c7f6ff9d196b0d4c9757bce15cf99e1070/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=046460c7f6ff9d196b0d4c9757bce15cf99e1070", "patch": "@@ -353,40 +353,15 @@ struct RunState {\n \n struct MergeState<T> {\n     mut min_gallop: uint,\n-    //mut tmp: ~[T],\n-    mut last_hi: bool,\n-    mut last_bsort: bool,\n     mut mergePt: uint,\n     mut tmpPt: uint,\n     mut array: &[mut T],\n     runs: DVec<RunState>,\n-\n-    /*drop {\n-        unsafe {\n-            let size = self.tmp.len();\n-            // Move tmp back into invalid part of array\n-            if self.last_bsort {\n-\n-            } else if self.last_hi && size > 0 {\n-                self.mergePt -= self.tmpPt;\n-                move_vec(self.array, self.mergePt, self.tmp, 0, self.tmpPt);\n-            } else if !self.last_hi && size-self.tmpPt > 0 {\n-                move_vec(self.array, self.mergePt,\n-                        self.tmp, self.tmpPt, size-self.tmpPt);\n-            }\n-            vec::raw::set_len(&mut self.tmp, 0);\n-        }\n-    }*/\n }\n \n fn MergeState<T>() -> MergeState<T> {\n-    //let mut tmp = ~[];\n-    //vec::reserve(&mut tmp, INITIAL_TMP_STORAGE);\n     MergeState {\n         min_gallop: MIN_GALLOP,\n-        //tmp: move tmp,\n-        last_hi: false,\n-        last_bsort: false,\n         mergePt: 0,\n         tmpPt: 0,\n         array: &[mut],\n@@ -402,8 +377,6 @@ impl<T: Copy Ord> MergeState<T> {\n \n         if start == 0 { start += 1; }\n \n-        self.last_bsort = true;\n-\n         while start < size {\n             let pivot = array[start];\n             let mut left = 0;\n@@ -425,7 +398,6 @@ impl<T: Copy Ord> MergeState<T> {\n             array[left] = move pivot;\n             start += 1;\n         }\n-        self.last_bsort = false;\n     }\n \n     fn push_run(&self, run_base: uint, run_len: uint) {\n@@ -481,8 +453,6 @@ impl<T: Copy Ord> MergeState<T> {\n                 base2: uint, len2: uint) {\n         assert len1 != 0 && len2 != 0 && base1+len1 == base2;\n \n-        //vec::reserve(&mut self.tmp, len1);\n-        self.last_hi = false;\n         let tmp = vec::to_mut(vec::slice(array, base1, base1+len1));\n         self.tmpPt = 0;\n         self.mergePt = base1;\n@@ -598,8 +568,6 @@ impl<T: Copy Ord> MergeState<T> {\n                 base2: uint, len2: uint) {\n         assert len1 != 1 && len2 != 0 && base1 + len1 == base2;\n \n-        self.last_hi = true;\n-\n         let tmp = vec::to_mut(vec::slice(array, base2, base2+len2));\n \n         let mut c1 = base1 + len1 - 1;\n@@ -755,7 +723,7 @@ impl<T: Copy Ord> MergeState<T> {\n fn copy_vec<T: Copy>(dest: &[mut T], s1: uint,\n                     from: &[const T], s2: uint, len: uint) {\n     assert s1+len <= dest.len() && s2+len <= from.len();\n-    \n+\n     let slice = vec::slice(from, s2, s2+len);\n     for slice.eachi |i, v| {\n         dest[s1+i] = *v;"}]}