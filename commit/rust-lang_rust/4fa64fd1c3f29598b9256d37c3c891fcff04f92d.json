{"sha": "4fa64fd1c3f29598b9256d37c3c891fcff04f92d", "node_id": "C_kwDOAAsO6NoAKDRmYTY0ZmQxYzNmMjk1OThiOTI1NmQzN2MzYzg5MWZjZmYwNGY5MmQ", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-11-19T22:37:09Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-12-03T22:51:49Z"}, "message": "rustc_codegen_gcc: proper check for may_unwind", "tree": {"sha": "12eff4fb951be10458ba5c0308226916bff30b19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12eff4fb951be10458ba5c0308226916bff30b19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fa64fd1c3f29598b9256d37c3c891fcff04f92d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa64fd1c3f29598b9256d37c3c891fcff04f92d", "html_url": "https://github.com/rust-lang/rust/commit/4fa64fd1c3f29598b9256d37c3c891fcff04f92d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fa64fd1c3f29598b9256d37c3c891fcff04f92d/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7cb08d4e7a1586b801431f451328821c481cbd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7cb08d4e7a1586b801431f451328821c481cbd3", "html_url": "https://github.com/rust-lang/rust/commit/b7cb08d4e7a1586b801431f451328821c481cbd3"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "6a3b94a0d7018311a6979d04cd7aa4dca320a56b", "filename": "src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fa64fd1c3f29598b9256d37c3c891fcff04f92d/src%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa64fd1c3f29598b9256d37c3c891fcff04f92d/src%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fasm.rs?ref=4fa64fd1c3f29598b9256d37c3c891fcff04f92d", "patch": "@@ -118,8 +118,8 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         true\n     }\n \n-    fn codegen_inline_asm(&mut self, template: &[InlineAsmTemplatePiece], rust_operands: &[InlineAsmOperandRef<'tcx, Self>], options: InlineAsmOptions, span: &[Span], _instance: Instance<'_>, dest_catch_funclet: Option<(Self::BasicBlock, Self::BasicBlock, Option<&Self::Funclet>)>) {\n-        if dest_catch_funclet.is_some() {\n+    fn codegen_inline_asm(&mut self, template: &[InlineAsmTemplatePiece], rust_operands: &[InlineAsmOperandRef<'tcx, Self>], options: InlineAsmOptions, span: &[Span], _instance: Instance<'_>, _dest_catch_funclet: Option<(Self::BasicBlock, Self::BasicBlock, Option<&Self::Funclet>)>) {\n+        if options.contains(InlineAsmOptions::MAY_UNWIND) {\n             self.sess()\n                 .struct_span_err(span[0], \"GCC backend does not support unwinding from inline asm\")\n                 .emit();"}]}