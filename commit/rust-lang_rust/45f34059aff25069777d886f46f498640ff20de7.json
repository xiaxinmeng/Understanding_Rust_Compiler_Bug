{"sha": "45f34059aff25069777d886f46f498640ff20de7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZjM0MDU5YWZmMjUwNjk3NzdkODg2ZjQ2ZjQ5ODY0MGZmMjBkZTc=", "commit": {"author": {"name": "Ted Horst", "email": "ted.horst@earthlink.net", "date": "2013-02-18T05:48:06Z"}, "committer": {"name": "Ted Horst", "email": "ted.horst@earthlink.net", "date": "2013-02-19T15:49:23Z"}, "message": "move shootout-mandelbrot to LinearMap, add depth argument", "tree": {"sha": "df544b3affb7ca5fd2d9d53454da20b2083d5f02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df544b3affb7ca5fd2d9d53454da20b2083d5f02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45f34059aff25069777d886f46f498640ff20de7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45f34059aff25069777d886f46f498640ff20de7", "html_url": "https://github.com/rust-lang/rust/commit/45f34059aff25069777d886f46f498640ff20de7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45f34059aff25069777d886f46f498640ff20de7/comments", "author": {"login": "tedhorst", "id": 113629, "node_id": "MDQ6VXNlcjExMzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/113629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tedhorst", "html_url": "https://github.com/tedhorst", "followers_url": "https://api.github.com/users/tedhorst/followers", "following_url": "https://api.github.com/users/tedhorst/following{/other_user}", "gists_url": "https://api.github.com/users/tedhorst/gists{/gist_id}", "starred_url": "https://api.github.com/users/tedhorst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tedhorst/subscriptions", "organizations_url": "https://api.github.com/users/tedhorst/orgs", "repos_url": "https://api.github.com/users/tedhorst/repos", "events_url": "https://api.github.com/users/tedhorst/events{/privacy}", "received_events_url": "https://api.github.com/users/tedhorst/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tedhorst", "id": 113629, "node_id": "MDQ6VXNlcjExMzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/113629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tedhorst", "html_url": "https://github.com/tedhorst", "followers_url": "https://api.github.com/users/tedhorst/followers", "following_url": "https://api.github.com/users/tedhorst/following{/other_user}", "gists_url": "https://api.github.com/users/tedhorst/gists{/gist_id}", "starred_url": "https://api.github.com/users/tedhorst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tedhorst/subscriptions", "organizations_url": "https://api.github.com/users/tedhorst/orgs", "repos_url": "https://api.github.com/users/tedhorst/repos", "events_url": "https://api.github.com/users/tedhorst/events{/privacy}", "received_events_url": "https://api.github.com/users/tedhorst/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acc147769ec8ad6193ee04719dac67d1e66466c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/acc147769ec8ad6193ee04719dac67d1e66466c4", "html_url": "https://github.com/rust-lang/rust/commit/acc147769ec8ad6193ee04719dac67d1e66466c4"}], "stats": {"total": 82, "additions": 43, "deletions": 39}, "files": [{"sha": "ab693992ccae3131e4f0b36fd2ed4c5b8a7dded8", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 43, "deletions": 39, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/45f34059aff25069777d886f46f498640ff20de7/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f34059aff25069777d886f46f498640ff20de7/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=45f34059aff25069777d886f46f498640ff20de7", "patch": "@@ -12,17 +12,20 @@\n //  http://shootout.alioth.debian.org/\n //   u64q/program.php?test=mandelbrot&lang=python3&id=2\n //\n-//  takes 2 optional args:\n+//  takes 3 optional args:\n //   square image size, defaults to 80_u\n //   output path, default is \"\" (no output), \"-\" means stdout\n+//   depth (max iterations per pixel), defaults to 50_u\n //\n-//  in the shootout, they use 16000 as image size\n+//  in the shootout, they use 16000 as image size, 50 as depth,\n+//   and write to stdout:\n+//\n+//  ./shootout_mandelbrot 16000 \"-\" 50 > /tmp/mandel.pbm\n //\n //  writes pbm image to output path\n \n-extern mod std;\n use io::WriterUtil;\n-use std::oldmap::HashMap;\n+use core::hashmap::linear::LinearMap;\n \n struct cmplx {\n     re: f64,\n@@ -54,44 +57,43 @@ pure fn cabs(x: cmplx) -> f64\n     x.re*x.re + x.im*x.im\n }\n \n-fn mb(x: cmplx) -> bool\n+fn mb(x: cmplx, depth: uint) -> bool\n {\n-    let mut z = cmplx {re: 0f64, im: 0f64};\n+    let mut z = x;\n     let mut i = 0;\n-    let mut in = true;\n-    while i < 50 {\n-        z = z*z + x;\n-        if cabs(z) >= 4f64 {\n-            in = false;\n-            break;\n+    while i < depth {\n+        if cabs(z) >= 4_f64 {\n+            return false;\n         }\n+        z = z*z + x;\n         i += 1;\n     }\n-    in\n+    true\n }\n \n-fn fillbyte(x: cmplx, incr: f64) -> u8 {\n+fn fillbyte(x: cmplx, incr: f64, depth: uint) -> u8 {\n     let mut rv = 0_u8;\n     let mut i = 0_u8;\n     while i < 8_u8 {\n         let z = cmplx {re: x.re + (i as f64)*incr, im: x.im};\n-        if mb(z) {\n+        if mb(z, depth) {\n             rv += 1_u8 << (7_u8 - i);\n         }\n         i += 1_u8;\n     }\n     rv\n }\n \n-fn chanmb(i: uint, size: uint) -> Line\n+fn chanmb(i: uint, size: uint, depth: uint) -> Line\n {\n-    let mut crv = ~[];\n-    let incr = 2f64/(size as f64);\n-    let y = incr*(i as f64) - 1f64;\n-    let xincr = 8f64*incr;\n-    for uint::range(0_u, size/8_u) |j| {\n-        let x = cmplx {re: xincr*(j as f64) - 1.5f64, im: y};\n-        crv.push(fillbyte(x, incr));\n+    let bsize = size/8_u;\n+    let mut crv = vec::with_capacity(bsize);\n+    let incr = 2_f64/(size as f64);\n+    let y = incr*(i as f64) - 1_f64;\n+    let xincr = 8_f64*incr;\n+    for uint::range(0_u, bsize) |j| {\n+        let x = cmplx {re: xincr*(j as f64) - 1.5_f64, im: y};\n+        crv.push(fillbyte(x, incr, depth));\n     };\n     Line {i:i, b:crv}\n }\n@@ -121,34 +123,33 @@ fn writer(path: ~str, pport: pipes::Port<Line>, size: uint)\n                 ~[io::Create, io::Truncate]))\n         }\n     };\n-    cout.write_line(~\"P4\");\n+    cout.write_line(\"P4\");\n     cout.write_line(fmt!(\"%u %u\", size, size));\n-    let lines: HashMap<uint, ~[u8]> = HashMap();\n+    let mut lines: LinearMap<uint, Line> = LinearMap::new();\n     let mut done = 0_u;\n     let mut i = 0_u;\n     while i < size {\n         let aline = pport.recv();\n         if aline.i == done {\n-            debug!(\"W %u\", aline.i);\n+            debug!(\"W %u\", done);\n             cout.write(aline.b);\n             done += 1_u;\n             let mut prev = done;\n             while prev <= i {\n-                if lines.contains_key(&prev) {\n-                    debug!(\"WS %u\", prev);\n-                    cout.write(lines.get(&prev));\n-                    done += 1_u;\n-                    lines.remove(&prev);\n-                    prev += 1_u;\n-                }\n-                else {\n-                    break\n-                }\n+                match lines.pop(&prev) {\n+                    Some(pl) => {\n+                        debug!(\"WS %u\", prev);\n+                        cout.write(pl.b);\n+                        done += 1_u;\n+                        prev += 1_u;\n+                    }\n+                    None => break\n+                };\n             };\n         }\n         else {\n             debug!(\"S %u\", aline.i);\n-            lines.insert(aline.i, copy aline.b);    // FIXME: bad for perf\n+            lines.insert(aline.i, aline);\n         };\n         i += 1_u;\n     }\n@@ -157,11 +158,14 @@ fn writer(path: ~str, pport: pipes::Port<Line>, size: uint)\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"4000\"]\n+        ~[~\"\", ~\"4000\", ~\"50\"]\n     } else {\n         args\n     };\n \n+    let depth = if vec::len(args) < 4_u { 50_u }\n+    else { uint::from_str(args[3]).get() };\n+\n     let path = if vec::len(args) < 3_u { ~\"\" }\n     else { copy args[2] };  // FIXME: bad for perf\n \n@@ -172,7 +176,7 @@ fn main() {\n     let pchan = pipes::SharedChan(pchan);\n     for uint::range(0_u, size) |j| {\n         let cchan = pchan.clone();\n-        do task::spawn || { cchan.send(chanmb(j, size)) };\n+        do task::spawn { cchan.send(chanmb(j, size, depth)) };\n     };\n     writer(path, pport, size);\n }"}]}