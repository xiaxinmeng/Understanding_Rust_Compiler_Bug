{"sha": "42ff718d0fbc6f3c9a3386e65a16ab6c4ae89480", "node_id": "C_kwDOAAsO6NoAKDQyZmY3MThkMGZiYzZmM2M5YTMzODZlNjVhMTZhYjZjNGFlODk0ODA", "commit": {"author": {"name": "Georg Semmler", "email": "github@weiznich.de", "date": "2022-11-30T06:46:01Z"}, "committer": {"name": "Georg Semmler", "email": "github@weiznich.de", "date": "2022-11-30T13:50:32Z"}, "message": "Add a regression test for #104322", "tree": {"sha": "e0c0829a31c8570bf60aa084041e5e6356e02329", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0c0829a31c8570bf60aa084041e5e6356e02329"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42ff718d0fbc6f3c9a3386e65a16ab6c4ae89480", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEt/EOFp+yWvA8Dk28qHvO5SBc5IkFAmOHX7AACgkQqHvO5SBc\n5IklcAf+Ma+pnmpy9poWo78Zoel610npxUAzKpTMae5gOHd+EuCO0TYkca6EPGan\nb3Nakt52OWUiJ6pe3rrCDoqcG3rtCPhR+4dAMXwxbBz6fMhkJB0H+oDDnawsv4/O\nG4vsnJiF8Rah1IQTMXUDwCYOfkOC/2Tw2qefI+arMHOCO0P19lKP7zGi16mRAKY3\nPQRjgCh04U/6tZWf+NGgE9n66NyODQ/yMizaPkrCXn+hzVp1l4L7qibf2ddtMMJ/\ni0/o9tEvR7arsNoHc10OVlQZHhvv57JJpCwgEUdz49OnfaEbRKZC2ca3AQAJoT+f\nvmvZdfaNL1pkhk9ckPGwVBORRqYvFQ==\n=/A4q\n-----END PGP SIGNATURE-----", "payload": "tree e0c0829a31c8570bf60aa084041e5e6356e02329\nparent d38a99078cd3c4dadac1ba8b729ea77e8d1d5a82\nauthor Georg Semmler <github@weiznich.de> 1669790761 +0100\ncommitter Georg Semmler <github@weiznich.de> 1669816232 +0100\n\nAdd a regression test for #104322\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42ff718d0fbc6f3c9a3386e65a16ab6c4ae89480", "html_url": "https://github.com/rust-lang/rust/commit/42ff718d0fbc6f3c9a3386e65a16ab6c4ae89480", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42ff718d0fbc6f3c9a3386e65a16ab6c4ae89480/comments", "author": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d38a99078cd3c4dadac1ba8b729ea77e8d1d5a82", "url": "https://api.github.com/repos/rust-lang/rust/commits/d38a99078cd3c4dadac1ba8b729ea77e8d1d5a82", "html_url": "https://github.com/rust-lang/rust/commit/d38a99078cd3c4dadac1ba8b729ea77e8d1d5a82"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "dcc27f1f03ae1531ca171a41582747377638513a", "filename": "src/test/ui/traits/issue-104322.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/42ff718d0fbc6f3c9a3386e65a16ab6c4ae89480/src%2Ftest%2Fui%2Ftraits%2Fissue-104322.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42ff718d0fbc6f3c9a3386e65a16ab6c4ae89480/src%2Ftest%2Fui%2Ftraits%2Fissue-104322.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-104322.rs?ref=42ff718d0fbc6f3c9a3386e65a16ab6c4ae89480", "patch": "@@ -0,0 +1,80 @@\n+// build-pass\n+//\n+// Tests that overflows do not occur in certain situations\n+// related to generic diesel code\n+\n+use mini_diesel::*;\n+\n+pub trait HandleDelete<K> {}\n+\n+pub fn handle_delete<D, R>()\n+where\n+    R: HasTable,\n+    R::Table: HandleDelete<D> + 'static,\n+{\n+}\n+\n+impl<K, T> HandleDelete<K> for T\n+where\n+    T: Table + HasTable<Table = T> + 'static,\n+    K: 'static,\n+    &'static K: Identifiable<Table = T>,\n+    T::PrimaryKey: EqAll<<&'static K as Identifiable>::Id>,\n+    T::Query: FilterDsl<<T::PrimaryKey as EqAll<<&'static K as Identifiable>::Id>>::Output>,\n+    Filter<T::Query, <T::PrimaryKey as EqAll<<&'static K as Identifiable>::Id>>::Output>:\n+        IntoUpdateTarget<Table = T>,\n+{\n+}\n+\n+mod mini_diesel {\n+    pub trait HasTable {\n+        type Table: Table;\n+    }\n+\n+    pub trait Identifiable: HasTable {\n+        type Id;\n+    }\n+\n+    pub trait EqAll<Rhs> {\n+        type Output;\n+    }\n+\n+    pub trait IntoUpdateTarget: HasTable {\n+        type WhereClause;\n+    }\n+\n+    pub trait Query {\n+        type SqlType;\n+    }\n+\n+    pub trait AsQuery {\n+        type Query: Query;\n+    }\n+    impl<T: Query> AsQuery for T {\n+        type Query = Self;\n+    }\n+\n+    pub trait FilterDsl<Predicate> {\n+        type Output;\n+    }\n+\n+    impl<T, Predicate> FilterDsl<Predicate> for T\n+    where\n+        T: Table,\n+        T::Query: FilterDsl<Predicate>,\n+    {\n+        type Output = Filter<T::Query, Predicate>;\n+    }\n+\n+    pub trait QuerySource {\n+        type FromClause;\n+    }\n+\n+    pub trait Table: QuerySource + AsQuery + Sized {\n+        type PrimaryKey;\n+    }\n+\n+    pub type Filter<Source, Predicate> = <Source as FilterDsl<Predicate>>::Output;\n+}\n+\n+fn main() {}"}]}