{"sha": "b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YWE2ZWI2OWZjZTJhMWNkYTJlMTJiNzcwZDUyNDJlYTE0YTNhM2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T02:11:41Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:24Z"}, "message": "librustc: De-`@mut` `CrateContext::non_inlineable_statics`", "tree": {"sha": "7c1c0a06fa37fc45c960ef0edd38f8ad5b61f5c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c1c0a06fa37fc45c960ef0edd38f8ad5b61f5c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d", "html_url": "https://github.com/rust-lang/rust/commit/b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02bdda27763bcb5d3038d6abd7b1c50d2c394a1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/02bdda27763bcb5d3038d6abd7b1c50d2c394a1c", "html_url": "https://github.com/rust-lang/rust/commit/02bdda27763bcb5d3038d6abd7b1c50d2c394a1c"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "2da251815bde025d2e0fdb45387beb616b17c6d4", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d", "patch": "@@ -61,7 +61,7 @@ pub struct EncodeParams<'a> {\n     tcx: ty::ctxt,\n     reexports2: middle::resolve::ExportMap2,\n     item_symbols: &'a RefCell<HashMap<ast::NodeId, ~str>>,\n-    non_inlineable_statics: &'a HashSet<ast::NodeId>,\n+    non_inlineable_statics: &'a RefCell<HashSet<ast::NodeId>>,\n     link_meta: &'a LinkMeta,\n     cstore: @mut cstore::CStore,\n     encode_inlined_item: encode_inlined_item<'a>,\n@@ -90,7 +90,7 @@ pub struct EncodeContext<'a> {\n     stats: @mut Stats,\n     reexports2: middle::resolve::ExportMap2,\n     item_symbols: &'a RefCell<HashMap<ast::NodeId, ~str>>,\n-    non_inlineable_statics: &'a HashSet<ast::NodeId>,\n+    non_inlineable_statics: &'a RefCell<HashSet<ast::NodeId>>,\n     link_meta: &'a LinkMeta,\n     cstore: &'a cstore::CStore,\n     encode_inlined_item: encode_inlined_item<'a>,\n@@ -923,7 +923,14 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_name(ecx, ebml_w, item.ident);\n         let elt = ast_map::path_pretty_name(item.ident, item.id as u64);\n         encode_path(ecx, ebml_w, path, elt);\n-        if !ecx.non_inlineable_statics.contains(&item.id) {\n+\n+        let non_inlineable;\n+        {\n+            let non_inlineable_statics = ecx.non_inlineable_statics.borrow();\n+            non_inlineable = non_inlineable_statics.get().contains(&item.id);\n+        }\n+\n+        if !non_inlineable {\n             (ecx.encode_inlined_item)(ecx, ebml_w, path, ii_item(item));\n         }\n         encode_visibility(ebml_w, vis);"}, {"sha": "7f40aa43d1acf7734c247a501f6a97350f602420", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d", "patch": "@@ -2545,7 +2545,10 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n \n                                 if !inlineable {\n                                     debug!(\"{} not inlined\", sym);\n-                                    ccx.non_inlineable_statics.insert(id);\n+                                    let mut non_inlineable_statics =\n+                                        ccx.non_inlineable_statics\n+                                           .borrow_mut();\n+                                    non_inlineable_statics.get().insert(id);\n                                 }\n \n                                 let mut item_symbols = ccx.item_symbols"}, {"sha": "51b373eb0cc7ccb2ae2cb86c3412fec3a5f12aa8", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d", "patch": "@@ -176,8 +176,9 @@ pub fn get_const_val(cx: @mut CrateContext,\n     }\n \n     let const_values = cx.const_values.borrow();\n+    let non_inlineable_statics = cx.non_inlineable_statics.borrow();\n     (const_values.get().get_copy(&def_id.node),\n-     !cx.non_inlineable_statics.contains(&def_id.node))\n+     !non_inlineable_statics.get().contains(&def_id.node))\n }\n \n pub fn const_expr(cx: @mut CrateContext, e: &ast::Expr) -> (ValueRef, bool) {"}, {"sha": "b70dccb1f8136face9185b37e87265583bead0bc", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=b5aa6eb69fce2a1cda2e12b770d5242ea14a3a3d", "patch": "@@ -64,7 +64,7 @@ pub struct CrateContext {\n      // A set of static items which cannot be inlined into other crates. This\n      // will pevent in ii_item() structures from being encoded into the metadata\n      // that is generated\n-     non_inlineable_statics: HashSet<ast::NodeId>,\n+     non_inlineable_statics: RefCell<HashSet<ast::NodeId>>,\n      // Cache instances of monomorphized functions\n      monomorphized: RefCell<HashMap<mono_id, ValueRef>>,\n      monomorphizing: RefCell<HashMap<ast::DefId, uint>>,\n@@ -192,7 +192,7 @@ impl CrateContext {\n                   finished_tydescs: false,\n                   external: HashMap::new(),\n                   external_srcs: HashMap::new(),\n-                  non_inlineable_statics: HashSet::new(),\n+                  non_inlineable_statics: RefCell::new(HashSet::new()),\n                   monomorphized: RefCell::new(HashMap::new()),\n                   monomorphizing: RefCell::new(HashMap::new()),\n                   vtables: RefCell::new(HashMap::new()),"}]}