{"sha": "3f8a70b613d9e41dc6db11f1d267025bb26bf73d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmOGE3MGI2MTNkOWU0MWRjNmRiMTFmMWQyNjcwMjViYjI2YmY3M2Q=", "commit": {"author": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2015-06-14T06:49:00Z"}, "committer": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2015-06-20T01:02:49Z"}, "message": "Fixed note message to display expression in recommendations", "tree": {"sha": "82b5d79cab6b4ae0b812f6dc1a42da9018d87d1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82b5d79cab6b4ae0b812f6dc1a42da9018d87d1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f8a70b613d9e41dc6db11f1d267025bb26bf73d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f8a70b613d9e41dc6db11f1d267025bb26bf73d", "html_url": "https://github.com/rust-lang/rust/commit/3f8a70b613d9e41dc6db11f1d267025bb26bf73d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f8a70b613d9e41dc6db11f1d267025bb26bf73d/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9adb3dfdcb2cab7a10d7ac7a48170672b3961fe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9adb3dfdcb2cab7a10d7ac7a48170672b3961fe8", "html_url": "https://github.com/rust-lang/rust/commit/9adb3dfdcb2cab7a10d7ac7a48170672b3961fe8"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "276794087176dcdbc1d14995363ce787cca2a434", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3f8a70b613d9e41dc6db11f1d267025bb26bf73d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f8a70b613d9e41dc6db11f1d267025bb26bf73d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=3f8a70b613d9e41dc6db11f1d267025bb26bf73d", "patch": "@@ -59,22 +59,35 @@ pub fn report_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                 None);\n \n             // If the item has the name of a field, give a help note\n-            if let (&ty::TyStruct(did, substs), Some(_)) = (&rcvr_ty.sty, rcvr_expr) {\n+            if let (&ty::TyStruct(did, substs), Some(expr)) = (&rcvr_ty.sty, rcvr_expr) {\n                 let fields = ty::lookup_struct_fields(cx, did);\n \n                 if let Some(field) = fields.iter().find(|f| f.name == item_name) {\n+                    let expr_string = match cx.sess.codemap().span_to_snippet(expr.span) {\n+                        Ok(expr_string) => expr_string,\n+                        _ => \"s\".into() // default to generic placeholder for expression\n+                    };\n \n+                    // TODO Fix when closure note is displayed\n+                    // below commented code from eddyb on irc\n+                    // let substs = subst::Substs::new_trait(vec![fcx.inh.infcx.next_ty_var()], Vec::new(), field_ty);\n+                    // let trait_ref = ty::TraitRef::new(trait_def_id, fcx.tcx().mk_substs(substs));\n+                    // let poly_trait_ref = trait_ref.to_poly_trait_ref();\n+                    // let obligation = traits::Obligation::misc(span, fcx.body_id, poly_trait_ref.as_predicate());\n+                    // let mut selcx = traits::SelectionContext::new(fcx.infcx(), fcx);\n+                    // if selcx.evaluate_obligation(&obligation) { /* suggest */ }\n+                    \n                     match ty::lookup_field_type(cx, did, field.id, substs).sty {\n                         ty::TyClosure(_, _) | ty::TyBareFn(_,_) => {\n                             cx.sess.span_note(span,\n                                 &format!(\"use `({0}.{1})(...)` if you meant to call the \\\n                                           function stored in the `{1}` field\",\n-                                    ty::item_path_str(cx, did), item_name));\n+                                    expr_string, item_name));\n                         },\n                         _ => {\n                             cx.sess.span_note(span,\n                                 &format!(\"did you mean to write `{0}.{1}`?\",\n-                                    ty::item_path_str(cx, did), item_name));\n+                                    expr_string, item_name));\n                         },\n                     };\n                 }"}, {"sha": "802b21d211cb46cced3dae454cf1884f1d40bd4c", "filename": "src/test/compile-fail/issue-18343.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3f8a70b613d9e41dc6db11f1d267025bb26bf73d/src%2Ftest%2Fcompile-fail%2Fissue-18343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f8a70b613d9e41dc6db11f1d267025bb26bf73d/src%2Ftest%2Fcompile-fail%2Fissue-18343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18343.rs?ref=3f8a70b613d9e41dc6db11f1d267025bb26bf73d", "patch": "@@ -13,18 +13,30 @@ struct Obj<F> where F: FnMut() -> u32 {\n     nfn: usize,\n }\n \n+struct S<F> where F: FnMut() -> u32 {\n+    v: Obj<F>,\n+}\n+\n fn func() -> u32 {\n     0\n }\n \n fn main() {\n-    let o = Obj { closure: || 42 };\n+    let o = Obj { closure: || 42, nfn: 42 };\n     o.closure(); //~ ERROR no method named `closure` found\n-    //~^ NOTE use `(s.closure)(...)` if you meant to call the function stored in the `closure` field\n-    let x = o.nfn(); //~ ERROR no method named `closure` found\n-    //~^ NOTE did you mean `o.nfn`?\n+    //~^ NOTE use `(o.closure)(...)` if you meant to call the function stored in the `closure` field\n \n-    let b = Obj { closure: func };\n+    // TODO move these to a new test for #2392\n+    let x = o.nfn(); //~ ERROR no method named `nfn` found\n+    //~^ NOTE did you mean to write `o.nfn`?\n+\n+    let b = Obj { closure: func, nfn: 5 };\n     b.closure(); //~ ERROR no method named `closure` found\n-    //~^ NOTE use `(s.closure)(...)` if you meant to call the function stored in the `closure` field\n+    //~^ NOTE use `(b.closure)(...)` if you meant to call the function stored in the `closure` field\n+\n+    let s = S { v: b };\n+    s.v.closure();//~ ERROR no method named `closure` found\n+    //~^ NOTE use `(s.v.closure)(...)` if you meant to call the function stored in the `closure` field\n+    s.v.nfn();//~ ERROR no method named `nfn` found\n+    //~^ NOTE did you mean to write `s.v.nfn`?\n }"}]}