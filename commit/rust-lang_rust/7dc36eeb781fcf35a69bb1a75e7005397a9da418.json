{"sha": "7dc36eeb781fcf35a69bb1a75e7005397a9da418", "node_id": "C_kwDOAAsO6NoAKDdkYzM2ZWViNzgxZmNmMzVhNjliYjFhNzVlNzAwNTM5N2E5ZGE0MTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-20T15:21:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-20T15:21:03Z"}, "message": "Auto merge of #12831 - fasterthanlime:proc-macro-test-in-tmp-dir, r=fasterthanlime\n\nBuild proc-macro-test-impl out-of-tree\n\nBuilding it in-place fails in rust CI because the source directory is read-only. This changes `proc-macro-test`'s build script to first\ncopy `imp` under `OUT_DIR` (which is read-write).\n\nIt also prints stdout/stderr for the nested cargo invocation, should it fail. (I've seen failures in rust CI that I couldn't explain, and\nwhen they take 25 minutes to reproduce, you want to have that info)\n\nThis change is tracked in:\n\n  * https://github.com/rust-lang/rust-analyzer/issues/12818\n\nMaintainer impact: none.", "tree": {"sha": "4567dcef4a2e32f7dce9fc781d4b3e20b6142c3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4567dcef4a2e32f7dce9fc781d4b3e20b6142c3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dc36eeb781fcf35a69bb1a75e7005397a9da418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc36eeb781fcf35a69bb1a75e7005397a9da418", "html_url": "https://github.com/rust-lang/rust/commit/7dc36eeb781fcf35a69bb1a75e7005397a9da418", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dc36eeb781fcf35a69bb1a75e7005397a9da418/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd4439fafafb778f9d287f7369218c744381e8cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4439fafafb778f9d287f7369218c744381e8cd", "html_url": "https://github.com/rust-lang/rust/commit/bd4439fafafb778f9d287f7369218c744381e8cd"}, {"sha": "844aa8b53e47934e30bff1ba9f70a0986874ae97", "url": "https://api.github.com/repos/rust-lang/rust/commits/844aa8b53e47934e30bff1ba9f70a0986874ae97", "html_url": "https://github.com/rust-lang/rust/commit/844aa8b53e47934e30bff1ba9f70a0986874ae97"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "c6bd5160d4d1048a86c56f6fb892944b593ed007", "filename": "crates/proc-macro-test/build.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7dc36eeb781fcf35a69bb1a75e7005397a9da418/crates%2Fproc-macro-test%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc36eeb781fcf35a69bb1a75e7005397a9da418/crates%2Fproc-macro-test%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-test%2Fbuild.rs?ref=7dc36eeb781fcf35a69bb1a75e7005397a9da418", "patch": "@@ -12,14 +12,43 @@ use std::{\n use cargo_metadata::Message;\n \n fn main() {\n+    println!(\"cargo:rerun-if-changed=imp\");\n+\n     let out_dir = env::var_os(\"OUT_DIR\").unwrap();\n     let out_dir = Path::new(&out_dir);\n \n     let name = \"proc-macro-test-impl\";\n     let version = \"0.0.0\";\n+\n+    let imp_dir = std::env::current_dir().unwrap().join(\"imp\");\n+\n+    let staging_dir = out_dir.join(\"proc-macro-test-imp-staging\");\n+    // this'll error out if the staging dir didn't previously exist. using\n+    // `std::fs::exists` would suffer from TOCTOU so just do our best to\n+    // wipe it and ignore errors.\n+    let _ = std::fs::remove_dir_all(&staging_dir);\n+\n+    println!(\"Creating {}\", staging_dir.display());\n+    std::fs::create_dir_all(&staging_dir).unwrap();\n+\n+    let src_dir = staging_dir.join(\"src\");\n+    println!(\"Creating {}\", src_dir.display());\n+    std::fs::create_dir_all(src_dir).unwrap();\n+\n+    for item_els in [&[\"Cargo.toml\"][..], &[\"src\", \"lib.rs\"]] {\n+        let mut src = imp_dir.clone();\n+        let mut dst = staging_dir.clone();\n+        for el in item_els {\n+            src.push(el);\n+            dst.push(el);\n+        }\n+        println!(\"Copying {} to {}\", src.display(), dst.display());\n+        std::fs::copy(src, dst).unwrap();\n+    }\n+\n     let target_dir = out_dir.join(\"target\");\n     let output = Command::new(toolchain::cargo())\n-        .current_dir(\"imp\")\n+        .current_dir(&staging_dir)\n         .args(&[\"build\", \"-p\", \"proc-macro-test-impl\", \"--message-format\", \"json\"])\n         // Explicit override the target directory to avoid using the same one which the parent\n         // cargo is using, or we'll deadlock.\n@@ -29,7 +58,14 @@ fn main() {\n         .arg(&target_dir)\n         .output()\n         .unwrap();\n-    assert!(output.status.success());\n+    if !output.status.success() {\n+        println!(\"proc-macro-test-impl failed to build\");\n+        println!(\"============ stdout ============\");\n+        println!(\"{}\", String::from_utf8_lossy(&output.stdout));\n+        println!(\"============ stderr ============\");\n+        println!(\"{}\", String::from_utf8_lossy(&output.stderr));\n+        panic!(\"proc-macro-test-impl failed to build\");\n+    }\n \n     let mut artifact_path = None;\n     for message in Message::parse_stream(output.stdout.as_slice()) {"}]}