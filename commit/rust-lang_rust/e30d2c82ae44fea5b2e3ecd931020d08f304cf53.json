{"sha": "e30d2c82ae44fea5b2e3ecd931020d08f304cf53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMGQyYzgyYWU0NGZlYTViMmUzZWNkOTMxMDIwZDA4ZjMwNGNmNTM=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-06T18:29:22Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-06T18:36:06Z"}, "message": "Simplify AST for expr_anon_obj.", "tree": {"sha": "3e8595db30f919e989ec3955a3b0cbe0e6e30153", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e8595db30f919e989ec3955a3b0cbe0e6e30153"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e30d2c82ae44fea5b2e3ecd931020d08f304cf53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e30d2c82ae44fea5b2e3ecd931020d08f304cf53", "html_url": "https://github.com/rust-lang/rust/commit/e30d2c82ae44fea5b2e3ecd931020d08f304cf53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23bae67f4c741cccfb45362e7bdb2e37afde8da7", "url": "https://api.github.com/repos/rust-lang/rust/commits/23bae67f4c741cccfb45362e7bdb2e37afde8da7", "html_url": "https://github.com/rust-lang/rust/commit/23bae67f4c741cccfb45362e7bdb2e37afde8da7"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "77ffdd1be3ae93d4befb54415a46017d4e73b54d", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e30d2c82ae44fea5b2e3ecd931020d08f304cf53", "patch": "@@ -6268,7 +6268,7 @@ fn trans_expr_out(&@block_ctxt cx, &@ast::expr e, out_method output) ->\n         case (ast::expr_spawn(?dom, ?name, ?func, ?args)) {\n             ret trans_spawn(cx, dom, name, func, args, e.id);\n         }\n-        case (ast::expr_anon_obj(?anon_obj, ?tps, _)) {\n+        case (ast::expr_anon_obj(?anon_obj, ?tps)) {\n             ret trans_anon_obj(cx, e.span, anon_obj, tps, e.id);\n         }\n         case (_) {"}, {"sha": "f58fdb0f6cf9decb5761c95b72526449a5add303", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=e30d2c82ae44fea5b2e3ecd931020d08f304cf53", "patch": "@@ -571,7 +571,7 @@ fn find_pre_post_expr(&fn_ctxt fcx, @expr e) {\n             find_pre_post_expr(fcx, expanded);\n             copy_pre_post(fcx.ccx, e.id, expanded);\n         }\n-        case (expr_anon_obj(?anon_obj, _, _)) {\n+        case (expr_anon_obj(?anon_obj, _)) {\n             alt (anon_obj.with_obj) {\n                 case (some(?ex)) {\n                     find_pre_post_expr(fcx, ex);"}, {"sha": "229bd17654439f176117469b7a98fade289f3665", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=e30d2c82ae44fea5b2e3ecd931020d08f304cf53", "patch": "@@ -570,7 +570,7 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n         case (expr_cont) { ret pure_exp(fcx.ccx, e.id, pres); }\n         case (expr_port(_)) { ret pure_exp(fcx.ccx, e.id, pres); }\n         case (expr_self_method(_)) { ret pure_exp(fcx.ccx, e.id, pres); }\n-        case (expr_anon_obj(?anon_obj, _, _)) {\n+        case (expr_anon_obj(?anon_obj, _)) {\n             alt (anon_obj.with_obj) {\n                 case (some(?wt)) {\n                     ret find_pre_post_state_sub(fcx, pres, wt, e.id, none);"}, {"sha": "bc6dbff7b4a3f2055f8125dd1f28a997a44c540b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=e30d2c82ae44fea5b2e3ecd931020d08f304cf53", "patch": "@@ -2202,7 +2202,7 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                 }\n             }\n         }\n-        case (ast::expr_anon_obj(?anon_obj, ?tps, ?obj_def_ids)) {\n+        case (ast::expr_anon_obj(?anon_obj, ?tps)) {\n             // TODO: We probably need to do more work here to be able to\n             // handle additional methods that use 'self'\n \n@@ -2221,12 +2221,11 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                 ret rec(mut=f.mut, ty=f.ty, ident=f.ident, id=f.id);\n             }\n \n-            let ast::node_id di = obj_def_ids.ty;\n             vec::push[obj_info](fcx.ccx.obj_infos,\n                                 rec(obj_fields=\n                                     vec::map(anon_obj_field_to_obj_field, \n                                              fields),\n-                                    this_obj=di));\n+                                    this_obj=id));\n \n             // FIXME: These next three functions are largely ripped off from\n             // similar ones in collect::.  Is there a better way to do this?"}, {"sha": "4a4b3db4785dd1906f923ed79d7592a7d4dd49cb", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=e30d2c82ae44fea5b2e3ecd931020d08f304cf53", "patch": "@@ -296,7 +296,7 @@ tag expr_ {\n     expr_if_check(@expr, block, option::t[@expr]);\n     expr_port(option::t[@ty]);\n     expr_chan(@expr);\n-    expr_anon_obj(anon_obj, vec[ty_param], obj_def_ids);\n+    expr_anon_obj(anon_obj, vec[ty_param]);\n }\n \n type lit = spanned[lit_];"}, {"sha": "64c28ad829afbcb36778506d7f9bb3c90069e96e", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=e30d2c82ae44fea5b2e3ecd931020d08f304cf53", "patch": "@@ -429,8 +429,8 @@ fn noop_fold_expr(&expr_ e, ast_fold fld) -> expr_ {\n                 })\n                 }\n         case (expr_chan(?e)) { expr_chan(fld.fold_expr(e)) }\n-        case (expr_anon_obj(?ao, ?typms, ?odis)) {\n-            expr_anon_obj(fold_anon_obj(ao), typms, odis)\n+        case (expr_anon_obj(?ao, ?typms)) {\n+            expr_anon_obj(fold_anon_obj(ao), typms)\n                 }\n     }\n }"}, {"sha": "209ddcc7ff61b1e3c9c15852e6b4eb08d59e4a96", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=e30d2c82ae44fea5b2e3ecd931020d08f304cf53", "patch": "@@ -801,8 +801,7 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n         // \"spanned\".\n         let ast::anon_obj ob =\n             rec(fields=fields, methods=meths, with_obj=with_obj);\n-        auto odid = rec(ty=p.get_id(), ctor=p.get_id());\n-        ex = ast::expr_anon_obj(ob, ty_params, odid);\n+        ex = ast::expr_anon_obj(ob, ty_params);\n     } else if (eat_word(p, \"rec\")) {\n         expect(p, token::LPAREN);\n         auto fields = [parse_field(p)];\n@@ -1592,7 +1591,7 @@ fn stmt_ends_with_semi(&ast::stmt stmt) -> bool {\n                 case (ast::expr_if_check(_, _, _)) { false }\n                 case (ast::expr_port(_)) { true }\n                 case (ast::expr_chan(_)) { true }\n-                case (ast::expr_anon_obj(_,_,_)) { false }\n+                case (ast::expr_anon_obj(_,_)) { false }\n                 case (ast::expr_assert(_)) { true }\n             }\n         }"}, {"sha": "2ae7c36553ff514a9f456802f61f7e69b41944c4", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=e30d2c82ae44fea5b2e3ecd931020d08f304cf53", "patch": "@@ -953,7 +953,7 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             print_expr(s, expr);\n             pclose(s);\n         }\n-        case (ast::expr_anon_obj(_, _, _)) {\n+        case (ast::expr_anon_obj(_, _)) {\n             word(s.s, \"anon obj\");\n             // FIXME (issue #499): nicer pretty-printing of anon objs\n "}, {"sha": "96dccf28b129ac165751fc4703fbd24a148e9a45", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=e30d2c82ae44fea5b2e3ecd931020d08f304cf53", "patch": "@@ -371,7 +371,7 @@ fn visit_expr[E](&@expr ex, &E e, &vt[E] v) {\n         case (expr_assert(?x)) { vt(v).visit_expr(x, e, v); }\n         case (expr_port(_)) { }\n         case (expr_chan(?x)) { vt(v).visit_expr(x, e, v); }\n-        case (expr_anon_obj(?anon_obj, _, _)) {\n+        case (expr_anon_obj(?anon_obj, _)) {\n             alt (anon_obj.fields) {\n                 case (none) { }\n                 case (some(?fields)) {"}, {"sha": "2b74f81f9b31994570c24779a2e695680f521ad3", "filename": "src/comp/syntax/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fsyntax%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d2c82ae44fea5b2e3ecd931020d08f304cf53/src%2Fcomp%2Fsyntax%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fwalk.rs?ref=e30d2c82ae44fea5b2e3ecd931020d08f304cf53", "patch": "@@ -380,7 +380,7 @@ fn walk_expr(&ast_visitor v, @ast::expr e) {\n         case (ast::expr_assert(?x)) { walk_expr(v, x); }\n         case (ast::expr_port(_)) { }\n         case (ast::expr_chan(?x)) { walk_expr(v, x); }\n-        case (ast::expr_anon_obj(?anon_obj, _, _)) {\n+        case (ast::expr_anon_obj(?anon_obj, _)) {\n             // Fields\n \n             alt (anon_obj.fields) {"}]}