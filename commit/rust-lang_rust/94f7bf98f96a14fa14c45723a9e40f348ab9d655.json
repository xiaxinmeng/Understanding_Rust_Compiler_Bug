{"sha": "94f7bf98f96a14fa14c45723a9e40f348ab9d655", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZjdiZjk4Zjk2YTE0ZmExNGM0NTcyM2E5ZTQwZjM0OGFiOWQ2NTU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-28T21:54:25Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-28T21:54:39Z"}, "message": "Finish de-exporting uint modules. Part of #3583.", "tree": {"sha": "c6c3cb6baf0ca42d80b0f1e33116ffa6fba98404", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6c3cb6baf0ca42d80b0f1e33116ffa6fba98404"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94f7bf98f96a14fa14c45723a9e40f348ab9d655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94f7bf98f96a14fa14c45723a9e40f348ab9d655", "html_url": "https://github.com/rust-lang/rust/commit/94f7bf98f96a14fa14c45723a9e40f348ab9d655", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94f7bf98f96a14fa14c45723a9e40f348ab9d655/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f4ee891199d3dffd8382742f576c3e78081634e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f4ee891199d3dffd8382742f576c3e78081634e", "html_url": "https://github.com/rust-lang/rust/commit/2f4ee891199d3dffd8382742f576c3e78081634e"}], "stats": {"total": 71, "additions": 19, "deletions": 52}, "files": [{"sha": "e2c43bf812195ae3b2a91d435a50bf891890a16b", "filename": "src/libcore/core.rc", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/94f7bf98f96a14fa14c45723a9e40f348ab9d655/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/94f7bf98f96a14fa14c45723a9e40f348ab9d655/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=94f7bf98f96a14fa14c45723a9e40f348ab9d655", "patch": "@@ -120,62 +120,43 @@ mod i64 {\n }\n \n /// Operations and constants for `uint`\n-#[legacy_exports]\n #[path = \"uint-template\"]\n mod uint {\n-    #[legacy_exports];\n-    use inst::{\n+    pub use inst::{\n         div_ceil, div_round, div_floor, iterate,\n         next_power_of_two\n     };\n-    export div_ceil, div_round, div_floor, iterate,\n-    next_power_of_two;\n-\n     #[path = \"uint.rs\"]\n-    #[legacy_exports]\n     mod inst;\n }\n \n /// Operations and constants for `u8`\n-#[legacy_exports]\n #[path = \"uint-template\"]\n mod u8 {\n-    #[legacy_exports];\n-    use inst::is_ascii;\n-    export is_ascii;\n+    pub use inst::is_ascii;\n \n     #[path = \"u8.rs\"]\n-    #[legacy_exports]\n     mod inst;\n }\n \n /// Operations and constants for `u16`\n-#[legacy_exports]\n #[path = \"uint-template\"]\n mod u16 {\n-    #[legacy_exports];\n     #[path = \"u16.rs\"]\n-    #[legacy_exports]\n     mod inst;\n }\n \n /// Operations and constants for `u32`\n-#[legacy_exports]\n #[path = \"uint-template\"]\n mod u32 {\n-    #[legacy_exports];\n     #[path = \"u32.rs\"]\n-    #[legacy_exports]\n     mod inst;\n }\n \n /// Operations and constants for `u64`\n-#[legacy_exports]\n #[path = \"uint-template\"]\n mod u64 {\n-    #[legacy_exports];\n     #[path = \"u64.rs\"]\n-    #[legacy_exports]\n     mod inst;\n }\n "}, {"sha": "eb58d17c5f115c2d1bf019eac69d913c17b84da6", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/94f7bf98f96a14fa14c45723a9e40f348ab9d655/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f7bf98f96a14fa14c45723a9e40f348ab9d655/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=94f7bf98f96a14fa14c45723a9e40f348ab9d655", "patch": "@@ -6,20 +6,6 @@ use T = inst::T;\n use cmp::{Eq, Ord};\n use from_str::FromStr;\n \n-export min_value, max_value;\n-export min, max;\n-export add, sub, mul, div, rem;\n-export lt, le, eq, ne, ge, gt;\n-export is_positive, is_negative;\n-export is_nonpositive, is_nonnegative;\n-export range;\n-export compl;\n-export to_str, to_str_bytes;\n-export from_str, from_str_radix, str, parse_bytes;\n-export num, ord, eq, times, timesi;\n-export bits, bytes;\n-export str;\n-\n pub const bits : uint = inst::bits;\n pub const bytes : uint = (inst::bits / 8);\n "}, {"sha": "d8e078eb65c20ce6dd9ea6230fd643f9ee15e82b", "filename": "src/libcore/uint-template/u16.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94f7bf98f96a14fa14c45723a9e40f348ab9d655/src%2Flibcore%2Fuint-template%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f7bf98f96a14fa14c45723a9e40f348ab9d655/src%2Flibcore%2Fuint-template%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu16.rs?ref=94f7bf98f96a14fa14c45723a9e40f348ab9d655", "patch": "@@ -1,2 +1,2 @@\n-type T = u16;\n-const bits: uint = 16;\n+pub type T = u16;\n+pub const bits: uint = 16;"}, {"sha": "0e2eb2f09e1d30b67c164ec99545ff53cac70bb8", "filename": "src/libcore/uint-template/u32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94f7bf98f96a14fa14c45723a9e40f348ab9d655/src%2Flibcore%2Fuint-template%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f7bf98f96a14fa14c45723a9e40f348ab9d655/src%2Flibcore%2Fuint-template%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu32.rs?ref=94f7bf98f96a14fa14c45723a9e40f348ab9d655", "patch": "@@ -1,2 +1,2 @@\n-type T = u32;\n-const bits: uint = 32;\n\\ No newline at end of file\n+pub type T = u32;\n+pub const bits: uint = 32;\n\\ No newline at end of file"}, {"sha": "030c6379628c59563bc23d8399208fc1b642eb99", "filename": "src/libcore/uint-template/u64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94f7bf98f96a14fa14c45723a9e40f348ab9d655/src%2Flibcore%2Fuint-template%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f7bf98f96a14fa14c45723a9e40f348ab9d655/src%2Flibcore%2Fuint-template%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu64.rs?ref=94f7bf98f96a14fa14c45723a9e40f348ab9d655", "patch": "@@ -1,2 +1,2 @@\n-type T = u64;\n-const bits: uint = 64;\n\\ No newline at end of file\n+pub type T = u64;\n+pub const bits: uint = 64;\n\\ No newline at end of file"}, {"sha": "539567a2cfd45fc0fa45dfc2737b906f3259b389", "filename": "src/libcore/uint-template/u8.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94f7bf98f96a14fa14c45723a9e40f348ab9d655/src%2Flibcore%2Fuint-template%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f7bf98f96a14fa14c45723a9e40f348ab9d655/src%2Flibcore%2Fuint-template%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu8.rs?ref=94f7bf98f96a14fa14c45723a9e40f348ab9d655", "patch": "@@ -1,7 +1,7 @@\n-type T = u8;\n-const bits: uint = 8;\n+pub type T = u8;\n+pub const bits: uint = 8;\n \n // Type-specific functions here. These must be reexported by the\n // parent module so that they appear in core::u8 and not core::u8::u8;\n \n-pure fn is_ascii(x: T) -> bool { return 0 as T == x & 128 as T; }\n+pub pure fn is_ascii(x: T) -> bool { return 0 as T == x & 128 as T; }"}, {"sha": "24beaad4d5e88bd9324513e97a43dad575396060", "filename": "src/libcore/uint-template/uint.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/94f7bf98f96a14fa14c45723a9e40f348ab9d655/src%2Flibcore%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f7bf98f96a14fa14c45723a9e40f348ab9d655/src%2Flibcore%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fuint.rs?ref=94f7bf98f96a14fa14c45723a9e40f348ab9d655", "patch": "@@ -1,11 +1,11 @@\n-type T = uint;\n+pub type T = uint;\n \n #[cfg(target_arch = \"x86\")]\n #[cfg(target_arch = \"arm\")]\n-const bits: uint = 32;\n+pub const bits: uint = 32;\n \n #[cfg(target_arch = \"x86_64\")]\n-const bits: uint = 64;\n+pub const bits: uint = 64;\n \n /**\n  * Divide two numbers, return the result, rounded up.\n@@ -19,7 +19,7 @@ const bits: uint = 64;\n  *\n  * The smallest integer `q` such that `x/y <= q`.\n  */\n-pure fn div_ceil(x: uint, y: uint) -> uint {\n+pub pure fn div_ceil(x: uint, y: uint) -> uint {\n     let div = x / y;\n     if x % y == 0u { div }\n     else { div + 1u }\n@@ -37,7 +37,7 @@ pure fn div_ceil(x: uint, y: uint) -> uint {\n  *\n  * The integer `q` closest to `x/y`.\n  */\n-pure fn div_round(x: uint, y: uint) -> uint {\n+pub pure fn div_round(x: uint, y: uint) -> uint {\n     let div = x / y;\n     if x % y * 2u  < y { div }\n     else { div + 1u }\n@@ -58,7 +58,7 @@ pure fn div_round(x: uint, y: uint) -> uint {\n  * The smallest integer `q` such that `x/y <= q`. This\n  * is either `x/y` or `x/y + 1`.\n  */\n-pure fn div_floor(x: uint, y: uint) -> uint { return x / y; }\n+pub pure fn div_floor(x: uint, y: uint) -> uint { return x / y; }\n \n /**\n  * Iterate over the range [`lo`..`hi`), or stop when requested\n@@ -75,7 +75,7 @@ pure fn div_floor(x: uint, y: uint) -> uint { return x / y; }\n  * `true` If execution proceeded correctly, `false` if it was interrupted,\n  * that is if `it` returned `false` at any point.\n  */\n-pure fn iterate(lo: uint, hi: uint, it: fn(uint) -> bool) -> bool {\n+pub pure fn iterate(lo: uint, hi: uint, it: fn(uint) -> bool) -> bool {\n     let mut i = lo;\n     while i < hi {\n         if (!it(i)) { return false; }\n@@ -86,7 +86,7 @@ pure fn iterate(lo: uint, hi: uint, it: fn(uint) -> bool) -> bool {\n \n /// Returns the smallest power of 2 greater than or equal to `n`\n #[inline(always)]\n-fn next_power_of_two(n: uint) -> uint {\n+pub fn next_power_of_two(n: uint) -> uint {\n     let halfbits: uint = sys::size_of::<uint>() * 4u;\n     let mut tmp: uint = n - 1u;\n     let mut shift: uint = 1u;"}]}