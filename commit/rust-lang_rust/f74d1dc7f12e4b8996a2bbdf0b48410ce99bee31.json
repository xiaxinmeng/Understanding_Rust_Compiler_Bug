{"sha": "f74d1dc7f12e4b8996a2bbdf0b48410ce99bee31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NGQxZGM3ZjEyZTRiODk5NmEyYmJkZjBiNDg0MTBjZTk5YmVlMzE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-15T03:29:18Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-15T03:29:25Z"}, "message": "Improve execution trace logging.", "tree": {"sha": "d0f1d78cddeedd208f564939d013588696bde71e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0f1d78cddeedd208f564939d013588696bde71e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f74d1dc7f12e4b8996a2bbdf0b48410ce99bee31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f74d1dc7f12e4b8996a2bbdf0b48410ce99bee31", "html_url": "https://github.com/rust-lang/rust/commit/f74d1dc7f12e4b8996a2bbdf0b48410ce99bee31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f74d1dc7f12e4b8996a2bbdf0b48410ce99bee31/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a22283d8bc872a8e3bd486744c261aca906f7f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a22283d8bc872a8e3bd486744c261aca906f7f0", "html_url": "https://github.com/rust-lang/rust/commit/4a22283d8bc872a8e3bd486744c261aca906f7f0"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "e9d4cc1deb83376811033be0e029be5e7dfda99c", "filename": "src/interpreter.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f74d1dc7f12e4b8996a2bbdf0b48410ce99bee31/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74d1dc7f12e4b8996a2bbdf0b48410ce99bee31/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=f74d1dc7f12e4b8996a2bbdf0b48410ce99bee31", "patch": "@@ -192,31 +192,49 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n     }\n \n     fn run(&mut self) -> EvalResult<()> {\n+        fn print_indent(n: usize) {\n+            for _ in 0..n {\n+                print!(\"  \");\n+            }\n+        }\n+\n         'outer: while !self.stack.is_empty() {\n             let mut current_block = self.current_frame().next_block;\n \n             loop {\n-                if TRACE_EXECUTION { println!(\"Entering block: {:?}\", current_block); }\n+                if TRACE_EXECUTION {\n+                    print_indent(self.stack.len());\n+                    println!(\"{:?}:\", current_block);\n+                }\n+\n                 let current_mir = self.current_frame().mir.clone(); // Cloning a reference.\n                 let block_data = current_mir.basic_block_data(current_block);\n \n                 for stmt in &block_data.statements {\n-                    if TRACE_EXECUTION { println!(\"{:?}\", stmt); }\n+                    if TRACE_EXECUTION {\n+                        print_indent(self.stack.len() + 1);\n+                        println!(\"{:?}\", stmt);\n+                    }\n                     let mir::StatementKind::Assign(ref lvalue, ref rvalue) = stmt.kind;\n                     try!(self.eval_assignment(lvalue, rvalue));\n                 }\n \n                 let terminator = block_data.terminator();\n-                if TRACE_EXECUTION { println!(\"{:?}\", terminator); }\n+                if TRACE_EXECUTION {\n+                    print_indent(self.stack.len() + 1);\n+                    println!(\"{:?}\", terminator);\n+                }\n+\n                 match try!(self.eval_terminator(terminator)) {\n                     TerminatorTarget::Block(block) => current_block = block,\n-                    TerminatorTarget::Return => break,\n+                    TerminatorTarget::Return => {\n+                        self.pop_stack_frame();\n+                        self.substs_stack.pop();\n+                        continue 'outer;\n+                    }\n                     TerminatorTarget::Call => continue 'outer,\n                 }\n             }\n-\n-            self.pop_stack_frame();\n-            self.substs_stack.pop();\n         }\n \n         Ok(())"}]}