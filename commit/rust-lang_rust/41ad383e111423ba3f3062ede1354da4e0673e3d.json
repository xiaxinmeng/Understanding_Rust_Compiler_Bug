{"sha": "41ad383e111423ba3f3062ede1354da4e0673e3d", "node_id": "C_kwDOAAsO6NoAKDQxYWQzODNlMTExNDIzYmEzZjMwNjJlZGUxMzU0ZGE0ZTA2NzNlM2Q", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-09-27T15:45:34Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-09-27T15:45:34Z"}, "message": "Remove `DefId` from `ConstraintCategory::Predicate`\n\nThis shirnks the size of `ConstraintCategory`, hopefully\nfixing a performance regression.", "tree": {"sha": "fc67e63dc4f919913569a8c4544e3c7b73d269d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc67e63dc4f919913569a8c4544e3c7b73d269d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41ad383e111423ba3f3062ede1354da4e0673e3d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmFR5zQACgkQtAh+UQ6Y\nsWR55A//YifvxjUjxPlIqM0iWr4pxtj65NixhTZqYqiGvnhUJvXodyDpNBYk8X3D\nfSe0aM/p0FZqRJAookEmJr2PgpFaki+zX4FeCDgPI+0YJuta9BpzbRekZKNyr++u\nHQi7tdhoY32sksohqXn2LDxuGxTC1Eo7cxDCf4YlquxddEzGMUdTJROgM4OwxGr0\nQy0r7vlGEvOd5EBtr73mht8IfjMYCsTXMNoO417iM3jhOkoVSDtGAzU+bQbQnNf0\nztPb3+TbewVBWCN7CQ/cTro43UcJ4qZatbRkBuX/WaxmSlO4WD/Z/nwZ8rYScxQh\n3lFGdsOwQPrtRg1RLXqh+Fa84R82tpjfRUtZ0bAd3tjADvl2XYc5LlHEdPx8elm9\nkYwz9oUivf5jbrb5OcuqSRt+X/X96LtYLoU0SWFqVQTnktYUqInLgEtoyacmVXSj\nnlwClzpPDAT5dz5Xx2YTG+ZfNmSOX5xl7GTcEtDuSZzfC8fc6dBQ8cHVpGnBNkYk\ncVb6HUn06CPfXd3+qGPv/IXjn8DTrvrFTbIn6riC29Iykp7ts0q4vF/+HFsuCxe/\n6lGwJLfDonem2gjGHbZW7wCwtv33zg7oS0n1G/UmCeOwyBxzpzM8ZjlQ8si3nBaG\nG08wGNLMk2bHgpkCyS501kh/nvVIZtr3hQQIlMnWp4yS6jIxItU=\n=bw4u\n-----END PGP SIGNATURE-----", "payload": "tree fc67e63dc4f919913569a8c4544e3c7b73d269d3\nparent 93ab12eeaba2c0cb02d4c89d95ddbc5eb38e1448\nauthor Aaron Hill <aa1ronham@gmail.com> 1632757534 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1632757534 -0500\n\nRemove `DefId` from `ConstraintCategory::Predicate`\n\nThis shirnks the size of `ConstraintCategory`, hopefully\nfixing a performance regression.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41ad383e111423ba3f3062ede1354da4e0673e3d", "html_url": "https://github.com/rust-lang/rust/commit/41ad383e111423ba3f3062ede1354da4e0673e3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41ad383e111423ba3f3062ede1354da4e0673e3d/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93ab12eeaba2c0cb02d4c89d95ddbc5eb38e1448", "url": "https://api.github.com/repos/rust-lang/rust/commits/93ab12eeaba2c0cb02d4c89d95ddbc5eb38e1448", "html_url": "https://github.com/rust-lang/rust/commit/93ab12eeaba2c0cb02d4c89d95ddbc5eb38e1448"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "d05cfebc5f02e113d6d887eb41adb7e2f8c51e34", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ad383e111423ba3f3062ede1354da4e0673e3d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad383e111423ba3f3062ede1354da4e0673e3d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=41ad383e111423ba3f3062ede1354da4e0673e3d", "patch": "@@ -40,7 +40,7 @@ impl ConstraintDescription for ConstraintCategory {\n             ConstraintCategory::OpaqueType => \"opaque type \",\n             ConstraintCategory::ClosureUpvar(_) => \"closure capture \",\n             ConstraintCategory::Usage => \"this usage \",\n-            ConstraintCategory::Predicate(_, _)\n+            ConstraintCategory::Predicate(_)\n             | ConstraintCategory::Boring\n             | ConstraintCategory::BoringNoLocation\n             | ConstraintCategory::Internal => \"\","}, {"sha": "917d69a5c866446ac4fc7ac6046d40642341326e", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/41ad383e111423ba3f3062ede1354da4e0673e3d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad383e111423ba3f3062ede1354da4e0673e3d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=41ad383e111423ba3f3062ede1354da4e0673e3d", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::binary_search_util;\n use rustc_data_structures::frozen::Frozen;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::scc::Sccs;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, CRATE_DEF_ID};\n use rustc_hir::CRATE_HIR_ID;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::canonical::QueryOutlivesConstraint;\n@@ -2000,8 +2000,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let cause_code = path\n             .iter()\n             .find_map(|constraint| {\n-                if let ConstraintCategory::Predicate(def_id, predicate_span) = constraint.category {\n-                    Some(ObligationCauseCode::BindingObligation(def_id, predicate_span))\n+                if let ConstraintCategory::Predicate(predicate_span) = constraint.category {\n+                    // We currentl'y doesn't store the `DefId` in the `ConstraintCategory`\n+                    // for perforamnce reasons. The error reporting code used by NLL only\n+                    // uses the span, so this doesn't cause any problems at the moment.\n+                    Some(ObligationCauseCode::BindingObligation(\n+                        CRATE_DEF_ID.to_def_id(),\n+                        predicate_span,\n+                    ))\n                 } else {\n                     None\n                 }\n@@ -2106,7 +2112,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     | ConstraintCategory::Boring\n                     | ConstraintCategory::BoringNoLocation\n                     | ConstraintCategory::Internal\n-                    | ConstraintCategory::Predicate(_, _) => false,\n+                    | ConstraintCategory::Predicate(_) => false,\n                     ConstraintCategory::TypeAnnotation\n                     | ConstraintCategory::Return(_)\n                     | ConstraintCategory::Yield => true,\n@@ -2118,7 +2124,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     | ConstraintCategory::Boring\n                     | ConstraintCategory::BoringNoLocation\n                     | ConstraintCategory::Internal\n-                    | ConstraintCategory::Predicate(_, _) => false,\n+                    | ConstraintCategory::Predicate(_) => false,\n                     _ => true,\n                 }\n             }"}, {"sha": "df28fb6e28e06acbcaaaf222ed85e8f26d0a62e2", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41ad383e111423ba3f3062ede1354da4e0673e3d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad383e111423ba3f3062ede1354da4e0673e3d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=41ad383e111423ba3f3062ede1354da4e0673e3d", "patch": "@@ -101,7 +101,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n     pub(super) fn normalize_and_prove_instantiated_predicates(\n         &mut self,\n-        def_id: DefId,\n+        // Keep this parameter for now, in case we start using\n+        // it in `ConstraintCategory` at some point.\n+        _def_id: DefId,\n         instantiated_predicates: ty::InstantiatedPredicates<'tcx>,\n         locations: Locations,\n     ) {\n@@ -111,7 +113,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             .zip(instantiated_predicates.spans.into_iter())\n         {\n             let predicate = self.normalize(predicate, locations);\n-            self.prove_predicate(predicate, locations, ConstraintCategory::Predicate(def_id, span));\n+            self.prove_predicate(predicate, locations, ConstraintCategory::Predicate(span));\n         }\n     }\n "}, {"sha": "d5541d7890c77de20e6906d5ee913dc8c02aa804", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41ad383e111423ba3f3062ede1354da4e0673e3d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad383e111423ba3f3062ede1354da4e0673e3d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=41ad383e111423ba3f3062ede1354da4e0673e3d", "patch": "@@ -309,6 +309,9 @@ pub struct ClosureOutlivesRequirement<'tcx> {\n     pub category: ConstraintCategory,\n }\n \n+// Make sure this enum doesn't unintentionally grow\n+rustc_data_structures::static_assert_size!(ConstraintCategory, 12);\n+\n /// Outlives-constraints can be categorized to determine whether and why they\n /// are interesting (for error reporting). Order of variants indicates sort\n /// order of the category, thereby influencing diagnostic output.\n@@ -341,7 +344,7 @@ pub enum ConstraintCategory {\n     /// A constraint from a user-written predicate\n     /// with the provided span, written on the item\n     /// with the given `DefId`\n-    Predicate(DefId, Span),\n+    Predicate(Span),\n \n     /// A \"boring\" constraint (caused by the given location) is one that\n     /// the user probably doesn't want to see described in diagnostics,"}]}