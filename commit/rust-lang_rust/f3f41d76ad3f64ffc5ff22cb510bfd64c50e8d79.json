{"sha": "f3f41d76ad3f64ffc5ff22cb510bfd64c50e8d79", "node_id": "C_kwDOAAsO6NoAKGYzZjQxZDc2YWQzZjY0ZmZjNWZmMjJjYjUxMGJmZDY0YzUwZThkNzk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-10T11:09:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-10T11:09:58Z"}, "message": "Rollup merge of #93802 - lcnr:mcg-woops, r=BoxyUwU\n\nfix oversight in the `min_const_generics` checks\n\nr? `@BoxyUwU`", "tree": {"sha": "8d7be9344d6da4a253c0ff93fcdad23205b80efb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d7be9344d6da4a253c0ff93fcdad23205b80efb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3f41d76ad3f64ffc5ff22cb510bfd64c50e8d79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiBPKGCRBK7hj4Ov3rIwAAtwcIAA7SdnSWzaWThqsfEdSsNU03\nhyHiwFEVTPYeEMxT+j0omcjlVG3zRMplWdId76YAnLqOolzdpXKF4LmuGvc0dRkv\nr6NYY8JXIjqJBu6le8uQ5XngyHBE/TJ62QznF9qa/ihAiXjMcGW2cHH5bP+VCZtK\nD+Eq7nxsqnVH+zh7PHIwosyGeh6SrHEw8bpILbJhXCgUn2xogZBpvBluSytauys6\nmXlcYoEumonzy1J6tfYWm4UxzAj8+JT2fsNvkUayv+Ykd//FxLSL0blIwMfsND0I\nJjG2gT85ysFXFps7L0t088lMnWnMaQ4gRX8nIqKjRAAlc4aoBejB4aA6a96kNqk=\n=vWyP\n-----END PGP SIGNATURE-----\n", "payload": "tree 8d7be9344d6da4a253c0ff93fcdad23205b80efb\nparent 584948d1be47178a10841e5d59dc0eecc8022ffe\nparent 76c562f3b30e0d033902d004fdb0069d5584d78a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644491398 +0100\ncommitter GitHub <noreply@github.com> 1644491398 +0100\n\nRollup merge of #93802 - lcnr:mcg-woops, r=BoxyUwU\n\nfix oversight in the `min_const_generics` checks\n\nr? `@BoxyUwU`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3f41d76ad3f64ffc5ff22cb510bfd64c50e8d79", "html_url": "https://github.com/rust-lang/rust/commit/f3f41d76ad3f64ffc5ff22cb510bfd64c50e8d79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3f41d76ad3f64ffc5ff22cb510bfd64c50e8d79/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "584948d1be47178a10841e5d59dc0eecc8022ffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/584948d1be47178a10841e5d59dc0eecc8022ffe", "html_url": "https://github.com/rust-lang/rust/commit/584948d1be47178a10841e5d59dc0eecc8022ffe"}, {"sha": "76c562f3b30e0d033902d004fdb0069d5584d78a", "url": "https://api.github.com/repos/rust-lang/rust/commits/76c562f3b30e0d033902d004fdb0069d5584d78a", "html_url": "https://github.com/rust-lang/rust/commit/76c562f3b30e0d033902d004fdb0069d5584d78a"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "aa054043c4e886e0d9a60a0b4e2fef0286b3a3ea", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f3f41d76ad3f64ffc5ff22cb510bfd64c50e8d79/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3f41d76ad3f64ffc5ff22cb510bfd64c50e8d79/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=f3f41d76ad3f64ffc5ff22cb510bfd64c50e8d79", "patch": "@@ -2281,8 +2281,27 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(path.segments);\n                 // Try to evaluate any array length constants.\n-                let normalized_ty = self.normalize_ty(span, tcx.at(span).type_of(def_id));\n-                if forbid_generic && normalized_ty.needs_subst() {\n+                let ty = tcx.at(span).type_of(def_id);\n+                // HACK(min_const_generics): Forbid generic `Self` types\n+                // here as we can't easily do that during nameres.\n+                //\n+                // We do this before normalization as we otherwise allow\n+                // ```rust\n+                // trait AlwaysApplicable { type Assoc; }\n+                // impl<T: ?Sized> AlwaysApplicable for T { type Assoc = usize; }\n+                //\n+                // trait BindsParam<T> {\n+                //     type ArrayTy;\n+                // }\n+                // impl<T> BindsParam<T> for <T as AlwaysApplicable>::Assoc {\n+                //    type ArrayTy = [u8; Self::MAX];\n+                // }\n+                // ```\n+                // Note that the normalization happens in the param env of\n+                // the anon const, which is empty. This is why the\n+                // `AlwaysApplicable` impl needs a `T: ?Sized` bound for\n+                // this to compile if we were to normalize here.\n+                if forbid_generic && ty.needs_subst() {\n                     let mut err = tcx.sess.struct_span_err(\n                         path.span,\n                         \"generic `Self` types are currently not permitted in anonymous constants\",\n@@ -2297,7 +2316,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     err.emit();\n                     tcx.ty_error()\n                 } else {\n-                    normalized_ty\n+                    self.normalize_ty(span, ty)\n                 }\n             }\n             Res::Def(DefKind::AssocTy, def_id) => {"}, {"sha": "e1cf7b579aa5a3a2336281f538c2e38bb604a6f9", "filename": "src/test/ui/const-generics/min_const_generics/forbid-self-no-normalize.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f3f41d76ad3f64ffc5ff22cb510bfd64c50e8d79/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3f41d76ad3f64ffc5ff22cb510bfd64c50e8d79/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.rs?ref=f3f41d76ad3f64ffc5ff22cb510bfd64c50e8d79", "patch": "@@ -0,0 +1,15 @@\n+trait AlwaysApplicable {\n+    type Assoc;\n+}\n+impl<T: ?Sized> AlwaysApplicable for T {\n+    type Assoc = usize;\n+}\n+\n+trait BindsParam<T> {\n+    type ArrayTy;\n+}\n+impl<T> BindsParam<T> for <T as AlwaysApplicable>::Assoc {\n+    type ArrayTy = [u8; Self::MAX]; //~ ERROR generic `Self` types\n+}\n+\n+fn main() {}"}, {"sha": "bda88597006803a96e5e7902816205e50478f6fc", "filename": "src/test/ui/const-generics/min_const_generics/forbid-self-no-normalize.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3f41d76ad3f64ffc5ff22cb510bfd64c50e8d79/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3f41d76ad3f64ffc5ff22cb510bfd64c50e8d79/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.stderr?ref=f3f41d76ad3f64ffc5ff22cb510bfd64c50e8d79", "patch": "@@ -0,0 +1,14 @@\n+error: generic `Self` types are currently not permitted in anonymous constants\n+  --> $DIR/forbid-self-no-normalize.rs:12:25\n+   |\n+LL |     type ArrayTy = [u8; Self::MAX];\n+   |                         ^^^^\n+   |\n+note: not a concrete type\n+  --> $DIR/forbid-self-no-normalize.rs:11:27\n+   |\n+LL | impl<T> BindsParam<T> for <T as AlwaysApplicable>::Assoc {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}