{"sha": "8e493c6c8236cae769535fe55eedc74d6f63e46d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNDkzYzZjODIzNmNhZTc2OTUzNWZlNTVlZWRjNzRkNmY2M2U0NmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-28T18:26:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-28T18:26:15Z"}, "message": "Auto merge of #4867 - mgr-inz-rafal:modulo_arithmetic, r=flip1995\n\nModulo arithmetic\n\nchangelog: Added modulo_arithmetic lint", "tree": {"sha": "f0e6ee0dbbba24fbe56530d7243c268a18471ae6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0e6ee0dbbba24fbe56530d7243c268a18471ae6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e493c6c8236cae769535fe55eedc74d6f63e46d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e493c6c8236cae769535fe55eedc74d6f63e46d", "html_url": "https://github.com/rust-lang/rust/commit/8e493c6c8236cae769535fe55eedc74d6f63e46d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e493c6c8236cae769535fe55eedc74d6f63e46d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fec5905d87fdee8d3d6a065cdd450972fb588b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fec5905d87fdee8d3d6a065cdd450972fb588b8", "html_url": "https://github.com/rust-lang/rust/commit/0fec5905d87fdee8d3d6a065cdd450972fb588b8"}, {"sha": "a208906afb950d26c6acd770b8650bc840ad35dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a208906afb950d26c6acd770b8650bc840ad35dc", "html_url": "https://github.com/rust-lang/rust/commit/a208906afb950d26c6acd770b8650bc840ad35dc"}], "stats": {"total": 730, "additions": 728, "deletions": 2}, "files": [{"sha": "50a7f44ad8e65b4c6a862f7c9f2a2080f3b12e34", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e493c6c8236cae769535fe55eedc74d6f63e46d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8e493c6c8236cae769535fe55eedc74d6f63e46d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8e493c6c8236cae769535fe55eedc74d6f63e46d", "patch": "@@ -1186,6 +1186,7 @@ Released 2018-09-13\n [`mixed_case_hex_literals`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_case_hex_literals\n [`module_inception`]: https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\n [`module_name_repetitions`]: https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions\n+[`modulo_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#modulo_arithmetic\n [`modulo_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#modulo_one\n [`multiple_crate_versions`]: https://rust-lang.github.io/rust-clippy/master/index.html#multiple_crate_versions\n [`multiple_inherent_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#multiple_inherent_impl"}, {"sha": "01fc20f0f27d91f96846ececdeb64ab31df7616a", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e493c6c8236cae769535fe55eedc74d6f63e46d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8e493c6c8236cae769535fe55eedc74d6f63e46d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8e493c6c8236cae769535fe55eedc74d6f63e46d", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 341 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 342 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "8b8f6b27a95dc519014c7c6a082476a4d7a32912", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e493c6c8236cae769535fe55eedc74d6f63e46d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e493c6c8236cae769535fe55eedc74d6f63e46d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8e493c6c8236cae769535fe55eedc74d6f63e46d", "patch": "@@ -239,6 +239,7 @@ pub mod misc_early;\n pub mod missing_const_for_fn;\n pub mod missing_doc;\n pub mod missing_inline;\n+pub mod modulo_arithmetic;\n pub mod mul_add;\n pub mod multiple_crate_versions;\n pub mod mut_key;\n@@ -667,6 +668,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &missing_const_for_fn::MISSING_CONST_FOR_FN,\n         &missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n         &missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS,\n+        &modulo_arithmetic::MODULO_ARITHMETIC,\n         &mul_add::MANUAL_MUL_ADD,\n         &multiple_crate_versions::MULTIPLE_CRATE_VERSIONS,\n         &mut_key::MUTABLE_KEY_TYPE,\n@@ -943,6 +945,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_late_pass(|| box comparison_chain::ComparisonChain);\n     store.register_late_pass(|| box mul_add::MulAddCheck);\n     store.register_late_pass(|| box mut_key::MutableKeyType);\n+    store.register_late_pass(|| box modulo_arithmetic::ModuloArithmetic);\n     store.register_early_pass(|| box reference::DerefAddrOf);\n     store.register_early_pass(|| box reference::RefInDeref);\n     store.register_early_pass(|| box double_parens::DoubleParens);\n@@ -1003,6 +1006,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&misc::FLOAT_CMP_CONST),\n         LintId::of(&missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n         LintId::of(&missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n+        LintId::of(&modulo_arithmetic::MODULO_ARITHMETIC),\n         LintId::of(&panic_unimplemented::PANIC),\n         LintId::of(&panic_unimplemented::TODO),\n         LintId::of(&panic_unimplemented::UNIMPLEMENTED),"}, {"sha": "09c3ce8d028333d1276c5aa316f1e127c26e9d65", "filename": "clippy_lints/src/modulo_arithmetic.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/8e493c6c8236cae769535fe55eedc74d6f63e46d/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e493c6c8236cae769535fe55eedc74d6f63e46d/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs?ref=8e493c6c8236cae769535fe55eedc74d6f63e46d", "patch": "@@ -0,0 +1,149 @@\n+use crate::consts::{constant, Constant};\n+use crate::utils::{sext, span_lint_and_then};\n+use if_chain::if_chain;\n+use rustc::declare_lint_pass;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty::{self};\n+use rustc_session::declare_tool_lint;\n+use std::fmt::Display;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for modulo arithemtic.\n+    ///\n+    /// **Why is this bad?** The results of modulo (%) operation might differ\n+    /// depending on the language, when negative numbers are involved.\n+    /// If you interop with different languages it might be beneficial\n+    /// to double check all places that use modulo arithmetic.\n+    ///\n+    /// For example, in Rust `17 % -3 = 2`, but in Python `17 % -3 = -1`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// let x = -17 % 3;\n+    /// ```\n+    pub MODULO_ARITHMETIC,\n+    restriction,\n+    \"any modulo arithmetic statement\"\n+}\n+\n+declare_lint_pass!(ModuloArithmetic => [MODULO_ARITHMETIC]);\n+\n+struct OperandInfo {\n+    string_representation: Option<String>,\n+    is_negative: bool,\n+    is_integral: bool,\n+}\n+\n+fn analyze_operand(operand: &Expr<'_>, cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Option<OperandInfo> {\n+    match constant(cx, cx.tables, operand) {\n+        Some((Constant::Int(v), _)) => match cx.tables.expr_ty(expr).kind {\n+            ty::Int(ity) => {\n+                let value = sext(cx.tcx, v, ity);\n+                return Some(OperandInfo {\n+                    string_representation: Some(value.to_string()),\n+                    is_negative: value < 0,\n+                    is_integral: true,\n+                });\n+            },\n+            ty::Uint(_) => {\n+                return Some(OperandInfo {\n+                    string_representation: None,\n+                    is_negative: false,\n+                    is_integral: true,\n+                });\n+            },\n+            _ => {},\n+        },\n+        Some((Constant::F32(f), _)) => {\n+            return Some(floating_point_operand_info(&f));\n+        },\n+        Some((Constant::F64(f), _)) => {\n+            return Some(floating_point_operand_info(&f));\n+        },\n+        _ => {},\n+    }\n+    None\n+}\n+\n+fn floating_point_operand_info<T: Display + PartialOrd + From<f32>>(f: &T) -> OperandInfo {\n+    OperandInfo {\n+        string_representation: Some(format!(\"{:.3}\", *f)),\n+        is_negative: *f < 0.0.into(),\n+        is_integral: false,\n+    }\n+}\n+\n+fn might_have_negative_value(t: &ty::TyS<'_>) -> bool {\n+    t.is_signed() || t.is_floating_point()\n+}\n+\n+fn check_const_operands<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    lhs_operand: &OperandInfo,\n+    rhs_operand: &OperandInfo,\n+) {\n+    if lhs_operand.is_negative ^ rhs_operand.is_negative {\n+        span_lint_and_then(\n+            cx,\n+            MODULO_ARITHMETIC,\n+            expr.span,\n+            &format!(\n+                \"you are using modulo operator on constants with different signs: `{} % {}`\",\n+                lhs_operand.string_representation.as_ref().unwrap(),\n+                rhs_operand.string_representation.as_ref().unwrap()\n+            ),\n+            |db| {\n+                db.note(\"double check for expected result especially when interoperating with different languages\");\n+                if lhs_operand.is_integral {\n+                    db.note(\"or consider using `rem_euclid` or similar function\");\n+                }\n+            },\n+        );\n+    }\n+}\n+\n+fn check_non_const_operands<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>, operand: &Expr<'_>) {\n+    let operand_type = cx.tables.expr_ty(operand);\n+    if might_have_negative_value(operand_type) {\n+        span_lint_and_then(\n+            cx,\n+            MODULO_ARITHMETIC,\n+            expr.span,\n+            \"you are using modulo operator on types that might have different signs\",\n+            |db| {\n+                db.note(\"double check for expected result especially when interoperating with different languages\");\n+                if operand_type.is_integral() {\n+                    db.note(\"or consider using `rem_euclid` or similar function\");\n+                }\n+            },\n+        );\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ModuloArithmetic {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n+        match &expr.kind {\n+            ExprKind::Binary(op, lhs, rhs) | ExprKind::AssignOp(op, lhs, rhs) => {\n+                if let BinOpKind::Rem = op.node {\n+                    let lhs_operand = analyze_operand(lhs, cx, expr);\n+                    let rhs_operand = analyze_operand(rhs, cx, expr);\n+                    if_chain! {\n+                        if let Some(lhs_operand) = lhs_operand;\n+                        if let Some(rhs_operand) = rhs_operand;\n+                        then {\n+                            check_const_operands(cx, expr, &lhs_operand, &rhs_operand);\n+                        }\n+                        else {\n+                            check_non_const_operands(cx, expr, lhs);\n+                        }\n+                    }\n+                };\n+            },\n+            _ => {},\n+        }\n+    }\n+}"}, {"sha": "08cbff404442b06bb828ea4a652d871c439cd3fc", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e493c6c8236cae769535fe55eedc74d6f63e46d/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e493c6c8236cae769535fe55eedc74d6f63e46d/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=8e493c6c8236cae769535fe55eedc74d6f63e46d", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 341] = [\n+pub const ALL_LINTS: [Lint; 342] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1183,6 +1183,13 @@ pub const ALL_LINTS: [Lint; 341] = [\n         deprecation: None,\n         module: \"enum_variants\",\n     },\n+    Lint {\n+        name: \"modulo_arithmetic\",\n+        group: \"restriction\",\n+        desc: \"any modulo arithmetic statement\",\n+        deprecation: None,\n+        module: \"modulo_arithmetic\",\n+    },\n     Lint {\n         name: \"modulo_one\",\n         group: \"correctness\","}, {"sha": "b010b0dbdfa69e5c241745a70ddf6eaef7a1d42a", "filename": "tests/ui/modulo_arithmetic_float.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8e493c6c8236cae769535fe55eedc74d6f63e46d/tests%2Fui%2Fmodulo_arithmetic_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e493c6c8236cae769535fe55eedc74d6f63e46d/tests%2Fui%2Fmodulo_arithmetic_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_float.rs?ref=8e493c6c8236cae769535fe55eedc74d6f63e46d", "patch": "@@ -0,0 +1,36 @@\n+#![warn(clippy::modulo_arithmetic)]\n+#![allow(\n+    unused,\n+    clippy::shadow_reuse,\n+    clippy::shadow_unrelated,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::modulo_one\n+)]\n+\n+fn main() {\n+    // Lint when both sides are const and of the opposite sign\n+    -1.6 % 2.1;\n+    1.6 % -2.1;\n+    (1.1 - 2.3) % (1.1 + 2.3);\n+    (1.1 + 2.3) % (1.1 - 2.3);\n+\n+    // Lint on floating point numbers\n+    let a_f32: f32 = -1.6;\n+    let mut b_f32: f32 = 2.1;\n+    a_f32 % b_f32;\n+    b_f32 % a_f32;\n+    b_f32 %= a_f32;\n+\n+    let a_f64: f64 = -1.6;\n+    let mut b_f64: f64 = 2.1;\n+    a_f64 % b_f64;\n+    b_f64 % a_f64;\n+    b_f64 %= a_f64;\n+\n+    // No lint when both sides are const and of the same sign\n+    1.6 % 2.1;\n+    -1.6 % -2.1;\n+    (1.1 + 2.3) % (-1.1 + 2.3);\n+    (-1.1 - 2.3) % (1.1 - 2.3);\n+}"}, {"sha": "7bfdb0bde60706bc3765f87bd98a02211cde1265", "filename": "tests/ui/modulo_arithmetic_float.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8e493c6c8236cae769535fe55eedc74d6f63e46d/tests%2Fui%2Fmodulo_arithmetic_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e493c6c8236cae769535fe55eedc74d6f63e46d/tests%2Fui%2Fmodulo_arithmetic_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_float.stderr?ref=8e493c6c8236cae769535fe55eedc74d6f63e46d", "patch": "@@ -0,0 +1,83 @@\n+error: you are using modulo operator on constants with different signs: `-1.600 % 2.100`\n+  --> $DIR/modulo_arithmetic_float.rs:13:5\n+   |\n+LL |     -1.6 % 2.1;\n+   |     ^^^^^^^^^^\n+   |\n+   = note: `-D clippy::modulo-arithmetic` implied by `-D warnings`\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on constants with different signs: `1.600 % -2.100`\n+  --> $DIR/modulo_arithmetic_float.rs:14:5\n+   |\n+LL |     1.6 % -2.1;\n+   |     ^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on constants with different signs: `-1.200 % 3.400`\n+  --> $DIR/modulo_arithmetic_float.rs:15:5\n+   |\n+LL |     (1.1 - 2.3) % (1.1 + 2.3);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on constants with different signs: `3.400 % -1.200`\n+  --> $DIR/modulo_arithmetic_float.rs:16:5\n+   |\n+LL |     (1.1 + 2.3) % (1.1 - 2.3);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_float.rs:21:5\n+   |\n+LL |     a_f32 % b_f32;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_float.rs:22:5\n+   |\n+LL |     b_f32 % a_f32;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_float.rs:23:5\n+   |\n+LL |     b_f32 %= a_f32;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_float.rs:27:5\n+   |\n+LL |     a_f64 % b_f64;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_float.rs:28:5\n+   |\n+LL |     b_f64 % a_f64;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_float.rs:29:5\n+   |\n+LL |     b_f64 %= a_f64;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "779d035c5f8a28850939afd1000a494b2fb737cc", "filename": "tests/ui/modulo_arithmetic_integral.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/8e493c6c8236cae769535fe55eedc74d6f63e46d/tests%2Fui%2Fmodulo_arithmetic_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e493c6c8236cae769535fe55eedc74d6f63e46d/tests%2Fui%2Fmodulo_arithmetic_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_integral.rs?ref=8e493c6c8236cae769535fe55eedc74d6f63e46d", "patch": "@@ -0,0 +1,90 @@\n+#![warn(clippy::modulo_arithmetic)]\n+#![allow(\n+    unused,\n+    clippy::shadow_reuse,\n+    clippy::shadow_unrelated,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::modulo_one\n+)]\n+\n+fn main() {\n+    // Lint on signed integral numbers\n+    let a = -1;\n+    let mut b = 2;\n+    a % b;\n+    b % a;\n+    b %= a;\n+\n+    let a_i8: i8 = 1;\n+    let mut b_i8: i8 = 2;\n+    a_i8 % b_i8;\n+    b_i8 %= a_i8;\n+\n+    let a_i16: i16 = 1;\n+    let mut b_i16: i16 = 2;\n+    a_i16 % b_i16;\n+    b_i16 %= a_i16;\n+\n+    let a_i32: i32 = 1;\n+    let mut b_i32: i32 = 2;\n+    a_i32 % b_i32;\n+    b_i32 %= a_i32;\n+\n+    let a_i64: i64 = 1;\n+    let mut b_i64: i64 = 2;\n+    a_i64 % b_i64;\n+    b_i64 %= a_i64;\n+\n+    let a_i128: i128 = 1;\n+    let mut b_i128: i128 = 2;\n+    a_i128 % b_i128;\n+    b_i128 %= a_i128;\n+\n+    let a_isize: isize = 1;\n+    let mut b_isize: isize = 2;\n+    a_isize % b_isize;\n+    b_isize %= a_isize;\n+\n+    let a = 1;\n+    let mut b = 2;\n+    a % b;\n+    b %= a;\n+\n+    // No lint on unsigned integral value\n+    let a_u8: u8 = 17;\n+    let b_u8: u8 = 3;\n+    a_u8 % b_u8;\n+    let mut a_u8: u8 = 1;\n+    a_u8 %= 2;\n+\n+    let a_u16: u16 = 17;\n+    let b_u16: u16 = 3;\n+    a_u16 % b_u16;\n+    let mut a_u16: u16 = 1;\n+    a_u16 %= 2;\n+\n+    let a_u32: u32 = 17;\n+    let b_u32: u32 = 3;\n+    a_u32 % b_u32;\n+    let mut a_u32: u32 = 1;\n+    a_u32 %= 2;\n+\n+    let a_u64: u64 = 17;\n+    let b_u64: u64 = 3;\n+    a_u64 % b_u64;\n+    let mut a_u64: u64 = 1;\n+    a_u64 %= 2;\n+\n+    let a_u128: u128 = 17;\n+    let b_u128: u128 = 3;\n+    a_u128 % b_u128;\n+    let mut a_u128: u128 = 1;\n+    a_u128 %= 2;\n+\n+    let a_usize: usize = 17;\n+    let b_usize: usize = 3;\n+    a_usize % b_usize;\n+    let mut a_usize: usize = 1;\n+    a_usize %= 2;\n+}"}, {"sha": "e863b838699e9dc5a3a61a97490ddd162de16944", "filename": "tests/ui/modulo_arithmetic_integral.stderr", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/8e493c6c8236cae769535fe55eedc74d6f63e46d/tests%2Fui%2Fmodulo_arithmetic_integral.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e493c6c8236cae769535fe55eedc74d6f63e46d/tests%2Fui%2Fmodulo_arithmetic_integral.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_integral.stderr?ref=8e493c6c8236cae769535fe55eedc74d6f63e46d", "patch": "@@ -0,0 +1,156 @@\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:15:5\n+   |\n+LL |     a % b;\n+   |     ^^^^^\n+   |\n+   = note: `-D clippy::modulo-arithmetic` implied by `-D warnings`\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:16:5\n+   |\n+LL |     b % a;\n+   |     ^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:17:5\n+   |\n+LL |     b %= a;\n+   |     ^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:21:5\n+   |\n+LL |     a_i8 % b_i8;\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:22:5\n+   |\n+LL |     b_i8 %= a_i8;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:26:5\n+   |\n+LL |     a_i16 % b_i16;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:27:5\n+   |\n+LL |     b_i16 %= a_i16;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:31:5\n+   |\n+LL |     a_i32 % b_i32;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:32:5\n+   |\n+LL |     b_i32 %= a_i32;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:36:5\n+   |\n+LL |     a_i64 % b_i64;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:37:5\n+   |\n+LL |     b_i64 %= a_i64;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:41:5\n+   |\n+LL |     a_i128 % b_i128;\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:42:5\n+   |\n+LL |     b_i128 %= a_i128;\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:46:5\n+   |\n+LL |     a_isize % b_isize;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:47:5\n+   |\n+LL |     b_isize %= a_isize;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:51:5\n+   |\n+LL |     a % b;\n+   |     ^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:52:5\n+   |\n+LL |     b %= a;\n+   |     ^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: aborting due to 17 previous errors\n+"}, {"sha": "57a96692c0097fb26d32857cf53ba75a412ed72e", "filename": "tests/ui/modulo_arithmetic_integral_const.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8e493c6c8236cae769535fe55eedc74d6f63e46d/tests%2Fui%2Fmodulo_arithmetic_integral_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e493c6c8236cae769535fe55eedc74d6f63e46d/tests%2Fui%2Fmodulo_arithmetic_integral_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_integral_const.rs?ref=8e493c6c8236cae769535fe55eedc74d6f63e46d", "patch": "@@ -0,0 +1,44 @@\n+#![warn(clippy::modulo_arithmetic)]\n+#![allow(\n+    unused,\n+    clippy::shadow_reuse,\n+    clippy::shadow_unrelated,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::modulo_one\n+)]\n+\n+fn main() {\n+    // Lint when both sides are const and of the opposite sign\n+    -1 % 2;\n+    1 % -2;\n+    (1 - 2) % (1 + 2);\n+    (1 + 2) % (1 - 2);\n+    35 * (7 - 4 * 2) % (-500 * -600);\n+\n+    -1i8 % 2i8;\n+    1i8 % -2i8;\n+    -1i16 % 2i16;\n+    1i16 % -2i16;\n+    -1i32 % 2i32;\n+    1i32 % -2i32;\n+    -1i64 % 2i64;\n+    1i64 % -2i64;\n+    -1i128 % 2i128;\n+    1i128 % -2i128;\n+    -1isize % 2isize;\n+    1isize % -2isize;\n+\n+    // No lint when both sides are const and of the same sign\n+    1 % 2;\n+    -1 % -2;\n+    (1 + 2) % (-1 + 2);\n+    (-1 - 2) % (1 - 2);\n+\n+    1u8 % 2u8;\n+    1u16 % 2u16;\n+    1u32 % 2u32;\n+    1u64 % 2u64;\n+    1u128 % 2u128;\n+    1usize % 2usize;\n+}"}, {"sha": "de328bb75fe9160e7811f6f2f26a72e9333297c9", "filename": "tests/ui/modulo_arithmetic_integral_const.stderr", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/8e493c6c8236cae769535fe55eedc74d6f63e46d/tests%2Fui%2Fmodulo_arithmetic_integral_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e493c6c8236cae769535fe55eedc74d6f63e46d/tests%2Fui%2Fmodulo_arithmetic_integral_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_integral_const.stderr?ref=8e493c6c8236cae769535fe55eedc74d6f63e46d", "patch": "@@ -0,0 +1,156 @@\n+error: you are using modulo operator on constants with different signs: `-1 % 2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:13:5\n+   |\n+LL |     -1 % 2;\n+   |     ^^^^^^\n+   |\n+   = note: `-D clippy::modulo-arithmetic` implied by `-D warnings`\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `1 % -2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:14:5\n+   |\n+LL |     1 % -2;\n+   |     ^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `-1 % 3`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:15:5\n+   |\n+LL |     (1 - 2) % (1 + 2);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `3 % -1`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:16:5\n+   |\n+LL |     (1 + 2) % (1 - 2);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `-35 % 300000`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:17:5\n+   |\n+LL |     35 * (7 - 4 * 2) % (-500 * -600);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `-1 % 2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:19:5\n+   |\n+LL |     -1i8 % 2i8;\n+   |     ^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `1 % -2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:20:5\n+   |\n+LL |     1i8 % -2i8;\n+   |     ^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `-1 % 2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:21:5\n+   |\n+LL |     -1i16 % 2i16;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `1 % -2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:22:5\n+   |\n+LL |     1i16 % -2i16;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `-1 % 2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:23:5\n+   |\n+LL |     -1i32 % 2i32;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `1 % -2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:24:5\n+   |\n+LL |     1i32 % -2i32;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `-1 % 2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:25:5\n+   |\n+LL |     -1i64 % 2i64;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `1 % -2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:26:5\n+   |\n+LL |     1i64 % -2i64;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `-1 % 2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:27:5\n+   |\n+LL |     -1i128 % 2i128;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `1 % -2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:28:5\n+   |\n+LL |     1i128 % -2i128;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `-1 % 2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:29:5\n+   |\n+LL |     -1isize % 2isize;\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `1 % -2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:30:5\n+   |\n+LL |     1isize % -2isize;\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: aborting due to 17 previous errors\n+"}]}