{"sha": "2bcc3a93025894345674c8d714b1bf3c5fec7f6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiY2MzYTkzMDI1ODk0MzQ1Njc0YzhkNzE0YjFiZjNjNWZlYzdmNmM=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-09-28T02:06:29Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-09-28T02:06:29Z"}, "message": "do not format a code block in documentation if it is annotated with ignore or text (#3058)", "tree": {"sha": "7f7892ecafdfc2c48f4a201e0e20300a2c3223c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f7892ecafdfc2c48f4a201e0e20300a2c3223c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bcc3a93025894345674c8d714b1bf3c5fec7f6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bcc3a93025894345674c8d714b1bf3c5fec7f6c", "html_url": "https://github.com/rust-lang/rust/commit/2bcc3a93025894345674c8d714b1bf3c5fec7f6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bcc3a93025894345674c8d714b1bf3c5fec7f6c/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90692a5917ac595a9d6b68b88c5f1ad4485670f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/90692a5917ac595a9d6b68b88c5f1ad4485670f9", "html_url": "https://github.com/rust-lang/rust/commit/90692a5917ac595a9d6b68b88c5f1ad4485670f9"}], "stats": {"total": 174, "additions": 161, "deletions": 13}, "files": [{"sha": "b561e411f9ecf5e0ddd1c15aa7d1ef7d2c182474", "filename": "src/comment.rs", "status": "modified", "additions": 50, "deletions": 13, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/2bcc3a93025894345674c8d714b1bf3c5fec7f6c/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bcc3a93025894345674c8d714b1bf3c5fec7f6c/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=2bcc3a93025894345674c8d714b1bf3c5fec7f6c", "patch": "@@ -407,6 +407,31 @@ fn light_rewrite_block_comment_with_bare_lines(\n     Some(format!(\"{}\\n{}{}\", first_line, indent_str, rest))\n }\n \n+/// Attributes for code blocks in rustdoc.\n+/// See https://doc.rust-lang.org/rustdoc/print.html#attributes\n+enum CodeBlockAttribute {\n+    Rust,\n+    Ignore,\n+    Text,\n+    ShouldPanic,\n+    NoRun,\n+    CompileFail,\n+}\n+\n+impl CodeBlockAttribute {\n+    fn new(attribute: &str) -> CodeBlockAttribute {\n+        match attribute {\n+            \"rust\" | \"\" => CodeBlockAttribute::Rust,\n+            \"ignore\" => CodeBlockAttribute::Ignore,\n+            \"text\" => CodeBlockAttribute::Text,\n+            \"should_panic\" => CodeBlockAttribute::ShouldPanic,\n+            \"no_run\" => CodeBlockAttribute::NoRun,\n+            \"compile_fail\" => CodeBlockAttribute::CompileFail,\n+            _ => CodeBlockAttribute::Text,\n+        }\n+    }\n+}\n+\n fn rewrite_comment_inner(\n     orig: &str,\n     block_style: bool,\n@@ -466,7 +491,7 @@ fn rewrite_comment_inner(\n     result.push_str(opener);\n     let mut code_block_buffer = String::with_capacity(128);\n     let mut is_prev_line_multi_line = false;\n-    let mut inside_code_block = false;\n+    let mut code_block_attr = None;\n     let comment_line_separator = format!(\"{}{}\", indent_str, line_start);\n     let join_code_block_with_comment_line_separator = |s: &str| {\n         let mut result = String::with_capacity(s.len() + 128);\n@@ -485,28 +510,36 @@ fn rewrite_comment_inner(\n     for (i, (line, has_leading_whitespace)) in lines.enumerate() {\n         let is_last = i == count_newlines(orig);\n \n-        if inside_code_block {\n+        if let Some(ref attr) = code_block_attr {\n             if line.starts_with(\"```\") {\n-                inside_code_block = false;\n-                result.push_str(&comment_line_separator);\n-                let code_block = {\n-                    let mut config = config.clone();\n-                    config.set().wrap_comments(false);\n-                    match ::format_code_block(&code_block_buffer, &config) {\n-                        Some(ref s) => trim_custom_comment_prefix(s),\n-                        None => trim_custom_comment_prefix(&code_block_buffer),\n+                let code_block = match attr {\n+                    CodeBlockAttribute::Ignore | CodeBlockAttribute::Text => {\n+                        trim_custom_comment_prefix(&code_block_buffer)\n+                    }\n+                    _ if code_block_buffer.is_empty() => String::new(),\n+                    _ => {\n+                        let mut config = config.clone();\n+                        config.set().wrap_comments(false);\n+                        match ::format_code_block(&code_block_buffer, &config) {\n+                            Some(ref s) => trim_custom_comment_prefix(s),\n+                            None => trim_custom_comment_prefix(&code_block_buffer),\n+                        }\n                     }\n                 };\n-                result.push_str(&join_code_block_with_comment_line_separator(&code_block));\n+                if !code_block.is_empty() {\n+                    result.push_str(&comment_line_separator);\n+                    result.push_str(&join_code_block_with_comment_line_separator(&code_block));\n+                }\n                 code_block_buffer.clear();\n                 result.push_str(&comment_line_separator);\n                 result.push_str(line);\n+                code_block_attr = None;\n             } else {\n                 code_block_buffer.push_str(&hide_sharp_behind_comment(line));\n                 code_block_buffer.push('\\n');\n \n                 if is_last {\n-                    // There is an code block that is not properly enclosed by backticks.\n+                    // There is a code block that is not properly enclosed by backticks.\n                     // We will leave them untouched.\n                     result.push_str(&comment_line_separator);\n                     result.push_str(&join_code_block_with_comment_line_separator(\n@@ -517,7 +550,11 @@ fn rewrite_comment_inner(\n \n             continue;\n         } else {\n-            inside_code_block = line.starts_with(\"```\");\n+            code_block_attr = if line.starts_with(\"```\") {\n+                Some(CodeBlockAttribute::new(&line[3..]))\n+            } else {\n+                None\n+            };\n \n             if result == opener {\n                 let force_leading_whitespace = opener == \"/* \" && count_newlines(orig) == 0;"}, {"sha": "1f7d33ac5ae9195520478f032d03d97efd5a17d8", "filename": "tests/source/issue-3055/original.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2bcc3a93025894345674c8d714b1bf3c5fec7f6c/tests%2Fsource%2Fissue-3055%2Foriginal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bcc3a93025894345674c8d714b1bf3c5fec7f6c/tests%2Fsource%2Fissue-3055%2Foriginal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3055%2Foriginal.rs?ref=2bcc3a93025894345674c8d714b1bf3c5fec7f6c", "patch": "@@ -0,0 +1,42 @@\n+// rustfmt-wrap_comments: true\n+\n+/// Vestibulum elit nibh, rhoncus non, euismod sit amet, pretium eu, enim. Nunc commodo ultricies dui.\n+///\n+/// Should not format with text attribute\n+/// ```text\n+///           .--------------.\n+///           |              v\n+/// Park <- Idle -> Poll -> Probe -> Download -> Install -> Reboot\n+///           ^      ^        '          '          '\n+///           '      '        '          '          '\n+///           '      `--------'          '          '\n+///           `---------------'          '          '\n+///           `--------------------------'          '\n+///           `-------------------------------------'\n+/// ```\n+///\n+/// Should not format with ignore attribute\n+/// ```ignore\n+///           .--------------.\n+///           |              v\n+/// Park <- Idle -> Poll -> Probe -> Download -> Install -> Reboot\n+///           ^      ^        '          '          '\n+///           '      '        '          '          '\n+///           '      `--------'          '          '\n+///           `---------------'          '          '\n+///           `--------------------------'          '\n+///           `-------------------------------------'\n+/// ```\n+///\n+/// Should format with rust attribute\n+/// ```rust\n+/// let x =\n+///    42;\n+/// ```\n+///\n+/// Should format with no attribute as it defaults to rust\n+/// ```\n+/// let x =\n+///    42;\n+/// ```\n+fn func() {}"}, {"sha": "f5bae8d3db4b86a10f04c594245af013e18e04f4", "filename": "tests/target/issue-3055/backtick.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2bcc3a93025894345674c8d714b1bf3c5fec7f6c/tests%2Ftarget%2Fissue-3055%2Fbacktick.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bcc3a93025894345674c8d714b1bf3c5fec7f6c/tests%2Ftarget%2Fissue-3055%2Fbacktick.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3055%2Fbacktick.rs?ref=2bcc3a93025894345674c8d714b1bf3c5fec7f6c", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-wrap_comments: true\n+\n+/// Simple block\n+///\n+/// ```text\n+///  `\n+/// ```\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "566f7ef9b6eacb5c40a7b6c2f98ee60d8f91608e", "filename": "tests/target/issue-3055/empty-code-block.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2bcc3a93025894345674c8d714b1bf3c5fec7f6c/tests%2Ftarget%2Fissue-3055%2Fempty-code-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bcc3a93025894345674c8d714b1bf3c5fec7f6c/tests%2Ftarget%2Fissue-3055%2Fempty-code-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3055%2Fempty-code-block.rs?ref=2bcc3a93025894345674c8d714b1bf3c5fec7f6c", "patch": "@@ -0,0 +1,18 @@\n+// rustfmt-wrap_comments: true\n+\n+/// Simple block\n+///\n+/// ```\n+/// ```\n+///\n+/// ```no_run\n+/// ```\n+///\n+/// ```should_panic\n+/// ```\n+///\n+/// ```compile_fail\n+/// ```\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "1455ac1a916eba1c1868363c04b5ec5eee1fc7d4", "filename": "tests/target/issue-3055/original.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2bcc3a93025894345674c8d714b1bf3c5fec7f6c/tests%2Ftarget%2Fissue-3055%2Foriginal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bcc3a93025894345674c8d714b1bf3c5fec7f6c/tests%2Ftarget%2Fissue-3055%2Foriginal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3055%2Foriginal.rs?ref=2bcc3a93025894345674c8d714b1bf3c5fec7f6c", "patch": "@@ -0,0 +1,41 @@\n+// rustfmt-wrap_comments: true\n+\n+/// Vestibulum elit nibh, rhoncus non, euismod sit amet, pretium eu, enim. Nunc\n+/// commodo ultricies dui.\n+///\n+/// Should not format with text attribute\n+/// ```text\n+///           .--------------.\n+///           |              v\n+/// Park <- Idle -> Poll -> Probe -> Download -> Install -> Reboot\n+///           ^      ^        '          '          '\n+///           '      '        '          '          '\n+///           '      `--------'          '          '\n+///           `---------------'          '          '\n+///           `--------------------------'          '\n+///           `-------------------------------------'\n+/// ```\n+///\n+/// Should not format with ignore attribute\n+/// ```ignore\n+///           .--------------.\n+///           |              v\n+/// Park <- Idle -> Poll -> Probe -> Download -> Install -> Reboot\n+///           ^      ^        '          '          '\n+///           '      '        '          '          '\n+///           '      `--------'          '          '\n+///           `---------------'          '          '\n+///           `--------------------------'          '\n+///           `-------------------------------------'\n+/// ```\n+///\n+/// Should format with rust attribute\n+/// ```rust\n+/// let x = 42;\n+/// ```\n+///\n+/// Should format with no attribute as it defaults to rust\n+/// ```\n+/// let x = 42;\n+/// ```\n+fn func() {}"}]}