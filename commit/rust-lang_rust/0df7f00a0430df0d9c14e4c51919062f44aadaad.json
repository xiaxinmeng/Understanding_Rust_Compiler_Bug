{"sha": "0df7f00a0430df0d9c14e4c51919062f44aadaad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZjdmMDBhMDQzMGRmMGQ5YzE0ZTRjNTE5MTkwNjJmNDRhYWRhYWQ=", "commit": {"author": {"name": "Jeroen Bollen", "email": "contact@jeroenbollen.eu", "date": "2017-10-09T19:06:20Z"}, "committer": {"name": "Jeroen Bollen", "email": "contact@jeroenbollen.eu", "date": "2017-11-11T15:23:16Z"}, "message": "Addressed issues raised in #44286.\n\nThis commit renames the `replace` function to `replace_entry`, and\ncreates a seperate `replace_key` function for `OccupiedEntry`. The\noriginal `replace` function did not solve the use-case where the\nkey needed to be replaced, but not the value. Documentation and\nnaming has also been updated to better reflect what the original\nreplace function does.", "tree": {"sha": "8cc288e94b59604aeba6ea697728d82571b0df00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cc288e94b59604aeba6ea697728d82571b0df00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0df7f00a0430df0d9c14e4c51919062f44aadaad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0df7f00a0430df0d9c14e4c51919062f44aadaad", "html_url": "https://github.com/rust-lang/rust/commit/0df7f00a0430df0d9c14e4c51919062f44aadaad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0df7f00a0430df0d9c14e4c51919062f44aadaad/comments", "author": {"login": "Binero", "id": 6867251, "node_id": "MDQ6VXNlcjY4NjcyNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/6867251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Binero", "html_url": "https://github.com/Binero", "followers_url": "https://api.github.com/users/Binero/followers", "following_url": "https://api.github.com/users/Binero/following{/other_user}", "gists_url": "https://api.github.com/users/Binero/gists{/gist_id}", "starred_url": "https://api.github.com/users/Binero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Binero/subscriptions", "organizations_url": "https://api.github.com/users/Binero/orgs", "repos_url": "https://api.github.com/users/Binero/repos", "events_url": "https://api.github.com/users/Binero/events{/privacy}", "received_events_url": "https://api.github.com/users/Binero/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Binero", "id": 6867251, "node_id": "MDQ6VXNlcjY4NjcyNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/6867251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Binero", "html_url": "https://github.com/Binero", "followers_url": "https://api.github.com/users/Binero/followers", "following_url": "https://api.github.com/users/Binero/following{/other_user}", "gists_url": "https://api.github.com/users/Binero/gists{/gist_id}", "starred_url": "https://api.github.com/users/Binero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Binero/subscriptions", "organizations_url": "https://api.github.com/users/Binero/orgs", "repos_url": "https://api.github.com/users/Binero/repos", "events_url": "https://api.github.com/users/Binero/events{/privacy}", "received_events_url": "https://api.github.com/users/Binero/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69ee5a8a9787336f8635ec12ed0c6199a70505e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/69ee5a8a9787336f8635ec12ed0c6199a70505e0", "html_url": "https://github.com/rust-lang/rust/commit/69ee5a8a9787336f8635ec12ed0c6199a70505e0"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "cac6d5ab76714d34b932e3b30823b6b36133aaa5", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0df7f00a0430df0d9c14e4c51919062f44aadaad/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df7f00a0430df0d9c14e4c51919062f44aadaad/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=0df7f00a0430df0d9c14e4c51919062f44aadaad", "patch": "@@ -2239,35 +2239,57 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n         self.key.take()\n     }\n \n-    /// Replaces the entry, returning the old key and value.\n+    /// Replaces the entry, returning the old key and value. The new key in the hash map will be\n+    /// the key used to create this entry.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(map_entry_replace)]\n-    /// use std::collections::HashMap;\n-    /// use std::collections::hash_map::Entry;\n+    /// use std::collections::hash_map::{Entry, HashMap};\n     ///\n     /// let mut map: HashMap<String, u32> = HashMap::new();\n     /// map.insert(\"poneyland\".to_string(), 15);\n     ///\n     /// if let Entry::Occupied(entry) = map.entry(\"poneyland\".to_string()) {\n-    ///     let (old_key, old_value): (String, u32) = entry.replace(16);\n+    ///     let (old_key, old_value): (String, u32) = entry.replace_entry(16);\n     ///     assert_eq!(old_key, \"poneyland\");\n     ///     assert_eq!(old_value, 15);\n     /// }\n     ///\n     /// assert_eq!(map.get(\"poneyland\"), Some(&16));\n     /// ```\n     #[unstable(feature = \"map_entry_replace\", issue = \"44286\")]\n-    pub fn replace(mut self, value: V) -> (K, V) {\n+    pub fn replace_entry(mut self, value: V) -> (K, V) {\n         let (old_key, old_value) = self.elem.read_mut();\n \n         let old_key = mem::replace(old_key, self.key.unwrap());\n         let old_value = mem::replace(old_value, value);\n \n         (old_key, old_value)\n     }\n+\n+    /// Replaces the key in the hash map with the key used to create this entry.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_entry_replace)]\n+    /// use std::collections::hash_map::{Entry, HashMap};\n+    ///\n+    /// let mut map: HashMap<String, u32> = HashMap::new();\n+    /// map.insert(\"poneyland\".to_string(), 15);\n+    ///\n+    /// if let Entry::Occupied(entry) = map.entry(\"poneyland\".to_string()) {\n+    ///     let old_key = entry.replace_key();\n+    ///     assert_eq!(old_key, \"poneyland\");\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"map_entry_replace\", issue = \"44286\")]\n+    pub fn replace_key(mut self) -> K {\n+\tlet (old_key, _) = self.elem.read_mut();\n+\tmem::replace(old_key, self.key.unwrap())\n+    }\n }\n \n impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {"}]}