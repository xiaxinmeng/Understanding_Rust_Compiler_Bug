{"sha": "3ed1e79cc40133b6cdb65955c7433cc483a89ca8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZDFlNzljYzQwMTMzYjZjZGI2NTk1NWM3NDMzY2M0ODNhODljYTg=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-24T01:04:49Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-24T01:04:49Z"}, "message": "Properly handle InlineAsmOperand::SymFn when collecting monomorphized items\n\nFixes #72484", "tree": {"sha": "26209bd7f48deaf082b0d1dcd25b8a43d7f095c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26209bd7f48deaf082b0d1dcd25b8a43d7f095c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ed1e79cc40133b6cdb65955c7433cc483a89ca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed1e79cc40133b6cdb65955c7433cc483a89ca8", "html_url": "https://github.com/rust-lang/rust/commit/3ed1e79cc40133b6cdb65955c7433cc483a89ca8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ed1e79cc40133b6cdb65955c7433cc483a89ca8/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "html_url": "https://github.com/rust-lang/rust/commit/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "2a6d1abba9e9dc3f588be30b7c0d2e1681b41031", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ed1e79cc40133b6cdb65955c7433cc483a89ca8/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed1e79cc40133b6cdb65955c7433cc483a89ca8/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=3ed1e79cc40133b6cdb65955c7433cc483a89ca8", "patch": "@@ -908,13 +908,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 mir::InlineAsmOperand::SymFn { ref value } => {\n                     let literal = self.monomorphize(&value.literal);\n                     if let ty::FnDef(def_id, substs) = literal.ty.kind {\n-                        let instance = ty::Instance::resolve(\n+                        let instance = ty::Instance::resolve_for_fn_ptr(\n                             bx.tcx(),\n                             ty::ParamEnv::reveal_all(),\n                             def_id,\n                             substs,\n                         )\n-                        .unwrap()\n                         .unwrap();\n                         InlineAsmOperandRef::SymFn { instance }\n                     } else {"}, {"sha": "3b05ffa567f86cfc7fb021e7a80d8818c753730b", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3ed1e79cc40133b6cdb65955c7433cc483a89ca8/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed1e79cc40133b6cdb65955c7433cc483a89ca8/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=3ed1e79cc40133b6cdb65955c7433cc483a89ca8", "patch": "@@ -633,14 +633,21 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 let ty = self.monomorphize(ty);\n                 visit_drop_use(self.tcx, ty, true, self.output);\n             }\n+            mir::TerminatorKind::InlineAsm { ref operands, .. } => {\n+                for op in operands {\n+                    if let mir::InlineAsmOperand::SymFn { value } = op {\n+                        let fn_ty = self.monomorphize(value.literal.ty);\n+                        visit_fn_use(self.tcx, fn_ty, false, &mut self.output);\n+                    }\n+                }\n+            }\n             mir::TerminatorKind::Goto { .. }\n             | mir::TerminatorKind::SwitchInt { .. }\n             | mir::TerminatorKind::Resume\n             | mir::TerminatorKind::Abort\n             | mir::TerminatorKind::Return\n             | mir::TerminatorKind::Unreachable\n-            | mir::TerminatorKind::Assert { .. }\n-            | mir::TerminatorKind::InlineAsm { .. } => {}\n+            | mir::TerminatorKind::Assert { .. } => {}\n             mir::TerminatorKind::GeneratorDrop\n             | mir::TerminatorKind::Yield { .. }\n             | mir::TerminatorKind::FalseEdges { .. }"}, {"sha": "83a3672af49ce620b3b534a0587c689889d5c660", "filename": "src/test/ui/asm/sym.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3ed1e79cc40133b6cdb65955c7433cc483a89ca8/src%2Ftest%2Fui%2Fasm%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed1e79cc40133b6cdb65955c7433cc483a89ca8/src%2Ftest%2Fui%2Fasm%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fsym.rs?ref=3ed1e79cc40133b6cdb65955c7433cc483a89ca8", "patch": "@@ -0,0 +1,38 @@\n+// no-system-llvm\n+// only-x86_64\n+// run-pass\n+\n+#![feature(asm, track_caller)]\n+\n+extern \"C\" fn f1() -> i32 {\n+    111\n+}\n+\n+// The compiler will generate a shim to hide the caller location parameter.\n+#[track_caller]\n+fn f2() -> i32 {\n+    222\n+}\n+\n+macro_rules! call {\n+    ($func:path) => {{\n+        let result: i32;\n+        unsafe {\n+            asm!(\"call {}\", sym $func,\n+                out(\"rax\") result,\n+                out(\"rcx\") _, out(\"rdx\") _, out(\"rdi\") _, out(\"rsi\") _,\n+                out(\"r8\") _, out(\"r9\") _, out(\"r10\") _, out(\"r11\") _,\n+                out(\"xmm0\") _, out(\"xmm1\") _, out(\"xmm2\") _, out(\"xmm3\") _,\n+                out(\"xmm4\") _, out(\"xmm5\") _, out(\"xmm6\") _, out(\"xmm7\") _,\n+                out(\"xmm8\") _, out(\"xmm9\") _, out(\"xmm10\") _, out(\"xmm11\") _,\n+                out(\"xmm12\") _, out(\"xmm13\") _, out(\"xmm14\") _, out(\"xmm15\") _,\n+            );\n+        }\n+        result\n+    }}\n+}\n+\n+fn main() {\n+    assert_eq!(call!(f1), 111);\n+    assert_eq!(call!(f2), 222);\n+}"}]}