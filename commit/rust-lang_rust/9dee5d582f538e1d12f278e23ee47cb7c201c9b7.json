{"sha": "9dee5d582f538e1d12f278e23ee47cb7c201c9b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkZWU1ZDU4MmY1MzhlMWQxMmYyNzhlMjNlZTQ3Y2I3YzIwMWM5Yjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-01-03T12:31:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-01-16T17:43:51Z"}, "message": "fix rustfmt fallout", "tree": {"sha": "39de84f91f50ccb7464bd77eccd3018345c7b09c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39de84f91f50ccb7464bd77eccd3018345c7b09c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dee5d582f538e1d12f278e23ee47cb7c201c9b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dee5d582f538e1d12f278e23ee47cb7c201c9b7", "html_url": "https://github.com/rust-lang/rust/commit/9dee5d582f538e1d12f278e23ee47cb7c201c9b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c74353c7d2e61b111a9241490b9fbbd1ebe491fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c74353c7d2e61b111a9241490b9fbbd1ebe491fe", "html_url": "https://github.com/rust-lang/rust/commit/c74353c7d2e61b111a9241490b9fbbd1ebe491fe"}], "stats": {"total": 88, "additions": 48, "deletions": 40}, "files": [{"sha": "29b3b045ca5fe6ca173838da9c2007834d9cab79", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=9dee5d582f538e1d12f278e23ee47cb7c201c9b7", "patch": "@@ -33,7 +33,7 @@ impl ErrorHandled {\n             ErrorHandled::Reported => {}\n             ErrorHandled::TooGeneric => bug!(\n                 \"MIR interpretation failed without reporting an error \\\n-                                              even though it was fully monomorphized\"\n+                 even though it was fully monomorphized\"\n             ),\n         }\n     }\n@@ -137,7 +137,8 @@ impl<'tcx> ConstEvalErr<'tcx> {\n     ) -> Result<DiagnosticBuilder<'tcx>, ErrorHandled> {\n         let must_error = match self.error {\n             InterpError::MachineStop(_) => bug!(\"CTFE does not stop\"),\n-            err_inval!(Layout(LayoutError::Unknown(_))) | err_inval!(TooGeneric) => {\n+            err_inval!(Layout(LayoutError::Unknown(_)))\n+            | err_inval!(TooGeneric) => {\n                 return Err(ErrorHandled::TooGeneric);\n             }\n             err_inval!(TypeckError) => return Err(ErrorHandled::Reported),"}, {"sha": "e554b280ef78cbc8723d559869c455a66a847fb4", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=9dee5d582f538e1d12f278e23ee47cb7c201c9b7", "patch": "@@ -403,8 +403,8 @@ impl<'tcx> AllocMap<'tcx> {\n         let next = self.next_id;\n         self.next_id.0 = self.next_id.0.checked_add(1).expect(\n             \"You overflowed a u64 by incrementing by 1... \\\n-                     You've just earned yourself a free drink if we ever meet. \\\n-                     Seriously, how did you do that?!\",\n+             You've just earned yourself a free drink if we ever meet. \\\n+             Seriously, how did you do that?!\",\n         );\n         next\n     }"}, {"sha": "6d0b6bf70ad8c624eae75b451fd99a5031ce0ddd", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=9dee5d582f538e1d12f278e23ee47cb7c201c9b7", "patch": "@@ -118,15 +118,17 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n             // The rest is integer/pointer-\"like\", including fn ptr casts and casts from enums that\n             // are represented as integers.\n-            _ => assert!(\n-                src.layout.ty.is_bool()\n-                    || src.layout.ty.is_char()\n-                    || src.layout.ty.is_enum()\n-                    || src.layout.ty.is_integral()\n-                    || src.layout.ty.is_any_ptr(),\n-                \"Unexpected cast from type {:?}\",\n-                src.layout.ty\n-            ),\n+            _ => {\n+                assert!(\n+                    src.layout.ty.is_bool()\n+                        || src.layout.ty.is_char()\n+                        || src.layout.ty.is_enum()\n+                        || src.layout.ty.is_integral()\n+                        || src.layout.ty.is_any_ptr(),\n+                    \"Unexpected cast from type {:?}\",\n+                    src.layout.ty\n+                )\n+            }\n         }\n \n         // Handle cast from a univariant (ZST) enum."}, {"sha": "3d590fb8203595e5a7aa1a33f91dc52a2c1869bb", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=9dee5d582f538e1d12f278e23ee47cb7c201c9b7", "patch": "@@ -152,10 +152,16 @@ impl<'tcx, Tag: Copy + 'static> LocalState<'tcx, Tag> {\n         &mut self,\n     ) -> InterpResult<'tcx, Result<&mut LocalValue<Tag>, MemPlace<Tag>>> {\n         match self.value {\n-            LocalValue::Dead => throw_unsup!(DeadLocal),\n-            LocalValue::Live(Operand::Indirect(mplace)) => Ok(Err(mplace)),\n+            LocalValue::Dead => {\n+                throw_unsup!(DeadLocal)\n+            }\n+            LocalValue::Live(Operand::Indirect(mplace)) => {\n+                Ok(Err(mplace))\n+            }\n             ref mut local @ LocalValue::Live(Operand::Immediate(_))\n-            | ref mut local @ LocalValue::Uninitialized => Ok(Ok(local)),\n+            | ref mut local @ LocalValue::Uninitialized => {\n+                Ok(Ok(local))\n+            }\n         }\n     }\n }"}, {"sha": "3386254c93b75a560dc19418078a5b179993ac47", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=9dee5d582f538e1d12f278e23ee47cb7c201c9b7", "patch": "@@ -581,9 +581,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 Ok((layout.size, layout.align.abi))\n             }\n             Some(GlobalAlloc::Memory(alloc)) =>\n-            // Need to duplicate the logic here, because the global allocations have\n-            // different associated types than the interpreter-local ones.\n             {\n+                // Need to duplicate the logic here, because the global allocations have\n+                // different associated types than the interpreter-local ones.\n                 Ok((alloc.size, alloc.align))\n             }\n             Some(GlobalAlloc::Function(_)) => bug!(\"We already checked function pointers above\"),"}, {"sha": "34a32daaab65fcb511226f460ef8ccf0d694661c", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=9dee5d582f538e1d12f278e23ee47cb7c201c9b7", "patch": "@@ -543,7 +543,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | ty::ConstKind::Placeholder(..) => {\n                 bug!(\"eval_const_to_op: Unexpected ConstKind {:?}\", val)\n             }\n-            ty::ConstKind::Value(val_val) => val_val,\n+            ty::ConstKind::Value(val_val) => {\n+                val_val\n+            }\n         };\n         // Other cases need layout.\n         let layout = from_known_layout(layout, || self.layout_of(val.ty))?;\n@@ -684,16 +686,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             let variant_index = variants_start\n                                 .checked_add(variant_index_relative)\n                                 .expect(\"oveflow computing absolute variant idx\");\n-                            assert!(\n-                                (variant_index as usize)\n-                                    < rval\n-                                        .layout\n-                                        .ty\n-                                        .ty_adt_def()\n-                                        .expect(\"tagged layout for non adt\")\n-                                        .variants\n-                                        .len()\n-                            );\n+                            let variants_len = rval\n+                                .layout\n+                                .ty\n+                                .ty_adt_def()\n+                                .expect(\"tagged layout for non adt\")\n+                                .variants\n+                                .len();\n+                            assert!((variant_index as usize) < variants_len);\n                             (u128::from(variant_index), VariantIdx::from_u32(variant_index))\n                         } else {\n                             (u128::from(dataful_variant.as_u32()), dataful_variant)"}, {"sha": "4f96cb698915d25146c45e2bff6d9528bf49e772", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=9dee5d582f538e1d12f278e23ee47cb7c201c9b7", "patch": "@@ -432,12 +432,11 @@ where\n             // happens at run-time so that's okay.\n             let align = match self.size_and_align_of(base.meta, field_layout)? {\n                 Some((_, align)) => align,\n-                None if offset == Size::ZERO =>\n-                // An extern type at offset 0, we fall back to its static alignment.\n-                // FIXME: Once we have made decisions for how to handle size and alignment\n-                // of `extern type`, this should be adapted.  It is just a temporary hack\n-                // to get some code to work that probably ought to work.\n-                {\n+                None if offset == Size::ZERO => {\n+                    // An extern type at offset 0, we fall back to its static alignment.\n+                    // FIXME: Once we have made decisions for how to handle size and alignment\n+                    // of `extern type`, this should be adapted.  It is just a temporary hack\n+                    // to get some code to work that probably ought to work.\n                     field_layout.align.abi\n                 }\n                 None => bug!(\"Cannot compute offset for extern type field at non-0 offset\"),"}, {"sha": "d0fef08bb60c743034e73da2dcc9f8b83be79a8b", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee5d582f538e1d12f278e23ee47cb7c201c9b7/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=9dee5d582f538e1d12f278e23ee47cb7c201c9b7", "patch": "@@ -115,11 +115,11 @@ fn write_path(out: &mut String, path: &Vec<PathElem>) {\n             TupleElem(idx) => write!(out, \".{}\", idx),\n             ArrayElem(idx) => write!(out, \"[{}]\", idx),\n             Deref =>\n-            // This does not match Rust syntax, but it is more readable for long paths -- and\n-            // some of the other items here also are not Rust syntax.  Actually we can't\n-            // even use the usual syntax because we are just showing the projections,\n-            // not the root.\n             {\n+                // This does not match Rust syntax, but it is more readable for long paths -- and\n+                // some of the other items here also are not Rust syntax.  Actually we can't\n+                // even use the usual syntax because we are just showing the projections,\n+                // not the root.\n                 write!(out, \".<deref>\")\n             }\n             Tag => write!(out, \".<enum-tag>\"),\n@@ -207,8 +207,8 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n                 // we might be projecting *to* a variant, or to a field *in*a variant.\n                 match layout.variants {\n                     layout::Variants::Single { index } =>\n-                    // Inside a variant\n                     {\n+                        // Inside a variant\n                         PathElem::Field(def.variants[index].fields[field].ident.name)\n                     }\n                     _ => bug!(),"}]}