{"sha": "e55ed520039983b322bff424e1a1dfa777d401d2", "node_id": "C_kwDOAAsO6NoAKGU1NWVkNTIwMDM5OTgzYjMyMmJmZjQyNGUxYTFkZmE3NzdkNDAxZDI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-23T17:09:53Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-26T17:37:40Z"}, "message": "Simplify", "tree": {"sha": "ed632d57854e5e4f595ff57e7403faab728b8f1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed632d57854e5e4f595ff57e7403faab728b8f1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e55ed520039983b322bff424e1a1dfa777d401d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e55ed520039983b322bff424e1a1dfa777d401d2", "html_url": "https://github.com/rust-lang/rust/commit/e55ed520039983b322bff424e1a1dfa777d401d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e55ed520039983b322bff424e1a1dfa777d401d2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e30747dfa885d3e4e4cd0b5efcd740ea037a524c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e30747dfa885d3e4e4cd0b5efcd740ea037a524c", "html_url": "https://github.com/rust-lang/rust/commit/e30747dfa885d3e4e4cd0b5efcd740ea037a524c"}], "stats": {"total": 86, "additions": 40, "deletions": 46}, "files": [{"sha": "4bde87b8d486f7b2469b135529cfb89239fb9d15", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e55ed520039983b322bff424e1a1dfa777d401d2/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55ed520039983b322bff424e1a1dfa777d401d2/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=e55ed520039983b322bff424e1a1dfa777d401d2", "patch": "@@ -144,6 +144,37 @@ impl ItemTree {\n         Arc::new(item_tree)\n     }\n \n+    /// Returns an iterator over all items located at the top level of the `HirFileId` this\n+    /// `ItemTree` was created from.\n+    pub fn top_level_items(&self) -> &[ModItem] {\n+        &self.top_level\n+    }\n+\n+    /// Returns the inner attributes of the source file.\n+    pub fn top_level_attrs(&self, db: &dyn DefDatabase, krate: CrateId) -> Attrs {\n+        self.attrs.get(&AttrOwner::TopLevel).unwrap_or(&RawAttrs::EMPTY).clone().filter(db, krate)\n+    }\n+\n+    pub(crate) fn raw_attrs(&self, of: AttrOwner) -> &RawAttrs {\n+        self.attrs.get(&of).unwrap_or(&RawAttrs::EMPTY)\n+    }\n+\n+    pub(crate) fn attrs(&self, db: &dyn DefDatabase, krate: CrateId, of: AttrOwner) -> Attrs {\n+        self.raw_attrs(of).clone().filter(db, krate)\n+    }\n+\n+    pub fn pretty_print(&self) -> String {\n+        pretty::print_item_tree(self)\n+    }\n+\n+    fn data(&self) -> &ItemTreeData {\n+        self.data.as_ref().expect(\"attempted to access data of empty ItemTree\")\n+    }\n+\n+    fn data_mut(&mut self) -> &mut ItemTreeData {\n+        self.data.get_or_insert_with(Box::default)\n+    }\n+\n     fn block_item_tree(db: &dyn DefDatabase, block: BlockId) -> Arc<ItemTree> {\n         let loc = db.lookup_intern_block(block);\n         let block = loc.ast_id.to_node(db.upcast());\n@@ -199,37 +230,6 @@ impl ItemTree {\n             vis.arena.shrink_to_fit();\n         }\n     }\n-\n-    /// Returns an iterator over all items located at the top level of the `HirFileId` this\n-    /// `ItemTree` was created from.\n-    pub fn top_level_items(&self) -> &[ModItem] {\n-        &self.top_level\n-    }\n-\n-    /// Returns the inner attributes of the source file.\n-    pub fn top_level_attrs(&self, db: &dyn DefDatabase, krate: CrateId) -> Attrs {\n-        self.attrs.get(&AttrOwner::TopLevel).unwrap_or(&RawAttrs::EMPTY).clone().filter(db, krate)\n-    }\n-\n-    pub(crate) fn raw_attrs(&self, of: AttrOwner) -> &RawAttrs {\n-        self.attrs.get(&of).unwrap_or(&RawAttrs::EMPTY)\n-    }\n-\n-    pub(crate) fn attrs(&self, db: &dyn DefDatabase, krate: CrateId, of: AttrOwner) -> Attrs {\n-        self.raw_attrs(of).clone().filter(db, krate)\n-    }\n-\n-    pub fn pretty_print(&self) -> String {\n-        pretty::print_item_tree(self)\n-    }\n-\n-    fn data(&self) -> &ItemTreeData {\n-        self.data.as_ref().expect(\"attempted to access data of empty ItemTree\")\n-    }\n-\n-    fn data_mut(&mut self) -> &mut ItemTreeData {\n-        self.data.get_or_insert_with(Box::default)\n-    }\n }\n \n #[derive(Default, Debug, Eq, PartialEq)]"}, {"sha": "14b26bcf45293e6fdf60b42f3d3c650570ece95b", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e55ed520039983b322bff424e1a1dfa777d401d2/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55ed520039983b322bff424e1a1dfa777d401d2/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=e55ed520039983b322bff424e1a1dfa777d401d2", "patch": "@@ -3,7 +3,7 @@\n //! `DefCollector::collect` contains the fixed-point iteration loop which\n //! resolves imports and expands macros.\n \n-use std::iter;\n+use std::{iter, mem};\n \n use base_db::{CrateId, Edition, FileId};\n use cfg::{CfgExpr, CfgOptions};\n@@ -15,9 +15,9 @@ use hir_expand::{\n     builtin_fn_macro::find_builtin_macro,\n     name::{name, AsName, Name},\n     proc_macro::ProcMacroExpander,\n-    ExpandTo, HirFileId, MacroCallId, MacroCallKind, MacroDefId, MacroDefKind,\n+    ExpandTo, HirFileId, InFile, MacroCallId, MacroCallKind, MacroCallLoc, MacroDefId,\n+    MacroDefKind,\n };\n-use hir_expand::{InFile, MacroCallLoc};\n use itertools::Itertools;\n use la_arena::Idx;\n use limit::Limit;\n@@ -101,7 +101,6 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n         mod_dirs: FxHashMap::default(),\n         cfg_options,\n         proc_macros,\n-        exports_proc_macros: false,\n         from_glob_import: Default::default(),\n         skip_attrs: Default::default(),\n         derive_helpers_in_scope: Default::default(),\n@@ -247,7 +246,6 @@ struct DefCollector<'a> {\n     /// them).\n     proc_macros: Vec<(Name, ProcMacroExpander)>,\n     is_proc_macro: bool,\n-    exports_proc_macros: bool,\n     from_glob_import: PerNsGlobImports,\n     /// If we fail to resolve an attribute on a `ModItem`, we fall back to ignoring the attribute.\n     /// This map is used to skip all attributes up to and including the one that failed to resolve,\n@@ -403,10 +401,10 @@ impl DefCollector<'_> {\n         self.unresolved_imports.extend(partial_resolved);\n         self.resolve_imports();\n \n-        let unresolved_imports = std::mem::take(&mut self.unresolved_imports);\n+        let unresolved_imports = mem::take(&mut self.unresolved_imports);\n         // show unresolved imports in completion, etc\n         for directive in &unresolved_imports {\n-            self.record_resolved_import(directive)\n+            self.record_resolved_import(directive);\n         }\n         self.unresolved_imports = unresolved_imports;\n \n@@ -435,7 +433,7 @@ impl DefCollector<'_> {\n     fn reseed_with_unresolved_attribute(&mut self) -> ReachedFixedPoint {\n         cov_mark::hit!(unresolved_attribute_fallback);\n \n-        let mut unresolved_macros = std::mem::take(&mut self.unresolved_macros);\n+        let mut unresolved_macros = mem::take(&mut self.unresolved_macros);\n         let pos = unresolved_macros.iter().position(|directive| {\n             if let MacroDirectiveKind::Attr { ast_id, mod_item, attr, tree } = &directive.kind {\n                 self.skip_attrs.insert(ast_id.ast_id.with_value(*mod_item), attr.id);\n@@ -458,10 +456,9 @@ impl DefCollector<'_> {\n         });\n \n         if let Some(pos) = pos {\n-            unresolved_macros.remove(pos);\n+            unresolved_macros.swap_remove(pos);\n         }\n \n-        // The collection above might add new unresolved macros (eg. derives), so merge the lists.\n         self.unresolved_macros.extend(unresolved_macros);\n \n         if pos.is_some() {\n@@ -558,8 +555,6 @@ impl DefCollector<'_> {\n         fn_id: FunctionId,\n         module_id: ModuleId,\n     ) {\n-        self.exports_proc_macros = true;\n-\n         let kind = def.kind.to_basedb_kind();\n         let (expander, kind) = match self.proc_macros.iter().find(|(n, _)| n == &def.name) {\n             Some(&(_, expander)) => (expander, kind),\n@@ -714,7 +709,7 @@ impl DefCollector<'_> {\n     /// Tries to resolve every currently unresolved import.\n     fn resolve_imports(&mut self) -> ReachedFixedPoint {\n         let mut res = ReachedFixedPoint::Yes;\n-        let imports = std::mem::take(&mut self.unresolved_imports);\n+        let imports = mem::take(&mut self.unresolved_imports);\n         let imports = imports\n             .into_iter()\n             .filter_map(|mut directive| {\n@@ -1051,7 +1046,7 @@ impl DefCollector<'_> {\n     }\n \n     fn resolve_macros(&mut self) -> ReachedFixedPoint {\n-        let mut macros = std::mem::take(&mut self.unresolved_macros);\n+        let mut macros = mem::take(&mut self.unresolved_macros);\n         let mut resolved = Vec::new();\n         let mut push_resolved = |directive: &MacroDirective, call_id| {\n             resolved.push((directive.module_id, directive.depth, directive.container, call_id));\n@@ -2095,7 +2090,6 @@ mod tests {\n             mod_dirs: FxHashMap::default(),\n             cfg_options: &CfgOptions::default(),\n             proc_macros: Default::default(),\n-            exports_proc_macros: false,\n             from_glob_import: Default::default(),\n             skip_attrs: Default::default(),\n             derive_helpers_in_scope: Default::default(),"}]}