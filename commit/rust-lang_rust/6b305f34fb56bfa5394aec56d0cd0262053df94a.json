{"sha": "6b305f34fb56bfa5394aec56d0cd0262053df94a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMzA1ZjM0ZmI1NmJmYTUzOTRhZWM1NmQwY2QwMjYyMDUzZGY5NGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-30T09:56:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-30T09:56:23Z"}, "message": "auto merge of #11907 : sanxiyn/rust/simd-shift, r=thestinger\n\nFor the purpose of deciding whether to truncate or extend the right hand side of bit shifts, use the size of the element type for SIMD vector types.\r\n\r\nFix #11900.", "tree": {"sha": "809cda853ab5efa8a97edb0eb2fd9f600b1bdd6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/809cda853ab5efa8a97edb0eb2fd9f600b1bdd6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b305f34fb56bfa5394aec56d0cd0262053df94a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b305f34fb56bfa5394aec56d0cd0262053df94a", "html_url": "https://github.com/rust-lang/rust/commit/6b305f34fb56bfa5394aec56d0cd0262053df94a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b305f34fb56bfa5394aec56d0cd0262053df94a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3b1f3c443c048913e2d573fcc5a9c2be3484a78", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b1f3c443c048913e2d573fcc5a9c2be3484a78", "html_url": "https://github.com/rust-lang/rust/commit/e3b1f3c443c048913e2d573fcc5a9c2be3484a78"}, {"sha": "5f68142d0eb253172ee50ed9c6daaf15386a869e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f68142d0eb253172ee50ed9c6daaf15386a869e", "html_url": "https://github.com/rust-lang/rust/commit/5f68142d0eb253172ee50ed9c6daaf15386a869e"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "3bc46a0b14bfd22dc5ecf451326c78c4fe94beec", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b305f34fb56bfa5394aec56d0cd0262053df94a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b305f34fb56bfa5394aec56d0cd0262053df94a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=6b305f34fb56bfa5394aec56d0cd0262053df94a", "patch": "@@ -30,7 +30,7 @@ use driver::session;\n use driver::session::Session;\n use driver::driver::{CrateAnalysis, CrateTranslation};\n use lib::llvm::{ModuleRef, ValueRef, BasicBlockRef};\n-use lib::llvm::{llvm, True};\n+use lib::llvm::{llvm, True, Vector};\n use lib;\n use metadata::common::LinkMeta;\n use metadata::{csearch, encoder};\n@@ -827,8 +827,10 @@ pub fn cast_shift_rhs(op: ast::BinOp,\n     // Shifts may have any size int on the rhs\n     unsafe {\n         if ast_util::is_shift_binop(op) {\n-            let rhs_llty = val_ty(rhs);\n-            let lhs_llty = val_ty(lhs);\n+            let mut rhs_llty = val_ty(rhs);\n+            let mut lhs_llty = val_ty(lhs);\n+            if rhs_llty.kind() == Vector { rhs_llty = rhs_llty.element_type() }\n+            if lhs_llty.kind() == Vector { lhs_llty = lhs_llty.element_type() }\n             let rhs_sz = llvm::LLVMGetIntTypeWidth(rhs_llty.to_ref());\n             let lhs_sz = llvm::LLVMGetIntTypeWidth(lhs_llty.to_ref());\n             if lhs_sz < rhs_sz {"}, {"sha": "85c6555d7ce18f8de072b2bf3172d5786f26d62f", "filename": "src/test/run-pass/simd-binop.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b305f34fb56bfa5394aec56d0cd0262053df94a/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b305f34fb56bfa5394aec56d0cd0262053df94a/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-binop.rs?ref=6b305f34fb56bfa5394aec56d0cd0262053df94a", "patch": "@@ -10,7 +10,7 @@\n \n #[allow(experimental)];\n \n-use std::unstable::simd::{i32x4, f32x4};\n+use std::unstable::simd::{i32x4, f32x4, u32x4};\n \n fn test_int(e: i32) -> i32 {\n     let v = i32x4(e, 0i32, 0i32, 0i32);\n@@ -24,7 +24,15 @@ fn test_float(e: f32) -> f32 {\n     e2\n }\n \n+pub fn test_shift(e: u32) -> u32 {\n+    let v = u32x4(e, 0u32, 0u32, 0u32);\n+    let one = u32x4(1u32, 0u32, 0u32, 0u32);\n+    let u32x4(e2, _, _, _) = v << one >> one;\n+    e2\n+}\n+\n pub fn main() {\n     assert_eq!(test_int(3i32), 9i32);\n     assert_eq!(test_float(3f32), 9f32);\n+    assert_eq!(test_shift(3u32), 3u32);\n }"}]}