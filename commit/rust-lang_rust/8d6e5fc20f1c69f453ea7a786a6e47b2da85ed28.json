{"sha": "8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNmU1ZmMyMGYxYzY5ZjQ1M2VhN2E3ODZhNmU0N2IyZGE4NWVkMjg=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-04T15:27:09Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-05T19:26:24Z"}, "message": "rustc: partially HirIdify", "tree": {"sha": "23cd7a3aa2c7cfe8b32a49c1067f80366ba4a6dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23cd7a3aa2c7cfe8b32a49c1067f80366ba4a6dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28", "html_url": "https://github.com/rust-lang/rust/commit/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "html_url": "https://github.com/rust-lang/rust/commit/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741"}], "stats": {"total": 63, "additions": 30, "deletions": 33}, "files": [{"sha": "dda079e295ec5b9174ee92bd3d5435ee6cf3dde4", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28", "patch": "@@ -56,7 +56,6 @@ use hir::def_id::DefId;\n use hir::Node;\n use middle::region;\n use std::{cmp, fmt};\n-use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n use traits::{ObligationCause, ObligationCauseCode};\n use ty::error::TypeError;\n@@ -182,8 +181,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let cm = self.sess.source_map();\n \n         let scope = region.free_region_binding_scope(self);\n-        let node = self.hir().as_local_node_id(scope).unwrap_or(DUMMY_NODE_ID);\n-        let tag = match self.hir().find(node) {\n+        let node = self.hir().as_local_hir_id(scope).unwrap_or(hir::DUMMY_HIR_ID);\n+        let tag = match self.hir().find_by_hir_id(node) {\n             Some(Node::Block(_)) | Some(Node::Expr(_)) => \"body\",\n             Some(Node::Item(it)) => Self::item_scope_tag(&it),\n             Some(Node::TraitItem(it)) => Self::trait_item_scope_tag(&it),\n@@ -192,7 +191,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         };\n         let (prefix, span) = match *region {\n             ty::ReEarlyBound(ref br) => {\n-                let mut sp = cm.def_span(self.hir().span(node));\n+                let mut sp = cm.def_span(self.hir().span_by_hir_id(node));\n                 if let Some(param) = self.hir()\n                     .get_generics(scope)\n                     .and_then(|generics| generics.get_named(&br.name))\n@@ -205,7 +204,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 bound_region: ty::BoundRegion::BrNamed(_, ref name),\n                 ..\n             }) => {\n-                let mut sp = cm.def_span(self.hir().span(node));\n+                let mut sp = cm.def_span(self.hir().span_by_hir_id(node));\n                 if let Some(param) = self.hir()\n                     .get_generics(scope)\n                     .and_then(|generics| generics.get_named(&name))\n@@ -217,15 +216,15 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ty::ReFree(ref fr) => match fr.bound_region {\n                 ty::BrAnon(idx) => (\n                     format!(\"the anonymous lifetime #{} defined on\", idx + 1),\n-                    self.hir().span(node),\n+                    self.hir().span_by_hir_id(node),\n                 ),\n                 ty::BrFresh(_) => (\n                     \"an anonymous lifetime defined on\".to_owned(),\n-                    self.hir().span(node),\n+                    self.hir().span_by_hir_id(node),\n                 ),\n                 _ => (\n                     format!(\"the lifetime {} as defined on\", fr.bound_region),\n-                    cm.def_span(self.hir().span(node)),\n+                    cm.def_span(self.hir().span_by_hir_id(node)),\n                 ),\n             },\n             _ => bug!(),\n@@ -1451,8 +1450,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 format!(\" for lifetime parameter `{}` in coherence check\", name)\n             }\n             infer::UpvarRegion(ref upvar_id, _) => {\n-                let var_node_id = self.tcx.hir().hir_to_node_id(upvar_id.var_path.hir_id);\n-                let var_name = self.tcx.hir().name(var_node_id);\n+                let var_name = self.tcx.hir().name_by_hir_id(upvar_id.var_path.hir_id);\n                 format!(\" for capture of `{}` by closure\", var_name)\n             }\n             infer::NLL(..) => bug!(\"NLL variable found in lexical phase\"),"}, {"sha": "397081292b91f7ad51b6ff56c1e5ea92f31f4223", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28", "patch": "@@ -31,8 +31,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                               \"...so that reference does not outlive borrowed content\");\n             }\n             infer::ReborrowUpvar(span, ref upvar_id) => {\n-                let var_node_id = self.tcx.hir().hir_to_node_id(upvar_id.var_path.hir_id);\n-                let var_name = self.tcx.hir().name(var_node_id);\n+                let var_name = self.tcx.hir().name_by_hir_id(upvar_id.var_path.hir_id);\n                 err.span_note(span,\n                               &format!(\"...so that closure can access `{}`\", var_name));\n             }\n@@ -164,8 +163,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 err\n             }\n             infer::ReborrowUpvar(span, ref upvar_id) => {\n-                let var_node_id = self.tcx.hir().hir_to_node_id(upvar_id.var_path.hir_id);\n-                let var_name = self.tcx.hir().name(var_node_id);\n+                let var_name = self.tcx.hir().name_by_hir_id(upvar_id.var_path.hir_id);\n                 let mut err = struct_span_err!(self.tcx.sess,\n                                                span,\n                                                E0313,"}, {"sha": "96f07ef8351410dbeb11e32c60b338183a40065d", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28", "patch": "@@ -177,8 +177,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                             // Check the impl. If the generics on the self\n                             // type of the impl require inlining, this method\n                             // does too.\n-                            let impl_node_id = self.tcx.hir().as_local_node_id(impl_did).unwrap();\n-                            match self.tcx.hir().expect_item(impl_node_id).node {\n+                            let impl_hir_id = self.tcx.hir().as_local_hir_id(impl_did).unwrap();\n+                            match self.tcx.hir().expect_item_by_hir_id(impl_hir_id).node {\n                                 hir::ItemKind::Impl(..) => {\n                                     let generics = self.tcx.generics_of(impl_did);\n                                     generics.requires_monomorphization(self.tcx)"}, {"sha": "c9d0ddc3fb4e4eada33998de65b6da9a8e5235b4", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28", "patch": "@@ -1248,12 +1248,12 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body) {\n                 } => {\n                     // FIXME (#24278): non-hygienic comparison\n                     if let Some(def) = lifetimes.get(&hir::ParamName::Plain(label.modern())) {\n-                        let node_id = tcx.hir().as_local_node_id(def.id().unwrap()).unwrap();\n+                        let hir_id = tcx.hir().as_local_hir_id(def.id().unwrap()).unwrap();\n \n                         signal_shadowing_problem(\n                             tcx,\n                             label.name,\n-                            original_lifetime(tcx.hir().span(node_id)),\n+                            original_lifetime(tcx.hir().span_by_hir_id(hir_id)),\n                             shadower_label(label.span),\n                         );\n                         return;\n@@ -2593,12 +2593,12 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     ref lifetimes, s, ..\n                 } => {\n                     if let Some(&def) = lifetimes.get(&param.name.modern()) {\n-                        let node_id = self.tcx.hir().as_local_node_id(def.id().unwrap()).unwrap();\n+                        let hir_id = self.tcx.hir().as_local_hir_id(def.id().unwrap()).unwrap();\n \n                         signal_shadowing_problem(\n                             self.tcx,\n                             param.name.ident().name,\n-                            original_lifetime(self.tcx.hir().span(node_id)),\n+                            original_lifetime(self.tcx.hir().span_by_hir_id(hir_id)),\n                             shadower_lifetime(&param),\n                         );\n                         return;"}, {"sha": "c026ca6ec8f1e5206413d7b4fc0ca2fea01bb54d", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28", "patch": "@@ -1035,7 +1035,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                  ).collect::<Vec<_>>())\n             }\n             Node::StructCtor(ref variant_data) => {\n-                (self.tcx.sess.source_map().def_span(self.tcx.hir().span(variant_data.id())),\n+                (self.tcx.sess.source_map().def_span(\n+                    self.tcx.hir().span_by_hir_id(variant_data.hir_id())),\n                  vec![ArgKind::empty(); variant_data.fields().len()])\n             }\n             _ => panic!(\"non-FnLike node found: {:?}\", node),"}, {"sha": "8e8deeb7a6bde1ab3e58a9baaf03d55d85cdaea0", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28", "patch": "@@ -525,9 +525,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn impl_is_default(self, node_item_def_id: DefId) -> bool {\n-        match self.hir().as_local_node_id(node_item_def_id) {\n-            Some(node_id) => {\n-                let item = self.hir().expect_item(node_id);\n+        match self.hir().as_local_hir_id(node_item_def_id) {\n+            Some(hir_id) => {\n+                let item = self.hir().expect_item_by_hir_id(hir_id);\n                 if let hir::ItemKind::Impl(_, _, defaultness, ..) = item.node {\n                     defaultness.is_default()\n                 } else {"}, {"sha": "c7b81824113b859d0e5a49456b06512133d1c64b", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28", "patch": "@@ -461,8 +461,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // only occur very early in the compiler pipeline.\n         let parent_def_id = self.parent_def_id(impl_def_id).unwrap();\n         self.push_item_path(buffer, parent_def_id, pushed_prelude_crate);\n-        let node_id = self.hir().as_local_node_id(impl_def_id).unwrap();\n-        let item = self.hir().expect_item(node_id);\n+        let hir_id = self.hir().as_local_hir_id(impl_def_id).unwrap();\n+        let item = self.hir().expect_item_by_hir_id(hir_id);\n         let span_str = self.sess.source_map().span_to_string(item.span);\n         buffer.push(&format!(\"<impl at {}>\", span_str));\n     }"}, {"sha": "263724998d7d5eff9184e9c0718a30cbd959de52", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28", "patch": "@@ -2939,8 +2939,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     /// Get the attributes of a definition.\n     pub fn get_attrs(self, did: DefId) -> Attributes<'gcx> {\n-        if let Some(id) = self.hir().as_local_node_id(did) {\n-            Attributes::Borrowed(self.hir().attrs(id))\n+        if let Some(id) = self.hir().as_local_hir_id(did) {\n+            Attributes::Borrowed(self.hir().attrs_by_hir_id(id))\n         } else {\n             Attributes::Owned(self.item_attrs(did))\n         }\n@@ -2991,8 +2991,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// with the name of the crate containing the impl.\n     pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {\n         if impl_did.is_local() {\n-            let node_id = self.hir().as_local_node_id(impl_did).unwrap();\n-            Ok(self.hir().span(node_id))\n+            let hir_id = self.hir().as_local_hir_id(impl_did).unwrap();\n+            Ok(self.hir().span_by_hir_id(hir_id))\n         } else {\n             Err(self.crate_name(impl_did.krate))\n         }\n@@ -3110,8 +3110,8 @@ fn adt_sized_constraint<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn associated_item_def_ids<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                      def_id: DefId)\n                                      -> Lrc<Vec<DefId>> {\n-    let id = tcx.hir().as_local_node_id(def_id).unwrap();\n-    let item = tcx.hir().expect_item(id);\n+    let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+    let item = tcx.hir().expect_item_by_hir_id(id);\n     let vec: Vec<_> = match item.node {\n         hir::ItemKind::Trait(.., ref trait_item_refs) => {\n             trait_item_refs.iter()"}, {"sha": "5830a0bab27436053d9489374c834a03e1ba1ded", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=8d6e5fc20f1c69f453ea7a786a6e47b2da85ed28", "patch": "@@ -801,7 +801,7 @@ impl fmt::Debug for ty::UpvarId {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"UpvarId({:?};`{}`;{:?})\",\n                self.var_path.hir_id,\n-               ty::tls::with(|tcx| tcx.hir().name(tcx.hir().hir_to_node_id(self.var_path.hir_id))),\n+               ty::tls::with(|tcx| tcx.hir().name_by_hir_id(self.var_path.hir_id)),\n                self.closure_expr_id)\n     }\n }"}]}