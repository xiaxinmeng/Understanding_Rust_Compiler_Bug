{"sha": "cb46c3558af9f9863f3fa3659693fcc883dbfcee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNDZjMzU1OGFmOWY5ODYzZjNmYTM2NTk2OTNmY2M4ODNkYmZjZWU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-14T21:34:08Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-14T21:34:08Z"}, "message": "Use multiple derive clauses.", "tree": {"sha": "c6e9a3048d2d3600add5502ca095c1bd699b765d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6e9a3048d2d3600add5502ca095c1bd699b765d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb46c3558af9f9863f3fa3659693fcc883dbfcee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb46c3558af9f9863f3fa3659693fcc883dbfcee", "html_url": "https://github.com/rust-lang/rust/commit/cb46c3558af9f9863f3fa3659693fcc883dbfcee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb46c3558af9f9863f3fa3659693fcc883dbfcee/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7214b9ad48b8ca5e117db88f0aeafe6a141500f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7214b9ad48b8ca5e117db88f0aeafe6a141500f7", "html_url": "https://github.com/rust-lang/rust/commit/7214b9ad48b8ca5e117db88f0aeafe6a141500f7"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "a56976e35d80c641d426b456da188bfcf6364fc4", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb46c3558af9f9863f3fa3659693fcc883dbfcee/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb46c3558af9f9863f3fa3659693fcc883dbfcee/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=cb46c3558af9f9863f3fa3659693fcc883dbfcee", "patch": "@@ -44,8 +44,8 @@ mod substitute;\n /// A \"canonicalized\" type `V` is one where all free inference\n /// variables have been rewritten to \"canonical vars\". These are\n /// numbered starting from 0 in order of first appearance.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable,\n-    HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n+#[derive(HashStable, TypeFoldable)]\n pub struct Canonical<'tcx, V> {\n     pub max_universe: ty::UniverseIndex,\n     pub variables: CanonicalVarInfos<'tcx>,\n@@ -65,8 +65,8 @@ impl<'tcx> UseSpecializedDecodable for CanonicalVarInfos<'tcx> {}\n /// vectors with the original values that were replaced by canonical\n /// variables. You will need to supply it later to instantiate the\n /// canonicalized query response.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable,\n-    HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n+#[derive(HashStable, TypeFoldable)]\n pub struct CanonicalVarValues<'tcx> {\n     pub var_values: IndexVec<BoundVar, GenericArg<'tcx>>,\n }"}, {"sha": "e44366545b4d847bfd842969a8e27a5d48eb325a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb46c3558af9f9863f3fa3659693fcc883dbfcee/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb46c3558af9f9863f3fa3659693fcc883dbfcee/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=cb46c3558af9f9863f3fa3659693fcc883dbfcee", "patch": "@@ -307,8 +307,8 @@ pub struct ResolvedOpaqueTy<'tcx> {\n ///\n /// Here, we would store the type `T`, the span of the value `x`, and the \"scope-span\" for\n /// the scope that contains `x`.\n-#[derive(RustcEncodable, RustcDecodable, Clone, Debug, Eq, Hash, HashStable, PartialEq,\n-    TypeFoldable)]\n+#[derive(RustcEncodable, RustcDecodable, Clone, Debug, Eq, Hash, PartialEq)]\n+#[derive(HashStable, TypeFoldable)]\n pub struct GeneratorInteriorTypeCause<'tcx> {\n     /// Type of the captured binding.\n     pub ty: Ty<'tcx>,"}, {"sha": "15a6056205426d9c51d36dd7fcc2f269aa918f34", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cb46c3558af9f9863f3fa3659693fcc883dbfcee/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb46c3558af9f9863f3fa3659693fcc883dbfcee/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=cb46c3558af9f9863f3fa3659693fcc883dbfcee", "patch": "@@ -1097,8 +1097,8 @@ impl<'tcx> GenericPredicates<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable,\n-         HashStable, TypeFoldable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable)]\n pub enum Predicate<'tcx> {\n     /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be\n     /// the `Self` type of the trait reference and `A`, `B`, and `C`\n@@ -1248,8 +1248,8 @@ impl<'tcx> Predicate<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable,\n-         HashStable, TypeFoldable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable)]\n pub struct TraitPredicate<'tcx> {\n     pub trait_ref: TraitRef<'tcx>\n }\n@@ -1277,17 +1277,17 @@ impl<'tcx> PolyTraitPredicate<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord,\n-         Hash, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable)]\n pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`\n pub type PolyOutlivesPredicate<A, B> = ty::Binder<OutlivesPredicate<A, B>>;\n pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;\n pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;\n pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<RegionOutlivesPredicate<'tcx>>;\n pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<TypeOutlivesPredicate<'tcx>>;\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable,\n-         HashStable, TypeFoldable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable)]\n pub struct SubtypePredicate<'tcx> {\n     pub a_is_expected: bool,\n     pub a: Ty<'tcx>,\n@@ -1307,8 +1307,8 @@ pub type PolySubtypePredicate<'tcx> = ty::Binder<SubtypePredicate<'tcx>>;\n /// equality between arbitrary types. Processing an instance of\n /// Form #2 eventually yields one of these `ProjectionPredicate`\n /// instances to normalize the LHS.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable,\n-         HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable)]\n pub struct ProjectionPredicate<'tcx> {\n     pub projection_ty: ProjectionTy<'tcx>,\n     pub ty: Ty<'tcx>,"}, {"sha": "de3746e5105f8c54955deb0509739a79487c305e", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cb46c3558af9f9863f3fa3659693fcc883dbfcee/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb46c3558af9f9863f3fa3659693fcc883dbfcee/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=cb46c3558af9f9863f3fa3659693fcc883dbfcee", "patch": "@@ -29,8 +29,8 @@ use syntax::symbol::{kw, Symbol};\n use self::InferTy::*;\n use self::TyKind::*;\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord,\n-         Hash, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable)]\n pub struct TypeAndMut<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub mutbl: hir::Mutability,\n@@ -591,8 +591,8 @@ impl<'tcx> UpvarSubsts<'tcx> {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash,\n-         RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n+#[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable)]\n pub enum ExistentialPredicate<'tcx> {\n     /// E.g., `Iterator`.\n     Trait(ExistentialTraitRef<'tcx>),\n@@ -742,8 +742,8 @@ impl<'tcx> Binder<&'tcx List<ExistentialPredicate<'tcx>>> {\n /// Note that a `TraitRef` introduces a level of region binding, to\n /// account for higher-ranked trait bounds like `T: for<'a> Foo<&'a U>`\n /// or higher-ranked object types.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable,\n-         HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable)]\n pub struct TraitRef<'tcx> {\n     pub def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n@@ -814,8 +814,8 @@ impl<'tcx> PolyTraitRef<'tcx> {\n ///\n /// The substitutions don't include the erased `Self`, only trait\n /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable)]\n pub struct ExistentialTraitRef<'tcx> {\n     pub def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n@@ -986,8 +986,8 @@ impl<T> Binder<T> {\n \n /// Represents the projection of an associated type. In explicit UFCS\n /// form this would be written `<T as Trait<..>>::N`.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord,\n-         Hash, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable)]\n pub struct ProjectionTy<'tcx> {\n     /// The parameters of the associated item.\n     pub substs: SubstsRef<'tcx>,\n@@ -1057,8 +1057,8 @@ impl<'tcx> PolyGenSig<'tcx> {\n /// - `inputs`: is the list of arguments and their modes.\n /// - `output`: is the return type.\n /// - `c_variadic`: indicates whether this is a C-variadic function.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord,\n-         Hash, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable)]\n pub struct FnSig<'tcx> {\n     pub inputs_and_output: &'tcx List<Ty<'tcx>>,\n     pub c_variadic: bool,\n@@ -1404,8 +1404,8 @@ impl From<BoundVar> for BoundTy {\n }\n \n /// A `ProjectionPredicate` for an `ExistentialTraitRef`.\n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable)]\n pub struct ExistentialProjection<'tcx> {\n     pub item_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,"}, {"sha": "35e4c3a40c984f744e45618ff8ab87c02c8c692f", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb46c3558af9f9863f3fa3659693fcc883dbfcee/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb46c3558af9f9863f3fa3659693fcc883dbfcee/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=cb46c3558af9f9863f3fa3659693fcc883dbfcee", "patch": "@@ -731,8 +731,8 @@ pub type CanonicalUserSubsts<'tcx> = Canonical<'tcx, UserSubsts<'tcx>>;\n \n /// Stores the user-given substs to reach some fully qualified path\n /// (e.g., `<T>::Item` or `<T as Trait>::Item`).\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable,\n-    HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable)]\n pub struct UserSubsts<'tcx> {\n     /// The substitutions for the item as given by the user.\n     pub substs: SubstsRef<'tcx>,\n@@ -766,8 +766,8 @@ BraceStructLiftImpl! {\n /// the impl (with the substs from `UserSubsts`) and apply those to\n /// the self type, giving `Foo<?A>`. Finally, we unify that with\n /// the self type here, which contains `?A` to be `&'static u32`\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable,\n-    HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable)]\n pub struct UserSelfTy<'tcx> {\n     pub impl_def_id: DefId,\n     pub self_ty: Ty<'tcx>,"}]}