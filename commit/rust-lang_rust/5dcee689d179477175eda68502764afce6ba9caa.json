{"sha": "5dcee689d179477175eda68502764afce6ba9caa", "node_id": "C_kwDOAAsO6NoAKDVkY2VlNjg5ZDE3OTQ3NzE3NWVkYTY4NTAyNzY0YWZjZTZiYTljYWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-26T06:52:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-26T06:52:41Z"}, "message": "Rollup merge of #93982 - nbdd0121:explicit-generic-args, r=jackh726\n\nProvide extra note if synthetic type args are specified\n\nImplement the unresolved question in #83701 as suggested in https://github.com/rust-lang/rust/pull/86176#discussion_r680613890.\n\nr? ``@jackh726``", "tree": {"sha": "f789af0fd9bcd377176ce94702ba3a2e763e1133", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f789af0fd9bcd377176ce94702ba3a2e763e1133"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dcee689d179477175eda68502764afce6ba9caa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiGc46CRBK7hj4Ov3rIwAAu00IAEJksMbDgwazcUwcAydWbMBY\nK/d2I5fNwJA0wua5jmYp8zl1J+LNtwTfHF0KkrDDcjxn3/dfgYPhY1FXpsTOiGNG\nCihEemuUiXXNnnQdHb2zuK9TeXM8B3vWPqSlAp2q8tGb/WtlyEFOdiYyzRePm7mi\nIEJA0o86np7XHYOyFXAQUrts9EqlZTfV8tGjN7nbcWOHmu8S3guw9L08KNOzF9vN\n1M65rf9gfszgrr/3Rn8DXsKArtnfsLFgKZ2iy/c85eSQqgIT8FDegmW7oAIVVgiX\n/IqXQ+6MrGbgQ5RGyBsR6edFKdCkWet0rUm+tc0GKI3BwN5H4WOcdo1nZwYgaBg=\n=bg+n\n-----END PGP SIGNATURE-----\n", "payload": "tree f789af0fd9bcd377176ce94702ba3a2e763e1133\nparent be9b99b0d000d176c6b00180ce98d27fd6de9d48\nparent 674745836cb67756daf2d349bb4028d89014f877\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645858361 +0100\ncommitter GitHub <noreply@github.com> 1645858361 +0100\n\nRollup merge of #93982 - nbdd0121:explicit-generic-args, r=jackh726\n\nProvide extra note if synthetic type args are specified\n\nImplement the unresolved question in #83701 as suggested in https://github.com/rust-lang/rust/pull/86176#discussion_r680613890.\n\nr? ``@jackh726``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dcee689d179477175eda68502764afce6ba9caa", "html_url": "https://github.com/rust-lang/rust/commit/5dcee689d179477175eda68502764afce6ba9caa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dcee689d179477175eda68502764afce6ba9caa/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be9b99b0d000d176c6b00180ce98d27fd6de9d48", "url": "https://api.github.com/repos/rust-lang/rust/commits/be9b99b0d000d176c6b00180ce98d27fd6de9d48", "html_url": "https://github.com/rust-lang/rust/commit/be9b99b0d000d176c6b00180ce98d27fd6de9d48"}, {"sha": "674745836cb67756daf2d349bb4028d89014f877", "url": "https://api.github.com/repos/rust-lang/rust/commits/674745836cb67756daf2d349bb4028d89014f877", "html_url": "https://github.com/rust-lang/rust/commit/674745836cb67756daf2d349bb4028d89014f877"}], "stats": {"total": 128, "additions": 79, "deletions": 49}, "files": [{"sha": "a06b37627e3cadc3961e4a6cf4c45e1f2c7301b2", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 58, "deletions": 49, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/5dcee689d179477175eda68502764afce6ba9caa/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dcee689d179477175eda68502764afce6ba9caa/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=5dcee689d179477175eda68502764afce6ba9caa", "patch": "@@ -512,61 +512,69 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             explicit_late_bound == ExplicitLateBound::Yes,\n         );\n \n-        let mut check_types_and_consts =\n-            |expected_min, expected_max, provided, params_offset, args_offset| {\n-                debug!(\n-                    ?expected_min,\n-                    ?expected_max,\n-                    ?provided,\n-                    ?params_offset,\n-                    ?args_offset,\n-                    \"check_types_and_consts\"\n+        let mut check_types_and_consts = |expected_min,\n+                                          expected_max,\n+                                          expected_max_with_synth,\n+                                          provided,\n+                                          params_offset,\n+                                          args_offset| {\n+            debug!(\n+                ?expected_min,\n+                ?expected_max,\n+                ?provided,\n+                ?params_offset,\n+                ?args_offset,\n+                \"check_types_and_consts\"\n+            );\n+            if (expected_min..=expected_max).contains(&provided) {\n+                return true;\n+            }\n+\n+            let num_default_params = expected_max - expected_min;\n+\n+            let gen_args_info = if provided > expected_max {\n+                invalid_args.extend(\n+                    gen_args.args[args_offset + expected_max..args_offset + provided]\n+                        .iter()\n+                        .map(|arg| arg.span()),\n                 );\n-                if (expected_min..=expected_max).contains(&provided) {\n-                    return true;\n+                let num_redundant_args = provided - expected_max;\n+\n+                // Provide extra note if synthetic arguments like `impl Trait` are specified.\n+                let synth_provided = provided <= expected_max_with_synth;\n+\n+                GenericArgsInfo::ExcessTypesOrConsts {\n+                    num_redundant_args,\n+                    num_default_params,\n+                    args_offset,\n+                    synth_provided,\n                 }\n+            } else {\n+                let num_missing_args = expected_max - provided;\n \n-                let num_default_params = expected_max - expected_min;\n+                GenericArgsInfo::MissingTypesOrConsts {\n+                    num_missing_args,\n+                    num_default_params,\n+                    args_offset,\n+                }\n+            };\n \n-                let gen_args_info = if provided > expected_max {\n-                    invalid_args.extend(\n-                        gen_args.args[args_offset + expected_max..args_offset + provided]\n-                            .iter()\n-                            .map(|arg| arg.span()),\n-                    );\n-                    let num_redundant_args = provided - expected_max;\n+            debug!(?gen_args_info);\n \n-                    GenericArgsInfo::ExcessTypesOrConsts {\n-                        num_redundant_args,\n-                        num_default_params,\n-                        args_offset,\n-                    }\n-                } else {\n-                    let num_missing_args = expected_max - provided;\n+            WrongNumberOfGenericArgs::new(\n+                tcx,\n+                gen_args_info,\n+                seg,\n+                gen_params,\n+                params_offset,\n+                gen_args,\n+                def_id,\n+            )\n+            .diagnostic()\n+            .emit_unless(gen_args.has_err());\n \n-                    GenericArgsInfo::MissingTypesOrConsts {\n-                        num_missing_args,\n-                        num_default_params,\n-                        args_offset,\n-                    }\n-                };\n-\n-                debug!(?gen_args_info);\n-\n-                WrongNumberOfGenericArgs::new(\n-                    tcx,\n-                    gen_args_info,\n-                    seg,\n-                    gen_params,\n-                    params_offset,\n-                    gen_args,\n-                    def_id,\n-                )\n-                .diagnostic()\n-                .emit_unless(gen_args.has_err());\n-\n-                false\n-            };\n+            false\n+        };\n \n         let args_correct = {\n             let expected_min = if infer_args {\n@@ -582,6 +590,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             check_types_and_consts(\n                 expected_min,\n                 param_counts.consts + named_type_param_count,\n+                param_counts.consts + named_type_param_count + synth_type_param_count,\n                 gen_args.num_generic_params(),\n                 param_counts.lifetimes + has_self as usize,\n                 gen_args.num_lifetime_params(),"}, {"sha": "62f89a2e6cf88b09e1b5555d6f859bf853d6f4a7", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5dcee689d179477175eda68502764afce6ba9caa/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dcee689d179477175eda68502764afce6ba9caa/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=5dcee689d179477175eda68502764afce6ba9caa", "patch": "@@ -84,6 +84,9 @@ pub enum GenericArgsInfo {\n         // us infer the position of type and const generic arguments\n         // in the angle brackets\n         args_offset: usize,\n+\n+        // if synthetic type arguments (e.g. `impl Trait`) are specified\n+        synth_provided: bool,\n     },\n }\n \n@@ -254,6 +257,13 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         }\n     }\n \n+    fn is_synth_provided(&self) -> bool {\n+        match self.gen_args_info {\n+            ExcessTypesOrConsts { synth_provided, .. } => synth_provided,\n+            _ => false,\n+        }\n+    }\n+\n     // Helper function to choose a quantifier word for the number of expected arguments\n     // and to give a bound for the number of expected arguments\n     fn get_quantifier_and_bound(&self) -> (&'static str, usize) {\n@@ -780,6 +790,15 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n \n         err.span_note(spans, &msg);\n     }\n+\n+    /// Add note if `impl Trait` is explicitly specified.\n+    fn note_synth_provided(&self, err: &mut Diagnostic) {\n+        if !self.is_synth_provided() {\n+            return;\n+        }\n+\n+        err.note(\"`impl Trait` cannot be explicitly specified as a generic argument\");\n+    }\n }\n \n impl<'tcx> StructuredDiagnostic<'tcx> for WrongNumberOfGenericArgs<'_, 'tcx> {\n@@ -797,6 +816,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for WrongNumberOfGenericArgs<'_, 'tcx> {\n         self.notify(&mut err);\n         self.suggest(&mut err);\n         self.show_definition(&mut err);\n+        self.note_synth_provided(&mut err);\n \n         err\n     }"}, {"sha": "2ae7745c725c1bcfe01676b9d2e5b15bb803bcd3", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/explicit-generic-args-for-impl.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5dcee689d179477175eda68502764afce6ba9caa/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5dcee689d179477175eda68502764afce6ba9caa/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr?ref=5dcee689d179477175eda68502764afce6ba9caa", "patch": "@@ -11,6 +11,7 @@ note: function defined here, with 1 generic parameter: `T`\n    |\n LL | fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n    |    ^^^ -\n+   = note: `impl Trait` cannot be explicitly specified as a generic argument\n \n error: aborting due to previous error\n "}]}