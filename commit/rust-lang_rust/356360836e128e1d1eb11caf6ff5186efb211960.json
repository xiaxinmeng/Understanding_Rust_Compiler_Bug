{"sha": "356360836e128e1d1eb11caf6ff5186efb211960", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NjM2MDgzNmUxMjhlMWQxZWIxMWNhZjZmZjUxODZlZmIyMTE5NjA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-19T13:34:33Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-19T13:34:33Z"}, "message": "Avoid call to pointer_ty", "tree": {"sha": "94540330bb097084177cc2ddb0f7e49742679c97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94540330bb097084177cc2ddb0f7e49742679c97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/356360836e128e1d1eb11caf6ff5186efb211960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/356360836e128e1d1eb11caf6ff5186efb211960", "html_url": "https://github.com/rust-lang/rust/commit/356360836e128e1d1eb11caf6ff5186efb211960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/356360836e128e1d1eb11caf6ff5186efb211960/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ebb4839f673d911b148639009d264fb7ef02d24", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ebb4839f673d911b148639009d264fb7ef02d24", "html_url": "https://github.com/rust-lang/rust/commit/0ebb4839f673d911b148639009d264fb7ef02d24"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "42483230fdc741bcc961265da55aa9bfc5c7c61d", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/356360836e128e1d1eb11caf6ff5186efb211960/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356360836e128e1d1eb11caf6ff5186efb211960/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=356360836e128e1d1eb11caf6ff5186efb211960", "patch": "@@ -1122,6 +1122,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             }\n \n             let size = fx.layout_of(T).layout.size;\n+            // FIXME add and use emit_small_memcmp\n             let is_eq_value =\n                 if size == Size::ZERO {\n                     // No bytes means they're trivially equal\n@@ -1137,10 +1138,9 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n                 } else {\n                     // Just call `memcmp` (like slices do in core) when the\n                     // size is too large or it's not a power-of-two.\n-                    let ptr_ty = pointer_ty(fx.tcx);\n                     let signed_bytes = i64::try_from(size.bytes()).unwrap();\n-                    let bytes_val = fx.bcx.ins().iconst(ptr_ty, signed_bytes);\n-                    let params = vec![AbiParam::new(ptr_ty); 3];\n+                    let bytes_val = fx.bcx.ins().iconst(fx.pointer_type, signed_bytes);\n+                    let params = vec![AbiParam::new(fx.pointer_type); 3];\n                     let returns = vec![AbiParam::new(types::I32)];\n                     let args = &[lhs_ref, rhs_ref, bytes_val];\n                     let cmp = fx.lib_call(\"memcmp\", params, returns, args)[0];"}]}