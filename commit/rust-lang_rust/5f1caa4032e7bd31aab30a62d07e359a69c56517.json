{"sha": "5f1caa4032e7bd31aab30a62d07e359a69c56517", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMWNhYTQwMzJlN2JkMzFhYWIzMGE2MmQwN2UzNTlhNjljNTY1MTc=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-01-24T15:50:13Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-01-28T13:12:54Z"}, "message": "./x.py fmt", "tree": {"sha": "eae534580b7847df931ef614e31f526fb0650cb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eae534580b7847df931ef614e31f526fb0650cb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f1caa4032e7bd31aab30a62d07e359a69c56517", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl4wM1YACgkQiMlBzaHU\nZDIlmg//bj1rtRIxEZOoRDfz8w+36Y/97oWthexzFkXFJXPxknKmOeaazUpWOcot\n1iDG/FIbTxd9Ph6dSvWASOLvsQVBjZ3gN0NoBf21Kh5hmEru0QuX6Gg/VVcqW8cR\nQa+CCdc+XPD0tKZSSY/BZ4AzjpSXKcJ7tAG83E61HW6EDiUiTHo95StoIDX+3Fiz\nNbU3V6AGmmJtdK9Rco+i8nbw79dEqRJso/f9sIxFflCe+K1D0rf4JJAzo47yawRO\nHm3smfiv4qrsxECTH66qhgiJUrBsqV4tPb42SWRPLLqzJ7TForiwEJCW6Qpm8UXp\nDtWS6KigwVIQykDfr/FGY5eI/t8dqtVL+wg9WtmXAGY5zuUhqbuwtpfnyxzkltxc\noycOXBYsM138voM5pUIbWQiahroK8dTkHahgA10CS3X+xjjIWztPig6aB+byyeY+\nWTBzQ/EsEnu8KzOnnGi6/TAdkwXfla8H+vvkIyxMqjzinIaYxafYKogBbNxOcbBl\nlz5de0LPIdDAdTYIEvRoRdt9tR1TqkFW/BLhFlasH71Cots9qG3j/5tJ8xdDa1YK\noZJcsc32j/xYyaaWGQYlV1wQqoEMeYcnbOLPPq/Mwi40JhqwysqwHa92Day8RvBV\nCUKJj/miUoFkOdK/r8Lv+HoMsWt9/93QGv2Tf6tRXz7TucEP7I4=\n=1QSF\n-----END PGP SIGNATURE-----", "payload": "tree eae534580b7847df931ef614e31f526fb0650cb5\nparent 22a4827dcbd0b7e1304848364a3f736ca4a0cbe6\nauthor Santiago Pastorino <spastorino@gmail.com> 1579881013 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1580217174 -0300\n\n./x.py fmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1caa4032e7bd31aab30a62d07e359a69c56517", "html_url": "https://github.com/rust-lang/rust/commit/5f1caa4032e7bd31aab30a62d07e359a69c56517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f1caa4032e7bd31aab30a62d07e359a69c56517/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "html_url": "https://github.com/rust-lang/rust/commit/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "3b4a853aa21c27d9605c70d6a9f676d637c1a791", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5f1caa4032e7bd31aab30a62d07e359a69c56517/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1caa4032e7bd31aab30a62d07e359a69c56517/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=5f1caa4032e7bd31aab30a62d07e359a69c56517", "patch": "@@ -604,8 +604,13 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     cursor = proj_base;\n \n                     match elem {\n-                        ProjectionElem::Field(field, _) if union_ty(*local, proj_base).is_some() => {\n-                            return Some((PlaceRef { local: *local, projection: proj_base }, field));\n+                        ProjectionElem::Field(field, _)\n+                            if union_ty(*local, proj_base).is_some() =>\n+                        {\n+                            return Some((\n+                                PlaceRef { local: *local, projection: proj_base },\n+                                field,\n+                            ));\n                         }\n                         _ => {}\n                     }\n@@ -629,7 +634,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             {\n                                 // FIXME when we avoid clone reuse describe_place closure\n                                 let describe_base_place = self\n-                                    .describe_place(PlaceRef { local: *local, projection: proj_base })\n+                                    .describe_place(PlaceRef {\n+                                        local: *local,\n+                                        projection: proj_base,\n+                                    })\n                                     .unwrap_or_else(|| \"_\".to_owned());\n \n                                 return Some((\n@@ -1513,9 +1521,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         StorageDeadOrDrop::LocalStorageDead\n                         | StorageDeadOrDrop::BoxedStorageDead => {\n                             assert!(\n-                                Place::ty_from(place.local, proj_base, *self.body, tcx)\n-                                    .ty\n-                                    .is_box(),\n+                                Place::ty_from(place.local, proj_base, *self.body, tcx).ty.is_box(),\n                                 \"Drop of value behind a reference or raw pointer\"\n                             );\n                             StorageDeadOrDrop::BoxedStorageDead"}, {"sha": "14f675c0fdf83ea6c6dbb2dd717af1cf15704de8", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f1caa4032e7bd31aab30a62d07e359a69c56517/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1caa4032e7bd31aab30a62d07e359a69c56517/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=5f1caa4032e7bd31aab30a62d07e359a69c56517", "patch": "@@ -274,8 +274,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let description = if place.projection.len() == 1 {\n             format!(\"static item `{}`\", self.describe_place(place.as_ref()).unwrap())\n         } else {\n-            let base_static =\n-                PlaceRef { local: place.local, projection: &[ProjectionElem::Deref] };\n+            let base_static = PlaceRef { local: place.local, projection: &[ProjectionElem::Deref] };\n \n             format!(\n                 \"`{:?}` as `{:?}` is a static item\","}, {"sha": "cf9a5479afb353e224875b61e3373c392a209c25", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f1caa4032e7bd31aab30a62d07e359a69c56517/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1caa4032e7bd31aab30a62d07e359a69c56517/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=5f1caa4032e7bd31aab30a62d07e359a69c56517", "patch": "@@ -414,8 +414,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             match elem {\n                 ProjectionElem::Field(..) => {\n                     let ty =\n-                        Place::ty_from(place.local, proj_base, &self.body.local_decls, self.tcx)\n-                            .ty;\n+                        Place::ty_from(place.local, proj_base, &self.body.local_decls, self.tcx).ty;\n                     match ty.kind {\n                         ty::Adt(def, _) => match self.tcx.layout_scalar_valid_range(def.did) {\n                             (Bound::Unbounded, Bound::Unbounded) => {}"}]}