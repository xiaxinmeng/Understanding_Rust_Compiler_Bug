{"sha": "70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYjEzYTdjN2NhYTg4YTE5Y2ZlMjNlNWNkYjg4YTU3MzViYmI5ODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-25T00:49:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-25T00:49:41Z"}, "message": "Auto merge of #21511 - alfie:suffix-cleanup, r=huonw", "tree": {"sha": "ddb661944309f0dc8847acd4c1bfc1dad625c5c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddb661944309f0dc8847acd4c1bfc1dad625c5c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "html_url": "https://github.com/rust-lang/rust/commit/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e4e8cff1697ec79bcd0a1e45e63fb2f54a7ea28", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4e8cff1697ec79bcd0a1e45e63fb2f54a7ea28", "html_url": "https://github.com/rust-lang/rust/commit/4e4e8cff1697ec79bcd0a1e45e63fb2f54a7ea28"}, {"sha": "f67e7470b31a38e80c9f1007e4182ff5b56db2f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f67e7470b31a38e80c9f1007e4182ff5b56db2f7", "html_url": "https://github.com/rust-lang/rust/commit/f67e7470b31a38e80c9f1007e4182ff5b56db2f7"}], "stats": {"total": 256, "additions": 128, "deletions": 128}, "files": [{"sha": "e75481198d4802d0c9301ed703b1bc847cfdfa96", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -589,7 +589,7 @@ impl AtomicUsize {\n     /// ```\n     /// use std::sync::atomic::AtomicUsize;\n     ///\n-    /// let atomic_forty_two = AtomicUsize::new(42u);\n+    /// let atomic_forty_two = AtomicUsize::new(42);\n     /// ```\n     #[inline]\n     pub fn new(v: usize) -> AtomicUsize {\n@@ -765,7 +765,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     /// use std::sync::atomic::AtomicPtr;\n     ///\n-    /// let ptr = &mut 5i;\n+    /// let ptr = &mut 5;\n     /// let atomic_ptr  = AtomicPtr::new(ptr);\n     /// ```\n     #[inline]\n@@ -787,7 +787,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n-    /// let ptr = &mut 5i;\n+    /// let ptr = &mut 5;\n     /// let some_ptr  = AtomicPtr::new(ptr);\n     ///\n     /// let value = some_ptr.load(Ordering::Relaxed);\n@@ -809,10 +809,10 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n-    /// let ptr = &mut 5i;\n+    /// let ptr = &mut 5;\n     /// let some_ptr  = AtomicPtr::new(ptr);\n     ///\n-    /// let other_ptr = &mut 10i;\n+    /// let other_ptr = &mut 10;\n     ///\n     /// some_ptr.store(other_ptr, Ordering::Relaxed);\n     /// ```\n@@ -835,10 +835,10 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n-    /// let ptr = &mut 5i;\n+    /// let ptr = &mut 5;\n     /// let some_ptr  = AtomicPtr::new(ptr);\n     ///\n-    /// let other_ptr = &mut 10i;\n+    /// let other_ptr = &mut 10;\n     ///\n     /// let value = some_ptr.swap(other_ptr, Ordering::Relaxed);\n     /// ```\n@@ -860,11 +860,11 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n-    /// let ptr = &mut 5i;\n+    /// let ptr = &mut 5;\n     /// let some_ptr  = AtomicPtr::new(ptr);\n     ///\n-    /// let other_ptr   = &mut 10i;\n-    /// let another_ptr = &mut 10i;\n+    /// let other_ptr   = &mut 10;\n+    /// let another_ptr = &mut 10;\n     ///\n     /// let value = some_ptr.compare_and_swap(other_ptr, another_ptr, Ordering::Relaxed);\n     /// ```"}, {"sha": "94307166ad50b785dcc14e790626f12c6802a520", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -67,10 +67,10 @@\n //!\n //! fn main() {\n //!     let shared_map: Rc<RefCell<_>> = Rc::new(RefCell::new(HashMap::new()));\n-//!     shared_map.borrow_mut().insert(\"africa\", 92388i);\n-//!     shared_map.borrow_mut().insert(\"kyoto\", 11837i);\n-//!     shared_map.borrow_mut().insert(\"piccadilly\", 11826i);\n-//!     shared_map.borrow_mut().insert(\"marbles\", 38i);\n+//!     shared_map.borrow_mut().insert(\"africa\", 92388);\n+//!     shared_map.borrow_mut().insert(\"kyoto\", 11837);\n+//!     shared_map.borrow_mut().insert(\"piccadilly\", 11826);\n+//!     shared_map.borrow_mut().insert(\"marbles\", 38);\n //! }\n //! ```\n //!"}, {"sha": "c17f7cdccbaca3741c00008f03e8df1bd1b7cb97", "filename": "src/libcore/char.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -102,7 +102,7 @@ pub fn from_digit(num: uint, radix: uint) -> Option<char> {\n             if num < 10 {\n                 Some(transmute(('0' as uint + num) as u32))\n             } else {\n-                Some(transmute(('a' as uint + num - 10u) as u32))\n+                Some(transmute(('a' as uint + num - 10) as u32))\n             }\n         }\n     } else {\n@@ -208,8 +208,8 @@ impl CharExt for char {\n         }\n         let val = match self {\n           '0' ... '9' => self as uint - ('0' as uint),\n-          'a' ... 'z' => self as uint + 10u - ('a' as uint),\n-          'A' ... 'Z' => self as uint + 10u - ('A' as uint),\n+          'a' ... 'z' => self as uint + 10 - ('a' as uint),\n+          'A' ... 'Z' => self as uint + 10 - ('A' as uint),\n           _ => return None,\n         };\n         if val < radix { Some(val) }\n@@ -241,10 +241,10 @@ impl CharExt for char {\n     fn len_utf8(self) -> uint {\n         let code = self as u32;\n         match () {\n-            _ if code < MAX_ONE_B   => 1u,\n-            _ if code < MAX_TWO_B   => 2u,\n-            _ if code < MAX_THREE_B => 3u,\n-            _  => 4u,\n+            _ if code < MAX_ONE_B   => 1,\n+            _ if code < MAX_TWO_B   => 2,\n+            _ if code < MAX_THREE_B => 3,\n+            _  => 4,\n         }\n     }\n \n@@ -359,7 +359,7 @@ impl Iterator for EscapeUnicode {\n                 Some('u')\n             }\n             EscapeUnicodeState::LeftBrace => {\n-                let mut n = 0u;\n+                let mut n = 0;\n                 while (self.c as u32) >> (4 * (n + 1)) != 0 {\n                     n += 1;\n                 }"}, {"sha": "6cda9d0e653992bb744189b87566e485b7fec16d", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -110,13 +110,13 @@ pub trait Eq: PartialEq<Self> {\n pub enum Ordering {\n     /// An ordering where a compared value is less [than another].\n     #[stable]\n-    Less = -1i,\n+    Less = -1,\n     /// An ordering where a compared value is equal [to another].\n     #[stable]\n-    Equal = 0i,\n+    Equal = 0,\n     /// An ordering where a compared value is greater [than another].\n     #[stable]\n-    Greater = 1i,\n+    Greater = 1,\n }\n \n impl Ordering {\n@@ -132,12 +132,12 @@ impl Ordering {\n     /// assert_eq!(Equal.reverse(), Equal);\n     /// assert_eq!(Greater.reverse(), Less);\n     ///\n-    /// let mut data: &mut [_] = &mut [2u, 10, 5, 8];\n+    /// let mut data: &mut [_] = &mut [2, 10, 5, 8];\n     ///\n     /// // sort the array from largest to smallest.\n     /// data.sort_by(|a, b| a.cmp(b).reverse());\n     ///\n-    /// let b: &mut [_] = &mut [10u, 8, 5, 2];\n+    /// let b: &mut [_] = &mut [10, 8, 5, 2];\n     /// assert!(data == b);\n     /// ```\n     #[inline]\n@@ -174,9 +174,9 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// ```\n     /// use std::cmp::Ordering::{Less, Equal, Greater};\n     ///\n-    /// assert_eq!( 5u.cmp(&10), Less);     // because 5 < 10\n-    /// assert_eq!(10u.cmp(&5),  Greater);  // because 10 > 5\n-    /// assert_eq!( 5u.cmp(&5),  Equal);    // because 5 == 5\n+    /// assert_eq!( 5.cmp(&10), Less);     // because 5 < 10\n+    /// assert_eq!(10.cmp(&5),  Greater);  // because 10 > 5\n+    /// assert_eq!( 5.cmp(&5),  Equal);    // because 5 == 5\n     /// ```\n     #[stable]\n     fn cmp(&self, other: &Self) -> Ordering;"}, {"sha": "3b1e5e231507fe37bf1a6bacea821229ca27349b", "filename": "src/libcore/default.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -150,17 +150,17 @@ default_impl! { (), () }\n default_impl! { bool, false }\n default_impl! { char, '\\x00' }\n \n-default_impl! { uint, 0u }\n-default_impl! { u8,  0u8 }\n-default_impl! { u16, 0u16 }\n-default_impl! { u32, 0u32 }\n-default_impl! { u64, 0u64 }\n+default_impl! { uint, 0 }\n+default_impl! { u8, 0 }\n+default_impl! { u16, 0 }\n+default_impl! { u32, 0 }\n+default_impl! { u64, 0 }\n \n-default_impl! { int, 0i }\n-default_impl! { i8,  0i8 }\n-default_impl! { i16, 0i16 }\n-default_impl! { i32, 0i32 }\n-default_impl! { i64, 0i64 }\n+default_impl! { int, 0 }\n+default_impl! { i8, 0 }\n+default_impl! { i16, 0 }\n+default_impl! { i32, 0 }\n+default_impl! { i64, 0 }\n \n default_impl! { f32, 0.0f32 }\n default_impl! { f64, 0.0f64 }"}, {"sha": "50123499ebae47b240c7d7ece948c1cd0c6b98a4", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -53,7 +53,7 @@ pub enum SignFormat {\n     SignNeg\n }\n \n-static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11u;\n+static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11;\n \n /// Converts a number to its string representation as a byte vector.\n /// This is meant to be a common base implementation for all numeric string\n@@ -191,7 +191,7 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n     if deccum != _0 || (limit_digits && exact && digit_count > 0) {\n         buf[end] = b'.';\n         end += 1;\n-        let mut dig = 0u;\n+        let mut dig = 0;\n \n         // calculate new digits while\n         // - there is no limit and there are digits left\n@@ -218,7 +218,7 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n \n             // Decrease the deccumulator one fractional digit at a time\n             deccum = deccum.fract();\n-            dig += 1u;\n+            dig += 1;\n         }\n \n         // If digits are limited, and that limit has been reached,"}, {"sha": "17eff98d429f622e505329b3444c00ca11630d53", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -560,8 +560,8 @@ impl<'a> Formatter<'a> {\n         };\n \n         let (pre_pad, post_pad) = match align {\n-            rt::AlignLeft => (0u, padding),\n-            rt::AlignRight | rt::AlignUnknown => (padding, 0u),\n+            rt::AlignLeft => (0, padding),\n+            rt::AlignRight | rt::AlignUnknown => (padding, 0),\n             rt::AlignCenter => (padding / 2, (padding + 1) / 2),\n         };\n \n@@ -846,7 +846,7 @@ macro_rules! tuple {\n             fn fmt(&self, f: &mut Formatter) -> Result {\n                 try!(write!(f, \"(\"));\n                 let ($(ref $name,)*) = *self;\n-                let mut n = 0i;\n+                let mut n = 0;\n                 $(\n                     if n > 0 {\n                         try!(write!(f, \", \"));"}, {"sha": "a659a9988bb77dfa8bca00c763a54518c14352ff", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -145,7 +145,7 @@ pub struct RadixFmt<T, R>(T, R);\n ///\n /// ```\n /// use std::fmt::radix;\n-/// assert_eq!(format!(\"{}\", radix(55i, 36)), \"1j\".to_string());\n+/// assert_eq!(format!(\"{}\", radix(55, 36)), \"1j\".to_string());\n /// ```\n #[unstable = \"may be renamed or move to a different module\"]\n pub fn radix<T>(x: T, base: u8) -> RadixFmt<T, Radix> {"}, {"sha": "8840eaf5fbcdb3e609493bac0b6b8f0c3e5ab0f7", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -122,7 +122,7 @@ impl Writer for SipHasher {\n         let length = msg.len();\n         self.length += length;\n \n-        let mut needed = 0u;\n+        let mut needed = 0;\n \n         if self.ntail != 0 {\n             needed = 8 - self.ntail;"}, {"sha": "591822d6e1b7ac8534cc70a23112538b70993918", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -33,7 +33,7 @@\n //! translated to the `loop` below.\n //!\n //! ```\n-//! let values = vec![1i, 2, 3];\n+//! let values = vec![1, 2, 3];\n //!\n //! // \"Syntactical sugar\" taking advantage of an iterator\n //! for &x in values.iter() {\n@@ -615,7 +615,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n-    /// let a = [1i, 2, 3, 4, 5];\n+    /// let a = [1, 2, 3, 4, 5];\n     /// assert!(a.iter().all(|x| *x > 0));\n     /// assert!(!a.iter().all(|x| *x > 2));\n     /// ```\n@@ -1141,7 +1141,7 @@ pub trait AdditiveIterator<A> {\n     /// ```\n     /// use std::iter::AdditiveIterator;\n     ///\n-    /// let a = [1i, 2, 3, 4, 5];\n+    /// let a = [1i32, 2, 3, 4, 5];\n     /// let mut it = a.iter().map(|&x| x);\n     /// assert!(it.sum() == 15);\n     /// ```\n@@ -1183,7 +1183,7 @@ pub trait MultiplicativeIterator<A> {\n     /// use std::iter::{count, MultiplicativeIterator};\n     ///\n     /// fn factorial(n: usize) -> usize {\n-    ///     count(1u, 1).take_while(|&i| i <= n).product()\n+    ///     count(1, 1).take_while(|&i| i <= n).product()\n     /// }\n     /// assert!(factorial(0) == 1);\n     /// assert!(factorial(1) == 1);\n@@ -2526,7 +2526,7 @@ pub struct Range<A> {\n /// ```\n /// let array = [0, 1, 2, 3, 4];\n ///\n-/// for i in range(0, 5u) {\n+/// for i in range(0, 5) {\n ///     println!(\"{}\", i);\n ///     assert_eq!(i,  array[i]);\n /// }"}, {"sha": "d44eaae820f7f614765b668e5275b795c14ea22c", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -48,7 +48,7 @@ macro_rules! panic {\n /// let x = true;\n /// assert!(x, \"x wasn't true!\");\n ///\n-/// let a = 3i; let b = 27i;\n+/// let a = 3; let b = 27;\n /// assert!(a + b == 30, \"a = {}, b = {}\", a, b);\n /// ```\n #[macro_export]\n@@ -74,8 +74,8 @@ macro_rules! assert {\n /// # Example\n ///\n /// ```\n-/// let a = 3i;\n-/// let b = 1i + 2i;\n+/// let a = 3;\n+/// let b = 1 + 2;\n /// assert_eq!(a, b);\n /// ```\n #[macro_export]\n@@ -141,8 +141,8 @@ macro_rules! debug_assert {\n /// # Example\n ///\n /// ```\n-/// let a = 3i;\n-/// let b = 1i + 2i;\n+/// let a = 3;\n+/// let b = 1 + 2;\n /// debug_assert_eq!(a, b);\n /// ```\n #[macro_export]"}, {"sha": "608a78325b3ecf431592c2221e3540393df37930", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -187,13 +187,13 @@ pub unsafe fn uninitialized<T>() -> T {\n /// ```\n /// use std::mem;\n ///\n-/// let x = &mut 5i;\n-/// let y = &mut 42i;\n+/// let x = &mut 5;\n+/// let y = &mut 42;\n ///\n /// mem::swap(x, y);\n ///\n-/// assert_eq!(42i, *x);\n-/// assert_eq!(5i, *y);\n+/// assert_eq!(42, *x);\n+/// assert_eq!(5, *y);\n /// ```\n #[inline]\n #[stable]\n@@ -277,7 +277,7 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n /// ```\n /// use std::cell::RefCell;\n ///\n-/// let x = RefCell::new(1i);\n+/// let x = RefCell::new(1);\n ///\n /// let mut mutable_borrow = x.borrow_mut();\n /// *mutable_borrow = 1;\n@@ -306,9 +306,9 @@ pub fn drop<T>(_x: T) { }\n /// ```\n /// use std::mem;\n ///\n-/// let one = unsafe { mem::transmute_copy(&1i) };\n+/// let one = unsafe { mem::transmute_copy(&1) };\n ///\n-/// assert_eq!(1u, one);\n+/// assert_eq!(1, one);\n /// ```\n #[inline]\n #[stable]"}, {"sha": "2186101bc2fe4d82dd721503cc00ddeb3e52c565", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -23,12 +23,12 @@ use num::FpCategory as Fp;\n use option::Option;\n \n #[unstable = \"pending integer conventions\"]\n-pub const RADIX: uint = 2u;\n+pub const RADIX: uint = 2;\n \n #[unstable = \"pending integer conventions\"]\n-pub const MANTISSA_DIGITS: uint = 24u;\n+pub const MANTISSA_DIGITS: uint = 24;\n #[unstable = \"pending integer conventions\"]\n-pub const DIGITS: uint = 6u;\n+pub const DIGITS: uint = 6;\n \n #[stable]\n pub const EPSILON: f32 = 1.19209290e-07_f32;"}, {"sha": "a7f0266b095fce42aa9d9f00f461a89cf041dafc", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -27,11 +27,11 @@ use option::Option;\n // members of `Bounded` and `Float`.\n \n #[unstable = \"pending integer conventions\"]\n-pub const RADIX: uint = 2u;\n+pub const RADIX: uint = 2;\n \n-pub const MANTISSA_DIGITS: uint = 53u;\n+pub const MANTISSA_DIGITS: uint = 53;\n #[unstable = \"pending integer conventions\"]\n-pub const DIGITS: uint = 15u;\n+pub const DIGITS: uint = 15;\n \n #[stable]\n pub const EPSILON: f64 = 2.2204460492503131e-16_f64;"}, {"sha": "910c9e6c670f78522124e8d0423e24e3fb6f6f34", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -356,7 +356,7 @@ pub trait Int\n     /// ```rust\n     /// use std::num::Int;\n     ///\n-    /// assert_eq!(2i.pow(4), 16);\n+    /// assert_eq!(2.pow(4), 16);\n     /// ```\n     #[unstable = \"pending integer conventions\"]\n     #[inline]\n@@ -1185,7 +1185,7 @@ impl_from_primitive! { f64, to_f64 }\n /// ```\n /// use std::num;\n ///\n-/// let twenty: f32 = num::cast(0x14i).unwrap();\n+/// let twenty: f32 = num::cast(0x14).unwrap();\n /// assert_eq!(twenty, 20f32);\n /// ```\n ///\n@@ -1571,8 +1571,8 @@ macro_rules! from_str_radix_float_impl {\n                 let exp = match exp_info {\n                     Some((c, offset)) => {\n                         let base = match c {\n-                            'E' | 'e' if radix == 10 => 10u as $T,\n-                            'P' | 'p' if radix == 16 => 2u as $T,\n+                            'E' | 'e' if radix == 10 => 10.0,\n+                            'P' | 'p' if radix == 16 => 2.0,\n                             _ => return None,\n                         };\n "}, {"sha": "3ee2aa678e97e16141954ae7d2bb28131c780f7c", "filename": "src/libcore/option.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -254,12 +254,12 @@ impl<T> Option<T> {\n     /// # Example\n     ///\n     /// ```\n-    /// let mut x = Some(2u);\n+    /// let mut x = Some(2);\n     /// match x.as_mut() {\n     ///     Some(v) => *v = 42,\n     ///     None => {},\n     /// }\n-    /// assert_eq!(x, Some(42u));\n+    /// assert_eq!(x, Some(42));\n     /// ```\n     #[inline]\n     #[stable]\n@@ -384,9 +384,9 @@ impl<T> Option<T> {\n     /// # Example\n     ///\n     /// ```\n-    /// let k = 10u;\n-    /// assert_eq!(Some(4u).unwrap_or_else(|| 2 * k), 4u);\n-    /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20u);\n+    /// let k = 10i32;\n+    /// assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);\n+    /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20);\n     /// ```\n     #[inline]\n     #[stable]\n@@ -427,10 +427,10 @@ impl<T> Option<T> {\n     ///\n     /// ```\n     /// let x = Some(\"foo\");\n-    /// assert_eq!(x.map_or(42u, |v| v.len()), 3u);\n+    /// assert_eq!(x.map_or(42, |v| v.len()), 3);\n     ///\n     /// let x: Option<&str> = None;\n-    /// assert_eq!(x.map_or(42u, |v| v.len()), 42u);\n+    /// assert_eq!(x.map_or(42, |v| v.len()), 42);\n     /// ```\n     #[inline]\n     #[stable]\n@@ -446,13 +446,13 @@ impl<T> Option<T> {\n     /// # Example\n     ///\n     /// ```\n-    /// let k = 21u;\n+    /// let k = 21;\n     ///\n     /// let x = Some(\"foo\");\n-    /// assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3u);\n+    /// assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3);\n     ///\n     /// let x: Option<&str> = None;\n-    /// assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42u);\n+    /// assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42);\n     /// ```\n     #[inline]\n     #[stable]\n@@ -470,10 +470,10 @@ impl<T> Option<T> {\n     ///\n     /// ```\n     /// let x = Some(\"foo\");\n-    /// assert_eq!(x.ok_or(0i), Ok(\"foo\"));\n+    /// assert_eq!(x.ok_or(0), Ok(\"foo\"));\n     ///\n     /// let x: Option<&str> = None;\n-    /// assert_eq!(x.ok_or(0i), Err(0i));\n+    /// assert_eq!(x.ok_or(0), Err(0));\n     /// ```\n     #[inline]\n     #[unstable]\n@@ -491,10 +491,10 @@ impl<T> Option<T> {\n     ///\n     /// ```\n     /// let x = Some(\"foo\");\n-    /// assert_eq!(x.ok_or_else(|| 0i), Ok(\"foo\"));\n+    /// assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\"));\n     ///\n     /// let x: Option<&str> = None;\n-    /// assert_eq!(x.ok_or_else(|| 0i), Err(0i));\n+    /// assert_eq!(x.ok_or_else(|| 0), Err(0));\n     /// ```\n     #[inline]\n     #[unstable]\n@@ -514,7 +514,7 @@ impl<T> Option<T> {\n     /// # Example\n     ///\n     /// ```\n-    /// let x = Some(4u);\n+    /// let x = Some(4);\n     /// assert_eq!(x.iter().next(), Some(&4));\n     ///\n     /// let x: Option<uint> = None;\n@@ -531,9 +531,9 @@ impl<T> Option<T> {\n     /// # Example\n     ///\n     /// ```\n-    /// let mut x = Some(4u);\n+    /// let mut x = Some(4);\n     /// match x.iter_mut().next() {\n-    ///     Some(&mut ref mut v) => *v = 42u,\n+    ///     Some(&mut ref mut v) => *v = 42,\n     ///     None => {},\n     /// }\n     /// assert_eq!(x, Some(42));\n@@ -575,15 +575,15 @@ impl<T> Option<T> {\n     /// # Example\n     ///\n     /// ```\n-    /// let x = Some(2u);\n+    /// let x = Some(2);\n     /// let y: Option<&str> = None;\n     /// assert_eq!(x.and(y), None);\n     ///\n     /// let x: Option<uint> = None;\n     /// let y = Some(\"foo\");\n     /// assert_eq!(x.and(y), None);\n     ///\n-    /// let x = Some(2u);\n+    /// let x = Some(2);\n     /// let y = Some(\"foo\");\n     /// assert_eq!(x.and(y), Some(\"foo\"));\n     ///\n@@ -628,17 +628,17 @@ impl<T> Option<T> {\n     /// # Example\n     ///\n     /// ```\n-    /// let x = Some(2u);\n+    /// let x = Some(2);\n     /// let y = None;\n-    /// assert_eq!(x.or(y), Some(2u));\n+    /// assert_eq!(x.or(y), Some(2));\n     ///\n     /// let x = None;\n-    /// let y = Some(100u);\n-    /// assert_eq!(x.or(y), Some(100u));\n+    /// let y = Some(100);\n+    /// assert_eq!(x.or(y), Some(100));\n     ///\n-    /// let x = Some(2u);\n-    /// let y = Some(100u);\n-    /// assert_eq!(x.or(y), Some(2u));\n+    /// let x = Some(2);\n+    /// let y = Some(100);\n+    /// assert_eq!(x.or(y), Some(2));\n     ///\n     /// let x: Option<uint> = None;\n     /// let y = None;\n@@ -684,7 +684,7 @@ impl<T> Option<T> {\n     /// # Example\n     ///\n     /// ```\n-    /// let mut x = Some(2u);\n+    /// let mut x = Some(2);\n     /// x.take();\n     /// assert_eq!(x, None);\n     ///\n@@ -728,8 +728,8 @@ impl<T: Default> Option<T> {\n     /// let good_year = good_year_from_input.parse().unwrap_or_default();\n     /// let bad_year = bad_year_from_input.parse().unwrap_or_default();\n     ///\n-    /// assert_eq!(1909i, good_year);\n-    /// assert_eq!(0i, bad_year);\n+    /// assert_eq!(1909, good_year);\n+    /// assert_eq!(0, bad_year);\n     /// ```\n     #[inline]\n     #[stable]\n@@ -894,12 +894,12 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// ```rust\n     /// use std::uint;\n     ///\n-    /// let v = vec!(1u, 2u);\n+    /// let v = vec!(1, 2);\n     /// let res: Option<Vec<uint>> = v.iter().map(|&x: &uint|\n     ///     if x == uint::MAX { None }\n     ///     else { Some(x + 1) }\n     /// ).collect();\n-    /// assert!(res == Some(vec!(2u, 3u)));\n+    /// assert!(res == Some(vec!(2, 3)));\n     /// ```\n     #[inline]\n     #[stable]"}, {"sha": "4ea3bf8e5bddd334942fa513c10315fd3385b7ef", "filename": "src/libcore/result.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -482,8 +482,8 @@ impl<T, E> Result<T, E> {\n     /// ```\n     /// fn stringify(x: uint) -> String { format!(\"error code: {}\", x) }\n     ///\n-    /// let x: Result<uint, uint> = Ok(2u);\n-    /// assert_eq!(x.map_err(stringify), Ok(2u));\n+    /// let x: Result<uint, uint> = Ok(2);\n+    /// assert_eq!(x.map_err(stringify), Ok(2));\n     ///\n     /// let x: Result<uint, uint> = Err(13);\n     /// assert_eq!(x.map_err(stringify), Err(\"error code: 13\".to_string()));\n@@ -546,7 +546,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     /// let x: Result<uint, &str> = Ok(5);\n     /// let v: Vec<uint> = x.into_iter().collect();\n-    /// assert_eq!(v, vec![5u]);\n+    /// assert_eq!(v, vec![5]);\n     ///\n     /// let x: Result<uint, &str> = Err(\"nothing!\");\n     /// let v: Vec<uint> = x.into_iter().collect();\n@@ -676,9 +676,9 @@ impl<T, E> Result<T, E> {\n     /// # Example\n     ///\n     /// ```\n-    /// let optb = 2u;\n-    /// let x: Result<uint, &str> = Ok(9u);\n-    /// assert_eq!(x.unwrap_or(optb), 9u);\n+    /// let optb = 2;\n+    /// let x: Result<uint, &str> = Ok(9);\n+    /// assert_eq!(x.unwrap_or(optb), 9);\n     ///\n     /// let x: Result<uint, &str> = Err(\"error\");\n     /// assert_eq!(x.unwrap_or(optb), optb);\n@@ -700,8 +700,8 @@ impl<T, E> Result<T, E> {\n     /// ```\n     /// fn count(x: &str) -> uint { x.len() }\n     ///\n-    /// assert_eq!(Ok(2u).unwrap_or_else(count), 2u);\n-    /// assert_eq!(Err(\"foo\").unwrap_or_else(count), 3u);\n+    /// assert_eq!(Ok(2).unwrap_or_else(count), 2);\n+    /// assert_eq!(Err(\"foo\").unwrap_or_else(count), 3);\n     /// ```\n     #[inline]\n     #[stable]\n@@ -725,8 +725,8 @@ impl<T, E: Display> Result<T, E> {\n     /// # Example\n     ///\n     /// ```\n-    /// let x: Result<uint, &str> = Ok(2u);\n-    /// assert_eq!(x.unwrap(), 2u);\n+    /// let x: Result<uint, &str> = Ok(2);\n+    /// assert_eq!(x.unwrap(), 2);\n     /// ```\n     ///\n     /// ```{.should_fail}\n@@ -756,7 +756,7 @@ impl<T: Display, E> Result<T, E> {\n     /// # Example\n     ///\n     /// ```{.should_fail}\n-    /// let x: Result<uint, &str> = Ok(2u);\n+    /// let x: Result<uint, &str> = Ok(2);\n     /// x.unwrap_err(); // panics with `2`\n     /// ```\n     ///\n@@ -897,12 +897,12 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n     /// ```rust\n     /// use std::uint;\n     ///\n-    /// let v = vec!(1u, 2u);\n+    /// let v = vec!(1, 2);\n     /// let res: Result<Vec<uint>, &'static str> = v.iter().map(|&x: &uint|\n     ///     if x == uint::MAX { Err(\"Overflow!\") }\n     ///     else { Ok(x + 1) }\n     /// ).collect();\n-    /// assert!(res == Ok(vec!(2u, 3u)));\n+    /// assert!(res == Ok(vec!(2, 3)));\n     /// ```\n     #[inline]\n     fn from_iter<I: Iterator<Item=Result<A, E>>>(iter: I) -> Result<V, E> {"}, {"sha": "f08978db8fe9dbc7e8dfd7f9d97dde663e03a9c2", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -653,7 +653,7 @@ macro_rules! iterator {\n                             self.ptr = transmute(self.ptr as uint + 1);\n \n                             // Use a non-null pointer value\n-                            Some(transmute(1u))\n+                            Some(&mut *(1 as *mut _))\n                         } else {\n                             let old = self.ptr;\n                             self.ptr = self.ptr.offset(1);\n@@ -687,7 +687,7 @@ macro_rules! iterator {\n                             self.end = transmute(self.end as uint - 1);\n \n                             // Use a non-null pointer value\n-                            Some(transmute(1u))\n+                            Some(&mut *(1 as *mut _))\n                         } else {\n                             self.end = self.end.offset(-1);\n \n@@ -795,7 +795,7 @@ impl<'a, T> RandomAccessIterator for Iter<'a, T> {\n             if index < self.indexable() {\n                 if mem::size_of::<T>() == 0 {\n                     // Use a non-null pointer value\n-                    Some(transmute(1u))\n+                    Some(&mut *(1 as *mut _))\n                 } else {\n                     Some(transmute(self.ptr.offset(index as int)))\n                 }\n@@ -1175,7 +1175,7 @@ impl<'a, T> Iterator for Windows<'a, T> {\n             (0, Some(0))\n         } else {\n             let x = self.v.len() - self.size;\n-            (x.saturating_add(1), x.checked_add(1u))\n+            (x.saturating_add(1), x.checked_add(1))\n         }\n     }\n }"}, {"sha": "b0227c749cc338cacc1c9eaf148e4981dbcf4b64", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "patch": "@@ -198,9 +198,9 @@ pub unsafe fn from_utf8_unchecked<'a>(v: &'a [u8]) -> &'a str {\n #[deprecated = \"use std::ffi::c_str_to_bytes + str::from_utf8\"]\n pub unsafe fn from_c_str(s: *const i8) -> &'static str {\n     let s = s as *const u8;\n-    let mut len = 0u;\n+    let mut len = 0;\n     while *s.offset(len as int) != 0 {\n-        len += 1u;\n+        len += 1;\n     }\n     let v: &'static [u8] = ::mem::transmute(Slice { data: s, len: len });\n     from_utf8(v).ok().expect(\"from_c_str passed invalid utf-8 data\")\n@@ -1510,7 +1510,7 @@ impl StrExt for str {\n             None => \"\",\n             Some(last) => {\n                 let next = self.char_range_at(last).next;\n-                unsafe { self.slice_unchecked(0u, next) }\n+                unsafe { self.slice_unchecked(0, next) }\n             }\n         }\n     }\n@@ -1543,7 +1543,7 @@ impl StrExt for str {\n         fn multibyte_char_range_at_reverse(s: &str, mut i: uint) -> CharRange {\n             // while there is a previous byte == 10......\n             while i > 0 && s.as_bytes()[i] & !CONT_MASK == TAG_CONT_U8 {\n-                i -= 1u;\n+                i -= 1;\n             }\n \n             let mut val = s.as_bytes()[i] as u32;\n@@ -1613,7 +1613,7 @@ impl StrExt for str {\n         if self.is_empty() {\n             None\n         } else {\n-            let CharRange {ch, next} = self.char_range_at(0u);\n+            let CharRange {ch, next} = self.char_range_at(0);\n             let next_s = unsafe { self.slice_unchecked(next, self.len()) };\n             Some((ch, next_s))\n         }"}]}