{"sha": "aa9490bd7b646f7b62cf831c462cde45598b468f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhOTQ5MGJkN2I2NDZmN2I2MmNmODMxYzQ2MmNkZTQ1NTk4YjQ2OGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-22T13:15:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-22T13:15:43Z"}, "message": "Rollup merge of #63796 - estebank:opaque_future, r=Centril\n\nTweak E0308 on opaque types\n\n```\nerror[E0308]: if and else have incompatible types\n  --> file.rs:21:9\n   |\n18 | /     if true {\n19 | |         thing_one()\n   | |         ----------- expected because of this\n20 | |     } else {\n21 | |         thing_two()\n   | |         ^^^^^^^^^^^ expected opaque type, found a different opaque type\n22 | |     }.await\n   | |_____- if and else have incompatible types\n   |\n   = note: expected type `impl std::future::Future` (opaque type)\n              found type `impl std::future::Future` (opaque type)\n   = note: distinct uses of `impl Trait` result in different opaque types\n   = help: if both futures resolve to the same type, consider `await`ing on both of them\n```\n\nr? @Centril\nCC #63167", "tree": {"sha": "5e8d148b8ec66e1106b078ec72df0f042ee3ad0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e8d148b8ec66e1106b078ec72df0f042ee3ad0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa9490bd7b646f7b62cf831c462cde45598b468f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdXpV/CRBK7hj4Ov3rIwAAdHIIAD061+/yboCloBwRmmIDij+j\nSHCwX1Ww5+LLtqwDKYZmWwL1sENAUWknjm+uRW7bZw+jqH41M1ThlvPbiF/flesa\njWVIcKB3uaMesN0tMarRnvYCo3wnchLGxzS/4qB89kHo69qGmqffayN+3EJUdyEi\np9gudQHbgkrTIf6nSTNPwIydQASklKSLVtV9BOUOEM1dImipNnCZLP8D3ZGSe4y4\n6dQG7bZuCpNI39Uj9JEw+zsrgvWaSl8VGgA5QfJQo3l09fVwrt9vvpLk/vqa0aOb\n7lyjao8HQTeqqsROT0kM6nnUSgqqejqH/nAlnx64KhgRbggNKFydaggIXAyfM4g=\n=3kmZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e8d148b8ec66e1106b078ec72df0f042ee3ad0c\nparent 6c1cdb75ab12a487daee1564beb93e7fd95eff10\nparent a710c610b2ea1550014e9f6bd20e5e4aed8a716c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566479743 +0200\ncommitter GitHub <noreply@github.com> 1566479743 +0200\n\nRollup merge of #63796 - estebank:opaque_future, r=Centril\n\nTweak E0308 on opaque types\n\n```\nerror[E0308]: if and else have incompatible types\n  --> file.rs:21:9\n   |\n18 | /     if true {\n19 | |         thing_one()\n   | |         ----------- expected because of this\n20 | |     } else {\n21 | |         thing_two()\n   | |         ^^^^^^^^^^^ expected opaque type, found a different opaque type\n22 | |     }.await\n   | |_____- if and else have incompatible types\n   |\n   = note: expected type `impl std::future::Future` (opaque type)\n              found type `impl std::future::Future` (opaque type)\n   = note: distinct uses of `impl Trait` result in different opaque types\n   = help: if both futures resolve to the same type, consider `await`ing on both of them\n```\n\nr? @Centril\nCC #63167\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa9490bd7b646f7b62cf831c462cde45598b468f", "html_url": "https://github.com/rust-lang/rust/commit/aa9490bd7b646f7b62cf831c462cde45598b468f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa9490bd7b646f7b62cf831c462cde45598b468f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c1cdb75ab12a487daee1564beb93e7fd95eff10", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c1cdb75ab12a487daee1564beb93e7fd95eff10", "html_url": "https://github.com/rust-lang/rust/commit/6c1cdb75ab12a487daee1564beb93e7fd95eff10"}, {"sha": "a710c610b2ea1550014e9f6bd20e5e4aed8a716c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a710c610b2ea1550014e9f6bd20e5e4aed8a716c", "html_url": "https://github.com/rust-lang/rust/commit/a710c610b2ea1550014e9f6bd20e5e4aed8a716c"}], "stats": {"total": 68, "additions": 62, "deletions": 6}, "files": [{"sha": "9be73cf3c6d1645439e9e3af528318a097acdf5f", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa9490bd7b646f7b62cf831c462cde45598b468f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9490bd7b646f7b62cf831c462cde45598b468f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=aa9490bd7b646f7b62cf831c462cde45598b468f", "patch": "@@ -1650,7 +1650,7 @@ impl<'tcx> ObligationCause<'tcx> {\n                 hir::MatchSource::IfLetDesugar { .. } => \"`if let` arms have compatible types\",\n                 _ => \"match arms have compatible types\",\n             },\n-            IfExpression { .. } => \"if and else have compatible types\",\n+            IfExpression { .. } => \"if and else have incompatible types\",\n             IfExpressionWithNoElse => \"if missing an else returns ()\",\n             MainFunctionType => \"`main` function has the correct type\",\n             StartFunctionType => \"`start` function has the correct type\","}, {"sha": "c70006b68d69aff5f3230a50abde2935206e7c3d", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aa9490bd7b646f7b62cf831c462cde45598b468f/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9490bd7b646f7b62cf831c462cde45598b468f/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=aa9490bd7b646f7b62cf831c462cde45598b468f", "patch": "@@ -247,20 +247,32 @@ impl<'tcx> ty::TyS<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    pub fn note_and_explain_type_err(self,\n-                                     db: &mut DiagnosticBuilder<'_>,\n-                                     err: &TypeError<'tcx>,\n-                                     sp: Span) {\n+    pub fn note_and_explain_type_err(\n+        self,\n+        db: &mut DiagnosticBuilder<'_>,\n+        err: &TypeError<'tcx>,\n+        sp: Span,\n+    ) {\n         use self::TypeError::*;\n \n-        match err.clone() {\n+        match err {\n             Sorts(values) => {\n                 let expected_str = values.expected.sort_string(self);\n                 let found_str = values.found.sort_string(self);\n                 if expected_str == found_str && expected_str == \"closure\" {\n                     db.note(\"no two closures, even if identical, have the same type\");\n                     db.help(\"consider boxing your closure and/or using it as a trait object\");\n                 }\n+                if expected_str == found_str && expected_str == \"opaque type\" { // Issue #63167\n+                    db.note(\"distinct uses of `impl Trait` result in different opaque types\");\n+                    let e_str = values.expected.to_string();\n+                    let f_str = values.found.to_string();\n+                    if &e_str == &f_str && &e_str == \"impl std::future::Future\" {\n+                        // FIXME: use non-string based check.\n+                        db.help(\"if both `Future`s have the same `Output` type, consider \\\n+                                 `.await`ing on both of them\");\n+                    }\n+                }\n                 if let (ty::Infer(ty::IntVar(_)), ty::Float(_)) =\n                        (&values.found.sty, &values.expected.sty) // Issue #53280\n                 {"}, {"sha": "979bb60d48c12c820959e4384da300240a2b2a7c", "filename": "src/test/ui/suggestions/opaque-type-error.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aa9490bd7b646f7b62cf831c462cde45598b468f/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9490bd7b646f7b62cf831c462cde45598b468f/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.rs?ref=aa9490bd7b646f7b62cf831c462cde45598b468f", "patch": "@@ -0,0 +1,24 @@\n+// edition:2018\n+use core::future::Future;\n+\n+async fn base_thing() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+fn thing_one() -> impl Future<Output = Result<(), ()>> {\n+    base_thing()\n+}\n+\n+fn thing_two() -> impl Future<Output = Result<(), ()>> {\n+    base_thing()\n+}\n+\n+async fn thing() -> Result<(), ()> {\n+    if true {\n+        thing_one()\n+    } else {\n+        thing_two() //~ ERROR if and else have incompatible types\n+    }.await\n+}\n+\n+fn main() {}"}, {"sha": "3c9ea05aeceb2f8d70697e572eb037b439ddfb3f", "filename": "src/test/ui/suggestions/opaque-type-error.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aa9490bd7b646f7b62cf831c462cde45598b468f/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa9490bd7b646f7b62cf831c462cde45598b468f/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr?ref=aa9490bd7b646f7b62cf831c462cde45598b468f", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: if and else have incompatible types\n+  --> $DIR/opaque-type-error.rs:20:9\n+   |\n+LL | /     if true {\n+LL | |         thing_one()\n+   | |         ----------- expected because of this\n+LL | |     } else {\n+LL | |         thing_two()\n+   | |         ^^^^^^^^^^^ expected opaque type, found a different opaque type\n+LL | |     }.await\n+   | |_____- if and else have incompatible types\n+   |\n+   = note: expected type `impl std::future::Future` (opaque type)\n+              found type `impl std::future::Future` (opaque type)\n+   = note: distinct uses of `impl Trait` result in different opaque types\n+   = help: if both `Future`s have the same `Output` type, consider `.await`ing on both of them\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}