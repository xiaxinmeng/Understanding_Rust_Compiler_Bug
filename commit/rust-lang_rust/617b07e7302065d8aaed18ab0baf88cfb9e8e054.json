{"sha": "617b07e7302065d8aaed18ab0baf88cfb9e8e054", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxN2IwN2U3MzAyMDY1ZDhhYWVkMThhYjBiYWY4OGNmYjllOGUwNTQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-12-06T06:36:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-06T06:36:56Z"}, "message": "Rollup merge of #66649 - Wind-River:master_xyz, r=alexcrichton\n\nVxWorks: fix issues in accessing environment variables", "tree": {"sha": "bcd96e96f0627d7a5feb976836ce9ff212838c72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcd96e96f0627d7a5feb976836ce9ff212838c72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/617b07e7302065d8aaed18ab0baf88cfb9e8e054", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd6fcJCRBK7hj4Ov3rIwAAdHIIAD2PNQKufCXQW/GcVk8+Ofrd\nwnS0kkFJBMYjJ6gxIiNQe2FIIrf7h0wW2E0zejqSkgpBscy0Jg2J+Dh8Pf69Hr74\nDkQw1Ek72PaUtyMPG3gluYV1cjhCSwIc5D6FKe/Usoe6SuXn6s/lqa8ZVKCzSNGb\nsV4Regb/81zs/tIfyqq/DqzJ05Zz+A+uTaEp+kjS3pXtybwMxzEIPYFlFqaDUcna\nmp5Zfw7M9NQ7Yj6n608mpYHYqIIBIy8VKJpqnkFEMsBTBTQUsLyEWiHZsxvLbic/\nKNhEYK87dlcCkgssbalscxRCQJEWGqxl+b8wIWq76sOAV6YvEzCzX8NenxcD7SY=\n=MV6S\n-----END PGP SIGNATURE-----\n", "payload": "tree bcd96e96f0627d7a5feb976836ce9ff212838c72\nparent 234c9f21d9930e4ae804d00b191d0780959cfcbe\nparent de362b41468f71ab7b1843007f97d4c1ca93638c\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1575614216 +0900\ncommitter GitHub <noreply@github.com> 1575614216 +0900\n\nRollup merge of #66649 - Wind-River:master_xyz, r=alexcrichton\n\nVxWorks: fix issues in accessing environment variables\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/617b07e7302065d8aaed18ab0baf88cfb9e8e054", "html_url": "https://github.com/rust-lang/rust/commit/617b07e7302065d8aaed18ab0baf88cfb9e8e054", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/617b07e7302065d8aaed18ab0baf88cfb9e8e054/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "234c9f21d9930e4ae804d00b191d0780959cfcbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/234c9f21d9930e4ae804d00b191d0780959cfcbe", "html_url": "https://github.com/rust-lang/rust/commit/234c9f21d9930e4ae804d00b191d0780959cfcbe"}, {"sha": "de362b41468f71ab7b1843007f97d4c1ca93638c", "url": "https://api.github.com/repos/rust-lang/rust/commits/de362b41468f71ab7b1843007f97d4c1ca93638c", "html_url": "https://github.com/rust-lang/rust/commit/de362b41468f71ab7b1843007f97d4c1ca93638c"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "71e1d1626c1d0bed0bd8027671a7352cb782f3fa", "filename": "src/libstd/sys/vxworks/os.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/617b07e7302065d8aaed18ab0baf88cfb9e8e054/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/617b07e7302065d8aaed18ab0baf88cfb9e8e054/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs?ref=617b07e7302065d8aaed18ab0baf88cfb9e8e054", "patch": "@@ -11,14 +11,12 @@ use crate::path::{self, PathBuf, Path};\n use crate::ptr;\n use crate::slice;\n use crate::str;\n-use crate::sys_common::mutex::Mutex;\n+use crate::sys_common::mutex::{Mutex, MutexGuard};\n use crate::sys::cvt;\n /*use sys::fd; this one is probably important */\n use crate::vec;\n \n const TMPBUF_SZ: usize = 128;\n-static ENV_LOCK: Mutex = Mutex::new();\n-\n \n // This is a terrible fix\n use crate::sys::os_str::Buf;\n@@ -200,11 +198,18 @@ pub unsafe fn environ() -> *mut *const *const c_char {\n     &mut environ\n }\n \n+pub unsafe fn env_lock() -> MutexGuard<'static> {\n+    // We never call `ENV_LOCK.init()`, so it is UB to attempt to\n+    // acquire this mutex reentrantly!\n+    static ENV_LOCK: Mutex = Mutex::new();\n+    ENV_LOCK.lock()\n+}\n+\n /// Returns a vector of (variable, value) byte-vector pairs for all the\n /// environment variables of the current process.\n pub fn env() -> Env {\n     unsafe {\n-        let _guard = ENV_LOCK.lock();\n+        let _guard = env_lock();\n         let mut environ = *environ();\n         if environ == ptr::null() {\n             panic!(\"os::env() failure getting env string from OS: {}\",\n@@ -244,7 +249,7 @@ pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n     // always None as well\n     let k = CString::new(k.as_bytes())?;\n     unsafe {\n-        let _guard = ENV_LOCK.lock();\n+        let _guard = env_lock();\n         let s = libc::getenv(k.as_ptr()) as *const libc::c_char;\n         let ret = if s.is_null() {\n             None\n@@ -260,7 +265,7 @@ pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n     let v = CString::new(v.as_bytes())?;\n \n     unsafe {\n-        let _guard = ENV_LOCK.lock();\n+        let _guard = env_lock();\n         cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(|_| ())\n     }\n }\n@@ -269,7 +274,7 @@ pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n     let nbuf = CString::new(n.as_bytes())?;\n \n     unsafe {\n-        let _guard = ENV_LOCK.lock();\n+        let _guard = env_lock();\n         cvt(libc::unsetenv(nbuf.as_ptr())).map(|_| ())\n     }\n }"}, {"sha": "79bfd770f8ed7db057f48573959e2412ead1fc07", "filename": "src/libstd/sys/vxworks/process/process_vxworks.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/617b07e7302065d8aaed18ab0baf88cfb9e8e054/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/617b07e7302065d8aaed18ab0baf88cfb9e8e054/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs?ref=617b07e7302065d8aaed18ab0baf88cfb9e8e054", "patch": "@@ -15,6 +15,7 @@ impl Command {\n                  -> io::Result<(Process, StdioPipes)> {\n         use crate::sys::{cvt_r};\n         const CLOEXEC_MSG_FOOTER: &'static [u8] = b\"NOEX\";\n+        let envp = self.capture_env();\n \n         if self.saw_nul() {\n             return Err(io::Error::new(ErrorKind::InvalidInput,\n@@ -52,12 +53,19 @@ impl Command {\n                 t!(cvt(libc::chdir(cwd.as_ptr())));\n             }\n \n+            let c_envp = envp.as_ref().map(|c| c.as_ptr())\n+                .unwrap_or_else(|| *sys::os::environ() as *const _);\n+            let stack_size = thread::min_stack();\n+\n+            // ensure that access to the environment is synchronized\n+            let _lock = sys::os::env_lock();\n+\n             let ret = libc::rtpSpawn(\n                 self.get_argv()[0],                   // executing program\n                 self.get_argv().as_ptr() as *mut *const c_char, // argv\n-                *sys::os::environ() as *mut *const c_char,\n+                c_envp as *mut *const c_char,\n                 100 as c_int,                         // initial priority\n-                thread::min_stack(),                  // initial stack size.\n+                stack_size,                           // initial stack size.\n                 0,                                    // options\n                 0                                     // task options\n             );"}]}