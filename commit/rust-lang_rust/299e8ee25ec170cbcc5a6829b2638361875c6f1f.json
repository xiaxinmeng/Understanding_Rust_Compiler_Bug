{"sha": "299e8ee25ec170cbcc5a6829b2638361875c6f1f", "node_id": "C_kwDOAAsO6NoAKDI5OWU4ZWUyNWVjMTcwY2JjYzVhNjgyOWIyNjM4MzYxODc1YzZmMWY", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-17T10:05:31Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-18T19:43:19Z"}, "message": "Add an extra check over filter type", "tree": {"sha": "4c969d4465a73e0861a50066b6433603e9ee9ee9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c969d4465a73e0861a50066b6433603e9ee9ee9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/299e8ee25ec170cbcc5a6829b2638361875c6f1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/299e8ee25ec170cbcc5a6829b2638361875c6f1f", "html_url": "https://github.com/rust-lang/rust/commit/299e8ee25ec170cbcc5a6829b2638361875c6f1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/299e8ee25ec170cbcc5a6829b2638361875c6f1f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7d538a8c493b52ffc76ac1aa325ad4e516bb3e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7d538a8c493b52ffc76ac1aa325ad4e516bb3e9", "html_url": "https://github.com/rust-lang/rust/commit/d7d538a8c493b52ffc76ac1aa325ad4e516bb3e9"}], "stats": {"total": 96, "additions": 92, "deletions": 4}, "files": [{"sha": "4d78a50e4d0ff7019020cc8401531d14a19c2de9", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/299e8ee25ec170cbcc5a6829b2638361875c6f1f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/299e8ee25ec170cbcc5a6829b2638361875c6f1f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=299e8ee25ec170cbcc5a6829b2638361875c6f1f", "patch": "@@ -235,7 +235,18 @@ window.initSearch = function(rawSearchIndex) {\n      * @return {boolean}\n      */\n     function isSeparatorCharacter(c) {\n-        return \", \\t\".indexOf(c) !== -1;\n+        return c === \",\" || isWhitespaceCharacter(c);\n+    }\n+\n+    /**\n+     * Returns `true` if the given `c` character is a whitespace.\n+     *\n+     * @param {string} c\n+     *\n+     * @return {boolean}\n+     */\n+    function isWhitespaceCharacter(c) {\n+        return c === \" \" || c === \"\\t\";\n     }\n \n     /**\n@@ -424,6 +435,22 @@ window.initSearch = function(rawSearchIndex) {\n         parserState.pos += 1;\n     }\n \n+    /**\n+     * Checks that the type filter doesn't have unwanted characters like `<>` (which are ignored\n+     * if empty).\n+     *\n+     * @param {ParserState} parserState\n+     */\n+    function checkExtraTypeFilterCharacters(parserState) {\n+        var query = parserState.userQuery;\n+\n+        for (var pos = 0; pos < parserState.pos; ++pos) {\n+            if (!isIdentCharacter(query[pos]) && !isWhitespaceCharacter(query[pos])) {\n+                throw new Error(`Unexpected \\`${query[pos]}\\` in type filter`);\n+            }\n+        }\n+    }\n+\n     /**\n      * Parses the provided `query` input to fill `parserState`. If it encounters an error while\n      * parsing `query`, it'll throw an error.\n@@ -457,10 +484,10 @@ window.initSearch = function(rawSearchIndex) {\n                     throw new Error(\"Expected type filter before `:`\");\n                 } else if (query.elems.length !== 1 || parserState.totalElems !== 1) {\n                     throw new Error(\"Unexpected `:`\");\n-                }\n-                if (query.literalSearch) {\n+                } else if (query.literalSearch) {\n                     throw new Error(\"You cannot use quotes on type filter\");\n                 }\n+                checkExtraTypeFilterCharacters(parserState);\n                 // The type filter doesn't count as an element since it's a modifier.\n                 parserState.typeFilter = query.elems.pop().name;\n                 parserState.pos += 1;"}, {"sha": "9d92f5ddfd35039f67e465b3d64920afd26ebdd7", "filename": "src/test/rustdoc-js-std/parser-errors.js", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/299e8ee25ec170cbcc5a6829b2638361875c6f1f/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/299e8ee25ec170cbcc5a6829b2638361875c6f1f/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js?ref=299e8ee25ec170cbcc5a6829b2638361875c6f1f", "patch": "@@ -30,6 +30,10 @@ const QUERY = [\n     \"a<->\",\n     \"a:: a\",\n     \"a ::a\",\n+    \"a<a>:\",\n+    \"a<>:\",\n+    \"a,:\",\n+    \"  a<>  :\",\n ];\n \n const PARSED = [\n@@ -312,4 +316,40 @@ const PARSED = [\n         userQuery: 'a ::a',\n         error: 'Paths cannot start with `::`',\n     },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: \"a<a>:\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a<a>:\",\n+        error: 'Unexpected `:`',\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: \"a<>:\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a<>:\",\n+        error: 'Unexpected `<` in type filter',\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: \"a,:\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a,:\",\n+        error: 'Unexpected `,` in type filter',\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: \"a<>  :\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a<>  :\",\n+        error: 'Unexpected `<` in type filter',\n+    },\n ];"}, {"sha": "a3d85aeca5e0015a45117beb91c871e91606a7ea", "filename": "src/test/rustdoc-js-std/parser-weird-queries.js", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/299e8ee25ec170cbcc5a6829b2638361875c6f1f/src%2Ftest%2Frustdoc-js-std%2Fparser-weird-queries.js", "raw_url": "https://github.com/rust-lang/rust/raw/299e8ee25ec170cbcc5a6829b2638361875c6f1f/src%2Ftest%2Frustdoc-js-std%2Fparser-weird-queries.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-weird-queries.js?ref=299e8ee25ec170cbcc5a6829b2638361875c6f1f", "patch": "@@ -7,6 +7,8 @@ const QUERY = [\n     'a,b(c)',\n     'aaa,a',\n     ',,,,',\n+    'mod    :',\n+    'mod\\t:',\n ];\n \n const PARSED = [\n@@ -100,4 +102,22 @@ const PARSED = [\n         userQuery: \",,,,\",\n         error: null,\n     },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: 'mod    :',\n+        returned: [],\n+        typeFilter: 0,\n+        userQuery: 'mod    :',\n+        error: null,\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: 'mod\\t:',\n+        returned: [],\n+        typeFilter: 0,\n+        userQuery: 'mod\\t:',\n+        error: null,\n+    },\n ];"}, {"sha": "1736233835529a260525228f3dab6411be275fc5", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299e8ee25ec170cbcc5a6829b2638361875c6f1f/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/299e8ee25ec170cbcc5a6829b2638361875c6f1f/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=299e8ee25ec170cbcc5a6829b2638361875c6f1f", "patch": "@@ -275,7 +275,8 @@ function loadSearchJsAndIndex(searchJs, searchIndex, storageJs, crate) {\n                            \"parseInput\", \"getItemsBefore\", \"getNextElem\", \"createQueryElement\",\n                            \"isReturnArrow\", \"isPathStart\", \"getStringElem\", \"newParsedQuery\",\n                            \"itemTypeFromName\", \"isEndCharacter\", \"isErrorCharacter\",\n-                           \"isIdentCharacter\", \"isSeparatorCharacter\", \"getIdentEndPosition\"];\n+                           \"isIdentCharacter\", \"isSeparatorCharacter\", \"getIdentEndPosition\",\n+                           \"checkExtraTypeFilterCharacters\", \"isWhitespaceCharacter\"];\n \n     const functions = [\"hasOwnPropertyRustdoc\", \"onEach\"];\n     ALIASES = {};"}]}