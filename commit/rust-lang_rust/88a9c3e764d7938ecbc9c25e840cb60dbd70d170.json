{"sha": "88a9c3e764d7938ecbc9c25e840cb60dbd70d170", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YTljM2U3NjRkNzkzOGVjYmM5YzI1ZTg0MGNiNjBkYmQ3MGQxNzA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-21T21:14:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-03T09:34:59Z"}, "message": "Build the MIR using the liberated fn sigs, and track the return type", "tree": {"sha": "a814879576d3afb631e24d06082de63ed8e98d69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a814879576d3afb631e24d06082de63ed8e98d69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88a9c3e764d7938ecbc9c25e840cb60dbd70d170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88a9c3e764d7938ecbc9c25e840cb60dbd70d170", "html_url": "https://github.com/rust-lang/rust/commit/88a9c3e764d7938ecbc9c25e840cb60dbd70d170", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88a9c3e764d7938ecbc9c25e840cb60dbd70d170/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d7c66e6e82229134fcc5a2b5a23545f8a17f1ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d7c66e6e82229134fcc5a2b5a23545f8a17f1ce", "html_url": "https://github.com/rust-lang/rust/commit/6d7c66e6e82229134fcc5a2b5a23545f8a17f1ce"}], "stats": {"total": 78, "additions": 49, "deletions": 29}, "files": [{"sha": "8e1f08775156ee0a9a794fe68c16bf0acbc5fb0f", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/88a9c3e764d7938ecbc9c25e840cb60dbd70d170/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a9c3e764d7938ecbc9c25e840cb60dbd70d170/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=88a9c3e764d7938ecbc9c25e840cb60dbd70d170", "patch": "@@ -10,7 +10,7 @@\n \n use hair;\n use rustc::middle::region::CodeExtent;\n-use rustc::middle::ty::Ty;\n+use rustc::middle::ty::{FnOutput, Ty};\n use rustc_data_structures::fnv::FnvHashMap;\n use rustc_front::hir;\n use repr::*;\n@@ -75,13 +75,14 @@ macro_rules! unpack {\n ///////////////////////////////////////////////////////////////////////////\n // construct() -- the main entry point for building MIR for a function\n \n-pub fn construct<'a, 'tcx>(mut hir: Cx<'a, 'tcx>,\n-                           _span: Span,\n-                           implicit_arguments: Vec<Ty<'tcx>>,\n-                           explicit_arguments: Vec<(Ty<'tcx>, PatNode<'tcx>)>,\n-                           argument_extent: CodeExtent,\n-                           ast_block: &'tcx hir::Block)\n-                           -> Mir<'tcx> {\n+pub fn construct<'a,'tcx>(mut hir: Cx<'a,'tcx>,\n+                          _span: Span,\n+                          implicit_arguments: Vec<Ty<'tcx>>,\n+                          explicit_arguments: Vec<(Ty<'tcx>, PatNode<'tcx>)>,\n+                          argument_extent: CodeExtent,\n+                          return_ty: FnOutput<'tcx>,\n+                          ast_block: &'tcx hir::Block)\n+                          -> Mir<'tcx> {\n     let cfg = CFG { basic_blocks: vec![] };\n \n     // it's handy to have a temporary of type `()` sometimes, so make\n@@ -121,6 +122,7 @@ pub fn construct<'a, 'tcx>(mut hir: Cx<'a, 'tcx>,\n         var_decls: builder.var_decls,\n         arg_decls: arg_decls,\n         temp_decls: builder.temp_decls,\n+        return_ty: return_ty,\n     }\n }\n "}, {"sha": "555f8896b4bc59c037d70233f7b83095d18fc279", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 36, "deletions": 20, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/88a9c3e764d7938ecbc9c25e840cb60dbd70d170/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a9c3e764d7938ecbc9c25e840cb60dbd70d170/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=88a9c3e764d7938ecbc9c25e840cb60dbd70d170", "patch": "@@ -189,26 +189,42 @@ impl<'a, 'm, 'tcx> visit::Visitor<'tcx> for InnerDump<'a,'m,'tcx> {\n     }\n }\n \n-fn build_mir<'a, 'tcx: 'a>(cx: Cx<'a, 'tcx>,\n-                           implicit_arg_tys: Vec<Ty<'tcx>>,\n-                           fn_id: ast::NodeId,\n-                           span: Span,\n-                           decl: &'tcx hir::FnDecl,\n-                           body: &'tcx hir::Block)\n-                           -> Result<Mir<'tcx>, ErrorReported> {\n-    let arguments = decl.inputs\n-                        .iter()\n-                        .map(|arg| {\n-                            let ty = cx.tcx().node_id_to_type(arg.id);\n-                            (ty, PatNode::irrefutable(&arg.pat))\n-                        })\n-                        .collect();\n-\n-    let parameter_scope = cx.tcx().region_maps.lookup_code_extent(CodeExtentData::ParameterScope {\n-        fn_id: fn_id,\n-        body_id: body.id,\n-    });\n-    Ok(build::construct(cx, span, implicit_arg_tys, arguments, parameter_scope, body))\n+fn build_mir<'a,'tcx:'a>(cx: Cx<'a,'tcx>,\n+                         implicit_arg_tys: Vec<Ty<'tcx>>,\n+                         fn_id: ast::NodeId,\n+                         span: Span,\n+                         decl: &'tcx hir::FnDecl,\n+                         body: &'tcx hir::Block)\n+                         -> Result<Mir<'tcx>, ErrorReported> {\n+    // fetch the fully liberated fn signature (that is, all bound\n+    // types/lifetimes replaced)\n+    let fn_sig = match cx.tcx().tables.borrow().liberated_fn_sigs.get(&fn_id) {\n+        Some(f) => f.clone(),\n+        None => {\n+            cx.tcx().sess.span_bug(span,\n+                                   &format!(\"no liberated fn sig for {:?}\", fn_id));\n+        }\n+    };\n+\n+    let arguments =\n+        decl.inputs\n+            .iter()\n+            .enumerate()\n+            .map(|(index, arg)| {\n+                (fn_sig.inputs[index], PatNode::irrefutable(&arg.pat))\n+            })\n+            .collect();\n+\n+    let parameter_scope =\n+        cx.tcx().region_maps.lookup_code_extent(\n+            CodeExtentData::ParameterScope { fn_id: fn_id, body_id: body.id });\n+    Ok(build::construct(cx,\n+                        span,\n+                        implicit_arg_tys,\n+                        arguments,\n+                        parameter_scope,\n+                        fn_sig.output,\n+                        body))\n }\n \n fn closure_self_ty<'a, 'tcx>(tcx: &ty::ctxt<'tcx>,"}, {"sha": "09f174e2ba6946f2f824a5090cfd3c297112f659", "filename": "src/librustc_mir/repr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88a9c3e764d7938ecbc9c25e840cb60dbd70d170/src%2Flibrustc_mir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a9c3e764d7938ecbc9c25e840cb60dbd70d170/src%2Flibrustc_mir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Frepr.rs?ref=88a9c3e764d7938ecbc9c25e840cb60dbd70d170", "patch": "@@ -12,7 +12,7 @@ use rustc::middle::const_eval::ConstVal;\n use rustc::middle::def_id::DefId;\n use rustc::middle::region::CodeExtent;\n use rustc::middle::subst::Substs;\n-use rustc::middle::ty::{AdtDef, ClosureSubsts, Region, Ty};\n+use rustc::middle::ty::{AdtDef, ClosureSubsts, FnOutput, Region, Ty};\n use rustc_back::slice;\n use rustc_data_structures::fnv::FnvHashMap;\n use rustc_front::hir::InlineAsm;\n@@ -25,6 +25,8 @@ use std::u32;\n pub struct Mir<'tcx> {\n     pub basic_blocks: Vec<BasicBlockData<'tcx>>,\n \n+    pub return_ty: FnOutput<'tcx>,\n+\n     // for every node id\n     pub extents: FnvHashMap<CodeExtent, Vec<GraphExtent>>,\n "}]}