{"sha": "ba9224f35451e5d5ef7647bd2b40e5da80ce2735", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhOTIyNGYzNTQ1MWU1ZDVlZjc2NDdiZDJiNDBlNWRhODBjZTI3MzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-28T19:36:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-28T19:36:26Z"}, "message": "Auto merge of #26934 - reem:boxed-slice-clone, r=Gankro\n\nCloses #25097", "tree": {"sha": "3866a42e258bbf3a55cb9d683b64818a7b5a88e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3866a42e258bbf3a55cb9d683b64818a7b5a88e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba9224f35451e5d5ef7647bd2b40e5da80ce2735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9224f35451e5d5ef7647bd2b40e5da80ce2735", "html_url": "https://github.com/rust-lang/rust/commit/ba9224f35451e5d5ef7647bd2b40e5da80ce2735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba9224f35451e5d5ef7647bd2b40e5da80ce2735/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa6efd959e450e1cea177a3f6cd6bab6d80d4154", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa6efd959e450e1cea177a3f6cd6bab6d80d4154", "html_url": "https://github.com/rust-lang/rust/commit/aa6efd959e450e1cea177a3f6cd6bab6d80d4154"}, {"sha": "e24423091f0690a83e63ee234bee5627a86b51f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e24423091f0690a83e63ee234bee5627a86b51f0", "html_url": "https://github.com/rust-lang/rust/commit/e24423091f0690a83e63ee234bee5627a86b51f0"}], "stats": {"total": 119, "additions": 109, "deletions": 10}, "files": [{"sha": "db338eaaf00bf301e31881da3f93641b4f0a2dc8", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ba9224f35451e5d5ef7647bd2b40e5da80ce2735/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9224f35451e5d5ef7647bd2b40e5da80ce2735/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=ba9224f35451e5d5ef7647bd2b40e5da80ce2735", "patch": "@@ -56,6 +56,7 @@\n use core::prelude::*;\n \n use heap;\n+use raw_vec::RawVec;\n \n use core::any::Any;\n use core::cmp::Ordering;\n@@ -65,7 +66,7 @@ use core::marker::{self, Unsize};\n use core::mem;\n use core::ops::{CoerceUnsized, Deref, DerefMut};\n use core::ops::{Placer, Boxed, Place, InPlace, BoxPlace};\n-use core::ptr::Unique;\n+use core::ptr::{self, Unique};\n use core::raw::{TraitObject};\n \n /// A value that represents the heap. This is the default place that the `box`\n@@ -514,3 +515,55 @@ impl<'a,A,R> FnOnce<A> for Box<FnBox<A,Output=R>+Send+'a> {\n }\n \n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\n+\n+#[stable(feature = \"box_slice_clone\", since = \"1.3.0\")]\n+impl<T: Clone> Clone for Box<[T]> {\n+    fn clone(&self) -> Self {\n+        let mut new = BoxBuilder {\n+            data: RawVec::with_capacity(self.len()),\n+            len: 0\n+        };\n+\n+        let mut target = new.data.ptr();\n+\n+        for item in self.iter() {\n+            unsafe {\n+                ptr::write(target, item.clone());\n+                target = target.offset(1);\n+            };\n+\n+            new.len += 1;\n+        }\n+\n+        return unsafe { new.into_box() };\n+\n+        // Helper type for responding to panics correctly.\n+        struct BoxBuilder<T> {\n+            data: RawVec<T>,\n+            len: usize,\n+        }\n+\n+        impl<T> BoxBuilder<T> {\n+            unsafe fn into_box(self) -> Box<[T]> {\n+                let raw = ptr::read(&self.data);\n+                mem::forget(self);\n+                raw.into_box()\n+            }\n+        }\n+\n+        impl<T> Drop for BoxBuilder<T> {\n+            fn drop(&mut self) {\n+                let mut data = self.data.ptr();\n+                let max = unsafe { data.offset(self.len as isize) };\n+\n+                while data != max {\n+                    unsafe {\n+                        ptr::read(data);\n+                        data = data.offset(1);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+"}, {"sha": "03cf4fc9fc1bdf6ef481a0f4e737cbce553c0265", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba9224f35451e5d5ef7647bd2b40e5da80ce2735/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9224f35451e5d5ef7647bd2b40e5da80ce2735/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=ba9224f35451e5d5ef7647bd2b40e5da80ce2735", "patch": "@@ -76,6 +76,7 @@\n #![feature(core)]\n #![feature(core_intrinsics)]\n #![feature(core_prelude)]\n+#![feature(core_slice_ext)]\n #![feature(custom_attribute)]\n #![feature(fundamental)]\n #![feature(lang_items)]"}, {"sha": "65706b292c67d19e0e74a63c68b298b5047df77f", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ba9224f35451e5d5ef7647bd2b40e5da80ce2735/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9224f35451e5d5ef7647bd2b40e5da80ce2735/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=ba9224f35451e5d5ef7647bd2b40e5da80ce2735", "patch": "@@ -1270,6 +1270,59 @@ fn test_to_vec() {\n     assert_eq!(ys, [1, 2, 3]);\n }\n \n+#[test]\n+fn test_box_slice_clone() {\n+    let data = vec![vec![0, 1], vec![0], vec![1]];\n+    let data2 = data.clone().into_boxed_slice().clone().to_vec();\n+\n+    assert_eq!(data, data2);\n+}\n+\n+#[test]\n+fn test_box_slice_clone_panics() {\n+    use std::sync::Arc;\n+    use std::sync::atomic::{AtomicUsize, Ordering};\n+    use std::thread::spawn;\n+\n+    struct Canary {\n+        count: Arc<AtomicUsize>,\n+        panics: bool\n+    }\n+\n+    impl Drop for Canary {\n+        fn drop(&mut self) {\n+            self.count.fetch_add(1, Ordering::SeqCst);\n+        }\n+    }\n+\n+    impl Clone for Canary {\n+        fn clone(&self) -> Self {\n+            if self.panics { panic!() }\n+\n+            Canary {\n+                count: self.count.clone(),\n+                panics: self.panics\n+            }\n+        }\n+    }\n+\n+    let drop_count = Arc::new(AtomicUsize::new(0));\n+    let canary = Canary { count: drop_count.clone(), panics: false };\n+    let panic = Canary { count: drop_count.clone(), panics: true };\n+\n+    spawn(move || {\n+        // When xs is dropped, +5.\n+        let xs = vec![canary.clone(), canary.clone(), canary.clone(),\n+                      panic, canary].into_boxed_slice();\n+\n+        // When panic is cloned, +3.\n+        xs.clone();\n+    }).join().unwrap_err();\n+\n+    // Total = 8\n+    assert_eq!(drop_count.load(Ordering::SeqCst), 8);\n+}\n+\n mod bench {\n     use std::iter::repeat;\n     use std::{mem, ptr};"}, {"sha": "6eb0719d9f6ffedb2b4df6f580624e6066d08747", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba9224f35451e5d5ef7647bd2b40e5da80ce2735/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9224f35451e5d5ef7647bd2b40e5da80ce2735/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=ba9224f35451e5d5ef7647bd2b40e5da80ce2735", "patch": "@@ -11,7 +11,6 @@\n use ascii;\n use borrow::{Cow, ToOwned, Borrow};\n use boxed::Box;\n-use clone::Clone;\n use convert::{Into, From};\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use error::Error;\n@@ -62,7 +61,7 @@ use vec::Vec;\n /// }\n /// # }\n /// ```\n-#[derive(PartialEq, PartialOrd, Eq, Ord, Hash)]\n+#[derive(PartialEq, PartialOrd, Eq, Ord, Hash, Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CString {\n     inner: Box<[u8]>,\n@@ -250,13 +249,6 @@ impl CString {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Clone for CString {\n-    fn clone(&self) -> Self {\n-        CString { inner: self.inner.to_owned().into_boxed_slice() }\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Deref for CString {\n     type Target = CStr;"}]}