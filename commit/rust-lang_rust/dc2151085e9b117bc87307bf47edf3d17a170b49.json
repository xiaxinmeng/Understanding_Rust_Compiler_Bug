{"sha": "dc2151085e9b117bc87307bf47edf3d17a170b49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMjE1MTA4NWU5YjExN2JjODczMDdiZjQ3ZWRmM2QxN2ExNzBiNDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-24T22:17:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-25T09:59:18Z"}, "message": "Cleanups", "tree": {"sha": "24a22cdd8e5fb3b11d7b95fc264e56a91bd206a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24a22cdd8e5fb3b11d7b95fc264e56a91bd206a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc2151085e9b117bc87307bf47edf3d17a170b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc2151085e9b117bc87307bf47edf3d17a170b49", "html_url": "https://github.com/rust-lang/rust/commit/dc2151085e9b117bc87307bf47edf3d17a170b49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc2151085e9b117bc87307bf47edf3d17a170b49/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8843588fca7a6022b86800d5d2539594c0de93cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8843588fca7a6022b86800d5d2539594c0de93cf", "html_url": "https://github.com/rust-lang/rust/commit/8843588fca7a6022b86800d5d2539594c0de93cf"}], "stats": {"total": 42, "additions": 18, "deletions": 24}, "files": [{"sha": "010db40175cc6d1a4b57914ea2a816f6ea927c75", "filename": "crates/ra_ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc2151085e9b117bc87307bf47edf3d17a170b49/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2151085e9b117bc87307bf47edf3d17a170b49/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=dc2151085e9b117bc87307bf47edf3d17a170b49", "patch": "@@ -1,11 +1,9 @@\n //! Renders a bit of code as HTML.\n \n use ra_db::SourceDatabase;\n-use ra_syntax::{AstNode, TextSize};\n+use ra_syntax::{AstNode, TextRange, TextSize};\n \n-use crate::{FileId, RootDatabase};\n-\n-use super::highlight;\n+use crate::{syntax_highlighting::highlight, FileId, RootDatabase};\n \n pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: bool) -> String {\n     let parse = db.parse(file_id);\n@@ -27,14 +25,13 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n     let mut buf = String::new();\n     buf.push_str(&STYLE);\n     buf.push_str(\"<pre><code>\");\n-    // TODO: unusize\n     for range in &ranges {\n         if range.range.start() > prev_pos {\n-            let curr = &text[usize::from(prev_pos)..usize::from(range.range.start())];\n+            let curr = &text[TextRange::new(prev_pos, range.range.start())];\n             let text = html_escape(curr);\n             buf.push_str(&text);\n         }\n-        let curr = &text[usize::from(range.range.start())..usize::from(range.range.end())];\n+        let curr = &text[TextRange::new(range.range.start(), range.range.end())];\n \n         let class = range.highlight.to_string().replace('.', \" \");\n         let color = match (rainbow, range.binding_hash) {\n@@ -48,7 +45,7 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n         prev_pos = range.range.end();\n     }\n     // Add the remaining (non-highlighted) text\n-    let curr = &text[usize::from(prev_pos)..];\n+    let curr = &text[TextRange::new(prev_pos, TextSize::of(&text))];\n     let text = html_escape(curr);\n     buf.push_str(&text);\n     buf.push_str(\"</code></pre>\");"}, {"sha": "81eebc7110422411bd4cbc0ee8c9e3b06e88cd5a", "filename": "crates/ra_ide_db/src/line_index.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dc2151085e9b117bc87307bf47edf3d17a170b49/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2151085e9b117bc87307bf47edf3d17a170b49/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs?ref=dc2151085e9b117bc87307bf47edf3d17a170b49", "patch": "@@ -1,9 +1,8 @@\n //! `LineIndex` maps flat `TextSize` offsets into `(Line, Column)`\n //! representation.\n-use std::iter;\n-// TODO: un TextSize\n use ra_syntax::{TextRange, TextSize};\n use rustc_hash::FxHashMap;\n+use std::iter;\n use superslice::Ext;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n@@ -42,7 +41,8 @@ impl LineIndex {\n         let mut curr_col = 0.into();\n         let mut line = 0;\n         for c in text.chars() {\n-            curr_row += TextSize::of(c);\n+            let c_len = TextSize::of(c);\n+            curr_row += c_len;\n             if c == '\\n' {\n                 newlines.push(curr_row);\n \n@@ -58,12 +58,11 @@ impl LineIndex {\n                 continue;\n             }\n \n-            let char_len = TextSize::of(c);\n-            if char_len > TextSize::from_usize(1) {\n-                utf16_chars.push(Utf16Char { start: curr_col, end: curr_col + char_len });\n+            if !c.is_ascii() {\n+                utf16_chars.push(Utf16Char { start: curr_col, end: curr_col + c_len });\n             }\n \n-            curr_col += char_len;\n+            curr_col += c_len;\n         }\n \n         // Save any utf-16 characters seen in the last line\n@@ -102,22 +101,19 @@ impl LineIndex {\n     }\n \n     fn utf8_to_utf16_col(&self, line: u32, col: TextSize) -> usize {\n+        let mut res: usize = col.into();\n         if let Some(utf16_chars) = self.utf16_lines.get(&line) {\n-            let mut correction = 0;\n             for c in utf16_chars {\n-                if col >= c.end {\n-                    correction += usize::from(c.len()) - 1;\n+                if c.end <= col {\n+                    res -= usize::from(c.len()) - 1;\n                 } else {\n                     // From here on, all utf16 characters come *after* the character we are mapping,\n                     // so we don't need to take them into account\n                     break;\n                 }\n             }\n-\n-            usize::from(col) - correction\n-        } else {\n-            usize::from(col)\n         }\n+        res\n     }\n \n     fn utf16_to_utf8_col(&self, line: u32, col: u32) -> TextSize {"}, {"sha": "599b8e56241d1556947779ca1cada38dc9c103b4", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc2151085e9b117bc87307bf47edf3d17a170b49/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2151085e9b117bc87307bf47edf3d17a170b49/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=dc2151085e9b117bc87307bf47edf3d17a170b49", "patch": "@@ -200,7 +200,8 @@ impl Definition {\n \n         for (file_id, search_range) in search_scope {\n             let text = db.file_text(file_id);\n-            let search_range = search_range.unwrap_or(TextRange::up_to(TextSize::of(&text)));\n+            let search_range =\n+                search_range.unwrap_or(TextRange::up_to(TextSize::of(text.as_str())));\n \n             let sema = Semantics::new(db);\n             let tree = Lazy::new(|| sema.parse(file_id).syntax().clone());"}, {"sha": "2303ebfdbcc80c33c1fada2e9684bfc16a8c931d", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2151085e9b117bc87307bf47edf3d17a170b49/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2151085e9b117bc87307bf47edf3d17a170b49/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=dc2151085e9b117bc87307bf47edf3d17a170b49", "patch": "@@ -592,7 +592,7 @@ pub fn handle_formatting(\n     let crate_ids = world.analysis().crate_for(file_id)?;\n \n     let file_line_index = world.analysis().file_line_index(file_id)?;\n-    let end_position = TextSize::of(&file).conv_with(&file_line_index);\n+    let end_position = TextSize::of(file.as_str()).conv_with(&file_line_index);\n \n     let mut rustfmt = match &world.config.rustfmt {\n         RustfmtConfig::Rustfmt { extra_args } => {"}]}