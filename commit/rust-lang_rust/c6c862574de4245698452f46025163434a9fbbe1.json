{"sha": "c6c862574de4245698452f46025163434a9fbbe1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2Yzg2MjU3NGRlNDI0NTY5ODQ1MmY0NjAyNTE2MzQzNGE5ZmJiZTE=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-09T09:43:15Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:14:34Z"}, "message": "Special-case subtracting from a range if that range is not an IntRange", "tree": {"sha": "f414ad11efea8da66a6ce6375299eb4967d020ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f414ad11efea8da66a6ce6375299eb4967d020ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6c862574de4245698452f46025163434a9fbbe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c862574de4245698452f46025163434a9fbbe1", "html_url": "https://github.com/rust-lang/rust/commit/c6c862574de4245698452f46025163434a9fbbe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6c862574de4245698452f46025163434a9fbbe1/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6de7afdf9529ec66bc2fabe7ce012a885cd48002", "url": "https://api.github.com/repos/rust-lang/rust/commits/6de7afdf9529ec66bc2fabe7ce012a885cd48002", "html_url": "https://github.com/rust-lang/rust/commit/6de7afdf9529ec66bc2fabe7ce012a885cd48002"}], "stats": {"total": 57, "additions": 36, "deletions": 21}, "files": [{"sha": "b84af467d0c2238fe8f1d8058dcd910aa2a6680a", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c6c862574de4245698452f46025163434a9fbbe1/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c862574de4245698452f46025163434a9fbbe1/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=c6c862574de4245698452f46025163434a9fbbe1", "patch": "@@ -763,31 +763,46 @@ impl<'tcx> Constructor<'tcx> {\n                 remaining_ctors\n             }\n             ConstantRange(..) | ConstantValue(..) => {\n-                let mut remaining_ctors = vec![self.clone()];\n-                for other_ctor in other_ctors {\n-                    if other_ctor == self {\n-                        // If a constructor appears in a `match` arm, we can\n-                        // eliminate it straight away.\n-                        remaining_ctors = vec![]\n-                    } else if let Some(interval) = IntRange::from_ctor(tcx, param_env, other_ctor) {\n-                        // Refine the required constructors for the type by subtracting\n-                        // the range defined by the current constructor pattern.\n-                        remaining_ctors = interval.subtract_from(tcx, param_env, remaining_ctors);\n+                if let Some(_self_range) = IntRange::from_ctor(tcx, param_env, self) {\n+                    let mut remaining_ctors = vec![self.clone()];\n+                    for other_ctor in other_ctors {\n+                        if other_ctor == self {\n+                            // If a constructor appears in a `match` arm, we can\n+                            // eliminate it straight away.\n+                            remaining_ctors = vec![]\n+                        } else if let Some(interval) =\n+                            IntRange::from_ctor(tcx, param_env, other_ctor)\n+                        {\n+                            // Refine the required constructors for the type by subtracting\n+                            // the range defined by the current constructor pattern.\n+                            remaining_ctors =\n+                                interval.subtract_from(tcx, param_env, remaining_ctors);\n+                        }\n+\n+                        // If the constructor patterns that have been considered so far\n+                        // already cover the entire range of values, then we know the\n+                        // constructor is not missing, and we can move on to the next one.\n+                        if remaining_ctors.is_empty() {\n+                            break;\n+                        }\n                     }\n \n-                    // If the constructor patterns that have been considered so far\n-                    // already cover the entire range of values, then we know the\n-                    // constructor is not missing, and we can move on to the next one.\n-                    if remaining_ctors.is_empty() {\n-                        break;\n+                    // If a constructor has not been matched, then it is missing.\n+                    // We add `remaining_ctors` instead of `self`, because then we can\n+                    // provide more detailed error information about precisely which\n+                    // ranges have been omitted.\n+                    remaining_ctors\n+                } else {\n+                    if other_ctors.iter().any(|c| {\n+                        c == self\n+                             // FIXME(Nadrieril): This condition looks fishy\n+                             || IntRange::from_ctor(tcx, param_env, c).is_some()\n+                    }) {\n+                        vec![]\n+                    } else {\n+                        vec![self.clone()]\n                     }\n                 }\n-\n-                // If a constructor has not been matched, then it is missing.\n-                // We add `remaining_ctors` instead of `self`, because then we can\n-                // provide more detailed error information about precisely which\n-                // ranges have been omitted.\n-                remaining_ctors\n             }\n             // This constructor is never covered by anything else\n             NonExhaustive => vec![NonExhaustive],"}]}