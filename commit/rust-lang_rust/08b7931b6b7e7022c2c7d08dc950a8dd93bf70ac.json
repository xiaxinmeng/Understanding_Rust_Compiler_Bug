{"sha": "08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4Yjc5MzFiNmI3ZTcwMjJjMmM3ZDA4ZGM5NTBhOGRkOTNiZjcwYWM=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-03-08T08:50:00Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-03-08T08:50:00Z"}, "message": "Merge pull request #741 from martiansideofthemoon/blastoise\n\nLinting classical overflow checks", "tree": {"sha": "e003cd2ad8d411f6808f7ceec34cb1f7988d08c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e003cd2ad8d411f6808f7ceec34cb1f7988d08c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac", "html_url": "https://github.com/rust-lang/rust/commit/08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1278ff632b66fecbd2cb9e54346b46d64d216d0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1278ff632b66fecbd2cb9e54346b46d64d216d0c", "html_url": "https://github.com/rust-lang/rust/commit/1278ff632b66fecbd2cb9e54346b46d64d216d0c"}, {"sha": "9faffd28705b39c37526f964b637bb405e348f35", "url": "https://api.github.com/repos/rust-lang/rust/commits/9faffd28705b39c37526f964b637bb405e348f35", "html_url": "https://github.com/rust-lang/rust/commit/9faffd28705b39c37526f964b637bb405e348f35"}], "stats": {"total": 140, "additions": 139, "deletions": 1}, "files": [{"sha": "77518df6b3990652d91ade3ec6ffe03f69cad2cc", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac", "patch": "@@ -8,7 +8,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 130 lints included in this crate:\n+There are 131 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -92,6 +92,7 @@ name\n [option_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#option_unwrap_used)                             | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n [or_fun_call](https://github.com/Manishearth/rust-clippy/wiki#or_fun_call)                                           | warn    | using any `*or` method when the `*or_else` would do\n [out_of_bounds_indexing](https://github.com/Manishearth/rust-clippy/wiki#out_of_bounds_indexing)                     | deny    | out of bound constant indexing\n+[overflow_check_conditional](https://github.com/Manishearth/rust-clippy/wiki#overflow_check_conditional)             | warn    | Using overflow checks which are likely to panic\n [panic_params](https://github.com/Manishearth/rust-clippy/wiki#panic_params)                                         | warn    | missing parameters in `panic!`\n [precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                                             | warn    | catches operations where precedence may be unclear. See the wiki for a list of cases caught\n [print_stdout](https://github.com/Manishearth/rust-clippy/wiki#print_stdout)                                         | allow   | printing on stdout"}, {"sha": "51292bea8b2f6d61059dec812fe0f99f10cbd01b", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac", "patch": "@@ -79,6 +79,7 @@ pub mod needless_features;\n pub mod needless_update;\n pub mod no_effect;\n pub mod open_options;\n+pub mod overflow_check_conditional;\n pub mod panic;\n pub mod precedence;\n pub mod print;\n@@ -173,6 +174,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_early_lint_pass(box formatting::Formatting);\n     reg.register_late_lint_pass(box swap::Swap);\n     reg.register_early_lint_pass(box if_not_else::IfNotElse);\n+    reg.register_late_lint_pass(box overflow_check_conditional::OverflowCheckConditional);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         enum_glob_use::ENUM_GLOB_USE,\n@@ -283,6 +285,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         needless_update::NEEDLESS_UPDATE,\n         no_effect::NO_EFFECT,\n         open_options::NONSENSICAL_OPEN_OPTIONS,\n+        overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n         panic::PANIC_PARAMS,\n         precedence::PRECEDENCE,\n         ptr_arg::PTR_ARG,"}, {"sha": "2dccbfdb26ace1ad9c651045727c53df058c3d96", "filename": "src/overflow_check_conditional.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac/src%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac/src%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow_check_conditional.rs?ref=08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac", "patch": "@@ -0,0 +1,73 @@\n+#![allow(cyclomatic_complexity)]\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+use utils::{span_lint};\n+\n+/// **What it does:** This lint finds classic underflow / overflow checks.\n+///\n+/// **Why is this bad?** Most classic C underflow / overflow checks will fail in Rust. Users can use functions like `overflowing_*` and `wrapping_*` instead.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `a + b < a`\n+\n+declare_lint!(pub OVERFLOW_CHECK_CONDITIONAL, Warn,\n+              \"Using overflow checks which are likely to panic\");\n+\n+#[derive(Copy, Clone)]\n+pub struct OverflowCheckConditional;\n+\n+impl LintPass for OverflowCheckConditional {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(OVERFLOW_CHECK_CONDITIONAL)\n+    }\n+}\n+\n+impl LateLintPass for OverflowCheckConditional {\n+    // a + b < a, a > a + b, a < a - b, a - b > a\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if_let_chain! {[\n+        let Expr_::ExprBinary(ref op, ref first, ref second) = expr.node,\n+        let Expr_::ExprBinary(ref op2, ref ident1, ref ident2) = first.node,\n+        let Expr_::ExprPath(_,ref path1) = ident1.node,\n+        let Expr_::ExprPath(_, ref path2) = ident2.node,\n+        let Expr_::ExprPath(_, ref path3) = second.node,\n+        (&path1.segments[0]).identifier == (&path3.segments[0]).identifier || (&path2.segments[0]).identifier == (&path3.segments[0]).identifier,\n+        cx.tcx.expr_ty(ident1).is_integral(),\n+        cx.tcx.expr_ty(ident2).is_integral()\n+        ], {\n+            if let BinOp_::BiLt = op.node {\n+                if let BinOp_::BiAdd = op2.node {\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, \"You are trying to use classic C overflow conditons that will fail in Rust.\");\n+                }\n+            }\n+            if let BinOp_::BiGt = op.node {\n+                if let BinOp_::BiSub = op2.node {\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, \"You are trying to use classic C underflow conditons that will fail in Rust.\");\n+                }\n+            }\n+        }}\n+\n+        if_let_chain! {[\n+        let Expr_::ExprBinary(ref op, ref first, ref second) = expr.node,\n+        let Expr_::ExprBinary(ref op2, ref ident1, ref ident2) = second.node,\n+        let Expr_::ExprPath(_,ref path1) = ident1.node,\n+        let Expr_::ExprPath(_, ref path2) = ident2.node,\n+        let Expr_::ExprPath(_, ref path3) = first.node,\n+        (&path1.segments[0]).identifier == (&path3.segments[0]).identifier || (&path2.segments[0]).identifier == (&path3.segments[0]).identifier,\n+        cx.tcx.expr_ty(ident1).is_integral(),\n+        cx.tcx.expr_ty(ident2).is_integral()\n+        ], {\n+            if let BinOp_::BiGt = op.node {\n+                if let BinOp_::BiAdd = op2.node {\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, \"You are trying to use classic C overflow conditons that will fail in Rust.\");\n+                }\n+            }\n+            if let BinOp_::BiLt = op.node {\n+                if let BinOp_::BiSub = op2.node {\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, \"You are trying to use classic C underflow conditons that will fail in Rust.\");\n+                }\n+            }\n+        }}\n+    }\n+}"}, {"sha": "df629146deecc63753800d136785d8e84d72f9f9", "filename": "tests/compile-fail/overflow_check_conditional.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac/tests%2Fcompile-fail%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac/tests%2Fcompile-fail%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflow_check_conditional.rs?ref=08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac", "patch": "@@ -0,0 +1,61 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(overflow_check_conditional)]\n+\n+fn main() {\n+\tlet a: u32 = 1;\n+\tlet b: u32 = 2;\n+\tlet c: u32 = 3;\n+\tif a + b < a { //~ERROR You are trying to use classic C overflow conditons that will fail in Rust.\n+\n+\t}\n+\tif a > a + b { //~ERROR You are trying to use classic C overflow conditons that will fail in Rust.\n+\n+\t}\n+\tif a + b < b { //~ERROR You are trying to use classic C overflow conditons that will fail in Rust.\n+\n+\t}\n+\tif b > a + b { //~ERROR You are trying to use classic C overflow conditons that will fail in Rust.\n+\n+\t}\n+\tif a - b > b { //~ERROR You are trying to use classic C underflow conditons that will fail in Rust.\n+\n+\t}\n+\tif b < a - b { //~ERROR You are trying to use classic C underflow conditons that will fail in Rust.\n+\n+\t}\n+\tif a - b > a { //~ERROR You are trying to use classic C underflow conditons that will fail in Rust.\n+\n+\t}\n+\tif a < a - b { //~ERROR You are trying to use classic C underflow conditons that will fail in Rust.\n+\n+\t}\n+\tif a + b < c {\n+\n+\t}\n+\tif c > a + b {\n+\n+\t}\n+\tif a - b < c {\n+\n+\t}\n+\tif c > a - b {\n+\n+\t}\n+\tlet i = 1.1;\n+\tlet j = 2.2;\n+\tif i + j < i {\n+\n+\t}\n+\tif i - j < i {\n+\n+\t}\n+\tif i > i + j {\n+\n+\t}\n+\tif i - j < i {\n+\n+\t}\n+}\n+"}]}