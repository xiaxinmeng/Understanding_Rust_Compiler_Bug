{"sha": "74d891517be8f6299b0626c26400dd54dd1aac6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZDg5MTUxN2JlOGY2Mjk5YjA2MjZjMjY0MDBkZDU0ZGQxYWFjNmM=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-11T22:29:53Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-11T22:35:33Z"}, "message": "reindex the block index.", "tree": {"sha": "ef74eac61cfca9c57973a41622ac35a5cd164d25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef74eac61cfca9c57973a41622ac35a5cd164d25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74d891517be8f6299b0626c26400dd54dd1aac6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74d891517be8f6299b0626c26400dd54dd1aac6c", "html_url": "https://github.com/rust-lang/rust/commit/74d891517be8f6299b0626c26400dd54dd1aac6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74d891517be8f6299b0626c26400dd54dd1aac6c/comments", "author": null, "committer": null, "parents": [{"sha": "1feaf8ffb54ab2288d83a36391f94b437aa0ec35", "url": "https://api.github.com/repos/rust-lang/rust/commits/1feaf8ffb54ab2288d83a36391f94b437aa0ec35", "html_url": "https://github.com/rust-lang/rust/commit/1feaf8ffb54ab2288d83a36391f94b437aa0ec35"}], "stats": {"total": 82, "additions": 44, "deletions": 38}, "files": [{"sha": "b39f3d4ca6f59f5196d2e288e233aa7ac97fb779", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/74d891517be8f6299b0626c26400dd54dd1aac6c/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d891517be8f6299b0626c26400dd54dd1aac6c/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=74d891517be8f6299b0626c26400dd54dd1aac6c", "patch": "@@ -435,6 +435,44 @@ fn index_native_view_item(native_mod_index index, @view_item it) {\n     }\n }\n \n+fn index_stmt(block_index index, @stmt s) {\n+    alt (s.node) {\n+        case (ast.stmt_decl(?d)) {\n+            alt (d.node) {\n+                case (ast.decl_local(?loc)) {\n+                    index.insert(loc.ident, ast.bie_local(loc));\n+                }\n+                case (ast.decl_item(?it)) {\n+                    alt (it.node) {\n+                        case (ast.item_fn(?i, _, _, _, _)) {\n+                            index.insert(i, ast.bie_item(it));\n+                        }\n+                        case (ast.item_mod(?i, _, _)) {\n+                            index.insert(i, ast.bie_item(it));\n+                        }\n+                        case (ast.item_ty(?i, _, _, _, _)) {\n+                            index.insert(i, ast.bie_item(it));\n+                        }\n+                        case (ast.item_tag(?i, ?variants, _, _)) {\n+                            index.insert(i, ast.bie_item(it));\n+                            let uint vid = 0u;\n+                            for (ast.variant v in variants) {\n+                                auto t = ast.bie_tag_variant(it, vid);\n+                                index.insert(v.name, t);\n+                                vid += 1u;\n+                            }\n+                        }\n+                        case (ast.item_obj(?i, _, _, _, _)) {\n+                            index.insert(i, ast.bie_item(it));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        case (_) { /* fall through */ }\n+    }\n+}\n+\n fn is_call_expr(@expr e) -> bool {\n     alt (e.node) {\n         case (expr_call(_, _, _)) {"}, {"sha": "cdd65539047c684f2085f0f0addbc5e7ad8871d8", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/74d891517be8f6299b0626c26400dd54dd1aac6c/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d891517be8f6299b0626c26400dd54dd1aac6c/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=74d891517be8f6299b0626c26400dd54dd1aac6c", "patch": "@@ -1480,41 +1480,7 @@ impure fn parse_source_stmt(parser p) -> @ast.stmt {\n fn index_block(vec[@ast.stmt] stmts, option.t[@ast.expr] expr) -> ast.block_ {\n     auto index = new_str_hash[ast.block_index_entry]();\n     for (@ast.stmt s in stmts) {\n-        alt (s.node) {\n-            case (ast.stmt_decl(?d)) {\n-                alt (d.node) {\n-                    case (ast.decl_local(?loc)) {\n-                        index.insert(loc.ident, ast.bie_local(loc));\n-                    }\n-                    case (ast.decl_item(?it)) {\n-                        alt (it.node) {\n-                            case (ast.item_fn(?i, _, _, _, _)) {\n-                                index.insert(i, ast.bie_item(it));\n-                            }\n-                            case (ast.item_mod(?i, _, _)) {\n-                                index.insert(i, ast.bie_item(it));\n-                            }\n-                            case (ast.item_ty(?i, _, _, _, _)) {\n-                                index.insert(i, ast.bie_item(it));\n-                            }\n-                            case (ast.item_tag(?i, ?variants, _, _)) {\n-                                index.insert(i, ast.bie_item(it));\n-                                let uint vid = 0u;\n-                                for (ast.variant v in variants) {\n-                                    auto t = ast.bie_tag_variant(it, vid);\n-                                    index.insert(v.name, t);\n-                                    vid += 1u;\n-                                }\n-                            }\n-                            case (ast.item_obj(?i, _, _, _, _)) {\n-                                index.insert(i, ast.bie_item(it));\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-            case (_) { /* fall through */ }\n-        }\n+        ast.index_stmt(index, s);\n     }\n     ret rec(stmts=stmts, expr=expr, index=index);\n }"}, {"sha": "37ae2c238d95d293beb71d8376c76794112d9cdf", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74d891517be8f6299b0626c26400dd54dd1aac6c/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d891517be8f6299b0626c26400dd54dd1aac6c/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=74d891517be8f6299b0626c26400dd54dd1aac6c", "patch": "@@ -734,6 +734,7 @@ fn fold_stmt[ENV](&ENV env, ast_fold[ENV] fld, &@stmt s) -> @stmt {\n \n fn fold_block[ENV](&ENV env, ast_fold[ENV] fld, &block blk) -> block {\n \n+    auto index = new_str_hash[ast.block_index_entry]();\n     let ENV env_ = fld.update_env_for_block(env, blk);\n \n     if (!fld.keep_going(env_)) {\n@@ -742,7 +743,9 @@ fn fold_block[ENV](&ENV env, ast_fold[ENV] fld, &block blk) -> block {\n \n     let vec[@ast.stmt] stmts = vec();\n     for (@ast.stmt s in blk.node.stmts) {\n-        append[@ast.stmt](stmts, fold_stmt[ENV](env_, fld, s));\n+        auto new_stmt = fold_stmt[ENV](env_, fld, s);\n+        append[@ast.stmt](stmts, new_stmt);\n+        ast.index_stmt(index, new_stmt);\n     }\n \n     auto expr = none[@ast.expr];\n@@ -755,8 +758,7 @@ fn fold_block[ENV](&ENV env, ast_fold[ENV] fld, &block blk) -> block {\n         }\n     }\n \n-    // FIXME: should we reindex?\n-    ret respan(blk.span, rec(stmts=stmts, expr=expr, index=blk.node.index));\n+    ret respan(blk.span, rec(stmts=stmts, expr=expr, index=index));\n }\n \n fn fold_arm[ENV](&ENV env, ast_fold[ENV] fld, &arm a) -> arm {"}]}