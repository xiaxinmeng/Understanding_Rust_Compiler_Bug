{"sha": "1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNWE5MjMwMDFjNDgxNjI3ZDdiMWQxOWQwZmUxZDNmODZlNWM1YTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-04T03:23:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-04T03:23:39Z"}, "message": "Auto merge of #41968 - kennytm:fix-unreadable-json-test-output-36516, r=nikomatsakis\n\nIntroduce 'run-pass' header to 'ui' tests in compiletest. Fix issue #36516.\n\n<del>`ui-run` test is a combination of `ui` test and `run-pass` test. It is used to test lint output.</del>\n\nAdded support of `// run-pass` header to `ui` tests.\n\nThe compiler message of each test must match the corresponding `*.stderr` file like the traditional `ui` tests. Additionally, the compiled output must be executed successfully like the `run-pass` test.\n\n12 `run-pass`/`run-pass-fulldeps` tests are moved to `ui`/`ui-fulldeps` plus the headers. After this move, no `run-pass`/`run-pass-fulldeps` tests should rely on the compiler's JSON message. This allows us to stop passing `--error-format json` in run-pass tests, thus fixing #36516.", "tree": {"sha": "b425a20cd93da459105d0d92faac53fbc3cb65ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b425a20cd93da459105d0d92faac53fbc3cb65ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "html_url": "https://github.com/rust-lang/rust/commit/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efee86d1a117c2cbc9d17635d48d97eeab7ee104", "url": "https://api.github.com/repos/rust-lang/rust/commits/efee86d1a117c2cbc9d17635d48d97eeab7ee104", "html_url": "https://github.com/rust-lang/rust/commit/efee86d1a117c2cbc9d17635d48d97eeab7ee104"}, {"sha": "3e6c83de1dc0a72df3663617d394a9e79641618d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6c83de1dc0a72df3663617d394a9e79641618d", "html_url": "https://github.com/rust-lang/rust/commit/3e6c83de1dc0a72df3663617d394a9e79641618d"}], "stats": {"total": 285, "additions": 250, "deletions": 35}, "files": [{"sha": "f02e7e9f0ddcf0bf6accbdea172d218dc9a9c75c", "filename": "src/test/codegen/fastcall-inreg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -37,7 +37,7 @@\n // ignore-tce\n // ignore-thumb\n // ignore-thumbeb\n-// ignore-x86_64 no-ignore-x86\n+// ignore-x86_64\n // ignore-xcore\n // ignore-nvptx\n // ignore-nvptx64"}, {"sha": "d07fb7b4a7143bdf537b473e0df42287d1f832b1", "filename": "src/test/run-pass/i128-ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Frun-pass%2Fi128-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Frun-pass%2Fi128-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi128-ffi.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -15,7 +15,8 @@\n // ignore-windows\n \n // Ignore 32 bit targets:\n-// ignore-x86, ignore-arm\n+// ignore-x86\n+// ignore-arm\n \n // ignore-emscripten\n "}, {"sha": "490aa0d469312d30b92af1bf28e57d489634159e", "filename": "src/test/ui-fulldeps/auxiliary/lint_group_plugin_test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "previous_filename": "src/test/run-pass-fulldeps/auxiliary/lint_group_plugin_test.rs"}, {"sha": "8647797270f9a841f5092b974faf0ec745509cbb", "filename": "src/test/ui-fulldeps/auxiliary/lint_plugin_test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_plugin_test.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "previous_filename": "src/test/run-pass-fulldeps/auxiliary/lint_plugin_test.rs"}, {"sha": "a728523d83267c58c461b4b6d59c6701a5ef281b", "filename": "src/test/ui-fulldeps/deprecated-derive.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #![feature(rustc_private)]\n #![allow(dead_code)]\n ", "previous_filename": "src/test/run-pass-fulldeps/deprecated-derive.rs"}, {"sha": "3ab7567f8dfb0e43fae5488d4a1a2831e628b3f9", "filename": "src/test/ui-fulldeps/deprecated-derive.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.stderr?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -0,0 +1,6 @@\n+warning: derive(Encodable) is deprecated in favor of derive(RustcEncodable)\n+  --> $DIR/deprecated-derive.rs:18:10\n+   |\n+18 | #[derive(Encodable)]\n+   |          ^^^^^^^^^\n+"}, {"sha": "fee9f45972dfcf1883c493bd4b07c47825beb6ad", "filename": "src/test/ui-fulldeps/lint-group-plugin.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:lint_group_plugin_test.rs\n // ignore-stage1\n #![feature(plugin)]", "previous_filename": "src/test/run-pass-fulldeps/lint-group-plugin.rs"}, {"sha": "1d68e78de5ed187e8680ddd0b234fa153f52dddd", "filename": "src/test/ui-fulldeps/lint-group-plugin.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -0,0 +1,16 @@\n+warning: item is named 'lintme'\n+  --> $DIR/lint-group-plugin.rs:18:1\n+   |\n+18 | fn lintme() { } //~ WARNING item is named 'lintme'\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(test_lint)] on by default\n+\n+warning: item is named 'pleaselintme'\n+  --> $DIR/lint-group-plugin.rs:19:1\n+   |\n+19 | fn pleaselintme() { } //~ WARNING item is named 'pleaselintme'\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(please_lint)] on by default\n+"}, {"sha": "1e428629cc2ff116b3140f256c8fdce7a1c90702", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-allow.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:lint_plugin_test.rs\n // ignore-stage1\n // compile-flags: -A test-lint", "previous_filename": "src/test/run-pass-fulldeps/lint-plugin-cmdline-allow.rs"}, {"sha": "b8513b95d36c09690115c5021cea71ab16cb6be2", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-allow.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.stderr?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -0,0 +1,8 @@\n+warning: function is never used: `lintme`\n+  --> $DIR/lint-plugin-cmdline-allow.rs:19:1\n+   |\n+19 | fn lintme() { }\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(dead_code)] on by default\n+"}, {"sha": "27ef9649cf34fc663c8b3f8c105f4d29ca5b856d", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-load.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:lint_plugin_test.rs\n // ignore-stage1\n // compile-flags: -Z extra-plugins=lint_plugin_test", "previous_filename": "src/test/run-pass-fulldeps/lint-plugin-cmdline-load.rs"}, {"sha": "42ececc93bd7940e3f7a874925e645a0274be5f5", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-load.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -0,0 +1,8 @@\n+warning: item is named 'lintme'\n+  --> $DIR/lint-plugin-cmdline-load.rs:18:1\n+   |\n+18 | fn lintme() { } //~ WARNING item is named 'lintme'\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(test_lint)] on by default\n+"}, {"sha": "304cfc3eb6d1d70e13167e61244830670bde5527", "filename": "src/test/ui-fulldeps/lint-plugin.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Flint-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Flint-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:lint_plugin_test.rs\n // ignore-stage1\n #![feature(plugin)]", "previous_filename": "src/test/run-pass-fulldeps/lint-plugin.rs"}, {"sha": "1fe821d31159c89236f1070e5a75d1b794b3fb4b", "filename": "src/test/ui-fulldeps/lint-plugin.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -0,0 +1,8 @@\n+warning: item is named 'lintme'\n+  --> $DIR/lint-plugin.rs:18:1\n+   |\n+18 | fn lintme() { } //~ WARNING item is named 'lintme'\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(test_lint)] on by default\n+"}, {"sha": "3d253ba49dad95959e6eaa3127e6c11667543d8d", "filename": "src/test/ui/deprecated-macro_escape-inner.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fdeprecated-macro_escape-inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fdeprecated-macro_escape-inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecated-macro_escape-inner.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n mod foo {\n     #![macro_escape] //~ WARNING macro_escape is a deprecated synonym for macro_use\n     //~^ HELP consider an outer attribute", "previous_filename": "src/test/run-pass/deprecated-macro_escape-inner.rs"}, {"sha": "c91db6c3365a436d86fd2be8e990f188cefd1578", "filename": "src/test/ui/deprecated-macro_escape-inner.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fdeprecated-macro_escape-inner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fdeprecated-macro_escape-inner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecated-macro_escape-inner.stderr?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -0,0 +1,8 @@\n+warning: macro_escape is a deprecated synonym for macro_use\n+  --> $DIR/deprecated-macro_escape-inner.rs:14:5\n+   |\n+14 |     #![macro_escape] //~ WARNING macro_escape is a deprecated synonym for macro_use\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider an outer attribute, #[macro_use] mod ...\n+"}, {"sha": "a234572343c1503d49e4a15d855c33fc0c8644f8", "filename": "src/test/ui/deprecated-macro_escape.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fdeprecated-macro_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fdeprecated-macro_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecated-macro_escape.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #[macro_escape] //~ WARNING macro_escape is a deprecated synonym for macro_use\n mod foo {\n }", "previous_filename": "src/test/run-pass/deprecated-macro_escape.rs"}, {"sha": "aa77129528165aadb954c21c5eb880ba5e23c7ad", "filename": "src/test/ui/deprecated-macro_escape.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fdeprecated-macro_escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fdeprecated-macro_escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecated-macro_escape.stderr?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -0,0 +1,6 @@\n+warning: macro_escape is a deprecated synonym for macro_use\n+  --> $DIR/deprecated-macro_escape.rs:13:1\n+   |\n+13 | #[macro_escape] //~ WARNING macro_escape is a deprecated synonym for macro_use\n+   | ^^^^^^^^^^^^^^^\n+"}, {"sha": "cf4dfb947f4192caf218de82da9a5f457bcf1355", "filename": "src/test/ui/deriving-meta-empty-trait-list.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fderiving-meta-empty-trait-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fderiving-meta-empty-trait-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving-meta-empty-trait-list.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #![allow(dead_code)]\n \n #[derive]   //~ WARNING empty trait list in `derive`", "previous_filename": "src/test/run-pass/deriving-meta-empty-trait-list.rs"}, {"sha": "58f871413f1068330cc2a25af31206d504d1686b", "filename": "src/test/ui/deriving-meta-empty-trait-list.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fderiving-meta-empty-trait-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fderiving-meta-empty-trait-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving-meta-empty-trait-list.stderr?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -0,0 +1,12 @@\n+warning: empty trait list in `derive`\n+  --> $DIR/deriving-meta-empty-trait-list.rs:15:1\n+   |\n+15 | #[derive]   //~ WARNING empty trait list in `derive`\n+   | ^^^^^^^^^\n+\n+warning: empty trait list in `derive`\n+  --> $DIR/deriving-meta-empty-trait-list.rs:18:1\n+   |\n+18 | #[derive()] //~ WARNING empty trait list in `derive`\n+   | ^^^^^^^^^^^\n+"}, {"sha": "075bd9acf5f384d94a22ae9f6b6eca9d76c278dc", "filename": "src/test/ui/enum-size-variance.rs", "status": "renamed", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fenum-size-variance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fenum-size-variance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-size-variance.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -7,7 +7,13 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n+\n+// run-pass\n+// ignore-x86\n+// ignore-arm\n+// ignore-emscripten\n+// ^ ignore 32-bit targets, as the error message is target-dependent. see PR #41968.\n+\n #![warn(variant_size_differences)]\n #![allow(dead_code)]\n ", "previous_filename": "src/test/run-pass/enum-size-variance.rs"}, {"sha": "5745b9344b4a79e2d70dbf0eefbbf07ed6d6a509", "filename": "src/test/ui/enum-size-variance.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fenum-size-variance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fenum-size-variance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-size-variance.stderr?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -0,0 +1,12 @@\n+warning: enum variant is more than three times larger (32 bytes) than the next largest\n+  --> $DIR/enum-size-variance.rs:32:5\n+   |\n+32 |     L(isize, isize, isize, isize), //~ WARNING three times larger\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/enum-size-variance.rs:17:9\n+   |\n+17 | #![warn(variant_size_differences)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "bcadd94eb6fba02c6a5635c3564d83c3f79d9f79", "filename": "src/test/ui/issue-19100.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fissue-19100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fissue-19100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19100.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #![allow(non_snake_case)]\n #![allow(dead_code)]\n #![allow(unused_variables)]", "previous_filename": "src/test/run-pass/issue-19100.rs"}, {"sha": "45e2ef652d5a3e4e66879de9cbb170e3a69c836b", "filename": "src/test/ui/issue-19100.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fissue-19100.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fissue-19100.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19100.stderr?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -0,0 +1,16 @@\n+warning[E0170]: pattern binding `Bar` is named the same as one of the variants of the type `Foo`\n+  --> $DIR/issue-19100.rs:27:1\n+   |\n+27 | Bar if true\n+   | ^^^\n+   |\n+   = help: if you meant to match on a variant, consider making the path in the pattern qualified: `Foo::Bar`\n+\n+warning[E0170]: pattern binding `Baz` is named the same as one of the variants of the type `Foo`\n+  --> $DIR/issue-19100.rs:32:1\n+   |\n+32 | Baz if false\n+   | ^^^\n+   |\n+   = help: if you meant to match on a variant, consider making the path in the pattern qualified: `Foo::Baz`\n+"}, {"sha": "c43f2229cdc334d189346830af9623382aa087ac", "filename": "src/test/ui/path-lookahead.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fpath-lookahead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fpath-lookahead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpath-lookahead.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Parser test for #37765\n \n fn with_parens<T: ToString>(arg: T) -> String { //~WARN function is never used: `with_parens`", "previous_filename": "src/test/run-pass/path-lookahead.rs"}, {"sha": "1e19977e84a3d47344a77f61cbc68941a86d57aa", "filename": "src/test/ui/path-lookahead.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpath-lookahead.stderr?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -0,0 +1,28 @@\n+warning: unnecessary parentheses around `return` value\n+  --> $DIR/path-lookahead.rs:16:10\n+   |\n+16 |   return (<T as ToString>::to_string(&arg)); //~WARN unnecessary parentheses around `return` value\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(unused_parens)] on by default\n+\n+warning: function is never used: `with_parens`\n+  --> $DIR/path-lookahead.rs:15:1\n+   |\n+15 | / fn with_parens<T: ToString>(arg: T) -> String { //~WARN function is never used: `with_parens`\n+16 | |   return (<T as ToString>::to_string(&arg)); //~WARN unnecessary parentheses around `return` value\n+17 | | }\n+   | |_^\n+   |\n+   = note: #[warn(dead_code)] on by default\n+\n+warning: function is never used: `no_parens`\n+  --> $DIR/path-lookahead.rs:19:1\n+   |\n+19 | / fn no_parens<T: ToString>(arg: T) -> String { //~WARN function is never used: `no_parens`\n+20 | |   return <T as ToString>::to_string(&arg);\n+21 | | }\n+   | |_^\n+   |\n+   = note: #[warn(dead_code)] on by default\n+"}, {"sha": "8986732a2694d1853d5a56e67d4d1c3b4bf83b99", "filename": "src/test/ui/test-should-panic-attr.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Ftest-should-panic-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Ftest-should-panic-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-should-panic-attr.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // compile-flags: --test\n \n #[test]", "previous_filename": "src/test/run-pass/test-should-panic-attr.rs"}, {"sha": "6f143b6cbeeba3a460f3947e0fc48516f2aeae89", "filename": "src/test/ui/test-should-panic-attr.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Ftest-should-panic-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftest%2Fui%2Ftest-should-panic-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-should-panic-attr.stderr?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -0,0 +1,40 @@\n+warning: attribute must be of the form: `#[should_panic]` or `#[should_panic(expected = \"error message\")]`\n+  --> $DIR/test-should-panic-attr.rs:15:1\n+   |\n+15 | #[should_panic = \"foo\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+\n+warning: argument must be of the form: `expected = \"error message\"`\n+  --> $DIR/test-should-panic-attr.rs:22:1\n+   |\n+22 | #[should_panic(expected)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+\n+warning: argument must be of the form: `expected = \"error message\"`\n+  --> $DIR/test-should-panic-attr.rs:29:1\n+   |\n+29 | #[should_panic(expect)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+\n+warning: argument must be of the form: `expected = \"error message\"`\n+  --> $DIR/test-should-panic-attr.rs:36:1\n+   |\n+36 | #[should_panic(expected(foo, bar))]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+\n+warning: argument must be of the form: `expected = \"error message\"`\n+  --> $DIR/test-should-panic-attr.rs:43:1\n+   |\n+43 | #[should_panic(expected = \"foo\", bar)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+"}, {"sha": "c503ca7d8cd14632d03a02332f90e6521d5b8cf6", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 43, "deletions": 28, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -80,13 +80,12 @@ impl EarlyProps {\n                 return false;\n             }\n \n-            if !line.contains(\"ignore-gdb-version\") &&\n-               config.parse_name_directive(line, \"ignore-gdb\") {\n+            if config.parse_name_directive(line, \"ignore-gdb\") {\n                 return true;\n             }\n \n             if let Some(actual_version) = config.gdb_version {\n-                if line.contains(\"min-gdb-version\") {\n+                if line.starts_with(\"min-gdb-version\") {\n                     let (start_ver, end_ver) = extract_gdb_version_range(line);\n \n                     if start_ver != end_ver {\n@@ -95,7 +94,7 @@ impl EarlyProps {\n                     // Ignore if actual version is smaller the minimum required\n                     // version\n                     actual_version < start_ver\n-                } else if line.contains(\"ignore-gdb-version\") {\n+                } else if line.starts_with(\"ignore-gdb-version\") {\n                     let (min_version, max_version) = extract_gdb_version_range(line);\n \n                     if max_version < min_version {\n@@ -119,20 +118,21 @@ impl EarlyProps {\n         fn extract_gdb_version_range(line: &str) -> (u32, u32) {\n             const ERROR_MESSAGE: &'static str = \"Malformed GDB version directive\";\n \n-            let range_components = line.split(' ')\n-                                       .flat_map(|word| word.split('-'))\n-                                       .filter(|word| word.len() > 0)\n-                                       .skip_while(|word| extract_gdb_version(word).is_none())\n-                                       .collect::<Vec<&str>>();\n+            let range_components = line.split(&[' ', '-'][..])\n+                                       .filter(|word| !word.is_empty())\n+                                       .map(extract_gdb_version)\n+                                       .skip_while(Option::is_none)\n+                                       .take(3) // 3 or more = invalid, so take at most 3.\n+                                       .collect::<Vec<Option<u32>>>();\n \n             match range_components.len() {\n                 1 => {\n-                    let v = extract_gdb_version(range_components[0]).unwrap();\n+                    let v = range_components[0].unwrap();\n                     (v, v)\n                 }\n                 2 => {\n-                    let v_min = extract_gdb_version(range_components[0]).unwrap();\n-                    let v_max = extract_gdb_version(range_components[1]).expect(ERROR_MESSAGE);\n+                    let v_min = range_components[0].unwrap();\n+                    let v_max = range_components[1].expect(ERROR_MESSAGE);\n                     (v_min, v_max)\n                 }\n                 _ => panic!(ERROR_MESSAGE),\n@@ -149,10 +149,10 @@ impl EarlyProps {\n             }\n \n             if let Some(ref actual_version) = config.lldb_version {\n-                if line.contains(\"min-lldb-version\") {\n-                    let min_version = line.trim()\n-                        .split(' ')\n-                        .last()\n+                if line.starts_with(\"min-lldb-version\") {\n+                    let min_version = line.trim_right()\n+                        .rsplit(' ')\n+                        .next()\n                         .expect(\"Malformed lldb version directive\");\n                     // Ignore if actual version is smaller the minimum required\n                     // version\n@@ -167,10 +167,10 @@ impl EarlyProps {\n \n         fn ignore_llvm(config: &Config, line: &str) -> bool {\n             if let Some(ref actual_version) = config.llvm_version {\n-                if line.contains(\"min-llvm-version\") {\n-                    let min_version = line.trim()\n-                        .split(' ')\n-                        .last()\n+                if line.starts_with(\"min-llvm-version\") {\n+                    let min_version = line.trim_right()\n+                        .rsplit(' ')\n+                        .next()\n                         .expect(\"Malformed llvm version directive\");\n                     // Ignore if actual version is smaller the minimum required\n                     // version\n@@ -233,6 +233,9 @@ pub struct TestProps {\n     pub must_compile_successfully: bool,\n     // rustdoc will test the output of the `--test` option\n     pub check_test_line_numbers_match: bool,\n+    // The test must be compiled and run successfully. Only used in UI tests for\n+    // now.\n+    pub run_pass: bool,\n }\n \n impl TestProps {\n@@ -258,6 +261,7 @@ impl TestProps {\n             incremental_dir: None,\n             must_compile_successfully: false,\n             check_test_line_numbers_match: false,\n+            run_pass: false,\n         }\n     }\n \n@@ -368,6 +372,10 @@ impl TestProps {\n             if !self.check_test_line_numbers_match {\n                 self.check_test_line_numbers_match = config.parse_check_test_line_numbers_match(ln);\n             }\n+\n+            if !self.run_pass {\n+                self.run_pass = config.parse_run_pass(ln);\n+            }\n         });\n \n         for key in vec![\"RUST_TEST_NOCAPTURE\", \"RUST_TEST_THREADS\"] {\n@@ -405,14 +413,14 @@ fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut FnMut(&str)) {\n                     None => false,\n                 };\n                 if matches {\n-                    it(&ln[close_brace + 1..]);\n+                    it(ln[(close_brace + 1) ..].trim_left());\n                 }\n             } else {\n                 panic!(\"malformed condition directive: expected `//[foo]`, found `{}`\",\n                        ln)\n             }\n         } else if ln.starts_with(\"//\") {\n-            it(&ln[2..]);\n+            it(ln[2..].trim_left());\n         }\n     }\n     return;\n@@ -485,6 +493,10 @@ impl Config {\n         self.parse_name_directive(line, \"check-test-line-numbers-match\")\n     }\n \n+    fn parse_run_pass(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"run-pass\")\n+    }\n+\n     fn parse_env(&self, line: &str, name: &str) -> Option<(String, String)> {\n         self.parse_name_value_directive(line, name).map(|nv| {\n             // nv is either FOO or FOO=BAR\n@@ -516,15 +528,18 @@ impl Config {\n     }\n \n     fn parse_name_directive(&self, line: &str, directive: &str) -> bool {\n-        // This 'no-' rule is a quick hack to allow pretty-expanded and\n-        // no-pretty-expanded to coexist\n-        line.contains(directive) && !line.contains(&(\"no-\".to_owned() + directive))\n+        // Ensure the directive is a whole word. Do not match \"ignore-x86\" when\n+        // the line says \"ignore-x86_64\".\n+        line.starts_with(directive) && match line.as_bytes().get(directive.len()) {\n+            None | Some(&b' ') | Some(&b':') => true,\n+            _ => false\n+        }\n     }\n \n     pub fn parse_name_value_directive(&self, line: &str, directive: &str) -> Option<String> {\n-        let keycolon = format!(\"{}:\", directive);\n-        if let Some(colon) = line.find(&keycolon) {\n-            let value = line[(colon + keycolon.len())..line.len()].to_owned();\n+        let colon = directive.len();\n+        if line.starts_with(directive) && line.as_bytes().get(colon) == Some(&b':') {\n+            let value = line[(colon + 1) ..].to_owned();\n             debug!(\"{}: {}\", directive, value);\n             Some(expand_variables(value, self))\n         } else {"}, {"sha": "01419c4257074a7e8186787f996e504272e8deef", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=1b5a923001c481627d7b1d19d0fe1d3f86e5c5a6", "patch": "@@ -214,10 +214,10 @@ impl<'test> TestCx<'test> {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n+        // FIXME(#41968): Move this check to tidy?\n         let expected_errors = errors::load_errors(&self.testpaths.file, self.revision);\n-        if !expected_errors.is_empty() {\n-            self.check_expected_errors(expected_errors, &proc_res);\n-        }\n+        assert!(expected_errors.is_empty(),\n+                \"run-pass tests with expected warnings should be moved to ui/\");\n \n         let proc_res = self.exec_compiled_test();\n \n@@ -1394,7 +1394,6 @@ actual:\\n\\\n         match self.config.mode {\n             CompileFail |\n             ParseFail |\n-            RunPass |\n             Incremental => {\n                 // If we are extracting and matching errors in the new\n                 // fashion, then you want JSON mode. Old-skool error\n@@ -1422,6 +1421,7 @@ actual:\\n\\\n \n                 args.push(dir_opt);\n             }\n+            RunPass |\n             RunFail |\n             RunPassValgrind |\n             Pretty |\n@@ -2254,6 +2254,14 @@ actual:\\n\\\n             self.fatal_proc_rec(&format!(\"{} errors occurred comparing output.\", errors),\n                                 &proc_res);\n         }\n+\n+        if self.props.run_pass {\n+            let proc_res = self.exec_compiled_test();\n+\n+            if !proc_res.status.success() {\n+                self.fatal_proc_rec(\"test run failed!\", &proc_res);\n+            }\n+        }\n     }\n \n     fn run_mir_opt_test(&self) {"}]}