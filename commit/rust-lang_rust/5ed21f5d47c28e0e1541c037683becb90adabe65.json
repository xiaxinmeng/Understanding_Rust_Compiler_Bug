{"sha": "5ed21f5d47c28e0e1541c037683becb90adabe65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZDIxZjVkNDdjMjhlMGUxNTQxYzAzNzY4M2JlY2I5MGFkYWJlNjU=", "commit": {"author": {"name": "Venkata Giri Reddy", "email": "venkatagirireddy@gmail.com", "date": "2017-06-28T16:26:36Z"}, "committer": {"name": "Venkata Giri Reddy", "email": "venkatagirireddy@gmail.com", "date": "2017-06-28T20:19:52Z"}, "message": "rustc_typeck: use body-id of type-checking item in need_type_info", "tree": {"sha": "310618b0ac38ffffaca2f428ec39f6d93db45fd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/310618b0ac38ffffaca2f428ec39f6d93db45fd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ed21f5d47c28e0e1541c037683becb90adabe65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed21f5d47c28e0e1541c037683becb90adabe65", "html_url": "https://github.com/rust-lang/rust/commit/5ed21f5d47c28e0e1541c037683becb90adabe65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ed21f5d47c28e0e1541c037683becb90adabe65/comments", "author": {"login": "venkatagiri", "id": 231465, "node_id": "MDQ6VXNlcjIzMTQ2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/231465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/venkatagiri", "html_url": "https://github.com/venkatagiri", "followers_url": "https://api.github.com/users/venkatagiri/followers", "following_url": "https://api.github.com/users/venkatagiri/following{/other_user}", "gists_url": "https://api.github.com/users/venkatagiri/gists{/gist_id}", "starred_url": "https://api.github.com/users/venkatagiri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/venkatagiri/subscriptions", "organizations_url": "https://api.github.com/users/venkatagiri/orgs", "repos_url": "https://api.github.com/users/venkatagiri/repos", "events_url": "https://api.github.com/users/venkatagiri/events{/privacy}", "received_events_url": "https://api.github.com/users/venkatagiri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "venkatagiri", "id": 231465, "node_id": "MDQ6VXNlcjIzMTQ2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/231465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/venkatagiri", "html_url": "https://github.com/venkatagiri", "followers_url": "https://api.github.com/users/venkatagiri/followers", "following_url": "https://api.github.com/users/venkatagiri/following{/other_user}", "gists_url": "https://api.github.com/users/venkatagiri/gists{/gist_id}", "starred_url": "https://api.github.com/users/venkatagiri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/venkatagiri/subscriptions", "organizations_url": "https://api.github.com/users/venkatagiri/orgs", "repos_url": "https://api.github.com/users/venkatagiri/repos", "events_url": "https://api.github.com/users/venkatagiri/events{/privacy}", "received_events_url": "https://api.github.com/users/venkatagiri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74cb315a109f9b7a4a73cc6bf3ac481e92ec926d", "url": "https://api.github.com/repos/rust-lang/rust/commits/74cb315a109f9b7a4a73cc6bf3ac481e92ec926d", "html_url": "https://github.com/rust-lang/rust/commit/74cb315a109f9b7a4a73cc6bf3ac481e92ec926d"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "a684881c0912abbb7ee967433d60d15c5ab6ecbd", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=5ed21f5d47c28e0e1541c037683becb90adabe65", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use hir::{self, map, Local, Pat, Body};\n+use hir::{self, Local, Pat, Body};\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n use infer::InferCtxt;\n use infer::type_variable::TypeVariableOrigin;\n@@ -88,7 +88,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn need_type_info(&self, body_id: hir::BodyId, span: Span, ty: Ty<'tcx>) {\n+    pub fn need_type_info(&self, body_id: Option<hir::BodyId>, span: Span, ty: Ty<'tcx>) {\n         let ty = self.resolve_type_vars_if_possible(&ty);\n         let name = self.extract_type_name(&ty);\n \n@@ -103,11 +103,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             found_arg_pattern: None,\n         };\n \n-        // #40294: cause.body_id can also be a fn declaration.\n-        // Currently, if it's anything other than NodeExpr, we just ignore it\n-        match self.tcx.hir.find(body_id.node_id) {\n-            Some(map::NodeExpr(expr)) => local_visitor.visit_expr(expr),\n-            _ => ()\n+        if let Some(body_id) = body_id {\n+            let expr = self.tcx.hir.expect_expr(body_id.node_id);\n+            local_visitor.visit_expr(expr);\n         }\n \n         if let Some(pattern) = local_visitor.found_arg_pattern {"}, {"sha": "64a6a0522cdbf345b4c7c469019accd0f901ba8a", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=5ed21f5d47c28e0e1541c037683becb90adabe65", "patch": "@@ -45,7 +45,8 @@ use syntax_pos::{DUMMY_SP, Span};\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn report_fulfillment_errors(&self,\n-                                     errors: &Vec<FulfillmentError<'tcx>>) {\n+                                     errors: &Vec<FulfillmentError<'tcx>>,\n+                                     body_id: Option<hir::BodyId>) {\n         #[derive(Debug)]\n         struct ErrorDescriptor<'tcx> {\n             predicate: ty::Predicate<'tcx>,\n@@ -105,7 +106,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         for (error, suppressed) in errors.iter().zip(is_suppressed) {\n             if !suppressed {\n-                self.report_fulfillment_error(error);\n+                self.report_fulfillment_error(error, body_id);\n             }\n         }\n     }\n@@ -148,7 +149,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         false\n     }\n \n-    fn report_fulfillment_error(&self, error: &FulfillmentError<'tcx>) {\n+    fn report_fulfillment_error(&self, error: &FulfillmentError<'tcx>,\n+                                body_id: Option<hir::BodyId>) {\n         debug!(\"report_fulfillment_errors({:?})\", error);\n         match error.code {\n             FulfillmentErrorCode::CodeSelectionError(ref e) => {\n@@ -158,7 +160,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 self.report_projection_error(&error.obligation, e);\n             }\n             FulfillmentErrorCode::CodeAmbiguity => {\n-                self.maybe_report_ambiguity(&error.obligation);\n+                self.maybe_report_ambiguity(&error.obligation, body_id);\n             }\n             FulfillmentErrorCode::CodeSubtypeError(ref expected_found, ref err) => {\n                 self.report_mismatched_types(&error.obligation.cause,\n@@ -869,14 +871,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n-    fn maybe_report_ambiguity(&self, obligation: &PredicateObligation<'tcx>) {\n+    fn maybe_report_ambiguity(&self, obligation: &PredicateObligation<'tcx>,\n+                              body_id: Option<hir::BodyId>) {\n         // Unable to successfully determine, probably means\n         // insufficient type information, but could mean\n         // ambiguous impls. The latter *ought* to be a\n         // coherence violation, so we don't report it here.\n \n         let predicate = self.resolve_type_vars_if_possible(&obligation.predicate);\n-        let body_id = hir::BodyId { node_id: obligation.cause.body_id };\n         let span = obligation.cause.span;\n \n         debug!(\"maybe_report_ambiguity(predicate={:?}, obligation={:?})\",\n@@ -953,7 +955,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     let &SubtypePredicate { a_is_expected: _, a, b } = data.skip_binder();\n                     // both must be type variables, or the other would've been instantiated\n                     assert!(a.is_ty_var() && b.is_ty_var());\n-                    self.need_type_info(hir::BodyId { node_id: obligation.cause.body_id },\n+                    self.need_type_info(body_id,\n                                         obligation.cause.span,\n                                         a);\n                 }"}, {"sha": "056aad7460048939bf5c9878ab251599af0768a3", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=5ed21f5d47c28e0e1541c037683becb90adabe65", "patch": "@@ -498,7 +498,7 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ) {\n             Ok(predicates) => predicates,\n             Err(errors) => {\n-                infcx.report_fulfillment_errors(&errors);\n+                infcx.report_fulfillment_errors(&errors, None);\n                 // An unnormalized env is better than nothing.\n                 return elaborated_env;\n             }"}, {"sha": "68b687a2e6182c8ba34fddadcfc442e1ded1b03f", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=5ed21f5d47c28e0e1541c037683becb90adabe65", "patch": "@@ -996,7 +996,7 @@ impl MirPass for QualifyAndPromoteConstants {\n                                               tcx.require_lang_item(lang_items::SyncTraitLangItem),\n                                               cause);\n                 if let Err(err) = fulfillment_cx.select_all_or_error(&infcx) {\n-                    infcx.report_fulfillment_errors(&err);\n+                    infcx.report_fulfillment_errors(&err, None);\n                 }\n             });\n         }"}, {"sha": "bf134f9547d3817893097baf4148f04abcabd9bc", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=5ed21f5d47c28e0e1541c037683becb90adabe65", "patch": "@@ -328,7 +328,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         if let Err(ref errors) = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n-            infcx.report_fulfillment_errors(errors);\n+            infcx.report_fulfillment_errors(errors, None);\n             return Err(ErrorReported);\n         }\n \n@@ -793,7 +793,7 @@ pub fn compare_const_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         if let Err(ref errors) = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n-            infcx.report_fulfillment_errors(errors);\n+            infcx.report_fulfillment_errors(errors, None);\n             return;\n         }\n "}, {"sha": "ed22cd1333e9c58cf5b25ad8a565c341be834eee", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=5ed21f5d47c28e0e1541c037683becb90adabe65", "patch": "@@ -110,7 +110,7 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n \n         if let Err(ref errors) = fulfillment_cx.select_all_or_error(&infcx) {\n             // this could be reached when we get lazy normalization\n-            infcx.report_fulfillment_errors(errors);\n+            infcx.report_fulfillment_errors(errors, None);\n             return Err(ErrorReported);\n         }\n "}, {"sha": "dadf00944c61a0fdb78b30d152989c74266f78b6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5ed21f5d47c28e0e1541c037683becb90adabe65", "patch": "@@ -216,6 +216,8 @@ pub struct Inherited<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     /// environment is for an item or something where the \"callee\" is\n     /// not clear.\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n+\n+    body_id: Option<hir::BodyId>,\n }\n \n impl<'a, 'gcx, 'tcx> Deref for Inherited<'a, 'gcx, 'tcx> {\n@@ -604,6 +606,7 @@ impl<'a, 'gcx, 'tcx> Inherited<'a, 'gcx, 'tcx> {\n             deferred_cast_checks: RefCell::new(Vec::new()),\n             anon_types: RefCell::new(NodeMap()),\n             implicit_region_bound,\n+            body_id,\n         }\n     }\n \n@@ -2119,15 +2122,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         match fulfillment_cx.select_all_or_error(self) {\n             Ok(()) => { }\n-            Err(errors) => { self.report_fulfillment_errors(&errors); }\n+            Err(errors) => { self.report_fulfillment_errors(&errors, self.inh.body_id); }\n         }\n     }\n \n     /// Select as many obligations as we can at present.\n     fn select_obligations_where_possible(&self) {\n         match self.fulfillment_cx.borrow_mut().select_where_possible(self) {\n             Ok(()) => { }\n-            Err(errors) => { self.report_fulfillment_errors(&errors); }\n+            Err(errors) => { self.report_fulfillment_errors(&errors, self.inh.body_id); }\n         }\n     }\n "}, {"sha": "81e5dae5477ebcf8df619c8790364c43127f86c4", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=5ed21f5d47c28e0e1541c037683becb90adabe65", "patch": "@@ -377,7 +377,7 @@ impl<'cx, 'gcx, 'tcx> Resolver<'cx, 'gcx, 'tcx> {\n \n     fn report_error(&self, t: Ty<'tcx>) {\n         if !self.tcx.sess.has_errors() {\n-            self.infcx.need_type_info(self.body.id(), self.span.to_span(&self.tcx), t);\n+            self.infcx.need_type_info(Some(self.body.id()), self.span.to_span(&self.tcx), t);\n         }\n     }\n }"}, {"sha": "9305eff1436520e7b3ee0bebf1c2e21c4e105198", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=5ed21f5d47c28e0e1541c037683becb90adabe65", "patch": "@@ -386,7 +386,7 @@ pub fn coerce_unsized_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         // Check that all transitive obligations are satisfied.\n         if let Err(errors) = fulfill_cx.select_all_or_error(&infcx) {\n-            infcx.report_fulfillment_errors(&errors);\n+            infcx.report_fulfillment_errors(&errors, None);\n         }\n \n         // Finally, resolve all regions."}, {"sha": "2857b5fb5e05e3c7c61ef9c5e3eeac07680ca29e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=5ed21f5d47c28e0e1541c037683becb90adabe65", "patch": "@@ -166,7 +166,7 @@ fn require_same_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         match fulfill_cx.select_all_or_error(infcx) {\n             Ok(()) => true,\n             Err(errors) => {\n-                infcx.report_fulfillment_errors(&errors);\n+                infcx.report_fulfillment_errors(&errors, None);\n                 false\n             }\n         }"}, {"sha": "129f7c8b1ea0eb8b203f45b4f5f15dc6262bb295", "filename": "src/test/compile-fail/issue-23046.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed21f5d47c28e0e1541c037683becb90adabe65/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs?ref=5ed21f5d47c28e0e1541c037683becb90adabe65", "patch": "@@ -24,7 +24,7 @@ pub fn let_<'var, VAR, F: for<'v: 'var> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n }\n \n fn main() {\n-    let ex = |x| {\n-        let_(add(x,x), |y| { //~ ERROR type annotations needed\n+    let ex = |x| { //~ ERROR type annotations needed\n+        let_(add(x,x), |y| {\n             let_(add(x, x), |x|x)})};\n }"}]}