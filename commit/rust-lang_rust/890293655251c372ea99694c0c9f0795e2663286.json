{"sha": "890293655251c372ea99694c0c9f0795e2663286", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MDI5MzY1NTI1MWMzNzJlYTk5Njk0YzBjOWYwNzk1ZTI2NjMyODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-28T18:36:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-28T18:36:00Z"}, "message": "Auto merge of #21521 - defuz:interval-with-path, r=pnkfelix\n\nFixing #21475. Right now this code can not be parsed:\r\n\r\n```rust\r\nuse m::{START, END};\r\n\r\nfn main() {\r\n    match 42u32 {\r\n        m::START...m::END => {}, // error: expected one of `::`, `=>`, or `|`, found `...`\r\n        _  => {},\r\n    }\r\n}\r\n\r\nmod m {\r\n  pub const START: u32 = 4;\r\n  pub const END:   u32 = 14;\r\n}\r\n```\r\n\r\nI fixed the parser and added test for this case, but now there are still problems with mixing literals and paths in interval:\r\n\r\n```rust\r\n    match 42u32 {\r\n        0u32...m::END => {},       // mismatched types in range [E0031]\r\n        m::START...59u32 => {},    // mismatched types in range [E0031]\r\n        _  => {},\r\n    }\r\n}\r\n```\r\n\r\nI'll try fix this problem and need review.", "tree": {"sha": "dcd899519544caface9bf0d5d6b07c762c89bc50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcd899519544caface9bf0d5d6b07c762c89bc50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/890293655251c372ea99694c0c9f0795e2663286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/890293655251c372ea99694c0c9f0795e2663286", "html_url": "https://github.com/rust-lang/rust/commit/890293655251c372ea99694c0c9f0795e2663286", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/890293655251c372ea99694c0c9f0795e2663286/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a69110c3b1122596ddc8999bb2403a5777bb8ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a69110c3b1122596ddc8999bb2403a5777bb8ed", "html_url": "https://github.com/rust-lang/rust/commit/8a69110c3b1122596ddc8999bb2403a5777bb8ed"}, {"sha": "6c35bf4fbc4f795eb18bbb0c750ed478a47fff4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c35bf4fbc4f795eb18bbb0c750ed478a47fff4e", "html_url": "https://github.com/rust-lang/rust/commit/6c35bf4fbc4f795eb18bbb0c750ed478a47fff4e"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "c1acee57cf806805630d305e085a29e01589f00f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/890293655251c372ea99694c0c9f0795e2663286/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890293655251c372ea99694c0c9f0795e2663286/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=890293655251c372ea99694c0c9f0795e2663286", "patch": "@@ -3538,6 +3538,19 @@ impl<'a> Parser<'a> {\n                         self.bump();\n                         pat = PatStruct(enum_path, fields, etc);\n                     }\n+                    token::DotDotDot => {\n+                        let hi = self.last_span.hi;\n+                        let start = self.mk_expr(lo, hi, ExprPath(None, enum_path));\n+                        self.eat(&token::DotDotDot);\n+                        let end = if self.token.is_ident() || self.token.is_path() {\n+                            let path = self.parse_path(LifetimeAndTypesWithColons);\n+                            let hi = self.span.hi;\n+                            self.mk_expr(lo, hi, ExprPath(None, path))\n+                        } else {\n+                            self.parse_literal_maybe_minus()\n+                        };\n+                        pat = PatRange(start, end);\n+                    }\n                     _ => {\n                         let mut args: Vec<P<Pat>> = Vec::new();\n                         match self.token {"}, {"sha": "145145af5194dba01d208490816aa63814f71730", "filename": "src/test/run-pass/issue-21475.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/890293655251c372ea99694c0c9f0795e2663286/src%2Ftest%2Frun-pass%2Fissue-21475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890293655251c372ea99694c0c9f0795e2663286/src%2Ftest%2Frun-pass%2Fissue-21475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21475.rs?ref=890293655251c372ea99694c0c9f0795e2663286", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use m::{START, END};\n+\n+fn main() {\n+    match 42u32 {\n+        m::START...m::END => {},\n+        0u32...m::END => {},\n+        m::START...59u32 => {},\n+        _  => {},\n+    }\n+}\n+\n+mod m {\n+  pub const START: u32 = 4;\n+  pub const END:   u32 = 14;\n+}"}]}