{"sha": "ac70aea98509c33ec75208f7b42c8d905c74ebaf", "node_id": "C_kwDOAAsO6NoAKGFjNzBhZWE5ODUwOWMzM2VjNzUyMDhmN2I0MmM4ZDkwNWM3NGViYWY", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-08-11T14:52:29Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-08-18T09:34:40Z"}, "message": "Address reviewer comments\n\nSigned-off-by: Nick Cameron <nrc@ncameron.org>", "tree": {"sha": "0ac0c2088cf39228c10a175cb6d8f3674ffef8c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ac0c2088cf39228c10a175cb6d8f3674ffef8c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac70aea98509c33ec75208f7b42c8d905c74ebaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac70aea98509c33ec75208f7b42c8d905c74ebaf", "html_url": "https://github.com/rust-lang/rust/commit/ac70aea98509c33ec75208f7b42c8d905c74ebaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac70aea98509c33ec75208f7b42c8d905c74ebaf/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a2122fff015d1d7fb31fe3a55e49027d67d79af", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2122fff015d1d7fb31fe3a55e49027d67d79af", "html_url": "https://github.com/rust-lang/rust/commit/1a2122fff015d1d7fb31fe3a55e49027d67d79af"}], "stats": {"total": 129, "additions": 74, "deletions": 55}, "files": [{"sha": "e1ab06b0d0f69fc8eb77fc65e838970ce7c191a7", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -703,7 +703,7 @@ impl Read for File {\n         self.inner.read_vectored(bufs)\n     }\n \n-    fn read_buf(&mut self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         self.inner.read_buf(cursor)\n     }\n \n@@ -755,7 +755,7 @@ impl Read for &File {\n         self.inner.read(buf)\n     }\n \n-    fn read_buf(&mut self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         self.inner.read_buf(cursor)\n     }\n "}, {"sha": "88ad92d8a985971134ba3171a952547fa6003e9e", "filename": "library/std/src/io/buffered/bufreader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -266,7 +266,7 @@ impl<R: Read> Read for BufReader<R> {\n         Ok(nread)\n     }\n \n-    fn read_buf(&mut self, mut cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, mut cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         // If we don't have any buffered data and we're doing a massive read\n         // (larger than our internal buffer), bypass our internal buffer\n         // entirely.\n@@ -278,7 +278,7 @@ impl<R: Read> Read for BufReader<R> {\n         let prev = cursor.written();\n \n         let mut rem = self.fill_buf()?;\n-        rem.read_buf(cursor.clone())?;\n+        rem.read_buf(cursor.reborrow())?;\n \n         self.consume(cursor.written() - prev); //slice impl of read_buf known to never unfill buf\n "}, {"sha": "867c22c6041e73b560f2298c48cf51821e9d7947", "filename": "library/std/src/io/buffered/bufreader/buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader%2Fbuffer.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -93,7 +93,7 @@ impl Buffer {\n         if self.pos >= self.filled {\n             debug_assert!(self.pos == self.filled);\n \n-            let mut buf: BorrowedBuf<'_> = (&mut *self.buf).into();\n+            let mut buf = BorrowedBuf::from(&mut *self.buf);\n             // SAFETY: `self.filled` bytes will always have been initialized.\n             unsafe {\n                 buf.set_init(self.filled);"}, {"sha": "38b98afffa16887c40adc1d3d279ab767aec8a9c", "filename": "library/std/src/io/copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -106,7 +106,7 @@ impl<I: Write> BufferedCopySpec for BufWriter<I> {\n \n             if read_buf.capacity() >= DEFAULT_BUF_SIZE {\n                 let mut cursor = read_buf.unfilled();\n-                match reader.read_buf(cursor.clone()) {\n+                match reader.read_buf(cursor.reborrow()) {\n                     Ok(()) => {\n                         let bytes_read = cursor.written();\n "}, {"sha": "d98ab021cadb156b58d35276b475ed9109fb6d71", "filename": "library/std/src/io/cursor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -323,10 +323,10 @@ where\n         Ok(n)\n     }\n \n-    fn read_buf(&mut self, mut cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, mut cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         let prev_written = cursor.written();\n \n-        Read::read_buf(&mut self.fill_buf()?, cursor.clone())?;\n+        Read::read_buf(&mut self.fill_buf()?, cursor.reborrow())?;\n \n         self.pos += (cursor.written() - prev_written) as u64;\n "}, {"sha": "e5048dcc8acd91ec86e424bdcef3bedec0ad6de7", "filename": "library/std/src/io/impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -21,7 +21,7 @@ impl<R: Read + ?Sized> Read for &mut R {\n     }\n \n     #[inline]\n-    fn read_buf(&mut self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         (**self).read_buf(cursor)\n     }\n \n@@ -125,7 +125,7 @@ impl<R: Read + ?Sized> Read for Box<R> {\n     }\n \n     #[inline]\n-    fn read_buf(&mut self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         (**self).read_buf(cursor)\n     }\n \n@@ -249,7 +249,7 @@ impl Read for &[u8] {\n     }\n \n     #[inline]\n-    fn read_buf(&mut self, mut cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, mut cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         let amt = cmp::min(cursor.capacity(), self.len());\n         let (a, b) = self.split_at(amt);\n \n@@ -427,7 +427,7 @@ impl<A: Allocator> Read for VecDeque<u8, A> {\n     }\n \n     #[inline]\n-    fn read_buf(&mut self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         let (ref mut front, _) = self.as_slices();\n         let n = cmp::min(cursor.capacity(), front.len());\n         Read::read_buf(front, cursor)?;"}, {"sha": "8b8ec32bf5b634a48ee5e60ef82740638e1a304f", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -370,7 +370,7 @@ pub(crate) fn default_read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>\n         }\n \n         let mut cursor = read_buf.unfilled();\n-        match r.read_buf(cursor.clone()) {\n+        match r.read_buf(cursor.reborrow()) {\n             Ok(()) => {}\n             Err(e) if e.kind() == ErrorKind::Interrupted => continue,\n             Err(e) => return Err(e),\n@@ -462,7 +462,7 @@ pub(crate) fn default_read_exact<R: Read + ?Sized>(this: &mut R, mut buf: &mut [\n     }\n }\n \n-pub(crate) fn default_read_buf<F>(read: F, mut cursor: BorrowedCursor<'_, '_>) -> Result<()>\n+pub(crate) fn default_read_buf<F>(read: F, mut cursor: BorrowedCursor<'_>) -> Result<()>\n where\n     F: FnOnce(&mut [u8]) -> Result<usize>,\n {\n@@ -812,7 +812,7 @@ pub trait Read {\n     ///\n     /// The default implementation delegates to `read`.\n     #[unstable(feature = \"read_buf\", issue = \"78485\")]\n-    fn read_buf(&mut self, buf: BorrowedCursor<'_, '_>) -> Result<()> {\n+    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> Result<()> {\n         default_read_buf(|b| self.read(b), buf)\n     }\n \n@@ -821,10 +821,10 @@ pub trait Read {\n     /// This is equivalent to the [`read_exact`](Read::read_exact) method, except that it is passed a [`BorrowedCursor`] rather than `[u8]` to\n     /// allow use with uninitialized buffers.\n     #[unstable(feature = \"read_buf\", issue = \"78485\")]\n-    fn read_buf_exact(&mut self, mut cursor: BorrowedCursor<'_, '_>) -> Result<()> {\n+    fn read_buf_exact(&mut self, mut cursor: BorrowedCursor<'_>) -> Result<()> {\n         while cursor.capacity() > 0 {\n             let prev_written = cursor.written();\n-            match self.read_buf(cursor.clone()) {\n+            match self.read_buf(cursor.reborrow()) {\n                 Ok(()) => {}\n                 Err(e) if e.kind() == ErrorKind::Interrupted => continue,\n                 Err(e) => return Err(e),\n@@ -2586,7 +2586,7 @@ impl<T: Read> Read for Take<T> {\n         Ok(n)\n     }\n \n-    fn read_buf(&mut self, mut buf: BorrowedCursor<'_, '_>) -> Result<()> {\n+    fn read_buf(&mut self, mut buf: BorrowedCursor<'_>) -> Result<()> {\n         // Don't call into inner reader at all at EOF because it may still block\n         if self.limit == 0 {\n             return Ok(());\n@@ -2609,7 +2609,7 @@ impl<T: Read> Read for Take<T> {\n             }\n \n             let mut cursor = sliced_buf.unfilled();\n-            self.inner.read_buf(cursor.clone())?;\n+            self.inner.read_buf(cursor.reborrow())?;\n \n             let new_init = cursor.init_ref().len();\n             let filled = sliced_buf.len();\n@@ -2626,7 +2626,7 @@ impl<T: Read> Read for Take<T> {\n             self.limit -= filled as u64;\n         } else {\n             let written = buf.written();\n-            self.inner.read_buf(buf.clone())?;\n+            self.inner.read_buf(buf.reborrow())?;\n             self.limit -= (buf.written() - written) as u64;\n         }\n "}, {"sha": "b1a84095f13fa7e9b1823935998794fa3713f481", "filename": "library/std/src/io/readbuf.rs", "status": "modified", "additions": 42, "deletions": 23, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -6,7 +6,7 @@ mod tests;\n use crate::cmp;\n use crate::fmt::{self, Debug, Formatter};\n use crate::io::{Result, Write};\n-use crate::mem::MaybeUninit;\n+use crate::mem::{self, MaybeUninit};\n \n /// A borrowed byte buffer which is incrementally filled and initialized.\n ///\n@@ -23,9 +23,9 @@ use crate::mem::MaybeUninit;\n /// ```\n ///\n /// A `BorrowedBuf` is created around some existing data (or capacity for data) via a unique reference\n-/// (`&mut`). The `BorrowedBuf` can be configured (e.g., using `clear` or `set_init`), but otherwise\n-/// is read-only. To write into the buffer, use `unfilled` to create a `BorrowedCursor`. The cursor\n-/// has write-only access to the unfilled portion of the buffer (you can think of it like a\n+/// (`&mut`). The `BorrowedBuf` can be configured (e.g., using `clear` or `set_init`), but cannot be\n+/// directly written. To write into the buffer, use `unfilled` to create a `BorrowedCursor`. The cursor\n+/// has write-only access to the unfilled portion of the buffer (you can think of it as a\n /// write-only iterator).\n ///\n /// The lifetime `'data` is a bound on the lifetime of the underlying data.\n@@ -55,7 +55,7 @@ impl<'data> From<&'data mut [u8]> for BorrowedBuf<'data> {\n         let len = slice.len();\n \n         BorrowedBuf {\n-            //SAFETY: initialized data never becoming uninitialized is an invariant of BorrowedBuf\n+            // SAFETY: initialized data never becoming uninitialized is an invariant of BorrowedBuf\n             buf: unsafe { (slice as *mut [u8]).as_uninit_slice_mut().unwrap() },\n             filled: 0,\n             init: len,\n@@ -95,14 +95,21 @@ impl<'data> BorrowedBuf<'data> {\n     /// Returns a shared reference to the filled portion of the buffer.\n     #[inline]\n     pub fn filled(&self) -> &[u8] {\n-        //SAFETY: We only slice the filled part of the buffer, which is always valid\n+        // SAFETY: We only slice the filled part of the buffer, which is always valid\n         unsafe { MaybeUninit::slice_assume_init_ref(&self.buf[0..self.filled]) }\n     }\n \n     /// Returns a cursor over the unfilled part of the buffer.\n     #[inline]\n-    pub fn unfilled<'this>(&'this mut self) -> BorrowedCursor<'this, 'data> {\n-        BorrowedCursor { start: self.filled, buf: self }\n+    pub fn unfilled<'this>(&'this mut self) -> BorrowedCursor<'this> {\n+        BorrowedCursor {\n+            start: self.filled,\n+            // SAFETY: we never assign into `BorrowedCursor::buf`, so treating its\n+            // lifetime covariantly is safe.\n+            buf: unsafe {\n+                mem::transmute::<&'this mut BorrowedBuf<'data>, &'this mut BorrowedBuf<'this>>(self)\n+            },\n+        }\n     }\n \n     /// Clears the buffer, resetting the filled region to empty.\n@@ -141,25 +148,37 @@ impl<'data> BorrowedBuf<'data> {\n /// `BorrowedBuf` and can no longer be accessed or re-written by the cursor. I.e., the cursor tracks\n /// the unfilled part of the underlying `BorrowedBuf`.\n ///\n-/// The `'buf` lifetime is a bound on the lifetime of the underlying buffer. `'data` is a bound on\n-/// that buffer's underlying data.\n+/// The lifetime `'a` is a bound on the lifetime of the underlying buffer (which means it is a bound\n+/// on the data in that buffer by transitivity).\n #[derive(Debug)]\n-pub struct BorrowedCursor<'buf, 'data> {\n+pub struct BorrowedCursor<'a> {\n     /// The underlying buffer.\n-    buf: &'buf mut BorrowedBuf<'data>,\n+    // Safety invariant: we treat the type of buf as covariant in the lifetime of `BorrowedBuf` when\n+    // we create a `BorrowedCursor`. This is only safe if we never replace `buf` by assigning into\n+    // it, so don't do that!\n+    buf: &'a mut BorrowedBuf<'a>,\n     /// The length of the filled portion of the underlying buffer at the time of the cursor's\n     /// creation.\n     start: usize,\n }\n \n-impl<'buf, 'data> BorrowedCursor<'buf, 'data> {\n-    /// Clone this cursor.\n+impl<'a> BorrowedCursor<'a> {\n+    /// Reborrow this cursor by cloning it with a smaller lifetime.\n     ///\n-    /// Since a cursor maintains unique access to its underlying buffer, the cloned cursor is not\n-    /// accessible while the clone is alive.\n+    /// Since a cursor maintains unique access to its underlying buffer, the borrowed cursor is\n+    /// not accessible while the new cursor exists.\n     #[inline]\n-    pub fn clone<'this>(&'this mut self) -> BorrowedCursor<'this, 'data> {\n-        BorrowedCursor { buf: self.buf, start: self.start }\n+    pub fn reborrow<'this>(&'this mut self) -> BorrowedCursor<'this> {\n+        BorrowedCursor {\n+            // SAFETY: we never assign into `BorrowedCursor::buf`, so treating its\n+            // lifetime covariantly is safe.\n+            buf: unsafe {\n+                mem::transmute::<&'this mut BorrowedBuf<'a>, &'this mut BorrowedBuf<'this>>(\n+                    self.buf,\n+                )\n+            },\n+            start: self.start,\n+        }\n     }\n \n     /// Returns the available space in the cursor.\n@@ -170,8 +189,8 @@ impl<'buf, 'data> BorrowedCursor<'buf, 'data> {\n \n     /// Returns the number of bytes written to this cursor since it was created from a `BorrowedBuf`.\n     ///\n-    /// Note that if this cursor is a clone of another, then the count returned is the count written\n-    /// via either cursor, not the count since the cursor was cloned.\n+    /// Note that if this cursor is a reborrowed clone of another, then the count returned is the\n+    /// count written via either cursor, not the count since the cursor was reborrowed.\n     #[inline]\n     pub fn written(&self) -> usize {\n         self.buf.filled - self.start\n@@ -180,14 +199,14 @@ impl<'buf, 'data> BorrowedCursor<'buf, 'data> {\n     /// Returns a shared reference to the initialized portion of the cursor.\n     #[inline]\n     pub fn init_ref(&self) -> &[u8] {\n-        //SAFETY: We only slice the initialized part of the buffer, which is always valid\n+        // SAFETY: We only slice the initialized part of the buffer, which is always valid\n         unsafe { MaybeUninit::slice_assume_init_ref(&self.buf.buf[self.buf.filled..self.buf.init]) }\n     }\n \n     /// Returns a mutable reference to the initialized portion of the cursor.\n     #[inline]\n     pub fn init_mut(&mut self) -> &mut [u8] {\n-        //SAFETY: We only slice the initialized part of the buffer, which is always valid\n+        // SAFETY: We only slice the initialized part of the buffer, which is always valid\n         unsafe {\n             MaybeUninit::slice_assume_init_mut(&mut self.buf.buf[self.buf.filled..self.buf.init])\n         }\n@@ -275,7 +294,7 @@ impl<'buf, 'data> BorrowedCursor<'buf, 'data> {\n     }\n }\n \n-impl<'buf, 'data> Write for BorrowedCursor<'buf, 'data> {\n+impl<'a> Write for BorrowedCursor<'a> {\n     fn write(&mut self, buf: &[u8]) -> Result<usize> {\n         self.append(buf);\n         Ok(buf.len())"}, {"sha": "cc1b423f2dd0d32fecbf4d7d150af926d6dba2d0", "filename": "library/std/src/io/readbuf/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Freadbuf%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Freadbuf%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Freadbuf%2Ftests.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -117,14 +117,14 @@ fn append() {\n }\n \n #[test]\n-fn clone_written() {\n+fn reborrow_written() {\n     let buf: &mut [_] = &mut [MaybeUninit::new(0); 32];\n     let mut buf: BorrowedBuf<'_> = buf.into();\n \n     let mut cursor = buf.unfilled();\n     cursor.append(&[1; 16]);\n \n-    let mut cursor2 = cursor.clone();\n+    let mut cursor2 = cursor.reborrow();\n     cursor2.append(&[2; 16]);\n \n     assert_eq!(cursor2.written(), 32);"}, {"sha": "f076ee0923c80ff0d675e0a5df9e3d5573940e58", "filename": "library/std/src/io/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -47,7 +47,7 @@ impl Read for Empty {\n     }\n \n     #[inline]\n-    fn read_buf(&mut self, _cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, _cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         Ok(())\n     }\n }\n@@ -130,7 +130,7 @@ impl Read for Repeat {\n         Ok(buf.len())\n     }\n \n-    fn read_buf(&mut self, mut buf: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, mut buf: BorrowedCursor<'_>) -> io::Result<()> {\n         // SAFETY: No uninit bytes are being written\n         for slot in unsafe { buf.as_mut() } {\n             slot.write(self.byte);"}, {"sha": "1c5efa94bd36ac50fed582ff2fee5da2a7cd23c0", "filename": "library/std/src/sys/hermit/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -312,7 +312,7 @@ impl File {\n         false\n     }\n \n-    pub fn read_buf(&self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    pub fn read_buf(&self, cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         crate::io::default_read_buf(|buf| self.read(buf), cursor)\n     }\n "}, {"sha": "8e23a7c7d884a127c45263b5eb1a0cb360dbec11", "filename": "library/std/src/sys/solid/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -358,7 +358,7 @@ impl File {\n         }\n     }\n \n-    pub fn read_buf(&self, mut cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    pub fn read_buf(&self, mut cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         unsafe {\n             let len = cursor.capacity();\n             let mut out_num_bytes = MaybeUninit::uninit();"}, {"sha": "dbaa3c33e2e577f13afb6c98181648bef6e7cf54", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -131,7 +131,7 @@ impl FileDesc {\n         }\n     }\n \n-    pub fn read_buf(&self, mut cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    pub fn read_buf(&self, mut cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         let ret = cvt(unsafe {\n             libc::read(\n                 self.as_raw_fd(),"}, {"sha": "b8fc2e8da2b75298af0ec8607e4a71cdcedac590", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -1031,7 +1031,7 @@ impl File {\n         self.0.read_at(buf, offset)\n     }\n \n-    pub fn read_buf(&self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    pub fn read_buf(&self, cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         self.0.read_buf(cursor)\n     }\n "}, {"sha": "6ac1b5d2bcfcaf6e6db9e7e678db2e476deb7a0c", "filename": "library/std/src/sys/unsupported/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -214,7 +214,7 @@ impl File {\n         self.0\n     }\n \n-    pub fn read_buf(&self, _cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    pub fn read_buf(&self, _cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         self.0\n     }\n "}, {"sha": "510cf36b1bf48efca38f05d122e59ecf2bc8d456", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -439,7 +439,7 @@ impl File {\n         true\n     }\n \n-    pub fn read_buf(&self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    pub fn read_buf(&self, cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         crate::io::default_read_buf(|buf| self.read(buf), cursor)\n     }\n "}, {"sha": "9ac7cfebbebe0c147fa9c47f4d03c49ef8e26090", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -415,7 +415,7 @@ impl File {\n         self.handle.read_at(buf, offset)\n     }\n \n-    pub fn read_buf(&self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    pub fn read_buf(&self, cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         self.handle.read_buf(cursor)\n     }\n "}, {"sha": "ae33d48c612eeb9460144cccd6f13b5fb56035c9", "filename": "library/std/src/sys/windows/handle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac70aea98509c33ec75208f7b42c8d905c74ebaf/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs?ref=ac70aea98509c33ec75208f7b42c8d905c74ebaf", "patch": "@@ -112,7 +112,7 @@ impl Handle {\n         }\n     }\n \n-    pub fn read_buf(&self, mut cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+    pub fn read_buf(&self, mut cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         let res =\n             unsafe { self.synchronous_read(cursor.as_mut().as_mut_ptr(), cursor.capacity(), None) };\n "}]}