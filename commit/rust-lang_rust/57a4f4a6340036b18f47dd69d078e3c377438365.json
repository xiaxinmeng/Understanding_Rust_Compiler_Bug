{"sha": "57a4f4a6340036b18f47dd69d078e3c377438365", "node_id": "C_kwDOAAsO6NoAKDU3YTRmNGE2MzQwMDM2YjE4ZjQ3ZGQ2OWQwNzhlM2MzNzc0MzgzNjU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-03T13:44:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-03T13:44:15Z"}, "message": "Rollup merge of #90102 - nbdd0121:box3, r=jonas-schievink\n\nRemove `NullOp::Box`\n\nFollow up of #89030 and MCP rust-lang/compiler-team#460.\n\n~1 month later nothing seems to be broken, apart from a small regression that #89332 (1aac85bb716c09304b313d69d30d74fe7e8e1a8e) shows could be regained by remvoing the diverging path, so it shall be safe to continue and remove `NullOp::Box` completely.\n\nr? `@jonas-schievink`\n`@rustbot` label T-compiler", "tree": {"sha": "4268a5ff64799c430d7287dca18e04f950e7abc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4268a5ff64799c430d7287dca18e04f950e7abc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57a4f4a6340036b18f47dd69d078e3c377438365", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0v2wCRBK7hj4Ov3rIwAA1PgIAEYxvhxQN0O3A+IvAKcDx04+\n6Pa+cpVq8ZtLizB3MEAk/hFieGPo+e9+P6dnFlMISAaETU6nGSV3TSkURhtVqc52\n9Q3TWVVMBSgXNgf1VFP5Oacdnlzzu054XYMZ0RAFgE2Mqcx6YjtsQJAFXF9c8mSG\nxP8qm2BURcpAuI82FE9A85lEOPW8Z97L8rXJGhkkSWSxEkiujfcjsjXsW5kfZjh7\nsJG0HRKSzzsWHaSgw9RfnLYCw5Ca3YLHpCn+0iMf+yReEbZme20KGwiqTrmkm9u9\nkgRb6NZfIb0vKfPSUDVwc2y5GnmToWtlKrbQ2wbpsMnKk/kaCNjexMIXpg2vn08=\n=zUFG\n-----END PGP SIGNATURE-----\n", "payload": "tree 4268a5ff64799c430d7287dca18e04f950e7abc6\nparent d367c349ef2dd04ebc876a0cd0b0efa46c18ff12\nparent 037e189783b6c689640b1c177cd32ccb385dc237\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641217455 +0100\ncommitter GitHub <noreply@github.com> 1641217455 +0100\n\nRollup merge of #90102 - nbdd0121:box3, r=jonas-schievink\n\nRemove `NullOp::Box`\n\nFollow up of #89030 and MCP rust-lang/compiler-team#460.\n\n~1 month later nothing seems to be broken, apart from a small regression that #89332 (1aac85bb716c09304b313d69d30d74fe7e8e1a8e) shows could be regained by remvoing the diverging path, so it shall be safe to continue and remove `NullOp::Box` completely.\n\nr? `@jonas-schievink`\n`@rustbot` label T-compiler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57a4f4a6340036b18f47dd69d078e3c377438365", "html_url": "https://github.com/rust-lang/rust/commit/57a4f4a6340036b18f47dd69d078e3c377438365", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57a4f4a6340036b18f47dd69d078e3c377438365/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d367c349ef2dd04ebc876a0cd0b0efa46c18ff12", "url": "https://api.github.com/repos/rust-lang/rust/commits/d367c349ef2dd04ebc876a0cd0b0efa46c18ff12", "html_url": "https://github.com/rust-lang/rust/commit/d367c349ef2dd04ebc876a0cd0b0efa46c18ff12"}, {"sha": "037e189783b6c689640b1c177cd32ccb385dc237", "url": "https://api.github.com/repos/rust-lang/rust/commits/037e189783b6c689640b1c177cd32ccb385dc237", "html_url": "https://github.com/rust-lang/rust/commit/037e189783b6c689640b1c177cd32ccb385dc237"}], "stats": {"total": 116, "additions": 3, "deletions": 113}, "files": [{"sha": "fe34d6e7ca9dde71dcc2c6c7d50f6a85d4dd614c", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=57a4f4a6340036b18f47dd69d078e3c377438365", "patch": "@@ -1394,10 +1394,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             Rvalue::NullaryOp(_op, _ty) => {\n                 // nullary ops take no dynamic input; no borrowck effect.\n-                //\n-                // FIXME: is above actually true? Do we want to track\n-                // the fact that uninitialized data can be created via\n-                // `NullOp::Box`?\n             }\n \n             Rvalue::Aggregate(ref aggregate_kind, ref operands) => {"}, {"sha": "b16f5af66f249b5b80588ad452eca32ddd282cbc", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=57a4f4a6340036b18f47dd69d078e3c377438365", "patch": "@@ -715,30 +715,6 @@ fn codegen_stmt<'tcx>(\n                     let operand = operand.load_scalar(fx);\n                     lval.write_cvalue(fx, CValue::by_val(operand, box_layout));\n                 }\n-                Rvalue::NullaryOp(NullOp::Box, content_ty) => {\n-                    let usize_type = fx.clif_type(fx.tcx.types.usize).unwrap();\n-                    let content_ty = fx.monomorphize(content_ty);\n-                    let layout = fx.layout_of(content_ty);\n-                    let llsize = fx.bcx.ins().iconst(usize_type, layout.size.bytes() as i64);\n-                    let llalign = fx.bcx.ins().iconst(usize_type, layout.align.abi.bytes() as i64);\n-                    let box_layout = fx.layout_of(fx.tcx.mk_box(content_ty));\n-\n-                    // Allocate space:\n-                    let def_id =\n-                        match fx.tcx.lang_items().require(rustc_hir::LangItem::ExchangeMalloc) {\n-                            Ok(id) => id,\n-                            Err(s) => {\n-                                fx.tcx\n-                                    .sess\n-                                    .fatal(&format!(\"allocation of `{}` {}\", box_layout.ty, s));\n-                            }\n-                        };\n-                    let instance = ty::Instance::mono(fx.tcx, def_id).polymorphize(fx.tcx);\n-                    let func_ref = fx.get_function_ref(instance);\n-                    let call = fx.bcx.ins().call(func_ref, &[llsize, llalign]);\n-                    let ptr = fx.bcx.inst_results(call)[0];\n-                    lval.write_cvalue(fx, CValue::by_val(ptr, box_layout));\n-                }\n                 Rvalue::NullaryOp(null_op, ty) => {\n                     assert!(\n                         lval.layout()\n@@ -749,7 +725,6 @@ fn codegen_stmt<'tcx>(\n                     let val = match null_op {\n                         NullOp::SizeOf => layout.size.bytes(),\n                         NullOp::AlignOf => layout.align.abi.bytes(),\n-                        NullOp::Box => unreachable!(),\n                     };\n                     let val = CValue::const_val(fx, fx.layout_of(fx.tcx.types.usize), val.into());\n                     lval.write_cvalue(fx, val);"}, {"sha": "679c45767018d2810025de4ff761e964b98c3225", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=57a4f4a6340036b18f47dd69d078e3c377438365", "patch": "@@ -8,7 +8,6 @@ use crate::traits::*;\n use crate::MemFlags;\n \n use rustc_apfloat::{ieee, Float, Round, Status};\n-use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir;\n use rustc_middle::ty::cast::{CastTy, IntTy};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n@@ -486,39 +485,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 )\n             }\n \n-            mir::Rvalue::NullaryOp(mir::NullOp::Box, content_ty) => {\n-                let content_ty = self.monomorphize(content_ty);\n-                let content_layout = bx.cx().layout_of(content_ty);\n-                let llsize = bx.cx().const_usize(content_layout.size.bytes());\n-                let llalign = bx.cx().const_usize(content_layout.align.abi.bytes());\n-                let box_layout = bx.cx().layout_of(bx.tcx().mk_box(content_ty));\n-                let llty_ptr = bx.cx().backend_type(box_layout);\n-\n-                // Allocate space:\n-                let def_id = match bx.tcx().lang_items().require(LangItem::ExchangeMalloc) {\n-                    Ok(id) => id,\n-                    Err(s) => {\n-                        bx.cx().sess().fatal(&format!(\"allocation of `{}` {}\", box_layout.ty, s));\n-                    }\n-                };\n-                let instance = ty::Instance::mono(bx.tcx(), def_id);\n-                let r = bx.cx().get_fn_addr(instance);\n-                let ty = bx.type_func(&[bx.type_isize(), bx.type_isize()], bx.type_i8p());\n-                let call = bx.call(ty, r, &[llsize, llalign], None);\n-                let val = bx.pointercast(call, llty_ptr);\n-\n-                let operand = OperandRef { val: OperandValue::Immediate(val), layout: box_layout };\n-                (bx, operand)\n-            }\n-\n             mir::Rvalue::NullaryOp(null_op, ty) => {\n                 let ty = self.monomorphize(ty);\n                 assert!(bx.cx().type_is_sized(ty));\n                 let layout = bx.cx().layout_of(ty);\n                 let val = match null_op {\n                     mir::NullOp::SizeOf => layout.size.bytes(),\n                     mir::NullOp::AlignOf => layout.align.abi.bytes(),\n-                    mir::NullOp::Box => unreachable!(),\n                 };\n                 let val = bx.cx().const_usize(val);\n                 let tcx = self.cx.tcx();"}, {"sha": "30e9cbe4403549223410a44981096cc3d875532e", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=57a4f4a6340036b18f47dd69d078e3c377438365", "patch": "@@ -398,13 +398,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         Err(ConstEvalErrKind::NeedsRfc(\"pointer arithmetic or comparison\".to_string()).into())\n     }\n \n-    fn box_alloc(\n-        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        _dest: &PlaceTy<'tcx>,\n-    ) -> InterpResult<'tcx> {\n-        Err(ConstEvalErrKind::NeedsRfc(\"heap allocations via `box` keyword\".to_string()).into())\n-    }\n-\n     fn before_terminator(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         // The step limit has already been hit in a previous call to `before_terminator`.\n         if ecx.machine.steps_remaining == 0 {"}, {"sha": "0fc3827d16c7e848e303db1bfb094bb60cd4cf0f", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=57a4f4a6340036b18f47dd69d078e3c377438365", "patch": "@@ -156,7 +156,7 @@ pub enum StackPopCleanup {\n     /// `ret` stores the block we jump to on a normal return, while `unwind`\n     /// stores the block used for cleanup during unwinding.\n     Goto { ret: Option<mir::BasicBlock>, unwind: StackPopUnwind },\n-    /// Just do nothing: Used by Main and for the `box_alloc` hook in miri.\n+    /// Just do nothing: Used by Main and for TLS hooks in miri.\n     /// `cleanup` says whether locals are deallocated. Static computation\n     /// wants them leaked to intern what they need (and just throw away\n     /// the entire `ecx` when it is done)."}, {"sha": "23ec3875cbc1a51a38d4cbec791f9d0044389166", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=57a4f4a6340036b18f47dd69d078e3c377438365", "patch": "@@ -212,12 +212,6 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         right: &ImmTy<'tcx, Self::PointerTag>,\n     ) -> InterpResult<'tcx, (Scalar<Self::PointerTag>, bool, Ty<'tcx>)>;\n \n-    /// Heap allocations via the `box` keyword.\n-    fn box_alloc(\n-        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        dest: &PlaceTy<'tcx, Self::PointerTag>,\n-    ) -> InterpResult<'tcx>;\n-\n     /// Called to read the specified `local` from the `frame`.\n     /// Since reading a ZST is not actually accessing memory or locals, this is never invoked\n     /// for ZST reads."}, {"sha": "3daa1d3c2b3e87ce3985f2f2ee234f5874feee5b", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=57a4f4a6340036b18f47dd69d078e3c377438365", "patch": "@@ -271,10 +271,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_immediate(place.to_ref(self), &dest)?;\n             }\n \n-            NullaryOp(mir::NullOp::Box, _) => {\n-                M::box_alloc(self, &dest)?;\n-            }\n-\n             NullaryOp(null_op, ty) => {\n                 let ty = self.subst_from_current_frame_and_normalize_erasing_regions(ty)?;\n                 let layout = self.layout_of(ty)?;\n@@ -289,7 +285,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let val = match null_op {\n                     mir::NullOp::SizeOf => layout.size.bytes(),\n                     mir::NullOp::AlignOf => layout.align.abi.bytes(),\n-                    mir::NullOp::Box => unreachable!(),\n                 };\n                 self.write_scalar(Scalar::from_machine_usize(val, self), &dest)?;\n             }"}, {"sha": "dd749c0393473b06b42e3f49a4f541b73b9fa61c", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=57a4f4a6340036b18f47dd69d078e3c377438365", "patch": "@@ -632,7 +632,6 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n             }\n \n             Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => {}\n-            Rvalue::NullaryOp(NullOp::Box, _) => self.check_op(ops::HeapAllocation),\n             Rvalue::ShallowInitBox(_, _) => {}\n \n             Rvalue::UnaryOp(_, ref operand) => {"}, {"sha": "55fba5d7ddf69b6f4afacb52086d3ade40081b96", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=57a4f4a6340036b18f47dd69d078e3c377438365", "patch": "@@ -508,7 +508,6 @@ impl<'tcx> Validator<'_, 'tcx> {\n             }\n \n             Rvalue::NullaryOp(op, _) => match op {\n-                NullOp::Box => return Err(Unpromotable),\n                 NullOp::SizeOf => {}\n                 NullOp::AlignOf => {}\n             },"}, {"sha": "52ef380001cb09e388ba7d8f84e0321c8b05745c", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=57a4f4a6340036b18f47dd69d078e3c377438365", "patch": "@@ -2336,8 +2336,6 @@ pub enum NullOp {\n     SizeOf,\n     /// Returns the minimum alignment of a type\n     AlignOf,\n-    /// Creates a new uninitialized box for a value of that type\n-    Box,\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]"}, {"sha": "dc53dc8de9de95129a800945dff0240da0a42bf2", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=57a4f4a6340036b18f47dd69d078e3c377438365", "patch": "@@ -195,7 +195,6 @@ impl<'tcx> Rvalue<'tcx> {\n             }\n             Rvalue::UnaryOp(UnOp::Not | UnOp::Neg, ref operand) => operand.ty(local_decls, tcx),\n             Rvalue::Discriminant(ref place) => place.ty(local_decls, tcx).ty.discriminant_ty(tcx),\n-            Rvalue::NullaryOp(NullOp::Box, t) => tcx.mk_box(t),\n             Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => tcx.types.usize,\n             Rvalue::Aggregate(ref ak, ref ops) => match **ak {\n                 AggregateKind::Array(ty) => tcx.mk_array(ty, ops.len() as u64),\n@@ -215,9 +214,7 @@ impl<'tcx> Rvalue<'tcx> {\n     /// whether its only shallowly initialized (`Rvalue::Box`).\n     pub fn initialization_state(&self) -> RvalueInitializationState {\n         match *self {\n-            Rvalue::NullaryOp(NullOp::Box, _) | Rvalue::ShallowInitBox(_, _) => {\n-                RvalueInitializationState::Shallow\n-            }\n+            Rvalue::ShallowInitBox(_, _) => RvalueInitializationState::Shallow,\n             _ => RvalueInitializationState::Deep,\n         }\n     }"}, {"sha": "2e00b4f9a5e7cbb4ba1ad3a7e3d122963d9c99c1", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=57a4f4a6340036b18f47dd69d078e3c377438365", "patch": "@@ -343,19 +343,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             | Rvalue::AddressOf(..)\n             | Rvalue::Discriminant(..)\n             | Rvalue::Len(..)\n-            | Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _)\n-            | Rvalue::NullaryOp(NullOp::Box, _) => {\n-                // This returns an rvalue with uninitialized contents. We can't\n-                // move out of it here because it is an rvalue - assignments always\n-                // completely initialize their place.\n-                //\n-                // However, this does not matter - MIR building is careful to\n-                // only emit a shallow free for the partially-initialized\n-                // temporary.\n-                //\n-                // In any case, if we want to fix this, we have to register a\n-                // special move and change the `statement_effect` functions.\n-            }\n+            | Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => {}\n         }\n     }\n "}, {"sha": "ecc8e7a6f1a390d8c03bbd57d6b0c4785cee7f5f", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=57a4f4a6340036b18f47dd69d078e3c377438365", "patch": "@@ -239,13 +239,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         throw_machine_stop_str!(\"pointer arithmetic or comparisons aren't supported in ConstProp\")\n     }\n \n-    fn box_alloc(\n-        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        _dest: &PlaceTy<'tcx>,\n-    ) -> InterpResult<'tcx> {\n-        throw_machine_stop_str!(\"can't const prop heap allocations\")\n-    }\n-\n     fn access_local(\n         _ecx: &InterpCx<'mir, 'tcx, Self>,\n         frame: &Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>,"}, {"sha": "b70c24b76d524cbfe78920d9f17e6368a2d8bed8", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a4f4a6340036b18f47dd69d078e3c377438365/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=57a4f4a6340036b18f47dd69d078e3c377438365", "patch": "@@ -688,15 +688,6 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     _ => bug!(),\n                 }\n             }\n-            mir::Rvalue::NullaryOp(mir::NullOp::Box, _) => {\n-                let tcx = self.tcx;\n-                let exchange_malloc_fn_def_id =\n-                    tcx.require_lang_item(LangItem::ExchangeMalloc, None);\n-                let instance = Instance::mono(tcx, exchange_malloc_fn_def_id);\n-                if should_codegen_locally(tcx, &instance) {\n-                    self.output.push(create_fn_mono_item(self.tcx, instance, span));\n-                }\n-            }\n             mir::Rvalue::ThreadLocalRef(def_id) => {\n                 assert!(self.tcx.is_thread_local_static(def_id));\n                 let instance = Instance::mono(self.tcx, def_id);"}, {"sha": "836558b07cb02b110bd500d980b43b98dc57fa4c", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57a4f4a6340036b18f47dd69d078e3c377438365/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a4f4a6340036b18f47dd69d078e3c377438365/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=57a4f4a6340036b18f47dd69d078e3c377438365", "patch": "@@ -193,7 +193,6 @@ fn check_rvalue(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, rvalue: &Rv\n             }\n         },\n         Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) | Rvalue::ShallowInitBox(_, _) => Ok(()),\n-        Rvalue::NullaryOp(NullOp::Box, _) => Err((span, \"heap allocations are not allowed in const fn\".into())),\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);\n             if ty.is_integral() || ty.is_bool() {"}]}