{"sha": "6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMzFlZDZjOGQ5N2NkZDFkNTBkYmJmNGM5YjJkN2U1MGY1YmUwYjE=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-31T21:39:09Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-03T23:02:49Z"}, "message": "Use DefIdMap and similar aliases", "tree": {"sha": "0f0f43c2328bc08b6a4234c39326c23e28e01c56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f0f43c2328bc08b6a4234c39326c23e28e01c56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1", "html_url": "https://github.com/rust-lang/rust/commit/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86fb0e82660aafb033414fde46a768fd92f29556", "url": "https://api.github.com/repos/rust-lang/rust/commits/86fb0e82660aafb033414fde46a768fd92f29556", "html_url": "https://github.com/rust-lang/rust/commit/86fb0e82660aafb033414fde46a768fd92f29556"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "9e943c647fefedf514169a48afda5ff7837d6e2c", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1", "patch": "@@ -1,7 +1,7 @@\n use rustc_ast::ast::Attribute;\n-use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n-use rustc_hir::{self as hir, def::Res, def_id::DefId, intravisit, QPath};\n+use rustc_hir::def_id::DefIdSet;\n+use rustc_hir::{self as hir, def::Res, intravisit, QPath};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::{\n     hir::map::Map,\n@@ -169,11 +169,11 @@ fn returns_unit(decl: &hir::FnDecl<'_>) -> bool {\n }\n \n fn has_mutable_arg(cx: &LateContext<'_>, body: &hir::Body<'_>) -> bool {\n-    let mut tys = FxHashSet::default();\n+    let mut tys = DefIdSet::default();\n     body.params.iter().any(|param| is_mutable_pat(cx, &param.pat, &mut tys))\n }\n \n-fn is_mutable_pat(cx: &LateContext<'_>, pat: &hir::Pat<'_>, tys: &mut FxHashSet<DefId>) -> bool {\n+fn is_mutable_pat(cx: &LateContext<'_>, pat: &hir::Pat<'_>, tys: &mut DefIdSet) -> bool {\n     if let hir::PatKind::Wild = pat.kind {\n         return false; // ignore `_` patterns\n     }\n@@ -186,7 +186,7 @@ fn is_mutable_pat(cx: &LateContext<'_>, pat: &hir::Pat<'_>, tys: &mut FxHashSet<\n \n static KNOWN_WRAPPER_TYS: &[&[&str]] = &[&[\"alloc\", \"rc\", \"Rc\"], &[\"std\", \"sync\", \"Arc\"]];\n \n-fn is_mutable_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, span: Span, tys: &mut FxHashSet<DefId>) -> bool {\n+fn is_mutable_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, span: Span, tys: &mut DefIdSet) -> bool {\n     match *ty.kind() {\n         // primitive types are never mutable\n         ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str => false,\n@@ -222,7 +222,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n         }\n         match expr.kind {\n             Call(_, args) | MethodCall(_, _, args, _) => {\n-                let mut tys = FxHashSet::default();\n+                let mut tys = DefIdSet::default();\n                 for arg in args {\n                     if self.cx.tcx.has_typeck_results(arg.hir_id.owner.to_def_id())\n                         && is_mutable_ty("}, {"sha": "cc69f4aed0ce0b073c3cb3ef039abe44b572bac0", "filename": "clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1", "patch": "@@ -1,5 +1,4 @@\n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir::{self as hir, intravisit};\n+use rustc_hir::{self as hir, intravisit, HirIdSet};\n use rustc_lint::LateContext;\n use rustc_middle::{hir::map::Map, ty};\n \n@@ -44,7 +43,7 @@ fn check_raw_ptr(\n         let raw_ptrs = iter_input_pats(decl, body)\n             .zip(decl.inputs.iter())\n             .filter_map(|(arg, ty)| raw_ptr_arg(arg, ty))\n-            .collect::<FxHashSet<_>>();\n+            .collect::<HirIdSet>();\n \n         if !raw_ptrs.is_empty() {\n             let typeck_results = cx.tcx.typeck_body(body.id());\n@@ -69,7 +68,7 @@ fn raw_ptr_arg(arg: &hir::Param<'_>, ty: &hir::Ty<'_>) -> Option<hir::HirId> {\n \n struct DerefVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n-    ptrs: FxHashSet<hir::HirId>,\n+    ptrs: HirIdSet,\n     typeck_results: &'a ty::TypeckResults<'tcx>,\n }\n "}, {"sha": "c31013e49be59b54e4851ba81e5ae202d7f30ab6", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1", "patch": "@@ -2,7 +2,7 @@\n \n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::in_macro;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::def_id::DefIdMap;\n use rustc_hir::{def_id, Crate, Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -43,7 +43,7 @@ declare_clippy_lint! {\n #[allow(clippy::module_name_repetitions)]\n #[derive(Default)]\n pub struct MultipleInherentImpl {\n-    impls: FxHashMap<def_id::DefId, Span>,\n+    impls: DefIdMap<Span>,\n }\n \n impl_lint_pass!(MultipleInherentImpl => [MULTIPLE_INHERENT_IMPL]);"}, {"sha": "78152ad901991eb196bfb6830a8eb5038e07a660", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1", "patch": "@@ -3,8 +3,8 @@ use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::{get_item_name, get_parent_as_impl, is_allowed};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n-use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n+use rustc_hir::def_id::DefIdSet;\n use rustc_hir::{\n     def_id::DefId, AssocItemKind, BinOpKind, Expr, ExprKind, FnRetTy, ImplItem, ImplItemKind, ImplicitSelfKind, Item,\n     ItemKind, Mutability, Node, TraitItemRef, TyKind,\n@@ -199,7 +199,7 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n     }\n \n     // fill the set with current and super traits\n-    fn fill_trait_set(traitt: DefId, set: &mut FxHashSet<DefId>, cx: &LateContext<'_>) {\n+    fn fill_trait_set(traitt: DefId, set: &mut DefIdSet, cx: &LateContext<'_>) {\n         if set.insert(traitt) {\n             for supertrait in rustc_trait_selection::traits::supertrait_def_ids(cx.tcx, traitt) {\n                 fill_trait_set(supertrait, set, cx);\n@@ -208,7 +208,7 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n     }\n \n     if cx.access_levels.is_exported(visited_trait.hir_id()) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\")) {\n-        let mut current_and_super_traits = FxHashSet::default();\n+        let mut current_and_super_traits = DefIdSet::default();\n         fill_trait_set(visited_trait.def_id.to_def_id(), &mut current_and_super_traits, cx);\n \n         let is_empty_method_found = current_and_super_traits"}, {"sha": "fc287d51249176b33a284eebe88d3fe1126632a9", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1", "patch": "@@ -1,9 +1,9 @@\n use clippy_utils::ty::{has_iter_method, implements_trait};\n use clippy_utils::{get_parent_expr, is_integer_const, path_to_local, path_to_local_id, sugg};\n use if_chain::if_chain;\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n+use rustc_hir::HirIdMap;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, Mutability, Pat, PatKind, Stmt, StmtKind};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n@@ -20,17 +20,17 @@ enum IncrementVisitorVarState {\n \n /// Scan a for loop for variables that are incremented exactly once and not used after that.\n pub(super) struct IncrementVisitor<'a, 'tcx> {\n-    cx: &'a LateContext<'tcx>,                          // context reference\n-    states: FxHashMap<HirId, IncrementVisitorVarState>, // incremented variables\n-    depth: u32,                                         // depth of conditional expressions\n+    cx: &'a LateContext<'tcx>,                  // context reference\n+    states: HirIdMap<IncrementVisitorVarState>, // incremented variables\n+    depth: u32,                                 // depth of conditional expressions\n     done: bool,\n }\n \n impl<'a, 'tcx> IncrementVisitor<'a, 'tcx> {\n     pub(super) fn new(cx: &'a LateContext<'tcx>) -> Self {\n         Self {\n             cx,\n-            states: FxHashMap::default(),\n+            states: HirIdMap::default(),\n             depth: 0,\n             done: false,\n         }"}, {"sha": "de267cc77d2b406f0c369cd8f2e2101a3bb3502a", "filename": "clippy_lints/src/loops/while_immutable_condition.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs?ref=6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1", "patch": "@@ -3,13 +3,13 @@ use crate::consts::constant;\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::usage::mutated_variables;\n use if_chain::if_chain;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::DefIdMap;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use rustc_hir::{def_id, Expr, ExprKind, HirId, QPath};\n+use rustc_hir::HirIdSet;\n+use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n-use std::iter::Iterator;\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, cond: &'tcx Expr<'_>, expr: &'tcx Expr<'_>) {\n     if constant(cx, cx.typeck_results(), cond).is_some() {\n@@ -19,8 +19,8 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, cond: &'tcx Expr<'_>, expr: &'\n \n     let mut var_visitor = VarCollectorVisitor {\n         cx,\n-        ids: FxHashSet::default(),\n-        def_ids: FxHashMap::default(),\n+        ids: HirIdSet::default(),\n+        def_ids: DefIdMap::default(),\n         skip: false,\n     };\n     var_visitor.visit_expr(cond);\n@@ -93,8 +93,8 @@ impl<'tcx> Visitor<'tcx> for HasBreakOrReturnVisitor {\n /// All variables definition IDs are collected\n struct VarCollectorVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n-    ids: FxHashSet<HirId>,\n-    def_ids: FxHashMap<def_id::DefId, bool>,\n+    ids: HirIdSet,\n+    def_ids: DefIdMap<bool>,\n     skip: bool,\n }\n "}, {"sha": "75999468e284dd28a00e7bccec447bb7c817f277", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1", "patch": "@@ -13,13 +13,13 @@ use clippy_utils::{\n use clippy_utils::{paths, search_same, SpanlessEq, SpanlessHash};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::{\n     self as hir, Arm, BindingAnnotation, Block, BorrowKind, Expr, ExprKind, Guard, HirId, Local, MatchSource,\n     Mutability, Node, Pat, PatKind, PathSegment, QPath, RangeEnd, TyKind,\n };\n+use rustc_hir::{HirIdMap, HirIdSet};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Ty, TyS, VariantDef};\n@@ -1978,7 +1978,7 @@ fn lint_match_arms<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n             let min_index = usize::min(lindex, rindex);\n             let max_index = usize::max(lindex, rindex);\n \n-            let mut local_map: FxHashMap<HirId, HirId> = FxHashMap::default();\n+            let mut local_map: HirIdMap<HirId> = HirIdMap::default();\n             let eq_fallback = |a: &Expr<'_>, b: &Expr<'_>| {\n                 if_chain! {\n                     if let Some(a_id) = path_to_local(a);\n@@ -2062,7 +2062,7 @@ fn pat_contains_local(pat: &Pat<'_>, id: HirId) -> bool {\n }\n \n /// Returns true if all the bindings in the `Pat` are in `ids` and vice versa\n-fn bindings_eq(pat: &Pat<'_>, mut ids: FxHashSet<HirId>) -> bool {\n+fn bindings_eq(pat: &Pat<'_>, mut ids: HirIdSet) -> bool {\n     let mut result = true;\n     pat.each_binding_or_first(&mut |_, id, _, _| result &= ids.remove(&id));\n     result && ids.is_empty()"}, {"sha": "7370ba3992242f8ed105fce21c3e38307824befc", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1", "patch": "@@ -5,10 +5,11 @@ use clippy_utils::ty::{implements_trait, is_copy, is_type_diagnostic_item};\n use clippy_utils::{get_trait_def_id, is_self, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{BindingAnnotation, Body, FnDecl, GenericArg, HirId, Impl, ItemKind, Node, PatKind, QPath, TyKind};\n+use rustc_hir::{HirIdMap, HirIdSet};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::FakeReadCause;\n@@ -310,10 +311,10 @@ fn requires_exact_signature(attrs: &[Attribute]) -> bool {\n \n #[derive(Default)]\n struct MovedVariablesCtxt {\n-    moved_vars: FxHashSet<HirId>,\n+    moved_vars: HirIdSet,\n     /// Spans which need to be prefixed with `*` for dereferencing the\n     /// suggested additional reference.\n-    spans_need_deref: FxHashMap<HirId, FxHashSet<Span>>,\n+    spans_need_deref: HirIdMap<FxHashSet<Span>>,\n }\n \n impl MovedVariablesCtxt {"}, {"sha": "0c3b8b89171dc1a4058156edf3814994ab216d7d", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1", "patch": "@@ -2,9 +2,9 @@ use crate::consts::{constant_context, constant_simple};\n use crate::differing_macro_contexts;\n use crate::source::snippet_opt;\n use rustc_ast::ast::InlineAsmTemplatePiece;\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def::Res;\n+use rustc_hir::HirIdMap;\n use rustc_hir::{\n     BinOpKind, Block, BlockCheckMode, BodyId, BorrowKind, CaptureBy, Expr, ExprField, ExprKind, FnRetTy, GenericArg,\n     GenericArgs, Guard, HirId, InlineAsmOperand, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path,\n@@ -61,7 +61,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     fn inter_expr(&mut self) -> HirEqInterExpr<'_, 'a, 'tcx> {\n         HirEqInterExpr {\n             inner: self,\n-            locals: FxHashMap::default(),\n+            locals: HirIdMap::default(),\n         }\n     }\n \n@@ -88,7 +88,7 @@ struct HirEqInterExpr<'a, 'b, 'tcx> {\n     // When binding are declared, the binding ID in the left expression is mapped to the one on the\n     // right. For example, when comparing `{ let x = 1; x + 2 }` and `{ let y = 1; y + 2 }`,\n     // these blocks are considered equal since `x` is mapped to `y`.\n-    locals: FxHashMap<HirId, HirId>,\n+    locals: HirIdMap<HirId>,\n }\n \n impl HirEqInterExpr<'_, '_, '_> {"}, {"sha": "650b70c63af9534de621d959c29cbcc5d4bd35e3", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=6f31ed6c8d97cdd1d50dbbf4c9b2d7e50f5be0b1", "patch": "@@ -1,9 +1,9 @@\n use crate as utils;\n-use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit;\n use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc_hir::HirIdSet;\n use rustc_hir::{Expr, ExprKind, HirId, Path};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n@@ -13,9 +13,9 @@ use rustc_middle::ty;\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n /// Returns a set of mutated local variable IDs, or `None` if mutations could not be determined.\n-pub fn mutated_variables<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) -> Option<FxHashSet<HirId>> {\n+pub fn mutated_variables<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) -> Option<HirIdSet> {\n     let mut delegate = MutVarsDelegate {\n-        used_mutably: FxHashSet::default(),\n+        used_mutably: HirIdSet::default(),\n         skip: false,\n     };\n     cx.tcx.infer_ctxt().enter(|infcx| {\n@@ -44,7 +44,7 @@ pub fn is_potentially_mutated<'tcx>(variable: &'tcx Path<'_>, expr: &'tcx Expr<'\n }\n \n struct MutVarsDelegate {\n-    used_mutably: FxHashSet<HirId>,\n+    used_mutably: HirIdSet,\n     skip: bool,\n }\n "}]}