{"sha": "9a6d496497df35c0dbd8fa40574d47d0463997dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNmQ0OTY0OTdkZjM1YzBkYmQ4ZmE0MDU3NGQ0N2QwNDYzOTk3ZGQ=", "commit": {"author": {"name": "Omer Ben-Amram", "email": "omerbenamram@gmail.com", "date": "2019-12-15T11:18:37Z"}, "committer": {"name": "Omer Ben-Amram", "email": "omerbenamram@gmail.com", "date": "2019-12-15T11:18:37Z"}, "message": "use a module instead of prefixed consts.", "tree": {"sha": "74ed89cf2ef03766a15c0ff6ba521ef1b509666c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74ed89cf2ef03766a15c0ff6ba521ef1b509666c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a6d496497df35c0dbd8fa40574d47d0463997dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6d496497df35c0dbd8fa40574d47d0463997dd", "html_url": "https://github.com/rust-lang/rust/commit/9a6d496497df35c0dbd8fa40574d47d0463997dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a6d496497df35c0dbd8fa40574d47d0463997dd/comments", "author": {"login": "omerbenamram", "id": 2467993, "node_id": "MDQ6VXNlcjI0Njc5OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2467993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omerbenamram", "html_url": "https://github.com/omerbenamram", "followers_url": "https://api.github.com/users/omerbenamram/followers", "following_url": "https://api.github.com/users/omerbenamram/following{/other_user}", "gists_url": "https://api.github.com/users/omerbenamram/gists{/gist_id}", "starred_url": "https://api.github.com/users/omerbenamram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omerbenamram/subscriptions", "organizations_url": "https://api.github.com/users/omerbenamram/orgs", "repos_url": "https://api.github.com/users/omerbenamram/repos", "events_url": "https://api.github.com/users/omerbenamram/events{/privacy}", "received_events_url": "https://api.github.com/users/omerbenamram/received_events", "type": "User", "site_admin": false}, "committer": {"login": "omerbenamram", "id": 2467993, "node_id": "MDQ6VXNlcjI0Njc5OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2467993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omerbenamram", "html_url": "https://github.com/omerbenamram", "followers_url": "https://api.github.com/users/omerbenamram/followers", "following_url": "https://api.github.com/users/omerbenamram/following{/other_user}", "gists_url": "https://api.github.com/users/omerbenamram/gists{/gist_id}", "starred_url": "https://api.github.com/users/omerbenamram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omerbenamram/subscriptions", "organizations_url": "https://api.github.com/users/omerbenamram/orgs", "repos_url": "https://api.github.com/users/omerbenamram/repos", "events_url": "https://api.github.com/users/omerbenamram/events{/privacy}", "received_events_url": "https://api.github.com/users/omerbenamram/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50ecb1e19bc555aa627224d41a5ca243e44296f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/50ecb1e19bc555aa627224d41a5ca243e44296f4", "html_url": "https://github.com/rust-lang/rust/commit/50ecb1e19bc555aa627224d41a5ca243e44296f4"}], "stats": {"total": 130, "additions": 64, "deletions": 66}, "files": [{"sha": "eb3dd177935368ede8d56ea27dc9f7870dab7d5a", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 64, "deletions": 66, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/9a6d496497df35c0dbd8fa40574d47d0463997dd/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6d496497df35c0dbd8fa40574d47d0463997dd/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=9a6d496497df35c0dbd8fa40574d47d0463997dd", "patch": "@@ -16,31 +16,33 @@ use crate::{\n     FileId,\n };\n \n-const HIGHLIGHT_TAG_FIELD: &'static str = \"field\";\n-const HIGHLIGHT_TAG_FUNCTION: &'static str = \"function\";\n-const HIGHLIGHT_TAG_MODULE: &'static str = \"module\";\n-const HIGHLIGHT_TAG_TYPE: &'static str = \"type\";\n-const HIGHLIGHT_TAG_CONSTANT: &'static str = \"constant\";\n-const HIGHLIGHT_TAG_MACRO: &'static str = \"macro\";\n-const HIGHLIGHT_TAG_VARIABLE: &'static str = \"variable\";\n-const HIGHLIGHT_TAG_VARIABLE_MUT: &'static str = \"variable.mut\";\n-const HIGHLIGHT_TAG_TEXT: &'static str = \"text\";\n-\n-const HIGHLIGHT_TAG_TYPE_BUILTIN: &'static str = \"type.builtin\";\n-const HIGHLIGHT_TAG_TYPE_SELF: &'static str = \"type.self\";\n-const HIGHLIGHT_TAG_TYPE_PARAM: &'static str = \"type.param\";\n-const HIGHLIGHT_TAG_TYPE_LIFETIME: &'static str = \"type.lifetime\";\n-\n-const HIGHLIGHT_TAG_LITERAL_BYTE: &'static str = \"literal.byte\";\n-const HIGHLIGHT_TAG_LITERAL_NUMERIC: &'static str = \"literal.numeric\";\n-const HIGHLIGHT_TAG_LITERAL_CHAR: &'static str = \"literal.char\";\n-const HIGHLIGHT_TAG_LITERAL_COMMENT: &'static str = \"comment\";\n-const HIGHLIGHT_TAG_LITERAL_STRING: &'static str = \"string\";\n-const HIGHLIGHT_TAG_LITERAL_ATTRIBUTE: &'static str = \"attribute\";\n-\n-const HIGHLIGHT_TAG_KEYWORD_UNSAFE: &'static str = \"keyword.unsafe\";\n-const HIGHLIGHT_TAG_KEYWORD_CONTROL: &'static str = \"keyword.control\";\n-const HIGHLIGHT_TAG_KEYWORD: &'static str = \"keyword\";\n+pub mod tags {\n+    pub(crate) const FIELD: &'static str = \"field\";\n+    pub(crate) const FUNCTION: &'static str = \"function\";\n+    pub(crate) const MODULE: &'static str = \"module\";\n+    pub(crate) const TYPE: &'static str = \"type\";\n+    pub(crate) const CONSTANT: &'static str = \"constant\";\n+    pub(crate) const MACRO: &'static str = \"macro\";\n+    pub(crate) const VARIABLE: &'static str = \"variable\";\n+    pub(crate) const VARIABLE_MUT: &'static str = \"variable.mut\";\n+    pub(crate) const TEXT: &'static str = \"text\";\n+\n+    pub(crate) const TYPE_BUILTIN: &'static str = \"type.builtin\";\n+    pub(crate) const TYPE_SELF: &'static str = \"type.self\";\n+    pub(crate) const TYPE_PARAM: &'static str = \"type.param\";\n+    pub(crate) const TYPE_LIFETIME: &'static str = \"type.lifetime\";\n+\n+    pub(crate) const LITERAL_BYTE: &'static str = \"literal.byte\";\n+    pub(crate) const LITERAL_NUMERIC: &'static str = \"literal.numeric\";\n+    pub(crate) const LITERAL_CHAR: &'static str = \"literal.char\";\n+    pub(crate) const LITERAL_COMMENT: &'static str = \"comment\";\n+    pub(crate) const LITERAL_STRING: &'static str = \"string\";\n+    pub(crate) const LITERAL_ATTRIBUTE: &'static str = \"attribute\";\n+\n+    pub(crate) const KEYWORD_UNSAFE: &'static str = \"keyword.unsafe\";\n+    pub(crate) const KEYWORD_CONTROL: &'static str = \"keyword.control\";\n+    pub(crate) const KEYWORD: &'static str = \"keyword\";\n+}\n \n #[derive(Debug)]\n pub struct HighlightedRange {\n@@ -97,9 +99,9 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                 bindings_shadow_count.clear();\n                 continue;\n             }\n-            COMMENT => HIGHLIGHT_TAG_LITERAL_COMMENT,\n-            STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => HIGHLIGHT_TAG_LITERAL_STRING,\n-            ATTR => HIGHLIGHT_TAG_LITERAL_ATTRIBUTE,\n+            COMMENT => tags::LITERAL_COMMENT,\n+            STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => tags::LITERAL_STRING,\n+            ATTR => tags::LITERAL_ATTRIBUTE,\n             NAME_REF => {\n                 if node.ancestors().any(|it| it.kind() == ATTR) {\n                     continue;\n@@ -116,7 +118,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                     }\n                 };\n \n-                name_kind.map_or(HIGHLIGHT_TAG_TEXT, |it| highlight_name(db, it))\n+                name_kind.map_or(tags::TEXT, |it| highlight_name(db, it))\n             }\n             NAME => {\n                 let name = node.as_node().cloned().and_then(ast::Name::cast).unwrap();\n@@ -133,25 +135,21 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n \n                 match name_kind {\n                     Some(name_kind) => highlight_name(db, name_kind),\n-                    None => {\n-                        name.syntax().parent().map_or(HIGHLIGHT_TAG_FUNCTION, |x| match x.kind() {\n-                            STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF => {\n-                                HIGHLIGHT_TAG_TYPE\n-                            }\n-                            TYPE_PARAM => HIGHLIGHT_TAG_TYPE_PARAM,\n-                            RECORD_FIELD_DEF => HIGHLIGHT_TAG_FIELD,\n-                            _ => HIGHLIGHT_TAG_FUNCTION,\n-                        })\n-                    }\n+                    None => name.syntax().parent().map_or(tags::FUNCTION, |x| match x.kind() {\n+                        STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF => tags::TYPE,\n+                        TYPE_PARAM => tags::TYPE_PARAM,\n+                        RECORD_FIELD_DEF => tags::FIELD,\n+                        _ => tags::FUNCTION,\n+                    }),\n                 }\n             }\n-            INT_NUMBER | FLOAT_NUMBER => HIGHLIGHT_TAG_LITERAL_NUMERIC,\n-            BYTE => HIGHLIGHT_TAG_LITERAL_BYTE,\n-            CHAR => HIGHLIGHT_TAG_LITERAL_CHAR,\n-            LIFETIME => HIGHLIGHT_TAG_TYPE_LIFETIME,\n-            T![unsafe] => HIGHLIGHT_TAG_KEYWORD_UNSAFE,\n-            k if is_control_keyword(k) => HIGHLIGHT_TAG_KEYWORD_CONTROL,\n-            k if k.is_keyword() => HIGHLIGHT_TAG_KEYWORD,\n+            INT_NUMBER | FLOAT_NUMBER => tags::LITERAL_NUMERIC,\n+            BYTE => tags::LITERAL_BYTE,\n+            CHAR => tags::LITERAL_CHAR,\n+            LIFETIME => tags::TYPE_LIFETIME,\n+            T![unsafe] => tags::KEYWORD_UNSAFE,\n+            k if is_control_keyword(k) => tags::KEYWORD_CONTROL,\n+            k if k.is_keyword() => tags::KEYWORD,\n             _ => {\n                 if let Some(macro_call) = node.as_node().cloned().and_then(ast::MacroCall::cast) {\n                     if let Some(path) = macro_call.path() {\n@@ -168,7 +166,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                                 }\n                                 res.push(HighlightedRange {\n                                     range: TextRange::from_to(range_start, range_end),\n-                                    tag: HIGHLIGHT_TAG_MACRO,\n+                                    tag: tags::MACRO,\n                                     binding_hash: None,\n                                 })\n                             }\n@@ -244,29 +242,29 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n \n fn highlight_name(db: &RootDatabase, name_kind: NameKind) -> &'static str {\n     match name_kind {\n-        Macro(_) => HIGHLIGHT_TAG_MACRO,\n-        Field(_) => HIGHLIGHT_TAG_FIELD,\n-        AssocItem(hir::AssocItem::Function(_)) => HIGHLIGHT_TAG_FUNCTION,\n-        AssocItem(hir::AssocItem::Const(_)) => HIGHLIGHT_TAG_CONSTANT,\n-        AssocItem(hir::AssocItem::TypeAlias(_)) => HIGHLIGHT_TAG_TYPE,\n-        Def(hir::ModuleDef::Module(_)) => HIGHLIGHT_TAG_MODULE,\n-        Def(hir::ModuleDef::Function(_)) => HIGHLIGHT_TAG_FUNCTION,\n-        Def(hir::ModuleDef::Adt(_)) => HIGHLIGHT_TAG_TYPE,\n-        Def(hir::ModuleDef::EnumVariant(_)) => HIGHLIGHT_TAG_CONSTANT,\n-        Def(hir::ModuleDef::Const(_)) => HIGHLIGHT_TAG_CONSTANT,\n-        Def(hir::ModuleDef::Static(_)) => HIGHLIGHT_TAG_CONSTANT,\n-        Def(hir::ModuleDef::Trait(_)) => HIGHLIGHT_TAG_TYPE,\n-        Def(hir::ModuleDef::TypeAlias(_)) => HIGHLIGHT_TAG_TYPE,\n-        Def(hir::ModuleDef::BuiltinType(_)) => HIGHLIGHT_TAG_TYPE_BUILTIN,\n-        SelfType(_) => HIGHLIGHT_TAG_TYPE_SELF,\n-        TypeParam(_) => HIGHLIGHT_TAG_TYPE_PARAM,\n+        Macro(_) => tags::MACRO,\n+        Field(_) => tags::FIELD,\n+        AssocItem(hir::AssocItem::Function(_)) => tags::FUNCTION,\n+        AssocItem(hir::AssocItem::Const(_)) => tags::CONSTANT,\n+        AssocItem(hir::AssocItem::TypeAlias(_)) => tags::TYPE,\n+        Def(hir::ModuleDef::Module(_)) => tags::MODULE,\n+        Def(hir::ModuleDef::Function(_)) => tags::FUNCTION,\n+        Def(hir::ModuleDef::Adt(_)) => tags::TYPE,\n+        Def(hir::ModuleDef::EnumVariant(_)) => tags::CONSTANT,\n+        Def(hir::ModuleDef::Const(_)) => tags::CONSTANT,\n+        Def(hir::ModuleDef::Static(_)) => tags::CONSTANT,\n+        Def(hir::ModuleDef::Trait(_)) => tags::TYPE,\n+        Def(hir::ModuleDef::TypeAlias(_)) => tags::TYPE,\n+        Def(hir::ModuleDef::BuiltinType(_)) => tags::TYPE_BUILTIN,\n+        SelfType(_) => tags::TYPE_SELF,\n+        TypeParam(_) => tags::TYPE_PARAM,\n         Local(local) => {\n             if local.is_mut(db) {\n-                HIGHLIGHT_TAG_VARIABLE_MUT\n+                tags::VARIABLE_MUT\n             } else if local.ty(db).is_mutable_reference() {\n-                HIGHLIGHT_TAG_VARIABLE_MUT\n+                tags::VARIABLE_MUT\n             } else {\n-                HIGHLIGHT_TAG_VARIABLE\n+                tags::VARIABLE\n             }\n         }\n     }"}]}