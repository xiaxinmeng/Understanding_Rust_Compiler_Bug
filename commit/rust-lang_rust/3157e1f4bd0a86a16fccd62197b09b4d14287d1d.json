{"sha": "3157e1f4bd0a86a16fccd62197b09b4d14287d1d", "node_id": "C_kwDOAAsO6NoAKDMxNTdlMWY0YmQwYTg2YTE2ZmNjZDYyMTk3YjA5YjRkMTQyODdkMWQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-05-24T03:18:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-24T03:18:31Z"}, "message": "Rollup merge of #97289 - compiler-errors:tcxify-clippy, r=Mark-Simulacrum\n\nLifetime variance fixes for clippy\n\n#97287 migrates rustc to a `Ty` type that is invariant over its lifetime `'tcx`, so I need to fix a bunch of places that assume that `Ty<'a>` and `Ty<'b>` can be shortened to some common lifetime.\n\nThis is doable, since everything is already `'tcx`, so all this PR does is be a bit more explicit that elided lifetimes are actually `'tcx`.\n\nSplit out from #97287 so the clippy team can review independently.", "tree": {"sha": "38e5dcba0f76624513b606506ff67f0ddf6785b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38e5dcba0f76624513b606506ff67f0ddf6785b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3157e1f4bd0a86a16fccd62197b09b4d14287d1d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJijE6HCRBK7hj4Ov3rIwAAvfgIAI/QTSBN2PEMzmcR8v+XgqF+\nxSh+aPPmHvfiitdFqdHW2cfCxZ2KlObf+LU+uqhi0tdO8kgprEyMQNF+xK6/Pwto\nQW+6v0YC0IkrEG3Ofi60IAhFgQK+S2pWUXJBDT2vHjU+EqXZ9TdaSHylHyuaUXPg\nxW2OJmd0YIbb9AGA4TnBc61MLy4NA1jfv99yduHco/sQFWFxN3e7b5Pln/AtgFIT\nixyGrZUqSPE/GZAG9Ty5hk4vGluz1Tji2ysrxzWNhdeZHu88bTZ1r+DrcqfW1f1q\nQ9pDed87IA0tpIRzIW9F+M5909mxCaehbeByJSYkm2wz7oAE93gGloU/1Wqa8Bo=\n=rieG\n-----END PGP SIGNATURE-----\n", "payload": "tree 38e5dcba0f76624513b606506ff67f0ddf6785b1\nparent 8d9f258faaecc5c3824a9b7221463c0e984e1b71\nparent 215decd6fd14f8487cbb9eb42f2b057890992012\nauthor Yuki Okushi <jtitor@2k36.org> 1653362311 +0900\ncommitter GitHub <noreply@github.com> 1653362311 +0900\n\nRollup merge of #97289 - compiler-errors:tcxify-clippy, r=Mark-Simulacrum\n\nLifetime variance fixes for clippy\n\n#97287 migrates rustc to a `Ty` type that is invariant over its lifetime `'tcx`, so I need to fix a bunch of places that assume that `Ty<'a>` and `Ty<'b>` can be shortened to some common lifetime.\n\nThis is doable, since everything is already `'tcx`, so all this PR does is be a bit more explicit that elided lifetimes are actually `'tcx`.\n\nSplit out from #97287 so the clippy team can review independently.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3157e1f4bd0a86a16fccd62197b09b4d14287d1d", "html_url": "https://github.com/rust-lang/rust/commit/3157e1f4bd0a86a16fccd62197b09b4d14287d1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3157e1f4bd0a86a16fccd62197b09b4d14287d1d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d9f258faaecc5c3824a9b7221463c0e984e1b71", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9f258faaecc5c3824a9b7221463c0e984e1b71", "html_url": "https://github.com/rust-lang/rust/commit/8d9f258faaecc5c3824a9b7221463c0e984e1b71"}, {"sha": "215decd6fd14f8487cbb9eb42f2b057890992012", "url": "https://api.github.com/repos/rust-lang/rust/commits/215decd6fd14f8487cbb9eb42f2b057890992012", "html_url": "https://github.com/rust-lang/rust/commit/215decd6fd14f8487cbb9eb42f2b057890992012"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "fff7da8e33f2fff24aca3a5760557b58f893ac4a", "filename": "src/tools/clippy/clippy_lints/src/casts/unnecessary_cast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3157e1f4bd0a86a16fccd62197b09b4d14287d1d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3157e1f4bd0a86a16fccd62197b09b4d14287d1d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs?ref=3157e1f4bd0a86a16fccd62197b09b4d14287d1d", "patch": "@@ -12,12 +12,12 @@ use rustc_middle::ty::{self, FloatTy, InferTy, Ty};\n \n use super::UNNECESSARY_CAST;\n \n-pub(super) fn check(\n-    cx: &LateContext<'_>,\n-    expr: &Expr<'_>,\n-    cast_expr: &Expr<'_>,\n-    cast_from: Ty<'_>,\n-    cast_to: Ty<'_>,\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &Expr<'tcx>,\n+    cast_expr: &Expr<'tcx>,\n+    cast_from: Ty<'tcx>,\n+    cast_to: Ty<'tcx>,\n ) -> bool {\n     // skip non-primitive type cast\n     if_chain! {"}, {"sha": "8288f7a8b9b623732e98f401f0f1bf1c2e82886c", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3157e1f4bd0a86a16fccd62197b09b4d14287d1d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3157e1f4bd0a86a16fccd62197b09b4d14287d1d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=3157e1f4bd0a86a16fccd62197b09b4d14287d1d", "patch": "@@ -446,7 +446,7 @@ fn try_parse_ref_op<'tcx>(\n \n // Checks whether the type for a deref call actually changed the type, not just the mutability of\n // the reference.\n-fn deref_method_same_type(result_ty: Ty<'_>, arg_ty: Ty<'_>) -> bool {\n+fn deref_method_same_type<'tcx>(result_ty: Ty<'tcx>, arg_ty: Ty<'tcx>) -> bool {\n     match (result_ty.kind(), arg_ty.kind()) {\n         (ty::Ref(_, result_ty, _), ty::Ref(_, arg_ty, _)) => result_ty == arg_ty,\n \n@@ -541,8 +541,8 @@ fn is_auto_borrow_position(parent: Option<Node<'_>>, child_id: HirId) -> bool {\n /// Adjustments are sometimes made in the parent block rather than the expression itself.\n fn find_adjustments<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    typeck: &'tcx TypeckResults<'_>,\n-    expr: &'tcx Expr<'_>,\n+    typeck: &'tcx TypeckResults<'tcx>,\n+    expr: &'tcx Expr<'tcx>,\n ) -> &'tcx [Adjustment<'tcx>] {\n     let map = tcx.hir();\n     let mut iter = map.parent_iter(expr.hir_id);\n@@ -581,7 +581,7 @@ fn find_adjustments<'tcx>(\n }\n \n #[expect(clippy::needless_pass_by_value)]\n-fn report(cx: &LateContext<'_>, expr: &Expr<'_>, state: State, data: StateData) {\n+fn report<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, state: State, data: StateData) {\n     match state {\n         State::DerefMethod {\n             ty_changed_count,\n@@ -656,7 +656,7 @@ fn report(cx: &LateContext<'_>, expr: &Expr<'_>, state: State, data: StateData)\n }\n \n impl Dereferencing {\n-    fn check_local_usage(&mut self, cx: &LateContext<'_>, e: &Expr<'_>, local: HirId) {\n+    fn check_local_usage<'tcx>(&mut self, cx: &LateContext<'tcx>, e: &Expr<'tcx>, local: HirId) {\n         if let Some(outer_pat) = self.ref_locals.get_mut(&local) {\n             if let Some(pat) = outer_pat {\n                 // Check for auto-deref"}, {"sha": "246f5aad8fbadec7deba6693828df65932744188", "filename": "src/tools/clippy/clippy_lints/src/len_zero.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3157e1f4bd0a86a16fccd62197b09b4d14287d1d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3157e1f4bd0a86a16fccd62197b09b4d14287d1d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs?ref=3157e1f4bd0a86a16fccd62197b09b4d14287d1d", "patch": "@@ -259,8 +259,8 @@ fn parse_len_output<'tcx>(cx: &LateContext<'_>, sig: FnSig<'tcx>) -> Option<LenO\n     }\n }\n \n-impl LenOutput<'_> {\n-    fn matches_is_empty_output(self, ty: Ty<'_>) -> bool {\n+impl<'tcx> LenOutput<'tcx> {\n+    fn matches_is_empty_output(self, ty: Ty<'tcx>) -> bool {\n         match (self, ty.kind()) {\n             (_, &ty::Bool) => true,\n             (Self::Option(id), &ty::Adt(adt, subs)) if id == adt.did() => subs.type_at(0).is_bool(),\n@@ -292,7 +292,7 @@ impl LenOutput<'_> {\n }\n \n /// Checks if the given signature matches the expectations for `is_empty`\n-fn check_is_empty_sig(sig: FnSig<'_>, self_kind: ImplicitSelfKind, len_output: LenOutput<'_>) -> bool {\n+fn check_is_empty_sig<'tcx>(sig: FnSig<'tcx>, self_kind: ImplicitSelfKind, len_output: LenOutput<'tcx>) -> bool {\n     match &**sig.inputs_and_output {\n         [arg, res] if len_output.matches_is_empty_output(*res) => {\n             matches!(\n@@ -306,11 +306,11 @@ fn check_is_empty_sig(sig: FnSig<'_>, self_kind: ImplicitSelfKind, len_output: L\n }\n \n /// Checks if the given type has an `is_empty` method with the appropriate signature.\n-fn check_for_is_empty(\n-    cx: &LateContext<'_>,\n+fn check_for_is_empty<'tcx>(\n+    cx: &LateContext<'tcx>,\n     span: Span,\n     self_kind: ImplicitSelfKind,\n-    output: LenOutput<'_>,\n+    output: LenOutput<'tcx>,\n     impl_ty: DefId,\n     item_name: Symbol,\n     item_kind: &str,"}, {"sha": "3bf48e18019dfb4b2cbb6771e8bb20e65c6df9cd", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3157e1f4bd0a86a16fccd62197b09b4d14287d1d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3157e1f4bd0a86a16fccd62197b09b4d14287d1d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=3157e1f4bd0a86a16fccd62197b09b4d14287d1d", "patch": "@@ -2843,7 +2843,7 @@ enum SelfKind {\n \n impl SelfKind {\n     fn matches<'a>(self, cx: &LateContext<'a>, parent_ty: Ty<'a>, ty: Ty<'a>) -> bool {\n-        fn matches_value<'a>(cx: &LateContext<'a>, parent_ty: Ty<'_>, ty: Ty<'_>) -> bool {\n+        fn matches_value<'a>(cx: &LateContext<'a>, parent_ty: Ty<'a>, ty: Ty<'a>) -> bool {\n             if ty == parent_ty {\n                 true\n             } else if ty.is_box() {"}, {"sha": "548f7b2528b1171acd5fc7877c3ebb6f1591b734", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3157e1f4bd0a86a16fccd62197b09b4d14287d1d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3157e1f4bd0a86a16fccd62197b09b4d14287d1d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=3157e1f4bd0a86a16fccd62197b09b4d14287d1d", "patch": "@@ -395,9 +395,9 @@ impl<'tcx> DerefTy<'tcx> {\n \n fn check_fn_args<'cx, 'tcx: 'cx>(\n     cx: &'cx LateContext<'tcx>,\n-    tys: &'tcx [Ty<'_>],\n-    hir_tys: &'tcx [hir::Ty<'_>],\n-    params: &'tcx [Param<'_>],\n+    tys: &'tcx [Ty<'tcx>],\n+    hir_tys: &'tcx [hir::Ty<'tcx>],\n+    params: &'tcx [Param<'tcx>],\n ) -> impl Iterator<Item = PtrArg<'tcx>> + 'cx {\n     tys.iter()\n         .zip(hir_tys.iter())"}, {"sha": "20b348fc14f7b12f71823d410cd9f5ae2913c250", "filename": "src/tools/clippy/clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3157e1f4bd0a86a16fccd62197b09b4d14287d1d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3157e1f4bd0a86a16fccd62197b09b4d14287d1d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=3157e1f4bd0a86a16fccd62197b09b4d14287d1d", "patch": "@@ -358,7 +358,7 @@ fn is_size_pair(ty: Ty<'_>) -> bool {\n     }\n }\n \n-fn same_except_params(subs1: SubstsRef<'_>, subs2: SubstsRef<'_>) -> bool {\n+fn same_except_params<'tcx>(subs1: SubstsRef<'tcx>, subs2: SubstsRef<'tcx>) -> bool {\n     // TODO: check const parameters as well. Currently this will consider `Array<5>` the same as\n     // `Array<6>`\n     for (ty1, ty2) in subs1.types().zip(subs2.types()).filter(|(ty1, ty2)| ty1 != ty2) {"}, {"sha": "75d27d3b594822ff342ab4c1bde86804e16a4dfd", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3157e1f4bd0a86a16fccd62197b09b4d14287d1d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3157e1f4bd0a86a16fccd62197b09b4d14287d1d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=3157e1f4bd0a86a16fccd62197b09b4d14287d1d", "patch": "@@ -42,7 +42,7 @@ pub fn can_partially_move_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool\n }\n \n /// Walks into `ty` and returns `true` if any inner type is the same as `other_ty`\n-pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n+pub fn contains_ty<'tcx>(ty: Ty<'tcx>, other_ty: Ty<'tcx>) -> bool {\n     ty.walk().any(|inner| match inner.unpack() {\n         GenericArgKind::Type(inner_ty) => other_ty == inner_ty,\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n@@ -51,7 +51,7 @@ pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n \n /// Walks into `ty` and returns `true` if any inner type is an instance of the given adt\n /// constructor.\n-pub fn contains_adt_constructor(ty: Ty<'_>, adt: AdtDef<'_>) -> bool {\n+pub fn contains_adt_constructor<'tcx>(ty: Ty<'tcx>, adt: AdtDef<'tcx>) -> bool {\n     ty.walk().any(|inner| match inner.unpack() {\n         GenericArgKind::Type(inner_ty) => inner_ty.ty_adt_def() == Some(adt),\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,"}]}