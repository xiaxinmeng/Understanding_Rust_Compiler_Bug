{"sha": "cca0f97985c1a02b412346bc55a7279bfe915c91", "node_id": "C_kwDOAAsO6NoAKGNjYTBmOTc5ODVjMWEwMmI0MTIzNDZiYzU1YTcyNzliZmU5MTVjOTE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-18T12:07:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-18T12:07:10Z"}, "message": "Rollup merge of #111703 - Zoxc:queries-mod, r=cjgillot\n\nMerge query property modules into one\n\nThis merges all the query modules that defines types into a single module per query with a normal naming convention for type aliases.\n\nr? ``@cjgillot``", "tree": {"sha": "0a4065c865ff320e1241ad2b8ad4343d6dd4b4f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a4065c865ff320e1241ad2b8ad4343d6dd4b4f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cca0f97985c1a02b412346bc55a7279bfe915c91", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkZhTuCRBK7hj4Ov3rIwAAXZ4IAIiDIpDLrRzbYIlS7wBiNTPl\nTaruLrdBKzPZghOsiNPYrj67yN+eEmxs7XTtbwhw3P1d+QxcT7nXejqFJmRqX6OH\nRE5A/LzvzfXFN2J6fmelL2A0YlORd/ga8/uR0lk8YmwBOckc31bNvcOMLvay+TB6\nIYCyo8i3LJvf1/UhE87v6nYu4qdx5K02usKmlmh3TKvI8wFWqpcMfFvdYjoXVfUQ\niBYeqJGPsos4CZUbCxJTc4O0AKo7En47aNJw34wki31l1XFjLpnn+zV2b7CaSLi2\nDJAoZZNx2KlZVkNLYozncrFqop3R1fnSFbqx+yjwNLnZ0bwh4ye9WuC2j3Dv4ac=\n=Q+PN\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a4065c865ff320e1241ad2b8ad4343d6dd4b4f8\nparent d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9\nparent f6c6d10443997db2a7ba6247b840120b0eb29a62\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1684411630 +0530\ncommitter GitHub <noreply@github.com> 1684411630 +0530\n\nRollup merge of #111703 - Zoxc:queries-mod, r=cjgillot\n\nMerge query property modules into one\n\nThis merges all the query modules that defines types into a single module per query with a normal naming convention for type aliases.\n\nr? ``@cjgillot``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cca0f97985c1a02b412346bc55a7279bfe915c91", "html_url": "https://github.com/rust-lang/rust/commit/cca0f97985c1a02b412346bc55a7279bfe915c91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cca0f97985c1a02b412346bc55a7279bfe915c91/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9", "html_url": "https://github.com/rust-lang/rust/commit/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9"}, {"sha": "f6c6d10443997db2a7ba6247b840120b0eb29a62", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6c6d10443997db2a7ba6247b840120b0eb29a62", "html_url": "https://github.com/rust-lang/rust/commit/f6c6d10443997db2a7ba6247b840120b0eb29a62"}], "stats": {"total": 221, "additions": 96, "deletions": 125}, "files": [{"sha": "d0d41c614d6080436022f495ac298e9b6cc5c4c0", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cca0f97985c1a02b412346bc55a7279bfe915c91/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0f97985c1a02b412346bc55a7279bfe915c91/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=cca0f97985c1a02b412346bc55a7279bfe915c91", "patch": "@@ -253,7 +253,7 @@ fn add_query_desc_cached_impl(\n         quote! {\n             #[allow(unused_variables, unused_braces, rustc::pass_by_value)]\n             #[inline]\n-            pub fn #name<'tcx>(#tcx: TyCtxt<'tcx>, #key: &crate::query::query_keys::#name<'tcx>) -> bool {\n+            pub fn #name<'tcx>(#tcx: TyCtxt<'tcx>, #key: &crate::query::queries::#name::Key<'tcx>) -> bool {\n                 #expr\n             }\n         }\n@@ -262,7 +262,7 @@ fn add_query_desc_cached_impl(\n             // we're taking `key` by reference, but some rustc types usually prefer being passed by value\n             #[allow(rustc::pass_by_value)]\n             #[inline]\n-            pub fn #name<'tcx>(_: TyCtxt<'tcx>, _: &crate::query::query_keys::#name<'tcx>) -> bool {\n+            pub fn #name<'tcx>(_: TyCtxt<'tcx>, _: &crate::query::queries::#name::Key<'tcx>) -> bool {\n                 false\n             }\n         }\n@@ -273,7 +273,7 @@ fn add_query_desc_cached_impl(\n \n     let desc = quote! {\n         #[allow(unused_variables)]\n-        pub fn #name<'tcx>(tcx: TyCtxt<'tcx>, key: crate::query::query_keys::#name<'tcx>) -> String {\n+        pub fn #name<'tcx>(tcx: TyCtxt<'tcx>, key: crate::query::queries::#name::Key<'tcx>) -> String {\n             let (#tcx, #key) = (tcx, key);\n             ::rustc_middle::ty::print::with_no_trimmed_paths!(\n                 format!(#desc)"}, {"sha": "364269095e01199832d94206bb3ebce128b16d6c", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cca0f97985c1a02b412346bc55a7279bfe915c91/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0f97985c1a02b412346bc55a7279bfe915c91/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=cca0f97985c1a02b412346bc55a7279bfe915c91", "patch": "@@ -114,8 +114,8 @@ macro_rules! provide_one {\n     ($tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => $compute:block) => {\n         fn $name<'tcx>(\n             $tcx: TyCtxt<'tcx>,\n-            def_id_arg: rustc_middle::query::query_keys::$name<'tcx>,\n-        ) -> rustc_middle::query::query_provided::$name<'tcx> {\n+            def_id_arg: rustc_middle::query::queries::$name::Key<'tcx>,\n+        ) -> rustc_middle::query::queries::$name::ProvidedValue<'tcx> {\n             let _prof_timer =\n                 $tcx.prof.generic_activity(concat!(\"metadata_decode_entry_\", stringify!($name)));\n "}, {"sha": "8d088b68e59271d0f642635691edbbee2126da80", "filename": "compiler/rustc_middle/src/query/plumbing.rs", "status": "modified", "additions": 64, "deletions": 93, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/cca0f97985c1a02b412346bc55a7279bfe915c91/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0f97985c1a02b412346bc55a7279bfe915c91/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fplumbing.rs?ref=cca0f97985c1a02b412346bc55a7279bfe915c91", "patch": "@@ -221,8 +221,8 @@ macro_rules! separate_provide_extern_decl {\n     ([(separate_provide_extern) $($rest:tt)*][$name:ident]) => {\n         for<'tcx> fn(\n             TyCtxt<'tcx>,\n-            query_keys::$name<'tcx>,\n-        ) -> query_provided::$name<'tcx>\n+            queries::$name::Key<'tcx>,\n+        ) -> queries::$name::ProvidedValue<'tcx>\n     };\n     ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n         separate_provide_extern_decl!([$($modifiers)*][$($args)*])\n@@ -252,60 +252,37 @@ macro_rules! define_callbacks {\n      $($(#[$attr:meta])*\n         [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n \n-        // HACK(eddyb) this is like the `impl QueryConfig for queries::$name`\n-        // below, but using type aliases instead of associated types, to bypass\n-        // the limitations around normalizing under HRTB - for example, this:\n-        // `for<'tcx> fn(...) -> <queries::$name<'tcx> as QueryConfig<TyCtxt<'tcx>>>::Value`\n-        // doesn't currently normalize to `for<'tcx> fn(...) -> query_values::$name<'tcx>`.\n-        // This is primarily used by the `provide!` macro in `rustc_metadata`.\n-        #[allow(nonstandard_style, unused_lifetimes)]\n-        pub mod query_keys {\n-            use super::*;\n-\n-            $(pub type $name<'tcx> = $($K)*;)*\n-        }\n-        #[allow(nonstandard_style, unused_lifetimes)]\n-        pub mod query_keys_local {\n-            use super::*;\n-\n-            $(pub type $name<'tcx> = local_key_if_separate_extern!([$($modifiers)*] $($K)*);)*\n-        }\n-        #[allow(nonstandard_style, unused_lifetimes)]\n-        pub mod query_values {\n-            use super::*;\n+        #[allow(unused_lifetimes)]\n+        pub mod queries {\n+            $(pub mod $name {\n+                use super::super::*;\n \n-            $(pub type $name<'tcx> = $V;)*\n-        }\n+                pub type Key<'tcx> = $($K)*;\n+                pub type Value<'tcx> = $V;\n \n-        /// This module specifies the type returned from query providers and the type used for\n-        /// decoding. For regular queries this is the declared returned type `V`, but\n-        /// `arena_cache` will use `<V as Deref>::Target` instead.\n-        #[allow(nonstandard_style, unused_lifetimes)]\n-        pub mod query_provided {\n-            use super::*;\n+                pub type LocalKey<'tcx> = local_key_if_separate_extern!([$($modifiers)*] $($K)*);\n \n-            $(\n-                pub type $name<'tcx> = query_if_arena!([$($modifiers)*] (<$V as Deref>::Target) ($V));\n-            )*\n-        }\n-\n-        /// This module has a function per query which takes a `query_provided` value and coverts\n-        /// it to a regular `V` value by allocating it on an arena if the query has the\n-        /// `arena_cache` modifier. This will happen when computing the query using a provider or\n-        /// decoding a stored result.\n-        #[allow(nonstandard_style, unused_lifetimes)]\n-        pub mod query_provided_to_value {\n-            use super::*;\n+                /// This type alias specifies the type returned from query providers and the type\n+                /// used for decoding. For regular queries this is the declared returned type `V`,\n+                /// but `arena_cache` will use `<V as Deref>::Target` instead.\n+                pub type ProvidedValue<'tcx> = query_if_arena!(\n+                    [$($modifiers)*]\n+                    (<$V as Deref>::Target)\n+                    ($V)\n+                );\n \n-            $(\n+                /// This function takes `ProvidedValue` and coverts it to an erased `Value` by\n+                /// allocating it on an arena if the query has the `arena_cache` modifier. The\n+                /// value is then erased and returned. This will happen when computing the query\n+                /// using a provider or decoding a stored result.\n                 #[inline(always)]\n-                pub fn $name<'tcx>(\n+                pub fn provided_to_erased<'tcx>(\n                     _tcx: TyCtxt<'tcx>,\n-                    value: query_provided::$name<'tcx>,\n-                ) -> Erase<query_values::$name<'tcx>> {\n+                    value: ProvidedValue<'tcx>,\n+                ) -> Erase<Value<'tcx>> {\n                     erase(query_if_arena!([$($modifiers)*]\n                         {\n-                            if mem::needs_drop::<query_provided::$name<'tcx>>() {\n+                            if mem::needs_drop::<ProvidedValue<'tcx>>() {\n                                 &*_tcx.query_system.arenas.$name.alloc(value)\n                             } else {\n                                 &*_tcx.arena.dropless.alloc(value)\n@@ -314,47 +291,41 @@ macro_rules! define_callbacks {\n                         (value)\n                     ))\n                 }\n-            )*\n-        }\n-        #[allow(nonstandard_style, unused_lifetimes)]\n-        pub mod query_storage {\n-            use super::*;\n \n-            $(\n-                pub type $name<'tcx> = <<$($K)* as Key>::CacheSelector as CacheSelector<'tcx, Erase<$V>>>::Cache;\n-            )*\n+                pub type Storage<'tcx> = <\n+                    <$($K)* as keys::Key>::CacheSelector as CacheSelector<'tcx, Erase<$V>>\n+                >::Cache;\n+\n+                // Ensure that keys grow no larger than 64 bytes\n+                #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+                const _: () = {\n+                    if mem::size_of::<Key<'static>>() > 64 {\n+                        panic!(\"{}\", concat!(\n+                            \"the query `\",\n+                            stringify!($name),\n+                            \"` has a key type `\",\n+                            stringify!($($K)*),\n+                            \"` that is too large\"\n+                        ));\n+                    }\n+                };\n+\n+                // Ensure that values grow no larger than 64 bytes\n+                #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+                const _: () = {\n+                    if mem::size_of::<Value<'static>>() > 64 {\n+                        panic!(\"{}\", concat!(\n+                            \"the query `\",\n+                            stringify!($name),\n+                            \"` has a value type `\",\n+                            stringify!($V),\n+                            \"` that is too large\"\n+                        ));\n+                    }\n+                };\n+            })*\n         }\n \n-        $(\n-            // Ensure that keys grow no larger than 64 bytes\n-            #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-            const _: () = {\n-                if mem::size_of::<query_keys::$name<'static>>() > 64 {\n-                    panic!(\"{}\", concat!(\n-                        \"the query `\",\n-                        stringify!($name),\n-                        \"` has a key type `\",\n-                        stringify!($($K)*),\n-                        \"` that is too large\"\n-                    ));\n-                }\n-            };\n-\n-            // Ensure that values grow no larger than 64 bytes\n-            #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-            const _: () = {\n-                if mem::size_of::<query_values::$name<'static>>() > 64 {\n-                    panic!(\"{}\", concat!(\n-                        \"the query `\",\n-                        stringify!($name),\n-                        \"` has a value type `\",\n-                        stringify!($V),\n-                        \"` that is too large\"\n-                    ));\n-                }\n-            };\n-        )*\n-\n         pub struct QueryArenas<'tcx> {\n             $($(#[$attr])* pub $name: query_if_arena!([$($modifiers)*]\n                 (WorkerLocal<TypedArena<<$V as Deref>::Target>>)\n@@ -375,7 +346,7 @@ macro_rules! define_callbacks {\n \n         #[derive(Default)]\n         pub struct QueryCaches<'tcx> {\n-            $($(#[$attr])* pub $name: query_storage::$name<'tcx>,)*\n+            $($(#[$attr])* pub $name: queries::$name::Storage<'tcx>,)*\n         }\n \n         impl<'tcx> TyCtxtEnsure<'tcx> {\n@@ -433,7 +404,7 @@ macro_rules! define_callbacks {\n \n         pub struct DynamicQueries<'tcx> {\n             $(\n-                pub $name: DynamicQuery<'tcx, query_storage::$name<'tcx>>,\n+                pub $name: DynamicQuery<'tcx, queries::$name::Storage<'tcx>>,\n             )*\n         }\n \n@@ -447,8 +418,8 @@ macro_rules! define_callbacks {\n         pub struct Providers {\n             $(pub $name: for<'tcx> fn(\n                 TyCtxt<'tcx>,\n-                query_keys_local::$name<'tcx>,\n-            ) -> query_provided::$name<'tcx>,)*\n+                queries::$name::LocalKey<'tcx>,\n+            ) -> queries::$name::ProvidedValue<'tcx>,)*\n         }\n \n         pub struct ExternProviders {\n@@ -493,7 +464,7 @@ macro_rules! define_callbacks {\n             $(pub $name: for<'tcx> fn(\n                 TyCtxt<'tcx>,\n                 Span,\n-                query_keys::$name<'tcx>,\n+                queries::$name::Key<'tcx>,\n                 QueryMode,\n             ) -> Option<Erase<$V>>,)*\n         }\n@@ -517,11 +488,11 @@ macro_rules! define_feedable {\n         $(impl<'tcx, K: IntoQueryParam<$($K)*> + Copy> TyCtxtFeed<'tcx, K> {\n             $(#[$attr])*\n             #[inline(always)]\n-            pub fn $name(self, value: query_provided::$name<'tcx>) {\n+            pub fn $name(self, value: queries::$name::ProvidedValue<'tcx>) {\n                 let key = self.key().into_query_param();\n \n                 let tcx = self.tcx;\n-                let erased = query_provided_to_value::$name(tcx, value);\n+                let erased = queries::$name::provided_to_erased(tcx, value);\n                 let value = restore::<$V>(erased);\n                 let cache = &tcx.query_system.caches.$name;\n "}, {"sha": "7afcbebe274b3411132c200f2b08985b15389c83", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cca0f97985c1a02b412346bc55a7279bfe915c91/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0f97985c1a02b412346bc55a7279bfe915c91/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=cca0f97985c1a02b412346bc55a7279bfe915c91", "patch": "@@ -15,7 +15,7 @@\n #[macro_use]\n extern crate rustc_middle;\n \n-use crate::plumbing::{encode_all_query_results, try_mark_green};\n+use crate::plumbing::{__rust_begin_short_backtrace, encode_all_query_results, try_mark_green};\n use field_offset::offset_of;\n use rustc_data_structures::stable_hasher::HashStable;\n use rustc_data_structures::sync::AtomicU64;\n@@ -27,8 +27,7 @@ use rustc_middle::query::on_disk_cache::OnDiskCache;\n use rustc_middle::query::plumbing::{DynamicQuery, QuerySystem, QuerySystemFns};\n use rustc_middle::query::AsLocalKey;\n use rustc_middle::query::{\n-    query_keys, query_provided, query_provided_to_value, query_storage, query_values,\n-    DynamicQueries, ExternProviders, Providers, QueryCaches, QueryEngine, QueryStates,\n+    queries, DynamicQueries, ExternProviders, Providers, QueryCaches, QueryEngine, QueryStates,\n };\n use rustc_middle::ty::TyCtxt;\n use rustc_query_system::dep_graph::SerializedDepNodeIndex;"}, {"sha": "ebbf69a1007141789dfb24fd74625c402433927d", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cca0f97985c1a02b412346bc55a7279bfe915c91/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0f97985c1a02b412346bc55a7279bfe915c91/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=cca0f97985c1a02b412346bc55a7279bfe915c91", "patch": "@@ -518,11 +518,11 @@ macro_rules! define_queries {\n                     pub fn __rust_end_short_backtrace<'tcx>(\n                         tcx: TyCtxt<'tcx>,\n                         span: Span,\n-                        key: query_keys::$name<'tcx>,\n+                        key: queries::$name::Key<'tcx>,\n                         mode: QueryMode,\n-                    ) -> Option<Erase<query_values::$name<'tcx>>> {\n+                    ) -> Option<Erase<queries::$name::Value<'tcx>>> {\n                         get_query_incr(\n-                            queries::$name::config(tcx),\n+                            query_config::$name::config(tcx),\n                             QueryCtxt::new(tcx),\n                             span,\n                             key,\n@@ -543,11 +543,11 @@ macro_rules! define_queries {\n                     pub fn __rust_end_short_backtrace<'tcx>(\n                         tcx: TyCtxt<'tcx>,\n                         span: Span,\n-                        key: query_keys::$name<'tcx>,\n+                        key: queries::$name::Key<'tcx>,\n                         __mode: QueryMode,\n-                    ) -> Option<Erase<query_values::$name<'tcx>>> {\n+                    ) -> Option<Erase<queries::$name::Value<'tcx>>> {\n                         Some(get_query_non_incr(\n-                            queries::$name::config(tcx),\n+                            query_config::$name::config(tcx),\n                             QueryCtxt::new(tcx),\n                             span,\n                             key,\n@@ -570,7 +570,7 @@ macro_rules! define_queries {\n         }\n \n         #[allow(nonstandard_style)]\n-        mod queries {\n+        mod query_config {\n             use std::marker::PhantomData;\n \n             $(\n@@ -586,7 +586,7 @@ macro_rules! define_queries {\n             use super::*;\n \n             $(\n-                pub(super) fn $name<'tcx>() -> DynamicQuery<'tcx, query_storage::$name<'tcx>> {\n+                pub(super) fn $name<'tcx>() -> DynamicQuery<'tcx, queries::$name::Storage<'tcx>> {\n                     DynamicQuery {\n                         name: stringify!($name),\n                         eval_always: is_eval_always!([$($modifiers)*]),\n@@ -597,9 +597,8 @@ macro_rules! define_queries {\n                         cache_on_disk: |tcx, key| ::rustc_middle::query::cached::$name(tcx, key),\n                         execute_query: |tcx, key| erase(tcx.$name(key)),\n                         compute: |tcx, key| {\n-                            use crate::plumbing::__rust_begin_short_backtrace;\n                             __rust_begin_short_backtrace(||\n-                                query_provided_to_value::$name(\n+                                queries::$name::provided_to_erased(\n                                     tcx,\n                                     call_provider!([$($modifiers)*][tcx, $name, key])\n                                 )\n@@ -609,12 +608,14 @@ macro_rules! define_queries {\n                         try_load_from_disk: should_ever_cache_on_disk!([$($modifiers)*] {\n                             |tcx, key, prev_index, index| {\n                                 if ::rustc_middle::query::cached::$name(tcx, key) {\n-                                    let value = $crate::plumbing::try_load_from_disk::<query_provided::$name<'tcx>>(\n+                                    let value = $crate::plumbing::try_load_from_disk::<\n+                                        queries::$name::ProvidedValue<'tcx>\n+                                    >(\n                                         tcx,\n                                         prev_index,\n                                         index,\n                                     );\n-                                    value.map(|value| query_provided_to_value::$name(tcx, value))\n+                                    value.map(|value| queries::$name::provided_to_erased(tcx, value))\n                                 } else {\n                                     None\n                                 }\n@@ -623,7 +624,7 @@ macro_rules! define_queries {\n                             |_tcx, _key, _prev_index, _index| None\n                         }),\n                         value_from_cycle_error: |tcx, cycle| {\n-                            let result: query_values::$name<'tcx> = Value::from_cycle_error(tcx, cycle);\n+                            let result: queries::$name::Value<'tcx> = Value::from_cycle_error(tcx, cycle);\n                             erase(result)\n                         },\n                         loadable_from_disk: |_tcx, _key, _index| {\n@@ -634,18 +635,18 @@ macro_rules! define_queries {\n                                 false\n                             })\n                         },\n-                        hash_result: hash_result!([$($modifiers)*][query_values::$name<'tcx>]),\n-                        format_value: |value| format!(\"{:?}\", restore::<query_values::$name<'tcx>>(*value)),\n+                        hash_result: hash_result!([$($modifiers)*][queries::$name::Value<'tcx>]),\n+                        format_value: |value| format!(\"{:?}\", restore::<queries::$name::Value<'tcx>>(*value)),\n                     }\n                 }\n             )*\n         }\n \n-        $(impl<'tcx> QueryConfigRestored<'tcx> for queries::$name<'tcx> {\n-            type RestoredValue = query_values::$name<'tcx>;\n+        $(impl<'tcx> QueryConfigRestored<'tcx> for query_config::$name<'tcx> {\n+            type RestoredValue = queries::$name::Value<'tcx>;\n             type Config = DynamicConfig<\n                 'tcx,\n-                query_storage::$name<'tcx>,\n+                queries::$name::Storage<'tcx>,\n                 { is_anon!([$($modifiers)*]) },\n                 { depth_limit!([$($modifiers)*]) },\n                 { feedable!([$($modifiers)*]) },\n@@ -660,7 +661,7 @@ macro_rules! define_queries {\n \n             #[inline(always)]\n             fn restore(value: <Self::Config as QueryConfig<QueryCtxt<'tcx>>>::Value) -> Self::RestoredValue {\n-                restore::<query_values::$name<'tcx>>(value)\n+                restore::<queries::$name::Value<'tcx>>(value)\n             }\n         })*\n \n@@ -730,7 +731,7 @@ macro_rules! define_queries {\n             }\n \n             $(pub(crate) fn $name<'tcx>()-> DepKindStruct<'tcx> {\n-                $crate::plumbing::query_callback::<queries::$name<'tcx>>(\n+                $crate::plumbing::query_callback::<query_config::$name<'tcx>>(\n                     is_anon!([$($modifiers)*]),\n                     is_eval_always!([$($modifiers)*]),\n                 )\n@@ -785,8 +786,8 @@ macro_rules! define_queries {\n                     )\n                 },\n                 encode_query_results: expand_if_cached!([$($modifiers)*], |tcx, encoder, query_result_index|\n-                    $crate::plumbing::encode_query_results::<super::queries::$name<'tcx>>(\n-                        super::queries::$name::config(tcx),\n+                    $crate::plumbing::encode_query_results::<super::query_config::$name<'tcx>>(\n+                        super::query_config::$name::config(tcx),\n                         QueryCtxt::new(tcx),\n                         encoder,\n                         query_result_index,"}, {"sha": "d342b2ff6d91bf2b0819b319b346be74406b4e2c", "filename": "tests/run-make-fulldeps/obtain-borrowck/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cca0f97985c1a02b412346bc55a7279bfe915c91/tests%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0f97985c1a02b412346bc55a7279bfe915c91/tests%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs?ref=cca0f97985c1a02b412346bc55a7279bfe915c91", "patch": "@@ -24,7 +24,7 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_interface::interface::Compiler;\n use rustc_interface::{Config, Queries};\n-use rustc_middle::query::query_values::mir_borrowck;\n+use rustc_middle::query::queries::mir_borrowck::ProvidedValue;\n use rustc_middle::query::{ExternProviders, Providers};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n@@ -126,7 +126,7 @@ thread_local! {\n         RefCell::new(HashMap::new());\n }\n \n-fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> mir_borrowck<'tcx> {\n+fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> ProvidedValue<'tcx> {\n     let body_with_facts = rustc_borrowck::consumers::get_body_with_borrowck_facts(tcx, def_id);\n     // SAFETY: The reader casts the 'static lifetime to 'tcx before using it.\n     let body_with_facts: BodyWithBorrowckFacts<'static> ="}]}