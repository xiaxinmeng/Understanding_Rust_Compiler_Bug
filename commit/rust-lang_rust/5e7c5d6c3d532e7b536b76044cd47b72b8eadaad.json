{"sha": "5e7c5d6c3d532e7b536b76044cd47b72b8eadaad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlN2M1ZDZjM2Q1MzJlN2I1MzZiNzYwNDRjZDQ3YjcyYjhlYWRhYWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-22T08:09:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-25T00:07:03Z"}, "message": "std: Make box annihilator work with newsched", "tree": {"sha": "4293df31a4276cc3d477ece661fe30debc7da63a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4293df31a4276cc3d477ece661fe30debc7da63a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad", "html_url": "https://github.com/rust-lang/rust/commit/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a09972db3545344048b90e90d1f1821b621a38b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a09972db3545344048b90e90d1f1821b621a38b9", "html_url": "https://github.com/rust-lang/rust/commit/a09972db3545344048b90e90d1f1821b621a38b9"}], "stats": {"total": 234, "additions": 102, "deletions": 132}, "files": [{"sha": "36c1fdf781b250e427896d0bbe2e918c8d5a77e6", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 13, "deletions": 103, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=5e7c5d6c3d532e7b536b76044cd47b72b8eadaad", "patch": "@@ -13,107 +13,14 @@\n use libc::{c_char, c_void, intptr_t, uintptr_t};\n use ptr::mut_null;\n use repr::BoxRepr;\n+use rt;\n+use rt::OldTaskContext;\n use sys::TypeDesc;\n use cast::transmute;\n-#[cfg(not(test))] use rt::borrowck::clear_task_borrow_list;\n \n #[cfg(not(test))] use ptr::to_unsafe_ptr;\n \n-/**\n- * Runtime structures\n- *\n- * NB: These must match the representation in the C++ runtime.\n- */\n-\n type DropGlue<'self> = &'self fn(**TypeDesc, *c_void);\n-type FreeGlue<'self> = &'self fn(**TypeDesc, *c_void);\n-\n-type TaskID = uintptr_t;\n-\n-struct StackSegment { priv opaque: () }\n-struct Scheduler { priv opaque: () }\n-struct SchedulerLoop { priv opaque: () }\n-struct Kernel { priv opaque: () }\n-struct Env { priv opaque: () }\n-struct AllocHeader { priv opaque: () }\n-struct MemoryRegion { priv opaque: () }\n-\n-#[cfg(target_arch=\"x86\")]\n-struct Registers {\n-    data: [u32, ..16]\n-}\n-\n-#[cfg(target_arch=\"arm\")]\n-#[cfg(target_arch=\"mips\")]\n-struct Registers {\n-    data: [u32, ..32]\n-}\n-\n-#[cfg(target_arch=\"x86\")]\n-#[cfg(target_arch=\"arm\")]\n-#[cfg(target_arch=\"mips\")]\n-struct Context {\n-    regs: Registers,\n-    next: *Context,\n-    pad: [u32, ..3]\n-}\n-\n-#[cfg(target_arch=\"x86_64\")]\n-struct Registers {\n-    data: [u64, ..22]\n-}\n-\n-#[cfg(target_arch=\"x86_64\")]\n-struct Context {\n-    regs: Registers,\n-    next: *Context,\n-    pad: uintptr_t\n-}\n-\n-struct BoxedRegion {\n-    env: *Env,\n-    backing_region: *MemoryRegion,\n-    live_allocs: *BoxRepr\n-}\n-\n-#[cfg(target_arch=\"x86\")]\n-#[cfg(target_arch=\"arm\")]\n-#[cfg(target_arch=\"mips\")]\n-struct Task {\n-    // Public fields\n-    refcount: intptr_t,                 // 0\n-    id: TaskID,                         // 4\n-    pad: [u32, ..2],                    // 8\n-    ctx: Context,                       // 16\n-    stack_segment: *StackSegment,       // 96\n-    runtime_sp: uintptr_t,              // 100\n-    scheduler: *Scheduler,              // 104\n-    scheduler_loop: *SchedulerLoop,     // 108\n-\n-    // Fields known only to the runtime\n-    kernel: *Kernel,                    // 112\n-    name: *c_char,                      // 116\n-    list_index: i32,                    // 120\n-    boxed_region: BoxedRegion           // 128\n-}\n-\n-#[cfg(target_arch=\"x86_64\")]\n-struct Task {\n-    // Public fields\n-    refcount: intptr_t,\n-    id: TaskID,\n-    ctx: Context,\n-    stack_segment: *StackSegment,\n-    runtime_sp: uintptr_t,\n-    scheduler: *Scheduler,\n-    scheduler_loop: *SchedulerLoop,\n-\n-    // Fields known only to the runtime\n-    kernel: *Kernel,\n-    name: *c_char,\n-    list_index: i32,\n-    boxed_region: BoxedRegion\n-}\n \n /*\n  * Box annihilation\n@@ -132,9 +39,9 @@ unsafe fn each_live_alloc(read_next_before: bool,\n     //! Walks the internal list of allocations\n \n     use managed;\n+    use rt::local_heap;\n \n-    let task: *Task = transmute(rustrt::rust_get_task());\n-    let box = (*task).boxed_region.live_allocs;\n+    let box = local_heap::live_allocs();\n     let mut box: *mut BoxRepr = transmute(copy box);\n     while box != mut_null() {\n         let next_before = transmute(copy (*box).header.next);\n@@ -156,7 +63,11 @@ unsafe fn each_live_alloc(read_next_before: bool,\n \n #[cfg(unix)]\n fn debug_mem() -> bool {\n-    ::rt::env::get().debug_mem\n+    // XXX: Need to port the environment struct to newsched\n+    match rt::context() {\n+        OldTaskContext => ::rt::env::get().debug_mem,\n+        _ => false\n+    }\n }\n \n #[cfg(windows)]\n@@ -165,13 +76,12 @@ fn debug_mem() -> bool {\n }\n \n /// Destroys all managed memory (i.e. @ boxes) held by the current task.\n-#[cfg(not(test))]\n-#[lang=\"annihilate\"]\n pub unsafe fn annihilate() {\n-    use unstable::lang::local_free;\n+    use rt::local_heap::local_free;\n     use io::WriterUtil;\n     use io;\n     use libc;\n+    use rt::borrowck;\n     use sys;\n     use managed;\n \n@@ -183,7 +93,7 @@ pub unsafe fn annihilate() {\n \n     // Quick hack: we need to free this list upon task exit, and this\n     // is a convenient place to do it.\n-    clear_task_borrow_list();\n+    borrowck::clear_task_borrow_list();\n \n     // Pass 1: Make all boxes immortal.\n     //\n@@ -207,7 +117,7 @@ pub unsafe fn annihilate() {\n         if !uniq {\n             let tydesc: *TypeDesc = transmute(copy (*box).header.type_desc);\n             let drop_glue: DropGlue = transmute(((*tydesc).drop_glue, 0));\n-            drop_glue(to_unsafe_ptr(&tydesc), transmute(&(*box).data));\n+            drop_glue(&tydesc, transmute(&(*box).data));\n         }\n     }\n "}, {"sha": "dd27c03ff516474f8496b95913f537fa5741fa40", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=5e7c5d6c3d532e7b536b76044cd47b72b8eadaad", "patch": "@@ -399,12 +399,6 @@ impl<T: Owned> GenericChan<T> for SharedChan<T> {\n }\n \n impl<T: Owned> GenericSmartChan<T> for SharedChan<T> {\n-    #[cfg(stage0)] // odd type checking errors\n-    fn try_send(&self, _val: T) -> bool {\n-        fail!()\n-    }\n-\n-    #[cfg(not(stage0))]\n     fn try_send(&self, val: T) -> bool {\n         unsafe {\n             let (next_pone, next_cone) = oneshot();\n@@ -448,12 +442,6 @@ impl<T: Owned> GenericPort<T> for SharedPort<T> {\n         }\n     }\n \n-    #[cfg(stage0)] // odd type checking errors\n-    fn try_recv(&self) -> Option<T> {\n-        fail!()\n-    }\n-\n-    #[cfg(not(stage0))]\n     fn try_recv(&self) -> Option<T> {\n         unsafe {\n             let (next_link_port, next_link_chan) = oneshot();"}, {"sha": "f62c9fb2c660c42b88f9d6cb8cecf16b370df69a", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=5e7c5d6c3d532e7b536b76044cd47b72b8eadaad", "patch": "@@ -10,11 +10,24 @@\n \n //! The local, garbage collected heap\n \n+use libc;\n use libc::{c_void, uintptr_t, size_t};\n use ops::Drop;\n+use repr::BoxRepr;\n+use rt;\n+use rt::OldTaskContext;\n+use rt::local::Local;\n+use rt::task::Task;\n \n type MemoryRegion = c_void;\n-type BoxedRegion = c_void;\n+\n+struct Env { priv opaque: () }\n+\n+struct BoxedRegion {\n+    env: *Env,\n+    backing_region: *MemoryRegion,\n+    live_allocs: *BoxRepr\n+}\n \n pub type OpaqueBox = c_void;\n pub type TypeDesc = c_void;\n@@ -71,6 +84,40 @@ impl Drop for LocalHeap {\n     }\n }\n \n+// A little compatibility function\n+pub unsafe fn local_free(ptr: *libc::c_char) {\n+    match rt::context() {\n+        OldTaskContext => {\n+            rust_upcall_free_noswitch(ptr);\n+\n+            extern {\n+                #[fast_ffi]\n+                unsafe fn rust_upcall_free_noswitch(ptr: *libc::c_char);\n+            }\n+        }\n+        _ => {\n+            do Local::borrow::<Task,()> |task| {\n+                task.heap.free(ptr as *libc::c_void);\n+            }\n+        }\n+    }\n+}\n+\n+pub fn live_allocs() -> *BoxRepr {\n+    let region = match rt::context() {\n+        OldTaskContext => {\n+            unsafe { rust_current_boxed_region() }\n+        }\n+        _ => {\n+            do Local::borrow::<Task, *BoxedRegion> |task| {\n+                task.heap.boxed_region\n+            }\n+        }\n+    };\n+\n+    return unsafe { (*region).live_allocs };\n+}\n+\n extern {\n     fn rust_new_memory_region(synchronized: uintptr_t,\n                                detailed_leaks: uintptr_t,\n@@ -86,4 +133,5 @@ extern {\n                                  ptr: *OpaqueBox,\n                                  size: size_t) -> *OpaqueBox;\n     fn rust_boxed_region_free(region: *BoxedRegion, box: *OpaqueBox);\n+    fn rust_current_boxed_region() -> *BoxedRegion;\n }"}, {"sha": "fec555e8afd4dfd65603c920b3fabaea803e5315", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=5e7c5d6c3d532e7b536b76044cd47b72b8eadaad", "patch": "@@ -124,7 +124,7 @@ mod thread;\n pub mod env;\n \n /// The local, managed heap\n-mod local_heap;\n+pub mod local_heap;\n \n /// The Logger trait and implementations\n pub mod logging;"}, {"sha": "68f7eb659b013b41fb4a4236694e60a2e0e83a19", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=5e7c5d6c3d532e7b536b76044cd47b72b8eadaad", "patch": "@@ -15,6 +15,7 @@\n \n use borrow;\n use cast::transmute;\n+use cleanup;\n use libc::{c_void, uintptr_t};\n use ptr;\n use prelude::*;\n@@ -118,6 +119,10 @@ impl Task {\n             }\n             _ => ()\n         }\n+\n+        // Destroy remaining boxes\n+        unsafe { cleanup::annihilate(); }\n+\n         self.destroyed = true;\n     }\n }\n@@ -269,4 +274,20 @@ mod test {\n             assert!(res.is_err());\n         }\n     }\n+\n+    #[test]\n+    fn heap_cycles() {\n+        use option::{Option, Some, None};\n+\n+        do run_in_newsched_task {\n+            struct List {\n+                next: Option<@mut List>,\n+            }\n+\n+            let a = @mut List { next: None };\n+            let b = @mut List { next: Some(a) };\n+\n+            a.next = Some(b);\n+        }\n+    }\n }"}, {"sha": "523c5d633cf4400e984b3920cc917ff2307ad359", "filename": "src/libstd/sys.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=5e7c5d6c3d532e7b536b76044cd47b72b8eadaad", "patch": "@@ -216,12 +216,15 @@ pub fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n                         task.logger.log(Left(outmsg.take()));\n                     }\n                 } else {\n-                    rtdebug!(\"%s\", outmsg);\n+                    rterrln!(\"%s\", outmsg);\n                 }\n \n                 gc::cleanup_stack_for_failure();\n \n                 let task = Local::unsafe_borrow::<Task>();\n+                if (*task).unwinder.unwinding {\n+                    rtabort!(\"unwinding again\");\n+                }\n                 (*task).unwinder.begin_unwind();\n             }\n         }"}, {"sha": "f750b31a466b9b77c05af797947bc1708406f8ba", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=5e7c5d6c3d532e7b536b76044cd47b72b8eadaad", "patch": "@@ -43,9 +43,6 @@ pub mod rustrt {\n                                               size: uintptr_t)\n                                            -> *c_char;\n \n-        #[fast_ffi]\n-        unsafe fn rust_upcall_free_noswitch(ptr: *c_char);\n-\n         #[rust_stack]\n         fn rust_try_get_task() -> *rust_task;\n \n@@ -105,16 +102,7 @@ pub unsafe fn local_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n // problem occurs, call exit instead.\n #[lang=\"free\"]\n pub unsafe fn local_free(ptr: *c_char) {\n-    match context() {\n-        OldTaskContext => {\n-            rustrt::rust_upcall_free_noswitch(ptr);\n-        }\n-        _ => {\n-            do Local::borrow::<Task,()> |task| {\n-                task.heap.free(ptr as *c_void);\n-            }\n-        }\n-    }\n+    ::rt::local_heap::local_free(ptr);\n }\n \n #[lang=\"borrow_as_imm\"]\n@@ -162,6 +150,11 @@ pub unsafe fn strdup_uniq(ptr: *c_uchar, len: uint) -> ~str {\n     str::raw::from_buf_len(ptr, len)\n }\n \n+#[lang=\"annihilate\"]\n+pub unsafe fn annihilate() {\n+    ::cleanup::annihilate()\n+}\n+\n #[lang=\"start\"]\n pub fn start(main: *u8, argc: int, argv: **c_char,\n              crate_map: *u8) -> int {"}, {"sha": "51e2849eb548043dfa6aef1cfdd351a22488b346", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=5e7c5d6c3d532e7b536b76044cd47b72b8eadaad", "patch": "@@ -882,6 +882,12 @@ rust_delete_memory_region(memory_region *region) {\n     delete region;\n }\n \n+extern \"C\" CDECL boxed_region*\n+rust_current_boxed_region() {\n+    rust_task *task = rust_get_current_task();\n+    return &task->boxed;\n+}\n+\n extern \"C\" CDECL boxed_region*\n rust_new_boxed_region(memory_region *region,\n                       uintptr_t poison_on_free) {"}, {"sha": "d85700435e008c41c4e8f5293366dd8b8a28aeda", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/5e7c5d6c3d532e7b536b76044cd47b72b8eadaad/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=5e7c5d6c3d532e7b536b76044cd47b72b8eadaad", "patch": "@@ -244,4 +244,5 @@ rust_drop_env_lock\n rust_update_log_settings\n rust_running_on_valgrind\n rust_get_num_cpus\n-rust_get_global_args_ptr\n\\ No newline at end of file\n+rust_get_global_args_ptr\n+rust_current_boxed_region\n\\ No newline at end of file"}]}