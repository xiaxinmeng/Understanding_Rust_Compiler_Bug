{"sha": "bd10af127ee4acbc6cd9e3221f78620d4f1e83be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMTBhZjEyN2VlNGFjYmM2Y2Q5ZTMyMjFmNzg2MjBkNGYxZTgzYmU=", "commit": {"author": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-05-25T18:41:26Z"}, "committer": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-05-30T22:49:26Z"}, "message": "utils: Move codemap related utilities to a dedicated module\n\nThis commit adds a `codemap` module, and moves the `CodemapSpanUtils`\nadded in #857 to it. This is preparation for adding more `Codemap`\nspecific utilities.\n\nRefs #434", "tree": {"sha": "6733df0129c8fee24e065dd50990f7d2a77f9317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6733df0129c8fee24e065dd50990f7d2a77f9317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd10af127ee4acbc6cd9e3221f78620d4f1e83be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd10af127ee4acbc6cd9e3221f78620d4f1e83be", "html_url": "https://github.com/rust-lang/rust/commit/bd10af127ee4acbc6cd9e3221f78620d4f1e83be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/comments", "author": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80c56a01ff9722ab0e52a8bd73b50603bc5a9a96", "url": "https://api.github.com/repos/rust-lang/rust/commits/80c56a01ff9722ab0e52a8bd73b50603bc5a9a96", "html_url": "https://github.com/rust-lang/rust/commit/80c56a01ff9722ab0e52a8bd73b50603bc5a9a96"}], "stats": {"total": 103, "additions": 56, "deletions": 47}, "files": [{"sha": "c70decd84227170f94263ed1730b4aa646af4206", "filename": "src/codemap.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodemap.rs?ref=bd10af127ee4acbc6cd9e3221f78620d4f1e83be", "patch": "@@ -0,0 +1,39 @@\n+use syntax::codemap::{BytePos, CodeMap, Span};\n+\n+use comment::FindUncommented;\n+\n+pub trait SpanUtils {\n+    fn span_after(&self, original: Span, needle: &str) -> BytePos;\n+    fn span_after_last(&self, original: Span, needle: &str) -> BytePos;\n+    fn span_before(&self, original: Span, needle: &str) -> BytePos;\n+}\n+\n+impl SpanUtils for CodeMap {\n+    #[inline]\n+    fn span_after(&self, original: Span, needle: &str) -> BytePos {\n+        let snippet = self.span_to_snippet(original).unwrap();\n+        let offset = snippet.find_uncommented(needle).unwrap() + needle.len();\n+\n+        original.lo + BytePos(offset as u32)\n+    }\n+\n+    #[inline]\n+    fn span_after_last(&self, original: Span, needle: &str) -> BytePos {\n+        let snippet = self.span_to_snippet(original).unwrap();\n+        let mut offset = 0;\n+\n+        while let Some(additional_offset) = snippet[offset..].find_uncommented(needle) {\n+            offset += additional_offset + needle.len();\n+        }\n+\n+        original.lo + BytePos(offset as u32)\n+    }\n+\n+    #[inline]\n+    fn span_before(&self, original: Span, needle: &str) -> BytePos {\n+        let snippet = self.span_to_snippet(original).unwrap();\n+        let offset = snippet.find_uncommented(needle).unwrap();\n+\n+        original.lo + BytePos(offset as u32)\n+    }\n+}"}, {"sha": "af0492b291359ae1cb46cfce0faff64f94bd252c", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=bd10af127ee4acbc6cd9e3221f78620d4f1e83be", "patch": "@@ -16,12 +16,13 @@ use std::iter::ExactSizeIterator;\n use std::fmt::Write;\n \n use {Indent, Spanned};\n+use codemap::SpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n             DefinitiveListTactic, definitive_tactic, ListItem, format_item_list};\n use string::{StringFormat, rewrite_string};\n-use utils::{CodeMapSpanUtils, extra_offset, last_line_width, wrap_str, binary_search,\n-            first_line_width, semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr};\n+use utils::{extra_offset, last_line_width, wrap_str, binary_search, first_line_width,\n+            semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr};\n use visitor::FmtVisitor;\n use config::{Config, StructLitStyle, MultilineStyle, ElseIfBraceStyle, ControlBraceStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};"}, {"sha": "89030392774c36fd52cb54abe9079e19cde2b7e3", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=bd10af127ee4acbc6cd9e3221f78620d4f1e83be", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n use Indent;\n+use codemap::SpanUtils;\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, definitive_tactic};\n use types::rewrite_path;\n-use utils::CodeMapSpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n \n use syntax::ast;"}, {"sha": "d83ad3c88ee83d1767739e23439de7569ff6f923", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=bd10af127ee4acbc6cd9e3221f78620d4f1e83be", "patch": "@@ -11,8 +11,9 @@\n // Formatting top-level items - functions, structs, enums, traits, impls.\n \n use Indent;\n-use utils::{CodeMapSpanUtils, format_mutability, format_visibility, contains_skip, end_typaram,\n-            wrap_str, last_line_width, semicolon_for_expr, format_unsafety, trim_newlines};\n+use codemap::SpanUtils;\n+use utils::{format_mutability, format_visibility, contains_skip, end_typaram, wrap_str,\n+            last_line_width, semicolon_for_expr, format_unsafety, trim_newlines};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n             DefinitiveListTactic, ListTactic, definitive_tactic, format_item_list};\n use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs};"}, {"sha": "8df2c069bcc150d235f687fa2eb202ac6ab6ec54", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bd10af127ee4acbc6cd9e3221f78620d4f1e83be", "patch": "@@ -52,6 +52,7 @@ pub use self::summary::Summary;\n #[macro_use]\n mod utils;\n pub mod config;\n+pub mod codemap;\n pub mod filemap;\n pub mod visitor;\n mod checkstyle;"}, {"sha": "9cb0f8619c0b2d6247ad92cbd53bd3bfa070eb1e", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=bd10af127ee4acbc6cd9e3221f78620d4f1e83be", "patch": "@@ -25,10 +25,11 @@ use syntax::parse::tts_to_parser;\n use syntax::codemap::{mk_sp, BytePos};\n \n use Indent;\n+use codemap::SpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n use expr::{rewrite_call, rewrite_array};\n use comment::{FindUncommented, contains_comment};\n-use utils::{CodeMapSpanUtils, wrap_str};\n+use utils::wrap_str;\n \n const FORCED_BRACKET_MACROS: &'static [&'static str] = &[\"vec!\"];\n "}, {"sha": "a0b15a0f8c9e3be98f7ec7f07afa86184bbf4507", "filename": "src/patterns.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=bd10af127ee4acbc6cd9e3221f78620d4f1e83be", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n use Indent;\n+use codemap::SpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{CodeMapSpanUtils, wrap_str, format_mutability};\n+use utils::{wrap_str, format_mutability};\n use lists::{format_item_list, itemize_list};\n use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple};\n use types::rewrite_path;"}, {"sha": "b1b9b749dd8e19a4cfd5f3c033ab953a0d862877", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=bd10af127ee4acbc6cd9e3221f78620d4f1e83be", "patch": "@@ -17,9 +17,10 @@ use syntax::codemap::{self, Span, BytePos};\n use syntax::abi;\n \n use {Indent, Spanned};\n+use codemap::SpanUtils;\n use lists::{format_item_list, itemize_list, format_fn_args};\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{CodeMapSpanUtils, extra_offset, format_mutability, wrap_str};\n+use utils::{extra_offset, format_mutability, wrap_str};\n use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple};\n use config::TypeDensity;\n "}, {"sha": "82fbb8d5925ade33b22c260219efe9a00c671bd7", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=bd10af127ee4acbc6cd9e3221f78620d4f1e83be", "patch": "@@ -14,51 +14,14 @@ use std::cmp::Ordering;\n use itertools::Itertools;\n \n use syntax::ast::{self, Visibility, Attribute, MetaItem, MetaItemKind, Path};\n-use syntax::codemap::{CodeMap, Span, BytePos};\n+use syntax::codemap::BytePos;\n use syntax::abi;\n \n use Indent;\n-use comment::FindUncommented;\n use rewrite::{Rewrite, RewriteContext};\n \n use SKIP_ANNOTATION;\n \n-pub trait CodeMapSpanUtils {\n-    fn span_after(&self, original: Span, needle: &str) -> BytePos;\n-    fn span_after_last(&self, original: Span, needle: &str) -> BytePos;\n-    fn span_before(&self, original: Span, needle: &str) -> BytePos;\n-}\n-\n-impl CodeMapSpanUtils for CodeMap {\n-    #[inline]\n-    fn span_after(&self, original: Span, needle: &str) -> BytePos {\n-        let snippet = self.span_to_snippet(original).unwrap();\n-        let offset = snippet.find_uncommented(needle).unwrap() + needle.len();\n-\n-        original.lo + BytePos(offset as u32)\n-    }\n-\n-    #[inline]\n-    fn span_after_last(&self, original: Span, needle: &str) -> BytePos {\n-        let snippet = self.span_to_snippet(original).unwrap();\n-        let mut offset = 0;\n-\n-        while let Some(additional_offset) = snippet[offset..].find_uncommented(needle) {\n-            offset += additional_offset + needle.len();\n-        }\n-\n-        original.lo + BytePos(offset as u32)\n-    }\n-\n-    #[inline]\n-    fn span_before(&self, original: Span, needle: &str) -> BytePos {\n-        let snippet = self.span_to_snippet(original).unwrap();\n-        let offset = snippet.find_uncommented(needle).unwrap();\n-\n-        original.lo + BytePos(offset as u32)\n-    }\n-}\n-\n // Computes the length of a string's last line, minus offset.\n #[inline]\n pub fn extra_offset(text: &str, offset: Indent) -> usize {"}, {"sha": "c2ebcd17119239964dda0e7a585ddeb225850cd2", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd10af127ee4acbc6cd9e3221f78620d4f1e83be/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=bd10af127ee4acbc6cd9e3221f78620d4f1e83be", "patch": "@@ -15,7 +15,8 @@ use syntax::parse::ParseSess;\n use strings::string_buffer::StringBuffer;\n \n use Indent;\n-use utils::{self, CodeMapSpanUtils};\n+use utils;\n+use codemap::SpanUtils;\n use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;"}]}