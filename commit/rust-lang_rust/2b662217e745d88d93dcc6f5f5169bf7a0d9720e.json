{"sha": "2b662217e745d88d93dcc6f5f5169bf7a0d9720e", "node_id": "C_kwDOAAsO6NoAKDJiNjYyMjE3ZTc0NWQ4OGQ5M2RjYzZmNWY1MTY5YmY3YTBkOTcyMGU", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2021-12-29T20:28:31Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2021-12-29T20:47:49Z"}, "message": "Mark drop calls in landing pads cold instead of noinline\n\nNow that deferred inlining has been disabled in LLVM,\nthis shouldn't cause catastrophic size blowup.", "tree": {"sha": "0e471ecb5e4a57ae2f5f3aa70fdfe5895cf99e91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e471ecb5e4a57ae2f5f3aa70fdfe5895cf99e91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b662217e745d88d93dcc6f5f5169bf7a0d9720e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b662217e745d88d93dcc6f5f5169bf7a0d9720e", "html_url": "https://github.com/rust-lang/rust/commit/2b662217e745d88d93dcc6f5f5169bf7a0d9720e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b662217e745d88d93dcc6f5f5169bf7a0d9720e/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ae550842635dce84811198446fe87e830de500b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ae550842635dce84811198446fe87e830de500b", "html_url": "https://github.com/rust-lang/rust/commit/7ae550842635dce84811198446fe87e830de500b"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "997213d43e8c0499e4851d435f23991d42ad34f1", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b662217e745d88d93dcc6f5f5169bf7a0d9720e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b662217e745d88d93dcc6f5f5169bf7a0d9720e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=2b662217e745d88d93dcc6f5f5169bf7a0d9720e", "patch": "@@ -1404,7 +1404,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         self.cx\n     }\n \n-    fn do_not_inline(&mut self, _llret: RValue<'gcc>) {\n+    fn mark_callsite_cold(&mut self, _llret: RValue<'gcc>) {\n         unimplemented!();\n     }\n "}, {"sha": "107300ed304f64b4a001c2ce0e1f2c59024c844b", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b662217e745d88d93dcc6f5f5169bf7a0d9720e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b662217e745d88d93dcc6f5f5169bf7a0d9720e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=2b662217e745d88d93dcc6f5f5169bf7a0d9720e", "patch": "@@ -1201,8 +1201,8 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         unsafe { llvm::LLVMBuildZExt(self.llbuilder, val, dest_ty, UNNAMED) }\n     }\n \n-    fn do_not_inline(&mut self, llret: &'ll Value) {\n-        llvm::Attribute::NoInline.apply_callsite(llvm::AttributePlace::Function, llret);\n+    fn mark_callsite_cold(&mut self, llret: &'ll Value) {\n+        llvm::Attribute::Cold.apply_callsite(llvm::AttributePlace::Function, llret);\n     }\n }\n "}, {"sha": "8cefd415e28b84802635fa0d4d50fc14643336a9", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b662217e745d88d93dcc6f5f5169bf7a0d9720e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b662217e745d88d93dcc6f5f5169bf7a0d9720e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=2b662217e745d88d93dcc6f5f5169bf7a0d9720e", "patch": "@@ -160,11 +160,8 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n             let llret = bx.call(fn_ty, fn_ptr, &llargs, self.funclet(fx));\n             bx.apply_attrs_callsite(&fn_abi, llret);\n             if fx.mir[self.bb].is_cleanup {\n-                // Cleanup is always the cold path. Don't inline\n-                // drop glue. Also, when there is a deeply-nested\n-                // struct, there are \"symmetry\" issues that cause\n-                // exponential inlining - see issue #41696.\n-                bx.do_not_inline(llret);\n+                // Cleanup is always the cold path.\n+                bx.mark_callsite_cold(llret);\n             }\n \n             if let Some((ret_dest, target)) = destination {"}, {"sha": "c1cdff3addaddee54fd1c2ae8816d2364784427e", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b662217e745d88d93dcc6f5f5169bf7a0d9720e/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b662217e745d88d93dcc6f5f5169bf7a0d9720e/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=2b662217e745d88d93dcc6f5f5169bf7a0d9720e", "patch": "@@ -311,5 +311,5 @@ pub trait BuilderMethods<'a, 'tcx>:\n     ) -> Self::Value;\n     fn zext(&mut self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;\n \n-    fn do_not_inline(&mut self, llret: Self::Value);\n+    fn mark_callsite_cold(&mut self, llret: Self::Value);\n }"}, {"sha": "0bf2941374a662cf3821063222a86195cb01c044", "filename": "src/test/codegen/unwind-landingpad-cold.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2b662217e745d88d93dcc6f5f5169bf7a0d9720e/src%2Ftest%2Fcodegen%2Funwind-landingpad-cold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b662217e745d88d93dcc6f5f5169bf7a0d9720e/src%2Ftest%2Fcodegen%2Funwind-landingpad-cold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-landingpad-cold.rs?ref=2b662217e745d88d93dcc6f5f5169bf7a0d9720e", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags: -Cno-prepopulate-passes\n+#![crate_type = \"lib\"]\n+\n+// This test checks that drop calls in unwind landing pads\n+// get the `cold` attribute.\n+\n+// CHECK-LABEL: @check_cold\n+// CHECK: call void {{.+}}drop_in_place{{.+}} [[ATTRIBUTES:#[0-9]+]]\n+// CHECK: attributes [[ATTRIBUTES]] = { cold }\n+#[no_mangle]\n+pub fn check_cold(f: fn(), x: Box<u32>) {\n+    // this may unwind\n+    f();\n+}"}, {"sha": "d641c908ea99aced7e685b25b6e579f3ca3e08bc", "filename": "src/test/codegen/unwind-landingpad-inline.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2b662217e745d88d93dcc6f5f5169bf7a0d9720e/src%2Ftest%2Fcodegen%2Funwind-landingpad-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b662217e745d88d93dcc6f5f5169bf7a0d9720e/src%2Ftest%2Fcodegen%2Funwind-landingpad-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-landingpad-inline.rs?ref=2b662217e745d88d93dcc6f5f5169bf7a0d9720e", "patch": "@@ -0,0 +1,22 @@\n+// no-system-llvm: needs patch for Rust alloc/dealloc functions\n+// compile-flags: -Copt-level=3\n+#![crate_type = \"lib\"]\n+\n+// This test checks that we can inline drop_in_place in\n+// unwind landing pads. Without this, the box pointers escape,\n+// and LLVM will not optimize out the pointer comparison.\n+// See https://github.com/rust-lang/rust/issues/46515\n+\n+// Everything should be optimized out.\n+// CHECK-LABEL: @check_no_escape_in_landingpad\n+// CHECK: start:\n+// CHECK-NEXT: ret void\n+#[no_mangle]\n+pub fn check_no_escape_in_landingpad(f: fn()) {\n+    let x = &*Box::new(0);\n+    let y = &*Box::new(0);\n+\n+    if x as *const _ == y as *const _ {\n+        f();\n+    }\n+}"}]}