{"sha": "64c09694a6ecc434cd3a61ade89beb1de17770c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YzA5Njk0YTZlY2M0MzRjZDNhNjFhZGU4OWJlYjFkZTE3NzcwYzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-18T04:29:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-18T04:29:01Z"}, "message": "Auto merge of #64570 - tmandry:rollup-3pg02lj, r=tmandry\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #64486 (Print out more information for `-Zunpretty=expanded,hygiene`)\n - #64503 (rename Allocation::retag -> with_tags_and_extra)\n - #64516 (update Nomicon and Reference)\n - #64528 (Load proc macro metadata in the correct order.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "472f37ba762da52367a989cd9f61668db4e239e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/472f37ba762da52367a989cd9f61668db4e239e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64c09694a6ecc434cd3a61ade89beb1de17770c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64c09694a6ecc434cd3a61ade89beb1de17770c5", "html_url": "https://github.com/rust-lang/rust/commit/64c09694a6ecc434cd3a61ade89beb1de17770c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64c09694a6ecc434cd3a61ade89beb1de17770c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "528379121ceb5fca5382b4337be7ac064890ec8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/528379121ceb5fca5382b4337be7ac064890ec8c", "html_url": "https://github.com/rust-lang/rust/commit/528379121ceb5fca5382b4337be7ac064890ec8c"}, {"sha": "76d34f343508e7009c8c3ee40819c8d5031b6d50", "url": "https://api.github.com/repos/rust-lang/rust/commits/76d34f343508e7009c8c3ee40819c8d5031b6d50", "html_url": "https://github.com/rust-lang/rust/commit/76d34f343508e7009c8c3ee40819c8d5031b6d50"}], "stats": {"total": 203, "additions": 143, "deletions": 60}, "files": [{"sha": "4374786f0b4bf0606b35d5c30a9681f342e5707b", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=64c09694a6ecc434cd3a61ade89beb1de17770c5", "patch": "@@ -1 +1 @@\n-Subproject commit 38b9a76bc8b59ac862663807fc51c9b757337fd6\n+Subproject commit 4374786f0b4bf0606b35d5c30a9681f342e5707b"}, {"sha": "fa5dfb832ef8a7568e17dabf612f486d641ff4ac", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=64c09694a6ecc434cd3a61ade89beb1de17770c5", "patch": "@@ -1 +1 @@\n-Subproject commit 1944efed35989ba57fa397c0724c4921310311fc\n+Subproject commit fa5dfb832ef8a7568e17dabf612f486d641ff4ac"}, {"sha": "15e6cb6bcabaeab755d8bb9a413647675a87b634", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=64c09694a6ecc434cd3a61ade89beb1de17770c5", "patch": "@@ -130,9 +130,9 @@ impl<Tag> Allocation<Tag> {\n     }\n }\n \n-impl Allocation<()> {\n+impl Allocation<(), ()> {\n     /// Add Tag and Extra fields\n-    pub fn retag<T, E>(\n+    pub fn with_tags_and_extra<T, E>(\n         self,\n         mut tagger: impl FnMut(AllocId) -> T,\n         extra: E,"}, {"sha": "fa9504e22019ebfe585ca78846509f892675f7f9", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=64c09694a6ecc434cd3a61ade89beb1de17770c5", "patch": "@@ -326,6 +326,7 @@ impl<'hir> pprust::PpAnn for IdentifiedAnnotation<'hir> {\n     }\n     fn post(&self, s: &mut pprust::State<'_>, node: pprust::AnnNode<'_>) {\n         match node {\n+            pprust::AnnNode::Crate(_) |\n             pprust::AnnNode::Ident(_) |\n             pprust::AnnNode::Name(_) => {},\n \n@@ -431,14 +432,18 @@ impl<'a> pprust::PpAnn for HygieneAnnotation<'a> {\n         match node {\n             pprust::AnnNode::Ident(&ast::Ident { name, span }) => {\n                 s.s.space();\n-                // FIXME #16420: this doesn't display the connections\n-                // between syntax contexts\n                 s.synth_comment(format!(\"{}{:?}\", name.as_u32(), span.ctxt()))\n             }\n             pprust::AnnNode::Name(&name) => {\n                 s.s.space();\n                 s.synth_comment(name.as_u32().to_string())\n             }\n+            pprust::AnnNode::Crate(_) => {\n+                s.s.hardbreak();\n+                let verbose = self.sess.verbose();\n+                s.synth_comment(syntax_pos::hygiene::debug_hygiene_data(verbose));\n+                s.s.hardbreak_if_not_bol();\n+            }\n             _ => {}\n         }\n     }"}, {"sha": "34c84b1d79d4b0030a418cb4328bb94bb407f952", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=64c09694a6ecc434cd3a61ade89beb1de17770c5", "patch": "@@ -489,7 +489,11 @@ impl<'a, 'tcx> CrateMetadata {\n \n     fn raw_proc_macro(&self, id: DefIndex) -> &ProcMacro {\n         // DefIndex's in root.proc_macro_data have a one-to-one correspondence\n-        // with items in 'raw_proc_macros'\n+        // with items in 'raw_proc_macros'.\n+        // NOTE: If you update the order of macros in 'proc_macro_data' for any reason,\n+        // you must also update src/libsyntax_ext/proc_macro_harness.rs\n+        // Failing to do so will result in incorrect data being associated\n+        // with proc macros when deserialized.\n         let pos = self.root.proc_macro_data.unwrap().decode(self).position(|i| i == id).unwrap();\n         &self.raw_proc_macros.unwrap()[pos]\n     }"}, {"sha": "b634dcca7fca24215ed3a3ae0e0e8569a46192f1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=64c09694a6ecc434cd3a61ade89beb1de17770c5", "patch": "@@ -2387,7 +2387,7 @@ pub enum ItemKind {\n     ),\n     /// A macro invocation.\n     ///\n-    /// E.g., `macro_rules! foo { .. }` or `foo!(..)`.\n+    /// E.g., `foo!(..)`.\n     Mac(Mac),\n \n     /// A macro definition."}, {"sha": "bf36c0d2f56581286703234e657585446f85175f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=64c09694a6ecc434cd3a61ade89beb1de17770c5", "patch": "@@ -35,6 +35,7 @@ pub enum AnnNode<'a> {\n     SubItem(ast::NodeId),\n     Expr(&'a ast::Expr),\n     Pat(&'a ast::Pat),\n+    Crate(&'a ast::Crate),\n }\n \n pub trait PpAnn {\n@@ -140,6 +141,7 @@ pub fn print_crate<'a>(cm: &'a SourceMap,\n \n     s.print_mod(&krate.module, &krate.attrs);\n     s.print_remaining_comments();\n+    s.ann.post(&mut s, AnnNode::Crate(krate));\n     s.s.eof()\n }\n \n@@ -1369,8 +1371,12 @@ impl<'a> State<'a> {\n                 }\n             }\n             ast::ItemKind::MacroDef(ref macro_def) => {\n-                let (kw, has_bang) =\n-                    if macro_def.legacy { (\"macro_rules\", true) } else { (\"macro\", false) };\n+                let (kw, has_bang) = if macro_def.legacy {\n+                    (\"macro_rules\", true)\n+                } else {\n+                    self.print_visibility(&item.vis);\n+                    (\"macro\", false)\n+                };\n                 self.print_mac_common(\n                     Some(MacHeader::Keyword(kw)),\n                     has_bang,"}, {"sha": "f33c813d86cfe4e8aea1fdae5974e06e6a30af0a", "filename": "src/libsyntax_ext/proc_macro_harness.rs", "status": "modified", "additions": 62, "deletions": 47, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_harness.rs?ref=64c09694a6ecc434cd3a61ade89beb1de17770c5", "patch": "@@ -20,15 +20,24 @@ struct ProcMacroDerive {\n     attrs: Vec<ast::Name>,\n }\n \n+enum ProcMacroDefType {\n+    Attr,\n+    Bang\n+}\n+\n struct ProcMacroDef {\n     function_name: Ident,\n     span: Span,\n+    def_type: ProcMacroDefType\n+}\n+\n+enum ProcMacro {\n+    Derive(ProcMacroDerive),\n+    Def(ProcMacroDef)\n }\n \n struct CollectProcMacros<'a> {\n-    derives: Vec<ProcMacroDerive>,\n-    attr_macros: Vec<ProcMacroDef>,\n-    bang_macros: Vec<ProcMacroDef>,\n+    macros: Vec<ProcMacro>,\n     in_root: bool,\n     handler: &'a errors::Handler,\n     is_proc_macro_crate: bool,\n@@ -46,22 +55,22 @@ pub fn inject(sess: &ParseSess,\n     let ecfg = ExpansionConfig::default(\"proc_macro\".to_string());\n     let mut cx = ExtCtxt::new(sess, ecfg, resolver);\n \n-    let (derives, attr_macros, bang_macros) = {\n-        let mut collect = CollectProcMacros {\n-            derives: Vec::new(),\n-            attr_macros: Vec::new(),\n-            bang_macros: Vec::new(),\n-            in_root: true,\n-            handler,\n-            is_proc_macro_crate,\n-            is_test_crate,\n-        };\n-        if has_proc_macro_decls || is_proc_macro_crate {\n-            visit::walk_crate(&mut collect, &krate);\n-        }\n-        (collect.derives, collect.attr_macros, collect.bang_macros)\n+    let mut collect = CollectProcMacros {\n+        macros: Vec::new(),\n+        in_root: true,\n+        handler,\n+        is_proc_macro_crate,\n+        is_test_crate,\n     };\n \n+    if has_proc_macro_decls || is_proc_macro_crate {\n+        visit::walk_crate(&mut collect, &krate);\n+    }\n+    // NOTE: If you change the order of macros in this vec\n+    // for any reason, you must also update 'raw_proc_macro'\n+    // in src/librustc_metadata/decoder.rs\n+    let macros = collect.macros;\n+\n     if !is_proc_macro_crate {\n         return krate\n     }\n@@ -74,7 +83,7 @@ pub fn inject(sess: &ParseSess,\n         return krate;\n     }\n \n-    krate.module.items.push(mk_decls(&mut cx, &derives, &attr_macros, &bang_macros));\n+    krate.module.items.push(mk_decls(&mut cx, &macros));\n \n     krate\n }\n@@ -161,12 +170,12 @@ impl<'a> CollectProcMacros<'a> {\n         };\n \n         if self.in_root && item.vis.node.is_pub() {\n-            self.derives.push(ProcMacroDerive {\n+            self.macros.push(ProcMacro::Derive(ProcMacroDerive {\n                 span: item.span,\n                 trait_name: trait_ident.name,\n                 function_name: item.ident,\n                 attrs: proc_attrs,\n-            });\n+            }));\n         } else {\n             let msg = if !self.in_root {\n                 \"functions tagged with `#[proc_macro_derive]` must \\\n@@ -180,10 +189,11 @@ impl<'a> CollectProcMacros<'a> {\n \n     fn collect_attr_proc_macro(&mut self, item: &'a ast::Item) {\n         if self.in_root && item.vis.node.is_pub() {\n-            self.attr_macros.push(ProcMacroDef {\n+            self.macros.push(ProcMacro::Def(ProcMacroDef {\n                 span: item.span,\n                 function_name: item.ident,\n-            });\n+                def_type: ProcMacroDefType::Attr\n+            }));\n         } else {\n             let msg = if !self.in_root {\n                 \"functions tagged with `#[proc_macro_attribute]` must \\\n@@ -197,10 +207,11 @@ impl<'a> CollectProcMacros<'a> {\n \n     fn collect_bang_proc_macro(&mut self, item: &'a ast::Item) {\n         if self.in_root && item.vis.node.is_pub() {\n-            self.bang_macros.push(ProcMacroDef {\n+            self.macros.push(ProcMacro::Def(ProcMacroDef {\n                 span: item.span,\n                 function_name: item.ident,\n-            });\n+                def_type: ProcMacroDefType::Bang\n+            }));\n         } else {\n             let msg = if !self.in_root {\n                 \"functions tagged with `#[proc_macro]` must \\\n@@ -322,9 +333,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n //      }\n fn mk_decls(\n     cx: &mut ExtCtxt<'_>,\n-    custom_derives: &[ProcMacroDerive],\n-    custom_attrs: &[ProcMacroDef],\n-    custom_macros: &[ProcMacroDef],\n+    macros: &[ProcMacro],\n ) -> P<ast::Item> {\n     let expn_id = cx.resolver.expansion_for_ast_pass(\n         DUMMY_SP,\n@@ -354,26 +363,32 @@ fn mk_decls(\n         let proc_macro_ty_method_path = |method| cx.expr_path(cx.path(span, vec![\n             proc_macro, bridge, client, proc_macro_ty, method,\n         ]));\n-        custom_derives.iter().map(|cd| {\n-            cx.expr_call(span, proc_macro_ty_method_path(custom_derive), vec![\n-                cx.expr_str(cd.span, cd.trait_name),\n-                cx.expr_vec_slice(\n-                    span,\n-                    cd.attrs.iter().map(|&s| cx.expr_str(cd.span, s)).collect::<Vec<_>>()\n-                ),\n-                local_path(cd.span, cd.function_name),\n-            ])\n-        }).chain(custom_attrs.iter().map(|ca| {\n-            cx.expr_call(span, proc_macro_ty_method_path(attr), vec![\n-                cx.expr_str(ca.span, ca.function_name.name),\n-                local_path(ca.span, ca.function_name),\n-            ])\n-        })).chain(custom_macros.iter().map(|cm| {\n-            cx.expr_call(span, proc_macro_ty_method_path(bang), vec![\n-                cx.expr_str(cm.span, cm.function_name.name),\n-                local_path(cm.span, cm.function_name),\n-            ])\n-        })).collect()\n+        macros.iter().map(|m| {\n+            match m {\n+                ProcMacro::Derive(cd) => {\n+                    cx.expr_call(span, proc_macro_ty_method_path(custom_derive), vec![\n+                        cx.expr_str(cd.span, cd.trait_name),\n+                        cx.expr_vec_slice(\n+                            span,\n+                            cd.attrs.iter().map(|&s| cx.expr_str(cd.span, s)).collect::<Vec<_>>()\n+                        ),\n+                        local_path(cd.span, cd.function_name),\n+                    ])\n+                },\n+                ProcMacro::Def(ca) => {\n+                    let ident = match ca.def_type {\n+                        ProcMacroDefType::Attr => attr,\n+                        ProcMacroDefType::Bang => bang\n+                    };\n+\n+                    cx.expr_call(span, proc_macro_ty_method_path(ident), vec![\n+                        cx.expr_str(ca.span, ca.function_name.name),\n+                        local_path(ca.span, ca.function_name),\n+                    ])\n+\n+                }\n+            }\n+        }).collect()\n     };\n \n     let decls_static = cx.item_static("}, {"sha": "e28d93267579a6d9026eb82e520d22a05465af89", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=64c09694a6ecc434cd3a61ade89beb1de17770c5", "patch": "@@ -343,6 +343,38 @@ pub fn update_dollar_crate_names(mut get_name: impl FnMut(SyntaxContext) -> Symb\n     }))\n }\n \n+pub fn debug_hygiene_data(verbose: bool) -> String {\n+    HygieneData::with(|data| {\n+        if verbose {\n+            format!(\"{:#?}\", data)\n+        } else {\n+            let mut s = String::from(\"\");\n+            s.push_str(\"Expansions:\");\n+            data.expn_data.iter().enumerate().for_each(|(id, expn_info)| {\n+                let expn_info = expn_info.as_ref().expect(\"no expansion data for an expansion ID\");\n+                s.push_str(&format!(\n+                    \"\\n{}: parent: {:?}, call_site_ctxt: {:?}, kind: {:?}\",\n+                    id,\n+                    expn_info.parent,\n+                    expn_info.call_site.ctxt(),\n+                    expn_info.kind,\n+                ));\n+            });\n+            s.push_str(\"\\n\\nSyntaxContexts:\");\n+            data.syntax_context_data.iter().enumerate().for_each(|(id, ctxt)| {\n+                s.push_str(&format!(\n+                    \"\\n#{}: parent: {:?}, outer_mark: ({:?}, {:?})\",\n+                    id,\n+                    ctxt.parent,\n+                    ctxt.outer_expn,\n+                    ctxt.outer_transparency,\n+                ));\n+            });\n+            s\n+        }\n+    })\n+}\n+\n impl SyntaxContext {\n     #[inline]\n     pub const fn root() -> Self {"}, {"sha": "1e1e1dbfb3ea58a1a94ff6077c5b5e76d12497c3", "filename": "src/test/pretty/macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Ftest%2Fpretty%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Ftest%2Fpretty%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmacro.rs?ref=64c09694a6ecc434cd3a61ade89beb1de17770c5", "patch": "@@ -2,6 +2,6 @@\n \n #![feature(decl_macro)]\n \n-macro mac { ($ arg : expr) => { $ arg + $ arg } }\n+pub(crate) macro mac { ($ arg : expr) => { $ arg + $ arg } }\n \n fn main() { }"}, {"sha": "3dc8de3fe579de37215c9a25cf65e35ee227cb4d", "filename": "src/test/rustdoc/inline_cross/proc_macro.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs?ref=64c09694a6ecc434cd3a61ade89beb1de17770c5", "patch": "@@ -10,8 +10,19 @@ extern crate some_macros;\n // @has proc_macro/macro.some_proc_macro.html\n // @has proc_macro/attr.some_proc_attr.html\n // @has proc_macro/derive.SomeDerive.html\n-pub use some_macros::{some_proc_macro, some_proc_attr, SomeDerive};\n+\n+// @has proc_macro/macro.some_proc_macro.html\n+// @has - 'a proc-macro that swallows its input and does nothing.'\n+pub use some_macros::some_proc_macro;\n \n // @has proc_macro/macro.reexported_macro.html\n // @has - 'Doc comment from the original crate'\n pub use some_macros::reexported_macro;\n+\n+// @has proc_macro/attr.some_proc_attr.html\n+// @has - 'a proc-macro attribute that passes its item through verbatim.'\n+pub use some_macros::some_proc_attr;\n+\n+// @has proc_macro/derive.SomeDerive.html\n+// @has - 'a derive attribute that adds nothing to its input.'\n+pub use some_macros::SomeDerive;"}, {"sha": "6971873ba601e814670599a3c1a234b798d6e211", "filename": "src/test/ui/hygiene/unpretty-debug.stdout", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/64c09694a6ecc434cd3a61ade89beb1de17770c5/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout?ref=64c09694a6ecc434cd3a61ade89beb1de17770c5", "patch": "@@ -13,3 +13,13 @@ macro_rules! foo /* 0#0 */ { ($ x : ident) => { y + $ x } }\n fn bar /* 0#0 */() { let x /* 0#0 */ = 1; y /* 0#1 */ + x /* 0#0 */ }\n \n fn y /* 0#0 */() { }\n+\n+/*\n+Expansions:\n+0: parent: ExpnId(0), call_site_ctxt: #0, kind: Root\n+1: parent: ExpnId(0), call_site_ctxt: #0, kind: Macro(Bang, foo)\n+\n+SyntaxContexts:\n+#0: parent: #0, outer_mark: (ExpnId(0), Opaque)\n+#1: parent: #0, outer_mark: (ExpnId(1), SemiTransparent)\n+*/"}, {"sha": "130f9488d3b861e02c9282b686eec717e30912cf", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=64c09694a6ecc434cd3a61ade89beb1de17770c5", "patch": "@@ -1 +1 @@\n-Subproject commit d88138723780d11ca2c09560111223dc20b9d5f3\n+Subproject commit 130f9488d3b861e02c9282b686eec717e30912cf"}]}