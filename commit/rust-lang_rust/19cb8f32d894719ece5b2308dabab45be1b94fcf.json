{"sha": "19cb8f32d894719ece5b2308dabab45be1b94fcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5Y2I4ZjMyZDg5NDcxOWVjZTViMjMwOGRhYmFiNDViZTFiOTRmY2Y=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-02-25T11:34:21Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-02-26T05:26:34Z"}, "message": "Check stability of struct fields.\n\nWe were recording stability attributes applied to fields in the\ncompiler, and even annotating it in the libs, but the compiler didn't\nactually do the checks to give errors/warnings in user crates.", "tree": {"sha": "3d564077787097f9d89543f6513147f067be0d45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d564077787097f9d89543f6513147f067be0d45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19cb8f32d894719ece5b2308dabab45be1b94fcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19cb8f32d894719ece5b2308dabab45be1b94fcf", "html_url": "https://github.com/rust-lang/rust/commit/19cb8f32d894719ece5b2308dabab45be1b94fcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19cb8f32d894719ece5b2308dabab45be1b94fcf/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4db0b32467535d718d6474de7ae8d1007d900818", "url": "https://api.github.com/repos/rust-lang/rust/commits/4db0b32467535d718d6474de7ae8d1007d900818", "html_url": "https://github.com/rust-lang/rust/commit/4db0b32467535d718d6474de7ae8d1007d900818"}], "stats": {"total": 572, "additions": 561, "deletions": 11}, "files": [{"sha": "0bd7f83b9595e003956a173bd7dd2b2009ac7255", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19cb8f32d894719ece5b2308dabab45be1b94fcf/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cb8f32d894719ece5b2308dabab45be1b94fcf/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=19cb8f32d894719ece5b2308dabab45be1b94fcf", "patch": "@@ -1771,6 +1771,11 @@ impl LintPass for Stability {\n         stability::check_path(cx.tcx, path, id,\n                               &mut |id, sp, stab| self.lint(cx, id, sp, stab));\n     }\n+\n+    fn check_pat(&mut self, cx: &Context, pat: &ast::Pat) {\n+        stability::check_pat(cx.tcx, pat,\n+                             &mut |id, sp, stab| self.lint(cx, id, sp, stab))\n+    }\n }\n \n declare_lint! {"}, {"sha": "ddac6cc75143ba85ab176ab3a5d89b013f2884c0", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/19cb8f32d894719ece5b2308dabab45be1b94fcf/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cb8f32d894719ece5b2308dabab45be1b94fcf/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=19cb8f32d894719ece5b2308dabab45be1b94fcf", "patch": "@@ -58,8 +58,10 @@ impl<'a> Annotator<'a> {\n                    attrs: &Vec<Attribute>, item_sp: Span, f: F, required: bool) where\n         F: FnOnce(&mut Annotator),\n     {\n+        debug!(\"annotate(id = {:?}, attrs = {:?})\", id, attrs);\n         match attr::find_stability(self.sess.diagnostic(), attrs, item_sp) {\n             Some(stab) => {\n+                debug!(\"annotate: found {:?}\", stab);\n                 self.index.local.insert(id, stab.clone());\n \n                 // Don't inherit #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -72,6 +74,8 @@ impl<'a> Annotator<'a> {\n                 }\n             }\n             None => {\n+                debug!(\"annotate: not found, use_parent = {:?}, parent = {:?}\",\n+                       use_parent, self.parent);\n                 if use_parent {\n                     if let Some(stab) = self.parent.clone() {\n                         self.index.local.insert(id, stab);\n@@ -299,6 +303,12 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Checker<'a, 'tcx> {\n                    &mut |id, sp, stab| self.check(id, sp, stab));\n         visit::walk_path(self, path)\n     }\n+\n+    fn visit_pat(&mut self, pat: &ast::Pat) {\n+        check_pat(self.tcx, pat,\n+                  &mut |id, sp, stab| self.check(id, sp, stab));\n+        visit::walk_pat(self, pat)\n+    }\n }\n \n /// Helper for discovering nodes to check for stability\n@@ -385,6 +395,76 @@ pub fn check_expr(tcx: &ty::ctxt, e: &ast::Expr,\n                 None => return\n             }\n         }\n+        ast::ExprField(ref base_e, ref field) => {\n+            span = field.span;\n+            match ty::expr_ty_adjusted(tcx, base_e).sty {\n+                ty::ty_struct(did, _) => {\n+                    ty::lookup_struct_fields(tcx, did)\n+                        .iter()\n+                        .find(|f| f.name == field.node.name)\n+                        .unwrap_or_else(|| {\n+                            tcx.sess.span_bug(field.span,\n+                                              \"stability::check_expr: unknown named field access\")\n+                        })\n+                        .id\n+                }\n+                _ => tcx.sess.span_bug(e.span,\n+                                       \"stability::check_expr: named field access on non-struct\")\n+            }\n+        }\n+        ast::ExprTupField(ref base_e, ref field) => {\n+            span = field.span;\n+            match ty::expr_ty_adjusted(tcx, base_e).sty {\n+                ty::ty_struct(did, _) => {\n+                    ty::lookup_struct_fields(tcx, did)\n+                        .get(field.node)\n+                        .unwrap_or_else(|| {\n+                            tcx.sess.span_bug(field.span,\n+                                              \"stability::check_expr: unknown unnamed field access\")\n+                        })\n+                        .id\n+                }\n+                ty::ty_tup(..) => return,\n+                _ => tcx.sess.span_bug(e.span,\n+                                       \"stability::check_expr: unnamed field access on \\\n+                                        something other than a tuple or struct\")\n+            }\n+        }\n+        ast::ExprStruct(_, ref expr_fields, _) => {\n+            let type_ = ty::expr_ty(tcx, e);\n+            match type_.sty {\n+                ty::ty_struct(did, _) => {\n+                    let struct_fields = ty::lookup_struct_fields(tcx, did);\n+                    // check the stability of each field that appears\n+                    // in the construction expression.\n+                    for field in expr_fields {\n+                        let did = struct_fields\n+                            .iter()\n+                            .find(|f| f.name == field.ident.node.name)\n+                            .unwrap_or_else(|| {\n+                                tcx.sess.span_bug(field.span,\n+                                                  \"stability::check_expr: unknown named \\\n+                                                   field access\")\n+                            })\n+                            .id;\n+                        maybe_do_stability_check(tcx, did, field.span, cb);\n+                    }\n+\n+                    // we're done.\n+                    return\n+                }\n+                // we don't look at stability attributes on\n+                // struct-like enums (yet...), but it's definitely not\n+                // a bug to have construct one.\n+                ty::ty_enum(..) => return,\n+                _ => {\n+                    tcx.sess.span_bug(e.span,\n+                                      &format!(\"stability::check_expr: struct construction \\\n+                                                of non-struct, type {:?}\",\n+                                               type_.repr(tcx)));\n+                }\n+            }\n+        }\n         _ => return\n     };\n \n@@ -403,6 +483,47 @@ pub fn check_path(tcx: &ty::ctxt, path: &ast::Path, id: ast::NodeId,\n \n }\n \n+pub fn check_pat(tcx: &ty::ctxt, pat: &ast::Pat,\n+                 cb: &mut FnMut(ast::DefId, Span, &Option<Stability>)) {\n+    debug!(\"check_pat(pat = {:?})\", pat);\n+    if is_internal(tcx, pat.span) { return; }\n+\n+    let did = match ty::pat_ty_opt(tcx, pat) {\n+        Some(&ty::TyS { sty: ty::ty_struct(did, _), .. }) => did,\n+        Some(_) | None => return,\n+    };\n+    let struct_fields = ty::lookup_struct_fields(tcx, did);\n+    match pat.node {\n+        // Foo(a, b, c)\n+        ast::PatEnum(_, Some(ref pat_fields)) => {\n+            for (field, struct_field) in pat_fields.iter().zip(struct_fields.iter()) {\n+                // a .. pattern is fine, but anything positional is\n+                // not.\n+                if let ast::PatWild(ast::PatWildMulti) = field.node {\n+                    continue\n+                }\n+                maybe_do_stability_check(tcx, struct_field.id, field.span, cb)\n+            }\n+        }\n+        // Foo { a, b, c }\n+        ast::PatStruct(_, ref pat_fields, _) => {\n+            for field in pat_fields {\n+                let did = struct_fields\n+                    .iter()\n+                    .find(|f| f.name == field.node.ident.name)\n+                    .unwrap_or_else(|| {\n+                        tcx.sess.span_bug(field.span,\n+                                          \"stability::check_pat: unknown named field access\")\n+                    })\n+                    .id;\n+                maybe_do_stability_check(tcx, did, field.span, cb);\n+            }\n+        }\n+        // everything else is fine.\n+        _ => {}\n+    }\n+}\n+\n fn maybe_do_stability_check(tcx: &ty::ctxt, id: ast::DefId, span: Span,\n                             cb: &mut FnMut(ast::DefId, Span, &Option<Stability>)) {\n     if !is_staged_api(tcx, id) { return  }"}, {"sha": "17ac7605741bfc205c4f74b784aa40b3237c0fc7", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19cb8f32d894719ece5b2308dabab45be1b94fcf/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cb8f32d894719ece5b2308dabab45be1b94fcf/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=19cb8f32d894719ece5b2308dabab45be1b94fcf", "patch": "@@ -4298,6 +4298,9 @@ pub fn free_region_from_def(outlives_extent: region::DestructionScopeData,\n pub fn pat_ty<'tcx>(cx: &ctxt<'tcx>, pat: &ast::Pat) -> Ty<'tcx> {\n     return node_id_to_type(cx, pat.id);\n }\n+pub fn pat_ty_opt<'tcx>(cx: &ctxt<'tcx>, pat: &ast::Pat) -> Option<Ty<'tcx>> {\n+    return node_id_to_type_opt(cx, pat.id);\n+}\n \n \n // Returns the type of an expression as a monotype."}, {"sha": "e6a8b90ea333401388a98e3ae17bd5f890f5dc54", "filename": "src/libstd/old_io/mem.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19cb8f32d894719ece5b2308dabab45be1b94fcf/src%2Flibstd%2Fold_io%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cb8f32d894719ece5b2308dabab45be1b94fcf/src%2Flibstd%2Fold_io%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmem.rs?ref=19cb8f32d894719ece5b2308dabab45be1b94fcf", "patch": "@@ -102,6 +102,7 @@ impl MemWriter {\n \n impl Writer for MemWriter {\n     #[inline]\n+    #[allow(deprecated)]\n     fn write_all(&mut self, buf: &[u8]) -> IoResult<()> {\n         self.buf.push_all(buf);\n         Ok(())"}, {"sha": "d47575403e171729b4dd4c579eaa85a9e0dcfbc9", "filename": "src/test/auxiliary/lint_stability.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/19cb8f32d894719ece5b2308dabab45be1b94fcf/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cb8f32d894719ece5b2308dabab45be1b94fcf/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability.rs?ref=19cb8f32d894719ece5b2308dabab45be1b94fcf", "patch": "@@ -100,14 +100,22 @@ pub trait UnstableTrait { fn dummy(&self) { } }\n \n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n #[deprecated(since = \"1.0.0\")]\n-pub struct DeprecatedStruct { pub i: int }\n+pub struct DeprecatedStruct {\n+    #[stable(feature = \"test_feature\", since = \"1.0.0\")] pub i: int\n+}\n #[unstable(feature = \"test_feature\")]\n #[deprecated(since = \"1.0.0\")]\n-pub struct DeprecatedUnstableStruct { pub i: int }\n+pub struct DeprecatedUnstableStruct {\n+    #[stable(feature = \"test_feature\", since = \"1.0.0\")] pub i: int\n+}\n #[unstable(feature = \"test_feature\")]\n-pub struct UnstableStruct { pub i: int }\n+pub struct UnstableStruct {\n+    #[stable(feature = \"test_feature\", since = \"1.0.0\")] pub i: int\n+}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct StableStruct { pub i: int }\n+pub struct StableStruct {\n+    #[stable(feature = \"test_feature\", since = \"1.0.0\")] pub i: int\n+}\n \n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n #[deprecated(since = \"1.0.0\")]\n@@ -137,14 +145,14 @@ pub enum Enum {\n \n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n #[deprecated(since = \"1.0.0\")]\n-pub struct DeprecatedTupleStruct(pub int);\n+pub struct DeprecatedTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub int);\n #[unstable(feature = \"test_feature\")]\n #[deprecated(since = \"1.0.0\")]\n-pub struct DeprecatedUnstableTupleStruct(pub int);\n+pub struct DeprecatedUnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub int);\n #[unstable(feature = \"test_feature\")]\n-pub struct UnstableTupleStruct(pub int);\n+pub struct UnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub int);\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct StableTupleStruct(pub int);\n+pub struct StableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub int);\n \n #[macro_export]\n macro_rules! macro_test {"}, {"sha": "66940ee0081b49a9a1d9952d4d55b75a83868005", "filename": "src/test/auxiliary/lint_stability_fields.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/19cb8f32d894719ece5b2308dabab45be1b94fcf/src%2Ftest%2Fauxiliary%2Flint_stability_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cb8f32d894719ece5b2308dabab45be1b94fcf/src%2Ftest%2Fauxiliary%2Flint_stability_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability_fields.rs?ref=19cb8f32d894719ece5b2308dabab45be1b94fcf", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(staged_api)]\n+#![staged_api]\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub struct Stable {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub inherit: u8, // it's a lie (stable doesn't inherit)\n+    #[unstable(feature = \"test_feature\")]\n+    pub override1: u8,\n+    #[deprecated(since = \"1.0.0\")]\n+    #[unstable(feature = \"test_feature\")]\n+    pub override2: u8,\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub struct Stable2(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n+                   #[unstable(feature = \"test_feature\")] pub u8,\n+                   #[unstable(feature = \"test_feature\")] #[deprecated(since = \"1.0.0\")] pub u8);\n+\n+#[unstable(feature = \"test_feature\")]\n+pub struct Unstable {\n+    pub inherit: u8,\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub override1: u8,\n+    #[deprecated(since = \"1.0.0\")]\n+    #[unstable(feature = \"test_feature\")]\n+    pub override2: u8,\n+}\n+\n+#[unstable(feature = \"test_feature\")]\n+pub struct Unstable2(pub u8,\n+                     #[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n+                     #[unstable(feature = \"test_feature\")] #[deprecated(since = \"1.0.0\")] pub u8);\n+\n+#[unstable(feature = \"test_feature\")]\n+#[deprecated(feature = \"rust1\", since = \"1.0.0\")]\n+pub struct Deprecated {\n+    pub inherit: u8,\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub override1: u8,\n+    #[unstable(feature = \"test_feature\")]\n+    pub override2: u8,\n+}\n+\n+#[unstable(feature = \"test_feature\")]\n+#[deprecated(feature = \"rust1\", since = \"1.0.0\")]\n+pub struct Deprecated2(pub u8,\n+                       #[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n+                       #[unstable(feature = \"test_feature\")] pub u8);"}, {"sha": "c43ff198925034cec0622db9d4b9b0da7789c2c0", "filename": "src/test/compile-fail/lint-stability-fields.rs", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/rust-lang/rust/blob/19cb8f32d894719ece5b2308dabab45be1b94fcf/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cb8f32d894719ece5b2308dabab45be1b94fcf/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs?ref=19cb8f32d894719ece5b2308dabab45be1b94fcf", "patch": "@@ -0,0 +1,346 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:lint_stability_fields.rs\n+#![deny(deprecated)]\n+#![allow(dead_code)]\n+#![feature(staged_api)]\n+#![staged_api]\n+\n+mod cross_crate {\n+    extern crate lint_stability_fields;\n+\n+    use self::lint_stability_fields::*;\n+\n+    pub fn foo() {\n+        let x = Stable {\n+            inherit: 1,\n+            override1: 2, //~ WARN use of unstable\n+            override2: 3,\n+            //~^ ERROR use of deprecated item\n+            //~^^ WARN use of unstable\n+        };\n+\n+        let _ = x.inherit;\n+        let _ = x.override1; //~ WARN use of unstable\n+        let _ = x.override2;\n+        //~^ ERROR use of deprecated item\n+        //~^^ WARN use of unstable\n+\n+        let Stable {\n+            inherit: _,\n+            override1: _, //~ WARN use of unstable\n+            override2: _\n+            //~^ ERROR use of deprecated item\n+            //~^^ WARN use of unstable\n+        } = x;\n+        // all fine\n+        let Stable { .. } = x;\n+\n+        let x = Stable2(1, 2, 3);\n+\n+        let _ = x.0;\n+        let _ = x.1; //~ WARN use of unstable\n+        let _ = x.2;\n+        //~^ ERROR use of deprecated item\n+        //~^^ WARN use of unstable\n+\n+        let Stable2(_,\n+                   _, //~ WARN use of unstable\n+                   _)\n+            //~^ ERROR use of deprecated item\n+            //~^^ WARN use of unstable\n+            = x;\n+        // all fine\n+        let Stable2(..) = x;\n+\n+\n+        let x = Unstable { //~ WARN use of unstable\n+            inherit: 1, //~ WARN use of unstable\n+            override1: 2,\n+            override2: 3,\n+            //~^ ERROR use of deprecated item\n+            //~^^ WARN use of unstable\n+        };\n+\n+        let _ = x.inherit; //~ WARN use of unstable\n+        let _ = x.override1;\n+        let _ = x.override2;\n+        //~^ ERROR use of deprecated item\n+        //~^^ WARN use of unstable\n+\n+        let Unstable { //~ WARN use of unstable\n+            inherit: _, //~ WARN use of unstable\n+            override1: _,\n+            override2: _\n+            //~^ ERROR use of deprecated item\n+            //~^^ WARN use of unstable\n+        } = x;\n+\n+        let Unstable  //~ WARN use of unstable\n+            // the patterns are all fine:\n+            { .. } = x;\n+\n+\n+        let x = Unstable2(1, 2, 3); //~ WARN use of unstable\n+\n+        let _ = x.0; //~ WARN use of unstable\n+        let _ = x.1;\n+        let _ = x.2;\n+        //~^ ERROR use of deprecated item\n+        //~^^ WARN use of unstable\n+\n+        let Unstable2  //~ WARN use of unstable\n+            (_, //~ WARN use of unstable\n+             _,\n+             _)\n+            //~^ ERROR use of deprecated item\n+            //~^^ WARN use of unstable\n+            = x;\n+        let Unstable2 //~ WARN use of unstable\n+            // the patterns are all fine:\n+            (..) = x;\n+\n+\n+        let x = Deprecated {\n+            //~^ ERROR use of deprecated item\n+            //~^^ WARN use of unstable\n+            inherit: 1,\n+            //~^ ERROR use of deprecated item\n+            //~^^ WARN use of unstable\n+            override1: 2,\n+            override2: 3, //~ WARN use of unstable\n+        };\n+\n+        let _ = x.inherit;\n+        //~^ ERROR use of deprecated item\n+        //~^^ WARN use of unstable\n+        let _ = x.override1;\n+        let _ = x.override2; //~ WARN use of unstable\n+\n+        let Deprecated {\n+            //~^ ERROR use of deprecated item\n+            //~^^ WARN use of unstable\n+            inherit: _,\n+            //~^ ERROR use of deprecated item\n+            //~^^ WARN use of unstable\n+            override1: _,\n+            override2: _ //~ WARN use of unstable\n+        } = x;\n+\n+        let Deprecated\n+            //~^ ERROR use of deprecated item\n+            //~^^ WARN use of unstable\n+            // the patterns are all fine:\n+            { .. } = x;\n+\n+        let x = Deprecated2(1, 2, 3);\n+        //~^ ERROR use of deprecated item\n+        //~^^ WARN use of unstable\n+\n+        let _ = x.0;\n+        //~^ ERROR use of deprecated item\n+        //~^^ WARN use of unstable\n+        let _ = x.1;\n+        let _ = x.2; //~ WARN use of unstable\n+\n+        let Deprecated2\n+        //~^ ERROR use of deprecated item\n+        //~^^ WARN use of unstable\n+            (_,\n+             //~^ ERROR use of deprecated item\n+             //~^^ WARN use of unstable\n+             _,\n+             _) //~ WARN use of unstable\n+            = x;\n+        let Deprecated2\n+        //~^ ERROR use of deprecated item\n+        //~^^ WARN use of unstable\n+            // the patterns are all fine:\n+            (..) = x;\n+    }\n+}\n+\n+mod this_crate {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    struct Stable {\n+        inherit: u8,\n+        #[unstable(feature = \"test_feature\")]\n+        override1: u8,\n+        #[deprecated(since = \"1.0.0\")]\n+        #[unstable(feature = \"test_feature\")]\n+        override2: u8,\n+    }\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    struct Stable2(u8,\n+                   #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n+                   #[unstable(feature = \"test_feature\")] #[deprecated(since = \"1.0.0\")] u8);\n+\n+    #[unstable(feature = \"test_feature\")]\n+    struct Unstable {\n+        inherit: u8,\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        override1: u8,\n+        #[deprecated(since = \"1.0.0\")]\n+        #[unstable(feature = \"test_feature\")]\n+        override2: u8,\n+    }\n+\n+    #[unstable(feature = \"test_feature\")]\n+    struct Unstable2(u8,\n+                     #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n+                     #[unstable(feature = \"test_feature\")] #[deprecated(since = \"1.0.0\")] u8);\n+\n+    #[unstable(feature = \"test_feature\")]\n+    #[deprecated(feature = \"rust1\", since = \"1.0.0\")]\n+    struct Deprecated {\n+        inherit: u8,\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        override1: u8,\n+        #[unstable(feature = \"test_feature\")]\n+        override2: u8,\n+    }\n+\n+    #[unstable(feature = \"test_feature\")]\n+    #[deprecated(feature = \"rust1\", since = \"1.0.0\")]\n+    struct Deprecated2(u8,\n+                       #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n+                       #[unstable(feature = \"test_feature\")] u8);\n+\n+    pub fn foo() {\n+        let x = Stable {\n+            inherit: 1,\n+            override1: 2,\n+            override2: 3,\n+            //~^ ERROR use of deprecated item\n+        };\n+\n+        let _ = x.inherit;\n+        let _ = x.override1;\n+        let _ = x.override2;\n+        //~^ ERROR use of deprecated item\n+\n+        let Stable {\n+            inherit: _,\n+            override1: _,\n+            override2: _\n+            //~^ ERROR use of deprecated item\n+        } = x;\n+        // all fine\n+        let Stable { .. } = x;\n+\n+        let x = Stable2(1, 2, 3);\n+\n+        let _ = x.0;\n+        let _ = x.1;\n+        let _ = x.2;\n+        //~^ ERROR use of deprecated item\n+\n+        let Stable2(_,\n+                   _,\n+                   _)\n+            //~^ ERROR use of deprecated item\n+            = x;\n+        // all fine\n+        let Stable2(..) = x;\n+\n+\n+        let x = Unstable {\n+            inherit: 1,\n+            override1: 2,\n+            override2: 3,\n+            //~^ ERROR use of deprecated item\n+        };\n+\n+        let _ = x.inherit;\n+        let _ = x.override1;\n+        let _ = x.override2;\n+        //~^ ERROR use of deprecated item\n+\n+        let Unstable {\n+            inherit: _,\n+            override1: _,\n+            override2: _\n+            //~^ ERROR use of deprecated item\n+        } = x;\n+\n+        let Unstable\n+            // the patterns are all fine:\n+            { .. } = x;\n+\n+\n+        let x = Unstable2(1, 2, 3);\n+\n+        let _ = x.0;\n+        let _ = x.1;\n+        let _ = x.2;\n+        //~^ ERROR use of deprecated item\n+\n+        let Unstable2\n+            (_,\n+             _,\n+             _)\n+            //~^ ERROR use of deprecated item\n+            = x;\n+        let Unstable2\n+            // the patterns are all fine:\n+            (..) = x;\n+\n+\n+        let x = Deprecated {\n+            //~^ ERROR use of deprecated item\n+            inherit: 1,\n+            //~^ ERROR use of deprecated item\n+            override1: 2,\n+            override2: 3,\n+        };\n+\n+        let _ = x.inherit;\n+        //~^ ERROR use of deprecated item\n+        let _ = x.override1;\n+        let _ = x.override2;\n+\n+        let Deprecated {\n+            //~^ ERROR use of deprecated item\n+            inherit: _,\n+            //~^ ERROR use of deprecated item\n+            override1: _,\n+            override2: _\n+        } = x;\n+\n+        let Deprecated\n+            //~^ ERROR use of deprecated item\n+            // the patterns are all fine:\n+            { .. } = x;\n+\n+        let x = Deprecated2(1, 2, 3);\n+        //~^ ERROR use of deprecated item\n+\n+        let _ = x.0;\n+        //~^ ERROR use of deprecated item\n+        let _ = x.1;\n+        let _ = x.2;\n+\n+        let Deprecated2\n+        //~^ ERROR use of deprecated item\n+            (_,\n+             //~^ ERROR use of deprecated item\n+             _,\n+             _)\n+            = x;\n+        let Deprecated2\n+        //~^ ERROR use of deprecated item\n+            // the patterns are all fine:\n+            (..) = x;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "12548c4539618d73173b3a4b6d50c37faacc079d", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19cb8f32d894719ece5b2308dabab45be1b94fcf/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cb8f32d894719ece5b2308dabab45be1b94fcf/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=19cb8f32d894719ece5b2308dabab45be1b94fcf", "patch": "@@ -317,11 +317,17 @@ mod this_crate {\n \n     #[unstable(feature = \"test_feature\")]\n     #[deprecated(since = \"1.0.0\")]\n-    pub struct DeprecatedStruct { i: isize }\n+    pub struct DeprecatedStruct {\n+        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+    }\n     #[unstable(feature = \"test_feature\")]\n-    pub struct UnstableStruct { i: isize }\n+    pub struct UnstableStruct {\n+        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+    }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub struct StableStruct { i: isize }\n+    pub struct StableStruct {\n+        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+    }\n \n     #[unstable(feature = \"test_feature\")]\n     #[deprecated(since = \"1.0.0\")]"}]}