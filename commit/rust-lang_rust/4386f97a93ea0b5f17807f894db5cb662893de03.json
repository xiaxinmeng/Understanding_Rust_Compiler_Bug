{"sha": "4386f97a93ea0b5f17807f894db5cb662893de03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzODZmOTdhOTNlYTBiNWYxNzgwN2Y4OTRkYjVjYjY2Mjg5M2RlMDM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-05-18T10:40:15Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-05-25T06:36:45Z"}, "message": "Make assignments to `Copy` union fields safe", "tree": {"sha": "56d6869a7cdb83e7d5c79682252680c785b01fca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56d6869a7cdb83e7d5c79682252680c785b01fca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4386f97a93ea0b5f17807f894db5cb662893de03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4386f97a93ea0b5f17807f894db5cb662893de03", "html_url": "https://github.com/rust-lang/rust/commit/4386f97a93ea0b5f17807f894db5cb662893de03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4386f97a93ea0b5f17807f894db5cb662893de03/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf747fcbf716a8afced9d23aa15bb47d93805209", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf747fcbf716a8afced9d23aa15bb47d93805209", "html_url": "https://github.com/rust-lang/rust/commit/cf747fcbf716a8afced9d23aa15bb47d93805209"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "94362e69c8dd948ab66fcd8f605d9aa821da2384", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4386f97a93ea0b5f17807f894db5cb662893de03/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4386f97a93ea0b5f17807f894db5cb662893de03/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=4386f97a93ea0b5f17807f894db5cb662893de03", "patch": "@@ -218,6 +218,24 @@ impl<'a, 'tcx> Visitor<'tcx> for EffectCheckVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n+            hir::ExprAssign(ref lhs, ref rhs) => {\n+                if let hir::ExprField(ref base_expr, field) = lhs.node {\n+                    if let ty::TyAdt(adt, ..) = self.tables.expr_ty_adjusted(base_expr).sty {\n+                        if adt.is_union() {\n+                            let field_ty = self.tables.expr_ty_adjusted(lhs);\n+                            let param_env = self.tcx.parameter_environment(adt.did);\n+                            if field_ty.moves_by_default(self.tcx, &param_env, field.span) {\n+                                self.require_unsafe(field.span,\n+                                                    \"assignment to non-`Copy` union field\");\n+                            }\n+                            // Do not walk the field expr again.\n+                            intravisit::walk_expr(self, base_expr);\n+                            intravisit::walk_expr(self, rhs);\n+                            return\n+                        }\n+                    }\n+                }\n+            }\n             _ => {}\n         }\n "}, {"sha": "a67603675f1755af41142253970b0b4215680b81", "filename": "src/test/compile-fail/union/union-unsafe.rs", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4386f97a93ea0b5f17807f894db5cb662893de03/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4386f97a93ea0b5f17807f894db5cb662893de03/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsafe.rs?ref=4386f97a93ea0b5f17807f894db5cb662893de03", "patch": "@@ -10,15 +10,47 @@\n \n #![feature(untagged_unions)]\n \n-union U {\n+union U1 {\n     a: u8\n }\n \n+union U2 {\n+    a: String\n+}\n+\n+union U3<T> {\n+    a: T\n+}\n+\n+union U4<T: Copy> {\n+    a: T\n+}\n+\n+fn generic_noncopy<T: Default>() {\n+    let mut u3 = U3 { a: T::default() };\n+    u3.a = T::default(); //~ ERROR assignment to non-`Copy` union field requires unsafe\n+}\n+\n+fn generic_copy<T: Copy + Default>() {\n+    let mut u3 = U3 { a: T::default() };\n+    // FIXME: it should be known here that `T: Copy`, need to use correct \"parameter environment\"\n+    u3.a = T::default(); //~ ERROR assignment to non-`Copy` union field requires unsafe\n+    let mut u4 = U4 { a: T::default() };\n+    u4.a = T::default(); // OK\n+}\n+\n fn main() {\n-    let mut u = U { a: 10 }; // OK\n-    let a = u.a; //~ ERROR access to union field requires unsafe function or block\n-    u.a = 11; //~ ERROR access to union field requires unsafe function or block\n-    let U { a } = u; //~ ERROR matching on union field requires unsafe function or block\n-    if let U { a: 12 } = u {} //~ ERROR matching on union field requires unsafe function or block\n-    // let U { .. } = u; // OK\n+    let mut u1 = U1 { a: 10 }; // OK\n+    let a = u1.a; //~ ERROR access to union field requires unsafe\n+    u1.a = 11; // OK\n+    let U1 { a } = u1; //~ ERROR matching on union field requires unsafe\n+    if let U1 { a: 12 } = u1 {} //~ ERROR matching on union field requires unsafe\n+    // let U1 { .. } = u1; // OK\n+\n+    let mut u2 = U2 { a: String::from(\"old\") }; // OK\n+    u2.a = String::from(\"new\"); //~ ERROR assignment to non-`Copy` union field requires unsafe\n+    let mut u3 = U3 { a: 0 }; // OK\n+    u3.a = 1; // OK\n+    let mut u3 = U3 { a: String::from(\"old\") }; // OK\n+    u3.a = String::from(\"new\"); //~ ERROR assignment to non-`Copy` union field requires unsafe\n }"}]}