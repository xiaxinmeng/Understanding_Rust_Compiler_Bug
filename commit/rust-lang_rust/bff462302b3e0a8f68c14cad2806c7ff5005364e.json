{"sha": "bff462302b3e0a8f68c14cad2806c7ff5005364e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZjQ2MjMwMmIzZTBhOGY2OGMxNGNhZDI4MDZjN2ZmNTAwNTM2NGU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-24T21:36:30Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-25T16:20:38Z"}, "message": "cleanup: s/impl Copy/#[derive(Copy)]/g", "tree": {"sha": "1470a970b04f0e7df147ba87454eafc85f5a807c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1470a970b04f0e7df147ba87454eafc85f5a807c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bff462302b3e0a8f68c14cad2806c7ff5005364e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bff462302b3e0a8f68c14cad2806c7ff5005364e", "html_url": "https://github.com/rust-lang/rust/commit/bff462302b3e0a8f68c14cad2806c7ff5005364e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bff462302b3e0a8f68c14cad2806c7ff5005364e/comments", "author": null, "committer": null, "parents": [{"sha": "102ab57d8085fcb87c02dae929959ccaaa9af548", "url": "https://api.github.com/repos/rust-lang/rust/commits/102ab57d8085fcb87c02dae929959ccaaa9af548", "html_url": "https://github.com/rust-lang/rust/commit/102ab57d8085fcb87c02dae929959ccaaa9af548"}], "stats": {"total": 425, "additions": 136, "deletions": 289}, "files": [{"sha": "40e123e5323d8315ad93b7da1499fc6fb28402be", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -13,7 +13,7 @@ use std::fmt;\n use std::str::FromStr;\n \n #[cfg(stage0)] // NOTE: remove impl after snapshot\n-#[derive(Clone, PartialEq, Show)]\n+#[derive(Clone, Copy, PartialEq, Show)]\n pub enum Mode {\n     CompileFail,\n     RunFail,\n@@ -26,7 +26,7 @@ pub enum Mode {\n }\n \n #[cfg(not(stage0))] // NOTE: remove cfg after snapshot\n-#[derive(Clone, PartialEq, Debug)]\n+#[derive(Clone, Copy, PartialEq, Debug)]\n pub enum Mode {\n     CompileFail,\n     RunFail,\n@@ -38,9 +38,6 @@ pub enum Mode {\n     Codegen\n }\n \n-\n-impl Copy for Mode {}\n-\n impl FromStr for Mode {\n     fn from_str(s: &str) -> Option<Mode> {\n         match s {"}, {"sha": "61deb4f934ac0d3881020a23e76ef20bdb079b5a", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -1680,8 +1680,8 @@ specific type.\n Implementations are defined with the keyword `impl`.\n \n ```\n+# #[derive(Copy)]\n # struct Point {x: f64, y: f64};\n-# impl Copy for Point {}\n # type Surface = i32;\n # struct BoundingBox {x: f64, y: f64, width: f64, height: f64};\n # trait Shape { fn draw(&self, Surface); fn bounding_box(&self) -> BoundingBox; }"}, {"sha": "4952b99ab464ef4e872b57f7602c5fbd0d60f365", "filename": "src/etc/unicode.py", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -392,15 +392,13 @@ def emit_grapheme_module(f, grapheme_table, grapheme_cats):\n     use core::slice;\n \n     #[allow(non_camel_case_types)]\n-    #[derive(Clone)]\n+    #[derive(Clone, Copy)]\n     pub enum GraphemeCat {\n \"\"\")\n     for cat in grapheme_cats + [\"Any\"]:\n         f.write(\"        GC_\" + cat + \",\\n\")\n     f.write(\"\"\"    }\n \n-    impl Copy for GraphemeCat {}\n-\n     fn bsearch_range_value_table(c: char, r: &'static [(char, char, GraphemeCat)]) -> GraphemeCat {\n         use core::cmp::Ordering::{Equal, Less, Greater};\n         match r.binary_search(|&(lo, hi, _)| {"}, {"sha": "49936396b8c64abc85004be43bdffca27f60ce99", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -445,10 +445,9 @@ rem_float_impl! { f64, fmod }\n /// ```\n /// use std::ops::Neg;\n ///\n+/// #[derive(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl Neg for Foo {\n ///     type Output = Foo;\n ///\n@@ -522,10 +521,9 @@ neg_uint_impl! { u64, i64 }\n /// ```\n /// use std::ops::Not;\n ///\n+/// #[derive(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl Not for Foo {\n ///     type Output = Foo;\n ///"}, {"sha": "cd2d2bcef0f3fa8017b10db505ebd4092d99902f", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -37,6 +37,8 @@ impl OptimizationDiagnosticKind {\n     }\n }\n \n+#[allow(raw_pointer_derive)]\n+#[derive(Copy)]\n pub struct OptimizationDiagnostic {\n     pub kind: OptimizationDiagnosticKind,\n     pub pass_name: *const c_char,\n@@ -45,8 +47,6 @@ pub struct OptimizationDiagnostic {\n     pub message: TwineRef,\n }\n \n-impl Copy for OptimizationDiagnostic {}\n-\n impl OptimizationDiagnostic {\n     unsafe fn unpack(kind: OptimizationDiagnosticKind, di: DiagnosticInfoRef)\n             -> OptimizationDiagnostic {"}, {"sha": "ca3c7e93774226d94b23e1f17a46fca374b4f2bd", "filename": "src/libstd/os.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -813,6 +813,8 @@ pub struct MemoryMap {\n }\n \n /// Type of memory map\n+#[allow(raw_pointer_derive)]\n+#[derive(Copy)]\n pub enum MemoryMapKind {\n     /// Virtual memory map. Usually used to change the permissions of a given\n     /// chunk of memory.  Corresponds to `VirtualAlloc` on Windows.\n@@ -823,9 +825,9 @@ pub enum MemoryMapKind {\n     MapVirtual\n }\n \n-impl Copy for MemoryMapKind {}\n-\n /// Options the memory map is created with\n+#[allow(raw_pointer_derive)]\n+#[derive(Copy)]\n pub enum MapOption {\n     /// The memory should be readable\n     MapReadable,\n@@ -852,8 +854,6 @@ pub enum MapOption {\n     MapNonStandardFlags(c_int),\n }\n \n-impl Copy for MapOption {}\n-\n /// Possible errors when creating a map.\n #[derive(Copy, Show)]\n pub enum MapError {"}, {"sha": "d812d249c5b3e7e262c0896bc05a07b5e8263cf2", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -82,4 +82,5 @@ mod std {\n     pub use core::clone;\n     pub use core::cmp;\n     pub use core::fmt;\n+    pub use core::marker;\n }"}, {"sha": "a38f911688d75c8940d069826c37b686a09171d8", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -7801,13 +7801,12 @@ pub mod charwidth {\n }\n \n pub mod grapheme {\n-    use core::marker::Copy;\n     use core::slice::SliceExt;\n     pub use self::GraphemeCat::*;\n     use core::result::Result::{Ok, Err};\n \n     #[allow(non_camel_case_types)]\n-    #[derive(Clone)]\n+    #[derive(Clone, Copy)]\n     pub enum GraphemeCat {\n         GC_LV,\n         GC_LVT,\n@@ -7821,8 +7820,6 @@ pub mod grapheme {\n         GC_Any,\n     }\n \n-    impl Copy for GraphemeCat {}\n-\n     fn bsearch_range_value_table(c: char, r: &'static [(char, char, GraphemeCat)]) -> GraphemeCat {\n         use core::cmp::Ordering::{Equal, Less, Greater};\n         match r.binary_search_by(|&(lo, hi, _)| {"}, {"sha": "cf19e019f035d3b69f25d10fc0731cf00cde26e5", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -410,16 +410,14 @@ pub struct Utf16Items<'a> {\n     iter: slice::Iter<'a, u16>\n }\n /// The possibilities for values decoded from a `u16` stream.\n-#[derive(PartialEq, Eq, Clone, Show)]\n+#[derive(Copy, PartialEq, Eq, Clone, Show)]\n pub enum Utf16Item {\n     /// A valid codepoint.\n     ScalarValue(char),\n     /// An invalid surrogate without its pair.\n     LoneSurrogate(u16)\n }\n \n-impl Copy for Utf16Item {}\n-\n impl Utf16Item {\n     /// Convert `self` to a `char`, taking `LoneSurrogate`s to the\n     /// replacement character (U+FFFD)."}, {"sha": "3e23698397b4f5da4dd31ceac6ce53141537cc01", "filename": "src/test/auxiliary/issue-14422.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fauxiliary%2Fissue-14422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fauxiliary%2Fissue-14422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-14422.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -23,10 +23,9 @@ mod src {\n     pub mod hidden_core {\n         use super::aliases::B;\n \n+        #[derive(Copy)]\n         pub struct A;\n \n-        impl Copy for A {}\n-\n         pub fn make() -> B { A }\n \n         impl A {"}, {"sha": "227fab73048d76a1ec4d278568d155dc7729e014", "filename": "src/test/auxiliary/issue13213aux.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fauxiliary%2Fissue13213aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fauxiliary%2Fissue13213aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue13213aux.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -13,19 +13,18 @@\n \n pub use private::P;\n \n+#[derive(Copy)]\n pub struct S {\n     p: P,\n }\n \n mod private {\n+    #[derive(Copy)]\n     pub struct P {\n         p: i32,\n     }\n     pub const THREE: P = P { p: 3 };\n-    impl Copy for P {}\n }\n \n pub static A: S = S { p: private::THREE };\n \n-impl Copy for S {}\n-"}, {"sha": "643442363a4463e6ac8e2c5701dedc77bbdf4c94", "filename": "src/test/auxiliary/method_self_arg1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -17,10 +17,9 @@ static mut COUNT: u64 = 1;\n \n pub fn get_count() -> u64 { unsafe { COUNT } }\n \n+#[derive(Copy)]\n pub struct Foo;\n \n-impl Copy for Foo {}\n-\n impl Foo {\n     pub fn foo(self, x: &Foo) {\n         unsafe { COUNT *= 2; }"}, {"sha": "fd99da87e6b0d1f1e00f67425ba66fe22a9805a5", "filename": "src/test/auxiliary/method_self_arg2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -17,10 +17,9 @@ static mut COUNT: u64 = 1;\n \n pub fn get_count() -> u64 { unsafe { COUNT } }\n \n+#[derive(Copy)]\n pub struct Foo;\n \n-impl Copy for Foo {}\n-\n impl Foo {\n     pub fn run_trait(self) {\n         unsafe { COUNT *= 17; }"}, {"sha": "7ae36554079166397c4a4ca73de7748384240fed", "filename": "src/test/auxiliary/xcrate_unit_struct.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -12,33 +12,28 @@\n \n // used by the rpass test\n \n+#[derive(Copy)]\n pub struct Struct;\n \n-impl Copy for Struct {}\n-\n+#[derive(Copy)]\n pub enum Unit {\n     UnitVariant,\n     Argument(Struct)\n }\n \n-impl Copy for Unit {}\n-\n+#[derive(Copy)]\n pub struct TupleStruct(pub uint, pub &'static str);\n \n-impl Copy for TupleStruct {}\n-\n // used by the cfail test\n \n+#[derive(Copy)]\n pub struct StructWithFields {\n     foo: int,\n }\n \n-impl Copy for StructWithFields {}\n-\n+#[derive(Copy)]\n pub enum EnumWithVariants {\n     EnumVariant,\n     EnumVariantArg(int)\n }\n \n-impl Copy for EnumWithVariants {}\n-"}, {"sha": "75edd64fb2e7844915ed663928b4ddc521288f48", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -16,13 +16,12 @@ use std::f32::consts::PI;\n use std::num::Float;\n use std::rand::{Rng, StdRng};\n \n+#[derive(Copy)]\n struct Vec2 {\n     x: f32,\n     y: f32,\n }\n \n-impl Copy for Vec2 {}\n-\n fn lerp(a: f32, b: f32, v: f32) -> f32 { a * (1.0 - v) + b * v }\n \n fn smooth(v: f32) -> f32 { v * v * (3.0 - 2.0 * v) }"}, {"sha": "12dc224a82f5e53af0d8de98872f33d27a343066", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -54,14 +54,13 @@ fn print_complements() {\n     }\n }\n \n+#[derive(Copy)]\n enum Color {\n     Red,\n     Yellow,\n     Blue,\n }\n \n-impl Copy for Color {}\n-\n impl fmt::Show for Color {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let str = match *self {\n@@ -73,13 +72,12 @@ impl fmt::Show for Color {\n     }\n }\n \n+#[derive(Copy)]\n struct CreatureInfo {\n     name: uint,\n     color: Color\n }\n \n-impl Copy for CreatureInfo {}\n-\n fn show_color_list(set: Vec<Color>) -> String {\n     let mut out = String::new();\n     for col in set.iter() {"}, {"sha": "42b41d955fbabfa50df91bcd66bd60e0003d0308", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -61,12 +61,12 @@ fn next_permutation(perm: &mut [i32], count: &mut [i32]) {\n     }\n }\n \n+#[derive(Copy)]\n struct P {\n     p: [i32; 16],\n }\n \n-impl Copy for P {}\n-\n+#[derive(Copy)]\n struct Perm {\n     cnt: [i32; 16],\n     fact: [u32; 16],\n@@ -75,8 +75,6 @@ struct Perm {\n     perm: P,\n }\n \n-impl Copy for Perm {}\n-\n impl Perm {\n     fn new(n: u32) -> Perm {\n         let mut fact = [1; 16];"}, {"sha": "c09fad533e182d74ce55d53fe9de07ac16cb3b8f", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -103,13 +103,12 @@ fn sum_and_scale(a: &'static [AminoAcid]) -> Vec<AminoAcid> {\n     result\n }\n \n+#[derive(Copy)]\n struct AminoAcid {\n     c: u8,\n     p: f32,\n }\n \n-impl Copy for AminoAcid {}\n-\n struct RepeatFasta<'a, W:'a> {\n     alu: &'static str,\n     out: &'a mut W"}, {"sha": "4149726e4bb5adf2a934b50f0d2dc94e16154aff", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -60,11 +60,9 @@ static OCCURRENCES: [&'static str;5] = [\n \n // Code implementation\n \n-#[derive(PartialEq, PartialOrd, Ord, Eq)]\n+#[derive(Copy, PartialEq, PartialOrd, Ord, Eq)]\n struct Code(u64);\n \n-impl Copy for Code {}\n-\n impl Code {\n     fn hash(&self) -> u64 {\n         let Code(ret) = *self;"}, {"sha": "1b3d66ca7d23d256e349861ad479f425f6f76e73", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -94,14 +94,13 @@ static BODIES: [Planet;N_BODIES] = [\n     },\n ];\n \n+#[derive(Copy)]\n struct Planet {\n     x: f64, y: f64, z: f64,\n     vx: f64, vy: f64, vz: f64,\n     mass: f64,\n }\n \n-impl Copy for Planet {}\n-\n fn advance(bodies: &mut [Planet;N_BODIES], dt: f64, steps: int) {\n     for _ in range(0, steps) {\n         let mut b_slice = bodies.as_mut_slice();"}, {"sha": "99618c6bf5626911d8629249df01a2a9c126e052", "filename": "src/test/compile-fail/borrowck-borrow-from-owned-ptr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -9,20 +9,18 @@\n // except according to those terms.\n \n \n+#[derive(Copy)]\n struct Foo {\n   bar1: Bar,\n   bar2: Bar\n }\n \n-impl Copy for Foo {}\n-\n+#[derive(Copy)]\n struct Bar {\n   int1: isize,\n   int2: isize,\n }\n \n-impl Copy for Bar {}\n-\n fn make_foo() -> Box<Foo> { panic!() }\n \n fn borrow_same_field_twice_mut_mut() {"}, {"sha": "849c98e122e526b2b78f7adbf25fe7f0a3eb4c09", "filename": "src/test/compile-fail/borrowck-borrow-from-stack-variable.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -8,20 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[derive(Copy)]\n struct Foo {\n   bar1: Bar,\n   bar2: Bar\n }\n \n-impl Copy for Foo {}\n-\n+#[derive(Copy)]\n struct Bar {\n   int1: isize,\n   int2: isize,\n }\n \n-impl Copy for Bar {}\n-\n fn make_foo() -> Foo { panic!() }\n \n fn borrow_same_field_twice_mut_mut() {"}, {"sha": "52f89da10b97726013a74d01d5a324fa4f2047b5", "filename": "src/test/compile-fail/borrowck-use-mut-borrow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -10,10 +10,9 @@\n \n #![feature(box_syntax)]\n \n+#[derive(Copy)]\n struct A { a: isize, b: isize }\n \n-impl Copy for A {}\n-\n struct B { a: isize, b: Box<isize> }\n \n fn var_copy_after_var_borrow() {"}, {"sha": "91f34320482561aca98a3a707e8405a976579c41", "filename": "src/test/compile-fail/dst-index.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-index.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -14,10 +14,9 @@\n use std::ops::Index;\n use std::fmt::Debug;\n \n+#[derive(Copy)]\n struct S;\n \n-impl Copy for S {}\n-\n impl Index<usize> for S {\n     type Output = str;\n \n@@ -26,10 +25,9 @@ impl Index<usize> for S {\n     }\n }\n \n+#[derive(Copy)]\n struct T;\n \n-impl Copy for T {}\n-\n impl Index<usize> for T {\n     type Output = Debug + 'static;\n "}, {"sha": "56f83d9300861b353d2a0dd61196e0eebf8ce847", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -17,13 +17,12 @@ fn assert_copy<T:Copy>() { }\n \n trait Dummy { }\n \n+#[derive(Copy)]\n struct MyStruct {\n     x: isize,\n     y: isize,\n }\n \n-impl Copy for MyStruct {}\n-\n struct MyNoncopyStruct {\n     x: Box<char>,\n }"}, {"sha": "d94baa637c2d0fd2739f2829d718189238a8150e", "filename": "src/test/debuginfo/generic-method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -115,6 +115,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n+#[derive(Copy)]\n struct Struct<T> {\n     x: T\n }\n@@ -150,5 +151,3 @@ fn main() {\n \n fn zzz() {()}\n \n-impl<T:Copy> Copy for Struct<T> {}\n-"}, {"sha": "f891263697170be6f796fea96234c83979c6db3e", "filename": "src/test/debuginfo/method-on-enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -116,6 +116,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n+#[derive(Copy)]\n enum Enum {\n     Variant1 { x: u16, y: u16 },\n     Variant2 (u32)\n@@ -152,5 +153,3 @@ fn main() {\n \n fn zzz() {()}\n \n-impl Copy for Enum {}\n-"}, {"sha": "fa93eaba2793eea419688f33c1048de9ece70064", "filename": "src/test/debuginfo/method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -116,6 +116,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n+#[derive(Copy)]\n struct Struct<T> {\n     x: T\n }\n@@ -151,5 +152,3 @@ fn main() {\n \n fn zzz() {()}\n \n-impl<T:Copy> Copy for Struct<T> {}\n-"}, {"sha": "56f79da709efd92c061afba2105cf0a2faa26dd8", "filename": "src/test/debuginfo/method-on-struct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -116,6 +116,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n+#[derive(Copy)]\n struct Struct {\n     x: int\n }\n@@ -151,5 +152,3 @@ fn main() {\n \n fn zzz() {()}\n \n-impl Copy for Struct {}\n-"}, {"sha": "4fff301eb5f548a60315a55ed5832b1937c3892d", "filename": "src/test/debuginfo/method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -116,6 +116,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n+#[derive(Copy)]\n struct Struct {\n     x: int\n }\n@@ -157,5 +158,3 @@ fn main() {\n \n fn zzz() {()}\n \n-impl Copy for Struct {}\n-"}, {"sha": "7c4ce211f2fe5edc676f2642ef689259761b4021", "filename": "src/test/debuginfo/method-on-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -116,6 +116,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n+#[derive(Copy)]\n struct TupleStruct(int, f64);\n \n impl TupleStruct {\n@@ -149,5 +150,3 @@ fn main() {\n \n fn zzz() {()}\n \n-impl Copy for TupleStruct {}\n-"}, {"sha": "e494973b975bca54dd95fa0a1f94facbad2eea88", "filename": "src/test/debuginfo/self-in-default-method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -115,6 +115,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n+#[derive(Copy)]\n struct Struct {\n     x: int\n }\n@@ -151,5 +152,3 @@ fn main() {\n \n fn zzz() {()}\n \n-impl Copy for Struct {}\n-"}, {"sha": "0fe74015611f5914ec5a619307d4b0c41555611f", "filename": "src/test/debuginfo/self-in-generic-default-method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -115,6 +115,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n+#[derive(Copy)]\n struct Struct {\n     x: int\n }\n@@ -152,5 +153,3 @@ fn main() {\n \n fn zzz() {()}\n \n-impl Copy for Struct {}\n-"}, {"sha": "1e286c236a5d92a2391b520fc97c560512d20cc1", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -19,10 +19,9 @@ fn test1() { let val = &0i; { } *val; }\n \n fn test2() -> int { let val = &0i; { } *val }\n \n+#[derive(Copy)]\n struct S { eax: int }\n \n-impl Copy for S {}\n-\n fn test3() {\n     let regs = &Cell::new(S {eax: 0});\n     match true { true => { } _ => { } }"}, {"sha": "3e3f4c5948e665095d291582c8d38e5f3befc331", "filename": "src/test/run-make/extern-fn-with-packed-struct/test.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -9,15 +9,13 @@\n // except according to those terms.\n \n #[repr(packed)]\n-#[derive(PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n struct Foo {\n     a: i8,\n     b: i16,\n     c: i8\n }\n \n-impl Copy for Foo {}\n-\n #[link(name = \"test\", kind = \"static\")]\n extern {\n     fn foo(f: Foo) -> Foo;"}, {"sha": "d95594119b6bceb131d38aa6bb3a88be3f958607", "filename": "src/test/run-pass/borrowck-univariant-enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -11,12 +11,11 @@\n \n use std::cell::Cell;\n \n+#[derive(Copy)]\n enum newtype {\n     newvar(int)\n }\n \n-impl Copy for newtype {}\n-\n pub fn main() {\n \n     // Test that borrowck treats enums with a single variant"}, {"sha": "c115415bb9b7b1739d1d12b1bc4b493586a8d1f0", "filename": "src/test/run-pass/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -17,10 +17,9 @@ extern crate trait_superkinds_in_metadata;\n use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n use trait_superkinds_in_metadata::{RequiresCopy};\n \n+#[derive(Copy)]\n struct X<T>(T);\n \n-impl<T:Copy> Copy for X<T> {}\n-\n impl<T:Sync> RequiresShare for X<T> { }\n \n impl<T:Sync+Send> RequiresRequiresShareAndSend for X<T> { }"}, {"sha": "ea1d0b625fcd757eab2b37ecc478b7f0d32194f5", "filename": "src/test/run-pass/cell-does-not-clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fcell-does-not-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fcell-does-not-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcell-does-not-clone.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -10,6 +10,7 @@\n \n use std::cell::Cell;\n \n+#[derive(Copy)]\n struct Foo {\n     x: int\n }\n@@ -24,8 +25,6 @@ impl Clone for Foo {\n     }\n }\n \n-impl Copy for Foo {}\n-\n pub fn main() {\n     let x = Cell::new(Foo { x: 22 });\n     let _y = x.get();"}, {"sha": "993f27d061d20f9c000517591305e8a2940f4728", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -11,11 +11,9 @@\n \n use std::cmp;\n \n-#[derive(Show)]\n+#[derive(Copy, Show)]\n enum cat_type { tuxedo, tabby, tortoiseshell }\n \n-impl Copy for cat_type {}\n-\n impl cmp::PartialEq for cat_type {\n     fn eq(&self, other: &cat_type) -> bool {\n         ((*self) as uint) == ((*other) as uint)"}, {"sha": "6edd7390f0f31a37ad0cf088a3dec7ff0e2ec070", "filename": "src/test/run-pass/coherence-impl-in-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n pub fn main() {\n+    #[derive(Copy)]\n     enum x { foo }\n-    impl Copy for x {}\n     impl ::std::cmp::PartialEq for x {\n         fn eq(&self, other: &x) -> bool {\n             (*self) as int == (*other) as int"}, {"sha": "d9c292a3e0b6eaac017159b3f9bad5a55304d70c", "filename": "src/test/run-pass/coherence-where-clause.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -23,13 +23,11 @@ impl<T> MyTrait for T\n     }\n }\n \n-#[derive(Clone,Debug,PartialEq)]\n+#[derive(Clone, Copy, Debug, PartialEq)]\n struct MyType {\n     dummy: uint\n }\n \n-impl Copy for MyType {}\n-\n impl MyTrait for MyType {\n     fn get(&self) -> MyType { (*self).clone() }\n }"}, {"sha": "86b194f2eb3419b1f99e46aa291bf1142c91ef98", "filename": "src/test/run-pass/const-nullary-univariant-enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[derive(Copy)]\n enum Foo {\n     Bar = 0xDEADBEE\n }\n \n-impl Copy for Foo {}\n-\n static X: Foo = Foo::Bar;\n \n pub fn main() {"}, {"sha": "74f4b9e923301732b7786d14adae54d5601dd307", "filename": "src/test/run-pass/dst-struct-sole.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -30,11 +30,9 @@ fn foo2<T:ToBar>(x: &Fat<[T]>) {\n     assert!(x.ptr[1].to_bar() == bar);\n }\n \n-#[derive(PartialEq,Eq)]\n+#[derive(Copy, PartialEq, Eq)]\n struct Bar;\n \n-impl Copy for Bar {}\n-\n trait ToBar {\n     fn to_bar(&self) -> Bar;\n }"}, {"sha": "fa2af29431c308262352bdd6bec362dd4077cb04", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -49,11 +49,9 @@ fn foo3(x: &Fat<Fat<[int]>>) {\n }\n \n \n-#[derive(PartialEq,Eq)]\n+#[derive(Copy, PartialEq, Eq)]\n struct Bar;\n \n-impl Copy for Bar {}\n-\n trait ToBar {\n     fn to_bar(&self) -> Bar;\n }"}, {"sha": "fd1c7247e375d501a9c637b0606c593fcbc9bb79", "filename": "src/test/run-pass/dst-trait.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -17,18 +17,14 @@ struct Fat<T: ?Sized> {\n     ptr: T\n }\n \n-#[derive(PartialEq,Eq)]\n+#[derive(Copy, PartialEq, Eq)]\n struct Bar;\n \n-impl Copy for Bar {}\n-\n-#[derive(PartialEq,Eq)]\n+#[derive(Copy, PartialEq, Eq)]\n struct Bar1 {\n     f: int\n }\n \n-impl Copy for Bar1 {}\n-\n trait ToBar {\n     fn to_bar(&self) -> Bar;\n     fn to_val(&self) -> int;"}, {"sha": "35c394cf535a579d538372e801a58758f6d1b789", "filename": "src/test/run-pass/empty-tag.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-tag.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Show)]\n+#[derive(Copy, Show)]\n enum chan { chan_t, }\n \n-impl Copy for chan {}\n-\n impl PartialEq for chan {\n     fn eq(&self, other: &chan) -> bool {\n         ((*self) as uint) == ((*other) as uint)"}, {"sha": "c323bff254d234c8f37716cd25dd1ea265b9f4a8", "filename": "src/test/run-pass/enum-discrim-width-stuff.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -12,13 +12,12 @@ macro_rules! check {\n     ($m:ident, $t:ty, $v:expr) => {{\n         mod $m {\n             use std::mem::size_of;\n-            #[derive(Show)]\n+            #[derive(Copy, Show)]\n             enum E {\n                 V = $v,\n                 A = 0\n             }\n             static C: E = E::V;\n-            impl Copy for E {}\n             pub fn check() {\n                 assert_eq!(size_of::<E>(), size_of::<$t>());\n                 assert_eq!(E::V as $t, $v as $t);"}, {"sha": "066a5f9580ac42756f3c476b9dc9621df6321d61", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -11,10 +11,9 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n+#[derive(Copy)]\n struct LM { resize_at: uint, size: uint }\n \n-impl Copy for LM {}\n-\n enum HashMap<K,V> {\n     HashMap_(LM)\n }"}, {"sha": "807d28feb6e76742e0535a497574ed23f442bbf1", "filename": "src/test/run-pass/export-unexported-dep.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -13,10 +13,9 @@\n \n mod foo {\n     // not exported\n+    #[derive(Copy)]\n     enum t { t1, t2, }\n \n-    impl Copy for t {}\n-\n     impl PartialEq for t {\n         fn eq(&self, other: &t) -> bool {\n             ((*self) as uint) == ((*other) as uint)"}, {"sha": "6c6c5085749bb9be42bad0c0a0583b2954891b10", "filename": "src/test/run-pass/expr-copy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-copy.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -13,10 +13,9 @@ fn f(arg: &mut A) {\n     arg.a = 100;\n }\n \n+#[derive(Copy)]\n struct A { a: int }\n \n-impl Copy for A {}\n-\n pub fn main() {\n     let mut x = A {a: 10};\n     f(&mut x);"}, {"sha": "f1457829d03ed2038eaea6dd0456cfcfb4f9c936", "filename": "src/test/run-pass/expr-if-struct.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -14,20 +14,17 @@\n \n // Tests for if as expressions returning nominal types\n \n+#[derive(Copy)]\n struct I { i: int }\n \n-impl Copy for I {}\n-\n fn test_rec() {\n     let rs = if true { I {i: 100} } else { I {i: 101} };\n     assert_eq!(rs.i, 100);\n }\n \n-#[derive(Show)]\n+#[derive(Copy, Show)]\n enum mood { happy, sad, }\n \n-impl Copy for mood {}\n-\n impl PartialEq for mood {\n     fn eq(&self, other: &mood) -> bool {\n         ((*self) as uint) == ((*other) as uint)"}, {"sha": "1b5a33dff3da0ada61007f50e2d2659ef4bc64cc", "filename": "src/test/run-pass/expr-match-struct.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -13,20 +13,17 @@\n \n \n // Tests for match as expressions resulting in struct types\n+#[derive(Copy)]\n struct R { i: int }\n \n-impl Copy for R {}\n-\n fn test_rec() {\n     let rs = match true { true => R {i: 100}, _ => panic!() };\n     assert_eq!(rs.i, 100);\n }\n \n-#[derive(Show)]\n+#[derive(Copy, Show)]\n enum mood { happy, sad, }\n \n-impl Copy for mood {}\n-\n impl PartialEq for mood {\n     fn eq(&self, other: &mood) -> bool {\n         ((*self) as uint) == ((*other) as uint)"}, {"sha": "bba8cbdb83dd67d7314cf07ba0a3ee4c84b3b8fd", "filename": "src/test/run-pass/exterior.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fexterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fexterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexterior.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -11,10 +11,9 @@\n \n use std::cell::Cell;\n \n+#[derive(Copy)]\n struct Point {x: int, y: int, z: int}\n \n-impl Copy for Point {}\n-\n fn f(p: &Cell<Point>) {\n     assert!((p.get().z == 12));\n     p.set(Point {x: 10, y: 11, z: 13});"}, {"sha": "f7aef2e59c91ec1e435a328c6d3651584084f4a0", "filename": "src/test/run-pass/extern-pass-TwoU16s.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -11,13 +11,11 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[derive(PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub struct TwoU16s {\n     one: u16, two: u16\n }\n \n-impl Copy for TwoU16s {}\n-\n #[link(name = \"rust_test_helpers\")]\n extern {\n     pub fn rust_dbg_extern_identity_TwoU16s(v: TwoU16s) -> TwoU16s;"}, {"sha": "8e13017fdbf8a71dade3687ff13c9c74348b20c5", "filename": "src/test/run-pass/extern-pass-TwoU32s.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -11,13 +11,11 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[derive(PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub struct TwoU32s {\n     one: u32, two: u32\n }\n \n-impl Copy for TwoU32s {}\n-\n #[link(name = \"rust_test_helpers\")]\n extern {\n     pub fn rust_dbg_extern_identity_TwoU32s(v: TwoU32s) -> TwoU32s;"}, {"sha": "b95eb7974b6de82d175e05295e9053744ad73f8a", "filename": "src/test/run-pass/extern-pass-TwoU64s.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -11,13 +11,11 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[derive(PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub struct TwoU64s {\n     one: u64, two: u64\n }\n \n-impl Copy for TwoU64s {}\n-\n #[link(name = \"rust_test_helpers\")]\n extern {\n     pub fn rust_dbg_extern_identity_TwoU64s(v: TwoU64s) -> TwoU64s;"}, {"sha": "d5c727be4bc7a3d9f0dcd60796a5aa725e1d44c9", "filename": "src/test/run-pass/extern-pass-TwoU8s.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -11,13 +11,11 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[derive(PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub struct TwoU8s {\n     one: u8, two: u8\n }\n \n-impl Copy for TwoU8s {}\n-\n #[link(name = \"rust_test_helpers\")]\n extern {\n     pub fn rust_dbg_extern_identity_TwoU8s(v: TwoU8s) -> TwoU8s;"}, {"sha": "09317abce921d9383e5f28668220a2a1a938e16d", "filename": "src/test/run-pass/foreign-fn-with-byval.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[derive(Copy)]\n pub struct S {\n     x: u64,\n     y: u64,\n     z: u64,\n }\n \n-impl Copy for S {}\n-\n #[link(name = \"rust_test_helpers\")]\n extern {\n     pub fn get_x(x: S) -> u64;"}, {"sha": "8da8c6808478b799daef899eafaacb35802581a8", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -12,10 +12,9 @@\n \n fn id<T>(x: T) -> T { return x; }\n \n+#[derive(Copy)]\n struct Triple {x: int, y: int, z: int}\n \n-impl Copy for Triple {}\n-\n pub fn main() {\n     let mut x = 62;\n     let mut y = 63;"}, {"sha": "addd6a63836f3512b033ba144a715b620f42d5f3", "filename": "src/test/run-pass/guards-not-exhaustive.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[derive(Copy)]\n enum Q { R(Option<uint>) }\n \n-impl Copy for Q {}\n-\n fn xyzzy(q: Q) -> uint {\n     match q {\n         Q::R(S) if S.is_some() => { 0 }"}, {"sha": "e7031ae147e433a12373819fcb8697d016166484", "filename": "src/test/run-pass/guards.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fguards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fguards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[derive(Copy)]\n struct Pair { x: int, y: int }\n \n-impl Copy for Pair {}\n-\n pub fn main() {\n     let a: int =\n         match 10i { x if x < 7 => { 1i } x if x < 11 => { 2i } 10 => { 3i } _ => { 4i } };"}, {"sha": "9c9f95f61e9be666c88d02f8bb38a03aa73ef416", "filename": "src/test/run-pass/hrtb-opt-in-copy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -29,10 +29,9 @@ enum TyS<'tcx> {\n     Boop(marker::InvariantLifetime<'tcx>)\n }\n \n+#[derive(Copy)]\n enum Bar<'tcx> {\n     Baz(Foo<Ty<'tcx>>)\n }\n \n-impl<'tcx> Copy for Bar<'tcx> { }\n-\n fn main() { }"}, {"sha": "a05cc9c0f74c241a16f0331650fb57b1f34e7e0d", "filename": "src/test/run-pass/issue-12860.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-12860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-12860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12860.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -13,15 +13,13 @@ extern crate collections;\n \n use std::collections::HashSet;\n \n-#[derive(PartialEq, Eq, Hash)]\n+#[derive(Copy, PartialEq, Eq, Hash)]\n struct XYZ {\n     x: int,\n     y: int,\n     z: int\n }\n \n-impl Copy for XYZ {}\n-\n fn main() {\n     let mut connected = HashSet::new();\n     let mut border = HashSet::new();"}, {"sha": "26eacd682efddbdbe958a471dfa1ea3b37da8a1b", "filename": "src/test/run-pass/issue-19100.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-19100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-19100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19100.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[derive(Copy)]\n enum Foo {\n     Bar,\n     Baz\n }\n \n-impl Copy for Foo {}\n-\n impl Foo {\n     fn foo(&self) {\n         match self {"}, {"sha": "18bb6fe55299d0a0c362b11ab04de38e554e24b6", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -15,12 +15,11 @@ trait clam<A> {\n   fn chowder(&self, y: A);\n }\n \n+#[derive(Copy)]\n struct foo<A> {\n   x: A,\n }\n \n-impl<A:Copy> Copy for foo<A> {}\n-\n impl<A> clam<A> for foo<A> {\n   fn chowder(&self, _y: A) {\n   }"}, {"sha": "de99141c80311381a47ca48841732d40c6e26142", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[derive(Copy)]\n struct cat {\n     meow: extern \"Rust\" fn(),\n }\n \n-impl Copy for cat {}\n-\n fn meow() {\n     println!(\"meow\")\n }\n@@ -24,10 +23,9 @@ fn cat() -> cat {\n     }\n }\n \n+#[derive(Copy)]\n struct KittyInfo {kitty: cat}\n \n-impl Copy for KittyInfo {}\n-\n // Code compiles and runs successfully if we add a + before the first arg\n fn nyan(kitty: cat, _kitty_info: KittyInfo) {\n     (kitty.meow)();"}, {"sha": "b6ed85e9e4a49b5e42ee049c3d4e3096033dba73", "filename": "src/test/run-pass/issue-3121.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3121.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -11,14 +11,13 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n+#[derive(Copy)]\n enum side { mayo, catsup, vinegar }\n+#[derive(Copy)]\n enum order { hamburger, fries(side), shake }\n+#[derive(Copy)]\n enum meal { to_go(order), for_here(order) }\n \n-impl Copy for side {}\n-impl Copy for order {}\n-impl Copy for meal {}\n-\n fn foo(m: Box<meal>, cond: bool) {\n     match *m {\n       meal::to_go(_) => { }"}, {"sha": "004bcf6dcd09c25bc6b7e51e35f18ce199974a99", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -27,29 +27,26 @@ use std::iter::repeat;\n use std::slice;\n \n // Represents a position on a canvas.\n+#[derive(Copy)]\n struct Point {\n     x: int,\n     y: int,\n }\n \n-impl Copy for Point {}\n-\n // Represents an offset on a canvas. (This has the same structure as a Point.\n // but different semantics).\n+#[derive(Copy)]\n struct Size {\n     width: int,\n     height: int,\n }\n \n-impl Copy for Size {}\n-\n+#[derive(Copy)]\n struct Rect {\n     top_left: Point,\n     size: Size,\n }\n \n-impl Copy for Rect {}\n-\n // Contains the information needed to do shape rendering via ASCII art.\n struct AsciiArt {\n     width: uint,"}, {"sha": "03699ff8d60369d7657c9ecad9b6ea00f0f9086f", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -14,13 +14,12 @@\n \n use std::ops::Mul;\n \n+#[derive(Copy)]\n struct Vec2 {\n     x: f64,\n     y: f64\n }\n \n-impl Copy for Vec2 {}\n-\n // methods we want to export as methods as well as operators\n impl Vec2 {\n #[inline(always)]"}, {"sha": "58d7aa276f15a6611ce5e1b4f34c65e60d8a6965", "filename": "src/test/run-pass/issue-3753.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3753.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -14,20 +14,18 @@\n \n use std::f64;\n \n+#[derive(Copy)]\n pub struct Point {\n     x: f64,\n     y: f64\n }\n \n-impl Copy for Point {}\n-\n+#[derive(Copy)]\n pub enum Shape {\n     Circle(Point, f64),\n     Rectangle(Point, Point)\n }\n \n-impl Copy for Shape {}\n-\n impl Shape {\n     pub fn area(&self, sh: Shape) -> f64 {\n         match sh {"}, {"sha": "a4f3988484661cb5274ca9643d20542f542f3d6e", "filename": "src/test/run-pass/issue-5688.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5688.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -17,10 +17,9 @@ with the representation of [int; n] and [int] somehow, or at least\n failed to typecheck correctly.\n */\n \n+#[derive(Copy)]\n struct X { vec: &'static [int] }\n \n-impl Copy for X {}\n-\n static V: &'static [X] = &[X { vec: &[1, 2, 3] }];\n \n pub fn main() {"}, {"sha": "1964bf4bd7d7a9f1ff5c3ddc9ff031a96eeb8a1c", "filename": "src/test/run-pass/match-arm-statics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -36,10 +36,9 @@ const VARIANT2_NORTH: EnumWithStructVariants = EnumWithStructVariants::Variant2\n     dir: Direction::North };\n \n pub mod glfw {\n+    #[derive(Copy)]\n     pub struct InputState(uint);\n \n-    impl Copy for InputState {}\n-\n     pub const RELEASE  : InputState = InputState(0);\n     pub const PRESS    : InputState = InputState(1);\n     pub const REPEAT   : InputState = InputState(2);"}, {"sha": "c79141d97950045a9b1f2e68e9bbe7ad44f6f67d", "filename": "src/test/run-pass/method-self-arg-trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -15,10 +15,9 @@\n \n static mut COUNT: u64 = 1;\n \n+#[derive(Copy)]\n struct Foo;\n \n-impl Copy for Foo {}\n-\n trait Bar : Sized {\n     fn foo1(&self);\n     fn foo2(self);"}, {"sha": "2225ccdc5169fdc2adf67d91bec5a8f443bb35f5", "filename": "src/test/run-pass/method-self-arg.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -15,10 +15,9 @@\n \n static mut COUNT: uint = 1;\n \n+#[derive(Copy)]\n struct Foo;\n \n-impl Copy for Foo {}\n-\n impl Foo {\n     fn foo(self, x: &Foo) {\n         unsafe { COUNT *= 2; }"}, {"sha": "8ec16419a22a04845d3795f32a92f2017cdfda5e", "filename": "src/test/run-pass/monomorphize-abi-alignment.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -18,26 +18,21 @@\n  * and apply the wrong instance of the method `unwrap`.\n  */\n \n+#[derive(Copy)]\n struct S<T> { i:u8, t:T }\n \n-impl<T:Copy> Copy for S<T> {}\n-\n impl<T> S<T> {\n     fn unwrap(self) -> T {\n         self.t\n     }\n }\n \n-#[derive(PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n struct A((u32, u32));\n \n-impl Copy for A {}\n-\n-#[derive(PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n struct B(u64);\n \n-impl Copy for B {}\n-\n pub fn main() {\n     static Ca: S<A> = S { i: 0, t: A((13, 104)) };\n     static Cb: S<B> = S { i: 0, t: B(31337) };"}, {"sha": "b9435afdc7a934b93d89eb4e4a6b14c86af87f1b", "filename": "src/test/run-pass/multidispatch1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fmultidispatch1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fmultidispatch1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultidispatch1.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -14,12 +14,11 @@ trait MyTrait<T> {\n     fn get(&self) -> T;\n }\n \n+#[derive(Copy)]\n struct MyType {\n     dummy: uint\n }\n \n-impl Copy for MyType {}\n-\n impl MyTrait<uint> for MyType {\n     fn get(&self) -> uint { self.dummy }\n }"}, {"sha": "ecacc7f1df98126b86c532f657a51938348cc6cb", "filename": "src/test/run-pass/multidispatch2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -23,12 +23,11 @@ impl<T> MyTrait<T> for T\n     }\n }\n \n+#[derive(Copy)]\n struct MyType {\n     dummy: uint\n }\n \n-impl Copy for MyType {}\n-\n impl MyTrait<uint> for MyType {\n     fn get(&self) -> uint { self.dummy }\n }"}, {"sha": "869ae4a37d22a62b4e881ea58c71130f843ca881", "filename": "src/test/run-pass/newtype.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -8,17 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[derive(Copy)]\n struct mytype(Mytype);\n \n-impl Copy for mytype {}\n-\n+#[derive(Copy)]\n struct Mytype {\n     compute: fn(mytype) -> int,\n     val: int,\n }\n \n-impl Copy for Mytype {}\n-\n fn compute(i: mytype) -> int {\n     let mytype(m) = i;\n     return m.val + 20;"}, {"sha": "eee9838da21ee68a96ef021397c716d49a4efb2c", "filename": "src/test/run-pass/out-pointer-aliasing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fout-pointer-aliasing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fout-pointer-aliasing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-pointer-aliasing.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[derive(Copy)]\n pub struct Foo {\n     f1: int,\n     _f2: int,\n }\n \n-impl Copy for Foo {}\n-\n #[inline(never)]\n pub fn foo(f: &mut Foo) -> Foo {\n     let ret = *f;"}, {"sha": "4c48b0ba710971fff20f113268d20657842485bb", "filename": "src/test/run-pass/overloaded-autoderef-order.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -11,13 +11,12 @@\n use std::rc::Rc;\n use std::ops::Deref;\n \n+#[derive(Copy)]\n struct DerefWrapper<X, Y> {\n     x: X,\n     y: Y\n }\n \n-impl<X:Copy,Y:Copy> Copy for DerefWrapper<X,Y> {}\n-\n impl<X, Y> DerefWrapper<X, Y> {\n     fn get_x(self) -> X {\n         self.x\n@@ -35,13 +34,12 @@ impl<X, Y> Deref for DerefWrapper<X, Y> {\n mod priv_test {\n     use std::ops::Deref;\n \n+    #[derive(Copy)]\n     pub struct DerefWrapperHideX<X, Y> {\n         x: X,\n         pub y: Y\n     }\n \n-    impl<X:Copy,Y:Copy> Copy for DerefWrapperHideX<X,Y> {}\n-\n     impl<X, Y> DerefWrapperHideX<X, Y> {\n         pub fn new(x: X, y: Y) -> DerefWrapperHideX<X, Y> {\n             DerefWrapperHideX {"}, {"sha": "c2e7a56d2709ef925160807626e63436fc7ab19c", "filename": "src/test/run-pass/packed-struct-vec.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -13,14 +13,12 @@\n use std::mem;\n \n #[repr(packed)]\n-#[derive(PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n struct Foo {\n     bar: u8,\n     baz: u64\n }\n \n-impl Copy for Foo {}\n-\n pub fn main() {\n     let foos = [Foo { bar: 1, baz: 2 }; 10];\n "}, {"sha": "dab7d26cc820039db62ed98f70a80afa3d10f866", "filename": "src/test/run-pass/rec-tup.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Frec-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Frec-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-tup.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[derive(Copy)]\n struct Point {x: int, y: int}\n \n-impl Copy for Point {}\n-\n type rect = (Point, Point);\n \n fn fst(r: rect) -> Point { let (fst, _) = r; return fst; }"}, {"sha": "f59538c51a07802b1ed6e453bb935c599826b5e7", "filename": "src/test/run-pass/rec.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Frec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Frec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -8,13 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n+#[derive(Copy)]\n struct Rect {x: int, y: int, w: int, h: int}\n \n-impl Copy for Rect {}\n-\n fn f(r: Rect, x: int, y: int, w: int, h: int) {\n     assert_eq!(r.x, x);\n     assert_eq!(r.y, y);"}, {"sha": "85402080f1170c228555f1bc0b4d1e338b44a395", "filename": "src/test/run-pass/regions-dependent-addr-of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -27,12 +27,11 @@ struct B {\n     v6: Option<C>\n }\n \n+#[derive(Copy)]\n struct C {\n     f: int\n }\n \n-impl Copy for C {}\n-\n fn get_v1(a: &A) -> &int {\n     // Region inferencer must deduce that &v < L2 < L1\n     let foo = &a.value; // L1"}, {"sha": "410415e57a0679be7fe84e6203a99e9722ff1696", "filename": "src/test/run-pass/regions-early-bound-used-in-bound-method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound-method.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -15,12 +15,11 @@ trait GetRef<'a> {\n     fn get(&self) -> &'a int;\n }\n \n+#[derive(Copy)]\n struct Box<'a> {\n     t: &'a int\n }\n \n-impl<'a> Copy for Box<'a> {}\n-\n impl<'a> GetRef<'a> for Box<'a> {\n     fn get(&self) -> &'a int {\n         self.t"}, {"sha": "e0d5e0a1c7811d929a0704455bb613bce2fbf138", "filename": "src/test/run-pass/regions-early-bound-used-in-type-param.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-type-param.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -15,12 +15,11 @@ trait Get<T> {\n     fn get(&self) -> T;\n }\n \n+#[derive(Copy)]\n struct Box<T> {\n     t: T\n }\n \n-impl<T:Copy> Copy for Box<T> {}\n-\n impl<T:Clone> Get<T> for Box<T> {\n     fn get(&self) -> T {\n         self.t.clone()"}, {"sha": "eec4ee1be94cfe2ccf6f4de1916c8308d3f510c7", "filename": "src/test/run-pass/regions-mock-tcx.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -27,14 +27,12 @@ use std::mem;\n \n type Type<'tcx> = &'tcx TypeStructure<'tcx>;\n \n-#[derive(Show)]\n+#[derive(Copy, Show)]\n enum TypeStructure<'tcx> {\n     TypeInt,\n     TypeFunction(Type<'tcx>, Type<'tcx>),\n }\n \n-impl<'tcx> Copy for TypeStructure<'tcx> {}\n-\n impl<'tcx> PartialEq for TypeStructure<'tcx> {\n     fn eq(&self, other: &TypeStructure<'tcx>) -> bool {\n         match (*self, *other) {\n@@ -91,30 +89,26 @@ impl<'tcx,'ast> TypeContext<'tcx, 'ast> {\n     }\n }\n \n-#[derive(PartialEq, Eq, Hash)]\n+#[derive(Copy, PartialEq, Eq, Hash)]\n struct NodeId {\n     id: uint\n }\n \n-impl Copy for NodeId {}\n-\n type Ast<'ast> = &'ast AstStructure<'ast>;\n \n+#[derive(Copy)]\n struct AstStructure<'ast> {\n     id: NodeId,\n     kind: AstKind<'ast>\n }\n \n-impl<'ast> Copy for AstStructure<'ast> {}\n-\n+#[derive(Copy)]\n enum AstKind<'ast> {\n     ExprInt,\n     ExprVar(uint),\n     ExprLambda(Ast<'ast>),\n }\n \n-impl<'ast> Copy for AstKind<'ast> {}\n-\n fn compute_types<'tcx,'ast>(tcx: &mut TypeContext<'tcx,'ast>,\n                             ast: Ast<'ast>) -> Type<'tcx>\n {"}, {"sha": "a4b5ea1d682823e1d93e8ab401ac1940fb19c5d1", "filename": "src/test/run-pass/self-in-mut-slot-immediate-value.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-immediate-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-immediate-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-immediate-value.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -11,12 +11,11 @@\n // Assert that `mut self` on an immediate value doesn't\n // allow mutating the original - issue #10615.\n \n+#[derive(Copy)]\n struct Value {\n     n: int\n }\n \n-impl Copy for Value {}\n-\n impl Value {\n     fn squared(mut self) -> Value {\n         self.n *= self.n;"}, {"sha": "1371c4cc5f4ad7f6405eaa290ad719d4bbbc4727", "filename": "src/test/run-pass/simd-generics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-generics.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -13,9 +13,9 @@\n \n use std::ops;\n \n-#[simd] struct f32x4(f32, f32, f32, f32);\n-\n-impl Copy for f32x4 {}\n+#[simd]\n+#[derive(Copy)]\n+struct f32x4(f32, f32, f32, f32);\n \n fn add<T: ops::Add<Output=T>>(lhs: T, rhs: T) -> T {\n     lhs + rhs"}, {"sha": "35283e466c1c099f4c6a6993cf5aa439652d8ff0", "filename": "src/test/run-pass/small-enum-range-edge.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -13,18 +13,16 @@\n  */\n \n #[repr(u8)]\n+#[derive(Copy)]\n enum Eu { Lu = 0, Hu = 255 }\n \n-impl Copy for Eu {}\n-\n static CLu: Eu = Eu::Lu;\n static CHu: Eu = Eu::Hu;\n \n #[repr(i8)]\n+#[derive(Copy)]\n enum Es { Ls = -128, Hs = 127 }\n \n-impl Copy for Es {}\n-\n static CLs: Es = Es::Ls;\n static CHs: Es = Es::Hs;\n "}, {"sha": "c8768731e2bdb5c19022a99f92bd134cb53d0ffe", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -10,14 +10,12 @@\n //\n // ignore-lexer-test FIXME #15883\n \n+#[derive(Copy)]\n pub struct Quad { a: u64, b: u64, c: u64, d: u64 }\n \n-impl Copy for Quad {}\n-\n+#[derive(Copy)]\n pub struct Floats { a: f64, b: u8, c: f64 }\n \n-impl Copy for Floats {}\n-\n mod rustrt {\n     use super::{Floats, Quad};\n "}, {"sha": "9278ebebc539dd25a9e982ed310f7ebf66749b65", "filename": "src/test/run-pass/structured-compare.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructured-compare.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -10,11 +10,9 @@\n \n \n \n-#[derive(Show)]\n+#[derive(Copy, Show)]\n enum foo { large, small, }\n \n-impl Copy for foo {}\n-\n impl PartialEq for foo {\n     fn eq(&self, other: &foo) -> bool {\n         ((*self) as uint) == ((*other) as uint)"}, {"sha": "915a0b5b7e3b76bb87c3dc2ba76e5aa4d756e527", "filename": "src/test/run-pass/tag-variant-disr-val.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n use color::{red, green, blue, black, white, imaginary, purple, orange};\n \n+#[derive(Copy)]\n enum color {\n     red = 0xff0000,\n     green = 0x00ff00,\n@@ -20,8 +21,6 @@ enum color {\n     orange = 8 >> 1\n }\n \n-impl Copy for color {}\n-\n impl PartialEq for color {\n     fn eq(&self, other: &color) -> bool {\n         ((*self) as uint) == ((*other) as uint)"}, {"sha": "fa02dabb373b198690cd228533e818a2ead112d3", "filename": "src/test/run-pass/trait-coercion-generic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -15,13 +15,12 @@ trait Trait<T> {\n     fn f(&self, x: T);\n }\n \n+#[derive(Copy)]\n struct Struct {\n     x: int,\n     y: int,\n }\n \n-impl Copy for Struct {}\n-\n impl Trait<&'static str> for Struct {\n     fn f(&self, x: &'static str) {\n         println!(\"Hi, {}!\", x);"}, {"sha": "b3d30e7372fe507a4141518f534b462a7b67ccd7", "filename": "src/test/run-pass/trait-coercion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -17,13 +17,12 @@ trait Trait {\n     fn f(&self);\n }\n \n+#[derive(Copy)]\n struct Struct {\n     x: int,\n     y: int,\n }\n \n-impl Copy for Struct {}\n-\n impl Trait for Struct {\n     fn f(&self) {\n         println!(\"Hi!\");"}, {"sha": "0ea7a1be432158c7313ab002e37b4cce70967094", "filename": "src/test/run-pass/typeclasses-eq-example-static.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -21,11 +21,9 @@ trait Equal {\n     fn isEq(a: &Self, b: &Self) -> bool;\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, Copy)]\n enum Color { cyan, magenta, yellow, black }\n \n-impl Copy for Color {}\n-\n impl Equal for Color {\n     fn isEq(a: &Color, b: &Color) -> bool {\n         match (*a, *b) {"}, {"sha": "69d22cf34f1b763dbd42e4440adfba013efef89d", "filename": "src/test/run-pass/typeclasses-eq-example.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -19,11 +19,9 @@ trait Equal {\n     fn isEq(&self, a: &Self) -> bool;\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, Copy)]\n enum Color { cyan, magenta, yellow, black }\n \n-impl Copy for Color {}\n-\n impl Equal for Color {\n     fn isEq(&self, a: &Color) -> bool {\n         match (*self, *a) {"}, {"sha": "2be9f75dae12ca2b1d071c262373524ee7b8c655", "filename": "src/test/run-pass/ufcs-explicit-self.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -11,12 +11,11 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n+#[derive(Copy)]\n struct Foo {\n     f: int,\n }\n \n-impl Copy for Foo {}\n-\n impl Foo {\n     fn foo(self: Foo, x: int) -> int {\n         self.f + x\n@@ -29,12 +28,11 @@ impl Foo {\n     }\n }\n \n+#[derive(Copy)]\n struct Bar<T> {\n     f: T,\n }\n \n-impl<T:Copy> Copy for Bar<T> {}\n-\n impl<T> Bar<T> {\n     fn foo(self: Bar<T>, x: int) -> int {\n         x"}, {"sha": "c1b7166b24ee456077658171d2001c746df42c55", "filename": "src/test/run-pass/unboxed-closures-monomorphization.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff462302b3e0a8f68c14cad2806c7ff5005364e/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs?ref=bff462302b3e0a8f68c14cad2806c7ff5005364e", "patch": "@@ -30,11 +30,9 @@ fn main(){\n     let mut f = bar(&x);\n     assert_eq!(f.call_mut(()), &x);\n \n-    #[derive(Clone, Show, PartialEq)]\n+    #[derive(Clone, Copy, Show, PartialEq)]\n     struct Foo(uint, &'static str);\n \n-    impl Copy for Foo {}\n-\n     let x = Foo(42, \"forty-two\");\n     let mut f = bar(x);\n     assert_eq!(f.call_mut(()), x);"}]}