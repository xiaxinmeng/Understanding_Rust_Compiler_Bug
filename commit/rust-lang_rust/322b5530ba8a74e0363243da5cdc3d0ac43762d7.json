{"sha": "322b5530ba8a74e0363243da5cdc3d0ac43762d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMmI1NTMwYmE4YTc0ZTAzNjMyNDNkYTVjZGMzZDBhYzQzNzYyZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-27T17:45:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-27T17:45:10Z"}, "message": "Auto merge of #36609 - brson:relnotes, r=alexcrichton\n\nAdd changelog for 1.12\n\n[Rendered](https://github.com/brson/rust/blob/relnotes/RELEASES.md).", "tree": {"sha": "66b2860e5548a55ca6b8afd03c0001e62f9bc435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66b2860e5548a55ca6b8afd03c0001e62f9bc435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/322b5530ba8a74e0363243da5cdc3d0ac43762d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/322b5530ba8a74e0363243da5cdc3d0ac43762d7", "html_url": "https://github.com/rust-lang/rust/commit/322b5530ba8a74e0363243da5cdc3d0ac43762d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/322b5530ba8a74e0363243da5cdc3d0ac43762d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea65ab6c7e96bf38c291ed7192137e6b96772687", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea65ab6c7e96bf38c291ed7192137e6b96772687", "html_url": "https://github.com/rust-lang/rust/commit/ea65ab6c7e96bf38c291ed7192137e6b96772687"}, {"sha": "a6903e4e38e93bd3dee4a208b69533a25ca72830", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6903e4e38e93bd3dee4a208b69533a25ca72830", "html_url": "https://github.com/rust-lang/rust/commit/a6903e4e38e93bd3dee4a208b69533a25ca72830"}], "stats": {"total": 256, "additions": 256, "deletions": 0}, "files": [{"sha": "a747d046968211d1887d186a4ee71dbef0768a90", "filename": "RELEASES.md", "status": "modified", "additions": 256, "deletions": 0, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/322b5530ba8a74e0363243da5cdc3d0ac43762d7/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/322b5530ba8a74e0363243da5cdc3d0ac43762d7/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=322b5530ba8a74e0363243da5cdc3d0ac43762d7", "patch": "@@ -1,3 +1,259 @@\n+Version 1.12.0 (2016-09-29)\n+===========================\n+\n+Highlights\n+----------\n+\n+* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)]\n+  (https://github.com/rust-lang/rust/pull/34096).\n+  This translation pass is far simpler than the previous AST->LLVM pass, and\n+  creates opportunities to perform new optimizations directly on the MIR. It\n+  was previously described [on the Rust blog]\n+  (https://blog.rust-lang.org/2016/04/19/MIR.html).\n+* [`rustc` presents a new, more readable error format, along with\n+  machine-readable JSON error output for use by IDEs]\n+  (https://github.com/rust-lang/rust/pull/35401).\n+  Most common editors supporting Rust have been updated to work with it. It was\n+  previously described [on the Rust blog]\n+  (https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n+\n+Compiler\n+--------\n+\n+* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)]\n+  (https://github.com/rust-lang/rust/pull/34096).\n+  This translation pass is far simpler than the previous AST->LLVM pass, and\n+  creates opportunities to perform new optimizations directly on the MIR. It\n+  was previously described [on the Rust blog]\n+  (https://blog.rust-lang.org/2016/04/19/MIR.html).\n+* [Print the Rust target name, not the LLVM target name, with\n+  `--print target-list`]\n+  (https://github.com/rust-lang/rust/pull/35489)\n+* [The computation of `TypeId` is correct in some cases where it was previously\n+  producing inconsistent results]\n+  (https://github.com/rust-lang/rust/pull/35267)\n+* [The `mips-unknown-linux-gnu` target uses hardware floating point by default]\n+  (https://github.com/rust-lang/rust/pull/34910)\n+* [The `rustc` arguments, `--print target-cpus`, `--print target-features`,\n+  `--print relocation-models`, and `--print code-models` print the available\n+  options to the `-C target-cpu`, `-C target-feature`, `-C relocation-model` and\n+  `-C code-model` code generation arguments]\n+  (https://github.com/rust-lang/rust/pull/34845)\n+* [`rustc` supports three new MUSL targets on ARM: `arm-unknown-linux-musleabi`,\n+  `arm-unknown-linux-musleabihf`, and `armv7-unknown-linux-musleabihf`]\n+  (https://github.com/rust-lang/rust/pull/35060).\n+  These targets produce statically-linked binaries. There are no binary release\n+  builds yet though.\n+\n+Diagnostics\n+-----------\n+\n+* [`rustc` presents a new, more readable error format, along with\n+  machine-readable JSON error output for use by IDEs]\n+  (https://github.com/rust-lang/rust/pull/35401).\n+  Most common editors supporting Rust have been updated to work with it. It was\n+  previously described [on the Rust blog]\n+  (https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n+* [In error descriptions, references are now described in plain english,\n+  instead of as \"&-ptr\"]\n+  (https://github.com/rust-lang/rust/pull/35611)\n+* [In error type descriptions, unknown numeric types are named `{integer}` or\n+  `{float}` instead of `_`]\n+  (https://github.com/rust-lang/rust/pull/35080)\n+* [`rustc` emits a clearer error when inner attributes follow a doc comment]\n+  (https://github.com/rust-lang/rust/pull/34676)\n+\n+Language\n+--------\n+\n+* [`macro_rules!` invocations can be made within `macro_rules!` invocations]\n+  (https://github.com/rust-lang/rust/pull/34925)\n+* [`macro_rules!` meta-variables are hygienic]\n+  (https://github.com/rust-lang/rust/pull/35453)\n+* [`macro_rules!` `tt` matchers can be reparsed correctly, making them much more\n+  useful]\n+  (https://github.com/rust-lang/rust/pull/34908)\n+* [`macro_rules!` `stmt` matchers correctly consume the entire contents when\n+  inside non-braces invocations]\n+  (https://github.com/rust-lang/rust/pull/34886)\n+* [Semicolons are properly required as statement delimeters inside\n+  `macro_rules!` invocations]\n+  (https://github.com/rust-lang/rust/pull/34660)\n+* [`cfg_attr` works on `path` attributes]\n+  (https://github.com/rust-lang/rust/pull/34546)\n+\n+Stabilized APIs\n+---------------\n+\n+* [`Cell::as_ptr`]\n+  (https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_ptr)\n+* [`RefCell::as_ptr`]\n+  (https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.as_ptr)\n+* [`IpAddr::is_unspecified`]\n+  (https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_unspecified)\n+* [`IpAddr::is_loopback`]\n+  (https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_loopback)\n+* [`IpAddr::is_multicast`]\n+  (https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_multicast)\n+* [`Ipv4Addr::is_unspecified`]\n+  (https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html#method.is_unspecified)\n+* [`Ipv6Addr::octets`]\n+  (https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html#method.octets)\n+* [`LinkedList::contains`]\n+  (https://doc.rust-lang.org/std/collections/linked_list/struct.LinkedList.html#method.contains)\n+* [`VecDeque::contains`]\n+  (https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.contains)\n+* [`ExitStatusExt::from_raw`]\n+  (https://doc.rust-lang.org/std/os/unix/process/trait.ExitStatusExt.html#tymethod.from_raw).\n+  Both on Unix and Windows.\n+* [`Receiver::recv_timeout`]\n+  (https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.recv_timeout)\n+* [`RecvTimeoutError`]\n+  (https://doc.rust-lang.org/std/sync/mpsc/enum.RecvTimeoutError.html)\n+* [`BinaryHeap::peek_mut`]\n+  (https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.peek_mut)\n+* [`PeekMut`]\n+  (https://doc.rust-lang.org/std/collections/binary_heap/struct.PeekMut.html)\n+* [`iter::Product`]\n+  (https://doc.rust-lang.org/std/iter/trait.Product.html)\n+* [`iter::Sum`]\n+  (https://doc.rust-lang.org/std/iter/trait.Sum.html)\n+* [`OccupiedEntry::remove_entry`]\n+  (https://doc.rust-lang.org/std/collections/btree_map/struct.OccupiedEntry.html#method.remove_entry)\n+* [`VacantEntry::into_key`]\n+  (https://doc.rust-lang.org/std/collections/btree_map/struct.VacantEntry.html#method.into_key)\n+\n+Libraries\n+---------\n+\n+* [The `format!` macro and friends now allow a single argument to be formatted\n+  in multiple styles]\n+  (https://github.com/rust-lang/rust/pull/33642)\n+* [The lifetime bounds on `[T]::binary_search_by` and\n+  `[T]::binary_search_by_key` have been adjusted to be more flexible]\n+  (https://github.com/rust-lang/rust/pull/34762)\n+* [`Option` implements `From` for its contained type]\n+  (https://github.com/rust-lang/rust/pull/34828)\n+* [`Cell`, `RefCell` and `UnsafeCell` implement `From` for their contained type]\n+  (https://github.com/rust-lang/rust/pull/35392)\n+* [`RwLock` panics if the reader count overflows]\n+  (https://github.com/rust-lang/rust/pull/35378)\n+* [`vec_deque::Drain`, `hash_map::Drain` and `hash_set::Drain` are covariant]\n+  (https://github.com/rust-lang/rust/pull/35354)\n+* [`vec::Drain` and `binary_heap::Drain` are covariant]\n+  (https://github.com/rust-lang/rust/pull/34951)\n+* [`Cow<str>` implements `FromIterator` for `char`, `&str` and `String`]\n+  (https://github.com/rust-lang/rust/pull/35064)\n+* [Sockets on Linux are correctly closed in subprocesses via `SOCK_CLOEXEC`]\n+  (https://github.com/rust-lang/rust/pull/34946)\n+* [`hash_map::Entry`, `hash_map::VacantEntry` and `hash_map::OccupiedEntry`\n+  implement `Debug`]\n+  (https://github.com/rust-lang/rust/pull/34946)\n+* [`btree_map::Entry`, `btree_map::VacantEntry` and `btree_map::OccupiedEntry`\n+  implement `Debug`]\n+  (https://github.com/rust-lang/rust/pull/34885)\n+* [`String` implements `AddAssign`]\n+  (https://github.com/rust-lang/rust/pull/34890)\n+* [Variadic `extern fn` pointers implement the `Clone`, `PartialEq`, `Eq`,\n+  `PartialOrd`, `Ord`, `Hash`, `fmt::Pointer`, and `fmt::Debug` traits]\n+  (https://github.com/rust-lang/rust/pull/34879)\n+* [`FileType` implements `Debug`]\n+  (https://github.com/rust-lang/rust/pull/34757)\n+* [References to `Mutex` and `RwLock` are unwind-safe]\n+  (https://github.com/rust-lang/rust/pull/34756)\n+* [`mpsc::sync_channel` `Receiver`s return any available message before\n+  reporting a disconnect]\n+  (https://github.com/rust-lang/rust/pull/34731)\n+* [Unicode definitions have been updated to 9.0]\n+  (https://github.com/rust-lang/rust/pull/34599)\n+* [`env` iterators implement `DoubleEndedIterator`]\n+  (https://github.com/rust-lang/rust/pull/33312)\n+\n+Cargo\n+-----\n+\n+* [Support local mirrors of registries]\n+  (https://github.com/rust-lang/cargo/pull/2857)\n+* [Add support for command aliases]\n+  (https://github.com/rust-lang/cargo/pull/2679)\n+* [Allow `opt-level=\"s\"` / `opt-level=\"z\"` in profile overrides]\n+  (https://github.com/rust-lang/cargo/pull/3007)\n+* [Make `cargo doc --open --target` work as expected]\n+  (https://github.com/rust-lang/cargo/pull/2988)\n+* [Speed up noop registry updates]\n+  (https://github.com/rust-lang/cargo/pull/2974)\n+* [Update OpenSSL]\n+  (https://github.com/rust-lang/cargo/pull/2971)\n+* [Fix `--panic=abort` with plugins]\n+  (https://github.com/rust-lang/cargo/pull/2954)\n+* [Always pass `-C metadata` to the compiler]\n+  (https://github.com/rust-lang/cargo/pull/2946)\n+* [Fix depending on git repos with workspaces]\n+  (https://github.com/rust-lang/cargo/pull/2938)\n+* [Add a `--lib` flag to `cargo new`]\n+  (https://github.com/rust-lang/cargo/pull/2921)\n+* [Add `http.cainfo` for custom certs]\n+  (https://github.com/rust-lang/cargo/pull/2917)\n+* [Indicate the compilation profile after compiling]\n+  (https://github.com/rust-lang/cargo/pull/2909)\n+* [Allow enabling features for dependencies with `--features`]\n+  (https://github.com/rust-lang/cargo/pull/2876)\n+* [Add `--jobs` flag to `cargo package`]\n+  (https://github.com/rust-lang/cargo/pull/2867)\n+* [Add `--dry-run` to `cargo publish`]\n+  (https://github.com/rust-lang/cargo/pull/2849)\n+* [Add support for `RUSTDOCFLAGS`]\n+  (https://github.com/rust-lang/cargo/pull/2794)\n+\n+Performance\n+-----------\n+\n+* [`panic::catch_unwind` is more optimized]\n+  (https://github.com/rust-lang/rust/pull/35444)\n+* [`panic::catch_unwind` no longer accesses thread-local storage on entry]\n+  (https://github.com/rust-lang/rust/pull/34866)\n+\n+Tooling\n+-------\n+\n+* [Test binaries now support a `--test-threads` argument to specify the number\n+  of threads used to run tests, and which acts the same as the\n+  `RUST_TEST_THREADS` environment variable]\n+  (https://github.com/rust-lang/rust/pull/35414)  \n+* [The test runner now emits a warning when tests run over 60 seconds]\n+  (https://github.com/rust-lang/rust/pull/35405)\n+* [rustdoc: Fix methods in search results]\n+  (https://github.com/rust-lang/rust/pull/34752)\n+* [`rust-lldb` warns about unsupported versions of LLDB]\n+  (https://github.com/rust-lang/rust/pull/34646)\n+* [Rust releases now come with source packages that can be installed by rustup\n+  via `rustup component add rust-src`]\n+  (https://github.com/rust-lang/rust/pull/34366).\n+  The resulting source code can be used by tools and IDES, located in the\n+  sysroot under `lib/rustlib/src`.\n+\n+Misc\n+----\n+\n+* [The compiler can now be built against LLVM 3.9]\n+  (https://github.com/rust-lang/rust/pull/35594)\n+* Many minor improvements to the documentation.\n+* [The Rust exception handling \"personality\" routine is now written in Rust]\n+  (https://github.com/rust-lang/rust/pull/34832)\n+\n+Compatibility Notes\n+-------------------\n+\n+* [When printing Windows `OsStr`s, unpaired surrogate codepoints are escaped\n+  with the lowercase format instead of the uppercase]\n+  (https://github.com/rust-lang/rust/pull/35084)\n+* [When formatting strings, if \"precision\" is specified, the \"fill\",\n+  \"align\" and \"width\" specifiers are no longer ignored]\n+  (https://github.com/rust-lang/rust/pull/34544)\n+* [The `Debug` impl for strings no longer escapes all non-ASCII characters]\n+  (https://github.com/rust-lang/rust/pull/34485)\n+\n+\n Version 1.11.0 (2016-08-18)\n ===========================\n "}]}