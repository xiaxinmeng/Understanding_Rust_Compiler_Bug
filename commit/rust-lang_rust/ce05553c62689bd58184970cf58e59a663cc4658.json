{"sha": "ce05553c62689bd58184970cf58e59a663cc4658", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMDU1NTNjNjI2ODliZDU4MTg0OTcwY2Y1OGU1OWE2NjNjYzQ2NTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-09T11:36:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-09T11:36:32Z"}, "message": "Rollup merge of #71234 - maurer:init-array, r=cuviper\n\nrustllvm: Use .init_array rather than .ctors\n\nLLVM TargetMachines default to using the (now-legacy) .ctors\nrepresentation of init functions. Mixing .ctors and .init_array\nrepresentations can cause issues when linking with lld.\n\nThis happens in practice for:\n\n* Our profiling runtime which is currently implicitly built with\n  .init_array since it is built by clang, which sets this field.\n* External C/C++ code that may be linked into the same process.\n\nFixes: #71233", "tree": {"sha": "836c9cb6fc1b58e02bffab0d1e1ab2b7e0d4a3fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/836c9cb6fc1b58e02bffab0d1e1ab2b7e0d4a3fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce05553c62689bd58184970cf58e59a663cc4658", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJetpXCCRBK7hj4Ov3rIwAAdHIIAKpQAnQkUXBzc8yMMVsTeqQD\nRqtw1c7mMwHSpSO5ltpOUIbWI5ppyxdvMnNYnHvokMEc9424U58o8p1dkIX1dVEe\nLyRji2OttsJfrtGUJKK8hk1h3KsHJ6uQh7yI+GxRJUthidMBfvioUVV8+WAwzAhe\noXGoWzNOABu2fxoQn7dRzKt1SFiAmhEjm/aFsFqEmajabKyaZSPqP25ZFlaZl/AR\n8efcF6bltPl+aSXfDHn7uUsXb5e8YDcyrsd5X9ZUsnM6T3y4A7SyILd3E4Jjnz4s\nYpjkKWhzFJAq3G4S6maDgTHoFbdfXNY+pNlPo/Nb78Rlh77Eh0khrbImIpGozXg=\n=uI+A\n-----END PGP SIGNATURE-----\n", "payload": "tree 836c9cb6fc1b58e02bffab0d1e1ab2b7e0d4a3fe\nparent 1704dca270e86f5d33c84e1952897c2c33ad5256\nparent 0e7d5be4b808bd7ccb1d45aa8f7e5026a15aee93\nauthor Ralf Jung <post@ralfj.de> 1589024192 +0200\ncommitter GitHub <noreply@github.com> 1589024192 +0200\n\nRollup merge of #71234 - maurer:init-array, r=cuviper\n\nrustllvm: Use .init_array rather than .ctors\n\nLLVM TargetMachines default to using the (now-legacy) .ctors\nrepresentation of init functions. Mixing .ctors and .init_array\nrepresentations can cause issues when linking with lld.\n\nThis happens in practice for:\n\n* Our profiling runtime which is currently implicitly built with\n  .init_array since it is built by clang, which sets this field.\n* External C/C++ code that may be linked into the same process.\n\nFixes: #71233\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce05553c62689bd58184970cf58e59a663cc4658", "html_url": "https://github.com/rust-lang/rust/commit/ce05553c62689bd58184970cf58e59a663cc4658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce05553c62689bd58184970cf58e59a663cc4658/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1704dca270e86f5d33c84e1952897c2c33ad5256", "url": "https://api.github.com/repos/rust-lang/rust/commits/1704dca270e86f5d33c84e1952897c2c33ad5256", "html_url": "https://github.com/rust-lang/rust/commit/1704dca270e86f5d33c84e1952897c2c33ad5256"}, {"sha": "0e7d5be4b808bd7ccb1d45aa8f7e5026a15aee93", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7d5be4b808bd7ccb1d45aa8f7e5026a15aee93", "html_url": "https://github.com/rust-lang/rust/commit/0e7d5be4b808bd7ccb1d45aa8f7e5026a15aee93"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "dd9ada0b95daa6f8684f3bcac650d9415f152411", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce05553c62689bd58184970cf58e59a663cc4658/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce05553c62689bd58184970cf58e59a663cc4658/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=ce05553c62689bd58184970cf58e59a663cc4658", "patch": "@@ -165,6 +165,13 @@ pub fn target_machine_factory(\n \n     let asm_comments = sess.asm_comments();\n     let relax_elf_relocations = sess.target.target.options.relax_elf_relocations;\n+\n+    let use_init_array = !sess\n+        .opts\n+        .debugging_opts\n+        .use_ctors_section\n+        .unwrap_or(sess.target.target.options.use_ctors_section);\n+\n     Arc::new(move || {\n         let tm = unsafe {\n             llvm::LLVMRustCreateTargetMachine(\n@@ -184,6 +191,7 @@ pub fn target_machine_factory(\n                 asm_comments,\n                 emit_stack_size_section,\n                 relax_elf_relocations,\n+                use_init_array,\n             )\n         };\n "}, {"sha": "0d466c2cd745aa00f870a307aef17616070b5daa", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce05553c62689bd58184970cf58e59a663cc4658/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce05553c62689bd58184970cf58e59a663cc4658/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=ce05553c62689bd58184970cf58e59a663cc4658", "patch": "@@ -1956,6 +1956,7 @@ extern \"C\" {\n         AsmComments: bool,\n         EmitStackSizeSection: bool,\n         RelaxELFRelocations: bool,\n+        UseInitArray: bool,\n     ) -> Option<&'static mut TargetMachine>;\n     pub fn LLVMRustDisposeTargetMachine(T: &'static mut TargetMachine);\n     pub fn LLVMRustAddBuilderLibraryInfo("}, {"sha": "de304bcec236126eff494c59b4cad965ceef321b", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce05553c62689bd58184970cf58e59a663cc4658/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce05553c62689bd58184970cf58e59a663cc4658/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=ce05553c62689bd58184970cf58e59a663cc4658", "patch": "@@ -571,6 +571,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(tls_model, Some(TlsModel::GeneralDynamic));\n     tracked!(treat_err_as_bug, Some(1));\n     tracked!(unleash_the_miri_inside_of_you, true);\n+    tracked!(use_ctors_section, Some(true));\n     tracked!(verify_llvm_ir, true);\n }\n "}, {"sha": "4eabb55e6dfe7523ddea78ee8b1ca845585fb32d", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce05553c62689bd58184970cf58e59a663cc4658/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce05553c62689bd58184970cf58e59a663cc4658/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=ce05553c62689bd58184970cf58e59a663cc4658", "patch": "@@ -1010,6 +1010,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\"),\n     unstable_options: bool = (false, parse_bool, [UNTRACKED],\n         \"adds unstable command line options to rustc interface (default: no)\"),\n+    use_ctors_section: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"use legacy .ctors section for initializers rather than .init_array\"),\n     verbose: bool = (false, parse_bool, [UNTRACKED],\n         \"in general, enable more debug printouts (default: no)\"),\n     verify_llvm_ir: bool = (false, parse_bool, [TRACKED],"}, {"sha": "477161dc658d92a925a3ea1632f7dcf9c7210bb2", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce05553c62689bd58184970cf58e59a663cc4658/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce05553c62689bd58184970cf58e59a663cc4658/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=ce05553c62689bd58184970cf58e59a663cc4658", "patch": "@@ -882,6 +882,10 @@ pub struct TargetOptions {\n \n     /// Additional arguments to pass to LLVM, similar to the `-C llvm-args` codegen option.\n     pub llvm_args: Vec<String>,\n+\n+    /// Whether to use legacy .ctors initialization hooks rather than .init_array. Defaults\n+    /// to false (uses .init_array).\n+    pub use_ctors_section: bool,\n }\n \n impl Default for TargetOptions {\n@@ -972,6 +976,7 @@ impl Default for TargetOptions {\n             llvm_abiname: \"\".to_string(),\n             relax_elf_relocations: false,\n             llvm_args: vec![],\n+            use_ctors_section: false,\n         }\n     }\n }\n@@ -1312,6 +1317,7 @@ impl Target {\n         key!(llvm_abiname);\n         key!(relax_elf_relocations, bool);\n         key!(llvm_args, list);\n+        key!(use_ctors_section, bool);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -1541,6 +1547,7 @@ impl ToJson for Target {\n         target_option_val!(llvm_abiname);\n         target_option_val!(relax_elf_relocations);\n         target_option_val!(llvm_args);\n+        target_option_val!(use_ctors_section);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert("}, {"sha": "988346af2d72c8f9068fe63a511002b932ecc6db", "filename": "src/librustc_target/spec/netbsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce05553c62689bd58184970cf58e59a663cc4658/src%2Flibrustc_target%2Fspec%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce05553c62689bd58184970cf58e59a663cc4658/src%2Flibrustc_target%2Fspec%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fnetbsd_base.rs?ref=ce05553c62689bd58184970cf58e59a663cc4658", "patch": "@@ -23,6 +23,7 @@ pub fn opts() -> TargetOptions {\n         pre_link_args: args,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,\n+        use_ctors_section: true,\n         ..Default::default()\n     }\n }"}, {"sha": "84bde9a52f7ced3da105e993b3962d7f4ea78952", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce05553c62689bd58184970cf58e59a663cc4658/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ce05553c62689bd58184970cf58e59a663cc4658/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=ce05553c62689bd58184970cf58e59a663cc4658", "patch": "@@ -447,7 +447,8 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     bool Singlethread,\n     bool AsmComments,\n     bool EmitStackSizeSection,\n-    bool RelaxELFRelocations) {\n+    bool RelaxELFRelocations,\n+    bool UseInitArray) {\n \n   auto OptLevel = fromRust(RustOptLevel);\n   auto RM = fromRust(RustReloc);\n@@ -473,6 +474,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n   Options.MCOptions.PreserveAsmComments = AsmComments;\n   Options.MCOptions.ABIName = ABIStr;\n   Options.RelaxELFRelocations = RelaxELFRelocations;\n+  Options.UseInitArray = UseInitArray;\n \n   if (TrapUnreachable) {\n     // Tell LLVM to codegen `unreachable` into an explicit trap instruction."}]}