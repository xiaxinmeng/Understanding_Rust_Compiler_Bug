{"sha": "86b3dd9e0abb0126f0718a8cade40d14b63fcb46", "node_id": "C_kwDOAAsO6NoAKDg2YjNkZDllMGFiYjAxMjZmMDcxOGE4Y2FkZTQwZDE0YjYzZmNiNDY", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2021-09-26T21:38:51Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2021-10-20T20:19:13Z"}, "message": "stabilize CString::from_vec_with_nul[_unchecked]", "tree": {"sha": "bc3151d34b99c2e9c728e14de4d31363f51bd9d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc3151d34b99c2e9c728e14de4d31363f51bd9d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86b3dd9e0abb0126f0718a8cade40d14b63fcb46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86b3dd9e0abb0126f0718a8cade40d14b63fcb46", "html_url": "https://github.com/rust-lang/rust/commit/86b3dd9e0abb0126f0718a8cade40d14b63fcb46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86b3dd9e0abb0126f0718a8cade40d14b63fcb46/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "3d71e749a244890cd370d49963e747cf92f4a037", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d71e749a244890cd370d49963e747cf92f4a037", "html_url": "https://github.com/rust-lang/rust/commit/3d71e749a244890cd370d49963e747cf92f4a037"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "cb09717bde577f1eb623505fc67a0670db12597b", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/86b3dd9e0abb0126f0718a8cade40d14b63fcb46/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b3dd9e0abb0126f0718a8cade40d14b63fcb46/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=86b3dd9e0abb0126f0718a8cade40d14b63fcb46", "patch": "@@ -251,13 +251,12 @@ pub struct FromBytesWithNulError {\n /// # Examples\n ///\n /// ```\n-/// #![feature(cstring_from_vec_with_nul)]\n /// use std::ffi::{CString, FromVecWithNulError};\n ///\n /// let _: FromVecWithNulError = CString::from_vec_with_nul(b\"f\\0oo\".to_vec()).unwrap_err();\n /// ```\n #[derive(Clone, PartialEq, Eq, Debug)]\n-#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]\n pub struct FromVecWithNulError {\n     error_kind: FromBytesWithNulErrorKind,\n     bytes: Vec<u8>,\n@@ -278,7 +277,7 @@ impl FromBytesWithNulError {\n     }\n }\n \n-#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]\n impl FromVecWithNulError {\n     /// Returns a slice of [`u8`]s bytes that were attempted to convert to a [`CString`].\n     ///\n@@ -287,7 +286,6 @@ impl FromVecWithNulError {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(cstring_from_vec_with_nul)]\n     /// use std::ffi::CString;\n     ///\n     /// // Some invalid bytes in a vector\n@@ -298,6 +296,7 @@ impl FromVecWithNulError {\n     /// assert_eq!(&bytes[..], value.unwrap_err().as_bytes());\n     /// ```\n     #[must_use]\n+    #[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]\n     pub fn as_bytes(&self) -> &[u8] {\n         &self.bytes[..]\n     }\n@@ -313,7 +312,6 @@ impl FromVecWithNulError {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(cstring_from_vec_with_nul)]\n     /// use std::ffi::CString;\n     ///\n     /// // Some invalid bytes in a vector\n@@ -324,6 +322,7 @@ impl FromVecWithNulError {\n     /// assert_eq!(bytes, value.unwrap_err().into_bytes());\n     /// ```\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n+    #[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]\n     pub fn into_bytes(self) -> Vec<u8> {\n         self.bytes\n     }\n@@ -704,15 +703,14 @@ impl CString {\n     /// # Example\n     ///\n     /// ```\n-    /// #![feature(cstring_from_vec_with_nul)]\n     /// use std::ffi::CString;\n     /// assert_eq!(\n     ///     unsafe { CString::from_vec_with_nul_unchecked(b\"abc\\0\".to_vec()) },\n     ///     unsafe { CString::from_vec_unchecked(b\"abc\".to_vec()) }\n     /// );\n     /// ```\n     #[must_use]\n-    #[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+    #[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]\n     pub unsafe fn from_vec_with_nul_unchecked(v: Vec<u8>) -> Self {\n         Self { inner: v.into_boxed_slice() }\n     }\n@@ -733,7 +731,6 @@ impl CString {\n     /// when called without the ending nul byte.\n     ///\n     /// ```\n-    /// #![feature(cstring_from_vec_with_nul)]\n     /// use std::ffi::CString;\n     /// assert_eq!(\n     ///     CString::from_vec_with_nul(b\"abc\\0\".to_vec())\n@@ -745,14 +742,13 @@ impl CString {\n     /// An incorrectly formatted [`Vec`] will produce an error.\n     ///\n     /// ```\n-    /// #![feature(cstring_from_vec_with_nul)]\n     /// use std::ffi::{CString, FromVecWithNulError};\n     /// // Interior nul byte\n     /// let _: FromVecWithNulError = CString::from_vec_with_nul(b\"a\\0bc\".to_vec()).unwrap_err();\n     /// // No nul byte\n     /// let _: FromVecWithNulError = CString::from_vec_with_nul(b\"abc\".to_vec()).unwrap_err();\n     /// ```\n-    #[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+    #[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]\n     pub fn from_vec_with_nul(v: Vec<u8>) -> Result<Self, FromVecWithNulError> {\n         let nul_pos = memchr::memchr(0, &v);\n         match nul_pos {\n@@ -1084,10 +1080,10 @@ impl fmt::Display for FromBytesWithNulError {\n     }\n }\n \n-#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]\n impl Error for FromVecWithNulError {}\n \n-#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]\n impl fmt::Display for FromVecWithNulError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.error_kind {"}, {"sha": "b72b8031fbdce53f19857c8161f85ab7ecc866ab", "filename": "library/std/src/ffi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b3dd9e0abb0126f0718a8cade40d14b63fcb46/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b3dd9e0abb0126f0718a8cade40d14b63fcb46/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs?ref=86b3dd9e0abb0126f0718a8cade40d14b63fcb46", "patch": "@@ -145,7 +145,7 @@\n \n #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n pub use self::c_str::FromBytesWithNulError;\n-#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.57.0\")]\n pub use self::c_str::FromVecWithNulError;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::c_str::{CStr, CString, IntoStringError, NulError};"}]}