{"sha": "95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "node_id": "C_kwDOAAsO6NoAKDk1YTk5MmE2ODY5NGQ4YmYzOTU5YmQyYzBhYzI3Y2U5ZTkyMDhiNTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-16T20:08:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-16T20:08:05Z"}, "message": "Auto merge of #97800 - pnkfelix:issue-97463-fix-aarch64-call-abi-does-not-zeroext, r=wesleywiser\n\nAarch64 call abi does not zeroext (and one cannot assume it does so)\n\nFix #97463", "tree": {"sha": "9a90798c6003614825ef3f5d1b2035bb7fcf0409", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a90798c6003614825ef3f5d1b2035bb7fcf0409"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "html_url": "https://github.com/rust-lang/rust/commit/95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d4e51e428ba7b1ece3c67d1c114e2b486dc85dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4e51e428ba7b1ece3c67d1c114e2b486dc85dd", "html_url": "https://github.com/rust-lang/rust/commit/4d4e51e428ba7b1ece3c67d1c114e2b486dc85dd"}, {"sha": "a2de75a8277d7aa265e9a95162a7834552181ede", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2de75a8277d7aa265e9a95162a7834552181ede", "html_url": "https://github.com/rust-lang/rust/commit/a2de75a8277d7aa265e9a95162a7834552181ede"}], "stats": {"total": 434, "additions": 423, "deletions": 11}, "files": [{"sha": "a84988fa75c6dd79279f954c7c56528f0b64cfcb", "filename": "compiler/rustc_target/src/abi/call/aarch64.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs?ref=95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "patch": "@@ -1,6 +1,27 @@\n use crate::abi::call::{ArgAbi, FnAbi, Reg, RegKind, Uniform};\n use crate::abi::{HasDataLayout, TyAbiInterface};\n \n+/// Given integer-types M and register width N (e.g. M=u16 and N=32 bits), the\n+/// `ParamExtension` policy specifies how a uM value should be treated when\n+/// passed via register or stack-slot of width N. See also rust-lang/rust#97463.\n+#[derive(Copy, Clone, PartialEq)]\n+pub enum ParamExtension {\n+    /// Indicates that when passing an i8/i16, either as a function argument or\n+    /// as a return value, it must be sign-extended to 32 bits, and likewise a\n+    /// u8/u16 must be zero-extended to 32-bits. (This variant is here to\n+    /// accommodate Apple's deviation from the usual AArch64 ABI as defined by\n+    /// ARM.)\n+    ///\n+    /// See also: <https://developer.apple.com/documentation/xcode/writing-arm64-code-for-apple-platforms#Pass-Arguments-to-Functions-Correctly>\n+    ExtendTo32Bits,\n+\n+    /// Indicates that no sign- nor zero-extension is performed: if a value of\n+    /// type with bitwidth M is passed as function argument or return value,\n+    /// then M bits are copied into the least significant M bits, and the\n+    /// remaining bits of the register (or word of memory) are untouched.\n+    NoExtension,\n+}\n+\n fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>) -> Option<Uniform>\n where\n     Ty: TyAbiInterface<'a, C> + Copy,\n@@ -24,13 +45,16 @@ where\n     })\n }\n \n-fn classify_ret<'a, Ty, C>(cx: &C, ret: &mut ArgAbi<'a, Ty>)\n+fn classify_ret<'a, Ty, C>(cx: &C, ret: &mut ArgAbi<'a, Ty>, param_policy: ParamExtension)\n where\n     Ty: TyAbiInterface<'a, C> + Copy,\n     C: HasDataLayout,\n {\n     if !ret.layout.is_aggregate() {\n-        ret.extend_integer_width_to(32);\n+        match param_policy {\n+            ParamExtension::ExtendTo32Bits => ret.extend_integer_width_to(32),\n+            ParamExtension::NoExtension => {}\n+        }\n         return;\n     }\n     if let Some(uniform) = is_homogeneous_aggregate(cx, ret) {\n@@ -46,13 +70,16 @@ where\n     ret.make_indirect();\n }\n \n-fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n+fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>, param_policy: ParamExtension)\n where\n     Ty: TyAbiInterface<'a, C> + Copy,\n     C: HasDataLayout,\n {\n     if !arg.layout.is_aggregate() {\n-        arg.extend_integer_width_to(32);\n+        match param_policy {\n+            ParamExtension::ExtendTo32Bits => arg.extend_integer_width_to(32),\n+            ParamExtension::NoExtension => {}\n+        }\n         return;\n     }\n     if let Some(uniform) = is_homogeneous_aggregate(cx, arg) {\n@@ -68,19 +95,19 @@ where\n     arg.make_indirect();\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n+pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>, param_policy: ParamExtension)\n where\n     Ty: TyAbiInterface<'a, C> + Copy,\n     C: HasDataLayout,\n {\n     if !fn_abi.ret.is_ignore() {\n-        classify_ret(cx, &mut fn_abi.ret);\n+        classify_ret(cx, &mut fn_abi.ret, param_policy);\n     }\n \n     for arg in fn_abi.args.iter_mut() {\n         if arg.is_ignore() {\n             continue;\n         }\n-        classify_arg(cx, arg);\n+        classify_arg(cx, arg, param_policy);\n     }\n }"}, {"sha": "d2fb8c32ffd275de5db709537a1b8f9bb72ade26", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "patch": "@@ -685,7 +685,14 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n                     }\n                 }\n             },\n-            \"aarch64\" => aarch64::compute_abi_info(cx, self),\n+            \"aarch64\" => {\n+                let param_policy = if cx.target_spec().is_like_osx {\n+                    aarch64::ParamExtension::ExtendTo32Bits\n+                } else {\n+                    aarch64::ParamExtension::NoExtension\n+                };\n+                aarch64::compute_abi_info(cx, self, param_policy)\n+            }\n             \"amdgpu\" => amdgpu::compute_abi_info(cx, self),\n             \"arm\" => arm::compute_abi_info(cx, self),\n             \"avr\" => avr::compute_abi_info(self),"}, {"sha": "dc16739bd560c7d78b9352969f25552a8d3ad8ed", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "patch": "@@ -1352,6 +1352,8 @@ pub struct TargetOptions {\n     pub abi_return_struct_as_int: bool,\n     /// Whether the target toolchain is like macOS's. Only useful for compiling against iOS/macOS,\n     /// in particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.\n+    /// Also indiates whether to use Apple-specific ABI changes, such as extending function\n+    /// parameters to 32-bits.\n     pub is_like_osx: bool,\n     /// Whether the target toolchain is like Solaris's.\n     /// Only useful for compiling against Illumos/Solaris,"}, {"sha": "977ea487a9804b229f83a93402020ca65487b124", "filename": "src/test/auxiliary/rust_test_helpers.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c", "raw_url": "https://github.com/rust-lang/rust/raw/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c?ref=95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "patch": "@@ -1,6 +1,7 @@\n // Helper functions used only in tests\n \n #include <stdint.h>\n+#include <stdlib.h>\n #include <assert.h>\n #include <stdarg.h>\n \n@@ -415,3 +416,14 @@ rust_dbg_unpack_option_u64u64(struct U8TaggedEnumOptionU64U64 o, uint64_t *a, ui\n         return 0;\n     }\n }\n+\n+uint16_t issue_97463_leak_uninit_data(uint32_t a, uint32_t b, uint32_t c) {\n+    struct bloc { uint16_t a; uint16_t b; uint16_t c; };\n+    struct bloc *data = malloc(sizeof(struct bloc));\n+\n+    data->a = a & 0xFFFF;\n+    data->b = b & 0xFFFF;\n+    data->c = c & 0xFFFF;\n+\n+    return data->b; /* leak data */\n+}"}, {"sha": "23ade3c7216d3c46070fbc49556281bbdbfbab02", "filename": "src/test/codegen/abi-repr-ext.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/src%2Ftest%2Fcodegen%2Fabi-repr-ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/src%2Ftest%2Fcodegen%2Fabi-repr-ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-repr-ext.rs?ref=95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "patch": "@@ -1,14 +1,56 @@\n // compile-flags: -O\n \n-#![crate_type=\"lib\"]\n+// revisions:x86_64 i686 aarch64-apple aarch64-windows aarch64-linux arm riscv\n+\n+//[x86_64] compile-flags: --target x86_64-unknown-uefi\n+//[x86_64] needs-llvm-components: x86\n+//[i686] compile-flags: --target i686-unknown-linux-musl\n+//[i686] needs-llvm-components: x86\n+//[aarch64-windows] compile-flags: --target aarch64-pc-windows-msvc\n+//[aarch64-windows] needs-llvm-components: aarch64\n+//[aarch64-linux] compile-flags: --target aarch64-unknown-linux-gnu\n+//[aarch64-linux] needs-llvm-components: aarch64\n+//[aarch64-apple] compile-flags: --target aarch64-apple-darwin\n+//[aarch64-apple] needs-llvm-components: aarch64\n+//[arm] compile-flags: --target armv7r-none-eabi\n+//[arm] needs-llvm-components: arm\n+//[riscv] compile-flags: --target riscv64gc-unknown-none-elf\n+//[riscv] needs-llvm-components: riscv\n+\n+// See bottom of file for a corresponding C source file that is meant to yield\n+// equivalent declarations.\n+#![feature(no_core, lang_items)]\n+#![crate_type = \"lib\"]\n+#![no_std]\n+#![no_core]\n+\n+#[lang=\"sized\"] trait Sized { }\n+#[lang=\"freeze\"] trait Freeze { }\n+#[lang=\"copy\"] trait Copy { }\n \n #[repr(i8)]\n pub enum Type {\n     Type1 = 0,\n     Type2 = 1\n }\n \n-// CHECK: define{{( dso_local)?}} noundef signext i8 @test()\n+// To accommodate rust#97800, one might consider writing the below as:\n+//\n+// `define{{( dso_local)?}} noundef{{( signext)?}} i8 @test()`\n+//\n+// but based on rust#80556, it seems important to actually check for the\n+// presence of the `signext` for those targets where we expect it.\n+\n+// CHECK: define{{( dso_local)?}} noundef\n+// x86_64-SAME:                 signext\n+// aarch64-apple-SAME:          signext\n+// aarch64-windows-NOT: signext\n+// aarch64-linux-NOT:   signext\n+// arm-SAME:                    signext\n+// riscv-SAME:                  signext\n+// CHECK-SAME: i8 @test()\n+\n+\n #[no_mangle]\n pub extern \"C\" fn test() -> Type {\n     Type::Type1"}, {"sha": "602a08067bae183cd1e489d24e3801d052421017", "filename": "src/test/codegen/pic-relocation-model.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/src%2Ftest%2Fcodegen%2Fpic-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/src%2Ftest%2Fcodegen%2Fpic-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpic-relocation-model.rs?ref=95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "patch": "@@ -10,7 +10,10 @@ pub fn call_foreign_fn() -> u8 {\n     }\n }\n \n-// CHECK: declare zeroext i8 @foreign_fn()\n+// (Allow but do not require `zeroext` here, because it is not worth effort to\n+// spell out which targets have it and which ones do not; see rust#97800.)\n+\n+// CHECK: declare{{( zeroext)?}} i8 @foreign_fn()\n extern \"C\" {fn foreign_fn() -> u8;}\n \n // CHECK: !{i32 {{[78]}}, !\"PIC Level\", i32 2}"}, {"sha": "7fc34af3da72a2d2137d3da41c9fd207737b4c91", "filename": "src/test/codegen/some-abis-do-extend-params-to-32-bits.rs", "status": "added", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/src%2Ftest%2Fcodegen%2Fsome-abis-do-extend-params-to-32-bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/src%2Ftest%2Fcodegen%2Fsome-abis-do-extend-params-to-32-bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsome-abis-do-extend-params-to-32-bits.rs?ref=95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "patch": "@@ -0,0 +1,204 @@\n+// compile-flags: -Cno-prepopulate-passes\n+\n+// revisions:x86_64 i686 aarch64-apple aarch64-windows aarch64-linux arm riscv\n+\n+//[x86_64] compile-flags: --target x86_64-unknown-uefi\n+//[x86_64] needs-llvm-components: x86\n+//[i686] compile-flags: --target i686-unknown-linux-musl\n+//[i686] needs-llvm-components: x86\n+//[aarch64-windows] compile-flags: --target aarch64-pc-windows-msvc\n+//[aarch64-windows] needs-llvm-components: aarch64\n+//[aarch64-linux] compile-flags: --target aarch64-unknown-linux-gnu\n+//[aarch64-linux] needs-llvm-components: aarch64\n+//[aarch64-apple] compile-flags: --target aarch64-apple-darwin\n+//[aarch64-apple] needs-llvm-components: aarch64\n+//[arm] compile-flags: --target armv7r-none-eabi\n+//[arm] needs-llvm-components: arm\n+//[riscv] compile-flags: --target riscv64gc-unknown-none-elf\n+//[riscv] needs-llvm-components: riscv\n+\n+// See bottom of file for a corresponding C source file that is meant to yield\n+// equivalent declarations.\n+#![feature(no_core, lang_items)]\n+#![crate_type = \"lib\"]\n+#![no_std]\n+#![no_core]\n+\n+#[lang=\"sized\"] trait Sized { }\n+#[lang=\"freeze\"] trait Freeze { }\n+#[lang=\"copy\"] trait Copy { }\n+\n+// The patterns in this file are written in the style of a table to make the\n+// uniformities and distinctions more apparent.\n+//\n+//                  ZERO/SIGN-EXTENDING TO 32 BITS            NON-EXTENDING\n+//                  ==============================  =======================\n+// x86_64:          void @c_arg_u8(i8 zeroext %_a)\n+// i686:            void @c_arg_u8(i8 zeroext %_a)\n+// aarch64-apple:   void @c_arg_u8(i8 zeroext %_a)\n+// aarch64-windows:                                  void @c_arg_u8(i8 %_a)\n+// aarch64-linux:                                    void @c_arg_u8(i8 %_a)\n+// arm:             void @c_arg_u8(i8 zeroext %_a)\n+// riscv:           void @c_arg_u8(i8 zeroext %_a)\n+#[no_mangle] pub extern \"C\" fn c_arg_u8(_a: u8) { }\n+\n+// x86_64:          void @c_arg_u16(i16 zeroext %_a)\n+// i686:            void @c_arg_u16(i16 zeroext %_a)\n+// aarch64-apple:   void @c_arg_u16(i16 zeroext %_a)\n+// aarch64-windows:                                 void @c_arg_u16(i16 %_a)\n+// aarch64-linux:                                   void @c_arg_u16(i16 %_a)\n+// arm:             void @c_arg_u16(i16 zeroext %_a)\n+// riscv:           void @c_arg_u16(i16 zeroext %_a)\n+#[no_mangle] pub extern \"C\" fn c_arg_u16(_a: u16) { }\n+\n+// x86_64:          void @c_arg_u32(i32 %_a)\n+// i686:            void @c_arg_u32(i32 %_a)\n+// aarch64-apple:   void @c_arg_u32(i32 %_a)\n+// aarch64-windows:                                 void @c_arg_u32(i32 %_a)\n+// aarch64-linux:                                   void @c_arg_u32(i32 %_a)\n+// arm:             void @c_arg_u32(i32 %_a)\n+// riscv:           void @c_arg_u32(i32 signext %_a)\n+#[no_mangle] pub extern \"C\" fn c_arg_u32(_a: u32) { }\n+\n+// x86_64:          void @c_arg_u64(i64 %_a)\n+// i686:            void @c_arg_u64(i64 %_a)\n+// aarch64-apple:   void @c_arg_u64(i64 %_a)\n+// aarch64-windows:                                 void @c_arg_u64(i64 %_a)\n+// aarch64-linux:                                   void @c_arg_u64(i64 %_a)\n+// arm:             void @c_arg_u64(i64 %_a)\n+// riscv:           void @c_arg_u64(i64 %_a)\n+#[no_mangle] pub extern \"C\" fn c_arg_u64(_a: u64) { }\n+\n+// x86_64:          void @c_arg_i8(i8 signext %_a)\n+// i686:            void @c_arg_i8(i8 signext %_a)\n+// aarch64-apple:   void @c_arg_i8(i8 signext %_a)\n+// aarch64-windows:                                  void @c_arg_i8(i8 %_a)\n+// aarch64-linux:                                    void @c_arg_i8(i8 %_a)\n+// arm:             void @c_arg_i8(i8 signext %_a)\n+// riscv:           void @c_arg_i8(i8 signext %_a)\n+#[no_mangle] pub extern \"C\" fn c_arg_i8(_a: i8) { }\n+\n+// x86_64:          void @c_arg_i16(i16 signext %_a)\n+// i686:            void @c_arg_i16(i16 signext %_a)\n+// aarch64-apple:   void @c_arg_i16(i16 signext %_a)\n+// aarch64-windows:                                 void @c_arg_i16(i16 %_a)\n+// aarch64-linux:                                   void @c_arg_i16(i16 %_a)\n+// arm:             void @c_arg_i16(i16 signext %_a)\n+// riscv:           void @c_arg_i16(i16 signext %_a)\n+#[no_mangle] pub extern \"C\" fn c_arg_i16(_a: i16) { }\n+\n+// x86_64:          void @c_arg_i32(i32 %_a)\n+// i686:            void @c_arg_i32(i32 %_a)\n+// aarch64-apple:   void @c_arg_i32(i32 %_a)\n+// aarch64-windows:                                 void @c_arg_i32(i32 %_a)\n+// aarch64-linux:                                   void @c_arg_i32(i32 %_a)\n+// arm:             void @c_arg_i32(i32 %_a)\n+// riscv:           void @c_arg_i32(i32 signext %_a)\n+#[no_mangle] pub extern \"C\" fn c_arg_i32(_a: i32) { }\n+\n+// x86_64:          void @c_arg_i64(i64 %_a)\n+// i686:            void @c_arg_i64(i64 %_a)\n+// aarch64-apple:   void @c_arg_i64(i64 %_a)\n+// aarch64-windows:                                 void @c_arg_i64(i64 %_a)\n+// aarch64-linux:                                   void @c_arg_i64(i64 %_a)\n+// arm:             void @c_arg_i64(i64 %_a)\n+// riscv:           void @c_arg_i64(i64 %_a)\n+#[no_mangle] pub extern \"C\" fn c_arg_i64(_a: i64) { }\n+\n+// x86_64:          zeroext i8 @c_ret_u8()\n+// i686:            zeroext i8 @c_ret_u8()\n+// aarch64-apple:   zeroext i8 @c_ret_u8()\n+// aarch64-windows:                                 i8 @c_ret_u8()\n+// aarch64-linux:                                   i8 @c_ret_u8()\n+// arm:             zeroext i8 @c_ret_u8()\n+// riscv:           zeroext i8 @c_ret_u8()\n+#[no_mangle] pub extern \"C\" fn c_ret_u8() -> u8 { 0 }\n+\n+// x86_64:          zeroext i16 @c_ret_u16()\n+// i686:            zeroext i16 @c_ret_u16()\n+// aarch64-apple:   zeroext i16 @c_ret_u16()\n+// aarch64-windows:                                 i16 @c_ret_u16()\n+// aarch64-linux:                                   i16 @c_ret_u16()\n+// arm:             zeroext i16 @c_ret_u16()\n+// riscv:           zeroext i16 @c_ret_u16()\n+#[no_mangle] pub extern \"C\" fn c_ret_u16() -> u16 { 0 }\n+\n+// x86_64:          i32 @c_ret_u32()\n+// i686:            i32 @c_ret_u32()\n+// aarch64-apple:   i32 @c_ret_u32()\n+// aarch64-windows:                                 i32 @c_ret_u32()\n+// aarch64-linux:                                   i32 @c_ret_u32()\n+// arm:             i32 @c_ret_u32()\n+// riscv:           signext i32 @c_ret_u32()\n+#[no_mangle] pub extern \"C\" fn c_ret_u32() -> u32 { 0 }\n+\n+// x86_64:          i64 @c_ret_u64()\n+// i686:            i64 @c_ret_u64()\n+// aarch64-apple:   i64 @c_ret_u64()\n+// aarch64-windows:                                 i64 @c_ret_u64()\n+// aarch64-linux:                                   i64 @c_ret_u64()\n+// arm:             i64 @c_ret_u64()\n+// riscv:           i64 @c_ret_u64()\n+#[no_mangle] pub extern \"C\" fn c_ret_u64() -> u64 { 0 }\n+\n+// x86_64:          signext i8 @c_ret_i8()\n+// i686:            signext i8 @c_ret_i8()\n+// aarch64-apple:   signext i8 @c_ret_i8()\n+// aarch64-windows:                                 i8 @c_ret_i8()\n+// aarch64-linux:                                   i8 @c_ret_i8()\n+// arm:             signext i8 @c_ret_i8()\n+// riscv:           signext i8 @c_ret_i8()\n+#[no_mangle] pub extern \"C\" fn c_ret_i8() -> i8 { 0 }\n+\n+// x86_64:          signext i16 @c_ret_i16()\n+// i686:            signext i16 @c_ret_i16()\n+// aarch64-apple:   signext i16 @c_ret_i16()\n+// aarch64-windows:                                 i16 @c_ret_i16()\n+// aarch64-linux:                                   i16 @c_ret_i16()\n+// arm:             signext i16 @c_ret_i16()\n+// riscv:           signext i16 @c_ret_i16()\n+#[no_mangle] pub extern \"C\" fn c_ret_i16() -> i16 { 0 }\n+\n+// x86_64:          i32 @c_ret_i32()\n+// i686:            i32 @c_ret_i32()\n+// aarch64-apple:   i32 @c_ret_i32()\n+// aarch64-windows:                                 i32 @c_ret_i32()\n+// aarch64-linux:                                   i32 @c_ret_i32()\n+// arm:             i32 @c_ret_i32()\n+// riscv:           signext i32 @c_ret_i32()\n+#[no_mangle] pub extern \"C\" fn c_ret_i32() -> i32 { 0 }\n+\n+// x86_64:          i64 @c_ret_i64()\n+// i686:            i64 @c_ret_i64()\n+// aarch64-apple:   i64 @c_ret_i64()\n+// aarch64-windows:                                 i64 @c_ret_i64()\n+// aarch64-linux:                                   i64 @c_ret_i64()\n+// arm:             i64 @c_ret_i64()\n+// riscv:           i64 @c_ret_i64()\n+#[no_mangle] pub extern \"C\" fn c_ret_i64() -> i64 { 0 }\n+\n+const C_SOURCE_FILE: &'static str = r##\"\n+#include <stdlib.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+\n+void c_arg_u8(uint8_t _a) { }\n+void c_arg_u16(uint16_t _a) { }\n+void c_arg_u32(uint32_t _a) { }\n+void c_arg_u64(uint64_t _a) { }\n+\n+void c_arg_i8(int8_t _a) { }\n+void c_arg_i16(int16_t _a) { }\n+void c_arg_i32(int32_t _a) { }\n+void c_arg_i64(int64_t _a) { }\n+\n+uint8_t  c_ret_u8()  { return 0; }\n+uint16_t c_ret_u16() { return 0; }\n+uint32_t c_ret_u32() { return 0; }\n+uint64_t c_ret_u64() { return 0; }\n+\n+int8_t   c_ret_i8()  { return 0; }\n+int16_t  c_ret_i16() { return 0; }\n+int32_t  c_ret_i32() { return 0; }\n+int64_t  c_ret_i64() { return 0; }\n+\"##;"}, {"sha": "db1b53e152eae8194ab70e7befe5df8d01a45a25", "filename": "src/test/run-make-fulldeps/issue-97463-abi-param-passing/Makefile", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/src%2Ftest%2Frun-make-fulldeps%2Fissue-97463-abi-param-passing%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/src%2Ftest%2Frun-make-fulldeps%2Fissue-97463-abi-param-passing%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-97463-abi-param-passing%2FMakefile?ref=95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "patch": "@@ -0,0 +1,14 @@\n+-include ../tools.mk\n+\n+# ignore-msvc\n+\n+# The issue exercised by this test, rust-lang/rust#97463, explicitly needs `-O`\n+# flags (like `-O3`) to reproduce. Thus, we call $(CC) instead of nicer\n+# alternatives provided by tools.mk like using `COMPILE_OBJ` or using a\n+# `NATIVE_STATICLIB` dependency.\n+\n+all:\n+\t$(CC) -c -O3 -o $(TMPDIR)/bad.o bad.c\n+\t$(AR) rcs $(TMPDIR)/libbad.a $(TMPDIR)/bad.o\n+\t$(RUSTC) param_passing.rs -L$(TMPDIR) -lbad -C opt-level=3\n+\t$(call RUN,param_passing)"}, {"sha": "013314ab20dc40409762e5c983e24cbf5712107b", "filename": "src/test/run-make-fulldeps/issue-97463-abi-param-passing/bad.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/src%2Ftest%2Frun-make-fulldeps%2Fissue-97463-abi-param-passing%2Fbad.c", "raw_url": "https://github.com/rust-lang/rust/raw/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/src%2Ftest%2Frun-make-fulldeps%2Fissue-97463-abi-param-passing%2Fbad.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-97463-abi-param-passing%2Fbad.c?ref=95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "patch": "@@ -0,0 +1,24 @@\n+#include <stdlib.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+\n+\n+struct bloc {\n+    uint16_t a;\n+    uint16_t b;\n+    uint16_t c;\n+};\n+\n+uint16_t c_read_value(uint32_t a, uint32_t b, uint32_t c) {\n+    struct bloc *data = malloc(sizeof(struct bloc));\n+\n+    data->a = a & 0xFFFF;\n+    data->b = b & 0xFFFF;\n+    data->c = c & 0xFFFF;\n+\n+    printf(\"C struct: a = %u, b = %u, c = %u\\n\",\n+        (unsigned) data->a, (unsigned) data->b, (unsigned) data->c);\n+    printf(\"C function returns %u\\n\", (unsigned) data->b);\n+\n+    return data->b; /* leak data */\n+}"}, {"sha": "c11f3cc72bdf26238dc19242ce0266c9c8e64a6e", "filename": "src/test/run-make-fulldeps/issue-97463-abi-param-passing/param_passing.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/src%2Ftest%2Frun-make-fulldeps%2Fissue-97463-abi-param-passing%2Fparam_passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/src%2Ftest%2Frun-make-fulldeps%2Fissue-97463-abi-param-passing%2Fparam_passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-97463-abi-param-passing%2Fparam_passing.rs?ref=95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "patch": "@@ -0,0 +1,38 @@\n+// NOTE: Exposing the bug encoded in this test is sensitive to\n+// LLVM optimization choices. See additional note below for an\n+// example.\n+\n+#[link(name = \"bad\")]\n+extern \"C\" {\n+    pub fn c_read_value(a: u32, b: u32, c: u32) -> u16;\n+}\n+\n+fn main() {\n+    const C1: usize = 0x327b23c6;\n+    const C2: usize = C1 & 0xFFFF;\n+\n+    let r1: usize = 0x0;\n+    let r2: usize = C1;\n+    let r3: usize = 0x0;\n+    let value: u16 = unsafe { c_read_value(r1 as u32, r2 as u32, r3 as u32) };\n+\n+    // NOTE: as an example of the sensitivity of this test to optimization choices,\n+    // uncommenting this block of code makes the bug go away on pnkfelix's machine.\n+    // (But observing via `dbg!` doesn't hide the bug. At least sometimes.)\n+    /*\n+    println!(\"{}\", value);\n+    println!(\"{}\", value as usize);\n+    println!(\"{}\", usize::from(value));\n+    println!(\"{}\", (value as usize) & 0xFFFF);\n+     */\n+\n+    let d1 = value;\n+    let d2 = value as usize;\n+    let d3 = usize::from(value);\n+    let d4 = (value as usize) & 0xFFFF;\n+\n+    let d = (&d1, &d2, &d3, &d4);\n+    let d_ = (d1, d2, d3, d4);\n+\n+    assert_eq!(((&(C2 as u16), &C2, &C2, &C2), (C2 as u16, C2, C2, C2)), (d, d_));\n+}"}, {"sha": "fba880d4f9a52239fe82299b2f5816e574f7a4a2", "filename": "src/test/ui/abi/issues/issue-97463-broken-abi-leaked-uninit-data.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-97463-broken-abi-leaked-uninit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a992a68694d8bf3959bd2c0ac27ce9e9208b59/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-97463-broken-abi-leaked-uninit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-97463-broken-abi-leaked-uninit-data.rs?ref=95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "patch": "@@ -0,0 +1,39 @@\n+// run-pass\n+// ignore-wasm\n+#![allow(dead_code)]\n+#![allow(improper_ctypes)]\n+\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n+extern \"C\" {\n+    pub fn issue_97463_leak_uninit_data(a: u32, b: u32, c: u32) -> u16;\n+}\n+\n+fn main() {\n+    const C1: usize = 0x327b23c6;\n+    const C2: usize = C1 & 0xFFFF;\n+\n+    let r1: usize = 0x0;\n+    let r2: usize = C1;\n+    let r3: usize = 0x0;\n+    let value: u16 = unsafe { issue_97463_leak_uninit_data(r1 as u32, r2 as u32, r3 as u32) };\n+\n+    // NOTE: as an example of the sensitivity of this test to optimization choices,\n+    // uncommenting this block of code makes the bug go away on pnkfelix's machine.\n+    // (But observing via `dbg!` doesn't hide the bug. At least sometimes.)\n+    /*\n+    println!(\"{}\", value);\n+    println!(\"{}\", value as usize);\n+    println!(\"{}\", usize::from(value));\n+    println!(\"{}\", (value as usize) & 0xFFFF);\n+     */\n+\n+    let d1 = value;\n+    let d2 = value as usize;\n+    let d3 = usize::from(value);\n+    let d4 = (value as usize) & 0xFFFF;\n+\n+    let d = (&d1, &d2, &d3, &d4);\n+    let d_ = (d1, d2, d3, d4);\n+\n+    assert_eq!(((&(C2 as u16), &C2, &C2, &C2), (C2 as u16, C2, C2, C2)), (d, d_));\n+}"}]}