{"sha": "3591a1239c123588b03c7600b54cc573187980a3", "node_id": "C_kwDOAAsO6NoAKDM1OTFhMTIzOWMxMjM1ODhiMDNjNzYwMGI1NGNjNTczMTg3OTgwYTM", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-05-31T16:36:58Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-06-03T16:29:21Z"}, "message": "Allow disabling truncation for long config lines", "tree": {"sha": "100fd1d36ad07e986b9a798ba31e88e3241375fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/100fd1d36ad07e986b9a798ba31e88e3241375fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3591a1239c123588b03c7600b54cc573187980a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3591a1239c123588b03c7600b54cc573187980a3", "html_url": "https://github.com/rust-lang/rust/commit/3591a1239c123588b03c7600b54cc573187980a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3591a1239c123588b03c7600b54cc573187980a3/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "871b5952023139738f72eba235063575062bc2e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/871b5952023139738f72eba235063575062bc2e9", "html_url": "https://github.com/rust-lang/rust/commit/871b5952023139738f72eba235063575062bc2e9"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "4481e1668b60f32a05e472fd277620bada52431c", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3591a1239c123588b03c7600b54cc573187980a3/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/3591a1239c123588b03c7600b54cc573187980a3/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=3591a1239c123588b03c7600b54cc573187980a3", "patch": "@@ -45,7 +45,6 @@ def v(*args):\n o(\"llvm-link-shared\", \"llvm.link-shared\", \"prefer shared linking to LLVM (llvm-config --link-shared)\")\n o(\"rpath\", \"rust.rpath\", \"build rpaths into rustc itself\")\n o(\"codegen-tests\", \"rust.codegen-tests\", \"run the tests/codegen tests\")\n-o(\"option-checking\", None, \"complain about unrecognized options in this configure script\")\n o(\"ninja\", \"llvm.ninja\", \"build LLVM using the Ninja generator (for MSVC, requires building in the correct environment)\")\n o(\"locked-deps\", \"build.locked-deps\", \"force Cargo.lock to be up to date\")\n o(\"vendor\", \"build.vendor\", \"enable usage of vendored Rust crates\")\n@@ -170,6 +169,9 @@ def v(*args):\n v(\"host\", None, \"List of GNUs ./configure syntax LLVM host triples\")\n v(\"target\", None, \"List of GNUs ./configure syntax LLVM target triples\")\n \n+# Options specific to this configure script\n+o(\"option-checking\", None, \"complain about unrecognized options in this configure script\")\n+o(\"verbose-configure\", None, \"don't truncate options when printing them in this configure script\")\n v(\"set\", None, \"set arbitrary key/value pairs in TOML configuration\")\n \n \n@@ -211,6 +213,8 @@ def is_value_list(key):\n     print('be passed with `--disable-foo` to forcibly disable the option')\n     sys.exit(0)\n \n+VERBOSE = False\n+\n # Parse all command line arguments into one of these three lists, handling\n # boolean and value-based options separately\n def parse_args(args):\n@@ -271,6 +275,9 @@ def parse_args(args):\n         if len(need_value_args) > 0:\n             err(\"Option '{0}' needs a value ({0}=val)\".format(need_value_args[0]))\n \n+    global VERBOSE\n+    VERBOSE = 'verbose-configure' in known_args\n+\n     config = {}\n \n     set('build.configure-args', sys.argv[1:], config)\n@@ -290,7 +297,7 @@ def set(key, value, config):\n         value = [v for v in value if v]\n \n     s = \"{:20} := {}\".format(key, value)\n-    if len(s) < 70:\n+    if len(s) < 70 or VERBOSE:\n         p(s)\n     else:\n         p(s[:70] + \" ...\")\n@@ -371,7 +378,7 @@ def apply_args(known_args, option_checking, config):\n             set('rust.lld', True, config)\n             set('rust.llvm-tools', True, config)\n             set('build.extended', True, config)\n-        elif option.name == 'option-checking':\n+        elif option.name in ['option-checking', 'verbose-configure']:\n             # this was handled above\n             pass\n         elif option.name == 'dist-compression-formats':"}]}