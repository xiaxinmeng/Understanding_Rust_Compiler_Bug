{"sha": "de6eb2b2906cb959ce374306c28c535c5e799982", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNmViMmIyOTA2Y2I5NTljZTM3NDMwNmMyOGM1MzVjNWU3OTk5ODI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T01:30:36Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:33Z"}, "message": "librustc: De-`@mut` `ImportResolution::outstanding_references`", "tree": {"sha": "dfd161827ccbd3f6441a50c968dbef3e7410cf39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfd161827ccbd3f6441a50c968dbef3e7410cf39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de6eb2b2906cb959ce374306c28c535c5e799982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de6eb2b2906cb959ce374306c28c535c5e799982", "html_url": "https://github.com/rust-lang/rust/commit/de6eb2b2906cb959ce374306c28c535c5e799982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de6eb2b2906cb959ce374306c28c535c5e799982/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccb18f47e25daee22f151f3d21774eec38abdbe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb18f47e25daee22f151f3d21774eec38abdbe3", "html_url": "https://github.com/rust-lang/rust/commit/ccb18f47e25daee22f151f3d21774eec38abdbe3"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "232bcf0ba5f948a5fccce779eb3ade0780567b82", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de6eb2b2906cb959ce374306c28c535c5e799982/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de6eb2b2906cb959ce374306c28c535c5e799982/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=de6eb2b2906cb959ce374306c28c535c5e799982", "patch": "@@ -351,7 +351,7 @@ struct ImportResolution {\n     // The number of outstanding references to this name. When this reaches\n     // zero, outside modules can count on the targets being correct. Before\n     // then, all bets are off; future imports could override this name.\n-    outstanding_references: uint,\n+    outstanding_references: Cell<uint>,\n \n     /// The value that this `use` directive names, if there is one.\n     value_target: Option<Target>,\n@@ -371,7 +371,7 @@ impl ImportResolution {\n         ImportResolution {\n             type_id: id,\n             value_id: id,\n-            outstanding_references: 0,\n+            outstanding_references: Cell::new(0),\n             value_target: None,\n             type_target: None,\n             is_public: is_public,\n@@ -1968,7 +1968,8 @@ impl Resolver {\n                     Some(&resolution) => {\n                         debug!(\"(building import directive) bumping \\\n                                 reference\");\n-                        resolution.outstanding_references += 1;\n+                        resolution.outstanding_references.set(\n+                            resolution.outstanding_references.get() + 1);\n \n                         // the source of this name is different now\n                         resolution.type_id = id;\n@@ -1977,7 +1978,7 @@ impl Resolver {\n                     None => {\n                         debug!(\"(building import directive) creating new\");\n                         let resolution = @mut ImportResolution::new(id, is_public);\n-                        resolution.outstanding_references = 1;\n+                        resolution.outstanding_references.set(1);\n                         import_resolutions.get().insert(target.name,\n                                                         resolution);\n                     }\n@@ -2328,7 +2329,7 @@ impl Resolver {\n                         }\n                     }\n                     Some(import_resolution)\n-                            if import_resolution.outstanding_references\n+                            if import_resolution.outstanding_references.get()\n                                 == 0 => {\n \n                         fn get_binding(this: &mut Resolver,\n@@ -2453,8 +2454,9 @@ impl Resolver {\n         }\n         let used_public = used_reexport || used_public;\n \n-        assert!(import_resolution.outstanding_references >= 1);\n-        import_resolution.outstanding_references -= 1;\n+        assert!(import_resolution.outstanding_references.get() >= 1);\n+        import_resolution.outstanding_references.set(\n+            import_resolution.outstanding_references.get() - 1);\n \n         // record what this import resolves to for later uses in documentation,\n         // this may resolve to either a value or a type, but for documentation\n@@ -3181,7 +3183,7 @@ impl Resolver {\n         match import_resolutions.get().find(&name.name) {\n             Some(import_resolution) => {\n                 if import_resolution.is_public &&\n-                        import_resolution.outstanding_references != 0 {\n+                        import_resolution.outstanding_references.get() != 0 {\n                     debug!(\"(resolving name in module) import \\\n                            unresolved; bailing out\");\n                     return Indeterminate;"}]}