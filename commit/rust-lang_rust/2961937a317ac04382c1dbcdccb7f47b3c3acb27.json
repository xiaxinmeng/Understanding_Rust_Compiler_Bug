{"sha": "2961937a317ac04382c1dbcdccb7f47b3c3acb27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NjE5MzdhMzE3YWMwNDM4MmMxZGJjZGNjYjdmNDdiM2MzYWNiMjc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-03T08:27:20Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-03T08:27:20Z"}, "message": "Use a `Set<T>` instead of a `Map<T, bool>`", "tree": {"sha": "824dd8b21d3696ec427d790f334f63b542ddfd40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/824dd8b21d3696ec427d790f334f63b542ddfd40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2961937a317ac04382c1dbcdccb7f47b3c3acb27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAln8KGgACgkQpp+NIls6\n19nbkg//Rwom24+pzpqQMMDPW7P+H8u/gU7qr3dhSN+mXjr26TMOD+md0xeNiRsC\nzL3fHMTg7ZumUXf4fSdaVir2gsxq+rQ8E395v8+vp7hYG2NVjeYW+jNhfNX7ZIeh\nI1/nRQlOfqYlFmaf1CHOhwYNGDRUsUrbDK/Wjqo/9mm8KqMD4F5/MEO9WtMxwIgs\nN+ojV+xt/fB3Nh/JKB06kcwwjGuIaLgvDGjjwHXqvbEbc1qaoSCNyUhjrrihP3ZC\n/3AW2mExIIJohdNW6BYYCsdFJX+QW7qjhiOcoHi6xz0+/g030SmD7uh6rC9WYu9W\nQfRWLKXxxuRfKLcAl8aCeu4X4dMI3LmeGX+6fhflY+KgCBQKx+MHfEs24jsXaQ74\nVbN4+B3FSc2h7y/KQ3y1ROAcBMFRDIAvOerMCDrAGBx2dyJnIYqeln32fiFb+PlT\nWTPwdopZRMJl9bjvZuqelZuQhHvY5qranBzvxjmkxuS+eo41cZZmo0HdvnQSfJjo\nR2/d2wa/mlLgIqo8VikNxp2wM4824LsNHQGxl5JER/5NclPrBZ1wEysHkyW55V8x\n1JYkPrWSyJoqbxmK0VvcIRJVXjTFwKaOav2l4YtEoBUjvJCfbdHim2QPAowBAtoh\n7HCJFK8ILOxExS4Q4+ok3sky/aXmkYtYVFdyh62NtMnxDJpxwYg=\n=U842\n-----END PGP SIGNATURE-----", "payload": "tree 824dd8b21d3696ec427d790f334f63b542ddfd40\nparent 2379faa933923a97158a4939b9fc82dcbd45430f\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1509697640 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1509697640 +0100\n\nUse a `Set<T>` instead of a `Map<T, bool>`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2961937a317ac04382c1dbcdccb7f47b3c3acb27", "html_url": "https://github.com/rust-lang/rust/commit/2961937a317ac04382c1dbcdccb7f47b3c3acb27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2961937a317ac04382c1dbcdccb7f47b3c3acb27/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2379faa933923a97158a4939b9fc82dcbd45430f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2379faa933923a97158a4939b9fc82dcbd45430f", "html_url": "https://github.com/rust-lang/rust/commit/2379faa933923a97158a4939b9fc82dcbd45430f"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "0383d5ca68232d5b72fcafe9aa381a0ee86c2d3b", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2961937a317ac04382c1dbcdccb7f47b3c3acb27/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2961937a317ac04382c1dbcdccb7f47b3c3acb27/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=2961937a317ac04382c1dbcdccb7f47b3c3acb27", "patch": "@@ -31,7 +31,7 @@ use std::rc::Rc;\n use syntax::ast;\n use syntax::ptr::P;\n use syntax_pos::Span;\n-use util::nodemap::ItemLocalMap;\n+use util::nodemap::ItemLocalSet;\n \n ///////////////////////////////////////////////////////////////////////////\n // The Delegate trait\n@@ -279,7 +279,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx, 'tcx> {\n                param_env: ty::ParamEnv<'tcx>,\n                region_scope_tree: &'a region::ScopeTree,\n                tables: &'a ty::TypeckTables<'tcx>,\n-               rvalue_promotable_map: Option<Rc<ItemLocalMap<bool>>>)\n+               rvalue_promotable_map: Option<Rc<ItemLocalSet>>)\n                -> Self\n     {\n         ExprUseVisitor {"}, {"sha": "fc10406c8cebd249d407c4dd4c568d043f0d7d91", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2961937a317ac04382c1dbcdccb7f47b3c3acb27/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2961937a317ac04382c1dbcdccb7f47b3c3acb27/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=2961937a317ac04382c1dbcdccb7f47b3c3acb27", "patch": "@@ -86,7 +86,7 @@ use syntax_pos::Span;\n \n use std::fmt;\n use std::rc::Rc;\n-use util::nodemap::ItemLocalMap;\n+use util::nodemap::ItemLocalSet;\n \n #[derive(Clone, PartialEq)]\n pub enum Categorization<'tcx> {\n@@ -286,7 +286,7 @@ pub struct MemCategorizationContext<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     pub region_scope_tree: &'a region::ScopeTree,\n     pub tables: &'a ty::TypeckTables<'tcx>,\n-    rvalue_promotable_map: Option<Rc<ItemLocalMap<bool>>>,\n+    rvalue_promotable_map: Option<Rc<ItemLocalSet>>,\n     infcx: Option<&'a InferCtxt<'a, 'gcx, 'tcx>>,\n }\n \n@@ -395,7 +395,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                region_scope_tree: &'a region::ScopeTree,\n                tables: &'a ty::TypeckTables<'tcx>,\n-               rvalue_promotable_map: Option<Rc<ItemLocalMap<bool>>>)\n+               rvalue_promotable_map: Option<Rc<ItemLocalSet>>)\n                -> MemCategorizationContext<'a, 'tcx, 'tcx> {\n         MemCategorizationContext {\n             tcx,\n@@ -897,7 +897,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                            expr_ty: Ty<'tcx>)\n                            -> cmt<'tcx> {\n         let hir_id = self.tcx.hir.node_to_hir_id(id);\n-        let promotable = self.rvalue_promotable_map.as_ref().map(|m| m[&hir_id.local_id])\n+        let promotable = self.rvalue_promotable_map.as_ref().map(|m| m.contains(&hir_id.local_id))\n                                                             .unwrap_or(false);\n \n         // Always promote `[T; 0]` (even when e.g. borrowed mutably)."}, {"sha": "b65c511121aceff6bac2a5d9f78f63d389f867f2", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2961937a317ac04382c1dbcdccb7f47b3c3acb27/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2961937a317ac04382c1dbcdccb7f47b3c3acb27/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=2961937a317ac04382c1dbcdccb7f47b3c3acb27", "patch": "@@ -37,7 +37,7 @@ use ty::{self, CrateInherentImpls, Ty, TyCtxt};\n use ty::layout::{Layout, LayoutError};\n use ty::steal::Steal;\n use ty::subst::Substs;\n-use util::nodemap::{DefIdSet, DefIdMap, ItemLocalMap};\n+use util::nodemap::{DefIdSet, DefIdMap, ItemLocalSet};\n use util::common::{profq_msg, ProfileQueriesMsg};\n \n use rustc_data_structures::indexed_set::IdxSetBuf;\n@@ -236,7 +236,7 @@ define_maps! { <'tcx>\n     [] fn is_exported_symbol: IsExportedSymbol(DefId) -> bool,\n     [] fn item_body_nested_bodies: ItemBodyNestedBodies(DefId) -> ExternBodyNestedBodies,\n     [] fn const_is_rvalue_promotable_to_static: ConstIsRvaluePromotableToStatic(DefId) -> bool,\n-    [] fn rvalue_promotable_map: RvaluePromotableMap(DefId) -> Rc<ItemLocalMap<bool>>,\n+    [] fn rvalue_promotable_map: RvaluePromotableMap(DefId) -> Rc<ItemLocalSet>,\n     [] fn is_mir_available: IsMirAvailable(DefId) -> bool,\n     [] fn vtable_methods: vtable_methods_node(ty::PolyTraitRef<'tcx>)\n                           -> Rc<Vec<Option<(DefId, &'tcx Substs<'tcx>)>>>,"}, {"sha": "674f67d5cd2f188b6dc7d89dc849de8c5c4969dc", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2961937a317ac04382c1dbcdccb7f47b3c3acb27/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2961937a317ac04382c1dbcdccb7f47b3c3acb27/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=2961937a317ac04382c1dbcdccb7f47b3c3acb27", "patch": "@@ -25,10 +25,12 @@ pub type ItemLocalMap<T> = FxHashMap<ItemLocalId, T>;\n \n pub type NodeSet = FxHashSet<ast::NodeId>;\n pub type DefIdSet = FxHashSet<DefId>;\n+pub type ItemLocalSet = FxHashSet<ItemLocalId>;\n \n pub fn NodeMap<T>() -> NodeMap<T> { FxHashMap() }\n pub fn DefIdMap<T>() -> DefIdMap<T> { FxHashMap() }\n pub fn ItemLocalMap<T>() -> ItemLocalMap<T> { FxHashMap() }\n pub fn NodeSet() -> NodeSet { FxHashSet() }\n pub fn DefIdSet() -> DefIdSet { FxHashSet() }\n+pub fn ItemLocalSet() -> ItemLocalSet { FxHashSet() }\n "}, {"sha": "4515d9c7837c8ed40a0a0df8d34e5bf1d17976e1", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2961937a317ac04382c1dbcdccb7f47b3c3acb27/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2961937a317ac04382c1dbcdccb7f47b3c3acb27/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=2961937a317ac04382c1dbcdccb7f47b3c3acb27", "patch": "@@ -43,7 +43,7 @@ use rustc::ty::maps::{queries, Providers};\n use rustc::ty::subst::Substs;\n use rustc::traits::Reveal;\n use rustc::util::common::ErrorReported;\n-use rustc::util::nodemap::{ItemLocalMap, NodeSet};\n+use rustc::util::nodemap::{ItemLocalSet, NodeSet};\n use rustc::lint::builtin::CONST_ERR;\n use rustc::hir::{self, PatKind, RangeEnd};\n use std::rc::Rc;\n@@ -79,12 +79,12 @@ fn const_is_rvalue_promotable_to_static<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                      .expect(\"rvalue_promotable_map invoked with non-local def-id\");\n     let body_id = tcx.hir.body_owned_by(node_id);\n     let body_hir_id = tcx.hir.node_to_hir_id(body_id.node_id);\n-    tcx.rvalue_promotable_map(def_id).contains_key(&body_hir_id.local_id)\n+    tcx.rvalue_promotable_map(def_id).contains(&body_hir_id.local_id)\n }\n \n fn rvalue_promotable_map<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                    def_id: DefId)\n-                                   -> Rc<ItemLocalMap<bool>>\n+                                   -> Rc<ItemLocalSet>\n {\n     let outer_def_id = tcx.closure_base_def_id(def_id);\n     if outer_def_id != def_id {\n@@ -100,7 +100,7 @@ fn rvalue_promotable_map<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         mut_rvalue_borrows: NodeSet(),\n         param_env: ty::ParamEnv::empty(Reveal::UserFacing),\n         identity_substs: Substs::empty(),\n-        result_map: ItemLocalMap(),\n+        result: ItemLocalSet(),\n     };\n \n     // `def_id` should be a `Body` owner\n@@ -109,7 +109,7 @@ fn rvalue_promotable_map<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let body_id = tcx.hir.body_owned_by(node_id);\n     visitor.visit_nested_body(body_id);\n \n-    Rc::new(visitor.result_map)\n+    Rc::new(visitor.result)\n }\n \n struct CheckCrateVisitor<'a, 'tcx: 'a> {\n@@ -121,7 +121,7 @@ struct CheckCrateVisitor<'a, 'tcx: 'a> {\n     param_env: ty::ParamEnv<'tcx>,\n     identity_substs: &'tcx Substs<'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n-    result_map: ItemLocalMap<bool>,\n+    result: ItemLocalSet,\n }\n \n impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n@@ -322,7 +322,9 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n             }\n         }\n \n-        self.result_map.insert(ex.hir_id.local_id, self.promotable);\n+        if self.promotable {\n+            self.result.insert(ex.hir_id.local_id);\n+        }\n         self.promotable &= outer;\n     }\n }"}]}