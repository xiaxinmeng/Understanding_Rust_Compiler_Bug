{"sha": "8c2c1bf9eb1496adeaa647066c96d0e7d71a1a8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMmMxYmY5ZWIxNDk2YWRlYWE2NDcwNjZjOTZkMGU3ZDcxYTFhOGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-27T10:35:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-27T10:35:08Z"}, "message": "check edits in diagnostics", "tree": {"sha": "07aa7981298a4904e2d2349981ce063d57637844", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07aa7981298a4904e2d2349981ce063d57637844"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c2c1bf9eb1496adeaa647066c96d0e7d71a1a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c2c1bf9eb1496adeaa647066c96d0e7d71a1a8a", "html_url": "https://github.com/rust-lang/rust/commit/8c2c1bf9eb1496adeaa647066c96d0e7d71a1a8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c2c1bf9eb1496adeaa647066c96d0e7d71a1a8a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d6dcef5c584d0dffdf5386eec993e41daad0210", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d6dcef5c584d0dffdf5386eec993e41daad0210", "html_url": "https://github.com/rust-lang/rust/commit/1d6dcef5c584d0dffdf5386eec993e41daad0210"}], "stats": {"total": 64, "additions": 30, "deletions": 34}, "files": [{"sha": "a8c68e79efc51e589ab1e016ff53752d59b0f8b7", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8c2c1bf9eb1496adeaa647066c96d0e7d71a1a8a/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2c1bf9eb1496adeaa647066c96d0e7d71a1a8a/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=8c2c1bf9eb1496adeaa647066c96d0e7d71a1a8a", "patch": "@@ -24,6 +24,7 @@ use ra_syntax::{\n     SyntaxKind::{self, *},\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n+use itertools::Itertools;\n \n #[derive(Debug)]\n pub struct HighlightedRange {\n@@ -126,10 +127,8 @@ fn check_unnecessary_braces_in_use_statement(file: &SourceFileNode) -> Vec<Diagn\n     let mut diagnostics = Vec::new();\n     for node in file.syntax().descendants() {\n         if let Some(use_tree_list) = ast::UseTreeList::cast(node) {\n-            if use_tree_list.use_trees().count() == 1 {\n+            if let Some((single_use_tree,)) = use_tree_list.use_trees().collect_tuple() {\n                 let range = use_tree_list.syntax().range();\n-                // use_tree_list always has one child, so we use unwrap directly here.\n-                let single_use_tree: ast::UseTree = use_tree_list.use_trees().next().unwrap();\n                 let edit = text_edit_for_remove_unnecessary_braces_with_self_in_use_statement(\n                     single_use_tree,\n                 )\n@@ -282,24 +281,31 @@ fn test_foo() {}\n \n     #[test]\n     fn test_check_unnecessary_braces_in_use_statement() {\n-        let file = SourceFileNode::parse(\n-            r#\"\n-use a;\n-use {b};\n-use a::{c};\n-use a::{self};\n-use a::{c, d::e};\n-use a::{c, d::{e}};\n-fn main() {}\n-\"#,\n+        fn check_not_applicable(code: &str) {\n+            let file = SourceFileNode::parse(code);\n+            let diagnostics = check_unnecessary_braces_in_use_statement(&file);\n+            assert!(diagnostics.is_empty());\n+        }\n+\n+        fn check_apply(before: &str, after: &str) {\n+            let file = SourceFileNode::parse(before);\n+            let diagnostic = check_unnecessary_braces_in_use_statement(&file)\n+                .pop()\n+                .unwrap_or_else(|| panic!(\"no diagnostics for:\\n{}\\n\", before));\n+            let fix = diagnostic.fix.unwrap();\n+            let actual = fix.edit.apply(&before);\n+            assert_eq_text!(after, &actual);\n+        }\n+\n+        check_not_applicable(\n+            \"\n+            use a;\n+            use a::{c, d::e};\n+        \",\n         );\n-        let diagnostics = check_unnecessary_braces_in_use_statement(&file);\n-        assert_eq_dbg(\n-            r#\"[Diagnostic { range: [12; 15), msg: \"Unnecessary braces in use statement\", severity: WeakWarning, fix: Some(LocalEdit { label: \"Remove unnecessary braces\", edit: TextEdit { atoms: [AtomTextEdit { delete: [12; 12), insert: \"b\" }, AtomTextEdit { delete: [12; 15), insert: \"\" }] }, cursor_position: None }) },\n-            Diagnostic { range: [24; 27), msg: \"Unnecessary braces in use statement\", severity: WeakWarning, fix: Some(LocalEdit { label: \"Remove unnecessary braces\", edit: TextEdit { atoms: [AtomTextEdit { delete: [24; 24), insert: \"c\" }, AtomTextEdit { delete: [24; 27), insert: \"\" }] }, cursor_position: None }) },\n-            Diagnostic { range: [36; 42), msg: \"Unnecessary braces in use statement\", severity: WeakWarning, fix: Some(LocalEdit { label: \"Remove unnecessary braces\", edit: TextEdit { atoms: [AtomTextEdit { delete: [34; 42), insert: \"\" }] }, cursor_position: None }) },\n-            Diagnostic { range: [76; 79), msg: \"Unnecessary braces in use statement\", severity: WeakWarning, fix: Some(LocalEdit { label: \"Remove unnecessary braces\", edit: TextEdit { atoms: [AtomTextEdit { delete: [76; 76), insert: \"e\" }, AtomTextEdit { delete: [76; 79), insert: \"\" }] }, cursor_position: None }) }]\"#,\n-            &diagnostics,\n-        )\n+        check_apply(\"use {b};\", \"use b;\");\n+        check_apply(\"use a::{c};\", \"use a::c;\");\n+        check_apply(\"use a::{self};\", \"use a;\");\n+        check_apply(\"use a::{c, d::{e}};\", \"use a::{c, d::e};\");\n     }\n }"}, {"sha": "21d068a7bd0c25db36ef1a578ed8d0fa1fafbf2c", "filename": "crates/ra_editor/src/typing.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8c2c1bf9eb1496adeaa647066c96d0e7d71a1a8a/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2c1bf9eb1496adeaa647066c96d0e7d71a1a8a/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftyping.rs?ref=8c2c1bf9eb1496adeaa647066c96d0e7d71a1a8a", "patch": "@@ -8,9 +8,8 @@ use ra_syntax::{\n     SyntaxKind::*,\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n-use ra_text_edit::text_utils::{\n-    contains_offset_nonstrict\n-};\n+use ra_text_edit::text_utils::contains_offset_nonstrict;\n+use itertools::Itertools;\n \n use crate::{find_node_at_offset, TextEditBuilder, LocalEdit};\n \n@@ -246,23 +245,14 @@ fn single_expr(block: ast::Block) -> Option<ast::Expr> {\n \n fn join_single_use_tree(edit: &mut TextEditBuilder, node: SyntaxNodeRef) -> Option<()> {\n     let use_tree_list = ast::UseTreeList::cast(node.parent()?)?;\n-    let tree = single_use_tree(use_tree_list)?;\n+    let (tree,) = use_tree_list.use_trees().collect_tuple()?;\n     edit.replace(\n         use_tree_list.syntax().range(),\n         tree.syntax().text().to_string(),\n     );\n     Some(())\n }\n \n-fn single_use_tree(tree_list: ast::UseTreeList) -> Option<ast::UseTree> {\n-    let sub_use_trees = tree_list.use_trees().count();\n-    if sub_use_trees != 1 {\n-        return None;\n-    }\n-\n-    tree_list.use_trees().next()\n-}\n-\n fn compute_ws(left: SyntaxNodeRef, right: SyntaxNodeRef) -> &'static str {\n     match left.kind() {\n         L_PAREN | L_BRACK => return \"\","}]}