{"sha": "94f3037f4bc2f18ac1c427e145928cc766b573fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZjMwMzdmNGJjMmYxOGFjMWM0MjdlMTQ1OTI4Y2M3NjZiNTczZmU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-01-08T11:30:52Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-01-08T11:30:52Z"}, "message": "Shorten names of some compiler generated artifacts.", "tree": {"sha": "5ccc30c8bb23edd92ade28fdb63618487c05555b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ccc30c8bb23edd92ade28fdb63618487c05555b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94f3037f4bc2f18ac1c427e145928cc766b573fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94f3037f4bc2f18ac1c427e145928cc766b573fe", "html_url": "https://github.com/rust-lang/rust/commit/94f3037f4bc2f18ac1c427e145928cc766b573fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94f3037f4bc2f18ac1c427e145928cc766b573fe/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "795594cd8ce3272bd6b1ebf7e1b7f33a5a86e3ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/795594cd8ce3272bd6b1ebf7e1b7f33a5a86e3ac", "html_url": "https://github.com/rust-lang/rust/commit/795594cd8ce3272bd6b1ebf7e1b7f33a5a86e3ac"}], "stats": {"total": 98, "additions": 70, "deletions": 28}, "files": [{"sha": "efdf4066815f46ac4ba5df358cb440fdf0688bd3", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=94f3037f4bc2f18ac1c427e145928cc766b573fe", "patch": "@@ -12,9 +12,11 @@ use syntax::ast::NodeId;\n use syntax::symbol::InternedString;\n use ty::Instance;\n use util::nodemap::FxHashMap;\n+use rustc_data_structures::base_n;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasherResult,\n                                            StableHasher};\n use ich::{Fingerprint, StableHashingContext, NodeIdHashingMode};\n+use std::hash::Hash;\n \n #[derive(PartialEq, Eq, Clone, Copy, Debug, Hash)]\n pub enum MonoItem<'tcx> {\n@@ -119,6 +121,16 @@ impl<'tcx> CodegenUnit<'tcx> {\n     {\n         &mut self.items\n     }\n+\n+    pub fn mangle_name(human_readable_name: &str) -> String {\n+        // We generate a 80 bit hash from the name. This should be enough to\n+        // avoid collisions and is still reasonably short for filenames.\n+        let mut hasher = StableHasher::new();\n+        human_readable_name.hash(&mut hasher);\n+        let hash: u128 = hasher.finish();\n+        let hash = hash & ((1u128 << 80) - 1);\n+        base_n::encode(hash, base_n::CASE_INSENSITIVE)\n+    }\n }\n \n impl<'tcx> HashStable<StableHashingContext<'tcx>> for CodegenUnit<'tcx> {"}, {"sha": "9b578f4942389b9046fadf254f618a7845d3e5d6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=94f3037f4bc2f18ac1c427e145928cc766b573fe", "patch": "@@ -1236,6 +1236,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"rewrite operators on i128 and u128 into lang item calls (typically provided \\\n          by compiler-builtins) so translation doesn't need to support them,\n          overriding the default for the current target\"),\n+    human_readable_cgu_names: bool = (false, parse_bool, [TRACKED],\n+        \"generate human-readable, predictable names for codegen units\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "d333b6393b9cc4466c32a4ac56fec2238db1040b", "filename": "src/librustc_data_structures/base_n.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc_data_structures%2Fbase_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc_data_structures%2Fbase_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbase_n.rs?ref=94f3037f4bc2f18ac1c427e145928cc766b573fe", "patch": "@@ -13,18 +13,21 @@\n \n use std::str;\n \n-pub const MAX_BASE: u64 = 64;\n-pub const ALPHANUMERIC_ONLY: u64 = 62;\n+pub const MAX_BASE: usize = 64;\n+pub const ALPHANUMERIC_ONLY: usize = 62;\n+pub const CASE_INSENSITIVE: usize = 36;\n \n const BASE_64: &'static [u8; MAX_BASE as usize] =\n     b\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@$\";\n \n #[inline]\n-pub fn push_str(mut n: u64, base: u64, output: &mut String) {\n+pub fn push_str(mut n: u128, base: usize, output: &mut String) {\n     debug_assert!(base >= 2 && base <= MAX_BASE);\n-    let mut s = [0u8; 64];\n+    let mut s = [0u8; 128];\n     let mut index = 0;\n \n+    let base = base as u128;\n+\n     loop {\n         s[index] = BASE_64[(n % base) as usize];\n         index += 1;\n@@ -39,16 +42,16 @@ pub fn push_str(mut n: u64, base: u64, output: &mut String) {\n }\n \n #[inline]\n-pub fn encode(n: u64, base: u64) -> String {\n-    let mut s = String::with_capacity(13);\n+pub fn encode(n: u128, base: usize) -> String {\n+    let mut s = String::new();\n     push_str(n, base, &mut s);\n     s\n }\n \n #[test]\n fn test_encode() {\n-    fn test(n: u64, base: u64) {\n-        assert_eq!(Ok(n), u64::from_str_radix(&encode(n, base), base as u32));\n+    fn test(n: u128, base: usize) {\n+        assert_eq!(Ok(n), u128::from_str_radix(&encode(n, base), base as u32));\n     }\n \n     for base in 2..37 {\n@@ -57,7 +60,8 @@ fn test_encode() {\n         test(35, base);\n         test(36, base);\n         test(37, base);\n-        test(u64::max_value(), base);\n+        test(u64::max_value() as u128, base);\n+        test(u128::max_value(), base);\n \n         for i in 0 .. 1_000 {\n             test(i * 983, base);"}, {"sha": "f4171f951f4076e0a40758b8ea0aa320c345fe7d", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=94f3037f4bc2f18ac1c427e145928cc766b573fe", "patch": "@@ -137,7 +137,7 @@ const QUERY_CACHE_FILENAME: &'static str = \"query-cache.bin\";\n // or hexadecimal numbers (we want short file and directory names). Since these\n // numbers will be used in file names, we choose an encoding that is not\n // case-sensitive (as opposed to base64, for example).\n-const INT_ENCODE_BASE: u64 = 36;\n+const INT_ENCODE_BASE: usize = base_n::CASE_INSENSITIVE;\n \n pub fn dep_graph_path(sess: &Session) -> PathBuf {\n     in_incr_comp_dir_sess(sess, DEP_GRAPH_FILENAME)\n@@ -357,7 +357,7 @@ pub fn finalize_session_directory(sess: &Session, svh: Svh) {\n     let mut new_sub_dir_name = String::from(&old_sub_dir_name[.. dash_indices[2] + 1]);\n \n     // Append the svh\n-    base_n::push_str(svh.as_u64(), INT_ENCODE_BASE, &mut new_sub_dir_name);\n+    base_n::push_str(svh.as_u64() as u128, INT_ENCODE_BASE, &mut new_sub_dir_name);\n \n     // Create the full path\n     let new_path = incr_comp_session_dir.parent().unwrap().join(new_sub_dir_name);\n@@ -465,7 +465,7 @@ fn generate_session_dir_path(crate_dir: &Path) -> PathBuf {\n \n     let directory_name = format!(\"s-{}-{}-working\",\n                                   timestamp,\n-                                  base_n::encode(random_number as u64,\n+                                  base_n::encode(random_number as u128,\n                                                  INT_ENCODE_BASE));\n     debug!(\"generate_session_dir_path: directory_name = {}\", directory_name);\n     let directory_path = crate_dir.join(directory_name);\n@@ -599,7 +599,7 @@ fn timestamp_to_string(timestamp: SystemTime) -> String {\n     let duration = timestamp.duration_since(UNIX_EPOCH).unwrap();\n     let micros = duration.as_secs() * 1_000_000 +\n                 (duration.subsec_nanos() as u64) / 1000;\n-    base_n::encode(micros, INT_ENCODE_BASE)\n+    base_n::encode(micros as u128, INT_ENCODE_BASE)\n }\n \n fn string_to_timestamp(s: &str) -> Result<SystemTime, ()> {\n@@ -626,7 +626,8 @@ fn crate_path(sess: &Session,\n     // The full crate disambiguator is really long. 64 bits of it should be\n     // sufficient.\n     let crate_disambiguator = crate_disambiguator.to_fingerprint().to_smaller_hash();\n-    let crate_disambiguator = base_n::encode(crate_disambiguator, INT_ENCODE_BASE);\n+    let crate_disambiguator = base_n::encode(crate_disambiguator as u128,\n+                                             INT_ENCODE_BASE);\n \n     let crate_name = format!(\"{}-{}\", crate_name, crate_disambiguator);\n     incr_dir.join(crate_name)"}, {"sha": "879132bcacfcfcd86a3c6426152e7fc95d016e75", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=94f3037f4bc2f18ac1c427e145928cc766b573fe", "patch": "@@ -35,9 +35,9 @@ pub fn save_trans_partition(sess: &Session,\n                  let extension = match kind {\n                      WorkProductFileKind::Object => \"o\",\n                      WorkProductFileKind::Bytecode => \"bc\",\n-                     WorkProductFileKind::BytecodeCompressed => \"bc-compressed\",\n+                     WorkProductFileKind::BytecodeCompressed => \"bc.z\",\n                  };\n-                 let file_name = format!(\"cgu-{}.{}\", cgu_name, extension);\n+                 let file_name = format!(\"{}.{}\", cgu_name, extension);\n                  let path_in_incr_dir = in_incr_comp_dir_sess(sess, &file_name);\n                  match link_or_copy(path, &path_in_incr_dir) {\n                      Ok(_) => Some((kind, file_name)),"}, {"sha": "e899cc072e07288e1689ec715c60b3332b61d9b9", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=94f3037f4bc2f18ac1c427e145928cc766b573fe", "patch": "@@ -200,7 +200,16 @@ impl<'tcx> CodegenUnitExt<'tcx> for CodegenUnit<'tcx> {\n }\n \n // Anything we can't find a proper codegen unit for goes into this.\n-const FALLBACK_CODEGEN_UNIT: &'static str = \"__rustc_fallback_codegen_unit\";\n+fn fallback_cgu_name(tcx: TyCtxt) -> InternedString {\n+    const FALLBACK_CODEGEN_UNIT: &'static str = \"__rustc_fallback_codegen_unit\";\n+\n+    if tcx.sess.opts.debugging_opts.human_readable_cgu_names {\n+        Symbol::intern(FALLBACK_CODEGEN_UNIT).as_str()\n+    } else {\n+        Symbol::intern(&CodegenUnit::mangle_name(FALLBACK_CODEGEN_UNIT)).as_str()\n+    }\n+}\n+\n \n pub fn partition<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               trans_items: I,\n@@ -297,7 +306,7 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         let codegen_unit_name = match characteristic_def_id {\n             Some(def_id) => compute_codegen_unit_name(tcx, def_id, is_volatile),\n-            None => Symbol::intern(FALLBACK_CODEGEN_UNIT).as_str(),\n+            None => fallback_cgu_name(tcx),\n         };\n \n         let make_codegen_unit = || {\n@@ -381,7 +390,7 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // always ensure we have at least one CGU; otherwise, if we have a\n     // crate with just types (for example), we could wind up with no CGU\n     if codegen_units.is_empty() {\n-        let codegen_unit_name = Symbol::intern(FALLBACK_CODEGEN_UNIT).as_str();\n+        let codegen_unit_name = fallback_cgu_name(tcx);\n         codegen_units.insert(codegen_unit_name.clone(),\n                              CodegenUnit::new(codegen_unit_name.clone()));\n     }\n@@ -630,10 +639,10 @@ fn compute_codegen_unit_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Unfortunately we cannot just use the `ty::item_path` infrastructure here\n     // because we need paths to modules and the DefIds of those are not\n     // available anymore for external items.\n-    let mut mod_path = String::with_capacity(64);\n+    let mut cgu_name = String::with_capacity(64);\n \n     let def_path = tcx.def_path(def_id);\n-    mod_path.push_str(&tcx.crate_name(def_path.krate).as_str());\n+    cgu_name.push_str(&tcx.crate_name(def_path.krate).as_str());\n \n     for part in tcx.def_path(def_id)\n                    .data\n@@ -644,15 +653,21 @@ fn compute_codegen_unit_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             _ => false,\n                         }\n                     }) {\n-        mod_path.push_str(\"-\");\n-        mod_path.push_str(&part.data.as_interned_str());\n+        cgu_name.push_str(\"-\");\n+        cgu_name.push_str(&part.data.as_interned_str());\n     }\n \n     if volatile {\n-        mod_path.push_str(\".volatile\");\n+        cgu_name.push_str(\".volatile\");\n     }\n \n-    return Symbol::intern(&mod_path[..]).as_str();\n+    let cgu_name = if tcx.sess.opts.debugging_opts.human_readable_cgu_names {\n+        cgu_name\n+    } else {\n+        CodegenUnit::mangle_name(&cgu_name)\n+    };\n+\n+    Symbol::intern(&cgu_name[..]).as_str()\n }\n \n fn numbered_codegen_unit_name(crate_name: &str, index: usize) -> InternedString {"}, {"sha": "0e8af1b95119274a317a244e319425d1215d8cf5", "filename": "src/librustc_trans/assert_module_sources.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc_trans%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc_trans%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fassert_module_sources.rs?ref=94f3037f4bc2f18ac1c427e145928cc766b573fe", "patch": "@@ -28,8 +28,10 @@\n //! perturb the reuse results.\n \n use rustc::dep_graph::{DepNode, DepConstructor};\n+use rustc::mir::mono::CodegenUnit;\n use rustc::ty::TyCtxt;\n use syntax::ast;\n+use syntax_pos::symbol::Symbol;\n use rustc::ich::{ATTR_PARTITION_REUSED, ATTR_PARTITION_TRANSLATED};\n \n const MODULE: &'static str = \"module\";\n@@ -71,9 +73,11 @@ impl<'a, 'tcx> AssertModuleSource<'a, 'tcx> {\n         }\n \n         let mname = self.field(attr, MODULE);\n+        let mangled_cgu_name = CodegenUnit::mangle_name(&mname.as_str());\n+        let mangled_cgu_name = Symbol::intern(&mangled_cgu_name).as_str();\n \n         let dep_node = DepNode::new(self.tcx,\n-                                    DepConstructor::CompileCodegenUnit(mname.as_str()));\n+                                    DepConstructor::CompileCodegenUnit(mangled_cgu_name));\n \n         if let Some(loaded_from_cache) = self.tcx.dep_graph.was_loaded_from_cache(&dep_node) {\n             match (disposition, loaded_from_cache) {"}, {"sha": "212d1aaf055d183840548cb8c75c94921ef3801f", "filename": "src/librustc_trans/back/bytecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc_trans%2Fback%2Fbytecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc_trans%2Fback%2Fbytecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fbytecode.rs?ref=94f3037f4bc2f18ac1c427e145928cc766b573fe", "patch": "@@ -47,7 +47,7 @@ pub const RLIB_BYTECODE_OBJECT_MAGIC: &'static [u8] = b\"RUST_OBJECT\";\n // The version number this compiler will write to bytecode objects in rlibs\n pub const RLIB_BYTECODE_OBJECT_VERSION: u8 = 2;\n \n-pub const RLIB_BYTECODE_EXTENSION: &str = \"bytecode.encoded\";\n+pub const RLIB_BYTECODE_EXTENSION: &str = \"bc.z\";\n \n pub fn encode(identifier: &str, bytecode: &[u8]) -> Vec<u8> {\n     let mut encoded = Vec::new();"}, {"sha": "3014963a97ff4cc23ecfb33fdabf6b32704ec6c0", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=94f3037f4bc2f18ac1c427e145928cc766b573fe", "patch": "@@ -572,7 +572,7 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         let mut name = String::with_capacity(prefix.len() + 6);\n         name.push_str(prefix);\n         name.push_str(\".\");\n-        base_n::push_str(idx as u64, base_n::ALPHANUMERIC_ONLY, &mut name);\n+        base_n::push_str(idx as u128, base_n::ALPHANUMERIC_ONLY, &mut name);\n         name\n     }\n "}, {"sha": "774733e7068f5a9703fc8a4005840d415766a392", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f3037f4bc2f18ac1c427e145928cc766b573fe/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=94f3037f4bc2f18ac1c427e145928cc766b573fe", "patch": "@@ -1520,6 +1520,10 @@ impl<'test> TestCx<'test> {\n             rustc.args(&[\"-Z\", \"incremental-queries\"]);\n         }\n \n+        if self.config.mode == CodegenUnits {\n+            rustc.args(&[\"-Z\", \"human_readable_cgu_names\"]);\n+        }\n+\n         match self.config.mode {\n             CompileFail | ParseFail | Incremental => {\n                 // If we are extracting and matching errors in the new"}]}