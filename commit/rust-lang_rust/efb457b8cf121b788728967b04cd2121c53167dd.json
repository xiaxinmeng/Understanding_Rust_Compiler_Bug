{"sha": "efb457b8cf121b788728967b04cd2121c53167dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYjQ1N2I4Y2YxMjFiNzg4NzI4OTY3YjA0Y2QyMTIxYzUzMTY3ZGQ=", "commit": {"author": {"name": "nwin", "email": "nwin@users.noreply.github.com", "date": "2015-04-23T19:23:35Z"}, "committer": {"name": "nwin", "email": "nwin@users.noreply.github.com", "date": "2015-04-23T19:23:35Z"}, "message": "object type -> trait object\n\nConsistency. The book also refers to it as trait objects.", "tree": {"sha": "fcd572d48708dc174c66cf193778c86cc28a369c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcd572d48708dc174c66cf193778c86cc28a369c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efb457b8cf121b788728967b04cd2121c53167dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efb457b8cf121b788728967b04cd2121c53167dd", "html_url": "https://github.com/rust-lang/rust/commit/efb457b8cf121b788728967b04cd2121c53167dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efb457b8cf121b788728967b04cd2121c53167dd/comments", "author": {"login": "nwin", "id": 949560, "node_id": "MDQ6VXNlcjk0OTU2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/949560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwin", "html_url": "https://github.com/nwin", "followers_url": "https://api.github.com/users/nwin/followers", "following_url": "https://api.github.com/users/nwin/following{/other_user}", "gists_url": "https://api.github.com/users/nwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwin/subscriptions", "organizations_url": "https://api.github.com/users/nwin/orgs", "repos_url": "https://api.github.com/users/nwin/repos", "events_url": "https://api.github.com/users/nwin/events{/privacy}", "received_events_url": "https://api.github.com/users/nwin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nwin", "id": 949560, "node_id": "MDQ6VXNlcjk0OTU2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/949560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwin", "html_url": "https://github.com/nwin", "followers_url": "https://api.github.com/users/nwin/followers", "following_url": "https://api.github.com/users/nwin/following{/other_user}", "gists_url": "https://api.github.com/users/nwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwin/subscriptions", "organizations_url": "https://api.github.com/users/nwin/orgs", "repos_url": "https://api.github.com/users/nwin/repos", "events_url": "https://api.github.com/users/nwin/events{/privacy}", "received_events_url": "https://api.github.com/users/nwin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65f889919d23f5050b09ad4b80b0235f3c882cc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/65f889919d23f5050b09ad4b80b0235f3c882cc7", "html_url": "https://github.com/rust-lang/rust/commit/65f889919d23f5050b09ad4b80b0235f3c882cc7"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "a43fca7c19d6f4f57a79d970acba6e2ffddd6e4f", "filename": "src/doc/reference.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/efb457b8cf121b788728967b04cd2121c53167dd/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/efb457b8cf121b788728967b04cd2121c53167dd/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=efb457b8cf121b788728967b04cd2121c53167dd", "patch": "@@ -1555,7 +1555,7 @@ fn draw_twice<T: Shape>(surface: Surface, sh: T) {\n }\n ```\n \n-Traits also define an [object type](#object-types) with the same name as the\n+Traits also define an [trait object](#trait-objects) with the same name as the\n trait. Values of this type are created by [casting](#type-cast-expressions)\n pointer values (pointing to a type for which an implementation of the given\n trait is in scope) to pointers to the trait name, used as a type.\n@@ -2744,7 +2744,7 @@ A _method call_ consists of an expression followed by a single dot, an\n identifier, and a parenthesized expression-list. Method calls are resolved to\n methods on specific traits, either statically dispatching to a method if the\n exact `self`-type of the left-hand-side is known, or dynamically dispatching if\n-the left-hand-side expression is an indirect [object type](#object-types).\n+the left-hand-side expression is an indirect [trait object](#trait-objects).\n \n ### Field expressions\n \n@@ -3649,23 +3649,23 @@ call_closure(closure_no_args, closure_args);\n \n ```\n \n-### Object types\n+### Trait objects\n \n Every trait item (see [traits](#traits)) defines a type with the same name as\n-the trait. This type is called the _object type_ of the trait. Object types\n+the trait. This type is called the _trait object_ of the trait. Trait objects\n permit \"late binding\" of methods, dispatched using _virtual method tables_\n (\"vtables\"). Whereas most calls to trait methods are \"early bound\" (statically\n resolved) to specific implementations at compile time, a call to a method on an\n-object type is only resolved to a vtable entry at compile time. The actual\n+trait objects is only resolved to a vtable entry at compile time. The actual\n implementation for each vtable entry can vary on an object-by-object basis.\n \n Given a pointer-typed expression `E` of type `&T` or `Box<T>`, where `T`\n implements trait `R`, casting `E` to the corresponding pointer type `&R` or\n-`Box<R>` results in a value of the _object type_ `R`. This result is\n+`Box<R>` results in a value of the _trait object_ `R`. This result is\n represented as a pair of pointers: the vtable pointer for the `T`\n implementation of `R`, and the pointer value of `E`.\n \n-An example of an object type:\n+An example of an trait object:\n \n ```\n trait Printable {\n@@ -3685,7 +3685,7 @@ fn main() {\n }\n ```\n \n-In this example, the trait `Printable` occurs as an object type in both the\n+In this example, the trait `Printable` occurs as an trait object in both the\n type signature of `print`, and the cast expression in `main`.\n \n ### Type parameters"}]}