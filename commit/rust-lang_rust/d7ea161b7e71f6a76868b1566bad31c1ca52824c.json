{"sha": "d7ea161b7e71f6a76868b1566bad31c1ca52824c", "node_id": "C_kwDOAAsO6NoAKGQ3ZWExNjFiN2U3MWY2YTc2ODY4YjE1NjZiYWQzMWMxY2E1MjgyNGM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-12T23:52:25Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-01T19:38:45Z"}, "message": "Remove DefId from AssocItemContainer.", "tree": {"sha": "f54e79e0433cf00d8ef7b48dbec3491f94f4c073", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f54e79e0433cf00d8ef7b48dbec3491f94f4c073"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7ea161b7e71f6a76868b1566bad31c1ca52824c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ea161b7e71f6a76868b1566bad31c1ca52824c", "html_url": "https://github.com/rust-lang/rust/commit/d7ea161b7e71f6a76868b1566bad31c1ca52824c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7ea161b7e71f6a76868b1566bad31c1ca52824c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ee4446ee5e1c23bef61b45f74e37db4bad2f424", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee4446ee5e1c23bef61b45f74e37db4bad2f424", "html_url": "https://github.com/rust-lang/rust/commit/8ee4446ee5e1c23bef61b45f74e37db4bad2f424"}], "stats": {"total": 410, "additions": 190, "deletions": 220}, "files": [{"sha": "af9d83f0609e5ef7779820689cd80595e5cb3db8", "filename": "compiler/rustc_const_eval/src/util/call_kind.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -66,9 +66,12 @@ pub fn call_kind<'tcx>(\n     from_hir_call: bool,\n     self_arg: Option<Ident>,\n ) -> CallKind<'tcx> {\n-    let parent = tcx.opt_associated_item(method_did).and_then(|assoc| match assoc.container {\n-        AssocItemContainer::ImplContainer(impl_did) => tcx.trait_id_of_impl(impl_did),\n-        AssocItemContainer::TraitContainer(trait_did) => Some(trait_did),\n+    let parent = tcx.opt_associated_item(method_did).and_then(|assoc| {\n+        let container_id = assoc.container_id(tcx);\n+        match assoc.container {\n+            AssocItemContainer::ImplContainer => tcx.trait_id_of_impl(container_id),\n+            AssocItemContainer::TraitContainer => Some(container_id),\n+        }\n     });\n \n     let fn_call = parent"}, {"sha": "9886c572a8aaf4897d0de7dca6b4244ec71e0526", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -76,10 +76,11 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                             \"...is used and required to live as long as `'static` here \\\n                              because of an implicit lifetime bound on the {}\",\n                             match ctxt.assoc_item.container {\n-                                AssocItemContainer::TraitContainer(id) =>\n-                                    format!(\"`impl` of `{}`\", tcx.def_path_str(id)),\n-                                AssocItemContainer::ImplContainer(_) =>\n-                                    \"inherent `impl`\".to_string(),\n+                                AssocItemContainer::TraitContainer => {\n+                                    let id = ctxt.assoc_item.container_id(tcx);\n+                                    format!(\"`impl` of `{}`\", tcx.def_path_str(id))\n+                                }\n+                                AssocItemContainer::ImplContainer => \"inherent `impl`\".to_string(),\n                             },\n                         ),\n                     );"}, {"sha": "8d04d68bf1c2de3e9f0ddd5d237ddd666103654c", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -22,8 +22,8 @@ pub fn method_context(cx: &LateContext<'_>, id: hir::HirId) -> MethodLateContext\n     let def_id = cx.tcx.hir().local_def_id(id);\n     let item = cx.tcx.associated_item(def_id);\n     match item.container {\n-        ty::TraitContainer(..) => MethodLateContext::TraitAutoImpl,\n-        ty::ImplContainer(cid) => match cx.tcx.impl_trait_ref(cid) {\n+        ty::TraitContainer => MethodLateContext::TraitAutoImpl,\n+        ty::ImplContainer => match cx.tcx.impl_trait_ref(item.container_id(cx.tcx)) {\n             Some(_) => MethodLateContext::TraitImpl,\n             None => MethodLateContext::PlainImpl,\n         },"}, {"sha": "d8d2ac32c2f309f0ca3598717750a2eb2e080efb", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -1114,7 +1114,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {\n         match self.kind(id) {\n-            EntryKind::AssocFn(data) => data.decode(self).has_self,\n+            EntryKind::AssocFn { has_self, .. } => has_self,\n             _ => false,\n         }\n     }\n@@ -1134,26 +1134,21 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     fn get_associated_item(self, id: DefIndex) -> ty::AssocItem {\n-        let def_key = self.def_key(id);\n-        let parent = self.local_def_id(def_key.parent.unwrap());\n         let name = self.item_name(id);\n \n         let (kind, container, has_self) = match self.kind(id) {\n             EntryKind::AssocConst(container) => (ty::AssocKind::Const, container, false),\n-            EntryKind::AssocFn(data) => {\n-                let data = data.decode(self);\n-                (ty::AssocKind::Fn, data.container, data.has_self)\n-            }\n+            EntryKind::AssocFn { container, has_self } => (ty::AssocKind::Fn, container, has_self),\n             EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),\n-            _ => bug!(\"cannot get associated-item of `{:?}`\", def_key),\n+            _ => bug!(\"cannot get associated-item of `{:?}`\", id),\n         };\n \n         ty::AssocItem {\n             name,\n             kind,\n             def_id: self.local_def_id(id),\n             trait_item_def_id: self.get_trait_item_def_id(id),\n-            container: container.with_def_id(parent),\n+            container,\n             fn_has_self_parameter: has_self,\n         }\n     }"}, {"sha": "33278367ce32d05deb98815bd2d5b34fbaa3b8e2", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -1222,7 +1222,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     |s| s.print_trait_item(ast_item),\n                 );\n \n-                record!(self.tables.kind[def_id] <- EntryKind::AssocConst(AssocContainer::Trait));\n+                record!(self.tables.kind[def_id] <- EntryKind::AssocConst(ty::AssocItemContainer::TraitContainer));\n                 record!(self.tables.mir_const_qualif[def_id] <- mir::ConstQualifs::default());\n                 record!(self.tables.rendered_const[def_id] <- rendered);\n             }\n@@ -1238,14 +1238,14 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 };\n                 self.tables.asyncness.set(def_id.index, m_sig.header.asyncness);\n                 self.tables.constness.set(def_id.index, hir::Constness::NotConst);\n-                record!(self.tables.kind[def_id] <- EntryKind::AssocFn(self.lazy(AssocFnData {\n-                    container:AssocContainer::Trait,\n+                record!(self.tables.kind[def_id] <- EntryKind::AssocFn {\n+                    container: ty::AssocItemContainer::TraitContainer,\n                     has_self: trait_item.fn_has_self_parameter,\n-                })));\n+                });\n             }\n             ty::AssocKind::Type => {\n                 self.encode_explicit_item_bounds(def_id);\n-                record!(self.tables.kind[def_id] <- EntryKind::AssocType(AssocContainer::Trait));\n+                record!(self.tables.kind[def_id] <- EntryKind::AssocType(ty::AssocItemContainer::TraitContainer));\n             }\n         }\n         match trait_item.kind {\n@@ -1277,7 +1277,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     let qualifs = self.tcx.at(ast_item.span).mir_const_qualif(def_id);\n                     let const_data = self.encode_rendered_const_for_body(body_id);\n \n-                    record!(self.tables.kind[def_id] <- EntryKind::AssocConst(AssocContainer::Impl));\n+                    record!(self.tables.kind[def_id] <- EntryKind::AssocConst(ty::AssocItemContainer::ImplContainer));\n                     record!(self.tables.mir_const_qualif[def_id] <- qualifs);\n                     record!(self.tables.rendered_const[def_id] <- const_data);\n                 } else {\n@@ -1295,13 +1295,13 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     hir::Constness::NotConst\n                 };\n                 self.tables.constness.set(def_id.index, constness);\n-                record!(self.tables.kind[def_id] <- EntryKind::AssocFn(self.lazy(AssocFnData {\n-                    container:AssocContainer::Impl,\n+                record!(self.tables.kind[def_id] <- EntryKind::AssocFn {\n+                    container: ty::AssocItemContainer::ImplContainer,\n                     has_self: impl_item.fn_has_self_parameter,\n-                })));\n+                });\n             }\n             ty::AssocKind::Type => {\n-                record!(self.tables.kind[def_id] <- EntryKind::AssocType(AssocContainer::Impl));\n+                record!(self.tables.kind[def_id] <- EntryKind::AssocType(ty::AssocItemContainer::ImplContainer));\n             }\n         }\n         self.encode_item_type(def_id);"}, {"sha": "66bdecc30db8510744cfb5992cfd5624f27025de", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -419,9 +419,9 @@ enum EntryKind {\n     Generator,\n     Trait,\n     Impl,\n-    AssocFn(LazyValue<AssocFnData>),\n-    AssocType(AssocContainer),\n-    AssocConst(AssocContainer),\n+    AssocFn { container: ty::AssocItemContainer, has_self: bool },\n+    AssocType(ty::AssocItemContainer),\n+    AssocConst(ty::AssocItemContainer),\n     TraitAlias,\n }\n \n@@ -434,30 +434,6 @@ struct VariantData {\n     is_non_exhaustive: bool,\n }\n \n-/// Describes whether the container of an associated item\n-/// is a trait or an impl and whether, in a trait, it has\n-/// a default, or an in impl, whether it's marked \"default\".\n-#[derive(Copy, Clone, TyEncodable, TyDecodable)]\n-enum AssocContainer {\n-    Trait,\n-    Impl,\n-}\n-\n-impl AssocContainer {\n-    fn with_def_id(&self, def_id: DefId) -> ty::AssocItemContainer {\n-        match *self {\n-            AssocContainer::Trait => ty::TraitContainer(def_id),\n-            AssocContainer::Impl => ty::ImplContainer(def_id),\n-        }\n-    }\n-}\n-\n-#[derive(MetadataEncodable, MetadataDecodable)]\n-struct AssocFnData {\n-    container: AssocContainer,\n-    has_self: bool,\n-}\n-\n #[derive(TyEncodable, TyDecodable)]\n struct GeneratorData<'tcx> {\n     layout: mir::GeneratorLayout<'tcx>,\n@@ -475,7 +451,6 @@ pub fn provide(providers: &mut Providers) {\n \n trivially_parameterized_over_tcx! {\n     VariantData,\n-    AssocFnData,\n     EntryKind,\n     RawDefId,\n     TraitImpls,"}, {"sha": "c97156ac17ff6067ed1f5298bf417f5678a895da", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -1,6 +1,6 @@\n pub use self::AssocItemContainer::*;\n \n-use crate::ty;\n+use crate::ty::{self, DefIdTree};\n use rustc_data_structures::sorted_map::SortedIndexMultiMap;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n@@ -11,33 +11,8 @@ use super::{TyCtxt, Visibility};\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug, HashStable, Hash, Encodable, Decodable)]\n pub enum AssocItemContainer {\n-    TraitContainer(DefId),\n-    ImplContainer(DefId),\n-}\n-\n-impl AssocItemContainer {\n-    pub fn impl_def_id(&self) -> Option<DefId> {\n-        match *self {\n-            ImplContainer(id) => Some(id),\n-            _ => None,\n-        }\n-    }\n-\n-    /// Asserts that this is the `DefId` of an associated item declared\n-    /// in a trait, and returns the trait `DefId`.\n-    pub fn assert_trait(&self) -> DefId {\n-        match *self {\n-            TraitContainer(id) => id,\n-            _ => bug!(\"associated item has wrong container type: {:?}\", self),\n-        }\n-    }\n-\n-    pub fn id(&self) -> DefId {\n-        match *self {\n-            TraitContainer(id) => id,\n-            ImplContainer(id) => id,\n-        }\n-    }\n+    TraitContainer,\n+    ImplContainer,\n }\n \n /// Information about an associated item\n@@ -71,6 +46,27 @@ impl AssocItem {\n         tcx.visibility(self.def_id)\n     }\n \n+    #[inline]\n+    pub fn container_id(&self, tcx: TyCtxt<'_>) -> DefId {\n+        tcx.parent(self.def_id)\n+    }\n+\n+    #[inline]\n+    pub fn trait_container(&self, tcx: TyCtxt<'_>) -> Option<DefId> {\n+        match self.container {\n+            AssocItemContainer::ImplContainer => None,\n+            AssocItemContainer::TraitContainer => Some(tcx.parent(self.def_id)),\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn impl_container(&self, tcx: TyCtxt<'_>) -> Option<DefId> {\n+        match self.container {\n+            AssocItemContainer::ImplContainer => Some(tcx.parent(self.def_id)),\n+            AssocItemContainer::TraitContainer => None,\n+        }\n+    }\n+\n     pub fn signature(&self, tcx: TyCtxt<'_>) -> String {\n         match self.kind {\n             ty::AssocKind::Fn => {"}, {"sha": "0a0f45ce1a0d2091642da147042835f753d4fe79", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -1668,8 +1668,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     // Checks if the bound region is in Impl Item.\n     pub fn is_bound_region_in_impl_item(self, suitable_region_binding_scope: LocalDefId) -> bool {\n-        let container_id =\n-            self.associated_item(suitable_region_binding_scope.to_def_id()).container.id();\n+        let container_id = self.parent(suitable_region_binding_scope.to_def_id());\n         if self.impl_trait_ref(container_id).is_some() {\n             // For now, we do not try to target impls of traits. This is\n             // because this message is going to suggest that the user"}, {"sha": "4b0bc3c1114de5905c9cfea75c8659cca92029da", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -673,7 +673,7 @@ impl<T> Trait<T> for X {\n             // the associated type or calling a method that returns the associated type\".\n             let point_at_assoc_fn = self.point_at_methods_that_satisfy_associated_type(\n                 diag,\n-                assoc.container.id(),\n+                assoc.container_id(self),\n                 current_method_ident,\n                 proj_ty.item_def_id,\n                 values.expected,"}, {"sha": "53218225d53b82805cad1d7473ccdcc08083b9ac", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -460,7 +460,7 @@ impl<'tcx> Instance<'tcx> {\n                             && !matches!(\n                                 tcx.opt_associated_item(def.did),\n                                 Some(ty::AssocItem {\n-                                    container: ty::AssocItemContainer::TraitContainer(_),\n+                                    container: ty::AssocItemContainer::TraitContainer,\n                                     ..\n                                 })\n                             )"}, {"sha": "77c6c532f414d7aeb077b73e60d7b95a0952bf99", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -2194,10 +2194,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// If the given `DefId` describes a method belonging to an impl, returns the\n     /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.\n     pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {\n-        self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {\n-            TraitContainer(_) => None,\n-            ImplContainer(def_id) => Some(def_id),\n-        })\n+        self.opt_associated_item(def_id).and_then(|trait_item| trait_item.impl_container(self))\n     }\n \n     /// If the given `DefId` belongs to a trait that was automatically derived, returns `true`."}, {"sha": "fb0a4b4e8f402a07dbc8f9396e4646e58638f580", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -1179,13 +1179,14 @@ pub struct ProjectionTy<'tcx> {\n     /// The `DefId` of the `TraitItem` for the associated type `N`.\n     ///\n     /// Note that this is not the `DefId` of the `TraitRef` containing this\n-    /// associated type, which is in `tcx.associated_item(item_def_id).container`.\n+    /// associated type, which is in `tcx.associated_item(item_def_id).container`,\n+    /// aka. `tcx.parent(item_def_id).unwrap()`.\n     pub item_def_id: DefId,\n }\n \n impl<'tcx> ProjectionTy<'tcx> {\n     pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {\n-        tcx.associated_item(self.item_def_id).container.id()\n+        tcx.parent(self.item_def_id)\n     }\n \n     /// Extracts the underlying trait reference and own substs from this projection.\n@@ -1195,7 +1196,7 @@ impl<'tcx> ProjectionTy<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n     ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {\n-        let def_id = tcx.associated_item(self.item_def_id).container.id();\n+        let def_id = tcx.parent(self.item_def_id);\n         let trait_generics = tcx.generics_of(def_id);\n         (\n             ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },\n@@ -1433,7 +1434,7 @@ impl<'tcx> ExistentialProjection<'tcx> {\n     /// then this function would return an `exists T. T: Iterator` existential trait\n     /// reference.\n     pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::ExistentialTraitRef<'tcx> {\n-        let def_id = tcx.associated_item(self.item_def_id).container.id();\n+        let def_id = tcx.parent(self.item_def_id);\n         let subst_count = tcx.generics_of(def_id).count() - 1;\n         let substs = tcx.intern_substs(&self.substs[..subst_count]);\n         ty::ExistentialTraitRef { def_id, substs }"}, {"sha": "4b5bf80c071a6673ed79bd19f4e417e1b8f18a7b", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -402,7 +402,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             Some(dtor) => dtor.did,\n         };\n \n-        let impl_def_id = self.associated_item(dtor).container.id();\n+        let impl_def_id = self.parent(dtor);\n         let impl_generics = self.generics_of(impl_def_id);\n \n         // We have a destructor - all the parameters that are not"}, {"sha": "3a32fa310d446c9d7897f2f84f7771e507976376", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::graph::iterate::{\n use rustc_hir::def::DefKind;\n use rustc_middle::mir::{BasicBlock, BasicBlocks, Body, Operand, TerminatorKind};\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n-use rustc_middle::ty::{self, AssocItem, AssocItemContainer, Instance, TyCtxt};\n+use rustc_middle::ty::{self, Instance, TyCtxt};\n use rustc_session::lint::builtin::UNCONDITIONAL_RECURSION;\n use rustc_span::Span;\n use std::ops::ControlFlow;\n@@ -14,11 +14,9 @@ pub(crate) fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n \n     if let DefKind::Fn | DefKind::AssocFn = tcx.def_kind(def_id) {\n         // If this is trait/impl method, extract the trait's substs.\n-        let trait_substs = match tcx.opt_associated_item(def_id.to_def_id()) {\n-            Some(AssocItem {\n-                container: AssocItemContainer::TraitContainer(trait_def_id), ..\n-            }) => {\n-                let trait_substs_count = tcx.generics_of(*trait_def_id).count();\n+        let trait_substs = match tcx.trait_of_item(def_id) {\n+            Some(trait_def_id) => {\n+                let trait_substs_count = tcx.generics_of(trait_def_id).count();\n                 &InternalSubsts::identity_for_item(tcx, def_id.to_def_id())[..trait_substs_count]\n             }\n             _ => &[],"}, {"sha": "7d4ee832974dcf37d92c8c757fdd0c34c8807e6e", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -212,7 +212,7 @@ where\n                 // `impl Pub<Priv> { pub fn my_method() {} }` is considered a private type,\n                 // so we need to visit the self type additionally.\n                 if let Some(assoc_item) = tcx.opt_associated_item(def_id) {\n-                    if let ty::ImplContainer(impl_def_id) = assoc_item.container {\n+                    if let Some(impl_def_id) = assoc_item.impl_container(tcx) {\n                         tcx.type_of(impl_def_id).visit_with(self)?;\n                     }\n                 }"}, {"sha": "a1a2040bbca143356d62e00ce296a143bc936f72", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -564,8 +564,8 @@ impl<'tcx> SaveContext<'tcx> {\n                     return None;\n                 };\n                 let (def_id, decl_id) = match self.tcx.associated_item(method_id).container {\n-                    ty::ImplContainer(_) => (Some(method_id), None),\n-                    ty::TraitContainer(_) => (None, Some(method_id)),\n+                    ty::ImplContainer => (Some(method_id), None),\n+                    ty::TraitContainer => (None, Some(method_id)),\n                 };\n                 let sub_span = seg.ident.span;\n                 filter!(self.span_utils, sub_span);"}, {"sha": "219413121d812cc4190183359fdb86e04719f9ba", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -2714,7 +2714,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 if let Some(ident) = self\n                     .tcx\n                     .opt_associated_item(trait_item_def_id)\n-                    .and_then(|i| self.tcx.opt_item_ident(i.container.id()))\n+                    .and_then(|i| self.tcx.opt_item_ident(i.container_id(self.tcx)))\n                 {\n                     assoc_span.push_span_label(ident.span, \"in this trait\");\n                 }"}, {"sha": "612f51309088805cab18f7733e1ace0e301bda4c", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -690,7 +690,7 @@ fn receiver_is_dispatchable<'tcx>(\n         // U: Trait<Arg1, ..., ArgN>\n         let trait_predicate = {\n             let substs =\n-                InternalSubsts::for_item(tcx, method.container.assert_trait(), |param, _| {\n+                InternalSubsts::for_item(tcx, method.trait_container(tcx).unwrap(), |param, _| {\n                     if param.index == 0 {\n                         unsized_self_ty.into()\n                     } else {"}, {"sha": "b9259196c48aa68ea6be799c3a7b82f168f459c3", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -359,7 +359,7 @@ pub fn generator_trait_ref_and_outputs<'tcx>(\n \n pub fn impl_item_is_final(tcx: TyCtxt<'_>, assoc_item: &ty::AssocItem) -> bool {\n     assoc_item.defaultness(tcx).is_final()\n-        && tcx.impl_defaultness(assoc_item.container.id()).is_final()\n+        && tcx.impl_defaultness(assoc_item.container_id(tcx)).is_final()\n }\n \n pub enum TupleArgumentsFlag {"}, {"sha": "14a60ace44186a2ffa56344e3ae2ea75d4274b87", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -8,9 +8,7 @@\n \n use rustc_middle::traits::ChalkRustInterner as RustInterner;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{\n-    self, AssocItemContainer, AssocKind, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n-};\n+use rustc_middle::ty::{self, AssocKind, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n \n use rustc_ast::ast;\n use rustc_attr as attr;\n@@ -74,7 +72,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     ) -> Arc<chalk_solve::rust_ir::AssociatedTyDatum<RustInterner<'tcx>>> {\n         let def_id = assoc_type_id.0;\n         let assoc_item = self.interner.tcx.associated_item(def_id);\n-        let AssocItemContainer::TraitContainer(trait_def_id) = assoc_item.container else {\n+        let Some(trait_def_id) = assoc_item.trait_container(self.interner.tcx) else {\n             unimplemented!(\"Not possible??\");\n         };\n         match assoc_item.kind {\n@@ -455,7 +453,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     ) -> Arc<chalk_solve::rust_ir::AssociatedTyValue<RustInterner<'tcx>>> {\n         let def_id = associated_ty_id.0;\n         let assoc_item = self.interner.tcx.associated_item(def_id);\n-        let impl_id = assoc_item.container.id();\n+        let impl_id = assoc_item.container_id(self.interner.tcx);\n         match assoc_item.kind {\n             AssocKind::Type => {}\n             _ => unimplemented!(\"Not possible??\"),"}, {"sha": "db4f53aace4dbd7d83c74675dcda069a715808d8", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, TyCtxt};\n \n pub fn provide(providers: &mut ty::query::Providers) {\n@@ -44,10 +44,7 @@ fn impl_item_implementor_ids(tcx: TyCtxt<'_>, impl_id: DefId) -> FxHashMap<DefId\n /// returns the `DefId` of the trait that the trait item belongs to;\n /// otherwise, returns `None`.\n fn trait_of_item(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n-    tcx.opt_associated_item(def_id).and_then(|associated_item| match associated_item.container {\n-        ty::TraitContainer(def_id) => Some(def_id),\n-        ty::ImplContainer(_) => None,\n-    })\n+    tcx.opt_associated_item(def_id).and_then(|associated_item| associated_item.trait_container(tcx))\n }\n \n fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n@@ -59,7 +56,7 @@ fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n             if let Some(impl_item_ref) =\n                 impl_.items.iter().find(|i| i.id.def_id.to_def_id() == def_id)\n             {\n-                let assoc_item = associated_item_from_impl_item_ref(parent_def_id, impl_item_ref);\n+                let assoc_item = associated_item_from_impl_item_ref(impl_item_ref);\n                 debug_assert_eq!(assoc_item.def_id, def_id);\n                 return assoc_item;\n             }\n@@ -69,7 +66,7 @@ fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n             if let Some(trait_item_ref) =\n                 trait_item_refs.iter().find(|i| i.id.def_id.to_def_id() == def_id)\n             {\n-                let assoc_item = associated_item_from_trait_item_ref(parent_def_id, trait_item_ref);\n+                let assoc_item = associated_item_from_trait_item_ref(trait_item_ref);\n                 debug_assert_eq!(assoc_item.def_id, def_id);\n                 return assoc_item;\n             }\n@@ -85,10 +82,7 @@ fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n     )\n }\n \n-fn associated_item_from_trait_item_ref(\n-    parent_def_id: LocalDefId,\n-    trait_item_ref: &hir::TraitItemRef,\n-) -> ty::AssocItem {\n+fn associated_item_from_trait_item_ref(trait_item_ref: &hir::TraitItemRef) -> ty::AssocItem {\n     let def_id = trait_item_ref.id.def_id;\n     let (kind, has_self) = match trait_item_ref.kind {\n         hir::AssocItemKind::Const => (ty::AssocKind::Const, false),\n@@ -101,15 +95,12 @@ fn associated_item_from_trait_item_ref(\n         kind,\n         def_id: def_id.to_def_id(),\n         trait_item_def_id: Some(def_id.to_def_id()),\n-        container: ty::TraitContainer(parent_def_id.to_def_id()),\n+        container: ty::TraitContainer,\n         fn_has_self_parameter: has_self,\n     }\n }\n \n-fn associated_item_from_impl_item_ref(\n-    parent_def_id: LocalDefId,\n-    impl_item_ref: &hir::ImplItemRef,\n-) -> ty::AssocItem {\n+fn associated_item_from_impl_item_ref(impl_item_ref: &hir::ImplItemRef) -> ty::AssocItem {\n     let def_id = impl_item_ref.id.def_id;\n     let (kind, has_self) = match impl_item_ref.kind {\n         hir::AssocItemKind::Const => (ty::AssocKind::Const, false),\n@@ -122,7 +113,7 @@ fn associated_item_from_impl_item_ref(\n         kind,\n         def_id: def_id.to_def_id(),\n         trait_item_def_id: impl_item_ref.trait_item_def_id,\n-        container: ty::ImplContainer(parent_def_id.to_def_id()),\n+        container: ty::ImplContainer,\n         fn_has_self_parameter: has_self,\n     }\n }"}, {"sha": "ff39bf36129bba2828276af51209bd839c27b13e", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -255,7 +255,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 trait_bound_spans.push(*span);\n             }\n             for assoc_item in items {\n-                let trait_def_id = assoc_item.container.id();\n+                let trait_def_id = assoc_item.container_id(tcx);\n                 names.push(format!(\n                     \"`{}` (from trait `{}`)\",\n                     assoc_item.name,\n@@ -321,7 +321,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let mut dupes = false;\n             for item in assoc_items {\n                 let prefix = if names[&item.name] > 1 {\n-                    let trait_def_id = item.container.id();\n+                    let trait_def_id = item.container_id(tcx);\n                     dupes = true;\n                     format!(\"{}::\", tcx.def_path_str(trait_def_id))\n                 } else {\n@@ -376,7 +376,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let mut label = vec![];\n                 for item in assoc_items {\n                     let postfix = if names[&item.name] > 1 {\n-                        let trait_def_id = item.container.id();\n+                        let trait_def_id = item.container_id(tcx);\n                         format!(\" (from trait `{}`)\", tcx.def_path_str(trait_def_id))\n                     } else {\n                         String::new()"}, {"sha": "8a5c7fee697d1487ec30bfdbbbf9f3c21c40f9f4", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -1160,7 +1160,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         span: binding.span,\n                         prev_span: *prev_span,\n                         item_name: binding.item_name,\n-                        def_path: tcx.def_path_str(assoc_item.container.id()),\n+                        def_path: tcx.def_path_str(assoc_item.container_id(tcx)),\n                     });\n                 })\n                 .or_insert(binding.span);"}, {"sha": "666498403c4f7c57acdbe420f4a0eddaf53bb1a8", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -165,7 +165,7 @@ fn compare_predicate_entailment<'tcx>(\n \n     // Create mapping from trait to placeholder.\n     let trait_to_placeholder_substs =\n-        impl_to_placeholder_substs.rebase_onto(tcx, impl_m.container.id(), trait_to_impl_substs);\n+        impl_to_placeholder_substs.rebase_onto(tcx, impl_m.container_id(tcx), trait_to_impl_substs);\n     debug!(\"compare_impl_method: trait_to_placeholder_substs={:?}\", trait_to_placeholder_substs);\n \n     let impl_m_generics = tcx.generics_of(impl_m.def_id);\n@@ -511,8 +511,8 @@ fn compare_self_type<'tcx>(\n \n     let self_string = |method: &ty::AssocItem| {\n         let untransformed_self_ty = match method.container {\n-            ty::ImplContainer(_) => impl_trait_ref.self_ty(),\n-            ty::TraitContainer(_) => tcx.types.self_param,\n+            ty::ImplContainer => impl_trait_ref.self_ty(),\n+            ty::TraitContainer => tcx.types.self_param,\n         };\n         let self_arg_ty = tcx.fn_sig(method.def_id).input(0);\n         let param_env = ty::ParamEnv::reveal_all();\n@@ -1194,7 +1194,7 @@ fn compare_type_predicate_entailment<'tcx>(\n ) -> Result<(), ErrorGuaranteed> {\n     let impl_substs = InternalSubsts::identity_for_item(tcx, impl_ty.def_id);\n     let trait_to_impl_substs =\n-        impl_substs.rebase_onto(tcx, impl_ty.container.id(), impl_trait_ref.substs);\n+        impl_substs.rebase_onto(tcx, impl_ty.container_id(tcx), impl_trait_ref.substs);\n \n     let impl_ty_generics = tcx.generics_of(impl_ty.def_id);\n     let trait_ty_generics = tcx.generics_of(trait_ty.def_id);\n@@ -1390,9 +1390,9 @@ pub fn check_type_bounds<'tcx>(\n     });\n     let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n     let impl_ty_substs = tcx.intern_substs(&substs);\n+    let container_id = impl_ty.container_id(tcx);\n \n-    let rebased_substs =\n-        impl_ty_substs.rebase_onto(tcx, impl_ty.container.id(), impl_trait_ref.substs);\n+    let rebased_substs = impl_ty_substs.rebase_onto(tcx, container_id, impl_trait_ref.substs);\n     let impl_ty_value = tcx.type_of(impl_ty.def_id);\n \n     let param_env = tcx.param_env(impl_ty.def_id);\n@@ -1441,8 +1441,7 @@ pub fn check_type_bounds<'tcx>(\n     debug!(?normalize_param_env);\n \n     let impl_ty_substs = InternalSubsts::identity_for_item(tcx, impl_ty.def_id);\n-    let rebased_substs =\n-        impl_ty_substs.rebase_onto(tcx, impl_ty.container.id(), impl_trait_ref.substs);\n+    let rebased_substs = impl_ty_substs.rebase_onto(tcx, container_id, impl_trait_ref.substs);\n \n     tcx.infer_ctxt().enter(move |infcx| {\n         let ocx = ObligationCtxt::new(&infcx);\n@@ -1505,10 +1504,13 @@ pub fn check_type_bounds<'tcx>(\n         // Finally, resolve all regions. This catches wily misuses of\n         // lifetime parameters.\n         let implied_bounds = match impl_ty.container {\n-            ty::TraitContainer(_) => FxHashSet::default(),\n-            ty::ImplContainer(def_id) => {\n-                wfcheck::impl_implied_bounds(tcx, param_env, def_id.expect_local(), impl_ty_span)\n-            }\n+            ty::TraitContainer => FxHashSet::default(),\n+            ty::ImplContainer => wfcheck::impl_implied_bounds(\n+                tcx,\n+                param_env,\n+                container_id.expect_local(),\n+                impl_ty_span,\n+            ),\n         };\n         let mut outlives_environment = OutlivesEnvironment::new(param_env);\n         outlives_environment.add_implied_bounds(&infcx, implied_bounds, impl_ty_hir_id);"}, {"sha": "4de48dc5ba107db1c8c3c301d6035e263df6a7d1", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -775,7 +775,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             self.typeck_results.borrow().type_dependent_def_id(expr.hir_id).map(\n                                 |did| {\n                                     let ai = self.tcx.associated_item(did);\n-                                    ai.container == ty::TraitContainer(clone_trait)\n+                                    ai.trait_container(self.tcx) == Some(clone_trait)\n                                 },\n                             ),\n                             segment.ident.name,"}, {"sha": "3a8093345119f2f5f3c9f0e33628cd66b196ccc9", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -1090,21 +1090,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 is_alias_variant_ctor = true;\n             }\n             Res::Def(DefKind::AssocFn | DefKind::AssocConst, def_id) => {\n-                let container = tcx.associated_item(def_id).container;\n-                debug!(?def_id, ?container);\n+                let assoc_item = tcx.associated_item(def_id);\n+                let container = assoc_item.container;\n+                let container_id = assoc_item.container_id(tcx);\n+                debug!(?def_id, ?container, ?container_id);\n                 match container {\n-                    ty::TraitContainer(trait_did) => {\n-                        callee::check_legal_trait_for_method_call(tcx, span, None, span, trait_did)\n+                    ty::TraitContainer => {\n+                        callee::check_legal_trait_for_method_call(tcx, span, None, span, container_id)\n                     }\n-                    ty::ImplContainer(impl_def_id) => {\n+                    ty::ImplContainer => {\n                         if segments.len() == 1 {\n                             // `<T>::assoc` will end up here, and so\n                             // can `T::assoc`. It this came from an\n                             // inherent impl, we need to record the\n                             // `T` for posterity (see `UserSelfTy` for\n                             // details).\n                             let self_ty = self_ty.expect(\"UFCS sugared assoc missing Self\");\n-                            user_self_ty = Some(UserSelfTy { impl_def_id, self_ty });\n+                            user_self_ty = Some(UserSelfTy { impl_def_id: container_id, self_ty });\n                         }\n                     }\n                 }"}, {"sha": "57771e0969bac5c80143bcf8c04b8a9217b35ec0", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -839,8 +839,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             && results.type_dependent_def_id(expr.hir_id).map_or(\n                 false,\n                 |did| {\n-                    self.tcx.associated_item(did).container\n-                        == ty::AssocItemContainer::TraitContainer(clone_trait_did)\n+                    let assoc_item = self.tcx.associated_item(did);\n+                    assoc_item.container == ty::AssocItemContainer::TraitContainer\n+                        && assoc_item.container_id(self.tcx) == clone_trait_did\n                 },\n             )\n             // If that clone call hasn't already dereferenced the self type (i.e. don't give this"}, {"sha": "2c89b63ae84f813be5350bfbb200bede9c163548", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -238,7 +238,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n     ) -> SubstsRef<'tcx> {\n         match pick.kind {\n             probe::InherentImplPick => {\n-                let impl_def_id = pick.item.container.id();\n+                let impl_def_id = pick.item.container_id(self.tcx);\n                 assert!(\n                     self.tcx.impl_trait_ref(impl_def_id).is_none(),\n                     \"impl {:?} is not an inherent impl\",\n@@ -248,7 +248,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n             }\n \n             probe::ObjectPick => {\n-                let trait_def_id = pick.item.container.id();\n+                let trait_def_id = pick.item.container_id(self.tcx);\n                 self.extract_existential_trait_ref(self_ty, |this, object_ty, principal| {\n                     // The object data has no entry for the Self\n                     // Type. For the purposes of this method call, we\n@@ -273,7 +273,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n             }\n \n             probe::TraitPick => {\n-                let trait_def_id = pick.item.container.id();\n+                let trait_def_id = pick.item.container_id(self.tcx);\n \n                 // Make a trait reference `$0 : Trait<$1...$n>`\n                 // consisting entirely of type variables. Later on in\n@@ -540,15 +540,14 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n     fn enforce_illegal_method_limitations(&self, pick: &probe::Pick<'_>) {\n         // Disallow calls to the method `drop` defined in the `Drop` trait.\n-        match pick.item.container {\n-            ty::TraitContainer(trait_def_id) => callee::check_legal_trait_for_method_call(\n+        if let Some(trait_def_id) = pick.item.trait_container(self.tcx) {\n+            callee::check_legal_trait_for_method_call(\n                 self.tcx,\n                 self.span,\n                 Some(self.self_expr.span),\n                 self.call_expr.span,\n                 trait_def_id,\n-            ),\n-            ty::ImplContainer(..) => {}\n+            )\n         }\n     }\n "}, {"sha": "0e678c41f8b40047d66a6a18ecda35ad46b50092", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -231,7 +231,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ProbeScope::AllTraits,\n             ) {\n                 // If we find a different result the caller probably forgot to import a trait.\n-                Ok(ref new_pick) if *new_pick != pick => vec![new_pick.item.container.id()],\n+                Ok(ref new_pick) if *new_pick != pick => vec![new_pick.item.container_id(self.tcx)],\n                 Err(Ambiguity(ref sources)) => sources\n                     .iter()\n                     .filter_map(|source| {"}, {"sha": "7c68d93040556fb8f74992e36bce3ff596e3d437", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -148,7 +148,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let trait_name = self.trait_path_or_bare_name(\n                         span,\n                         call_expr.hir_id,\n-                        pick.item.container.id(),\n+                        pick.item.container_id(self.tcx),\n                     );\n \n                     let mut lint = lint.build(&format!(\n@@ -261,8 +261,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx.struct_span_lint_hir(RUST_2021_PRELUDE_COLLISIONS, expr_id, span, |lint| {\n             // \"type\" refers to either a type or, more likely, a trait from which\n             // the associated function or method is from.\n-            let trait_path = self.trait_path_or_bare_name(span, expr_id, pick.item.container.id());\n-            let trait_generics = self.tcx.generics_of(pick.item.container.id());\n+            let container_id = pick.item.container_id(self.tcx);\n+            let trait_path = self.trait_path_or_bare_name(span, expr_id, container_id);\n+            let trait_generics = self.tcx.generics_of(container_id);\n \n             let trait_name =\n                 if trait_generics.params.len() <= trait_generics.has_self as usize {"}, {"sha": "efe15fec7cbfa0ba88a6e0f281cff93bf665e81d", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -592,8 +592,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     fn push_candidate(&mut self, candidate: Candidate<'tcx>, is_inherent: bool) {\n         let is_accessible = if let Some(name) = self.method_name {\n             let item = candidate.item;\n-            let def_scope =\n-                self.tcx.adjust_ident_and_get_scope(name, item.container.id(), self.body_id).1;\n+            let def_scope = self\n+                .tcx\n+                .adjust_ident_and_get_scope(name, item.container_id(self.tcx), self.body_id)\n+                .1;\n             item.visibility(self.tcx).is_accessible_from(def_scope, self.tcx)\n         } else {\n             true\n@@ -1025,7 +1027,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         self.assemble_extension_candidates_for_all_traits();\n \n         let out_of_scope_traits = match self.pick_core() {\n-            Some(Ok(p)) => vec![p.item.container.id()],\n+            Some(Ok(p)) => vec![p.item.container_id(self.tcx)],\n             //Some(Ok(p)) => p.iter().map(|p| p.item.container().id()).collect(),\n             Some(Err(MethodError::Ambiguity(v))) => v\n                 .into_iter()\n@@ -1387,7 +1389,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                             self.tcx.def_path_str(stable_pick.item.def_id),\n                         ));\n                     }\n-                    (ty::AssocKind::Const, ty::AssocItemContainer::TraitContainer(def_id)) => {\n+                    (ty::AssocKind::Const, ty::AssocItemContainer::TraitContainer) => {\n+                        let def_id = stable_pick.item.container_id(self.tcx);\n                         diag.span_suggestion(\n                             self.span,\n                             \"use the fully qualified path to the associated const\",\n@@ -1429,9 +1432,11 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n     fn candidate_source(&self, candidate: &Candidate<'tcx>, self_ty: Ty<'tcx>) -> CandidateSource {\n         match candidate.kind {\n-            InherentImplCandidate(..) => CandidateSource::Impl(candidate.item.container.id()),\n+            InherentImplCandidate(..) => {\n+                CandidateSource::Impl(candidate.item.container_id(self.tcx))\n+            }\n             ObjectCandidate | WhereClauseCandidate(_) => {\n-                CandidateSource::Trait(candidate.item.container.id())\n+                CandidateSource::Trait(candidate.item.container_id(self.tcx))\n             }\n             TraitCandidate(trait_ref) => self.probe(|_| {\n                 let _ = self\n@@ -1444,7 +1449,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                         // to that impl.\n                         CandidateSource::Impl(impl_data.impl_def_id)\n                     }\n-                    _ => CandidateSource::Trait(candidate.item.container.id()),\n+                    _ => CandidateSource::Trait(candidate.item.container_id(self.tcx)),\n                 }\n             }),\n         }\n@@ -1502,7 +1507,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     debug!(\"xform_ret_ty after normalization: {:?}\", xform_ret_ty);\n \n                     // Check whether the impl imposes obligations we have to worry about.\n-                    let impl_def_id = probe.item.container.id();\n+                    let impl_def_id = probe.item.container_id(self.tcx);\n                     let impl_bounds = self.tcx.predicates_of(impl_def_id);\n                     let impl_bounds = impl_bounds.instantiate(self.tcx, substs);\n                     let traits::Normalized { value: impl_bounds, obligations: norm_obligations } =\n@@ -1653,12 +1658,12 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         probes: &[(&Candidate<'tcx>, ProbeResult)],\n     ) -> Option<Pick<'tcx>> {\n         // Do all probes correspond to the same trait?\n-        let container = probes[0].0.item.container;\n-        if let ty::ImplContainer(_) = container {\n-            return None;\n-        }\n-        if probes[1..].iter().any(|&(p, _)| p.item.container != container) {\n-            return None;\n+        let container = probes[0].0.item.trait_container(self.tcx)?;\n+        for (p, _) in &probes[1..] {\n+            let p_container = p.item.trait_container(self.tcx)?;\n+            if p_container != container {\n+                return None;\n+            }\n         }\n \n         // FIXME: check the return type here somehow."}, {"sha": "c92b93cbc22d226c738e8475ae058ae19520242d", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -1789,7 +1789,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // We point at the method, but we just skip the rest of the check for arbitrary\n                         // self types and rely on the suggestion to `use` the trait from\n                         // `suggest_valid_traits`.\n-                        let did = Some(pick.item.container.id());\n+                        let did = Some(pick.item.container_id(self.tcx));\n                         let skip = skippable.contains(&did);\n                         if pick.autoderefs == 0 && !skip {\n                             err.span_label(\n@@ -1825,7 +1825,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         )\n                     {\n                         debug!(\"try_alt_rcvr: pick candidate {:?}\", pick);\n-                        let did = Some(pick.item.container.id());\n+                        let did = Some(pick.item.container_id(self.tcx));\n                         // We don't want to suggest a container type when the missing\n                         // method is `.clone()` or `.deref()` otherwise we'd suggest\n                         // `Arc::new(foo).clone()`, which is far from what the user wants."}, {"sha": "95f327112253a92aa102700fe063b423566066c0", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -977,11 +977,14 @@ fn check_associated_item(\n         let item = tcx.associated_item(item_id);\n \n         let (mut implied_bounds, self_ty) = match item.container {\n-            ty::TraitContainer(_) => (FxHashSet::default(), tcx.types.self_param),\n-            ty::ImplContainer(def_id) => (\n-                impl_implied_bounds(tcx, wfcx.param_env, def_id.expect_local(), span),\n-                tcx.type_of(def_id),\n-            ),\n+            ty::TraitContainer => (FxHashSet::default(), tcx.types.self_param),\n+            ty::ImplContainer => {\n+                let def_id = item.container_id(tcx);\n+                (\n+                    impl_implied_bounds(tcx, wfcx.param_env, def_id.expect_local(), span),\n+                    tcx.type_of(def_id),\n+                )\n+            }\n         };\n \n         match item.kind {\n@@ -1004,7 +1007,7 @@ fn check_associated_item(\n                 check_method_receiver(wfcx, hir_sig, item, self_ty);\n             }\n             ty::AssocKind::Type => {\n-                if let ty::AssocItemContainer::TraitContainer(_) = item.container {\n+                if let ty::AssocItemContainer::TraitContainer = item.container {\n                     check_associated_type_bounds(wfcx, item, span)\n                 }\n                 if item.defaultness(tcx).has_value() {"}, {"sha": "99996e80c9ce9699880f76259d4008f831465eef", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -2433,7 +2433,7 @@ fn explicit_predicates_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::Generic\n             //   supertrait).\n             if let ty::Projection(projection) = ty.kind() {\n                 projection.substs == trait_identity_substs\n-                    && tcx.associated_item(projection.item_def_id).container.id() == def_id\n+                    && tcx.associated_item(projection.item_def_id).container_id(tcx) == def_id\n             } else {\n                 false\n             }\n@@ -3264,7 +3264,7 @@ fn asm_target_features<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx FxHashSet<S\n /// applied to the method prototype.\n fn should_inherit_track_caller(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     if let Some(impl_item) = tcx.opt_associated_item(def_id)\n-        && let ty::AssocItemContainer::ImplContainer(_) = impl_item.container\n+        && let ty::AssocItemContainer::ImplContainer = impl_item.container\n         && let Some(trait_item) = impl_item.trait_item_def_id\n     {\n         return tcx"}, {"sha": "0d2b75d3328fcc3bfb27b9ac27d48db7414b2a4d", "filename": "compiler/rustc_typeck/src/collect/item_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -3,7 +3,7 @@ use crate::astconv::AstConv;\n use rustc_hir as hir;\n use rustc_infer::traits::util;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_span::Span;\n \n@@ -30,7 +30,7 @@ fn associated_type_bounds<'tcx>(\n     // Associated types are implicitly sized unless a `?Sized` bound is found\n     <dyn AstConv<'_>>::add_implicitly_sized(&icx, &mut bounds, ast_bounds, None, span);\n \n-    let trait_def_id = tcx.associated_item(assoc_item_def_id).container.id();\n+    let trait_def_id = tcx.parent(assoc_item_def_id);\n     let trait_predicates = tcx.trait_explicit_predicates_and_bounds(trait_def_id.expect_local());\n \n     let bounds_from_parent = trait_predicates.predicates.iter().copied().filter(|(pred, _)| {"}, {"sha": "3b779280eda66168d9418ff9cc6a8391f74d9e7c", "filename": "compiler/rustc_typeck/src/outlives/implicit_infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt};\n use rustc_span::Span;\n \n use super::explicit::ExplicitPredicatesMap;\n@@ -202,7 +202,7 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n                 debug!(\"Projection\");\n                 check_explicit_predicates(\n                     tcx,\n-                    tcx.associated_item(obj.item_def_id).container.id(),\n+                    tcx.parent(obj.item_def_id),\n                     obj.substs,\n                     required_predicates,\n                     explicit_map,"}, {"sha": "b6791bfab4ad48a2b9ad089e30bc05f1ed53ab84", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -1139,8 +1139,8 @@ impl<'tcx> Clean<'tcx, Item> for ty::AssocItem {\n                 let ty = clean_middle_ty(tcx.type_of(self.def_id), cx, Some(self.def_id));\n \n                 let provided = match self.container {\n-                    ty::ImplContainer(_) => true,\n-                    ty::TraitContainer(_) => tcx.impl_defaultness(self.def_id).has_value(),\n+                    ty::ImplContainer => true,\n+                    ty::TraitContainer => tcx.impl_defaultness(self.def_id).has_value(),\n                 };\n                 if provided {\n                     AssocConstItem(ty, ConstantKind::Extern { def_id: self.def_id })\n@@ -1159,8 +1159,8 @@ impl<'tcx> Clean<'tcx, Item> for ty::AssocItem {\n \n                 if self.fn_has_self_parameter {\n                     let self_ty = match self.container {\n-                        ty::ImplContainer(def_id) => tcx.type_of(def_id),\n-                        ty::TraitContainer(_) => tcx.types.self_param,\n+                        ty::ImplContainer => tcx.type_of(self.container_id(tcx)),\n+                        ty::TraitContainer => tcx.types.self_param,\n                     };\n                     let self_arg_ty = sig.input(0).skip_binder();\n                     if self_arg_ty == self_ty {\n@@ -1178,13 +1178,13 @@ impl<'tcx> Clean<'tcx, Item> for ty::AssocItem {\n                 }\n \n                 let provided = match self.container {\n-                    ty::ImplContainer(_) => true,\n-                    ty::TraitContainer(_) => self.defaultness(tcx).has_value(),\n+                    ty::ImplContainer => true,\n+                    ty::TraitContainer => self.defaultness(tcx).has_value(),\n                 };\n                 if provided {\n                     let defaultness = match self.container {\n-                        ty::ImplContainer(_) => Some(self.defaultness(tcx)),\n-                        ty::TraitContainer(_) => None,\n+                        ty::ImplContainer => Some(self.defaultness(tcx)),\n+                        ty::TraitContainer => None,\n                     };\n                     MethodItem(Box::new(Function { generics, decl }), defaultness)\n                 } else {\n@@ -1215,7 +1215,7 @@ impl<'tcx> Clean<'tcx, Item> for ty::AssocItem {\n                     }\n                 }\n \n-                if let ty::TraitContainer(_) = self.container {\n+                if let ty::TraitContainer = self.container {\n                     let bounds = tcx.explicit_item_bounds(self.def_id);\n                     let predicates = ty::GenericPredicates { parent: None, predicates: bounds };\n                     let mut generics =\n@@ -1232,7 +1232,7 @@ impl<'tcx> Clean<'tcx, Item> for ty::AssocItem {\n                                 if assoc.name != my_name {\n                                     return false;\n                                 }\n-                                if trait_.def_id() != self.container.id() {\n+                                if trait_.def_id() != self.container_id(tcx) {\n                                     return false;\n                                 }\n                                 match **self_type {\n@@ -1356,7 +1356,7 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n             }\n \n             let trait_segments = &p.segments[..p.segments.len() - 1];\n-            let trait_def = cx.tcx.associated_item(p.res.def_id()).container.id();\n+            let trait_def = cx.tcx.associated_item(p.res.def_id()).container_id(cx.tcx);\n             let trait_ = self::Path {\n                 res: Res::Def(DefKind::Trait, trait_def),\n                 segments: trait_segments.iter().map(|x| x.clean(cx)).collect(),"}, {"sha": "4f9ff97f1fd1a1ace7344eb47c6aa6259fbaa29d", "filename": "src/tools/clippy/clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -220,9 +220,11 @@ fn check_sig<'tcx>(cx: &LateContext<'tcx>, closure_ty: Ty<'tcx>, call_ty: Ty<'tc\n }\n \n fn get_ufcs_type_name(cx: &LateContext<'_>, method_def_id: DefId) -> String {\n-    match cx.tcx.associated_item(method_def_id).container {\n-        ty::TraitContainer(def_id) => cx.tcx.def_path_str(def_id),\n-        ty::ImplContainer(def_id) => {\n+    let assoc_item = cx.tcx.associated_item(method_def_id);\n+    let def_id = assoc_item.container_id(cx.tcx);\n+    match assoc_item.container {\n+        ty::TraitContainer => cx.tcx.def_path_str(def_id),\n+        ty::ImplContainer => {\n             let ty = cx.tcx.type_of(def_id);\n             match ty.kind() {\n                 ty::Adt(adt, _) => cx.tcx.def_path_str(adt.did()),"}, {"sha": "88ba002927a949d4512c94809a0f3ec2f69381f2", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -10,7 +10,7 @@ use clippy_utils::diagnostics::span_lint;\n use rustc_ast::ast;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::ty::{self, DefIdTree};\n+use rustc_middle::ty::DefIdTree;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::source_map::Span;\n@@ -153,13 +153,12 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n         // If the method is an impl for a trait, don't doc.\n-        match cx.tcx.associated_item(impl_item.def_id).container {\n-            ty::TraitContainer(_) => return,\n-            ty::ImplContainer(cid) => {\n-                if cx.tcx.impl_trait_ref(cid).is_some() {\n-                    return;\n-                }\n-            },\n+        if let Some(cid) = cx.tcx.associated_item(impl_item.def_id).impl_container(cx.tcx) {\n+            if cx.tcx.impl_trait_ref(cid).is_some() {\n+                return;\n+            }\n+        } else {\n+            return;\n         }\n \n         let (article, desc) = cx.tcx.article_and_description(impl_item.def_id.to_def_id());"}, {"sha": "07bc2ca5d3cd2fa263893adde7f24e4cb0ef640b", "filename": "src/tools/clippy/clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7ea161b7e71f6a76868b1566bad31c1ca52824c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ea161b7e71f6a76868b1566bad31c1ca52824c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs?ref=d7ea161b7e71f6a76868b1566bad31c1ca52824c", "patch": "@@ -151,9 +151,11 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             hir::ImplItemKind::Const(..) | hir::ImplItemKind::TyAlias(_) => return,\n         };\n \n-        let trait_def_id = match cx.tcx.associated_item(impl_item.def_id).container {\n-            TraitContainer(cid) => Some(cid),\n-            ImplContainer(cid) => cx.tcx.impl_trait_ref(cid).map(|t| t.def_id),\n+        let assoc_item = cx.tcx.associated_item(impl_item.def_id);\n+        let container_id = assoc_item.container_id(cx.tcx);\n+        let trait_def_id = match assoc_item.container {\n+            TraitContainer => Some(container_id),\n+            ImplContainer => cx.tcx.impl_trait_ref(container_id).map(|t| t.def_id),\n         };\n \n         if let Some(trait_def_id) = trait_def_id {"}]}