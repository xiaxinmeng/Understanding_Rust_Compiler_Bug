{"sha": "f89d6236aa60ddc955c1f4dd778e9b8abba9ad9a", "node_id": "C_kwDOAAsO6NoAKGY4OWQ2MjM2YWE2MGRkYzk1NWMxZjRkZDc3OGU5YjhhYmJhOWFkOWE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-29T13:35:13Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-06T18:59:46Z"}, "message": "Properly indent messages", "tree": {"sha": "2e659a0de4beb8563333c75651127d00a2cbdead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e659a0de4beb8563333c75651127d00a2cbdead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f89d6236aa60ddc955c1f4dd778e9b8abba9ad9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f89d6236aa60ddc955c1f4dd778e9b8abba9ad9a", "html_url": "https://github.com/rust-lang/rust/commit/f89d6236aa60ddc955c1f4dd778e9b8abba9ad9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f89d6236aa60ddc955c1f4dd778e9b8abba9ad9a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99348a5330cb4d6e3bb2e28badebd76561b8996f", "url": "https://api.github.com/repos/rust-lang/rust/commits/99348a5330cb4d6e3bb2e28badebd76561b8996f", "html_url": "https://github.com/rust-lang/rust/commit/99348a5330cb4d6e3bb2e28badebd76561b8996f"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "4df2198fb0e9bc8eaad61d0babc663efe6e6bd72", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f89d6236aa60ddc955c1f4dd778e9b8abba9ad9a/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f89d6236aa60ddc955c1f4dd778e9b8abba9ad9a/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=f89d6236aa60ddc955c1f4dd778e9b8abba9ad9a", "patch": "@@ -1408,7 +1408,7 @@ impl EmitterWriter {\n             if !sm.ensure_source_file_source_present(annotated_file.file.clone()) {\n                 if !self.short_message {\n                     // We'll just print an unannotated message.\n-                    for line in annotated_file.lines {\n+                    for (annotation_id, line) in annotated_file.lines.into_iter().enumerate() {\n                         let mut annotations = line.annotations.clone();\n                         annotations.sort_by_key(|a| Reverse(a.start_col));\n                         let mut line_idx = buffer.num_lines();\n@@ -1422,12 +1422,12 @@ impl EmitterWriter {\n                             ),\n                             Style::LineAndColumn,\n                         );\n-                        let prefix = if annotations.len() > 1 {\n+                        if annotation_id == 0 {\n                             buffer.prepend(line_idx, \"--> \", Style::LineNumber);\n+                            for _ in 0..max_line_num_len {\n+                                buffer.prepend(line_idx, \" \", Style::NoStyle);\n+                            }\n                             line_idx += 1;\n-                            \"note: \"\n-                        } else {\n-                            \": \"\n                         };\n                         for (i, annotation) in annotations.into_iter().enumerate() {\n                             if let Some(label) = &annotation.label {\n@@ -1436,7 +1436,19 @@ impl EmitterWriter {\n                                 } else {\n                                     Style::LabelSecondary\n                                 };\n-                                buffer.append(line_idx + i, prefix, style);\n+                                if annotation_id == 0 {\n+                                    buffer.prepend(line_idx, \" |\", Style::LineNumber);\n+                                    for _ in 0..max_line_num_len {\n+                                        buffer.prepend(line_idx, \" \", Style::NoStyle);\n+                                    }\n+                                    line_idx += 1;\n+                                    buffer.append(line_idx + i, \" = note: \", style);\n+                                    for _ in 0..max_line_num_len {\n+                                        buffer.prepend(line_idx, \" \", Style::NoStyle);\n+                                    }\n+                                } else {\n+                                    buffer.append(line_idx + i, \": \", style);\n+                                }\n                                 buffer.append(line_idx + i, label, style);\n                             }\n                         }"}, {"sha": "b8c20df8700fa6bc18a4c7d2facfdd09784a72cc", "filename": "src/test/ui/consts/missing_span_in_backtrace.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f89d6236aa60ddc955c1f4dd778e9b8abba9ad9a/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f89d6236aa60ddc955c1f4dd778e9b8abba9ad9a/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.stderr?ref=f89d6236aa60ddc955c1f4dd778e9b8abba9ad9a", "patch": "@@ -1,16 +1,18 @@\n error[E0080]: evaluation of constant value failed\n-/rustc/xyz/library/core/src/ptr/mod.rs:1135:9: unable to copy parts of a pointer from memory at alloc10\n+  --> /rustc/xyz/library/core/src/ptr/mod.rs:1135:9\n+   |\n+   = note: unable to copy parts of a pointer from memory at alloc10\n    |\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n note: inside `std::ptr::read::<MaybeUninit<MaybeUninit<u8>>>`\n-/rustc/xyz/library/core/src/ptr/mod.rs:1135:9\n+  --> /rustc/xyz/library/core/src/ptr/mod.rs:1135:9\n note: inside `mem::swap_simple::<MaybeUninit<MaybeUninit<u8>>>`\n-/rustc/xyz/library/core/src/mem/mod.rs:773:17\n+  --> /rustc/xyz/library/core/src/mem/mod.rs:773:17\n note: inside `ptr::swap_nonoverlapping_simple_untyped::<MaybeUninit<u8>>`\n-/rustc/xyz/library/core/src/ptr/mod.rs:944:9\n+  --> /rustc/xyz/library/core/src/ptr/mod.rs:944:9\n note: inside `swap_nonoverlapping::<MaybeUninit<u8>>`\n-/rustc/xyz/library/core/src/ptr/mod.rs:925:14\n+  --> /rustc/xyz/library/core/src/ptr/mod.rs:925:14\n note: inside `X`\n   --> $DIR/missing_span_in_backtrace.rs:16:9\n    |"}, {"sha": "789a386bf66d1c6abff43351c1b82674308db56a", "filename": "src/test/ui/span/issue-71363.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f89d6236aa60ddc955c1f4dd778e9b8abba9ad9a/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f89d6236aa60ddc955c1f4dd778e9b8abba9ad9a/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr?ref=f89d6236aa60ddc955c1f4dd778e9b8abba9ad9a", "patch": "@@ -7,7 +7,9 @@ error[E0277]: `MyError` doesn't implement `std::fmt::Display`\n   = help: the trait `std::fmt::Display` is not implemented for `MyError`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n note: required by a bound in `std::error::Error`\n-/rustc/xyz/library/core/src/error.rs:31:26: required by this bound in `std::error::Error`\n+ --> /rustc/xyz/library/core/src/error.rs:31:26\n+  |\n+  = note: required by this bound in `std::error::Error`\n \n error[E0277]: `MyError` doesn't implement `Debug`\n  --> $DIR/issue-71363.rs:4:6\n@@ -18,7 +20,9 @@ error[E0277]: `MyError` doesn't implement `Debug`\n   = help: the trait `Debug` is not implemented for `MyError`\n   = note: add `#[derive(Debug)]` to `MyError` or manually `impl Debug for MyError`\n note: required by a bound in `std::error::Error`\n-/rustc/xyz/library/core/src/error.rs:31:18: required by this bound in `std::error::Error`\n+ --> /rustc/xyz/library/core/src/error.rs:31:18\n+  |\n+  = note: required by this bound in `std::error::Error`\n help: consider annotating `MyError` with `#[derive(Debug)]`\n   |\n 3 | #[derive(Debug)]"}]}