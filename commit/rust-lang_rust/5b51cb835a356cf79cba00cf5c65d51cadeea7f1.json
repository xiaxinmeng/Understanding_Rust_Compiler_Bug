{"sha": "5b51cb835a356cf79cba00cf5c65d51cadeea7f1", "node_id": "C_kwDOAAsO6NoAKDViNTFjYjgzNWEzNTZjZjc5Y2JhMDBjZjVjNjVkNTFjYWRlZWE3ZjE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-09T21:45:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-09T21:45:42Z"}, "message": "Merge #11664\n\n11664: fix: Properly handle proc-macro crate types for nameres r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "e1fe0c03e9f1ace2c9da3f87be6cb0b21b0095a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1fe0c03e9f1ace2c9da3f87be6cb0b21b0095a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b51cb835a356cf79cba00cf5c65d51cadeea7f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiKSAGCRBK7hj4Ov3rIwAAb8kIADTftV6kajFLbYQcJcIFRT5O\n2PVxYwhX24qCKib9lDDc1uyZ51pohdr9pbok2EMc8cB9gvuWsocj4bHtDQx0J+o2\nAIXuLmBCXiRmO8895jYSqF9GQFuLLz+CZQxZ/NOmi0BJ3b0Y5/SxtKqzLg/G2A4W\nzM/jQt3MTA1wbHLO4PgcPlY1pxGnPLN89ivRvRofOL5P0dYxq65xLJ0tQrudlG4+\nUDaj/uJyE9rwDxiLpD5L367MB/0t5iu+7U35Khv7ByKNWcr/MsVx8ddNPfQ1IYY4\nO14GdTqDyPS8I+MY2MT5vLGj75P56OE0eOhNDhJWWV6oLxhJqV7b8yMQv7euQu0=\n=Bkmy\n-----END PGP SIGNATURE-----\n", "payload": "tree e1fe0c03e9f1ace2c9da3f87be6cb0b21b0095a1\nparent 4fcaefa62a4afc533dab1380d977d625bd2c70de\nparent fdde10ba6fa51c7fe393e356ba7d5452e372570f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1646862342 +0000\ncommitter GitHub <noreply@github.com> 1646862342 +0000\n\nMerge #11664\n\n11664: fix: Properly handle proc-macro crate types for nameres r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b51cb835a356cf79cba00cf5c65d51cadeea7f1", "html_url": "https://github.com/rust-lang/rust/commit/5b51cb835a356cf79cba00cf5c65d51cadeea7f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fcaefa62a4afc533dab1380d977d625bd2c70de", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fcaefa62a4afc533dab1380d977d625bd2c70de", "html_url": "https://github.com/rust-lang/rust/commit/4fcaefa62a4afc533dab1380d977d625bd2c70de"}, {"sha": "fdde10ba6fa51c7fe393e356ba7d5452e372570f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdde10ba6fa51c7fe393e356ba7d5452e372570f", "html_url": "https://github.com/rust-lang/rust/commit/fdde10ba6fa51c7fe393e356ba7d5452e372570f"}], "stats": {"total": 369, "additions": 219, "deletions": 150}, "files": [{"sha": "ccf2bf76009fcdce3afef73f0f79a77a7665dadc", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=5b51cb835a356cf79cba00cf5c65d51cadeea7f1", "patch": "@@ -160,6 +160,7 @@ impl ChangeFixture {\n                     meta.cfg,\n                     meta.env,\n                     Default::default(),\n+                    false,\n                     origin,\n                 );\n                 let prev = crates.insert(crate_name.clone(), crate_id);\n@@ -194,6 +195,7 @@ impl ChangeFixture {\n                 default_cfg,\n                 Env::default(),\n                 Default::default(),\n+                false,\n                 Default::default(),\n             );\n         } else {\n@@ -230,6 +232,7 @@ impl ChangeFixture {\n                 CfgOptions::default(),\n                 Env::default(),\n                 Vec::new(),\n+                false,\n                 CrateOrigin::Lang,\n             );\n \n@@ -266,6 +269,7 @@ impl ChangeFixture {\n                 CfgOptions::default(),\n                 Env::default(),\n                 proc_macro,\n+                true,\n                 CrateOrigin::Lang,\n             );\n "}, {"sha": "6a7f063586a0f6082b30244d1431c6b17565aa97", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=5b51cb835a356cf79cba00cf5c65d51cadeea7f1", "patch": "@@ -124,7 +124,7 @@ pub enum CrateOrigin {\n     /// Crates that are provided by the language, like std, core, proc-macro, ...\n     Lang,\n     /// Crates that we don't know their origin.\n-    // Idealy this enum should cover all cases, and then we remove this variant.\n+    // Ideally this enum should cover all cases, and then we remove this variant.\n     Unknown,\n }\n \n@@ -228,6 +228,7 @@ pub struct CrateData {\n     pub dependencies: Vec<Dependency>,\n     pub proc_macro: Vec<ProcMacro>,\n     pub origin: CrateOrigin,\n+    pub is_proc_macro: bool,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -279,6 +280,7 @@ impl CrateGraph {\n         potential_cfg_options: CfgOptions,\n         env: Env,\n         proc_macro: Vec<ProcMacro>,\n+        is_proc_macro: bool,\n         origin: CrateOrigin,\n     ) -> CrateId {\n         let data = CrateData {\n@@ -292,6 +294,7 @@ impl CrateGraph {\n             proc_macro,\n             dependencies: Vec::new(),\n             origin,\n+            is_proc_macro,\n         };\n         let crate_id = CrateId(self.arena.len() as u32);\n         let prev = self.arena.insert(crate_id, data);\n@@ -596,6 +599,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            false,\n             Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n@@ -607,6 +611,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            false,\n             Default::default(),\n         );\n         let crate3 = graph.add_crate_root(\n@@ -618,6 +623,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            false,\n             Default::default(),\n         );\n         assert!(graph\n@@ -643,6 +649,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            false,\n             Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n@@ -654,6 +661,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            false,\n             Default::default(),\n         );\n         assert!(graph\n@@ -676,6 +684,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            false,\n             Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n@@ -687,6 +696,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            false,\n             Default::default(),\n         );\n         let crate3 = graph.add_crate_root(\n@@ -698,6 +708,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            false,\n             Default::default(),\n         );\n         assert!(graph\n@@ -720,6 +731,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            false,\n             Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n@@ -731,6 +743,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            false,\n             Default::default(),\n         );\n         assert!(graph"}, {"sha": "d080182554339185898fbce932345f760da8bd16", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 67, "deletions": 63, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=5b51cb835a356cf79cba00cf5c65d51cadeea7f1", "patch": "@@ -154,18 +154,21 @@ impl RawAttrs {\n                     return smallvec![attr.clone()];\n                 }\n \n-                let subtree = match attr.input.as_deref() {\n-                    Some(AttrInput::TokenTree(it, _)) => it,\n+                let subtree = match attr.token_tree_value() {\n+                    Some(it) => it,\n                     _ => return smallvec![attr.clone()],\n                 };\n \n                 // Input subtree is: `(cfg, $(attr),+)`\n                 // Split it up into a `cfg` subtree and the `attr` subtrees.\n                 // FIXME: There should be a common API for this.\n-                let mut parts = subtree.token_trees.split(\n-                    |tt| matches!(tt, tt::TokenTree::Leaf(tt::Leaf::Punct(p)) if p.char == ','),\n-                );\n-                let cfg = parts.next().unwrap();\n+                let mut parts = subtree.token_trees.split(|tt| {\n+                    matches!(tt, tt::TokenTree::Leaf(tt::Leaf::Punct(Punct { char: ',', .. })))\n+                });\n+                let cfg = match parts.next() {\n+                    Some(it) => it,\n+                    None => return smallvec![],\n+                };\n                 let cfg = Subtree { delimiter: subtree.delimiter, token_trees: cfg.to_vec() };\n                 let cfg = CfgExpr::parse(&cfg);\n                 let index = attr.id;\n@@ -259,17 +262,8 @@ impl Attrs {\n     }\n \n     pub fn docs(&self) -> Option<Documentation> {\n-        let docs = self.by_key(\"doc\").attrs().flat_map(|attr| match attr.input.as_deref()? {\n-            AttrInput::Literal(s) => Some(s),\n-            AttrInput::TokenTree(..) => None,\n-        });\n-        let indent = docs\n-            .clone()\n-            .flat_map(|s| s.lines())\n-            .filter(|line| !line.chars().all(|c| c.is_whitespace()))\n-            .map(|line| line.chars().take_while(|c| c.is_whitespace()).count())\n-            .min()\n-            .unwrap_or(0);\n+        let docs = self.by_key(\"doc\").attrs().filter_map(|attr| attr.string_value());\n+        let indent = doc_indent(self);\n         let mut buf = String::new();\n         for doc in docs {\n             // str::lines doesn't yield anything for the empty string\n@@ -507,18 +501,9 @@ impl AttrsWithOwner {\n         &self,\n         db: &dyn DefDatabase,\n     ) -> Option<(Documentation, DocsRangeMap)> {\n-        // FIXME: code duplication in `docs` above\n-        let docs = self.by_key(\"doc\").attrs().flat_map(|attr| match attr.input.as_deref()? {\n-            AttrInput::Literal(s) => Some((s, attr.id)),\n-            AttrInput::TokenTree(..) => None,\n-        });\n-        let indent = docs\n-            .clone()\n-            .flat_map(|(s, _)| s.lines())\n-            .filter(|line| !line.chars().all(|c| c.is_whitespace()))\n-            .map(|line| line.chars().take_while(|c| c.is_whitespace()).count())\n-            .min()\n-            .unwrap_or(0);\n+        let docs =\n+            self.by_key(\"doc\").attrs().filter_map(|attr| attr.string_value().map(|s| (s, attr.id)));\n+        let indent = doc_indent(self);\n         let mut buf = String::new();\n         let mut mapping = Vec::new();\n         for (doc, idx) in docs {\n@@ -557,6 +542,18 @@ impl AttrsWithOwner {\n     }\n }\n \n+fn doc_indent(attrs: &Attrs) -> usize {\n+    attrs\n+        .by_key(\"doc\")\n+        .attrs()\n+        .filter_map(|attr| attr.string_value())\n+        .flat_map(|s| s.lines())\n+        .filter(|line| !line.chars().all(|c| c.is_whitespace()))\n+        .map(|line| line.chars().take_while(|c| c.is_whitespace()).count())\n+        .min()\n+        .unwrap_or(0)\n+}\n+\n fn inner_attributes(\n     syntax: &SyntaxNode,\n ) -> Option<impl Iterator<Item = Either<ast::Attr, ast::Comment>>> {\n@@ -773,45 +770,58 @@ impl Attr {\n         Self::from_src(db, ast, hygiene, id)\n     }\n \n+    pub fn path(&self) -> &ModPath {\n+        &self.path\n+    }\n+}\n+\n+impl Attr {\n+    /// #[path = \"string\"]\n+    pub fn string_value(&self) -> Option<&SmolStr> {\n+        match self.input.as_deref()? {\n+            AttrInput::Literal(it) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n+    /// #[path(ident)]\n+    pub fn single_ident_value(&self) -> Option<&tt::Ident> {\n+        match self.input.as_deref()? {\n+            AttrInput::TokenTree(subtree, _) => match &*subtree.token_trees {\n+                [tt::TokenTree::Leaf(tt::Leaf::Ident(ident))] => Some(ident),\n+                _ => None,\n+            },\n+            _ => None,\n+        }\n+    }\n+\n+    /// #[path TokenTree]\n+    pub fn token_tree_value(&self) -> Option<&Subtree> {\n+        match self.input.as_deref()? {\n+            AttrInput::TokenTree(subtree, _) => Some(subtree),\n+            _ => None,\n+        }\n+    }\n+\n     /// Parses this attribute as a token tree consisting of comma separated paths.\n     pub fn parse_path_comma_token_tree(&self) -> Option<impl Iterator<Item = ModPath> + '_> {\n-        let args = match self.input.as_deref() {\n-            Some(AttrInput::TokenTree(args, _)) => args,\n-            _ => return None,\n-        };\n+        let args = self.token_tree_value()?;\n \n         if args.delimiter_kind() != Some(DelimiterKind::Parenthesis) {\n             return None;\n         }\n         let paths = args\n             .token_trees\n-            .iter()\n-            .group_by(|tt| {\n-                matches!(tt, tt::TokenTree::Leaf(tt::Leaf::Punct(Punct { char: ',', .. })))\n-            })\n-            .into_iter()\n-            .filter(|(comma, _)| !*comma)\n-            .map(|(_, tts)| {\n-                let segments = tts.filter_map(|tt| match tt {\n+            .split(|tt| matches!(tt, tt::TokenTree::Leaf(tt::Leaf::Punct(Punct { char: ',', .. }))))\n+            .map(|tts| {\n+                let segments = tts.iter().filter_map(|tt| match tt {\n                     tt::TokenTree::Leaf(tt::Leaf::Ident(id)) => Some(id.as_name()),\n                     _ => None,\n                 });\n                 ModPath::from_segments(PathKind::Plain, segments)\n-            })\n-            .collect::<Vec<_>>();\n-\n-        Some(paths.into_iter())\n-    }\n-\n-    pub fn path(&self) -> &ModPath {\n-        &self.path\n-    }\n+            });\n \n-    pub fn string_value(&self) -> Option<&SmolStr> {\n-        match self.input.as_deref()? {\n-            AttrInput::Literal(it) => Some(it),\n-            _ => None,\n-        }\n+        Some(paths)\n     }\n }\n \n@@ -823,17 +833,11 @@ pub struct AttrQuery<'attr> {\n \n impl<'attr> AttrQuery<'attr> {\n     pub fn tt_values(self) -> impl Iterator<Item = &'attr Subtree> {\n-        self.attrs().filter_map(|attr| match attr.input.as_deref()? {\n-            AttrInput::TokenTree(it, _) => Some(it),\n-            _ => None,\n-        })\n+        self.attrs().filter_map(|attr| attr.token_tree_value())\n     }\n \n     pub fn string_value(self) -> Option<&'attr SmolStr> {\n-        self.attrs().find_map(|attr| match attr.input.as_deref()? {\n-            AttrInput::Literal(it) => Some(it),\n-            _ => None,\n-        })\n+        self.attrs().find_map(|attr| attr.string_value())\n     }\n \n     pub fn exists(self) -> bool {"}, {"sha": "985789b70e0e809d97611c4c28e5288672da7897", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=5b51cb835a356cf79cba00cf5c65d51cadeea7f1", "patch": "@@ -22,10 +22,10 @@ use itertools::Itertools;\n use la_arena::Idx;\n use limit::Limit;\n use rustc_hash::{FxHashMap, FxHashSet};\n-use syntax::ast;\n+use syntax::{ast, SmolStr};\n \n use crate::{\n-    attr::{Attr, AttrId, AttrInput, Attrs},\n+    attr::{Attr, AttrId, Attrs},\n     attr_macro_as_call_id,\n     db::DefDatabase,\n     derive_macro_as_call_id,\n@@ -61,7 +61,8 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n \n     let mut deps = FxHashMap::default();\n     // populate external prelude and dependency list\n-    for dep in &crate_graph[def_map.krate].dependencies {\n+    let krate = &crate_graph[def_map.krate];\n+    for dep in &krate.dependencies {\n         tracing::debug!(\"crate dep {:?} -> {:?}\", dep.name, dep.crate_id);\n         let dep_def_map = db.crate_def_map(dep.crate_id);\n         let dep_root = dep_def_map.module_id(dep_def_map.root);\n@@ -73,9 +74,9 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n         }\n     }\n \n-    let cfg_options = &crate_graph[def_map.krate].cfg_options;\n-    let proc_macros = &crate_graph[def_map.krate].proc_macro;\n-    let proc_macros = proc_macros\n+    let cfg_options = &krate.cfg_options;\n+    let proc_macros = krate\n+        .proc_macro\n         .iter()\n         .enumerate()\n         .map(|(idx, it)| {\n@@ -87,6 +88,7 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n             )\n         })\n         .collect();\n+    let is_proc_macro = krate.is_proc_macro;\n \n     let mut collector = DefCollector {\n         db,\n@@ -103,6 +105,7 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n         from_glob_import: Default::default(),\n         skip_attrs: Default::default(),\n         derive_helpers_in_scope: Default::default(),\n+        is_proc_macro,\n     };\n     if tree_id.is_block() {\n         collector.seed_with_inner(tree_id);\n@@ -243,6 +246,7 @@ struct DefCollector<'a> {\n     /// empty when proc. macro support is disabled (in which case we still do name resolution for\n     /// them).\n     proc_macros: Vec<(Name, ProcMacroExpander)>,\n+    is_proc_macro: bool,\n     exports_proc_macros: bool,\n     from_glob_import: PerNsGlobImports,\n     /// If we fail to resolve an attribute on a `ModItem`, we fall back to ignoring the attribute.\n@@ -277,27 +281,29 @@ impl DefCollector<'_> {\n                 };\n \n                 if *attr_name == hir_expand::name![recursion_limit] {\n-                    if let Some(input) = &attr.input {\n-                        if let AttrInput::Literal(limit) = &**input {\n-                            if let Ok(limit) = limit.parse() {\n-                                self.def_map.recursion_limit = Some(limit);\n-                            }\n+                    if let Some(limit) = attr.string_value() {\n+                        if let Ok(limit) = limit.parse() {\n+                            self.def_map.recursion_limit = Some(limit);\n                         }\n                     }\n                     continue;\n                 }\n \n+                if *attr_name == hir_expand::name![crate_type] {\n+                    if let Some(\"proc-macro\") = attr.string_value().map(SmolStr::as_str) {\n+                        self.is_proc_macro = true;\n+                    }\n+                    continue;\n+                }\n+\n                 let attr_is_register_like = *attr_name == hir_expand::name![register_attr]\n                     || *attr_name == hir_expand::name![register_tool];\n                 if !attr_is_register_like {\n                     continue;\n                 }\n \n-                let registered_name = match attr.input.as_deref() {\n-                    Some(AttrInput::TokenTree(subtree, _)) => match &*subtree.token_trees {\n-                        [tt::TokenTree::Leaf(tt::Leaf::Ident(name))] => name.as_name(),\n-                        _ => continue,\n-                    },\n+                let registered_name = match attr.single_ident_value() {\n+                    Some(ident) => ident.as_name(),\n                     _ => continue,\n                 };\n \n@@ -404,8 +410,7 @@ impl DefCollector<'_> {\n         }\n         self.unresolved_imports = unresolved_imports;\n \n-        // FIXME: This condition should instead check if this is a `proc-macro` type crate.\n-        if self.exports_proc_macros {\n+        if self.is_proc_macro {\n             // A crate exporting procedural macros is not allowed to export anything else.\n             //\n             // Additionally, while the proc macro entry points must be `pub`, they are not publicly\n@@ -1555,22 +1560,21 @@ impl ModCollector<'_, '_> {\n                     let fn_id =\n                         FunctionLoc { container, id: ItemTreeId::new(self.tree_id, id) }.intern(db);\n \n-                    let is_proc_macro = attrs.parse_proc_macro_decl(&it.name);\n-                    let vis = match is_proc_macro {\n-                        Some(proc_macro) => {\n-                            // FIXME: this should only be done in the root module of `proc-macro` crates, not everywhere\n-                            let module_id = def_map.module_id(def_map.root());\n-\n-                            self.def_collector.export_proc_macro(\n-                                proc_macro,\n-                                ItemTreeId::new(self.tree_id, id),\n-                                fn_id,\n-                                module_id,\n-                            );\n-                            Visibility::Module(module_id)\n+                    let vis = resolve_vis(def_map, &self.item_tree[it.visibility]);\n+                    if self.def_collector.is_proc_macro {\n+                        if self.module_id == def_map.root {\n+                            if let Some(proc_macro) = attrs.parse_proc_macro_decl(&it.name) {\n+                                let crate_root = def_map.module_id(def_map.root);\n+                                self.def_collector.export_proc_macro(\n+                                    proc_macro,\n+                                    ItemTreeId::new(self.tree_id, id),\n+                                    fn_id,\n+                                    crate_root,\n+                                );\n+                            }\n                         }\n-                        None => resolve_vis(def_map, &self.item_tree[it.visibility]),\n-                    };\n+                    }\n+\n                     update_def(self.def_collector, fn_id.into(), &it.name, vis, false);\n                 }\n                 ModItem::Struct(id) => {\n@@ -2099,6 +2103,7 @@ mod tests {\n             from_glob_import: Default::default(),\n             skip_attrs: Default::default(),\n             derive_helpers_in_scope: Default::default(),\n+            is_proc_macro: false,\n         };\n         collector.seed_with_top_level();\n         collector.collect();"}, {"sha": "222e524d6c027290636e7733babc4ea082cd1ecd", "filename": "crates/hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 52, "deletions": 48, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=5b51cb835a356cf79cba00cf5c65d51cadeea7f1", "patch": "@@ -809,6 +809,7 @@ pub macro derive($item:item) {}\n struct S;\n \n //- /proc.rs crate:proc\n+#![crate_type=\"proc-macro\"]\n #[proc_macro_derive(Derive, attributes(helper))]\n fn derive() {}\n         \"#,\n@@ -886,29 +887,30 @@ indirect_macro!();\n #[test]\n fn resolves_proc_macros() {\n     check(\n-        r\"\n-        struct TokenStream;\n+        r#\"\n+#![crate_type=\"proc-macro\"]\n+struct TokenStream;\n \n-        #[proc_macro]\n-        pub fn function_like_macro(args: TokenStream) -> TokenStream {\n-            args\n-        }\n+#[proc_macro]\n+pub fn function_like_macro(args: TokenStream) -> TokenStream {\n+    args\n+}\n \n-        #[proc_macro_attribute]\n-        pub fn attribute_macro(_args: TokenStream, item: TokenStream) -> TokenStream {\n-            item\n-        }\n+#[proc_macro_attribute]\n+pub fn attribute_macro(_args: TokenStream, item: TokenStream) -> TokenStream {\n+    item\n+}\n \n-        #[proc_macro_derive(DummyTrait)]\n-        pub fn derive_macro(_item: TokenStream) -> TokenStream {\n-            TokenStream\n-        }\n+#[proc_macro_derive(DummyTrait)]\n+pub fn derive_macro(_item: TokenStream) -> TokenStream {\n+    TokenStream\n+}\n \n-        #[proc_macro_derive(AnotherTrait, attributes(helper_attr))]\n-        pub fn derive_macro_2(_item: TokenStream) -> TokenStream {\n-            TokenStream\n-        }\n-        \",\n+#[proc_macro_derive(AnotherTrait, attributes(helper_attr))]\n+pub fn derive_macro_2(_item: TokenStream) -> TokenStream {\n+    TokenStream\n+}\n+\"#,\n         expect![[r#\"\n             crate\n             AnotherTrait: m\n@@ -927,33 +929,34 @@ fn proc_macro_censoring() {\n     // Make sure that only proc macros are publicly exported from proc-macro crates.\n \n     check(\n-        r\"\n-        //- /main.rs crate:main deps:macros\n-        pub use macros::*;\n+        r#\"\n+//- /main.rs crate:main deps:macros\n+pub use macros::*;\n \n-        //- /macros.rs crate:macros\n-        pub struct TokenStream;\n+//- /macros.rs crate:macros\n+#![crate_type=\"proc-macro\"]\n+pub struct TokenStream;\n \n-        #[proc_macro]\n-        pub fn function_like_macro(args: TokenStream) -> TokenStream {\n-            args\n-        }\n+#[proc_macro]\n+pub fn function_like_macro(args: TokenStream) -> TokenStream {\n+    args\n+}\n \n-        #[proc_macro_attribute]\n-        pub fn attribute_macro(_args: TokenStream, item: TokenStream) -> TokenStream {\n-            item\n-        }\n+#[proc_macro_attribute]\n+pub fn attribute_macro(_args: TokenStream, item: TokenStream) -> TokenStream {\n+    item\n+}\n \n-        #[proc_macro_derive(DummyTrait)]\n-        pub fn derive_macro(_item: TokenStream) -> TokenStream {\n-            TokenStream\n-        }\n+#[proc_macro_derive(DummyTrait)]\n+pub fn derive_macro(_item: TokenStream) -> TokenStream {\n+    TokenStream\n+}\n \n-        #[macro_export]\n-        macro_rules! mbe {\n-            () => {};\n-        }\n-        \",\n+#[macro_export]\n+macro_rules! mbe {\n+    () => {};\n+}\n+\"#,\n         expect![[r#\"\n             crate\n             DummyTrait: m\n@@ -966,14 +969,15 @@ fn proc_macro_censoring() {\n #[test]\n fn collects_derive_helpers() {\n     let def_map = compute_crate_def_map(\n-        r\"\n-        struct TokenStream;\n+        r#\"\n+#![crate_type=\"proc-macro\"]\n+struct TokenStream;\n \n-        #[proc_macro_derive(AnotherTrait, attributes(helper_attr))]\n-        pub fn derive_macro_2(_item: TokenStream) -> TokenStream {\n-            TokenStream\n-        }\n-        \",\n+#[proc_macro_derive(AnotherTrait, attributes(helper_attr))]\n+pub fn derive_macro_2(_item: TokenStream) -> TokenStream {\n+    TokenStream\n+}\n+\"#,\n     );\n \n     assert_eq!(def_map.exported_derives.len(), 1);"}, {"sha": "f1bf665707977478909f2cd14e12ff467f418383", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=5b51cb835a356cf79cba00cf5c65d51cadeea7f1", "patch": "@@ -268,6 +268,7 @@ pub mod known {\n         bench,\n         cfg_accessible,\n         cfg_eval,\n+        crate_type,\n         derive,\n         global_allocator,\n         test,"}, {"sha": "3d22ed9c167f4dba59d010d677e8220f8046483d", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=5b51cb835a356cf79cba00cf5c65d51cadeea7f1", "patch": "@@ -1244,6 +1244,7 @@ use mac::fn_macro;\n fn_macro$0!();\n \n //- /mac.rs crate:mac\n+#![crate_type=\"proc-macro\"]\n #[proc_macro]\n fn fn_macro() {}\n  //^^^^^^^^"}, {"sha": "20a5886c892c5304182586c364da46166aa333f6", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=5b51cb835a356cf79cba00cf5c65d51cadeea7f1", "patch": "@@ -231,6 +231,7 @@ impl Analysis {\n             cfg_options,\n             Env::default(),\n             Default::default(),\n+            false,\n             Default::default(),\n         );\n         change.change_file(file_id, Some(Arc::new(text)));"}, {"sha": "73f736dffe4b8abfe7b37f195fa831d55acd1eae", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=5b51cb835a356cf79cba00cf5c65d51cadeea7f1", "patch": "@@ -1501,16 +1501,15 @@ fn f() {\n         check(\n             r#\"\n //- proc_macros: identity\n-\n #[proc_macros::identity]\n fn func$0() {\n     func();\n }\n \"#,\n             expect![[r#\"\n-                func Function FileId(0) 26..51 29..33\n+                func Function FileId(0) 25..50 28..32\n \n-                FileId(0) 42..46\n+                FileId(0) 41..45\n             \"#]],\n         )\n     }\n@@ -1555,11 +1554,12 @@ fn func() {}\n         );\n         check(\n             r#\"\n+#![crate_type=\"proc-macro\"]\n #[proc_macro_attribute]\n fn func$0() {}\n \"#,\n             expect![[r#\"\n-                func Attribute FileId(0) 0..36 27..31\n+                func Attribute FileId(0) 28..64 55..59\n \n                 (no references)\n             \"#]],\n@@ -1604,11 +1604,12 @@ struct Foo;\n         );\n         check(\n             r#\"\n+#![crate_type=\"proc-macro\"]\n #[proc_macro_derive(Derive, attributes(x))]\n pub fn deri$0ve(_stream: TokenStream) -> TokenStream {}\n \"#,\n             expect![[r#\"\n-                derive Derive FileId(0) 0..97 51..57\n+                derive Derive FileId(0) 28..125 79..85\n \n                 (no references)\n             \"#]],"}, {"sha": "a7720d81560c42573a043dbc356c85e7174fea02", "filename": "crates/ide/src/shuffle_crate_graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs?ref=5b51cb835a356cf79cba00cf5c65d51cadeea7f1", "patch": "@@ -34,6 +34,7 @@ pub(crate) fn shuffle_crate_graph(db: &mut RootDatabase) {\n             data.potential_cfg_options.clone(),\n             data.env.clone(),\n             data.proc_macro.clone(),\n+            data.is_proc_macro,\n             data.origin.clone(),\n         );\n         map.insert(old_id, new_id);"}, {"sha": "ca347d71a22f989a16a628a0c6faec12cc7d15a0", "filename": "crates/project_model/src/tests.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fproject_model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fproject_model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Ftests.rs?ref=5b51cb835a356cf79cba00cf5c65d51cadeea7f1", "patch": "@@ -176,6 +176,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                         origin: CratesIo {\n                             repo: None,\n                         },\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         2,\n@@ -248,6 +249,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                         origin: CratesIo {\n                             repo: None,\n                         },\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         4,\n@@ -312,6 +314,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"https://github.com/rust-lang/libc\",\n                             ),\n                         },\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         1,\n@@ -384,6 +387,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                         origin: CratesIo {\n                             repo: None,\n                         },\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         3,\n@@ -456,6 +460,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                         origin: CratesIo {\n                             repo: None,\n                         },\n+                        is_proc_macro: false,\n                     },\n                 },\n             }\"#]],\n@@ -543,6 +548,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                         origin: CratesIo {\n                             repo: None,\n                         },\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         2,\n@@ -617,6 +623,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                         origin: CratesIo {\n                             repo: None,\n                         },\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         4,\n@@ -681,6 +688,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"https://github.com/rust-lang/libc\",\n                             ),\n                         },\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         1,\n@@ -755,6 +763,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                         origin: CratesIo {\n                             repo: None,\n                         },\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         3,\n@@ -829,6 +838,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                         origin: CratesIo {\n                             repo: None,\n                         },\n+                        is_proc_macro: false,\n                     },\n                 },\n             }\"#]],\n@@ -907,6 +917,7 @@ fn cargo_hello_world_project_model() {\n                         origin: CratesIo {\n                             repo: None,\n                         },\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         2,\n@@ -981,6 +992,7 @@ fn cargo_hello_world_project_model() {\n                         origin: CratesIo {\n                             repo: None,\n                         },\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         4,\n@@ -1047,6 +1059,7 @@ fn cargo_hello_world_project_model() {\n                                 \"https://github.com/rust-lang/libc\",\n                             ),\n                         },\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         1,\n@@ -1121,6 +1134,7 @@ fn cargo_hello_world_project_model() {\n                         origin: CratesIo {\n                             repo: None,\n                         },\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         3,\n@@ -1195,6 +1209,7 @@ fn cargo_hello_world_project_model() {\n                         origin: CratesIo {\n                             repo: None,\n                         },\n+                        is_proc_macro: false,\n                     },\n                 },\n             }\"#]],\n@@ -1247,6 +1262,7 @@ fn rust_project_hello_world_project_model() {\n                         ],\n                         proc_macro: [],\n                         origin: Lang,\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         10,\n@@ -1276,6 +1292,7 @@ fn rust_project_hello_world_project_model() {\n                         dependencies: [],\n                         proc_macro: [],\n                         origin: Lang,\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         7,\n@@ -1305,6 +1322,7 @@ fn rust_project_hello_world_project_model() {\n                         dependencies: [],\n                         proc_macro: [],\n                         origin: Lang,\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         4,\n@@ -1344,6 +1362,7 @@ fn rust_project_hello_world_project_model() {\n                         ],\n                         proc_macro: [],\n                         origin: Lang,\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         1,\n@@ -1373,6 +1392,7 @@ fn rust_project_hello_world_project_model() {\n                         dependencies: [],\n                         proc_macro: [],\n                         origin: Lang,\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         11,\n@@ -1441,6 +1461,7 @@ fn rust_project_hello_world_project_model() {\n                         origin: CratesIo {\n                             repo: None,\n                         },\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         8,\n@@ -1470,6 +1491,7 @@ fn rust_project_hello_world_project_model() {\n                         dependencies: [],\n                         proc_macro: [],\n                         origin: Lang,\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         5,\n@@ -1499,6 +1521,7 @@ fn rust_project_hello_world_project_model() {\n                         dependencies: [],\n                         proc_macro: [],\n                         origin: Lang,\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         2,\n@@ -1528,6 +1551,7 @@ fn rust_project_hello_world_project_model() {\n                         dependencies: [],\n                         proc_macro: [],\n                         origin: Lang,\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         9,\n@@ -1557,6 +1581,7 @@ fn rust_project_hello_world_project_model() {\n                         dependencies: [],\n                         proc_macro: [],\n                         origin: Lang,\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         6,\n@@ -1668,6 +1693,7 @@ fn rust_project_hello_world_project_model() {\n                         ],\n                         proc_macro: [],\n                         origin: Lang,\n+                        is_proc_macro: false,\n                     },\n                     CrateId(\n                         3,\n@@ -1697,6 +1723,7 @@ fn rust_project_hello_world_project_model() {\n                         dependencies: [],\n                         proc_macro: [],\n                         origin: Lang,\n+                        is_proc_macro: false,\n                     },\n                 },\n             }\"#]],"}, {"sha": "1a86d232eba48083d663f1cb15a36412ff1fcd5e", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b51cb835a356cf79cba00cf5c65d51cadeea7f1/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=5b51cb835a356cf79cba00cf5c65d51cadeea7f1", "patch": "@@ -483,6 +483,7 @@ fn project_json_to_crate_graph(\n                     cfg_options,\n                     env,\n                     proc_macro.unwrap_or_default(),\n+                    krate.is_proc_macro,\n                     if krate.display_name.is_some() {\n                         CrateOrigin::CratesIo { repo: krate.repository.clone() }\n                     } else {\n@@ -592,6 +593,7 @@ fn cargo_to_crate_graph(\n                     &mut |path| load_proc_macro(&cargo[tgt].name, path),\n                     file_id,\n                     &cargo[tgt].name,\n+                    cargo[tgt].is_proc_macro,\n                 );\n                 if cargo[tgt].kind == TargetKind::Lib {\n                     lib_tgt = Some((crate_id, cargo[tgt].name.clone()));\n@@ -707,6 +709,7 @@ fn detached_files_to_crate_graph(\n             cfg_options.clone(),\n             Env::default(),\n             Vec::new(),\n+            false,\n             CrateOrigin::Unknown,\n         );\n \n@@ -759,6 +762,7 @@ fn handle_rustc_crates(\n                         &mut |path| load_proc_macro(&rustc_workspace[tgt].name, path),\n                         file_id,\n                         &rustc_workspace[tgt].name,\n+                        rustc_workspace[tgt].is_proc_macro,\n                     );\n                     pkg_to_lib_crate.insert(pkg, crate_id);\n                     // Add dependencies on core / std / alloc for this crate\n@@ -813,6 +817,7 @@ fn add_target_crate_root(\n     load_proc_macro: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n     file_id: FileId,\n     cargo_name: &str,\n+    is_proc_macro: bool,\n ) -> CrateId {\n     let edition = pkg.edition;\n     let cfg_options = {\n@@ -857,6 +862,7 @@ fn add_target_crate_root(\n         potential_cfg_options,\n         env,\n         proc_macro,\n+        is_proc_macro,\n         CrateOrigin::CratesIo { repo: pkg.repository.clone() },\n     )\n }\n@@ -901,6 +907,7 @@ fn sysroot_to_crate_graph(\n                 cfg_options.clone(),\n                 env,\n                 proc_macro,\n+                false,\n                 CrateOrigin::Lang,\n             );\n             Some((krate, crate_id))"}]}