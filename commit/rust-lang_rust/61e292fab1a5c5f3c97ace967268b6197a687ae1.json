{"sha": "61e292fab1a5c5f3c97ace967268b6197a687ae1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZTI5MmZhYjFhNWM1ZjNjOTdhY2U5NjcyNjhiNjE5N2E2ODdhZTE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-06T23:24:24Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-07T14:38:04Z"}, "message": "Complete braces more aggressively", "tree": {"sha": "54c3405350471aafb8a9faf0c4d3ae0cef2a4d1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54c3405350471aafb8a9faf0c4d3ae0cef2a4d1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61e292fab1a5c5f3c97ace967268b6197a687ae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61e292fab1a5c5f3c97ace967268b6197a687ae1", "html_url": "https://github.com/rust-lang/rust/commit/61e292fab1a5c5f3c97ace967268b6197a687ae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61e292fab1a5c5f3c97ace967268b6197a687ae1/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36cd724b7b146c33804db4b110111ad71be9cb72", "url": "https://api.github.com/repos/rust-lang/rust/commits/36cd724b7b146c33804db4b110111ad71be9cb72", "html_url": "https://github.com/rust-lang/rust/commit/36cd724b7b146c33804db4b110111ad71be9cb72"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "b0234d7fdd071b929dbac78254a55ee63de743fe", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/61e292fab1a5c5f3c97ace967268b6197a687ae1/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e292fab1a5c5f3c97ace967268b6197a687ae1/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=61e292fab1a5c5f3c97ace967268b6197a687ae1", "patch": "@@ -86,26 +86,13 @@ fn on_opening_brace_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdi\n     // We expect a block expression enclosing exactly 1 preexisting expression. It can be parsed as\n     // either the trailing expr or an ExprStmt.\n     let offset = {\n-        match block.tail_expr() {\n-            Some(expr) => {\n-                if block.statements().next().is_some() {\n-                    return None;\n-                }\n-                expr.syntax().text_range().end()\n-            }\n-            None => {\n-                if block.statements().count() != 1 {\n-                    return None;\n-                }\n-\n-                match block.statements().next()? {\n-                    ast::Stmt::ExprStmt(it) => {\n-                        // Use the expression span to place `}` before the `;`\n-                        it.expr()?.syntax().text_range().end()\n-                    }\n-                    _ => return None,\n-                }\n-            }\n+        match block.statements().next() {\n+            Some(ast::Stmt::ExprStmt(it)) => {\n+                // Use the expression span to place `}` before the `;`\n+                it.expr()?.syntax().text_range().end()\n+            },\n+            None => block.tail_expr()?.syntax().text_range().end(),\n+            _ => return None,\n         }\n     };\n \n@@ -417,5 +404,33 @@ fn main() {\n         type_char('{', r\"fn f() { match () { _ => $0() } }\", r\"fn f() { match () { _ => {()} } }\");\n         type_char('{', r\"fn f() { $0(); }\", r\"fn f() { {()}; }\");\n         type_char('{', r\"fn f() { let x = $0(); }\", r\"fn f() { let x = {()}; }\");\n+        type_char(\n+            '{',\n+            r\"\n+            const S: () = $0();\n+            fn f() {}\n+            \",\n+            r\"\n+            const S: () = {()};\n+            fn f() {}\n+            \",\n+        );\n+        type_char(\n+            '{',\n+            r\"\n+            fn f() {\n+                match x {\n+                    0 => $0(),\n+                    1 => (),\n+                }\n+            }\",\n+            r\"\n+            fn f() {\n+                match x {\n+                    0 => {()},\n+                    1 => (),\n+                }\n+            }\",\n+        );\n     }\n }"}]}