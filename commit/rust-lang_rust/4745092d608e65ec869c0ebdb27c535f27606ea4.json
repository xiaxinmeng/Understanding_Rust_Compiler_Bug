{"sha": "4745092d608e65ec869c0ebdb27c535f27606ea4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NDUwOTJkNjA4ZTY1ZWM4NjljMGViZGIyN2M1MzVmMjc2MDZlYTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-30T15:17:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-30T15:17:01Z"}, "message": "Auto merge of #50163 - kornelski:error, r=Kimundi\n\nBury Error::description()\n\nSecond attempt of #49536 https://github.com/rust-lang/rfcs/pull/2230\n\nThe exact wording of the default implementation is still up in the air, but I think it's a detail that can be amended later.", "tree": {"sha": "f70872df75d83916e68a108a336bf44a90286aa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f70872df75d83916e68a108a336bf44a90286aa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4745092d608e65ec869c0ebdb27c535f27606ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4745092d608e65ec869c0ebdb27c535f27606ea4", "html_url": "https://github.com/rust-lang/rust/commit/4745092d608e65ec869c0ebdb27c535f27606ea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4745092d608e65ec869c0ebdb27c535f27606ea4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64e6dda0bce96da47e52f7f3e278d05f7a09473c", "url": "https://api.github.com/repos/rust-lang/rust/commits/64e6dda0bce96da47e52f7f3e278d05f7a09473c", "html_url": "https://github.com/rust-lang/rust/commit/64e6dda0bce96da47e52f7f3e278d05f7a09473c"}, {"sha": "1912f39e7c024f2ee5c5ea618efdcbe92590b863", "url": "https://api.github.com/repos/rust-lang/rust/commits/1912f39e7c024f2ee5c5ea618efdcbe92590b863", "html_url": "https://github.com/rust-lang/rust/commit/1912f39e7c024f2ee5c5ea618efdcbe92590b863"}], "stats": {"total": 67, "additions": 27, "deletions": 40}, "files": [{"sha": "6237a75790cd2e0ca22961b55f64a83319e73464", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=4745092d608e65ec869c0ebdb27c535f27606ea4", "patch": "@@ -1 +1 @@\n-Subproject commit b889e1e30c5e9953834aa9fa6c982bb28df46ac9\n+Subproject commit 6237a75790cd2e0ca22961b55f64a83319e73464"}, {"sha": "817eea5eaf142306bcb6856907f3f72adb158853", "filename": "src/libstd/error.rs", "status": "modified", "additions": 26, "deletions": 39, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4745092d608e65ec869c0ebdb27c535f27606ea4/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4745092d608e65ec869c0ebdb27c535f27606ea4/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=4745092d608e65ec869c0ebdb27c535f27606ea4", "patch": "@@ -9,34 +9,6 @@\n // except according to those terms.\n \n //! Traits for working with Errors.\n-//!\n-//! # The `Error` trait\n-//!\n-//! `Error` is a trait representing the basic expectations for error values,\n-//! i.e. values of type `E` in [`Result<T, E>`]. At a minimum, errors must provide\n-//! a description, but they may optionally provide additional detail (via\n-//! [`Display`]) and cause chain information:\n-//!\n-//! ```\n-//! use std::fmt::Display;\n-//!\n-//! trait Error: Display {\n-//!     fn description(&self) -> &str;\n-//!\n-//!     fn cause(&self) -> Option<&Error> { None }\n-//! }\n-//! ```\n-//!\n-//! The [`cause`] method is generally used when errors cross \"abstraction\n-//! boundaries\", i.e.  when a one module must report an error that is \"caused\"\n-//! by an error from a lower-level module. This setup makes it possible for the\n-//! high-level module to provide its own errors that do not commit to any\n-//! particular implementation, but also reveal some of its implementation for\n-//! debugging via [`cause`] chains.\n-//!\n-//! [`Result<T, E>`]: ../result/enum.Result.html\n-//! [`Display`]: ../fmt/trait.Display.html\n-//! [`cause`]: trait.Error.html#method.cause\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -63,33 +35,48 @@ use num;\n use str;\n use string;\n \n-/// Base functionality for all errors in Rust.\n+/// `Error` is a trait representing the basic expectations for error values,\n+/// i.e. values of type `E` in [`Result<T, E>`]. Errors must describe\n+/// themselves through the [`Display`] and [`Debug`] traits, and may provide\n+/// cause chain information:\n+///\n+/// The [`cause`] method is generally used when errors cross \"abstraction\n+/// boundaries\", i.e.  when a one module must report an error that is \"caused\"\n+/// by an error from a lower-level module. This setup makes it possible for the\n+/// high-level module to provide its own errors that do not commit to any\n+/// particular implementation, but also reveal some of its implementation for\n+/// debugging via [`cause`] chains.\n+///\n+/// [`Result<T, E>`]: ../result/enum.Result.html\n+/// [`Display`]: ../fmt/trait.Display.html\n+/// [`cause`]: trait.Error.html#method.cause\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Error: Debug + Display {\n-    /// A short description of the error.\n+    /// **This method is soft-deprecated.**\n     ///\n-    /// The description should only be used for a simple message.\n-    /// It should not contain newlines or sentence-ending punctuation,\n-    /// to facilitate embedding in larger user-facing strings.\n-    /// For showing formatted error messages with more information see\n-    /// [`Display`].\n+    /// Although using it won\u2019t cause compilation warning,\n+    /// new code should use [`Display`] instead\n+    /// and new `impl`s can omit it.\n+    ///\n+    /// To obtain error description as a string, use `to_string()`.\n     ///\n     /// [`Display`]: ../fmt/trait.Display.html\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::error::Error;\n-    ///\n     /// match \"xc\".parse::<u32>() {\n     ///     Err(e) => {\n-    ///         println!(\"Error: {}\", e.description());\n+    ///         // Print `e` itself, not `e.description()`.\n+    ///         println!(\"Error: {}\", e);\n     ///     }\n     ///     _ => println!(\"No error\"),\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn description(&self) -> &str;\n+    fn description(&self) -> &str {\n+        \"description() is deprecated; use Display\"\n+    }\n \n     /// The lower-level cause of this error, if any.\n     ///"}]}