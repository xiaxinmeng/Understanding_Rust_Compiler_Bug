{"sha": "b29d9d5503ff69caa7885e088e23f5467eb3d10a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOWQ5ZDU1MDNmZjY5Y2FhNzg4NWUwODhlMjNmNTQ2N2ViM2QxMGE=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-02-24T06:42:42Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-03-01T15:48:43Z"}, "message": "Use a crate to produce rustdoc tree comparisons instead of the `diff` command\n\nIt doesn't exist on Windows, so we bring our own unified diff implementation.\n\nFixes #82409", "tree": {"sha": "07b74f27bcaab49b498f1663d665f2e68fbc7b1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07b74f27bcaab49b498f1663d665f2e68fbc7b1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b29d9d5503ff69caa7885e088e23f5467eb3d10a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b29d9d5503ff69caa7885e088e23f5467eb3d10a", "html_url": "https://github.com/rust-lang/rust/commit/b29d9d5503ff69caa7885e088e23f5467eb3d10a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b29d9d5503ff69caa7885e088e23f5467eb3d10a/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09db05762b283bed62d4f92729cfee4646519833", "url": "https://api.github.com/repos/rust-lang/rust/commits/09db05762b283bed62d4f92729cfee4646519833", "html_url": "https://github.com/rust-lang/rust/commit/09db05762b283bed62d4f92729cfee4646519833"}], "stats": {"total": 95, "additions": 82, "deletions": 13}, "files": [{"sha": "508d4b3063e7ff9b071829dbebf4d86ef5a58e62", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b29d9d5503ff69caa7885e088e23f5467eb3d10a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b29d9d5503ff69caa7885e088e23f5467eb3d10a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b29d9d5503ff69caa7885e088e23f5467eb3d10a", "patch": "@@ -676,6 +676,7 @@ dependencies = [\n name = \"compiletest\"\n version = \"0.0.0\"\n dependencies = [\n+ \"colored\",\n  \"diff\",\n  \"getopts\",\n  \"glob\",\n@@ -688,6 +689,7 @@ dependencies = [\n  \"serde_json\",\n  \"tracing\",\n  \"tracing-subscriber\",\n+ \"unified-diff\",\n  \"walkdir\",\n  \"winapi 0.3.9\",\n ]\n@@ -5517,6 +5519,15 @@ version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"39ec24b3121d976906ece63c9daad25b85969647682eee313cb5779fdd69e14e\"\n \n+[[package]]\n+name = \"unified-diff\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"496a3d395ed0c30f411ceace4a91f7d93b148fb5a9b383d5d4cff7850f048d5f\"\n+dependencies = [\n+ \"diff\",\n+]\n+\n [[package]]\n name = \"unstable-book-gen\"\n version = \"0.1.0\""}, {"sha": "1ab560ac09d4e8fdfe7f1754033b89c66d76e690", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b29d9d5503ff69caa7885e088e23f5467eb3d10a/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b29d9d5503ff69caa7885e088e23f5467eb3d10a/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=b29d9d5503ff69caa7885e088e23f5467eb3d10a", "patch": "@@ -5,7 +5,9 @@ version = \"0.0.0\"\n edition = \"2018\"\n \n [dependencies]\n+colored = \"2\"\n diff = \"0.1.10\"\n+unified-diff = \"0.2.1\"\n getopts = \"0.2\"\n tracing = \"0.1\"\n tracing-subscriber = { version = \"0.2.13\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }"}, {"sha": "2e7b42b6c7cf263714fa85cc41a24f5e7bc06614", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 69, "deletions": 13, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b29d9d5503ff69caa7885e088e23f5467eb3d10a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29d9d5503ff69caa7885e088e23f5467eb3d10a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=b29d9d5503ff69caa7885e088e23f5467eb3d10a", "patch": "@@ -13,6 +13,7 @@ use crate::header::TestProps;\n use crate::json;\n use crate::util::get_pointer_width;\n use crate::util::{logv, PathBufExt};\n+use crate::ColorConfig;\n use regex::{Captures, Regex};\n use rustfix::{apply_suggestions, get_suggestions_from_json, Filter};\n \n@@ -2440,37 +2441,92 @@ impl<'test> TestCx<'test> {\n                 }\n             })\n         };\n-        let mut diff = Command::new(\"diff\");\n-        // diff recursively, showing context, and excluding .css files\n-        diff.args(&[\"-u\", \"-r\", \"-x\", \"*.css\"]).args(&[&compare_dir, out_dir]);\n \n-        let output = if let Some(pager) = pager {\n-            let diff_pid = diff.stdout(Stdio::piped()).spawn().expect(\"failed to run `diff`\");\n+        let diff_filename = format!(\"build/tmp/rustdoc-compare-{}.diff\", std::process::id());\n+\n+        {\n+            let mut diff_output = File::create(&diff_filename).unwrap();\n+            for entry in walkdir::WalkDir::new(out_dir) {\n+                let entry = entry.expect(\"failed to read file\");\n+                let extension = entry.path().extension().and_then(|p| p.to_str());\n+                if entry.file_type().is_file()\n+                    && (extension == Some(\"html\".into()) || extension == Some(\"js\".into()))\n+                {\n+                    let expected_path =\n+                        compare_dir.join(entry.path().strip_prefix(&out_dir).unwrap());\n+                    let expected =\n+                        if let Ok(s) = std::fs::read(&expected_path) { s } else { continue };\n+                    let actual_path = entry.path();\n+                    let actual = std::fs::read(&actual_path).unwrap();\n+                    diff_output\n+                        .write_all(&unified_diff::diff(\n+                            &expected,\n+                            &expected_path.to_string_lossy(),\n+                            &actual,\n+                            &actual_path.to_string_lossy(),\n+                            3,\n+                        ))\n+                        .unwrap();\n+                }\n+            }\n+        }\n+\n+        match self.config.color {\n+            ColorConfig::AlwaysColor => colored::control::set_override(true),\n+            ColorConfig::NeverColor => colored::control::set_override(false),\n+            _ => {}\n+        }\n+\n+        if let Some(pager) = pager {\n             let pager = pager.trim();\n             if self.config.verbose {\n                 eprintln!(\"using pager {}\", pager);\n             }\n             let output = Command::new(pager)\n                 // disable paging; we want this to be non-interactive\n                 .env(\"PAGER\", \"\")\n-                .stdin(diff_pid.stdout.unwrap())\n+                .stdin(File::open(&diff_filename).unwrap())\n                 // Capture output and print it explicitly so it will in turn be\n                 // captured by libtest.\n                 .output()\n                 .unwrap();\n             assert!(output.status.success());\n-            output\n+            println!(\"{}\", String::from_utf8_lossy(&output.stdout));\n+            eprintln!(\"{}\", String::from_utf8_lossy(&output.stderr));\n         } else {\n-            eprintln!(\"warning: no pager configured, falling back to `diff --color`\");\n+            use colored::Colorize;\n+            eprintln!(\"warning: no pager configured, falling back to unified diff\");\n             eprintln!(\n                 \"help: try configuring a git pager (e.g. `delta`) with `git config --global core.pager delta`\"\n             );\n-            let output = diff.arg(\"--color\").output().unwrap();\n-            assert!(output.status.success() || output.status.code() == Some(1));\n-            output\n+            let mut out = io::stdout();\n+            let mut diff = BufReader::new(File::open(&diff_filename).unwrap());\n+            let mut line = Vec::new();\n+            loop {\n+                line.truncate(0);\n+                match diff.read_until(b'\\n', &mut line) {\n+                    Ok(0) => break,\n+                    Ok(_) => {}\n+                    Err(e) => eprintln!(\"ERROR: {:?}\", e),\n+                }\n+                match String::from_utf8(line.clone()) {\n+                    Ok(line) => {\n+                        if line.starts_with(\"+\") {\n+                            write!(&mut out, \"{}\", line.green()).unwrap();\n+                        } else if line.starts_with(\"-\") {\n+                            write!(&mut out, \"{}\", line.red()).unwrap();\n+                        } else if line.starts_with(\"@\") {\n+                            write!(&mut out, \"{}\", line.blue()).unwrap();\n+                        } else {\n+                            out.write_all(line.as_bytes()).unwrap();\n+                        }\n+                    }\n+                    Err(_) => {\n+                        write!(&mut out, \"{}\", String::from_utf8_lossy(&line).reversed()).unwrap();\n+                    }\n+                }\n+            }\n         };\n-        println!(\"{}\", String::from_utf8_lossy(&output.stdout));\n-        eprintln!(\"{}\", String::from_utf8_lossy(&output.stderr));\n     }\n \n     fn run_rustdoc_json_test(&self) {"}]}