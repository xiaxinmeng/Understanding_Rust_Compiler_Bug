{"sha": "9e3f091f2b48933694ef3fecaf586f7d7dde523d", "node_id": "C_kwDOAAsO6NoAKDllM2YwOTFmMmI0ODkzMzY5NGVmM2ZlY2FmNTg2ZjdkN2RkZTUyM2Q", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-23T22:17:36Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-13T18:19:57Z"}, "message": "Replace ZST operands and debuginfo by constants.", "tree": {"sha": "666e193eed614cbc7f61f077cfe1aebc8e87e862", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/666e193eed614cbc7f61f077cfe1aebc8e87e862"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e3f091f2b48933694ef3fecaf586f7d7dde523d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e3f091f2b48933694ef3fecaf586f7d7dde523d", "html_url": "https://github.com/rust-lang/rust/commit/9e3f091f2b48933694ef3fecaf586f7d7dde523d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e3f091f2b48933694ef3fecaf586f7d7dde523d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf8d98b227fd3c7e50aa5a9453141c5edbf5df38", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf8d98b227fd3c7e50aa5a9453141c5edbf5df38", "html_url": "https://github.com/rust-lang/rust/commit/cf8d98b227fd3c7e50aa5a9453141c5edbf5df38"}], "stats": {"total": 325, "additions": 219, "deletions": 106}, "files": [{"sha": "454976a1fd03b6e90018a534dd2d870aa0cf0feb", "filename": "compiler/rustc_mir_transform/src/remove_zsts.rs", "status": "modified", "additions": 93, "deletions": 28, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f091f2b48933694ef3fecaf586f7d7dde523d/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f091f2b48933694ef3fecaf586f7d7dde523d/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs?ref=9e3f091f2b48933694ef3fecaf586f7d7dde523d", "patch": "@@ -1,7 +1,9 @@\n //! Removes assignments to ZST places.\n \n use crate::MirPass;\n-use rustc_middle::mir::{Body, StatementKind};\n+use rustc_middle::mir::interpret::ConstValue;\n+use rustc_middle::mir::visit::*;\n+use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n pub struct RemoveZsts;\n@@ -16,38 +18,24 @@ impl<'tcx> MirPass<'tcx> for RemoveZsts {\n         if tcx.type_of(body.source.def_id()).subst_identity().is_generator() {\n             return;\n         }\n-        let param_env = tcx.param_env(body.source.def_id());\n-        let basic_blocks = body.basic_blocks.as_mut_preserves_cfg();\n+        let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n         let local_decls = &body.local_decls;\n-        for block in basic_blocks {\n-            for statement in block.statements.iter_mut() {\n-                if let StatementKind::Assign(box (place, _)) | StatementKind::Deinit(box place) =\n-                    statement.kind\n-                {\n-                    let place_ty = place.ty(local_decls, tcx).ty;\n-                    if !maybe_zst(place_ty) {\n-                        continue;\n-                    }\n-                    let Ok(layout) = tcx.layout_of(param_env.and(place_ty)) else {\n-                        continue;\n-                    };\n-                    if !layout.is_zst() {\n-                        continue;\n-                    }\n-                    if tcx.consider_optimizing(|| {\n-                        format!(\n-                            \"RemoveZsts - Place: {:?} SourceInfo: {:?}\",\n-                            place, statement.source_info\n-                        )\n-                    }) {\n-                        statement.make_nop();\n-                    }\n-                }\n-            }\n+        let mut replacer = Replacer { tcx, param_env, local_decls };\n+        for var_debug_info in &mut body.var_debug_info {\n+            replacer.visit_var_debug_info(var_debug_info);\n+        }\n+        for (bb, data) in body.basic_blocks.as_mut_preserves_cfg().iter_enumerated_mut() {\n+            replacer.visit_basic_block_data(bb, data);\n         }\n     }\n }\n \n+struct Replacer<'a, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    local_decls: &'a LocalDecls<'tcx>,\n+}\n+\n /// A cheap, approximate check to avoid unnecessary `layout_of` calls.\n fn maybe_zst(ty: Ty<'_>) -> bool {\n     match ty.kind() {\n@@ -63,3 +51,80 @@ fn maybe_zst(ty: Ty<'_>) -> bool {\n         _ => false,\n     }\n }\n+\n+impl<'tcx> Replacer<'_, 'tcx> {\n+    fn is_zst(&self, ty: Ty<'tcx>) -> bool {\n+        if !maybe_zst(ty) {\n+            return false;\n+        }\n+        let Ok(layout) = self.tcx.layout_of(self.param_env.and(ty)) else {\n+            return false;\n+        };\n+        layout.is_zst()\n+    }\n+\n+    fn make_zst(&self, ty: Ty<'tcx>) -> Constant<'tcx> {\n+        debug_assert!(self.is_zst(ty));\n+        Constant {\n+            span: rustc_span::DUMMY_SP,\n+            user_ty: None,\n+            literal: ConstantKind::Val(ConstValue::ZeroSized, ty),\n+        }\n+    }\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for Replacer<'_, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn visit_var_debug_info(&mut self, var_debug_info: &mut VarDebugInfo<'tcx>) {\n+        match var_debug_info.value {\n+            VarDebugInfoContents::Const(_) => {}\n+            VarDebugInfoContents::Place(place) => {\n+                let place_ty = place.ty(self.local_decls, self.tcx).ty;\n+                if self.is_zst(place_ty) {\n+                    var_debug_info.value = VarDebugInfoContents::Const(self.make_zst(place_ty))\n+                }\n+            }\n+            VarDebugInfoContents::Composite { ty, fragments: _ } => {\n+                if self.is_zst(ty) {\n+                    var_debug_info.value = VarDebugInfoContents::Const(self.make_zst(ty))\n+                }\n+            }\n+        }\n+    }\n+\n+    fn visit_operand(&mut self, operand: &mut Operand<'tcx>, loc: Location) {\n+        if let Operand::Constant(_) = operand {\n+            return;\n+        }\n+        let op_ty = operand.ty(self.local_decls, self.tcx);\n+        if self.is_zst(op_ty)\n+            && self.tcx.consider_optimizing(|| {\n+                format!(\"RemoveZsts - Operand: {:?} Location: {:?}\", operand, loc)\n+            })\n+        {\n+            *operand = Operand::Constant(Box::new(self.make_zst(op_ty)))\n+        }\n+    }\n+\n+    fn visit_statement(&mut self, statement: &mut Statement<'tcx>, loc: Location) {\n+        if let StatementKind::Assign(box (place, _)) | StatementKind::Deinit(box place) =\n+            statement.kind\n+        {\n+            let place_ty = place.ty(self.local_decls, self.tcx).ty;\n+            if self.is_zst(place_ty)\n+                && self.tcx.consider_optimizing(|| {\n+                    format!(\n+                        \"RemoveZsts - Place: {:?} SourceInfo: {:?}\",\n+                        place, statement.source_info\n+                    )\n+                })\n+            {\n+                statement.make_nop();\n+            }\n+        }\n+        self.super_statement(statement, loc);\n+    }\n+}"}, {"sha": "85dedf68ce925efc94ea8ee96f28a97fcafc6743", "filename": "tests/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=9e3f091f2b48933694ef3fecaf586f7d7dde523d", "patch": "@@ -12,12 +12,10 @@\n           let _3: [E; 1];                  // in scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n           scope 3 {\n               debug _invalid_tag => _3;    // in scope 3 at $DIR/invalid_constant.rs:+13:9: +13:21\n-              let _6: [Empty; 1];          // in scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n               scope 5 {\n-                  debug _enum_without_variants => _6; // in scope 5 at $DIR/invalid_constant.rs:+20:9: +20:31\n-                  let _7: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n+                  debug _enum_without_variants => const [ZeroSized: Empty]; // in scope 5 at $DIR/invalid_constant.rs:+20:9: +20:31\n                   scope 7 {\n-                      debug _non_utf8_str => _7; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n+                      debug _non_utf8_str => const Str::<\"\ufffd\ufffd\ufffd\">; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n                   }\n               }\n               scope 6 {\n@@ -52,10 +50,6 @@\n +                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n           StorageDead(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:59: +13:60\n           StorageDead(_5);                 // scope 1 at $DIR/invalid_constant.rs:+13:60: +13:61\n-          StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n-          StorageLive(_7);                 // scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n-          StorageDead(_7);                 // scope 5 at $DIR/invalid_constant.rs:+27:1: +27:2\n-          StorageDead(_6);                 // scope 3 at $DIR/invalid_constant.rs:+27:1: +27:2\n           StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:+27:1: +27:2\n           StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:+27:1: +27:2\n           return;                          // scope 0 at $DIR/invalid_constant.rs:+27:2: +27:2"}, {"sha": "57b32e14f87d562f9263727ce027d2eee35b5237", "filename": "tests/mir-opt/const_prop/invalid_constant.main.RemoveZsts.diff", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.RemoveZsts.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.RemoveZsts.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.RemoveZsts.diff?ref=9e3f091f2b48933694ef3fecaf586f7d7dde523d", "patch": "@@ -0,0 +1,70 @@\n+- // MIR for `main` before RemoveZsts\n++ // MIR for `main` after RemoveZsts\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:+0:11: +0:11\n+      let _1: char;                        // in scope 0 at $DIR/invalid_constant.rs:+6:9: +6:22\n+      let mut _2: main::InvalidChar;       // in scope 0 at $DIR/invalid_constant.rs:+6:34: +6:63\n+      let mut _4: E;                       // in scope 0 at $DIR/invalid_constant.rs:+13:25: +13:59\n+      let mut _5: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:+13:34: +13:55\n+      let mut _7: Empty;                   // in scope 0 at $DIR/invalid_constant.rs:+20:35: +20:73\n+      let mut _8: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:+20:44: +20:65\n+      scope 1 {\n+          debug _invalid_char => _1;       // in scope 1 at $DIR/invalid_constant.rs:+6:9: +6:22\n+          let _3: [E; 1];                  // in scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n+          scope 3 {\n+              debug _invalid_tag => _3;    // in scope 3 at $DIR/invalid_constant.rs:+13:9: +13:21\n+              let _6: [Empty; 1];          // in scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n+              scope 5 {\n+-                 debug _enum_without_variants => _6; // in scope 5 at $DIR/invalid_constant.rs:+20:9: +20:31\n++                 debug _enum_without_variants => const [ZeroSized: Empty]; // in scope 5 at $DIR/invalid_constant.rs:+20:9: +20:31\n+                  let _9: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n+                  scope 7 {\n+-                     debug _non_utf8_str => _9; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n++                     debug _non_utf8_str => const Str::<\"\ufffd\ufffd\ufffd\">; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n+                  }\n+              }\n+              scope 6 {\n+              }\n+          }\n+          scope 4 {\n+          }\n+      }\n+      scope 2 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:+6:9: +6:22\n+          StorageLive(_2);                 // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n+          _2 = InvalidChar { int: const 1114113_u32 }; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n+          _1 = (_2.1: char);               // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:67\n+          StorageDead(_2);                 // scope 0 at $DIR/invalid_constant.rs:+6:69: +6:70\n+          StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n+          StorageLive(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:25: +13:59\n+          StorageLive(_5);                 // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n+          _5 = InvalidTag { int: const 4_u32 }; // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n+          _4 = (_5.1: E);                  // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n+          _3 = [move _4];                  // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n+          StorageDead(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:59: +13:60\n+          StorageDead(_5);                 // scope 1 at $DIR/invalid_constant.rs:+13:60: +13:61\n+          StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n+          StorageLive(_7);                 // scope 3 at $DIR/invalid_constant.rs:+20:35: +20:73\n+          StorageLive(_8);                 // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n+          _8 = NoVariants { int: const 0_u32 }; // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n+-         _7 = (_8.1: Empty);              // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:71\n+-         _6 = [move _7];                  // scope 3 at $DIR/invalid_constant.rs:+20:34: +20:74\n++         nop;                             // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:71\n++         nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:34: +20:74\n+          StorageDead(_7);                 // scope 3 at $DIR/invalid_constant.rs:+20:73: +20:74\n+          StorageDead(_8);                 // scope 3 at $DIR/invalid_constant.rs:+20:74: +20:75\n+          StorageLive(_9);                 // scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n+-         _0 = const ();                   // scope 0 at $DIR/invalid_constant.rs:+0:11: +27:2\n++         nop;                             // scope 0 at $DIR/invalid_constant.rs:+0:11: +27:2\n+          StorageDead(_9);                 // scope 5 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          StorageDead(_6);                 // scope 3 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          return;                          // scope 0 at $DIR/invalid_constant.rs:+27:2: +27:2\n+      }\n+  }\n+  "}, {"sha": "eb6172cdff90f0cfaacef884a70240c4a99a6259", "filename": "tests/mir-opt/const_prop/invalid_constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs?ref=9e3f091f2b48933694ef3fecaf586f7d7dde523d", "patch": "@@ -11,6 +11,7 @@ enum E { A, B, C }\n #[derive(Copy, Clone)]\n enum Empty {}\n \n+// EMIT_MIR invalid_constant.main.RemoveZsts.diff\n // EMIT_MIR invalid_constant.main.ConstProp.diff\n fn main() {\n     // An invalid char."}, {"sha": "df44129e205578c619065f7de2c5ae01a0837b99", "filename": "tests/mir-opt/const_prop/issue_66971.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff?ref=9e3f091f2b48933694ef3fecaf586f7d7dde523d", "patch": "@@ -5,14 +5,11 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/issue_66971.rs:+0:11: +0:11\n       let _1: ();                          // in scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n       let mut _2: ((), u8, u8);            // in scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n-      let mut _3: ();                      // in scope 0 at $DIR/issue_66971.rs:+1:13: +1:15\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n           StorageLive(_2);                 // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n-          StorageLive(_3);                 // scope 0 at $DIR/issue_66971.rs:+1:13: +1:15\n-          _2 = (move _3, const 0_u8, const 0_u8); // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n-          StorageDead(_3);                 // scope 0 at $DIR/issue_66971.rs:+1:21: +1:22\n+          _2 = (const (), const 0_u8, const 0_u8); // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n           _1 = encode(move _2) -> bb1;     // scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n                                            // mir::Constant\n                                            // + span: $DIR/issue_66971.rs:17:5: 17:11"}, {"sha": "a4193290a9521da789eddb0e7df92a694d8bde9b", "filename": "tests/mir-opt/inline/asm_unwind.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff?ref=9e3f091f2b48933694ef3fecaf586f7d7dde523d", "patch": "@@ -7,7 +7,7 @@\n +     scope 1 (inlined foo) {              // at $DIR/asm_unwind.rs:21:5: 21:10\n +         let _2: D;                       // in scope 1 at $DIR/asm_unwind.rs:15:9: 15:11\n +         scope 2 {\n-+             debug _d => _2;              // in scope 2 at $DIR/asm_unwind.rs:15:9: 15:11\n++             debug _d => const D;         // in scope 2 at $DIR/asm_unwind.rs:15:9: 15:11\n +             scope 3 {\n +             }\n +         }"}, {"sha": "d1c9f2ff379453972ba44f6a0ee0d60605a74439", "filename": "tests/mir-opt/inline/cycle.g.Inline.diff", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff?ref=9e3f091f2b48933694ef3fecaf586f7d7dde523d", "patch": "@@ -5,11 +5,11 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:8: +0:8\n       let _1: ();                          // in scope 0 at $DIR/cycle.rs:+1:5: +1:12\n +     let mut _2: fn() {main};             // in scope 0 at $DIR/cycle.rs:+1:5: +1:12\n++     let mut _5: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n +     scope 1 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n +         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n +         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         let mut _4: &fn() {main};        // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n-+         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         scope 2 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n +         }\n +     }\n@@ -29,6 +29,7 @@\n +         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         _3 = move (*_4)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n@@ -48,7 +49,7 @@\n +     }\n + \n +     bb4: {\n-+         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n +         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n +         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2"}, {"sha": "03035c1e73f2030640b04e1bc95cea8f30ce197a", "filename": "tests/mir-opt/inline/cycle.main.Inline.diff", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff?ref=9e3f091f2b48933694ef3fecaf586f7d7dde523d", "patch": "@@ -5,11 +5,11 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:11: +0:11\n       let _1: ();                          // in scope 0 at $DIR/cycle.rs:+1:5: +1:9\n +     let mut _2: fn() {g};                // in scope 0 at $DIR/cycle.rs:+1:5: +1:9\n++     let mut _5: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n +     scope 1 (inlined f::<fn() {g}>) {    // at $DIR/cycle.rs:17:5: 17:9\n +         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n +         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         let mut _4: &fn() {g};           // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n-+         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         scope 2 (inlined <fn() {g} as Fn<()>>::call - shim(fn() {g})) { // at $DIR/cycle.rs:6:5: 6:8\n +         }\n +     }\n@@ -29,6 +29,7 @@\n +         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         _3 = move (*_4)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n@@ -48,7 +49,7 @@\n +     }\n + \n +     bb4: {\n-+         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n +         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n +         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2"}, {"sha": "5c395a3b24c654bac1586fe0d6a528573ddcc853", "filename": "tests/mir-opt/inline/inline_cycle.two.Inline.diff", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff?ref=9e3f091f2b48933694ef3fecaf586f7d7dde523d", "patch": "@@ -5,10 +5,10 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle.rs:+0:10: +0:10\n       let _1: ();                          // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n +     let mut _2: fn() {f};                // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n++     let mut _4: ();                      // in scope 0 at $DIR/inline_cycle.rs:54:5: 54:8\n +     scope 1 (inlined call::<fn() {f}>) { // at $DIR/inline_cycle.rs:49:5: 49:12\n +         debug f => _2;                   // in scope 1 at $DIR/inline_cycle.rs:53:22: 53:23\n +         let _3: ();                      // in scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n-+         let mut _4: ();                  // in scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n +         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline_cycle.rs:54:5: 54:8\n +         }\n +     }\n@@ -26,11 +26,12 @@\n                                            // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n +         StorageLive(_3);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n +         StorageLive(_4);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n++         _4 = const ();                   // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n +         _3 = move _2() -> bb1;           // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n-+         StorageDead(_4);                 // scope 1 at $DIR/inline_cycle.rs:54:7: 54:8\n++         StorageDead(_4);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n +         StorageDead(_3);                 // scope 1 at $DIR/inline_cycle.rs:54:8: 54:9\n +         StorageDead(_2);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n           StorageDead(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:12: +1:13"}, {"sha": "31208e0052c6f65ebaac4daa12861a3e849a290a", "filename": "tests/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=9e3f091f2b48933694ef3fecaf586f7d7dde523d", "patch": "@@ -5,19 +5,18 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_diverging.rs:+0:12: +0:12\n       let _1: (!, !);                      // in scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n +     let mut _2: fn() -> ! {sleep};       // in scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n++     let mut _8: ();                      // in scope 0 at $DIR/inline_diverging.rs:27:13: 27:16\n +     scope 1 (inlined call_twice::<!, fn() -> ! {sleep}>) { // at $DIR/inline_diverging.rs:22:5: 22:22\n +         debug f => _2;                   // in scope 1 at $DIR/inline_diverging.rs:26:36: 26:37\n +         let _3: !;                       // in scope 1 at $DIR/inline_diverging.rs:27:9: 27:10\n +         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n-+         let mut _5: ();                  // in scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n-+         let mut _6: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline_diverging.rs:28:13: 28:14\n-+         let mut _7: ();                  // in scope 1 at $DIR/inline_diverging.rs:28:13: 28:16\n-+         let mut _8: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:6: 29:7\n-+         let mut _9: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:9: 29:10\n++         let mut _5: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline_diverging.rs:28:13: 28:14\n++         let mut _6: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:6: 29:7\n++         let mut _7: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:9: 29:10\n +         scope 2 {\n +             debug a => _3;               // in scope 2 at $DIR/inline_diverging.rs:27:9: 27:10\n +             scope 3 {\n-+                 debug b => _9;           // in scope 3 at $DIR/inline_diverging.rs:28:9: 28:10\n++                 debug b => _7;           // in scope 3 at $DIR/inline_diverging.rs:28:9: 28:10\n +             }\n +         }\n +         scope 4 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline_diverging.rs:27:13: 27:16\n@@ -35,21 +34,21 @@\n -                                          // mir::Constant\n                                            // + span: $DIR/inline_diverging.rs:22:16: 22:21\n                                            // + literal: Const { ty: fn() -> ! {sleep}, val: Value(<ZST>) }\n-+         StorageLive(_9);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n++         StorageLive(_7);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n +         StorageLive(_3);                 // scope 1 at $DIR/inline_diverging.rs:27:9: 27:10\n +         StorageLive(_4);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n +         _4 = &_2;                        // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n-+         StorageLive(_5);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n++         StorageLive(_8);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n++         _8 = const ();                   // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n +         _3 = move (*_4)() -> [return: bb6, unwind: bb4]; // scope 4 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n +     }\n + \n +     bb1: {\n-+         StorageDead(_7);                 // scope 2 at $DIR/inline_diverging.rs:28:15: 28:16\n-+         StorageDead(_6);                 // scope 2 at $DIR/inline_diverging.rs:28:15: 28:16\n-+         StorageLive(_8);                 // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n-+         _8 = move _3;                    // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n-+         _1 = (move _8, move _9);         // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11\n-+         StorageDead(_8);                 // scope 3 at $DIR/inline_diverging.rs:29:10: 29:11\n++         StorageDead(_5);                 // scope 2 at $DIR/inline_diverging.rs:28:15: 28:16\n++         StorageLive(_6);                 // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n++         _6 = move _3;                    // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n++         _1 = (move _6, move _7);         // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11\n++         StorageDead(_6);                 // scope 3 at $DIR/inline_diverging.rs:29:10: 29:11\n +         StorageDead(_3);                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n +         drop(_2) -> bb2;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n +     }\n@@ -71,12 +70,11 @@\n +     }\n + \n +     bb6: {\n-+         StorageDead(_5);                 // scope 1 at $DIR/inline_diverging.rs:27:15: 27:16\n++         StorageDead(_8);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n +         StorageDead(_4);                 // scope 1 at $DIR/inline_diverging.rs:27:15: 27:16\n-+         StorageLive(_6);                 // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n-+         _6 = &_2;                        // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n-+         StorageLive(_7);                 // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16\n-+         _9 = <fn() -> ! {sleep} as Fn<()>>::call(move _6, move _7) -> [return: bb1, unwind: bb3]; // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16\n++         StorageLive(_5);                 // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n++         _5 = &_2;                        // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n++         _7 = <fn() -> ! {sleep} as Fn<()>>::call(move _5, const ()) -> [return: bb1, unwind: bb3]; // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16\n +                                          // mir::Constant\n +                                          // + span: $DIR/inline_diverging.rs:28:13: 28:14\n +                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() -> ! {sleep}, ()) -> <fn() -> ! {sleep} as FnOnce<()>>::Output {<fn() -> ! {sleep} as Fn<()>>::call}, val: Value(<ZST>) }"}, {"sha": "a98c294cacbe9ec8106570cb564f2dd347eb78c1", "filename": "tests/mir-opt/inline/issue_76997_inline_scopes_parenting.main.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir?ref=9e3f091f2b48933694ef3fecaf586f7d7dde523d", "patch": "@@ -10,10 +10,9 @@ fn main() -> () {\n     scope 1 {\n         debug f => _1;                   // in scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:9: +1:10\n         scope 2 (inlined main::{closure#0}) { // at $DIR/issue_76997_inline_scopes_parenting.rs:6:5: 6:10\n-            debug x => _5;               // in scope 2 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:14: +1:15\n-            let _6: ();                  // in scope 2 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:23: +1:24\n+            debug x => const ();         // in scope 2 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:14: +1:15\n             scope 3 {\n-                debug y => _6;           // in scope 3 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:23: +1:24\n+                debug y => const ();     // in scope 3 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:23: +1:24\n             }\n         }\n     }\n@@ -36,8 +35,6 @@ fn main() -> () {\n         _3 = (move _4,);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n         StorageLive(_5);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n         _5 = move (_3.0: ());            // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n-        StorageLive(_6);                 // scope 2 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:23: +1:24\n-        StorageDead(_6);                 // scope 2 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:32: +1:33\n         StorageDead(_5);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n         StorageDead(_4);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:9: +2:10\n         StorageDead(_3);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:9: +2:10"}, {"sha": "9d6e71ab78a9a1dce29395381566889cc47fe5bf", "filename": "tests/mir-opt/lower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir?ref=9e3f091f2b48933694ef3fecaf586f7d7dde523d", "patch": "@@ -2,26 +2,23 @@\n \n fn f_unit() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics_e2e.rs:+0:17: +0:17\n-    let mut _1: ();                      // in scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:16: +1:18\n     scope 1 (inlined f_dispatch::<()>) { // at $DIR/lower_intrinsics_e2e.rs:9:5: 9:19\n-        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics_e2e.rs:19:22: 19:23\n-        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n+        debug t => const ();             // in scope 1 at $DIR/lower_intrinsics_e2e.rs:19:22: 19:23\n+        let _1: ();                      // in scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n         scope 2 (inlined std::mem::size_of::<()>) { // at $DIR/lower_intrinsics_e2e.rs:20:8: 20:32\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:16: +1:18\n-        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n-        _2 = f_zst::<()>(move _1) -> bb1; // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n+        StorageLive(_1);                 // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n+        _1 = f_zst::<()>(const ()) -> bb1; // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n                                          // mir::Constant\n                                          // + span: $DIR/lower_intrinsics_e2e.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(()) {f_zst::<()>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:17: 21:18\n-        StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:18: +1:19\n+        StorageDead(_1);                 // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:17: 21:18\n         return;                          // scope 0 at $DIR/lower_intrinsics_e2e.rs:+2:2: +2:2\n     }\n }"}, {"sha": "7ac9ef3d49013b631118e7f6d9412e863f02b065", "filename": "tests/mir-opt/remove_zsts.get_union.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Fremove_zsts.get_union.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Fremove_zsts.get_union.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fremove_zsts.get_union.PreCodegen.after.mir?ref=9e3f091f2b48933694ef3fecaf586f7d7dde523d", "patch": "@@ -2,12 +2,9 @@\n \n fn get_union() -> Foo {\n     let mut _0: Foo;                     // return place in scope 0 at $DIR/remove_zsts.rs:+0:19: +0:22\n-    let mut _1: ();                      // in scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n-        _0 = Foo { x: move _1 };         // scope 0 at $DIR/remove_zsts.rs:+1:5: +1:18\n-        StorageDead(_1);                 // scope 0 at $DIR/remove_zsts.rs:+1:17: +1:18\n+        _0 = Foo { x: const () };        // scope 0 at $DIR/remove_zsts.rs:+1:5: +1:18\n         return;                          // scope 0 at $DIR/remove_zsts.rs:+2:2: +2:2\n     }\n }"}, {"sha": "9833481b2fd8fc89981f9535e91ab19c07bed2a5", "filename": "tests/mir-opt/remove_zsts.get_union.RemoveZsts.diff", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Fremove_zsts.get_union.RemoveZsts.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Fremove_zsts.get_union.RemoveZsts.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fremove_zsts.get_union.RemoveZsts.diff?ref=9e3f091f2b48933694ef3fecaf586f7d7dde523d", "patch": "@@ -8,8 +8,9 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n -         _1 = ();                         // scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n+-         _0 = Foo { x: move _1 };         // scope 0 at $DIR/remove_zsts.rs:+1:5: +1:18\n +         nop;                             // scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n-          _0 = Foo { x: move _1 };         // scope 0 at $DIR/remove_zsts.rs:+1:5: +1:18\n++         _0 = Foo { x: const () };        // scope 0 at $DIR/remove_zsts.rs:+1:5: +1:18\n           StorageDead(_1);                 // scope 0 at $DIR/remove_zsts.rs:+1:17: +1:18\n           return;                          // scope 0 at $DIR/remove_zsts.rs:+2:2: +2:2\n       }"}, {"sha": "cae89fb177a7c2d63e02bcc5e85b9c9fda0a9015", "filename": "tests/mir-opt/simple_option_map_e2e.ezmap.PreCodegen.after.mir", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f091f2b48933694ef3fecaf586f7d7dde523d/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir?ref=9e3f091f2b48933694ef3fecaf586f7d7dde523d", "patch": "@@ -3,47 +3,40 @@\n fn ezmap(_1: Option<i32>) -> Option<i32> {\n     debug x => _1;                       // in scope 0 at $DIR/simple_option_map_e2e.rs:+0:14: +0:15\n     let mut _0: std::option::Option<i32>; // return place in scope 0 at $DIR/simple_option_map_e2e.rs:+0:33: +0:44\n-    let mut _2: [closure@$DIR/simple_option_map_e2e.rs:14:12: 14:15]; // in scope 0 at $DIR/simple_option_map_e2e.rs:+1:12: +1:21\n     scope 1 (inlined map::<i32, i32, [closure@$DIR/simple_option_map_e2e.rs:14:12: 14:15]>) { // at $DIR/simple_option_map_e2e.rs:14:5: 14:22\n         debug slf => _1;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:2:17: 2:20\n-        debug f => _2;                   // in scope 1 at $DIR/simple_option_map_e2e.rs:2:33: 2:34\n-        let mut _3: isize;               // in scope 1 at $DIR/simple_option_map_e2e.rs:7:9: 7:16\n-        let _4: i32;                     // in scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n-        let mut _5: i32;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n+        debug f => const ZeroSized: [closure@$DIR/simple_option_map_e2e.rs:14:12: 14:15]; // in scope 1 at $DIR/simple_option_map_e2e.rs:2:33: 2:34\n+        let mut _2: isize;               // in scope 1 at $DIR/simple_option_map_e2e.rs:7:9: 7:16\n+        let _3: i32;                     // in scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n+        let mut _4: i32;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n         scope 2 {\n-            debug x => _4;               // in scope 2 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n+            debug x => _3;               // in scope 2 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n             scope 3 (inlined ezmap::{closure#0}) { // at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-                debug n => _4;           // in scope 3 at $DIR/simple_option_map_e2e.rs:+1:13: +1:14\n+                debug n => _3;           // in scope 3 at $DIR/simple_option_map_e2e.rs:+1:13: +1:14\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:12: +1:21\n-        _3 = discriminant(_1);           // scope 1 at $DIR/simple_option_map_e2e.rs:6:11: 6:14\n-        switchInt(move _3) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 1 at $DIR/simple_option_map_e2e.rs:6:5: 6:14\n+        _2 = discriminant(_1);           // scope 1 at $DIR/simple_option_map_e2e.rs:6:11: 6:14\n+        switchInt(move _2) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 1 at $DIR/simple_option_map_e2e.rs:6:5: 6:14\n     }\n \n     bb1: {\n         _0 = Option::<i32>::None;        // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n-        goto -> bb4;                     // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n+        return;                          // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n     }\n \n     bb2: {\n         unreachable;                     // scope 1 at $DIR/simple_option_map_e2e.rs:6:11: 6:14\n     }\n \n     bb3: {\n-        _4 = ((_1 as Some).0: i32);      // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n-        StorageLive(_5);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        _5 = Add(_4, const 1_i32);       // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n-        _0 = Option::<i32>::Some(move _5); // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n-        StorageDead(_5);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:29: 7:30\n-        goto -> bb4;                     // scope 1 at $DIR/simple_option_map_e2e.rs:10:1: 10:2\n-    }\n-\n-    bb4: {\n-        StorageDead(_2);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:21: +1:22\n-        return;                          // scope 0 at $DIR/simple_option_map_e2e.rs:+2:2: +2:2\n+        _3 = ((_1 as Some).0: i32);      // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n+        StorageLive(_4);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n+        _4 = Add(_3, const 1_i32);       // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n+        _0 = Option::<i32>::Some(move _4); // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n+        StorageDead(_4);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:29: 7:30\n+        return;                          // scope 1 at $DIR/simple_option_map_e2e.rs:10:1: 10:2\n     }\n }"}]}