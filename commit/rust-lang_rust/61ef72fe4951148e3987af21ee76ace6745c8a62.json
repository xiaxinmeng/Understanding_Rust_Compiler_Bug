{"sha": "61ef72fe4951148e3987af21ee76ace6745c8a62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZWY3MmZlNDk1MTE0OGUzOTg3YWYyMWVlNzZhY2U2NzQ1YzhhNjI=", "commit": {"author": {"name": "hatoo", "email": "hato2000@gmail.com", "date": "2020-03-21T04:47:01Z"}, "committer": {"name": "hatoo", "email": "hato2000@gmail.com", "date": "2020-03-21T05:56:33Z"}, "message": "Use getentropy(2) on macos", "tree": {"sha": "654f2a730cdd0dfd6efcdd6d15d2eb782c8f7f11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/654f2a730cdd0dfd6efcdd6d15d2eb782c8f7f11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61ef72fe4951148e3987af21ee76ace6745c8a62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61ef72fe4951148e3987af21ee76ace6745c8a62", "html_url": "https://github.com/rust-lang/rust/commit/61ef72fe4951148e3987af21ee76ace6745c8a62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61ef72fe4951148e3987af21ee76ace6745c8a62/comments", "author": {"login": "hatoo", "id": 1667746, "node_id": "MDQ6VXNlcjE2Njc3NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1667746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hatoo", "html_url": "https://github.com/hatoo", "followers_url": "https://api.github.com/users/hatoo/followers", "following_url": "https://api.github.com/users/hatoo/following{/other_user}", "gists_url": "https://api.github.com/users/hatoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/hatoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hatoo/subscriptions", "organizations_url": "https://api.github.com/users/hatoo/orgs", "repos_url": "https://api.github.com/users/hatoo/repos", "events_url": "https://api.github.com/users/hatoo/events{/privacy}", "received_events_url": "https://api.github.com/users/hatoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hatoo", "id": 1667746, "node_id": "MDQ6VXNlcjE2Njc3NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1667746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hatoo", "html_url": "https://github.com/hatoo", "followers_url": "https://api.github.com/users/hatoo/followers", "following_url": "https://api.github.com/users/hatoo/following{/other_user}", "gists_url": "https://api.github.com/users/hatoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/hatoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hatoo/subscriptions", "organizations_url": "https://api.github.com/users/hatoo/orgs", "repos_url": "https://api.github.com/users/hatoo/repos", "events_url": "https://api.github.com/users/hatoo/events{/privacy}", "received_events_url": "https://api.github.com/users/hatoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1057dc97afce39ff6a224966ece3ed438af4c1f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1057dc97afce39ff6a224966ece3ed438af4c1f5", "html_url": "https://github.com/rust-lang/rust/commit/1057dc97afce39ff6a224966ece3ed438af4c1f5"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "eed6fbf13b7d2f416c9548a9d833c5c57eac50fb", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/61ef72fe4951148e3987af21ee76ace6745c8a62/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ef72fe4951148e3987af21ee76ace6745c8a62/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=61ef72fe4951148e3987af21ee76ace6745c8a62", "patch": "@@ -12,6 +12,7 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n \n #[cfg(all(\n     unix,\n+    not(target_os = \"macos\"),\n     not(target_os = \"ios\"),\n     not(target_os = \"openbsd\"),\n     not(target_os = \"freebsd\"),\n@@ -92,6 +93,42 @@ mod imp {\n     }\n }\n \n+#[cfg(target_os = \"macos\")]\n+mod imp {\n+    use crate::fs::File;\n+    use crate::io::Read;\n+    use crate::sys::os::errno;\n+    use libc::{c_int, c_void, size_t};\n+\n+    fn getentropy_fill_bytes(v: &mut [u8]) -> bool {\n+        weak!(fn getentropy(*mut c_void, size_t) -> c_int);\n+\n+        getentropy\n+            .get()\n+            .map(|f| {\n+                // getentropy(2) permits a maximum buffer size of 256 bytes\n+                for s in v.chunks_mut(256) {\n+                    let ret = unsafe { f(s.as_mut_ptr() as *mut c_void, s.len()) };\n+                    if ret == -1 {\n+                        panic!(\"unexpected getentropy error: {}\", errno());\n+                    }\n+                }\n+                true\n+            })\n+            .unwrap_or(false)\n+    }\n+\n+    pub fn fill_bytes(v: &mut [u8]) {\n+        if getentropy_fill_bytes(v) {\n+            return;\n+        }\n+\n+        // for older macos which doesn't support getentropy\n+        let mut file = File::open(\"/dev/urandom\").expect(\"failed to open /dev/urandom\");\n+        file.read_exact(v).expect(\"failed to read /dev/urandom\")\n+    }\n+}\n+\n #[cfg(target_os = \"openbsd\")]\n mod imp {\n     use crate::sys::os::errno;"}]}