{"sha": "bccff14a2084784d70bb3caefb24f1694212c0b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjY2ZmMTRhMjA4NDc4NGQ3MGJiM2NhZWZiMjRmMTY5NDIxMmMwYjQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-14T06:19:44Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-16T21:32:15Z"}, "message": "Simplify `LifetimeBounds`.\n\nThe `lifetimes` field is always empty. This commit removes it, and\nrenames the type as `Bounds`.", "tree": {"sha": "4a3474e50f65d29346812d582e9c61de499549b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a3474e50f65d29346812d582e9c61de499549b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bccff14a2084784d70bb3caefb24f1694212c0b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bccff14a2084784d70bb3caefb24f1694212c0b4", "html_url": "https://github.com/rust-lang/rust/commit/bccff14a2084784d70bb3caefb24f1694212c0b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bccff14a2084784d70bb3caefb24f1694212c0b4/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e92f4fb912e42d7bb177b1c5a6ee4b530172f45", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e92f4fb912e42d7bb177b1c5a6ee4b530172f45", "html_url": "https://github.com/rust-lang/rust/commit/8e92f4fb912e42d7bb177b1c5a6ee4b530172f45"}], "stats": {"total": 86, "additions": 34, "deletions": 52}, "files": [{"sha": "cef0da60a61c8c642693d930fc9079d9d9089e88", "filename": "src/librustc_builtin_macros/deriving/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fbounds.rs?ref=bccff14a2084784d70bb3caefb24f1694212c0b4", "patch": "@@ -18,7 +18,7 @@ pub fn expand_deriving_copy(\n         attributes: Vec::new(),\n         path: path_std!(marker::Copy),\n         additional_bounds: Vec::new(),\n-        generics: LifetimeBounds::empty(),\n+        generics: Bounds::empty(),\n         is_unsafe: false,\n         supports_unions: true,\n         methods: Vec::new(),"}, {"sha": "b307ee26c91d518e513cc31379a77f69698e2573", "filename": "src/librustc_builtin_macros/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fclone.rs?ref=bccff14a2084784d70bb3caefb24f1694212c0b4", "patch": "@@ -80,12 +80,12 @@ pub fn expand_deriving_clone(\n         attributes: Vec::new(),\n         path: path_std!(clone::Clone),\n         additional_bounds: bounds,\n-        generics: LifetimeBounds::empty(),\n+        generics: Bounds::empty(),\n         is_unsafe: false,\n         supports_unions: true,\n         methods: vec![MethodDef {\n             name: sym::clone,\n-            generics: LifetimeBounds::empty(),\n+            generics: Bounds::empty(),\n             explicit_self: borrowed_explicit_self(),\n             args: Vec::new(),\n             ret_ty: Self_,"}, {"sha": "d1b799cd6a112d841614ccba3f1d9731f70b76ef", "filename": "src/librustc_builtin_macros/deriving/cmp/eq.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Feq.rs?ref=bccff14a2084784d70bb3caefb24f1694212c0b4", "patch": "@@ -24,12 +24,12 @@ pub fn expand_deriving_eq(\n         attributes: Vec::new(),\n         path: path_std!(cmp::Eq),\n         additional_bounds: Vec::new(),\n-        generics: LifetimeBounds::empty(),\n+        generics: Bounds::empty(),\n         is_unsafe: false,\n         supports_unions: true,\n         methods: vec![MethodDef {\n             name: sym::assert_receiver_is_total_eq,\n-            generics: LifetimeBounds::empty(),\n+            generics: Bounds::empty(),\n             explicit_self: borrowed_explicit_self(),\n             args: vec![],\n             ret_ty: nil_ty(),\n@@ -43,13 +43,7 @@ pub fn expand_deriving_eq(\n         associated_types: Vec::new(),\n     };\n \n-    super::inject_impl_of_structural_trait(\n-        cx,\n-        span,\n-        item,\n-        path_std!(marker::StructuralEq),\n-        push,\n-    );\n+    super::inject_impl_of_structural_trait(cx, span, item, path_std!(marker::StructuralEq), push);\n \n     trait_def.expand_ext(cx, mitem, item, push, true)\n }"}, {"sha": "a4009f9f58b8d2d17fbe46e86a7fbd97d1c2368d", "filename": "src/librustc_builtin_macros/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Ford.rs?ref=bccff14a2084784d70bb3caefb24f1694212c0b4", "patch": "@@ -22,12 +22,12 @@ pub fn expand_deriving_ord(\n         attributes: Vec::new(),\n         path: path_std!(cmp::Ord),\n         additional_bounds: Vec::new(),\n-        generics: LifetimeBounds::empty(),\n+        generics: Bounds::empty(),\n         is_unsafe: false,\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::cmp,\n-            generics: LifetimeBounds::empty(),\n+            generics: Bounds::empty(),\n             explicit_self: borrowed_explicit_self(),\n             args: vec![(borrowed_self(), \"other\")],\n             ret_ty: Literal(path_std!(cmp::Ordering)),"}, {"sha": "d0676d8d8235ef28066542c2d11099b545fa352c", "filename": "src/librustc_builtin_macros/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=bccff14a2084784d70bb3caefb24f1694212c0b4", "patch": "@@ -69,7 +69,7 @@ pub fn expand_deriving_partial_eq(\n             let attrs = vec![cx.attribute(inline)];\n             MethodDef {\n                 name: $name,\n-                generics: LifetimeBounds::empty(),\n+                generics: Bounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec![(borrowed_self(), \"other\")],\n                 ret_ty: Literal(path_local!(bool)),\n@@ -102,7 +102,7 @@ pub fn expand_deriving_partial_eq(\n         attributes: Vec::new(),\n         path: path_std!(cmp::PartialEq),\n         additional_bounds: Vec::new(),\n-        generics: LifetimeBounds::empty(),\n+        generics: Bounds::empty(),\n         is_unsafe: false,\n         supports_unions: false,\n         methods,"}, {"sha": "e562c6c4092ff279c307a81f8346f829c0c2ef11", "filename": "src/librustc_builtin_macros/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=bccff14a2084784d70bb3caefb24f1694212c0b4", "patch": "@@ -23,7 +23,7 @@ pub fn expand_deriving_partial_ord(\n             let attrs = vec![cx.attribute(inline)];\n             MethodDef {\n                 name: $name,\n-                generics: LifetimeBounds::empty(),\n+                generics: Bounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec![(borrowed_self(), \"other\")],\n                 ret_ty: Literal(path_local!(bool)),\n@@ -50,7 +50,7 @@ pub fn expand_deriving_partial_ord(\n \n     let partial_cmp_def = MethodDef {\n         name: sym::partial_cmp,\n-        generics: LifetimeBounds::empty(),\n+        generics: Bounds::empty(),\n         explicit_self: borrowed_explicit_self(),\n         args: vec![(borrowed_self(), \"other\")],\n         ret_ty,\n@@ -82,7 +82,7 @@ pub fn expand_deriving_partial_ord(\n         attributes: vec![],\n         path: path_std!(cmp::PartialOrd),\n         additional_bounds: vec![],\n-        generics: LifetimeBounds::empty(),\n+        generics: Bounds::empty(),\n         is_unsafe: false,\n         supports_unions: false,\n         methods,"}, {"sha": "830eeb87f8d8f7af5fe7feff707f4afbf53a71a8", "filename": "src/librustc_builtin_macros/deriving/debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs?ref=bccff14a2084784d70bb3caefb24f1694212c0b4", "patch": "@@ -25,12 +25,12 @@ pub fn expand_deriving_debug(\n         attributes: Vec::new(),\n         path: path_std!(fmt::Debug),\n         additional_bounds: Vec::new(),\n-        generics: LifetimeBounds::empty(),\n+        generics: Bounds::empty(),\n         is_unsafe: false,\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::fmt,\n-            generics: LifetimeBounds::empty(),\n+            generics: Bounds::empty(),\n             explicit_self: borrowed_explicit_self(),\n             args: vec![(fmtr, \"f\")],\n             ret_ty: Literal(path_std!(fmt::Result)),"}, {"sha": "f5139d95a4c6120e71570ad5cb43057fecfb46df", "filename": "src/librustc_builtin_macros/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdecodable.rs?ref=bccff14a2084784d70bb3caefb24f1694212c0b4", "patch": "@@ -26,13 +26,12 @@ pub fn expand_deriving_rustc_decodable(\n         attributes: Vec::new(),\n         path: Path::new_(vec![krate, \"Decodable\"], None, vec![], PathKind::Global),\n         additional_bounds: Vec::new(),\n-        generics: LifetimeBounds::empty(),\n+        generics: Bounds::empty(),\n         is_unsafe: false,\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::decode,\n-            generics: LifetimeBounds {\n-                lifetimes: Vec::new(),\n+            generics: Bounds {\n                 bounds: vec![(\n                     typaram,\n                     vec![Path::new_(vec![krate, \"Decoder\"], None, vec![], PathKind::Global)],"}, {"sha": "f8d9c76d372d87fc7eb9599f9820e52d9480f8f5", "filename": "src/librustc_builtin_macros/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs?ref=bccff14a2084784d70bb3caefb24f1694212c0b4", "patch": "@@ -23,12 +23,12 @@ pub fn expand_deriving_default(\n         attributes: Vec::new(),\n         path: path_std!(default::Default),\n         additional_bounds: Vec::new(),\n-        generics: LifetimeBounds::empty(),\n+        generics: Bounds::empty(),\n         is_unsafe: false,\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: kw::Default,\n-            generics: LifetimeBounds::empty(),\n+            generics: Bounds::empty(),\n             explicit_self: None,\n             args: Vec::new(),\n             ret_ty: Self_,"}, {"sha": "cbb263989e6fa88f679ee18432359f26aa8f2f48", "filename": "src/librustc_builtin_macros/deriving/encodable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fencodable.rs?ref=bccff14a2084784d70bb3caefb24f1694212c0b4", "patch": "@@ -110,13 +110,12 @@ pub fn expand_deriving_rustc_encodable(\n         attributes: Vec::new(),\n         path: Path::new_(vec![krate, \"Encodable\"], None, vec![], PathKind::Global),\n         additional_bounds: Vec::new(),\n-        generics: LifetimeBounds::empty(),\n+        generics: Bounds::empty(),\n         is_unsafe: false,\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::encode,\n-            generics: LifetimeBounds {\n-                lifetimes: Vec::new(),\n+            generics: Bounds {\n                 bounds: vec![(\n                     typaram,\n                     vec![Path::new_(vec![krate, \"Encoder\"], None, vec![], PathKind::Global)],"}, {"sha": "be8eaa883eb33fd4c155c707f993141bd354124b", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=bccff14a2084784d70bb3caefb24f1694212c0b4", "patch": "@@ -191,7 +191,7 @@ use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n \n-use ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};\n+use ty::{Bounds, Path, Ptr, PtrTy, Self_, Ty};\n \n use crate::deriving;\n \n@@ -211,7 +211,7 @@ pub struct TraitDef<'a> {\n     pub additional_bounds: Vec<Ty<'a>>,\n \n     /// Any extra lifetimes and/or bounds, e.g., `D: serialize::Decoder`\n-    pub generics: LifetimeBounds<'a>,\n+    pub generics: Bounds<'a>,\n \n     /// Is it an `unsafe` trait?\n     pub is_unsafe: bool,\n@@ -228,7 +228,7 @@ pub struct MethodDef<'a> {\n     /// name of the method\n     pub name: Symbol,\n     /// List of generics, e.g., `R: rand::Rng`\n-    pub generics: LifetimeBounds<'a>,\n+    pub generics: Bounds<'a>,\n \n     /// Whether there is a self argument (outer Option) i.e., whether\n     /// this is a static function, and whether it is a pointer (inner"}, {"sha": "a031e4b649fa10fc9b9c8917d8f8e400a5967ed4", "filename": "src/librustc_builtin_macros/deriving/generic/ty.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs?ref=bccff14a2084784d70bb3caefb24f1694212c0b4", "patch": "@@ -223,16 +223,15 @@ fn mk_generics(params: Vec<ast::GenericParam>, span: Span) -> Generics {\n     }\n }\n \n-/// Lifetimes and bounds on type parameters\n+/// Bounds on type parameters.\n #[derive(Clone)]\n-pub struct LifetimeBounds<'a> {\n-    pub lifetimes: Vec<(&'a str, Vec<&'a str>)>,\n+pub struct Bounds<'a> {\n     pub bounds: Vec<(&'a str, Vec<Path<'a>>)>,\n }\n \n-impl<'a> LifetimeBounds<'a> {\n-    pub fn empty() -> LifetimeBounds<'a> {\n-        LifetimeBounds { lifetimes: Vec::new(), bounds: Vec::new() }\n+impl<'a> Bounds<'a> {\n+    pub fn empty() -> Bounds<'a> {\n+        Bounds { bounds: Vec::new() }\n     }\n     pub fn to_generics(\n         &self,\n@@ -242,18 +241,12 @@ impl<'a> LifetimeBounds<'a> {\n         self_generics: &Generics,\n     ) -> Generics {\n         let generic_params = self\n-            .lifetimes\n+            .bounds\n             .iter()\n-            .map(|&(lt, ref bounds)| {\n-                let bounds = bounds\n-                    .iter()\n-                    .map(|b| ast::GenericBound::Outlives(cx.lifetime(span, Ident::from_str(b))));\n-                cx.lifetime_def(span, Ident::from_str(lt), vec![], bounds.collect())\n-            })\n-            .chain(self.bounds.iter().map(|t| {\n+            .map(|t| {\n                 let (name, ref bounds) = *t;\n                 mk_ty_param(cx, span, name, &[], &bounds, self_ty, self_generics)\n-            }))\n+            })\n             .collect();\n \n         mk_generics(generic_params, span)"}, {"sha": "34e04a202696af1f7c0b203199a0fcba0cf6c3ab", "filename": "src/librustc_builtin_macros/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccff14a2084784d70bb3caefb24f1694212c0b4/src%2Flibrustc_builtin_macros%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fhash.rs?ref=bccff14a2084784d70bb3caefb24f1694212c0b4", "patch": "@@ -25,15 +25,12 @@ pub fn expand_deriving_hash(\n         attributes: Vec::new(),\n         path,\n         additional_bounds: Vec::new(),\n-        generics: LifetimeBounds::empty(),\n+        generics: Bounds::empty(),\n         is_unsafe: false,\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::hash,\n-            generics: LifetimeBounds {\n-                lifetimes: Vec::new(),\n-                bounds: vec![(typaram, vec![path_std!(hash::Hasher)])],\n-            },\n+            generics: Bounds { bounds: vec![(typaram, vec![path_std!(hash::Hasher)])] },\n             explicit_self: borrowed_explicit_self(),\n             args: vec![(Ptr(Box::new(Literal(arg)), Borrowed(None, Mutability::Mut)), \"state\")],\n             ret_ty: nil_ty(),"}]}