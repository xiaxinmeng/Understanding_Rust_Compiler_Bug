{"sha": "baab72e611fa985c2e62e964f3a48ad31367220f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYWI3MmU2MTFmYTk4NWMyZTYyZTk2NGYzYTQ4YWQzMTM2NzIyMGY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-09-18T15:50:04Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-09-18T15:50:04Z"}, "message": "Reduce visibility of non-proc-macros\n\nproc-macro crates only export proc-macros, but currently other items\nare also considered public (and show up in completion)", "tree": {"sha": "278514b9e672529c43f20410fce7ce49b3d0ba89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/278514b9e672529c43f20410fce7ce49b3d0ba89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baab72e611fa985c2e62e964f3a48ad31367220f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baab72e611fa985c2e62e964f3a48ad31367220f", "html_url": "https://github.com/rust-lang/rust/commit/baab72e611fa985c2e62e964f3a48ad31367220f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baab72e611fa985c2e62e964f3a48ad31367220f/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "069045015c4b400754632c505f6ef19e32f9a4db", "url": "https://api.github.com/repos/rust-lang/rust/commits/069045015c4b400754632c505f6ef19e32f9a4db", "html_url": "https://github.com/rust-lang/rust/commit/069045015c4b400754632c505f6ef19e32f9a4db"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "99820c275cf4c91788653140b0a1646895597a81", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/baab72e611fa985c2e62e964f3a48ad31367220f/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baab72e611fa985c2e62e964f3a48ad31367220f/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=baab72e611fa985c2e62e964f3a48ad31367220f", "patch": "@@ -5,10 +5,12 @@ use std::collections::hash_map::Entry;\n \n use base_db::CrateId;\n use hir_expand::name::Name;\n+use hir_expand::MacroDefKind;\n use once_cell::sync::Lazy;\n use rustc_hash::{FxHashMap, FxHashSet};\n use test_utils::mark;\n \n+use crate::ModuleId;\n use crate::{\n     db::DefDatabase, per_ns::PerNs, visibility::Visibility, AdtId, BuiltinType, HasModule, ImplId,\n     LocalModuleId, Lookup, MacroDefId, ModuleDefId, TraitId,\n@@ -265,6 +267,29 @@ impl ItemScope {\n     pub(crate) fn collect_legacy_macros(&self) -> FxHashMap<Name, MacroDefId> {\n         self.legacy_macros.clone()\n     }\n+\n+    /// Marks everything that is not a procedural macro as private to `this_module`.\n+    pub(crate) fn censor_non_proc_macros(&mut self, this_module: ModuleId) {\n+        for vis in self\n+            .types\n+            .values_mut()\n+            .chain(self.values.values_mut())\n+            .map(|(_, v)| v)\n+            .chain(self.unnamed_trait_imports.values_mut())\n+        {\n+            *vis = Visibility::Module(this_module);\n+        }\n+\n+        for (mac, vis) in self.macros.values_mut() {\n+            if let MacroDefKind::ProcMacro(_) = mac.kind {\n+                // FIXME: Technically this is insufficient since reexports of proc macros are also\n+                // forbidden. Practically nobody does that.\n+                continue;\n+            }\n+\n+            *vis = Visibility::Module(this_module);\n+        }\n+    }\n }\n \n impl PerNs {"}, {"sha": "f98a42643afb8c37f1c0ecccceb96c76f5b6dbac", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/baab72e611fa985c2e62e964f3a48ad31367220f/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baab72e611fa985c2e62e964f3a48ad31367220f/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=baab72e611fa985c2e62e964f3a48ad31367220f", "patch": "@@ -87,6 +87,7 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: CrateDefMap) -> Cr\n         mod_dirs: FxHashMap::default(),\n         cfg_options,\n         proc_macros,\n+        exports_proc_macros: false,\n         from_glob_import: Default::default(),\n     };\n     collector.collect();\n@@ -203,6 +204,7 @@ struct DefCollector<'a> {\n     mod_dirs: FxHashMap<LocalModuleId, ModDir>,\n     cfg_options: &'a CfgOptions,\n     proc_macros: Vec<(Name, ProcMacroExpander)>,\n+    exports_proc_macros: bool,\n     from_glob_import: PerNsGlobImports,\n }\n \n@@ -260,9 +262,25 @@ impl DefCollector<'_> {\n             self.record_resolved_import(directive)\n         }\n         self.unresolved_imports = unresolved_imports;\n+\n+        // FIXME: This condition should instead check if this is a `proc-macro` type crate.\n+        if self.exports_proc_macros {\n+            // A crate exporting procedural macros is not allowed to export anything else.\n+            //\n+            // Additionally, while the proc macro entry points must be `pub`, they are not publicly\n+            // exported in type/value namespace. This function reduces the visibility of all items\n+            // in the crate root that aren't proc macros.\n+            let root = self.def_map.root;\n+            let root = &mut self.def_map.modules[root];\n+            root.scope.censor_non_proc_macros(ModuleId {\n+                krate: self.def_map.krate,\n+                local_id: self.def_map.root,\n+            });\n+        }\n     }\n \n     fn resolve_proc_macro(&mut self, name: &Name) {\n+        self.exports_proc_macros = true;\n         let macro_def = match self.proc_macros.iter().find(|(n, _)| n == name) {\n             Some((_, expander)) => MacroDefId {\n                 ast_id: None,\n@@ -1310,6 +1328,7 @@ mod tests {\n             mod_dirs: FxHashMap::default(),\n             cfg_options: &CfgOptions::default(),\n             proc_macros: Default::default(),\n+            exports_proc_macros: false,\n             from_glob_import: Default::default(),\n         };\n         collector.collect();"}, {"sha": "0851c3b7d89524edf5cf8cb33c3622f571f12141", "filename": "crates/hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/baab72e611fa985c2e62e964f3a48ad31367220f/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baab72e611fa985c2e62e964f3a48ad31367220f/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=baab72e611fa985c2e62e964f3a48ad31367220f", "patch": "@@ -699,3 +699,44 @@ fn resolves_proc_macros() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn proc_macro_censoring() {\n+    // Make sure that only proc macros are publicly exported from proc-macro crates.\n+\n+    check(\n+        r\"\n+        //- /main.rs crate:main deps:macros\n+        pub use macros::*;\n+\n+        //- /macros.rs crate:macros\n+        pub struct TokenStream;\n+\n+        #[proc_macro]\n+        pub fn function_like_macro(args: TokenStream) -> TokenStream {\n+            args\n+        }\n+\n+        #[proc_macro_attribute]\n+        pub fn attribute_macro(_args: TokenStream, item: TokenStream) -> TokenStream {\n+            item\n+        }\n+\n+        #[proc_macro_derive(DummyTrait)]\n+        pub fn derive_macro(_item: TokenStream) -> TokenStream {\n+            TokenStream\n+        }\n+\n+        #[macro_export]\n+        macro_rules! mbe {\n+            () => {};\n+        }\n+        \",\n+        expect![[r#\"\n+            crate\n+            DummyTrait: m\n+            attribute_macro: m\n+            function_like_macro: m\n+        \"#]],\n+    );\n+}"}]}