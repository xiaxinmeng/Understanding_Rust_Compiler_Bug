{"sha": "7dae5c0e06f10042fc3b29a55bf6285e539c06db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYWU1YzBlMDZmMTAwNDJmYzNiMjlhNTViZjYyODVlNTM5YzA2ZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-22T06:36:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-22T06:36:11Z"}, "message": "Auto merge of #51686 - nikomatsakis:issue-51415-borrowck-match-default-bindings-bug, r=eddyb\n\nyet another \"old borrowck\" bug around match default bindings\n\nWe were getting the type of the parameter from its pattern, but that didn't include adjustments. I did a `ripgrep` around and this seemed to be the only affected case.\n\nThe reason this didn't show up as an ICE earlier is that mem-categorization is lenient with respect to weird discrepancies. I am going to add more delay-span-bug calls shortly around that (I'll push onto the PR).\n\nThis example is an ICE, but I presume that there is a way to make a soundness example out of this -- it basically ignores borrows occuring inside match-default-bindings in a closure, though only if the implicit deref is at the top-level. It happens though that this occurs frequently in iterators, which often give a `&T` parameter.\n\nFixes #51415\nFixes #49534\n\nr? @eddyb", "tree": {"sha": "b5d5243140f0919ede4e9d5771dd73ea6b7593f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5d5243140f0919ede4e9d5771dd73ea6b7593f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dae5c0e06f10042fc3b29a55bf6285e539c06db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dae5c0e06f10042fc3b29a55bf6285e539c06db", "html_url": "https://github.com/rust-lang/rust/commit/7dae5c0e06f10042fc3b29a55bf6285e539c06db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dae5c0e06f10042fc3b29a55bf6285e539c06db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b17d31f1147f840231c43b1ac1478a497af20df", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b17d31f1147f840231c43b1ac1478a497af20df", "html_url": "https://github.com/rust-lang/rust/commit/4b17d31f1147f840231c43b1ac1478a497af20df"}, {"sha": "8289bf2994cc0522616275594cd2bd1a8d10d4b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8289bf2994cc0522616275594cd2bd1a8d10d4b4", "html_url": "https://github.com/rust-lang/rust/commit/8289bf2994cc0522616275594cd2bd1a8d10d4b4"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "8ef45a966da85647992a661820e2af1c2aeb6a23", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dae5c0e06f10042fc3b29a55bf6285e539c06db/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dae5c0e06f10042fc3b29a55bf6285e539c06db/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=7dae5c0e06f10042fc3b29a55bf6285e539c06db", "patch": "@@ -313,7 +313,8 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n         debug!(\"consume_body(body={:?})\", body);\n \n         for arg in &body.arguments {\n-            let arg_ty = return_if_err!(self.mc.node_ty(arg.pat.hir_id));\n+            let arg_ty = return_if_err!(self.mc.pat_ty_adjusted(&arg.pat));\n+            debug!(\"consume_body: arg_ty = {:?}\", arg_ty);\n \n             let fn_body_scope_r =\n                 self.tcx().mk_region(ty::ReScope(region::Scope::Node(body.value.hir_id.local_id)));"}, {"sha": "597872ef45de047aade45f0ca805cbe8b5104acc", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7dae5c0e06f10042fc3b29a55bf6285e539c06db/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dae5c0e06f10042fc3b29a55bf6285e539c06db/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7dae5c0e06f10042fc3b29a55bf6285e539c06db", "patch": "@@ -517,7 +517,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n     ///   implicit deref patterns attached (e.g., it is really\n     ///   `&Some(x)`). In that case, we return the \"outermost\" type\n     ///   (e.g., `&Option<T>).\n-    fn pat_ty(&self, pat: &hir::Pat) -> McResult<Ty<'tcx>> {\n+    pub fn pat_ty_adjusted(&self, pat: &hir::Pat) -> McResult<Ty<'tcx>> {\n         // Check for implicit `&` types wrapping the pattern; note\n         // that these are never attached to binding patterns, so\n         // actually this is somewhat \"disjoint\" from the code below\n@@ -1300,7 +1300,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             };\n \n             for (i, subpat) in subpats.iter().enumerate_and_adjust(expected_len, ddpos) {\n-                let subpat_ty = self.pat_ty(&subpat)?; // see (*2)\n+                let subpat_ty = self.pat_ty_adjusted(&subpat)?; // see (*2)\n                 let interior = InteriorField(FieldIndex(i, Name::intern(&i.to_string())));\n                 let subcmt = Rc::new(self.cat_imm_interior(pat, cmt.clone(), subpat_ty, interior));\n                 self.cat_pattern_(subcmt, &subpat, op)?;\n@@ -1323,7 +1323,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             };\n \n             for fp in field_pats {\n-                let field_ty = self.pat_ty(&fp.node.pat)?; // see (*2)\n+                let field_ty = self.pat_ty_adjusted(&fp.node.pat)?; // see (*2)\n                 let f_index = self.tcx.field_index(fp.node.id, self.tables);\n                 let cmt_field = Rc::new(self.cat_field(pat, cmt.clone(), f_index,\n                                                        fp.node.ident, field_ty));\n@@ -1342,7 +1342,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 ref ty => span_bug!(pat.span, \"tuple pattern unexpected type {:?}\", ty),\n             };\n             for (i, subpat) in subpats.iter().enumerate_and_adjust(expected_len, ddpos) {\n-                let subpat_ty = self.pat_ty(&subpat)?; // see (*2)\n+                let subpat_ty = self.pat_ty_unadjusted(&subpat)?; // see (*2)\n                 let interior = InteriorField(FieldIndex(i, Name::intern(&i.to_string())));\n                 let subcmt = Rc::new(self.cat_imm_interior(pat, cmt.clone(), subpat_ty, interior));\n                 self.cat_pattern_(subcmt, &subpat, op)?;"}, {"sha": "79454b635263c8618162dad4396894aa1cc7adbc", "filename": "src/test/ui/borrowck/issue-51415.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7dae5c0e06f10042fc3b29a55bf6285e539c06db/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dae5c0e06f10042fc3b29a55bf6285e539c06db/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.nll.stderr?ref=7dae5c0e06f10042fc3b29a55bf6285e539c06db", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/issue-51415.rs:16:47\n+   |\n+LL |     let opt = a.iter().enumerate().find(|(_, &s)| {\n+   |                                               ^ cannot move out of borrowed content\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "9067a50a8476d17aa5cb6c59108f2257c780b639", "filename": "src/test/ui/borrowck/issue-51415.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7dae5c0e06f10042fc3b29a55bf6285e539c06db/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dae5c0e06f10042fc3b29a55bf6285e539c06db/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.rs?ref=7dae5c0e06f10042fc3b29a55bf6285e539c06db", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #51415: match default bindings were failing to\n+// see the \"move out\" implied by `&s` below.\n+\n+fn main() {\n+    let a = vec![String::from(\"a\")];\n+    let opt = a.iter().enumerate().find(|(_, &s)| {\n+        //~^ ERROR cannot move out\n+        *s == String::from(\"d\")\n+    }).map(|(i, _)| i);\n+    println!(\"{:?}\", opt);\n+}"}, {"sha": "b4b0bc7594305af98f6ac62b395a473007a836d6", "filename": "src/test/ui/borrowck/issue-51415.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7dae5c0e06f10042fc3b29a55bf6285e539c06db/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dae5c0e06f10042fc3b29a55bf6285e539c06db/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.stderr?ref=7dae5c0e06f10042fc3b29a55bf6285e539c06db", "patch": "@@ -0,0 +1,12 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/issue-51415.rs:16:46\n+   |\n+LL |     let opt = a.iter().enumerate().find(|(_, &s)| {\n+   |                                              ^-\n+   |                                              ||\n+   |                                              |hint: to prevent move, use `ref s` or `ref mut s`\n+   |                                              cannot move out of borrowed content\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}]}