{"sha": "1f3303163c3f4a725b29de5e00eb14a5c53dd16e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMzMwMzE2M2MzZjRhNzI1YjI5ZGU1ZTAwZWIxNGE1YzUzZGQxNmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-13T00:44:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-13T00:44:53Z"}, "message": "Move filemap ctors to static methods", "tree": {"sha": "14509e622002b99867f9c7b35403eb3bfe1c3652", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14509e622002b99867f9c7b35403eb3bfe1c3652"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f3303163c3f4a725b29de5e00eb14a5c53dd16e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f3303163c3f4a725b29de5e00eb14a5c53dd16e", "html_url": "https://github.com/rust-lang/rust/commit/1f3303163c3f4a725b29de5e00eb14a5c53dd16e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f3303163c3f4a725b29de5e00eb14a5c53dd16e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f881b48cb058236494ccc2f6d54cf617ae21a7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f881b48cb058236494ccc2f6d54cf617ae21a7f", "html_url": "https://github.com/rust-lang/rust/commit/5f881b48cb058236494ccc2f6d54cf617ae21a7f"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "ec7d3146bb9546d839275e48366ba027ff89e537", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1f3303163c3f4a725b29de5e00eb14a5c53dd16e/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3303163c3f4a725b29de5e00eb14a5c53dd16e/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=1f3303163c3f4a725b29de5e00eb14a5c53dd16e", "patch": "@@ -63,6 +63,26 @@ struct filemap {\n     start_pos: file_pos, mut lines: ~[file_pos]\n }\n \n+impl filemap {\n+    static fn new_w_substr(+filename: filename, +substr: file_substr,\n+                           src: @~str,\n+                           start_pos_ch: uint, start_pos_byte: uint)\n+        -> filemap {\n+        return filemap {\n+            name: filename, substr: substr, src: src,\n+            start_pos: file_pos {ch: start_pos_ch, byte: start_pos_byte},\n+            mut lines: ~[file_pos {ch: start_pos_ch, byte: start_pos_byte}]\n+        };\n+    }\n+\n+    static fn new(+filename: filename, src: @~str,\n+                  start_pos_ch: uint, start_pos_byte: uint)\n+        -> filemap {\n+        return filemap::new_w_substr(filename, fss_none, src,\n+                                     start_pos_ch, start_pos_byte);\n+    }\n+}\n+\n struct CodeMap_ {\n     files: DVec<@filemap>\n }\n@@ -75,24 +95,6 @@ struct loc {\n \n fn new_codemap() -> CodeMap { @CodeMap_ {files: DVec()} }\n \n-fn new_filemap_w_substr(+filename: filename, +substr: file_substr,\n-                        src: @~str,\n-                        start_pos_ch: uint, start_pos_byte: uint)\n-   -> filemap {\n-    return filemap {\n-        name: filename, substr: substr, src: src,\n-        start_pos: file_pos {ch: start_pos_ch, byte: start_pos_byte},\n-        mut lines: ~[file_pos {ch: start_pos_ch, byte: start_pos_byte}]\n-    };\n-}\n-\n-fn new_filemap(+filename: filename, src: @~str,\n-               start_pos_ch: uint, start_pos_byte: uint)\n-    -> filemap {\n-    return new_filemap_w_substr(filename, fss_none, src,\n-                             start_pos_ch, start_pos_byte);\n-}\n-\n fn mk_substr_filename(cm: CodeMap, sp: span) -> ~str\n {\n     let pos = lookup_char_pos(cm, sp.lo);"}, {"sha": "9547d7a1d130c804e9c78039b6fb773a45973f11", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f3303163c3f4a725b29de5e00eb14a5c53dd16e/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3303163c3f4a725b29de5e00eb14a5c53dd16e/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=1f3303163c3f4a725b29de5e00eb14a5c53dd16e", "patch": "@@ -20,6 +20,7 @@ use util::interner;\n use diagnostic::{span_handler, mk_span_handler, mk_handler, emitter};\n use lexer::{reader, string_reader};\n use parse::token::{ident_interner, mk_ident_interner};\n+use codemap::filemap;\n \n type parse_sess = @{\n     cm: codemap::CodeMap,\n@@ -172,7 +173,7 @@ fn new_parser_etc_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n                                   +name: ~str, +ss: codemap::file_substr,\n                                   source: @~str) -> (Parser, string_reader) {\n     let ftype = parser::SOURCE_FILE;\n-    let filemap = @codemap::new_filemap_w_substr\n+    let filemap = @filemap::new_w_substr\n         (name, ss, source, sess.chpos, sess.byte_pos);\n     sess.cm.files.push(filemap);\n     let srdr = lexer::new_string_reader(sess.span_diagnostic, filemap,\n@@ -197,8 +198,8 @@ fn new_parser_etc_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n       result::Err(e) => sess.span_diagnostic.handler().fatal(e)\n     }\n     let src = @result::unwrap(res);\n-    let filemap = @codemap::new_filemap(path.to_str(), src,\n-                                       sess.chpos, sess.byte_pos);\n+    let filemap = @filemap::new(path.to_str(), src,\n+                                sess.chpos, sess.byte_pos);\n     sess.cm.files.push(filemap);\n     let srdr = lexer::new_string_reader(sess.span_diagnostic, filemap,\n                                         sess.interner);"}, {"sha": "0ed8bd12361e5c81a865bc9489a7acca4ca9737a", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f3303163c3f4a725b29de5e00eb14a5c53dd16e/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3303163c3f4a725b29de5e00eb14a5c53dd16e/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=1f3303163c3f4a725b29de5e00eb14a5c53dd16e", "patch": "@@ -3,6 +3,7 @@ use io::ReaderUtil;\n use util::interner;\n use lexer::{string_reader, bump, is_eof, nextch,\n                is_whitespace, get_str_from, reader};\n+use codemap::filemap;\n \n export cmnt;\n export lit;\n@@ -288,7 +289,7 @@ fn gather_comments_and_literals(span_diagnostic: diagnostic::span_handler,\n     let src = @str::from_bytes(srdr.read_whole_stream());\n     let itr = parse::token::mk_fake_ident_interner();\n     let rdr = lexer::new_low_level_string_reader\n-        (span_diagnostic, @codemap::new_filemap(path, src, 0u, 0u), itr);\n+        (span_diagnostic, @filemap::new(path, src, 0u, 0u), itr);\n \n     let mut comments: ~[cmnt] = ~[];\n     let mut literals: ~[lit] = ~[];"}]}