{"sha": "753bc7ddf8a0f00acf039731947a12d06ad30884", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1M2JjN2RkZjhhMGYwMGFjZjAzOTczMTk0N2ExMmQwNmFkMzA4ODQ=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-03-31T19:35:07Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-03-31T22:15:14Z"}, "message": "Inline start_thread into its callers.", "tree": {"sha": "bffcaacea7b479327fa5c058c32f79e1c8cdcc5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bffcaacea7b479327fa5c058c32f79e1c8cdcc5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/753bc7ddf8a0f00acf039731947a12d06ad30884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/753bc7ddf8a0f00acf039731947a12d06ad30884", "html_url": "https://github.com/rust-lang/rust/commit/753bc7ddf8a0f00acf039731947a12d06ad30884", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/753bc7ddf8a0f00acf039731947a12d06ad30884/comments", "author": null, "committer": null, "parents": [{"sha": "64e5327b6e7ad79f4a3ca7de17ac105c8c59277e", "url": "https://api.github.com/repos/rust-lang/rust/commits/64e5327b6e7ad79f4a3ca7de17ac105c8c59277e", "html_url": "https://github.com/rust-lang/rust/commit/64e5327b6e7ad79f4a3ca7de17ac105c8c59277e"}], "stats": {"total": 56, "additions": 30, "deletions": 26}, "files": [{"sha": "112bb1ce3af0ad4765d480b5b0d014b3ae3c35c3", "filename": "src/libstd/sys/cloudabi/thread.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/753bc7ddf8a0f00acf039731947a12d06ad30884/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753bc7ddf8a0f00acf039731947a12d06ad30884/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs?ref=753bc7ddf8a0f00acf039731947a12d06ad30884", "patch": "@@ -4,8 +4,8 @@ use crate::io;\n use crate::mem;\n use crate::ptr;\n use crate::sys::cloudabi::abi;\n+use crate::sys::stack_overflow;\n use crate::sys::time::checked_dur2intervals;\n-use crate::sys_common::thread::*;\n use crate::time::Duration;\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 2 * 1024 * 1024;\n@@ -49,7 +49,11 @@ impl Thread {\n \n         extern \"C\" fn thread_start(main: *mut libc::c_void) -> *mut libc::c_void {\n             unsafe {\n-                start_thread(main as *mut u8);\n+                // Next, set up our stack overflow handler which may get triggered if we run\n+                // out of stack.\n+                let _handler = stack_overflow::Handler::new();\n+                // Finally, let's run some code.\n+                Box::from_raw(main as *mut Box<dyn FnOnce()>)();\n             }\n             ptr::null_mut()\n         }"}, {"sha": "f92c18a3a45215c28ec08f08352bb8ffbb5ffa1b", "filename": "src/libstd/sys/hermit/thread.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/753bc7ddf8a0f00acf039731947a12d06ad30884/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753bc7ddf8a0f00acf039731947a12d06ad30884/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs?ref=753bc7ddf8a0f00acf039731947a12d06ad30884", "patch": "@@ -5,11 +5,10 @@ use crate::fmt;\n use crate::io;\n use crate::mem;\n use crate::sys::hermit::abi;\n+use crate::sys::stack_overflow;\n use crate::time::Duration;\n use core::u32;\n \n-use crate::sys_common::thread::*;\n-\n pub type Tid = abi::Tid;\n \n /// Priority of a task\n@@ -70,7 +69,11 @@ impl Thread {\n \n         extern \"C\" fn thread_start(main: usize) {\n             unsafe {\n-                start_thread(main as *mut u8);\n+                // Next, set up our stack overflow handler which may get triggered if we run\n+                // out of stack.\n+                let _handler = stack_overflow::Handler::new();\n+                // Finally, let's run some code.\n+                Box::from_raw(main as *mut Box<dyn FnOnce()>)();\n             }\n         }\n     }"}, {"sha": "513a1fde331b76dbe0c312451f10374fb91203a3", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/753bc7ddf8a0f00acf039731947a12d06ad30884/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753bc7ddf8a0f00acf039731947a12d06ad30884/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=753bc7ddf8a0f00acf039731947a12d06ad30884", "patch": "@@ -3,11 +3,9 @@ use crate::ffi::CStr;\n use crate::io;\n use crate::mem;\n use crate::ptr;\n-use crate::sys::os;\n+use crate::sys::{os, stack_overflow};\n use crate::time::Duration;\n \n-use crate::sys_common::thread::*;\n-\n #[cfg(not(target_os = \"l4re\"))]\n pub const DEFAULT_MIN_STACK_SIZE: usize = 2 * 1024 * 1024;\n #[cfg(target_os = \"l4re\")]\n@@ -84,7 +82,11 @@ impl Thread {\n \n         extern \"C\" fn thread_start(main: *mut libc::c_void) -> *mut libc::c_void {\n             unsafe {\n-                start_thread(main as *mut u8);\n+                // Next, set up our stack overflow handler which may get triggered if we run\n+                // out of stack.\n+                let _handler = stack_overflow::Handler::new();\n+                // Finally, let's run some code.\n+                Box::from_raw(main as *mut Box<dyn FnOnce()>)();\n             }\n             ptr::null_mut()\n         }"}, {"sha": "92163865b799adfd7438bf8ae802eb2090c1c0a2", "filename": "src/libstd/sys/vxworks/thread.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/753bc7ddf8a0f00acf039731947a12d06ad30884/src%2Flibstd%2Fsys%2Fvxworks%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753bc7ddf8a0f00acf039731947a12d06ad30884/src%2Flibstd%2Fsys%2Fvxworks%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fthread.rs?ref=753bc7ddf8a0f00acf039731947a12d06ad30884", "patch": "@@ -3,11 +3,9 @@ use crate::ffi::CStr;\n use crate::io;\n use crate::mem;\n use crate::ptr;\n-use crate::sys::os;\n+use crate::sys::{os, stack_overflow};\n use crate::time::Duration;\n \n-use crate::sys_common::thread::*;\n-\n pub const DEFAULT_MIN_STACK_SIZE: usize = 0x40000; // 256K\n \n pub struct Thread {\n@@ -72,7 +70,11 @@ impl Thread {\n \n         extern \"C\" fn thread_start(main: *mut libc::c_void) -> *mut libc::c_void {\n             unsafe {\n-                start_thread(main as *mut u8);\n+                // Next, set up our stack overflow handler which may get triggered if we run\n+                // out of stack.\n+                let _handler = stack_overflow::Handler::new();\n+                // Finally, let's run some code.\n+                Box::from_raw(main as *mut Box<dyn FnOnce()>)();\n             }\n             ptr::null_mut()\n         }"}, {"sha": "a1cad19d0f57ee05b6942dd17b5239ad613049a5", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/753bc7ddf8a0f00acf039731947a12d06ad30884/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753bc7ddf8a0f00acf039731947a12d06ad30884/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=753bc7ddf8a0f00acf039731947a12d06ad30884", "patch": "@@ -4,7 +4,7 @@ use crate::mem;\n use crate::ptr;\n use crate::sys::c;\n use crate::sys::handle::Handle;\n-use crate::sys_common::thread::*;\n+use crate::sys::stack_overflow;\n use crate::time::Duration;\n \n use libc::c_void;\n@@ -50,7 +50,11 @@ impl Thread {\n \n         extern \"system\" fn thread_start(main: *mut c_void) -> c::DWORD {\n             unsafe {\n-                start_thread(main as *mut u8);\n+                // Next, set up our stack overflow handler which may get triggered if we run\n+                // out of stack.\n+                let _handler = stack_overflow::Handler::new();\n+                // Finally, let's run some code.\n+                Box::from_raw(main as *mut Box<dyn FnOnce()>)();\n             }\n             0\n         }"}, {"sha": "f3a8bef8f718f3079384c8039a25174526de1d39", "filename": "src/libstd/sys_common/thread.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/753bc7ddf8a0f00acf039731947a12d06ad30884/src%2Flibstd%2Fsys_common%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753bc7ddf8a0f00acf039731947a12d06ad30884/src%2Flibstd%2Fsys_common%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread.rs?ref=753bc7ddf8a0f00acf039731947a12d06ad30884", "patch": "@@ -1,18 +1,7 @@\n use crate::env;\n use crate::sync::atomic::{self, Ordering};\n-use crate::sys::stack_overflow;\n use crate::sys::thread as imp;\n \n-#[allow(dead_code)]\n-pub unsafe fn start_thread(main: *mut u8) {\n-    // Next, set up our stack overflow handler which may get triggered if we run\n-    // out of stack.\n-    let _handler = stack_overflow::Handler::new();\n-\n-    // Finally, let's run some code.\n-    Box::from_raw(main as *mut Box<dyn FnOnce()>)()\n-}\n-\n pub fn min_stack() -> usize {\n     static MIN: atomic::AtomicUsize = atomic::AtomicUsize::new(0);\n     match MIN.load(Ordering::SeqCst) {"}]}