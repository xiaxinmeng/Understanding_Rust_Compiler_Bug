{"sha": "b96d3612390e070936a176571c946ad0cafa69a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NmQzNjEyMzkwZTA3MDkzNmExNzY1NzFjOTQ2YWQwY2FmYTY5YTk=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-25T16:55:50Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-25T16:55:50Z"}, "message": "Handle structs/enums with missing names a bit better", "tree": {"sha": "8e7bf01bb4db76502c787ccd1935d18dfcc603cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e7bf01bb4db76502c787ccd1935d18dfcc603cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b96d3612390e070936a176571c946ad0cafa69a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b96d3612390e070936a176571c946ad0cafa69a9", "html_url": "https://github.com/rust-lang/rust/commit/b96d3612390e070936a176571c946ad0cafa69a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b96d3612390e070936a176571c946ad0cafa69a9/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e4d41d1e409315ce42cb3c3479236b5e73d0643", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e4d41d1e409315ce42cb3c3479236b5e73d0643", "html_url": "https://github.com/rust-lang/rust/commit/3e4d41d1e409315ce42cb3c3479236b5e73d0643"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "40a45b83129cc3d97079445424d20868269f7299", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b96d3612390e070936a176571c946ad0cafa69a9/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96d3612390e070936a176571c946ad0cafa69a9/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=b96d3612390e070936a176571c946ad0cafa69a9", "patch": "@@ -30,14 +30,14 @@ impl Struct {\n         Ok(db.struct_data(self.def_id)?)\n     }\n \n-    pub fn name(&self, db: &impl HirDatabase) -> Cancelable<SmolStr> {\n+    pub fn name(&self, db: &impl HirDatabase) -> Cancelable<Option<SmolStr>> {\n         Ok(db.struct_data(self.def_id)?.name.clone())\n     }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct StructData {\n-    name: SmolStr,\n+    name: Option<SmolStr>,\n     variant_data: Arc<VariantData>,\n }\n \n@@ -47,17 +47,14 @@ impl StructData {\n         module: &Module,\n         struct_def: ast::StructDef,\n     ) -> Cancelable<StructData> {\n-        let name = struct_def\n-            .name()\n-            .map(|n| n.text())\n-            .unwrap_or(SmolStr::new(\"[error]\"));\n+        let name = struct_def.name().map(|n| n.text());\n         let variant_data = VariantData::new(db, module, struct_def.flavor())?;\n         let variant_data = Arc::new(variant_data);\n         Ok(StructData { name, variant_data })\n     }\n \n-    pub fn name(&self) -> &SmolStr {\n-        &self.name\n+    pub fn name(&self) -> Option<&SmolStr> {\n+        self.name.as_ref()\n     }\n \n     pub fn variant_data(&self) -> &Arc<VariantData> {\n@@ -78,14 +75,14 @@ impl Enum {\n         self.def_id\n     }\n \n-    pub fn name(&self, db: &impl HirDatabase) -> Cancelable<SmolStr> {\n+    pub fn name(&self, db: &impl HirDatabase) -> Cancelable<Option<SmolStr>> {\n         Ok(db.enum_data(self.def_id)?.name.clone())\n     }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct EnumData {\n-    name: SmolStr,\n+    name: Option<SmolStr>,\n     variants: Vec<(SmolStr, Arc<VariantData>)>,\n }\n \n@@ -95,10 +92,7 @@ impl EnumData {\n         module: &Module,\n         enum_def: ast::EnumDef,\n     ) -> Cancelable<Self> {\n-        let name = enum_def\n-            .name()\n-            .map(|n| n.text())\n-            .unwrap_or(SmolStr::new(\"[error]\"));\n+        let name = enum_def.name().map(|n| n.text());\n         let variants = if let Some(evl) = enum_def.variant_list() {\n             evl.variants()\n                 .map(|v| {"}, {"sha": "3674688ef4cce43aff7e593aa8e9f9353192a223", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b96d3612390e070936a176571c946ad0cafa69a9/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96d3612390e070936a176571c946ad0cafa69a9/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=b96d3612390e070936a176571c946ad0cafa69a9", "patch": "@@ -16,7 +16,7 @@ use ra_syntax::{\n };\n \n use crate::{\n-    Def, DefId, FnScopes, Module, Function, Struct, Path,\n+    Def, DefId, FnScopes, Module, Function, Struct, Enum, Path,\n     db::HirDatabase,\n     adt::VariantData,\n };\n@@ -251,7 +251,18 @@ pub fn type_for_fn(db: &impl HirDatabase, f: Function) -> Cancelable<Ty> {\n pub fn type_for_struct(db: &impl HirDatabase, s: Struct) -> Cancelable<Ty> {\n     Ok(Ty::Adt {\n         def_id: s.def_id(),\n-        name: s.name(db)?,\n+        name: s\n+            .name(db)?\n+            .unwrap_or_else(|| SmolStr::new(\"[unnamed struct]\")),\n+    })\n+}\n+\n+pub fn type_for_enum(db: &impl HirDatabase, s: Enum) -> Cancelable<Ty> {\n+    Ok(Ty::Adt {\n+        def_id: s.def_id(),\n+        name: s\n+            .name(db)?\n+            .unwrap_or_else(|| SmolStr::new(\"[unnamed enum]\")),\n     })\n }\n \n@@ -264,10 +275,7 @@ pub fn type_for_def(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Ty> {\n         }\n         Def::Function(f) => type_for_fn(db, f),\n         Def::Struct(s) => type_for_struct(db, s),\n-        Def::Enum(e) => Ok(Ty::Adt {\n-            def_id,\n-            name: e.name(db)?,\n-        }),\n+        Def::Enum(e) => type_for_enum(db, e),\n         Def::Item => {\n             log::debug!(\"trying to get type for item of unknown type {:?}\", def_id);\n             Ok(Ty::Unknown)"}]}