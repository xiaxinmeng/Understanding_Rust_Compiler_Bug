{"sha": "b7f01769f9327177fd2373b5b3e2c416633fba12", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZjAxNzY5ZjkzMjcxNzdmZDIzNzNiNWIzZTJjNDE2NjMzZmJhMTI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-02-01T02:20:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-01T02:20:01Z"}, "message": "Merge branch 'master' into init-shorthand", "tree": {"sha": "76eaff01c12b27c75cd723e395d50cb18f39e259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76eaff01c12b27c75cd723e395d50cb18f39e259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7f01769f9327177fd2373b5b3e2c416633fba12", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJacnlQCRBK7hj4Ov3rIwAAdHIIAKd3JXeDdvUxMt2iSEH43cU3\ny3lw1po149oTjov8NaOLsnKQ8ZlLBPWeFPNdoGc4AJpuEaU/6k7Zb2MzrooovGBd\nH1XGfkY90CbMomI/hozpXKmLKnq1vikweaSCajGXTIVoknVHRG0/okgq5y1WNY/m\niGrwlFzJBm44pFp2uY6edk6LNqZnMy0Qu6nN4wmwyFv8VPI/+AW9S9xpOUES4dp6\nxHU8PeQSfavg45D+JSgwqmUxRc+s1gPT4cTB5kkLwFTawwoN8u/TJVeYDA05rs5s\nCVCHTmGexa9pvVYA7iRuqBMNu+Y6e9pOusypOlt4A5WWaRdRJPHBoCnteMA/e4M=\n=aynT\n-----END PGP SIGNATURE-----\n", "payload": "tree 76eaff01c12b27c75cd723e395d50cb18f39e259\nparent c9c346a89ff2c1ecc065786bdab0fce550eaa318\nparent 918e79bb5a888ae58214aa83344942c5161574b8\nauthor Nick Cameron <nrc@ncameron.org> 1517451601 +1300\ncommitter GitHub <noreply@github.com> 1517451601 +1300\n\nMerge branch 'master' into init-shorthand"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f01769f9327177fd2373b5b3e2c416633fba12", "html_url": "https://github.com/rust-lang/rust/commit/b7f01769f9327177fd2373b5b3e2c416633fba12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7f01769f9327177fd2373b5b3e2c416633fba12/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9c346a89ff2c1ecc065786bdab0fce550eaa318", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9c346a89ff2c1ecc065786bdab0fce550eaa318", "html_url": "https://github.com/rust-lang/rust/commit/c9c346a89ff2c1ecc065786bdab0fce550eaa318"}, {"sha": "918e79bb5a888ae58214aa83344942c5161574b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/918e79bb5a888ae58214aa83344942c5161574b8", "html_url": "https://github.com/rust-lang/rust/commit/918e79bb5a888ae58214aa83344942c5161574b8"}], "stats": {"total": 1080, "additions": 690, "deletions": 390}, "files": [{"sha": "e35f0e48f816e44f0d821c772f684093164203ec", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -5,6 +5,7 @@\n ### Added\n \n - Add `use_field_init_shorthand` config option.\n+- Add `reorder_modules` configuration option.\n \n ## [0.3.6] 2018-01-18\n "}, {"sha": "6d7c8d5371f413f4c813570c4f02115dc6ffb510", "filename": "Cargo.lock", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -106,7 +106,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"getopts\"\n-version = \"0.2.15\"\n+version = \"0.2.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -159,7 +159,7 @@ dependencies = [\n \n [[package]]\n name = \"num-traits\"\n-version = \"0.1.41\"\n+version = \"0.1.42\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -223,7 +223,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-rustc_cratesio_shim\"\n-version = \"12.0.0\"\n+version = \"26.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -232,57 +232,57 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"12.0.0\"\n+version = \"26.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot_core 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"12.0.0\"\n+version = \"26.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-serialize\"\n-version = \"12.0.0\"\n+version = \"26.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-syntax\"\n-version = \"12.0.0\"\n+version = \"26.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-syntax_pos\"\n-version = \"12.0.0\"\n+version = \"26.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -300,14 +300,14 @@ dependencies = [\n  \"derive-new 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -362,7 +362,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -497,28 +497,28 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff511d5dc435d703f4971bc399647c9bc38e20cb41452e3b9feb4765419ed3f3\"\n \"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n \"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n-\"checksum getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"65922871abd2f101a2eb0eaebadc66668e54a87ad9c3dd82520b5f86ede5eff9\"\n+\"checksum getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b900c08c1939860ce8b54dc6a89e26e00c04c380fd0e09796799bd7f12861e05\"\n \"checksum itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8324a32baf01e2ae060e9de58ed0bc2320c9a2833491ee36cd3b4c414de4db8c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8f31047daa365f19be14b47c29df4f7c3b581832407daabe6ae77397619237d\"\n \"checksum libc 0.2.36 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e5d97d6708edaa407429faa671b942dc0f2727222fb6b6539bf1db936e4b121\"\n \"checksum log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e19e8d5c34a3e0e2223db8e060f9e8264aeeb5c5fc64a4ee9965c062211c024b\"\n \"checksum log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89f010e843f2b1a31dbd316b3b8d443758bc634bed37aabade59c686d644e0a2\"\n \"checksum memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796fba70e76612589ed2ce7f45282f5af869e0fdd7cc6199fa1aa1f1d591ba9d\"\n-\"checksum num-traits 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cacfcab5eb48250ee7d0c7896b51a2c5eec99c1feea5f32025635f5ae4b00070\"\n+\"checksum num-traits 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9936036cc70fe4a8b2d338ab665900323290efb03983c86cbe235ae800ad8017\"\n \"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n \"checksum parking_lot 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e7f7c9857874e54afeb950eebeae662b1e51a2493666d2ea4c0a5d91dcf0412\"\n \"checksum parking_lot_core 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9f35048d735bb93dd115a0030498785971aab3234d311fbe273d020084d26bd8\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n \"checksum rand 0.3.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"512870020642bb8c221bf68baa1b2573da814f6ccfe5c9699b1c303047abe9b1\"\n \"checksum regex 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"744554e01ccbd98fff8c457c3b092cd67af62a555a43bfe97ae8a0451f7799fa\"\n \"checksum regex-syntax 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8e931c58b93d86f080c734bfd2bce7dd0079ae2331235818133c8be7f422e20e\"\n-\"checksum rustc-ap-rustc_cratesio_shim 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f1a51c10af5abd5d698b7e3487e869e6d15f6feb04cbedb5c792e2824f9d845e\"\n-\"checksum rustc-ap-rustc_data_structures 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1aa227490501072780d57f74b1164d361833ff8e172f817da0da2cdf2e4280cc\"\n-\"checksum rustc-ap-rustc_errors 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"21ff6c6e13ac4fc04b7d4d398828b024c4b6577045cb3175b33d35fea35ff6d0\"\n-\"checksum rustc-ap-serialize 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6b4e7f51e298675c2bf830f7265621a8936fb09e63b825b58144cbaac969e604\"\n-\"checksum rustc-ap-syntax 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8bf5639869ba2f7fa581939cd217cb71a85506b82ad0ea520614fb0dceb2386c\"\n-\"checksum rustc-ap-syntax_pos 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1c020cdb7379e1c733ae0a311ae47c748337ba584d2dd7b7f53baaae78de6f8b\"\n+\"checksum rustc-ap-rustc_cratesio_shim 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6c883f9a3e52bfc3bd463ab7747aa04ebec864ed04f0ee42327b308910e6e58a\"\n+\"checksum rustc-ap-rustc_data_structures 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee5b8955de8d85b55d91e38e7f45ec0b92a6ebdede45a782e8e6d3341eb4ac98\"\n+\"checksum rustc-ap-rustc_errors 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f36946ec337c31859627baadf0992a3bfd87b0ff568978cd06cc17a4113f5243\"\n+\"checksum rustc-ap-serialize 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2aaabc8226d2e06ac2d22c63a24a0fb36b03f53523979094a4dcdb78dc09d05\"\n+\"checksum rustc-ap-syntax 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23f04ea1fc07186bea53269436162d0eb7acadb9ea56d52de3b5723c871296c6\"\n+\"checksum rustc-ap-syntax_pos 26.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9e43797465d858dfd39cd27cc484085a832f09dc10c3df617c0b7927d6e2a0d1\"\n \"checksum rustc-demangle 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aee45432acc62f7b9a108cc054142dac51f979e69e71ddce7d6fc7adf29e817e\"\n \"checksum semver 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bee2bc909ab2d8d60dab26e8cad85b25d795b14603a0dcb627b78b9d30b6454b\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\""}, {"sha": "a863a3cc36e1d801614e3d941e63114c84166536", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -44,8 +44,8 @@ env_logger = \"0.4\"\n getopts = \"0.2\"\n derive-new = \"0.5\"\n cargo_metadata = \"0.4\"\n-rustc-ap-syntax = \"12.0.0\"\n-rustc-ap-rustc_errors = \"12.0.0\"\n+rustc-ap-syntax = \"26.0.0\"\n+rustc-ap-rustc_errors = \"26.0.0\"\n \n [dev-dependencies]\n lazy_static = \"1.0.0\""}, {"sha": "369e1ddfff765b4d762555ab0986a45a6a0331e5", "filename": "Configurations.md", "status": "modified", "additions": 314, "deletions": 210, "changes": 524, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -31,27 +31,31 @@ Indent on expressions or items.\n #### `\"Block\"` (default):\n \n ```rust\n-let lorem = vec![\n-    \"ipsum\",\n-    \"dolor\",\n-    \"sit\",\n-    \"amet\",\n-    \"consectetur\",\n-    \"adipiscing\",\n-    \"elit\",\n-];\n+fn main() {\n+    let lorem = vec![\n+        \"ipsum\",\n+        \"dolor\",\n+        \"sit\",\n+        \"amet\",\n+        \"consectetur\",\n+        \"adipiscing\",\n+        \"elit\",\n+    ];\n+}\n ```\n \n #### `\"Visual\"`:\n \n ```rust\n-let lorem = vec![\"ipsum\",\n-                 \"dolor\",\n-                 \"sit\",\n-                 \"amet\",\n-                 \"consectetur\",\n-                 \"adipiscing\",\n-                 \"elit\"];\n+fn main() {\n+    let lorem = vec![\"ipsum\",\n+                     \"dolor\",\n+                     \"sit\",\n+                     \"amet\",\n+                     \"consectetur\",\n+                     \"adipiscing\",\n+                     \"elit\"];\n+}\n ```\n \n ### Control flow\n@@ -124,29 +128,33 @@ fn lorem(ipsum: usize,\n #### `\"Block\"` (default):\n \n ```rust\n-lorem(\n-    \"lorem\",\n-    \"ipsum\",\n-    \"dolor\",\n-    \"sit\",\n-    \"amet\",\n-    \"consectetur\",\n-    \"adipiscing\",\n-    \"elit\",\n-);\n+fn main() {\n+    lorem(\n+        \"lorem\",\n+        \"ipsum\",\n+        \"dolor\",\n+        \"sit\",\n+        \"amet\",\n+        \"consectetur\",\n+        \"adipiscing\",\n+        \"elit\",\n+    );\n+}\n ```\n \n #### `\"Visual\"`:\n \n ```rust\n-lorem(\"lorem\",\n-      \"ipsum\",\n-      \"dolor\",\n-      \"sit\",\n-      \"amet\",\n-      \"consectetur\",\n-      \"adipiscing\",\n-      \"elit\");\n+fn main() {\n+    lorem(\"lorem\",\n+          \"ipsum\",\n+          \"dolor\",\n+          \"sit\",\n+          \"amet\",\n+          \"consectetur\",\n+          \"adipiscing\",\n+          \"elit\");\n+}\n ```\n \n ### Generics\n@@ -161,7 +169,7 @@ fn lorem<\n     Amet: Eq = usize,\n     Adipiscing: Eq = usize,\n     Consectetur: Eq = usize,\n-    Elit: Eq = usize\n+    Elit: Eq = usize,\n >(\n     ipsum: Ipsum,\n     dolor: Dolor,\n@@ -184,15 +192,15 @@ fn lorem<Ipsum: Eq = usize,\n          Amet: Eq = usize,\n          Adipiscing: Eq = usize,\n          Consectetur: Eq = usize,\n-         Elit: Eq = usize>\n-    (ipsum: Ipsum,\n-     dolor: Dolor,\n-     sit: Sit,\n-     amet: Amet,\n-     adipiscing: Adipiscing,\n-     consectetur: Consectetur,\n-     elit: Elit)\n-     -> T {\n+         Elit: Eq = usize>(\n+    ipsum: Ipsum,\n+    dolor: Dolor,\n+    sit: Sit,\n+    amet: Amet,\n+    adipiscing: Adipiscing,\n+    consectetur: Consectetur,\n+    elit: Elit)\n+    -> T {\n     // body\n }\n ```\n@@ -202,17 +210,21 @@ fn lorem<Ipsum: Eq = usize,\n #### `\"Block\"` (default):\n \n ```rust\n-let lorem = Lorem {\n-    ipsum: dolor,\n-    sit: amet,\n-};\n+fn main() {\n+    let lorem = Lorem {\n+        ipsum: dolor,\n+        sit: amet,\n+    };\n+}\n ```\n \n #### `\"Visual\"`:\n \n ```rust\n-let lorem = Lorem { ipsum: dolor,\n-                    sit: amet, };\n+fn main() {\n+    let lorem = Lorem { ipsum: dolor,\n+                        sit: amet, };\n+}\n ```\n \n See also: [`struct_lit_single_line`](#struct_lit_single_line), [`indent_style`](#indent_style).\n@@ -227,7 +239,7 @@ where\n     Ipsum: Eq,\n     Dolor: Eq,\n     Sit: Eq,\n-    Amet: Eq\n+    Amet: Eq,\n {\n     // body\n }\n@@ -274,7 +286,11 @@ fn main() {\n         \"adipiscing\",\n     );\n \n-    let lorem = Lorem { ipsum: dolor, sit: amet };\n+    let lorem = Lorem {\n+        ipsum: dolor,\n+        sit: amet,\n+    };\n+    let lorem = Lorem { ipsum: dolor };\n \n     let lorem = if ipsum { dolor } else { sit };\n }\n@@ -319,16 +335,16 @@ Where to put a binary operator when a binary expression goes multiline.\n #### `\"Front\"` (default):\n \n ```rust\n-let or = foo\n-    || bar\n-    || foobar;\n+fn main() {\n+    let or = foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo\n+        || barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar;\n \n-let sum = 1234\n-    + 5678\n-    + 910;\n+    let sum = 123456789012345678901234567890 + 123456789012345678901234567890\n+        + 123456789012345678901234567890;\n \n-let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n-    ..bbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n+    let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+        ..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n+}\n ```\n \n #### `\"Back\"`:\n@@ -488,13 +504,18 @@ Replace strings of _ wildcards by a single .. in tuple patterns\n #### `false` (default):\n \n ```rust\n-let (lorem, ipsum, _, _) = (1, 2, 3, 4);\n+fn main() {\n+    let (lorem, ipsum, _, _) = (1, 2, 3, 4);\n+    let (lorem, ipsum, ..) = (1, 2, 3, 4);\n+}\n ```\n \n #### `true`:\n \n ```rust\n-let (lorem, ipsum, ..) = (1, 2, 3, 4);\n+fn main() {\n+    let (lorem, ipsum, ..) = (1, 2, 3, 4);\n+}\n ```\n \n ## `control_brace_style`\n@@ -508,34 +529,40 @@ Brace style for control flow constructs\n #### `\"AlwaysSameLine\"` (default):\n \n ```rust\n-if lorem {\n-    println!(\"ipsum!\");\n-} else {\n-    println!(\"dolor!\");\n+fn main() {\n+    if lorem {\n+        println!(\"ipsum!\");\n+    } else {\n+        println!(\"dolor!\");\n+    }\n }\n ```\n \n #### `\"AlwaysNextLine\"`:\n \n ```rust\n-if lorem\n-{\n-    println!(\"ipsum!\");\n-}\n-else\n-{\n-    println!(\"dolor!\");\n+fn main() {\n+    if lorem\n+    {\n+        println!(\"ipsum!\");\n+    }\n+    else\n+    {\n+        println!(\"dolor!\");\n+    }\n }\n ```\n \n #### `\"ClosingNextLine\"`:\n \n ```rust\n-if lorem {\n-    println!(\"ipsum!\");\n-}\n-else {\n-    println!(\"dolor!\");\n+fn main() {\n+    if lorem {\n+        println!(\"ipsum!\");\n+    }\n+    else {\n+        println!(\"dolor!\");\n+    }\n }\n ```\n \n@@ -637,33 +664,41 @@ trait Lorem {\n \n ```rust\n trait Lorem {\n-    fn lorem(ipsum: Ipsum,\n-             dolor: Dolor,\n-             sit: Sit,\n-             amet: Amet);\n-\n-    fn lorem(ipsum: Ipsum,\n-             dolor: Dolor,\n-             sit: Sit,\n-             amet: Amet) {\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+    );\n+\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+    ) {\n         // body\n     }\n \n-    fn lorem(ipsum: Ipsum,\n-             dolor: Dolor,\n-             sit: Sit,\n-             amet: Amet,\n-             consectetur: Consectetur,\n-             adipiscing: Adipiscing,\n-             elit: Elit);\n-\n-    fn lorem(ipsum: Ipsum,\n-             dolor: Dolor,\n-             sit: Sit,\n-             amet: Amet,\n-             consectetur: Consectetur,\n-             adipiscing: Adipiscing,\n-             elit: Elit) {\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+        consectetur: Consectetur,\n+        adipiscing: Adipiscing,\n+        elit: Elit,\n+    );\n+\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+        consectetur: Consectetur,\n+        adipiscing: Adipiscing,\n+        elit: Elit,\n+    ) {\n         // body\n     }\n }\n@@ -748,7 +783,8 @@ struct Lorem {\n }\n \n struct Dolor<T>\n-    where T: Eq\n+where\n+    T: Eq,\n {\n     sit: T,\n }\n@@ -763,7 +799,8 @@ struct Lorem\n }\n \n struct Dolor<T>\n-    where T: Eq\n+where\n+    T: Eq,\n {\n     sit: T,\n }\n@@ -777,7 +814,8 @@ struct Lorem {\n }\n \n struct Dolor<T>\n-    where T: Eq {\n+where\n+    T: Eq, {\n     sit: T,\n }\n ```\n@@ -862,16 +900,17 @@ impl<T> Lorem for T\n where\n     Option<T>: Ipsum,\n {\n-    ...\n+    // body\n }\n ```\n \n #### `true`:\n \n ```rust\n impl<T> Lorem for T\n-where Option<T>: Ipsum {\n-    ...\n+where Option<T>: Ipsum\n+{\n+    // body\n }\n ```\n \n@@ -915,15 +954,19 @@ Format string literals where necessary\n #### `false` (default):\n \n ```rust\n-let lorem = \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit\";\n+fn main() {\n+    let lorem =\n+        \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit amet consectetur adipiscing\";\n+}\n ```\n \n #### `true`:\n \n ```rust\n-let lorem =\n-    \"ipsum dolor sit amet consectetur \\\n-     adipiscing elit lorem ipsum dolor sit\";\n+fn main() {\n+    let lorem = \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit amet \\\n+                 consectetur adipiscing\";\n+}\n ```\n \n See also [`max_width`](#max_width).\n@@ -966,18 +1009,16 @@ Indent style of imports\n #### `\"Visual\"` (default):\n \n ```rust\n-use foo::{xxx,\n-          yyy,\n-          zzz};\n+use foo::{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n+          zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz};\n ```\n \n #### `\"Block\"`:\n \n ```rust\n use foo::{\n-    xxx,\n-    yyy,\n-    zzz,\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n+    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz,\n };\n ```\n \n@@ -994,10 +1035,10 @@ Item layout inside a imports block\n #### `\"Mixed\"` (default):\n \n ```rust\n-use foo::{xxx, yyy, zzz};\n+use foo::{xxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz};\n \n-use foo::{aaa, bbb, ccc,\n-          ddd, eee, fff};\n+use foo::{aaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbb, cccccccccccccccccc, dddddddddddddddddd,\n+          eeeeeeeeeeeeeeeeee, ffffffffffffffffff};\n ```\n \n #### `\"Horizontal\"`:\n@@ -1013,14 +1054,14 @@ use foo::{aaa, bbb, ccc, ddd, eee, fff};\n #### `\"HorizontalVertical\"`:\n \n ```rust\n-use foo::{xxx, yyy, zzz};\n+use foo::{xxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz};\n \n-use foo::{aaa,\n-          bbb,\n-          ccc,\n-          ddd,\n-          eee,\n-          fff};\n+use foo::{aaaaaaaaaaaaaaaaaa,\n+          bbbbbbbbbbbbbbbbbb,\n+          cccccccccccccccccc,\n+          dddddddddddddddddd,\n+          eeeeeeeeeeeeeeeeee,\n+          ffffffffffffffffff};\n ```\n \n #### `\"Vertical\"`:\n@@ -1050,22 +1091,26 @@ Put a trailing comma after a block based match arm (non-block arms are not affec\n #### `false` (default):\n \n ```rust\n-match lorem {\n-    Lorem::Ipsum => {\n-        println!(\"ipsum\");\n+fn main() {\n+    match lorem {\n+        Lorem::Ipsum => {\n+            println!(\"ipsum\");\n+        }\n+        Lorem::Dolor => println!(\"dolor\"),\n     }\n-    Lorem::Dolor => println!(\"dolor\"),\n }\n ```\n \n #### `true`:\n \n ```rust\n-match lorem {\n-    Lorem::Ipsum => {\n-        println!(\"ipsum\");\n-    },\n-    Lorem::Dolor => println!(\"dolor\"),\n+fn main() {\n+    match lorem {\n+        Lorem::Ipsum => {\n+            println!(\"ipsum\");\n+        },\n+        Lorem::Dolor => println!(\"dolor\"),\n+    }\n }\n ```\n \n@@ -1116,37 +1161,40 @@ Force multiline closure and match arm bodies to be wrapped in a block\n #### `false` (default):\n \n ```rust\n-result.and_then(|maybe_value| match maybe_value {\n-    None => ...,\n-    Some(value) => ...,\n-})\n+fn main() {\n+    result.and_then(|maybe_value| match maybe_value {\n+        None => foo(),\n+        Some(value) => bar(),\n+    });\n \n-match lorem {\n-    None => if ipsum {\n-        println!(\"Hello World\");\n-    },\n-    Some(dolor) => ...,\n+    match lorem {\n+        None => if ipsum {\n+            println!(\"Hello World\");\n+        },\n+        Some(dolor) => foo(),\n+    }\n }\n ```\n \n #### `true`:\n \n ```rust\n+fn main() {\n+    result.and_then(|maybe_value| {\n+        match maybe_value {\n+            None => foo(),\n+            Some(value) => bar(),\n+        }\n+    });\n \n-result.and_then(|maybe_value| {\n-    match maybe_value {\n-        None => ...,\n-        Some(value) => ...,\n-    }\n-})\n-\n-match lorem {\n-    None => {\n-        if ipsum {\n-            println!(\"Hello World\");\n+    match lorem {\n+        None => {\n+            if ipsum {\n+                println!(\"Hello World\");\n+            }\n         }\n+        Some(dolor) => foo(),\n     }\n-    Some(dolor) => ...,\n }\n ```\n \n@@ -1468,7 +1516,7 @@ struct Foo {\n \n ## `spaces_around_ranges`\n \n-Put spaces around the .. and ... range operators\n+Put spaces around the .., ..=, and ... range operators\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n@@ -1477,13 +1525,49 @@ Put spaces around the .. and ... range operators\n #### `false` (default):\n \n ```rust\n-let lorem = 0..10;\n+fn main() {\n+    let lorem = 0..10;\n+    let ipsum = 0..=10;\n+\n+    match lorem {\n+        1..5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1..=5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1...5 => foo(),\n+        _ => bar,\n+    }\n+}\n ```\n \n #### `true`:\n \n ```rust\n-let lorem = 0 .. 10;\n+fn main() {\n+    let lorem = 0 .. 10;\n+    let ipsum = 0 ..= 10;\n+\n+    match lorem {\n+        1 .. 5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1 ..= 5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1 ... 5 => foo(),\n+        _ => bar,\n+    }\n+}\n ```\n \n ## `spaces_within_parens_and_brackets`\n@@ -1508,24 +1592,28 @@ fn lorem<T: Eq>(t: T) {\n }\n \n // non-empty square brackets\n-let lorem: [usize; 2] = [ipsum, dolor];\n+fn lorem<T: Eq>(t: T) {\n+    let lorem: [usize; 2] = [ipsum, dolor];\n+}\n ```\n \n #### `true`:\n \n ```rust\n // generic arguments\n-fn lorem< T: Eq >(t: T) {\n+fn lorem< T: Eq >( t: T ) {\n     // body\n }\n \n // non-empty parentheses\n-fn lorem<T: Eq>( t: T ) {\n+fn lorem< T: Eq >( t: T ) {\n     let lorem = ( ipsum, dolor );\n }\n \n // non-empty square brackets\n-let lorem: [ usize; 2 ] = [ ipsum, dolor ];\n+fn lorem< T: Eq >( t: T ) {\n+    let lorem: [ usize; 2 ] = [ ipsum, dolor ];\n+}\n ```\n \n ## `struct_lit_single_line`\n@@ -1545,10 +1633,12 @@ let lorem = Lorem { ipsum: dolor, sit: amet };\n #### `false`:\n \n ```rust\n-let lorem = Lorem {\n-    ipsum: dolor,\n-    sit: amet,\n-};\n+fn main() {\n+    let lorem = Lorem {\n+        ipsum: dolor,\n+        sit: amet,\n+    };\n+}\n ```\n \n See also: [`indent_style`](#indent_style).\n@@ -1568,7 +1658,7 @@ Number of spaces per tab\n fn lorem() {\n     let ipsum = dolor();\n     let sit = vec![\n-        \"amet consectetur adipiscing elit.\"\n+        \"amet consectetur adipiscing elit amet consectetur adipiscing elit amet consectetur.\",\n     ];\n }\n ```\n@@ -1579,7 +1669,7 @@ fn lorem() {\n fn lorem() {\n   let ipsum = dolor();\n   let sit = vec![\n-    \"amet consectetur adipiscing elit.\"\n+    \"amet consectetur adipiscing elit amet consectetur adipiscing elit amet consectetur.\",\n   ];\n }\n ```\n@@ -1598,43 +1688,49 @@ How to handle trailing commas for lists\n #### `\"Vertical\"` (default):\n \n ```rust\n-let Lorem { ipsum, dolor, sit } = amet;\n-let Lorem {\n-    ipsum,\n-    dolor,\n-    sit,\n-    amet,\n-    consectetur,\n-    adipiscing,\n-} = elit;\n+fn main() {\n+    let Lorem { ipsum, dolor, sit } = amet;\n+    let Lorem {\n+        ipsum,\n+        dolor,\n+        sit,\n+        amet,\n+        consectetur,\n+        adipiscing,\n+    } = elit;\n+}\n ```\n \n #### `\"Always\"`:\n \n ```rust\n-let Lorem { ipsum, dolor, sit, } = amet;\n-let Lorem {\n-    ipsum,\n-    dolor,\n-    sit,\n-    amet,\n-    consectetur,\n-    adipiscing,\n-} = elit;\n+fn main() {\n+    let Lorem { ipsum, dolor, sit, } = amet;\n+    let Lorem {\n+        ipsum,\n+        dolor,\n+        sit,\n+        amet,\n+        consectetur,\n+        adipiscing,\n+    } = elit;\n+}\n ```\n \n #### `\"Never\"`:\n \n ```rust\n-let Lorem { ipsum, dolor, sit } = amet;\n-let Lorem {\n-    ipsum,\n-    dolor,\n-    sit,\n-    amet,\n-    consectetur,\n-    adipiscing\n-} = elit;\n+fn main() {\n+    let Lorem { ipsum, dolor, sit } = amet;\n+    let Lorem {\n+        ipsum,\n+        dolor,\n+        sit,\n+        amet,\n+        consectetur,\n+        adipiscing\n+    } = elit;\n+}\n ```\n \n See also: [`match_block_trailing_comma`](#match_block_trailing_comma).\n@@ -1673,15 +1769,15 @@ Determines if `+` or `=` are wrapped in spaces in the punctuation of types\n \n ```rust\n fn lorem<Ipsum: Dolor + Sit = Amet>() {\n-\t// body\n+    // body\n }\n ```\n \n #### `\"Compressed\"`:\n \n ```rust\n fn lorem<Ipsum: Dolor+Sit=Amet>() {\n-\t// body\n+    // body\n }\n ```\n \n@@ -1738,13 +1834,17 @@ Replace uses of the try! macro by the ? shorthand\n #### `false` (default):\n \n ```rust\n-let lorem = try!(ipsum.map(|dolor|dolor.sit()));\n+fn main() {\n+    let lorem = try!(ipsum.map(|dolor| dolor.sit()));\n+}\n ```\n \n #### `true`:\n \n ```rust\n-let lorem = ipsum.map(|dolor| dolor.sit())?;\n+fn main() {\n+    let lorem = ipsum.map(|dolor| dolor.sit())?;\n+}\n ```\n \n \n@@ -1783,21 +1883,25 @@ Wrap the body of arms in blocks when it does not fit on the same line with the p\n #### `true` (default):\n \n ```rust\n-match lorem {\n-    true => {\n-        foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x)\n+fn main() {\n+    match lorem {\n+        true => {\n+            foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x)\n+        }\n+        false => println!(\"{}\", sit),\n     }\n-    false => println!(\"{}\", sit),\n }\n ```\n \n #### `false`:\n \n ```rust\n-match lorem {\n-    true =>\n-        foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x),\n-    false => println!(\"{}\", sit),\n+fn main() {\n+    match lorem {\n+        true =>\n+            foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x),\n+        false => println!(\"{}\", sit),\n+    }\n }\n ```\n "}, {"sha": "214c02f95a5ebf4eee5c83a638029c66353dfe67", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -387,7 +387,7 @@ fn print_usage_to_stdout(opts: &Options, reason: &str) {\n fn print_version() {\n     println!(\n         \"{}-nightly{}\",\n-        env!(\"CARGO_PKG_VERSION\"),\n+        option_env!(\"CARGO_PKG_VERSION\").unwrap_or(\"unknown\"),\n         include_str!(concat!(env!(\"OUT_DIR\"), \"/commit-info.txt\"))\n     )\n }"}, {"sha": "61287543da91e384ab1ee94a1c98b7d664542854", "filename": "src/closures.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -33,6 +33,7 @@ use utils::{last_line_width, left_most_sub_expr, stmt_expr};\n \n pub fn rewrite_closure(\n     capture: ast::CaptureBy,\n+    movability: ast::Movability,\n     fn_decl: &ast::FnDecl,\n     body: &ast::Expr,\n     span: Span,\n@@ -42,7 +43,7 @@ pub fn rewrite_closure(\n     debug!(\"rewrite_closure {:?}\", body);\n \n     let (prefix, extra_offset) =\n-        rewrite_closure_fn_decl(capture, fn_decl, body, span, context, shape)?;\n+        rewrite_closure_fn_decl(capture, movability, fn_decl, body, span, context, shape)?;\n     // 1 = space between `|...|` and body.\n     let body_shape = shape.offset_left(extra_offset)?;\n \n@@ -194,6 +195,7 @@ fn rewrite_closure_block(\n // Return type is (prefix, extra_offset)\n fn rewrite_closure_fn_decl(\n     capture: ast::CaptureBy,\n+    movability: ast::Movability,\n     fn_decl: &ast::FnDecl,\n     body: &ast::Expr,\n     span: Span,\n@@ -205,9 +207,17 @@ fn rewrite_closure_fn_decl(\n     } else {\n         \"\"\n     };\n+\n+    let immovable = if movability == ast::Movability::Static {\n+        \"static \"\n+    } else {\n+        \"\"\n+    };\n     // 4 = \"|| {\".len(), which is overconservative when the closure consists of\n     // a single expression.\n-    let nested_shape = shape.shrink_left(mover.len())?.sub_width(4)?;\n+    let nested_shape = shape\n+        .shrink_left(mover.len() + immovable.len())?\n+        .sub_width(4)?;\n \n     // 1 = |\n     let argument_offset = nested_shape.indent + 1;\n@@ -254,7 +264,7 @@ fn rewrite_closure_fn_decl(\n         config: context.config,\n     };\n     let list_str = write_list(&item_vec, &fmt)?;\n-    let mut prefix = format!(\"{}|{}|\", mover, list_str);\n+    let mut prefix = format!(\"{}{}|{}|\", immovable, mover, list_str);\n \n     if !ret_str.is_empty() {\n         if prefix.contains('\\n') {\n@@ -278,7 +288,7 @@ pub fn rewrite_last_closure(\n     expr: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n-    if let ast::ExprKind::Closure(capture, ref fn_decl, ref body, _) = expr.node {\n+    if let ast::ExprKind::Closure(capture, movability, ref fn_decl, ref body, _) = expr.node {\n         let body = match body.node {\n             ast::ExprKind::Block(ref block)\n                 if !is_unsafe_block(block) && is_simple_block(block, context.codemap) =>\n@@ -287,8 +297,15 @@ pub fn rewrite_last_closure(\n             }\n             _ => body,\n         };\n-        let (prefix, extra_offset) =\n-            rewrite_closure_fn_decl(capture, fn_decl, body, expr.span, context, shape)?;\n+        let (prefix, extra_offset) = rewrite_closure_fn_decl(\n+            capture,\n+            movability,\n+            fn_decl,\n+            body,\n+            expr.span,\n+            context,\n+            shape,\n+        )?;\n         // If the closure goes multi line before its body, do not overflow the closure.\n         if prefix.contains('\\n') {\n             return None;"}, {"sha": "9c0322bcaeb194cd040cf94069e996210ae21f60", "filename": "src/comment.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -134,6 +134,11 @@ fn comment_style(orig: &str, normalize_comments: bool) -> CommentStyle {\n     }\n }\n \n+/// Combine `prev_str` and `next_str` into a single `String`. `span` may contain\n+/// comments between two strings. If there are such comments, then that will be\n+/// recovered. If `allow_extend` is true and there is no comment between the two\n+/// strings, then they will be put on a single line as long as doing so does not\n+/// exceed max width.\n pub fn combine_strs_with_missing_comments(\n     context: &RewriteContext,\n     prev_str: &str,\n@@ -328,7 +333,7 @@ fn rewrite_comment_inner(\n         while let Some(line) = iter.next() {\n             result.push_str(line);\n             result.push_str(match iter.peek() {\n-                Some(ref next_line) if next_line.is_empty() => comment_line_separator.trim_right(),\n+                Some(next_line) if next_line.is_empty() => comment_line_separator.trim_right(),\n                 Some(..) => &comment_line_separator,\n                 None => \"\",\n             });"}, {"sha": "c313f8e2aef5ea21af91c1d02f278c13b76d6bd0", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -630,6 +630,7 @@ create_config! {\n     reorder_imports_in_group: bool, false, false, \"Reorder import statements in group\";\n     reorder_imported_names: bool, true, false,\n         \"Reorder lists of names in import statements alphabetically\";\n+    reorder_modules: bool, false, false, \"Reorder module statemtents alphabetically in group\";\n \n     // Spaces around punctuation\n     binop_separator: SeparatorPlace, SeparatorPlace::Front, false,"}, {"sha": "fb873ee26d3d6dd5f23eb2d9855d2ea506d54a24", "filename": "src/expr.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -135,16 +135,16 @@ pub fn format_expr(\n         ast::ExprKind::AssignOp(ref op, ref lhs, ref rhs) => {\n             rewrite_assignment(context, lhs, rhs, Some(op), shape)\n         }\n-        ast::ExprKind::Continue(ref opt_ident) => {\n-            let id_str = match *opt_ident {\n-                Some(ident) => format!(\" {}\", ident.node),\n+        ast::ExprKind::Continue(ref opt_label) => {\n+            let id_str = match *opt_label {\n+                Some(label) => format!(\" {}\", label.ident),\n                 None => String::new(),\n             };\n             Some(format!(\"continue{}\", id_str))\n         }\n-        ast::ExprKind::Break(ref opt_ident, ref opt_expr) => {\n-            let id_str = match *opt_ident {\n-                Some(ident) => format!(\" {}\", ident.node),\n+        ast::ExprKind::Break(ref opt_label, ref opt_expr) => {\n+            let id_str = match *opt_label {\n+                Some(label) => format!(\" {}\", label.ident),\n                 None => String::new(),\n             };\n \n@@ -159,8 +159,16 @@ pub fn format_expr(\n         } else {\n             Some(\"yield\".to_string())\n         },\n-        ast::ExprKind::Closure(capture, ref fn_decl, ref body, _) => {\n-            closures::rewrite_closure(capture, fn_decl, body, expr.span, context, shape)\n+        ast::ExprKind::Closure(capture, movability, ref fn_decl, ref body, _) => {\n+            closures::rewrite_closure(\n+                capture,\n+                movability,\n+                fn_decl,\n+                body,\n+                expr.span,\n+                context,\n+                shape,\n+            )\n         }\n         ast::ExprKind::Try(..)\n         | ast::ExprKind::Field(..)\n@@ -718,7 +726,7 @@ struct ControlFlow<'a> {\n     cond: Option<&'a ast::Expr>,\n     block: &'a ast::Block,\n     else_block: Option<&'a ast::Expr>,\n-    label: Option<ast::SpannedIdent>,\n+    label: Option<ast::Label>,\n     pat: Option<&'a ast::Pat>,\n     keyword: &'a str,\n     matcher: &'a str,\n@@ -795,11 +803,7 @@ impl<'a> ControlFlow<'a> {\n         }\n     }\n \n-    fn new_loop(\n-        block: &'a ast::Block,\n-        label: Option<ast::SpannedIdent>,\n-        span: Span,\n-    ) -> ControlFlow<'a> {\n+    fn new_loop(block: &'a ast::Block, label: Option<ast::Label>, span: Span) -> ControlFlow<'a> {\n         ControlFlow {\n             cond: None,\n             block,\n@@ -819,7 +823,7 @@ impl<'a> ControlFlow<'a> {\n         pat: Option<&'a ast::Pat>,\n         cond: &'a ast::Expr,\n         block: &'a ast::Block,\n-        label: Option<ast::SpannedIdent>,\n+        label: Option<ast::Label>,\n         span: Span,\n     ) -> ControlFlow<'a> {\n         ControlFlow {\n@@ -844,7 +848,7 @@ impl<'a> ControlFlow<'a> {\n         pat: &'a ast::Pat,\n         cond: &'a ast::Expr,\n         block: &'a ast::Block,\n-        label: Option<ast::SpannedIdent>,\n+        label: Option<ast::Label>,\n         span: Span,\n     ) -> ControlFlow<'a> {\n         ControlFlow {\n@@ -1166,9 +1170,9 @@ impl<'a> Rewrite for ControlFlow<'a> {\n     }\n }\n \n-fn rewrite_label(label: Option<ast::SpannedIdent>) -> Cow<'static, str> {\n-    match label {\n-        Some(ident) => Cow::from(format!(\"{}: \", ident.node)),\n+fn rewrite_label(opt_label: Option<ast::Label>) -> Cow<'static, str> {\n+    match opt_label {\n+        Some(label) => Cow::from(format!(\"{}: \", label.ident)),\n         None => Cow::from(\"\"),\n     }\n }"}, {"sha": "3818fd21950e126f959ad947d635dd06d67b35bd", "filename": "src/imports.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -105,10 +105,13 @@ fn compare_use_trees(a: &ast::UseTree, b: &ast::UseTree, nested: bool) -> Orderi\n     }\n }\n \n-fn compare_use_items(a: &ast::Item, b: &ast::Item) -> Option<Ordering> {\n+fn compare_use_items(a: &ast::Item, b: &ast::Item) -> Ordering {\n     match (&a.node, &b.node) {\n+        (&ast::ItemKind::Mod(..), &ast::ItemKind::Mod(..)) => {\n+            a.ident.name.as_str().cmp(&b.ident.name.as_str())\n+        }\n         (&ast::ItemKind::Use(ref a_tree), &ast::ItemKind::Use(ref b_tree)) => {\n-            Some(compare_use_trees(a_tree, b_tree, false))\n+            compare_use_trees(a_tree, b_tree, false)\n         }\n         (&ast::ItemKind::ExternCrate(ref a_name), &ast::ItemKind::ExternCrate(ref b_name)) => {\n             // `extern crate foo as bar;`\n@@ -119,7 +122,7 @@ fn compare_use_items(a: &ast::Item, b: &ast::Item) -> Option<Ordering> {\n                 b_name.map_or_else(|| b.ident.name.as_str(), |symbol| symbol.as_str());\n             let result = a_orig_name.cmp(&b_orig_name);\n             if result != Ordering::Equal {\n-                return Some(result);\n+                return result;\n             }\n \n             // `extern crate foo as bar;`\n@@ -128,11 +131,11 @@ fn compare_use_items(a: &ast::Item, b: &ast::Item) -> Option<Ordering> {\n                 (Some(..), None) => Ordering::Greater,\n                 (None, Some(..)) => Ordering::Less,\n                 (None, None) => Ordering::Equal,\n-                (Some(..), Some(..)) => a.ident.name.cmp(&b.ident.name),\n+                (Some(..), Some(..)) => a.ident.name.as_str().cmp(&b.ident.name.as_str()),\n             };\n-            Some(result)\n+            result\n         }\n-        _ => None,\n+        _ => unreachable!(),\n     }\n }\n \n@@ -232,6 +235,16 @@ fn rewrite_import(\n     }\n }\n \n+/// Rewrite an inline mod.\n+fn rewrite_mod(item: &ast::Item) -> String {\n+    let mut result = String::with_capacity(32);\n+    result.push_str(&*format_visibility(&item.vis));\n+    result.push_str(\"mod \");\n+    result.push_str(&item.ident.to_string());\n+    result.push(';');\n+    result\n+}\n+\n fn rewrite_imports(\n     context: &RewriteContext,\n     use_items: &[&ast::Item],\n@@ -246,19 +259,21 @@ fn rewrite_imports(\n         |item| item.span().lo(),\n         |item| item.span().hi(),\n         |item| {\n-            let attrs_str = item.attrs.rewrite(context, shape)?;\n+            let attrs = ::visitor::filter_inline_attrs(&item.attrs, item.span());\n+            let attrs_str = attrs.rewrite(context, shape)?;\n \n-            let missed_span = if item.attrs.is_empty() {\n+            let missed_span = if attrs.is_empty() {\n                 mk_sp(item.span.lo(), item.span.lo())\n             } else {\n-                mk_sp(item.attrs.last().unwrap().span.hi(), item.span.lo())\n+                mk_sp(attrs.last().unwrap().span.hi(), item.span.lo())\n             };\n \n             let item_str = match item.node {\n                 ast::ItemKind::Use(ref tree) => {\n                     rewrite_import(context, &item.vis, tree, &item.attrs, shape)?\n                 }\n                 ast::ItemKind::ExternCrate(..) => rewrite_extern_crate(context, item)?,\n+                ast::ItemKind::Mod(..) => rewrite_mod(item),\n                 _ => return None,\n             };\n \n@@ -276,7 +291,7 @@ fn rewrite_imports(\n         false,\n     );\n     let mut item_pair_vec: Vec<_> = items.zip(use_items.iter()).collect();\n-    item_pair_vec.sort_by(|a, b| compare_use_items(a.1, b.1).unwrap());\n+    item_pair_vec.sort_by(|a, b| compare_use_items(a.1, b.1));\n     let item_vec: Vec<_> = item_pair_vec.into_iter().map(|pair| pair.0).collect();\n \n     let fmt = ListFormatting {"}, {"sha": "510c96681b8846d4484acd85e593555c1f8d4586", "filename": "src/items.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -504,7 +504,7 @@ impl<'a> FmtVisitor<'a> {\n             items = itemize_list_with(0);\n         }\n \n-        let shape = self.shape().sub_width(2).unwrap();\n+        let shape = self.shape().sub_width(2)?;\n         let fmt = ListFormatting {\n             tactic: DefinitiveListTactic::Vertical,\n             separator: \",\",\n@@ -558,14 +558,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n         };\n \n-        combine_strs_with_missing_comments(\n-            &context,\n-            &attrs_str,\n-            &variant_body,\n-            span,\n-            shape,\n-            is_attributes_extendable(&attrs_str),\n-        )\n+        combine_strs_with_missing_comments(&context, &attrs_str, &variant_body, span, shape, false)\n     }\n }\n "}, {"sha": "fb2f5ca5fa63abafecb173ad3a7ff5f4187f12d9", "filename": "src/lib.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(decl_macro)]\n #![feature(match_default_bindings)]\n #![feature(rustc_private)]\n #![feature(type_ascription)]\n@@ -55,32 +56,32 @@ pub use self::summary::Summary;\n \n #[macro_use]\n mod utils;\n-mod shape;\n-mod spanned;\n-pub mod config;\n-pub mod codemap;\n-pub mod filemap;\n-pub mod file_lines;\n-pub mod visitor;\n+mod chains;\n mod checkstyle;\n mod closures;\n-mod items;\n-mod missed_spans;\n-mod lists;\n-mod types;\n+pub mod codemap;\n+mod comment;\n+pub mod config;\n mod expr;\n+pub mod file_lines;\n+pub mod filemap;\n mod imports;\n mod issues;\n-mod rewrite;\n-mod string;\n-mod comment;\n-pub mod modules;\n-pub mod rustfmt_diff;\n-mod chains;\n+mod items;\n+mod lists;\n mod macros;\n+mod missed_spans;\n+pub mod modules;\n mod patterns;\n+mod rewrite;\n+pub mod rustfmt_diff;\n+mod shape;\n+mod spanned;\n+mod string;\n mod summary;\n+mod types;\n mod vertical;\n+pub mod visitor;\n \n #[derive(Clone, Copy)]\n pub enum ErrorKind {\n@@ -165,7 +166,7 @@ impl FormatReport {\n         self.file_error_map\n             .iter()\n             .map(|(_, errors)| errors.len())\n-            .fold(0, |acc, x| acc + x)\n+            .sum()\n     }\n \n     pub fn has_warnings(&self) -> bool {"}, {"sha": "b0080695449c7fb0c8b2751698cf28800fac3afa", "filename": "src/macros.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -351,7 +351,7 @@ pub fn rewrite_macro_def(\n \n     // Undo our replacement of macro variables.\n     // FIXME: this could be *much* more efficient.\n-    for (old, new) in substs.iter() {\n+    for (old, new) in &substs {\n         if old_body.find(new).is_some() {\n             debug!(\n                 \"rewrite_macro_def: bailing matching variable: `{}` in `{}`\",\n@@ -368,7 +368,7 @@ pub fn rewrite_macro_def(\n         ident,\n         args_str,\n         new_body,\n-        indent.to_string(&context.config),\n+        indent.to_string(context.config),\n     );\n \n     Some(result)\n@@ -467,13 +467,10 @@ fn format_macro_args(toks: ThinTokenStream) -> Option<String> {\n                 insert_space = next_space(&t);\n             }\n             TokenTree::Delimited(_, d) => {\n-                let formatted = format_macro_args(d.tts)?;\n-                match insert_space {\n-                    SpaceState::Always => {\n-                        result.push(' ');\n-                    }\n-                    _ => {}\n+                if let SpaceState::Always = insert_space {\n+                    result.push(' ');\n                 }\n+                let formatted = format_macro_args(d.tts)?;\n                 match d.delim {\n                     DelimToken::Paren => {\n                         result.push_str(&format!(\"({})\", formatted));\n@@ -713,7 +710,7 @@ impl MacroParser {\n     fn parse_branch(&mut self) -> Option<MacroBranch> {\n         let (args_paren_kind, args) = match self.toks.next()? {\n             TokenTree::Token(..) => return None,\n-            TokenTree::Delimited(_, ref d) => (d.delim, d.tts.clone().into()),\n+            TokenTree::Delimited(_, ref d) => (d.delim, d.tts.clone()),\n         };\n         match self.toks.next()? {\n             TokenTree::Token(_, Token::FatArrow) => {}"}, {"sha": "4719160061b4df01693a59104c4a515929cf7b2e", "filename": "src/patterns.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -65,10 +65,15 @@ impl Rewrite for Pat {\n                     RangeEnd::Included(RangeSyntax::DotDotEq) => \"..=\",\n                     RangeEnd::Excluded => \"..\",\n                 };\n+                let infix = if context.config.spaces_around_ranges() {\n+                    format!(\" {} \", infix)\n+                } else {\n+                    infix.to_owned()\n+                };\n                 rewrite_pair(\n                     &**lhs,\n                     &**rhs,\n-                    PairParts::new(\"\", infix, \"\"),\n+                    PairParts::new(\"\", &infix, \"\"),\n                     context,\n                     shape,\n                     SeparatorPlace::Front,"}, {"sha": "75e7c0be254b27b021e6dcbc87503cee370437b8", "filename": "src/visitor.rs", "status": "modified", "additions": 71, "deletions": 60, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -32,6 +32,33 @@ use shape::{Indent, Shape};\n use spanned::Spanned;\n use utils::{self, contains_skip, count_newlines, inner_attributes, mk_sp, ptr_vec_to_ref_vec};\n \n+/// Returns attributes that are within `outer_span`.\n+pub fn filter_inline_attrs(attrs: &[ast::Attribute], outer_span: Span) -> Vec<ast::Attribute> {\n+    attrs\n+        .iter()\n+        .filter(|a| outer_span.lo() <= a.span.lo() && a.span.hi() <= outer_span.hi())\n+        .cloned()\n+        .collect()\n+}\n+\n+/// Returns true for `mod foo;`, false for `mod foo { .. }`.\n+fn is_mod_decl(item: &ast::Item) -> bool {\n+    match item.node {\n+        ast::ItemKind::Mod(ref m) => {\n+            !(m.inner.lo() == BytePos(0) && m.inner.hi() == BytePos(0))\n+                && m.inner.hi() != item.span.hi()\n+        }\n+        _ => false,\n+    }\n+}\n+\n+/// Returns true for `mod foo;` without any inline attributes.\n+/// We cannot reorder modules with attributes because doing so can break the code.\n+/// e.g. `#[macro_use]`.\n+fn is_mod_decl_without_attr(item: &ast::Item) -> bool {\n+    is_mod_decl(item) && filter_inline_attrs(&item.attrs, item.span()).is_empty()\n+}\n+\n fn is_use_item(item: &ast::Item) -> bool {\n     match item.node {\n         ast::ItemKind::Use(_) => true,\n@@ -318,39 +345,26 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         let filtered_attrs;\n         let mut attrs = &item.attrs;\n         match item.node {\n-            ast::ItemKind::Mod(ref m) => {\n-                let outer_file = self.codemap.lookup_char_pos(item.span.lo()).file;\n-                let inner_file = self.codemap.lookup_char_pos(m.inner.lo()).file;\n-                if outer_file.name == inner_file.name {\n-                    // Module is inline, in this case we treat modules like any\n-                    // other item.\n-                    if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n-                        self.push_skipped_with_span(item.span());\n-                        return;\n-                    }\n-                } else if contains_skip(&item.attrs) {\n-                    // Module is not inline, but should be skipped.\n+            // Module is inline, in this case we treat it like any other item.\n+            _ if !is_mod_decl(item) => {\n+                if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n+                    self.push_skipped_with_span(item.span());\n                     return;\n-                } else {\n-                    // Module is not inline and should not be skipped. We want\n-                    // to process only the attributes in the current file.\n-                    filtered_attrs = item.attrs\n-                        .iter()\n-                        .filter_map(|a| {\n-                            let attr_file = self.codemap.lookup_char_pos(a.span.lo()).file;\n-                            if attr_file.name == outer_file.name {\n-                                Some(a.clone())\n-                            } else {\n-                                None\n-                            }\n-                        })\n-                        .collect::<Vec<_>>();\n-                    // Assert because if we should skip it should be caught by\n-                    // the above case.\n-                    assert!(!self.visit_attrs(&filtered_attrs, ast::AttrStyle::Outer));\n-                    attrs = &filtered_attrs;\n                 }\n             }\n+            // Module is not inline, but should be skipped.\n+            ast::ItemKind::Mod(..) if contains_skip(&item.attrs) => {\n+                return;\n+            }\n+            // Module is not inline and should not be skipped. We want\n+            // to process only the attributes in the current file.\n+            ast::ItemKind::Mod(..) => {\n+                filtered_attrs = filter_inline_attrs(&item.attrs, item.span());\n+                // Assert because if we should skip it should be caught by\n+                // the above case.\n+                assert!(!self.visit_attrs(&filtered_attrs, ast::AttrStyle::Outer));\n+                attrs = &filtered_attrs;\n+            }\n             _ => {\n                 if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n                     self.push_skipped_with_span(item.span());\n@@ -397,8 +411,9 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 self.last_pos = source!(self, item.span).hi();\n             }\n             ast::ItemKind::Mod(ref module) => {\n+                let is_inline = !is_mod_decl(item);\n                 self.format_missing_with_indent(source!(self, item.span).lo());\n-                self.format_mod(module, &item.vis, item.span, item.ident, attrs);\n+                self.format_mod(module, &item.vis, item.span, item.ident, attrs, is_inline);\n             }\n             ast::ItemKind::Mac(ref mac) => {\n                 self.visit_mac(mac, Some(item.ident), MacroPosition::Item);\n@@ -649,33 +664,34 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     }\n \n     fn walk_items(&mut self, mut items_left: &[&ast::Item]) {\n-        while !items_left.is_empty() {\n-            // If the next item is a `use` declaration, then extract it and any subsequent `use`s\n-            // to be potentially reordered within `format_imports`. Otherwise, just format the\n-            // next item for output.\n-            if self.config.reorder_imports() && is_use_item(&*items_left[0]) {\n-                let used_items_len = self.reorder_items(\n-                    items_left,\n-                    &is_use_item,\n-                    self.config.reorder_imports_in_group(),\n-                );\n+        macro try_reorder_items_with($reorder: ident, $in_group: ident, $pred: ident) {\n+            if self.config.$reorder() && $pred(&*items_left[0]) {\n+                let used_items_len =\n+                    self.reorder_items(items_left, &$pred, self.config.$in_group());\n                 let (_, rest) = items_left.split_at(used_items_len);\n                 items_left = rest;\n-            } else if self.config.reorder_extern_crates() && is_extern_crate(&*items_left[0]) {\n-                let used_items_len = self.reorder_items(\n-                    items_left,\n-                    &is_extern_crate,\n-                    self.config.reorder_extern_crates_in_group(),\n+                continue;\n+            }\n+        }\n+\n+        while !items_left.is_empty() {\n+            // If the next item is a `use`, `extern crate` or `mod`, then extract it and any\n+            // subsequent items that have the same item kind to be reordered within\n+            // `format_imports`. Otherwise, just format the next item for output.\n+            {\n+                try_reorder_items_with!(reorder_imports, reorder_imports_in_group, is_use_item);\n+                try_reorder_items_with!(\n+                    reorder_extern_crates,\n+                    reorder_extern_crates_in_group,\n+                    is_extern_crate\n                 );\n-                let (_, rest) = items_left.split_at(used_items_len);\n-                items_left = rest;\n-            } else {\n-                // `unwrap()` is safe here because we know `items_left`\n-                // has elements from the loop condition\n-                let (item, rest) = items_left.split_first().unwrap();\n-                self.visit_item(item);\n-                items_left = rest;\n+                try_reorder_items_with!(reorder_modules, reorder_modules, is_mod_decl_without_attr);\n             }\n+            // Reaching here means items were not reordered. There must be at least\n+            // one item left in `items_left`, so calling `unwrap()` here is safe.\n+            let (item, rest) = items_left.split_first().unwrap();\n+            self.visit_item(item);\n+            items_left = rest;\n         }\n     }\n \n@@ -722,13 +738,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         s: Span,\n         ident: ast::Ident,\n         attrs: &[ast::Attribute],\n+        is_internal: bool,\n     ) {\n-        // Decide whether this is an inline mod or an external mod.\n-        let local_file_name = self.codemap.span_to_filename(s);\n-        let inner_span = source!(self, m.inner);\n-        let is_internal = !(inner_span.lo().0 == 0 && inner_span.hi().0 == 0)\n-            && local_file_name == self.codemap.span_to_filename(inner_span);\n-\n         self.push_str(&*utils::format_visibility(vis));\n         self.push_str(\"mod \");\n         self.push_str(&ident.to_string());"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/source/configs/reorder_modules/dolor/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fdolor%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fdolor%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fdolor%2Fmod.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "56b1aa03ed795f9a690bc34bf1cbe30a7c8468b8", "filename": "tests/source/configs/reorder_modules/false.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fconfigs%2Freorder_modules%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fconfigs%2Freorder_modules%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_modules%2Ffalse.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-reorder_modules: false\n+// Reorder modules\n+\n+mod lorem;\n+mod ipsum;\n+mod dolor;\n+mod sit;"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/source/configs/reorder_modules/ipsum/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fipsum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fipsum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fipsum%2Fmod.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/source/configs/reorder_modules/lorem/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fconfigs%2Freorder_modules%2Florem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fconfigs%2Freorder_modules%2Florem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_modules%2Florem%2Fmod.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/source/configs/reorder_modules/sit/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fsit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fsit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_modules%2Fsit%2Fmod.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "79b0ab1e35546ad25c94363bd272c219ff2bf219", "filename": "tests/source/configs/reorder_modules/true.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fconfigs%2Freorder_modules%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fconfigs%2Freorder_modules%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_modules%2Ftrue.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-reorder_modules: true\n+// Reorder modules\n+\n+mod lorem;\n+mod ipsum;\n+mod dolor;\n+mod sit;"}, {"sha": "11ca76b1345c09c54dc7dfbfa25b2fbbadbd11a7", "filename": "tests/source/configs/spaces_around_ranges/false.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ffalse.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -2,5 +2,21 @@\n // Spaces around ranges\n \n fn main() {\n-    let lorem = 0..10;\n+    let lorem = 0 .. 10;\n+    let ipsum = 0 ..= 10;\n+\n+    match lorem {\n+        1 .. 5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1 ..= 5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1 ... 5 => foo(),\n+        _ => bar,\n+    }\n }"}, {"sha": "501708921306f0e3adc9f0c36963fb61fc2ebc7c", "filename": "tests/source/configs/spaces_around_ranges/true.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ftrue.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -3,4 +3,20 @@\n \n fn main() {\n     let lorem = 0..10;\n+    let ipsum = 0..=10;\n+\n+    match lorem {\n+        1..5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1..=5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1...5 => foo(),\n+        _ => bar,\n+    }\n }"}, {"sha": "f3dbae4b84de4ce56ec4c8ac84e658574d097326", "filename": "tests/source/enum.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fenum.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -180,3 +180,15 @@ enum WidthOf101 {\n     Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(::std::io::Error),\n     Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(::std::io::Error),\n }\n+\n+// #2389\n+pub enum QlError {\n+    #[fail(display = \"Parsing error: {}\", 0)] LexError(parser::lexer::LexError),\n+    #[fail(display = \"Parsing error: {:?}\", 0)] ParseError(parser::ParseError),\n+    #[fail(display = \"Validation error: {:?}\", 0)] ValidationError(Vec<validation::Error>),\n+    #[fail(display = \"Execution error: {}\", 0)] ExecutionError(String),\n+    // (from, to)\n+    #[fail(display = \"Translation error: from {} to {}\", 0, 1)] TranslationError(String, String),\n+    // (kind, input, expected)\n+    #[fail(display = \"Could not find {}: Found: {}, expected: {:?}\", 0, 1, 2)] ResolveError(&'static str, String, Option<String>),\n+}"}, {"sha": "c57a1e14483492ea7326bec1500d0cdc11d1d4f1", "filename": "tests/source/immovable_generators.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fimmovable_generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsource%2Fimmovable_generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimmovable_generators.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -0,0 +1,7 @@\n+#![feature(generators)]\n+\n+unsafe fn foo() {\n+    let mut ga = static || { \n+        yield 1;\n+    };\n+}"}, {"sha": "06bfa1418d14ea5976a5051ca5dc3b6e073df5cf", "filename": "tests/system.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -95,7 +95,7 @@ fn verify_config_test_names() {\n                 let config_name = path.file_name().unwrap().to_str().unwrap();\n \n                 // Make sure that config name is used in the files in the directory.\n-                verify_config_used(&path, &config_name);\n+                verify_config_used(&path, config_name);\n             }\n         }\n     }\n@@ -105,7 +105,7 @@ fn verify_config_test_names() {\n // println!) that is used by `rustfmt::rustfmt_diff::print_diff`. Writing\n // using only one or the other will cause the output order to differ when\n // `print_diff` selects the approach not used.\n-fn write_message(msg: String) {\n+fn write_message(msg: &str) {\n     let mut writer = OutputWriter::new(Color::Auto);\n     writer.writeln(&format!(\"{}\", msg), None);\n }\n@@ -359,8 +359,8 @@ pub enum IdempotentCheckError {\n }\n \n pub fn idempotent_check(filename: &PathBuf) -> Result<FormatReport, IdempotentCheckError> {\n-    let sig_comments = read_significant_comments(&filename);\n-    let config = read_config(&filename);\n+    let sig_comments = read_significant_comments(filename);\n+    let config = read_config(filename);\n     let (error_summary, file_map, format_report) = format_file(filename, &config);\n     if error_summary.has_parsing_errors() {\n         return Err(IdempotentCheckError::Parse);\n@@ -660,15 +660,15 @@ impl ConfigCodeBlock {\n         assert!(self.code_block.is_some() && self.code_block_start.is_some());\n \n         if self.config_name.is_none() {\n-            write_message(format!(\n+            write_message(&format!(\n                 \"No configuration name for {}:{}\",\n                 CONFIGURATIONS_FILE_NAME,\n                 self.code_block_start.unwrap()\n             ));\n             return false;\n         }\n         if self.config_value.is_none() {\n-            write_message(format!(\n+            write_message(&format!(\n                 \"No configuration value for {}:{}\",\n                 CONFIGURATIONS_FILE_NAME,\n                 self.code_block_start.unwrap()\n@@ -680,7 +680,7 @@ impl ConfigCodeBlock {\n \n     fn has_parsing_errors(&self, error_summary: Summary) -> bool {\n         if error_summary.has_parsing_errors() {\n-            write_message(format!(\n+            write_message(&format!(\n                 \"\\u{261d}\\u{1f3fd} Cannot format {}:{}\",\n                 CONFIGURATIONS_FILE_NAME,\n                 self.code_block_start.unwrap()\n@@ -703,7 +703,7 @@ impl ConfigCodeBlock {\n         });\n     }\n \n-    fn formatted_has_diff(&self, file_map: FileMap) -> bool {\n+    fn formatted_has_diff(&self, file_map: &FileMap) -> bool {\n         let &(ref _file_name, ref text) = file_map.first().unwrap();\n         let compare = make_diff(self.code_block.as_ref().unwrap(), text, DIFF_CONTEXT_SIZE);\n         if !compare.is_empty() {\n@@ -729,7 +729,7 @@ impl ConfigCodeBlock {\n         let (error_summary, file_map, _report) =\n             format_input::<io::Stdout>(input, &config, None).unwrap();\n \n-        !self.has_parsing_errors(error_summary) && !self.formatted_has_diff(file_map)\n+        !self.has_parsing_errors(error_summary) && !self.formatted_has_diff(&file_map)\n     }\n \n     // Extract a code block from the iterator. Behavior:\n@@ -746,7 +746,7 @@ impl ConfigCodeBlock {\n         prev: Option<&ConfigCodeBlock>,\n     ) -> Option<ConfigCodeBlock> {\n         let mut code_block = ConfigCodeBlock::new();\n-        code_block.config_name = prev.map_or(None, |cb| cb.config_name.clone());\n+        code_block.config_name = prev.and_then(|cb| cb.config_name.clone());\n \n         loop {\n             match ConfigurationSection::get_section(file) {"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/target/configs/reorder_modules/dolor/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fdolor%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fdolor%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fdolor%2Fmod.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "56b1aa03ed795f9a690bc34bf1cbe30a7c8468b8", "filename": "tests/target/configs/reorder_modules/false.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Ffalse.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-reorder_modules: false\n+// Reorder modules\n+\n+mod lorem;\n+mod ipsum;\n+mod dolor;\n+mod sit;"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/target/configs/reorder_modules/ipsum/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fipsum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fipsum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fipsum%2Fmod.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/target/configs/reorder_modules/lorem/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Florem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Florem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Florem%2Fmod.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/target/configs/reorder_modules/sit/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fsit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fsit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Fsit%2Fmod.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "18361e88b5fcf2e71bfb082e659ba6d5c8425378", "filename": "tests/target/configs/reorder_modules/true.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_modules%2Ftrue.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-reorder_modules: true\n+// Reorder modules\n+\n+mod dolor;\n+mod ipsum;\n+mod lorem;\n+mod sit;"}, {"sha": "6319da985728963d59172de9377125317af5fee1", "filename": "tests/target/configs/spaces_around_ranges/false.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fconfigs%2Fspaces_around_ranges%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fconfigs%2Fspaces_around_ranges%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fspaces_around_ranges%2Ffalse.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -3,4 +3,20 @@\n \n fn main() {\n     let lorem = 0..10;\n+    let ipsum = 0..=10;\n+\n+    match lorem {\n+        1..5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1..=5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1...5 => foo(),\n+        _ => bar,\n+    }\n }"}, {"sha": "7bfcc23c8ea526034b791d991f71e93d4e41e95e", "filename": "tests/target/configs/spaces_around_ranges/true.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fconfigs%2Fspaces_around_ranges%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fconfigs%2Fspaces_around_ranges%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fspaces_around_ranges%2Ftrue.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -3,4 +3,20 @@\n \n fn main() {\n     let lorem = 0 .. 10;\n+    let ipsum = 0 ..= 10;\n+\n+    match lorem {\n+        1 .. 5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1 ..= 5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1 ... 5 => foo(),\n+        _ => bar,\n+    }\n }"}, {"sha": "de88f610b6a68cddc0916ca012d2e748a4de026a", "filename": "tests/target/enum.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -24,7 +24,8 @@ enum EmtpyWithComment {\n // C-style enum\n enum Bar {\n     A = 1,\n-    #[someAttr(test)] B = 2, // comment\n+    #[someAttr(test)]\n+    B = 2, // comment\n     C,\n }\n \n@@ -225,11 +226,30 @@ enum AnError {\n \n // #2193\n enum WidthOf101 {\n-    #[fail(display = \".....................................................\")] Io(::std::io::Error),\n+    #[fail(display = \".....................................................\")]\n+    Io(::std::io::Error),\n     #[fail(display = \".....................................................\")]\n     Ioo(::std::io::Error),\n     Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(::std::io::Error),\n     Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(\n         ::std::io::Error,\n     ),\n }\n+\n+// #2389\n+pub enum QlError {\n+    #[fail(display = \"Parsing error: {}\", 0)]\n+    LexError(parser::lexer::LexError),\n+    #[fail(display = \"Parsing error: {:?}\", 0)]\n+    ParseError(parser::ParseError),\n+    #[fail(display = \"Validation error: {:?}\", 0)]\n+    ValidationError(Vec<validation::Error>),\n+    #[fail(display = \"Execution error: {}\", 0)]\n+    ExecutionError(String),\n+    // (from, to)\n+    #[fail(display = \"Translation error: from {} to {}\", 0, 1)]\n+    TranslationError(String, String),\n+    // (kind, input, expected)\n+    #[fail(display = \"Could not find {}: Found: {}, expected: {:?}\", 0, 1, 2)]\n+    ResolveError(&'static str, String, Option<String>),\n+}"}, {"sha": "0bf7a2d91ba153f2c3dca842467cfee491e8dd61", "filename": "tests/target/immovable_generators.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fimmovable_generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f01769f9327177fd2373b5b3e2c416633fba12/tests%2Ftarget%2Fimmovable_generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimmovable_generators.rs?ref=b7f01769f9327177fd2373b5b3e2c416633fba12", "patch": "@@ -0,0 +1,7 @@\n+#![feature(generators)]\n+\n+unsafe fn foo() {\n+    let mut ga = static || {\n+        yield 1;\n+    };\n+}"}]}