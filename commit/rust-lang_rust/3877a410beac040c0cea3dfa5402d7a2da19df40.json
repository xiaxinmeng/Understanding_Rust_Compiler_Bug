{"sha": "3877a410beac040c0cea3dfa5402d7a2da19df40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NzdhNDEwYmVhYzA0MGMwY2VhM2RmYTU0MDJkN2EyZGExOWRmNDA=", "commit": {"author": {"name": "Andrea Nall", "email": "anall@andreanall.com", "date": "2021-02-27T01:10:17Z"}, "committer": {"name": "Andrea Nall", "email": "anall@andreanall.com", "date": "2021-03-07T23:53:12Z"}, "message": "migrate paths to newly-added diagnostic items\n\nThis gets rid of the following paths:\n  * OS_STRING\n  * TO_OWNED\n  * TO_STRING\n\nAlso removes some usages of:\n  * PATH_BUF\n\nAnd the now completely unused `clippy_lints::types::is_ty_param_path`", "tree": {"sha": "b2f3b0552caac77a7d2c1d1027f3b90242eafa99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2f3b0552caac77a7d2c1d1027f3b90242eafa99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3877a410beac040c0cea3dfa5402d7a2da19df40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3877a410beac040c0cea3dfa5402d7a2da19df40", "html_url": "https://github.com/rust-lang/rust/commit/3877a410beac040c0cea3dfa5402d7a2da19df40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3877a410beac040c0cea3dfa5402d7a2da19df40/comments", "author": {"login": "anall", "id": 12371, "node_id": "MDQ6VXNlcjEyMzcx", "avatar_url": "https://avatars.githubusercontent.com/u/12371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anall", "html_url": "https://github.com/anall", "followers_url": "https://api.github.com/users/anall/followers", "following_url": "https://api.github.com/users/anall/following{/other_user}", "gists_url": "https://api.github.com/users/anall/gists{/gist_id}", "starred_url": "https://api.github.com/users/anall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anall/subscriptions", "organizations_url": "https://api.github.com/users/anall/orgs", "repos_url": "https://api.github.com/users/anall/repos", "events_url": "https://api.github.com/users/anall/events{/privacy}", "received_events_url": "https://api.github.com/users/anall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anall", "id": 12371, "node_id": "MDQ6VXNlcjEyMzcx", "avatar_url": "https://avatars.githubusercontent.com/u/12371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anall", "html_url": "https://github.com/anall", "followers_url": "https://api.github.com/users/anall/followers", "following_url": "https://api.github.com/users/anall/following{/other_user}", "gists_url": "https://api.github.com/users/anall/gists{/gist_id}", "starred_url": "https://api.github.com/users/anall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anall/subscriptions", "organizations_url": "https://api.github.com/users/anall/orgs", "repos_url": "https://api.github.com/users/anall/repos", "events_url": "https://api.github.com/users/anall/events{/privacy}", "received_events_url": "https://api.github.com/users/anall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e451d6e188b99ad53ddd6e21cf99f0e4f96cf74e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e451d6e188b99ad53ddd6e21cf99f0e4f96cf74e", "html_url": "https://github.com/rust-lang/rust/commit/e451d6e188b99ad53ddd6e21cf99f0e4f96cf74e"}], "stats": {"total": 61, "additions": 27, "deletions": 34}, "files": [{"sha": "b9be1f7e60cb2fd02d7479dd205178c4db11cd2b", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3877a410beac040c0cea3dfa5402d7a2da19df40/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3877a410beac040c0cea3dfa5402d7a2da19df40/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=3877a410beac040c0cea3dfa5402d7a2da19df40", "patch": "@@ -12,12 +12,13 @@ use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{ExpnKind, Span};\n+use rustc_span::symbol::sym;\n \n use crate::consts::{constant, Constant};\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    get_item_name, get_parent_expr, higher, implements_trait, in_constant, is_integer_const, iter_input_pats,\n-    last_path_segment, match_qpath, match_trait_method, paths, snippet, snippet_opt, span_lint, span_lint_and_sugg,\n+    get_item_name, get_parent_expr, higher, implements_trait, in_constant, is_diagnostic_assoc_item, is_integer_const,\n+    iter_input_pats, last_path_segment, match_qpath, snippet, snippet_opt, span_lint, span_lint_and_sugg,\n     span_lint_and_then, span_lint_hir_and_then, unsext, SpanlessEq,\n };\n \n@@ -554,11 +555,16 @@ fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left:\n \n     let (arg_ty, snip) = match expr.kind {\n         ExprKind::MethodCall(.., ref args, _) if args.len() == 1 => {\n-            if match_trait_method(cx, expr, &paths::TO_STRING) || match_trait_method(cx, expr, &paths::TO_OWNED) {\n-                (cx.typeck_results().expr_ty(&args[0]), snippet(cx, args[0].span, \"..\"))\n-            } else {\n-                return;\n-            }\n+            if_chain!(\n+                if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+                if is_diagnostic_assoc_item(cx, expr_def_id, sym::ToString)\n+                    || is_diagnostic_assoc_item(cx, expr_def_id, sym::ToOwned);\n+                then {\n+                    (cx.typeck_results().expr_ty(&args[0]), snippet(cx, args[0].span, \"..\"))\n+                } else {\n+                    return;\n+                }\n+            )\n         },\n         ExprKind::Call(ref path, ref v) if v.len() == 1 => {\n             if let ExprKind::Path(ref path) = path.kind {"}, {"sha": "4a7b0ad07aaebbcef27653e56e81f6d873906a10", "filename": "clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3877a410beac040c0cea3dfa5402d7a2da19df40/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3877a410beac040c0cea3dfa5402d7a2da19df40/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=3877a410beac040c0cea3dfa5402d7a2da19df40", "patch": "@@ -1,10 +1,11 @@\n-use crate::utils::{match_type, paths, span_lint_and_sugg};\n+use crate::utils::{is_type_diagnostic_item, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::sym;\n use std::path::{Component, Path};\n \n declare_clippy_lint! {\n@@ -46,7 +47,7 @@ impl<'tcx> LateLintPass<'tcx> for PathBufPushOverwrite {\n             if let ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind;\n             if path.ident.name == sym!(push);\n             if args.len() == 2;\n-            if match_type(cx, cx.typeck_results().expr_ty(&args[0]).peel_refs(), &paths::PATH_BUF);\n+            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&args[0]).peel_refs(), sym::PathBuf);\n             if let Some(get_index_arg) = args.get(1);\n             if let ExprKind::Lit(ref lit) = get_index_arg.kind;\n             if let LitKind::Str(ref path_lit, _) = lit.node;"}, {"sha": "6ea2d8b06d81cd60319e7d5cb0d8a9d257f4f99f", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3877a410beac040c0cea3dfa5402d7a2da19df40/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3877a410beac040c0cea3dfa5402d7a2da19df40/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=3877a410beac040c0cea3dfa5402d7a2da19df40", "patch": "@@ -233,7 +233,7 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         },\n                     );\n                 }\n-            } else if match_type(cx, ty, &paths::PATH_BUF) {\n+            } else if is_type_diagnostic_item(cx, ty, sym::PathBuf) {\n                 if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_path_buf()\"), (\"as_path\", \"\")]) {\n                     span_lint_and_then(\n                         cx,"}, {"sha": "99263bf8b5cf73a3be9f5e9004f5a4413496b1d5", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3877a410beac040c0cea3dfa5402d7a2da19df40/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3877a410beac040c0cea3dfa5402d7a2da19df40/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=3877a410beac040c0cea3dfa5402d7a2da19df40", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{\n-    fn_has_unsatisfiable_preds, has_drop, is_copy, is_type_diagnostic_item, match_def_path, match_type, paths,\n-    snippet_opt, span_lint_hir, span_lint_hir_and_then, walk_ptrs_ty_depth,\n+    fn_has_unsatisfiable_preds, has_drop, is_copy, is_type_diagnostic_item, match_def_path, paths, snippet_opt,\n+    span_lint_hir, span_lint_hir_and_then, walk_ptrs_ty_depth,\n };\n use if_chain::if_chain;\n use rustc_data_structures::{fx::FxHashMap, transitive_relation::TransitiveRelation};\n@@ -166,8 +166,8 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n                         is_call_with_ref_arg(cx, mir, &pred_terminator.kind);\n                     if res == cloned;\n                     if cx.tcx.is_diagnostic_item(sym::deref_method, pred_fn_def_id);\n-                    if match_type(cx, pred_arg_ty, &paths::PATH_BUF)\n-                        || match_type(cx, pred_arg_ty, &paths::OS_STRING);\n+                    if is_type_diagnostic_item(cx, pred_arg_ty, sym::PathBuf)\n+                        || is_type_diagnostic_item(cx, pred_arg_ty, sym::OsString);\n                     then {\n                         (pred_arg, res)\n                     } else {"}, {"sha": "84ec2aa18abcc01336ddb8fd497b43a185a4fd59", "filename": "clippy_lints/src/to_string_in_display.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3877a410beac040c0cea3dfa5402d7a2da19df40/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3877a410beac040c0cea3dfa5402d7a2da19df40/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_string_in_display.rs?ref=3877a410beac040c0cea3dfa5402d7a2da19df40", "patch": "@@ -1,8 +1,9 @@\n-use crate::utils::{match_def_path, match_trait_method, path_to_local_id, paths, span_lint};\n+use crate::utils::{is_diagnostic_assoc_item, match_def_path, path_to_local_id, paths, span_lint};\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for uses of `to_string()` in `Display` traits.\n@@ -92,7 +93,8 @@ impl LateLintPass<'_> for ToStringInDisplay {\n             if let Some(self_hir_id) = self.self_hir_id;\n             if let ExprKind::MethodCall(ref path, _, args, _) = expr.kind;\n             if path.ident.name == sym!(to_string);\n-            if match_trait_method(cx, expr, &paths::TO_STRING);\n+            if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+            if is_diagnostic_assoc_item(cx, expr_def_id, sym::ToString);\n             if path_to_local_id(&args[0], self_hir_id);\n             then {\n                 span_lint("}, {"sha": "827c4a2aaf6289b9964b8eadb7502d80a3d2c40c", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3877a410beac040c0cea3dfa5402d7a2da19df40/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3877a410beac040c0cea3dfa5402d7a2da19df40/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=3877a410beac040c0cea3dfa5402d7a2da19df40", "patch": "@@ -313,25 +313,12 @@ fn is_ty_param_diagnostic_item(cx: &LateContext<'_>, qpath: &QPath<'tcx>, item:\n     }\n }\n \n-/// Checks if the first type parameter is a given item.\n-fn is_ty_param_path(cx: &LateContext<'_>, qpath: &QPath<'tcx>, path: &[&str]) -> Option<&'tcx hir::Ty<'tcx>> {\n-    let ty = get_qpath_generic_tys(qpath).next()?;\n-\n-    if let TyKind::Path(qpath) = &ty.kind {\n-        cx.qpath_res(qpath, ty.hir_id)\n-            .opt_def_id()\n-            .and_then(|id| match_def_path(cx, id, path).then(|| ty))\n-    } else {\n-        None\n-    }\n-}\n-\n fn match_buffer_type(cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<&'static str> {\n     if is_ty_param_diagnostic_item(cx, qpath, sym::string_type).is_some() {\n         Some(\"str\")\n-    } else if is_ty_param_path(cx, qpath, &paths::OS_STRING).is_some() {\n+    } else if is_ty_param_diagnostic_item(cx, qpath, sym::OsString).is_some() {\n         Some(\"std::ffi::OsStr\")\n-    } else if is_ty_param_path(cx, qpath, &paths::PATH_BUF).is_some() {\n+    } else if is_ty_param_diagnostic_item(cx, qpath, sym::PathBuf).is_some() {\n         Some(\"std::path::Path\")\n     } else {\n         None"}, {"sha": "3e79646da3f4586681b2860284db85d68b6a0334", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3877a410beac040c0cea3dfa5402d7a2da19df40/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3877a410beac040c0cea3dfa5402d7a2da19df40/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=3877a410beac040c0cea3dfa5402d7a2da19df40", "patch": "@@ -84,7 +84,6 @@ pub const OPTION: [&str; 3] = [\"core\", \"option\", \"Option\"];\n pub const OPTION_NONE: [&str; 4] = [\"core\", \"option\", \"Option\", \"None\"];\n pub const OPTION_SOME: [&str; 4] = [\"core\", \"option\", \"Option\", \"Some\"];\n pub const ORD: [&str; 3] = [\"core\", \"cmp\", \"Ord\"];\n-pub const OS_STRING: [&str; 4] = [\"std\", \"ffi\", \"os_str\", \"OsString\"];\n pub const OS_STRING_AS_OS_STR: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsString\", \"as_os_str\"];\n pub const OS_STR_TO_OS_STRING: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsStr\", \"to_os_string\"];\n pub(super) const PANICKING_PANIC: [&str; 3] = [\"core\", \"panicking\", \"panic\"];\n@@ -155,9 +154,7 @@ pub const SYMBOL_TO_IDENT_STRING: [&str; 4] = [\"rustc_span\", \"symbol\", \"Symbol\",\n pub const SYM_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"sym\"];\n #[cfg(feature = \"internal-lints\")]\n pub const SYNTAX_CONTEXT: [&str; 3] = [\"rustc_span\", \"hygiene\", \"SyntaxContext\"];\n-pub const TO_OWNED: [&str; 3] = [\"alloc\", \"borrow\", \"ToOwned\"];\n pub const TO_OWNED_METHOD: [&str; 4] = [\"alloc\", \"borrow\", \"ToOwned\", \"to_owned\"];\n-pub const TO_STRING: [&str; 3] = [\"alloc\", \"string\", \"ToString\"];\n pub const TO_STRING_METHOD: [&str; 4] = [\"alloc\", \"string\", \"ToString\", \"to_string\"];\n pub const TRANSMUTE: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n pub const TRY_FROM: [&str; 4] = [\"core\", \"convert\", \"TryFrom\", \"try_from\"];"}]}