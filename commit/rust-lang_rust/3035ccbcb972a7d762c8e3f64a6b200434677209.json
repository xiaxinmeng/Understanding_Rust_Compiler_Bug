{"sha": "3035ccbcb972a7d762c8e3f64a6b200434677209", "node_id": "C_kwDOAAsO6NoAKDMwMzVjY2JjYjk3MmE3ZDc2MmM4ZTNmNjRhNmIyMDA0MzQ2NzcyMDk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-18T12:26:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-18T12:26:46Z"}, "message": "Rollup merge of #108031 - jieyouxu:issue-108019, r=estebank\n\nDon't recover lifetimes/labels containing emojis as character literals\n\nFixes #108019.\n\nNote that at the time of this commit, `unic-emoji-char` seems to have data tables only up to Unicode 5.0, but Unicode is already newer than this.\n\nA newer emoji such as `\ud83e\udd7a` will not be recognized as an emoji but older emojis such as `\ud83d\udc31` will.\n\nThis PR leaves a couple of FIXMEs where `unic_emoji_char::is_emoji` is used.", "tree": {"sha": "14e538a50e8187007e1d40e81ad8b37c42b4ed48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14e538a50e8187007e1d40e81ad8b37c42b4ed48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3035ccbcb972a7d762c8e3f64a6b200434677209", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj8MQGCRBK7hj4Ov3rIwAANWYIAKYJRpSGuqDP+BibfZ/RhQgx\nPKpfEGFUq9IoDMZrFXHNuZ+Diji94xD16Ef5W32MKqbHDdHl8ZtdVS4R9FfeRD+Z\nLxreh7WcSF+bEX1gRhzLZRfL2O8mWNoYGPa4/d5DhbD4JlolM4tp2xCstJ8EPSmg\n+kkrN6PNBSTfBpXHxM3LQWGLMTfRxUwx7faItlC/SzNcm5ACeAz8lgdbHHb6vSD5\nChVyiD1Kdvy0UQBN6FT91A4lIoRM/x9ouKnKifsp+PTGwuj5B/IcoPXEodaMT1JN\nq6nzW3hWMNtC/QAWcsCMfy1evhyQ0OmqTve4marPASn8g/GeVtYgRhE8nkKOluM=\n=qJfL\n-----END PGP SIGNATURE-----\n", "payload": "tree 14e538a50e8187007e1d40e81ad8b37c42b4ed48\nparent 3701bdc6333145410f009c83bd03f424eca05009\nparent e3f9db5fc319c6d8eee5d47d216ea6a426070c41\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676723206 +0100\ncommitter GitHub <noreply@github.com> 1676723206 +0100\n\nRollup merge of #108031 - jieyouxu:issue-108019, r=estebank\n\nDon't recover lifetimes/labels containing emojis as character literals\n\nFixes #108019.\n\nNote that at the time of this commit, `unic-emoji-char` seems to have data tables only up to Unicode 5.0, but Unicode is already newer than this.\n\nA newer emoji such as `\ud83e\udd7a` will not be recognized as an emoji but older emojis such as `\ud83d\udc31` will.\n\nThis PR leaves a couple of FIXMEs where `unic_emoji_char::is_emoji` is used.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3035ccbcb972a7d762c8e3f64a6b200434677209", "html_url": "https://github.com/rust-lang/rust/commit/3035ccbcb972a7d762c8e3f64a6b200434677209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3035ccbcb972a7d762c8e3f64a6b200434677209/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3701bdc6333145410f009c83bd03f424eca05009", "url": "https://api.github.com/repos/rust-lang/rust/commits/3701bdc6333145410f009c83bd03f424eca05009", "html_url": "https://github.com/rust-lang/rust/commit/3701bdc6333145410f009c83bd03f424eca05009"}, {"sha": "e3f9db5fc319c6d8eee5d47d216ea6a426070c41", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f9db5fc319c6d8eee5d47d216ea6a426070c41", "html_url": "https://github.com/rust-lang/rust/commit/e3f9db5fc319c6d8eee5d47d216ea6a426070c41"}], "stats": {"total": 195, "additions": 178, "deletions": 17}, "files": [{"sha": "8c39feca88a0e62f28e7c25e84c374a86fdcc549", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3035ccbcb972a7d762c8e3f64a6b200434677209/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3035ccbcb972a7d762c8e3f64a6b200434677209/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=3035ccbcb972a7d762c8e3f64a6b200434677209", "patch": "@@ -471,6 +471,8 @@ pub enum StashKey {\n     /// When an invalid lifetime e.g. `'2` should be reinterpreted\n     /// as a char literal in the parser\n     LifetimeIsChar,\n+    /// When an invalid lifetime e.g. `'\ud83d\udc31` contains emoji.\n+    LifetimeContainsEmoji,\n     /// Maybe there was a typo where a comma was forgotten before\n     /// FRU syntax\n     MaybeFruTypo,"}, {"sha": "e6f04fe0aaa634c8405aa8cad9330e70d892d561", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3035ccbcb972a7d762c8e3f64a6b200434677209/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3035ccbcb972a7d762c8e3f64a6b200434677209/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=3035ccbcb972a7d762c8e3f64a6b200434677209", "patch": "@@ -95,7 +95,7 @@ pub enum TokenKind {\n     Literal { kind: LiteralKind, suffix_start: u32 },\n \n     /// \"'a\"\n-    Lifetime { starts_with_number: bool },\n+    Lifetime { starts_with_number: bool, contains_emoji: bool },\n \n     // One-char tokens:\n     /// \";\"\n@@ -630,7 +630,13 @@ impl Cursor<'_> {\n             // If the first symbol is valid for identifier, it can be a lifetime.\n             // Also check if it's a number for a better error reporting (so '0 will\n             // be reported as invalid lifetime and not as unterminated char literal).\n-            is_id_start(self.first()) || self.first().is_digit(10)\n+            // We also have to account for potential `'\ud83d\udc31` emojis to avoid reporting\n+            // it as an unterminated char literal.\n+            is_id_start(self.first())\n+                || self.first().is_digit(10)\n+                // FIXME(#108019): `unic-emoji-char` seems to have data tables only up to Unicode\n+                // 5.0, but Unicode is already newer than this.\n+                || unic_emoji_char::is_emoji(self.first())\n         };\n \n         if !can_be_a_lifetime {\n@@ -643,16 +649,33 @@ impl Cursor<'_> {\n             return Literal { kind, suffix_start };\n         }\n \n-        // Either a lifetime or a character literal with\n-        // length greater than 1.\n+        // Either a lifetime or a character literal.\n \n         let starts_with_number = self.first().is_digit(10);\n+        let mut contains_emoji = false;\n \n-        // Skip the literal contents.\n-        // First symbol can be a number (which isn't a valid identifier start),\n-        // so skip it without any checks.\n-        self.bump();\n-        self.eat_while(is_id_continue);\n+        // FIXME(#108019): `unic-emoji-char` seems to have data tables only up to Unicode\n+        // 5.0, but Unicode is already newer than this.\n+        if unic_emoji_char::is_emoji(self.first()) {\n+            contains_emoji = true;\n+        } else {\n+            // Skip the literal contents.\n+            // First symbol can be a number (which isn't a valid identifier start),\n+            // so skip it without any checks.\n+            self.bump();\n+        }\n+        self.eat_while(|c| {\n+            if is_id_continue(c) {\n+                true\n+            // FIXME(#108019): `unic-emoji-char` seems to have data tables only up to Unicode\n+            // 5.0, but Unicode is already newer than this.\n+            } else if unic_emoji_char::is_emoji(c) {\n+                contains_emoji = true;\n+                true\n+            } else {\n+                false\n+            }\n+        });\n \n         // Check if after skipping literal contents we've met a closing\n         // single quote (which means that user attempted to create a\n@@ -662,7 +685,7 @@ impl Cursor<'_> {\n             let kind = Char { terminated: true };\n             Literal { kind, suffix_start: self.pos_within_token() }\n         } else {\n-            Lifetime { starts_with_number }\n+            Lifetime { starts_with_number, contains_emoji }\n         }\n     }\n "}, {"sha": "670d64fb983f574932abcb5f515a61548c4215b5", "filename": "compiler/rustc_lexer/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3035ccbcb972a7d762c8e3f64a6b200434677209/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3035ccbcb972a7d762c8e3f64a6b200434677209/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs?ref=3035ccbcb972a7d762c8e3f64a6b200434677209", "patch": "@@ -235,7 +235,7 @@ fn lifetime() {\n     check_lexing(\n         \"'abc\",\n         expect![[r#\"\n-            Token { kind: Lifetime { starts_with_number: false }, len: 4 }\n+            Token { kind: Lifetime { starts_with_number: false, contains_emoji: false }, len: 4 }\n         \"#]],\n     );\n }"}, {"sha": "37449aaabed8ba4e677ff09a12a62a2637ae2849", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3035ccbcb972a7d762c8e3f64a6b200434677209/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3035ccbcb972a7d762c8e3f64a6b200434677209/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=3035ccbcb972a7d762c8e3f64a6b200434677209", "patch": "@@ -200,16 +200,21 @@ impl<'a> StringReader<'a> {\n                     };\n                     token::Literal(token::Lit { kind, symbol, suffix })\n                 }\n-                rustc_lexer::TokenKind::Lifetime { starts_with_number } => {\n+                rustc_lexer::TokenKind::Lifetime { starts_with_number, contains_emoji } => {\n                     // Include the leading `'` in the real identifier, for macro\n                     // expansion purposes. See #12512 for the gory details of why\n                     // this is necessary.\n                     let lifetime_name = self.str_from(start);\n                     if starts_with_number {\n                         let span = self.mk_sp(start, self.pos);\n-                        let mut diag = self.sess.struct_err(\"lifetimes cannot start with a number\");\n+                        let mut diag = self.sess.struct_err(\"lifetimes or labels cannot start with a number\");\n                         diag.set_span(span);\n                         diag.stash(span, StashKey::LifetimeIsChar);\n+                    } else if contains_emoji {\n+                        let span = self.mk_sp(start, self.pos);\n+                        let mut diag = self.sess.struct_err(\"lifetimes or labels cannot contain emojis\");\n+                        diag.set_span(span);\n+                        diag.stash(span, StashKey::LifetimeContainsEmoji);\n                     }\n                     let ident = Symbol::intern(lifetime_name);\n                     token::Lifetime(ident)"}, {"sha": "f0f86224560100121aad9e2e19551fd0e61bad4b", "filename": "tests/ui/lexer/issue-108019-bad-emoji-recovery.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3035ccbcb972a7d762c8e3f64a6b200434677209/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3035ccbcb972a7d762c8e3f64a6b200434677209/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.rs?ref=3035ccbcb972a7d762c8e3f64a6b200434677209", "patch": "@@ -0,0 +1,45 @@\n+#![allow(unused_labels)]\n+\n+// FIXME(#108019): outdated Unicode table\n+// fn foo() {\n+//     '\ud83e\udd7a loop {\n+//         break\n+//     }\n+// }\n+\n+fn bar() {\n+    '\ud83d\udc31 loop {\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR lifetimes or labels cannot contain emojis\n+        break\n+    }\n+}\n+\n+fn qux() {\n+    'a\ud83d\udc31 loop {\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR lifetimes or labels cannot contain emojis\n+        break\n+    }\n+}\n+\n+fn quux() {\n+    '1\ud83d\udc31 loop {\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR lifetimes or labels cannot start with a number\n+        break\n+    }\n+}\n+\n+fn x<'\ud83d\udc31>() -> &'\ud83d\udc31 () {\n+    //~^ ERROR lifetimes or labels cannot contain emojis\n+    //~| ERROR lifetimes or labels cannot contain emojis\n+    &()\n+}\n+\n+fn y() {\n+    'a\ud83d\udc31: loop {}\n+    //~^ ERROR lifetimes or labels cannot contain emojis\n+}\n+\n+fn main() {}"}, {"sha": "be77ffdea349f4296042f760e99923935573e7d8", "filename": "tests/ui/lexer/issue-108019-bad-emoji-recovery.stderr", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/3035ccbcb972a7d762c8e3f64a6b200434677209/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3035ccbcb972a7d762c8e3f64a6b200434677209/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.stderr?ref=3035ccbcb972a7d762c8e3f64a6b200434677209", "patch": "@@ -0,0 +1,86 @@\n+error: labeled expression must be followed by `:`\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:11:5\n+   |\n+LL |       '\ud83d\udc31 loop {\n+   |       ^--- help: add `:` after the label\n+   |       |\n+   |  _____the label\n+   | |\n+LL | |\n+LL | |\n+LL | |         break\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:19:5\n+   |\n+LL |       'a\ud83d\udc31 loop {\n+   |       ^---- help: add `:` after the label\n+   |       |\n+   |  _____the label\n+   | |\n+LL | |\n+LL | |\n+LL | |         break\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:27:5\n+   |\n+LL |       '1\ud83d\udc31 loop {\n+   |       ^---- help: add `:` after the label\n+   |       |\n+   |  _____the label\n+   | |\n+LL | |\n+LL | |\n+LL | |         break\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: lifetimes or labels cannot contain emojis\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:11:5\n+   |\n+LL |     '\ud83d\udc31 loop {\n+   |     ^^^\n+\n+error: lifetimes or labels cannot contain emojis\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:19:5\n+   |\n+LL |     'a\ud83d\udc31 loop {\n+   |     ^^^^\n+\n+error: lifetimes or labels cannot start with a number\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:27:5\n+   |\n+LL |     '1\ud83d\udc31 loop {\n+   |     ^^^^\n+\n+error: lifetimes or labels cannot contain emojis\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:34:6\n+   |\n+LL | fn x<'\ud83d\udc31>() -> &'\ud83d\udc31 () {\n+   |      ^^^\n+\n+error: lifetimes or labels cannot contain emojis\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:34:16\n+   |\n+LL | fn x<'\ud83d\udc31>() -> &'\ud83d\udc31 () {\n+   |                 ^^^\n+\n+error: lifetimes or labels cannot contain emojis\n+  --> $DIR/issue-108019-bad-emoji-recovery.rs:41:5\n+   |\n+LL |     'a\ud83d\udc31: loop {}\n+   |     ^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "a082a8a44df2ae29d6ecac46e6cbe7efe66560e4", "filename": "tests/ui/parser/numeric-lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3035ccbcb972a7d762c8e3f64a6b200434677209/tests%2Fui%2Fparser%2Fnumeric-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3035ccbcb972a7d762c8e3f64a6b200434677209/tests%2Fui%2Fparser%2Fnumeric-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fnumeric-lifetime.rs?ref=3035ccbcb972a7d762c8e3f64a6b200434677209", "patch": "@@ -1,6 +1,6 @@\n struct S<'1> { s: &'1 usize }\n-//~^ ERROR lifetimes cannot start with a number\n-//~| ERROR lifetimes cannot start with a number\n+//~^ ERROR lifetimes or labels cannot start with a number\n+//~| ERROR lifetimes or labels cannot start with a number\n fn main() {\n     // verify that the parse error doesn't stop type checking\n     let x: usize = \"\";"}, {"sha": "66e35dca923199d02d7467ff18d27f65a0bedb58", "filename": "tests/ui/parser/numeric-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3035ccbcb972a7d762c8e3f64a6b200434677209/tests%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3035ccbcb972a7d762c8e3f64a6b200434677209/tests%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fnumeric-lifetime.stderr?ref=3035ccbcb972a7d762c8e3f64a6b200434677209", "patch": "@@ -6,13 +6,13 @@ LL |     let x: usize = \"\";\n    |            |\n    |            expected due to this\n \n-error: lifetimes cannot start with a number\n+error: lifetimes or labels cannot start with a number\n   --> $DIR/numeric-lifetime.rs:1:10\n    |\n LL | struct S<'1> { s: &'1 usize }\n    |          ^^\n \n-error: lifetimes cannot start with a number\n+error: lifetimes or labels cannot start with a number\n   --> $DIR/numeric-lifetime.rs:1:20\n    |\n LL | struct S<'1> { s: &'1 usize }"}]}