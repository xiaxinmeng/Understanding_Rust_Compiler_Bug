{"sha": "cfdd6ba77e077d051dba7da064761050d5754b4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZGQ2YmE3N2UwNzdkMDUxZGJhN2RhMDY0NzYxMDUwZDU3NTRiNGE=", "commit": {"author": {"name": "Christopher Vittal", "email": "christopher.vittal@gmail.com", "date": "2019-05-02T22:34:15Z"}, "committer": {"name": "Christopher Vittal", "email": "christopher.vittal@gmail.com", "date": "2019-05-03T07:11:37Z"}, "message": "Update tests", "tree": {"sha": "08a4907a2a2d98b5b487e86eb78ffd79e098f799", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08a4907a2a2d98b5b487e86eb78ffd79e098f799"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfdd6ba77e077d051dba7da064761050d5754b4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfdd6ba77e077d051dba7da064761050d5754b4a", "html_url": "https://github.com/rust-lang/rust/commit/cfdd6ba77e077d051dba7da064761050d5754b4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfdd6ba77e077d051dba7da064761050d5754b4a/comments", "author": {"login": "chrisvittal", "id": 15916123, "node_id": "MDQ6VXNlcjE1OTE2MTIz", "avatar_url": "https://avatars.githubusercontent.com/u/15916123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisvittal", "html_url": "https://github.com/chrisvittal", "followers_url": "https://api.github.com/users/chrisvittal/followers", "following_url": "https://api.github.com/users/chrisvittal/following{/other_user}", "gists_url": "https://api.github.com/users/chrisvittal/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisvittal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisvittal/subscriptions", "organizations_url": "https://api.github.com/users/chrisvittal/orgs", "repos_url": "https://api.github.com/users/chrisvittal/repos", "events_url": "https://api.github.com/users/chrisvittal/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisvittal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chrisvittal", "id": 15916123, "node_id": "MDQ6VXNlcjE1OTE2MTIz", "avatar_url": "https://avatars.githubusercontent.com/u/15916123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisvittal", "html_url": "https://github.com/chrisvittal", "followers_url": "https://api.github.com/users/chrisvittal/followers", "following_url": "https://api.github.com/users/chrisvittal/following{/other_user}", "gists_url": "https://api.github.com/users/chrisvittal/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisvittal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisvittal/subscriptions", "organizations_url": "https://api.github.com/users/chrisvittal/orgs", "repos_url": "https://api.github.com/users/chrisvittal/repos", "events_url": "https://api.github.com/users/chrisvittal/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisvittal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a0426c2695e1a22c37b5ce039fb0febeb8b8f6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a0426c2695e1a22c37b5ce039fb0febeb8b8f6b", "html_url": "https://github.com/rust-lang/rust/commit/2a0426c2695e1a22c37b5ce039fb0febeb8b8f6b"}], "stats": {"total": 768, "additions": 121, "deletions": 647}, "files": [{"sha": "7d4a7c708ddd73e91688d809dd1ee09d4b0d2de6", "filename": "src/test/run-pass/binding/match-pipe-binding.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-pipe-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-pipe-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-pipe-binding.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// compile-flags: -Z borrowck=compare\n \n fn test1() {\n     // from issue 6338"}, {"sha": "eff8e275bb58bd36f61090d4a3a446ab103cb00a", "filename": "src/test/run-pass/issues/issue-16671.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16671.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-//compile-flags: -Z borrowck=compare\n \n #![deny(warnings)]\n "}, {"sha": "f2f3ebff2db1839c4a0b911e73294a6f80777212", "filename": "src/test/run-pass/issues/issue-49955.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Frun-pass%2Fissues%2Fissue-49955.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Frun-pass%2Fissues%2Fissue-49955.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-49955.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// compile-flags: -Z borrowck=compare\n \n const ALL_THE_NUMS: [u32; 1] = [\n     1"}, {"sha": "b89a80c1307cf66364e0a20c294f8139b2ddc972", "filename": "src/test/run-pass/issues/issue-8860.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Frun-pass%2Fissues%2Fissue-8860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Frun-pass%2Fissues%2Fissue-8860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-8860.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(dead_code)]\n-// compile-flags: -Z borrowck=compare\n \n static mut DROP: isize = 0;\n static mut DROP_S: isize = 0;"}, {"sha": "ea0ef95e4f1af3d5c8bf3a1ff6aa6eb10221ea1a", "filename": "src/test/run-pass/numbers-arithmetic/i128.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Frun-pass%2Fnumbers-arithmetic%2Fi128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Frun-pass%2Fnumbers-arithmetic%2Fi128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumbers-arithmetic%2Fi128.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -3,7 +3,6 @@\n \n // ignore-emscripten i128 doesn't work\n \n-// compile-flags: -Z borrowck=compare\n \n #![feature(test)]\n "}, {"sha": "9394071632377eec0b7ec4baa72fb1d9cdeba500", "filename": "src/test/run-pass/numbers-arithmetic/u128.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Frun-pass%2Fnumbers-arithmetic%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Frun-pass%2Fnumbers-arithmetic%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumbers-arithmetic%2Fu128.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n // ignore-emscripten u128 not supported\n \n-// compile-flags: -Z borrowck=compare\n \n #![feature(test)]\n "}, {"sha": "6b00293b6e52ad46a5f078c579590e6595375ddb", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -2,7 +2,6 @@\n #![allow(dead_code)]\n #![allow(unreachable_code)]\n #![allow(unused_parens)]\n-// compile-flags: -Z borrowck=compare\n \n #![recursion_limit = \"256\"]\n "}, {"sha": "5fe51654f3b7977ecf7c8f2024ed676403892d17", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -2,8 +2,6 @@\n // access to the variable, whether that mutable access be used\n // for direct assignment or for taking mutable ref. Issue #6801.\n \n-// compile-flags: -Z borrowck=compare\n-\n #![feature(box_syntax)]\n \n fn to_fn_mut<F: FnMut()>(f: F) -> F { f }\n@@ -12,7 +10,6 @@ fn a() {\n     let mut x = 3;\n     let c1 = to_fn_mut(|| x = 4);\n     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n-    //~| ERROR cannot borrow `x` as mutable more than once\n     drop((c1, c2));\n }\n \n@@ -24,15 +21,13 @@ fn b() {\n     let mut x = 3;\n     let c1 = to_fn_mut(|| set(&mut x));\n     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n-    //~| ERROR cannot borrow `x` as mutable more than once\n     drop((c1, c2));\n }\n \n fn c() {\n     let mut x = 3;\n     let c1 = to_fn_mut(|| x = 5);\n     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n-    //~| ERROR cannot borrow `x` as mutable more than once\n     drop((c1, c2));\n }\n \n@@ -41,7 +36,6 @@ fn d() {\n     let c1 = to_fn_mut(|| x = 5);\n     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n     //~^ ERROR cannot borrow `x` as mutable more than once\n-    //~| ERROR cannot borrow `x` as mutable more than once\n     drop((c1, c2));\n }\n \n@@ -54,7 +48,6 @@ fn g() {\n     let c1 = to_fn_mut(|| set(&mut *x.f));\n     let c2 = to_fn_mut(|| set(&mut *x.f));\n     //~^ ERROR cannot borrow `x` as mutable more than once\n-    //~| ERROR cannot borrow `x` as mutable more than once\n     drop((c1, c2));\n }\n "}, {"sha": "bffb11640744c6bf7b06d900b28db9dbb7dd690b", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut.stderr", "status": "modified", "additions": 13, "deletions": 91, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,80 +1,5 @@\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:14:24\n-   |\n-LL |     let c1 = to_fn_mut(|| x = 4);\n-   |                        -- - previous borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| x = 5);\n-   |                        ^^ - borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:26:24\n-   |\n-LL |     let c1 = to_fn_mut(|| set(&mut x));\n-   |                        --          - previous borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x));\n-   |                        ^^          - borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:34:24\n-   |\n-LL |     let c1 = to_fn_mut(|| x = 5);\n-   |                        -- - previous borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x));\n-   |                        ^^          - borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:42:24\n-   |\n-LL |     let c1 = to_fn_mut(|| x = 5);\n-   |                        -- - previous borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n-   |                        ^^                                  - borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:55:24\n-   |\n-LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n-   |                        --           - previous borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n-   |                        ^^           - borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n-  --> $DIR/borrowck-closures-two-mut.rs:14:24\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut.rs:12:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 4);\n    |                        -- - first borrow occurs due to use of `x` in closure\n@@ -84,12 +9,11 @@ LL |     let c2 = to_fn_mut(|| x = 5);\n    |                        ^^ - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n-  --> $DIR/borrowck-closures-two-mut.rs:26:24\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut.rs:23:24\n    |\n LL |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - first borrow occurs due to use of `x` in closure\n@@ -99,12 +23,11 @@ LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n-  --> $DIR/borrowck-closures-two-mut.rs:34:24\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut.rs:30:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - first borrow occurs due to use of `x` in closure\n@@ -114,12 +37,11 @@ LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n-  --> $DIR/borrowck-closures-two-mut.rs:42:24\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut.rs:37:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - first borrow occurs due to use of `x` in closure\n@@ -129,12 +51,12 @@ LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nes\n    |                        ^^                                  - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-...\n+LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n-  --> $DIR/borrowck-closures-two-mut.rs:55:24\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut.rs:49:24\n    |\n LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n    |                        --           - first borrow occurs due to use of `x` in closure\n@@ -144,10 +66,10 @@ LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n    |                        ^^           - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-...\n+LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0499`."}, {"sha": "866b3a2a8af9b485346667b1522910c8e1a79a5b", "filename": "src/test/ui/borrowck/borrowck-reinit.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,10 +1,7 @@\n-// compile-flags: -Z borrowck=compare\n-\n fn main() {\n     let mut x = Box::new(0);\n     let _u = x; // error shouldn't note this move\n     x = Box::new(1);\n     drop(x);\n-    let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n-    //~^ ERROR use of moved value: `x` (Mir)\n+    let _ = (1,x); //~ ERROR use of moved value: `x`\n }"}, {"sha": "f8f14b6435f086a62704a5ff295404e41294d2e3", "filename": "src/test/ui/borrowck/borrowck-reinit.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,15 +1,5 @@\n-error[E0382]: use of moved value: `x` (Ast)\n-  --> $DIR/borrowck-reinit.rs:8:16\n-   |\n-LL |     drop(x);\n-   |          - value moved here\n-LL |     let _ = (1,x);\n-   |                ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `x` (Mir)\n-  --> $DIR/borrowck-reinit.rs:8:16\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/borrowck-reinit.rs:6:16\n    |\n LL |     let mut x = Box::new(0);\n    |         ----- move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -19,6 +9,6 @@ LL |     drop(x);\n LL |     let _ = (1,x);\n    |                ^ value used here after move\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "fe9844610425e37296c57a3c345bdedf942404af", "filename": "src/test/ui/borrowck/borrowck-storage-dead.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z borrowck=compare\n-\n fn ok() {\n     loop {\n         let _x = 1;\n@@ -15,8 +13,7 @@ fn also_ok() {\n fn fail() {\n     loop {\n         let x: i32;\n-        let _ = x + 1; //~ERROR (Ast) [E0381]\n-                       //~^ ERROR (Mir) [E0381]\n+        let _ = x + 1; //~ERROR [E0381]\n     }\n }\n "}, {"sha": "5b9f49c2e7c920ad80620ad263b26e4089c3cf15", "filename": "src/test/ui/borrowck/borrowck-storage-dead.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,15 +1,9 @@\n-error[E0381]: use of possibly uninitialized variable: `x` (Ast)\n-  --> $DIR/borrowck-storage-dead.rs:18:17\n+error[E0381]: use of possibly uninitialized variable: `x`\n+  --> $DIR/borrowck-storage-dead.rs:16:17\n    |\n LL |         let _ = x + 1;\n    |                 ^ use of possibly uninitialized `x`\n \n-error[E0381]: use of possibly uninitialized variable: `x` (Mir)\n-  --> $DIR/borrowck-storage-dead.rs:18:17\n-   |\n-LL |         let _ = x + 1;\n-   |                 ^ use of possibly uninitialized `x`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0381`."}, {"sha": "2352d1bbe64565b78ab09e265a842878825e4fe5", "filename": "src/test/ui/borrowck/immutable-arg.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,9 +1,6 @@\n-//compile-flags: -Z borrowck=compare\n-\n fn foo(_x: u32) {\n     _x = 4;\n-    //~^ ERROR cannot assign to immutable argument `_x` (Mir)\n-    //~^^ ERROR cannot assign twice to immutable variable `_x` (Ast)\n+    //~^ ERROR cannot assign to immutable argument `_x`\n }\n \n fn main() {}"}, {"sha": "7255ca327e753328a56579e421fc06fe8f9cd0cb", "filename": "src/test/ui/borrowck/immutable-arg.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,19 +1,11 @@\n-error[E0384]: cannot assign twice to immutable variable `_x` (Ast)\n-  --> $DIR/immutable-arg.rs:4:5\n-   |\n-LL | fn foo(_x: u32) {\n-   |        -- first assignment to `_x`\n-LL |     _x = 4;\n-   |     ^^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign to immutable argument `_x` (Mir)\n-  --> $DIR/immutable-arg.rs:4:5\n+error[E0384]: cannot assign to immutable argument `_x`\n+  --> $DIR/immutable-arg.rs:2:5\n    |\n LL | fn foo(_x: u32) {\n    |        -- help: make this binding mutable: `mut _x`\n LL |     _x = 4;\n    |     ^^^^^^ cannot assign to immutable argument\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0384`."}, {"sha": "38a01b138e47dea4bbba8ff00256a5bae8d883bb", "filename": "src/test/ui/borrowck/issue-41962.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,13 +1,9 @@\n-// compile-flags: -Z borrowck=compare\n-\n pub fn main(){\n     let maybe = Some(vec![true, true]);\n \n     loop {\n         if let Some(thing) = maybe {\n         }\n-        //~^^ ERROR use of partially moved value: `maybe` (Ast) [E0382]\n-        //~| ERROR use of moved value: `(maybe as std::prelude::v1::Some).0` (Ast) [E0382]\n-        //~| ERROR use of moved value (Mir) [E0382]\n+        //~^^ ERROR use of moved value [E0382]\n     }\n }"}, {"sha": "422d1605aa46b78a2b0fff91d8285f6a80c35336", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,29 +1,11 @@\n-error[E0382]: use of partially moved value: `maybe` (Ast)\n-  --> $DIR/issue-41962.rs:7:30\n-   |\n-LL |         if let Some(thing) = maybe {\n-   |                     -----    ^^^^^ value used here after move\n-   |                     |\n-   |                     value moved here\n-   |\n-   = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `(maybe as std::prelude::v1::Some).0` (Ast)\n-  --> $DIR/issue-41962.rs:7:21\n-   |\n-LL |         if let Some(thing) = maybe {\n-   |                     ^^^^^ value moved here in previous iteration of loop\n-   |\n-   = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value (Mir)\n-  --> $DIR/issue-41962.rs:7:21\n+error[E0382]: use of moved value\n+  --> $DIR/issue-41962.rs:5:21\n    |\n LL |         if let Some(thing) = maybe {\n    |                     ^^^^^ value moved here, in previous iteration of loop\n    |\n    = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "b643bbf3376fb8b69a8fd8fc0c89b563bbd26644", "filename": "src/test/ui/generator/yield-while-local-borrowed.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z borrowck=compare\n-\n #![feature(generators, generator_trait)]\n \n use std::ops::{GeneratorState, Generator};\n@@ -13,8 +11,7 @@ fn borrow_local_inline() {\n     // `b` and gets extended by region inference.)\n     let mut b = move || {\n         let a = &mut 3;\n-        //~^ ERROR borrow may still be in use when generator yields (Ast)\n-        //~| ERROR borrow may still be in use when generator yields (Mir)\n+        //~^ ERROR borrow may still be in use when generator yields\n         yield();\n         println!(\"{}\", a);\n     };\n@@ -41,8 +38,7 @@ fn borrow_local() {\n         let a = 3;\n         {\n             let b = &a;\n-            //~^ ERROR borrow may still be in use when generator yields (Ast)\n-            //~| ERROR borrow may still be in use when generator yields (Mir)\n+            //~^ ERROR borrow may still be in use when generator yields\n             yield();\n             println!(\"{}\", b);\n         }"}, {"sha": "c1513ef9b71573fe21383d6e7e4c70d9ff0102db", "filename": "src/test/ui/generator/yield-while-local-borrowed.stderr", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,39 +1,21 @@\n-error[E0626]: borrow may still be in use when generator yields (Ast)\n-  --> $DIR/yield-while-local-borrowed.rs:15:22\n-   |\n-LL |         let a = &mut 3;\n-   |                      ^\n-...\n-LL |         yield();\n-   |         ------- possible yield occurs here\n-\n-error[E0626]: borrow may still be in use when generator yields (Ast)\n-  --> $DIR/yield-while-local-borrowed.rs:43:22\n-   |\n-LL |             let b = &a;\n-   |                      ^\n-...\n-LL |             yield();\n-   |             ------- possible yield occurs here\n-\n-error[E0626]: borrow may still be in use when generator yields (Mir)\n-  --> $DIR/yield-while-local-borrowed.rs:15:17\n+error[E0626]: borrow may still be in use when generator yields\n+  --> $DIR/yield-while-local-borrowed.rs:13:17\n    |\n LL |         let a = &mut 3;\n    |                 ^^^^^^\n-...\n+LL |\n LL |         yield();\n    |         ------- possible yield occurs here\n \n-error[E0626]: borrow may still be in use when generator yields (Mir)\n-  --> $DIR/yield-while-local-borrowed.rs:43:21\n+error[E0626]: borrow may still be in use when generator yields\n+  --> $DIR/yield-while-local-borrowed.rs:40:21\n    |\n LL |             let b = &a;\n    |                     ^^\n-...\n+LL |\n LL |             yield();\n    |             ------- possible yield occurs here\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0626`."}, {"sha": "18b2ce85125f299ac14eff2fefa3ab1f971fddd2", "filename": "src/test/ui/issues/issue-44373-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-44373-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-44373-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44373-2.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,6 +1,5 @@\n // compile-pass\n #![allow(dead_code)]\n-// compile-flags: -Z borrowck=compare\n \n struct Foo(bool);\n "}, {"sha": "b45f1170b86c5a0c0a0e6c47cafe9c266219a85b", "filename": "src/test/ui/issues/issue-45697-1.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-45697-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-45697-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45697-1.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,7 +1,7 @@\n // Test that assignments to an `&mut` pointer which is found in a\n // borrowed (but otherwise non-aliasable) location is illegal.\n \n-// compile-flags: -Z borrowck=compare -C overflow-checks=on\n+// compile-flags: -C overflow-checks=on\n \n struct S<'a> {\n     pointer: &'a mut isize\n@@ -18,9 +18,8 @@ fn main() {\n         let mut y = S { pointer: &mut x };\n         let z = copy_borrowed_ptr(&mut y);\n         *y.pointer += 1;\n-        //~^ ERROR cannot assign to `*y.pointer` because it is borrowed (Ast) [E0506]\n-        //~| ERROR cannot use `*y.pointer` because it was mutably borrowed (Mir) [E0503]\n-        //~| ERROR cannot assign to `*y.pointer` because it is borrowed (Mir) [E0506]\n+        //~^ ERROR cannot use `*y.pointer` because it was mutably borrowed [E0503]\n+        //~| ERROR cannot assign to `*y.pointer` because it is borrowed [E0506]\n         *z.pointer += 1;\n     }\n }"}, {"sha": "30c69f19658c84e0240bdc95a22938fd7a16133b", "filename": "src/test/ui/issues/issue-45697-1.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-45697-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-45697-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45697-1.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,12 +1,4 @@\n-error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Ast)\n-  --> $DIR/issue-45697-1.rs:20:9\n-   |\n-LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                        - borrow of `*y.pointer` occurs here\n-LL |         *y.pointer += 1;\n-   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n-\n-error[E0503]: cannot use `*y.pointer` because it was mutably borrowed (Mir)\n+error[E0503]: cannot use `*y.pointer` because it was mutably borrowed\n   --> $DIR/issue-45697-1.rs:20:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n@@ -17,7 +9,7 @@ LL |         *y.pointer += 1;\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here\n \n-error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Mir)\n+error[E0506]: cannot assign to `*y.pointer` because it is borrowed\n   --> $DIR/issue-45697-1.rs:20:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n@@ -28,7 +20,7 @@ LL |         *y.pointer += 1;\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0503, E0506.\n For more information about an error, try `rustc --explain E0503`."}, {"sha": "db6d1d8fa2a922d73fa9014301e0f2f6bc9dc236", "filename": "src/test/ui/issues/issue-45697.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-45697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-45697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45697.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,7 +1,7 @@\n // Test that assignments to an `&mut` pointer which is found in a\n // borrowed (but otherwise non-aliasable) location is illegal.\n \n-// compile-flags: -Z borrowck=compare -C overflow-checks=off\n+// compile-flags: -C overflow-checks=off\n \n struct S<'a> {\n     pointer: &'a mut isize\n@@ -18,9 +18,8 @@ fn main() {\n         let mut y = S { pointer: &mut x };\n         let z = copy_borrowed_ptr(&mut y);\n         *y.pointer += 1;\n-        //~^ ERROR cannot assign to `*y.pointer` because it is borrowed (Ast) [E0506]\n-        //~| ERROR cannot use `*y.pointer` because it was mutably borrowed (Mir) [E0503]\n-        //~| ERROR cannot assign to `*y.pointer` because it is borrowed (Mir) [E0506]\n+        //~^ ERROR cannot use `*y.pointer` because it was mutably borrowed [E0503]\n+        //~| ERROR cannot assign to `*y.pointer` because it is borrowed [E0506]\n         *z.pointer += 1;\n     }\n }"}, {"sha": "26749d36f0b7b69495db9ca915c2068788f1c65f", "filename": "src/test/ui/issues/issue-45697.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-45697.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-45697.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45697.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,12 +1,4 @@\n-error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Ast)\n-  --> $DIR/issue-45697.rs:20:9\n-   |\n-LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                        - borrow of `*y.pointer` occurs here\n-LL |         *y.pointer += 1;\n-   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n-\n-error[E0503]: cannot use `*y.pointer` because it was mutably borrowed (Mir)\n+error[E0503]: cannot use `*y.pointer` because it was mutably borrowed\n   --> $DIR/issue-45697.rs:20:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n@@ -17,7 +9,7 @@ LL |         *y.pointer += 1;\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here\n \n-error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Mir)\n+error[E0506]: cannot assign to `*y.pointer` because it is borrowed\n   --> $DIR/issue-45697.rs:20:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n@@ -28,7 +20,7 @@ LL |         *y.pointer += 1;\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0503, E0506.\n For more information about an error, try `rustc --explain E0503`."}, {"sha": "aa161d40f702d5e7be4296e20a58f69c3a76d410", "filename": "src/test/ui/issues/issue-46471-1.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-46471-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-46471-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46471-1.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,11 +1,8 @@\n-// compile-flags: -Z borrowck=compare\n-\n fn main() {\n     let y = {\n         let mut z = 0;\n         &mut z\n     };\n-    //~^^ ERROR `z` does not live long enough (Ast) [E0597]\n-    //~| ERROR `z` does not live long enough (Mir) [E0597]\n+    //~^^ ERROR `z` does not live long enough [E0597]\n     println!(\"{}\", y);\n }"}, {"sha": "b09f31729a5fdcc366e694af63094c94b9bac1c5", "filename": "src/test/ui/issues/issue-46471-1.stderr", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-46471-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-46471-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46471-1.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,16 +1,5 @@\n-error[E0597]: `z` does not live long enough (Ast)\n-  --> $DIR/issue-46471-1.rs:6:14\n-   |\n-LL |         &mut z\n-   |              ^ borrowed value does not live long enough\n-LL |     };\n-   |     - `z` dropped here while still borrowed\n-...\n-LL | }\n-   | - borrowed value needs to live until here\n-\n-error[E0597]: `z` does not live long enough (Mir)\n-  --> $DIR/issue-46471-1.rs:6:9\n+error[E0597]: `z` does not live long enough\n+  --> $DIR/issue-46471-1.rs:4:9\n    |\n LL |         &mut z\n    |         ^^^^^^\n@@ -20,6 +9,6 @@ LL |         &mut z\n LL |     };\n    |     - `z` dropped here while still borrowed\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "8922005d2f82c6c154efb001f187e65519618cf0", "filename": "src/test/ui/issues/issue-46471.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-46471.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-46471.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46471.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,10 +1,7 @@\n-// compile-flags: -Z borrowck=compare\n-\n fn foo() -> &'static u32 {\n     let x = 0;\n     &x\n-    //~^ ERROR `x` does not live long enough (Ast) [E0597]\n-    //~| ERROR cannot return reference to local variable `x` (Mir) [E0515]\n+    //~^ ERROR cannot return reference to local variable `x` [E0515]\n }\n \n fn main() { }"}, {"sha": "935414c1f3f9da5dd3aade98b6f1be4dc30607e3", "filename": "src/test/ui/issues/issue-46471.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-46471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-46471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46471.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,21 +1,9 @@\n-error[E0597]: `x` does not live long enough (Ast)\n-  --> $DIR/issue-46471.rs:5:6\n-   |\n-LL |     &x\n-   |      ^ borrowed value does not live long enough\n-...\n-LL | }\n-   | - borrowed value only lives until here\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n-\n-error[E0515]: cannot return reference to local variable `x` (Mir)\n-  --> $DIR/issue-46471.rs:5:5\n+error[E0515]: cannot return reference to local variable `x`\n+  --> $DIR/issue-46471.rs:3:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0515, E0597.\n-For more information about an error, try `rustc --explain E0515`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "b9e20e8dbcb5f119117af83f70587304d6eca5ea", "filename": "src/test/ui/issues/issue-46472.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-46472.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-46472.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46472.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,9 +1,6 @@\n-// compile-flags: -Z borrowck=compare\n-\n fn bar<'a>() -> &'a mut u32 {\n     &mut 4\n-    //~^ ERROR borrowed value does not live long enough (Ast) [E0597]\n-    //~| ERROR cannot return reference to temporary value (Mir) [E0515]\n+    //~^ ERROR cannot return reference to temporary value [E0515]\n }\n \n fn main() { }"}, {"sha": "6e561e03a8b7a1068210869dd85737022065a7d2", "filename": "src/test/ui/issues/issue-46472.stderr", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-46472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fissues%2Fissue-46472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46472.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,28 +1,12 @@\n-error[E0597]: borrowed value does not live long enough (Ast)\n-  --> $DIR/issue-46472.rs:4:10\n-   |\n-LL |     &mut 4\n-   |          ^ temporary value does not live long enough\n-...\n-LL | }\n-   | - temporary value only lives until here\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 3:8...\n-  --> $DIR/issue-46472.rs:3:8\n-   |\n-LL | fn bar<'a>() -> &'a mut u32 {\n-   |        ^^\n-\n-error[E0515]: cannot return reference to temporary value (Mir)\n-  --> $DIR/issue-46472.rs:4:5\n+error[E0515]: cannot return reference to temporary value\n+  --> $DIR/issue-46472.rs:2:5\n    |\n LL |     &mut 4\n    |     ^^^^^-\n    |     |    |\n    |     |    temporary value created here\n    |     returns a reference to data owned by the current function\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0515, E0597.\n-For more information about an error, try `rustc --explain E0515`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "81a20c58776c840dfacd3dfb5b2cca0250bea749", "filename": "src/test/ui/lifetimes/lifetime-errors/liveness-assign-imm-local-notes.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,17 +1,13 @@\n-// FIXME: Change to UI Test\n // Check notes are placed on an assignment that can actually precede the current assignment\n // Don't emit a first assignment for assignment in a loop.\n \n-// compile-flags: -Zborrowck=compare\n-\n fn test() {\n     let x;\n     if true {\n         x = 1;\n     } else {\n         x = 2;\n-        x = 3;      //~ ERROR (Ast) [E0384]\n-                    //~^ ERROR (Mir) [E0384]\n+        x = 3;      //~ ERROR [E0384]\n     }\n }\n \n@@ -22,8 +18,7 @@ fn test_in_loop() {\n             x = 1;\n         } else {\n             x = 2;\n-            x = 3;      //~ ERROR (Ast) [E0384]\n-                        //~^ ERROR (Mir) [E0384]\n+            x = 3;      //~ ERROR [E0384]\n         }\n     }\n }\n@@ -32,11 +27,9 @@ fn test_using_loop() {\n     let x;\n     loop {\n         if true {\n-            x = 1;      //~ ERROR (Ast) [E0384]\n-                        //~^ ERROR (Mir) [E0384]\n+            x = 1;      //~ ERROR [E0384]\n         } else {\n-            x = 2;      //~ ERROR (Ast) [E0384]\n-                        //~^ ERROR (Mir) [E0384]\n+            x = 2;      //~ ERROR [E0384]\n         }\n     }\n }"}, {"sha": "c646912d3b67950583d857964329692d36846745", "filename": "src/test/ui/lifetimes/lifetime-errors/liveness-assign-imm-local-notes.stderr", "status": "modified", "additions": 10, "deletions": 41, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,36 +1,5 @@\n-error[E0384]: cannot assign twice to immutable variable `x` (Ast)\n-  --> $DIR/liveness-assign-imm-local-notes.rs:13:9\n-   |\n-LL |         x = 2;\n-   |         ----- first assignment to `x`\n-LL |         x = 3;\n-   |         ^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x` (Ast)\n-  --> $DIR/liveness-assign-imm-local-notes.rs:25:13\n-   |\n-LL |             x = 2;\n-   |             ----- first assignment to `x`\n-LL |             x = 3;\n-   |             ^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x` (Ast)\n-  --> $DIR/liveness-assign-imm-local-notes.rs:35:13\n-   |\n-LL |             x = 1;\n-   |             ^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x` (Ast)\n-  --> $DIR/liveness-assign-imm-local-notes.rs:38:13\n-   |\n-LL |             x = 1;\n-   |             ----- first assignment to `x`\n-...\n-LL |             x = 2;\n-   |             ^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x` (Mir)\n-  --> $DIR/liveness-assign-imm-local-notes.rs:13:9\n+error[E0384]: cannot assign twice to immutable variable `x`\n+  --> $DIR/liveness-assign-imm-local-notes.rs:10:9\n    |\n LL |     let x;\n    |         - help: make this binding mutable: `mut x`\n@@ -40,8 +9,8 @@ LL |         x = 2;\n LL |         x = 3;\n    |         ^^^^^ cannot assign twice to immutable variable\n \n-error[E0384]: cannot assign twice to immutable variable `x` (Mir)\n-  --> $DIR/liveness-assign-imm-local-notes.rs:25:13\n+error[E0384]: cannot assign twice to immutable variable `x`\n+  --> $DIR/liveness-assign-imm-local-notes.rs:21:13\n    |\n LL |         let x;\n    |             - help: make this binding mutable: `mut x`\n@@ -51,27 +20,27 @@ LL |             x = 2;\n LL |             x = 3;\n    |             ^^^^^ cannot assign twice to immutable variable\n \n-error[E0384]: cannot assign twice to immutable variable `x` (Mir)\n-  --> $DIR/liveness-assign-imm-local-notes.rs:35:13\n+error[E0384]: cannot assign twice to immutable variable `x`\n+  --> $DIR/liveness-assign-imm-local-notes.rs:30:13\n    |\n LL |     let x;\n    |         - help: make this binding mutable: `mut x`\n ...\n LL |             x = 1;\n    |             ^^^^^ cannot assign twice to immutable variable\n \n-error[E0384]: cannot assign twice to immutable variable `x` (Mir)\n-  --> $DIR/liveness-assign-imm-local-notes.rs:38:13\n+error[E0384]: cannot assign twice to immutable variable `x`\n+  --> $DIR/liveness-assign-imm-local-notes.rs:32:13\n    |\n LL |     let x;\n    |         - help: make this binding mutable: `mut x`\n ...\n LL |             x = 1;\n    |             ----- first assignment to `x`\n-...\n+LL |         } else {\n LL |             x = 2;\n    |             ^^^^^ cannot assign twice to immutable variable\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0384`."}, {"sha": "828d90cd7ac7f4b48c4e2212c388e0e0a920cd0e", "filename": "src/test/ui/moves/moves-based-on-type-tuple.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,11 +1,8 @@\n #![feature(box_syntax)]\n \n-// compile-flags: -Z borrowck=compare\n-\n fn dup(x: Box<isize>) -> Box<(Box<isize>,Box<isize>)> {\n     box (x, x)\n-    //~^ use of moved value: `x` (Ast) [E0382]\n-    //~| use of moved value: `x` (Mir) [E0382]\n+    //~^ use of moved value: `x` [E0382]\n }\n \n fn main() {"}, {"sha": "2e1ddbdf57f98cd7a97095713b2d606e60c812b1", "filename": "src/test/ui/moves/moves-based-on-type-tuple.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,15 +1,5 @@\n-error[E0382]: use of moved value: `x` (Ast)\n-  --> $DIR/moves-based-on-type-tuple.rs:6:13\n-   |\n-LL |     box (x, x)\n-   |          -  ^ value used here after move\n-   |          |\n-   |          value moved here\n-   |\n-   = note: move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `x` (Mir)\n-  --> $DIR/moves-based-on-type-tuple.rs:6:13\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/moves-based-on-type-tuple.rs:4:13\n    |\n LL | fn dup(x: Box<isize>) -> Box<(Box<isize>,Box<isize>)> {\n    |        - move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -18,6 +8,6 @@ LL |     box (x, x)\n    |          |\n    |          value moved here\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "ffac8a33da104ba4a65bc2fb40a159c3325800c4", "filename": "src/test/ui/nll/get_default.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Fget_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Fget_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -3,8 +3,6 @@\n // a variety of errors from the older, AST-based machinery (notably\n // borrowck), and then we get the NLL error at the end.\n \n-// compile-flags:-Zborrowck=compare\n-\n struct Map {\n }\n \n@@ -21,8 +19,7 @@ fn ok(map: &mut Map) -> &String {\n             }\n             None => {\n                 map.set(String::new()); // Ideally, this would not error.\n-                //~^ ERROR borrowed as immutable (Ast)\n-                //~| ERROR borrowed as immutable (Mir)\n+                //~^ ERROR borrowed as immutable\n             }\n         }\n     }\n@@ -33,14 +30,12 @@ fn err(map: &mut Map) -> &String {\n         match map.get() {\n             Some(v) => {\n                 map.set(String::new()); // Both AST and MIR error here\n-                //~^ ERROR borrowed as immutable (Mir)\n-                //~| ERROR borrowed as immutable (Ast)\n+                //~^ ERROR borrowed as immutable\n                 return v;\n             }\n             None => {\n                 map.set(String::new()); // Ideally, just AST would error here\n-                //~^ ERROR borrowed as immutable (Ast)\n-                //~| ERROR borrowed as immutable (Mir)\n+                //~^ ERROR borrowed as immutable\n             }\n         }\n     }"}, {"sha": "af79771e7e1b9acfaffaf421d3bfdb211b300ea5", "filename": "src/test/ui/nll/get_default.stderr", "status": "modified", "additions": 11, "deletions": 47, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,41 +1,5 @@\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/get_default.rs:23:17\n-   |\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-...\n-LL |                 map.set(String::new()); // Ideally, this would not error.\n-   |                 ^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/get_default.rs:35:17\n-   |\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-LL |             Some(v) => {\n-LL |                 map.set(String::new()); // Both AST and MIR error here\n-   |                 ^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/get_default.rs:41:17\n-   |\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-...\n-LL |                 map.set(String::new()); // Ideally, just AST would error here\n-   |                 ^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n-  --> $DIR/get_default.rs:23:17\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n+  --> $DIR/get_default.rs:21:17\n    |\n LL | fn ok(map: &mut Map) -> &String {\n    |            - let's call the lifetime of this reference `'1`\n@@ -47,10 +11,10 @@ LL |                 return v;\n    |                        - returning this value requires that `*map` is borrowed for `'1`\n ...\n LL |                 map.set(String::new()); // Ideally, this would not error.\n-   |                 ^^^ mutable borrow occurs here\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n \n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n-  --> $DIR/get_default.rs:35:17\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n+  --> $DIR/get_default.rs:32:17\n    |\n LL | fn err(map: &mut Map) -> &String {\n    |             - let's call the lifetime of this reference `'1`\n@@ -59,13 +23,13 @@ LL |         match map.get() {\n    |               --- immutable borrow occurs here\n LL |             Some(v) => {\n LL |                 map.set(String::new()); // Both AST and MIR error here\n-   |                 ^^^ mutable borrow occurs here\n-...\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |\n LL |                 return v;\n    |                        - returning this value requires that `*map` is borrowed for `'1`\n \n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n-  --> $DIR/get_default.rs:41:17\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n+  --> $DIR/get_default.rs:37:17\n    |\n LL | fn err(map: &mut Map) -> &String {\n    |             - let's call the lifetime of this reference `'1`\n@@ -77,8 +41,8 @@ LL |                 return v;\n    |                        - returning this value requires that `*map` is borrowed for `'1`\n ...\n LL |                 map.set(String::new()); // Ideally, just AST would error here\n-   |                 ^^^ mutable borrow occurs here\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0502`."}, {"sha": "acd6ec706080ddfdc7b35446e1aec1738e9df7ed", "filename": "src/test/ui/nll/loan_ends_mid_block_pair.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags:-Zborrowck=compare\n-\n #![allow(warnings)]\n #![feature(rustc_attrs)]\n \n@@ -12,12 +10,9 @@ fn nll_fail() {\n     let c = &mut data.0;\n     capitalize(c);\n     data.0 = 'e';\n-    //~^ ERROR (Ast) [E0506]\n-    //~| ERROR (Mir) [E0506]\n+    //~^ ERROR [E0506]\n     data.0 = 'f';\n-    //~^ ERROR (Ast) [E0506]\n     data.0 = 'g';\n-    //~^ ERROR (Ast) [E0506]\n     capitalize(c);\n }\n \n@@ -26,11 +21,8 @@ fn nll_ok() {\n     let c = &mut data.0;\n     capitalize(c);\n     data.0 = 'e';\n-    //~^ ERROR (Ast) [E0506]\n     data.0 = 'f';\n-    //~^ ERROR (Ast) [E0506]\n     data.0 = 'g';\n-    //~^ ERROR (Ast) [E0506]\n }\n \n fn capitalize(_: &mut char) {"}, {"sha": "eb8442b31d7c73b323076b65fee62c112f77bfa5", "filename": "src/test/ui/nll/loan_ends_mid_block_pair.stderr", "status": "modified", "additions": 3, "deletions": 57, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,59 +1,5 @@\n-error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n-  --> $DIR/loan_ends_mid_block_pair.rs:14:5\n-   |\n-LL |     let c = &mut data.0;\n-   |                  ------ borrow of `data.0` occurs here\n-LL |     capitalize(c);\n-LL |     data.0 = 'e';\n-   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n-\n-error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n-  --> $DIR/loan_ends_mid_block_pair.rs:17:5\n-   |\n-LL |     let c = &mut data.0;\n-   |                  ------ borrow of `data.0` occurs here\n-...\n-LL |     data.0 = 'f';\n-   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n-\n-error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n-  --> $DIR/loan_ends_mid_block_pair.rs:19:5\n-   |\n-LL |     let c = &mut data.0;\n-   |                  ------ borrow of `data.0` occurs here\n-...\n-LL |     data.0 = 'g';\n-   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n-\n-error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n-  --> $DIR/loan_ends_mid_block_pair.rs:28:5\n-   |\n-LL |     let c = &mut data.0;\n-   |                  ------ borrow of `data.0` occurs here\n-LL |     capitalize(c);\n-LL |     data.0 = 'e';\n-   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n-\n-error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n-  --> $DIR/loan_ends_mid_block_pair.rs:30:5\n-   |\n-LL |     let c = &mut data.0;\n-   |                  ------ borrow of `data.0` occurs here\n-...\n-LL |     data.0 = 'f';\n-   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n-\n-error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n-  --> $DIR/loan_ends_mid_block_pair.rs:32:5\n-   |\n-LL |     let c = &mut data.0;\n-   |                  ------ borrow of `data.0` occurs here\n-...\n-LL |     data.0 = 'g';\n-   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n-\n-error[E0506]: cannot assign to `data.0` because it is borrowed (Mir)\n-  --> $DIR/loan_ends_mid_block_pair.rs:14:5\n+error[E0506]: cannot assign to `data.0` because it is borrowed\n+  --> $DIR/loan_ends_mid_block_pair.rs:12:5\n    |\n LL |     let c = &mut data.0;\n    |             ----------- borrow of `data.0` occurs here\n@@ -64,6 +10,6 @@ LL |     data.0 = 'e';\n LL |     capitalize(c);\n    |                - borrow later used here\n \n-error: aborting due to 7 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0506`."}, {"sha": "2edcdef0af86cfbf0b6c4f7236edd9b496472e39", "filename": "src/test/ui/nll/loan_ends_mid_block_vec.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags:-Zborrowck=compare\n-\n #![allow(warnings)]\n #![feature(rustc_attrs)]\n \n@@ -11,14 +9,11 @@ fn nll_fail() {\n     let slice = &mut data;\n     capitalize(slice);\n     data.push('d');\n-    //~^ ERROR (Ast) [E0499]\n-    //~| ERROR (Mir) [E0499]\n+    //~^ ERROR [E0499]\n     data.push('e');\n-    //~^ ERROR (Ast) [E0499]\n-    //~| ERROR (Mir) [E0499]\n+    //~^ ERROR [E0499]\n     data.push('f');\n-    //~^ ERROR (Ast) [E0499]\n-    //~| ERROR (Mir) [E0499]\n+    //~^ ERROR [E0499]\n     capitalize(slice);\n }\n \n@@ -27,11 +22,8 @@ fn nll_ok() {\n     let slice = &mut data;\n     capitalize(slice);\n     data.push('d');\n-    //~^ ERROR (Ast) [E0499]\n     data.push('e');\n-    //~^ ERROR (Ast) [E0499]\n     data.push('f');\n-    //~^ ERROR (Ast) [E0499]\n }\n \n fn capitalize(_: &mut [char]) {"}, {"sha": "c0b97bea348c4b99c5b07be4ce1d53635ee7abd1", "filename": "src/test/ui/nll/loan_ends_mid_block_vec.stderr", "status": "modified", "additions": 8, "deletions": 80, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,77 +1,5 @@\n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n-  --> $DIR/loan_ends_mid_block_vec.rs:13:5\n-   |\n-LL |     let slice = &mut data;\n-   |                      ---- first mutable borrow occurs here\n-LL |     capitalize(slice);\n-LL |     data.push('d');\n-   |     ^^^^ second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n-  --> $DIR/loan_ends_mid_block_vec.rs:16:5\n-   |\n-LL |     let slice = &mut data;\n-   |                      ---- first mutable borrow occurs here\n-...\n-LL |     data.push('e');\n-   |     ^^^^ second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n-  --> $DIR/loan_ends_mid_block_vec.rs:19:5\n-   |\n-LL |     let slice = &mut data;\n-   |                      ---- first mutable borrow occurs here\n-...\n-LL |     data.push('f');\n-   |     ^^^^ second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n-  --> $DIR/loan_ends_mid_block_vec.rs:29:5\n-   |\n-LL |     let slice = &mut data;\n-   |                      ---- first mutable borrow occurs here\n-LL |     capitalize(slice);\n-LL |     data.push('d');\n-   |     ^^^^ second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n-  --> $DIR/loan_ends_mid_block_vec.rs:31:5\n-   |\n-LL |     let slice = &mut data;\n-   |                      ---- first mutable borrow occurs here\n-...\n-LL |     data.push('e');\n-   |     ^^^^ second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n-  --> $DIR/loan_ends_mid_block_vec.rs:33:5\n-   |\n-LL |     let slice = &mut data;\n-   |                      ---- first mutable borrow occurs here\n-...\n-LL |     data.push('f');\n-   |     ^^^^ second mutable borrow occurs here\n-LL |\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Mir)\n-  --> $DIR/loan_ends_mid_block_vec.rs:13:5\n+error[E0499]: cannot borrow `data` as mutable more than once at a time\n+  --> $DIR/loan_ends_mid_block_vec.rs:11:5\n    |\n LL |     let slice = &mut data;\n    |                 --------- first mutable borrow occurs here\n@@ -82,8 +10,8 @@ LL |     data.push('d');\n LL |     capitalize(slice);\n    |                ----- first borrow later used here\n \n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Mir)\n-  --> $DIR/loan_ends_mid_block_vec.rs:16:5\n+error[E0499]: cannot borrow `data` as mutable more than once at a time\n+  --> $DIR/loan_ends_mid_block_vec.rs:13:5\n    |\n LL |     let slice = &mut data;\n    |                 --------- first mutable borrow occurs here\n@@ -94,18 +22,18 @@ LL |     data.push('e');\n LL |     capitalize(slice);\n    |                ----- first borrow later used here\n \n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Mir)\n-  --> $DIR/loan_ends_mid_block_vec.rs:19:5\n+error[E0499]: cannot borrow `data` as mutable more than once at a time\n+  --> $DIR/loan_ends_mid_block_vec.rs:15:5\n    |\n LL |     let slice = &mut data;\n    |                 --------- first mutable borrow occurs here\n ...\n LL |     data.push('f');\n    |     ^^^^ second mutable borrow occurs here\n-...\n+LL |\n LL |     capitalize(slice);\n    |                ----- first borrow later used here\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0499`."}, {"sha": "f67de03caf22565371603948ca2f290f4da5b38a", "filename": "src/test/ui/nll/region-ends-after-if-condition.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -2,8 +2,6 @@\n // in the type of `p` includes the points after `&v[0]` up to (but not\n // including) the call to `use_x`. The `else` branch is not included.\n \n-// compile-flags:-Zborrowck=compare\n-\n #![allow(warnings)]\n #![feature(rustc_attrs)]\n \n@@ -17,7 +15,6 @@ fn foo1() {\n     let value = &my_struct.field;\n     if value.is_empty() {\n         my_struct.field.push_str(\"Hello, world!\");\n-        //~^ ERROR (Ast) [E0502]\n     }\n }\n \n@@ -27,8 +24,7 @@ fn foo2() {\n     let value = &my_struct.field;\n     if value.is_empty() {\n         my_struct.field.push_str(\"Hello, world!\");\n-        //~^ ERROR (Ast) [E0502]\n-        //~| ERROR (Mir) [E0502]\n+        //~^ ERROR [E0502]\n     }\n     drop(value);\n }"}, {"sha": "c03e385790616464648a63bd7b34fbac0fa54441", "filename": "src/test/ui/nll/region-ends-after-if-condition.stderr", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,39 +1,15 @@\n-error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/region-ends-after-if-condition.rs:19:9\n-   |\n-LL |     let value = &my_struct.field;\n-   |                  --------------- immutable borrow occurs here\n-LL |     if value.is_empty() {\n-LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/region-ends-after-if-condition.rs:29:9\n-   |\n-LL |     let value = &my_struct.field;\n-   |                  --------------- immutable borrow occurs here\n-LL |     if value.is_empty() {\n-LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable (Mir)\n-  --> $DIR/region-ends-after-if-condition.rs:29:9\n+error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable\n+  --> $DIR/region-ends-after-if-condition.rs:26:9\n    |\n LL |     let value = &my_struct.field;\n    |                 ---------------- immutable borrow occurs here\n LL |     if value.is_empty() {\n LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^ mutable borrow occurs here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n ...\n LL |     drop(value);\n    |          ----- immutable borrow later used here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0502`."}, {"sha": "49541089405f2f4bc3c2ee435436db337fbb4021", "filename": "src/test/ui/nll/return_from_loop.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.rs?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -2,8 +2,6 @@\n // in the type of `p` includes the points after `&v[0]` up to (but not\n // including) the call to `use_x`. The `else` branch is not included.\n \n-// compile-flags:-Zborrowck=compare\n-\n #![allow(warnings)]\n #![feature(rustc_attrs)]\n \n@@ -20,8 +18,7 @@ fn nll_fail() {\n     let value = &mut my_struct.field;\n     loop {\n         my_struct.field.push_str(\"Hello, world!\");\n-        //~^ ERROR (Ast) [E0499]\n-        //~| ERROR (Mir) [E0499]\n+        //~^ ERROR [E0499]\n         value.len();\n         return;\n     }\n@@ -33,7 +30,6 @@ fn nll_ok() {\n     let value = &mut my_struct.field;\n     loop {\n         my_struct.field.push_str(\"Hello, world!\");\n-        //~^ ERROR (Ast) [E0499]\n         return;\n     }\n }"}, {"sha": "efd56ea2dd5423ff6cf8aaa9ee803f80f89f9eea", "filename": "src/test/ui/nll/return_from_loop.stderr", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdd6ba77e077d051dba7da064761050d5754b4a/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.stderr?ref=cfdd6ba77e077d051dba7da064761050d5754b4a", "patch": "@@ -1,39 +1,15 @@\n-error[E0499]: cannot borrow `my_struct.field` as mutable more than once at a time (Ast)\n-  --> $DIR/return_from_loop.rs:22:9\n-   |\n-LL |     let value = &mut my_struct.field;\n-   |                      --------------- first mutable borrow occurs here\n-LL |     loop {\n-LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `my_struct.field` as mutable more than once at a time (Ast)\n-  --> $DIR/return_from_loop.rs:35:9\n-   |\n-LL |     let value = &mut my_struct.field;\n-   |                      --------------- first mutable borrow occurs here\n-LL |     loop {\n-LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `my_struct.field` as mutable more than once at a time (Mir)\n-  --> $DIR/return_from_loop.rs:22:9\n+error[E0499]: cannot borrow `my_struct.field` as mutable more than once at a time\n+  --> $DIR/return_from_loop.rs:20:9\n    |\n LL |     let value = &mut my_struct.field;\n    |                 -------------------- first mutable borrow occurs here\n LL |     loop {\n LL |         my_struct.field.push_str(\"Hello, world!\");\n    |         ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-...\n+LL |\n LL |         value.len();\n    |         ----- first borrow later used here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0499`."}]}