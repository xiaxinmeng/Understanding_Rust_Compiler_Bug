{"sha": "326ffcefe09906560a03d3184a2ce76841448702", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNmZmY2VmZTA5OTA2NTYwYTAzZDMxODRhMmNlNzY4NDE0NDg3MDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-08T09:36:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-08T09:36:02Z"}, "message": "Deal with deadlocks in a more principaled way", "tree": {"sha": "ca6c3b738122d87ed849c757087b3b5a3b7c2048", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca6c3b738122d87ed849c757087b3b5a3b7c2048"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/326ffcefe09906560a03d3184a2ce76841448702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/326ffcefe09906560a03d3184a2ce76841448702", "html_url": "https://github.com/rust-lang/rust/commit/326ffcefe09906560a03d3184a2ce76841448702", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/326ffcefe09906560a03d3184a2ce76841448702/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9ccebd913c767779e47f0c752e9f2f3dc35c080", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ccebd913c767779e47f0c752e9f2f3dc35c080", "html_url": "https://github.com/rust-lang/rust/commit/d9ccebd913c767779e47f0c752e9f2f3dc35c080"}], "stats": {"total": 66, "additions": 39, "deletions": 27}, "files": [{"sha": "c8aebc59c62b2bc0dde3b8f6aa9070df3abd6698", "filename": "crates/server/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/326ffcefe09906560a03d3184a2ce76841448702/crates%2Fserver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ffcefe09906560a03d3184a2ce76841448702/crates%2Fserver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Flib.rs?ref=326ffcefe09906560a03d3184a2ce76841448702", "patch": "@@ -30,9 +30,8 @@ mod vfs;\n mod path_map;\n mod server_world;\n mod project_model;\n-mod thread_watcher;\n+pub mod thread_watcher;\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n pub use caps::server_capabilities;\n pub use main_loop::main_loop;\n-"}, {"sha": "b7f5efbb1580288dbf15b26796ad218a0afb0327", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/326ffcefe09906560a03d3184a2ce76841448702/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ffcefe09906560a03d3184a2ce76841448702/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=326ffcefe09906560a03d3184a2ce76841448702", "patch": "@@ -43,8 +43,8 @@ pub fn main_loop(\n         .build()\n         .unwrap();\n     let (task_sender, task_receiver) = unbounded::<Task>();\n-    let (fs_sender, fs_receiver, fs_watcher) = vfs::roots_loader();\n-    let (ws_sender, ws_receiver, ws_watcher) = workspace_loader();\n+    let ((fs_sender, fs_receiver), fs_watcher) = vfs::roots_loader();\n+    let ((ws_sender, ws_receiver), ws_watcher) = workspace_loader();\n \n     info!(\"server initialized, serving requests\");\n     let mut state = ServerWorldState::new();"}, {"sha": "b9d6872c8a41230a7e7d336f64fdc5ac9bea8b24", "filename": "crates/server/src/project_model.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/326ffcefe09906560a03d3184a2ce76841448702/crates%2Fserver%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ffcefe09906560a03d3184a2ce76841448702/crates%2Fserver%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fproject_model.rs?ref=326ffcefe09906560a03d3184a2ce76841448702", "patch": "@@ -3,12 +3,12 @@ use std::{\n     path::{Path, PathBuf},\n };\n use cargo_metadata::{metadata_run, CargoOpt};\n-use crossbeam_channel::{bounded, Sender, Receiver};\n+use crossbeam_channel::{Sender, Receiver};\n use libsyntax2::SmolStr;\n \n use {\n     Result,\n-    thread_watcher::ThreadWatcher,\n+    thread_watcher::{ThreadWatcher, worker_chan},\n };\n \n #[derive(Debug, Clone)]\n@@ -162,15 +162,14 @@ impl TargetKind {\n     }\n }\n \n-pub fn workspace_loader() -> (Sender<PathBuf>, Receiver<Result<CargoWorkspace>>, ThreadWatcher) {\n-    let (path_sender, path_receiver) = bounded::<PathBuf>(16);\n-    let (ws_sender, ws_receiver) = bounded::<Result<CargoWorkspace>>(1);\n+pub fn workspace_loader() -> ((Sender<PathBuf>, Receiver<Result<CargoWorkspace>>), ThreadWatcher) {\n+    let (interface, input_receiver, output_sender) = worker_chan::<PathBuf, Result<CargoWorkspace>>(1);\n     let thread = ThreadWatcher::spawn(\"workspace loader\", move || {\n-        path_receiver\n+        input_receiver\n             .into_iter()\n             .map(|path| CargoWorkspace::from_cargo_metadata(path.as_path()))\n-            .for_each(|it| ws_sender.send(it))\n+            .for_each(|it| output_sender.send(it))\n     });\n \n-    (path_sender, ws_receiver, thread)\n+    (interface, thread)\n }"}, {"sha": "74a0a58b75ac2328d1b4043e21619d9d77eafbe4", "filename": "crates/server/src/thread_watcher.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/326ffcefe09906560a03d3184a2ce76841448702/crates%2Fserver%2Fsrc%2Fthread_watcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ffcefe09906560a03d3184a2ce76841448702/crates%2Fserver%2Fsrc%2Fthread_watcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fthread_watcher.rs?ref=326ffcefe09906560a03d3184a2ce76841448702", "patch": "@@ -1,4 +1,5 @@\n use std::thread;\n+use crossbeam_channel::{bounded, unbounded, Sender, Receiver};\n use drop_bomb::DropBomb;\n use Result;\n \n@@ -31,3 +32,12 @@ impl ThreadWatcher {\n         res\n     }\n }\n+\n+/// Sets up worker channels in a deadlock-avoind way.\n+/// If one sets both input and output buffers to a fixed size,\n+/// a worker might get stuck.\n+pub fn worker_chan<I, O>(buf: usize) -> ((Sender<I>, Receiver<O>), Receiver<I>, Sender<O>) {\n+    let (input_sender, input_receiver) = bounded::<I>(buf);\n+    let (output_sender, output_receiver) = unbounded::<O>();\n+    ((input_sender, output_receiver), input_receiver, output_sender)\n+}"}, {"sha": "c228f0b0a1b3735ecc093fa04c6edfb52fb88d60", "filename": "crates/server/src/vfs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/326ffcefe09906560a03d3184a2ce76841448702/crates%2Fserver%2Fsrc%2Fvfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ffcefe09906560a03d3184a2ce76841448702/crates%2Fserver%2Fsrc%2Fvfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fvfs.rs?ref=326ffcefe09906560a03d3184a2ce76841448702", "patch": "@@ -3,11 +3,11 @@ use std::{\n     fs,\n };\n \n-use crossbeam_channel::{Sender, Receiver, unbounded};\n+use crossbeam_channel::{Sender, Receiver};\n use walkdir::WalkDir;\n \n use {\n-    thread_watcher::ThreadWatcher,\n+    thread_watcher::{ThreadWatcher, worker_chan},\n };\n \n \n@@ -22,22 +22,22 @@ pub enum FileEventKind {\n     Add(String),\n }\n \n-pub fn roots_loader() -> (Sender<PathBuf>, Receiver<(PathBuf, Vec<FileEvent>)>, ThreadWatcher) {\n-    let (path_sender, path_receiver) = unbounded::<PathBuf>();\n-    let (event_sender, event_receiver) = unbounded::<(PathBuf, Vec<FileEvent>)>();\n+pub fn roots_loader() -> ((Sender<PathBuf>, Receiver<(PathBuf, Vec<FileEvent>)>), ThreadWatcher) {\n+    let (interface, input_receiver, output_sender) =\n+        worker_chan::<PathBuf, (PathBuf, Vec<FileEvent>)>(128);\n     let thread = ThreadWatcher::spawn(\"roots loader\", move || {\n-        path_receiver\n+        input_receiver\n             .into_iter()\n             .map(|path| {\n                 debug!(\"loading {} ...\", path.as_path().display());\n                 let events = load_root(path.as_path());\n                 debug!(\"... loaded {}\", path.as_path().display());\n                 (path, events)\n             })\n-            .for_each(|it| event_sender.send(it))\n+            .for_each(|it| output_sender.send(it))\n     });\n \n-    (path_sender, event_receiver, thread)\n+    (interface, thread)\n }\n \n fn load_root(path: &Path) -> Vec<FileEvent> {"}, {"sha": "2710ab59bdcb0c89e9c6e6f995b00e3166255bfe", "filename": "crates/server/tests/heavy_tests/support.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/326ffcefe09906560a03d3184a2ce76841448702/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ffcefe09906560a03d3184a2ce76841448702/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=326ffcefe09906560a03d3184a2ce76841448702", "patch": "@@ -8,7 +8,7 @@ use std::{\n };\n \n use tempdir::TempDir;\n-use crossbeam_channel::{unbounded, after, Sender, Receiver};\n+use crossbeam_channel::{after, Sender, Receiver};\n use flexi_logger::Logger;\n use languageserver_types::{\n     Url,\n@@ -22,7 +22,7 @@ use serde::Serialize;\n use serde_json::{Value, from_str, to_string_pretty};\n use gen_lsp_server::{RawMessage, RawRequest, RawNotification};\n \n-use m::{Result, main_loop, req};\n+use m::{Result, main_loop, req, thread_watcher::worker_chan};\n \n pub fn project(fixture: &str) -> Server {\n     static INIT: Once = Once::new();\n@@ -69,15 +69,19 @@ pub struct Server {\n impl Server {\n     fn new(dir: TempDir, files: Vec<(PathBuf, String)>) -> Server {\n         let path = dir.path().to_path_buf();\n-        let (client_sender, mut server_receiver) = unbounded();\n-        let (mut server_sender, client_receiver) = unbounded();\n-        let server = thread::spawn(move || main_loop(true, path, &mut server_receiver, &mut server_sender));\n+        let ((msg_sender, msg_receiver), server) = {\n+            let (api, mut msg_receiver, mut msg_sender) = worker_chan::<RawMessage, RawMessage>(128);\n+            let server = thread::spawn(move || {\n+                main_loop(true, path, &mut msg_receiver, &mut msg_sender)\n+            });\n+            (api, server)\n+        };\n         let res = Server {\n             req_id: Cell::new(1),\n             dir,\n             messages: Default::default(),\n-            sender: Some(client_sender),\n-            receiver: client_receiver,\n+            sender: Some(msg_sender),\n+            receiver: msg_receiver,\n             server: Some(server),\n         };\n "}]}