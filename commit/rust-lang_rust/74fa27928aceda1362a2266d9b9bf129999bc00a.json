{"sha": "74fa27928aceda1362a2266d9b9bf129999bc00a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZmEyNzkyOGFjZWRhMTM2MmEyMjY2ZDliOWJmMTI5OTk5YmMwMGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-22T12:48:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-22T12:48:54Z"}, "message": "Auto merge of #42824 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 4 pull requests\n\n- Successful merges: #42799, #42804, #42805, #42806\n- Failed merges:", "tree": {"sha": "f6885a656b791f657e5ea561d732c91414a9621a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6885a656b791f657e5ea561d732c91414a9621a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74fa27928aceda1362a2266d9b9bf129999bc00a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74fa27928aceda1362a2266d9b9bf129999bc00a", "html_url": "https://github.com/rust-lang/rust/commit/74fa27928aceda1362a2266d9b9bf129999bc00a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74fa27928aceda1362a2266d9b9bf129999bc00a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a", "html_url": "https://github.com/rust-lang/rust/commit/6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a"}, {"sha": "7f693e2cb9455fcfbe4de69236abc6a0ef98624b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f693e2cb9455fcfbe4de69236abc6a0ef98624b", "html_url": "https://github.com/rust-lang/rust/commit/7f693e2cb9455fcfbe4de69236abc6a0ef98624b"}], "stats": {"total": 74, "additions": 66, "deletions": 8}, "files": [{"sha": "8c6eaee24f2943ea76c3cf86e41bb8cb3dd65fec", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74fa27928aceda1362a2266d9b9bf129999bc00a/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fa27928aceda1362a2266d9b9bf129999bc00a/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=74fa27928aceda1362a2266d9b9bf129999bc00a", "patch": "@@ -236,6 +236,15 @@ fn main() {\n         }\n     }\n \n+    let color = match env::var(\"RUSTC_COLOR\") {\n+        Ok(s) => usize::from_str(&s).expect(\"RUSTC_COLOR should be an integer\"),\n+        Err(_) => 0,\n+    };\n+\n+    if color != 0 {\n+        cmd.arg(\"--color=always\");\n+    }\n+\n     if verbose > 1 {\n         writeln!(&mut io::stderr(), \"rustc command: {:?}\", cmd).unwrap();\n     }"}, {"sha": "d7d72d5dd56c9eeff762b688bd2e513fdb633a64", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74fa27928aceda1362a2266d9b9bf129999bc00a/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fa27928aceda1362a2266d9b9bf129999bc00a/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=74fa27928aceda1362a2266d9b9bf129999bc00a", "patch": "@@ -41,11 +41,11 @@ fn main() {\n         .env(bootstrap::util::dylib_path_var(),\n              env::join_paths(&dylib_path).unwrap());\n \n-    // Pass the `rustbuild` feature flag to crates which rustbuild is\n-    // building. See the comment in bootstrap/lib.rs where this env var is\n-    // set for more details.\n-    if env::var_os(\"RUSTBUILD_UNSTABLE\").is_some() {\n-        cmd.arg(\"--cfg\").arg(\"rustbuild\");\n+    // Force all crates compiled by this compiler to (a) be unstable and (b)\n+    // allow the `rustc_private` feature to link to other unstable crates\n+    // also in the sysroot.\n+    if env::var_os(\"RUSTC_FORCE_UNSTABLE\").is_some() {\n+        cmd.arg(\"-Z\").arg(\"force-unstable-if-unmarked\");\n     }\n \n     std::process::exit(match cmd.status() {"}, {"sha": "8dc2875ec42473ca8dbf8eb83ad7d3a042cba34e", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74fa27928aceda1362a2266d9b9bf129999bc00a/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/74fa27928aceda1362a2266d9b9bf129999bc00a/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=74fa27928aceda1362a2266d9b9bf129999bc00a", "patch": "@@ -668,6 +668,7 @@ def bootstrap():\n     env[\"BUILD\"] = rb.build\n     env[\"SRC\"] = rb.rust_root\n     env[\"BOOTSTRAP_PARENT_ID\"] = str(os.getpid())\n+    env[\"BOOTSTRAP_PYTHON\"] = sys.executable\n     run(args, env=env, verbose=rb.verbose)\n \n "}, {"sha": "f92a199fa3fea08b459f5739c80229eeeafa08ba", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/74fa27928aceda1362a2266d9b9bf129999bc00a/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fa27928aceda1362a2266d9b9bf129999bc00a/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=74fa27928aceda1362a2266d9b9bf129999bc00a", "patch": "@@ -477,11 +477,43 @@ pub fn tool(build: &Build, stage: u32, target: &str, tool: &str) {\n     build.run(&mut cargo);\n }\n \n+\n+// Avoiding a dependency on winapi to keep compile times down\n+#[cfg(unix)]\n+fn stderr_isatty() -> bool {\n+    use libc;\n+    unsafe { libc::isatty(libc::STDERR_FILENO) != 0 }\n+}\n+#[cfg(windows)]\n+fn stderr_isatty() -> bool {\n+    type DWORD = u32;\n+    type BOOL = i32;\n+    type HANDLE = *mut u8;\n+    const STD_ERROR_HANDLE: DWORD = -12i32 as DWORD;\n+    extern \"system\" {\n+        fn GetStdHandle(which: DWORD) -> HANDLE;\n+        fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: *mut DWORD) -> BOOL;\n+    }\n+    unsafe {\n+        let handle = GetStdHandle(STD_ERROR_HANDLE);\n+        let mut out = 0;\n+        GetConsoleMode(handle, &mut out) != 0\n+    }\n+}\n+\n fn run_cargo(build: &Build, cargo: &mut Command, stamp: &Path) {\n     // Instruct Cargo to give us json messages on stdout, critically leaving\n     // stderr as piped so we can get those pretty colors.\n     cargo.arg(\"--message-format\").arg(\"json\")\n          .stdout(Stdio::piped());\n+\n+    if stderr_isatty() {\n+        // since we pass message-format=json to cargo, we need to tell the rustc\n+        // wrapper to give us colored output if necessary. This is because we\n+        // only want Cargo's JSON output, not rustcs.\n+        cargo.env(\"RUSTC_COLOR\", \"1\");\n+    }\n+\n     build.verbose(&format!(\"running: {:?}\", cargo));\n     let mut child = match cargo.spawn() {\n         Ok(child) => child,"}, {"sha": "5ccd131b77ae46f845c24ee186664ea6a18cc595", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74fa27928aceda1362a2266d9b9bf129999bc00a/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fa27928aceda1362a2266d9b9bf129999bc00a/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=74fa27928aceda1362a2266d9b9bf129999bc00a", "patch": "@@ -23,6 +23,7 @@ use std::env;\n use std::ffi::{OsStr, OsString};\n use std::fs;\n use std::process::Command;\n+use std::path::PathBuf;\n \n use build_helper::output;\n \n@@ -86,6 +87,12 @@ pub fn check(build: &mut Build) {\n         }\n     }\n \n+    if build.config.python.is_none() {\n+        // set by bootstrap.py\n+        if let Some(v) = env::var_os(\"BOOTSTRAP_PYTHON\") {\n+            build.config.python = Some(PathBuf::from(v));\n+        }\n+    }\n     if build.config.python.is_none() {\n         build.config.python = have_cmd(\"python2.7\".as_ref());\n     }"}, {"sha": "62b91feb09d0b62926b0d9b20a7b90750d867b83", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74fa27928aceda1362a2266d9b9bf129999bc00a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fa27928aceda1362a2266d9b9bf129999bc00a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=74fa27928aceda1362a2266d9b9bf129999bc00a", "patch": "@@ -106,7 +106,8 @@ pub fn run_core(search_paths: SearchPaths,\n                 input: Input,\n                 triple: Option<String>,\n                 maybe_sysroot: Option<PathBuf>,\n-                allow_warnings: bool) -> (clean::Crate, RenderInfo)\n+                allow_warnings: bool,\n+                force_unstable_if_unmarked: bool) -> (clean::Crate, RenderInfo)\n {\n     // Parse, resolve, and typecheck the given crate.\n \n@@ -128,6 +129,10 @@ pub fn run_core(search_paths: SearchPaths,\n         // Ensure that rustdoc works even if rustc is feature-staged\n         unstable_features: UnstableFeatures::Allow,\n         actually_rustdoc: true,\n+        debugging_opts: config::DebuggingOptions {\n+            force_unstable_if_unmarked: force_unstable_if_unmarked,\n+            ..config::basic_debugging_options()\n+        },\n         ..config::basic_options().clone()\n     };\n "}, {"sha": "6c092d01a01d18a6646aef601e34d9662262b7d9", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74fa27928aceda1362a2266d9b9bf129999bc00a/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fa27928aceda1362a2266d9b9bf129999bc00a/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=74fa27928aceda1362a2266d9b9bf129999bc00a", "patch": "@@ -465,13 +465,17 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n     info!(\"starting to run rustc\");\n     let display_warnings = matches.opt_present(\"display-warnings\");\n \n+    let force_unstable_if_unmarked = matches.opt_strs(\"Z\").iter().any(|x| {\n+        *x == \"force-unstable-if-unmarked\"\n+    });\n+\n     let (tx, rx) = channel();\n     rustc_driver::monitor(move || {\n         use rustc::session::config::Input;\n \n         let (mut krate, renderinfo) =\n             core::run_core(paths, cfgs, externs, Input::File(cr), triple, maybe_sysroot,\n-                           display_warnings);\n+                           display_warnings, force_unstable_if_unmarked);\n \n         info!(\"finished with rustc\");\n "}, {"sha": "aef88e3d5636cc9e3daca99230771489e8ba491c", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74fa27928aceda1362a2266d9b9bf129999bc00a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fa27928aceda1362a2266d9b9bf129999bc00a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=74fa27928aceda1362a2266d9b9bf129999bc00a", "patch": "@@ -2384,7 +2384,7 @@ impl BuildHasher for RandomState {\n /// [`Hasher`]: ../../hash/trait.Hasher.html\n #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n #[allow(deprecated)]\n-#[derive(Debug)]\n+#[derive(Clone, Debug)]\n pub struct DefaultHasher(SipHasher13);\n \n impl DefaultHasher {"}]}