{"sha": "8dc94a452cb908e789c926255146d1b4bf6682fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYzk0YTQ1MmNiOTA4ZTc4OWM5MjYyNTUxNDZkMWI0YmY2NjgyZmI=", "commit": {"author": {"name": "TomasKralCZ", "email": "tomas@kral.hk", "date": "2020-01-19T16:39:53Z"}, "committer": {"name": "TomasKralCZ", "email": "tomas@kral.hk", "date": "2020-01-19T16:39:53Z"}, "message": "fix typo in 'inline_local_variable'", "tree": {"sha": "96b5950ef34e5880a87e41efccb715a3329c368e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96b5950ef34e5880a87e41efccb715a3329c368e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dc94a452cb908e789c926255146d1b4bf6682fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dc94a452cb908e789c926255146d1b4bf6682fb", "html_url": "https://github.com/rust-lang/rust/commit/8dc94a452cb908e789c926255146d1b4bf6682fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dc94a452cb908e789c926255146d1b4bf6682fb/comments", "author": {"login": "TomasKralCZ", "id": 23663355, "node_id": "MDQ6VXNlcjIzNjYzMzU1", "avatar_url": "https://avatars.githubusercontent.com/u/23663355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TomasKralCZ", "html_url": "https://github.com/TomasKralCZ", "followers_url": "https://api.github.com/users/TomasKralCZ/followers", "following_url": "https://api.github.com/users/TomasKralCZ/following{/other_user}", "gists_url": "https://api.github.com/users/TomasKralCZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/TomasKralCZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TomasKralCZ/subscriptions", "organizations_url": "https://api.github.com/users/TomasKralCZ/orgs", "repos_url": "https://api.github.com/users/TomasKralCZ/repos", "events_url": "https://api.github.com/users/TomasKralCZ/events{/privacy}", "received_events_url": "https://api.github.com/users/TomasKralCZ/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TomasKralCZ", "id": 23663355, "node_id": "MDQ6VXNlcjIzNjYzMzU1", "avatar_url": "https://avatars.githubusercontent.com/u/23663355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TomasKralCZ", "html_url": "https://github.com/TomasKralCZ", "followers_url": "https://api.github.com/users/TomasKralCZ/followers", "following_url": "https://api.github.com/users/TomasKralCZ/following{/other_user}", "gists_url": "https://api.github.com/users/TomasKralCZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/TomasKralCZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TomasKralCZ/subscriptions", "organizations_url": "https://api.github.com/users/TomasKralCZ/orgs", "repos_url": "https://api.github.com/users/TomasKralCZ/repos", "events_url": "https://api.github.com/users/TomasKralCZ/events{/privacy}", "received_events_url": "https://api.github.com/users/TomasKralCZ/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91171dedd45b93bf6a4f1b9662ebb8106f80c3b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/91171dedd45b93bf6a4f1b9662ebb8106f80c3b6", "html_url": "https://github.com/rust-lang/rust/commit/91171dedd45b93bf6a4f1b9662ebb8106f80c3b6"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "d0c5c3b8c05731d282ef98d2ff5135c266782094", "filename": "crates/ra_assists/src/assists/inline_local_variable.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8dc94a452cb908e789c926255146d1b4bf6682fb/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc94a452cb908e789c926255146d1b4bf6682fb/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs?ref=8dc94a452cb908e789c926255146d1b4bf6682fb", "patch": "@@ -23,7 +23,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     (1 + 2) * 4;\n // }\n // ```\n-pub(crate) fn inline_local_varialbe(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn inline_local_variable(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let let_stmt = ctx.find_node_at_offset::<ast::LetStmt>()?;\n     let bind_pat = match let_stmt.pat()? {\n         ast::Pat::BindPat(pat) => pat,\n@@ -117,7 +117,7 @@ mod tests {\n     #[test]\n     fn test_inline_let_bind_literal_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn bar(a: usize) {}\n fn foo() {\n@@ -151,7 +151,7 @@ fn foo() {\n     #[test]\n     fn test_inline_let_bind_bin_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn bar(a: usize) {}\n fn foo() {\n@@ -185,7 +185,7 @@ fn foo() {\n     #[test]\n     fn test_inline_let_bind_function_call_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn bar(a: usize) {}\n fn foo() {\n@@ -219,7 +219,7 @@ fn foo() {\n     #[test]\n     fn test_inline_let_bind_cast_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn bar(a: usize): usize { a }\n fn foo() {\n@@ -253,7 +253,7 @@ fn foo() {\n     #[test]\n     fn test_inline_let_bind_block_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = { 10 + 1 };\n@@ -285,7 +285,7 @@ fn foo() {\n     #[test]\n     fn test_inline_let_bind_paren_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = ( 10 + 1 );\n@@ -317,7 +317,7 @@ fn foo() {\n     #[test]\n     fn test_not_inline_mut_variable() {\n         check_assist_not_applicable(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let mut a<|> = 1 + 1;\n@@ -329,7 +329,7 @@ fn foo() {\n     #[test]\n     fn test_call_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = bar(10 + 1);\n@@ -347,7 +347,7 @@ fn foo() {\n     #[test]\n     fn test_index_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let x = vec![1, 2, 3];\n@@ -367,7 +367,7 @@ fn foo() {\n     #[test]\n     fn test_method_call_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let bar = vec![1];\n@@ -387,7 +387,7 @@ fn foo() {\n     #[test]\n     fn test_field_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n struct Bar {\n     foo: usize\n@@ -415,7 +415,7 @@ fn foo() {\n     #[test]\n     fn test_try_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() -> Option<usize> {\n     let bar = Some(1);\n@@ -437,7 +437,7 @@ fn foo() -> Option<usize> {\n     #[test]\n     fn test_ref_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let bar = 10;\n@@ -455,7 +455,7 @@ fn foo() {\n     #[test]\n     fn test_tuple_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = (10, 20);\n@@ -471,7 +471,7 @@ fn foo() {\n     #[test]\n     fn test_array_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = [1, 2, 3];\n@@ -487,7 +487,7 @@ fn foo() {\n     #[test]\n     fn test_paren() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = (10 + 20);\n@@ -505,7 +505,7 @@ fn foo() {\n     #[test]\n     fn test_path_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let d = 10;\n@@ -525,7 +525,7 @@ fn foo() {\n     #[test]\n     fn test_block_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = { 10 };\n@@ -543,7 +543,7 @@ fn foo() {\n     #[test]\n     fn test_used_in_different_expr1() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = 10 + 20;\n@@ -565,7 +565,7 @@ fn foo() {\n     #[test]\n     fn test_used_in_for_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = vec![10, 20];\n@@ -581,7 +581,7 @@ fn foo() {\n     #[test]\n     fn test_used_in_while_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = 1 > 0;\n@@ -597,7 +597,7 @@ fn foo() {\n     #[test]\n     fn test_used_in_break_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = 1 + 1;\n@@ -617,7 +617,7 @@ fn foo() {\n     #[test]\n     fn test_used_in_return_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = 1 > 0;\n@@ -633,7 +633,7 @@ fn foo() {\n     #[test]\n     fn test_used_in_match_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = 1 > 0;"}, {"sha": "3337805a55aa5fb41c0902c652b1e55725c0373f", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dc94a452cb908e789c926255146d1b4bf6682fb/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc94a452cb908e789c926255146d1b4bf6682fb/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=8dc94a452cb908e789c926255146d1b4bf6682fb", "patch": "@@ -157,7 +157,7 @@ mod assists {\n             add_import::add_import,\n             add_missing_impl_members::add_missing_impl_members,\n             add_missing_impl_members::add_missing_default_members,\n-            inline_local_variable::inline_local_varialbe,\n+            inline_local_variable::inline_local_variable,\n             move_guard::move_guard_to_arm_body,\n             move_guard::move_arm_cond_to_match_guard,\n             move_bounds::move_bounds_to_where_clause,"}]}