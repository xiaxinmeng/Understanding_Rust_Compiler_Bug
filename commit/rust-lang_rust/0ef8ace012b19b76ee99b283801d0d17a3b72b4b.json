{"sha": "0ef8ace012b19b76ee99b283801d0d17a3b72b4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZjhhY2UwMTJiMTliNzZlZTk5YjI4MzgwMWQwZDE3YTNiNzJiNGI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-15T20:08:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-15T20:08:12Z"}, "message": "Merge #2567\n\n2567: Handle impl Trait more correctly r=flodiebold a=flodiebold\n\nWhen calling a function, argument-position impl Trait is transparent; same for return-position impl Trait when inside the function. \r\n\r\nSo in these cases, we need to represent that type not by `Ty::Opaque`, but by a type variable that can be unified with whatever flows into there.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "911458abbefcddd06e131c410bd1e1710e77ca95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/911458abbefcddd06e131c410bd1e1710e77ca95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ef8ace012b19b76ee99b283801d0d17a3b72b4b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd9pKsCRBK7hj4Ov3rIwAAdHIIAJMYjFlmJbOROvxUVkdRhJoc\ncSbKioFo6XNnXPVl4py4dlfFWmvvv0aHaJ2y4Z2IqfLbbSTD2XGrOfMaQpg70dNb\no5oG+qJOSYxHhDPRC0M310K2oxYgLICCmu/OiPrsiiB3V0mfwu2U20BjChuKI+at\nC4sNBG7NENSgbwoGsPVfDXorLmJvhq5Q2o7W0bB5jV2S4Ur8jsFbCbhH5OuDdrBA\n3k/MJdjs/tPx0DFYJW/7AwL3d5o7PNgaRlROB28p5nuFEHEIWyO8q3fBPUvy+D1P\nABvkH2P5AjcncMdZLkLf84QRfJIH5vIlCOUyBKXrEKgmaJX3vYtIZ48/g1kPa+A=\n=ttbu\n-----END PGP SIGNATURE-----\n", "payload": "tree 911458abbefcddd06e131c410bd1e1710e77ca95\nparent 4e24b25c669965cf6a68c4b8e775cc83615d978a\nparent 91853590a9ee78406e892ca92305edef3a5b9213\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576440492 +0000\ncommitter GitHub <noreply@github.com> 1576440492 +0000\n\nMerge #2567\n\n2567: Handle impl Trait more correctly r=flodiebold a=flodiebold\n\nWhen calling a function, argument-position impl Trait is transparent; same for return-position impl Trait when inside the function. \r\n\r\nSo in these cases, we need to represent that type not by `Ty::Opaque`, but by a type variable that can be unified with whatever flows into there.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ef8ace012b19b76ee99b283801d0d17a3b72b4b", "html_url": "https://github.com/rust-lang/rust/commit/0ef8ace012b19b76ee99b283801d0d17a3b72b4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ef8ace012b19b76ee99b283801d0d17a3b72b4b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e24b25c669965cf6a68c4b8e775cc83615d978a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e24b25c669965cf6a68c4b8e775cc83615d978a", "html_url": "https://github.com/rust-lang/rust/commit/4e24b25c669965cf6a68c4b8e775cc83615d978a"}, {"sha": "91853590a9ee78406e892ca92305edef3a5b9213", "url": "https://api.github.com/repos/rust-lang/rust/commits/91853590a9ee78406e892ca92305edef3a5b9213", "html_url": "https://github.com/rust-lang/rust/commit/91853590a9ee78406e892ca92305edef3a5b9213"}], "stats": {"total": 94, "additions": 91, "deletions": 3}, "files": [{"sha": "98ba05fc27050400f99c4b9d3b731ebe63356ded", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0ef8ace012b19b76ee99b283801d0d17a3b72b4b/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef8ace012b19b76ee99b283801d0d17a3b72b4b/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=0ef8ace012b19b76ee99b283801d0d17a3b72b4b", "patch": "@@ -32,6 +32,7 @@ use hir_def::{\n use hir_expand::{diagnostics::DiagnosticSink, name::name};\n use ra_arena::map::ArenaMap;\n use ra_prof::profile;\n+use test_utils::tested_by;\n \n use super::{\n     primitive::{FloatTy, IntTy},\n@@ -274,6 +275,29 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         self.normalize_associated_types_in(ty)\n     }\n \n+    /// Replaces `impl Trait` in `ty` by type variables and obligations for\n+    /// those variables. This is done for function arguments when calling a\n+    /// function, and for return types when inside the function body, i.e. in\n+    /// the cases where the `impl Trait` is 'transparent'. In other cases, `impl\n+    /// Trait` is represented by `Ty::Opaque`.\n+    fn insert_vars_for_impl_trait(&mut self, ty: Ty) -> Ty {\n+        ty.fold(&mut |ty| match ty {\n+            Ty::Opaque(preds) => {\n+                tested_by!(insert_vars_for_impl_trait);\n+                let var = self.table.new_type_var();\n+                let var_subst = Substs::builder(1).push(var.clone()).build();\n+                self.obligations.extend(\n+                    preds\n+                        .iter()\n+                        .map(|pred| pred.clone().subst_bound_vars(&var_subst))\n+                        .filter_map(Obligation::from_predicate),\n+                );\n+                var\n+            }\n+            _ => ty,\n+        })\n+    }\n+\n     /// Replaces Ty::Unknown by a new type var, so we can maybe still infer it.\n     fn insert_type_vars_shallow(&mut self, ty: Ty) -> Ty {\n         match ty {\n@@ -414,7 +438,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n             self.infer_pat(*pat, &ty, BindingMode::default());\n         }\n-        self.return_ty = self.make_ty(&data.ret_type);\n+        let return_ty = self.make_ty(&data.ret_type);\n+        self.return_ty = self.insert_vars_for_impl_trait(return_ty);\n     }\n \n     fn infer_body(&mut self) {"}, {"sha": "924ad3e81386a188c75bc424e3e9ba90ff17235f", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ef8ace012b19b76ee99b283801d0d17a3b72b4b/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef8ace012b19b76ee99b283801d0d17a3b72b4b/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=0ef8ace012b19b76ee99b283801d0d17a3b72b4b", "patch": "@@ -613,6 +613,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     continue;\n                 }\n \n+                let param_ty = self.insert_vars_for_impl_trait(param_ty);\n                 let param_ty = self.normalize_associated_types_in(param_ty);\n                 self.infer_expr_coerce(arg, &Expectation::has_type(param_ty.clone()));\n             }"}, {"sha": "fe74acf119b80a953ecf925ae3efce683ff06425", "filename": "crates/ra_hir_ty/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ef8ace012b19b76ee99b283801d0d17a3b72b4b/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef8ace012b19b76ee99b283801d0d17a3b72b4b/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs?ref=0ef8ace012b19b76ee99b283801d0d17a3b72b4b", "patch": "@@ -6,4 +6,5 @@ test_utils::marks!(\n     type_var_resolves_to_int_var\n     match_ergonomics_ref\n     coerce_merge_fail_fallback\n+    insert_vars_for_impl_trait\n );"}, {"sha": "802937cb02a6eeadc94d15353bfa9ce4829fca7b", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0ef8ace012b19b76ee99b283801d0d17a3b72b4b/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef8ace012b19b76ee99b283801d0d17a3b72b4b/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=0ef8ace012b19b76ee99b283801d0d17a3b72b4b", "patch": "@@ -1,7 +1,10 @@\n-use super::{infer, type_at, type_at_pos};\n-use crate::test_db::TestDB;\n use insta::assert_snapshot;\n+\n use ra_db::fixture::WithFixture;\n+use test_utils::covers;\n+\n+use super::{infer, infer_with_mismatches, type_at, type_at_pos};\n+use crate::test_db::TestDB;\n \n #[test]\n fn infer_await() {\n@@ -1486,3 +1489,61 @@ fn test<T, U>() where T: Trait<U::Item>, U: Trait<T::Item> {\n     // this is a legitimate cycle\n     assert_eq!(t, \"{unknown}\");\n }\n+\n+#[test]\n+fn unify_impl_trait() {\n+    covers!(insert_vars_for_impl_trait);\n+    assert_snapshot!(\n+        infer_with_mismatches(r#\"\n+trait Trait<T> {}\n+\n+fn foo(x: impl Trait<u32>) { loop {} }\n+fn bar<T>(x: impl Trait<T>) -> T { loop {} }\n+\n+struct S<T>(T);\n+impl<T> Trait<T> for S<T> {}\n+\n+fn default<T>() -> T { loop {} }\n+\n+fn test() -> impl Trait<i32> {\n+    let s1 = S(default());\n+    foo(s1);\n+    let x: i32 = bar(S(default()));\n+    S(default())\n+}\n+\"#, true),\n+        @r###\"\n+    [27; 28) 'x': impl Trait<u32>\n+    [47; 58) '{ loop {} }': ()\n+    [49; 56) 'loop {}': !\n+    [54; 56) '{}': ()\n+    [69; 70) 'x': impl Trait<T>\n+    [92; 103) '{ loop {} }': T\n+    [94; 101) 'loop {}': !\n+    [99; 101) '{}': ()\n+    [172; 183) '{ loop {} }': T\n+    [174; 181) 'loop {}': !\n+    [179; 181) '{}': ()\n+    [214; 310) '{     ...t()) }': S<i32>\n+    [224; 226) 's1': S<u32>\n+    [229; 230) 'S': S<u32>(T) -> S<T>\n+    [229; 241) 'S(default())': S<u32>\n+    [231; 238) 'default': fn default<u32>() -> T\n+    [231; 240) 'default()': u32\n+    [247; 250) 'foo': fn foo(impl Trait<u32>) -> ()\n+    [247; 254) 'foo(s1)': ()\n+    [251; 253) 's1': S<u32>\n+    [264; 265) 'x': i32\n+    [273; 276) 'bar': fn bar<i32>(impl Trait<T>) -> T\n+    [273; 290) 'bar(S(...lt()))': i32\n+    [277; 278) 'S': S<i32>(T) -> S<T>\n+    [277; 289) 'S(default())': S<i32>\n+    [279; 286) 'default': fn default<i32>() -> T\n+    [279; 288) 'default()': i32\n+    [296; 297) 'S': S<i32>(T) -> S<T>\n+    [296; 308) 'S(default())': S<i32>\n+    [298; 305) 'default': fn default<i32>() -> T\n+    [298; 307) 'default()': i32\n+    \"###\n+    );\n+}"}]}