{"sha": "e9612f3eca5566b601dda60c999be69e50f89cac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NjEyZjNlY2E1NTY2YjYwMWRkYTYwYzk5OWJlNjllNTBmODljYWM=", "commit": {"author": {"name": "rsulli55", "email": "rsulli55@gmail.com", "date": "2020-10-26T01:11:38Z"}, "committer": {"name": "Ryan Sullivant", "email": "rsulli55@gmail.com", "date": "2020-11-11T06:18:47Z"}, "message": "Remove `to_string` on msg\n\nCo-authored-by: Philipp Krones <hello@philkrones.com>", "tree": {"sha": "74b1d0171b341a538180f33752e0e68fb1329b27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74b1d0171b341a538180f33752e0e68fb1329b27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9612f3eca5566b601dda60c999be69e50f89cac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9612f3eca5566b601dda60c999be69e50f89cac", "html_url": "https://github.com/rust-lang/rust/commit/e9612f3eca5566b601dda60c999be69e50f89cac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9612f3eca5566b601dda60c999be69e50f89cac/comments", "author": {"login": "rsulli55", "id": 22406159, "node_id": "MDQ6VXNlcjIyNDA2MTU5", "avatar_url": "https://avatars.githubusercontent.com/u/22406159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsulli55", "html_url": "https://github.com/rsulli55", "followers_url": "https://api.github.com/users/rsulli55/followers", "following_url": "https://api.github.com/users/rsulli55/following{/other_user}", "gists_url": "https://api.github.com/users/rsulli55/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsulli55/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsulli55/subscriptions", "organizations_url": "https://api.github.com/users/rsulli55/orgs", "repos_url": "https://api.github.com/users/rsulli55/repos", "events_url": "https://api.github.com/users/rsulli55/events{/privacy}", "received_events_url": "https://api.github.com/users/rsulli55/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsulli55", "id": 22406159, "node_id": "MDQ6VXNlcjIyNDA2MTU5", "avatar_url": "https://avatars.githubusercontent.com/u/22406159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsulli55", "html_url": "https://github.com/rsulli55", "followers_url": "https://api.github.com/users/rsulli55/followers", "following_url": "https://api.github.com/users/rsulli55/following{/other_user}", "gists_url": "https://api.github.com/users/rsulli55/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsulli55/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsulli55/subscriptions", "organizations_url": "https://api.github.com/users/rsulli55/orgs", "repos_url": "https://api.github.com/users/rsulli55/repos", "events_url": "https://api.github.com/users/rsulli55/events{/privacy}", "received_events_url": "https://api.github.com/users/rsulli55/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55dc822062eb760afff0d242dea193aabc2c9771", "url": "https://api.github.com/repos/rust-lang/rust/commits/55dc822062eb760afff0d242dea193aabc2c9771", "html_url": "https://github.com/rust-lang/rust/commit/55dc822062eb760afff0d242dea193aabc2c9771"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "4df1b3d197f88c7388cca27477efc2ef59650eb1", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9612f3eca5566b601dda60c999be69e50f89cac/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9612f3eca5566b601dda60c999be69e50f89cac/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e9612f3eca5566b601dda60c999be69e50f89cac", "patch": "@@ -3111,7 +3111,7 @@ fn lint_search_is_some<'tcx>(\n             then {\n                 let msg = \"called `is_some()` after calling `find()` \\\n                     on a string. This is more succinctly expressed by calling \\\n-                    `contains()`.\".to_string();\n+                    `contains()`\";\n                 let mut applicability = Applicability::MachineApplicable;\n                 let find_arg = snippet_with_applicability(cx, search_args[1].span, \"..\", &mut applicability);\n                 span_lint_and_sugg("}]}