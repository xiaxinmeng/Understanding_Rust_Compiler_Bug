{"sha": "78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZjE1OGU4MGUzYTJlYzgwMjJlNmNkNmIyZjYyYjE3YjNlOTZiNTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-28T10:45:13Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-06-07T19:16:03Z"}, "message": "dogfood unnested_or_patterns", "tree": {"sha": "48e265e59a925decd462da939d4a9fe37bde1072", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48e265e59a925decd462da939d4a9fe37bde1072"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl7dPPUACgkQLO/Nsn7Q\nvnkA+g/8CNrM3agQPEr8IS6ZKkeb+m4HQEwrIoovm5VfjVb07/Z4chxeVI6716xQ\n2qn0zUZWpFR8bQ5mAT632AHbaDxWlpkXf33xuWEPs6f+AV41SVV5EjKTOw5zbNAn\nr7NXHiFDQt37MA3QNA2XZIbrrC+FnR3SMix93sByg2Rriw0CDZPN+t7tGVe0ZntJ\nhaVl3/7oRzy+e+29pAAyxL1pv1cwBR4jUbKGBaoxXXSEWhH/cjWQTlvwbKHZI6Vj\nt+fZ4QiY9IU2CBFSG6xYZKghTyUEU4ntA2ILqQ52ZnLHVjEN8W5YlinL1C1aysG3\nznvxRj/Fh1koFGcYPCl2kgtcOGHW5rhsR3tXbnNviwAo7eHCLD1QSDwh6O1qwKaj\nUmR995bavrtJ8jOtgZcqFofDUTjqNK69dBuU7bv57VXrurgHM1+WXgdW/rFuVS0s\nfELfJqtERuCybh7wNqqmvxa9k/C0ATurqJ/8Jz2mE3FDQw+UDL7tLvXXJEuLlKcl\nE8BNdV5WpSh6NUe42K/mrhQt506RvJQwY9UTzN6a8+WmvdJHXEvrGNcaOTcn1lXm\nha9d737ky8XNCzNqlZZM6VsZeNI5dJh4/5o4/hyNbL51/ZhWiQa6ywjTX9TucLuW\nJ3sNI9lCThiuaWXH3P2w2cAfL8tbiMkV585BabXNZmweRbShWcU=\n=3Gbz\n-----END PGP SIGNATURE-----", "payload": "tree 48e265e59a925decd462da939d4a9fe37bde1072\nparent 7b6dc7b33dc437a59330ef3f5426102ca60fbf51\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585392313 +0100\ncommitter flip1995 <hello@philkrones.com> 1591557363 +0200\n\ndogfood unnested_or_patterns\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57", "html_url": "https://github.com/rust-lang/rust/commit/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b6dc7b33dc437a59330ef3f5426102ca60fbf51", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b6dc7b33dc437a59330ef3f5426102ca60fbf51", "html_url": "https://github.com/rust-lang/rust/commit/7b6dc7b33dc437a59330ef3f5426102ca60fbf51"}], "stats": {"total": 108, "additions": 44, "deletions": 64}, "files": [{"sha": "156246fb8bbb01b190871ffc912c76536530c344", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57", "patch": "@@ -112,12 +112,8 @@ declare_lint_pass!(Formatting => [\n impl EarlyLintPass for Formatting {\n     fn check_block(&mut self, cx: &EarlyContext<'_>, block: &Block) {\n         for w in block.stmts.windows(2) {\n-            match (&w[0].kind, &w[1].kind) {\n-                (&StmtKind::Expr(ref first), &StmtKind::Expr(ref second))\n-                | (&StmtKind::Expr(ref first), &StmtKind::Semi(ref second)) => {\n-                    check_missing_else(cx, first, second);\n-                },\n-                _ => (),\n+            if let (StmtKind::Expr(first), StmtKind::Expr(second) | StmtKind::Semi(second)) = (&w[0].kind, &w[1].kind) {\n+                check_missing_else(cx, first, second);\n             }\n         }\n     }"}, {"sha": "4f5c06e785c23eeb1eded772c87a595ed1a6a49b", "filename": "clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57", "patch": "@@ -57,7 +57,7 @@ pub fn lint(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, args: &[&[hir::Expr<\n         );\n     } else {\n         match (mm, arith) {\n-            (MinMax::Max, \"add\") | (MinMax::Max, \"mul\") | (MinMax::Min, \"sub\") => (),\n+            (MinMax::Max, \"add\" | \"mul\") | (MinMax::Min, \"sub\") => (),\n             _ => return,\n         }\n "}, {"sha": "214cf0c130f217fe5181ca318e6b7c3444af42a4", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57", "patch": "@@ -1403,9 +1403,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n                 lint_search_is_some(cx, expr, \"rposition\", arg_lists[1], arg_lists[0], method_spans[1])\n             },\n             [\"extend\", ..] => lint_extend(cx, expr, arg_lists[0]),\n-            [\"as_ptr\", \"unwrap\"] | [\"as_ptr\", \"expect\"] => {\n-                lint_cstring_as_ptr(cx, expr, &arg_lists[1][0], &arg_lists[0][0])\n-            },\n+            [\"as_ptr\", \"unwrap\" | \"expect\"] => lint_cstring_as_ptr(cx, expr, &arg_lists[1][0], &arg_lists[0][0]),\n             [\"nth\", \"iter\"] => lint_iter_nth(cx, expr, &arg_lists, false),\n             [\"nth\", \"iter_mut\"] => lint_iter_nth(cx, expr, &arg_lists, true),\n             [\"nth\", ..] => lint_iter_nth_zero(cx, expr, arg_lists[0]),\n@@ -1418,12 +1416,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             [\"filter_map\", ..] => unnecessary_filter_map::lint(cx, expr, arg_lists[0]),\n             [\"count\", \"map\"] => lint_suspicious_map(cx, expr),\n             [\"assume_init\"] => lint_maybe_uninit(cx, &arg_lists[0][0], expr),\n-            [\"unwrap_or\", arith @ \"checked_add\"]\n-            | [\"unwrap_or\", arith @ \"checked_sub\"]\n-            | [\"unwrap_or\", arith @ \"checked_mul\"] => {\n+            [\"unwrap_or\", arith @ (\"checked_add\" | \"checked_sub\" | \"checked_mul\")] => {\n                 manual_saturating_arithmetic::lint(cx, expr, &arg_lists, &arith[\"checked_\".len()..])\n             },\n-            [\"add\"] | [\"offset\"] | [\"sub\"] | [\"wrapping_offset\"] | [\"wrapping_add\"] | [\"wrapping_sub\"] => {\n+            [\"add\" | \"offset\" | \"sub\" | \"wrapping_offset\" | \"wrapping_add\" | \"wrapping_sub\"] => {\n                 check_pointer_offset(cx, expr, arg_lists[0])\n             },\n             [\"is_file\", ..] => lint_filetype_is_file(cx, expr, arg_lists[0]),\n@@ -1829,8 +1825,7 @@ fn lint_expect_fun_call(\n             hir::ExprKind::Call(fun, _) => {\n                 if let hir::ExprKind::Path(ref p) = fun.kind {\n                     match cx.tables.qpath_res(p, fun.hir_id) {\n-                        hir::def::Res::Def(hir::def::DefKind::Fn, def_id)\n-                        | hir::def::Res::Def(hir::def::DefKind::AssocFn, def_id) => matches!(\n+                        hir::def::Res::Def(hir::def::DefKind::Fn | hir::def::DefKind::AssocFn, def_id) => matches!(\n                             cx.tcx.fn_sig(def_id).output().skip_binder().kind,\n                             ty::Ref(ty::ReStatic, ..)\n                         ),"}, {"sha": "f513161bbbc5209630050c5cf82f6b09764c645f", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57", "patch": "@@ -275,17 +275,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n             return;\n         }\n         for arg in iter_input_pats(decl, body) {\n-            match arg.pat.kind {\n-                PatKind::Binding(BindingAnnotation::Ref, ..) | PatKind::Binding(BindingAnnotation::RefMut, ..) => {\n-                    span_lint(\n-                        cx,\n-                        TOPLEVEL_REF_ARG,\n-                        arg.pat.span,\n-                        \"`ref` directly on a function argument is ignored. Consider using a reference type \\\n-                         instead.\",\n-                    );\n-                },\n-                _ => {},\n+            if let PatKind::Binding(BindingAnnotation::Ref | BindingAnnotation::RefMut, ..) = arg.pat.kind {\n+                span_lint(\n+                    cx,\n+                    TOPLEVEL_REF_ARG,\n+                    arg.pat.span,\n+                    \"`ref` directly on a function argument is ignored. \\\n+                    Consider using a reference type instead.\",\n+                );\n             }\n         }\n     }"}, {"sha": "2eacd3c80c486ba8d5ba6f436d1ef018f1ec3af4", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57", "patch": "@@ -147,7 +147,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr<'a>) -> Option\n             if let ExprKind::Path(ref qpath) = callee.kind {\n                 let res = qpath_res(cx, qpath, callee.hir_id);\n                 match res {\n-                    Res::Def(DefKind::Struct, ..) | Res::Def(DefKind::Variant, ..) | Res::Def(DefKind::Ctor(..), _)\n+                    Res::Def(DefKind::Struct | DefKind::Variant | DefKind::Ctor(..), ..)\n                         if !has_drop(cx, cx.tables.expr_ty(expr)) =>\n                     {\n                         Some(args.iter().collect())"}, {"sha": "a9e6fa329c0f03ab2681222320afcce1f6fcfbb9", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57", "patch": "@@ -71,8 +71,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {\n                 if let hir::Node::Expr(e) = cx.tcx.hir().get(parent_expr) {\n                     match e.kind {\n                         hir::ExprKind::Binary(..)\n-                        | hir::ExprKind::Unary(hir::UnOp::UnNot, _)\n-                        | hir::ExprKind::Unary(hir::UnOp::UnNeg, _)\n+                        | hir::ExprKind::Unary(hir::UnOp::UnNot | hir::UnOp::UnNeg, _)\n                         | hir::ExprKind::AssignOp(..) => return,\n                         _ => {},\n                     }\n@@ -191,8 +190,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BinaryExprVisitor {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         match expr.kind {\n             hir::ExprKind::Binary(..)\n-            | hir::ExprKind::Unary(hir::UnOp::UnNot, _)\n-            | hir::ExprKind::Unary(hir::UnOp::UnNeg, _)\n+            | hir::ExprKind::Unary(hir::UnOp::UnNot | hir::UnOp::UnNeg, _)\n             | hir::ExprKind::AssignOp(..) => self.in_binary_expr = true,\n             _ => {},\n         }"}, {"sha": "1869638f6ffb11b5b196eae87d659a4a996acdd3", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57", "patch": "@@ -312,7 +312,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                         e.span,\n                         &format!(\"transmute from a type (`{}`) to itself\", from_ty),\n                     ),\n-                    (&ty::Ref(_, rty, rty_mutbl), &ty::RawPtr(ptr_ty)) => span_lint_and_then(\n+                    (ty::Ref(_, rty, rty_mutbl), ty::RawPtr(ptr_ty)) => span_lint_and_then(\n                         cx,\n                         USELESS_TRANSMUTE,\n                         e.span,\n@@ -321,10 +321,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n                                 let rty_and_mut = ty::TypeAndMut {\n                                     ty: rty,\n-                                    mutbl: rty_mutbl,\n+                                    mutbl: *rty_mutbl,\n                                 };\n \n-                                let sugg = if ptr_ty == rty_and_mut {\n+                                let sugg = if *ptr_ty == rty_and_mut {\n                                     arg.as_ty(to_ty)\n                                 } else {\n                                     arg.as_ty(cx.tcx.mk_ptr(rty_and_mut)).as_ty(to_ty)\n@@ -334,7 +334,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             }\n                         },\n                     ),\n-                    (&ty::Int(_), &ty::RawPtr(_)) | (&ty::Uint(_), &ty::RawPtr(_)) => span_lint_and_then(\n+                    (ty::Int(_) | ty::Uint(_), ty::RawPtr(_)) => span_lint_and_then(\n                         cx,\n                         USELESS_TRANSMUTE,\n                         e.span,\n@@ -350,16 +350,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             }\n                         },\n                     ),\n-                    (&ty::Float(_), &ty::Ref(..))\n-                    | (&ty::Float(_), &ty::RawPtr(_))\n-                    | (&ty::Char, &ty::Ref(..))\n-                    | (&ty::Char, &ty::RawPtr(_)) => span_lint(\n+                    (ty::Float(_) | ty::Char, ty::Ref(..) | ty::RawPtr(_)) => span_lint(\n                         cx,\n                         WRONG_TRANSMUTE,\n                         e.span,\n                         &format!(\"transmute from a `{}` to a pointer\", from_ty),\n                     ),\n-                    (&ty::RawPtr(from_ptr), _) if from_ptr.ty == to_ty => span_lint(\n+                    (ty::RawPtr(from_ptr), _) if from_ptr.ty == to_ty => span_lint(\n                         cx,\n                         CROSSPOINTER_TRANSMUTE,\n                         e.span,\n@@ -368,7 +365,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             from_ty, to_ty\n                         ),\n                     ),\n-                    (_, &ty::RawPtr(to_ptr)) if to_ptr.ty == from_ty => span_lint(\n+                    (_, ty::RawPtr(to_ptr)) if to_ptr.ty == from_ty => span_lint(\n                         cx,\n                         CROSSPOINTER_TRANSMUTE,\n                         e.span,\n@@ -377,7 +374,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             from_ty, to_ty\n                         ),\n                     ),\n-                    (&ty::RawPtr(from_pty), &ty::Ref(_, to_ref_ty, mutbl)) => span_lint_and_then(\n+                    (ty::RawPtr(from_pty), ty::Ref(_, to_ref_ty, mutbl)) => span_lint_and_then(\n                         cx,\n                         TRANSMUTE_PTR_TO_REF,\n                         e.span,\n@@ -388,13 +385,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                         ),\n                         |diag| {\n                             let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n-                            let (deref, cast) = if mutbl == Mutability::Mut {\n+                            let (deref, cast) = if *mutbl == Mutability::Mut {\n                                 (\"&mut *\", \"*mut\")\n                             } else {\n                                 (\"&*\", \"*const\")\n                             };\n \n-                            let arg = if from_pty.ty == to_ref_ty {\n+                            let arg = if from_pty.ty == *to_ref_ty {\n                                 arg\n                             } else {\n                                 arg.as_ty(&format!(\"{} {}\", cast, get_type_snippet(cx, qpath, to_ref_ty)))\n@@ -408,7 +405,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             );\n                         },\n                     ),\n-                    (&ty::Int(ast::IntTy::I32), &ty::Char) | (&ty::Uint(ast::UintTy::U32), &ty::Char) => {\n+                    (ty::Int(ast::IntTy::I32) | ty::Uint(ast::UintTy::U32), &ty::Char) => {\n                         span_lint_and_then(\n                             cx,\n                             TRANSMUTE_INT_TO_CHAR,\n@@ -430,13 +427,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             },\n                         )\n                     },\n-                    (&ty::Ref(_, ty_from, from_mutbl), &ty::Ref(_, ty_to, to_mutbl)) => {\n+                    (ty::Ref(_, ty_from, from_mutbl), ty::Ref(_, ty_to, to_mutbl)) => {\n                         if_chain! {\n                             if let (&ty::Slice(slice_ty), &ty::Str) = (&ty_from.kind, &ty_to.kind);\n                             if let ty::Uint(ast::UintTy::U8) = slice_ty.kind;\n                             if from_mutbl == to_mutbl;\n                             then {\n-                                let postfix = if from_mutbl == Mutability::Mut {\n+                                let postfix = if *from_mutbl == Mutability::Mut {\n                                     \"_mut\"\n                                 } else {\n                                     \"\"\n@@ -465,13 +462,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                         |diag| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n                                             let ty_from_and_mut = ty::TypeAndMut {\n                                                 ty: ty_from,\n-                                                mutbl: from_mutbl\n+                                                mutbl: *from_mutbl\n                                             };\n-                                            let ty_to_and_mut = ty::TypeAndMut { ty: ty_to, mutbl: to_mutbl };\n+                                            let ty_to_and_mut = ty::TypeAndMut { ty: ty_to, mutbl: *to_mutbl };\n                                             let sugg_paren = arg\n                                                 .as_ty(cx.tcx.mk_ptr(ty_from_and_mut))\n                                                 .as_ty(cx.tcx.mk_ptr(ty_to_and_mut));\n-                                            let sugg = if to_mutbl == Mutability::Mut {\n+                                            let sugg = if *to_mutbl == Mutability::Mut {\n                                                 sugg_paren.mut_addr_deref()\n                                             } else {\n                                                 sugg_paren.addr_deref()\n@@ -488,19 +485,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             }\n                         }\n                     },\n-                    (&ty::RawPtr(_), &ty::RawPtr(to_ty)) => span_lint_and_then(\n+                    (ty::RawPtr(_), ty::RawPtr(to_ty)) => span_lint_and_then(\n                         cx,\n                         TRANSMUTE_PTR_TO_PTR,\n                         e.span,\n                         \"transmute from a pointer to a pointer\",\n                         |diag| {\n                             if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                let sugg = arg.as_ty(cx.tcx.mk_ptr(to_ty));\n+                                let sugg = arg.as_ty(cx.tcx.mk_ptr(*to_ty));\n                                 diag.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n                             }\n                         },\n                     ),\n-                    (&ty::Int(ast::IntTy::I8), &ty::Bool) | (&ty::Uint(ast::UintTy::U8), &ty::Bool) => {\n+                    (ty::Int(ast::IntTy::I8) | ty::Uint(ast::UintTy::U8), ty::Bool) => {\n                         span_lint_and_then(\n                             cx,\n                             TRANSMUTE_INT_TO_BOOL,\n@@ -518,7 +515,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             },\n                         )\n                     },\n-                    (&ty::Int(_), &ty::Float(_)) | (&ty::Uint(_), &ty::Float(_)) => span_lint_and_then(\n+                    (ty::Int(_) | ty::Uint(_), ty::Float(_)) => span_lint_and_then(\n                         cx,\n                         TRANSMUTE_INT_TO_FLOAT,\n                         e.span,\n@@ -541,7 +538,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             );\n                         },\n                     ),\n-                    (&ty::Float(float_ty), &ty::Int(_)) | (&ty::Float(float_ty), &ty::Uint(_)) => span_lint_and_then(\n+                    (ty::Float(float_ty), ty::Int(_) | ty::Uint(_)) => span_lint_and_then(\n                         cx,\n                         TRANSMUTE_FLOAT_TO_INT,\n                         e.span,\n@@ -585,7 +582,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             );\n                         },\n                     ),\n-                    (&ty::Adt(ref from_adt, ref from_substs), &ty::Adt(ref to_adt, ref to_substs)) => {\n+                    (ty::Adt(from_adt, from_substs), ty::Adt(to_adt, to_substs)) => {\n                         if from_adt.did != to_adt.did ||\n                                 !COLLECTIONS.iter().any(|path| match_def_path(cx, to_adt.did, path)) {\n                             return;"}, {"sha": "036dd16a224af53586df43ebf81fc813a6a2ca55", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57", "patch": "@@ -101,7 +101,7 @@ fn collect_unwrap_info<'a, 'tcx>(\n \n     if let ExprKind::Binary(op, left, right) = &expr.kind {\n         match (invert, op.node) {\n-            (false, BinOpKind::And) | (false, BinOpKind::BitAnd) | (true, BinOpKind::Or) | (true, BinOpKind::BitOr) => {\n+            (false, BinOpKind::And | BinOpKind::BitAnd) | (true, BinOpKind::Or | BinOpKind::BitOr) => {\n                 let mut unwrap_info = collect_unwrap_info(cx, left, branch, invert);\n                 unwrap_info.append(&mut collect_unwrap_info(cx, right, branch, invert));\n                 return unwrap_info;"}, {"sha": "7c823810265e2b85c07e08eb2c3e11cb95969cc3", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=78f158e80e3a2ec8022e6cd6b2f62b17b3e96b57", "patch": "@@ -1,6 +1,7 @@\n #[macro_use]\n pub mod sym;\n \n+#[allow(clippy::module_name_repetitions)]\n pub mod ast_utils;\n pub mod attrs;\n pub mod author;\n@@ -73,7 +74,7 @@ pub fn in_constant(cx: &LateContext<'_, '_>, id: HirId) -> bool {\n     let parent_id = cx.tcx.hir().get_parent_item(id);\n     match cx.tcx.hir().get(parent_id) {\n         Node::Item(&Item {\n-            kind: ItemKind::Const(..),\n+            kind: ItemKind::Const(..) | ItemKind::Static(..),\n             ..\n         })\n         | Node::TraitItem(&TraitItem {\n@@ -84,11 +85,7 @@ pub fn in_constant(cx: &LateContext<'_, '_>, id: HirId) -> bool {\n             kind: ImplItemKind::Const(..),\n             ..\n         })\n-        | Node::AnonConst(_)\n-        | Node::Item(&Item {\n-            kind: ItemKind::Static(..),\n-            ..\n-        }) => true,\n+        | Node::AnonConst(_) => true,\n         Node::Item(&Item {\n             kind: ItemKind::Fn(ref sig, ..),\n             .."}]}