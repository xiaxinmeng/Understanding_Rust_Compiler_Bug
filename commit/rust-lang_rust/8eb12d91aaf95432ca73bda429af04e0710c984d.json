{"sha": "8eb12d91aaf95432ca73bda429af04e0710c984d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYjEyZDkxYWFmOTU0MzJjYTczYmRhNDI5YWYwNGUwNzEwYzk4NGQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-16T16:38:17Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-22T11:32:56Z"}, "message": "remove rustc_typeck::same_type_err", "tree": {"sha": "3493d977a65d6c4e7f30a52fb2b95f0d744e563a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3493d977a65d6c4e7f30a52fb2b95f0d744e563a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eb12d91aaf95432ca73bda429af04e0710c984d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eb12d91aaf95432ca73bda429af04e0710c984d", "html_url": "https://github.com/rust-lang/rust/commit/8eb12d91aaf95432ca73bda429af04e0710c984d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eb12d91aaf95432ca73bda429af04e0710c984d/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2422ab806b9a6c2c52e0bd690486df1950f7339", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2422ab806b9a6c2c52e0bd690486df1950f7339", "html_url": "https://github.com/rust-lang/rust/commit/b2422ab806b9a6c2c52e0bd690486df1950f7339"}], "stats": {"total": 169, "additions": 114, "deletions": 55}, "files": [{"sha": "a0fa188c4f809b4cb9700757be51ff496f659d6d", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=8eb12d91aaf95432ca73bda429af04e0710c984d", "patch": "@@ -554,6 +554,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                          trace: TypeTrace<'tcx>,\n                                          terr: &TypeError<'tcx>)\n                                          -> DiagnosticBuilder<'tcx> {\n+        let trace = self.resolve_type_vars_if_possible(&trace);\n         let span = trace.origin.span();\n         let mut err = self.report_type_error(trace, terr);\n         self.tcx.note_and_explain_type_err(&mut err, terr, span);\n@@ -1643,6 +1644,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     TypeOrigin::EquatePredicate(_) => {\n                         \"equality where clause is satisfied\"\n                     }\n+                    TypeOrigin::MainFunctionType(_) => {\n+                        \"the `main` function has the correct type\"\n+                    }\n+                    TypeOrigin::StartFunctionType(_) => {\n+                        \"the `start` function has the correct type\"\n+                    }\n+                    TypeOrigin::IntrinsicType(_) => {\n+                        \"the intrinsic has the correct type\"\n+                    }\n                 };\n \n                 match self.values_str(&trace.values) {"}, {"sha": "dc262e61dd018ef46783befaa0d6df706637209c", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=8eb12d91aaf95432ca73bda429af04e0710c984d", "patch": "@@ -32,7 +32,7 @@ use ty::adjustment;\n use ty::{TyVid, IntVid, FloatVid};\n use ty::{self, Ty, TyCtxt};\n use ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n-use ty::fold::TypeFoldable;\n+use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use ty::relate::{Relate, RelateResult, TypeRelation};\n use traits::{self, PredicateObligations, ProjectionMode};\n use rustc_data_structures::unify::{self, UnificationTable};\n@@ -219,6 +219,15 @@ pub enum TypeOrigin {\n \n     // `where a == b`\n     EquatePredicate(Span),\n+\n+    // `main` has wrong type\n+    MainFunctionType(Span),\n+\n+    // `start` has wrong type\n+    StartFunctionType(Span),\n+\n+    // intrinsic has wrong type\n+    IntrinsicType(Span),\n }\n \n impl TypeOrigin {\n@@ -238,6 +247,9 @@ impl TypeOrigin {\n             &TypeOrigin::IfExpressionWithNoElse(_) => \"if may be missing an else clause\",\n             &TypeOrigin::RangeExpression(_) => \"start and end of range have incompatible types\",\n             &TypeOrigin::EquatePredicate(_) => \"equality predicate not satisfied\",\n+            &TypeOrigin::MainFunctionType(_) => \"main function has wrong type\",\n+            &TypeOrigin::StartFunctionType(_) => \"start function has wrong type\",\n+            &TypeOrigin::IntrinsicType(_) => \"intrinsic has wrong type\",\n         }\n     }\n }\n@@ -1791,6 +1803,9 @@ impl TypeOrigin {\n             TypeOrigin::IfExpressionWithNoElse(span) => span,\n             TypeOrigin::RangeExpression(span) => span,\n             TypeOrigin::EquatePredicate(span) => span,\n+            TypeOrigin::MainFunctionType(span) => span,\n+            TypeOrigin::StartFunctionType(span) => span,\n+            TypeOrigin::IntrinsicType(span) => span,\n         }\n     }\n }\n@@ -1841,3 +1856,50 @@ impl RegionVariableOrigin {\n         }\n     }\n }\n+\n+impl<'tcx> TypeFoldable<'tcx> for TypeOrigin {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, _folder: &mut F) -> Self {\n+        self.clone()\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool {\n+        false\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for ValuePairs<'tcx> {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n+        match *self {\n+            ValuePairs::Types(ref ef) => {\n+                ValuePairs::Types(ef.fold_with(folder))\n+            }\n+            ValuePairs::TraitRefs(ref ef) => {\n+                ValuePairs::TraitRefs(ef.fold_with(folder))\n+            }\n+            ValuePairs::PolyTraitRefs(ref ef) => {\n+                ValuePairs::PolyTraitRefs(ef.fold_with(folder))\n+            }\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        match *self {\n+            ValuePairs::Types(ref ef) => ef.visit_with(visitor),\n+            ValuePairs::TraitRefs(ref ef) => ef.visit_with(visitor),\n+            ValuePairs::PolyTraitRefs(ref ef) => ef.visit_with(visitor),\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for TypeTrace<'tcx> {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n+        TypeTrace {\n+            origin: self.origin.fold_with(folder),\n+            values: self.values.fold_with(folder)\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.origin.visit_with(visitor) || self.values.visit_with(visitor)\n+    }\n+}"}, {"sha": "16a54c20925deda7b8417a3747be29e6e0289bec", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=8eb12d91aaf95432ca73bda429af04e0710c984d", "patch": "@@ -1018,3 +1018,16 @@ impl<'tcx> TypeFoldable<'tcx> for ty::TypeScheme<'tcx>  {\n         self.generics.visit_with(visitor) || self.ty.visit_with(visitor)\n     }\n }\n+\n+impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::error::ExpectedFound<T> {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n+        ty::error::ExpectedFound {\n+            expected: self.expected.fold_with(folder),\n+            found: self.found.fold_with(folder),\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.expected.visit_with(visitor) || self.found.visit_with(visitor)\n+    }\n+}"}, {"sha": "aae6e3ad36dfe7ee2ba7b1ec173cd2d3f8193a82", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=8eb12d91aaf95432ca73bda429af04e0710c984d", "patch": "@@ -103,15 +103,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     return;\n                 }\n \n-                // Check that the types of the end-points can be unified.\n-                let types_unify = self.require_same_types(pat.span, rhs_ty, lhs_ty,\n-                                                          \"mismatched types in range\");\n-\n-                // It's ok to return without a message as `require_same_types` prints an error.\n-                if !types_unify {\n-                    return;\n-                }\n-\n                 // Now that we know the types can be unified we find the unified type and use\n                 // it to type the entire expression.\n                 let common_type = self.resolve_type_vars_if_possible(&lhs_ty);\n@@ -120,6 +111,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                 // subtyping doesn't matter here, as the value is some kind of scalar\n                 self.demand_eqtype(pat.span, expected, lhs_ty);\n+                self.demand_eqtype(pat.span, expected, rhs_ty);\n             }\n             PatKind::Binding(bm, _, ref sub) => {\n                 let typ = self.local_ty(pat.span, pat.id);"}, {"sha": "c1f415b3c028a36cb51b171759c4606636b1330c", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=8eb12d91aaf95432ca73bda429af04e0710c984d", "patch": "@@ -54,16 +54,4 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.report_mismatched_types(origin, expected, expr_ty, e);\n         }\n     }\n-\n-    pub fn require_same_types(&self, span: Span, t1: Ty<'tcx>, t2: Ty<'tcx>, msg: &str)\n-                              -> bool {\n-        if let Err(err) = self.eq_types(false, TypeOrigin::Misc(span), t1, t2) {\n-            let found_ty = self.resolve_type_vars_if_possible(&t1);\n-            let expected_ty = self.resolve_type_vars_if_possible(&t2);\n-            ::emit_type_err(self.tcx, span, found_ty, expected_ty, &err, msg);\n-            false\n-        } else {\n-            true\n-        }\n-    }\n }"}, {"sha": "8a53c59b4c7fad08dafbe1215cb6d8bf52914885", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=8eb12d91aaf95432ca73bda429af04e0710c984d", "patch": "@@ -12,6 +12,7 @@\n //! intrinsics that the compiler exposes.\n \n use intrinsics;\n+use rustc::infer::TypeOrigin;\n use rustc::ty::subst::{self, Substs};\n use rustc::ty::FnSig;\n use rustc::ty::{self, Ty};\n@@ -56,10 +57,9 @@ fn equate_intrinsic_type<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n              i_n_tps, n_tps);\n     } else {\n         require_same_types(ccx,\n-                           it.span,\n+                           TypeOrigin::IntrinsicType(it.span),\n                            i_ty.ty,\n-                           fty,\n-                           \"intrinsic has wrong type\");\n+                           fty);\n     }\n }\n "}, {"sha": "2d44a85f9af4bc7ba077d7b01f8d2e13a91cd4d1", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=8eb12d91aaf95432ca73bda429af04e0710c984d", "patch": "@@ -437,8 +437,7 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n \n         debug!(\"check_method_receiver: receiver ty = {:?}\", rcvr_ty);\n \n-        fcx.require_same_types(span, sig.inputs[0], rcvr_ty,\n-                               \"mismatched method receiver\");\n+        fcx.demand_eqtype(span, rcvr_ty, sig.inputs[0]);\n     }\n \n     fn check_variances_for_type_defn(&self,"}, {"sha": "683328f4eb4a0be992c40cbc39159d2f5b6dc9ac", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=8eb12d91aaf95432ca73bda429af04e0710c984d", "patch": "@@ -2660,6 +2660,7 @@ For information on the design of the orphan rules, see [RFC 1023].\n [RFC 1023]: https://github.com/rust-lang/rfcs/pull/1023\n \"##,\n \n+/*\n E0211: r##\"\n You used a function or type which doesn't fit the requirements for where it was\n used. Erroneous code examples:\n@@ -2739,6 +2740,7 @@ impl Foo {\n }\n ```\n \"##,\n+     */\n \n E0214: r##\"\n A generic type was described using parentheses rather than angle brackets. For"}, {"sha": "3b2d02dc861c4c62c0b8542f0b3f0da67eddbef8", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=8eb12d91aaf95432ca73bda429af04e0710c984d", "patch": "@@ -186,28 +186,14 @@ fn require_c_abi_if_variadic(tcx: TyCtxt,\n     }\n }\n \n-pub fn emit_type_err<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                     span: Span,\n-                                     found_ty: Ty<'tcx>,\n-                                     expected_ty: Ty<'tcx>,\n-                                     terr: &ty::error::TypeError<'tcx>,\n-                                     msg: &str) {\n-    let mut err = struct_span_err!(tcx.sess, span, E0211, \"{}\", msg);\n-    err.span_label(span, &terr);\n-    err.note_expected_found(&\"type\", &expected_ty, &found_ty);\n-    tcx.note_and_explain_type_err(&mut err, terr, span);\n-    err.emit();\n-}\n-\n fn require_same_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n-                                span: Span,\n+                                origin: TypeOrigin,\n                                 t1: Ty<'tcx>,\n-                                t2: Ty<'tcx>,\n-                                msg: &str)\n+                                t2: Ty<'tcx>)\n                                 -> bool {\n     ccx.tcx.infer_ctxt(None, None, ProjectionMode::AnyFinal).enter(|infcx| {\n-        if let Err(err) = infcx.eq_types(false, TypeOrigin::Misc(span), t1, t2) {\n-            emit_type_err(infcx.tcx, span, t1, t2, &err, msg);\n+        if let Err(err) = infcx.eq_types(false, origin.clone(), t1, t2) {\n+            infcx.report_mismatched_types(origin, t1, t2, err);\n             false\n         } else {\n             true\n@@ -249,8 +235,11 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n                 })\n             }));\n \n-            require_same_types(ccx, main_span, main_t, se_ty,\n-                               \"main function has wrong type\");\n+            require_same_types(\n+                ccx,\n+                TypeOrigin::MainFunctionType(main_span),\n+                main_t,\n+                se_ty);\n         }\n         _ => {\n             span_bug!(main_span,\n@@ -298,8 +287,11 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n                 }),\n             }));\n \n-            require_same_types(ccx, start_span, start_t, se_ty,\n-                               \"start function has wrong type\");\n+            require_same_types(\n+                ccx,\n+                TypeOrigin::StartFunctionType(start_span),\n+                start_t,\n+                se_ty);\n         }\n         _ => {\n             span_bug!(start_span,"}, {"sha": "1bc0a4f9652197dd65c03c84ab6776e678f30a4a", "filename": "src/test/compile-fail/issue-26194.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Ftest%2Fcompile-fail%2Fissue-26194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Ftest%2Fcompile-fail%2Fissue-26194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26194.rs?ref=8eb12d91aaf95432ca73bda429af04e0710c984d", "patch": "@@ -12,7 +12,7 @@ struct S(String);\n \n impl S {\n     fn f(self: *mut S) -> String { self.0 }\n-    //~^ ERROR mismatched method receiver\n+    //~^ ERROR mismatched types\n }\n \n fn main() { S(\"\".to_owned()).f(); }"}, {"sha": "2c4c2563021867ddbd6c305f1500b60c6971a5e4", "filename": "src/test/compile-fail/match-range-fail.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs?ref=8eb12d91aaf95432ca73bda429af04e0710c984d", "patch": "@@ -27,6 +27,7 @@ fn main() {\n         'c' ... 100 => { }\n         _ => { }\n     };\n-    //~^^^ ERROR mismatched types in range\n-    //~| expected char, found integral variable\n+    //~^^^ ERROR mismatched types\n+    //~| expected type `_`\n+    //~| found type `char`\n }"}, {"sha": "e997cf47c733373780c1d9de67ce9982526f7687", "filename": "src/test/compile-fail/ufcs-explicit-self-bad.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb12d91aaf95432ca73bda429af04e0710c984d/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs?ref=8eb12d91aaf95432ca73bda429af04e0710c984d", "patch": "@@ -15,7 +15,7 @@ struct Foo {\n }\n \n impl Foo {\n-    fn foo(self: isize, x: isize) -> isize {  //~ ERROR mismatched method receiver\n+    fn foo(self: isize, x: isize) -> isize {  //~ ERROR mismatched types\n         self.f + x\n     }\n }\n@@ -25,10 +25,10 @@ struct Bar<T> {\n }\n \n impl<T> Bar<T> {\n-    fn foo(self: Bar<isize>, x: isize) -> isize { //~ ERROR mismatched method receiver\n+    fn foo(self: Bar<isize>, x: isize) -> isize { //~ ERROR mismatched types\n         x\n     }\n-    fn bar(self: &Bar<usize>, x: isize) -> isize {   //~ ERROR mismatched method receiver\n+    fn bar(self: &Bar<usize>, x: isize) -> isize {   //~ ERROR mismatched types\n         x\n     }\n }"}]}