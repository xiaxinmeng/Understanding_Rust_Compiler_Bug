{"sha": "b3246e0cb10a6a32e8f652312985d36581f77c19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMjQ2ZTBjYjEwYTZhMzJlOGY2NTIzMTI5ODVkMzY1ODFmNzdjMTk=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-29T23:46:32Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-10-26T22:56:55Z"}, "message": "Set the proper sysroot for clippy\n\nClippy does its own runtime detection of the sysroot, which was\nincorrect in this case (it used the beta sysroot). This overrides the\nsysroot to use `stage0-sysroot` instead.\n\n- Get `x.py clippy` to work on nightly\n- Give a nice error message if nightly clippy isn't installed", "tree": {"sha": "26360f5241d09a231e85581c7f19ebf68f6aad0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26360f5241d09a231e85581c7f19ebf68f6aad0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3246e0cb10a6a32e8f652312985d36581f77c19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3246e0cb10a6a32e8f652312985d36581f77c19", "html_url": "https://github.com/rust-lang/rust/commit/b3246e0cb10a6a32e8f652312985d36581f77c19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3246e0cb10a6a32e8f652312985d36581f77c19/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da6d42f297642a60f2640ec313b879b376b9ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da6d42f297642a60f2640ec313b879b376b9ad8", "html_url": "https://github.com/rust-lang/rust/commit/0da6d42f297642a60f2640ec313b879b376b9ad8"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "c0578dea1cd5c42a8a2d1280d6e8ca977516c287", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b3246e0cb10a6a32e8f652312985d36581f77c19/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3246e0cb10a6a32e8f652312985d36581f77c19/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=b3246e0cb10a6a32e8f652312985d36581f77c19", "patch": "@@ -850,7 +850,40 @@ impl<'a> Builder<'a> {\n                 cargo.args(s.split_whitespace());\n             }\n             rustflags.env(\"RUSTFLAGS_BOOTSTRAP\");\n-            rustflags.arg(\"--cfg=bootstrap\");\n+            if cmd == \"clippy\" {\n+                // clippy overwrites any sysroot we pass on the command line.\n+                // Tell it to use the appropriate sysroot instead.\n+                // NOTE: this can't be fixed in clippy because we explicitly don't set `RUSTC`,\n+                // so it has no way of knowing the sysroot.\n+                rustflags.arg(\"--sysroot\");\n+                rustflags.arg(\n+                    self.sysroot(compiler)\n+                        .as_os_str()\n+                        .to_str()\n+                        .expect(\"sysroot must be valid UTF-8\"),\n+                );\n+                // Only run clippy on a very limited subset of crates (in particular, not build scripts).\n+                cargo.arg(\"-Zunstable-options\");\n+                // Explicitly does *not* set `--cfg=bootstrap`, since we're using a nightly clippy.\n+                let host_version = Command::new(\"rustc\").arg(\"--version\").output().map_err(|_| ());\n+                if let Err(_) = host_version.and_then(|output| {\n+                    if output.status.success()\n+                        && t!(std::str::from_utf8(&output.stdout)).contains(\"nightly\")\n+                    {\n+                        Ok(output)\n+                    } else {\n+                        Err(())\n+                    }\n+                }) {\n+                    eprintln!(\n+                        \"error: `x.py clippy` requires a nightly host `rustc` toolchain with the `clippy` component\"\n+                    );\n+                    eprintln!(\"help: try `rustup default nightly`\");\n+                    std::process::exit(1);\n+                }\n+            } else {\n+                rustflags.arg(\"--cfg=bootstrap\");\n+            }\n         }\n \n         if self.config.rust_new_symbol_mangling {\n@@ -975,7 +1008,6 @@ impl<'a> Builder<'a> {\n         // src/bootstrap/bin/{rustc.rs,rustdoc.rs}\n         cargo\n             .env(\"RUSTBUILD_NATIVE_DIR\", self.native_dir(target))\n-            .env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"))\n             .env(\"RUSTC_REAL\", self.rustc(compiler))\n             .env(\"RUSTC_STAGE\", stage.to_string())\n             .env(\"RUSTC_SYSROOT\", &sysroot)\n@@ -991,6 +1023,11 @@ impl<'a> Builder<'a> {\n             )\n             .env(\"RUSTC_ERROR_METADATA_DST\", self.extended_error_dir())\n             .env(\"RUSTC_BREAK_ON_ICE\", \"1\");\n+        // Clippy support is a hack and uses the default `cargo-clippy` in path.\n+        // Don't override RUSTC so that the `cargo-clippy` in path will be run.\n+        if cmd != \"clippy\" {\n+            cargo.env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"));\n+        }\n \n         // Dealing with rpath here is a little special, so let's go into some\n         // detail. First off, `-rpath` is a linker option on Unix platforms"}]}