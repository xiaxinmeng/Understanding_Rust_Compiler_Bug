{"sha": "79ba34c60758f02b3aded90bae3fb9983f550234", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YmEzNGM2MDc1OGYwMmIzYWRlZDkwYmFlM2ZiOTk4M2Y1NTAyMzQ=", "commit": {"author": {"name": "Seiichi Uchida", "email": "topecongiro@localhost.localdomain", "date": "2017-05-15T13:55:01Z"}, "committer": {"name": "Seiichi Uchida", "email": "topecongiro@localhost.localdomain", "date": "2017-05-15T13:55:01Z"}, "message": "Use offset_left for rewrite_unary_prefix", "tree": {"sha": "37383a9d2201bda6349d2da350ee79c9f62057a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37383a9d2201bda6349d2da350ee79c9f62057a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79ba34c60758f02b3aded90bae3fb9983f550234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79ba34c60758f02b3aded90bae3fb9983f550234", "html_url": "https://github.com/rust-lang/rust/commit/79ba34c60758f02b3aded90bae3fb9983f550234", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79ba34c60758f02b3aded90bae3fb9983f550234/comments", "author": null, "committer": null, "parents": [{"sha": "d1682b347333996d078de9e93281814cddf98751", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1682b347333996d078de9e93281814cddf98751", "html_url": "https://github.com/rust-lang/rust/commit/d1682b347333996d078de9e93281814cddf98751"}], "stats": {"total": 54, "additions": 22, "deletions": 32}, "files": [{"sha": "729a98170af354955e801e8408894565d802704c", "filename": "src/expr.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/79ba34c60758f02b3aded90bae3fb9983f550234/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ba34c60758f02b3aded90bae3fb9983f550234/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=79ba34c60758f02b3aded90bae3fb9983f550234", "patch": "@@ -156,11 +156,7 @@ fn format_expr(expr: &ast::Expr,\n             };\n \n             if let Some(ref expr) = *opt_expr {\n-                rewrite_unary_prefix(context,\n-                                     &format!(\"break{} \", id_str),\n-                                     &**expr,\n-                                     shape,\n-                                     expr.span)\n+                rewrite_unary_prefix(context, &format!(\"break{} \", id_str), &**expr, shape)\n             } else {\n                 wrap_str(format!(\"break{}\", id_str), context.config.max_width, shape)\n             }\n@@ -180,11 +176,9 @@ fn format_expr(expr: &ast::Expr,\n         }\n         ast::ExprKind::Ret(None) => wrap_str(\"return\".to_owned(), context.config.max_width, shape),\n         ast::ExprKind::Ret(Some(ref expr)) => {\n-            rewrite_unary_prefix(context, \"return \", &**expr, shape, expr.span)\n-        }\n-        ast::ExprKind::Box(ref expr) => {\n-            rewrite_unary_prefix(context, \"box \", &**expr, shape, expr.span)\n+            rewrite_unary_prefix(context, \"return \", &**expr, shape)\n         }\n+        ast::ExprKind::Box(ref expr) => rewrite_unary_prefix(context, \"box \", &**expr, shape),\n         ast::ExprKind::AddrOf(mutability, ref expr) => {\n             rewrite_expr_addrof(context, mutability, expr, shape)\n         }\n@@ -226,7 +220,7 @@ fn format_expr(expr: &ast::Expr,\n                     } else {\n                         delim.into()\n                     };\n-                    rewrite_unary_prefix(context, &sp_delim, &**rhs, shape, expr.span)\n+                    rewrite_unary_prefix(context, &sp_delim, &**rhs, shape)\n                 }\n                 (Some(ref lhs), None) => {\n                     let sp_delim = if context.config.spaces_around_ranges {\n@@ -1999,24 +1993,10 @@ pub fn rewrite_tuple<'a, I>(context: &RewriteContext,\n pub fn rewrite_unary_prefix<R: Rewrite>(context: &RewriteContext,\n                                         prefix: &str,\n                                         rewrite: &R,\n-                                        mut shape: Shape,\n-                                        span: Span)\n+                                        shape: Shape)\n                                         -> Option<String> {\n-    // Heuristic: if unary is `&` and `rewrite` contains `{`,\n-    // it is likely that block indent is preferred to visual indent.\n-    if prefix == \"&\" {\n-        let snippet = String::from(context.snippet(span).trim_left_matches('&'));\n-        let first_line = try_opt!(snippet.lines().nth(0));\n-        if first_line.contains(\"{\") {\n-            shape = try_opt!(shape.sub_width(prefix.len())).block_indent(0);\n-        } else {\n-            shape = try_opt!(shape.shrink_left(prefix.len())).visual_indent(0);\n-        }\n-    } else {\n-        shape = try_opt!(shape.shrink_left(prefix.len())).visual_indent(0);\n-    }\n     rewrite\n-        .rewrite(context, shape)\n+        .rewrite(context, try_opt!(shape.offset_left(prefix.len())))\n         .map(|r| format!(\"{}{}\", prefix, r))\n }\n \n@@ -2046,7 +2026,7 @@ fn rewrite_unary_op(context: &RewriteContext,\n         ast::UnOp::Not => \"!\",\n         ast::UnOp::Neg => \"-\",\n     };\n-    rewrite_unary_prefix(context, operator_str, expr, shape, expr.span)\n+    rewrite_unary_prefix(context, operator_str, expr, shape)\n }\n \n fn rewrite_assignment(context: &RewriteContext,\n@@ -2143,5 +2123,5 @@ fn rewrite_expr_addrof(context: &RewriteContext,\n         ast::Mutability::Immutable => \"&\",\n         ast::Mutability::Mutable => \"&mut \",\n     };\n-    rewrite_unary_prefix(context, operator_str, expr, shape, expr.span)\n+    rewrite_unary_prefix(context, operator_str, expr, shape)\n }"}, {"sha": "75175cc766722b2cb652562655380f8aba80e167", "filename": "src/patterns.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79ba34c60758f02b3aded90bae3fb9983f550234/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ba34c60758f02b3aded90bae3fb9983f550234/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=79ba34c60758f02b3aded90bae3fb9983f550234", "patch": "@@ -28,9 +28,7 @@ use syntax::codemap::{self, BytePos, Span};\n impl Rewrite for Pat {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         match self.node {\n-            PatKind::Box(ref pat) => {\n-                rewrite_unary_prefix(context, \"box \", &**pat, shape, self.span)\n-            }\n+            PatKind::Box(ref pat) => rewrite_unary_prefix(context, \"box \", &**pat, shape),\n             PatKind::Ident(binding_mode, ident, ref sub_pat) => {\n                 let (prefix, mutability) = match binding_mode {\n                     BindingMode::ByRef(mutability) => (\"ref \", mutability),\n@@ -74,7 +72,7 @@ impl Rewrite for Pat {\n             }\n             PatKind::Ref(ref pat, mutability) => {\n                 let prefix = format!(\"&{}\", format_mutability(mutability));\n-                rewrite_unary_prefix(context, &prefix, &**pat, shape, self.span)\n+                rewrite_unary_prefix(context, &prefix, &**pat, shape)\n             }\n             PatKind::Tuple(ref items, dotdot_pos) => {\n                 rewrite_tuple_pat(items, dotdot_pos, None, self.span, context, shape)"}, {"sha": "3eee8c543ba709fa0294601e620d13e7c2508d13", "filename": "tests/source/macros.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79ba34c60758f02b3aded90bae3fb9983f550234/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ba34c60758f02b3aded90bae3fb9983f550234/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=79ba34c60758f02b3aded90bae3fb9983f550234", "patch": "@@ -79,3 +79,9 @@ gfx_pipeline!(pipe {\n fn issue_1279() {\n     println!(\"dsfs\"); // a comment\n }\n+\n+fn issue_1555() {\n+    let hello = &format!(\"HTTP/1.1 200 OK\\r\\nServer: {}\\r\\n\\r\\n{}\",\n+                         \"65454654654654654654654655464\",\n+                         \"4\");\n+}"}, {"sha": "1fd8130f824b30e333134871b74900e1bbee9022", "filename": "tests/target/macros.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79ba34c60758f02b3aded90bae3fb9983f550234/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ba34c60758f02b3aded90bae3fb9983f550234/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=79ba34c60758f02b3aded90bae3fb9983f550234", "patch": "@@ -80,3 +80,9 @@ gfx_pipeline!(pipe {\n fn issue_1279() {\n     println!(\"dsfs\"); // a comment\n }\n+\n+fn issue_1555() {\n+    let hello = &format!(\"HTTP/1.1 200 OK\\r\\nServer: {}\\r\\n\\r\\n{}\",\n+                         \"65454654654654654654654655464\",\n+                         \"4\");\n+}"}]}