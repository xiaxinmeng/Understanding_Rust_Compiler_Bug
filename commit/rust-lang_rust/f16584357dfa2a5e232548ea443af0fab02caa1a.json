{"sha": "f16584357dfa2a5e232548ea443af0fab02caa1a", "node_id": "C_kwDOAAsO6NoAKGYxNjU4NDM1N2RmYTJhNWUyMzI1NDhlYTQ0M2FmMGZhYjAyY2FhMWE", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-07-02T22:27:49Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-07-08T02:09:16Z"}, "message": "Move EarlyBinder calls in rustc_typeck::outlives a bit further up", "tree": {"sha": "16d602fe24f1891ce1968b31bc71b3c5ca42fdef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16d602fe24f1891ce1968b31bc71b3c5ca42fdef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f16584357dfa2a5e232548ea443af0fab02caa1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f16584357dfa2a5e232548ea443af0fab02caa1a", "html_url": "https://github.com/rust-lang/rust/commit/f16584357dfa2a5e232548ea443af0fab02caa1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f16584357dfa2a5e232548ea443af0fab02caa1a/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1517f5de01c445b5124b30f02257b02b4c5ef3b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1517f5de01c445b5124b30f02257b02b4c5ef3b2", "html_url": "https://github.com/rust-lang/rust/commit/1517f5de01c445b5124b30f02257b02b4c5ef3b2"}], "stats": {"total": 62, "additions": 35, "deletions": 27}, "files": [{"sha": "e32e4c4f26efaac176e8e862807f299dc9b0c73f", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f16584357dfa2a5e232548ea443af0fab02caa1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16584357dfa2a5e232548ea443af0fab02caa1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=f16584357dfa2a5e232548ea443af0fab02caa1a", "patch": "@@ -932,6 +932,10 @@ impl<T> EarlyBinder<T> {\n         let value = f(self.0)?;\n         Ok(EarlyBinder(value))\n     }\n+\n+    pub fn rebind<U>(&self, value: U) -> EarlyBinder<U> {\n+        EarlyBinder(value)\n+    }\n }\n \n impl<T> EarlyBinder<Option<T>> {"}, {"sha": "7534482cce9bba7f3deccbe62887ac6e42554efa", "filename": "compiler/rustc_typeck/src/outlives/explicit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f16584357dfa2a5e232548ea443af0fab02caa1a/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16584357dfa2a5e232548ea443af0fab02caa1a/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs?ref=f16584357dfa2a5e232548ea443af0fab02caa1a", "patch": "@@ -6,19 +6,19 @@ use super::utils::*;\n \n #[derive(Debug)]\n pub struct ExplicitPredicatesMap<'tcx> {\n-    map: FxHashMap<DefId, RequiredPredicates<'tcx>>,\n+    map: FxHashMap<DefId, ty::EarlyBinder<RequiredPredicates<'tcx>>>,\n }\n \n impl<'tcx> ExplicitPredicatesMap<'tcx> {\n     pub fn new() -> ExplicitPredicatesMap<'tcx> {\n         ExplicitPredicatesMap { map: FxHashMap::default() }\n     }\n \n-    pub fn explicit_predicates_of(\n+    pub(crate) fn explicit_predicates_of(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n         def_id: DefId,\n-    ) -> &RequiredPredicates<'tcx> {\n+    ) -> &ty::EarlyBinder<RequiredPredicates<'tcx>> {\n         self.map.entry(def_id).or_insert_with(|| {\n             let predicates = if def_id.is_local() {\n                 tcx.explicit_predicates_of(def_id)\n@@ -63,7 +63,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                 }\n             }\n \n-            required_predicates\n+            ty::EarlyBinder(required_predicates)\n         })\n     }\n }"}, {"sha": "257a9520eeb25f87fc269e8197fd32096430ba08", "filename": "compiler/rustc_typeck/src/outlives/implicit_infer.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f16584357dfa2a5e232548ea443af0fab02caa1a/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16584357dfa2a5e232548ea443af0fab02caa1a/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=f16584357dfa2a5e232548ea443af0fab02caa1a", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n-use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;\n \n use super::explicit::ExplicitPredicatesMap;\n@@ -13,20 +13,19 @@ use super::utils::*;\n /// `global_inferred_outlives`: this is initially the empty map that\n ///     was generated by walking the items in the crate. This will\n ///     now be filled with inferred predicates.\n-pub fn infer_predicates<'tcx>(\n+pub(super) fn infer_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    explicit_map: &mut ExplicitPredicatesMap<'tcx>,\n-) -> FxHashMap<DefId, RequiredPredicates<'tcx>> {\n+) -> FxHashMap<DefId, ty::EarlyBinder<RequiredPredicates<'tcx>>> {\n     debug!(\"infer_predicates\");\n \n-    let mut predicates_added = true;\n+    let mut explicit_map = ExplicitPredicatesMap::new();\n \n     let mut global_inferred_outlives = FxHashMap::default();\n \n     // If new predicates were added then we need to re-calculate\n     // all crates since there could be new implied predicates.\n-    while predicates_added {\n-        predicates_added = false;\n+    'outer: loop {\n+        let mut predicates_added = false;\n \n         // Visit all the crates and infer predicates\n         for id in tcx.hir().items() {\n@@ -53,9 +52,9 @@ pub fn infer_predicates<'tcx>(\n                             tcx,\n                             field_ty,\n                             field_span,\n-                            &mut global_inferred_outlives,\n+                            &global_inferred_outlives,\n                             &mut item_required_predicates,\n-                            explicit_map,\n+                            &mut explicit_map,\n                         );\n                     }\n                 }\n@@ -70,12 +69,17 @@ pub fn infer_predicates<'tcx>(\n             // we walk the crates again and re-calculate predicates for all\n             // items.\n             let item_predicates_len: usize =\n-                global_inferred_outlives.get(&item_did.to_def_id()).map_or(0, |p| p.len());\n+                global_inferred_outlives.get(&item_did.to_def_id()).map_or(0, |p| p.0.len());\n             if item_required_predicates.len() > item_predicates_len {\n                 predicates_added = true;\n-                global_inferred_outlives.insert(item_did.to_def_id(), item_required_predicates);\n+                global_inferred_outlives\n+                    .insert(item_did.to_def_id(), ty::EarlyBinder(item_required_predicates));\n             }\n         }\n+\n+        if !predicates_added {\n+            break 'outer;\n+        }\n     }\n \n     global_inferred_outlives\n@@ -85,7 +89,7 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     field_ty: Ty<'tcx>,\n     field_span: Span,\n-    global_inferred_outlives: &FxHashMap<DefId, RequiredPredicates<'tcx>>,\n+    global_inferred_outlives: &FxHashMap<DefId, ty::EarlyBinder<RequiredPredicates<'tcx>>>,\n     required_predicates: &mut RequiredPredicates<'tcx>,\n     explicit_map: &mut ExplicitPredicatesMap<'tcx>,\n ) {\n@@ -133,11 +137,13 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n                 // 'a` holds for `Foo`.\n                 debug!(\"Adt\");\n                 if let Some(unsubstituted_predicates) = global_inferred_outlives.get(&def.did()) {\n-                    for (unsubstituted_predicate, &span) in unsubstituted_predicates {\n+                    for (unsubstituted_predicate, &span) in &unsubstituted_predicates.0 {\n                         // `unsubstituted_predicate` is `U: 'b` in the\n                         // example above.  So apply the substitution to\n                         // get `T: 'a` (or `predicate`):\n-                        let predicate = EarlyBinder(*unsubstituted_predicate).subst(tcx, substs);\n+                        let predicate = unsubstituted_predicates\n+                            .rebind(*unsubstituted_predicate)\n+                            .subst(tcx, substs);\n                         insert_outlives_predicate(\n                             tcx,\n                             predicate.0,\n@@ -224,7 +230,7 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n /// will give us `U: 'static` and `U: Foo`. The latter we\n /// can ignore, but we will want to process `U: 'static`,\n /// applying the substitution as above.\n-pub fn check_explicit_predicates<'tcx>(\n+fn check_explicit_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     substs: &[GenericArg<'tcx>],\n@@ -242,7 +248,7 @@ pub fn check_explicit_predicates<'tcx>(\n     );\n     let explicit_predicates = explicit_map.explicit_predicates_of(tcx, def_id);\n \n-    for (outlives_predicate, &span) in explicit_predicates {\n+    for (outlives_predicate, &span) in &explicit_predicates.0 {\n         debug!(\"outlives_predicate = {:?}\", &outlives_predicate);\n \n         // Careful: If we are inferring the effects of a `dyn Trait<..>`\n@@ -287,7 +293,7 @@ pub fn check_explicit_predicates<'tcx>(\n             continue;\n         }\n \n-        let predicate = EarlyBinder(*outlives_predicate).subst(tcx, substs);\n+        let predicate = explicit_predicates.rebind(*outlives_predicate).subst(tcx, substs);\n         debug!(\"predicate = {:?}\", &predicate);\n         insert_outlives_predicate(tcx, predicate.0, predicate.1, span, required_predicates);\n     }"}, {"sha": "8fa65d51e3ba16cad63b955716d377928eb33da7", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f16584357dfa2a5e232548ea443af0fab02caa1a/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16584357dfa2a5e232548ea443af0fab02caa1a/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=f16584357dfa2a5e232548ea443af0fab02caa1a", "patch": "@@ -88,9 +88,7 @@ fn inferred_outlives_crate(tcx: TyCtxt<'_>, (): ()) -> CratePredicatesMap<'_> {\n     // for the type.\n \n     // Compute the inferred predicates\n-    let mut exp_map = explicit::ExplicitPredicatesMap::new();\n-\n-    let global_inferred_outlives = implicit_infer::infer_predicates(tcx, &mut exp_map);\n+    let global_inferred_outlives = implicit_infer::infer_predicates(tcx);\n \n     // Convert the inferred predicates into the \"collected\" form the\n     // global data structure expects.\n@@ -100,7 +98,7 @@ fn inferred_outlives_crate(tcx: TyCtxt<'_>, (): ()) -> CratePredicatesMap<'_> {\n     let predicates = global_inferred_outlives\n         .iter()\n         .map(|(&def_id, set)| {\n-            let predicates = &*tcx.arena.alloc_from_iter(set.iter().filter_map(\n+            let predicates = &*tcx.arena.alloc_from_iter(set.0.iter().filter_map(\n                 |(ty::OutlivesPredicate(kind1, region2), &span)| {\n                     match kind1.unpack() {\n                         GenericArgKind::Type(ty1) => Some(("}, {"sha": "b718ca942133674130857776d1bab4c34b215f12", "filename": "compiler/rustc_typeck/src/outlives/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f16584357dfa2a5e232548ea443af0fab02caa1a/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16584357dfa2a5e232548ea443af0fab02caa1a/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs?ref=f16584357dfa2a5e232548ea443af0fab02caa1a", "patch": "@@ -7,12 +7,12 @@ use std::collections::BTreeMap;\n \n /// Tracks the `T: 'a` or `'a: 'a` predicates that we have inferred\n /// must be added to the struct header.\n-pub type RequiredPredicates<'tcx> =\n+pub(crate) type RequiredPredicates<'tcx> =\n     BTreeMap<ty::OutlivesPredicate<GenericArg<'tcx>, ty::Region<'tcx>>, Span>;\n \n /// Given a requirement `T: 'a` or `'b: 'a`, deduce the\n /// outlives_component and add it to `required_predicates`\n-pub fn insert_outlives_predicate<'tcx>(\n+pub(crate) fn insert_outlives_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     kind: GenericArg<'tcx>,\n     outlived_region: Region<'tcx>,"}]}