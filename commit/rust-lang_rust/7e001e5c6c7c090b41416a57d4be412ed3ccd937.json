{"sha": "7e001e5c6c7c090b41416a57d4be412ed3ccd937", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMDAxZTVjNmM3YzA5MGI0MTQxNmE1N2Q0YmU0MTJlZDNjY2Q5Mzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-27T15:54:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-27T15:54:48Z"}, "message": "Auto merge of #58777 - Centril:rollup, r=Centril\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #58075 (Fix for issue  #58050)\n - #58627 (rustdoc: move collapse and unindent docs passes earlier)\n - #58630 (Make `visit_clobber` panic-safe.)\n - #58678 (Deny `async fn` in 2015 edition)\n - #58680 (Fix an indexing error when using `x.py help`)\n - #58703 (Fix copy-pasted typo for read_string return value)\n - #58744 (Update dlmalloc to 0.1.3)\n - #58746 (std: docs: Disable running several Stdio doctests)\n - #58748 (update scoped_tls to 1.0)\n - #58749 (Reduce Repetitions of (n << amt) >> amt)\n - #58752 (Update string_cache_codegen to 0.4.2)\n - #58755 (Clarify `rotate_{left,right}` docs)\n - #58757 (Normalize the type Self resolves to in an impl)\n - #58761 (Add tracking issue for the unwind attribute)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "ce855b209ccee43fab95888a7778c0414611da2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce855b209ccee43fab95888a7778c0414611da2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e001e5c6c7c090b41416a57d4be412ed3ccd937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e001e5c6c7c090b41416a57d4be412ed3ccd937", "html_url": "https://github.com/rust-lang/rust/commit/7e001e5c6c7c090b41416a57d4be412ed3ccd937", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e001e5c6c7c090b41416a57d4be412ed3ccd937/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "485537074062d6310178101b198606573527723c", "url": "https://api.github.com/repos/rust-lang/rust/commits/485537074062d6310178101b198606573527723c", "html_url": "https://github.com/rust-lang/rust/commit/485537074062d6310178101b198606573527723c"}, {"sha": "1394b6f3a1e607e3651f90e929ccd357c9f8bf80", "url": "https://api.github.com/repos/rust-lang/rust/commits/1394b6f3a1e607e3651f90e929ccd357c9f8bf80", "html_url": "https://github.com/rust-lang/rust/commit/1394b6f3a1e607e3651f90e929ccd357c9f8bf80"}], "stats": {"total": 692, "additions": 409, "deletions": 283}, "files": [{"sha": "6773734c5746e8be32d592146cce3783965d47d4", "filename": "Cargo.lock", "status": "modified", "additions": 22, "deletions": 34, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -744,7 +744,7 @@ dependencies = [\n \n [[package]]\n name = \"dlmalloc\"\n-version = \"0.1.2\"\n+version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1399,7 +1399,7 @@ dependencies = [\n  \"serde_derive 1.0.81 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"string_cache 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"string_cache_codegen 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"string_cache_codegen 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tendril 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1936,14 +1936,6 @@ dependencies = [\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"proc-macro2\"\n-version = \"0.3.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"proc-macro2\"\n version = \"0.4.24\"\n@@ -2015,14 +2007,6 @@ name = \"quote\"\n version = \"0.3.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"quote\"\n-version = \"0.5.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"proc-macro2 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"quote\"\n version = \"0.6.10\"\n@@ -2092,7 +2076,7 @@ name = \"rand_chacha\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2114,7 +2098,7 @@ name = \"rand_hc\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2139,7 +2123,7 @@ name = \"rand_xorshift\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2381,7 +2365,7 @@ dependencies = [\n  \"rustc_errors 0.0.0\",\n  \"rustc_fs_util 0.0.0\",\n  \"rustc_target 0.0.0\",\n- \"scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n  \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n@@ -2726,7 +2710,7 @@ dependencies = [\n  \"rustc_target 0.0.0\",\n  \"rustc_traits 0.0.0\",\n  \"rustc_typeck 0.0.0\",\n- \"scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n  \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n@@ -3090,6 +3074,11 @@ name = \"scoped-tls\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"scoped-tls\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"scoped_threadpool\"\n version = \"0.1.9\"\n@@ -3230,7 +3219,7 @@ dependencies = [\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n- \"dlmalloc 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dlmalloc 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fortanix-sgx-abi 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"panic_abort 0.0.0\",\n@@ -3255,19 +3244,19 @@ dependencies = [\n  \"phf_shared 0.7.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"precomputed-hash 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.82 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"string_cache_codegen 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"string_cache_codegen 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"string_cache_shared 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"string_cache_codegen\"\n-version = \"0.4.1\"\n+version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"phf_generator 0.7.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"phf_shared 0.7.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"proc-macro2 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"string_cache_shared 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -3345,7 +3334,7 @@ dependencies = [\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_target 0.0.0\",\n- \"scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n  \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax_pos 0.0.0\",\n@@ -3372,7 +3361,7 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_data_structures 0.0.0\",\n- \"scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -4000,7 +3989,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum digest 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"03b072242a8cbaf9c145665af9d250c59af3b958f83ed6824e13533cf76d5b90\"\n \"checksum directories 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72d337a64190607d4fcca2cb78982c5dd57f4916e19696b48a575fa746b6cb0f\"\n \"checksum dirs 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88972de891f6118092b643d85a0b28e0678e0f948d7f879aa32f2d5aafe97d2a\"\n-\"checksum dlmalloc 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d56ad71b31043818d0ee10a7fb9664882f8e45849c81647585e6a3124f185517\"\n+\"checksum dlmalloc 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f283302e035e61c23f2b86b3093e8c6273a4c3125742d6087e96ade001ca5e63\"\n \"checksum either 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3be565ca5c557d7f59e7cfcf1844f9e3033650c929c6566f511e8005f205c1d0\"\n \"checksum elasticlunr-rs 2.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a99a310cd1f9770e7bf8e48810c7bcbb0e078c8fb23a8c7bcf0da4c2bf61a455\"\n \"checksum ena 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f56c93cc076508c549d9bb747f79aa9b4eb098be7b8cad8830c3137ef52d1e00\"\n@@ -4124,15 +4113,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum precomputed-hash 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c\"\n \"checksum pretty_assertions 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a029430f0d744bc3d15dd474d591bed2402b645d024583082b9f63bb936dac6\"\n \"checksum pretty_env_logger 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df8b3f4e0475def7d9c2e5de8e5a1306949849761e107b360d03e98eafaffd61\"\n-\"checksum proc-macro2 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1b06e2f335f48d24442b35a19df506a835fb3547bc3c06ef27340da9acf5cae7\"\n \"checksum proc-macro2 0.4.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"77619697826f31a02ae974457af0b29b723e5619e113e9397b8b82c6bd253f09\"\n \"checksum proptest 0.8.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"926d0604475349f463fe44130aae73f2294b5309ab2ca0310b998bd334ef191f\"\n \"checksum pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6fdf85cda6cadfae5428a54661d431330b312bc767ddbc57adbedc24da66e32\"\n \"checksum pulldown-cmark 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eef52fac62d0ea7b9b4dc7da092aa64ea7ec3d90af6679422d3d7e0e14b6ee15\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n \"checksum quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07589615d719a60c8dd8a4622e7946465dfef20d1a428f969e3443e7386d5f45\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n-\"checksum quote 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9949cfe66888ffe1d53e6ec9d9f3b70714083854be20fd5e271b232a017401e8\"\n \"checksum quote 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"53fa22a1994bd0f9372d7a816207d8a2677ad0325b073f5c5332760f0fb62b5c\"\n \"checksum racer 2.1.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d634483bed41bb116122b84ffe0ef8740345c2ceb2784ce86c33499700eb13a7\"\n \"checksum rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8356f47b32624fef5b3301c1be97e5944ecdd595409cc5da11d05f211db6cfbd\"\n@@ -4183,6 +4170,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum same-file 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8f20c4be53a8a1ff4c1f1b2bd14570d2f634628709752f0702ecdd2b3f9a5267\"\n \"checksum schannel 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e1a231dc10abf6749cfa5d7767f25888d484201accbd919b66ab5413c502d56\"\n \"checksum scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"332ffa32bf586782a3efaeb58f127980944bbc8c4d6913a86107ac2a5ab24b28\"\n+\"checksum scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea6a9290e3c9cf0f18145ef7ffa62d68ee0bf5fcd651017e586dc7fd5da448c2\"\n \"checksum scoped_threadpool 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d51f5df5af43ab3f1360b429fa5e0152ac5ce8c0bd6485cae490332e96846a8\"\n \"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n@@ -4201,7 +4189,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum socket2 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c4d11a52082057d87cb5caa31ad812f4504b97ab44732cd8359df2e9ff9f48e7\"\n \"checksum stable_deref_trait 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffbc596e092fe5f598b12ef46cc03754085ac2f4d8c739ad61c4ae266cc3b3fa\"\n \"checksum string_cache 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25d70109977172b127fe834e5449e5ab1740b9ba49fa18a2020f509174f25423\"\n-\"checksum string_cache_codegen 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"35293b05cf1494e8ddd042a7df6756bf18d07f42d234f32e71dce8a7aabb0191\"\n+\"checksum string_cache_codegen 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1eea1eee654ef80933142157fdad9dd8bc43cf7c74e999e369263496f04ff4da\"\n \"checksum string_cache_shared 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b1884d1bc09741d466d9b14e6d37ac89d6909cbcac41dd9ae982d4d063bbedfc\"\n \"checksum strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb4f380125926a99e52bc279241539c018323fab05ad6368b56f93d9369ff550\"\n \"checksum strum 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6c3a2071519ab6a48f465808c4c1ffdd00dfc8e93111d02b4fc5abab177676e\""}, {"sha": "c98d8b8ecf4370b12412f1ebcd96ab571dad3cae", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -830,7 +830,7 @@ def main():\n \n     # x.py help <cmd> ...\n     if len(sys.argv) > 1 and sys.argv[1] == 'help':\n-        sys.argv = sys.argv[:1] + [sys.argv[2], '-h'] + sys.argv[3:]\n+        sys.argv = [sys.argv[0], '-h'] + sys.argv[2:]\n \n     help_triggered = (\n         '-h' in sys.argv) or ('--help' in sys.argv) or (len(sys.argv) == 1)"}, {"sha": "6708a195f88c53fdeaa508ff63d0607c7ce0de59", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -346,7 +346,7 @@ $EndFeature, \"\n             concat!(\"Shifts the bits to the left by a specified amount, `n`,\n wrapping the truncated bits to the end of the resulting integer.\n \n-Please note this isn't the same operation as `<<`!\n+Please note this isn't the same operation as the `<<` shifting operator!\n \n # Examples\n \n@@ -370,7 +370,7 @@ assert_eq!(n.rotate_left(\", $rot, \"), m);\n wrapping the truncated bits to the beginning of the resulting\n integer.\n \n-Please note this isn't the same operation as `>>`!\n+Please note this isn't the same operation as the `>>` shifting operator!\n \n # Examples\n \n@@ -2300,7 +2300,7 @@ assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n             concat!(\"Shifts the bits to the left by a specified amount, `n`,\n wrapping the truncated bits to the end of the resulting integer.\n \n-Please note this isn't the same operation as `<<`!\n+Please note this isn't the same operation as the `<<` shifting operator!\n \n # Examples\n \n@@ -2324,7 +2324,7 @@ assert_eq!(n.rotate_left(\", $rot, \"), m);\n wrapping the truncated bits to the beginning of the resulting\n integer.\n \n-Please note this isn't the same operation as `>>`!\n+Please note this isn't the same operation as the `>>` shifting operator!\n \n # Examples\n "}, {"sha": "9cd5108ade411ebc7f97838a0538bce608a51f07", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -429,7 +429,8 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// wrapping the truncated bits to the end of the resulting\n             /// integer.\n             ///\n-            /// Please note this isn't the same operation as `>>`!\n+            /// Please note this isn't the same operation as the `>>` shifting\n+            /// operator!\n             ///\n             /// # Examples\n             ///\n@@ -454,7 +455,8 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// wrapping the truncated bits to the beginning of the resulting\n             /// integer.\n             ///\n-            /// Please note this isn't the same operation as `<<`!\n+            /// Please note this isn't the same operation as the `<<` shifting\n+            /// operator!\n             ///\n             /// # Examples\n             ///"}, {"sha": "e3557132a1252b770742a619efa1d930869d94ad", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -17,7 +17,7 @@ graphviz = { path = \"../libgraphviz\" }\n jobserver = \"0.1\"\n lazy_static = \"1.0.0\"\n num_cpus = \"1.0\"\n-scoped-tls = { version = \"0.1.1\", features = [\"nightly\"] }\n+scoped-tls = \"1.0\"\n log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n polonius-engine = \"0.6.2\"\n rustc-rayon = \"0.1.1\""}, {"sha": "df45a085944d66436ff5934fad75bcf69e8c8879", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -2892,7 +2892,7 @@ impl<'a> LoweringContext<'a> {\n                     // `impl Future<Output = T>` here because lower_body\n                     // only cares about the input argument patterns in the function\n                     // declaration (decl), not the return types.\n-                    let body_id = this.lower_async_body(decl, header.asyncness, body);\n+                    let body_id = this.lower_async_body(decl, header.asyncness.node, body);\n \n                     let (generics, fn_decl) = this.add_in_band_defs(\n                         generics,\n@@ -2902,7 +2902,7 @@ impl<'a> LoweringContext<'a> {\n                             decl,\n                             Some((fn_def_id, idty)),\n                             true,\n-                            header.asyncness.opt_return_id()\n+                            header.asyncness.node.opt_return_id()\n                         ),\n                     );\n \n@@ -3398,14 +3398,14 @@ impl<'a> LoweringContext<'a> {\n                 )\n             }\n             ImplItemKind::Method(ref sig, ref body) => {\n-                let body_id = self.lower_async_body(&sig.decl, sig.header.asyncness, body);\n+                let body_id = self.lower_async_body(&sig.decl, sig.header.asyncness.node, body);\n                 let impl_trait_return_allow = !self.is_in_trait_impl;\n                 let (generics, sig) = self.lower_method_sig(\n                     &i.generics,\n                     sig,\n                     impl_item_def_id,\n                     impl_trait_return_allow,\n-                    sig.header.asyncness.opt_return_id(),\n+                    sig.header.asyncness.node.opt_return_id(),\n                 );\n                 (generics, hir::ImplItemKind::Method(sig, body_id))\n             }\n@@ -3624,7 +3624,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_fn_header(&mut self, h: FnHeader) -> hir::FnHeader {\n         hir::FnHeader {\n             unsafety: self.lower_unsafety(h.unsafety),\n-            asyncness: self.lower_asyncness(h.asyncness),\n+            asyncness: self.lower_asyncness(h.asyncness.node),\n             constness: self.lower_constness(h.constness),\n             abi: h.abi,\n         }"}, {"sha": "12760f8b9828b2372c40c6335d1a422bfa64775f", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -73,7 +73,7 @@ impl<'a> DefCollector<'a> {\n         decl: &'a FnDecl,\n         body: &'a Block,\n     ) {\n-        let (closure_id, return_impl_trait_id) = match header.asyncness {\n+        let (closure_id, return_impl_trait_id) = match header.asyncness.node {\n             IsAsync::Async {\n                 closure_id,\n                 return_impl_trait_id,\n@@ -129,10 +129,10 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             }\n             ItemKind::Fn(\n                 ref decl,\n-                ref header @ FnHeader { asyncness: IsAsync::Async { .. }, .. },\n+                ref header,\n                 ref generics,\n                 ref body,\n-            ) => {\n+            ) if header.asyncness.node.is_async() => {\n                 return self.visit_async_fn(\n                     i.id,\n                     i.ident.name,\n@@ -242,9 +242,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n         let def_data = match ii.node {\n             ImplItemKind::Method(MethodSig {\n-                header: ref header @ FnHeader { asyncness: IsAsync::Async { .. }, .. },\n+                ref header,\n                 ref decl,\n-            }, ref body) => {\n+            }, ref body) if header.asyncness.node.is_async() => {\n                 return self.visit_async_fn(\n                     ii.id,\n                     ii.ident.name,"}, {"sha": "4ad3ffaa93da4f41685391e2cd138b519e2a9549", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -4,6 +4,7 @@ use crate::hir::def::Def;\n use crate::hir::def_id::DefId;\n use crate::hir::map::DefPathData;\n use crate::hir::{self, Node};\n+use crate::mir::interpret::{sign_extend, truncate};\n use crate::ich::NodeIdHashingMode;\n use crate::traits::{self, ObligationCause};\n use crate::ty::{self, Ty, TyCtxt, GenericParamDefKind, TypeFoldable};\n@@ -32,12 +33,12 @@ impl<'tcx> fmt::Display for Discr<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.ty.sty {\n             ty::Int(ity) => {\n-                let bits = ty::tls::with(|tcx| {\n-                    Integer::from_attr(&tcx, SignedInt(ity)).size().bits()\n+                let size = ty::tls::with(|tcx| {\n+                    Integer::from_attr(&tcx, SignedInt(ity)).size()\n                 });\n-                let x = self.val as i128;\n+                let x = self.val;\n                 // sign extend the raw representation to be an i128\n-                let x = (x << (128 - bits)) >> (128 - bits);\n+                let x = sign_extend(x, size) as i128;\n                 write!(fmt, \"{}\", x)\n             },\n             _ => write!(fmt, \"{}\", self.val),\n@@ -57,12 +58,12 @@ impl<'tcx> Discr<'tcx> {\n             _ => bug!(\"non integer discriminant\"),\n         };\n \n+        let size = int.size();\n         let bit_size = int.size().bits();\n         let shift = 128 - bit_size;\n         if signed {\n             let sext = |u| {\n-                let i = u as i128;\n-                (i << shift) >> shift\n+                sign_extend(u, size) as i128\n             };\n             let min = sext(1_u128 << (bit_size - 1));\n             let max = i128::max_value() >> shift;\n@@ -77,7 +78,7 @@ impl<'tcx> Discr<'tcx> {\n             };\n             // zero the upper bits\n             let val = val as u128;\n-            let val = (val << shift) >> shift;\n+            let val = truncate(val, size);\n             (Self {\n                 val: val as u128,\n                 ty: self.ty,"}, {"sha": "2e6e775c52610c7bf4af19502397a6dcfafb4172", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -14,7 +14,7 @@ graphviz = { path = \"../libgraphviz\" }\n log = \"0.4\"\n env_logger = { version = \"0.5\", default-features = false }\n rustc-rayon = \"0.1.1\"\n-scoped-tls = { version = \"0.1.1\", features = [\"nightly\"] }\n+scoped-tls = \"1.0\"\n rustc = { path = \"../librustc\" }\n rustc_allocator = { path = \"../librustc_allocator\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "f96fc3b897f80bc4e85d40d225f737ae1dd77885", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -463,7 +463,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.invalid_visibility(&impl_item.vis, None);\n                     if let ImplItemKind::Method(ref sig, _) = impl_item.node {\n                         self.check_trait_fn_not_const(sig.header.constness);\n-                        self.check_trait_fn_not_async(impl_item.span, sig.header.asyncness);\n+                        self.check_trait_fn_not_async(impl_item.span, sig.header.asyncness.node);\n                     }\n                 }\n             }\n@@ -482,9 +482,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .note(\"only trait implementations may be annotated with default\").emit();\n                 }\n             }\n-            ItemKind::Fn(_, header, ref generics, _) => {\n+            ItemKind::Fn(_, ref header, ref generics, _) => {\n                 // We currently do not permit const generics in `const fn`, as\n                 // this is tantamount to allowing compile-time dependent typing.\n+                self.visit_fn_header(header);\n                 if header.constness.node == Constness::Const {\n                     // Look for const generics and error if we find any.\n                     for param in &generics.params {\n@@ -535,7 +536,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);\n                 for trait_item in trait_items {\n                     if let TraitItemKind::Method(ref sig, ref block) = trait_item.node {\n-                        self.check_trait_fn_not_async(trait_item.span, sig.header.asyncness);\n+                        self.check_trait_fn_not_async(trait_item.span, sig.header.asyncness.node);\n                         self.check_trait_fn_not_const(sig.header.constness);\n                         if block.is_none() {\n                             self.check_decl_no_pat(&sig.decl, |span, mut_ident| {\n@@ -702,6 +703,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             .span_bug(mac.span, \"macro invocation missed in expansion; did you forget to override \\\n                                  the relevant `fold_*()` method in `PlaceholderExpander`?\");\n     }\n+\n+    fn visit_fn_header(&mut self, header: &'a FnHeader) {\n+        if header.asyncness.node.is_async() && self.session.rust_2015() {\n+            struct_span_err!(self.session, header.asyncness.span, E0670,\n+                             \"`async fn` is not permitted in the 2015 edition\").emit();\n+        }\n+    }\n }\n \n pub fn check_crate(session: &Session, krate: &Crate) -> (bool, bool) {"}, {"sha": "e3c6b16703a4ac1a105fdc91812297d5168dff5d", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -310,6 +310,18 @@ loop {\n     break;\n }\n ```\n+\"##,\n+\n+E0670: r##\"\n+Rust 2015 does not permit the use of `async fn`.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0670\n+async fn foo() {}\n+```\n+\n+Switch to the Rust 2018 edition to use `async fn`.\n \"##\n }\n "}, {"sha": "e9331fcd8bad12676bf094972b7fe62e345dc50a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -806,9 +806,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         debug!(\"(resolving function) entering function\");\n         let (rib_kind, asyncness) = match function_kind {\n             FnKind::ItemFn(_, ref header, ..) =>\n-                (ItemRibKind, header.asyncness),\n+                (ItemRibKind, header.asyncness.node),\n             FnKind::Method(_, ref sig, _, _) =>\n-                (TraitOrImplItemRibKind, sig.header.asyncness),\n+                (TraitOrImplItemRibKind, sig.header.asyncness.node),\n             FnKind::Closure(_) =>\n                 // Async closures aren't resolved through `visit_fn`-- they're\n                 // processed separately"}, {"sha": "52f3a2077702192a22ac8c8419b0145952cb665e", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -378,7 +378,7 @@ impl Sig for ast::Item {\n                 if header.constness.node == ast::Constness::Const {\n                     text.push_str(\"const \");\n                 }\n-                if header.asyncness.is_async() {\n+                if header.asyncness.node.is_async() {\n                     text.push_str(\"async \");\n                 }\n                 if header.unsafety == ast::Unsafety::Unsafe {\n@@ -936,7 +936,7 @@ fn make_method_signature(\n     if m.header.constness.node == ast::Constness::Const {\n         text.push_str(\"const \");\n     }\n-    if m.header.asyncness.is_async() {\n+    if m.header.asyncness.node.is_async() {\n         text.push_str(\"async \");\n     }\n     if m.header.unsafety == ast::Unsafety::Unsafe {"}, {"sha": "a81134cb07ef40efc8133f42153b8e7b863f504d", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -1700,7 +1700,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 // `Self` in impl (we know the concrete type).\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(&path.segments);\n-                tcx.at(span).type_of(def_id)\n+                // Try to evaluate any array length constants\n+                self.normalize_ty(span, tcx.at(span).type_of(def_id))\n             }\n             Def::SelfTy(Some(_), None) => {\n                 // `Self` in trait."}, {"sha": "b1c53ea92b300b6c1ee7af855b38fde739dd0bad", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -214,7 +214,7 @@ impl Options {\n         if matches.opt_strs(\"passes\") == [\"list\"] {\n             println!(\"Available passes for running rustdoc:\");\n             for pass in passes::PASSES {\n-                println!(\"{:>20} - {}\", pass.name(), pass.description());\n+                println!(\"{:>20} - {}\", pass.name, pass.description);\n             }\n             println!(\"\\nDefault passes for rustdoc:\");\n             for &name in passes::DEFAULT_PASSES {"}, {"sha": "4dce4e86cc449e31739f1ee4ae5d89662e968908", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -603,10 +603,12 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 passes::defaults(default_passes).iter().map(|p| p.to_string()).collect();\n             passes.extend(manual_passes);\n \n+            info!(\"Executing passes\");\n+\n             for pass in &passes {\n-                // the \"unknown pass\" error will be reported when late passes are run\n-                if let Some(pass) = passes::find_pass(pass).and_then(|p| p.early_fn()) {\n-                    krate = pass(krate, &ctxt);\n+                match passes::find_pass(pass).map(|p| p.pass) {\n+                    Some(pass) => krate = pass(krate, &ctxt),\n+                    None => error!(\"unknown pass {}, skipping\", *pass),\n                 }\n             }\n "}, {"sha": "39e504951d1c6dbefb0fa29c90967b1720c66179", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -441,28 +441,6 @@ where R: 'static + Send,\n \n         krate.version = crate_version;\n \n-        info!(\"Executing passes\");\n-\n-        for pass in &passes {\n-            // determine if we know about this pass\n-            let pass = match passes::find_pass(pass) {\n-                Some(pass) => if let Some(pass) = pass.late_fn() {\n-                    pass\n-                } else {\n-                    // not a late pass, but still valid so don't report the error\n-                    continue\n-                }\n-                None => {\n-                    error!(\"unknown pass {}, skipping\", *pass);\n-\n-                    continue\n-                },\n-            };\n-\n-            // run it\n-            krate = pass(krate);\n-        }\n-\n         tx.send(f(Output {\n             krate: krate,\n             renderinfo: renderinfo,"}, {"sha": "88d9c87c5289892df082e82b9789430427eeec11", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -10,9 +10,11 @@ use crate::fold::DocFolder;\n use crate::html::markdown::{self, RustCodeBlock};\n use crate::passes::Pass;\n \n-pub const CHECK_CODE_BLOCK_SYNTAX: Pass =\n-    Pass::early(\"check-code-block-syntax\", check_code_block_syntax,\n-                \"validates syntax inside Rust code blocks\");\n+pub const CHECK_CODE_BLOCK_SYNTAX: Pass = Pass {\n+    name: \"check-code-block-syntax\",\n+    pass: check_code_block_syntax,\n+    description: \"validates syntax inside Rust code blocks\",\n+};\n \n pub fn check_code_block_syntax(krate: clean::Crate, cx: &DocContext<'_, '_, '_>) -> clean::Crate {\n     SyntaxChecker { cx }.fold_crate(krate)"}, {"sha": "088a6ea77c73ff53b64c7023ee29513b92cd5cfd", "filename": "src/librustdoc/passes/collapse_docs.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -1,13 +1,16 @@\n use crate::clean::{self, DocFragment, Item};\n+use crate::core::DocContext;\n use crate::fold;\n use crate::fold::{DocFolder};\n use crate::passes::Pass;\n \n use std::mem::replace;\n \n-pub const COLLAPSE_DOCS: Pass =\n-    Pass::late(\"collapse-docs\", collapse_docs,\n-        \"concatenates all document attributes into one document attribute\");\n+pub const COLLAPSE_DOCS: Pass = Pass {\n+    name: \"collapse-docs\",\n+    pass: collapse_docs,\n+    description: \"concatenates all document attributes into one document attribute\",\n+};\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n enum DocFragmentKind {\n@@ -26,7 +29,7 @@ impl DocFragment {\n     }\n }\n \n-pub fn collapse_docs(krate: clean::Crate) -> clean::Crate {\n+pub fn collapse_docs(krate: clean::Crate, _: &DocContext<'_, '_, '_>) -> clean::Crate {\n     Collapser.fold_crate(krate)\n }\n "}, {"sha": "67f291285c447415500d856274fb4ad48c8d2f93", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -19,9 +19,11 @@ use crate::passes::{look_for_tests, Pass};\n \n use super::span_of_attrs;\n \n-pub const COLLECT_INTRA_DOC_LINKS: Pass =\n-    Pass::early(\"collect-intra-doc-links\", collect_intra_doc_links,\n-                \"reads a crate's documentation to resolve intra-doc-links\");\n+pub const COLLECT_INTRA_DOC_LINKS: Pass = Pass {\n+    name: \"collect-intra-doc-links\",\n+    pass: collect_intra_doc_links,\n+    description: \"reads a crate's documentation to resolve intra-doc-links\",\n+};\n \n pub fn collect_intra_doc_links(krate: Crate, cx: &DocContext<'_, '_, '_>) -> Crate {\n     if !UnstableFeatures::from_environment().is_nightly_build() {"}, {"sha": "4c90540871d2eb3dabcbe2aa692ff53b81822def", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -6,9 +6,11 @@ use super::Pass;\n use rustc::util::nodemap::FxHashSet;\n use rustc::hir::def_id::DefId;\n \n-pub const COLLECT_TRAIT_IMPLS: Pass =\n-    Pass::early(\"collect-trait-impls\", collect_trait_impls,\n-                \"retrieves trait impls for items in the crate\");\n+pub const COLLECT_TRAIT_IMPLS: Pass = Pass {\n+    name: \"collect-trait-impls\",\n+    pass: collect_trait_impls,\n+    description: \"retrieves trait impls for items in the crate\",\n+};\n \n pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_, '_, '_>) -> Crate {\n     let mut synth = SyntheticImplCollector::new(cx);"}, {"sha": "3a9d8ef20ce84769bbd1cd68be07d4f23719709a", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 19, "deletions": 90, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -6,7 +6,6 @@ use rustc::lint as lint;\n use rustc::middle::privacy::AccessLevels;\n use rustc::util::nodemap::DefIdSet;\n use std::mem;\n-use std::fmt;\n use syntax::ast::NodeId;\n use syntax_pos::{DUMMY_SP, Span};\n use std::ops::Range;\n@@ -46,84 +45,14 @@ pub use self::collect_trait_impls::COLLECT_TRAIT_IMPLS;\n mod check_code_block_syntax;\n pub use self::check_code_block_syntax::CHECK_CODE_BLOCK_SYNTAX;\n \n-/// Represents a single pass.\n+/// A single pass over the cleaned documentation.\n+///\n+/// Runs in the compiler context, so it has access to types and traits and the like.\n #[derive(Copy, Clone)]\n-pub enum Pass {\n-    /// An \"early pass\" is run in the compiler context, and can gather information about types and\n-    /// traits and the like.\n-    EarlyPass {\n-        name: &'static str,\n-        pass: fn(clean::Crate, &DocContext<'_, '_, '_>) -> clean::Crate,\n-        description: &'static str,\n-    },\n-    /// A \"late pass\" is run between crate cleaning and page generation.\n-    LatePass {\n-        name: &'static str,\n-        pass: fn(clean::Crate) -> clean::Crate,\n-        description: &'static str,\n-    },\n-}\n-\n-impl fmt::Debug for Pass {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let mut dbg = match *self {\n-            Pass::EarlyPass { .. } => f.debug_struct(\"EarlyPass\"),\n-            Pass::LatePass { .. } => f.debug_struct(\"LatePass\"),\n-        };\n-\n-        dbg.field(\"name\", &self.name())\n-           .field(\"pass\", &\"...\")\n-           .field(\"description\", &self.description())\n-           .finish()\n-    }\n-}\n-\n-impl Pass {\n-    /// Constructs a new early pass.\n-    pub const fn early(name: &'static str,\n-                       pass: fn(clean::Crate, &DocContext<'_, '_, '_>) -> clean::Crate,\n-                       description: &'static str) -> Pass {\n-        Pass::EarlyPass { name, pass, description }\n-    }\n-\n-    /// Constructs a new late pass.\n-    pub const fn late(name: &'static str,\n-                      pass: fn(clean::Crate) -> clean::Crate,\n-                      description: &'static str) -> Pass {\n-        Pass::LatePass { name, pass, description }\n-    }\n-\n-    /// Returns the name of this pass.\n-    pub fn name(self) -> &'static str {\n-        match self {\n-            Pass::EarlyPass { name, .. } |\n-                Pass::LatePass { name, .. } => name,\n-        }\n-    }\n-\n-    /// Returns the description of this pass.\n-    pub fn description(self) -> &'static str {\n-        match self {\n-            Pass::EarlyPass { description, .. } |\n-                Pass::LatePass { description, .. } => description,\n-        }\n-    }\n-\n-    /// If this pass is an early pass, returns the pointer to its function.\n-    pub fn early_fn(self) -> Option<fn(clean::Crate, &DocContext<'_, '_, '_>) -> clean::Crate> {\n-        match self {\n-            Pass::EarlyPass { pass, .. } => Some(pass),\n-            _ => None,\n-        }\n-    }\n-\n-    /// If this pass is a late pass, returns the pointer to its function.\n-    pub fn late_fn(self) -> Option<fn(clean::Crate) -> clean::Crate> {\n-        match self {\n-            Pass::LatePass { pass, .. } => Some(pass),\n-            _ => None,\n-        }\n-    }\n+pub struct Pass {\n+    pub name: &'static str,\n+    pub pass: fn(clean::Crate, &DocContext<'_, '_, '_>) -> clean::Crate,\n+    pub description: &'static str,\n }\n \n /// The full list of passes.\n@@ -141,27 +70,27 @@ pub const PASSES: &'static [Pass] = &[\n ];\n \n /// The list of passes run by default.\n-pub const DEFAULT_PASSES: &'static [&'static str] = &[\n+pub const DEFAULT_PASSES: &[&str] = &[\n     \"collect-trait-impls\",\n+    \"collapse-docs\",\n+    \"unindent-comments\",\n     \"check-private-items-doc-tests\",\n     \"strip-hidden\",\n     \"strip-private\",\n     \"collect-intra-doc-links\",\n     \"check-code-block-syntax\",\n-    \"collapse-docs\",\n-    \"unindent-comments\",\n     \"propagate-doc-cfg\",\n ];\n \n /// The list of default passes run with `--document-private-items` is passed to rustdoc.\n-pub const DEFAULT_PRIVATE_PASSES: &'static [&'static str] = &[\n+pub const DEFAULT_PRIVATE_PASSES: &[&str] = &[\n     \"collect-trait-impls\",\n+    \"collapse-docs\",\n+    \"unindent-comments\",\n     \"check-private-items-doc-tests\",\n     \"strip-priv-imports\",\n     \"collect-intra-doc-links\",\n     \"check-code-block-syntax\",\n-    \"collapse-docs\",\n-    \"unindent-comments\",\n     \"propagate-doc-cfg\",\n ];\n \n@@ -184,8 +113,8 @@ pub fn defaults(default_set: DefaultPassOption) -> &'static [&'static str] {\n }\n \n /// If the given name matches a known pass, returns its information.\n-pub fn find_pass(pass_name: &str) -> Option<Pass> {\n-    PASSES.iter().find(|p| p.name() == pass_name).cloned()\n+pub fn find_pass(pass_name: &str) -> Option<&'static Pass> {\n+    PASSES.iter().find(|p| p.name == pass_name)\n }\n \n struct Stripper<'a> {\n@@ -438,11 +367,11 @@ crate fn source_span_for_markdown_range(\n         .span_to_snippet(span_of_attrs(attrs))\n         .ok()?;\n \n-    let starting_line = markdown[..md_range.start].lines().count() - 1;\n-    let ending_line = markdown[..md_range.end].lines().count() - 1;\n+    let starting_line = markdown[..md_range.start].matches('\\n').count();\n+    let ending_line = starting_line + markdown[md_range.start..md_range.end].matches('\\n').count();\n \n-    // We use `split_terminator('\\n')` instead of `lines()` when counting bytes so that we only\n-    // we can treat CRLF and LF line endings the same way.\n+    // We use `split_terminator('\\n')` instead of `lines()` when counting bytes so that we treat\n+    // CRLF and LF line endings the same way.\n     let mut src_lines = snippet.split_terminator('\\n');\n     let md_lines = markdown.split_terminator('\\n');\n "}, {"sha": "1c3977c4f85cddd36eabf65220353c2ad4ee198c", "filename": "src/librustdoc/passes/private_items_doc_tests.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -3,10 +3,11 @@ use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::passes::{look_for_tests, Pass};\n \n-\n-pub const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass =\n-    Pass::early(\"check-private-items-doc-tests\", check_private_items_doc_tests,\n-                \"check private items doc tests\");\n+pub const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass = Pass {\n+    name: \"check-private-items-doc-tests\",\n+    pass: check_private_items_doc_tests,\n+    description: \"check private items doc tests\",\n+};\n \n struct PrivateItemDocTestLinter<'a, 'tcx: 'a, 'rcx: 'a> {\n     cx: &'a DocContext<'a, 'tcx, 'rcx>,"}, {"sha": "aed80b5ba86fd7c270a95039d3882164a08666c9", "filename": "src/librustdoc/passes/propagate_doc_cfg.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -2,14 +2,17 @@ use std::sync::Arc;\n \n use crate::clean::{Crate, Item};\n use crate::clean::cfg::Cfg;\n+use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::passes::Pass;\n \n-pub const PROPAGATE_DOC_CFG: Pass =\n-    Pass::late(\"propagate-doc-cfg\", propagate_doc_cfg,\n-        \"propagates `#[doc(cfg(...))]` to child items\");\n+pub const PROPAGATE_DOC_CFG: Pass = Pass {\n+    name: \"propagate-doc-cfg\",\n+    pass: propagate_doc_cfg,\n+    description: \"propagates `#[doc(cfg(...))]` to child items\",\n+};\n \n-pub fn propagate_doc_cfg(cr: Crate) -> Crate {\n+pub fn propagate_doc_cfg(cr: Crate, _: &DocContext<'_, '_, '_>) -> Crate {\n     CfgPropagator { parent_cfg: None }.fold_crate(cr)\n }\n "}, {"sha": "330057e53843b517c2c4a61995746a6cc550934a", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -7,9 +7,11 @@ use crate::core::DocContext;\n use crate::fold::{DocFolder, StripItem};\n use crate::passes::{ImplStripper, Pass};\n \n-pub const STRIP_HIDDEN: Pass =\n-    Pass::early(\"strip-hidden\", strip_hidden,\n-                \"strips all doc(hidden) items from the output\");\n+pub const STRIP_HIDDEN: Pass = Pass {\n+    name: \"strip-hidden\",\n+    pass: strip_hidden,\n+    description: \"strips all doc(hidden) items from the output\",\n+};\n \n /// Strip items marked `#[doc(hidden)]`\n pub fn strip_hidden(krate: clean::Crate, _: &DocContext<'_, '_, '_>) -> clean::Crate {"}, {"sha": "479f0877bd7d2c4e80418e6350bde545358c39f7", "filename": "src/librustdoc/passes/strip_priv_imports.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -3,8 +3,11 @@ use crate::fold::{DocFolder};\n use crate::core::DocContext;\n use crate::passes::{ImportStripper, Pass};\n \n-pub const STRIP_PRIV_IMPORTS: Pass = Pass::early(\"strip-priv-imports\", strip_priv_imports,\n-     \"strips all private import statements (`use`, `extern crate`) from a crate\");\n+pub const STRIP_PRIV_IMPORTS: Pass = Pass {\n+    name: \"strip-priv-imports\",\n+    pass: strip_priv_imports,\n+    description: \"strips all private import statements (`use`, `extern crate`) from a crate\",\n+};\n \n pub fn strip_priv_imports(krate: clean::Crate, _: &DocContext<'_, '_, '_>)  -> clean::Crate {\n     ImportStripper.fold_crate(krate)"}, {"sha": "1ac3a90f38d35cb191f37290498a4946ee4eaee3", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -5,10 +5,12 @@ use crate::fold::{DocFolder};\n use crate::core::DocContext;\n use crate::passes::{ImplStripper, ImportStripper, Stripper, Pass};\n \n-pub const STRIP_PRIVATE: Pass =\n-    Pass::early(\"strip-private\", strip_private,\n-        \"strips all private items from a crate which cannot be seen externally, \\\n-         implies strip-priv-imports\");\n+pub const STRIP_PRIVATE: Pass = Pass {\n+    name: \"strip-private\",\n+    pass: strip_private,\n+    description: \"strips all private items from a crate which cannot be seen externally, \\\n+        implies strip-priv-imports\",\n+};\n \n /// Strip private items from the point of view of a crate or externally from a\n /// crate, specified by the `xcrate` flag."}, {"sha": "b77cf68d7c63fab3a8955b3ff5749b1156f06913", "filename": "src/librustdoc/passes/unindent_comments.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -3,14 +3,17 @@ use std::string::String;\n use std::usize;\n \n use crate::clean::{self, DocFragment, Item};\n+use crate::core::DocContext;\n use crate::fold::{self, DocFolder};\n use crate::passes::Pass;\n \n-pub const UNINDENT_COMMENTS: Pass =\n-    Pass::late(\"unindent-comments\", unindent_comments,\n-        \"removes excess indentation on comments in order for markdown to like it\");\n+pub const UNINDENT_COMMENTS: Pass = Pass {\n+    name: \"unindent-comments\",\n+    pass: unindent_comments,\n+    description: \"removes excess indentation on comments in order for markdown to like it\",\n+};\n \n-pub fn unindent_comments(krate: clean::Crate) -> clean::Crate {\n+pub fn unindent_comments(krate: clean::Crate, _: &DocContext<'_, '_, '_>) -> clean::Crate {\n     CommentCleaner.fold_crate(krate)\n }\n "}, {"sha": "613ae7a672844c1d779a9b0653f81003d1d64a30", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -1578,7 +1578,7 @@ pub trait BufRead: Read {\n     ///\n     /// If successful, this function will return the total number of bytes read.\n     ///\n-    /// An empty buffer returned indicates that the stream has reached EOF.\n+    /// If this function returns `Ok(0)`, the stream has reached EOF.\n     ///\n     /// # Errors\n     ///"}, {"sha": "735ce61c9bc293f082a10a069353205b50ed460b", "filename": "src/libstd/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -1015,7 +1015,7 @@ impl From<ChildStdin> for Stdio {\n     ///\n     /// `ChildStdin` will be converted to `Stdio` using `Stdio::from` under the hood.\n     ///\n-    /// ```rust\n+    /// ```rust,no_run\n     /// use std::process::{Command, Stdio};\n     ///\n     /// let reverse = Command::new(\"rev\")\n@@ -1044,7 +1044,7 @@ impl From<ChildStdout> for Stdio {\n     ///\n     /// `ChildStdout` will be converted to `Stdio` using `Stdio::from` under the hood.\n     ///\n-    /// ```rust\n+    /// ```rust,no_run\n     /// use std::process::{Command, Stdio};\n     ///\n     /// let hello = Command::new(\"echo\")"}, {"sha": "71c2ab82f65c397bcab98650b3c595db92f4600e", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -13,7 +13,7 @@ crate-type = [\"dylib\"]\n bitflags = \"1.0\"\n serialize = { path = \"../libserialize\" }\n log = \"0.4\"\n-scoped-tls = \"0.1\"\n+scoped-tls = \"1.0\"\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "b6f9ae36da70c4af2c3f58feae08740958237a40", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -2216,7 +2216,7 @@ impl Item {\n #[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n pub struct FnHeader {\n     pub unsafety: Unsafety,\n-    pub asyncness: IsAsync,\n+    pub asyncness: Spanned<IsAsync>,\n     pub constness: Spanned<Constness>,\n     pub abi: Abi,\n }\n@@ -2225,7 +2225,7 @@ impl Default for FnHeader {\n     fn default() -> FnHeader {\n         FnHeader {\n             unsafety: Unsafety::Normal,\n-            asyncness: IsAsync::NotAsync,\n+            asyncness: dummy_spanned(IsAsync::NotAsync),\n             constness: dummy_spanned(Constness::NotConst),\n             abi: Abi::Rust,\n         }"}, {"sha": "2f88749ace85ea3048ac6b4698c0fef69fd0270c", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -1017,7 +1017,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                   ast::ItemKind::Fn(self.fn_decl(inputs, ast::FunctionRetTy::Ty(output)),\n                               ast::FnHeader {\n                                   unsafety: ast::Unsafety::Normal,\n-                                  asyncness: ast::IsAsync::NotAsync,\n+                                  asyncness: dummy_spanned(ast::IsAsync::NotAsync),\n                                   constness: dummy_spanned(ast::Constness::NotConst),\n                                   abi: Abi::Rust,\n                               },"}, {"sha": "b24edb57e527e4b09892ebc62d3a5d889ade6eb1", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -475,11 +475,13 @@ where\n                 // #1 is a separator and #2 should be a KleepeOp.\n                 // (N.B. We need to advance the input iterator.)\n                 match parse_kleene_op(input, span) {\n-                    // #2 is `?`, which is not allowed as a Kleene op in 2015 edition.\n+                    // #2 is `?`, which is not allowed as a Kleene op in 2015 edition,\n+                    // but is allowed in the 2018 edition.\n                     Ok(Ok((op, op2_span))) if op == KleeneOp::ZeroOrOne => {\n                         sess.span_diagnostic\n                             .struct_span_err(op2_span, \"expected `*` or `+`\")\n-                            .note(\"`?` is not a macro repetition operator\")\n+                            .note(\"`?` is not a macro repetition operator in the 2015 edition, \\\n+                                 but is accepted in the 2018 edition\")\n                             .emit();\n \n                         // Return a dummy\n@@ -507,10 +509,12 @@ where\n                     Err(_) => op1_span,\n                 }\n             } else {\n-                // `?` is not allowed as a Kleene op in 2015\n+                // `?` is not allowed as a Kleene op in 2015,\n+                // but is allowed in the 2018 edition\n                 sess.span_diagnostic\n                     .struct_span_err(op1_span, \"expected `*` or `+`\")\n-                    .note(\"`?` is not a macro repetition operator\")\n+                    .note(\"`?` is not a macro repetition operator in the 2015 edition, \\\n+                         but is accepted in the 2018 edition\")\n                     .emit();\n \n                 // Return a dummy\n@@ -520,11 +524,13 @@ where\n \n         // #1 is a separator followed by #2, a KleeneOp\n         Ok(Err((tok, span))) => match parse_kleene_op(input, span) {\n-            // #2 is a `?`, which is not allowed as a Kleene op in 2015 edition.\n+            // #2 is a `?`, which is not allowed as a Kleene op in 2015 edition,\n+            // but is allowed in the 2018 edition\n             Ok(Ok((op, op2_span))) if op == KleeneOp::ZeroOrOne => {\n                 sess.span_diagnostic\n                     .struct_span_err(op2_span, \"expected `*` or `+`\")\n-                    .note(\"`?` is not a macro repetition operator\")\n+                    .note(\"`?` is not a macro repetition operator in the 2015 edition, \\\n+                        but is accepted in the 2018 edition\")\n                     .emit();\n \n                 // Return a dummy"}, {"sha": "669c68eda39d2a5261892799a6016fc33ccfa5f5", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -233,8 +233,8 @@ declare_features! (\n \n     // Allows `#[unwind(..)]`.\n     //\n-    // rustc internal for rust runtime\n-    (active, unwind_attributes, \"1.4.0\", None, None),\n+    // Permits specifying whether a function should permit unwinding or abort on unwind.\n+    (active, unwind_attributes, \"1.4.0\", Some(58760), None),\n \n     // Allows the use of `#[naked]` on functions.\n     (active, naked_functions, \"1.9.0\", Some(32408), None),\n@@ -1898,7 +1898,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         match fn_kind {\n             FnKind::ItemFn(_, header, _, _) => {\n                 // Check for const fn and async fn declarations.\n-                if header.asyncness.is_async() {\n+                if header.asyncness.node.is_async() {\n                     gate_feature_post!(&self, async_await, span, \"async fn is unstable\");\n                 }\n                 // Stability of const fn methods are covered in"}, {"sha": "d30372d45d754b20943a5a6eee1dde055a32947d", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -21,6 +21,7 @@ use syntax_pos::Span;\n \n use rustc_data_structures::sync::Lrc;\n use std::ops::DerefMut;\n+use std::{panic, process, ptr};\n \n pub trait ExpectOne<A: Array> {\n     fn expect_one(self, err: &'static str) -> A::Item;\n@@ -305,11 +306,18 @@ pub trait MutVisitor: Sized {\n \n /// Use a map-style function (`FnOnce(T) -> T`) to overwrite a `&mut T`. Useful\n /// when using a `flat_map_*` or `filter_map_*` method within a `visit_`\n-/// method.\n+/// method. Abort the program if the closure panics.\n //\n // No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n pub fn visit_clobber<T, F>(t: &mut T, f: F) where F: FnOnce(T) -> T {\n-    unsafe { std::ptr::write(t, f(std::ptr::read(t))); }\n+    unsafe {\n+        // Safe because `t` is used in a read-only fashion by `read()` before\n+        // being overwritten by `write()`.\n+        let old_t = ptr::read(t);\n+        let new_t = panic::catch_unwind(panic::AssertUnwindSafe(|| f(old_t)))\n+            .unwrap_or_else(|_| process::abort());\n+        ptr::write(t, new_t);\n+    }\n }\n \n // No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n@@ -926,7 +934,7 @@ pub fn noop_flat_map_impl_item<T: MutVisitor>(mut item: ImplItem, visitor: &mut\n \n pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {\n     let FnHeader { unsafety: _, asyncness, constness: _, abi: _ } = header;\n-    vis.visit_asyncness(asyncness);\n+    vis.visit_asyncness(&mut asyncness.node);\n }\n \n pub fn noop_visit_mod<T: MutVisitor>(Mod { inner, items, inline: _ }: &mut Mod, vis: &mut T) {"}, {"sha": "b762365c31f9760ea9d1b9ef3b6b0cbdd9d92a4c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -5001,6 +5001,11 @@ impl<'a> Parser<'a> {\n         )\n     }\n \n+    fn is_async_fn(&mut self) -> bool {\n+        self.token.is_keyword(keywords::Async) &&\n+            self.look_ahead(1, |t| t.is_keyword(keywords::Fn))\n+    }\n+\n     fn is_do_catch_block(&mut self) -> bool {\n         self.token.is_keyword(keywords::Do) &&\n         self.look_ahead(1, |t| t.is_keyword(keywords::Catch)) &&\n@@ -5133,7 +5138,8 @@ impl<'a> Parser<'a> {\n                   !self.is_union_item() &&\n                   !self.is_crate_vis() &&\n                   !self.is_existential_type_decl() &&\n-                  !self.is_auto_trait_item() {\n+                  !self.is_auto_trait_item() &&\n+                  !self.is_async_fn() {\n             let pth = self.parse_path(PathStyle::Expr)?;\n \n             if !self.eat(&token::Not) {\n@@ -6384,7 +6390,7 @@ impl<'a> Parser<'a> {\n     /// Parses an item-position function declaration.\n     fn parse_item_fn(&mut self,\n                      unsafety: Unsafety,\n-                     asyncness: IsAsync,\n+                     asyncness: Spanned<IsAsync>,\n                      constness: Spanned<Constness>,\n                      abi: Abi)\n                      -> PResult<'a, ItemInfo> {\n@@ -6416,14 +6422,15 @@ impl<'a> Parser<'a> {\n         -> PResult<'a, (\n             Spanned<Constness>,\n             Unsafety,\n-            IsAsync,\n+            Spanned<IsAsync>,\n             Abi\n         )>\n     {\n         let is_const_fn = self.eat_keyword(keywords::Const);\n         let const_span = self.prev_span;\n         let unsafety = self.parse_unsafety();\n         let asyncness = self.parse_asyncness();\n+        let asyncness = respan(self.prev_span, asyncness);\n         let (constness, unsafety, abi) = if is_const_fn {\n             (respan(const_span, Constness::Const), unsafety, Abi::Rust)\n         } else {\n@@ -7834,7 +7841,7 @@ impl<'a> Parser<'a> {\n                 let abi = opt_abi.unwrap_or(Abi::C);\n                 let (ident, item_, extra_attrs) =\n                     self.parse_item_fn(Unsafety::Normal,\n-                                       IsAsync::NotAsync,\n+                                       respan(fn_span, IsAsync::NotAsync),\n                                        respan(fn_span, Constness::NotConst),\n                                        abi)?;\n                 let prev_span = self.prev_span;\n@@ -7878,7 +7885,7 @@ impl<'a> Parser<'a> {\n                 self.bump();\n                 let (ident, item_, extra_attrs) =\n                     self.parse_item_fn(unsafety,\n-                                       IsAsync::NotAsync,\n+                                       respan(const_span, IsAsync::NotAsync),\n                                        respan(const_span, Constness::Const),\n                                        Abi::Rust)?;\n                 let prev_span = self.prev_span;\n@@ -7926,14 +7933,15 @@ impl<'a> Parser<'a> {\n             // ASYNC FUNCTION ITEM\n             let unsafety = self.parse_unsafety();\n             self.expect_keyword(keywords::Async)?;\n+            let async_span = self.prev_span;\n             self.expect_keyword(keywords::Fn)?;\n             let fn_span = self.prev_span;\n             let (ident, item_, extra_attrs) =\n                 self.parse_item_fn(unsafety,\n-                                   IsAsync::Async {\n+                                   respan(async_span, IsAsync::Async {\n                                        closure_id: ast::DUMMY_NODE_ID,\n                                        return_impl_trait_id: ast::DUMMY_NODE_ID,\n-                                   },\n+                                   }),\n                                    respan(fn_span, Constness::NotConst),\n                                    Abi::Rust)?;\n             let prev_span = self.prev_span;\n@@ -7942,6 +7950,13 @@ impl<'a> Parser<'a> {\n                                     item_,\n                                     visibility,\n                                     maybe_append(attrs, extra_attrs));\n+            if self.span.rust_2015() {\n+                self.diagnostic().struct_span_err_with_code(\n+                    async_span,\n+                    \"`async fn` is not permitted in the 2015 edition\",\n+                    DiagnosticId::Error(\"E0670\".into())\n+                ).emit();\n+            }\n             return Ok(Some(item));\n         }\n         if self.check_keyword(keywords::Unsafe) &&\n@@ -7989,7 +8004,7 @@ impl<'a> Parser<'a> {\n             let fn_span = self.prev_span;\n             let (ident, item_, extra_attrs) =\n                 self.parse_item_fn(Unsafety::Normal,\n-                                   IsAsync::NotAsync,\n+                                   respan(fn_span, IsAsync::NotAsync),\n                                    respan(fn_span, Constness::NotConst),\n                                    Abi::Rust)?;\n             let prev_span = self.prev_span;\n@@ -8015,7 +8030,7 @@ impl<'a> Parser<'a> {\n             let fn_span = self.prev_span;\n             let (ident, item_, extra_attrs) =\n                 self.parse_item_fn(Unsafety::Unsafe,\n-                                   IsAsync::NotAsync,\n+                                   respan(fn_span, IsAsync::NotAsync),\n                                    respan(fn_span, Constness::NotConst),\n                                    abi)?;\n             let prev_span = self.prev_span;\n@@ -8282,7 +8297,8 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         visibility: Visibility\n     ) -> PResult<'a, Option<P<Item>>> {\n-        if macros_allowed && self.token.is_path_start() {\n+        if macros_allowed && self.token.is_path_start() &&\n+                !(self.is_async_fn() && self.span.rust_2015()) {\n             // MACRO INVOCATION ITEM\n \n             let prev_span = self.prev_span;\n@@ -8337,7 +8353,8 @@ impl<'a> Parser<'a> {\n     fn parse_assoc_macro_invoc(&mut self, item_kind: &str, vis: Option<&Visibility>,\n                                at_end: &mut bool) -> PResult<'a, Option<Mac>>\n     {\n-        if self.token.is_path_start() {\n+        if self.token.is_path_start() &&\n+                !(self.is_async_fn() && self.span.rust_2015()) {\n             let prev_span = self.prev_span;\n             let lo = self.span;\n             let pth = self.parse_path(PathStyle::Mod)?;"}, {"sha": "d6265ebde1bbc9dcb1d97dd8748d7a372ee7c872", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -3195,7 +3195,7 @@ impl<'a> State<'a> {\n             ast::Constness::Const => self.word_nbsp(\"const\")?\n         }\n \n-        self.print_asyncness(header.asyncness)?;\n+        self.print_asyncness(header.asyncness.node)?;\n         self.print_unsafety(header.unsafety)?;\n \n         if header.abi != Abi::Rust {\n@@ -3247,7 +3247,7 @@ mod tests {\n                     ast::FnHeader {\n                         unsafety: ast::Unsafety::Normal,\n                         constness: source_map::dummy_spanned(ast::Constness::NotConst),\n-                        asyncness: ast::IsAsync::NotAsync,\n+                        asyncness: source_map::dummy_spanned(ast::IsAsync::NotAsync),\n                         abi: Abi::Rust,\n                     },\n                     abba_ident,"}, {"sha": "46d8d772e9321ac707c7b6eba245a66de378cf84", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -22,7 +22,7 @@ use syntax_pos::Span;\n #[derive(Copy, Clone)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n-    ItemFn(Ident, FnHeader, &'a Visibility, &'a Block),\n+    ItemFn(Ident, &'a FnHeader, &'a Visibility, &'a Block),\n \n     /// fn foo(&self)\n     Method(Ident, &'a MethodSig, Option<&'a Visibility>, &'a Block),\n@@ -149,6 +149,9 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_fn_ret_ty(&mut self, ret_ty: &'ast FunctionRetTy) {\n         walk_fn_ret_ty(self, ret_ty)\n     }\n+    fn visit_fn_header(&mut self, _header: &'ast FnHeader) {\n+        // Nothing to do\n+    }\n }\n \n #[macro_export]\n@@ -225,8 +228,9 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_ty(typ);\n             visitor.visit_expr(expr);\n         }\n-        ItemKind::Fn(ref declaration, header, ref generics, ref body) => {\n+        ItemKind::Fn(ref declaration, ref header, ref generics, ref body) => {\n             visitor.visit_generics(generics);\n+            visitor.visit_fn_header(header);\n             visitor.visit_fn(FnKind::ItemFn(item.ident, header,\n                                             &item.vis, body),\n                              declaration,\n@@ -539,11 +543,13 @@ pub fn walk_fn<'a, V>(visitor: &mut V, kind: FnKind<'a>, declaration: &'a FnDecl\n     where V: Visitor<'a>,\n {\n     match kind {\n-        FnKind::ItemFn(_, _, _, body) => {\n+        FnKind::ItemFn(_, header, _, body) => {\n+            visitor.visit_fn_header(header);\n             walk_fn_decl(visitor, declaration);\n             visitor.visit_block(body);\n         }\n-        FnKind::Method(_, _, _, body) => {\n+        FnKind::Method(_, sig, _, body) => {\n+            visitor.visit_fn_header(&sig.header);\n             walk_fn_decl(visitor, declaration);\n             visitor.visit_block(body);\n         }\n@@ -564,6 +570,7 @@ pub fn walk_trait_item<'a, V: Visitor<'a>>(visitor: &mut V, trait_item: &'a Trai\n             walk_list!(visitor, visit_expr, default);\n         }\n         TraitItemKind::Method(ref sig, None) => {\n+            visitor.visit_fn_header(&sig.header);\n             walk_fn_decl(visitor, &sig.decl);\n         }\n         TraitItemKind::Method(ref sig, Some(ref body)) => {"}, {"sha": "f4b625f8ea2c862c69bec862608d001c7f377fe8", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -257,7 +257,7 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n             );\n             return false\n         }\n-        if header.asyncness.is_async() {\n+        if header.asyncness.node.is_async() {\n             sd.span_err(\n                 i.span,\n                 \"async functions cannot be used for tests\""}, {"sha": "691abffbbc1aff54778359097244e1e012ddeb02", "filename": "src/libsyntax_pos/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax_pos%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Flibsyntax_pos%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2FCargo.toml?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -13,6 +13,6 @@ crate-type = [\"dylib\"]\n serialize = { path = \"../libserialize\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n arena = { path = \"../libarena\" }\n-scoped-tls = { version = \"0.1.1\", features = [\"nightly\"] }\n+scoped-tls = \"1.0\"\n unicode-width = \"0.1.4\"\n cfg-if = \"0.1.2\""}, {"sha": "76437630309af1603364579864c03d0eb304c236", "filename": "src/test/run-pass/issues/issue-58212.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Frun-pass%2Fissues%2Fissue-58212.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Frun-pass%2Fissues%2Fissue-58212.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-58212.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -0,0 +1,13 @@\n+trait FromUnchecked {\n+    unsafe fn from_unchecked();\n+}\n+\n+impl FromUnchecked for [u8; 1] {\n+    unsafe fn from_unchecked() {\n+        let mut array: Self = std::mem::uninitialized();\n+        let _ptr = &mut array as *mut [u8] as *mut u8;\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "60fc131dbda175029f36eb46e5f501cf6238ccef", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -105,8 +105,8 @@ LL | | /// [error]\n    |\n    = note: the link appears in this line:\n            \n-            [error]\n-             ^^^^^\n+           [error]\n+            ^^^^^\n    = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n \n warning: `[error1]` cannot be resolved, ignoring it..."}, {"sha": "5e5ddebe108845387808d56a696e836f2f26de39", "filename": "src/test/rustdoc-ui/issue-58473-2.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Frustdoc-ui%2Fissue-58473-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Frustdoc-ui%2Fissue-58473-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-58473-2.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -0,0 +1,12 @@\n+// compile-pass\n+\n+#![deny(private_doc_tests)]\n+\n+mod foo {\n+    /**\n+    Does nothing, returns `()`\n+\n+    yadda-yadda-yadda\n+    */\n+    fn foo() {}\n+}"}, {"sha": "0e5be3292c05341f7b640f33882d799251008f2b", "filename": "src/test/rustdoc-ui/issue-58473.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Frustdoc-ui%2Fissue-58473.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Frustdoc-ui%2Fissue-58473.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-58473.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -0,0 +1,10 @@\n+// compile-pass\n+\n+pub trait Foo {\n+    /**\n+    Does nothing, returns `()`\n+\n+    yadda-yadda-yadda\n+    */\n+    fn foo() {}\n+}"}, {"sha": "2105aa5835d0dbc0bc5cbe61603822faacaffdce", "filename": "src/test/ui/editions/edition-deny-async-fns-2015.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Feditions%2Fedition-deny-async-fns-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Feditions%2Fedition-deny-async-fns-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-deny-async-fns-2015.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -0,0 +1,34 @@\n+// edition:2015\n+\n+#![feature(futures_api, async_await)]\n+\n+async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+\n+fn baz() { async fn foo() {} } //~ ERROR `async fn` is not permitted in the 2015 edition\n+\n+async fn async_baz() { //~ ERROR `async fn` is not permitted in the 2015 edition\n+    async fn bar() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+}\n+\n+struct Foo {}\n+\n+impl Foo {\n+    async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+}\n+\n+trait Bar {\n+    async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+                      //~^ ERROR trait fns cannot be declared `async`\n+}\n+\n+fn main() {\n+    macro_rules! accept_item { ($x:item) => {} }\n+\n+    accept_item! {\n+        async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+    }\n+\n+    let inside_closure = || {\n+        async fn bar() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+    };\n+}"}, {"sha": "1ad907aa7eb43fd0288d976147bcd68239b630f1", "filename": "src/test/ui/editions/edition-deny-async-fns-2015.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Feditions%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Feditions%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-deny-async-fns-2015.stderr?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -0,0 +1,58 @@\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:5:1\n+   |\n+LL | async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+   | ^^^^^\n+\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:7:12\n+   |\n+LL | fn baz() { async fn foo() {} } //~ ERROR `async fn` is not permitted in the 2015 edition\n+   |            ^^^^^\n+\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:10:5\n+   |\n+LL |     async fn bar() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+   |     ^^^^^\n+\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:9:1\n+   |\n+LL | async fn async_baz() { //~ ERROR `async fn` is not permitted in the 2015 edition\n+   | ^^^^^\n+\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:32:9\n+   |\n+LL |         async fn bar() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+   |         ^^^^^\n+\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:28:9\n+   |\n+LL |         async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+   |         ^^^^^\n+\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:16:5\n+   |\n+LL |     async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+   |     ^^^^^\n+\n+error[E0706]: trait fns cannot be declared `async`\n+  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n+   |\n+LL |     async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n+   |\n+LL |     async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+   |     ^^^^^\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors occurred: E0670, E0706.\n+For more information about an error, try `rustc --explain E0670`."}, {"sha": "b6ab8ae0a9bc7c6b4a27f080194d07dc8e674bf6", "filename": "src/test/ui/feature-gates/feature-gate-async-await-2015-edition.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -2,7 +2,8 @@\n \n #![feature(futures_api)]\n \n-async fn foo() {} //~ ERROR async fn is unstable\n+async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+                  //~^ ERROR async fn is unstable\n \n fn main() {\n     let _ = async {}; //~ ERROR cannot find struct, variant or union type `async`"}, {"sha": "58051153e1f0df72c43f74f9a6f5e4b09a54eb56", "filename": "src/test/ui/feature-gates/feature-gate-async-await-2015-edition.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -1,24 +1,30 @@\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/feature-gate-async-await-2015-edition.rs:5:1\n+   |\n+LL | async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+   | ^^^^^\n+\n error[E0422]: cannot find struct, variant or union type `async` in this scope\n-  --> $DIR/feature-gate-async-await-2015-edition.rs:8:13\n+  --> $DIR/feature-gate-async-await-2015-edition.rs:9:13\n    |\n LL |     let _ = async {}; //~ ERROR cannot find struct, variant or union type `async`\n    |             ^^^^^ not found in this scope\n \n error[E0425]: cannot find value `async` in this scope\n-  --> $DIR/feature-gate-async-await-2015-edition.rs:9:13\n+  --> $DIR/feature-gate-async-await-2015-edition.rs:10:13\n    |\n LL |     let _ = async || { true }; //~ ERROR cannot find value `async` in this scope\n    |             ^^^^^ not found in this scope\n \n error[E0658]: async fn is unstable (see issue #50547)\n   --> $DIR/feature-gate-async-await-2015-edition.rs:5:1\n    |\n-LL | async fn foo() {} //~ ERROR async fn is unstable\n+LL | async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n    | ^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(async_await)] to the crate attributes to enable\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0422, E0425, E0658.\n+Some errors occurred: E0422, E0425, E0658, E0670.\n For more information about an error, try `rustc --explain E0422`."}, {"sha": "77f2f13c99ee89dcc36fb642a09fe8563c6ba021", "filename": "src/test/ui/feature-gates/feature-gate-unwind-attributes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.stderr?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: #[unwind] is experimental\n+error[E0658]: #[unwind] is experimental (see issue #58760)\n   --> $DIR/feature-gate-unwind-attributes.rs:11:5\n    |\n LL |     #[unwind(allowed)] //~ ERROR #[unwind] is experimental"}, {"sha": "40642523be255af7651ebd43621f3ec2f6dc7fbd", "filename": "src/test/ui/impl-trait/recursive-async-impl-trait-type.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-async-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-async-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-async-impl-trait-type.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -0,0 +1,11 @@\n+// edition:2018\n+// Test that impl trait does not allow creating recursive types that are\n+// otherwise forbidden when using `async` and `await`.\n+\n+#![feature(await_macro, async_await, futures_api, generators)]\n+\n+async fn recursive_async_function() -> () { //~ ERROR\n+    await!(recursive_async_function());\n+}\n+\n+fn main() {}"}, {"sha": "acdeabb2f9892a3b429fada5afe37f14c961372a", "filename": "src/test/ui/impl-trait/recursive-async-impl-trait-type.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-async-impl-trait-type.stderr?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -0,0 +1,11 @@\n+error[E0720]: opaque type expands to a recursive type\n+  --> $DIR/recursive-async-impl-trait-type.rs:7:40\n+   |\n+LL | async fn recursive_async_function() -> () { //~ ERROR\n+   |                                        ^^ expands to self-referential type\n+   |\n+   = note: expanded type is `std::future::GenFuture<[static generator@$DIR/recursive-async-impl-trait-type.rs:7:43: 9:2 {impl std::future::Future, ()}]>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "869876dc6a88a3e6c7f53a5cb129a3044227125f", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.rs?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -1,7 +1,7 @@\n // Test that impl trait does not allow creating recursive types that are\n // otherwise forbidden.\n \n-#![feature(await_macro, async_await, futures_api, generators)]\n+#![feature(futures_api, generators)]\n \n fn option(i: i32) -> impl Sized { //~ ERROR\n     if i < 0 {\n@@ -62,10 +62,6 @@ fn generator_hold() -> impl Sized { //~ ERROR\n     }\n }\n \n-async fn recursive_async_function() -> () { //~ ERROR\n-    await!(recursive_async_function());\n-}\n-\n fn use_fn_ptr() -> impl Sized { // OK, error already reported\n     fn_ptr()\n }"}, {"sha": "96494229fd339f6d70e97d85d19ba63146b35e21", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.stderr?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -95,29 +95,21 @@ LL | fn generator_hold() -> impl Sized { //~ ERROR\n    = note: expanded type is `[generator@$DIR/recursive-impl-trait-type.rs:58:5: 62:6 {impl Sized, ()}]`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:65:40\n-   |\n-LL | async fn recursive_async_function() -> () { //~ ERROR\n-   |                                        ^^ expands to self-referential type\n-   |\n-   = note: expanded type is `std::future::GenFuture<[static generator@$DIR/recursive-impl-trait-type.rs:65:43: 67:2 {impl std::future::Future, ()}]>`\n-\n-error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:73:26\n+  --> $DIR/recursive-impl-trait-type.rs:69:26\n    |\n LL | fn mutual_recursion() -> impl Sync { //~ ERROR\n    |                          ^^^^^^^^^ expands to self-referential type\n    |\n    = note: type resolves to itself\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:77:28\n+  --> $DIR/recursive-impl-trait-type.rs:73:28\n    |\n LL | fn mutual_recursion_b() -> impl Sized { //~ ERROR\n    |                            ^^^^^^^^^^ expands to self-referential type\n    |\n    = note: type resolves to itself\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0720`."}, {"sha": "cb0a9163b74702da761767ebcc60f9dbf6012906", "filename": "src/test/ui/macros/macro-at-most-once-rep-2015-ques-rep.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-rep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e001e5c6c7c090b41416a57d4be412ed3ccd937/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-rep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-rep.stderr?ref=7e001e5c6c7c090b41416a57d4be412ed3ccd937", "patch": "@@ -4,15 +4,15 @@ error: expected `*` or `+`\n LL |     ($(a)?) => {} //~ERROR expected `*` or `+`\n    |          ^\n    |\n-   = note: `?` is not a macro repetition operator\n+   = note: `?` is not a macro repetition operator in the 2015 edition, but is accepted in the 2018 edition\n \n error: expected `*` or `+`\n   --> $DIR/macro-at-most-once-rep-2015-ques-rep.rs:10:11\n    |\n LL |     ($(a),?) => {} //~ERROR expected `*` or `+`\n    |           ^\n    |\n-   = note: `?` is not a macro repetition operator\n+   = note: `?` is not a macro repetition operator in the 2015 edition, but is accepted in the 2018 edition\n \n error: aborting due to 2 previous errors\n "}]}