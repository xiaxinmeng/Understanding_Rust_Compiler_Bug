{"sha": "d9c336afb782e30e90471887d7f63cfa4c28fc74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YzMzNmFmYjc4MmUzMGU5MDQ3MTg4N2Q3ZjYzY2ZhNGMyOGZjNzQ=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-12-21T15:36:16Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-02-28T15:33:14Z"}, "message": "default WF: Substitute defaults individually in the clauses.", "tree": {"sha": "47b3ff293caabcff3d77f5a2e03be9fc2ad9ba4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47b3ff293caabcff3d77f5a2e03be9fc2ad9ba4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9c336afb782e30e90471887d7f63cfa4c28fc74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c336afb782e30e90471887d7f63cfa4c28fc74", "html_url": "https://github.com/rust-lang/rust/commit/d9c336afb782e30e90471887d7f63cfa4c28fc74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9c336afb782e30e90471887d7f63cfa4c28fc74/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87c2ad048a8ef674e2f7c147cf81f7f6f5ed3872", "url": "https://api.github.com/repos/rust-lang/rust/commits/87c2ad048a8ef674e2f7c147cf81f7f6f5ed3872", "html_url": "https://github.com/rust-lang/rust/commit/87c2ad048a8ef674e2f7c147cf81f7f6f5ed3872"}], "stats": {"total": 106, "additions": 64, "deletions": 42}, "files": [{"sha": "0a919eb3b8c15ccb92cf64591e51eae1a63a1b8b", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 39, "deletions": 41, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d9c336afb782e30e90471887d7f63cfa4c28fc74/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c336afb782e30e90471887d7f63cfa4c28fc74/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d9c336afb782e30e90471887d7f63cfa4c28fc74", "patch": "@@ -375,58 +375,56 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         use ty::subst::Subst;\n         use rustc::ty::TypeFoldable;\n \n+        let mut predicates = fcx.tcx.predicates_of(def_id);\n+        let mut substituted_predicates = Vec::new();\n+\n         let generics = self.tcx.generics_of(def_id);\n         let defaulted_params = generics.types.iter()\n                                              .filter(|def| def.has_default &&\n                                                      def.index >= generics.parent_count() as u32);\n-        // Defaults must be well-formed.\n-        for d in defaulted_params.map(|p| p.def_id) {\n+        for param_def in defaulted_params {\n+            // Defaults must be well-formed.\n+            let d = param_def.def_id;\n             fcx.register_wf_obligation(fcx.tcx.type_of(d), fcx.tcx.def_span(d), self.code.clone());\n-        }\n-        // Check that each default fulfills the bounds on it's parameter.\n-        // We go over each predicate and duplicate it, substituting defaults in the self type.\n-        let mut predicates = fcx.tcx.predicates_of(def_id);\n-        let mut default_predicates = Vec::new();\n-        // In `trait Trait : Super` predicates as `Self: Trait` and `Self: Super` are a problem.\n-        // Therefore we skip such predicates. This means we check less than we could.\n-        for pred in predicates.predicates.iter().filter(|p| !(is_trait && p.has_self_ty())) {\n-            let mut skip = false;\n-            let mut no_default = true;\n-            let substs = ty::subst::Substs::for_item(fcx.tcx, def_id, |def, _| {\n-                // All regions are identity.\n-                fcx.tcx.mk_region(ty::ReEarlyBound(def.to_early_bound_region_data()))\n-            }, |def, _| {\n-                // No default or generic comes from parent, identity substitution.\n-                if !def.has_default || (def.index as usize) < generics.parent_count() {\n-                    fcx.tcx.mk_param_from_def(def)\n-                } else {\n-                    no_default = false;\n-                    // Has a default, use it in the substitution.\n-                    let default_ty = fcx.tcx.type_of(def.def_id);\n-\n-                    match default_ty.sty {\n-                        // Skip `Self: Sized` when `Self` is the default. Needed in traits.\n-                        ty::TyParam(ref p) if is_trait && p.is_self() => {\n-                            if let ty::Predicate::Trait(p) = pred {\n-                                if Some(p.def_id()) == fcx.tcx.lang_items().sized_trait() {\n-                                    skip = true;\n-                                }\n-                            }\n+            // Check the clauses are well-formed when the param is substituted by it's default.\n+            // In trait definitions, predicates as `Self: Trait` and `Self: Super` are problematic.\n+            // Therefore we skip such predicates. This means we check less than we could.\n+            for pred in predicates.predicates.iter().filter(|p| !(is_trait && p.has_self_ty())) {\n+                let mut skip = true;\n+                let substs = ty::subst::Substs::for_item(fcx.tcx, def_id, |def, _| {\n+                    // All regions are identity.\n+                    fcx.tcx.mk_region(ty::ReEarlyBound(def.to_early_bound_region_data()))\n+                }, |def, _| {\n+                    let identity_substs = fcx.tcx.mk_param_from_def(def);\n+                    if def.index != param_def.index {\n+                        identity_substs\n+                    } else {\n+                        let sized = fcx.tcx.lang_items().sized_trait();\n+                        let pred_is_sized = match pred {\n+                            ty::Predicate::Trait(p) => Some(p.def_id()) == sized,\n+                            _ => false,\n+                        };\n+                        let default_ty = fcx.tcx.type_of(def.def_id);\n+                        let default_is_self = match default_ty.sty {\n+                            ty::TyParam(ref p) => p.is_self(),\n+                            _ => false\n+                        };\n+                        // In trait defs, skip `Self: Sized` when `Self` is the default.\n+                        if is_trait && pred_is_sized && default_is_self {\n+                            identity_substs\n+                        } else {\n+                            skip = false;\n+                            default_ty\n                         }\n-                        _ => ()\n                     }\n-                    default_ty\n+                });\n+                if !skip {\n+                    substituted_predicates.push(pred.subst(fcx.tcx, substs));\n                 }\n-            });\n-\n-            if skip || no_default {\n-                continue;\n             }\n-\n-            default_predicates.push(pred.subst(fcx.tcx, substs));\n         }\n \n-        predicates.predicates.extend(default_predicates);\n+        predicates.predicates.extend(substituted_predicates);\n         let predicates = predicates.instantiate_identity(fcx.tcx);\n         let predicates = fcx.normalize_associated_types_in(span, &predicates);\n "}, {"sha": "a6e475eb1a3b5594f09cdee03300d1baf41a8288", "filename": "src/test/ui/type-check-defaults.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9c336afb782e30e90471887d7f63cfa4c28fc74/src%2Ftest%2Fui%2Ftype-check-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c336afb782e30e90471887d7f63cfa4c28fc74/src%2Ftest%2Fui%2Ftype-check-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check-defaults.rs?ref=d9c336afb782e30e90471887d7f63cfa4c28fc74", "patch": "@@ -29,4 +29,10 @@ trait SelfBound<T:Copy=Self> {}\n \n trait FooTrait<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n \n+trait Trait {}\n+struct TwoParams<T, U>(T, U);\n+impl Trait for TwoParams<i32, i32> {}\n+// Check that each default is substituted individually in the clauses.\n+struct Bogus<T = i32, U = i32>(TwoParams<T, U>) where TwoParams<T, U>: Trait;\n+\n fn main() { }"}, {"sha": "cf11282f7d20c3d20943a484bee33070427665d1", "filename": "src/test/ui/type-check-defaults.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d9c336afb782e30e90471887d7f63cfa4c28fc74/src%2Ftest%2Fui%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9c336afb782e30e90471887d7f63cfa4c28fc74/src%2Ftest%2Fui%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check-defaults.stderr?ref=d9c336afb782e30e90471887d7f63cfa4c28fc74", "patch": "@@ -67,5 +67,23 @@ error[E0277]: the trait bound `i32: std::ops::Add<u8>` is not satisfied\n    = help: the trait `std::ops::Add<u8>` is not implemented for `i32`\n    = note: required by `std::ops::Add`\n \n-error: aborting due to 8 previous errors\n+error[E0277]: the trait bound `TwoParams<i32, U>: Trait` is not satisfied\n+  --> $DIR/type-check-defaults.rs:36:1\n+   |\n+36 | struct Bogus<T = i32, U = i32>(TwoParams<T, U>) where TwoParams<T, U>: Trait;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `TwoParams<i32, U>`\n+   |\n+   = help: consider adding a `where TwoParams<i32, U>: Trait` bound\n+   = note: required by `Trait`\n+\n+error[E0277]: the trait bound `TwoParams<T, i32>: Trait` is not satisfied\n+  --> $DIR/type-check-defaults.rs:36:1\n+   |\n+36 | struct Bogus<T = i32, U = i32>(TwoParams<T, U>) where TwoParams<T, U>: Trait;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `TwoParams<T, i32>`\n+   |\n+   = help: consider adding a `where TwoParams<T, i32>: Trait` bound\n+   = note: required by `Trait`\n+\n+error: aborting due to 10 previous errors\n "}]}