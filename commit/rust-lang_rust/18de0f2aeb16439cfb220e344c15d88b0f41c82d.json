{"sha": "18de0f2aeb16439cfb220e344c15d88b0f41c82d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZGUwZjJhZWIxNjQzOWNmYjIyMGUzNDRjMTVkODhiMGY0MWM4MmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-02T23:48:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-03T02:10:24Z"}, "message": "rt: Rename task_sleep intrinsic to task_yield. Remove usec param", "tree": {"sha": "7fc5659ce6494c8747f3bc661162ccfef60ccc68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fc5659ce6494c8747f3bc661162ccfef60ccc68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18de0f2aeb16439cfb220e344c15d88b0f41c82d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18de0f2aeb16439cfb220e344c15d88b0f41c82d", "html_url": "https://github.com/rust-lang/rust/commit/18de0f2aeb16439cfb220e344c15d88b0f41c82d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18de0f2aeb16439cfb220e344c15d88b0f41c82d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8693fcc2d78c02670d69eb7be772898b41281db7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8693fcc2d78c02670d69eb7be772898b41281db7", "html_url": "https://github.com/rust-lang/rust/commit/8693fcc2d78c02670d69eb7be772898b41281db7"}], "stats": {"total": 73, "additions": 28, "deletions": 45}, "files": [{"sha": "6026d1b8125e03326d484b19b7b7781a0baa15d7", "filename": "src/libcore/task.rs", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=18de0f2aeb16439cfb220e344c15d88b0f41c82d", "patch": "@@ -33,7 +33,6 @@ import c = ctypes;\n \n export task;\n export joinable_task;\n-export sleep;\n export yield;\n export task_notification;\n export join;\n@@ -55,7 +54,7 @@ export try;\n #[abi = \"rust-intrinsic\"]\n native mod rusti {\n     // these must run on the Rust stack so that they can swap stacks etc:\n-    fn task_sleep(task: *rust_task, time_in_us: c::size_t, &killed: bool);\n+    fn task_yield(task: *rust_task, &killed: bool);\n }\n \n type rust_closure = {\n@@ -258,35 +257,21 @@ Retreives a handle to the currently executing task\n fn get_task() -> task { rustrt::get_task_id() }\n \n /*\n-Function: sleep\n-\n-Hints the scheduler to yield this task for a specified ammount of time.\n+Function: yield\n \n-Parameters:\n+Yield control to the task scheduler\n \n-time_in_us - maximum number of microseconds to yield control for\n+The scheduler may schedule another task to execute.\n */\n-fn sleep(time_in_us: uint) {\n+fn yield() {\n     let task = rustrt::rust_get_task();\n     let killed = false;\n-    // FIXME: uncomment this when extfmt is moved to core\n-    // in a snapshot.\n-    // #debug(\"yielding for %u us\", time_in_us);\n-    rusti::task_sleep(task, time_in_us, killed);\n+    rusti::task_yield(task, killed);\n     if killed && !currently_unwinding() {\n         fail \"killed\";\n     }\n }\n \n-/*\n-Function: yield\n-\n-Yield control to the task scheduler\n-\n-The scheduler may schedule another task to execute.\n-*/\n-fn yield() { sleep(1u) }\n-\n /*\n Function: join\n \n@@ -374,9 +359,6 @@ fn try<T:send>(+f: fn~() -> T) -> result::t<T,()> {\n \n #[cfg(test)]\n mod tests {\n-    #[test]\n-    fn test_sleep() { sleep(1000000u); }\n-\n     // FIXME: Leaks on windows\n     #[test]\n     #[ignore(cfg(target_os = \"win32\"))]"}, {"sha": "b5f7a2a07ec386487385819d3f7459edf86ac01a", "filename": "src/rt/intrinsics/intrinsics.cpp", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.cpp?ref=18de0f2aeb16439cfb220e344c15d88b0f41c82d", "patch": "@@ -10,7 +10,7 @@\n #include <cstring>\n \n extern \"C\" CDECL void\n-rust_task_sleep(rust_task *task, size_t time_in_us, bool *killed);\n+rust_task_yield(rust_task *task, bool *killed);\n \n extern \"C\" void\n rust_intrinsic_vec_len(size_t *retptr,\n@@ -77,11 +77,10 @@ rust_intrinsic_get_type_desc(void **retptr,\n }\n \n extern \"C\" void\n-rust_intrinsic_task_sleep(void **retptr,\n+rust_intrinsic_task_yield(void **retptr,\n                           void *env,\n \t\t\t  rust_task *task,\n-                          size_t time_in_us,\n \t\t\t  bool *killed) {\n-    rust_task_sleep(task, time_in_us, killed);\n+    rust_task_yield(task, killed);\n }\n "}, {"sha": "ca67bf91d8962ab8c0290d2ceaacbb471d6f73cb", "filename": "src/rt/intrinsics/intrinsics.i386.ll.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in?ref=18de0f2aeb16439cfb220e344c15d88b0f41c82d", "patch": "@@ -10,7 +10,7 @@ target triple = \"@CFG_TARGET_TRIPLE@\"\n %struct.rust_vec = type { i32, i32, [0 x i8] }\n %struct.rust_fn = type { i32*, %struct.rust_box* }\n %struct.rust_box = type opaque\n-%struct.rust_task = type { %struct.rust_task_user, i32, [8 x i8], %class.context, %struct.stk_seg*, i32, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i32, %class.timer, i32*, i32, i32, %class.memory_region, %class.boxed_region, i8, i8, i8, %class.lock_and_signal, %class.hash_map.4, %class.rust_obstack, i32, %\"class.debug::task_debug_info\", i32, [8 x i8] }\n+%struct.rust_task = type { %struct.rust_task_user, i32, [8 x i8], %class.context, %struct.stk_seg*, i32, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i32, i32*, i32, i32, %class.memory_region, %class.boxed_region, i8, i8, i8, %class.lock_and_signal, %class.hash_map.4, %class.rust_obstack, i32, %\"class.debug::task_debug_info\", i32, [12 x i8] }\n %struct.rust_task_user = type { i32, i32, %struct.chan_handle, i32 }\n %struct.chan_handle = type { i32, i32 }\n %class.context = type { %struct.registers_t, %class.context*, [12 x i8] }\n@@ -42,7 +42,6 @@ target triple = \"@CFG_TARGET_TRIPLE@\"\n %\"struct.hash_map<int, rust_task *>::map_entry\" = type opaque\n %union.pthread_attr_t = type { i32, [32 x i8] }\n %struct.rust_cond = type { i8 }\n-%class.timer = type { i32 (...)**, i64, i64 }\n %class.boxed_region = type { %class.memory_region*, %struct.rust_opaque_box* }\n %struct.rust_opaque_box = type { i32, %struct.type_desc*, %struct.rust_opaque_box*, %struct.rust_opaque_box* }\n %class.hash_map.4 = type { %\"struct.hash_map<int, rust_port *>::map_entry\"* }\n@@ -113,13 +112,13 @@ entry:\n   ret void\n }\n \n-define void @rust_intrinsic_task_sleep(i8** nocapture %retptr, i8* nocapture %env, %struct.rust_task* %task, i32 %time_in_us, i8* %killed) {\n+define void @rust_intrinsic_task_yield(i8** nocapture %retptr, i8* nocapture %env, %struct.rust_task* %task, i8* %killed) {\n entry:\n-  tail call void @rust_task_sleep(%struct.rust_task* %task, i32 %time_in_us, i8* %killed)\n+  tail call void @rust_task_yield(%struct.rust_task* %task, i8* %killed)\n   ret void\n }\n \n-declare void @rust_task_sleep(%struct.rust_task*, i32, i8*)\n+declare void @rust_task_yield(%struct.rust_task*, i8*)\n \n !0 = metadata !{metadata !\"any pointer\", metadata !1}\n !1 = metadata !{metadata !\"omnipotent char\", metadata !2}"}, {"sha": "ac96036a3e0462d30f415672db8b0206e7a2ed9b", "filename": "src/rt/intrinsics/intrinsics.x86_64.ll.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in?ref=18de0f2aeb16439cfb220e344c15d88b0f41c82d", "patch": "@@ -10,7 +10,7 @@ target triple = \"@CFG_TARGET_TRIPLE@\"\n %struct.rust_vec = type { i64, i64, [0 x i8] }\n %struct.rust_fn = type { i64*, %struct.rust_box* }\n %struct.rust_box = type opaque\n-%struct.rust_task = type { %struct.rust_task_user, i64, %class.context, %struct.stk_seg*, i64, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i64, %class.timer, i64*, i32, i32, %class.memory_region, %class.boxed_region, i8, i8, i8, %class.lock_and_signal, %class.hash_map.4, %class.rust_obstack, i32, %\"class.debug::task_debug_info\", i64, [8 x i8] }\n+%struct.rust_task = type { %struct.rust_task_user, i64, %class.context, %struct.stk_seg*, i64, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i64, i64*, i32, i32, %class.memory_region, %class.boxed_region, i8, i8, i8, %class.lock_and_signal, %class.hash_map.4, %class.rust_obstack, i32, %\"class.debug::task_debug_info\", i64 }\n %struct.rust_task_user = type { i64, i64, %struct.chan_handle, i64 }\n %struct.chan_handle = type { i64, i64 }\n %class.context = type { %struct.registers_t, %class.context*, [8 x i8] }\n@@ -42,7 +42,6 @@ target triple = \"@CFG_TARGET_TRIPLE@\"\n %\"struct.hash_map<long, rust_task *>::map_entry\" = type opaque\n %union.pthread_attr_t = type { i64, [48 x i8] }\n %struct.rust_cond = type { i8 }\n-%class.timer = type { i32 (...)**, i64, i64 }\n %class.boxed_region = type { %class.memory_region*, %struct.rust_opaque_box* }\n %struct.rust_opaque_box = type { i64, %struct.type_desc*, %struct.rust_opaque_box*, %struct.rust_opaque_box* }\n %class.hash_map.4 = type { %\"struct.hash_map<long, rust_port *>::map_entry\"* }\n@@ -113,13 +112,13 @@ entry:\n   ret void\n }\n \n-define void @rust_intrinsic_task_sleep(i8** nocapture %retptr, i8* nocapture %env, %struct.rust_task* %task, i64 %time_in_us, i8* %killed) uwtable {\n+define void @rust_intrinsic_task_yield(i8** nocapture %retptr, i8* nocapture %env, %struct.rust_task* %task, i8* %killed) uwtable {\n entry:\n-  tail call void @rust_task_sleep(%struct.rust_task* %task, i64 %time_in_us, i8* %killed)\n+  tail call void @rust_task_yield(%struct.rust_task* %task, i8* %killed)\n   ret void\n }\n \n-declare void @rust_task_sleep(%struct.rust_task*, i64, i8*)\n+declare void @rust_task_yield(%struct.rust_task*, i8*)\n \n !0 = metadata !{metadata !\"any pointer\", metadata !1}\n !1 = metadata !{metadata !\"omnipotent char\", metadata !2}"}, {"sha": "140c4f1ae84e0e820642c5ef98aa8ad82841d303", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=18de0f2aeb16439cfb220e344c15d88b0f41c82d", "patch": "@@ -499,8 +499,8 @@ chan_id_send(type_desc *t, rust_task_id target_task_id,\n // This is called by an intrinsic on the Rust stack and must run\n // entirely in the red zone. Do not call on the C stack.\n extern \"C\" CDECL void\n-rust_task_sleep(rust_task *task, size_t time_in_us, bool *killed) {\n-    task->yield(time_in_us, killed);\n+rust_task_yield(rust_task *task, bool *killed) {\n+    task->yield(killed);\n }\n \n extern \"C\" CDECL void"}, {"sha": "faeae72f9db947693b6d57fd1763bc4e4e80eb34", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=18de0f2aeb16439cfb220e344c15d88b0f41c82d", "patch": "@@ -401,7 +401,7 @@ void rust_task::start()\n \n // Only run this on the rust stack\n void\n-rust_task::yield(size_t time_in_us, bool *killed) {\n+rust_task::yield(bool *killed) {\n     if (this->killed) {\n         *killed = true;\n     }"}, {"sha": "e150135b8d01264d89e654bbd47aec6e776f2342", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=18de0f2aeb16439cfb220e344c15d88b0f41c82d", "patch": "@@ -159,8 +159,8 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     // Print a backtrace, if the \"bt\" logging option is on.\n     void backtrace();\n \n-    // Yields for a specified duration of time.\n-    void yield(size_t time_in_ms, bool *killed);\n+    // Yields control to the scheduler. Called from the Rust stack\n+    void yield(bool *killed);\n \n     // Fail this task (assuming caller-on-stack is different task).\n     void kill();"}, {"sha": "87f6285fdfc1bc4797bbfe1aa3aa9e7af5dabb1b", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=18de0f2aeb16439cfb220e344c15d88b0f41c82d", "patch": "@@ -45,8 +45,8 @@ rust_run_program\n rust_set_exit_status\n rust_start\n rust_getcwd\n+rust_task_yield\n rust_task_is_unwinding\n-rust_task_sleep\n rust_get_task\n sched_threads\n shape_log_str"}, {"sha": "beaa93c02e0d021f72bb204f28e0bbd3a0a886bf", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18de0f2aeb16439cfb220e344c15d88b0f41c82d/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=18de0f2aeb16439cfb220e344c15d88b0f41c82d", "patch": "@@ -10,7 +10,11 @@ fn test00() {\n     let t = task::spawn_joinable {|| start(i); };\n \n     // Sleep long enough for the task to finish.\n-    task::sleep(10000u);\n+    let i = 0;\n+    while i < 10000 {\n+        task::yield();\n+        i += 1;\n+    }\n \n     // Try joining tasks that have already finished.\n     task::join(t);"}]}