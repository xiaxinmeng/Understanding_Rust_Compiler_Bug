{"sha": "579eb2400b3cb5d9cf03a5c8792d63630489193a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3OWViMjQwMGIzY2I1ZDljZjAzYTVjODc5MmQ2MzYzMDQ4OTE5M2E=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-03-05T22:02:44Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-21T12:37:21Z"}, "message": "test: Automatically remove all `~[T]` from tests.", "tree": {"sha": "70c72f3543770a13bdde43159c05d84b31afc580", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70c72f3543770a13bdde43159c05d84b31afc580"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/579eb2400b3cb5d9cf03a5c8792d63630489193a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/579eb2400b3cb5d9cf03a5c8792d63630489193a", "html_url": "https://github.com/rust-lang/rust/commit/579eb2400b3cb5d9cf03a5c8792d63630489193a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/579eb2400b3cb5d9cf03a5c8792d63630489193a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b714b4ba6411c6997324d442a3df602e5920ff5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b714b4ba6411c6997324d442a3df602e5920ff5", "html_url": "https://github.com/rust-lang/rust/commit/0b714b4ba6411c6997324d442a3df602e5920ff5"}], "stats": {"total": 1270, "additions": 628, "deletions": 642}, "files": [{"sha": "823c856da13a6b949796183c1d913be2ba0459fc", "filename": "src/test/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -12,6 +12,7 @@\n \n use std::libc;\n \n+use std::vec_ng::Vec;\n #[link(name=\"rustrt\")]\n extern {\n     pub fn rust_get_test_int() -> libc::intptr_t;"}, {"sha": "a6d6372f88f2fff45eb8822edb979431786edeea", "filename": "src/test/auxiliary/cci_class_6.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,21 +10,21 @@\n \n pub mod kitties {\n     pub struct cat<U> {\n-        priv info : ~[U],\n+        priv info : Vec<U> ,\n         priv meows : uint,\n \n         how_hungry : int,\n     }\n \n     impl<U> cat<U> {\n-        pub fn speak<T>(&mut self, stuff: ~[T]) {\n+        pub fn speak<T>(&mut self, stuff: Vec<T> ) {\n             self.meows += stuff.len();\n         }\n \n         pub fn meow_count(&mut self) -> uint { self.meows }\n     }\n \n-    pub fn cat<U>(in_x : uint, in_y : int, in_info: ~[U]) -> cat<U> {\n+    pub fn cat<U>(in_x : uint, in_y : int, in_info: Vec<U> ) -> cat<U> {\n         cat {\n             meows: in_x,\n             how_hungry: in_y,"}, {"sha": "a9be1e62195ff9665904b52f60f03b769e77220b", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -19,7 +19,7 @@ pub struct Entry<A,B> {\n \n pub struct alist<A,B> {\n     eq_fn: extern \"Rust\" fn(A,A) -> bool,\n-    data: @RefCell<~[Entry<A,B>]>,\n+    data: @RefCell<Vec<Entry<A,B>> >,\n }\n \n pub fn alist_add<A:'static,B:'static>(lst: &alist<A,B>, k: A, v: B) {\n@@ -47,7 +47,7 @@ pub fn new_int_alist<B:'static>() -> alist<int, B> {\n     fn eq_int(a: int, b: int) -> bool { a == b }\n     return alist {\n         eq_fn: eq_int,\n-        data: @RefCell::new(~[]),\n+        data: @RefCell::new(Vec::new()),\n     };\n }\n \n@@ -57,6 +57,6 @@ pub fn new_int_alist_2<B:'static>() -> alist<int, B> {\n     fn eq_int(a: int, b: int) -> bool { a == b }\n     return alist {\n         eq_fn: eq_int,\n-        data: @RefCell::new(~[]),\n+        data: @RefCell::new(Vec::new()),\n     };\n }"}, {"sha": "ac8d3181227d3d5bf5ad4ba7954c821e08c46575", "filename": "src/test/auxiliary/cci_no_inline_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,7 +11,7 @@\n #[crate_id=\"cci_no_inline_lib\"];\n \n // same as cci_iter_lib, more-or-less, but not marked inline\n-pub fn iter(v: ~[uint], f: |uint|) {\n+pub fn iter(v: Vec<uint> , f: |uint|) {\n     let mut i = 0u;\n     let n = v.len();\n     while i < n {"}, {"sha": "e4b8b9e166d46ace1a308ad3436df214034a0c44", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -17,7 +17,7 @@ extern crate collections;\n use std::cell::RefCell;\n use collections::HashMap;\n \n-pub type header_map = HashMap<~str, @RefCell<~[@~str]>>;\n+pub type header_map = HashMap<~str, @RefCell<vec!(@~str)>>;\n \n // the unused ty param is necessary so this gets monomorphized\n pub fn request<T>(req: &header_map) {"}, {"sha": "3323e56e8f4a96956bc3e678e4fee2ebb12449ea", "filename": "src/test/auxiliary/issue_2723_a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub unsafe fn f(xs: ~[int]) {\n+pub unsafe fn f(xs: Vec<int> ) {\n     xs.map(|_x| { unsafe fn q() { fail!(); } });\n }"}, {"sha": "edac363eb1af7234b06fb08f6917d0ea1e529dd9", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -21,6 +21,7 @@ use std::mem::swap;\n use std::os;\n use std::str;\n use std::slice;\n+use std::vec;\n use std::io::File;\n \n macro_rules! bench (\n@@ -61,8 +62,8 @@ fn maybe_run_test(argv: &[~str], name: ~str, test: ||) {\n }\n \n fn shift_push() {\n-    let mut v1 = slice::from_elem(30000, 1);\n-    let mut v2 = ~[];\n+    let mut v1 = Vec::from_elem(30000, 1);\n+    let mut v2 = Vec::new();\n \n     while v1.len() > 0 {\n         v2.push(v1.shift().unwrap());\n@@ -85,7 +86,7 @@ fn read_line() {\n fn vec_plus() {\n     let mut r = rand::task_rng();\n \n-    let mut v = ~[];\n+    let mut v = Vec::new();\n     let mut i = 0;\n     while i < 1500 {\n         let rv = slice::from_elem(r.gen_range(0u, i + 1), i);\n@@ -101,15 +102,15 @@ fn vec_plus() {\n fn vec_append() {\n     let mut r = rand::task_rng();\n \n-    let mut v = ~[];\n+    let mut v = Vec::new();\n     let mut i = 0;\n     while i < 1500 {\n         let rv = slice::from_elem(r.gen_range(0u, i + 1), i);\n         if r.gen() {\n-            v = slice::append(v, rv);\n+            v = vec::append(v, rv);\n         }\n         else {\n-            v = slice::append(rv, v);\n+            v = vec::append(rv, v);\n         }\n         i += 1;\n     }\n@@ -118,7 +119,7 @@ fn vec_append() {\n fn vec_push_all() {\n     let mut r = rand::task_rng();\n \n-    let mut v = ~[];\n+    let mut v = Vec::new();\n     for i in range(0u, 1500) {\n         let mut rv = slice::from_elem(r.gen_range(0u, i + 1), i);\n         if r.gen() {\n@@ -132,7 +133,7 @@ fn vec_push_all() {\n }\n \n fn is_utf8_ascii() {\n-    let mut v : ~[u8] = ~[];\n+    let mut v : Vec<u8> = Vec::new();\n     for _ in range(0u, 20000) {\n         v.push('b' as u8);\n         if !str::is_utf8(v) {\n@@ -143,7 +144,7 @@ fn is_utf8_ascii() {\n \n fn is_utf8_multibyte() {\n     let s = \"b\u00a2\u20ac\ud852\udf62\";\n-    let mut v : ~[u8]= ~[];\n+    let mut v : Vec<u8> = Vec::new();\n     for _ in range(0u, 5000) {\n         v.push_all(s.as_bytes());\n         if !str::is_utf8(v) {"}, {"sha": "07571b17905cf040f7056fbd15031ee047858944", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -14,9 +14,9 @@ use std::uint;\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"10000000\"]\n+        vec!(~\"\", ~\"10000000\")\n     } else if args.len() <= 1u {\n-        ~[~\"\", ~\"100000\"]\n+        vec!(~\"\", ~\"100000\")\n     } else {\n         args\n     };"}, {"sha": "ea07320dd94210811d54808bccad6b1a7d5a57d1", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -59,7 +59,7 @@ fn run(args: &[~str]) {\n     let workers = from_str::<uint>(args[2]).unwrap();\n     let num_bytes = 100;\n     let start = time::precise_time_s();\n-    let mut worker_results = ~[];\n+    let mut worker_results = Vec::new();\n     for _ in range(0u, workers) {\n         let to_child = to_child.clone();\n         let mut builder = task::task();\n@@ -96,9 +96,9 @@ fn run(args: &[~str]) {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"1000000\", ~\"10000\"]\n+        vec!(~\"\", ~\"1000000\", ~\"10000\")\n     } else if args.len() <= 1u {\n-        ~[~\"\", ~\"10000\", ~\"4\"]\n+        vec!(~\"\", ~\"10000\", ~\"4\")\n     } else {\n         args.clone()\n     };"}, {"sha": "7e2c5ba46b20a01ae9cb712d7b745354b09fdc15", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -53,7 +53,7 @@ fn run(args: &[~str]) {\n     let workers = from_str::<uint>(args[2]).unwrap();\n     let num_bytes = 100;\n     let start = time::precise_time_s();\n-    let mut worker_results = ~[];\n+    let mut worker_results = Vec::new();\n     let from_parent = if workers == 1 {\n         let (to_child, from_parent) = channel();\n         let mut builder = task::task();\n@@ -106,9 +106,9 @@ fn run(args: &[~str]) {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"1000000\", ~\"8\"]\n+        vec!(~\"\", ~\"1000000\", ~\"8\")\n     } else if args.len() <= 1u {\n-        ~[~\"\", ~\"10000\", ~\"4\"]\n+        vec!(~\"\", ~\"10000\", ~\"4\")\n     } else {\n         args.clone()\n     };"}, {"sha": "7cd904d7d1473860b5850a3983d049b4734835d1", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -25,7 +25,7 @@ use std::os;\n use std::uint;\n \n // A poor man's pipe.\n-type pipe = MutexArc<~[uint]>;\n+type pipe = MutexArc<Vec<uint> >;\n \n fn send(p: &pipe, msg: uint) {\n     unsafe {\n@@ -47,7 +47,7 @@ fn recv(p: &pipe) -> uint {\n }\n \n fn init() -> (pipe,pipe) {\n-    let m = MutexArc::new(~[]);\n+    let m = MutexArc::new(Vec::new());\n     ((&m).clone(), m)\n }\n \n@@ -71,9 +71,9 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"100\", ~\"10000\"]\n+        vec!(~\"\", ~\"100\", ~\"10000\")\n     } else if args.len() <= 1u {\n-        ~[~\"\", ~\"10\", ~\"100\"]\n+        vec!(~\"\", ~\"10\", ~\"100\")\n     } else {\n         args.clone()\n     };\n@@ -86,7 +86,7 @@ fn main() {\n     let start = time::precise_time_s();\n \n     // create the ring\n-    let mut futures = ~[];\n+    let mut futures = Vec::new();\n \n     for i in range(1u, num_tasks) {\n         //println!(\"spawning %?\", i);"}, {"sha": "c615c510465e6783858df0c8f1d36b20388248db", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -24,7 +24,7 @@ use std::os;\n use std::uint;\n \n // A poor man's pipe.\n-type pipe = RWArc<~[uint]>;\n+type pipe = RWArc<Vec<uint> >;\n \n fn send(p: &pipe, msg: uint) {\n     p.write_cond(|state, cond| {\n@@ -42,7 +42,7 @@ fn recv(p: &pipe) -> uint {\n }\n \n fn init() -> (pipe,pipe) {\n-    let x = RWArc::new(~[]);\n+    let x = RWArc::new(Vec::new());\n     ((&x).clone(), x)\n }\n \n@@ -66,9 +66,9 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"100\", ~\"10000\"]\n+        vec!(~\"\", ~\"100\", ~\"10000\")\n     } else if args.len() <= 1u {\n-        ~[~\"\", ~\"10\", ~\"100\"]\n+        vec!(~\"\", ~\"10\", ~\"100\")\n     } else {\n         args.clone()\n     };\n@@ -81,7 +81,7 @@ fn main() {\n     let start = time::precise_time_s();\n \n     // create the ring\n-    let mut futures = ~[];\n+    let mut futures = Vec::new();\n \n     for i in range(1u, num_tasks) {\n         //println!(\"spawning %?\", i);"}, {"sha": "00075415f499d2ff376762d31d438db3e76b4a58", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -25,9 +25,9 @@ fn ack(m: int, n: int) -> int {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"12\"]\n+        vec!(~\"\", ~\"12\")\n     } else if args.len() <= 1u {\n-        ~[~\"\", ~\"8\"]\n+        vec!(~\"\", ~\"8\")\n     } else {\n         args\n     };"}, {"sha": "c4671b4203f36ab495997fd708f091a63d8d0d88", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -39,7 +39,7 @@ fn show_color(cc: color) -> ~str {\n     }\n }\n \n-fn show_color_list(set: ~[color]) -> ~str {\n+fn show_color_list(set: vec!(color)) -> ~str {\n     let mut out = ~\"\";\n     for col in set.iter() {\n         out.push_char(' ');\n@@ -132,7 +132,7 @@ fn creature(\n     }\n }\n \n-fn rendezvous(nn: uint, set: ~[color]) {\n+fn rendezvous(nn: uint, set: vec!(color)) {\n \n     // these ports will allow us to hear from the creatures\n     let (to_rendezvous, from_creatures) = channel::<CreatureInfo>();\n@@ -141,7 +141,7 @@ fn rendezvous(nn: uint, set: ~[color]) {\n     // these channels will be passed to the creatures so they can talk to us\n \n     // these channels will allow us to talk to each creature by 'name'/index\n-    let to_creature: ~[Sender<Option<CreatureInfo>>] =\n+    let to_creature: Vec<Sender<Option<CreatureInfo>>> =\n         set.iter().enumerate().map(|(ii, col)| {\n             // create each creature as a listener with a port, and\n             // give us a channel to talk to each\n@@ -179,7 +179,7 @@ fn rendezvous(nn: uint, set: ~[color]) {\n     }\n \n     // save each creature's meeting stats\n-    let mut report = ~[];\n+    let mut report = Vec::new();\n     for _to_one in to_creature.iter() {\n         report.push(from_creatures_log.recv());\n     }\n@@ -199,9 +199,9 @@ fn rendezvous(nn: uint, set: ~[color]) {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"200000\"]\n+        vec!(~\"\", ~\"200000\")\n     } else if args.len() <= 1u {\n-        ~[~\"\", ~\"600\"]\n+        vec!(~\"\", ~\"600\")\n     } else {\n         args\n     };\n@@ -211,9 +211,9 @@ fn main() {\n     print_complements();\n     println!(\"\");\n \n-    rendezvous(nn, ~[Blue, Red, Yellow]);\n+    rendezvous(nn, vec!(Blue, Red, Yellow));\n     println!(\"\");\n \n     rendezvous(nn,\n-        ~[Blue, Red, Yellow, Red, Yellow, Blue, Red, Yellow, Red, Blue]);\n+        vec!(Blue, Red, Yellow, Red, Yellow, Blue, Red, Yellow, Red, Blue));\n }"}, {"sha": "a21963ee0a9a93e99e3bf624083f29f4b7d5f7cf", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -59,8 +59,8 @@ static HOMO_SAPIENS: [AminoAcid, ..4] = [\n ];\n \n // FIXME: Use map().\n-fn sum_and_scale(a: &'static [AminoAcid]) -> ~[AminoAcid] {\n-    let mut result = ~[];\n+fn sum_and_scale(a: &'static [AminoAcid]) -> Vec<AminoAcid> {\n+    let mut result = Vec::new();\n     let mut p = 0f32;\n     for a_i in a.iter() {\n         let mut a_i = *a_i;"}, {"sha": "76ac8407d60c57a77fb1332d2334445e6f219c40", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -36,8 +36,7 @@ impl MyRandom {\n \n struct AAGen<'a> {\n     rng: &'a mut MyRandom,\n-    data: ~[(u32, u8)]\n-}\n+    data: Vec<(u32, u8)> }\n impl<'a> AAGen<'a> {\n     fn new<'b>(rng: &'b mut MyRandom, aa: &[(char, f32)]) -> AAGen<'b> {\n         let mut cum = 0.;"}, {"sha": "eec54198c04700f09a88edabaf3394cf10637d00", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -21,9 +21,9 @@ fn fib(n: int) -> int {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"40\"]\n+        vec!(~\"\", ~\"40\")\n     } else if args.len() <= 1u {\n-        ~[~\"\", ~\"30\"]\n+        vec!(~\"\", ~\"30\")\n     } else {\n         args\n     };"}, {"sha": "1b1a41e610c2c560cdf0f8b425b56e6d066d764a", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -42,19 +42,19 @@ fn f64_cmp(x: f64, y: f64) -> Ordering {\n }\n \n // given a map, print a sorted version of it\n-fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n+fn sort_and_fmt(mm: &HashMap<Vec<u8> , uint>, total: uint) -> ~str {\n    fn pct(xx: uint, yy: uint) -> f64 {\n       return (xx as f64) * 100.0 / (yy as f64);\n    }\n \n    // sort by key, then by value\n-   fn sortKV(mut orig: ~[(~[u8],f64)]) -> ~[(~[u8],f64)] {\n+   fn sortKV(mut orig: Vec<(Vec<u8> ,f64)> ) -> Vec<(Vec<u8> ,f64)> {\n         orig.sort_by(|&(ref a, _), &(ref b, _)| a.cmp(b));\n         orig.sort_by(|&(_, a), &(_, b)| f64_cmp(b, a));\n         orig\n    }\n \n-   let mut pairs = ~[];\n+   let mut pairs = Vec::new();\n \n    // map -> [(k,%)]\n    for (key, &val) in mm.iter() {\n@@ -76,7 +76,7 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n }\n \n // given a map, search for the frequency of a pattern\n-fn find(mm: &HashMap<~[u8], uint>, key: ~str) -> uint {\n+fn find(mm: &HashMap<Vec<u8> , uint>, key: ~str) -> uint {\n    let key = key.into_ascii().to_lower().into_str();\n    match mm.find_equiv(&key.as_bytes()) {\n       option::None      => { return 0u; }\n@@ -85,7 +85,7 @@ fn find(mm: &HashMap<~[u8], uint>, key: ~str) -> uint {\n }\n \n // given a map, increment the counter for a key\n-fn update_freq(mm: &mut HashMap<~[u8], uint>, key: &[u8]) {\n+fn update_freq(mm: &mut HashMap<Vec<u8> , uint>, key: &[u8]) {\n     let key = key.to_owned();\n     let newval = match mm.pop(&key) {\n         Some(v) => v + 1,\n@@ -97,7 +97,7 @@ fn update_freq(mm: &mut HashMap<~[u8], uint>, key: &[u8]) {\n // given a ~[u8], for each window call a function\n // i.e., for \"hello\" and windows of size four,\n // run it(\"hell\") and it(\"ello\"), then return \"llo\"\n-fn windows_with_carry(bb: &[u8], nn: uint, it: |window: &[u8]|) -> ~[u8] {\n+fn windows_with_carry(bb: &[u8], nn: uint, it: |window: &[u8]|) -> Vec<u8> {\n    let mut ii = 0u;\n \n    let len = bb.len();\n@@ -110,18 +110,18 @@ fn windows_with_carry(bb: &[u8], nn: uint, it: |window: &[u8]|) -> ~[u8] {\n }\n \n fn make_sequence_processor(sz: uint,\n-                           from_parent: &Receiver<~[u8]>,\n+                           from_parent: &Receiver<Vec<u8>>,\n                            to_parent: &Sender<~str>) {\n-   let mut freqs: HashMap<~[u8], uint> = HashMap::new();\n-   let mut carry: ~[u8] = ~[];\n+   let mut freqs: HashMap<Vec<u8>, uint> = HashMap::new();\n+   let mut carry = Vec::new();\n    let mut total: uint = 0u;\n \n-   let mut line: ~[u8];\n+   let mut line: Vec<u8> ;\n \n    loop {\n \n       line = from_parent.recv();\n-      if line == ~[] { break; }\n+      if line == Vec::new() { break; }\n \n        carry = windows_with_carry(carry + line, sz, |window| {\n          update_freq(&mut freqs, window);\n@@ -156,9 +156,9 @@ fn main() {\n     let mut rdr = BufferedReader::new(rdr);\n \n     // initialize each sequence sorter\n-    let sizes = ~[1u,2,3,4,6,12,18];\n-    let mut streams = slice::from_fn(sizes.len(), |_| Some(channel::<~str>()));\n-    let mut from_child = ~[];\n+    let sizes = vec!(1u,2,3,4,6,12,18);\n+    let mut streams = Vec::from_fn(sizes.len(), |_| Some(channel::<~str>()));\n+    let mut from_child = Vec::new();\n     let to_child  = sizes.iter().zip(streams.mut_iter()).map(|(sz, stream_ref)| {\n         let sz = *sz;\n         let stream = replace(stream_ref, None);\n@@ -173,7 +173,7 @@ fn main() {\n         });\n \n         to_child\n-    }).collect::<~[Sender<~[u8]>]>();\n+    }).collect::<Vec<Sender<Vec<u8> >> >();\n \n \n    // latch stores true after we've started\n@@ -215,7 +215,7 @@ fn main() {\n \n    // finish...\n    for (ii, _sz) in sizes.iter().enumerate() {\n-       to_child[ii].send(~[]);\n+       to_child[ii].send(Vec::new());\n    }\n \n    // now fetch and print result messages"}, {"sha": "d2cf4599df2d4500dd5c07b8b67c1bef7369b9a8", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -50,7 +50,7 @@ impl Code {\n     // FIXME: Inefficient.\n     fn unpack(&self, frame: i32) -> ~str {\n         let mut key = self.hash();\n-        let mut result = ~[];\n+        let mut result = Vec::new();\n         for _ in range(0, frame) {\n             result.push(unpack_symbol((key as u8) & 3));\n             key >>= 2;\n@@ -92,8 +92,7 @@ struct Entry {\n \n struct Table {\n     count: i32,\n-    items: ~[Option<~Entry>]\n-}\n+    items: Vec<Option<~Entry>> }\n \n struct Items<'a> {\n     cur: Option<&'a Entry>,\n@@ -237,7 +236,7 @@ fn generate_frequencies(frequencies: &mut Table,\n }\n \n fn print_frequencies(frequencies: &Table, frame: i32) {\n-    let mut vector = ~[];\n+    let mut vector = Vec::new();\n     for entry in frequencies.iter() {\n         vector.push((entry.code, entry.count));\n     }"}, {"sha": "81b712cf9c6a7dd8df7f74942e291b096861c21b", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -63,7 +63,7 @@ impl<'a, T> Iterator<&'a T> for ListIterator<'a, T> {\n // corresponding mirrored piece), with, as minimum coordinates, (0,\n // 0).  If all is false, only generate half of the possibilities (used\n // to break the symetry of the board).\n-fn transform(piece: ~[(int, int)], all: bool) -> ~[~[(int, int)]] {\n+fn transform(piece: Vec<(int, int)> , all: bool) -> vec!(Vec<(int, int)> ) {\n     let mut res =\n         // rotations\n         iterate(piece, |rot| rot.iter().map(|&(y, x)| (x + y, -y)).collect())\n@@ -107,25 +107,25 @@ fn mask(dy: int, dx: int, id: uint, p: &[(int, int)]) -> Option<u64> {\n // Makes every possible masks.  masks[id][i] correspond to every\n // possible masks for piece with identifier id with minimum coordinate\n // (i/5, i%5).\n-fn make_masks() -> ~[~[~[u64]]] {\n-    let pieces = ~[\n-        ~[(0,0),(0,1),(0,2),(0,3),(1,3)],\n-        ~[(0,0),(0,2),(0,3),(1,0),(1,1)],\n-        ~[(0,0),(0,1),(0,2),(1,2),(2,1)],\n-        ~[(0,0),(0,1),(0,2),(1,1),(2,1)],\n-        ~[(0,0),(0,2),(1,0),(1,1),(2,1)],\n-        ~[(0,0),(0,1),(0,2),(1,1),(1,2)],\n-        ~[(0,0),(0,1),(1,1),(1,2),(2,1)],\n-        ~[(0,0),(0,1),(0,2),(1,0),(1,2)],\n-        ~[(0,0),(0,1),(0,2),(1,2),(1,3)],\n-        ~[(0,0),(0,1),(0,2),(0,3),(1,2)]];\n-    let mut res = ~[];\n+fn make_masks() -> Vec<Vec<Vec<u64> > > {\n+    let pieces = vec!(\n+        vec!((0,0),(0,1),(0,2),(0,3),(1,3)),\n+        vec!((0,0),(0,2),(0,3),(1,0),(1,1)),\n+        vec!((0,0),(0,1),(0,2),(1,2),(2,1)),\n+        vec!((0,0),(0,1),(0,2),(1,1),(2,1)),\n+        vec!((0,0),(0,2),(1,0),(1,1),(2,1)),\n+        vec!((0,0),(0,1),(0,2),(1,1),(1,2)),\n+        vec!((0,0),(0,1),(1,1),(1,2),(2,1)),\n+        vec!((0,0),(0,1),(0,2),(1,0),(1,2)),\n+        vec!((0,0),(0,1),(0,2),(1,2),(1,3)),\n+        vec!((0,0),(0,1),(0,2),(0,3),(1,2)));\n+    let mut res = Vec::new();\n     for (id, p) in pieces.move_iter().enumerate() {\n         // To break the central symetry of the problem, every\n         // transformation must be taken except for one piece (piece 3\n         // here).\n         let trans = transform(p, id != 3);\n-        let mut cur_piece = ~[];\n+        let mut cur_piece = Vec::new();\n         for dy in range(0, 10) {\n             for dx in range(0, 5) {\n                 let masks =\n@@ -142,7 +142,7 @@ fn make_masks() -> ~[~[~[u64]]] {\n \n // Check if all coordinates can be covered by an unused piece and that\n // all unused piece can be placed on the board.\n-fn is_board_unfeasible(board: u64, masks: &[~[~[u64]]]) -> bool {\n+fn is_board_unfeasible(board: u64, masks: &[Vec<Vec<u64> > ]) -> bool {\n     let mut coverable = board;\n     for i in range(0, 50).filter(|&i| board & 1 << i == 0) {\n         for (cur_id, pos_masks) in masks.iter().enumerate() {\n@@ -159,7 +159,7 @@ fn is_board_unfeasible(board: u64, masks: &[~[~[u64]]]) -> bool {\n }\n \n // Filter the masks that we can prove to result to unfeasible board.\n-fn filter_masks(masks: &[~[~[u64]]]) -> ~[~[~[u64]]] {\n+fn filter_masks(masks: &[Vec<Vec<u64> > ]) -> Vec<Vec<Vec<u64> > > {\n     masks.iter().map(\n         |p| p.iter().map(\n             |p| p.iter()\n@@ -180,7 +180,7 @@ fn get_id(m: u64) -> u8 {\n \n // Converts a list of mask to a ~str.\n fn to_utf8(raw_sol: &List<u64>) -> ~str {\n-    let mut sol: ~[u8] = std::slice::from_elem(50, '.' as u8);\n+    let mut sol: Vec<u8> = Vec::from_elem(50, '.' as u8);\n     for &m in raw_sol.iter() {\n         let id = get_id(m);\n         for i in range(0, 50) {\n@@ -237,7 +237,7 @@ fn handle_sol(raw_sol: &List<u64>, data: &mut Data) -> bool {\n // Search for every solutions.  Returns false if the search was\n // stopped before the end.\n fn search(\n-    masks: &[~[~[u64]]],\n+    masks: &[Vec<Vec<u64> > ],\n     board: u64,\n     mut i: int,\n     cur: List<u64>,"}, {"sha": "72ae6c4d0146332077055d57625c7d70ed9bfb21", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -148,9 +148,9 @@ fn offset_momentum(bodies: &mut [Planet, ..N_BODIES]) {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"1000\"]\n+        vec!(~\"\", ~\"1000\")\n     } else if args.len() <= 1u {\n-        ~[~\"\", ~\"1000\"]\n+        vec!(~\"\", ~\"1000\")\n     } else {\n         args\n     };"}, {"sha": "6c3b75ef473a9ede269fb5c4c1c7550fc9d45488", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -51,8 +51,8 @@ struct Config {\n     stress: bool\n }\n \n-fn parse_opts(argv: ~[~str]) -> Config {\n-    let opts = ~[getopts::optflag(\"\", \"stress\", \"\")];\n+fn parse_opts(argv: Vec<~str> ) -> Config {\n+    let opts = vec!(getopts::optflag(\"\", \"stress\", \"\"));\n \n     let opt_args = argv.slice(1, argv.len());\n \n@@ -75,7 +75,7 @@ fn stress_task(id: int) {\n }\n \n fn stress(num_tasks: int) {\n-    let mut results = ~[];\n+    let mut results = Vec::new();\n     for i in range(0, num_tasks) {\n         let mut builder = task::task();\n         results.push(builder.future_result());\n@@ -91,9 +91,9 @@ fn stress(num_tasks: int) {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"20\"]\n+        vec!(~\"\", ~\"20\")\n     } else if args.len() <= 1u {\n-        ~[~\"\", ~\"8\"]\n+        vec!(~\"\", ~\"8\")\n     } else {\n         args\n     };"}, {"sha": "a387c6d146ad22ae7bf1a9e576316392b58ce223", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -29,8 +29,10 @@ fn dot(v: &[f64], u: &[f64]) -> f64 {\n     sum\n }\n \n-fn mult(v: RWArc<~[f64]>, out: RWArc<~[f64]>, f: fn(&~[f64], uint) -> f64) {\n-    // We lanch in different tasks the work to be done.  To finish\n+fn mult(v: RWArc<Vec<f64>>,\n+        out: RWArc<Vec<f64>>,\n+        f: fn(&Vec<f64>, uint) -> f64) {\n+    // We launch in different tasks the work to be done.  To finish\n     // this fuction, we need to wait for the completion of every\n     // tasks.  To do that, we give to each tasks a wait_chan that we\n     // drop at the end of the work.  At the end of this function, we\n@@ -58,31 +60,31 @@ fn mult(v: RWArc<~[f64]>, out: RWArc<~[f64]>, f: fn(&~[f64], uint) -> f64) {\n     for () in rx.iter() {}\n }\n \n-fn mult_Av_impl(v: &~[f64], i: uint) -> f64 {\n+fn mult_Av_impl(v: &Vec<f64> , i: uint) -> f64 {\n     let mut sum = 0.;\n     for (j, &v_j) in v.iter().enumerate() {\n         sum += v_j / A(i, j);\n     }\n     sum\n }\n \n-fn mult_Av(v: RWArc<~[f64]>, out: RWArc<~[f64]>) {\n+fn mult_Av(v: RWArc<Vec<f64> >, out: RWArc<Vec<f64> >) {\n     mult(v, out, mult_Av_impl);\n }\n \n-fn mult_Atv_impl(v: &~[f64], i: uint) -> f64 {\n+fn mult_Atv_impl(v: &Vec<f64> , i: uint) -> f64 {\n     let mut sum = 0.;\n     for (j, &v_j) in v.iter().enumerate() {\n         sum += v_j / A(j, i);\n     }\n     sum\n }\n \n-fn mult_Atv(v: RWArc<~[f64]>, out: RWArc<~[f64]>) {\n+fn mult_Atv(v: RWArc<Vec<f64> >, out: RWArc<Vec<f64> >) {\n     mult(v, out, mult_Atv_impl);\n }\n \n-fn mult_AtAv(v: RWArc<~[f64]>, out: RWArc<~[f64]>, tmp: RWArc<~[f64]>) {\n+fn mult_AtAv(v: RWArc<Vec<f64> >, out: RWArc<Vec<f64> >, tmp: RWArc<Vec<f64> >) {\n     mult_Av(v, tmp.clone());\n     mult_Atv(tmp, out);\n }"}, {"sha": "cfb950090a2cf78acadb7d6c97c47050b0168960", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -55,7 +55,7 @@ fn main() {\n     use std::from_str::FromStr;\n \n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"2000000\", ~\"503\"]\n+        vec!(~\"\", ~\"2000000\", ~\"503\")\n     }\n     else {\n         os::args()"}, {"sha": "674b6a8b36a2468b937534cc42d9fc382313edee", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -32,9 +32,9 @@ fn check_sequential(min: uint, max: uint, map: &SmallIntMap<uint>) {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"100000\", ~\"100\"]\n+        vec!(~\"\", ~\"100000\", ~\"100\")\n     } else if args.len() <= 1u {\n-        ~[~\"\", ~\"10000\", ~\"50\"]\n+        vec!(~\"\", ~\"10000\", ~\"50\")\n     } else {\n         args\n     };"}, {"sha": "79eee4006ceed3c80b0ff170cfb81b2eb556aab7", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -36,7 +36,7 @@ use std::slice;\n //\n \n // internal type of sudoku grids\n-type grid = ~[~[u8]];\n+type grid = Vec<Vec<u8> > ;\n \n struct Sudoku {\n     grid: grid\n@@ -68,9 +68,9 @@ impl Sudoku {\n     pub fn read(mut reader: BufferedReader<StdReader>) -> Sudoku {\n         assert!(reader.read_line().unwrap() == ~\"9,9\"); /* assert first line is exactly \"9,9\" */\n \n-        let mut g = slice::from_fn(10u, { |_i| ~[0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8] });\n+        let mut g = slice::from_fn(10u, { |_i| vec!(0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8) });\n         for line in reader.lines() {\n-            let comps: ~[&str] = line.unwrap().trim().split(',').collect();\n+            let comps: Vec<&str> = line.trim().split(',').collect();\n \n             if comps.len() == 3u {\n                 let row     = from_str::<uint>(comps[0]).unwrap() as u8;\n@@ -96,7 +96,7 @@ impl Sudoku {\n \n     // solve sudoku grid\n     pub fn solve(&mut self) {\n-        let mut work: ~[(u8, u8)] = ~[]; /* queue of uncolored fields */\n+        let mut work: Vec<(u8, u8)> = Vec::new(); /* queue of uncolored fields */\n         for row in range(0u8, 9u8) {\n             for col in range(0u8, 9u8) {\n                 let color = self.grid[row][col];"}, {"sha": "1a33391a3d2e98fdacd264124f951729052cb4fa", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -50,7 +50,7 @@ struct State {\n     managed: @nillist,\n     unique: ~nillist,\n     tuple: (@nillist, ~nillist),\n-    vec: ~[@nillist],\n+    vec: vec!(@nillist),\n     res: r\n }\n \n@@ -82,7 +82,7 @@ fn recurse_or_fail(depth: int, st: Option<State>) {\n                 managed: @Nil,\n                 unique: ~Nil,\n                 tuple: (@Nil, ~Nil),\n-                vec: ~[@Nil],\n+                vec: vec!(@Nil),\n                 res: r(@Nil)\n             }\n           }"}, {"sha": "9a57be54362cf6aca0d5d922e64b0e96b0de4f71", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -41,9 +41,9 @@ fn child_generation(gens_left: uint, tx: comm::Sender<()>) {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"100000\"]\n+        vec!(~\"\", ~\"100000\")\n     } else if args.len() <= 1 {\n-        ~[~\"\", ~\"100\"]\n+        vec!(~\"\", ~\"100\")\n     } else {\n         args.clone()\n     };"}, {"sha": "39648f7a1618cbedf9d915a87b5fb04c3f6d08eb", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -19,22 +19,22 @@ use std::slice;\n \n fn calc(children: uint, parent_wait_chan: &Sender<Sender<Sender<int>>>) {\n \n-    let wait_ports: ~[Receiver<Sender<Sender<int>>>] = slice::from_fn(children, |_| {\n+    let wait_ports: Vec<Reciever<Sender<Sender<int>>>> = vec::from_fn(children, |_| {\n         let (wait_port, wait_chan) = stream::<Sender<Sender<int>>>();\n         task::spawn(proc() {\n             calc(children / 2, &wait_chan);\n         });\n         wait_port\n     });\n \n-    let child_start_chans: ~[Sender<Sender<int>>] =\n+    let child_start_chans: Vec<Sender<Sender<int>>> =\n         wait_ports.move_iter().map(|port| port.recv()).collect();\n \n     let (start_port, start_chan) = stream::<Sender<int>>();\n     parent_wait_chan.send(start_chan);\n     let parent_result_chan: Sender<int> = start_port.recv();\n \n-    let child_sum_ports: ~[Receiver<int>] =\n+    let child_sum_ports: Vec<Reciever<int>> =\n         child_start_chans.move_iter().map(|child_start_chan| {\n             let (child_sum_port, child_sum_chan) = stream::<int>();\n             child_start_chan.send(child_sum_chan);\n@@ -49,9 +49,9 @@ fn calc(children: uint, parent_wait_chan: &Sender<Sender<Sender<int>>>) {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"30\"]\n+        vec!(~\"\", ~\"30\")\n     } else if args.len() <= 1u {\n-        ~[~\"\", ~\"10\"]\n+        vec!(~\"\", ~\"10\")\n     } else {\n         args\n     };"}, {"sha": "3a45e88b81ac132255d555379bddd21c05168830", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -25,9 +25,9 @@ fn g() { }\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"400\"]\n+        vec!(~\"\", ~\"400\")\n     } else if args.len() <= 1u {\n-        ~[~\"\", ~\"10\"]\n+        vec!(~\"\", ~\"10\")\n     } else {\n         args\n     };"}, {"sha": "e1696f0e63ed7607a52fca0aa55f590009b1ba14", "filename": "src/test/compile-fail/access-mode-in-closures.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n \n-struct sty(~[int]);\n+struct sty(Vec<int> );\n \n-fn unpack(_unpack: |v: &sty| -> ~[int]) {}\n+fn unpack(_unpack: |v: &sty| -> Vec<int> ) {}\n \n fn main() {\n     let _foo = unpack(|s| {"}, {"sha": "7d842e3d5ab2a1a2c7157ce614148f6e86f5b919", "filename": "src/test/compile-fail/ambig_impl_unify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -12,15 +12,15 @@ trait foo {\n     fn foo(&self) -> int;\n }\n \n-impl foo for ~[uint] {\n+impl foo for Vec<uint> {\n     fn foo(&self) -> int {1} //~ NOTE candidate #1 is `~[uint].foo::foo`\n }\n \n-impl foo for ~[int] {\n+impl foo for Vec<int> {\n     fn foo(&self) -> int {2} //~ NOTE candidate #2 is `~[int].foo::foo`\n }\n \n fn main() {\n-    let x = ~[];\n+    let x = Vec::new();\n     x.foo(); //~ ERROR multiple applicable methods in scope\n }"}, {"sha": "8810421f6c412a03a2a131fc2899b87eac9209f1", "filename": "src/test/compile-fail/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     // reference.  That would allow creating a mutable pointer to a\n     // temporary, which would be a source of confusion\n \n-    let mut a = ~[0];\n+    let mut a = vec!(0);\n     a.test_mut(); //~ ERROR does not implement any method in scope named `test_mut`\n }\n "}, {"sha": "6ba5a3333c5bc1df5993bb484ca5f968722b99e5", "filename": "src/test/compile-fail/bad-expr-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -12,4 +12,4 @@\n \n mod m1 {}\n \n-fn main(args: ~[str]) { log(debug, m1::a); }\n+fn main(args: vec!(str)) { log(debug, m1::a); }"}, {"sha": "4c85ba0763784ac741da5f52d4ad3c877c234148", "filename": "src/test/compile-fail/bad-expr-path2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -14,4 +14,4 @@ mod m1 {\n     pub mod a {}\n }\n \n-fn main(args: ~[str]) { log(debug, m1::a); }\n+fn main(args: vec!(str)) { log(debug, m1::a); }"}, {"sha": "edc118cb0399b1f51851b60af703579e41998c00", "filename": "src/test/compile-fail/bad-module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fbad-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fbad-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-module.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern: unresolved name\n \n-fn main() { let foo = thing::len(~[]); }\n+fn main() { let foo = thing::len(Vec::new()); }"}, {"sha": "2377870c6474a802f5693ba7a6a5458744ac2e89", "filename": "src/test/compile-fail/borrowck-assign-comp-idx.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -14,7 +14,7 @@ struct Point {\n }\n \n fn a() {\n-    let mut p = ~[1];\n+    let mut p = vec!(1);\n \n     // Create an immutable pointer into p's contents:\n     let q: &int = &p[0];\n@@ -30,7 +30,7 @@ fn b() {\n     // here we alias the mutable vector into an imm slice and try to\n     // modify the original:\n \n-    let mut p = ~[1];\n+    let mut p = vec!(1);\n \n     borrow(\n         p,\n@@ -40,7 +40,7 @@ fn b() {\n fn c() {\n     // Legal because the scope of the borrow does not include the\n     // modification:\n-    let mut p = ~[1];\n+    let mut p = vec!(1);\n     borrow(p, ||{});\n     p[0] = 5;\n }"}, {"sha": "a9c4fa9a4b5eb4728c66dbe763c26adccbe6e3c2", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -28,6 +28,6 @@ fn defer<'r>(x: &'r [&'r str]) -> defer<'r> {\n }\n \n fn main() {\n-    let x = defer(~[\"Goodbye\", \"world!\"]); //~ ERROR borrowed value does not live long enough\n+    let x = defer(vec!(\"Goodbye\", \"world!\")); //~ ERROR borrowed value does not live long enough\n     x.x[0];\n }"}, {"sha": "200d208d140b69a054538222bf1d7d10c8fdf4a0", "filename": "src/test/compile-fail/borrowck-loan-vec-content.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -17,12 +17,12 @@ fn takes_imm_elt(_v: &int, f: ||) {\n }\n \n fn has_mut_vec_and_does_not_try_to_change_it() {\n-    let mut v = ~[1, 2, 3];\n+    let mut v = vec!(1, 2, 3);\n     takes_imm_elt(&v[0], || {})\n }\n \n fn has_mut_vec_but_tries_to_change_it() {\n-    let mut v = ~[1, 2, 3];\n+    let mut v = vec!(1, 2, 3);\n     takes_imm_elt(\n         &v[0],\n         || { //~ ERROR cannot borrow `v` as mutable"}, {"sha": "30ab71ad10532e5c748b3a4034685942115ae8cb", "filename": "src/test/compile-fail/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -16,11 +16,11 @@ struct Foo {\n }\n \n pub fn main() {\n-    let x = ~[\n+    let x = vec!(\n         Foo { string: ~\"foo\" },\n         Foo { string: ~\"bar\" },\n         Foo { string: ~\"baz\" }\n-    ];\n+    );\n     let x: &[Foo] = x;\n     match x {\n         [_, ..tail] => {"}, {"sha": "b1ca61ebbcfd09bbce185d667c0a4bd6c2c53279", "filename": "src/test/compile-fail/borrowck-mut-slice-of-imm-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-slice-of-imm-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-slice-of-imm-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-slice-of-imm-vec.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -13,6 +13,6 @@ fn write(v: &mut [int]) {\n }\n \n fn main() {\n-    let v = ~[1, 2, 3];\n+    let v = vec!(1, 2, 3);\n     write(v); //~ ERROR cannot borrow\n }"}, {"sha": "22e35e4a84c85af7e058f367e9b1e075ad31d13d", "filename": "src/test/compile-fail/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn a() -> &[int] {\n-    let vec = ~[1, 2, 3, 4];\n+    let vec = vec!(1, 2, 3, 4);\n     let vec: &[int] = vec; //~ ERROR does not live long enough\n     let tail = match vec {\n         [_, ..tail] => tail,\n@@ -19,7 +19,7 @@ fn a() -> &[int] {\n }\n \n fn b() -> &[int] {\n-    let vec = ~[1, 2, 3, 4];\n+    let vec = vec!(1, 2, 3, 4);\n     let vec: &[int] = vec; //~ ERROR does not live long enough\n     let init = match vec {\n         [..init, _] => init,\n@@ -29,7 +29,7 @@ fn b() -> &[int] {\n }\n \n fn c() -> &[int] {\n-    let vec = ~[1, 2, 3, 4];\n+    let vec = vec!(1, 2, 3, 4);\n     let vec: &[int] = vec; //~ ERROR does not live long enough\n     let slice = match vec {\n         [_, ..slice, _] => slice,"}, {"sha": "ca28b3cfd45b6d4d279ab07441e82d20072bb1f6", "filename": "src/test/compile-fail/borrowck-vec-pattern-loan-from-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn a() {\n-    let mut v = ~[1, 2, 3];\n+    let mut v = vec!(1, 2, 3);\n     let vb: &mut [int] = v;\n     match vb {\n         [_a, ..tail] => {"}, {"sha": "a3b0c0ea3591d6e9bfcc8a85873d26e7fc6afb77", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -18,7 +18,7 @@ fn a() {\n }\n \n fn b() {\n-    let mut vec = ~[~1, ~2, ~3];\n+    let mut vec = vec!(~1, ~2, ~3);\n     let vec: &mut [~int] = vec;\n     match vec {\n         [.._b] => {\n@@ -28,7 +28,7 @@ fn b() {\n }\n \n fn c() {\n-    let mut vec = ~[~1, ~2, ~3];\n+    let mut vec = vec!(~1, ~2, ~3);\n     let vec: &mut [~int] = vec;\n     match vec {\n         [_a, .._b] => {\n@@ -46,7 +46,7 @@ fn c() {\n }\n \n fn d() {\n-    let mut vec = ~[~1, ~2, ~3];\n+    let mut vec = vec!(~1, ~2, ~3);\n     let vec: &mut [~int] = vec;\n     match vec {\n         [.._a, _b] => {\n@@ -58,7 +58,7 @@ fn d() {\n }\n \n fn e() {\n-    let mut vec = ~[~1, ~2, ~3];\n+    let mut vec = vec!(~1, ~2, ~3);\n     let vec: &mut [~int] = vec;\n     match vec {\n         [_a, _b, _c] => {}  //~ ERROR cannot move out"}, {"sha": "7b3db0151f629235fe6eaa905631a2cebfb02923", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn a() -> &int {\n-    let vec = ~[1, 2, 3, 4];\n+    let vec = vec!(1, 2, 3, 4);\n     let vec: &[int] = vec; //~ ERROR `vec[..]` does not live long enough\n     let tail = match vec {\n         [_a, ..tail] => &tail[0],"}, {"sha": "8ab78648ff5ee4b99a6a8371664ebf6979e0838e", "filename": "src/test/compile-fail/drop-on-non-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,7 +10,7 @@\n \n #[feature(managed_boxes)];\n \n-type Foo = ~[u8];\n+type Foo = Vec<u8> ;\n \n impl Drop for Foo {   //~ ERROR the Drop trait may only be implemented\n //~^ ERROR cannot provide an extension implementation"}, {"sha": "41cb351cdcd1cb5d1d4b7dd7c59c692df5ff653a", "filename": "src/test/compile-fail/empty-vec-trailing-comma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fempty-vec-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fempty-vec-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-vec-trailing-comma.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let v = ~[,]; //~ ERROR unexpected token: `,`\n+    let v = vec!(); //~ ERROR unexpected token: `,`\n }"}, {"sha": "562a5580c00fdf02b01f3a0a7d0773d619d5b05b", "filename": "src/test/compile-fail/evec-subtyping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,10 +10,10 @@\n \n #[feature(managed_boxes)];\n \n-fn wants_uniq(x: ~[uint]) { }\n+fn wants_uniq(x: Vec<uint> ) { }\n fn wants_three(x: [uint, ..3]) { }\n \n-fn has_uniq(x: ~[uint]) {\n+fn has_uniq(x: Vec<uint> ) {\n    wants_uniq(x);\n    wants_three(x); //~ ERROR [] storage differs: expected `3` but found `~`\n }"}, {"sha": "c5c6a37595935e24455ccdae617c008c515c966d", "filename": "src/test/compile-fail/import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -14,4 +14,4 @@ use zed::baz;\n mod zed {\n     pub fn bar() { println!(\"bar\"); }\n }\n-fn main(args: ~[str]) { bar(); }\n+fn main(args: vec!(str)) { bar(); }"}, {"sha": "0024f78009de27f47aed8d97352f7a64c6c639d5", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -15,4 +15,4 @@ mod baz {}\n mod zed {\n     pub fn bar() { println!(\"bar3\"); }\n }\n-fn main(args: ~[str]) { bar(); }\n+fn main(args: vec!(str)) { bar(); }"}, {"sha": "0a7827587a69302a3a9f6378d64d092e38ada62f", "filename": "src/test/compile-fail/import3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport3.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,4 +11,4 @@\n // error-pattern: unresolved\n use main::bar;\n \n-fn main(args: ~[str]) { println!(\"foo\"); }\n+fn main() { println!(\"foo\"); }"}, {"sha": "feb94708520c2d989b1fe3c17309e8ac83ddb902", "filename": "src/test/compile-fail/import4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport4.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -13,4 +13,4 @@\n mod a { pub use b::foo; }\n mod b { pub use a::foo; }\n \n-fn main(args: ~[str]) { println!(\"loop\"); }\n+fn main() { println!(\"loop\"); }"}, {"sha": "409a5e72fed7023f9d867de11c927f3044338a45", "filename": "src/test/compile-fail/infinite-vec-type-recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern: illegal recursive type\n \n-type x = ~[x];\n+type x = vec!(x);\n \n-fn main() { let b: x = ~[]; }\n+fn main() { let b: x = Vec::new(); }"}, {"sha": "e0bac1e9e4a604f96a21518d99ac7758266a6839", "filename": "src/test/compile-fail/issue-10412.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-10412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-10412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10412.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,13 +10,13 @@\n \n \n trait Serializable<'self, T> { //~ ERROR: no longer a special lifetime\n-    fn serialize(val : &'self T) -> ~[u8];\n+    fn serialize(val : &'self T) -> Vec<u8> ;\n     fn deserialize(repr : &[u8]) -> &'self T;\n }\n \n impl<'self> Serializable<str> for &'self str {\n-    fn serialize(val : &'self str) -> ~[u8] {\n-        ~[1]\n+    fn serialize(val : &'self str) -> Vec<u8> {\n+        vec!(1)\n     }\n     fn deserialize(repr: &[u8]) -> &'self str {\n         \"hi\""}, {"sha": "c2f40f56948860169400a61cc6d2af3c1a9221b6", "filename": "src/test/compile-fail/issue-10487.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-10487.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-10487.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10487.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,6 +10,6 @@\n \n #[feature(managed_boxes)];\n \n-static x: ~[int] = ~[123, 456]; //~ ERROR: static items are not allowed to have owned pointers\n+static x: Vec<int> = vec!(123, 456); //~ ERROR: static items are not allowed to have owned pointers\n \n fn main() {}"}, {"sha": "0c2a93e8bfa053a1f94ef763e8b08b4cb66ad9ba", "filename": "src/test/compile-fail/issue-1655.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,12 +10,12 @@\n \n // error-pattern:expected `[` but found `~`\n mod blade_runner {\n-    #~[doc(\n+    #vec!(doc(\n         brief = \"Blade Runner is probably the best movie ever\",\n         desc = \"I like that in the world of Blade Runner it is always\n                 raining, and that it's always night time. And Aliens\n                 was also a really good movie.\n \n                 Alien 3 was crap though.\"\n-    )]\n+    ))\n }"}, {"sha": "ed35f3b306bfc17ef87008a7b6a151afefb92a68", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait vec_monad<A> {\n-    fn bind<B>(&self, f: |A| -> ~[B]);\n+    fn bind<B>(&self, f: |A| -> Vec<B> );\n }\n \n-impl<A> vec_monad<A> for ~[A] {\n-    fn bind<B>(&self, f: |A| -> ~[B]) {\n+impl<A> vec_monad<A> for Vec<A> {\n+    fn bind<B>(&self, f: |A| -> Vec<B> ) {\n         let mut r = fail!();\n         for elt in self.iter() { r = r + f(*elt); }\n         //~^ ERROR the type of this value must be known"}, {"sha": "ca49bd1a48a6182713e9d97c21bb566fdbfa3cf4", "filename": "src/test/compile-fail/issue-2150.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -13,7 +13,7 @@\n #[allow(dead_code)];\n #[allow(deprecated_owned_vector)];\n \n-fn fail_len(v: ~[int]) -> uint {\n+fn fail_len(v: Vec<int> ) -> uint {\n     let mut i = 3;\n     fail!();\n     for x in v.iter() { i += 1u; }"}, {"sha": "9d4a691d4f950db2f7542db99fb204113047e504", "filename": "src/test/compile-fail/issue-2281-part1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern: unresolved name `foobar`.\n \n-fn main(args: ~[str]) { println!(\"{:?}\", foobar); }\n+fn main() { println!(\"{:?}\", foobar); }"}, {"sha": "c2f48b7ca5bcd3212572f2a117a85dcaa5673fac", "filename": "src/test/compile-fail/issue-2548.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -38,8 +38,8 @@ fn main() {\n     {\n         let mut res = foo(x);\n \n-        let mut v = ~[];\n-        v = ~[(res)] + v; //~ failed to find an implementation of trait\n+        let mut v = Vec::new();\n+        v = vec!((res)) + v; //~ failed to find an implementation of trait\n         assert_eq!(v.len(), 2);\n     }\n "}, {"sha": "94c155fce9b3c9f276f9232e11ecc6cb081ea94f", "filename": "src/test/compile-fail/issue-2590.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n struct parser {\n-    tokens: ~[int],\n+    tokens: Vec<int> ,\n }\n \n trait parse {\n-    fn parse(&self) -> ~[int];\n+    fn parse(&self) -> Vec<int> ;\n }\n \n impl parse for parser {\n-    fn parse(&self) -> ~[int] {\n+    fn parse(&self) -> Vec<int> {\n         self.tokens //~ ERROR cannot move out of dereference of `&`-pointer\n     }\n }"}, {"sha": "3b1bceb453a937211275a3f2258a171f9bd0b0fa", "filename": "src/test/compile-fail/issue-3044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let needlesArr: ~[char] = ~['a', 'f'];\n+    let needlesArr: Vec<char> = vec!('a', 'f');\n     needlesArr.iter().fold(|x, y| {\n     });\n     //~^^ ERROR this function takes 2 parameters but 1 parameter was supplied"}, {"sha": "c78e1a150586a7b8f16d134292405c74b57a28a5", "filename": "src/test/compile-fail/issue-7573.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -23,7 +23,7 @@ impl CrateId {\n }\n \n pub fn remove_package_from_database() {\n-    let mut lines_to_use: ~[&CrateId] = ~[]; //~ ERROR cannot infer an appropriate lifetime\n+    let mut lines_to_use: Vec<&CrateId> = Vec::new(); //~ ERROR cannot infer an appropriate lifetime\n     let push_id = |installed_id: &CrateId| {\n         lines_to_use.push(installed_id);\n     };"}, {"sha": "4c9f40397236e6b5b32be41a3ccc4ee5e96fed83", "filename": "src/test/compile-fail/issue-8727.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-8727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fissue-8727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8727.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -15,15 +15,15 @@\n \n struct Data(~Option<Data>);\n \n-fn generic<T>( _ : ~[(Data,T)] ) {\n+fn generic<T>( _ : Vec<(Data,T)> ) {\n     //~^ ERROR reached the recursion limit during monomorphization\n-    let rec : ~[(Data,(bool,T))] = ~[];\n+    let rec : Vec<(Data,(bool,T))> = Vec::new();\n     generic( rec );\n }\n \n \n fn main () {\n     // Use generic<T> at least once to trigger instantiation.\n-    let input : ~[(Data,())] = ~[];\n+    let input : Vec<(Data,())> = Vec::new();\n     generic(input);\n }"}, {"sha": "bf10a029024234878503b26b13c46f5b2f1affc9", "filename": "src/test/compile-fail/kindck-freeze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -27,7 +27,7 @@ fn test<'a,T,U:Freeze>(_: &'a int) {\n     // ~ pointers are ok\n     assert_freeze::<~int>();\n     assert_freeze::<~str>();\n-    assert_freeze::<~[int]>();\n+    assert_freeze::<Vec<int> >();\n \n     // but not if they own a bad thing\n     assert_freeze::<~&'a mut int>(); //~ ERROR does not fulfill `Freeze`"}, {"sha": "94902d4e68ea5a50d155453989f933282c2cef44", "filename": "src/test/compile-fail/kindck-pod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fkindck-pod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fkindck-pod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-pod.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -40,7 +40,7 @@ fn test<'a,T,U:Pod>(_: &'a int) {\n     // ~ pointers are not ok\n     assert_pod::<~int>();   //~ ERROR does not fulfill `Pod`\n     assert_pod::<~str>();   //~ ERROR does not fulfill `Pod`\n-    assert_pod::<~[int]>(); //~ ERROR does not fulfill `Pod`\n+    assert_pod::<Vec<int> >(); //~ ERROR does not fulfill `Pod`\n     assert_pod::<~&'a mut int>(); //~ ERROR does not fulfill `Pod`\n \n     // borrowed object types are generally ok"}, {"sha": "829bdaa5332753b13f294b7fec07d75c38d8b375", "filename": "src/test/compile-fail/kindck-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fkindck-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fkindck-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -30,7 +30,7 @@ fn test<'a,T,U:Send>(_: &'a int) {\n     // ~ pointers are ok\n     assert_send::<~int>();\n     assert_send::<~str>();\n-    assert_send::<~[int]>();\n+    assert_send::<Vec<int> >();\n \n     // but not if they own a bad thing\n     assert_send::<~&'a int>(); //~ ERROR does not fulfill `Send`"}, {"sha": "5391cd475aa63d990d0d3ece3c94461932aaa2db", "filename": "src/test/compile-fail/lint-heap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -25,7 +25,7 @@ fn main() {\n     @2; //~ ERROR type uses managed\n \n     ~2; //~ ERROR type uses owned\n-    ~[1]; //~ ERROR type uses owned\n+    vec!(1); //~ ERROR type uses owned\n     //~^ ERROR type uses owned\n     fn g(_: ~Clone) {} //~ ERROR type uses owned\n     ~\"\"; //~ ERROR type uses owned"}, {"sha": "275b37d9b7e4986aeaca269173a91124f07ab6cf", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     let mut a = 3; //~ ERROR: variable does not need to be mutable\n     let mut a = 2; //~ ERROR: variable does not need to be mutable\n     let mut b = 3; //~ ERROR: variable does not need to be mutable\n-    let mut a = ~[3]; //~ ERROR: variable does not need to be mutable\n+    let mut a = vec!(3); //~ ERROR: variable does not need to be mutable\n     let (mut a, b) = (1, 2); //~ ERROR: variable does not need to be mutable\n \n     match 30 {\n@@ -34,9 +34,9 @@ fn main() {\n     // positive cases\n     let mut a = 2;\n     a = 3;\n-    let mut a = ~[];\n+    let mut a = Vec::new();\n     a.push(3);\n-    let mut a = ~[];\n+    let mut a = Vec::new();\n     callback(|| {\n         a.push(3);\n     });\n@@ -63,5 +63,5 @@ fn callback(f: ||) {}\n #[allow(unused_mut)]\n fn foo(mut a: int) {\n     let mut a = 3;\n-    let mut b = ~[2];\n+    let mut b = vec!(2);\n }"}, {"sha": "2bf784faf00eca40f9226bcdb4455d2699dcdf0c", "filename": "src/test/compile-fail/lint-unused-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -50,7 +50,7 @@ fn good2() {\n        sure that when purity is inherited that the source of the unsafe-ness\n        is tracked correctly */\n     unsafe {\n-        unsafe fn what() -> ~[~str] { fail!() }\n+        unsafe fn what() -> Vec<~str> { fail!() }\n \n         callback(|| {\n             what();"}, {"sha": "3d60195775486c5d8c2fd48b01f459063d225aec", "filename": "src/test/compile-fail/liveness-issue-2163.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,7 +11,7 @@\n use std::slice;\n \n fn main() {\n-    let a: ~[int] = ~[];\n+    let a: Vec<int> = Vec::new();\n     a.iter().advance(|_| -> bool {\n         //~^ ERROR mismatched types\n     });"}, {"sha": "389e26aa400dcad4d0b19e50fe30cbfff3837e51", "filename": "src/test/compile-fail/match-vec-invalid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fmatch-vec-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fmatch-vec-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-invalid.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let a = ~[];\n+    let a = Vec::new();\n     match a {\n         [1, ..tail, ..tail] => {}, //~ ERROR: unexpected token: `..`\n         _ => ()"}, {"sha": "31fdb220263dba135b8f302030e76a5b34afd5e3", "filename": "src/test/compile-fail/match-vec-unreachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,23 +9,23 @@\n // except according to those terms.\n \n fn main() {\n-    let x: ~[(int, int)] = ~[];\n+    let x: Vec<(int, int)> = Vec::new();\n     let x: &[(int, int)] = x;\n     match x {\n         [a, (2, 3), _] => (),\n         [(1, 2), (2, 3), b] => (), //~ ERROR unreachable pattern\n         _ => ()\n     }\n \n-    let x: ~[~str] = ~[~\"foo\", ~\"bar\", ~\"baz\"];\n+    let x: Vec<~str> = vec!(~\"foo\", ~\"bar\", ~\"baz\");\n     let x: &[~str] = x;\n     match x {\n         [a, _, _, ..] => { println!(\"{}\", a); }\n         [_, _, _, _, _] => { } //~ ERROR unreachable pattern\n         _ => { }\n     }\n \n-    let x: ~[char] = ~['a', 'b', 'c'];\n+    let x: Vec<char> = vec!('a', 'b', 'c');\n     let x: &[char] = x;\n     match x {\n         ['a', 'b', 'c', .._tail] => {}"}, {"sha": "59bdc0b8a4d190a42fdd54a63c2f62fa9d38c248", "filename": "src/test/compile-fail/moves-based-on-type-access-to-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -22,7 +22,7 @@ fn f10() {\n }\n \n fn f20() {\n-    let x = ~[~\"hi\"];\n+    let x = vec!(~\"hi\");\n     consume(x[0]);\n     touch(&x[0]); //~ ERROR use of partially moved value: `x`\n }"}, {"sha": "cfc57af092c7891c56a6727ce0274cf176b10fcb", "filename": "src/test/compile-fail/moves-based-on-type-exprs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -30,7 +30,7 @@ fn f20() {\n }\n \n fn f21() {\n-    let x = ~[1, 2, 3];\n+    let x = vec!(1, 2, 3);\n     let _y = (x[0], 3);\n     touch(&x);\n }\n@@ -78,24 +78,24 @@ fn f70() {\n \n fn f80() {\n     let x = ~\"hi\";\n-    let _y = ~[x];\n+    let _y = vec!(x);\n     touch(&x); //~ ERROR use of moved value: `x`\n }\n \n fn f100() {\n-    let x = ~[~\"hi\"];\n+    let x = vec!(~\"hi\");\n     let _y = x[0];\n     touch(&x); //~ ERROR use of partially moved value: `x`\n }\n \n fn f110() {\n-    let x = ~[~\"hi\"];\n+    let x = vec!(~\"hi\");\n     let _y = [x[0], ..1];\n     touch(&x); //~ ERROR use of partially moved value: `x`\n }\n \n fn f120() {\n-    let mut x = ~[~\"hi\", ~\"ho\"];\n+    let mut x = vec!(~\"hi\", ~\"ho\");\n     x.swap(0, 1);\n     touch(&x[0]);\n     touch(&x[1]);"}, {"sha": "7b7ce6bee2ffbb8ac71cfa153d26bbb72d455394", "filename": "src/test/compile-fail/nested-ty-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern:attempt to use a type argument out of scope\n-fn hd<U>(v: ~[U]) -> U {\n+fn hd<U>(v: Vec<U> ) -> U {\n     fn hd1(w: [U]) -> U { return w[0]; }\n \n     return hd1(v);"}, {"sha": "7311a0d5302f330fade049f0c3cd0d6574feefb3", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -16,7 +16,7 @@ use sync::Arc;\n use std::task;\n \n fn main() {\n-    let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+    let v = vec!(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n     let arc_v = Arc::new(v);\n \n     task::spawn(proc() {"}, {"sha": "115be7e148535ee95b5ad2953a3f90fad4899c11", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -14,7 +14,7 @@ use sync::Arc;\n use std::task;\n \n fn main() {\n-    let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+    let v = vec!(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n     let arc_v = Arc::new(v);\n \n     task::spawn(proc() {"}, {"sha": "162b84d6cece11b459ab353109c76071d1217e77", "filename": "src/test/compile-fail/non-constant-enum-for-vec-repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,6 +11,6 @@\n enum State { ST_NULL, ST_WHITESPACE }\n \n fn main() {\n-    ~[ST_NULL, ..(ST_WHITESPACE as uint)];\n+    vec!(ST_NULL, ..(ST_WHITESPACE as uint));\n     //~^ ERROR expected constant integer for repeat count but found variable\n }"}, {"sha": "bd9547d5e1c4af74d1e38e4bffe1ec8c1b52c496", "filename": "src/test/compile-fail/non-copyable-void.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,7 +11,7 @@\n use std::libc;\n \n fn main() {\n-    let x : *~[int] = &~[1,2,3];\n+    let x : *Vec<int> = &vec!(1,2,3);\n     let y : *libc::c_void = x as *libc::c_void;\n     unsafe {\n         let _z = (*y).clone();"}, {"sha": "3bed415600fd9170798fd85350a35b5fa0deb7d0", "filename": "src/test/compile-fail/non-exhaustive-match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -35,29 +35,29 @@ fn main() {\n       (_, a) => {}\n       (b, b) => {}\n     }\n-    let vec = ~[Some(42), None, Some(21)];\n+    let vec = vec!(Some(42), None, Some(21));\n     let vec: &[Option<int>] = vec;\n     match vec {\n         //~^ ERROR non-exhaustive patterns: vectors of length 0 not covered\n         [Some(..), None, ..tail] => {}\n         [Some(..), Some(..), ..tail] => {}\n         [None] => {}\n     }\n-    let vec = ~[1];\n+    let vec = vec!(1);\n     let vec: &[int] = vec;\n     match vec {\n         [_, ..tail] => (),\n         [] => ()\n     }\n-    let vec = ~[0.5];\n+    let vec = vec!(0.5);\n     let vec: &[f32] = vec;\n     match vec { //~ ERROR non-exhaustive patterns: vectors of length 4 not covered\n         [0.1, 0.2, 0.3] => (),\n         [0.1, 0.2] => (),\n         [0.1] => (),\n         [] => ()\n     }\n-    let vec = ~[Some(42), None, Some(21)];\n+    let vec = vec!(Some(42), None, Some(21));\n     let vec: &[Option<int>] = vec;\n     match vec {\n         [Some(..), None, ..tail] => {}"}, {"sha": "a7340df83b488a22f28949afcd03c5abf154406d", "filename": "src/test/compile-fail/pattern-tyvar-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-enum bar { t1((), Option<~[int]>), t2, }\n+enum bar { t1((), Option<Vec<int>>), t2, }\n \n // n.b. my change changes this error message, but I think it's right -- tjc\n fn foo(t: bar) -> int { match t { t1(_, Some(x)) => { return x * 3; } _ => { fail!(); } } }"}, {"sha": "e1566e7c897244e9256bced3070f99b8d2023a3d", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern: mismatched types\n \n-enum bar { t1((), Option<~[int]>), t2, }\n+enum bar { t1((), Option<Vec<int> >), t2, }\n \n fn foo(t: bar) {\n     match t {"}, {"sha": "27201b7681313e5f93d6078f846ff4b63eb54cfd", "filename": "src/test/compile-fail/qquote-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -33,7 +33,7 @@ trait fake_ext_ctxt {\n type fake_session = parse::parse_sess;\n \n impl fake_ext_ctxt for fake_session {\n-    fn cfg() -> ast::CrateConfig { ~[] }\n+    fn cfg() -> ast::CrateConfig { Vec::new() }\n     fn parse_sess() -> parse::parse_sess { self }\n     fn call_site() -> span {\n         codemap::span {"}, {"sha": "97225c863e521bf7dfd10bbe2079e085bfabe7ec", "filename": "src/test/compile-fail/qquote-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -30,7 +30,7 @@ trait fake_ext_ctxt {\n type fake_session = parse::parse_sess;\n \n impl fake_ext_ctxt for fake_session {\n-    fn cfg() -> ast::CrateConfig { ~[] }\n+    fn cfg() -> ast::CrateConfig { Vec::new() }\n     fn parse_sess() -> parse::parse_sess { self }\n     fn call_site() -> span {\n         codemap::span {"}, {"sha": "7d9629a52205343e342f4415bc1abf6428e34559", "filename": "src/test/compile-fail/regions-escape-loop-via-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,7 +11,7 @@\n // The type of `y` ends up getting inferred to the type of the block.\n fn broken() {\n     let mut x = 3;\n-    let mut _y = ~[&mut x];\n+    let mut _y = vec!(&mut x);\n     while x < 10 {\n         let mut z = x;\n         _y.push(&mut z); //~ ERROR `z` does not live long enough"}, {"sha": "08c8eba696dcd5900f1ed1dc89e5ffe851611f32", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -12,5 +12,5 @@\n \n fn main() {\n     let n = 1;\n-    let a = ~[0, ..n]; //~ ERROR expected constant integer for repeat count but found variable\n+    let a = vec!(0, ..n); //~ ERROR expected constant integer for repeat count but found variable\n }"}, {"sha": "b4929eacf3d05ec7f299263f35802377d0379f9a", "filename": "src/test/compile-fail/seq-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fseq-args.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n trait seq { }\n \n-impl<T> seq<T> for ~[T] { //~ ERROR wrong number of type arguments\n+impl<T> seq<T> for Vec<T> { //~ ERROR wrong number of type arguments\n     /* ... */\n }\n impl seq<bool> for u32 {"}, {"sha": "a135af29356f3330927b00c7409a9b98589c2a57", "filename": "src/test/compile-fail/tag-that-dare-not-speak-its-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -13,7 +13,7 @@\n \n #[no_implicit_prelude];\n \n-fn last<T>(v: ~[&T]) -> std::option::Option<T> {\n+fn last<T>(v: Vec<&T> ) -> std::option::Option<T> {\n     fail!();\n }\n "}, {"sha": "a44010366c82fed58a4a445fa98387888e2cfaa5", "filename": "src/test/compile-fail/uninstantiable-fixed-length-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Funinstantiable-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Funinstantiable-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinstantiable-fixed-length-vec.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -14,10 +14,10 @@\n \n // ~ to avoid infinite size.\n struct Uninstantiable { //~ ERROR cannot be instantiated without an instance of itself\n-    p: ~[Uninstantiable, .. 1]\n+    p: vec!(Uninstantiable, .. 1)\n }\n \n-struct Instantiable { p: ~[Instantiable, .. 0] }\n+struct Instantiable { p: vec!(Instantiable, .. 0) }\n \n \n fn main() {"}, {"sha": "c76a6f2453e243b30f1661e57654641bbcba120e", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -25,14 +25,14 @@ impl Drop for r {\n     }\n }\n \n-fn f<T>(_i: ~[T], _j: ~[T]) {\n+fn f<T>(_i: Vec<T> , _j: Vec<T> ) {\n }\n \n fn main() {\n     let i1 = @Cell::new(0);\n     let i2 = @Cell::new(1);\n-    let r1 = ~[~r { i: i1 }];\n-    let r2 = ~[~r { i: i2 }];\n+    let r1 = vec!(~r { i: i1 });\n+    let r2 = vec!(~r { i: i2 });\n     f(r1.clone(), r2.clone());\n     //~^ ERROR failed to find an implementation of\n     println!(\"{:?}\", (r2, i1.get()));"}, {"sha": "4d57470a721655d20c16204f51378caac5f91f47", "filename": "src/test/compile-fail/use-after-move-implicity-coerced-object.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -23,8 +23,7 @@ impl fmt::Show for Number {\n }\n \n struct List {\n-    list: ~[~ToStr]\n-}\n+    list: Vec<~ToStr> }\n \n impl List {\n     fn push(&mut self, n: ~ToStr) {\n@@ -34,7 +33,7 @@ impl List {\n \n fn main() {\n     let n = ~Number { n: 42 };\n-    let mut l = ~List { list: ~[] };\n+    let mut l = ~List { list: Vec::new() };\n     l.push(n);\n     let x = n.to_str();\n     //~^ ERROR: use of moved value: `n`"}, {"sha": "19052d923e9f26dbd2206d24ca24343f744f8712", "filename": "src/test/compile-fail/vec-field.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0b714b4ba6411c6997324d442a3df602e5920ff5/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b714b4ba6411c6997324d442a3df602e5920ff5/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-field.rs?ref=0b714b4ba6411c6997324d442a3df602e5920ff5", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:attempted access of field `some_field_name` on type `~[int]`\n-// issue #367\n-\n-fn f() {\n-    let v = ~[1i];\n-    println!(\"{}\", v.some_field_name); //type error\n-}\n-\n-fn main() { }"}, {"sha": "a3c7fc2d4c8af5a2d382ec74eca38b41b434f70e", "filename": "src/test/compile-fail/vec-mut-iter-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let mut xs = ~[1, 2, 3, 4];\n+    let mut xs = vec!(1, 2, 3, 4);\n \n     for x in xs.mut_iter() {\n         xs.push(1) //~ ERROR cannot borrow `xs`"}, {"sha": "8da9511b493de1e40fc1a9a7b1cce37e752f3ebd", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -22,8 +22,8 @@ impl Drop for r {\n \n fn main() {\n     // This can't make sense as it would copy the classes\n-    let i = ~[r(0)];\n-    let j = ~[r(1)];\n+    let i = vec!(r(0));\n+    let j = vec!(r(1));\n     let k = i + j;\n     println!(\"{}\", j);\n }"}, {"sha": "be226b2e16e55bd279bb1c7fb82864e673465204", "filename": "src/test/compile-fail/vector-no-ann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let _foo = ~[]; //~ ERROR unconstrained type\n+    let _foo = Vec::new(); //~ ERROR unconstrained type\n }"}, {"sha": "987a3c1674c28ab56205b0a611c39ad2e087fc70", "filename": "src/test/compile-fail/writing-to-immutable-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    let v: ~[int] = ~[1, 2, 3];\n+    let v: Vec<int> = vec!(1, 2, 3);\n     v[1] = 4; //~ ERROR cannot assign\n }"}, {"sha": "5ddce3c60e177e1e2da270eed2306a06c2215079", "filename": "src/test/debug-info/boxed-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -26,7 +26,7 @@\n \n fn main() {\n \n-    let unique: ~[i64] = ~[10, 11, 12, 13];\n+    let unique: Vec<i64> = vec!(10, 11, 12, 13);\n \n     zzz();\n }"}, {"sha": "baf020672ec5243dff9a52f8612edc0780ddfd29", "filename": "src/test/debug-info/issue11600.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fdebug-info%2Fissue11600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fdebug-info%2Fissue11600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fissue11600.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let args : ~[~str] = ::std::os::args();\n+    let args : Vec<~str> = ::std::os::args();\n     ::std::io::println(args[0]);\n }\n "}, {"sha": "50f394613929a42cf23171dbe29e56c20c3b98b4", "filename": "src/test/debug-info/managed-pointer-within-unique-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -33,7 +33,7 @@\n \n fn main() {\n \n-    let unique: ~[@i64] = ~[@10, @11, @12, @13];\n+    let unique: Vec<@i64> = vec!(@10, @11, @12, @13);\n \n     zzz();\n }"}, {"sha": "8e4427d9dd4e9f8e5cdb72d1e536245ba036d00f", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -59,9 +59,9 @@ fn test9() {\n }\n \n fn test10() -> int {\n-    let regs = @~[0];\n+    let regs = @vec!(0);\n     match true { true => { } _ => { } }\n     (*regs)[0]\n }\n \n-fn test11() -> ~[int] { if true { } ~[1, 2] }\n+fn test11() -> Vec<int> { if true { } vec!(1, 2) }"}, {"sha": "56ffc41c76ccf558aecd8ab4f9e8665178af6fc4", "filename": "src/test/pretty/match-naked-expr-medium.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let x = Some(3);\n     let _y =\n         match x {\n-            Some(_) => ~[~\"some(_)\", ~\"not\", ~\"SO\", ~\"long\", ~\"string\"],\n-            None => ~[~\"none\"]\n+            Some(_) => vec!(~\"some(_)\", ~\"not\", ~\"SO\", ~\"long\", ~\"string\"),\n+            None => vec!(~\"none\")\n         };\n }"}, {"sha": "d685ad49a27defc73173d531ea6e6b3496ed55aa", "filename": "src/test/pretty/vec-comments.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fpretty%2Fvec-comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fpretty%2Fvec-comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fvec-comments.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -13,27 +13,27 @@\n // pp-exact:vec-comments.pp\n fn main() {\n     let _v1 =\n-        ~[\n+        vec!(\n           // Comment\n           0,\n           // Comment\n           1,\n           // Comment\n-          2];\n+          2);\n     let _v2 =\n-        ~[0, // Comment\n+        vec!(0, // Comment\n           1, // Comment\n-          2]; // Comment\n+          2); // Comment\n     let _v3 =\n-        ~[\n+        vec!(\n           /* Comment */\n           0,\n           /* Comment */\n           1,\n           /* Comment */\n-          2];\n+          2);\n     let _v4 =\n-        ~[0, /* Comment */\n+        vec!(0, /* Comment */\n           1, /* Comment */\n-          2]; /* Comment */\n+          2); /* Comment */\n }"}, {"sha": "5e37123023c40a3330e140552f6e4247b2768d3f", "filename": "src/test/pretty/vec-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fpretty%2Fvec-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Fpretty%2Fvec-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fvec-type.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,6 +10,6 @@\n \n // pp-exact:vec-type.pp\n \n-fn f1(_x: ~[int]) { }\n+fn f1(_x: Vec<int> ) { }\n \n-fn g1() { f1(~[1, 2, 3]); }\n+fn g1() { f1(vec!(1, 2, 3)); }"}, {"sha": "8ca317e1dd77399956211c2fb3048d936ca2939e", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-2.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -14,7 +14,7 @@\n use std::uint;\n \n fn main() {\n-    let x = ~[1u,2u,3u];\n+    let x = vec!(1u,2u,3u);\n \n     // This should cause a bounds-check failure, but may not if we do our\n     // bounds checking by comparing a scaled index value to the vector's"}, {"sha": "6106abc76c3f7259a823c610d8f2fdaf04968dd2", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow-3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -15,7 +15,7 @@ use std::u64;\n \n #[cfg(target_arch=\"x86\")]\n fn main() {\n-    let x = ~[1u,2u,3u];\n+    let x = vec!(1u,2u,3u);\n \n     // This should cause a bounds-check failure, but may not if we do our\n     // bounds checking by truncating the index value to the size of the\n@@ -29,12 +29,12 @@ fn main() {\n            idx as uint);\n \n     // This should fail.\n-    println!(\"ov3 0x%x\",  x[idx]);\n+    println!(\"ov3 0x%x\",  x.as_slice()[idx]);\n }\n \n #[cfg(target_arch=\"x86_64\")]\n fn main() {\n     // This version just fails anyways, for symmetry on 64-bit hosts.\n-    let x = ~[1u,2u,3u];\n-    println!(\"ov3 0x%x\",  x[200]);\n+    let x = vec!(1u,2u,3u);\n+    error!(\"ov3 0x%x\",  x.as_slice()[200]);\n }"}, {"sha": "29e57925af5d2860bf98a39cbaf9c4e4368e6631", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -20,7 +20,7 @@ fn main() {\n     // address of the 0th cell in the array (even though the index is\n     // huge).\n \n-    let x = ~[1u,2u,3u];\n+    let x = vec!(1u,2u,3u);\n \n     let base = x.as_ptr() as uint;\n     let idx = base / mem::size_of::<uint>();"}, {"sha": "d51865d782ccf229364fcbee457819f69bbf3ce8", "filename": "src/test/run-fail/issue-3029.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-3029.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -14,8 +14,8 @@\n \n // error-pattern:so long\n fn main() {\n-    let mut x = ~[];\n-    let y = ~[3];\n+    let mut x = Vec::new();\n+    let y = vec!(3);\n     fail!(\"so long\");\n     x.push_all_move(y);\n     ~\"good\" + ~\"bye\";"}, {"sha": "e66b188fac64ea82e3d1ea201053cc57fa6c75e2", "filename": "src/test/run-fail/unwind-box-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -17,7 +17,7 @@ fn failfn() {\n }\n \n fn main() {\n-    let x = @~[0, 1, 2, 3, 4, 5];\n+    let x = @vec!(0, 1, 2, 3, 4, 5);\n     failfn();\n     println!(\"{:?}\", x);\n }"}, {"sha": "6f2400ec4f0e441b65a4a741ad09468eb31cd24a", "filename": "src/test/run-fail/unwind-interleaved.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -15,8 +15,8 @@ fn a() { }\n fn b() { fail!(); }\n \n fn main() {\n-    let _x = ~[0];\n+    let _x = vec!(0);\n     a();\n-    let _y = ~[0];\n+    let _y = vec!(0);\n     b();\n }"}, {"sha": "9fb53d0f9e872706fd7c23d6c14e8f13ea5375d9", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -18,7 +18,7 @@ extern crate collections;\n fn main() {\n     let _count = @0u;\n     let mut map = collections::HashMap::new();\n-    let mut arr = ~[];\n+    let mut arr = Vec::new();\n     for _i in range(0u, 10u) {\n         arr.push(@~\"key stuff\");\n         map.insert(arr.clone(), arr + &[@~\"value stuff\"]);"}, {"sha": "e13c818ee44be8f8d871704fb73e90212593506f", "filename": "src/test/run-fail/unwind-partial-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -12,7 +12,7 @@\n \n #[feature(managed_boxes)];\n \n-fn f() -> ~[int] { fail!(); }\n+fn f() -> Vec<int> { fail!(); }\n \n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n // have been to do with memory allocation patterns."}, {"sha": "4dd2b35e2de64b36dca0c99e7a7e02baef029d3c", "filename": "src/test/run-fail/unwind-partial-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -12,7 +12,7 @@\n \n #[feature(managed_boxes)];\n \n-fn f() -> ~[int] { fail!(); }\n+fn f() -> Vec<int> { fail!(); }\n \n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n // have been to do with memory allocation patterns."}, {"sha": "eac4bf541574508f3337f0b319db67d77241654b", "filename": "src/test/run-fail/unwind-partial-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -12,7 +12,7 @@\n \n #[feature(managed_boxes)];\n \n-fn f() -> ~[int] { fail!(); }\n+fn f() -> Vec<int> { fail!(); }\n \n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n // have been to do with memory allocation patterns.\n@@ -21,7 +21,7 @@ fn prime() {\n }\n \n fn partial() {\n-    let _x = ~[~[0], f(), ~[0]];\n+    let _x = vec!(vec!(0), f(), vec!(0));\n }\n \n fn main() {"}, {"sha": "7604f568fe79f3312b4be17a467d7b727b4bc242", "filename": "src/test/run-fail/unwind-rec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-rec.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,11 +10,11 @@\n \n // error-pattern:fail\n \n-fn build() -> ~[int] {\n+fn build() -> Vec<int> {\n     fail!();\n }\n \n-struct Blk { node: ~[int] }\n+struct Blk { node: Vec<int> }\n \n fn main() {\n     let _blk = Blk {"}, {"sha": "12990722d7b60efb6dc6ce72352a506e74096d83", "filename": "src/test/run-fail/unwind-rec2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-rec2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-rec2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-rec2.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,15 +10,15 @@\n \n // error-pattern:fail\n \n-fn build1() -> ~[int] {\n-    ~[0,0,0,0,0,0,0]\n+fn build1() -> Vec<int> {\n+    vec!(0,0,0,0,0,0,0)\n }\n \n-fn build2() -> ~[int] {\n+fn build2() -> Vec<int> {\n     fail!();\n }\n \n-struct Blk { node: ~[int], span: ~[int] }\n+struct Blk { node: Vec<int> , span: Vec<int> }\n \n fn main() {\n     let _blk = Blk {"}, {"sha": "0d97923393466d2f5d7e83a236a3aed3d8fd5f24", "filename": "src/test/run-fail/unwind-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -12,7 +12,7 @@\n \n // error-pattern:fail\n \n-fn fold_local() -> @~[int]{\n+fn fold_local() -> @Vec<int> {\n     fail!();\n }\n "}, {"sha": "1112e108d2d148980dddafd8349a969baede554f", "filename": "src/test/run-fail/unwind-tup2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup2.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -12,11 +12,11 @@\n \n // error-pattern:fail\n \n-fn fold_local() -> @~[int]{\n-    @~[0,0,0,0,0,0]\n+fn fold_local() -> @Vec<int> {\n+    @vec!(0,0,0,0,0,0)\n }\n \n-fn fold_remote() -> @~[int]{\n+fn fold_remote() -> @Vec<int> {\n     fail!();\n }\n "}, {"sha": "1542984c1d363e230d29a25147e033eeecac8d8b", "filename": "src/test/run-fail/vec-overrun.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Fvec-overrun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-fail%2Fvec-overrun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fvec-overrun.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,7 +11,7 @@\n \n // error-pattern:index out of bounds: the len is 1 but the index is 2\n fn main() {\n-    let v: ~[int] = ~[10];\n+    let v: Vec<int> = vec!(10);\n     let x: int = 0;\n     assert_eq!(v[x], 10);\n     // Bounds-check failure."}, {"sha": "1e26ce0c4f3e28947f12248d62439697932f7de6", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -35,7 +35,7 @@ trait fake_ext_ctxt {\n type fake_session = parse::parse_sess;\n \n impl fake_ext_ctxt for fake_session {\n-    fn cfg() -> ast::CrateConfig { ~[] }\n+    fn cfg() -> ast::CrateConfig { Vec::new() }\n     fn parse_sess() -> parse::parse_sess { self }\n     fn call_site() -> span {\n         codemap::span {"}, {"sha": "1bf601f71b4cf12746d9a8f106bb8fb15673b3d8", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -18,8 +18,8 @@ extern crate syntax;\n use syntax::ext::base::ExtCtxt;\n \n fn syntax_extension(cx: &ExtCtxt) {\n-    let e_toks : ~[syntax::ast::token_tree] = quote_tokens!(cx, 1 + 2);\n-    let p_toks : ~[syntax::ast::token_tree] = quote_tokens!(cx, (x, 1 .. 4, *));\n+    let e_toks : Vec<syntax::ast::token_tree> = quote_tokens!(cx, 1 + 2);\n+    let p_toks : Vec<syntax::ast::token_tree> = quote_tokens!(cx, (x, 1 .. 4, *));\n \n     let a: @syntax::ast::Expr = quote_expr!(cx, 1 + 2);\n     let _b: Option<@syntax::ast::item> = quote_item!(cx, static foo : int = $e_toks; );"}, {"sha": "eba7e8c7ffb1ee510c427810362156471f66d981", "filename": "src/test/run-pass/alloca-from-derived-tydesc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,8 +10,8 @@\n \n enum option<T> { some(T), none, }\n \n-struct R<T> {v: ~[option<T>]}\n+struct R<T> {v: Vec<option<T>> }\n \n-fn f<T>() -> ~[T] { return ~[]; }\n+fn f<T>() -> Vec<T> { return Vec::new(); }\n \n-pub fn main() { let mut r: R<int> = R {v: ~[]}; r.v = f(); }\n+pub fn main() { let mut r: R<int> = R {v: Vec::new()}; r.v = f(); }"}, {"sha": "aa3e28c875e402f8d8b54ffaba35e9f454d69c81", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -22,7 +22,7 @@ impl<'a,A> iterable<A> for &'a [A] {\n     }\n }\n \n-impl<A> iterable<A> for ~[A] {\n+impl<A> iterable<A> for Vec<A> {\n     fn iterate(&self, f: |x: &A| -> bool) -> bool {\n         self.iter().advance(f)\n     }\n@@ -38,7 +38,7 @@ fn length<A, T: iterable<A>>(x: T) -> uint {\n }\n \n pub fn main() {\n-    let x = ~[0,1,2,3];\n+    let x = vec!(0,1,2,3);\n     // Call a method\n     x.iterate(|y| { assert!(x[*y] == *y); true });\n     // Call a parameterized function"}, {"sha": "e7ee61179921dfa1a68e3c6a45c0556da8c5cb49", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -119,7 +119,7 @@ struct Spanned<T> {\n }\n \n #[deriving(Decodable, Encodable)]\n-struct SomeStruct { v: ~[uint] }\n+struct SomeStruct { v: Vec<uint> }\n \n #[deriving(Decodable, Encodable)]\n struct Point {x: uint, y: uint}"}, {"sha": "e5f4d078749989c111a9f53c73d0d2814acacfb7", "filename": "src/test/run-pass/auto-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-loop.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,7 +10,7 @@\n \n pub fn main() {\n     let mut sum = 0;\n-    let xs = ~[1, 2, 3, 4, 5];\n+    let xs = vec!(1, 2, 3, 4, 5);\n     for x in xs.iter() {\n         sum += *x;\n     }"}, {"sha": "0cc02d7a28bce9b845f1fdac09cd068029ddca47", "filename": "src/test/run-pass/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -29,7 +29,7 @@ pub fn main() {\n     // NB: Associativity of ~, etc. in this context is surprising. These must be parenthesized\n \n     ([1]).test_imm();\n-    (~[1]).test_imm();\n+    (vec!(1)).test_imm();\n     (&[1]).test_imm();\n     (\"test\").test_imm();\n     (~\"test\").test_imm();"}, {"sha": "6b36746d230e92636fe21b829bbbaeaa8ff9bfc9", "filename": "src/test/run-pass/auto-ref-sliceable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -12,15 +12,15 @@ trait Pushable<T> {\n     fn push_val(&mut self, t: T);\n }\n \n-impl<T> Pushable<T> for ~[T] {\n+impl<T> Pushable<T> for Vec<T> {\n     fn push_val(&mut self, t: T) {\n         self.push(t);\n     }\n }\n \n pub fn main() {\n-    let mut v = ~[1];\n+    let mut v = vec!(1);\n     v.push_val(2);\n     v.push_val(3);\n-    assert_eq!(v, ~[1, 2, 3]);\n+    assert_eq!(v, vec!(1, 2, 3));\n }"}, {"sha": "2fe5ce7a1180647af1c4b722f93f91e2a8a1b68d", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f<T>(x: ~[T]) -> T { return x[0]; }\n+fn f<T>(x: Vec<T> ) -> T { return x[0]; }\n \n-fn g(act: |~[int]| -> int) -> int { return act(~[1, 2, 3]); }\n+fn g(act: |Vec<int> | -> int) -> int { return act(vec!(1, 2, 3)); }\n \n pub fn main() {\n     assert_eq!(g(f), 1);\n-    let f1: |~[~str]| -> ~str = f;\n-    assert_eq!(f1(~[~\"x\", ~\"y\", ~\"z\"]), ~\"x\");\n+    let f1: |Vec<~str> | -> ~str = f;\n+    assert_eq!(f1(vec!(~\"x\", ~\"y\", ~\"z\")), ~\"x\");\n }"}, {"sha": "8d0412ba30ef6baf5ac763c0b0d135e338c5370e", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -18,7 +18,7 @@ fn booly(fun: proc(bool) -> bool) -> bool {\n \n // Check usage and precedence of block arguments in expressions:\n pub fn main() {\n-    let v = ~[-1.0f64, 0.0, 1.0, 2.0, 3.0];\n+    let v = vec!(-1.0f64, 0.0, 1.0, 2.0, 3.0);\n \n     // Statement form does not require parentheses:\n     for i in v.iter() {"}, {"sha": "ba6a94fa6ff60e3630254454c613ff185af04279", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,10 +10,10 @@\n \n // ignore-fast\n \n-fn iter_vec<T>(v: ~[T], f: |&T|) { for x in v.iter() { f(x); } }\n+fn iter_vec<T>(v: Vec<T> , f: |&T|) { for x in v.iter() { f(x); } }\n \n pub fn main() {\n-    let v = ~[1, 2, 3, 4, 5, 6, 7];\n+    let v = vec!(1, 2, 3, 4, 5, 6, 7);\n     let mut odds = 0;\n     iter_vec(v, |i| {\n         if *i % 2 == 1 {"}, {"sha": "ba4bdbe636caf997ea6e4661fca320e09d720a60", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,10 +10,10 @@\n \n // ignore-fast\n \n-fn iter_vec<T>(v: ~[T], f: |&T|) { for x in v.iter() { f(x); } }\n+fn iter_vec<T>(v: Vec<T> , f: |&T|) { for x in v.iter() { f(x); } }\n \n pub fn main() {\n-    let v = ~[1, 2, 3, 4, 5];\n+    let v = vec!(1, 2, 3, 4, 5);\n     let mut sum = 0;\n     iter_vec(v.clone(), |i| {\n         iter_vec(v.clone(), |j| {"}, {"sha": "374c3e7fc539feeb230ffd1ee3436bd00082446f", "filename": "src/test/run-pass/borrow-by-val-method-receiver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -17,6 +17,6 @@ impl<'a> Foo for &'a [int] {\n }\n \n pub fn main() {\n-    let items = ~[ 3, 5, 1, 2, 4 ];\n+    let items = vec!( 3, 5, 1, 2, 4 );\n     items.foo();\n }"}, {"sha": "126f0fd7ac5eabd8b5b0f50f011b1a08269114aa", "filename": "src/test/run-pass/borrowck-binding-mutbl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct F { f: ~[int] }\n+struct F { f: Vec<int> }\n \n fn impure(_v: &[int]) {\n }\n \n pub fn main() {\n-    let mut x = F {f: ~[3]};\n+    let mut x = F {f: vec!(3)};\n \n     match x {\n       F {f: ref mut v} => {"}, {"sha": "ac6ea8dec051fdf97562bf1169eca1925aefd84c", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,11 +10,11 @@\n \n use std::mem::swap;\n \n-struct Ints {sum: ~int, values: ~[int]}\n+struct Ints {sum: ~int, values: Vec<int> }\n \n fn add_int(x: &mut Ints, v: int) {\n     *x.sum += v;\n-    let mut values = ~[];\n+    let mut values = Vec::new();\n     swap(&mut values, &mut x.values);\n     values.push(v);\n     swap(&mut values, &mut x.values);\n@@ -26,7 +26,7 @@ fn iter_ints(x: &Ints, f: |x: &int| -> bool) -> bool {\n }\n \n pub fn main() {\n-    let mut ints = ~Ints {sum: ~0, values: ~[]};\n+    let mut ints = ~Ints {sum: ~0, values: Vec::new()};\n     add_int(ints, 22);\n     add_int(ints, 44);\n "}, {"sha": "e6fcb1ca9514926bcba512a1bd80fb5e47c6ed76", "filename": "src/test/run-pass/borrowck-mut-vec-as-imm-slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -14,10 +14,10 @@ fn want_slice(v: &[int]) -> int {\n     sum\n }\n \n-fn has_mut_vec(v: ~[int]) -> int {\n+fn has_mut_vec(v: Vec<int> ) -> int {\n     want_slice(v)\n }\n \n pub fn main() {\n-    assert_eq!(has_mut_vec(~[1, 2, 3]), 6);\n+    assert_eq!(has_mut_vec(vec!(1, 2, 3)), 6);\n }"}, {"sha": "3b07ffa26da25339e91e643ae1c8ec99573bae5a", "filename": "src/test/run-pass/borrowck-root-while-cond-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,9 +11,9 @@\n #[feature(managed_boxes)];\n \n struct F { f: @G }\n-struct G { g: ~[int] }\n+struct G { g: Vec<int> }\n \n pub fn main() {\n-    let rec = @F {f: @G {g: ~[1, 2, 3]}};\n+    let rec = @F {f: @G {g: vec!(1, 2, 3)}};\n     while rec.f.g.len() == 23 {}\n }"}, {"sha": "bcfb8f6f9141a2d379a9b7bf2cce3aff3e9bab7c", "filename": "src/test/run-pass/break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -25,7 +25,7 @@ pub fn main() {\n         i += 1; if i % 2 == 0 { continue; } assert!((i % 2 != 0));\n         if i >= 10 { break; }\n     }\n-    let ys = ~[1, 2, 3, 4, 5, 6];\n+    let ys = vec!(1, 2, 3, 4, 5, 6);\n     for x in ys.iter() {\n         if *x % 2 == 0 { continue; }\n         assert!((*x % 2 != 0));"}, {"sha": "d27dd8f92d13fc280cdaabaa26dbc00252f0204d", "filename": "src/test/run-pass/call-closure-from-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,7 +11,7 @@\n fn foo() -> int { 22 }\n \n pub fn main() {\n-    let mut x: ~[extern \"Rust\" fn() -> int] = ~[];\n+    let mut x: vec!(extern \"Rust\" fn() -> int) = Vec::new();\n     x.push(foo);\n     assert_eq!((x[0])(), 22);\n }"}, {"sha": "64da1feb34ce8e0dd820731f59853c56d738469a", "filename": "src/test/run-pass/cci_no_inline_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n     // actually working.\n     //let bt0 = sys::frame_address();\n     //println!(\"%?\", bt0);\n-    iter(~[1u, 2u, 3u], |i| {\n+    iter(vec!(1u, 2u, 3u), |i| {\n         println!(\"{}\", i);\n \n         //let bt1 = sys::frame_address();"}, {"sha": "f8177bb0ada62ca0eb5df41ce336d0b24080f544", "filename": "src/test/run-pass/class-poly-methods-cross-crate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -14,12 +14,12 @@ extern crate cci_class_6;\n use cci_class_6::kitties::cat;\n \n pub fn main() {\n-  let mut nyan : cat<char> = cat::<char>(52u, 99, ~['p']);\n-  let mut kitty = cat(1000u, 2, ~[~\"tabby\"]);\n+  let mut nyan : cat<char> = cat::<char>(52u, 99, vec!('p'));\n+  let mut kitty = cat(1000u, 2, vec!(~\"tabby\"));\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n-  nyan.speak(~[1u,2u,3u]);\n+  nyan.speak(vec!(1u,2u,3u));\n   assert_eq!(nyan.meow_count(), 55u);\n-  kitty.speak(~[~\"meow\", ~\"mew\", ~\"purr\", ~\"chirp\"]);\n+  kitty.speak(vec!(~\"meow\", ~\"mew\", ~\"purr\", ~\"chirp\"));\n   assert_eq!(kitty.meow_count(), 1004u);\n }"}, {"sha": "cddb5bb7e1580ddb73776cad0278b59f48d9183b", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,20 +9,20 @@\n // except according to those terms.\n \n struct cat<U> {\n-    info : ~[U],\n+    info : Vec<U> ,\n     meows : uint,\n \n     how_hungry : int,\n }\n \n impl<U> cat<U> {\n-    pub fn speak<T>(&mut self, stuff: ~[T]) {\n+    pub fn speak<T>(&mut self, stuff: Vec<T> ) {\n         self.meows += stuff.len();\n     }\n     pub fn meow_count(&mut self) -> uint { self.meows }\n }\n \n-fn cat<U>(in_x : uint, in_y : int, in_info: ~[U]) -> cat<U> {\n+fn cat<U>(in_x : uint, in_y : int, in_info: Vec<U> ) -> cat<U> {\n     cat {\n         meows: in_x,\n         how_hungry: in_y,\n@@ -31,12 +31,12 @@ fn cat<U>(in_x : uint, in_y : int, in_info: ~[U]) -> cat<U> {\n }\n \n pub fn main() {\n-  let mut nyan : cat<int> = cat::<int>(52u, 99, ~[9]);\n-  let mut kitty = cat(1000u, 2, ~[~\"tabby\"]);\n+  let mut nyan : cat<int> = cat::<int>(52u, 99, vec!(9));\n+  let mut kitty = cat(1000u, 2, vec!(~\"tabby\"));\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n-  nyan.speak(~[1,2,3]);\n+  nyan.speak(vec!(1,2,3));\n   assert_eq!(nyan.meow_count(), 55u);\n-  kitty.speak(~[~\"meow\", ~\"mew\", ~\"purr\", ~\"chirp\"]);\n+  kitty.speak(vec!(~\"meow\", ~\"mew\", ~\"purr\", ~\"chirp\"));\n   assert_eq!(kitty.meow_count(), 1004u);\n }"}, {"sha": "6d1c3aab66257bfd1c0c1dc56bed484e12b9486b", "filename": "src/test/run-pass/cleanup-rvalue-scopes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -116,7 +116,7 @@ pub fn main() {\n     end_of_block!(_, { { check_flags(0); &AddFlags(1) } });\n     end_of_block!(_, &((Box { f: AddFlags(1) }).f));\n     end_of_block!(_, &(([AddFlags(1)])[0]));\n-    end_of_block!(_, &((&~[AddFlags(1)])[0]));\n+    end_of_block!(_, &((&vec!(AddFlags(1)))[0]));\n \n     // LHS does not create a ref binding, so temporary lives as long\n     // as statement, and we do not move the AddFlags out:"}, {"sha": "b9587c57787082f63b8206b09d43f2102583e168", "filename": "src/test/run-pass/cleanup-rvalue-temp-during-incomplete-alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -36,11 +36,11 @@ fn do_it(x: &[uint]) -> Foo {\n     fail!()\n }\n \n-fn get_bar(x: uint) -> ~[uint] { ~[x * 2] }\n+fn get_bar(x: uint) -> Vec<uint> { vec!(x * 2) }\n \n pub fn fails() {\n     let x = 2;\n-    let mut y = ~[];\n+    let mut y = Vec::new();\n     y.push(~Bickwick(do_it(get_bar(x))));\n }\n "}, {"sha": "ffac7cbdab0de33d9b63510423372b576fd1d0df", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-rcvr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn bar(v: &mut [uint]) -> ~[uint] {\n+fn bar(v: &mut [uint]) -> Vec<uint> {\n     v.to_owned()\n }\n \n-fn bip(v: &[uint]) -> ~[uint] {\n+fn bip(v: &[uint]) -> Vec<uint> {\n     v.to_owned()\n }\n \n pub fn main() {\n-    let mut the_vec = ~[1u, 2, 3, 100];\n+    let mut the_vec = vec!(1u, 2, 3, 100);\n     assert_eq!(the_vec.clone(), bar(the_vec));\n     assert_eq!(the_vec.clone(), bip(the_vec));\n }"}, {"sha": "67d81ab8684c1939192a2f98cc5312e9481910da", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -19,7 +19,7 @@ fn bar(v: &mut [uint]) {\n }\n \n pub fn main() {\n-    let mut the_vec = ~[1, 2, 3, 100];\n+    let mut the_vec = vec!(1, 2, 3, 100);\n     bar(the_vec);\n-    assert_eq!(the_vec, ~[100, 3, 2, 1]);\n+    assert_eq!(the_vec, vec!(100, 3, 2, 1));\n }"}, {"sha": "31620973ce77281862d5ec17c1022844d0141564", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-rcvr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -15,7 +15,7 @@ fn bar(v: &mut [uint]) {\n }\n \n pub fn main() {\n-    let mut the_vec = ~[1, 2, 3, 100];\n+    let mut the_vec = vec!(1, 2, 3, 100);\n     bar(the_vec);\n-    assert_eq!(the_vec, ~[100, 3, 2, 1]);\n+    assert_eq!(the_vec, vec!(100, 3, 2, 1));\n }"}, {"sha": "5470b1d6615009b88d8799a51bd892525054e601", "filename": "src/test/run-pass/const-enum-vec-repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fconst-enum-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fconst-enum-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-repeat.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,5 +11,5 @@\n enum State { ST_NULL, ST_WHITESPACE = 1 }\n \n pub fn main() {\n-    ~[ST_NULL, ..(ST_WHITESPACE as uint)];\n+    vec!(ST_NULL, ..(ST_WHITESPACE as uint));\n }"}, {"sha": "f3d9eba87b6c929e356c3593a2d0865af1cb8d16", "filename": "src/test/run-pass/empty-mutable-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,4 +10,4 @@\n \n #[allow(unused_mut)];\n \n-pub fn main() { let mut _v: ~[int] = ~[]; }\n+pub fn main() { let mut _v: Vec<int> = Vec::new(); }"}, {"sha": "25dae36bcb1546439949a170b4e9f8f031f757f4", "filename": "src/test/run-pass/expr-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-fn.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -14,7 +14,7 @@ fn test_int() {\n }\n \n fn test_vec() {\n-    fn f() -> ~[int] { ~[10, 11] }\n+    fn f() -> Vec<int> { vec!(10, 11) }\n     assert_eq!(f()[1], 11);\n }\n "}, {"sha": "71306a43f23b6156ba60f15ccfb8fae9edfd2a9d", "filename": "src/test/run-pass/expr-match-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fexpr-match-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fexpr-match-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-fail.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -14,7 +14,7 @@ fn test_simple() {\n }\n \n fn test_box() {\n-    let r = match true { true => { ~[10] } false => { fail!() } };\n+    let r = match true { true => { vec!(10) } false => { fail!() } };\n     assert_eq!(r[0], 10);\n }\n "}, {"sha": "a111a878dddcd6b0b558b9299faf653696dd5e0c", "filename": "src/test/run-pass/expr-repeat-vstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,7 +11,7 @@\n #[feature(managed_boxes)];\n \n pub fn main() {\n-    let v: ~[int] = ~[ 1, ..5 ];\n+    let v: Vec<int> = vec!( 1, ..5 );\n     println!(\"{}\", v[0]);\n     println!(\"{}\", v[1]);\n     println!(\"{}\", v[2]);"}, {"sha": "7cc8b22e061e4c26c514add64c0a649963878519", "filename": "src/test/run-pass/for-destruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ffor-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ffor-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-destruct.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,7 +11,7 @@\n struct Pair { x: int, y: int }\n \n pub fn main() {\n-    for elt in (~[Pair {x: 10, y: 20}, Pair {x: 30, y: 0}]).iter() {\n+    for elt in (vec!(Pair {x: 10, y: 20}, Pair {x: 30, y: 0})).iter() {\n         assert_eq!(elt.x + elt.y, 30);\n     }\n }"}, {"sha": "d93f90937a177e48b71bc863df43e717a535a423", "filename": "src/test/run-pass/for-loop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub fn main() { let x: ~[int] = ~[]; for _ in x.iter() { fail!(\"moop\"); } }\n+pub fn main() { let x: Vec<int> = Vec::new(); for _ in x.iter() { fail!(\"moop\"); } }"}, {"sha": "26395ed51f603715f2656da28cadcd28ffdae91c", "filename": "src/test/run-pass/foreach-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -14,7 +14,7 @@\n fn two(it: |int|) { it(0); it(1); }\n \n pub fn main() {\n-    let mut a: ~[int] = ~[-1, -1, -1, -1];\n+    let mut a: Vec<int> = vec!(-1, -1, -1, -1);\n     let mut p: int = 0;\n     two(|i| {\n         two(|j| { a[p] = 10 * i + j; p += 1; })"}, {"sha": "f879e195292c8e722cc80745cf51c4c587ff98f5", "filename": "src/test/run-pass/generic-ivec-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,4 +10,4 @@\n \n enum wrapper<T> { wrapped(T), }\n \n-pub fn main() { let _w = wrapped(~[1, 2, 3, 4, 5]); }\n+pub fn main() { let _w = wrapped(vec!(1, 2, 3, 4, 5)); }"}, {"sha": "c2eae06401992f3cf3a35cb32196f9b8b1acbb6d", "filename": "src/test/run-pass/generic-ivec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,4 +11,4 @@\n #[feature(managed_boxes)];\n \n fn f<T>(_v: @T) { }\n-pub fn main() { f(@~[1, 2, 3, 4, 5]); }\n+pub fn main() { f(@vec!(1, 2, 3, 4, 5)); }"}, {"sha": "ccc1936fa994892f258c0592e3a61979f46077e3", "filename": "src/test/run-pass/generic-static-methods.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n trait vec_utils<T> {\n-    fn map_<U>(x: &Self, f: |&T| -> U) -> ~[U];\n+    fn map_<U>(x: &Self, f: |&T| -> U) -> Vec<U> ;\n }\n \n-impl<T> vec_utils<T> for ~[T] {\n-    fn map_<U>(x: &~[T], f: |&T| -> U) -> ~[U] {\n-        let mut r = ~[];\n+impl<T> vec_utils<T> for Vec<T> {\n+    fn map_<U>(x: &Vec<T> , f: |&T| -> U) -> Vec<U> {\n+        let mut r = Vec::new();\n         for elt in x.iter() {\n             r.push(f(elt));\n         }\n@@ -23,5 +23,5 @@ impl<T> vec_utils<T> for ~[T] {\n }\n \n pub fn main() {\n-    assert_eq!(vec_utils::map_(&~[1,2,3], |&x| x+1), ~[2,3,4]);\n+    assert_eq!(vec_utils::map_(&vec!(1,2,3), |&x| x+1), vec!(2,3,4));\n }"}, {"sha": "5dea08ce6462eaa5f8a470ee21b9ec954ccf335f", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -15,8 +15,8 @@ extern crate getopts;\n use getopts::{optopt, getopts};\n \n pub fn main() {\n-    let args = ~[];\n-    let opts = ~[optopt(\"b\", \"\", \"something\", \"SMTHNG\")];\n+    let args = Vec::new();\n+    let opts = vec!(optopt(\"b\", \"\", \"something\", \"SMTHNG\"));\n \n     match getopts(args, opts) {\n         Ok(ref m)  =>"}, {"sha": "0a12731fb46678d38c90eb0f73c72e12bde16614", "filename": "src/test/run-pass/glob-std.rs", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fglob-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fglob-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fglob-std.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -40,7 +40,7 @@ pub fn main() {\n         os::getcwd().join(&Path::new(path))\n     }\n \n-    fn glob_vec(pattern: &str) -> ~[Path] {\n+    fn glob_vec(pattern: &str) -> Vec<Path> {\n         glob(pattern).collect()\n     }\n \n@@ -72,133 +72,133 @@ pub fn main() {\n     mk_file(\"xyz/y\", false);\n     mk_file(\"xyz/z\", false);\n \n-    assert_eq!(glob_vec(\"\"), ~[]);\n-    assert_eq!(glob_vec(\".\"), ~[]);\n-    assert_eq!(glob_vec(\"..\"), ~[]);\n+    assert_eq!(glob_vec(\"\"), Vec::new());\n+    assert_eq!(glob_vec(\".\"), Vec::new());\n+    assert_eq!(glob_vec(\"..\"), Vec::new());\n \n-    assert_eq!(glob_vec(\"aaa\"), ~[abs_path(\"aaa\")]);\n-    assert_eq!(glob_vec(\"aaa/\"), ~[abs_path(\"aaa\")]);\n-    assert_eq!(glob_vec(\"a\"), ~[]);\n-    assert_eq!(glob_vec(\"aa\"), ~[]);\n-    assert_eq!(glob_vec(\"aaaa\"), ~[]);\n+    assert_eq!(glob_vec(\"aaa\"), vec!(abs_path(\"aaa\")));\n+    assert_eq!(glob_vec(\"aaa/\"), vec!(abs_path(\"aaa\")));\n+    assert_eq!(glob_vec(\"a\"), Vec::new());\n+    assert_eq!(glob_vec(\"aa\"), Vec::new());\n+    assert_eq!(glob_vec(\"aaaa\"), Vec::new());\n \n-    assert_eq!(glob_vec(\"aaa/apple\"), ~[abs_path(\"aaa/apple\")]);\n-    assert_eq!(glob_vec(\"aaa/apple/nope\"), ~[]);\n+    assert_eq!(glob_vec(\"aaa/apple\"), vec!(abs_path(\"aaa/apple\")));\n+    assert_eq!(glob_vec(\"aaa/apple/nope\"), Vec::new());\n \n     // windows should support both / and \\ as directory separators\n     if os::consts::FAMILY == os::consts::windows::FAMILY {\n-        assert_eq!(glob_vec(\"aaa\\\\apple\"), ~[abs_path(\"aaa/apple\")]);\n+        assert_eq!(glob_vec(\"aaa\\\\apple\"), vec!(abs_path(\"aaa/apple\")));\n     }\n \n-    assert_eq!(glob_vec(\"???/\"), ~[\n+    assert_eq!(glob_vec(\"???/\"), vec!(\n         abs_path(\"aaa\"),\n         abs_path(\"bbb\"),\n         abs_path(\"ccc\"),\n-        abs_path(\"xyz\")]);\n+        abs_path(\"xyz\")));\n \n-    assert_eq!(glob_vec(\"aaa/tomato/tom?to.txt\"), ~[\n+    assert_eq!(glob_vec(\"aaa/tomato/tom?to.txt\"), vec!(\n         abs_path(\"aaa/tomato/tomato.txt\"),\n-        abs_path(\"aaa/tomato/tomoto.txt\")]);\n+        abs_path(\"aaa/tomato/tomoto.txt\")));\n \n-    assert_eq!(glob_vec(\"xyz/?\"), ~[\n+    assert_eq!(glob_vec(\"xyz/?\"), vec!(\n         abs_path(\"xyz/x\"),\n         abs_path(\"xyz/y\"),\n-        abs_path(\"xyz/z\")]);\n-\n-    assert_eq!(glob_vec(\"a*\"), ~[abs_path(\"aaa\")]);\n-    assert_eq!(glob_vec(\"*a*\"), ~[abs_path(\"aaa\")]);\n-    assert_eq!(glob_vec(\"a*a\"), ~[abs_path(\"aaa\")]);\n-    assert_eq!(glob_vec(\"aaa*\"), ~[abs_path(\"aaa\")]);\n-    assert_eq!(glob_vec(\"*aaa\"), ~[abs_path(\"aaa\")]);\n-    assert_eq!(glob_vec(\"*aaa*\"), ~[abs_path(\"aaa\")]);\n-    assert_eq!(glob_vec(\"*a*a*a*\"), ~[abs_path(\"aaa\")]);\n-    assert_eq!(glob_vec(\"aaa*/\"), ~[abs_path(\"aaa\")]);\n-\n-    assert_eq!(glob_vec(\"aaa/*\"), ~[\n+        abs_path(\"xyz/z\")));\n+\n+    assert_eq!(glob_vec(\"a*\"), vec!(abs_path(\"aaa\")));\n+    assert_eq!(glob_vec(\"*a*\"), vec!(abs_path(\"aaa\")));\n+    assert_eq!(glob_vec(\"a*a\"), vec!(abs_path(\"aaa\")));\n+    assert_eq!(glob_vec(\"aaa*\"), vec!(abs_path(\"aaa\")));\n+    assert_eq!(glob_vec(\"*aaa\"), vec!(abs_path(\"aaa\")));\n+    assert_eq!(glob_vec(\"*aaa*\"), vec!(abs_path(\"aaa\")));\n+    assert_eq!(glob_vec(\"*a*a*a*\"), vec!(abs_path(\"aaa\")));\n+    assert_eq!(glob_vec(\"aaa*/\"), vec!(abs_path(\"aaa\")));\n+\n+    assert_eq!(glob_vec(\"aaa/*\"), vec!(\n         abs_path(\"aaa/apple\"),\n         abs_path(\"aaa/orange\"),\n-        abs_path(\"aaa/tomato\")]);\n+        abs_path(\"aaa/tomato\")));\n \n-    assert_eq!(glob_vec(\"aaa/*a*\"), ~[\n+    assert_eq!(glob_vec(\"aaa/*a*\"), vec!(\n         abs_path(\"aaa/apple\"),\n         abs_path(\"aaa/orange\"),\n-        abs_path(\"aaa/tomato\")]);\n+        abs_path(\"aaa/tomato\")));\n \n-    assert_eq!(glob_vec(\"*/*/*.txt\"), ~[\n+    assert_eq!(glob_vec(\"*/*/*.txt\"), vec!(\n         abs_path(\"aaa/tomato/tomato.txt\"),\n-        abs_path(\"aaa/tomato/tomoto.txt\")]);\n+        abs_path(\"aaa/tomato/tomoto.txt\")));\n \n-    assert_eq!(glob_vec(\"*/*/t[aob]m?to[.]t[!y]t\"), ~[\n+    assert_eq!(glob_vec(\"*/*/t[aob]m?to[.]t[!y]t\"), vec!(\n         abs_path(\"aaa/tomato/tomato.txt\"),\n-        abs_path(\"aaa/tomato/tomoto.txt\")]);\n+        abs_path(\"aaa/tomato/tomoto.txt\")));\n \n-    assert_eq!(glob_vec(\"aa[a]\"), ~[abs_path(\"aaa\")]);\n-    assert_eq!(glob_vec(\"aa[abc]\"), ~[abs_path(\"aaa\")]);\n-    assert_eq!(glob_vec(\"a[bca]a\"), ~[abs_path(\"aaa\")]);\n-    assert_eq!(glob_vec(\"aa[b]\"), ~[]);\n-    assert_eq!(glob_vec(\"aa[xyz]\"), ~[]);\n-    assert_eq!(glob_vec(\"aa[]]\"), ~[]);\n+    assert_eq!(glob_vec(\"aa[a]\"), vec!(abs_path(\"aaa\")));\n+    assert_eq!(glob_vec(\"aa[abc]\"), vec!(abs_path(\"aaa\")));\n+    assert_eq!(glob_vec(\"a[bca]a\"), vec!(abs_path(\"aaa\")));\n+    assert_eq!(glob_vec(\"aa[b]\"), Vec::new());\n+    assert_eq!(glob_vec(\"aa[xyz]\"), Vec::new());\n+    assert_eq!(glob_vec(\"aa[]]\"), Vec::new());\n \n-    assert_eq!(glob_vec(\"aa[!b]\"), ~[abs_path(\"aaa\")]);\n-    assert_eq!(glob_vec(\"aa[!bcd]\"), ~[abs_path(\"aaa\")]);\n-    assert_eq!(glob_vec(\"a[!bcd]a\"), ~[abs_path(\"aaa\")]);\n-    assert_eq!(glob_vec(\"aa[!a]\"), ~[]);\n-    assert_eq!(glob_vec(\"aa[!abc]\"), ~[]);\n+    assert_eq!(glob_vec(\"aa[!b]\"), vec!(abs_path(\"aaa\")));\n+    assert_eq!(glob_vec(\"aa[!bcd]\"), vec!(abs_path(\"aaa\")));\n+    assert_eq!(glob_vec(\"a[!bcd]a\"), vec!(abs_path(\"aaa\")));\n+    assert_eq!(glob_vec(\"aa[!a]\"), Vec::new());\n+    assert_eq!(glob_vec(\"aa[!abc]\"), Vec::new());\n \n-    assert_eq!(glob_vec(\"bbb/specials/[[]\"), ~[abs_path(\"bbb/specials/[\")]);\n-    assert_eq!(glob_vec(\"bbb/specials/!\"), ~[abs_path(\"bbb/specials/!\")]);\n-    assert_eq!(glob_vec(\"bbb/specials/[]]\"), ~[abs_path(\"bbb/specials/]\")]);\n+    assert_eq!(glob_vec(\"bbb/specials/[[]\"), vec!(abs_path(\"bbb/specials/[\")));\n+    assert_eq!(glob_vec(\"bbb/specials/!\"), vec!(abs_path(\"bbb/specials/!\")));\n+    assert_eq!(glob_vec(\"bbb/specials/[]]\"), vec!(abs_path(\"bbb/specials/]\")));\n \n     if os::consts::FAMILY != os::consts::windows::FAMILY {\n-        assert_eq!(glob_vec(\"bbb/specials/[*]\"), ~[abs_path(\"bbb/specials/*\")]);\n-        assert_eq!(glob_vec(\"bbb/specials/[?]\"), ~[abs_path(\"bbb/specials/?\")]);\n+        assert_eq!(glob_vec(\"bbb/specials/[*]\"), vec!(abs_path(\"bbb/specials/*\")));\n+        assert_eq!(glob_vec(\"bbb/specials/[?]\"), vec!(abs_path(\"bbb/specials/?\")));\n     }\n \n     if os::consts::FAMILY == os::consts::windows::FAMILY {\n \n-        assert_eq!(glob_vec(\"bbb/specials/[![]\"), ~[\n+        assert_eq!(glob_vec(\"bbb/specials/[![]\"), vec!(\n             abs_path(\"bbb/specials/!\"),\n-            abs_path(\"bbb/specials/]\")]);\n+            abs_path(\"bbb/specials/]\")));\n \n-        assert_eq!(glob_vec(\"bbb/specials/[!]]\"), ~[\n+        assert_eq!(glob_vec(\"bbb/specials/[!]]\"), vec!(\n             abs_path(\"bbb/specials/!\"),\n-            abs_path(\"bbb/specials/[\")]);\n+            abs_path(\"bbb/specials/[\")));\n \n-        assert_eq!(glob_vec(\"bbb/specials/[!!]\"), ~[\n+        assert_eq!(glob_vec(\"bbb/specials/[!!]\"), vec!(\n             abs_path(\"bbb/specials/[\"),\n-            abs_path(\"bbb/specials/]\")]);\n+            abs_path(\"bbb/specials/]\")));\n \n     } else {\n \n-        assert_eq!(glob_vec(\"bbb/specials/[![]\"), ~[\n+        assert_eq!(glob_vec(\"bbb/specials/[![]\"), vec!(\n             abs_path(\"bbb/specials/!\"),\n             abs_path(\"bbb/specials/*\"),\n             abs_path(\"bbb/specials/?\"),\n-            abs_path(\"bbb/specials/]\")]);\n+            abs_path(\"bbb/specials/]\")));\n \n-        assert_eq!(glob_vec(\"bbb/specials/[!]]\"), ~[\n+        assert_eq!(glob_vec(\"bbb/specials/[!]]\"), vec!(\n             abs_path(\"bbb/specials/!\"),\n             abs_path(\"bbb/specials/*\"),\n             abs_path(\"bbb/specials/?\"),\n-            abs_path(\"bbb/specials/[\")]);\n+            abs_path(\"bbb/specials/[\")));\n \n-        assert_eq!(glob_vec(\"bbb/specials/[!!]\"), ~[\n+        assert_eq!(glob_vec(\"bbb/specials/[!!]\"), vec!(\n             abs_path(\"bbb/specials/*\"),\n             abs_path(\"bbb/specials/?\"),\n             abs_path(\"bbb/specials/[\"),\n-            abs_path(\"bbb/specials/]\")]);\n+            abs_path(\"bbb/specials/]\")));\n \n-        assert_eq!(glob_vec(\"bbb/specials/[!*]\"), ~[\n+        assert_eq!(glob_vec(\"bbb/specials/[!*]\"), vec!(\n             abs_path(\"bbb/specials/!\"),\n             abs_path(\"bbb/specials/?\"),\n             abs_path(\"bbb/specials/[\"),\n-            abs_path(\"bbb/specials/]\")]);\n+            abs_path(\"bbb/specials/]\")));\n \n-        assert_eq!(glob_vec(\"bbb/specials/[!?]\"), ~[\n+        assert_eq!(glob_vec(\"bbb/specials/[!?]\"), vec!(\n             abs_path(\"bbb/specials/!\"),\n             abs_path(\"bbb/specials/*\"),\n             abs_path(\"bbb/specials/[\"),\n-            abs_path(\"bbb/specials/]\")]);\n+            abs_path(\"bbb/specials/]\")));\n \n     }\n }"}, {"sha": "a11e286b96987be9cf5799c7a869472fd0eb05de", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -31,9 +31,9 @@ mod map_reduce {\n \n     pub type mapper = extern fn(~str, putter);\n \n-    enum ctrl_proto { find_reducer(~[u8], Sender<int>), mapper_done, }\n+    enum ctrl_proto { find_reducer(Vec<u8>, Sender<int>), mapper_done, }\n \n-    fn start_mappers(ctrl: Sender<ctrl_proto>, inputs: ~[~str]) {\n+    fn start_mappers(ctrl: Sender<ctrl_proto>, inputs: Vec<~str>) {\n         for i in inputs.iter() {\n             let ctrl = ctrl.clone();\n             let i = i.clone();\n@@ -64,7 +64,7 @@ mod map_reduce {\n         ctrl_clone.send(mapper_done);\n     }\n \n-    pub fn map_reduce(inputs: ~[~str]) {\n+    pub fn map_reduce(inputs: Vec<~str>) {\n         let (tx, rx) = channel();\n \n         // This task becomes the master control task. It spawns others\n@@ -95,5 +95,5 @@ mod map_reduce {\n }\n \n pub fn main() {\n-    map_reduce::map_reduce(~[~\"../src/test/run-pass/hashmap-memory.rs\"]);\n+    map_reduce::map_reduce(vec!(~\"../src/test/run-pass/hashmap-memory.rs\"));\n }"}, {"sha": "5141be1f178b331b05025f3cd45d21fbdbe72702", "filename": "src/test/run-pass/html-literals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhtml-literals.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -41,7 +41,7 @@ macro_rules! parse_node (\n         parse_node!(\n             [$(: $tags ($(:$tag_nodes),*))*];\n             [$(:$head_nodes,)* :tag(stringify!($head).to_owned(),\n-                                    ~[$($nodes),*])];\n+                                    vec!($($nodes),*))];\n             $($rest)*\n         )\n     );\n@@ -97,6 +97,6 @@ pub fn main() {\n }\n \n enum HTMLFragment {\n-    tag(~str, ~[HTMLFragment]),\n+    tag(~str, Vec<HTMLFragment> ),\n     text(~str),\n }"}, {"sha": "e3ea5886fa3b186db147663f1aa8941b5e52e930", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -18,5 +18,5 @@ use std::slice::*;\n pub fn main() {\n     let mut v = from_elem(0u, 0);\n     v = append(v, [4, 2]);\n-    assert_eq!(from_fn(2, |i| 2*(i+1)), ~[2, 4]);\n+    assert_eq!(from_fn(2, |i| 2*(i+1)), vec!(2, 4));\n }"}, {"sha": "6642d1a5a8e52b43eaf92fd40f1fde30a27c34b6", "filename": "src/test/run-pass/infer-fn-tail-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Finfer-fn-tail-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Finfer-fn-tail-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finfer-fn-tail-expr.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,6 +10,6 @@\n \n // issue #680\n \n-fn f() -> ~[int] { ~[] }\n+fn f() -> Vec<int> { Vec::new() }\n \n pub fn main() { }"}, {"sha": "cbbe101c58a34fc73a67c49be0156604bfa9b3d5", "filename": "src/test/run-pass/integral-indexing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -13,7 +13,7 @@\n \n // This is a testcase for issue #94.\n pub fn main() {\n-    let v: ~[int] = ~[0, 1, 2, 3, 4, 5];\n+    let v: Vec<int> = vec!(0, 1, 2, 3, 4, 5);\n     let s: ~str = ~\"abcdef\";\n     assert_eq!(v[3u], 3);\n     assert_eq!(v[3u8], 3);"}, {"sha": "ccd2399a06dec53c589f319d48885c0772723dc7", "filename": "src/test/run-pass/issue-1821.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-1821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-1821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1821.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,6 +10,6 @@\n \n // Issue #1821 - Don't recurse trying to typecheck this\n enum t {\n-    foo(~[t])\n+    foo(vec!(t))\n }\n pub fn main() {}"}, {"sha": "cfdd226ef5c28939254a081e4f8479df2e0537da", "filename": "src/test/run-pass/issue-2502.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2502.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,16 +9,16 @@\n // except according to those terms.\n \n struct font<'a> {\n-    fontbuf: &'a ~[u8],\n+    fontbuf: &'a Vec<u8> ,\n }\n \n impl<'a> font<'a> {\n-    pub fn buf(&self) -> &'a ~[u8] {\n+    pub fn buf(&self) -> &'a Vec<u8> {\n         self.fontbuf\n     }\n }\n \n-fn font<'r>(fontbuf: &'r ~[u8]) -> font<'r> {\n+fn font<'r>(fontbuf: &'r Vec<u8> ) -> font<'r> {\n     font {\n         fontbuf: fontbuf\n     }"}, {"sha": "1ea268eafca845125e1b1bf406bcd352341f6285", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -21,7 +21,7 @@ use std::cell::RefCell;\n use collections::HashMap;\n \n pub fn main() {\n-  let v = ~[@~\"hi\"];\n+  let v = vec!(@~\"hi\");\n   let mut m: req::header_map = HashMap::new();\n   m.insert(~\"METHOD\", @RefCell::new(v));\n   request::<int>(&m);"}, {"sha": "4bf5a562cf05bc5bb9c8f77d5a7020d47f8e1b94", "filename": "src/test/run-pass/issue-2723-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-2723-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-2723-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2723-b.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -16,6 +16,6 @@ use issue_2723_a::f;\n \n pub fn main() {\n     unsafe {\n-        f(~[2]);\n+        f(vec!(2));\n     }\n }"}, {"sha": "eeda79e1355a8976efbbd5048bc95749daed185d", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -55,8 +55,7 @@ fn add_interface(_store: int, managed_ip: ~str, data: json::Json) -> (~str, obje\n }\n \n fn add_interfaces(store: int, managed_ip: ~str, device: HashMap<~str, json::Json>)\n--> ~[(~str, object)]\n-{\n+-> Vec<(~str, object)> {\n     match device.get(&~\"interfaces\")\n     {\n         &json::List(ref interfaces) =>\n@@ -69,7 +68,7 @@ fn add_interfaces(store: int, managed_ip: ~str, device: HashMap<~str, json::Json\n         {\n             println!(\"Expected list for {} interfaces but found {:?}\", managed_ip,\n                    device.get(&~\"interfaces\"));\n-            ~[]\n+            Vec::new()\n         }\n     }\n }"}, {"sha": "9ffe4bc4d7e5d67b86cb011d2edf967c23fb7bc0", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -60,12 +60,12 @@ fn square_from_char(c: char) -> square {\n     }\n }\n \n-fn read_board_grid<rdr:'static + io::Reader>(mut input: rdr) -> ~[~[square]] {\n+fn read_board_grid<rdr:'static + io::Reader>(mut input: rdr) -> vec!(vec!(square)) {\n     let mut input: &mut io::Reader = &mut input;\n-    let mut grid = ~[];\n+    let mut grid = Vec::new();\n     let mut line = [0, ..10];\n     input.read(line);\n-    let mut row = ~[];\n+    let mut row = Vec::new();\n     for c in line.iter() {\n         row.push(square_from_char(*c as char))\n     }"}, {"sha": "d625f6bcf92fa3d0abcb82b474d76776fae912ca", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -8,34 +8,32 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::slice;\n-\n trait methods {\n-    fn to_bytes(&self) -> ~[u8];\n+    fn to_bytes(&self) -> Vec<u8> ;\n }\n \n impl methods for () {\n-    fn to_bytes(&self) -> ~[u8] {\n-        slice::from_elem(0, 0u8)\n+    fn to_bytes(&self) -> Vec<u8> {\n+        Vec::from_elem(0, 0u8)\n     }\n }\n \n // the position of this function is significant! - if it comes before methods\n // then it works, if it comes after it then it doesn't!\n-fn to_bools(bitv: Storage) -> ~[bool] {\n-    slice::from_fn(8, |i| {\n+fn to_bools(bitv: Storage) -> Vec<bool> {\n+    Vec::from_fn(8, |i| {\n         let w = i / 64;\n         let b = i % 64;\n         let x = 1u64 & (bitv.storage[w] >> b);\n         x == 1u64\n     })\n }\n \n-struct Storage { storage: ~[u64] }\n+struct Storage { storage: Vec<u64> }\n \n pub fn main() {\n-    let bools = ~[false, false, true, false, false, true, true, false];\n-    let bools2 = to_bools(Storage{storage: ~[0b01100100]});\n+    let bools = vec!(false, false, true, false, false, true, true, false);\n+    let bools2 = to_bools(Storage{storage: vec!(0b01100100)});\n \n     for i in range(0u, 8) {\n         println!(\"{} => {} vs {}\", i, bools[i], bools2[i]);"}, {"sha": "bc33bb72aa81a1e703e7c1016d55b0e45505834a", "filename": "src/test/run-pass/issue-3052.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3052.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type Connection = 'static |~[u8]|;\n+type Connection = 'static |Vec<u8> |;\n \n fn f() -> Option<Connection> {\n     let mock_connection: Connection = |_| {};"}, {"sha": "96ecc81edccc63f39d3ca4521094df258556b3c9", "filename": "src/test/run-pass/issue-3389.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-3389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-3389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3389.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,23 +9,23 @@\n // except according to those terms.\n \n struct trie_node {\n-    content: ~[~str],\n-    children: ~[trie_node],\n+    content: Vec<~str> ,\n+    children: Vec<trie_node> ,\n }\n \n-fn print_str_vector(vector: ~[~str]) {\n+fn print_str_vector(vector: Vec<~str> ) {\n     for string in vector.iter() {\n         println!(\"{}\", *string);\n     }\n }\n \n pub fn main() {\n     let mut node: trie_node = trie_node {\n-        content: ~[],\n-        children: ~[]\n+        content: Vec::new(),\n+        children: Vec::new()\n     };\n-    let v = ~[~\"123\", ~\"abc\"];\n-    node.content = ~[~\"123\", ~\"abc\"];\n+    let v = vec!(~\"123\", ~\"abc\");\n+    node.content = vec!(~\"123\", ~\"abc\");\n     print_str_vector(v);\n     print_str_vector(node.content.clone());\n "}, {"sha": "bfdf623efda76e7df7f94ab5faa7a6470b3d62bd", "filename": "src/test/run-pass/issue-3556.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3556.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -12,10 +12,10 @@\n \n enum Token {\n     Text(@~str),\n-    ETag(@~[~str], @~str),\n-    UTag(@~[~str], @~str),\n-    Section(@~[~str], bool, @~[Token], @~str, @~str, @~str, @~str, @~str),\n-    IncompleteSection(@~[~str], bool, @~str, bool),\n+    ETag(@Vec<~str> , @~str),\n+    UTag(@Vec<~str> , @~str),\n+    Section(@Vec<~str> , bool, @Vec<Token> , @~str, @~str, @~str, @~str, @~str),\n+    IncompleteSection(@Vec<~str> , bool, @~str, bool),\n     Partial(@~str, @~str, @~str),\n }\n \n@@ -35,7 +35,7 @@ pub fn main()\n // assert!(check_strs(fmt!(\"%?\", ETag(@~[~\"foo\"], @~\"bar\")), \"ETag(@~[ ~\\\"foo\\\" ], @~\\\"bar\\\")\"));\n \n     let t = Text(@~\"foo\");\n-    let u = Section(@~[~\"alpha\"], true, @~[t], @~\"foo\", @~\"foo\", @~\"foo\", @~\"foo\", @~\"foo\");\n+    let u = Section(@vec!(~\"alpha\"), true, @vec!(t), @~\"foo\", @~\"foo\", @~\"foo\", @~\"foo\", @~\"foo\");\n     let v = format!(\"{:?}\", u);    // this is the line that causes the seg fault\n     assert!(v.len() > 0);\n }"}, {"sha": "330cfdba24529872ae4d54d4a108be845daa3a22", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -46,7 +46,7 @@ struct AsciiArt {\n     width: uint,\n     height: uint,\n     fill: char,\n-    lines: ~[~[char]],\n+    lines: Vec<Vec<char> > ,\n \n     // This struct can be quite large so we'll disable copying: developers need\n     // to either pass these structs around via references or move them."}, {"sha": "c5ae1460a2cdcc528df40cb1bd24e950a8d6e0da", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,7 +10,7 @@\n \n use std::task;\n \n-type RingBuffer = ~[f64];\n+type RingBuffer = Vec<f64> ;\n type SamplesFn = proc(samples: &RingBuffer);\n \n enum Msg"}, {"sha": "07a520db20b98bc9ebf802ce703f347368cbea5c", "filename": "src/test/run-pass/issue-3991.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-3991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-3991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3991.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct HasNested {\n-    nest: ~[~[int]],\n+    nest: Vec<Vec<int> > ,\n }\n \n impl HasNested {"}, {"sha": "fbd4e2cd7425a197fb125f140220429d47afeefa", "filename": "src/test/run-pass/issue-4036.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-4036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-4036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4036.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -19,5 +19,5 @@ use serialize::{json, Decodable};\n pub fn main() {\n     let json = json::from_str(\"[1]\").unwrap();\n     let mut decoder = json::Decoder::new(json);\n-    let _x: ~[int] = Decodable::decode(&mut decoder);\n+    let _x: Vec<int> = Decodable::decode(&mut decoder);\n }"}, {"sha": "0a79b1335c80c866958ba0dce9e42af329e47350", "filename": "src/test/run-pass/issue-5708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5708.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -50,7 +50,7 @@ pub fn main() {\n trait MyTrait<T> { }\n \n pub struct MyContainer<'a, T> {\n-    foos: ~[&'a MyTrait<T>],\n+    foos: Vec<&'a MyTrait<T>> ,\n }\n \n impl<'a, T> MyContainer<'a, T> {"}, {"sha": "079c2d9a1c4f6f5b229e7ac66b95d2abc8d0d5f7", "filename": "src/test/run-pass/issue-6153.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6153.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn swap(f: |~[int]| -> ~[int]) -> ~[int] {\n-    let x = ~[1, 2, 3];\n+fn swap(f: |Vec<int> | -> Vec<int> ) -> Vec<int> {\n+    let x = vec!(1, 2, 3);\n     f(x)\n }\n "}, {"sha": "b2918b3ea391a0c45171b568da3d71dec60c79da", "filename": "src/test/run-pass/issue-8898.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8898.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n     let abc = [1, 2, 3];\n     let tf = [true, false];\n     let x  = [(), ()];\n-    let y = ~[(), ()];\n+    let y = vec!((), ());\n     let slice = x.slice(0,1);\n     let z = @x;\n "}, {"sha": "6926018bafa09b8065c4859801b03600ee646d2f", "filename": "src/test/run-pass/issue-9382.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-9382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fissue-9382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9382.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -32,15 +32,15 @@ pub fn main() {\n         bar: ~32,\n     };\n     Thing1 {\n-        baz: ~[],\n+        baz: Vec::new(),\n         bar: ~32,\n     };\n     let _t2_fixed = Thing2 {\n         baz: &[],\n         bar: 32,\n     };\n     Thing2 {\n-        baz: ~[],\n+        baz: Vec::new(),\n         bar: 32,\n     };\n }"}, {"sha": "f215958493fb0fb7add6061b824b1f99450043a0", "filename": "src/test/run-pass/ivec-add.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fivec-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fivec-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-add.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn double<T:Clone>(a: T) -> ~[T] { return ~[a.clone()] + ~[a]; }\n+fn double<T:Clone>(a: T) -> Vec<T> { return vec!(a.clone()) + vec!(a); }\n \n-fn double_int(a: int) -> ~[int] { return ~[a] + ~[a]; }\n+fn double_int(a: int) -> Vec<int> { return vec!(a) + vec!(a); }\n \n pub fn main() {\n     let mut d = double(1);"}, {"sha": "cd58689a19e311badd7c2b91a28d85f5e0280435", "filename": "src/test/run-pass/ivec-pass-by-value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fivec-pass-by-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fivec-pass-by-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-pass-by-value.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(_a: ~[int]) { }\n-pub fn main() { f(~[1, 2, 3, 4, 5]); }\n+fn f(_a: Vec<int> ) { }\n+pub fn main() { f(vec!(1, 2, 3, 4, 5)); }"}, {"sha": "81ff6fd7adc9419b85724a7f4770e18760ca44d6", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,17 +10,17 @@\n \n use std::task;\n \n-fn producer(tx: &Sender<~[u8]>) {\n+fn producer(tx: &Sender<Vec<u8>>) {\n     tx.send(\n-         ~[1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 8u8, 9u8, 10u8, 11u8, 12u8,\n-          13u8]);\n+         vec!(1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 8u8, 9u8, 10u8, 11u8, 12u8,\n+          13u8));\n }\n \n pub fn main() {\n-    let (tx, rx) = channel::<~[u8]>();\n+    let (tx, rx) = channel::<Vec<u8>>();\n     let _prod = task::spawn(proc() {\n         producer(&tx)\n     });\n \n-    let _data: ~[u8] = rx.recv();\n+    let _data: Vec<u8> = rx.recv();\n }"}, {"sha": "39eef6526a60dbabb0d72e9d86b0c3ba95be6f11", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,11 +11,11 @@\n // This should typecheck even though the type of e is not fully\n // resolved when we finish typechecking the ||.\n \n-struct Refs { refs: ~[int], n: int }\n+struct Refs { refs: Vec<int> , n: int }\n \n pub fn main() {\n-    let mut e = Refs{refs: ~[], n: 0};\n+    let mut e = Refs{refs: vec!(), n: 0};\n     let _f: || = || println!(\"{}\", e.n);\n-    let x: &[int] = e.refs;\n+    let x: &[int] = e.refs.as_slice();\n     assert_eq!(x.len(), 0);\n }"}, {"sha": "4dcc5801faf9d8aff59cf18f688d5dcae37104a1", "filename": "src/test/run-pass/linear-for-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = ~[1, 2, 3];\n+    let x = vec!(1, 2, 3);\n     let mut y = 0;\n     for i in x.iter() { println!(\"{:?}\", *i); y += *i; }\n     println!(\"{:?}\", y);"}, {"sha": "c04a595ac2407ef788cf39b5452398bcfa62047d", "filename": "src/test/run-pass/liveness-move-in-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,7 +11,7 @@\n fn take(x: int) -> int {x}\n \n fn the_loop() {\n-    let mut list = ~[];\n+    let mut list = Vec::new();\n     loop {\n         let x = 5;\n         if x > 3 {"}, {"sha": "69685b58ab5046820e1d8a068d5362b7816cdf17", "filename": "src/test/run-pass/log-poly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Flog-poly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Flog-poly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-poly.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -16,5 +16,5 @@ pub fn main() {\n     println!(\"{}\", 1);\n     println!(\"{}\", 2.0);\n     println!(\"{:?}\", Three);\n-    println!(\"{:?}\", ~[4]);\n+    println!(\"{:?}\", vec!(4));\n }"}, {"sha": "c912fd68a6cfe8ec62941508863d71a9ef2e39ea", "filename": "src/test/run-pass/log-str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Flog-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Flog-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-str.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,9 +11,9 @@\n use std::repr;\n \n pub fn main() {\n-    let act = repr::repr_to_str(&~[1, 2, 3]);\n+    let act = repr::repr_to_str(&vec!(1, 2, 3));\n     assert_eq!(~\"~[1, 2, 3]\", act);\n \n-    let act = format!(\"{:?}/{:6?}\", ~[1, 2, 3], ~\"hi\");\n+    let act = format!(\"{:?}/{:6?}\", vec!(1, 2, 3), ~\"hi\");\n     assert_eq!(act, ~\"~[1, 2, 3]/~\\\"hi\\\" \");\n }"}, {"sha": "1dc3700194c514bdb8879acc2fb968c750d6ab03", "filename": "src/test/run-pass/loop-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Floop-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Floop-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-scope.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = ~[10, 20, 30];\n+    let x = vec!(10, 20, 30);\n     let mut sum = 0;\n     for x in x.iter() { sum += *x; }\n     assert_eq!(sum, 60);"}, {"sha": "a9039885296b0020200ff23ade39b4753ebbd31d", "filename": "src/test/run-pass/match-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmatch-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmatch-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-join.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,7 +10,7 @@\n \n fn foo<T>(y: Option<T>) {\n     let mut x: int;\n-    let mut rs: ~[int] = ~[];\n+    let mut rs: Vec<int> = Vec::new();\n     /* tests that x doesn't get put in the precondition for the\n        entire if expression */\n "}, {"sha": "ba8ba6263df0784c20dedda5338c609632271439", "filename": "src/test/run-pass/match-vec-rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmatch-vec-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmatch-vec-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-vec-rvalue.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,7 +11,7 @@\n // Tests that matching rvalues with drops does not crash.\n \n pub fn main() {\n-    match ~[1, 2, 3] {\n+    match vec!(1, 2, 3) {\n         x => {\n             assert_eq!(x.len(), 3);\n             assert_eq!(x[0], 1);"}, {"sha": "b05a570291088f07b2e7cbcb8f0e2cf0596015a7", "filename": "src/test/run-pass/mod-view-items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-view-items.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -17,8 +17,7 @@\n // begin failing.\n \n mod m {\n-    use std::slice;\n-    pub fn f() -> ~[int] { slice::from_elem(1u, 0) }\n+    pub fn f() -> Vec<int> { Vec::from_elem(1u, 0) }\n }\n \n pub fn main() { let _x = m::f(); }"}, {"sha": "5df6738797d795576b662ce04b1f0741f7343ba1", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,12 +11,12 @@\n // ignore-fast\n \n trait vec_monad<A> {\n-    fn bind<B>(&self, f: |&A| -> ~[B]) -> ~[B];\n+    fn bind<B>(&self, f: |&A| -> Vec<B> ) -> Vec<B> ;\n }\n \n-impl<A> vec_monad<A> for ~[A] {\n-    fn bind<B>(&self, f: |&A| -> ~[B]) -> ~[B] {\n-        let mut r = ~[];\n+impl<A> vec_monad<A> for Vec<A> {\n+    fn bind<B>(&self, f: |&A| -> Vec<B> ) -> Vec<B> {\n+        let mut r = Vec::new();\n         for elt in self.iter() {\n             r.push_all_move(f(elt));\n         }\n@@ -44,8 +44,8 @@ fn transform(x: Option<int>) -> Option<~str> {\n pub fn main() {\n     assert_eq!(transform(Some(10)), Some(~\"11\"));\n     assert_eq!(transform(None), None);\n-    assert!((~[~\"hi\"])\n-        .bind(|x| ~[x.clone(), *x + \"!\"] )\n-        .bind(|x| ~[x.clone(), *x + \"?\"] ) ==\n-        ~[~\"hi\", ~\"hi?\", ~\"hi!\", ~\"hi!?\"]);\n+    assert!((vec!(~\"hi\"))\n+        .bind(|x| vec!(x.clone(), *x + \"!\") )\n+        .bind(|x| vec!(x.clone(), *x + \"?\") ) ==\n+        vec!(~\"hi\", ~\"hi?\", ~\"hi!\", ~\"hi!?\"));\n }"}, {"sha": "440acbcf4da6b3eb6bfcd27a5cc5a4d357a906e4", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -61,13 +61,14 @@ fn runtest2(f: extern fn(), frame_backoff: u32, last_stk: *u8) -> u32 {\n \n pub fn main() {\n     use rand::Rng;\n-    let fns = ~[\n+    let fns = vec!(\n         calllink01,\n         calllink02,\n         calllink08,\n         calllink10\n-    ];\n+    );\n     let mut rng = rand::task_rng();\n+\n     for f in fns.iter() {\n         let f = *f;\n         let sz = rng.gen::<u32>() % 256u32 + 256u32;"}, {"sha": "b27914fff80be1a7739277e3f63e6bb777260c5d", "filename": "src/test/run-pass/move-arg-2-unique.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn test(foo: ~~[int]) { assert!((foo[0] == 10)); }\n+fn test(foo: ~Vec<int> ) { assert!((foo[0] == 10)); }\n \n pub fn main() {\n-    let x = ~~[10];\n+    let x = ~vec!(10);\n     // Test forgetting a local by move-in\n     test(x);\n \n     // Test forgetting a temporary by move-in.\n-    test(~~[10]);\n+    test(~vec!(10));\n }"}, {"sha": "2cc56ec9227070febc37cdf7de1b18b0da09bed2", "filename": "src/test/run-pass/move-arg-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,13 +10,13 @@\n \n #[feature(managed_boxes)];\n \n-fn test(foo: @~[int]) { assert!((foo[0] == 10)); }\n+fn test(foo: @Vec<int> ) { assert!((foo[0] == 10)); }\n \n pub fn main() {\n-    let x = @~[10];\n+    let x = @vec!(10);\n     // Test forgetting a local by move-in\n     test(x);\n \n     // Test forgetting a temporary by move-in.\n-    test(@~[10]);\n+    test(@vec!(10));\n }"}, {"sha": "eb236b29263bcb85368350d8ce87c9cb1b369213", "filename": "src/test/run-pass/mutable-alias-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn grow(v: &mut ~[int]) {\n+fn grow(v: &mut Vec<int>) {\n     v.push(1);\n }\n \n pub fn main() {\n-    let mut v: ~[int] = ~[];\n+    let mut v: Vec<int> = Vec::new();\n     grow(&mut v);\n     grow(&mut v);\n     grow(&mut v);"}, {"sha": "9a83907c66f34bbc38827e587cba4c4ce3ba21c6", "filename": "src/test/run-pass/mutable-vec-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -15,6 +15,6 @@ struct Pair { a: int, b: int}\n \n pub fn main() {\n     // This just tests whether the vec leaks its members.\n-    let mut _pvec: ~[@Pair] =\n-        ~[@Pair{a: 1, b: 2}, @Pair{a: 3, b: 4}, @Pair{a: 5, b: 6}];\n+    let mut _pvec: Vec<@Pair> =\n+        vec!(@Pair{a: 1, b: 2}, @Pair{a: 3, b: 4}, @Pair{a: 5, b: 6});\n }"}, {"sha": "20e2675fccf85098d481b4a4f510df64424bf6b1", "filename": "src/test/run-pass/newtype-polymorphic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n #[deriving(Clone)]\n-struct myvec<X>(~[X]);\n+struct myvec<X>(Vec<X> );\n \n-fn myvec_deref<X:Clone>(mv: myvec<X>) -> ~[X] {\n+fn myvec_deref<X:Clone>(mv: myvec<X>) -> Vec<X> {\n     let myvec(v) = mv;\n     return v.clone();\n }\n@@ -22,7 +22,7 @@ fn myvec_elt<X>(mv: myvec<X>) -> X {\n }\n \n pub fn main() {\n-    let mv = myvec(~[1, 2, 3]);\n+    let mv = myvec(vec!(1, 2, 3));\n     assert_eq!(myvec_deref(mv.clone())[1], 2);\n     assert_eq!(myvec_elt(mv.clone()), 1);\n     let myvec(v) = mv;"}, {"sha": "117cd6d572ee06e071abf40c91a1a184c866f80b", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -77,7 +77,7 @@ pub fn main() {\n     check_type!(~18: ~int);\n     check_type!(@19: @int);\n     check_type!(~\"foo\": ~str);\n-    check_type!(~[20, 22]: ~[int]);\n+    check_type!(vec!(20, 22): Vec<int> );\n     let mint: uint = unsafe { cast::transmute(main) };\n     check_type!(main: fn(), |pthing| {\n         assert!(mint == unsafe { cast::transmute(*pthing) })"}, {"sha": "9ce68fa8ffcdb3453a8e978c68f17f3ea8e8dea1", "filename": "src/test/run-pass/nullable-pointer-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -41,6 +41,6 @@ pub fn main() {\n     check_type!(~int);\n     check_type!(@int);\n     check_type!(~str);\n-    check_type!(~[int]);\n+    check_type!(Vec<int> );\n     check_type!(extern fn());\n }"}, {"sha": "7a0c7b34d2f3705e2371a3acd822d82f4a33022e", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-header.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -31,11 +31,11 @@ impl FooTrait for BarStruct {\n }\n \n pub fn main() {\n-    let foos: ~[ ~FooTrait: ] = ~[\n+    let foos: vec!( ~FooTrait: ) = vec!(\n         ~BarStruct{ x: @0 } as ~FooTrait:,\n         ~BarStruct{ x: @1 } as ~FooTrait:,\n         ~BarStruct{ x: @2 } as ~FooTrait:\n-    ];\n+    );\n \n     for i in range(0u, foos.len()) {\n         assert_eq!(i, foos[i].foo());"}, {"sha": "f9f59f88bf1fdf53d36f1f26e7d6cc9cc146537b", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-headerless.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -27,11 +27,11 @@ impl FooTrait for BarStruct {\n }\n \n pub fn main() {\n-    let foos: ~[ ~FooTrait ] = ~[\n+    let foos: vec!( ~FooTrait ) = vec!(\n         ~BarStruct{ x: 0 } as ~FooTrait,\n         ~BarStruct{ x: 1 } as ~FooTrait,\n         ~BarStruct{ x: 2 } as ~FooTrait\n-    ];\n+    );\n \n     for i in range(0u, foos.len()) {\n         assert_eq!(i, foos[i].foo());"}, {"sha": "865e1cc601b3960805db16e921f3ecdaba79e882", "filename": "src/test/run-pass/overload-index-operator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -14,8 +14,7 @@\n use std::ops::Index;\n \n struct AssociationList<K,V> {\n-    pairs: ~[AssociationPair<K,V>]\n-}\n+    pairs: Vec<AssociationPair<K,V>> }\n \n #[deriving(Clone)]\n struct AssociationPair<K,V> {\n@@ -44,7 +43,7 @@ pub fn main() {\n     let foo = ~\"foo\";\n     let bar = ~\"bar\";\n \n-    let mut list = AssociationList {pairs: ~[]};\n+    let mut list = AssociationList {pairs: Vec::new()};\n     list.push(foo.clone(), 22);\n     list.push(bar.clone(), 44);\n "}, {"sha": "0ff282b68f8deeca196a6c48d960fe9d72339012", "filename": "src/test/run-pass/overloaded-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -42,7 +42,7 @@ pub fn main() {\n     (*(*p).borrow_mut()).y += 3;\n     assert_eq!(*(*p).borrow(), Point {x: 3, y: 5});\n \n-    let v = Rc::new(RefCell::new(~[1, 2, 3]));\n+    let v = Rc::new(RefCell::new(vec!(1, 2, 3)));\n     (*(*v).borrow_mut())[0] = 3;\n     (*(*v).borrow_mut())[1] += 3;\n     assert_eq!(((*(*v).borrow())[0], (*(*v).borrow())[1], (*(*v).borrow())[2]), (3, 5, 3));"}, {"sha": "b297fc7e13f77b232905f5d37942374673acd9d3", "filename": "src/test/run-pass/packed-struct-generic-size.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-size.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -22,6 +22,6 @@ pub fn main() {\n \n     assert_eq!(mem::size_of::<S<u64, u16>>(), 11);\n \n-    assert_eq!(mem::size_of::<S<~str, ~[int]>>(),\n-               1 + mem::size_of::<~str>() + mem::size_of::<~[int]>());\n+    assert_eq!(mem::size_of::<S<~str, Vec<int> >>(),\n+               1 + mem::size_of::<~str>() + mem::size_of::<Vec<int> >());\n }"}, {"sha": "d5f1caaf74da1570b70580abb0d1a8d3067ad241", "filename": "src/test/run-pass/pure-sum.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-sum.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,7 +10,7 @@\n \n // Check that functions can modify local state.\n \n-fn sums_to(v: ~[int], sum: int) -> bool {\n+fn sums_to(v: Vec<int> , sum: int) -> bool {\n     let mut i = 0u;\n     let mut sum0 = 0;\n     while i < v.len() {\n@@ -20,7 +20,7 @@ fn sums_to(v: ~[int], sum: int) -> bool {\n     return sum0 == sum;\n }\n \n-fn sums_to_using_uniq(v: ~[int], sum: int) -> bool {\n+fn sums_to_using_uniq(v: Vec<int> , sum: int) -> bool {\n     let mut i = 0u;\n     let mut sum0 = ~0;\n     while i < v.len() {\n@@ -30,7 +30,7 @@ fn sums_to_using_uniq(v: ~[int], sum: int) -> bool {\n     return *sum0 == sum;\n }\n \n-fn sums_to_using_rec(v: ~[int], sum: int) -> bool {\n+fn sums_to_using_rec(v: Vec<int> , sum: int) -> bool {\n     let mut i = 0u;\n     let mut sum0 = F {f: 0};\n     while i < v.len() {\n@@ -42,7 +42,7 @@ fn sums_to_using_rec(v: ~[int], sum: int) -> bool {\n \n struct F<T> { f: T }\n \n-fn sums_to_using_uniq_rec(v: ~[int], sum: int) -> bool {\n+fn sums_to_using_uniq_rec(v: Vec<int> , sum: int) -> bool {\n     let mut i = 0u;\n     let mut sum0 = F {f: ~0};\n     while i < v.len() {"}, {"sha": "8597bf39e0ef5346d71555b8a7fa28344996d811", "filename": "src/test/run-pass/rcvr-borrowed-to-slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -22,17 +22,17 @@ impl<'a> sum for &'a [int] {\n fn call_sum(x: &[int]) -> int { x.sum_() }\n \n pub fn main() {\n-    let x = ~[1, 2, 3];\n+    let x = vec!(1, 2, 3);\n     let y = call_sum(x);\n     println!(\"y=={}\", y);\n     assert_eq!(y, 6);\n \n-    let x = ~[1, 2, 3];\n+    let x = vec!(1, 2, 3);\n     let y = x.sum_();\n     println!(\"y=={}\", y);\n     assert_eq!(y, 6);\n \n-    let x = ~[1, 2, 3];\n+    let x = vec!(1, 2, 3);\n     let y = x.sum_();\n     println!(\"y=={}\", y);\n     assert_eq!(y, 6);"}, {"sha": "22f301410285aa87281ed74f0d9a521b76c4231f", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -13,7 +13,7 @@\n use std::intrinsics::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Disr, Opaque};\n \n struct MyVisitor {\n-    types: ~[~str],\n+    types: Vec<~str> ,\n }\n \n impl TyVisitor for MyVisitor {\n@@ -145,16 +145,16 @@ fn visit_ty<T>(v: &mut MyVisitor) {\n }\n \n pub fn main() {\n-    let mut v = MyVisitor {types: ~[]};\n+    let mut v = MyVisitor {types: Vec::new()};\n \n     visit_ty::<bool>(&mut v);\n     visit_ty::<int>(&mut v);\n     visit_ty::<i8>(&mut v);\n     visit_ty::<i16>(&mut v);\n-    visit_ty::<~[int]>(&mut v);\n+    visit_ty::<Vec<int> >(&mut v);\n \n     for s in v.types.iter() {\n         println!(\"type: {}\", (*s).clone());\n     }\n-    assert_eq!(v.types.clone(), ~[~\"bool\", ~\"int\", ~\"i8\", ~\"i16\", ~\"[\", ~\"int\", ~\"]\"]);\n+    assert_eq!(v.types.clone(), vec!(~\"bool\", ~\"int\", ~\"i8\", ~\"i16\", ~\"[\", ~\"int\", ~\"]\"));\n }"}, {"sha": "b17b025eb58a8a0ec06856c6ff0786ab781693e3", "filename": "src/test/run-pass/regions-borrow-evec-uniq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-uniq.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -13,11 +13,11 @@ fn foo(x: &[int]) -> int {\n }\n \n pub fn main() {\n-    let p = ~[1,2,3,4,5];\n+    let p = vec!(1,2,3,4,5);\n     let r = foo(p);\n     assert_eq!(r, 1);\n \n-    let p = ~[5,4,3,2,1];\n+    let p = vec!(5,4,3,2,1);\n     let r = foo(p);\n     assert_eq!(r, 5);\n }"}, {"sha": "3b5ff3f6092fc18b2bbed10dc99cbfffece812c7", "filename": "src/test/run-pass/regions-dependent-addr-of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -18,7 +18,7 @@ struct A {\n struct B {\n     v1: int,\n     v2: [int, ..3],\n-    v3: ~[int],\n+    v3: Vec<int> ,\n     v4: C,\n     v5: ~C,\n     v6: Option<C>\n@@ -84,7 +84,7 @@ fn get_v5_ref<'v>(a: &'v A, _i: uint) -> &'v int {\n pub fn main() {\n     let a = A {value: B {v1: 22,\n                          v2: [23, 24, 25],\n-                         v3: ~[26, 27, 28],\n+                         v3: vec!(26, 27, 28),\n                          v4: C { f: 29 },\n                          v5: ~C { f: 30 },\n                          v6: Some(C { f: 31 })}};"}, {"sha": "8cbdff6691a4a73085811762bf6fa444097aafcc", "filename": "src/test/run-pass/regions-dependent-autoslice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fregions-dependent-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fregions-dependent-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-autoslice.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -18,6 +18,6 @@ fn both<'r>(v: &'r [uint]) -> &'r [uint] {\n }\n \n pub fn main() {\n-    let v = ~[1,2,3];\n+    let v = vec!(1,2,3);\n     both(v);\n }"}, {"sha": "67542a5ded1d844c305749eda55b1bb7ca8b56b1", "filename": "src/test/run-pass/regions-infer-borrow-scope-view.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,7 +11,7 @@\n fn view<'r, T>(x: &'r [T]) -> &'r [T] {x}\n \n pub fn main() {\n-    let v = ~[1, 2, 3];\n+    let v = vec!(1, 2, 3);\n     let x = view(v);\n     let y = view(x);\n     assert!((v[0] == x[0]) && (v[0] == y[0]));"}, {"sha": "7c87c858d42a734f0ec7f04c9dfa2b8236ad2c47", "filename": "src/test/run-pass/regions-mock-tcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -44,7 +44,7 @@ impl<'tcx> Eq for TypeStructure<'tcx> {\n \n struct TypeContext<'tcx, 'ast> {\n     ty_arena: &'tcx Arena,\n-    types: ~[Type<'tcx>],\n+    types: Vec<Type<'tcx>> ,\n     type_table: HashMap<NodeId, Type<'tcx>>,\n \n     ast_arena: &'ast Arena,\n@@ -55,7 +55,7 @@ impl<'tcx,'ast> TypeContext<'tcx, 'ast> {\n     fn new(ty_arena: &'tcx Arena, ast_arena: &'ast Arena)\n            -> TypeContext<'tcx, 'ast> {\n         TypeContext { ty_arena: ty_arena,\n-                      types: ~[],\n+                      types: Vec::new(),\n                       type_table: HashMap::new(),\n \n                       ast_arena: ast_arena,"}, {"sha": "ddb34edad98614a63cc5bf4bf68dda6937c81e60", "filename": "src/test/run-pass/seq-compare.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fseq-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fseq-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fseq-compare.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -14,13 +14,13 @@ pub fn main() {\n     assert!((~\"hello\" < ~\"hellr\"));\n     assert!((~\"hello \" > ~\"hello\"));\n     assert!((~\"hello\" != ~\"there\"));\n-    assert!((~[1, 2, 3, 4] > ~[1, 2, 3]));\n-    assert!((~[1, 2, 3] < ~[1, 2, 3, 4]));\n-    assert!((~[1, 2, 4, 4] > ~[1, 2, 3, 4]));\n-    assert!((~[1, 2, 3, 4] < ~[1, 2, 4, 4]));\n-    assert!((~[1, 2, 3] <= ~[1, 2, 3]));\n-    assert!((~[1, 2, 3] <= ~[1, 2, 3, 3]));\n-    assert!((~[1, 2, 3, 4] > ~[1, 2, 3]));\n-    assert_eq!(~[1, 2, 3], ~[1, 2, 3]);\n-    assert!((~[1, 2, 3] != ~[1, 1, 3]));\n+    assert!((vec!(1, 2, 3, 4) > vec!(1, 2, 3)));\n+    assert!((vec!(1, 2, 3) < vec!(1, 2, 3, 4)));\n+    assert!((vec!(1, 2, 4, 4) > vec!(1, 2, 3, 4)));\n+    assert!((vec!(1, 2, 3, 4) < vec!(1, 2, 4, 4)));\n+    assert!((vec!(1, 2, 3) <= vec!(1, 2, 3)));\n+    assert!((vec!(1, 2, 3) <= vec!(1, 2, 3, 3)));\n+    assert!((vec!(1, 2, 3, 4) > vec!(1, 2, 3)));\n+    assert_eq!(vec!(1, 2, 3), vec!(1, 2, 3));\n+    assert!((vec!(1, 2, 3) != vec!(1, 1, 3)));\n }"}, {"sha": "e4b96856560f575439fa423153f10681a3688c82", "filename": "src/test/run-pass/shadow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(c: ~[int]) {\n+fn foo(c: Vec<int> ) {\n     let a: int = 5;\n-    let mut b: ~[int] = ~[];\n+    let mut b: Vec<int> = Vec::new();\n \n \n     match none::<int> {\n@@ -27,4 +27,4 @@ fn foo(c: ~[int]) {\n \n enum t<T> { none, some(T), }\n \n-pub fn main() { let x = 10; let x = x + 20; assert!((x == 30)); foo(~[]); }\n+pub fn main() { let x = 10; let x = x + 20; assert!((x == 30)); foo(Vec::new()); }"}, {"sha": "058041ff7107ea81975fa9f49f20e26eeb322b98", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -40,8 +40,8 @@ type ty_ = uint;\n #[deriving(Clone)]\n struct Path_ {\n     global: bool,\n-    idents: ~[~str],\n-    types: ~[@ty],\n+    idents: Vec<~str> ,\n+    types: vec!(@ty),\n }\n \n type path = Spanned<Path_>;\n@@ -56,7 +56,7 @@ struct X {\n pub fn main() {\n     let sp: Span = Span {lo: 57451u, hi: 57542u, expanded_from: os_none};\n     let t: @ty = @Spanned { data: 3u, span: sp };\n-    let p_: Path_ = Path_ { global: true, idents: ~[~\"hi\"], types: ~[t] };\n+    let p_: Path_ = Path_ { global: true, idents: vec!(~\"hi\"), types: Vec<t> };\n     let p: path = Spanned { data: p_, span: sp };\n     let x = X { sp: sp, path: p };\n     println!(\"{:?}\", x.path.clone());"}, {"sha": "f43011df4c257affa3966a65f3a5038def87802d", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -13,7 +13,7 @@\n \n enum clam<T> { a(T, int), b, }\n \n-fn uhoh<T>(v: ~[clam<T>]) {\n+fn uhoh<T>(v: Vec<clam<T>> ) {\n     match v[1] {\n       a::<T>(ref _t, ref u) => {\n           println!(\"incorrect\");\n@@ -25,6 +25,6 @@ fn uhoh<T>(v: ~[clam<T>]) {\n }\n \n pub fn main() {\n-    let v: ~[clam<int>] = ~[b::<int>, b::<int>, a::<int>(42, 17)];\n+    let v: Vec<clam<int>> = vec!(b::<int>, b::<int>, a::<int>(42, 17));\n     uhoh::<int>(v);\n }"}, {"sha": "d727f66d948f8097f388c422d044f1f90aa9a588", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -40,14 +40,14 @@ impl uint_utils for uint {\n trait vec_utils<T> {\n     fn length_(&self, ) -> uint;\n     fn iter_(&self, f: |&T|);\n-    fn map_<U>(&self, f: |&T| -> U) -> ~[U];\n+    fn map_<U>(&self, f: |&T| -> U) -> Vec<U> ;\n }\n \n-impl<T> vec_utils<T> for ~[T] {\n+impl<T> vec_utils<T> for Vec<T> {\n     fn length_(&self) -> uint { self.len() }\n     fn iter_(&self, f: |&T|) { for x in self.iter() { f(x); } }\n-    fn map_<U>(&self, f: |&T| -> U) -> ~[U] {\n-        let mut r = ~[];\n+    fn map_<U>(&self, f: |&T| -> U) -> Vec<U> {\n+        let mut r = Vec::new();\n         for elt in self.iter() {\n             r.push(f(elt));\n         }\n@@ -59,9 +59,9 @@ pub fn main() {\n     assert_eq!(10u.plus(), 30);\n     assert_eq!((~\"hi\").plus(), 200);\n \n-    assert_eq!((~[1]).length_().str(), ~\"1\");\n-    assert_eq!((~[3, 4]).map_(|a| *a + 4 )[0], 7);\n-    assert_eq!((~[3, 4]).map_::<uint>(|a| *a as uint + 4u )[0], 7u);\n+    assert_eq!((vec!(1)).length_().str(), ~\"1\");\n+    assert_eq!((vec!(3, 4)).map_(|a| *a + 4 )[0], 7);\n+    assert_eq!((vec!(3, 4)).map_::<uint>(|a| *a as uint + 4u )[0], 7u);\n     let mut x = 0u;\n     10u.multi(|_n| x += 2u );\n     assert_eq!(x, 20u);"}, {"sha": "1dbd29a781effb127c488a3769c1a88a39dfbc5b", "filename": "src/test/run-pass/swap-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fswap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fswap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-2.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,7 +11,7 @@\n use std::mem::swap;\n \n pub fn main() {\n-    let mut a: ~[int] = ~[0, 1, 2, 3, 4, 5, 6];\n+    let mut a: Vec<int> = vec!(0, 1, 2, 3, 4, 5, 6);\n     a.swap(2, 4);\n     assert_eq!(a[2], 4);\n     assert_eq!(a[4], 2);"}, {"sha": "416aaec40f17bd76f22ae5cafbe0dc120bc3a15c", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -26,7 +26,7 @@ fn test_rec() {\n \n fn test_vec() {\n     let (tx, rx) = channel();\n-    let v0: ~[int] = ~[0, 1, 2];\n+    let v0: Vec<int> = vec!(0, 1, 2);\n     tx.send(v0);\n     let v1 = rx.recv();\n     assert_eq!(v1[0], 0);"}, {"sha": "a239a2de78aa264e5d0c6440188de2bfcca2b2d7", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -36,7 +36,7 @@ fn test00() {\n     let mut i: int = 0;\n \n     // Create and spawn tasks...\n-    let mut results = ~[];\n+    let mut results = Vec::new();\n     while i < number_of_tasks {\n         let tx = tx.clone();\n         let mut builder = task::task();"}, {"sha": "7d37993ad7589604740b6d28f7590ec58a229d39", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -65,10 +65,10 @@ pub fn main() {\n     let dogge1 = Dogge { bark_decibels: 100, tricks_known: 42, name: ~\"alan_turing\" };\n     let dogge2 = Dogge { bark_decibels: 55,  tricks_known: 11, name: ~\"albert_einstein\" };\n     let fishe = Goldfyshe { swim_speed: 998, name: ~\"alec_guinness\" };\n-    let arc = Arc::new(~[~catte  as ~Pet:Share+Send,\n+    let arc = Arc::new(vec!(~catte  as ~Pet:Share+Send,\n                          ~dogge1 as ~Pet:Share+Send,\n                          ~fishe  as ~Pet:Share+Send,\n-                         ~dogge2 as ~Pet:Share+Send]);\n+                         ~dogge2 as ~Pet:Share+Send));\n     let (tx1, rx1) = channel();\n     let arc1 = arc.clone();\n     task::spawn(proc() { check_legs(arc1); tx1.send(()); });\n@@ -83,21 +83,29 @@ pub fn main() {\n     rx3.recv();\n }\n \n-fn check_legs(arc: Arc<~[~Pet:Share+Send]>) {\n+fn check_legs(arc: Arc<Vec<~Pet:Share+Send>>) {\n     let mut legs = 0;\n     for pet in arc.get().iter() {\n         legs += pet.num_legs();\n     }\n     assert!(legs == 12);\n }\n+<<<<<<< HEAD\n fn check_names(arc: Arc<~[~Pet:Share+Send]>) {\n+=======\n+fn check_names(arc: Arc<Vec<~Pet:Freeze+Send> >) {\n+>>>>>>> test: Automatically remove all `~[T]` from tests.\n     for pet in arc.get().iter() {\n         pet.name(|name| {\n             assert!(name[0] == 'a' as u8 && name[1] == 'l' as u8);\n         })\n     }\n }\n+<<<<<<< HEAD\n fn check_pedigree(arc: Arc<~[~Pet:Share+Send]>) {\n+=======\n+fn check_pedigree(arc: Arc<Vec<~Pet:Freeze+Send> >) {\n+>>>>>>> test: Automatically remove all `~[T]` from tests.\n     for pet in arc.get().iter() {\n         assert!(pet.of_good_pedigree());\n     }"}, {"sha": "a75a1b61c593c8edf463de528cc29446b9970ab0", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -24,11 +24,11 @@ impl to_str for () {\n }\n \n trait map<T> {\n-    fn map<U>(&self, f: |&T| -> U) -> ~[U];\n+    fn map<U>(&self, f: |&T| -> U) -> Vec<U> ;\n }\n-impl<T> map<T> for ~[T] {\n-    fn map<U>(&self, f: |&T| -> U) -> ~[U] {\n-        let mut r = ~[];\n+impl<T> map<T> for Vec<T> {\n+    fn map<U>(&self, f: |&T| -> U) -> Vec<U> {\n+        let mut r = Vec::new();\n         // FIXME: #7355 generates bad code with VecIterator\n         for i in range(0u, self.len()) {\n             r.push(f(&self[i]));\n@@ -37,16 +37,16 @@ impl<T> map<T> for ~[T] {\n     }\n }\n \n-fn foo<U, T: map<U>>(x: T) -> ~[~str] {\n+fn foo<U, T: map<U>>(x: T) -> Vec<~str> {\n     x.map(|_e| ~\"hi\" )\n }\n-fn bar<U:to_str,T:map<U>>(x: T) -> ~[~str] {\n+fn bar<U:to_str,T:map<U>>(x: T) -> Vec<~str> {\n     x.map(|_e| _e.to_string() )\n }\n \n pub fn main() {\n-    assert_eq!(foo(~[1]), ~[~\"hi\"]);\n-    assert_eq!(bar::<int, ~[int]>(~[4, 5]), ~[~\"4\", ~\"5\"]);\n-    assert_eq!(bar::<~str, ~[~str]>(~[~\"x\", ~\"y\"]), ~[~\"x\", ~\"y\"]);\n-    assert_eq!(bar::<(), ~[()]>(~[()]), ~[~\"()\"]);\n+    assert_eq!(foo(vec!(1)), vec!(~\"hi\"));\n+    assert_eq!(bar::<int, Vec<int> >(vec!(4, 5)), vec!(~\"4\", ~\"5\"));\n+    assert_eq!(bar::<~str, Vec<~str> >(vec!(~\"x\", ~\"y\")), vec!(~\"x\", ~\"y\"));\n+    assert_eq!(bar::<(), vec!(())>(vec!(())), vec!(~\"()\"));\n }"}, {"sha": "f16f5c1a419c759b63a393c63f6da318b40b5edf", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -18,23 +18,23 @@ impl to_str for int {\n     fn to_string(&self) -> ~str { self.to_str() }\n }\n \n-impl<T:to_str> to_str for ~[T] {\n+impl<T:to_str> to_str for Vec<T> {\n     fn to_string(&self) -> ~str {\n         format!(\"[{}]\", self.iter().map(|e| e.to_string()).to_owned_vec().connect(\", \"))\n     }\n }\n \n pub fn main() {\n     assert!(1.to_string() == ~\"1\");\n-    assert!((~[2, 3, 4]).to_string() == ~\"[2, 3, 4]\");\n+    assert!((vec!(2, 3, 4)).to_string() == ~\"[2, 3, 4]\");\n \n     fn indirect<T:to_str>(x: T) -> ~str {\n         x.to_string() + \"!\"\n     }\n-    assert!(indirect(~[10, 20]) == ~\"[10, 20]!\");\n+    assert!(indirect(vec!(10, 20)) == ~\"[10, 20]!\");\n \n     fn indirect2<T:to_str>(x: T) -> ~str {\n         indirect(x)\n     }\n-    assert!(indirect2(~[1]) == ~\"[1]!\");\n+    assert!(indirect2(vec!(1)) == ~\"[1]!\");\n }"}, {"sha": "f37bfe19ad3a05789c2b790dfc60e86531e5a5eb", "filename": "src/test/run-pass/tydesc-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ftydesc-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ftydesc-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftydesc-name.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -19,7 +19,7 @@ struct Foo<T> {\n pub fn main() {\n     unsafe {\n         assert_eq!((*get_tydesc::<int>()).name, \"int\");\n-        assert_eq!((*get_tydesc::<~[int]>()).name, \"~[int]\");\n+        assert_eq!((*get_tydesc::<Vec<int> >()).name, \"~[int]\");\n         assert_eq!((*get_tydesc::<Foo<uint>>()).name, \"Foo<uint>\");\n     }\n }"}, {"sha": "b8312bcb2823a5888c0db62411c6ad0215b98a50", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -18,9 +18,9 @@ fn range_(lo: uint, hi: uint, it: |uint|) {\n     while lo_ < hi { it(lo_); lo_ += 1u; }\n }\n \n-fn create_index<T>(_index: ~[S<T>], _hash_fn: extern fn(T) -> uint) {\n+fn create_index<T>(_index: Vec<S<T>> , _hash_fn: extern fn(T) -> uint) {\n     range_(0u, 256u, |_i| {\n-        let _bucket: ~[T] = ~[];\n+        let _bucket: Vec<T> = Vec::new();\n     })\n }\n "}, {"sha": "1af120df470f5d3d8c42c67078094534f6a23926", "filename": "src/test/run-pass/unique-assign-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -18,6 +18,6 @@ fn f<T>(t: T) -> T {\n pub fn main() {\n     let t = f(~100);\n     assert_eq!(t, ~100);\n-    let t = f(~@~[100]);\n-    assert_eq!(t, ~@~[100]);\n+    let t = f(~@vec!(100));\n+    assert_eq!(t, ~@vec!(100));\n }"}, {"sha": "1c026bf91d11b0fbf973b15696f31e0a8f4784c7", "filename": "src/test/run-pass/unique-autoderef-index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n pub fn main() {\n-    let i = ~~[100];\n+    let i = ~vec!(100);\n     assert_eq!(i[0], 100);\n }"}, {"sha": "023917ec2e9485a2617b48a1f36c755c974deae1", "filename": "src/test/run-pass/unique-create.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Funique-create.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Funique-create.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-create.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -13,5 +13,5 @@ pub fn main() {\n }\n \n fn vec() {\n-    ~[0];\n+    vec!(0);\n }"}, {"sha": "eb8fa640a0fd94a94cd0019cd54b3d6dbc405d53", "filename": "src/test/run-pass/unique-drop-complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    let _x = ~~[0,0,0,0,0];\n+    let _x = ~vec!(0,0,0,0,0);\n }"}, {"sha": "762afbe15e8075b28997b9f2ec0113e726a98528", "filename": "src/test/run-pass/unique-in-vec-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let mut a = ~[~10];\n+    let mut a = vec!(~10);\n     let b = a.clone();\n \n     assert_eq!(*a[0], 10);"}, {"sha": "7f0aa93042a1673456ff9fce807799f26d586b3d", "filename": "src/test/run-pass/unique-in-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Funique-in-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Funique-in-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    assert!((~[~100])[0] == ~100);\n+    assert!((vec!(~100))[0] == ~100);\n }"}, {"sha": "270b1cb895d599871580c5117894edb14048296e", "filename": "src/test/run-pass/vec-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-drop.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -15,6 +15,6 @@ struct Pair { x: int, y: int }\n pub fn main() {\n     // This just tests whether the vec leaks its members.\n \n-    let _pvec: ~[@Pair] =\n-        ~[@Pair{x: 1, y: 2}, @Pair{x: 3, y: 4}, @Pair{x: 5, y: 6}];\n+    let _pvec: Vec<@Pair> =\n+        vec!(@Pair{x: 1, y: 2}, @Pair{x: 3, y: 4}, @Pair{x: 5, y: 6});\n }"}, {"sha": "e51d898e1d46effb237de4a41b3b148f6a2a9f48", "filename": "src/test/run-pass/vec-growth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-growth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-growth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-growth.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,7 +11,7 @@\n \n \n pub fn main() {\n-    let mut v = ~[1];\n+    let mut v = vec!(1);\n     v.push(2);\n     v.push(3);\n     v.push(4);"}, {"sha": "fc9ab277aa1a63a6ddd57b1fc74f2da4eba9d72a", "filename": "src/test/run-pass/vec-ivec-deadlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-ivec-deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-ivec-deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-ivec-deadlock.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,7 +11,7 @@\n #[allow(dead_assignment)];\n \n pub fn main() {\n-    let a = ~[1, 2, 3, 4, 5];\n-    let mut b = ~[a.clone(), a.clone()];\n+    let a = vec!(1, 2, 3, 4, 5);\n+    let mut b = vec!(a.clone(), a.clone());\n     b = b + b; // FIXME(#3387)---can't write b += b\n }"}, {"sha": "7239ae8a1d680e70c69f2188d6941cfbdc7b4571", "filename": "src/test/run-pass/vec-late-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-late-init.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,7 +11,7 @@\n \n \n pub fn main() {\n-    let mut later: ~[int];\n-    if true { later = ~[1]; } else { later = ~[2]; }\n+    let mut later: Vec<int> ;\n+    if true { later = vec!(1); } else { later = vec!(2); }\n     println!(\"{}\", later[0]);\n }"}, {"sha": "33f01c5bd41c8b3bf37bd3645c3b5bcfa78c97b5", "filename": "src/test/run-pass/vec-push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-push.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub fn main() { let mut v = ~[1, 2, 3]; v.push(1); }\n+pub fn main() { let mut v = vec!(1, 2, 3); v.push(1); }"}, {"sha": "222ab8989319a8485333e677bb7313fa65eeee5a", "filename": "src/test/run-pass/vec-self-append.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-self-append.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,7 +10,7 @@\n \n fn test_heap_to_heap() {\n     // a spills onto the heap\n-    let mut a = ~[0, 1, 2, 3, 4];\n+    let mut a = vec!(0, 1, 2, 3, 4);\n     a = a + a; // FIXME(#3387)---can't write a += a\n     assert_eq!(a.len(), 10u);\n     assert_eq!(a[0], 0);\n@@ -27,7 +27,7 @@ fn test_heap_to_heap() {\n \n fn test_stack_to_heap() {\n     // a is entirely on the stack\n-    let mut a = ~[0, 1, 2];\n+    let mut a = vec!(0, 1, 2);\n     // a spills to the heap\n     a = a + a; // FIXME(#3387)---can't write a += a\n     assert_eq!(a.len(), 6u);\n@@ -41,7 +41,7 @@ fn test_stack_to_heap() {\n \n fn test_loop() {\n     // Make sure we properly handle repeated self-appends.\n-    let mut a: ~[int] = ~[0];\n+    let mut a: Vec<int> = vec!(0);\n     let mut i = 20;\n     let mut expected_len = 1u;\n     while i > 0 {"}, {"sha": "946b6a469daaddfcd54ff9d1b9ca8ca879a55cd1", "filename": "src/test/run-pass/vec-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-slice.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let  v = ~[1,2,3,4,5];\n+    let  v = vec!(1,2,3,4,5);\n     let v2 = v.slice(1, 3);\n     assert_eq!(v2[0], 2);\n     assert_eq!(v2[1], 3);"}, {"sha": "64072dab3e382d2cc82177e93f13c8b9b7d44aa0", "filename": "src/test/run-pass/vec-to_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-to_str.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n pub fn main() {\n-    assert_eq!((~[0, 1]).to_str(), ~\"[0, 1]\");\n+    assert_eq!((vec!(0, 1)).to_str(), ~\"[0, 1]\");\n     assert_eq!((&[1, 2]).to_str(), ~\"[1, 2]\");\n \n-    let foo = ~[3, 4];\n+    let foo = vec!(3, 4);\n     let bar = &[4, 5];\n \n     assert_eq!(foo.to_str(), ~\"[3, 4]\");"}, {"sha": "683161178f2d6fa95b37e2c17e41310dad03a1c0", "filename": "src/test/run-pass/vec-trailing-comma.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-trailing-comma.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -11,10 +11,10 @@\n // Issue #2482.\n \n pub fn main() {\n-    let v1: ~[int] = ~[10, 20, 30,];\n-    let v2: ~[int] = ~[10, 20, 30];\n+    let v1: Vec<int> = vec!(10, 20, 30);\n+    let v2: Vec<int> = vec!(10, 20, 30);\n     assert_eq!(v1[2], v2[2]);\n-    let v3: ~[int] = ~[10,];\n-    let v4: ~[int] = ~[10];\n+    let v3: Vec<int> = vec!(10);\n+    let v4: Vec<int> = vec!(10);\n     assert_eq!(v3[0], v4[0]);\n }"}, {"sha": "06869bcb76e0e8118421642f9d1b02013d882dec", "filename": "src/test/run-pass/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -12,7 +12,7 @@\n \n \n pub fn main() {\n-    let v: ~[int] = ~[10, 20];\n+    let v: Vec<int> = vec!(10, 20);\n     assert_eq!(v[0], 10);\n     assert_eq!(v[1], 20);\n     let mut x: int = 0;"}, {"sha": "72e1676bccb5a3745bfa88a8132eae9783bafccc", "filename": "src/test/run-pass/vector-no-ann-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -10,4 +10,4 @@\n \n #[feature(managed_boxes)];\n \n-pub fn main() { let _quux: @~[uint] = @~[]; }\n+pub fn main() { let _quux: @Vec<uint> = @Vec::new(); }"}, {"sha": "a7328267541ab9b7c47bef68edbf3a7b5b7ef106", "filename": "src/test/run-pass/while-with-break.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579eb2400b3cb5d9cf03a5c8792d63630489193a/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs?ref=579eb2400b3cb5d9cf03a5c8792d63630489193a", "patch": "@@ -15,8 +15,8 @@ pub fn main() {\n         println!(\"{}\", i);\n         i = i + 1;\n         if i == 95 {\n-            let _v: ~[int] =\n-                ~[1, 2, 3, 4, 5]; // we check that it is freed by break\n+            let _v: Vec<int> =\n+                vec!(1, 2, 3, 4, 5); // we check that it is freed by break\n \n             println!(\"breaking\");\n             break;"}]}