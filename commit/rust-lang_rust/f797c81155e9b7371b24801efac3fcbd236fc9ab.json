{"sha": "f797c81155e9b7371b24801efac3fcbd236fc9ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3OTdjODExNTVlOWI3MzcxYjI0ODAxZWZhYzNmY2JkMjM2ZmM5YWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T09:13:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T09:13:01Z"}, "message": "Smart eof for blocks", "tree": {"sha": "27a2fd9e640962489e07d18b6225d3d30096bb39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27a2fd9e640962489e07d18b6225d3d30096bb39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f797c81155e9b7371b24801efac3fcbd236fc9ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f797c81155e9b7371b24801efac3fcbd236fc9ab", "html_url": "https://github.com/rust-lang/rust/commit/f797c81155e9b7371b24801efac3fcbd236fc9ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f797c81155e9b7371b24801efac3fcbd236fc9ab/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8671a892c5169fe608d0467270a2af7797df8c36", "url": "https://api.github.com/repos/rust-lang/rust/commits/8671a892c5169fe608d0467270a2af7797df8c36", "html_url": "https://github.com/rust-lang/rust/commit/8671a892c5169fe608d0467270a2af7797df8c36"}], "stats": {"total": 84, "additions": 70, "deletions": 14}, "files": [{"sha": "7425526ef696eeb289106e38719e82a636da9916", "filename": "src/parser/event_parser/grammar.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f797c81155e9b7371b24801efac3fcbd236fc9ab/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f797c81155e9b7371b24801efac3fcbd236fc9ab/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar.rs?ref=f797c81155e9b7371b24801efac3fcbd236fc9ab", "patch": "@@ -74,7 +74,7 @@ fn many<F: Fn(&mut Parser) -> bool>(p: &mut Parser, f: F) {\n fn comma_list<F: Fn(&mut Parser) -> bool>(p: &mut Parser, f: F) {\n     many(p, |p| {\n         f(p);\n-        p.expect(COMMA)\n+        p.is_eof() || p.expect(COMMA)\n     })\n }\n \n@@ -101,6 +101,14 @@ impl<'p> Parser<'p> {\n     }\n \n     pub(crate) fn expect(&mut self, kind: SyntaxKind) -> bool {\n-        self.current_is(kind) && { self.bump(); true }\n+        if self.current_is(kind) {\n+            self.bump();\n+            true\n+        } else {\n+            self.error()\n+                .message(format!(\"expected {:?}\", kind))\n+                .emit();\n+            false\n+        }\n     }\n }\n\\ No newline at end of file"}, {"sha": "87b317c847d88e0d2aa3aa8b400dcdb411315fbd", "filename": "src/parser/event_parser/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f797c81155e9b7371b24801efac3fcbd236fc9ab/src%2Fparser%2Fevent_parser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f797c81155e9b7371b24801efac3fcbd236fc9ab/src%2Fparser%2Fevent_parser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fmod.rs?ref=f797c81155e9b7371b24801efac3fcbd236fc9ab", "patch": "@@ -10,7 +10,10 @@ pub(crate) enum Event {\n     Token {\n         kind: SyntaxKind,\n         n_raw_tokens: u8,\n-    }\n+    },\n+    Error {\n+        message: String,\n+    },\n }\n \n pub(crate) fn parse<'t>(text: &'t str, raw_tokens: &'t [Token]) -> Vec<Event> {"}, {"sha": "eafa035215392d995a2bd05e1106404663342aaa", "filename": "src/parser/event_parser/parser.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f797c81155e9b7371b24801efac3fcbd236fc9ab/src%2Fparser%2Fevent_parser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f797c81155e9b7371b24801efac3fcbd236fc9ab/src%2Fparser%2Fevent_parser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fparser.rs?ref=f797c81155e9b7371b24801efac3fcbd236fc9ab", "patch": "@@ -10,7 +10,9 @@ pub struct Parser<'t> {\n \n     pos: usize,\n     events: Vec<Event>,\n+\n     curly_level: i32,\n+    curly_limit: Option<i32>,\n }\n \n impl<'t> Parser<'t> {\n@@ -32,6 +34,7 @@ impl<'t> Parser<'t> {\n             pos: 0,\n             events: Vec::new(),\n             curly_level: 0,\n+            curly_limit: None,\n         }\n     }\n \n@@ -41,7 +44,14 @@ impl<'t> Parser<'t> {\n     }\n \n     pub(crate) fn is_eof(&self) -> bool {\n-        self.pos == self.non_ws_tokens.len()\n+        if self.pos == self.non_ws_tokens.len() {\n+            return true\n+        }\n+        if let Some(limit) = self.curly_limit {\n+            let idx = self.non_ws_tokens[self.pos].0;\n+            return limit == self.curly_level && self.raw_tokens[idx].kind == R_CURLY;\n+        }\n+        false\n     }\n \n     pub(crate) fn start(&mut self, kind: SyntaxKind) {\n@@ -52,6 +62,10 @@ impl<'t> Parser<'t> {\n         self.event(Event::Finish);\n     }\n \n+    pub(crate) fn error<'p>(&'p mut self) -> ErrorBuilder<'p, 't> {\n+        ErrorBuilder::new(self)\n+    }\n+\n     pub(crate) fn current(&self) -> Option<SyntaxKind> {\n         if self.is_eof() {\n             return None;\n@@ -73,15 +87,18 @@ impl<'t> Parser<'t> {\n     }\n \n     pub(crate) fn curly_block<F: FnOnce(&mut Parser)>(&mut self, f: F) -> bool {\n-        let level = self.curly_level;\n+        let old_level = self.curly_level;\n+        let old_limit = self.curly_limit;\n         if !self.expect(L_CURLY) {\n             return false\n         }\n+        self.curly_limit = Some(self.curly_level);\n         f(self);\n-        assert!(self.curly_level > level);\n+        assert!(self.curly_level > old_level);\n+        self.curly_limit = old_limit;\n         if !self.expect(R_CURLY) {\n             self.start(ERROR);\n-            while self.curly_level > level {\n+            while self.curly_level > old_level {\n                 if self.bump().is_none() {\n                     break;\n                 }\n@@ -94,4 +111,25 @@ impl<'t> Parser<'t> {\n     fn event(&mut self, event: Event) {\n         self.events.push(event)\n     }\n-}\n\\ No newline at end of file\n+}\n+\n+pub(crate) struct ErrorBuilder<'p, 't: 'p> {\n+    message: Option<String>,\n+    parser: &'p mut Parser<'t>\n+}\n+\n+impl<'t, 'p> ErrorBuilder<'p, 't> {\n+    fn new(parser: &'p mut Parser<'t>) -> Self {\n+        ErrorBuilder { message: None, parser }\n+    }\n+\n+    pub fn message<M: Into<String>>(mut self, m: M) -> Self {\n+        self.message = Some(m.into());\n+        self\n+    }\n+\n+    pub fn emit(self) {\n+        let message = self.message.expect(\"Error message not set\");\n+        self.parser.event(Event::Error { message });\n+    }\n+}"}, {"sha": "a76356eb536d3161e209d209f18260810ce77525", "filename": "src/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f797c81155e9b7371b24801efac3fcbd236fc9ab/src%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f797c81155e9b7371b24801efac3fcbd236fc9ab/src%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fmod.rs?ref=f797c81155e9b7371b24801efac3fcbd236fc9ab", "patch": "@@ -44,6 +44,8 @@ fn from_events_to_file(\n                     break;\n                 }\n             },\n+            Event::Error { message } => builder.error().message(message).emit(),\n+\n         }\n     }\n     builder.finish()"}, {"sha": "ddb29a6b98de05e424feb32a8ba71976151d8c60", "filename": "src/tree/file_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f797c81155e9b7371b24801efac3fcbd236fc9ab/src%2Ftree%2Ffile_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f797c81155e9b7371b24801efac3fcbd236fc9ab/src%2Ftree%2Ffile_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Ffile_builder.rs?ref=f797c81155e9b7371b24801efac3fcbd236fc9ab", "patch": "@@ -154,7 +154,7 @@ impl<'f> ErrorBuilder<'f> {\n         self\n     }\n \n-    pub fn build(self) {\n+    pub fn emit(self) {\n         let message = self.message.expect(\"Error message not set\");\n         let node = self.builder.current_id();\n         self.builder.errors.push(SyntaxErrorData { node, message })"}, {"sha": "3980b23ceee840b4c7910281fe22614d67993887", "filename": "src/tree/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f797c81155e9b7371b24801efac3fcbd236fc9ab/src%2Ftree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f797c81155e9b7371b24801efac3fcbd236fc9ab/src%2Ftree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Fmod.rs?ref=f797c81155e9b7371b24801efac3fcbd236fc9ab", "patch": "@@ -73,7 +73,7 @@ impl<'f> Node<'f> {\n \t\tChildren { next: self.as_node(self.data().first_child) }\n \t}\n \n-\tpub fn SyntaxErrors(&self) -> SyntaxErrors<'f> {\n+\tpub fn errors(&self) -> SyntaxErrors<'f> {\n \t\tlet pos = self.file.errors.iter().position(|e| e.node == self.idx);\n \t\tlet next = pos\n \t\t\t.map(|i| ErrorIdx(i as u32))\n@@ -112,12 +112,13 @@ impl<'f> SyntaxError<'f> {\n \t}\n \n \tfn next(&self) -> Option<SyntaxError<'f>> {\n-\t\tif self.file.errors.len() == self.idx.0 as usize {\n+\t\tlet next_idx = self.idx.0 + 1;\n+\t\tif !((next_idx as usize) < self.file.errors.len()) {\n \t\t\treturn None;\n \t\t}\n \t\tlet result = SyntaxError {\n \t\t\tfile: self.file,\n-\t\t\tidx: ErrorIdx(self.idx.0 + 1)\n+\t\t\tidx: ErrorIdx(next_idx)\n \t\t};\n \t\tif result.data().node != self.data().node {\n \t\t\treturn None;"}, {"sha": "7fde365c97b2d0f84c018a87c90d4cd7bd1cfad3", "filename": "tests/parser.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f797c81155e9b7371b24801efac3fcbd236fc9ab/tests%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f797c81155e9b7371b24801efac3fcbd236fc9ab/tests%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser.rs?ref=f797c81155e9b7371b24801efac3fcbd236fc9ab", "patch": "@@ -61,8 +61,12 @@ fn dump_tree(file: &File) -> String {\n \n     fn go(node: Node, buff: &mut String, level: usize) {\n         buff.push_str(&String::from(\"  \").repeat(level));\n-        write!(buff, \"{:?}\\n\", node)\n-            .unwrap();\n+        write!(buff, \"{:?}\", node).unwrap();\n+        for err in node.errors() {\n+            write!(buff, \" err: `{}`\", err.message()).unwrap();\n+        }\n+        write!(buff, \"\\n\").unwrap();\n+\n         for child in node.children() {\n             go(child, buff, level + 1)\n         }"}]}