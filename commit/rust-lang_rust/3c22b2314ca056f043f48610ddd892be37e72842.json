{"sha": "3c22b2314ca056f043f48610ddd892be37e72842", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMjJiMjMxNGNhMDU2ZjA0M2Y0ODYxMGRkZDg5MmJlMzdlNzI4NDI=", "commit": {"author": {"name": "Maxwell Anderson", "email": "maxwell.brayden.anderson@gmail.com", "date": "2018-10-31T22:48:47Z"}, "committer": {"name": "Maxwell Anderson", "email": "maxwell.brayden.anderson@gmail.com", "date": "2018-10-31T22:48:47Z"}, "message": "Merge remote-tracking branch 'upstream/master'", "tree": {"sha": "049c3cd2e8f6039f224324f153932bd73f2bd513", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/049c3cd2e8f6039f224324f153932bd73f2bd513"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c22b2314ca056f043f48610ddd892be37e72842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c22b2314ca056f043f48610ddd892be37e72842", "html_url": "https://github.com/rust-lang/rust/commit/3c22b2314ca056f043f48610ddd892be37e72842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c22b2314ca056f043f48610ddd892be37e72842/comments", "author": {"login": "Zaechus", "id": 19353212, "node_id": "MDQ6VXNlcjE5MzUzMjEy", "avatar_url": "https://avatars.githubusercontent.com/u/19353212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zaechus", "html_url": "https://github.com/Zaechus", "followers_url": "https://api.github.com/users/Zaechus/followers", "following_url": "https://api.github.com/users/Zaechus/following{/other_user}", "gists_url": "https://api.github.com/users/Zaechus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zaechus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zaechus/subscriptions", "organizations_url": "https://api.github.com/users/Zaechus/orgs", "repos_url": "https://api.github.com/users/Zaechus/repos", "events_url": "https://api.github.com/users/Zaechus/events{/privacy}", "received_events_url": "https://api.github.com/users/Zaechus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zaechus", "id": 19353212, "node_id": "MDQ6VXNlcjE5MzUzMjEy", "avatar_url": "https://avatars.githubusercontent.com/u/19353212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zaechus", "html_url": "https://github.com/Zaechus", "followers_url": "https://api.github.com/users/Zaechus/followers", "following_url": "https://api.github.com/users/Zaechus/following{/other_user}", "gists_url": "https://api.github.com/users/Zaechus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zaechus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zaechus/subscriptions", "organizations_url": "https://api.github.com/users/Zaechus/orgs", "repos_url": "https://api.github.com/users/Zaechus/repos", "events_url": "https://api.github.com/users/Zaechus/events{/privacy}", "received_events_url": "https://api.github.com/users/Zaechus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4b919cad7cf7697138b6ae94ecffd085bf47aed", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b919cad7cf7697138b6ae94ecffd085bf47aed", "html_url": "https://github.com/rust-lang/rust/commit/f4b919cad7cf7697138b6ae94ecffd085bf47aed"}, {"sha": "6a165e5a9296ab4166db733d2675039830716598", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a165e5a9296ab4166db733d2675039830716598", "html_url": "https://github.com/rust-lang/rust/commit/6a165e5a9296ab4166db733d2675039830716598"}], "stats": {"total": 1713, "additions": 996, "deletions": 717}, "files": [{"sha": "75b45c9db40326ea00f2f90fc0ee1f92ad6e1c11", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -63,8 +63,7 @@ matrix:\n     - env: INTEGRATION=chronotope/chrono\n     - env: INTEGRATION=serde-rs/serde\n     - env: INTEGRATION=Geal/nom\n-# uncomment once https://github.com/rust-lang/rust/issues/55376 is fixed\n-#    - env: INTEGRATION=hyperium/hyper\n+    - env: INTEGRATION=hyperium/hyper\n   allow_failures:\n   - os: windows\n     env: BASE_TEST=true"}, {"sha": "2293913f38e76de4c2f044cb4578a18f8e599c69", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -48,7 +48,7 @@ rustc_tools_util = { version = \"0.1.0\", path = \"rustc_tools_util\"}\n [dev-dependencies]\n clippy_dev = { version = \"0.0.1\", path = \"clippy_dev\" }\n cargo_metadata = \"0.6\"\n-compiletest_rs = \"0.3.7\"\n+compiletest_rs = \"0.3.16\"\n lazy_static = \"1.0\"\n serde_derive = \"1.0\"\n clippy-mini-macro-test = { version = \"0.2\", path = \"mini-macro\" }"}, {"sha": "9b73263c24a7dd5bc390f451354aee47352f6212", "filename": "ci/base-tests.sh", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -24,21 +24,20 @@ cd clippy_lints && cargo test && cd ..\n cd rustc_tools_util && cargo test && cd ..\n # check that the lint lists are up-to-date\n ./util/update_lints.py -c\n-mkdir -p ~/rust/cargo/bin\n-cp target/debug/cargo-clippy ~/rust/cargo/bin/cargo-clippy\n-cp target/debug/clippy-driver ~/rust/cargo/bin/clippy-driver\n-rm ~/.cargo/bin/cargo-clippy\n+\n+CLIPPY=\"`pwd`/target/debug/cargo-clippy clippy\"\n # run clippy on its own codebase...\n-PATH=$PATH:~/rust/cargo/bin cargo clippy --all-targets --all-features -- -D clippy::all -D clippy::internal\n+${CLIPPY} --all-targets --all-features -- -D clippy::all -D clippy::internal\n # ... and some test directories\n-cd clippy_workspace_tests && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy::all && cd ..\n-cd clippy_workspace_tests/src && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy::all && cd ../..\n-cd clippy_workspace_tests/subcrate && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy::all && cd ../..\n-cd clippy_workspace_tests/subcrate/src && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy::all && cd ../../..\n-cd clippy_dev && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy::all && cd ..\n-cd rustc_tools_util/ && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy::all && cd ..\n+for dir in clippy_workspace_tests clippy_workspace_tests/src clippy_workspace_tests/subcrate clippy_workspace_tests/subcrate/src clippy_dev rustc_tools_util\n+do\n+    cd ${dir}\n+    ${CLIPPY} -- -D clippy::all\n+    cd -\n+done\n+\n \n # test --manifest-path\n-PATH=$PATH:~/rust/cargo/bin cargo clippy --manifest-path=clippy_workspace_tests/Cargo.toml -- -D clippy::all\n-cd clippy_workspace_tests/subcrate && PATH=$PATH:~/rust/cargo/bin cargo clippy --manifest-path=../Cargo.toml -- -D clippy::all && cd ../..\n+${CLIPPY} --manifest-path=clippy_workspace_tests/Cargo.toml -- -D clippy::all\n+cd clippy_workspace_tests/subcrate && ${CLIPPY} --manifest-path=../Cargo.toml -- -D clippy::all && cd ../..\n set +x"}, {"sha": "75decab940eb421b700dfc57b48cff9b63025ba4", "filename": "ci/integration-tests.sh", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/ci%2Fintegration-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/ci%2Fintegration-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fintegration-tests.sh?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -28,9 +28,6 @@ function check() {\n }\n \n case ${INTEGRATION} in\n-  rust-lang/cargo)\n-    check\n-    ;;\n   *)\n     check\n     ;;"}, {"sha": "00ce58f00b0d1907cc43aa4751f0e37ba097ceff", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -12,7 +12,7 @@ use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc::hir::*;\n use crate::syntax::ast::NodeId;\n-use crate::utils::{in_macro, match_def_path, match_trait_method, same_tys, snippet, span_lint_and_then};\n+use crate::utils::{in_macro, match_def_path, match_trait_method, same_tys, snippet, snippet_with_macro_callsite, span_lint_and_then};\n use crate::utils::{opt_def_id, paths, resolve_node};\n use crate::rustc_errors::Applicability;\n \n@@ -72,7 +72,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                     let a = cx.tables.expr_ty(e);\n                     let b = cx.tables.expr_ty(&args[0]);\n                     if same_tys(cx, a, b) {\n-                        let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n+                        let sugg = snippet_with_macro_callsite(cx, args[0].span, \"<expr>\").to_string();\n+\n                         span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n                             db.span_suggestion_with_applicability(\n                                 e.span,"}, {"sha": "207dc40fa1d7d240b69c142956f94256e6c63ad0", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -48,6 +48,7 @@ use toml;\n \n // Currently, categories \"style\", \"correctness\", \"complexity\" and \"perf\" are enabled by default,\n // as said in the README.md of this repository. If this changes, please update README.md.\n+#[macro_export]\n macro_rules! declare_clippy_lint {\n     { pub $name:tt, style, $description:tt } => {\n         declare_tool_lint! { pub clippy::$name, Warn, $description, report_in_external_macro: true }"}, {"sha": "4a704c3d52ece894c0e4a8991cd28d7f02d5f841", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -19,7 +19,8 @@ use crate::syntax::ast::LitKind;\n use crate::syntax::source_map::Span;\n use crate::utils::paths;\n use crate::utils::{expr_block, is_allowed, is_expn_of, match_qpath, match_type, multispan_sugg,\n-            remove_blocks, snippet, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty};\n+            remove_blocks, snippet, span_lint_and_sugg, span_lint_and_then,\n+            span_note_and_lint, walk_ptrs_ty};\n use crate::utils::sugg::Sugg;\n use crate::consts::{constant, Constant};\n use crate::rustc_errors::Applicability;"}, {"sha": "3f1c1e7395618fa5589a20d86278a362b1af8c3c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -21,7 +21,7 @@ use crate::utils::sugg;\n use crate::utils::{\n     get_arg_name, get_trait_def_id, implements_trait, in_macro, is_copy, is_expn_of, is_self, is_self_ty,\n     iter_input_pats, last_path_segment, match_def_path, match_path, match_qpath, match_trait_method, match_type,\n-    match_var, method_chain_args, remove_blocks, return_ty, same_tys, single_segment_path, snippet, span_lint,\n+    match_var, method_chain_args, remove_blocks, return_ty, same_tys, single_segment_path, snippet, snippet_with_macro_callsite, span_lint,\n     span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n };\n use if_chain::if_chain;\n@@ -568,7 +568,14 @@ declare_clippy_lint! {\n /// **Why is this bad?** Using the Index trait (`[]`) is more clear and more\n /// concise.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** Not a replacement for error handling: Using either\n+/// `.unwrap()` or the Index trait (`[]`) carries the risk of causing a `panic`\n+/// if the value being accessed is `None`. If the use of `.get().unwrap()` is a\n+/// temporary placeholder for dealing with the `Option` type, then this does\n+/// not mitigate the need for error handling. If there is a chance that `.get()`\n+/// will be `None` in your program, then it is advisable that the `None` case\n+/// is handled in a future refactor instead of using `.unwrap()` or the Index \n+/// trait.\n ///\n /// **Example:**\n /// ```rust\n@@ -1062,9 +1069,9 @@ fn lint_or_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Spa\n         }\n \n         let sugg: Cow<'_, _> = match (fn_has_arguments, !or_has_args) {\n-            (true, _) => format!(\"|_| {}\", snippet(cx, arg.span, \"..\")).into(),\n-            (false, false) => format!(\"|| {}\", snippet(cx, arg.span, \"..\")).into(),\n-            (false, true) => snippet(cx, fun_span, \"..\"),\n+            (true, _) => format!(\"|_| {}\", snippet_with_macro_callsite(cx, arg.span, \"..\")).into(),\n+            (false, false) => format!(\"|| {}\", snippet_with_macro_callsite(cx, arg.span, \"..\")).into(),\n+            (false, true) => snippet_with_macro_callsite(cx, fun_span, \"..\"),\n         };\n         let span_replace_word = method_span.with_hi(span.hi());\n         span_lint_and_sugg("}, {"sha": "e13f757adb9e69cdf314899adba874f0243c1fac", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -17,7 +17,7 @@ use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc::hir::*;\n use crate::syntax::ast::LitKind;\n use crate::syntax::source_map::Spanned;\n-use crate::utils::{snippet, span_lint, span_lint_and_sugg};\n+use crate::utils::{in_macro, snippet, span_lint, span_lint_and_sugg};\n use crate::utils::sugg::Sugg;\n \n /// **What it does:** Checks for expressions of the form `if c { true } else {\n@@ -133,6 +133,9 @@ impl LintPass for BoolComparison {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+        if in_macro(e.span) {\n+            return;\n+        }\n         use self::Expression::*;\n         if let ExprKind::Binary(Spanned { node: BinOpKind::Eq, .. }, ref left_side, ref right_side) = e.node {\n             match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {"}, {"sha": "2ed877d13649f71bf1d6c398a808b310c58b6f17", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -12,7 +12,7 @@ use crate::rustc::hir::{def_id, Body, FnDecl};\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::mir::{\n     self, traversal,\n-    visit::{PlaceContext, Visitor},\n+    visit::{MutatingUseContext, NonUseContext, PlaceContext, Visitor},\n     TerminatorKind,\n };\n use crate::rustc::ty;\n@@ -279,7 +279,7 @@ impl<'tcx> mir::visit::Visitor<'tcx> for LocalUseVisitor {\n \n     fn visit_local(&mut self, local: &mir::Local, ctx: PlaceContext<'tcx>, _: mir::Location) {\n         match ctx {\n-            PlaceContext::Drop | PlaceContext::StorageDead => return,\n+            PlaceContext::MutatingUse(MutatingUseContext::Drop) | PlaceContext::NonUse(NonUseContext::StorageDead) => return,\n             _ => {},\n         }\n "}, {"sha": "e07b1649a4662897ffa8d08de6d0c3280a6b3e94", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n@@ -92,7 +91,14 @@ impl LintPass for StringAdd {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringAdd {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if let ExprKind::Binary(Spanned { node: BinOpKind::Add, .. }, ref left, _) = e.node {\n+        if let ExprKind::Binary(\n+            Spanned {\n+                node: BinOpKind::Add, ..\n+            },\n+            ref left,\n+            _,\n+        ) = e.node\n+        {\n             if is_string(cx, left) {\n                 if !is_allowed(cx, STRING_ADD_ASSIGN, e.id) {\n                     let parent = get_parent_expr(cx, e);\n@@ -132,13 +138,15 @@ fn is_string(cx: &LateContext<'_, '_>, e: &Expr) -> bool {\n \n fn is_add(cx: &LateContext<'_, '_>, src: &Expr, target: &Expr) -> bool {\n     match src.node {\n-        ExprKind::Binary(Spanned { node: BinOpKind::Add, .. }, ref left, _) => SpanlessEq::new(cx).eq_expr(target, left),\n+        ExprKind::Binary(\n+            Spanned {\n+                node: BinOpKind::Add, ..\n+            },\n+            ref left,\n+            _,\n+        ) => SpanlessEq::new(cx).eq_expr(target, left),\n         ExprKind::Block(ref block, _) => {\n-            block.stmts.is_empty()\n-                && block\n-                    .expr\n-                    .as_ref()\n-                    .map_or(false, |expr| is_add(cx, expr, target))\n+            block.stmts.is_empty() && block.expr.as_ref().map_or(false, |expr| is_add(cx, expr, target))\n         },\n         _ => false,\n     }\n@@ -155,14 +163,33 @@ impl LintPass for StringLitAsBytes {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        use crate::syntax::ast::LitKind;\n+        use crate::syntax::ast::{LitKind, StrStyle};\n         use crate::utils::{in_macro, snippet};\n \n         if let ExprKind::MethodCall(ref path, _, ref args) = e.node {\n             if path.ident.name == \"as_bytes\" {\n                 if let ExprKind::Lit(ref lit) = args[0].node {\n-                    if let LitKind::Str(ref lit_content, _) = lit.node {\n-                        if lit_content.as_str().chars().all(|c| c.is_ascii()) && !in_macro(args[0].span) {\n+                    if let LitKind::Str(ref lit_content, style) = lit.node {\n+                        let callsite = snippet(cx, args[0].span.source_callsite(), r#\"\"foo\"\"#);\n+                        let expanded = if let StrStyle::Raw(n) = style {\n+                            let term = (0..n).map(|_| '#').collect::<String>();\n+                            format!(\"r{0}\\\"{1}\\\"{0}\", term, lit_content.as_str())\n+                        } else {\n+                            format!(\"\\\"{}\\\"\", lit_content.as_str())\n+                        };\n+                        if callsite.starts_with(\"include_str!\") {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                STRING_LIT_AS_BYTES,\n+                                e.span,\n+                                \"calling `as_bytes()` on `include_str!(..)`\",\n+                                \"consider using `include_bytes!(..)` instead\",\n+                                snippet(cx, args[0].span, r#\"\"foo\"\"#).replacen(\"include_str\", \"include_bytes\", 1),\n+                            );\n+                        } else if callsite == expanded\n+                            && lit_content.as_str().chars().all(|c| c.is_ascii())\n+                            && !in_macro(args[0].span)\n+                        {\n                             span_lint_and_sugg(\n                                 cx,\n                                 STRING_LIT_AS_BYTES,"}, {"sha": "b997d76d0e7773d7c269b24840a88c1cb1dd8b0b", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -36,7 +36,7 @@ use crate::syntax_pos::symbol::keywords::SelfType;\n /// }\n /// ```\n /// could be\n-/// ```\n+/// ```rust\n /// struct Foo {}\n /// impl Foo {\n ///     fn new() -> Self {"}, {"sha": "879157ec8a47f5bd1c37ca466ed54c24587d9b71", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -9,12 +9,13 @@\n \n \n use crate::utils::{\n-    match_qpath, match_type, paths, span_help_and_lint, span_lint, span_lint_and_sugg, walk_ptrs_ty,\n+    match_def_path, match_type, paths, span_help_and_lint, span_lint, span_lint_and_sugg, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use crate::rustc::hir;\n use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use crate::rustc::hir::*;\n+use crate::rustc::hir::def::Def;\n use crate::rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -160,15 +161,21 @@ impl LintPass for LintWithoutLintPass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if let hir::ItemKind::Static(ref ty, MutImmutable, body_id) = item.node {\n-            if is_lint_ref_type(ty) {\n+        if let hir::ItemKind::Static(ref ty, MutImmutable, _) = item.node {\n+            if is_lint_ref_type(cx, ty) {\n                 self.declared_lints.insert(item.name, item.span);\n-            } else if is_lint_array_type(ty) && item.name == \"ARRAY\" {\n-                if let VisibilityKind::Inherited = item.vis.node {\n+            }\n+        } else if let hir::ItemKind::Impl(.., Some(ref trait_ref), _, ref impl_item_refs) = item.node {\n+            if_chain! {\n+                if let hir::TraitRef{path, ..} = trait_ref;\n+                if let Def::Trait(def_id) = path.def;\n+                if match_def_path(cx.tcx, def_id, &paths::LINT_PASS);\n+                then {\n                     let mut collector = LintCollector {\n                         output: &mut self.registered_lints,\n                         cx,\n                     };\n+                    let body_id = cx.tcx.hir.body_owned_by(impl_item_refs[0].id.node_id);\n                     collector.visit_expr(&cx.tcx.hir.body(body_id).value);\n                 }\n             }\n@@ -203,28 +210,22 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     }\n }\n \n-fn is_lint_ref_type(ty: &Ty) -> bool {\n+fn is_lint_ref_type<'tcx>(cx: &LateContext<'_, 'tcx>, ty: &Ty) -> bool {\n     if let TyKind::Rptr(\n         _,\n         MutTy {\n             ty: ref inner,\n             mutbl: MutImmutable,\n         },\n-    ) = ty.node\n-    {\n+    ) = ty.node {\n         if let TyKind::Path(ref path) = inner.node {\n-            return match_qpath(path, &paths::LINT);\n+            if let Def::Struct(def_id) = cx.tables.qpath_def(path, inner.hir_id) {\n+                return match_def_path(cx.tcx, def_id, &paths::LINT);\n+            }\n         }\n     }\n-    false\n-}\n \n-fn is_lint_array_type(ty: &Ty) -> bool {\n-    if let TyKind::Path(ref path) = ty.node {\n-        match_qpath(path, &paths::LINT_ARRAY)\n-    } else {\n-        false\n-    }\n+    false\n }\n \n struct LintCollector<'a, 'tcx: 'a> {"}, {"sha": "9d11950dd7336467c40b27366596a76550ac3b05", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -362,6 +362,12 @@ pub fn snippet<'a, 'b, T: LintContext<'b>>(cx: &T, span: Span, default: &'a str)\n     snippet_opt(cx, span).map_or_else(|| Cow::Borrowed(default), From::from)\n }\n \n+/// Same as `snippet`, but should only be used when it's clear that the input span is\n+/// not a macro argument.\n+pub fn snippet_with_macro_callsite<'a, 'b, T: LintContext<'b>>(cx: &T, span: Span, default: &'a str) -> Cow<'a, str> {\n+    snippet(cx, span.source_callsite(), default)\n+}\n+\n /// Convert a span to a code snippet. Returns `None` if not available.\n pub fn snippet_opt<'a, T: LintContext<'a>>(cx: &T, span: Span) -> Option<String> {\n     cx.sess().source_map().span_to_snippet(span).ok()\n@@ -386,7 +392,7 @@ pub fn snippet_block<'a, 'b, T: LintContext<'b>>(cx: &T, span: Span, default: &'\n pub fn last_line_of_span<'a, T: LintContext<'a>>(cx: &T, span: Span) -> Span {\n     let file_map_and_line = cx.sess().source_map().lookup_line(span.lo()).unwrap();\n     let line_no = file_map_and_line.line;\n-    let line_start = &file_map_and_line.fm.lines[line_no];\n+    let line_start = &file_map_and_line.sf.lines[line_no];\n     Span::new(*line_start, span.hi(), span.ctxt())\n }\n \n@@ -400,7 +406,10 @@ pub fn expr_block<'a, 'b, T: LintContext<'b>>(\n ) -> Cow<'a, str> {\n     let code = snippet_block(cx, expr.span, default);\n     let string = option.unwrap_or_default();\n-    if let ExprKind::Block(_, _) = expr.node {\n+    if in_macro(expr.span) {\n+        Cow::Owned(format!(\"{{ {} }}\", snippet_with_macro_callsite(cx, expr.span, default)))\n+    }\n+    else if let ExprKind::Block(_, _) = expr.node {\n         Cow::Owned(format!(\"{}{}\", code, string))\n     } else if string.is_empty() {\n         Cow::Owned(format!(\"{{ {} }}\", code))"}, {"sha": "107a8eea15d761f20b43a85aed135be42c777037", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -56,7 +56,7 @@ pub const ITERATOR: [&str; 4] = [\"core\", \"iter\", \"iterator\", \"Iterator\"];\n pub const LATE_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"LateContext\"];\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n pub const LINT: [&str; 3] = [\"rustc\", \"lint\", \"Lint\"];\n-pub const LINT_ARRAY: [&str; 3] = [\"rustc\", \"lint\", \"LintArray\"];\n+pub const LINT_PASS: [&str; 3] = [\"rustc\", \"lint\", \"LintPass\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];"}, {"sha": "90f48f0f83c7d59f5c073a607f46a304adbde841", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -548,7 +548,7 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n         let hi = cx.sess().source_map().next_point(remove_span).hi();\n         let fmpos = cx.sess().source_map().lookup_byte_offset(hi);\n \n-        if let Some(ref src) = fmpos.fm.src {\n+        if let Some(ref src) = fmpos.sf.src {\n             let non_whitespace_offset = src[fmpos.pos.to_usize()..].find(|c| c != ' ' && c != '\\t' && c != '\\n');\n \n             if let Some(non_whitespace_offset) = non_whitespace_offset {"}, {"sha": "64360af641b559ed01f48c3f10d792781dcab7b5", "filename": "tests/compile-test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -75,7 +75,10 @@ fn config(mode: &str, dir: PathBuf) -> compiletest::Config {\n }\n \n fn run_mode(mode: &str, dir: PathBuf) {\n-    compiletest::run_tests(&config(mode, dir));\n+    let cfg = config(mode, dir);\n+    // clean rmeta data, otherwise \"cargo check; cargo test\" fails (#2896)\n+    cfg.clean_rmeta();\n+    compiletest::run_tests(&cfg);\n }\n \n fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<test::TestDescAndFn>) -> Result<bool, io::Error> {"}, {"sha": "eaed606b89e9f7e1d3c072f8a08d4a6c244d9aff", "filename": "tests/ui/explicit_counter_loop.rs", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -0,0 +1,122 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![warn(clippy::explicit_counter_loop)]\n+\n+fn main() {\n+    let mut vec = vec![1, 2, 3, 4];\n+    let mut _index = 0;\n+    for _v in &vec {\n+        _index += 1\n+    }\n+\n+    let mut _index = 1;\n+    _index = 0;\n+    for _v in &vec {\n+        _index += 1\n+    }\n+}\n+\n+mod issue_1219 {\n+    pub fn test() {\n+        // should not trigger the lint because variable is used after the loop #473\n+        let vec = vec![1,2,3];\n+        let mut index = 0;\n+        for _v in &vec { index += 1 }\n+        println!(\"index: {}\", index);\n+\n+        // should not trigger the lint because the count is conditional #1219\n+        let text = \"banana\";\n+        let mut count = 0;\n+        for ch in text.chars() {\n+            if ch == 'a' {\n+                continue;\n+            }\n+            count += 1;\n+            println!(\"{}\", count);\n+        }\n+\n+        // should not trigger the lint because the count is conditional\n+        let text = \"banana\";\n+        let mut count = 0;\n+        for ch in text.chars() {\n+            if ch == 'a' {\n+                count += 1;\n+            }\n+            println!(\"{}\", count);\n+        }\n+\n+        // should trigger the lint because the count is not conditional\n+        let text = \"banana\";\n+        let mut count = 0;\n+        for ch in text.chars() {\n+            count += 1;\n+            if ch == 'a' {\n+                continue;\n+            }\n+            println!(\"{}\", count);\n+        }\n+\n+        // should trigger the lint because the count is not conditional\n+        let text = \"banana\";\n+        let mut count = 0;\n+        for ch in text.chars() {\n+            count += 1;\n+            for i in 0..2 {\n+                let _ = 123;\n+            }\n+            println!(\"{}\", count);\n+        }\n+\n+        // should not trigger the lint because the count is incremented multiple times\n+        let text = \"banana\";\n+        let mut count = 0;\n+        for ch in text.chars() {\n+            count += 1;\n+            for i in 0..2 {\n+                count += 1;\n+            }\n+            println!(\"{}\", count);\n+        }\n+    }\n+}\n+\n+mod issue_3308 {\n+    pub fn test() {\n+        // should not trigger the lint because the count is incremented multiple times\n+        let mut skips = 0;\n+        let erasures = vec![];\n+        for i in 0..10 {\n+            while erasures.contains(&(i + skips)) {\n+                skips += 1;\n+            }\n+            println!(\"{}\", skips);\n+        }\n+\n+        // should not trigger the lint because the count is incremented multiple times\n+        let mut skips = 0;\n+        for i in 0..10 {\n+            let mut j = 0;\n+            while j < 5 {\n+                skips += 1;\n+                j += 1;\n+            }\n+            println!(\"{}\", skips);\n+        }\n+\n+        // should not trigger the lint because the count is incremented multiple times\n+        let mut skips = 0;\n+        for i in 0..10 {\n+            for j in 0..5 {\n+                skips += 1;\n+            }\n+            println!(\"{}\", skips);\n+        }\n+    }\n+}"}, {"sha": "023f7f299a720067c49dd119842380836caf8429", "filename": "tests/ui/explicit_counter_loop.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fexplicit_counter_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fexplicit_counter_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.stderr?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -0,0 +1,28 @@\n+error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n+  --> $DIR/explicit_counter_loop.rs:15:15\n+   |\n+15 |     for _v in &vec {\n+   |               ^^^^\n+   |\n+   = note: `-D clippy::explicit-counter-loop` implied by `-D warnings`\n+\n+error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n+  --> $DIR/explicit_counter_loop.rs:21:15\n+   |\n+21 |     for _v in &vec {\n+   |               ^^^^\n+\n+error: the variable `count` is used as a loop counter. Consider using `for (count, item) in text.chars().enumerate()` or similar iterators\n+  --> $DIR/explicit_counter_loop.rs:58:19\n+   |\n+58 |         for ch in text.chars() {\n+   |                   ^^^^^^^^^^^^\n+\n+error: the variable `count` is used as a loop counter. Consider using `for (count, item) in text.chars().enumerate()` or similar iterators\n+  --> $DIR/explicit_counter_loop.rs:69:19\n+   |\n+69 |         for ch in text.chars() {\n+   |                   ^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "2a70149f24604ea3aea5e49740538a6144816f78", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 1, "deletions": 171, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -7,71 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n use std::collections::*;\n use std::rc::Rc;\n \n static STATIC: [usize; 4] = [0, 1, 8, 16];\n const CONST: [usize; 4] = [0, 1, 8, 16];\n \n #[warn(clippy::all)]\n-fn for_loop_over_option_and_result() {\n-    let option = Some(1);\n-    let result = option.ok_or(\"x not found\");\n-    let v = vec![0, 1, 2];\n-\n-    // check FOR_LOOP_OVER_OPTION lint\n-    for x in option {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check FOR_LOOP_OVER_RESULT lint\n-    for x in result {\n-        println!(\"{}\", x);\n-    }\n-\n-    for x in option.ok_or(\"x not found\") {\n-        println!(\"{}\", x);\n-    }\n-\n-    // make sure LOOP_OVER_NEXT lint takes clippy::precedence when next() is the last call\n-    // in the chain\n-    for x in v.iter().next() {\n-        println!(\"{}\", x);\n-    }\n-\n-    // make sure we lint when next() is not the last call in the chain\n-    for x in v.iter().next().and(Some(0)) {\n-        println!(\"{}\", x);\n-    }\n-\n-    for x in v.iter().next().ok_or(\"x not found\") {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check for false positives\n-\n-    // for loop false positive\n-    for x in v {\n-        println!(\"{}\", x);\n-    }\n-\n-    // while let false positive for Option\n-    while let Some(x) = option {\n-        println!(\"{}\", x);\n-        break;\n-    }\n-\n-    // while let false positive for Result\n-    while let Ok(x) = result {\n-        println!(\"{}\", x);\n-        break;\n-    }\n-}\n-\n struct Unrelated(Vec<u8>);\n impl Unrelated {\n     fn next(&self) -> std::slice::Iter<u8> {\n@@ -84,7 +26,7 @@ impl Unrelated {\n }\n \n #[warn(clippy::needless_range_loop, clippy::explicit_iter_loop, clippy::explicit_into_iter_loop, clippy::iter_next_loop, clippy::reverse_range_loop,\n-       clippy::explicit_counter_loop, clippy::for_kv_map)]\n+       clippy::for_kv_map)]\n #[warn(clippy::unused_collect)]\n #[allow(clippy::linkedlist, clippy::shadow_unrelated, clippy::unnecessary_mut_passed, clippy::cyclomatic_complexity, clippy::similar_names)]\n #[allow(clippy::many_single_char_names, unused_variables)]\n@@ -275,16 +217,6 @@ fn main() {\n     let _y = vec.iter().cloned().map(|x| out.push(x)).collect::<Vec<_>>(); // this is fine\n \n     // Loop with explicit counter variable\n-    let mut _index = 0;\n-    for _v in &vec {\n-        _index += 1\n-    }\n-\n-    let mut _index = 1;\n-    _index = 0;\n-    for _v in &vec {\n-        _index += 1\n-    }\n \n     // Potential false positives\n     let mut _index = 0;\n@@ -389,8 +321,6 @@ fn main() {\n     }\n     println!(\"index: {}\", index);\n \n-    for_loop_over_option_and_result();\n-\n     let m: HashMap<u64, u64> = HashMap::new();\n     for (_, v) in &m {\n         let _v = v;\n@@ -594,103 +524,3 @@ mod issue_2496 {\n         unimplemented!()\n     }\n }\n-\n-mod issue_1219 {\n-    #[warn(clippy::explicit_counter_loop)]\n-    pub fn test() {\n-        // should not trigger the lint because variable is used after the loop #473\n-        let vec = vec![1,2,3];\n-        let mut index = 0;\n-        for _v in &vec { index += 1 }\n-        println!(\"index: {}\", index);\n-\n-        // should not trigger the lint because the count is conditional #1219\n-        let text = \"banana\";\n-        let mut count = 0;\n-        for ch in text.chars() {\n-            if ch == 'a' {\n-                continue;\n-            }\n-            count += 1;\n-            println!(\"{}\", count);\n-        }\n-\n-        // should not trigger the lint because the count is conditional\n-        let text = \"banana\";\n-        let mut count = 0;\n-        for ch in text.chars() {\n-            if ch == 'a' {\n-                count += 1;\n-            }\n-            println!(\"{}\", count);\n-        }\n-\n-        // should trigger the lint because the count is not conditional\n-        let text = \"banana\";\n-        let mut count = 0;\n-        for ch in text.chars() {\n-            count += 1;\n-            if ch == 'a' {\n-                continue;\n-            }\n-            println!(\"{}\", count);\n-        }\n-\n-        // should trigger the lint because the count is not conditional\n-        let text = \"banana\";\n-        let mut count = 0;\n-        for ch in text.chars() {\n-            count += 1;\n-            for i in 0..2 {\n-                let _ = 123;\n-            }\n-            println!(\"{}\", count);\n-        }\n-\n-        // should not trigger the lint because the count is incremented multiple times\n-        let text = \"banana\";\n-        let mut count = 0;\n-        for ch in text.chars() {\n-            count += 1;\n-            for i in 0..2 {\n-                count += 1;\n-            }\n-            println!(\"{}\", count);\n-        }\n-    }\n-}\n-\n-mod issue_3308 {\n-    #[warn(clippy::explicit_counter_loop)]\n-    pub fn test() {\n-        // should not trigger the lint because the count is incremented multiple times\n-        let mut skips = 0;\n-        let erasures = vec![];\n-        for i in 0..10 {\n-            while erasures.contains(&(i + skips)) {\n-                skips += 1;\n-            }\n-            println!(\"{}\", skips);\n-        }\n-\n-        // should not trigger the lint because the count is incremented multiple times\n-        let mut skips = 0;\n-        for i in 0..10 {\n-            let mut j = 0;\n-            while j < 5 {\n-                skips += 1;\n-                j += 1;\n-            }\n-            println!(\"{}\", skips);\n-        }\n-\n-        // should not trigger the lint because the count is incremented multiple times\n-        let mut skips = 0;\n-        for i in 0..10 {\n-            for j in 0..5 {\n-                skips += 1;\n-            }\n-            println!(\"{}\", skips);\n-        }\n-    }\n-}"}, {"sha": "f70a6d3b32f2b9377e9464aea5b9b55ac0dbc660", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 178, "deletions": 272, "changes": 450, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -1,515 +1,421 @@\n-error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop.rs:27:14\n-   |\n-27 |     for x in option {\n-   |              ^^^^^^\n-   |\n-   = note: `-D clippy::for-loop-over-option` implied by `-D warnings`\n-   = help: consider replacing `for x in option` with `if let Some(x) = option`\n-\n-error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop.rs:32:14\n-   |\n-32 |     for x in result {\n-   |              ^^^^^^\n-   |\n-   = note: `-D clippy::for-loop-over-result` implied by `-D warnings`\n-   = help: consider replacing `for x in result` with `if let Ok(x) = result`\n-\n-error: for loop over `option.ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop.rs:36:14\n-   |\n-36 |     for x in option.ok_or(\"x not found\") {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider replacing `for x in option.ok_or(\"x not found\")` with `if let Ok(x) = option.ok_or(\"x not found\")`\n-\n-error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-  --> $DIR/for_loop.rs:42:14\n-   |\n-42 |     for x in v.iter().next() {\n-   |              ^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::iter-next-loop` implied by `-D warnings`\n-\n-error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop.rs:47:14\n-   |\n-47 |     for x in v.iter().next().and(Some(0)) {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider replacing `for x in v.iter().next().and(Some(0))` with `if let Some(x) = v.iter().next().and(Some(0))`\n-\n-error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop.rs:51:14\n-   |\n-51 |     for x in v.iter().next().ok_or(\"x not found\") {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n-\n-error: this loop never actually loops\n-  --> $DIR/for_loop.rs:63:5\n-   |\n-63 | /     while let Some(x) = option {\n-64 | |         println!(\"{}\", x);\n-65 | |         break;\n-66 | |     }\n-   | |_____^\n-   |\n-   = note: `-D clippy::never-loop` implied by `-D warnings`\n-\n-error: this loop never actually loops\n-  --> $DIR/for_loop.rs:69:5\n-   |\n-69 | /     while let Ok(x) = result {\n-70 | |         println!(\"{}\", x);\n-71 | |         break;\n-72 | |     }\n-   | |_____^\n-\n error: the loop variable `i` is only used to index `vec`.\n-  --> $DIR/for_loop.rs:96:14\n+  --> $DIR/for_loop.rs:38:14\n    |\n-96 |     for i in 0..vec.len() {\n+38 |     for i in 0..vec.len() {\n    |              ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::needless-range-loop` implied by `-D warnings`\n help: consider using an iterator\n    |\n-96 |     for <item> in &vec {\n+38 |     for <item> in &vec {\n    |         ^^^^^^    ^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:105:14\n-    |\n-105 |     for i in 0..vec.len() {\n-    |              ^^^^^^^^^^^^\n+  --> $DIR/for_loop.rs:47:14\n+   |\n+47 |     for i in 0..vec.len() {\n+   |              ^^^^^^^^^^^^\n help: consider using an iterator\n-    |\n-105 |     for <item> in &vec {\n-    |         ^^^^^^    ^^^^\n+   |\n+47 |     for <item> in &vec {\n+   |         ^^^^^^    ^^^^\n \n error: the loop variable `j` is only used to index `STATIC`.\n-   --> $DIR/for_loop.rs:110:14\n-    |\n-110 |     for j in 0..4 {\n-    |              ^^^^\n+  --> $DIR/for_loop.rs:52:14\n+   |\n+52 |     for j in 0..4 {\n+   |              ^^^^\n help: consider using an iterator\n-    |\n-110 |     for <item> in &STATIC {\n-    |         ^^^^^^    ^^^^^^^\n+   |\n+52 |     for <item> in &STATIC {\n+   |         ^^^^^^    ^^^^^^^\n \n error: the loop variable `j` is only used to index `CONST`.\n-   --> $DIR/for_loop.rs:114:14\n-    |\n-114 |     for j in 0..4 {\n-    |              ^^^^\n+  --> $DIR/for_loop.rs:56:14\n+   |\n+56 |     for j in 0..4 {\n+   |              ^^^^\n help: consider using an iterator\n-    |\n-114 |     for <item> in &CONST {\n-    |         ^^^^^^    ^^^^^^\n+   |\n+56 |     for <item> in &CONST {\n+   |         ^^^^^^    ^^^^^^\n \n error: the loop variable `i` is used to index `vec`\n-   --> $DIR/for_loop.rs:118:14\n-    |\n-118 |     for i in 0..vec.len() {\n-    |              ^^^^^^^^^^^^\n+  --> $DIR/for_loop.rs:60:14\n+   |\n+60 |     for i in 0..vec.len() {\n+   |              ^^^^^^^^^^^^\n help: consider using an iterator\n-    |\n-118 |     for (i, <item>) in vec.iter().enumerate() {\n-    |         ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+60 |     for (i, <item>) in vec.iter().enumerate() {\n+   |         ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is only used to index `vec2`.\n-   --> $DIR/for_loop.rs:126:14\n-    |\n-126 |     for i in 0..vec.len() {\n-    |              ^^^^^^^^^^^^\n+  --> $DIR/for_loop.rs:68:14\n+   |\n+68 |     for i in 0..vec.len() {\n+   |              ^^^^^^^^^^^^\n help: consider using an iterator\n-    |\n-126 |     for <item> in vec2.iter().take(vec.len()) {\n-    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+68 |     for <item> in vec2.iter().take(vec.len()) {\n+   |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:130:14\n-    |\n-130 |     for i in 5..vec.len() {\n-    |              ^^^^^^^^^^^^\n+  --> $DIR/for_loop.rs:72:14\n+   |\n+72 |     for i in 5..vec.len() {\n+   |              ^^^^^^^^^^^^\n help: consider using an iterator\n-    |\n-130 |     for <item> in vec.iter().skip(5) {\n-    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^\n+   |\n+72 |     for <item> in vec.iter().skip(5) {\n+   |         ^^^^^^    ^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:134:14\n-    |\n-134 |     for i in 0..MAX_LEN {\n-    |              ^^^^^^^^^^\n+  --> $DIR/for_loop.rs:76:14\n+   |\n+76 |     for i in 0..MAX_LEN {\n+   |              ^^^^^^^^^^\n help: consider using an iterator\n-    |\n-134 |     for <item> in vec.iter().take(MAX_LEN) {\n-    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+76 |     for <item> in vec.iter().take(MAX_LEN) {\n+   |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:138:14\n-    |\n-138 |     for i in 0..=MAX_LEN {\n-    |              ^^^^^^^^^^^\n+  --> $DIR/for_loop.rs:80:14\n+   |\n+80 |     for i in 0..=MAX_LEN {\n+   |              ^^^^^^^^^^^\n help: consider using an iterator\n-    |\n-138 |     for <item> in vec.iter().take(MAX_LEN + 1) {\n-    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+80 |     for <item> in vec.iter().take(MAX_LEN + 1) {\n+   |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:142:14\n-    |\n-142 |     for i in 5..10 {\n-    |              ^^^^^\n+  --> $DIR/for_loop.rs:84:14\n+   |\n+84 |     for i in 5..10 {\n+   |              ^^^^^\n help: consider using an iterator\n-    |\n-142 |     for <item> in vec.iter().take(10).skip(5) {\n-    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+84 |     for <item> in vec.iter().take(10).skip(5) {\n+   |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:146:14\n-    |\n-146 |     for i in 5..=10 {\n-    |              ^^^^^^\n+  --> $DIR/for_loop.rs:88:14\n+   |\n+88 |     for i in 5..=10 {\n+   |              ^^^^^^\n help: consider using an iterator\n-    |\n-146 |     for <item> in vec.iter().take(10 + 1).skip(5) {\n-    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+88 |     for <item> in vec.iter().take(10 + 1).skip(5) {\n+   |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is used to index `vec`\n-   --> $DIR/for_loop.rs:150:14\n-    |\n-150 |     for i in 5..vec.len() {\n-    |              ^^^^^^^^^^^^\n+  --> $DIR/for_loop.rs:92:14\n+   |\n+92 |     for i in 5..vec.len() {\n+   |              ^^^^^^^^^^^^\n help: consider using an iterator\n-    |\n-150 |     for (i, <item>) in vec.iter().enumerate().skip(5) {\n-    |         ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+92 |     for (i, <item>) in vec.iter().enumerate().skip(5) {\n+   |         ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is used to index `vec`\n-   --> $DIR/for_loop.rs:154:14\n-    |\n-154 |     for i in 5..10 {\n-    |              ^^^^^\n+  --> $DIR/for_loop.rs:96:14\n+   |\n+96 |     for i in 5..10 {\n+   |              ^^^^^\n help: consider using an iterator\n-    |\n-154 |     for (i, <item>) in vec.iter().enumerate().take(10).skip(5) {\n-    |         ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+96 |     for (i, <item>) in vec.iter().enumerate().take(10).skip(5) {\n+   |         ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:158:14\n+   --> $DIR/for_loop.rs:100:14\n     |\n-158 |     for i in 10..0 {\n+100 |     for i in 10..0 {\n     |              ^^^^^\n     |\n     = note: `-D clippy::reverse-range-loop` implied by `-D warnings`\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |\n-158 |     for i in (0..10).rev() {\n+100 |     for i in (0..10).rev() {\n     |              ^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:162:14\n+   --> $DIR/for_loop.rs:104:14\n     |\n-162 |     for i in 10..=0 {\n+104 |     for i in 10..=0 {\n     |              ^^^^^^\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |\n-162 |     for i in (0...10).rev() {\n+104 |     for i in (0...10).rev() {\n     |              ^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:166:14\n+   --> $DIR/for_loop.rs:108:14\n     |\n-166 |     for i in MAX_LEN..0 {\n+108 |     for i in MAX_LEN..0 {\n     |              ^^^^^^^^^^\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |\n-166 |     for i in (0..MAX_LEN).rev() {\n+108 |     for i in (0..MAX_LEN).rev() {\n     |              ^^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:170:14\n+   --> $DIR/for_loop.rs:112:14\n     |\n-170 |     for i in 5..5 {\n+112 |     for i in 5..5 {\n     |              ^^^^\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:195:14\n+   --> $DIR/for_loop.rs:137:14\n     |\n-195 |     for i in 10..5 + 4 {\n+137 |     for i in 10..5 + 4 {\n     |              ^^^^^^^^^\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |\n-195 |     for i in (5 + 4..10).rev() {\n+137 |     for i in (5 + 4..10).rev() {\n     |              ^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:199:14\n+   --> $DIR/for_loop.rs:141:14\n     |\n-199 |     for i in (5 + 2)..(3 - 1) {\n+141 |     for i in (5 + 2)..(3 - 1) {\n     |              ^^^^^^^^^^^^^^^^\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |\n-199 |     for i in ((3 - 1)..(5 + 2)).rev() {\n+141 |     for i in ((3 - 1)..(5 + 2)).rev() {\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:203:14\n+   --> $DIR/for_loop.rs:145:14\n     |\n-203 |     for i in (5 + 2)..(8 - 1) {\n+145 |     for i in (5 + 2)..(8 - 1) {\n     |              ^^^^^^^^^^^^^^^^\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:225:15\n+   --> $DIR/for_loop.rs:167:15\n     |\n-225 |     for _v in vec.iter() {}\n+167 |     for _v in vec.iter() {}\n     |               ^^^^^^^^^^ help: to write this more concisely, try: `&vec`\n     |\n     = note: `-D clippy::explicit-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:227:15\n+   --> $DIR/for_loop.rs:169:15\n     |\n-227 |     for _v in vec.iter_mut() {}\n+169 |     for _v in vec.iter_mut() {}\n     |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&mut vec`\n \n error: it is more concise to loop over containers instead of using explicit iteration methods`\n-   --> $DIR/for_loop.rs:230:15\n+   --> $DIR/for_loop.rs:172:15\n     |\n-230 |     for _v in out_vec.into_iter() {}\n+172 |     for _v in out_vec.into_iter() {}\n     |               ^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `out_vec`\n     |\n     = note: `-D clippy::explicit-into-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:233:15\n+   --> $DIR/for_loop.rs:175:15\n     |\n-233 |     for _v in array.into_iter() {}\n+175 |     for _v in array.into_iter() {}\n     |               ^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&array`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:238:15\n+   --> $DIR/for_loop.rs:180:15\n     |\n-238 |     for _v in [1, 2, 3].iter() {}\n+180 |     for _v in [1, 2, 3].iter() {}\n     |               ^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[1, 2, 3]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:242:15\n+   --> $DIR/for_loop.rs:184:15\n     |\n-242 |     for _v in [0; 32].iter() {}\n+184 |     for _v in [0; 32].iter() {}\n     |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[0; 32]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:247:15\n+   --> $DIR/for_loop.rs:189:15\n     |\n-247 |     for _v in ll.iter() {}\n+189 |     for _v in ll.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&ll`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:250:15\n+   --> $DIR/for_loop.rs:192:15\n     |\n-250 |     for _v in vd.iter() {}\n+192 |     for _v in vd.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&vd`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:253:15\n+   --> $DIR/for_loop.rs:195:15\n     |\n-253 |     for _v in bh.iter() {}\n+195 |     for _v in bh.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&bh`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:256:15\n+   --> $DIR/for_loop.rs:198:15\n     |\n-256 |     for _v in hm.iter() {}\n+198 |     for _v in hm.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&hm`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:259:15\n+   --> $DIR/for_loop.rs:201:15\n     |\n-259 |     for _v in bt.iter() {}\n+201 |     for _v in bt.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&bt`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:262:15\n+   --> $DIR/for_loop.rs:204:15\n     |\n-262 |     for _v in hs.iter() {}\n+204 |     for _v in hs.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&hs`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:265:15\n+   --> $DIR/for_loop.rs:207:15\n     |\n-265 |     for _v in bs.iter() {}\n+207 |     for _v in bs.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&bs`\n \n error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-   --> $DIR/for_loop.rs:267:15\n+   --> $DIR/for_loop.rs:209:15\n     |\n-267 |     for _v in vec.iter().next() {}\n+209 |     for _v in vec.iter().next() {}\n     |               ^^^^^^^^^^^^^^^^^\n+    |\n+    = note: `-D clippy::iter-next-loop` implied by `-D warnings`\n \n error: you are collect()ing an iterator and throwing away the result. Consider using an explicit for loop to exhaust the iterator\n-   --> $DIR/for_loop.rs:274:5\n+   --> $DIR/for_loop.rs:216:5\n     |\n-274 |     vec.iter().cloned().map(|x| out.push(x)).collect::<Vec<_>>();\n+216 |     vec.iter().cloned().map(|x| out.push(x)).collect::<Vec<_>>();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D clippy::unused-collect` implied by `-D warnings`\n \n-error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n-   --> $DIR/for_loop.rs:279:15\n-    |\n-279 |     for _v in &vec {\n-    |               ^^^^\n-    |\n-    = note: `-D clippy::explicit-counter-loop` implied by `-D warnings`\n-\n-error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n-   --> $DIR/for_loop.rs:285:15\n-    |\n-285 |     for _v in &vec {\n-    |               ^^^^\n-\n error: you seem to want to iterate on a map's values\n-   --> $DIR/for_loop.rs:395:19\n+   --> $DIR/for_loop.rs:325:19\n     |\n-395 |     for (_, v) in &m {\n+325 |     for (_, v) in &m {\n     |                   ^^\n     |\n     = note: `-D clippy::for-kv-map` implied by `-D warnings`\n help: use the corresponding method\n     |\n-395 |     for v in m.values() {\n+325 |     for v in m.values() {\n     |         ^    ^^^^^^^^^^\n \n error: you seem to want to iterate on a map's values\n-   --> $DIR/for_loop.rs:400:19\n+   --> $DIR/for_loop.rs:330:19\n     |\n-400 |     for (_, v) in &*m {\n+330 |     for (_, v) in &*m {\n     |                   ^^^\n help: use the corresponding method\n     |\n-400 |     for v in (*m).values() {\n+330 |     for v in (*m).values() {\n     |         ^    ^^^^^^^^^^^^^\n \n error: you seem to want to iterate on a map's values\n-   --> $DIR/for_loop.rs:408:19\n+   --> $DIR/for_loop.rs:338:19\n     |\n-408 |     for (_, v) in &mut m {\n+338 |     for (_, v) in &mut m {\n     |                   ^^^^^^\n help: use the corresponding method\n     |\n-408 |     for v in m.values_mut() {\n+338 |     for v in m.values_mut() {\n     |         ^    ^^^^^^^^^^^^^^\n \n error: you seem to want to iterate on a map's values\n-   --> $DIR/for_loop.rs:413:19\n+   --> $DIR/for_loop.rs:343:19\n     |\n-413 |     for (_, v) in &mut *m {\n+343 |     for (_, v) in &mut *m {\n     |                   ^^^^^^^\n help: use the corresponding method\n     |\n-413 |     for v in (*m).values_mut() {\n+343 |     for v in (*m).values_mut() {\n     |         ^    ^^^^^^^^^^^^^^^^^\n \n error: you seem to want to iterate on a map's keys\n-   --> $DIR/for_loop.rs:419:24\n+   --> $DIR/for_loop.rs:349:24\n     |\n-419 |     for (k, _value) in rm {\n+349 |     for (k, _value) in rm {\n     |                        ^^\n help: use the corresponding method\n     |\n-419 |     for k in rm.keys() {\n+349 |     for k in rm.keys() {\n     |         ^    ^^^^^^^^^\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:472:14\n+   --> $DIR/for_loop.rs:402:14\n     |\n-472 |     for i in 0..src.len() {\n+402 |     for i in 0..src.len() {\n     |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[..])`\n     |\n     = note: `-D clippy::manual-memcpy` implied by `-D warnings`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:477:14\n+   --> $DIR/for_loop.rs:407:14\n     |\n-477 |     for i in 0..src.len() {\n+407 |     for i in 0..src.len() {\n     |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[10..(src.len() + 10)].clone_from_slice(&src[..])`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:482:14\n+   --> $DIR/for_loop.rs:412:14\n     |\n-482 |     for i in 0..src.len() {\n+412 |     for i in 0..src.len() {\n     |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[10..])`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:487:14\n+   --> $DIR/for_loop.rs:417:14\n     |\n-487 |     for i in 11..src.len() {\n+417 |     for i in 11..src.len() {\n     |              ^^^^^^^^^^^^^ help: try replacing the loop by: `dst[11..src.len()].clone_from_slice(&src[(11 - 10)..(src.len() - 10)])`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:492:14\n+   --> $DIR/for_loop.rs:422:14\n     |\n-492 |     for i in 0..dst.len() {\n+422 |     for i in 0..dst.len() {\n     |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst.clone_from_slice(&src[..dst.len()])`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:505:14\n+   --> $DIR/for_loop.rs:435:14\n     |\n-505 |     for i in 10..256 {\n+435 |     for i in 10..256 {\n     |              ^^^^^^^\n help: try replacing the loop by\n     |\n-505 |     for i in dst[10..256].clone_from_slice(&src[(10 - 5)..(256 - 5)])\n-506 |     dst2[(10 + 500)..(256 + 500)].clone_from_slice(&src[10..256]) {\n+435 |     for i in dst[10..256].clone_from_slice(&src[(10 - 5)..(256 - 5)])\n+436 |     dst2[(10 + 500)..(256 + 500)].clone_from_slice(&src[10..256]) {\n     |\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:517:14\n+   --> $DIR/for_loop.rs:447:14\n     |\n-517 |     for i in 10..LOOP_OFFSET {\n+447 |     for i in 10..LOOP_OFFSET {\n     |              ^^^^^^^^^^^^^^^ help: try replacing the loop by: `dst[(10 + LOOP_OFFSET)..(LOOP_OFFSET + LOOP_OFFSET)].clone_from_slice(&src[(10 - some_var)..(LOOP_OFFSET - some_var)])`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:530:14\n+   --> $DIR/for_loop.rs:460:14\n     |\n-530 |     for i in 0..src_vec.len() {\n+460 |     for i in 0..src_vec.len() {\n     |              ^^^^^^^^^^^^^^^^ help: try replacing the loop by: `dst_vec[..src_vec.len()].clone_from_slice(&src_vec[..])`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:559:14\n+   --> $DIR/for_loop.rs:489:14\n     |\n-559 |     for i in from..from + src.len() {\n+489 |     for i in from..from + src.len() {\n     |              ^^^^^^^^^^^^^^^^^^^^^^ help: try replacing the loop by: `dst[from..from + src.len()].clone_from_slice(&src[0..(from + src.len() - from)])`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:563:14\n+   --> $DIR/for_loop.rs:493:14\n     |\n-563 |     for i in from..from + 3 {\n+493 |     for i in from..from + 3 {\n     |              ^^^^^^^^^^^^^^ help: try replacing the loop by: `dst[from..from + 3].clone_from_slice(&src[0..(from + 3 - from)])`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:570:14\n+   --> $DIR/for_loop.rs:500:14\n     |\n-570 |     for i in 0..src.len() {\n+500 |     for i in 0..src.len() {\n     |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[..])`\n \n-error: the variable `count` is used as a loop counter. Consider using `for (count, item) in text.chars().enumerate()` or similar iterators\n-   --> $DIR/for_loop.rs:631:19\n-    |\n-631 |         for ch in text.chars() {\n-    |                   ^^^^^^^^^^^^\n-\n-error: the variable `count` is used as a loop counter. Consider using `for (count, item) in text.chars().enumerate()` or similar iterators\n-   --> $DIR/for_loop.rs:642:19\n-    |\n-642 |         for ch in text.chars() {\n-    |                   ^^^^^^^^^^^^\n-\n-error: aborting due to 63 previous errors\n+error: aborting due to 51 previous errors\n "}, {"sha": "37fd4e6d03851288a475073b4f9518d2c694dbe1", "filename": "tests/ui/for_loop_over_option_result.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Ffor_loop_over_option_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Ffor_loop_over_option_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_over_option_result.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![warn(clippy::for_loop_over_option, clippy::for_loop_over_result)]\n+\n+/// Tests for_loop_over_result and for_loop_over_option\n+\n+fn for_loop_over_option_and_result() {\n+    let option = Some(1);\n+    let result = option.ok_or(\"x not found\");\n+    let v = vec![0, 1, 2];\n+\n+    // check FOR_LOOP_OVER_OPTION lint\n+    for x in option {\n+        println!(\"{}\", x);\n+    }\n+\n+    // check FOR_LOOP_OVER_RESULT lint\n+    for x in result {\n+        println!(\"{}\", x);\n+    }\n+\n+    for x in option.ok_or(\"x not found\") {\n+        println!(\"{}\", x);\n+    }\n+\n+    // make sure LOOP_OVER_NEXT lint takes clippy::precedence when next() is the last call\n+    // in the chain\n+    for x in v.iter().next() {\n+        println!(\"{}\", x);\n+    }\n+\n+    // make sure we lint when next() is not the last call in the chain\n+    for x in v.iter().next().and(Some(0)) {\n+        println!(\"{}\", x);\n+    }\n+\n+    for x in v.iter().next().ok_or(\"x not found\") {\n+        println!(\"{}\", x);\n+    }\n+\n+    // check for false positives\n+\n+    // for loop false positive\n+    for x in v {\n+        println!(\"{}\", x);\n+    }\n+\n+    // while let false positive for Option\n+    while let Some(x) = option {\n+        println!(\"{}\", x);\n+        break;\n+    }\n+\n+    // while let false positive for Result\n+    while let Ok(x) = result {\n+        println!(\"{}\", x);\n+        break;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "13ad5fff846dadbbdc4459e03cb3abccd2314726", "filename": "tests/ui/for_loop_over_option_result.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Ffor_loop_over_option_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Ffor_loop_over_option_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_over_option_result.stderr?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -0,0 +1,72 @@\n+error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement.\n+  --> $DIR/for_loop_over_option_result.rs:20:14\n+   |\n+20 |     for x in option {\n+   |              ^^^^^^\n+   |\n+   = note: `-D clippy::for-loop-over-option` implied by `-D warnings`\n+   = help: consider replacing `for x in option` with `if let Some(x) = option`\n+\n+error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement.\n+  --> $DIR/for_loop_over_option_result.rs:25:14\n+   |\n+25 |     for x in result {\n+   |              ^^^^^^\n+   |\n+   = note: `-D clippy::for-loop-over-result` implied by `-D warnings`\n+   = help: consider replacing `for x in result` with `if let Ok(x) = result`\n+\n+error: for loop over `option.ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n+  --> $DIR/for_loop_over_option_result.rs:29:14\n+   |\n+29 |     for x in option.ok_or(\"x not found\") {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider replacing `for x in option.ok_or(\"x not found\")` with `if let Ok(x) = option.ok_or(\"x not found\")`\n+\n+error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n+  --> $DIR/for_loop_over_option_result.rs:35:14\n+   |\n+35 |     for x in v.iter().next() {\n+   |              ^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(clippy::iter_next_loop)] on by default\n+\n+error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement.\n+  --> $DIR/for_loop_over_option_result.rs:40:14\n+   |\n+40 |     for x in v.iter().next().and(Some(0)) {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider replacing `for x in v.iter().next().and(Some(0))` with `if let Some(x) = v.iter().next().and(Some(0))`\n+\n+error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n+  --> $DIR/for_loop_over_option_result.rs:44:14\n+   |\n+44 |     for x in v.iter().next().ok_or(\"x not found\") {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n+\n+error: this loop never actually loops\n+  --> $DIR/for_loop_over_option_result.rs:56:5\n+   |\n+56 | /     while let Some(x) = option {\n+57 | |         println!(\"{}\", x);\n+58 | |         break;\n+59 | |     }\n+   | |_____^\n+   |\n+   = note: #[deny(clippy::never_loop)] on by default\n+\n+error: this loop never actually loops\n+  --> $DIR/for_loop_over_option_result.rs:62:5\n+   |\n+62 | /     while let Ok(x) = result {\n+63 | |         println!(\"{}\", x);\n+64 | |         break;\n+65 | |     }\n+   | |_____^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "b5cb92c6d5a108c9ec143ed23f8c2b9e440e026f", "filename": "tests/ui/identity_conversion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_conversion.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -53,4 +53,5 @@ fn main() {\n     let _ = String::from(format!(\"A: {:04}\", 123));\n     let _ = \"\".lines().into_iter();\n     let _ = vec![1, 2, 3].into_iter().into_iter();\n+    let _: String = format!(\"Hello {}\", \"world\").into();\n }"}, {"sha": "15bef8b125ebb31f275493e0408927651adc855f", "filename": "tests/ui/identity_conversion.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fidentity_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fidentity_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_conversion.stderr?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -58,5 +58,11 @@ error: identical conversion\n 55 |     let _ = vec![1, 2, 3].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![1, 2, 3].into_iter()`\n \n-error: aborting due to 9 previous errors\n+error: identical conversion\n+  --> $DIR/identity_conversion.rs:56:21\n+   |\n+56 |     let _: String = format!(\"Hello {}\", \"world\").into();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `format!(\"Hello {}\", \"world\")`\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "c7e11840a37cc2f55626745dec70b4c31db60342", "filename": "tests/ui/lint_without_lint_pass.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_without_lint_pass.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -0,0 +1,32 @@\n+#![deny(clippy::internal)]\n+\n+#![feature(rustc_private)]\n+\n+#[macro_use]\n+extern crate rustc;\n+use rustc::lint;\n+\n+#[macro_use]\n+extern crate clippy_lints;\n+\n+declare_clippy_lint! {\n+    pub TEST_LINT,\n+    correctness,\n+    \"\"\n+}\n+\n+declare_clippy_lint! {\n+    pub TEST_LINT_REGISTERED,\n+    correctness,\n+    \"\"\n+}\n+\n+pub struct Pass;\n+impl lint::LintPass for Pass {\n+    fn get_lints(&self) -> lint::LintArray {\n+        lint_array!(TEST_LINT_REGISTERED)\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "65d1283a6e34052fc7eea7a7061244546ce3d8f6", "filename": "tests/ui/lint_without_lint_pass.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Flint_without_lint_pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Flint_without_lint_pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_without_lint_pass.stderr?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -0,0 +1,20 @@\n+error: the lint `TEST_LINT` is not added to any `LintPass`\n+  --> $DIR/lint_without_lint_pass.rs:12:1\n+   |\n+12 | / declare_clippy_lint! {\n+13 | |     pub TEST_LINT,\n+14 | |     correctness,\n+15 | |     \"\"\n+16 | | }\n+   | |_^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint_without_lint_pass.rs:1:9\n+   |\n+1  | #![deny(clippy::internal)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: #[deny(clippy::lint_without_lint_pass)] implied by #[deny(clippy::internal)]\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "b5f1f2ab0e731dcbf82f48c836847f5d9dadb06c", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -33,7 +33,7 @@ error: you seem to be trying to use match for destructuring a single pattern. Co\n 51 | |         &(v, 1) => println!(\"{}\", v),\n 52 | |         _ => println!(\"none\"),\n 53 | |     }\n-   | |_____^ help: try this: `if let &(v, 1) = tup { $ crate :: io :: _print ( format_args_nl ! ( $ ( $ arg ) * ) ) ; } else { $ crate :: io :: _print ( format_args_nl ! ( $ ( $ arg ) * ) ) ; }`\n+   | |_____^ help: try this: `if let &(v, 1) = tup { println!(\"{}\", v) } else { println!(\"none\") }`\n \n error: you don't need to add `&` to all patterns\n   --> $DIR/matches.rs:50:5"}, {"sha": "896b15481bb49bf3102377ab9a731ee4dc552e6e", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -297,7 +297,7 @@ error: use of `unwrap_or` followed by a function call\n    --> $DIR/methods.rs:339:14\n     |\n 339 |     with_vec.unwrap_or(vec![]);\n-    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n+    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n \n error: use of `unwrap_or` followed by a function call\n    --> $DIR/methods.rs:344:21"}, {"sha": "98c2e0767d6a9464a7b2ccb210bcc5f9d822e7f4", "filename": "tests/ui/needless_bool.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -8,9 +8,31 @@\n // except according to those terms.\n \n \n+#![warn(clippy::needless_bool)]\n \n+use std::cell::Cell;\n \n-#![warn(clippy::needless_bool)]\n+macro_rules! bool_comparison_trigger {\n+    ($($i:ident: $def:expr, $stb:expr );+  $(;)*) => (\n+\n+        #[derive(Clone)]\n+        pub struct Trigger {\n+            $($i: (Cell<bool>, bool, bool)),+\n+        }\n+\n+        #[allow(dead_code)]\n+        impl Trigger {\n+            pub fn trigger(&self, key: &str) -> bool {\n+                $(\n+                    if let stringify!($i) = key {\n+                        return self.$i.1 && self.$i.2 == $def;\n+                    }\n+                 )+\n+                false\n+            }\n+        }\n+    )\n+}\n \n #[allow(clippy::if_same_then_else)]\n fn main() {\n@@ -28,6 +50,9 @@ fn main() {\n     bool_ret5(x, x);\n     bool_ret4(x);\n     bool_ret6(x, x);\n+    needless_bool(x);\n+    needless_bool2(x);\n+    needless_bool3(x);\n }\n \n #[allow(clippy::if_same_then_else, clippy::needless_return)]\n@@ -59,3 +84,23 @@ fn bool_ret4(x: bool) -> bool {\n fn bool_ret6(x: bool, y: bool) -> bool {\n     if x && y { return false } else { return true };\n }\n+\n+fn needless_bool(x: bool) {\n+   if x  == true { };\n+}\n+\n+fn needless_bool2(x: bool) {\n+   if x  == false { };\n+}\n+\n+fn needless_bool3(x: bool) {\n+    \n+    bool_comparison_trigger! {\n+        test_one:   false, false;\n+        test_three: false, false;\n+        test_two:   true, true;\n+    }\n+    \n+    if x == true { };\n+    if x == false { };\n+}"}, {"sha": "638a3f56f0f288b425d83eaaa1766f981dde71ea", "filename": "tests/ui/needless_bool.stderr", "status": "modified", "additions": 49, "deletions": 23, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fneedless_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fneedless_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool.stderr?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -1,70 +1,96 @@\n error: this if-then-else expression will always return true\n-  --> $DIR/needless_bool.rs:19:5\n+  --> $DIR/needless_bool.rs:41:5\n    |\n-19 |     if x { true } else { true };\n+41 |     if x { true } else { true };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::needless-bool` implied by `-D warnings`\n \n error: this if-then-else expression will always return false\n-  --> $DIR/needless_bool.rs:20:5\n+  --> $DIR/needless_bool.rs:42:5\n    |\n-20 |     if x { false } else { false };\n+42 |     if x { false } else { false };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:21:5\n+  --> $DIR/needless_bool.rs:43:5\n    |\n-21 |     if x { true } else { false };\n+43 |     if x { true } else { false };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:22:5\n+  --> $DIR/needless_bool.rs:44:5\n    |\n-22 |     if x { false } else { true };\n+44 |     if x { false } else { true };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `!x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:23:5\n+  --> $DIR/needless_bool.rs:45:5\n    |\n-23 |     if x && y { false } else { true };\n+45 |     if x && y { false } else { true };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `!(x && y)`\n \n error: this if-then-else expression will always return true\n-  --> $DIR/needless_bool.rs:35:5\n+  --> $DIR/needless_bool.rs:60:5\n    |\n-35 |     if x { return true } else { return true };\n+60 |     if x { return true } else { return true };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this if-then-else expression will always return false\n-  --> $DIR/needless_bool.rs:40:5\n+  --> $DIR/needless_bool.rs:65:5\n    |\n-40 |     if x { return false } else { return false };\n+65 |     if x { return false } else { return false };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:45:5\n+  --> $DIR/needless_bool.rs:70:5\n    |\n-45 |     if x { return true } else { return false };\n+70 |     if x { return true } else { return false };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `return x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:50:5\n+  --> $DIR/needless_bool.rs:75:5\n    |\n-50 |     if x && y { return true } else { return false };\n+75 |     if x && y { return true } else { return false };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `return x && y`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:55:5\n+  --> $DIR/needless_bool.rs:80:5\n    |\n-55 |     if x { return false } else { return true };\n+80 |     if x { return false } else { return true };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `return !x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:60:5\n+  --> $DIR/needless_bool.rs:85:5\n    |\n-60 |     if x && y { return false } else { return true };\n+85 |     if x && y { return false } else { return true };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `return !(x && y)`\n \n-error: aborting due to 11 previous errors\n+error: equality checks against true are unnecessary\n+  --> $DIR/needless_bool.rs:89:7\n+   |\n+89 |    if x  == true { };\n+   |       ^^^^^^^^^^ help: try simplifying it as shown: `x`\n+   |\n+   = note: `-D clippy::bool-comparison` implied by `-D warnings`\n+\n+error: equality checks against false can be replaced by a negation\n+  --> $DIR/needless_bool.rs:93:7\n+   |\n+93 |    if x  == false { };\n+   |       ^^^^^^^^^^^ help: try simplifying it as shown: `!x`\n+\n+error: equality checks against true are unnecessary\n+   --> $DIR/needless_bool.rs:104:8\n+    |\n+104 |     if x == true { };\n+    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n+\n+error: equality checks against false can be replaced by a negation\n+   --> $DIR/needless_bool.rs:105:8\n+    |\n+105 |     if x == false { };\n+    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n+\n+error: aborting due to 15 previous errors\n "}, {"sha": "bee3aeb6f7f2b8ea6c3fefb5ea26e9a5b875ebec", "filename": "tests/ui/no_effect.rs", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -13,7 +13,7 @@\n #![feature(box_syntax)]\n \n \n-#![warn(clippy::no_effect, clippy::unnecessary_operation)]\n+#![warn(clippy::no_effect)]\n #![allow(dead_code)]\n #![allow(path_statements)]\n #![allow(clippy::deref_addrof)]\n@@ -105,33 +105,4 @@ fn main() {\n     DropTuple(0);\n     DropEnum::Tuple(0);\n     DropEnum::Struct { field: 0 };\n-\n-    Tuple(get_number());\n-    Struct { field: get_number() };\n-    Struct { ..get_struct() };\n-    Enum::Tuple(get_number());\n-    Enum::Struct { field: get_number() };\n-    5 + get_number();\n-    *&get_number();\n-    &get_number();\n-    (5, 6, get_number());\n-    box get_number();\n-    get_number()..;\n-    ..get_number();\n-    5..get_number();\n-    [42, get_number()];\n-    [42, 55][get_number() as usize];\n-    (42, get_number()).1;\n-    [get_number(); 55];\n-    [42; 55][get_number() as usize];\n-    {get_number()};\n-    FooString { s: String::from(\"blah\"), };\n-\n-    // Do not warn\n-    DropTuple(get_number());\n-    DropStruct { field: get_number() };\n-    DropStruct { field: get_number() };\n-    DropStruct { ..get_drop_struct() };\n-    DropEnum::Tuple(get_number());\n-    DropEnum::Struct { field: get_number() };\n }"}, {"sha": "7f012aa2ed4bb12b13c99ca53e2902c4fefd6533", "filename": "tests/ui/no_effect.stderr", "status": "modified", "additions": 1, "deletions": 123, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.stderr?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -150,127 +150,5 @@ error: statement with no effect\n 98 |     FooString { s: s };\n    |     ^^^^^^^^^^^^^^^^^^^\n \n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:109:5\n-    |\n-109 |     Tuple(get_number());\n-    |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n-    |\n-    = note: `-D clippy::unnecessary-operation` implied by `-D warnings`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:110:5\n-    |\n-110 |     Struct { field: get_number() };\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:111:5\n-    |\n-111 |     Struct { ..get_struct() };\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_struct();`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:112:5\n-    |\n-112 |     Enum::Tuple(get_number());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:113:5\n-    |\n-113 |     Enum::Struct { field: get_number() };\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:114:5\n-    |\n-114 |     5 + get_number();\n-    |     ^^^^^^^^^^^^^^^^^ help: replace it with: `5;get_number();`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:115:5\n-    |\n-115 |     *&get_number();\n-    |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:116:5\n-    |\n-116 |     &get_number();\n-    |     ^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:117:5\n-    |\n-117 |     (5, 6, get_number());\n-    |     ^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `5;6;get_number();`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:118:5\n-    |\n-118 |     box get_number();\n-    |     ^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:119:5\n-    |\n-119 |     get_number()..;\n-    |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:120:5\n-    |\n-120 |     ..get_number();\n-    |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:121:5\n-    |\n-121 |     5..get_number();\n-    |     ^^^^^^^^^^^^^^^^ help: replace it with: `5;get_number();`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:122:5\n-    |\n-122 |     [42, get_number()];\n-    |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `42;get_number();`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:123:5\n-    |\n-123 |     [42, 55][get_number() as usize];\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `[42, 55];get_number() as usize;`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:124:5\n-    |\n-124 |     (42, get_number()).1;\n-    |     ^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `42;get_number();`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:125:5\n-    |\n-125 |     [get_number(); 55];\n-    |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:126:5\n-    |\n-126 |     [42; 55][get_number() as usize];\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `[42; 55];get_number() as usize;`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:127:5\n-    |\n-127 |     {get_number()};\n-    |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n-\n-error: statement can be reduced\n-   --> $DIR/no_effect.rs:128:5\n-    |\n-128 |     FooString { s: String::from(\"blah\"), };\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `String::from(\"blah\");`\n-\n-error: aborting due to 45 previous errors\n+error: aborting due to 25 previous errors\n "}, {"sha": "dca68e179e7425ac06a0baa0e30733e74d78b4dc", "filename": "tests/ui/single_match.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -23,6 +23,15 @@ fn single_match(){\n         _ => ()\n     };\n \n+    let x = Some(1u8);\n+    match x {\n+        // Note the missing block braces.\n+        // We suggest `if let Some(y) = x { .. }` because the macro\n+        // is expanded before we can do anything.\n+        Some(y) => println!(\"{:?}\", y),\n+        _ => ()\n+    }\n+\n     let z = (1u8,1u8);\n     match z {\n         (2...3, 7...9) => dummy(),"}, {"sha": "df614ad201d1d3642163c18eec00ea398ff6a97d", "filename": "tests/ui/single_match.stderr", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fsingle_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fsingle_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match.stderr?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -12,38 +12,50 @@ error: you seem to be trying to use match for destructuring a single pattern. Co\n error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match.rs:27:5\n    |\n-27 | /     match z {\n-28 | |         (2...3, 7...9) => dummy(),\n-29 | |         _ => {}\n-30 | |     };\n+27 | /     match x {\n+28 | |         // Note the missing block braces.\n+29 | |         // We suggest `if let Some(y) = x { .. }` because the macro\n+30 | |         // is expanded before we can do anything.\n+31 | |         Some(y) => println!(\"{:?}\", y),\n+32 | |         _ => ()\n+33 | |     }\n+   | |_____^ help: try this: `if let Some(y) = x { println!(\"{:?}\", y) }`\n+\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match.rs:36:5\n+   |\n+36 | /     match z {\n+37 | |         (2...3, 7...9) => dummy(),\n+38 | |         _ => {}\n+39 | |     };\n    | |_____^ help: try this: `if let (2...3, 7...9) = z { dummy() }`\n \n error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n-  --> $DIR/single_match.rs:53:5\n+  --> $DIR/single_match.rs:62:5\n    |\n-53 | /     match x {\n-54 | |         Some(y) => dummy(),\n-55 | |         None => ()\n-56 | |     };\n+62 | /     match x {\n+63 | |         Some(y) => dummy(),\n+64 | |         None => ()\n+65 | |     };\n    | |_____^ help: try this: `if let Some(y) = x { dummy() }`\n \n error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n-  --> $DIR/single_match.rs:58:5\n+  --> $DIR/single_match.rs:67:5\n    |\n-58 | /     match y {\n-59 | |         Ok(y) => dummy(),\n-60 | |         Err(..) => ()\n-61 | |     };\n+67 | /     match y {\n+68 | |         Ok(y) => dummy(),\n+69 | |         Err(..) => ()\n+70 | |     };\n    | |_____^ help: try this: `if let Ok(y) = y { dummy() }`\n \n error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n-  --> $DIR/single_match.rs:65:5\n+  --> $DIR/single_match.rs:74:5\n    |\n-65 | /     match c {\n-66 | |         Cow::Borrowed(..) => dummy(),\n-67 | |         Cow::Owned(..) => (),\n-68 | |     };\n+74 | /     match c {\n+75 | |         Cow::Borrowed(..) => dummy(),\n+76 | |         Cow::Owned(..) => (),\n+77 | |     };\n    | |_____^ help: try this: `if let Cow::Borrowed(..) = c { dummy() }`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "d2062b356dc0d0d29eb3db9793bc0629a1acb1e5", "filename": "tests/ui/strings.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrings.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -10,10 +10,10 @@\n \n \n \n-\n #[warn(clippy::string_add)]\n #[allow(clippy::string_add_assign)]\n-fn add_only() { // ignores assignment distinction\n+fn add_only() {\n+    // ignores assignment distinction\n     let mut x = \"\".to_owned();\n \n     for _ in 1..3 {\n@@ -59,19 +59,24 @@ fn both() {\n fn str_lit_as_bytes() {\n     let bs = \"hello there\".as_bytes();\n \n+    let bs = r###\"raw string with three ### in it and some \" \"\"###.as_bytes();\n+\n     // no warning, because this cannot be written as a byte string literal:\n     let ubs = \"\u2603\".as_bytes();\n \n     let strify = stringify!(foobar).as_bytes();\n+\n+    let includestr = include_str!(\"entry.rs\").as_bytes();\n }\n \n+#[allow(clippy::assign_op_pattern)]\n fn main() {\n     add_only();\n     add_assign_only();\n     both();\n \n     // the add is only caught for `String`\n     let mut x = 1;\n-    ; x = x + 1;\n+    x = x + 1;\n     assert_eq!(2, x);\n }"}, {"sha": "21115d8e97ecd20eb449916684ff6de2e7b6b960", "filename": "tests/ui/strings.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fstrings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Fstrings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrings.stderr?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -61,16 +61,16 @@ error: calling `as_bytes()` on a string literal\n    = note: `-D clippy::string-lit-as-bytes` implied by `-D warnings`\n \n error: calling `as_bytes()` on a string literal\n-  --> $DIR/strings.rs:65:18\n+  --> $DIR/strings.rs:62:14\n    |\n-65 |     let strify = stringify!(foobar).as_bytes();\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `bstringify!(foobar)`\n+62 |     let bs = r###\"raw string with three ### in it and some \" \"\"###.as_bytes();\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `br###\"raw string with three ### in it and some \" \"\"###`\n \n-error: manual implementation of an assign operation\n-  --> $DIR/strings.rs:75:7\n+error: calling `as_bytes()` on `include_str!(..)`\n+  --> $DIR/strings.rs:69:22\n    |\n-75 |     ; x = x + 1;\n-   |       ^^^^^^^^^ help: replace it with: `x += 1`\n+69 |     let includestr = include_str!(\"entry.rs\").as_bytes();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `include_bytes!(..)` instead: `include_bytes!(\"entry.rs\")`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "de44047c867154da2d9bbd530b5895eb7d393214", "filename": "tests/ui/unnecessary_operation.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Funnecessary_operation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Funnecessary_operation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.rs?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -0,0 +1,76 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(box_syntax)]\n+#![allow(clippy::deref_addrof)]\n+#![warn(clippy::unnecessary_operation)]\n+\n+struct Tuple(i32);\n+struct Struct {\n+    field: i32\n+}\n+enum Enum {\n+    Tuple(i32),\n+    Struct { field: i32 },\n+}\n+struct DropStruct {\n+    field: i32\n+}\n+impl Drop for DropStruct {\n+    fn drop(&mut self) {}\n+}\n+struct DropTuple(i32);\n+impl Drop for DropTuple {\n+    fn drop(&mut self) {}\n+}\n+enum DropEnum {\n+    Tuple(i32),\n+    Struct { field: i32 },\n+}\n+impl Drop for DropEnum {\n+    fn drop(&mut self) {}\n+}\n+struct FooString {\n+    s: String,\n+}\n+\n+fn get_number() -> i32 { 0 }\n+fn get_struct() -> Struct { Struct { field: 0 } }\n+fn get_drop_struct() -> DropStruct { DropStruct { field: 0 } }\n+\n+fn main() {\n+    Tuple(get_number());\n+    Struct { field: get_number() };\n+    Struct { ..get_struct() };\n+    Enum::Tuple(get_number());\n+    Enum::Struct { field: get_number() };\n+    5 + get_number();\n+    *&get_number();\n+    &get_number();\n+    (5, 6, get_number());\n+    box get_number();\n+    get_number()..;\n+    ..get_number();\n+    5..get_number();\n+    [42, get_number()];\n+    [42, 55][get_number() as usize];\n+    (42, get_number()).1;\n+    [get_number(); 55];\n+    [42; 55][get_number() as usize];\n+    {get_number()};\n+    FooString { s: String::from(\"blah\"), };\n+\n+    // Do not warn\n+    DropTuple(get_number());\n+    DropStruct { field: get_number() };\n+    DropStruct { field: get_number() };\n+    DropStruct { ..get_drop_struct() };\n+    DropEnum::Tuple(get_number());\n+    DropEnum::Struct { field: get_number() };\n+}"}, {"sha": "8e5417eb13e33f2af7590522dbcf41c7db37dee8", "filename": "tests/ui/unnecessary_operation.stderr", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Funnecessary_operation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c22b2314ca056f043f48610ddd892be37e72842/tests%2Fui%2Funnecessary_operation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.stderr?ref=3c22b2314ca056f043f48610ddd892be37e72842", "patch": "@@ -0,0 +1,124 @@\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:48:5\n+   |\n+48 |     Tuple(get_number());\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+   |\n+   = note: `-D clippy::unnecessary-operation` implied by `-D warnings`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:49:5\n+   |\n+49 |     Struct { field: get_number() };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:50:5\n+   |\n+50 |     Struct { ..get_struct() };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_struct();`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:51:5\n+   |\n+51 |     Enum::Tuple(get_number());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:52:5\n+   |\n+52 |     Enum::Struct { field: get_number() };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:53:5\n+   |\n+53 |     5 + get_number();\n+   |     ^^^^^^^^^^^^^^^^^ help: replace it with: `5;get_number();`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:54:5\n+   |\n+54 |     *&get_number();\n+   |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:55:5\n+   |\n+55 |     &get_number();\n+   |     ^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:56:5\n+   |\n+56 |     (5, 6, get_number());\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `5;6;get_number();`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:57:5\n+   |\n+57 |     box get_number();\n+   |     ^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:58:5\n+   |\n+58 |     get_number()..;\n+   |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:59:5\n+   |\n+59 |     ..get_number();\n+   |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:60:5\n+   |\n+60 |     5..get_number();\n+   |     ^^^^^^^^^^^^^^^^ help: replace it with: `5;get_number();`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:61:5\n+   |\n+61 |     [42, get_number()];\n+   |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `42;get_number();`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:62:5\n+   |\n+62 |     [42, 55][get_number() as usize];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `[42, 55];get_number() as usize;`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:63:5\n+   |\n+63 |     (42, get_number()).1;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `42;get_number();`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:64:5\n+   |\n+64 |     [get_number(); 55];\n+   |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:65:5\n+   |\n+65 |     [42; 55][get_number() as usize];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `[42; 55];get_number() as usize;`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:66:5\n+   |\n+66 |     {get_number()};\n+   |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+\n+error: statement can be reduced\n+  --> $DIR/unnecessary_operation.rs:67:5\n+   |\n+67 |     FooString { s: String::from(\"blah\"), };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `String::from(\"blah\");`\n+\n+error: aborting due to 20 previous errors\n+"}]}