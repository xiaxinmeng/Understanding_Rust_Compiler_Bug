{"sha": "367cd5ce9b7392b0898d4ac625e7266a3df5292a", "node_id": "C_kwDOAAsO6NoAKDM2N2NkNWNlOWI3MzkyYjA4OThkNGFjNjI1ZTcyNjZhM2RmNTI5MmE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-02T16:08:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-02T16:08:23Z"}, "message": "Merge #11168\n\n11168: minor: drop dead code r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5520ba31048e657014651b0d462a4b6b4bfa0c69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5520ba31048e657014651b0d462a4b6b4bfa0c69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/367cd5ce9b7392b0898d4ac625e7266a3df5292a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0c33CRBK7hj4Ov3rIwAAALgIAD7GS02KrXxAhdintJsryfis\nZ8j2ydhcV27v3E4mbgMIx/ZjpDeKVelh7SXHbbpJrz8yoC+cxhVTtLRkpj1akL2d\nT93i9dO1dFicg36xwNRDV+ImhgljNcqdK9QsxiiGjW8mD8izVyfrm9LW43YVrxLm\nBs9/M5XFbGdFq4/ojngNbTxutReVXp5VAaS8GsYL1rAr2pRLd4zJcwqMHKeW4IUT\nP3W49p/7mkQwBciUd44bWACtdBlNBLiczeEC3NHtx0i/fTUyBoU2Fo8IE4piR6wm\n81D4yEQUeMm7veqUCf4MF7bRGLMmxQ5U6ECuJLb7A3VZ+r01r+l2bgZouTEPEtc=\n=JEqO\n-----END PGP SIGNATURE-----\n", "payload": "tree 5520ba31048e657014651b0d462a4b6b4bfa0c69\nparent 6e3d135f7b56ad19589008b2da5b08c33e679bf1\nparent 3836b195dd36fd41631570741378c2453dadf40b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641139703 +0000\ncommitter GitHub <noreply@github.com> 1641139703 +0000\n\nMerge #11168\n\n11168: minor: drop dead code r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/367cd5ce9b7392b0898d4ac625e7266a3df5292a", "html_url": "https://github.com/rust-lang/rust/commit/367cd5ce9b7392b0898d4ac625e7266a3df5292a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/367cd5ce9b7392b0898d4ac625e7266a3df5292a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e3d135f7b56ad19589008b2da5b08c33e679bf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3d135f7b56ad19589008b2da5b08c33e679bf1", "html_url": "https://github.com/rust-lang/rust/commit/6e3d135f7b56ad19589008b2da5b08c33e679bf1"}, {"sha": "3836b195dd36fd41631570741378c2453dadf40b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3836b195dd36fd41631570741378c2453dadf40b", "html_url": "https://github.com/rust-lang/rust/commit/3836b195dd36fd41631570741378c2453dadf40b"}], "stats": {"total": 55, "additions": 18, "deletions": 37}, "files": [{"sha": "c88b5639f06329487f13d1f105534f5ff7ba28bf", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/367cd5ce9b7392b0898d4ac625e7266a3df5292a/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367cd5ce9b7392b0898d4ac625e7266a3df5292a/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=367cd5ce9b7392b0898d4ac625e7266a3df5292a", "patch": "@@ -215,6 +215,8 @@ fn parse_or_expand(db: &dyn AstDatabase, file_id: HirFileId) -> Option<SyntaxNod\n     match file_id.0 {\n         HirFileIdRepr::FileId(file_id) => Some(db.parse(file_id).tree().syntax().clone()),\n         HirFileIdRepr::MacroFile(macro_file) => {\n+            // FIXME: Note how we convert from `Parse` to `SyntaxNode` here,\n+            // forgetting about parse errors.\n             db.parse_macro_expansion(macro_file).value.map(|(it, _)| it.syntax_node())\n         }\n     }"}, {"sha": "5d7055824153ab7d0385d840dc92303632cc287a", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/367cd5ce9b7392b0898d4ac625e7266a3df5292a/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367cd5ce9b7392b0898d4ac625e7266a3df5292a/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=367cd5ce9b7392b0898d4ac625e7266a3df5292a", "patch": "@@ -1,7 +1,7 @@\n //! Conversions between [`SyntaxNode`] and [`tt::TokenTree`].\n \n use rustc_hash::{FxHashMap, FxHashSet};\n-use stdx::{never, non_empty_vec::NonEmptyVec};\n+use stdx::non_empty_vec::NonEmptyVec;\n use syntax::{\n     ast::{self, make::tokens::doc_comment},\n     AstToken, Parse, PreorderWithTokens, SmolStr, SyntaxElement, SyntaxKind,\n@@ -66,10 +66,6 @@ pub fn token_tree_to_syntax_node(\n             parser::Step::Error { msg } => tree_sink.error(msg.to_string()),\n         }\n     }\n-    if never!(tree_sink.roots.len() != 1) {\n-        return Err(ExpandError::ConversionError);\n-    }\n-    //FIXME: would be cool to report errors\n     let (parse, range_map) = tree_sink.finish();\n     Ok((parse, range_map))\n }\n@@ -284,7 +280,7 @@ fn convert_tokens<C: TokenConvertor>(conv: &mut C) -> tt::Subtree {\n         parent.subtree.token_trees.extend(entry.subtree.token_trees);\n     }\n \n-    let subtree = stack.into_first().subtree;\n+    let subtree = stack.into_last().subtree;\n     if let [tt::TokenTree::Subtree(first)] = &*subtree.token_trees {\n         first.clone()\n     } else {\n@@ -614,10 +610,6 @@ struct TtTreeSink<'a> {\n     text_pos: TextSize,\n     inner: SyntaxTreeBuilder,\n     token_map: TokenMap,\n-\n-    // Number of roots\n-    // Use for detect ill-form tree which is not single root\n-    roots: smallvec::SmallVec<[usize; 1]>,\n }\n \n impl<'a> TtTreeSink<'a> {\n@@ -628,7 +620,6 @@ impl<'a> TtTreeSink<'a> {\n             open_delims: FxHashMap::default(),\n             text_pos: 0.into(),\n             inner: SyntaxTreeBuilder::default(),\n-            roots: smallvec::SmallVec::new(),\n             token_map: TokenMap::default(),\n         }\n     }\n@@ -733,16 +724,10 @@ impl<'a> TtTreeSink<'a> {\n \n     fn start_node(&mut self, kind: SyntaxKind) {\n         self.inner.start_node(kind);\n-\n-        match self.roots.last_mut() {\n-            None | Some(0) => self.roots.push(1),\n-            Some(n) => *n += 1,\n-        };\n     }\n \n     fn finish_node(&mut self) {\n         self.inner.finish_node();\n-        *self.roots.last_mut().unwrap() -= 1;\n     }\n \n     fn error(&mut self, error: String) {"}, {"sha": "342194c7838c6c24b3c360a7bd1a2b6323016f05", "filename": "crates/stdx/src/non_empty_vec.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/367cd5ce9b7392b0898d4ac625e7266a3df5292a/crates%2Fstdx%2Fsrc%2Fnon_empty_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367cd5ce9b7392b0898d4ac625e7266a3df5292a/crates%2Fstdx%2Fsrc%2Fnon_empty_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fnon_empty_vec.rs?ref=367cd5ce9b7392b0898d4ac625e7266a3df5292a", "patch": "@@ -1,45 +1,39 @@\n-//! A [`Vec`] that is guaranteed to at least contain one element.\n+//! See [`NonEmptyVec`].\n \n-pub struct NonEmptyVec<T>(Vec<T>);\n+/// A [`Vec`] that is guaranteed to at least contain one element.\n+pub struct NonEmptyVec<T> {\n+    first: T,\n+    rest: Vec<T>,\n+}\n \n impl<T> NonEmptyVec<T> {\n     #[inline]\n-    pub fn new(initial: T) -> Self {\n-        NonEmptyVec(vec![initial])\n+    pub fn new(first: T) -> Self {\n+        NonEmptyVec { first, rest: Vec::new() }\n     }\n \n     #[inline]\n     pub fn last_mut(&mut self) -> &mut T {\n-        match self.0.last_mut() {\n-            Some(it) => it,\n-            None => unreachable!(),\n-        }\n+        self.rest.last_mut().unwrap_or(&mut self.first)\n     }\n \n     #[inline]\n     pub fn pop(&mut self) -> Option<T> {\n-        if self.0.len() <= 1 {\n-            None\n-        } else {\n-            self.0.pop()\n-        }\n+        self.rest.pop()\n     }\n \n     #[inline]\n     pub fn push(&mut self, value: T) {\n-        self.0.push(value)\n+        self.rest.push(value)\n     }\n \n     #[inline]\n     pub fn len(&self) -> usize {\n-        self.0.len()\n+        1 + self.rest.len()\n     }\n \n     #[inline]\n-    pub fn into_first(mut self) -> T {\n-        match self.0.pop() {\n-            Some(it) => it,\n-            None => unreachable!(),\n-        }\n+    pub fn into_last(mut self) -> T {\n+        self.rest.pop().unwrap_or(self.first)\n     }\n }"}]}