{"sha": "77cbf4adbc0cac53386eeba42223ee312aa02c0c", "node_id": "C_kwDOAAsO6NoAKDc3Y2JmNGFkYmMwY2FjNTMzODZlZWJhNDIyMjNlZTMxMmFhMDJjMGM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-05T15:18:40Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-05T15:18:40Z"}, "message": "Bring the implementation closer to VSCode snippet definitions", "tree": {"sha": "6b69e868f00a01ad369d5f00a3d64a01210b3cc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b69e868f00a01ad369d5f00a3d64a01210b3cc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77cbf4adbc0cac53386eeba42223ee312aa02c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77cbf4adbc0cac53386eeba42223ee312aa02c0c", "html_url": "https://github.com/rust-lang/rust/commit/77cbf4adbc0cac53386eeba42223ee312aa02c0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77cbf4adbc0cac53386eeba42223ee312aa02c0c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b17da60db5e604288c26ed2b89ef72e45a3f596", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b17da60db5e604288c26ed2b89ef72e45a3f596", "html_url": "https://github.com/rust-lang/rust/commit/2b17da60db5e604288c26ed2b89ef72e45a3f596"}], "stats": {"total": 339, "additions": 160, "deletions": 179}, "files": [{"sha": "35b6a758d41c156a0d2cd30026075c62cc1db974", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=77cbf4adbc0cac53386eeba42223ee312aa02c0c", "patch": "@@ -98,8 +98,8 @@ pub use ide_assists::{\n     Assist, AssistConfig, AssistId, AssistKind, AssistResolveStrategy, SingleResolve,\n };\n pub use ide_completion::{\n-    CompletionConfig, CompletionItem, CompletionItemKind, CompletionRelevance, ImportEdit,\n-    PostfixSnippet, PostfixSnippetScope, Snippet, SnippetScope,\n+    CompletionConfig, CompletionItem, CompletionItemKind, CompletionRelevance, ImportEdit, Snippet,\n+    SnippetScope,\n };\n pub use ide_db::{\n     base_db::{"}, {"sha": "4df6c36ebe7e3dbc0a15fbb7676475cbb04f5b3e", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=77cbf4adbc0cac53386eeba42223ee312aa02c0c", "patch": "@@ -56,7 +56,7 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n \n     let postfix_snippet = build_postfix_snippet_builder(ctx, cap, &dot_receiver);\n \n-    if !ctx.config.postfix_snippets.is_empty() {\n+    if !ctx.config.snippets.is_empty() {\n         add_custom_postfix_completions(acc, ctx, &postfix_snippet, &receiver_text);\n     }\n \n@@ -230,21 +230,23 @@ fn add_custom_postfix_completions(\n ) -> Option<()> {\n     let import_scope =\n         ImportScope::find_insert_use_container_with_macros(&ctx.token.parent()?, &ctx.sema)?;\n-    ctx.config.postfix_snippets.iter().for_each(|snippet| {\n-        let imports = match snippet.imports(ctx, &import_scope) {\n-            Some(imports) => imports,\n-            None => return,\n-        };\n-        let mut builder = postfix_snippet(\n-            &snippet.label,\n-            snippet.description.as_deref().unwrap_or_default(),\n-            &format!(\"{}\", snippet.snippet(&receiver_text)),\n-        );\n-        for import in imports.into_iter() {\n-            builder.add_import(import);\n-        }\n-        builder.add_to(acc);\n-    });\n+    ctx.config.postfix_snippets().filter(|(_, snip)| snip.is_expr()).for_each(\n+        |(trigger, snippet)| {\n+            let imports = match snippet.imports(ctx, &import_scope) {\n+                Some(imports) => imports,\n+                None => return,\n+            };\n+            let mut builder = postfix_snippet(\n+                trigger,\n+                snippet.description.as_deref().unwrap_or_default(),\n+                &snippet.postfix_snippet(&receiver_text),\n+            );\n+            for import in imports.into_iter() {\n+                builder.add_import(import);\n+            }\n+            builder.add_to(acc);\n+        },\n+    );\n     None\n }\n \n@@ -254,7 +256,7 @@ mod tests {\n \n     use crate::{\n         tests::{check_edit, check_edit_with_config, filtered_completion_list, TEST_CONFIG},\n-        CompletionConfig, CompletionKind, PostfixSnippet,\n+        CompletionConfig, CompletionKind, Snippet,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n@@ -476,12 +478,13 @@ fn main() {\n     fn custom_postfix_completion() {\n         check_edit_with_config(\n             CompletionConfig {\n-                postfix_snippets: vec![PostfixSnippet::new(\n-                    \"break\".into(),\n-                    &[\"ControlFlow::Break($receiver)\".into()],\n+                snippets: vec![Snippet::new(\n                     &[],\n+                    &[\"break\".into()],\n+                    &[\"ControlFlow::Break($receiver)\".into()],\n+                    \"\",\n                     &[\"core::ops::ControlFlow\".into()],\n-                    crate::PostfixSnippetScope::Expr,\n+                    crate::SnippetScope::Expr,\n                 )\n                 .unwrap()],\n                 ..TEST_CONFIG"}, {"sha": "ed6c4c74937fe55db69df382aa3f840864b9c60a", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=77cbf4adbc0cac53386eeba42223ee312aa02c0c", "patch": "@@ -103,18 +103,20 @@ fn add_custom_completions(\n ) -> Option<()> {\n     let import_scope =\n         ImportScope::find_insert_use_container_with_macros(&ctx.token.parent()?, &ctx.sema)?;\n-    ctx.config.snippets.iter().filter(|snip| snip.scope == scope).for_each(|snip| {\n-        let imports = match snip.imports(ctx, &import_scope) {\n-            Some(imports) => imports,\n-            None => return,\n-        };\n-        let mut builder = snippet(ctx, cap, &snip.label, &snip.snippet);\n-        for import in imports.into_iter() {\n-            builder.add_import(import);\n-        }\n-        builder.detail(snip.description.as_deref().unwrap_or_default());\n-        builder.add_to(acc);\n-    });\n+    ctx.config.prefix_snippets().filter(|(_, snip)| snip.scope == scope).for_each(\n+        |(trigger, snip)| {\n+            let imports = match snip.imports(ctx, &import_scope) {\n+                Some(imports) => imports,\n+                None => return,\n+            };\n+            let mut builder = snippet(ctx, cap, &trigger, &snip.snippet());\n+            for import in imports.into_iter() {\n+                builder.add_import(import);\n+            }\n+            builder.detail(snip.description.as_deref().unwrap_or_default());\n+            builder.add_to(acc);\n+        },\n+    );\n     None\n }\n \n@@ -130,9 +132,10 @@ mod tests {\n         check_edit_with_config(\n             CompletionConfig {\n                 snippets: vec![Snippet::new(\n-                    \"break\".into(),\n-                    &[\"ControlFlow::Break(())\".into()],\n+                    &[\"break\".into()],\n                     &[],\n+                    &[\"ControlFlow::Break(())\".into()],\n+                    \"\",\n                     &[\"core::ops::ControlFlow\".into()],\n                     crate::SnippetScope::Expr,\n                 )"}, {"sha": "c659b4455a9f33fa52920e35747c2ea9de136b72", "filename": "crates/ide_completion/src/config.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Fide_completion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Fide_completion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fconfig.rs?ref=77cbf4adbc0cac53386eeba42223ee312aa02c0c", "patch": "@@ -6,7 +6,7 @@\n \n use ide_db::helpers::{insert_use::InsertUseConfig, SnippetCap};\n \n-use crate::snippet::{PostfixSnippet, Snippet};\n+use crate::snippet::Snippet;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct CompletionConfig {\n@@ -17,6 +17,18 @@ pub struct CompletionConfig {\n     pub add_call_argument_snippets: bool,\n     pub snippet_cap: Option<SnippetCap>,\n     pub insert_use: InsertUseConfig,\n-    pub postfix_snippets: Vec<PostfixSnippet>,\n     pub snippets: Vec<Snippet>,\n }\n+\n+impl CompletionConfig {\n+    pub fn postfix_snippets(&self) -> impl Iterator<Item = (&str, &Snippet)> {\n+        self.snippets.iter().flat_map(|snip| {\n+            snip.postfix_triggers.iter().map(move |trigger| (trigger.as_str(), snip))\n+        })\n+    }\n+    pub fn prefix_snippets(&self) -> impl Iterator<Item = (&str, &Snippet)> {\n+        self.snippets.iter().flat_map(|snip| {\n+            snip.prefix_triggers.iter().map(move |trigger| (trigger.as_str(), snip))\n+        })\n+    }\n+}"}, {"sha": "251ddfa2fc0f7f414c9e4c80e5bc8db851298eef", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=77cbf4adbc0cac53386eeba42223ee312aa02c0c", "patch": "@@ -29,7 +29,7 @@ use crate::{completions::Completions, context::CompletionContext, item::Completi\n pub use crate::{\n     config::CompletionConfig,\n     item::{CompletionItem, CompletionItemKind, CompletionRelevance, ImportEdit},\n-    snippet::{PostfixSnippet, PostfixSnippetScope, Snippet, SnippetScope},\n+    snippet::{Snippet, SnippetScope},\n };\n \n //FIXME: split the following feature into fine-grained features."}, {"sha": "d527f3aef6fe5f62207a504b1e9930234020d59d", "filename": "crates/ide_completion/src/snippet.rs", "status": "modified", "additions": 71, "deletions": 63, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fsnippet.rs?ref=77cbf4adbc0cac53386eeba42223ee312aa02c0c", "patch": "@@ -1,57 +1,98 @@\n //! User (postfix)-snippet definitions.\n //!\n //! Actual logic is implemented in [`crate::completions::postfix`] and [`crate::completions::snippet`].\n+\n+// Feature: User Snippet Completions\n+//\n+// rust-analyzer allows the user to define custom (postfix)-snippets that may depend on items to be accessible for the current scope to be applicable.\n+//\n+// A custom snippet can be defined by adding it to the `rust-analyzer.completion.snippets` object respectively.\n+//\n+// [source,json]\n+// ----\n+// {\n+//   \"rust-analyzer.completion.snippets\": {\n+//     \"thread spawn\": {\n+//       \"prefix\": [\"spawn\", \"tspawn\"],\n+//       \"body\": [\n+//         \"thread::spawn(move || {\",\n+//         \"\\t$0\",\n+//         \")};\",\n+//       ],\n+//       \"description\": \"Insert a thread::spawn call\",\n+//       \"requires\": \"std::thread\",\n+//       \"scope\": \"expr\",\n+//     }\n+//   }\n+// }\n+// ----\n+//\n+// In the example above:\n+//\n+// * `\"thread spawn\"` is the name of the snippet.\n+//\n+// * `prefix` defines one or more trigger words that will trigger the snippets completion.\n+// Using `postfix` will instead create a postfix snippet.\n+//\n+// * `body` is one or more lines of content joined via newlines for the final output.\n+//\n+// * `description` is an optional description of the snippet, if unset the snippet name will be used.\n+//\n+// * `requires` is an optional list of item paths that have to be resolvable in the current crate where the completion is rendered.\n+// On failure of resolution the snippet won't be applicable, otherwise the snippet will insert an import for the items on insertion if\n+// the items aren't yet in scope.\n+//\n+// * `scope` is an optional filter for when the snippet should be applicable. Possible values are:\n+// ** for Snippet-Scopes: `expr`, `item` (default: `item`)\n+// ** for Postfix-Snippet-Scopes: `expr`, `type` (default: `expr`)\n+//\n+// The `body` field also has access to placeholders as visible in the example as `$0`.\n+// These placeholders take the form of `$number` or `${number:placeholder_text}` which can be traversed as tabstop in ascending order starting from 1,\n+// with `$0` being a special case that always comes last.\n+//\n+// There is also a special placeholder, `${receiver}`, which will be replaced by the receiver expression for postfix snippets, or nothing in case of normal snippets.\n+// It does not act as a tabstop.\n use ide_db::helpers::{import_assets::LocatedImport, insert_use::ImportScope};\n use itertools::Itertools;\n use syntax::ast;\n \n use crate::{context::CompletionContext, ImportEdit};\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n-pub enum PostfixSnippetScope {\n-    Expr,\n-    Type,\n-}\n-\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum SnippetScope {\n     Item,\n     Expr,\n+    Type,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n-pub struct PostfixSnippet {\n-    pub scope: PostfixSnippetScope,\n-    pub label: String,\n-    snippet: String,\n-    pub description: Option<String>,\n-    pub requires: Box<[String]>,\n-}\n-\n-#[derive(Clone, Debug, PartialEq, Eq)]\n-#[non_exhaustive]\n pub struct Snippet {\n+    pub postfix_triggers: Box<[String]>,\n+    pub prefix_triggers: Box<[String]>,\n     pub scope: SnippetScope,\n-    pub label: String,\n-    pub snippet: String,\n+    snippet: String,\n     pub description: Option<String>,\n     pub requires: Box<[String]>,\n }\n+\n impl Snippet {\n     pub fn new(\n-        label: String,\n+        prefix_triggers: &[String],\n+        postfix_triggers: &[String],\n         snippet: &[String],\n-        description: &[String],\n+        description: &str,\n         requires: &[String],\n         scope: SnippetScope,\n     ) -> Option<Self> {\n         let (snippet, description) = validate_snippet(snippet, description, requires)?;\n         Some(Snippet {\n+            // Box::into doesn't work as that has a Copy bound \ud83d\ude12\n+            postfix_triggers: postfix_triggers.iter().cloned().collect(),\n+            prefix_triggers: prefix_triggers.iter().cloned().collect(),\n             scope,\n-            label,\n             snippet,\n             description,\n-            requires: requires.iter().cloned().collect(), // Box::into doesn't work as that has a Copy bound \ud83d\ude12\n+            requires: requires.iter().cloned().collect(),\n         })\n     }\n \n@@ -64,52 +105,20 @@ impl Snippet {\n         import_edits(ctx, import_scope, &self.requires)\n     }\n \n-    pub fn is_item(&self) -> bool {\n-        self.scope == SnippetScope::Item\n-    }\n-\n-    pub fn is_expr(&self) -> bool {\n-        self.scope == SnippetScope::Expr\n-    }\n-}\n-\n-impl PostfixSnippet {\n-    pub fn new(\n-        label: String,\n-        snippet: &[String],\n-        description: &[String],\n-        requires: &[String],\n-        scope: PostfixSnippetScope,\n-    ) -> Option<Self> {\n-        let (snippet, description) = validate_snippet(snippet, description, requires)?;\n-        Some(PostfixSnippet {\n-            scope,\n-            label,\n-            snippet,\n-            description,\n-            requires: requires.iter().cloned().collect(), // Box::into doesn't work as that has a Copy bound \ud83d\ude12\n-        })\n-    }\n-\n-    /// Returns None if the required items do not resolve.\n-    pub(crate) fn imports(\n-        &self,\n-        ctx: &CompletionContext,\n-        import_scope: &ImportScope,\n-    ) -> Option<Vec<ImportEdit>> {\n-        import_edits(ctx, import_scope, &self.requires)\n+    pub fn snippet(&self) -> String {\n+        self.snippet.replace(\"${receiver}\", \"\")\n     }\n \n-    pub fn snippet(&self, receiver: &str) -> String {\n-        self.snippet.replace(\"$receiver\", receiver)\n+    pub fn postfix_snippet(&self, receiver: &str) -> String {\n+        self.snippet.replace(\"${receiver}\", receiver)\n     }\n \n     pub fn is_item(&self) -> bool {\n-        self.scope == PostfixSnippetScope::Type\n+        self.scope == SnippetScope::Item\n     }\n \n     pub fn is_expr(&self) -> bool {\n-        self.scope == PostfixSnippetScope::Expr\n+        self.scope == SnippetScope::Expr\n     }\n }\n \n@@ -147,7 +156,7 @@ fn import_edits(\n \n fn validate_snippet(\n     snippet: &[String],\n-    description: &[String],\n+    description: &str,\n     requires: &[String],\n ) -> Option<(String, Option<String>)> {\n     // validate that these are indeed simple paths\n@@ -162,7 +171,6 @@ fn validate_snippet(\n         return None;\n     }\n     let snippet = snippet.iter().join(\"\\n\");\n-    let description = description.iter().join(\"\\n\");\n-    let description = if description.is_empty() { None } else { Some(description) };\n+    let description = if description.is_empty() { None } else { Some(description.to_owned()) };\n     Some((snippet, description))\n }"}, {"sha": "9168956235da2c48a3515908836beaf7cd2ab9da", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=77cbf4adbc0cac53386eeba42223ee312aa02c0c", "patch": "@@ -74,7 +74,6 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n         group: true,\n         skip_glob_imports: true,\n     },\n-    postfix_snippets: Vec::new(),\n     snippets: Vec::new(),\n };\n "}, {"sha": "a032c2b653add51533a95af120d3bb7bfe9a5b97", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 31, "deletions": 73, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=77cbf4adbc0cac53386eeba42223ee312aa02c0c", "patch": "@@ -12,8 +12,7 @@ use std::{ffi::OsString, iter, path::PathBuf};\n use flycheck::FlycheckConfig;\n use ide::{\n     AssistConfig, CompletionConfig, DiagnosticsConfig, HighlightRelatedConfig, HoverConfig,\n-    HoverDocFormat, InlayHintsConfig, JoinLinesConfig, PostfixSnippet, PostfixSnippetScope,\n-    Snippet, SnippetScope,\n+    HoverDocFormat, InlayHintsConfig, JoinLinesConfig, Snippet, SnippetScope,\n };\n use ide_db::helpers::{\n     insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n@@ -117,8 +116,6 @@ config_data! {\n         completion_snippets: FxHashMap<String, SnippetDef> = \"{}\",\n         /// Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n         completion_postfix_enable: bool          = \"true\",\n-        /// Custom postfix completion snippets.\n-        completion_postfix_snippets: FxHashMap<String, PostfixSnippetDef> = \"{}\",\n         /// Toggles the additional completions that automatically add imports when completed.\n         /// Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n         completion_autoimport_enable: bool       = \"true\",\n@@ -301,7 +298,6 @@ pub struct Config {\n     detached_files: Vec<AbsPathBuf>,\n     pub discovered_projects: Option<Vec<ProjectManifest>>,\n     pub root_path: AbsPathBuf,\n-    postfix_snippets: Vec<PostfixSnippet>,\n     snippets: Vec<Snippet>,\n }\n \n@@ -438,7 +434,6 @@ impl Config {\n             detached_files: Vec::new(),\n             discovered_projects: None,\n             root_path,\n-            postfix_snippets: Default::default(),\n             snippets: Default::default(),\n         }\n     }\n@@ -452,40 +447,28 @@ impl Config {\n             .map(AbsPathBuf::assert)\n             .collect();\n         self.data = ConfigData::from_json(json);\n-        self.postfix_snippets = self\n-            .data\n-            .completion_postfix_snippets\n-            .iter()\n-            .flat_map(|(label, desc)| {\n-                PostfixSnippet::new(\n-                    label.clone(),\n-                    &desc.snippet,\n-                    &desc.description,\n-                    &desc.requires,\n-                    match desc.scope {\n-                        PostfixSnippetScopeDef::Expr => PostfixSnippetScope::Expr,\n-                        PostfixSnippetScopeDef::Type => PostfixSnippetScope::Type,\n-                    },\n-                )\n-            })\n-            .collect();\n-        self.snippets = self\n-            .data\n-            .completion_snippets\n-            .iter()\n-            .flat_map(|(label, desc)| {\n-                Snippet::new(\n-                    label.clone(),\n-                    &desc.snippet,\n-                    &desc.description,\n-                    &desc.requires,\n-                    match desc.scope {\n-                        SnippetScopeDef::Expr => SnippetScope::Expr,\n-                        SnippetScopeDef::Item => SnippetScope::Item,\n-                    },\n-                )\n-            })\n-            .collect();\n+        self.snippets.clear();\n+        for (name, def) in self.data.completion_snippets.iter() {\n+            if def.prefix.is_empty() && def.postfix.is_empty() {\n+                continue;\n+            }\n+            let scope = match def.scope {\n+                SnippetScopeDef::Expr => SnippetScope::Expr,\n+                SnippetScopeDef::Type => SnippetScope::Type,\n+                SnippetScopeDef::Item => SnippetScope::Item,\n+            };\n+            match Snippet::new(\n+                &def.prefix,\n+                &def.postfix,\n+                &def.body,\n+                def.description.as_ref().unwrap_or(name),\n+                &def.requires,\n+                scope,\n+            ) {\n+                Some(snippet) => self.snippets.push(snippet),\n+                None => tracing::info!(\"Invalid snippet {}\", name),\n+            }\n+        }\n     }\n \n     pub fn json_schema() -> serde_json::Value {\n@@ -821,7 +804,6 @@ impl Config {\n                     .snippet_support?,\n                 false\n             )),\n-            postfix_snippets: self.postfix_snippets.clone(),\n             snippets: self.snippets.clone(),\n         }\n     }\n@@ -953,24 +935,12 @@ impl Config {\n     }\n }\n \n-#[derive(Deserialize, Debug, Clone, Copy)]\n-#[serde(rename_all = \"snake_case\")]\n-enum PostfixSnippetScopeDef {\n-    Expr,\n-    Type,\n-}\n-\n-impl Default for PostfixSnippetScopeDef {\n-    fn default() -> Self {\n-        PostfixSnippetScopeDef::Expr\n-    }\n-}\n-\n #[derive(Deserialize, Debug, Clone, Copy)]\n #[serde(rename_all = \"snake_case\")]\n enum SnippetScopeDef {\n     Expr,\n     Item,\n+    Type,\n }\n \n impl Default for SnippetScopeDef {\n@@ -979,27 +949,18 @@ impl Default for SnippetScopeDef {\n     }\n }\n \n-#[derive(Deserialize, Debug, Clone)]\n-struct PostfixSnippetDef {\n-    #[serde(deserialize_with = \"single_or_array\")]\n-    description: Vec<String>,\n-    #[serde(deserialize_with = \"single_or_array\")]\n-    snippet: Vec<String>,\n-    #[serde(deserialize_with = \"single_or_array\")]\n-    requires: Vec<String>,\n-    #[serde(default)]\n-    scope: PostfixSnippetScopeDef,\n-}\n-\n-#[derive(Deserialize, Debug, Clone)]\n+#[derive(Deserialize, Debug, Clone, Default)]\n+#[serde(default)]\n struct SnippetDef {\n     #[serde(deserialize_with = \"single_or_array\")]\n-    description: Vec<String>,\n+    prefix: Vec<String>,\n     #[serde(deserialize_with = \"single_or_array\")]\n-    snippet: Vec<String>,\n+    postfix: Vec<String>,\n+    description: Option<String>,\n+    #[serde(deserialize_with = \"single_or_array\")]\n+    body: Vec<String>,\n     #[serde(deserialize_with = \"single_or_array\")]\n     requires: Vec<String>,\n-    #[serde(default)]\n     scope: SnippetScopeDef,\n }\n \n@@ -1203,9 +1164,6 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"items\": { \"type\": \"string\" },\n             \"uniqueItems\": true,\n         },\n-        \"FxHashMap<String, PostfixSnippetDef>\" => set! {\n-            \"type\": \"object\",\n-        },\n         \"FxHashMap<String, SnippetDef>\" => set! {\n             \"type\": \"object\",\n         },"}, {"sha": "b10eb3d6e92ac33890e5dd520347d5c90250066a", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77cbf4adbc0cac53386eeba42223ee312aa02c0c/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=77cbf4adbc0cac53386eeba42223ee312aa02c0c", "patch": "@@ -144,7 +144,6 @@ fn integrated_completion_benchmark() {\n                 group: true,\n                 skip_glob_imports: true,\n             },\n-            postfix_snippets: Vec::new(),\n             snippets: Vec::new(),\n         };\n         let position =\n@@ -182,7 +181,6 @@ fn integrated_completion_benchmark() {\n                 group: true,\n                 skip_glob_imports: true,\n             },\n-            postfix_snippets: Vec::new(),\n             snippets: Vec::new(),\n         };\n         let position ="}]}