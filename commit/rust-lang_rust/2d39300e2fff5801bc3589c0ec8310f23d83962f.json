{"sha": "2d39300e2fff5801bc3589c0ec8310f23d83962f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMzkzMDBlMmZmZjU4MDFiYzM1ODljMGVjODMxMGYyM2Q4Mzk2MmY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-20T19:37:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-20T19:37:00Z"}, "message": "Rollup merge of #82176 - RalfJung:mir-fn-ptr-pretty, r=oli-obk\n\nfix MIR fn-ptr pretty-printing\n\nAn uninitialized function pointer would get printed as `{{uninit  fn()}` (notice the unbalanced parentheses), and a dangling fn ptr would ICE. This fixes both of that.\n\nHowever, I have no idea how to add tests for this.\n\nAlso, I don't understand this MIR pretty-printing code. Somehow the print function `pretty_print_const_scalar` actually *returns* a transformed form of the const (but there is no doc comment explaining what is being returned); some match arms do `p!` while others do `self =`, and there's a wild mixture of `p!` and `write!`... all very mysterious and confusing.^^\n\nr? ``@oli-obk``", "tree": {"sha": "2018895b22ba541c6f4bfacb441ee24f406ca557", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2018895b22ba541c6f4bfacb441ee24f406ca557"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d39300e2fff5801bc3589c0ec8310f23d83962f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgMWTcCRBK7hj4Ov3rIwAAdHIIAHjx/+Aqu7aZDqBanBJfS/pZ\ns4Azo1PVkNDyWF2E8LW3Xwk5XIa5NLMJKd4bflaz/yC0qk4bsshFCuLofCDvYrZE\nVUCMJB2+nFgFcHDoLyQ+3PpS//sBJoEn7yP5bMan6duR4seSJ3FExsPAlfRvw+9W\n1VTZfdWUFaBV8D+Nm5pHHAjpiL1VIsaJ9rX2cuA9XZsSdoVkuAupMtjrK/LM7XkI\nwTpc4yLoqL+o8iLGUr33LaSgfS2L3sbguBtqbE5+7FVZkc8V/MmMOsqGxlALOAWi\n7M8x+qUf9pmUN7l6z/bK6dbfu3Bb+8VXGzRcrZAIP+jyOb9h8yHJLH/1vNw9Dq4=\n=ZP/j\n-----END PGP SIGNATURE-----\n", "payload": "tree 2018895b22ba541c6f4bfacb441ee24f406ca557\nparent 39af0257411b89c93d8cdffeb26a8d58db72efa7\nparent e90674574d21f8245716c0644b0c8aa2e1702b54\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1613849820 +0100\ncommitter GitHub <noreply@github.com> 1613849820 +0100\n\nRollup merge of #82176 - RalfJung:mir-fn-ptr-pretty, r=oli-obk\n\nfix MIR fn-ptr pretty-printing\n\nAn uninitialized function pointer would get printed as `{{uninit  fn()}` (notice the unbalanced parentheses), and a dangling fn ptr would ICE. This fixes both of that.\n\nHowever, I have no idea how to add tests for this.\n\nAlso, I don't understand this MIR pretty-printing code. Somehow the print function `pretty_print_const_scalar` actually *returns* a transformed form of the const (but there is no doc comment explaining what is being returned); some match arms do `p!` while others do `self =`, and there's a wild mixture of `p!` and `write!`... all very mysterious and confusing.^^\n\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d39300e2fff5801bc3589c0ec8310f23d83962f", "html_url": "https://github.com/rust-lang/rust/commit/2d39300e2fff5801bc3589c0ec8310f23d83962f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d39300e2fff5801bc3589c0ec8310f23d83962f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39af0257411b89c93d8cdffeb26a8d58db72efa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/39af0257411b89c93d8cdffeb26a8d58db72efa7", "html_url": "https://github.com/rust-lang/rust/commit/39af0257411b89c93d8cdffeb26a8d58db72efa7"}, {"sha": "e90674574d21f8245716c0644b0c8aa2e1702b54", "url": "https://api.github.com/repos/rust-lang/rust/commits/e90674574d21f8245716c0644b0c8aa2e1702b54", "html_url": "https://github.com/rust-lang/rust/commit/e90674574d21f8245716c0644b0c8aa2e1702b54"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "53c164d44b3e159cb772dc31129a90d68663ff4e", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2d39300e2fff5801bc3589c0ec8310f23d83962f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d39300e2fff5801bc3589c0ec8310f23d83962f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=2d39300e2fff5801bc3589c0ec8310f23d83962f", "patch": "@@ -1018,7 +1018,7 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(write(\"{:?}\", char::try_from(int).unwrap()))\n             }\n             // Raw pointers\n-            (Scalar::Int(int), ty::RawPtr(_)) => {\n+            (Scalar::Int(int), ty::RawPtr(_) | ty::FnPtr(_)) => {\n                 let data = int.assert_bits(self.tcx().data_layout.pointer_size);\n                 self = self.typed_value(\n                     |mut this| {\n@@ -1030,15 +1030,18 @@ pub trait PrettyPrinter<'tcx>:\n                 )?;\n             }\n             (Scalar::Ptr(ptr), ty::FnPtr(_)) => {\n-                // FIXME: this can ICE when the ptr is dangling or points to a non-function.\n-                // We should probably have a helper method to share code with the \"Byte strings\"\n+                // FIXME: We should probably have a helper method to share code with the \"Byte strings\"\n                 // printing above (which also has to handle pointers to all sorts of things).\n-                let instance = self.tcx().global_alloc(ptr.alloc_id).unwrap_fn();\n-                self = self.typed_value(\n-                    |this| this.print_value_path(instance.def_id(), instance.substs),\n-                    |this| this.print_type(ty),\n-                    \" as \",\n-                )?;\n+                match self.tcx().get_global_alloc(ptr.alloc_id) {\n+                    Some(GlobalAlloc::Function(instance)) => {\n+                        self = self.typed_value(\n+                            |this| this.print_value_path(instance.def_id(), instance.substs),\n+                            |this| this.print_type(ty),\n+                            \" as \",\n+                        )?;\n+                    }\n+                    _ => self = self.pretty_print_const_pointer(ptr, ty, print_ty)?,\n+                }\n             }\n             // For function type zsts just printing the path is enough\n             (Scalar::Int(int), ty::FnDef(d, s)) if int == ScalarInt::ZST => {"}, {"sha": "46ecd33cc5b35d76826c38e8bf67289dd468d608", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d39300e2fff5801bc3589c0ec8310f23d83962f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d39300e2fff5801bc3589c0ec8310f23d83962f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=2d39300e2fff5801bc3589c0ec8310f23d83962f", "patch": "@@ -112,7 +112,7 @@ impl<Tag: Copy> std::fmt::Display for ImmTy<'tcx, Tag> {\n                 }\n                 ScalarMaybeUninit::Uninit => cx.typed_value(\n                     |mut this| {\n-                        this.write_str(\"{uninit \")?;\n+                        this.write_str(\"uninit \")?;\n                         Ok(this)\n                     },\n                     |this| this.print_type(ty),"}]}