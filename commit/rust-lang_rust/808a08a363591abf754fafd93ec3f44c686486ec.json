{"sha": "808a08a363591abf754fafd93ec3f44c686486ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwOGEwOGEzNjM1OTFhYmY3NTRmYWZkOTNlYzNmNDRjNjg2NDg2ZWM=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-06-04T18:08:25Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-06-04T18:08:25Z"}, "message": "Add overflow checking for str::get with inclusive ranges\n\nFixes #42401", "tree": {"sha": "5cd63c46768d830265ab663cf88844c6399ab2fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cd63c46768d830265ab663cf88844c6399ab2fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/808a08a363591abf754fafd93ec3f44c686486ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/808a08a363591abf754fafd93ec3f44c686486ec", "html_url": "https://github.com/rust-lang/rust/commit/808a08a363591abf754fafd93ec3f44c686486ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/808a08a363591abf754fafd93ec3f44c686486ec/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18612b21d05ce0021f9ef995592b158e181ffd90", "url": "https://api.github.com/repos/rust-lang/rust/commits/18612b21d05ce0021f9ef995592b158e181ffd90", "html_url": "https://github.com/rust-lang/rust/commit/18612b21d05ce0021f9ef995592b158e181ffd90"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "f64a549a05d4d72048e82df9bd35bfcd5631647a", "filename": "src/libcollections/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808a08a363591abf754fafd93ec3f44c686486ec/src%2Flibcollections%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808a08a363591abf754fafd93ec3f44c686486ec/src%2Flibcollections%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Flib.rs?ref=808a08a363591abf754fafd93ec3f44c686486ec", "patch": "@@ -22,6 +22,7 @@\n #![feature(rand)]\n #![feature(slice_rotate)]\n #![feature(splice)]\n+#![feature(str_checked_slicing)]\n #![feature(str_escape)]\n #![feature(test)]\n #![feature(unboxed_closures)]"}, {"sha": "9d8ca38b20e48c822af8beb5f756c25c88ad5d7e", "filename": "src/libcollections/tests/str.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/808a08a363591abf754fafd93ec3f44c686486ec/src%2Flibcollections%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808a08a363591abf754fafd93ec3f44c686486ec/src%2Flibcollections%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fstr.rs?ref=808a08a363591abf754fafd93ec3f44c686486ec", "patch": "@@ -358,6 +358,48 @@ fn test_slice_fail() {\n     &\"\u4e2d\u534eVi\u1ec7t Nam\"[0..2];\n }\n \n+#[test]\n+#[should_panic]\n+fn test_str_slice_rangetoinclusive_max_panics() {\n+    &\"hello\"[...usize::max_value()];\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_str_slice_rangeinclusive_max_panics() {\n+    &\"hello\"[1...usize::max_value()];\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_str_slicemut_rangetoinclusive_max_panics() {\n+    let mut s = \"hello\".to_owned();\n+    let s: &mut str = &mut s;\n+    &mut s[...usize::max_value()];\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_str_slicemut_rangeinclusive_max_panics() {\n+    let mut s = \"hello\".to_owned();\n+    let s: &mut str = &mut s;\n+    &mut s[1...usize::max_value()];\n+}\n+\n+#[test]\n+fn test_str_get_maxinclusive() {\n+    let mut s = \"hello\".to_owned();\n+    {\n+        let s: &str = &s;\n+        assert_eq!(s.get(...usize::max_value()), None);\n+        assert_eq!(s.get(1...usize::max_value()), None);\n+    }\n+    {\n+        let s: &mut str = &mut s;\n+        assert_eq!(s.get(...usize::max_value()), None);\n+        assert_eq!(s.get(1...usize::max_value()), None);\n+    }\n+}\n \n #[test]\n fn test_is_char_boundary() {"}, {"sha": "34aca592b1e95434d598a990930dcad2d004cd1f", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/808a08a363591abf754fafd93ec3f44c686486ec/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808a08a363591abf754fafd93ec3f44c686486ec/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=808a08a363591abf754fafd93ec3f44c686486ec", "patch": "@@ -1918,11 +1918,19 @@ mod traits {\n         type Output = str;\n         #[inline]\n         fn get(self, slice: &str) -> Option<&Self::Output> {\n-            (self.start..self.end+1).get(slice)\n+            if let Some(end) = self.end.checked_add(1) {\n+                (self.start..end).get(slice)\n+            } else {\n+                None\n+            }\n         }\n         #[inline]\n         fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {\n-            (self.start..self.end+1).get_mut(slice)\n+            if let Some(end) = self.end.checked_add(1) {\n+                (self.start..end).get_mut(slice)\n+            } else {\n+                None\n+            }\n         }\n         #[inline]\n         unsafe fn get_unchecked(self, slice: &str) -> &Self::Output {\n@@ -1953,15 +1961,15 @@ mod traits {\n         type Output = str;\n         #[inline]\n         fn get(self, slice: &str) -> Option<&Self::Output> {\n-            if slice.is_char_boundary(self.end + 1) {\n+            if self.end < usize::max_value() && slice.is_char_boundary(self.end + 1) {\n                 Some(unsafe { self.get_unchecked(slice) })\n             } else {\n                 None\n             }\n         }\n         #[inline]\n         fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {\n-            if slice.is_char_boundary(self.end + 1) {\n+            if self.end < usize::max_value() && slice.is_char_boundary(self.end + 1) {\n                 Some(unsafe { self.get_unchecked_mut(slice) })\n             } else {\n                 None"}]}