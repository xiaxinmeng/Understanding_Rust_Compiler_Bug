{"sha": "9be8ffcb0206fc1558069a7b4766090df7877659", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZThmZmNiMDIwNmZjMTU1ODA2OWE3YjQ3NjYwOTBkZjc4Nzc2NTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-27T22:38:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-27T22:38:25Z"}, "message": "Auto merge of #73583 - anp:location-eq, r=dtolnay\n\nDerive common traits for panic::Location.\n\nNow that `#[track_caller]` is on track to stabilize, one of the roughest edges of working with it is the fact that you can't do much with `Location` except turn it back into a `(&str, u32, u32)`. Which makes sense because the type was defined around the panic machinery originally passing around that tuple (it has the same layout as Location even).\n\nThis PR derives common traits for the type in accordance with the [API guidelines](https://rust-lang.github.io/api-guidelines/interoperability.html#types-eagerly-implement-common-traits-c-common-traits) (those apply to core, right?).\n\nThere's a risk here, e.g. if we ever change the representation of `Location` in a way that makes it harder to implement `Ord`, we might not be able to make that change in a backwards-compatible way. I don't think there's any other compatibility hazard here, as the only changes we currently imagine for the type are to add end fields.\n\ncc @rust-lang/libs", "tree": {"sha": "5a58aada4c071bb3997e4f3543ffb69eb6615c48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a58aada4c071bb3997e4f3543ffb69eb6615c48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9be8ffcb0206fc1558069a7b4766090df7877659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9be8ffcb0206fc1558069a7b4766090df7877659", "html_url": "https://github.com/rust-lang/rust/commit/9be8ffcb0206fc1558069a7b4766090df7877659", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9be8ffcb0206fc1558069a7b4766090df7877659/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76e83339bb619aba206e5590b1e4b813a154b199", "url": "https://api.github.com/repos/rust-lang/rust/commits/76e83339bb619aba206e5590b1e4b813a154b199", "html_url": "https://github.com/rust-lang/rust/commit/76e83339bb619aba206e5590b1e4b813a154b199"}, {"sha": "416dc4b978e5921cd0b20478a17f048dd378bdff", "url": "https://api.github.com/repos/rust-lang/rust/commits/416dc4b978e5921cd0b20478a17f048dd378bdff", "html_url": "https://github.com/rust-lang/rust/commit/416dc4b978e5921cd0b20478a17f048dd378bdff"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "316ecafe572c54d569f99a2b6d8731cf7fe6b5aa", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9be8ffcb0206fc1558069a7b4766090df7877659/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be8ffcb0206fc1558069a7b4766090df7877659/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=9be8ffcb0206fc1558069a7b4766090df7877659", "patch": "@@ -173,8 +173,14 @@ impl fmt::Display for PanicInfo<'_> {\n ///\n /// panic!(\"Normal panic\");\n /// ```\n+///\n+/// # Comparisons\n+///\n+/// Comparisons for equality and ordering are made in file, line, then column priority.\n+/// Files are compared as strings, not `Path`, which could be unexpected.\n+/// See [`Location::file`]'s documentation for more discussion.\n #[lang = \"panic_location\"]\n-#[derive(Debug)]\n+#[derive(Copy, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub struct Location<'a> {\n     file: &'a str,\n@@ -246,6 +252,22 @@ impl<'a> Location<'a> {\n \n     /// Returns the name of the source file from which the panic originated.\n     ///\n+    /// # `&str`, not `&Path`\n+    ///\n+    /// The returned name refers to a source path on the compiling system, but it isn't valid to\n+    /// represent this directly as a `&Path`. The compiled code may run on a different system with\n+    /// a different `Path` implementation than the system providing the contents and this library\n+    /// does not currently have a different \"host path\" type.\n+    ///\n+    /// The most surprising behavior occurs when \"the same\" file is reachable via multiple paths in\n+    /// the module system (usually using the `#[path = \"...\"]` attribute or similar), which can\n+    /// cause what appears to be identical code to return differing values from this function.\n+    ///\n+    /// # Cross-compilation\n+    ///\n+    /// This value is not suitable for passing to `Path::new` or similar constructors when the host\n+    /// platform and target platform differ.\n+    ///\n     /// # Examples\n     ///\n     /// ```should_panic"}]}