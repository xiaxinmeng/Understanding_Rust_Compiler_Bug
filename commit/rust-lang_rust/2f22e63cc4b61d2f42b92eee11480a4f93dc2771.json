{"sha": "2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "node_id": "C_kwDOAAsO6NoAKDJmMjJlNjNjYzRiNjFkMmY0MmI5MmVlZTExNDgwYTRmOTNkYzI3NzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-19T05:04:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-19T05:04:38Z"}, "message": "Auto merge of #90037 - matthiaskrgr:rollup-cdfhxtn, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #89766 (RustWrapper: adapt for an LLVM API change)\n - #89867 (Fix macro_rules! duplication when reexported in the same module)\n - #89941 (removing TLS support in x86_64-unknown-none-hermitkernel)\n - #89956 (Suggest a case insensitive match name regardless of levenshtein distance)\n - #89988 (Do not promote values with const drop that need to be dropped)\n - #89997 (Add test for issue #84957 - `str.as_bytes()` in a `const` expression)\n - #90002 (:arrow_up: rust-analyzer)\n - #90034 (Tiny tweak to Iterator::unzip() doc comment example.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "644a5c3af1367a2bd0afe7fbdefd7898d379f1db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/644a5c3af1367a2bd0afe7fbdefd7898d379f1db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "html_url": "https://github.com/rust-lang/rust/commit/2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd8b56f528631b128f36605b28ae06e36377dc68", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8b56f528631b128f36605b28ae06e36377dc68", "html_url": "https://github.com/rust-lang/rust/commit/cd8b56f528631b128f36605b28ae06e36377dc68"}, {"sha": "5bcaf04cbb7a3a6f11df3a4b9034e8d490e8c08c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bcaf04cbb7a3a6f11df3a4b9034e8d490e8c08c", "html_url": "https://github.com/rust-lang/rust/commit/5bcaf04cbb7a3a6f11df3a4b9034e8d490e8c08c"}], "stats": {"total": 282, "additions": 225, "deletions": 57}, "files": [{"sha": "03e60deea2783c9def30a57f04f538ec2f9b4155", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -22,7 +22,7 @@ use std::mem;\n use std::ops::Deref;\n \n use super::ops::{self, NonConstOp, Status};\n-use super::qualifs::{self, CustomEq, HasMutInterior, NeedsNonConstDrop};\n+use super::qualifs::{self, CustomEq, HasMutInterior, NeedsDrop, NeedsNonConstDrop};\n use super::resolver::FlowSensitiveAnalysis;\n use super::{is_lang_panic_fn, is_lang_special_const_fn, ConstCx, Qualif};\n use crate::const_eval::is_unstable_const_fn;\n@@ -39,7 +39,8 @@ type QualifResults<'mir, 'tcx, Q> =\n #[derive(Default)]\n pub struct Qualifs<'mir, 'tcx> {\n     has_mut_interior: Option<QualifResults<'mir, 'tcx, HasMutInterior>>,\n-    needs_drop: Option<QualifResults<'mir, 'tcx, NeedsNonConstDrop>>,\n+    needs_drop: Option<QualifResults<'mir, 'tcx, NeedsDrop>>,\n+    needs_non_const_drop: Option<QualifResults<'mir, 'tcx, NeedsNonConstDrop>>,\n     indirectly_mutable: Option<IndirectlyMutableResults<'mir, 'tcx>>,\n }\n \n@@ -80,14 +81,14 @@ impl Qualifs<'mir, 'tcx> {\n         location: Location,\n     ) -> bool {\n         let ty = ccx.body.local_decls[local].ty;\n-        if !NeedsNonConstDrop::in_any_value_of_ty(ccx, ty) {\n+        if !NeedsDrop::in_any_value_of_ty(ccx, ty) {\n             return false;\n         }\n \n         let needs_drop = self.needs_drop.get_or_insert_with(|| {\n             let ConstCx { tcx, body, .. } = *ccx;\n \n-            FlowSensitiveAnalysis::new(NeedsNonConstDrop, ccx)\n+            FlowSensitiveAnalysis::new(NeedsDrop, ccx)\n                 .into_engine(tcx, &body)\n                 .iterate_to_fixpoint()\n                 .into_results_cursor(&body)\n@@ -97,6 +98,33 @@ impl Qualifs<'mir, 'tcx> {\n         needs_drop.get().contains(local) || self.indirectly_mutable(ccx, local, location)\n     }\n \n+    /// Returns `true` if `local` is `NeedsNonConstDrop` at the given `Location`.\n+    ///\n+    /// Only updates the cursor if absolutely necessary\n+    pub fn needs_non_const_drop(\n+        &mut self,\n+        ccx: &'mir ConstCx<'mir, 'tcx>,\n+        local: Local,\n+        location: Location,\n+    ) -> bool {\n+        let ty = ccx.body.local_decls[local].ty;\n+        if !NeedsNonConstDrop::in_any_value_of_ty(ccx, ty) {\n+            return false;\n+        }\n+\n+        let needs_non_const_drop = self.needs_non_const_drop.get_or_insert_with(|| {\n+            let ConstCx { tcx, body, .. } = *ccx;\n+\n+            FlowSensitiveAnalysis::new(NeedsNonConstDrop, ccx)\n+                .into_engine(tcx, &body)\n+                .iterate_to_fixpoint()\n+                .into_results_cursor(&body)\n+        });\n+\n+        needs_non_const_drop.seek_before_primary_effect(location);\n+        needs_non_const_drop.get().contains(local) || self.indirectly_mutable(ccx, local, location)\n+    }\n+\n     /// Returns `true` if `local` is `HasMutInterior` at the given `Location`.\n     ///\n     /// Only updates the cursor if absolutely necessary.\n@@ -173,6 +201,7 @@ impl Qualifs<'mir, 'tcx> {\n \n         ConstQualifs {\n             needs_drop: self.needs_drop(ccx, RETURN_PLACE, return_loc),\n+            needs_non_const_drop: self.needs_non_const_drop(ccx, RETURN_PLACE, return_loc),\n             has_mut_interior: self.has_mut_interior(ccx, RETURN_PLACE, return_loc),\n             custom_eq,\n             error_occured,\n@@ -999,7 +1028,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n             }\n \n             // Forbid all `Drop` terminators unless the place being dropped is a local with no\n-            // projections that cannot be `NeedsDrop`.\n+            // projections that cannot be `NeedsNonConstDrop`.\n             TerminatorKind::Drop { place: dropped_place, .. }\n             | TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n                 // If we are checking live drops after drop-elaboration, don't emit duplicate\n@@ -1019,15 +1048,15 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                     return;\n                 }\n \n-                let needs_drop = if let Some(local) = dropped_place.as_local() {\n+                let needs_non_const_drop = if let Some(local) = dropped_place.as_local() {\n                     // Use the span where the local was declared as the span of the drop error.\n                     err_span = self.body.local_decls[local].source_info.span;\n-                    self.qualifs.needs_drop(self.ccx, local, location)\n+                    self.qualifs.needs_non_const_drop(self.ccx, local, location)\n                 } else {\n                     true\n                 };\n \n-                if needs_drop {\n+                if needs_non_const_drop {\n                     self.check_op_spanned(\n                         ops::LiveDrop { dropped_at: Some(terminator.source_info.span) },\n                         err_span,"}, {"sha": "7a2be3c3bad329c8675c500b61fa3288218cce9b", "filename": "compiler/rustc_const_eval/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -97,7 +97,7 @@ impl Visitor<'tcx> for CheckLiveDrops<'mir, 'tcx> {\n                 // `src/test/ui/consts/control-flow/drop-pass.rs`; e.g., when an `Option<Vec<T>>` is\n                 // initialized with `None` and never changed, it still emits drop glue.\n                 // Hence we additionally check the qualifs here to allow more code to pass.\n-                if self.qualifs.needs_drop(self.ccx, dropped_place.local, location) {\n+                if self.qualifs.needs_non_const_drop(self.ccx, dropped_place.local, location) {\n                     // Use the span where the dropped local was declared for the error.\n                     let span = self.body.local_decls[dropped_place.local].source_info.span;\n                     self.check_live_drop(span);"}, {"sha": "dd2980d40ade7aec66ecd253784f37c679bc1405", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -21,7 +21,8 @@ pub fn in_any_value_of_ty(\n ) -> ConstQualifs {\n     ConstQualifs {\n         has_mut_interior: HasMutInterior::in_any_value_of_ty(cx, ty),\n-        needs_drop: NeedsNonConstDrop::in_any_value_of_ty(cx, ty),\n+        needs_drop: NeedsDrop::in_any_value_of_ty(cx, ty),\n+        needs_non_const_drop: NeedsNonConstDrop::in_any_value_of_ty(cx, ty),\n         custom_eq: CustomEq::in_any_value_of_ty(cx, ty),\n         error_occured,\n     }\n@@ -98,17 +99,39 @@ impl Qualif for HasMutInterior {\n }\n \n /// Constant containing an ADT that implements `Drop`.\n-/// This must be ruled out (a) because we cannot run `Drop` during compile-time\n-/// as that might not be a `const fn`, and (b) because implicit promotion would\n-/// remove side-effects that occur as part of dropping that value.\n+/// This must be ruled out because implicit promotion would remove side-effects\n+/// that occur as part of dropping that value. N.B., the implicit promotion has\n+/// to reject const Drop implementations because even if side-effects are ruled\n+/// out through other means, the execution of the drop could diverge.\n+pub struct NeedsDrop;\n+\n+impl Qualif for NeedsDrop {\n+    const ANALYSIS_NAME: &'static str = \"flow_needs_drop\";\n+    const IS_CLEARED_ON_MOVE: bool = true;\n+\n+    fn in_qualifs(qualifs: &ConstQualifs) -> bool {\n+        qualifs.needs_drop\n+    }\n+\n+    fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n+        ty.needs_drop(cx.tcx, cx.param_env)\n+    }\n+\n+    fn in_adt_inherently(cx: &ConstCx<'_, 'tcx>, adt: &'tcx AdtDef, _: SubstsRef<'tcx>) -> bool {\n+        adt.has_dtor(cx.tcx)\n+    }\n+}\n+\n+/// Constant containing an ADT that implements non-const `Drop`.\n+/// This must be ruled out because we cannot run `Drop` during compile-time.\n pub struct NeedsNonConstDrop;\n \n impl Qualif for NeedsNonConstDrop {\n     const ANALYSIS_NAME: &'static str = \"flow_needs_nonconst_drop\";\n     const IS_CLEARED_ON_MOVE: bool = true;\n \n     fn in_qualifs(qualifs: &ConstQualifs) -> bool {\n-        qualifs.needs_drop\n+        qualifs.needs_non_const_drop\n     }\n \n     fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, mut ty: Ty<'tcx>) -> bool {"}, {"sha": "ebcc8213c604b889187c00e17d13d5f1e6b3c658", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -230,7 +230,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n                         // We cannot promote things that need dropping, since the promoted value\n                         // would not get dropped.\n-                        if self.qualif_local::<qualifs::NeedsNonConstDrop>(place.local) {\n+                        if self.qualif_local::<qualifs::NeedsDrop>(place.local) {\n                             return Err(Unpromotable);\n                         }\n "}, {"sha": "ebe495872c4a6653a4f898ac72c7adcf0ad81008", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -18,7 +18,6 @@\n #include \"llvm/Support/Host.h\"\n #include \"llvm/Support/Memory.h\"\n #include \"llvm/Support/SourceMgr.h\"\n-#include \"llvm/Support/TargetRegistry.h\"\n #include \"llvm/Support/TargetSelect.h\"\n #include \"llvm/Support/Timer.h\"\n #include \"llvm/Support/raw_ostream.h\""}, {"sha": "6d2e7d25336de4af2fd86f6f2c3844f58e5bc1cd", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -21,6 +21,11 @@\n #include \"llvm/Support/CBindingWrapping.h\"\n #include \"llvm/Support/FileSystem.h\"\n #include \"llvm/Support/Host.h\"\n+#if LLVM_VERSION_LT(14, 0)\n+#include \"llvm/Support/TargetRegistry.h\"\n+#else\n+#include \"llvm/MC/TargetRegistry.h\"\n+#endif\n #include \"llvm/Target/TargetMachine.h\"\n #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n #include \"llvm/Transforms/IPO/AlwaysInliner.h\""}, {"sha": "cb3f3850958ec90d85d9e4d1e0db2667fca32a93", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -225,6 +225,7 @@ pub struct BorrowCheckResult<'tcx> {\n pub struct ConstQualifs {\n     pub has_mut_interior: bool,\n     pub needs_drop: bool,\n+    pub needs_non_const_drop: bool,\n     pub custom_eq: bool,\n     pub error_occured: Option<ErrorReported>,\n }"}, {"sha": "c10968e06d79a66b4150c2cac6b95e9b3a06f433", "filename": "compiler/rustc_span/src/lev_distance.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -58,34 +58,28 @@ pub fn find_best_match_for_name(\n     let lookup = &lookup.as_str();\n     let max_dist = dist.unwrap_or_else(|| cmp::max(lookup.len(), 3) / 3);\n \n-    let (case_insensitive_match, levenshtein_match) = name_vec\n+    // Priority of matches:\n+    // 1. Exact case insensitive match\n+    // 2. Levenshtein distance match\n+    // 3. Sorted word match\n+    if let Some(case_insensitive_match) =\n+        name_vec.iter().find(|candidate| candidate.as_str().to_uppercase() == lookup.to_uppercase())\n+    {\n+        return Some(*case_insensitive_match);\n+    }\n+    let levenshtein_match = name_vec\n         .iter()\n         .filter_map(|&name| {\n             let dist = lev_distance(lookup, &name.as_str());\n             if dist <= max_dist { Some((name, dist)) } else { None }\n         })\n         // Here we are collecting the next structure:\n-        // (case_insensitive_match, (levenshtein_match, levenshtein_distance))\n-        .fold((None, None), |result, (candidate, dist)| {\n-            (\n-                if candidate.as_str().to_uppercase() == lookup.to_uppercase() {\n-                    Some(candidate)\n-                } else {\n-                    result.0\n-                },\n-                match result.1 {\n-                    None => Some((candidate, dist)),\n-                    Some((c, d)) => Some(if dist < d { (candidate, dist) } else { (c, d) }),\n-                },\n-            )\n+        // (levenshtein_match, levenshtein_distance)\n+        .fold(None, |result, (candidate, dist)| match result {\n+            None => Some((candidate, dist)),\n+            Some((c, d)) => Some(if dist < d { (candidate, dist) } else { (c, d) }),\n         });\n-    // Priority of matches:\n-    // 1. Exact case insensitive match\n-    // 2. Levenshtein distance match\n-    // 3. Sorted word match\n-    if let Some(candidate) = case_insensitive_match {\n-        Some(candidate)\n-    } else if levenshtein_match.is_some() {\n+    if levenshtein_match.is_some() {\n         levenshtein_match.map(|(candidate, _)| candidate)\n     } else {\n         find_match_by_sorted_words(name_vec, lookup)"}, {"sha": "b32f8d32c1391e0be3e54c76c7ccf351bba1745d", "filename": "compiler/rustc_span/src/lev_distance/tests.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -31,16 +31,12 @@ fn test_find_best_match_for_name() {\n \n         assert_eq!(find_best_match_for_name(&input, Symbol::intern(\"1111111111\"), None), None);\n \n-        let input = vec![Symbol::intern(\"aAAA\")];\n+        let input = vec![Symbol::intern(\"AAAA\")];\n         assert_eq!(\n-            find_best_match_for_name(&input, Symbol::intern(\"AAAA\"), None),\n-            Some(Symbol::intern(\"aAAA\"))\n+            find_best_match_for_name(&input, Symbol::intern(\"aaaa\"), None),\n+            Some(Symbol::intern(\"AAAA\"))\n         );\n \n-        let input = vec![Symbol::intern(\"AAAA\")];\n-        // Returns None because `lev_distance > max_dist / 3`\n-        assert_eq!(find_best_match_for_name(&input, Symbol::intern(\"aaaa\"), None), None);\n-\n         let input = vec![Symbol::intern(\"AAAA\")];\n         assert_eq!(\n             find_best_match_for_name(&input, Symbol::intern(\"aaaa\"), Some(4)),"}, {"sha": "414b0f7ff230c723d0a2b15aaeaaf6207ba9aa46", "filename": "compiler/rustc_target/src/spec/hermit_kernel_base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_kernel_base.rs?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions, TlsModel};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n@@ -13,12 +13,10 @@ pub fn opts() -> TargetOptions {\n         disable_redzone: true,\n         linker: Some(\"rust-lld\".to_owned()),\n         executables: true,\n-        has_elf_tls: true,\n         pre_link_args,\n         panic_strategy: PanicStrategy::Abort,\n         position_independent_executables: true,\n         static_position_independent_executables: true,\n-        tls_model: TlsModel::InitialExec,\n         ..Default::default()\n     }\n }"}, {"sha": "d957a7527cf58d7902bed1da9465935277de49d4", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -2837,12 +2837,12 @@ pub trait Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let a = [(1, 2), (3, 4)];\n+    /// let a = [(1, 2), (3, 4), (5, 6)];\n     ///\n     /// let (left, right): (Vec<_>, Vec<_>) = a.iter().cloned().unzip();\n     ///\n-    /// assert_eq!(left, [1, 3]);\n-    /// assert_eq!(right, [2, 4]);\n+    /// assert_eq!(left, [1, 3, 5]);\n+    /// assert_eq!(right, [2, 4, 6]);\n     ///\n     /// // you can also unzip multiple nested tuples at once\n     /// let a = [(1, (2, 3)), (4, (5, 6))];"}, {"sha": "1a6b3bc63e6def5868ab4015a8f021a3560cf40c", "filename": "library/std/src/sys/hermit/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -182,7 +182,7 @@ impl TcpStream {\n         Ok(self.clone())\n     }\n \n-    pub fn set_linger(&self, linger: Option<Duration>) -> io::Result<()> {\n+    pub fn set_linger(&self, _linger: Option<Duration>) -> io::Result<()> {\n         unsupported()\n     }\n "}, {"sha": "3e853456fad77d48ee20e74dd20ab5d2ad862b0c", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -87,13 +87,21 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // the rexport defines the path that a user will actually see. Accordingly,\n         // we add the rexport as an item here, and then skip over the original\n         // definition in `visit_item()` below.\n+        //\n+        // We also skip `#[macro_export] macro_rules!` that have already been inserted,\n+        // it can happen if within the same module a `#[macro_export] macro_rules!`\n+        // is declared but also a reexport of itself producing two exports of the same\n+        // macro in the same module.\n+        let mut inserted = FxHashSet::default();\n         for export in self.cx.tcx.module_exports(CRATE_DEF_ID).unwrap_or(&[]) {\n             if let Res::Def(DefKind::Macro(_), def_id) = export.res {\n                 if let Some(local_def_id) = def_id.as_local() {\n                     if self.cx.tcx.has_attr(def_id, sym::macro_export) {\n-                        let hir_id = self.cx.tcx.hir().local_def_id_to_hir_id(local_def_id);\n-                        let item = self.cx.tcx.hir().expect_item(hir_id);\n-                        top_level_module.items.push((item, None));\n+                        if inserted.insert(def_id) {\n+                            let hir_id = self.cx.tcx.hir().local_def_id_to_hir_id(local_def_id);\n+                            let item = self.cx.tcx.hir().expect_item(hir_id);\n+                            top_level_module.items.push((item, None));\n+                        }\n                     }\n                 }\n             }"}, {"sha": "b86614ffbad68d874c37c88e248a9120fca76cb1", "filename": "src/test/rustdoc-json/reexport/macro.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/src%2Ftest%2Frustdoc-json%2Freexport%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/src%2Ftest%2Frustdoc-json%2Freexport%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fmacro.rs?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -0,0 +1,17 @@\n+// edition:2018\n+\n+#![no_core]\n+#![feature(no_core)]\n+\n+// @count macro.json \"$.index[*][?(@.name=='macro')].inner.items[*]\" 2\n+\n+// @set repro_id = macro.json \"$.index[*][?(@.name=='repro')].id\"\n+// @has - \"$.index[*][?(@.name=='macro')].inner.items[*]\" $repro_id\n+#[macro_export]\n+macro_rules! repro {\n+    () => {};\n+}\n+\n+// @set repro2_id = macro.json \"$.index[*][?(@.inner.name=='repro2')].id\"\n+// @has - \"$.index[*][?(@.name=='macro')].inner.items[*]\" $repro2_id\n+pub use crate::repro as repro2;"}, {"sha": "45544dbeea6a0e18346f383954affd95a3a07e1b", "filename": "src/test/rustdoc/issue-89852.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/src%2Ftest%2Frustdoc%2Fissue-89852.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/src%2Ftest%2Frustdoc%2Fissue-89852.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-89852.rs?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+\n+#![no_core]\n+#![feature(no_core)]\n+\n+// @matches 'issue_89852/sidebar-items.js' '\"repro\"'\n+// @!matches 'issue_89852/sidebar-items.js' '\"repro\".*\"repro\"'\n+\n+#[macro_export]\n+macro_rules! repro {\n+    () => {};\n+}\n+\n+pub use crate::repro as repro2;"}, {"sha": "7e235c4911c31d202026b87d08385759fa59452a", "filename": "src/test/ui/consts/const-eval/issue-84957-const-str-as-bytes.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-84957-const-str-as-bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-84957-const-str-as-bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-84957-const-str-as-bytes.rs?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -0,0 +1,28 @@\n+// build-pass\n+\n+trait Foo {}\n+\n+struct Bar {\n+    bytes: &'static [u8],\n+    func: fn(&Box<dyn Foo>),\n+}\n+fn example(_: &Box<dyn Foo>) {}\n+\n+const BARS: &[Bar] = &[\n+    Bar {\n+        bytes: \"0\".as_bytes(),\n+        func: example,\n+    },\n+    Bar {\n+        bytes: \"0\".as_bytes(),\n+        func: example,\n+    },\n+];\n+\n+fn main() {\n+    let x = todo!();\n+\n+    for bar in BARS {\n+        (bar.func)(&x);\n+    }\n+}"}, {"sha": "c896c011ab66acdc48b4d3add24f1e9ce16d934c", "filename": "src/test/ui/consts/promoted-const-drop.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.rs?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_trait_impl)]\n+#![feature(const_mut_refs)]\n+\n+struct A();\n+\n+impl const Drop for A {\n+    fn drop(&mut self) {}\n+}\n+\n+const C: A = A();\n+\n+fn main() {\n+    let _: &'static A = &A(); //~ ERROR temporary value dropped while borrowed\n+    let _: &'static [A] = &[C]; //~ ERROR temporary value dropped while borrowed\n+}"}, {"sha": "184ba0ea3b3777788a433315a7b8bbdc4fba297a", "filename": "src/test/ui/consts/promoted-const-drop.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.stderr?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -0,0 +1,24 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted-const-drop.rs:13:26\n+   |\n+LL |     let _: &'static A = &A();\n+   |            ----------    ^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL |     let _: &'static [A] = &[C];\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted-const-drop.rs:14:28\n+   |\n+LL |     let _: &'static [A] = &[C];\n+   |            ------------    ^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "e4c1c8ad293b7162ec96057576899463ead5aef0", "filename": "src/test/ui/hygiene/rustc-macro-transparency.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -2,29 +2,43 @@ error[E0425]: cannot find value `Opaque` in this scope\n   --> $DIR/rustc-macro-transparency.rs:26:5\n    |\n LL |     Opaque;\n-   |     ^^^^^^ help: a local variable with a similar name exists (notice the capitalization): `opaque`\n+   |     ^^^^^^ not found in this scope\n \n error[E0423]: expected value, found macro `semitransparent`\n   --> $DIR/rustc-macro-transparency.rs:29:5\n    |\n+LL |     struct SemiTransparent;\n+   |     ----------------------- similarly named unit struct `SemiTransparent` defined here\n+...\n LL |     semitransparent;\n    |     ^^^^^^^^^^^^^^^ not a value\n    |\n help: use `!` to invoke the macro\n    |\n LL |     semitransparent!;\n    |                    +\n+help: a unit struct with a similar name exists\n+   |\n+LL |     SemiTransparent;\n+   |     ~~~~~~~~~~~~~~~\n \n error[E0423]: expected value, found macro `opaque`\n   --> $DIR/rustc-macro-transparency.rs:30:5\n    |\n+LL |     struct Opaque;\n+   |     -------------- similarly named unit struct `Opaque` defined here\n+...\n LL |     opaque;\n    |     ^^^^^^ not a value\n    |\n help: use `!` to invoke the macro\n    |\n LL |     opaque!;\n    |           +\n+help: a unit struct with a similar name exists\n+   |\n+LL |     Opaque;\n+   |     ~~~~~~\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0bfbf538486deadd62245c4ec4f1bfd7b790c2a9", "filename": "src/test/ui/issues/issue-22933-2.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f22e63cc4b61d2f42b92eee11480a4f93dc2771/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -5,7 +5,10 @@ LL | enum Delicious {\n    | -------------- variant or associated item `PIE` not found here\n ...\n LL |     ApplePie = Delicious::Apple as isize | Delicious::PIE as isize,\n-   |                                                       ^^^ variant or associated item not found in `Delicious`\n+   |                                                       ^^^\n+   |                                                       |\n+   |                                                       variant or associated item not found in `Delicious`\n+   |                                                       help: there is a variant with a similar name: `Pie`\n \n error: aborting due to previous error\n "}, {"sha": "91cbda43c2af82b9377eff70a21f59ade18cd23c", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=2f22e63cc4b61d2f42b92eee11480a4f93dc2771", "patch": "@@ -1 +1 @@\n-Subproject commit ed4b312fa777ebb39ba1348fe3df574c441a485e\n+Subproject commit 91cbda43c2af82b9377eff70a21f59ade18cd23c"}]}