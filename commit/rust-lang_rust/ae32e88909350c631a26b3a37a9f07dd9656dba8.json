{"sha": "ae32e88909350c631a26b3a37a9f07dd9656dba8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMzJlODg5MDkzNTBjNjMxYTI2YjNhMzdhOWYwN2RkOTY1NmRiYTg=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-29T22:48:05Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-31T01:17:46Z"}, "message": "Lower let-else to HIR", "tree": {"sha": "5012a3ec0681ca03a9976970fcc791977f367cd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5012a3ec0681ca03a9976970fcc791977f367cd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae32e88909350c631a26b3a37a9f07dd9656dba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae32e88909350c631a26b3a37a9f07dd9656dba8", "html_url": "https://github.com/rust-lang/rust/commit/ae32e88909350c631a26b3a37a9f07dd9656dba8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae32e88909350c631a26b3a37a9f07dd9656dba8/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "120d46e25507bae6ba1a621205388f8b7be106a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/120d46e25507bae6ba1a621205388f8b7be106a2", "html_url": "https://github.com/rust-lang/rust/commit/120d46e25507bae6ba1a621205388f8b7be106a2"}], "stats": {"total": 99, "additions": 83, "deletions": 16}, "files": [{"sha": "f4584e8bbdff1868ac0c50b2793df3e6ab26df9e", "filename": "compiler/rustc_ast_lowering/src/block.rs", "status": "modified", "additions": 81, "deletions": 16, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/ae32e88909350c631a26b3a37a9f07dd9656dba8/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae32e88909350c631a26b3a37a9f07dd9656dba8/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs?ref=ae32e88909350c631a26b3a37a9f07dd9656dba8", "patch": "@@ -1,6 +1,8 @@\n use crate::{ImplTraitContext, ImplTraitPosition, LoweringContext};\n-use rustc_ast::{Block, BlockCheckMode, Local, Stmt, StmtKind};\n+use rustc_ast::{AttrVec, Block, BlockCheckMode, Expr, Local, LocalKind, Stmt, StmtKind};\n use rustc_hir as hir;\n+use rustc_span::symbol::Ident;\n+use rustc_span::{sym, DesugaringKind};\n \n use smallvec::SmallVec;\n \n@@ -32,13 +34,24 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let mut expr = None;\n         while let [s, tail @ ..] = ast_stmts {\n             match s.kind {\n-                StmtKind::Local(ref l) => {\n-                    let l = self.lower_local(l);\n+                StmtKind::Local(ref local) => {\n                     let hir_id = self.lower_node_id(s.id);\n-                    self.alias_attrs(hir_id, l.hir_id);\n-                    let kind = hir::StmtKind::Local(self.arena.alloc(l));\n-                    let span = self.lower_span(s.span);\n-                    stmts.push(hir::Stmt { hir_id, kind, span });\n+                    match &local.kind {\n+                        LocalKind::InitElse(init, els) => {\n+                            let (s, e) = self.lower_let_else(hir_id, local, init, els, tail);\n+                            stmts.push(s);\n+                            expr = Some(e);\n+                            // remaining statements are in let-else expression\n+                            break;\n+                        }\n+                        _ => {\n+                            let local = self.lower_local(local);\n+                            self.alias_attrs(hir_id, local.hir_id);\n+                            let kind = hir::StmtKind::Local(local);\n+                            let span = self.lower_span(s.span);\n+                            stmts.push(hir::Stmt { hir_id, kind, span });\n+                        }\n+                    }\n                 }\n                 StmtKind::Item(ref it) => {\n                     stmts.extend(self.lower_item_id(it).into_iter().enumerate().map(\n@@ -81,22 +94,18 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         (self.arena.alloc_from_iter(stmts), expr)\n     }\n \n-    fn lower_local(&mut self, l: &Local) -> hir::Local<'hir> {\n+    fn lower_local(&mut self, l: &Local) -> &'hir hir::Local<'hir> {\n         let ty = l\n             .ty\n             .as_ref()\n             .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Binding)));\n         let init = l.kind.init().map(|init| self.lower_expr(init));\n         let hir_id = self.lower_node_id(l.id);\n+        let pat = self.lower_pat(&l.pat);\n+        let span = self.lower_span(l.span);\n+        let source = hir::LocalSource::Normal;\n         self.lower_attrs(hir_id, &l.attrs);\n-        hir::Local {\n-            hir_id,\n-            ty,\n-            pat: self.lower_pat(&l.pat),\n-            init,\n-            span: self.lower_span(l.span),\n-            source: hir::LocalSource::Normal,\n-        }\n+        self.arena.alloc(hir::Local { hir_id, ty, pat, init, span, source })\n     }\n \n     fn lower_block_check_mode(&mut self, b: &BlockCheckMode) -> hir::BlockCheckMode {\n@@ -107,4 +116,60 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n         }\n     }\n+\n+    fn lower_let_else(\n+        &mut self,\n+        stmt_hir_id: hir::HirId,\n+        local: &Local,\n+        init: &Expr,\n+        els: &Block,\n+        tail: &[Stmt],\n+    ) -> (hir::Stmt<'hir>, &'hir hir::Expr<'hir>) {\n+        let ty = local\n+            .ty\n+            .as_ref()\n+            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Binding)));\n+        let span = self.lower_span(local.span);\n+        let span = self.mark_span_with_reason(DesugaringKind::LetElse, span, None);\n+        let init = Some(self.lower_expr(init));\n+        let val = Ident::with_dummy_span(sym::val);\n+        let (pat, val_id) =\n+            self.pat_ident_binding_mode(span, val, hir::BindingAnnotation::Unannotated);\n+        let local_hir_id = self.lower_node_id(local.id);\n+        self.lower_attrs(local_hir_id, &local.attrs);\n+        // first statement which basically exists for the type annotation\n+        let stmt = {\n+            let local = self.arena.alloc(hir::Local {\n+                hir_id: local_hir_id,\n+                ty,\n+                pat,\n+                init,\n+                span,\n+                source: hir::LocalSource::Normal,\n+            });\n+            let kind = hir::StmtKind::Local(local);\n+            hir::Stmt { hir_id: stmt_hir_id, kind, span }\n+        };\n+        let let_expr = {\n+            let scrutinee = self.expr_ident(span, val, val_id);\n+            let let_kind = hir::ExprKind::Let(self.lower_pat(&local.pat), scrutinee, span);\n+            self.arena.alloc(self.expr(span, let_kind, AttrVec::new()))\n+        };\n+        let then_expr = {\n+            let (stmts, expr) = self.lower_stmts(tail);\n+            let block = self.block_all(span, stmts, expr);\n+            self.arena.alloc(self.expr_block(block, AttrVec::new()))\n+        };\n+        let else_expr = {\n+            let block = self.lower_block(els, false);\n+            self.arena.alloc(self.expr_block(block, AttrVec::new()))\n+        };\n+        self.alias_attrs(else_expr.hir_id, local_hir_id);\n+        let if_expr = self.arena.alloc(hir::Expr {\n+            hir_id: self.next_id(),\n+            span,\n+            kind: hir::ExprKind::If(let_expr, then_expr, Some(else_expr)),\n+        });\n+        (stmt, if_expr)\n+    }\n }"}, {"sha": "c22093c5a428811ac78241029325969330873b41", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae32e88909350c631a26b3a37a9f07dd9656dba8/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae32e88909350c631a26b3a37a9f07dd9656dba8/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=ae32e88909350c631a26b3a37a9f07dd9656dba8", "patch": "@@ -1097,6 +1097,7 @@ pub enum DesugaringKind {\n     Async,\n     Await,\n     ForLoop(ForLoopLoc),\n+    LetElse,\n }\n \n /// A location in the desugaring of a `for` loop\n@@ -1117,6 +1118,7 @@ impl DesugaringKind {\n             DesugaringKind::TryBlock => \"`try` block\",\n             DesugaringKind::OpaqueTy => \"`impl Trait`\",\n             DesugaringKind::ForLoop(_) => \"`for` loop\",\n+            DesugaringKind::LetElse => \"`let...else`\",\n         }\n     }\n }"}]}