{"sha": "ea3535cefcbf704d7f553d8fb759e7520e0cddc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMzUzNWNlZmNiZjcwNGQ3ZjU1M2Q4ZmI3NTllNzUyMGUwY2RkYzg=", "commit": {"author": {"name": "zhoufan", "email": "1247714429@qq.com", "date": "2021-09-16T01:44:22Z"}, "committer": {"name": "zhoufan", "email": "1247714429@qq.com", "date": "2021-09-16T01:44:22Z"}, "message": "fix: multi-token mapping aware goto definition", "tree": {"sha": "b5523089a68d428a26c18183e30bb4c24251770b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5523089a68d428a26c18183e30bb4c24251770b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea3535cefcbf704d7f553d8fb759e7520e0cddc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3535cefcbf704d7f553d8fb759e7520e0cddc8", "html_url": "https://github.com/rust-lang/rust/commit/ea3535cefcbf704d7f553d8fb759e7520e0cddc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea3535cefcbf704d7f553d8fb759e7520e0cddc8/comments", "author": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "959c7ef563aaff19aef374cf9a31c77af9c3271a", "url": "https://api.github.com/repos/rust-lang/rust/commits/959c7ef563aaff19aef374cf9a31c77af9c3271a", "html_url": "https://github.com/rust-lang/rust/commit/959c7ef563aaff19aef374cf9a31c77af9c3271a"}], "stats": {"total": 95, "additions": 56, "deletions": 39}, "files": [{"sha": "986ef4cf9b3e579345e9403f6df7bf9122f56154", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 56, "deletions": 39, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/ea3535cefcbf704d7f553d8fb759e7520e0cddc8/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3535cefcbf704d7f553d8fb759e7520e0cddc8/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=ea3535cefcbf704d7f553d8fb759e7520e0cddc8", "patch": "@@ -39,48 +39,65 @@ pub(crate) fn goto_definition(\n             kind if kind.is_trivia() => 0,\n             _ => 1,\n         })?;\n-    let token = sema.descend_into_macros(original_token.clone());\n-    let parent = token.parent()?;\n-    if let Some(_) = ast::Comment::cast(token.clone()) {\n-        let (attributes, def) = doc_attributes(&sema, &parent)?;\n-        let (docs, doc_mapping) = attributes.docs_with_rangemap(db)?;\n-        let (_, link, ns) =\n-            extract_definitions_from_docs(&docs).into_iter().find(|&(range, ..)| {\n-                doc_mapping.map(range).map_or(false, |InFile { file_id, value: range }| {\n-                    file_id == position.file_id.into() && range.contains(position.offset)\n-                })\n-            })?;\n-        let nav = resolve_doc_path_for_def(db, def, &link, ns)?.try_to_nav(db)?;\n-        return Some(RangeInfo::new(original_token.text_range(), vec![nav]));\n-    }\n-\n-    let navs = match_ast! {\n-        match parent {\n-            ast::NameRef(name_ref) => {\n-                reference_definition(&sema, Either::Right(&name_ref))\n-            },\n-            ast::Name(name) => {\n-                match NameClass::classify(&sema, &name)? {\n-                    NameClass::Definition(def) | NameClass::ConstReference(def) => {\n-                        try_find_trait_item_definition(sema.db, &def).unwrap_or_else(|| def_to_nav(sema.db, def))\n-                    }\n-                    NameClass::PatFieldShorthand { local_def, field_ref } => {\n-                        local_and_field_to_nav(sema.db, local_def, field_ref)\n+    let tokens = sema.descend_into_macros_many(original_token.clone());\n+    let navs = tokens\n+        .clone()\n+        .into_iter()\n+        .filter_map(|token| {\n+            let parent = token.parent()?;\n+            if let Some(_) = ast::Comment::cast(token.clone()) {\n+                let (attributes, def) = doc_attributes(&sema, &parent)?;\n+                let (docs, doc_mapping) = attributes.docs_with_rangemap(db)?;\n+                let (_, link, ns) =\n+                    extract_definitions_from_docs(&docs).into_iter().find(|&(range, ..)| {\n+                        doc_mapping.map(range).map_or(false, |InFile { file_id, value: range }| {\n+                            file_id == position.file_id.into() && range.contains(position.offset)\n+                        })\n+                    })?;\n+                let nav = resolve_doc_path_for_def(db, def, &link, ns)?.try_to_nav(db)?;\n+                return Some(nav);\n+            }\n+            None\n+        })\n+        .collect::<Vec<NavigationTarget>>();\n+    if navs.len() > 0 {\n+        return Some(RangeInfo::new(original_token.text_range(), navs));\n+    }\n+    let navs = tokens\n+        .into_iter()\n+        .filter_map(|token| {\n+            let parent = token.parent()?;\n+            let navs = match_ast! {\n+                match parent {\n+                    ast::NameRef(name_ref) => {\n+                        reference_definition(&sema, Either::Right(&name_ref))\n                     },\n-                }\n-            },\n-            ast::Lifetime(lt) => if let Some(name_class) = NameClass::classify_lifetime(&sema, &lt) {\n-                match name_class {\n-                    NameClass::Definition(def) => def_to_nav(sema.db, def),\n+                    ast::Name(name) => {\n+                        match NameClass::classify(&sema, &name)? {\n+                            NameClass::Definition(def) | NameClass::ConstReference(def) => {\n+                                try_find_trait_item_definition(sema.db, &def).unwrap_or_else(|| def_to_nav(sema.db, def))\n+                            }\n+                            NameClass::PatFieldShorthand { local_def, field_ref } => {\n+                                local_and_field_to_nav(sema.db, local_def, field_ref)\n+                            },\n+                        }\n+                    },\n+                    ast::Lifetime(lt) => if let Some(name_class) = NameClass::classify_lifetime(&sema, &lt) {\n+                        match name_class {\n+                            NameClass::Definition(def) => def_to_nav(sema.db, def),\n+                            _ => return None,\n+                        }\n+                    } else {\n+                        reference_definition(&sema, Either::Left(&lt))\n+                    },\n+                    ast::TokenTree(tt) => try_lookup_include_path_or_derive(&sema, tt, token, position.file_id)?,\n                     _ => return None,\n                 }\n-            } else {\n-                reference_definition(&sema, Either::Left(&lt))\n-            },\n-            ast::TokenTree(tt) => try_lookup_include_path_or_derive(&sema, tt, token, position.file_id)?,\n-            _ => return None,\n-        }\n-    };\n+            };\n+            Some(navs)\n+        })\n+        .flatten()\n+        .collect::<Vec<NavigationTarget>>();\n \n     Some(RangeInfo::new(original_token.text_range(), navs))\n }"}]}