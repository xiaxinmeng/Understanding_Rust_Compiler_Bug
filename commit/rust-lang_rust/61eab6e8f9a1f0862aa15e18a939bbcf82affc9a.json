{"sha": "61eab6e8f9a1f0862aa15e18a939bbcf82affc9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZWFiNmU4ZjlhMWYwODYyYWExNWUxOGE5MzliYmNmODJhZmZjOWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-29T01:18:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-29T01:18:35Z"}, "message": "Auto merge of #5853 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? @ghost\n\nchangelog: none", "tree": {"sha": "b3e2856b3508dec154d22990ade7ad9e0b8e71ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3e2856b3508dec154d22990ade7ad9e0b8e71ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61eab6e8f9a1f0862aa15e18a939bbcf82affc9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61eab6e8f9a1f0862aa15e18a939bbcf82affc9a", "html_url": "https://github.com/rust-lang/rust/commit/61eab6e8f9a1f0862aa15e18a939bbcf82affc9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61eab6e8f9a1f0862aa15e18a939bbcf82affc9a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3e9db71c940e6a4575555a2b600ccb8a540facb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e9db71c940e6a4575555a2b600ccb8a540facb", "html_url": "https://github.com/rust-lang/rust/commit/d3e9db71c940e6a4575555a2b600ccb8a540facb"}, {"sha": "04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b", "html_url": "https://github.com/rust-lang/rust/commit/04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b"}], "stats": {"total": 51, "additions": 22, "deletions": 29}, "files": [{"sha": "0fdb5b8c2a48e9a6217c96f58dec7808be398e1b", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/61eab6e8f9a1f0862aa15e18a939bbcf82affc9a/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61eab6e8f9a1f0862aa15e18a939bbcf82affc9a/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=61eab6e8f9a1f0862aa15e18a939bbcf82affc9a", "patch": "@@ -3,7 +3,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{Opaque, PredicateKind::Trait, ToPolyTraitRef};\n+use rustc_middle::ty::{Opaque, PredicateAtom::Trait};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::InferCtxtExt;\n@@ -91,12 +91,11 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n                                     infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n-                                    if let Trait(trait_pred, _) = obligation.predicate.kind() {\n-                                        let trait_ref = trait_pred.to_poly_trait_ref();\n-                                        db.note(&*format!(\n+                                    if let Trait(trait_pred, _) = obligation.predicate.skip_binders() {\n+                                        db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\",\n-                                            trait_ref.skip_binder().self_ty(),\n-                                            trait_ref.print_only_trait_path(),\n+                                            trait_pred.self_ty(),\n+                                            trait_pred.trait_ref.print_only_trait_path(),\n                                         ));\n                                     }\n                                 }"}, {"sha": "2c70183d87666d7aa0ac5ea93fc94d4406c7579d", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/61eab6e8f9a1f0862aa15e18a939bbcf82affc9a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61eab6e8f9a1f0862aa15e18a939bbcf82affc9a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=61eab6e8f9a1f0862aa15e18a939bbcf82affc9a", "patch": "@@ -1558,13 +1558,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             // if return type is impl trait, check the associated types\n             if let ty::Opaque(def_id, _) = ret_ty.kind {\n                 // one of the associated types must be Self\n-                for predicate in cx.tcx.predicates_of(def_id).predicates {\n-                    if let ty::PredicateKind::Projection(poly_projection_predicate) = predicate.0.kind() {\n-                        let binder = poly_projection_predicate.ty();\n-                        let associated_type = binder.skip_binder();\n-\n+                for &(predicate, _span) in cx.tcx.predicates_of(def_id).predicates {\n+                    if let ty::PredicateAtom::Projection(projection_predicate) = predicate.skip_binders() {\n                         // walk the associated type and check for Self\n-                        if contains_self_ty(associated_type) {\n+                        if contains_self_ty(projection_predicate.ty) {\n                             return;\n                         }\n                     }"}, {"sha": "8263f5eda330f9dd00d61b46f8c0ba3ba8e77a63", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/61eab6e8f9a1f0862aa15e18a939bbcf82affc9a/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61eab6e8f9a1f0862aa15e18a939bbcf82affc9a/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=61eab6e8f9a1f0862aa15e18a939bbcf82affc9a", "patch": "@@ -113,12 +113,12 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds().iter())\n             .filter(|p| !p.is_global())\n             .filter_map(|obligation| {\n-                if let ty::PredicateKind::Trait(poly_trait_ref, _) = obligation.predicate.kind() {\n-                    if poly_trait_ref.def_id() == sized_trait || poly_trait_ref.skip_binder().has_escaping_bound_vars()\n-                    {\n+                // Note that we do not want to deal with qualified predicates here.\n+                if let ty::PredicateKind::Atom(ty::PredicateAtom::Trait(pred, _)) = obligation.predicate.kind() {\n+                    if pred.def_id() == sized_trait {\n                         return None;\n                     }\n-                    Some(poly_trait_ref)\n+                    Some(pred)\n                 } else {\n                     None\n                 }\n@@ -163,18 +163,15 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             // * Exclude a type whose reference also fulfills its bound. (e.g., `std::convert::AsRef`,\n             //   `serde::Serialize`)\n             let (implements_borrow_trait, all_borrowable_trait) = {\n-                let preds = preds\n-                    .iter()\n-                    .filter(|t| t.skip_binder().self_ty() == ty)\n-                    .collect::<Vec<_>>();\n+                let preds = preds.iter().filter(|t| t.self_ty() == ty).collect::<Vec<_>>();\n \n                 (\n                     preds.iter().any(|t| t.def_id() == borrow_trait),\n                     !preds.is_empty() && {\n                         let ty_empty_region = cx.tcx.mk_imm_ref(cx.tcx.lifetimes.re_root_empty, ty);\n                         preds.iter().all(|t| {\n-                            let ty_params = &t.skip_binder().trait_ref.substs.iter().skip(1).collect::<Vec<_>>();\n-                            implements_trait(cx, ty_empty_region, t.def_id(), ty_params)\n+                            let ty_params = t.trait_ref.substs.iter().skip(1).collect::<Vec<_>>();\n+                            implements_trait(cx, ty_empty_region, t.def_id(), &ty_params)\n                         })\n                     },\n                 )"}, {"sha": "679aaec9fcd6c4402da0ea5ddff7756f950b4c52", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61eab6e8f9a1f0862aa15e18a939bbcf82affc9a/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61eab6e8f9a1f0862aa15e18a939bbcf82affc9a/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=61eab6e8f9a1f0862aa15e18a939bbcf82affc9a", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{Expr, ExprKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n-use rustc_middle::ty::{GenericPredicates, PredicateKind, ProjectionPredicate, TraitPredicate};\n+use rustc_middle::ty::{GenericPredicates, PredicateAtom, ProjectionPredicate, TraitPredicate};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{BytePos, Span};\n \n@@ -42,8 +42,8 @@ fn get_trait_predicates_for_trait_id<'tcx>(\n     let mut preds = Vec::new();\n     for (pred, _) in generics.predicates {\n         if_chain! {\n-            if let PredicateKind::Trait(poly_trait_pred, _) = pred.kind();\n-            let trait_pred = cx.tcx.erase_late_bound_regions(&poly_trait_pred);\n+            if let PredicateAtom::Trait(poly_trait_pred, _) = pred.skip_binders();\n+            let trait_pred = cx.tcx.erase_late_bound_regions(&ty::Binder::bind(poly_trait_pred));\n             if let Some(trait_def_id) = trait_id;\n             if trait_def_id == trait_pred.trait_ref.def_id;\n             then {\n@@ -60,8 +60,8 @@ fn get_projection_pred<'tcx>(\n     pred: TraitPredicate<'tcx>,\n ) -> Option<ProjectionPredicate<'tcx>> {\n     generics.predicates.iter().find_map(|(proj_pred, _)| {\n-        if let PredicateKind::Projection(proj_pred) = proj_pred.kind() {\n-            let projection_pred = cx.tcx.erase_late_bound_regions(proj_pred);\n+        if let ty::PredicateAtom::Projection(proj_pred) = proj_pred.skip_binders() {\n+            let projection_pred = cx.tcx.erase_late_bound_regions(&ty::Binder::bind(proj_pred));\n             if projection_pred.projection_ty.substs == pred.trait_ref.substs {\n                 return Some(projection_pred);\n             }"}, {"sha": "655b1133cf74f14430d2a2a3415a70a53cfde184", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61eab6e8f9a1f0862aa15e18a939bbcf82affc9a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61eab6e8f9a1f0862aa15e18a939bbcf82affc9a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=61eab6e8f9a1f0862aa15e18a939bbcf82affc9a", "patch": "@@ -1263,8 +1263,8 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         ty::Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Opaque(ref def_id, _) => {\n             for (predicate, _) in cx.tcx.predicates_of(*def_id).predicates {\n-                if let ty::PredicateKind::Trait(ref poly_trait_predicate, _) = predicate.kind() {\n-                    if must_use_attr(&cx.tcx.get_attrs(poly_trait_predicate.skip_binder().trait_ref.def_id)).is_some() {\n+                if let ty::PredicateAtom::Trait(trait_predicate, _) = predicate.skip_binders() {\n+                    if must_use_attr(&cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some() {\n                         return true;\n                     }\n                 }"}]}