{"sha": "3b974813871a4dee6cac3128a4e3fa5e81125464", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiOTc0ODEzODcxYTRkZWU2Y2FjMzEyOGE0ZTNmYTVlODExMjU0NjQ=", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-09-09T22:12:47Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-09-09T22:20:05Z"}, "message": "Fix assertion failures in `OwnedHandle` with `windows_subsystem`.\n\nAs discussed in #88576, raw handle values in Windows can be null, such\nas in `windows_subsystem` mode, or when consoles are detached from a\nprocess. So, don't use `NonNull` to hold them, don't assert that they're\nnot null, and remove `OwnedHandle`'s `repr(transparent)`. Introduce a\nnew `HandleOrNull` type, similar to `HandleOrInvalid`, to cover the FFI\nuse case.", "tree": {"sha": "1f3f8cdba2f3596734f1aec79c20a4e493ddbfb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f3f8cdba2f3596734f1aec79c20a4e493ddbfb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b974813871a4dee6cac3128a4e3fa5e81125464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b974813871a4dee6cac3128a4e3fa5e81125464", "html_url": "https://github.com/rust-lang/rust/commit/3b974813871a4dee6cac3128a4e3fa5e81125464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b974813871a4dee6cac3128a4e3fa5e81125464/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497ee321af3b8496eaccd7af7b437f18bab81abf", "url": "https://api.github.com/repos/rust-lang/rust/commits/497ee321af3b8496eaccd7af7b437f18bab81abf", "html_url": "https://github.com/rust-lang/rust/commit/497ee321af3b8496eaccd7af7b437f18bab81abf"}], "stats": {"total": 112, "additions": 72, "deletions": 40}, "files": [{"sha": "63e332b68096c9fed57a89c88fec0850cee14792", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 72, "deletions": 40, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/3b974813871a4dee6cac3128a4e3fa5e81125464/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b974813871a4dee6cac3128a4e3fa5e81125464/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=3b974813871a4dee6cac3128a4e3fa5e81125464", "patch": "@@ -9,7 +9,6 @@ use crate::fmt;\n use crate::fs;\n use crate::marker::PhantomData;\n use crate::mem::forget;\n-use crate::ptr::NonNull;\n use crate::sys::c;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n@@ -20,32 +19,32 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n ///\n /// This uses `repr(transparent)` and has the representation of a host handle,\n /// so it can be used in FFI in places where a handle is passed as an argument,\n-/// it is not captured or consumed, and it is never null.\n+/// it is not captured or consumed.\n ///\n /// Note that it *may* have the value `INVALID_HANDLE_VALUE` (-1), which is\n /// sometimes a valid handle value. See [here] for the full story.\n ///\n+/// And, it *may* have the value `NULL` (0), which can occur when consoles are\n+/// detached from processes, or when `windows_subsystem` is used.\n+///\n /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n #[derive(Copy, Clone)]\n #[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct BorrowedHandle<'handle> {\n-    handle: NonNull<c_void>,\n+    handle: RawHandle,\n     _phantom: PhantomData<&'handle OwnedHandle>,\n }\n \n /// An owned handle.\n ///\n /// This closes the handle on drop.\n ///\n-/// This uses `repr(transparent)` and has the representation of a host handle,\n-/// so it can be used in FFI in places where a handle is passed as a consumed\n-/// argument or returned as an owned value, and is never null.\n-///\n /// Note that it *may* have the value `INVALID_HANDLE_VALUE` (-1), which is\n-/// sometimes a valid handle value. See [here] for the full story. For APIs\n-/// like `CreateFileW` which report errors with `INVALID_HANDLE_VALUE` instead\n-/// of null, use [`HandleOrInvalid`] instead of `Option<OwnedHandle>`.\n+/// sometimes a valid handle value. See [here] for the full story.\n+///\n+/// And, it *may* have the value `NULL` (0), which can occur when consoles are\n+/// detached from processes, or when `windows_subsystem` is used.\n ///\n /// `OwnedHandle` uses [`CloseHandle`] to close its handle on drop. As such,\n /// it must not be used with handles to open registry keys which need to be\n@@ -55,12 +54,27 @@ pub struct BorrowedHandle<'handle> {\n /// [`RegCloseKey`]: https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regclosekey\n ///\n /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n-#[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct OwnedHandle {\n-    handle: NonNull<c_void>,\n+    handle: RawHandle,\n }\n \n+/// FFI type for handles in return values or out parameters, where `NULL` is used\n+/// as a sentry value to indicate errors, such as in the return value of `CreateThread`. This uses\n+/// `repr(transparent)` and has the representation of a host handle, so that it can be used in such\n+/// FFI declarations.\n+///\n+/// The only thing you can usefully do with a `HandleOrNull` is to convert it into an\n+/// `OwnedHandle` using its [`TryFrom`] implementation; this conversion takes care of the check for\n+/// `NULL`. This ensures that such FFI calls cannot start using the handle without\n+/// checking for `NULL` first.\n+///\n+/// If this holds a valid handle, it will close the handle on drop.\n+#[repr(transparent)]\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[derive(Debug)]\n+pub struct HandleOrNull(OwnedHandle);\n+\n /// FFI type for handles in return values or out parameters, where `INVALID_HANDLE_VALUE` is used\n /// as a sentry value to indicate errors, such as in the return value of `CreateFileW`. This uses\n /// `repr(transparent)` and has the representation of a host handle, so that it can be used in such\n@@ -75,17 +89,19 @@ pub struct OwnedHandle {\n #[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n #[derive(Debug)]\n-pub struct HandleOrInvalid(Option<OwnedHandle>);\n+pub struct HandleOrInvalid(OwnedHandle);\n \n // The Windows [`HANDLE`] type may be transferred across and shared between\n // thread boundaries (despite containing a `*mut void`, which in general isn't\n // `Send` or `Sync`).\n //\n // [`HANDLE`]: std::os::windows::raw::HANDLE\n unsafe impl Send for OwnedHandle {}\n+unsafe impl Send for HandleOrNull {}\n unsafe impl Send for HandleOrInvalid {}\n unsafe impl Send for BorrowedHandle<'_> {}\n unsafe impl Sync for OwnedHandle {}\n+unsafe impl Sync for HandleOrNull {}\n unsafe impl Sync for HandleOrInvalid {}\n unsafe impl Sync for BorrowedHandle<'_> {}\n \n@@ -95,18 +111,29 @@ impl BorrowedHandle<'_> {\n     /// # Safety\n     ///\n     /// The resource pointed to by `handle` must be a valid open handle, it\n-    /// must remain open for the duration of the returned `BorrowedHandle`, and\n-    /// it must not be null.\n+    /// must remain open for the duration of the returned `BorrowedHandle`.\n     ///\n     /// Note that it *may* have the value `INVALID_HANDLE_VALUE` (-1), which is\n     /// sometimes a valid handle value. See [here] for the full story.\n     ///\n+    /// And, it *may* have the value `NULL` (0), which can occur when consoles are\n+    /// detached from processes, or when `windows_subsystem` is used.\n+    ///\n     /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]\n     #[unstable(feature = \"io_safety\", issue = \"87074\")]\n     pub unsafe fn borrow_raw_handle(handle: RawHandle) -> Self {\n-        assert!(!handle.is_null());\n-        Self { handle: NonNull::new_unchecked(handle), _phantom: PhantomData }\n+        Self { handle, _phantom: PhantomData }\n+    }\n+}\n+\n+impl TryFrom<HandleOrNull> for OwnedHandle {\n+    type Error = ();\n+\n+    #[inline]\n+    fn try_from(handle_or_null: HandleOrNull) -> Result<Self, ()> {\n+        let owned_handle = handle_or_null.0;\n+        if owned_handle.handle.as_ptr().is_null() { Err(()) } else { Ok(owned_handle) }\n     }\n }\n \n@@ -115,18 +142,7 @@ impl TryFrom<HandleOrInvalid> for OwnedHandle {\n \n     #[inline]\n     fn try_from(handle_or_invalid: HandleOrInvalid) -> Result<Self, ()> {\n-        // In theory, we ought to be able to assume that the pointer here is\n-        // never null, use `OwnedHandle` rather than `Option<OwnedHandle>`, and\n-        // obviate the the panic path here.  Unfortunately, Win32 documentation\n-        // doesn't explicitly guarantee this anywhere.\n-        //\n-        // APIs like [`CreateFileW`] itself have `HANDLE` arguments where a\n-        // null handle indicates an absent value, which wouldn't work if null\n-        // were a valid handle value, so it seems very unlikely that it could\n-        // ever return null. But who knows?\n-        //\n-        // [`CreateFileW`]: https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilew\n-        let owned_handle = handle_or_invalid.0.expect(\"A `HandleOrInvalid` was null!\");\n+        let owned_handle = handle_or_invalid.0;\n         if owned_handle.handle.as_ptr() == c::INVALID_HANDLE_VALUE {\n             Err(())\n         } else {\n@@ -161,9 +177,6 @@ impl IntoRawHandle for OwnedHandle {\n impl FromRawHandle for OwnedHandle {\n     /// Constructs a new instance of `Self` from the given raw handle.\n     ///\n-    /// Use `HandleOrInvalid` instead of `Option<OwnedHandle>` for APIs that\n-    /// use `INVALID_HANDLE_VALUE` to indicate failure.\n-    ///\n     /// # Safety\n     ///\n     /// The resource pointed to by `handle` must be open and suitable for\n@@ -180,8 +193,28 @@ impl FromRawHandle for OwnedHandle {\n     /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]\n     unsafe fn from_raw_handle(handle: RawHandle) -> Self {\n-        assert!(!handle.is_null());\n-        Self { handle: NonNull::new_unchecked(handle) }\n+        Self { handle }\n+    }\n+}\n+\n+impl FromRawHandle for HandleOrNull {\n+    /// Constructs a new instance of `Self` from the given `RawHandle` returned\n+    /// from a Windows API that uses null to indicate failure, such as\n+    /// `CreateThread`.\n+    ///\n+    /// Use `HandleOrInvalid` instead of `HandleOrNull` for APIs that\n+    /// use `INVALID_HANDLE_VALUE` to indicate failure.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The resource pointed to by `handle` must be either open and otherwise\n+    /// unowned, or null. Note that not all Windows APIs use null for errors;\n+    /// see [here] for the full story.\n+    ///\n+    /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n+    #[inline]\n+    unsafe fn from_raw_handle(handle: RawHandle) -> Self {\n+        Self(OwnedHandle::from_raw_handle(handle))\n     }\n }\n \n@@ -190,21 +223,20 @@ impl FromRawHandle for HandleOrInvalid {\n     /// from a Windows API that uses `INVALID_HANDLE_VALUE` to indicate\n     /// failure, such as `CreateFileW`.\n     ///\n-    /// Use `Option<OwnedHandle>` instead of `HandleOrInvalid` for APIs that\n+    /// Use `HandleOrNull` instead of `HandleOrInvalid` for APIs that\n     /// use null to indicate failure.\n     ///\n     /// # Safety\n     ///\n     /// The resource pointed to by `handle` must be either open and otherwise\n-    /// unowned, or equal to `INVALID_HANDLE_VALUE` (-1). It must not be null.\n-    /// Note that not all Windows APIs use `INVALID_HANDLE_VALUE` for errors;\n-    /// see [here] for the full story.\n+    /// unowned, null, or equal to `INVALID_HANDLE_VALUE` (-1). Note that not\n+    /// all Windows APIs use `INVALID_HANDLE_VALUE` for errors; see [here] for\n+    /// the full story.\n     ///\n     /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]\n     unsafe fn from_raw_handle(handle: RawHandle) -> Self {\n-        // We require non-null here to catch errors earlier.\n-        Self(Some(OwnedHandle::from_raw_handle(handle)))\n+        Self(OwnedHandle::from_raw_handle(handle))\n     }\n }\n "}]}