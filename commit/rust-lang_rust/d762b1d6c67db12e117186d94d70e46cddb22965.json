{"sha": "d762b1d6c67db12e117186d94d70e46cddb22965", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NjJiMWQ2YzY3ZGIxMmUxMTcxODZkOTRkNzBlNDZjZGRiMjI5NjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-04T18:07:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-04T18:07:07Z"}, "message": "Auto merge of #45394 - davidtwco:rfc-2008, r=petrochenkov\n\nRFC 2008: Future-proofing enums/structs with #[non_exhaustive] attribute\n\nThis work-in-progress pull request contains my changes to implement [RFC 2008](https://github.com/rust-lang/rfcs/pull/2008). The related tracking issue is #44109.\n\nAs of writing, enum-related functionality is not included and there are some issues related to tuple/unit structs. Enum related tests are currently ignored.\n\nWIP PR requested by @nikomatsakis [in Gitter](https://gitter.im/rust-impl-period/WG-compiler-middle?at=59e90e6297cedeb0482ade3e).", "tree": {"sha": "cbb52929585ad9ea4e52a9dde6e9170375ccf04a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbb52929585ad9ea4e52a9dde6e9170375ccf04a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d762b1d6c67db12e117186d94d70e46cddb22965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d762b1d6c67db12e117186d94d70e46cddb22965", "html_url": "https://github.com/rust-lang/rust/commit/d762b1d6c67db12e117186d94d70e46cddb22965", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d762b1d6c67db12e117186d94d70e46cddb22965/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98e4b6845f111d297fa2bff759b6f15855280161", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e4b6845f111d297fa2bff759b6f15855280161", "html_url": "https://github.com/rust-lang/rust/commit/98e4b6845f111d297fa2bff759b6f15855280161"}, {"sha": "86c62d02eebb037faf7c0752a9c472181e5608cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/86c62d02eebb037faf7c0752a9c472181e5608cb", "html_url": "https://github.com/rust-lang/rust/commit/86c62d02eebb037faf7c0752a9c472181e5608cb"}], "stats": {"total": 778, "additions": 769, "deletions": 9}, "files": [{"sha": "f9840e1b83f2be4b84d2a7cb7883db89f2e81fce", "filename": "src/doc/unstable-book/src/language-features/non-exhaustive.md", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-exhaustive.md", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-exhaustive.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-exhaustive.md?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,75 @@\n+# `non_exhaustive`\n+\n+The tracking issue for this feature is: [#44109]\n+\n+[#44109]: https://github.com/rust-lang/rust/issues/44109\n+\n+------------------------\n+\n+The `non_exhaustive` gate allows you to use the `#[non_exhaustive]` attribute\n+on structs and enums. When applied within a crate, users of the crate will need\n+to use the `_` pattern when matching enums and use the `..` pattern when\n+matching structs. Structs marked as `non_exhaustive` will not be able to be\n+created normally outside of the defining crate. This is demonstrated below:\n+\n+```rust,ignore (pseudo-Rust)\n+use std::error::Error as StdError;\n+\n+#[non_exhaustive]\n+pub enum Error {\n+    Message(String),\n+    Other,\n+}\n+impl StdError for Error {\n+    fn description(&self) -> &str {\n+        // This will not error, despite being marked as non_exhaustive, as this\n+        // enum is defined within the current crate, it can be matched\n+        // exhaustively.\n+        match *self {\n+            Message(ref s) => s,\n+            Other => \"other or unknown error\",\n+        }\n+    }\n+}\n+```\n+\n+```rust,ignore (pseudo-Rust)\n+use mycrate::Error;\n+\n+// This will not error as the non_exhaustive Error enum has been matched with\n+// a wildcard.\n+match error {\n+    Message(ref s) => ...,\n+    Other => ...,\n+    _ => ...,\n+}\n+```\n+\n+```rust,ignore (pseudo-Rust)\n+#[non_exhaustive]\n+pub struct Config {\n+    pub window_width: u16,\n+    pub window_height: u16,\n+}\n+\n+// We can create structs as normal within the defining crate when marked as\n+// non_exhaustive.\n+let config = Config { window_width: 640, window_height: 480 };\n+\n+// We can match structs exhaustively when within the defining crate.\n+if let Ok(Config { window_width, window_height }) = load_config() {\n+    // ...\n+}\n+```\n+\n+```rust,ignore (pseudo-Rust)\n+use mycrate::Config;\n+\n+// We cannot create a struct like normal if it has been marked as\n+// non_exhaustive.\n+let config = Config { window_width: 640, window_height: 480 };\n+// By adding the `..` we can match the config as below outside of the crate\n+// when marked non_exhaustive.\n+let &Config { window_width, window_height, .. } = config;\n+```\n+"}, {"sha": "0deababd21829d5fd045e794351f67983a8ec679", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -1326,6 +1326,12 @@ bitflags! {\n         const IS_FUNDAMENTAL      = 1 << 2;\n         const IS_UNION            = 1 << 3;\n         const IS_BOX              = 1 << 4;\n+        /// Indicates whether this abstract data type will be expanded on in future (new\n+        /// fields/variants) and as such, whether downstream crates must match exhaustively on the\n+        /// fields/variants of this data type.\n+        ///\n+        /// See RFC 2008 (https://github.com/rust-lang/rfcs/pull/2008).\n+        const IS_NON_EXHAUSTIVE   = 1 << 5;\n     }\n }\n \n@@ -1526,6 +1532,9 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         if Some(did) == tcx.lang_items().owned_box() {\n             flags = flags | AdtFlags::IS_BOX;\n         }\n+        if tcx.has_attr(did, \"non_exhaustive\") {\n+            flags = flags | AdtFlags::IS_NON_EXHAUSTIVE;\n+        }\n         match kind {\n             AdtKind::Enum => flags = flags | AdtFlags::IS_ENUM,\n             AdtKind::Union => flags = flags | AdtFlags::IS_UNION,\n@@ -1554,6 +1563,11 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         self.flags.intersects(AdtFlags::IS_ENUM)\n     }\n \n+    #[inline]\n+    pub fn is_non_exhaustive(&self) -> bool {\n+        self.flags.intersects(AdtFlags::IS_NON_EXHAUSTIVE)\n+    }\n+\n     /// Returns the kind of the ADT - Struct or Enum.\n     #[inline]\n     pub fn adt_kind(&self) -> AdtKind {"}, {"sha": "6ebe3c679667f0a7afffa15811ae4cdbe3359af5", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 69, "deletions": 4, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -208,6 +208,20 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn is_non_exhaustive_enum(&self, ty: Ty<'tcx>) -> bool {\n+        match ty.sty {\n+            ty::TyAdt(adt_def, ..) => adt_def.is_enum() && adt_def.is_non_exhaustive(),\n+            _ => false,\n+        }\n+    }\n+\n+    fn is_local(&self, ty: Ty<'tcx>) -> bool {\n+        match ty.sty {\n+            ty::TyAdt(adt_def, ..) => adt_def.did.is_local(),\n+            _ => false,\n+        }\n+    }\n+\n     fn is_variant_uninhabited(&self,\n                               variant: &'tcx ty::VariantDef,\n                               substs: &'tcx ty::subst::Substs<'tcx>)\n@@ -628,9 +642,16 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n \n         let is_privately_empty =\n             all_ctors.is_empty() && !cx.is_uninhabited(pcx.ty);\n-        debug!(\"missing_ctors={:?} is_privately_empty={:?}\", missing_ctors,\n-               is_privately_empty);\n-        if missing_ctors.is_empty() && !is_privately_empty {\n+        let is_declared_nonexhaustive =\n+            cx.is_non_exhaustive_enum(pcx.ty) && !cx.is_local(pcx.ty);\n+        debug!(\"missing_ctors={:?} is_privately_empty={:?} is_declared_nonexhaustive={:?}\",\n+               missing_ctors, is_privately_empty, is_declared_nonexhaustive);\n+\n+        // For privately empty and non-exhaustive enums, we work as if there were an \"extra\"\n+        // `_` constructor for the type, so we can never match over all constructors.\n+        let is_non_exhaustive = is_privately_empty || is_declared_nonexhaustive;\n+\n+        if missing_ctors.is_empty() && !is_non_exhaustive {\n             all_ctors.into_iter().map(|c| {\n                 is_useful_specialized(cx, matrix, v, c.clone(), pcx.ty, witness)\n             }).find(|result| result.is_useful()).unwrap_or(NotUseful)\n@@ -645,7 +666,51 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n             match is_useful(cx, &matrix, &v[1..], witness) {\n                 UsefulWithWitness(pats) => {\n                     let cx = &*cx;\n-                    let new_witnesses = if used_ctors.is_empty() {\n+                    // In this case, there's at least one \"free\"\n+                    // constructor that is only matched against by\n+                    // wildcard patterns.\n+                    //\n+                    // There are 2 ways we can report a witness here.\n+                    // Commonly, we can report all the \"free\"\n+                    // constructors as witnesses, e.g. if we have:\n+                    //\n+                    // ```\n+                    //     enum Direction { N, S, E, W }\n+                    //     let Direction::N = ...;\n+                    // ```\n+                    //\n+                    // we can report 3 witnesses: `S`, `E`, and `W`.\n+                    //\n+                    // However, there are 2 cases where we don't want\n+                    // to do this and instead report a single `_` witness:\n+                    //\n+                    // 1) If the user is matching against a non-exhaustive\n+                    // enum, there is no point in enumerating all possible\n+                    // variants, because the user can't actually match\n+                    // against them himself, e.g. in an example like:\n+                    // ```\n+                    //     let err: io::ErrorKind = ...;\n+                    //     match err {\n+                    //         io::ErrorKind::NotFound => {},\n+                    //     }\n+                    // ```\n+                    // we don't want to show every possible IO error,\n+                    // but instead have `_` as the witness (this is\n+                    // actually *required* if the user specified *all*\n+                    // IO errors, but is probably what we want in every\n+                    // case).\n+                    //\n+                    // 2) If the user didn't actually specify a constructor\n+                    // in this arm, e.g. in\n+                    // ```\n+                    //     let x: (Direction, Direction, bool) = ...;\n+                    //     let (_, _, false) = x;\n+                    // ```\n+                    // we don't want to show all 16 possible witnesses\n+                    // `(<direction-1>, <direction-2>, true)` - we are\n+                    // satisfied with `(_, _, true)`. In this case,\n+                    // `used_ctors` is empty.\n+                    let new_witnesses = if is_non_exhaustive || used_ctors.is_empty() {\n                         // All constructors are unused. Add wild patterns\n                         // rather than each individual constructor\n                         pats.into_iter().map(|mut witness| {"}, {"sha": "d5eee14bf506bd1889e039a45985b885c63971ab", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -584,7 +584,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n     fn encode_struct_ctor(&mut self, (adt_def_id, def_id): (DefId, DefId)) -> Entry<'tcx> {\n         debug!(\"IsolatedEncoder::encode_struct_ctor({:?})\", def_id);\n         let tcx = self.tcx;\n-        let variant = tcx.adt_def(adt_def_id).struct_variant();\n+        let adt_def = tcx.adt_def(adt_def_id);\n+        let variant = adt_def.struct_variant();\n \n         let data = VariantData {\n             ctor_kind: variant.ctor_kind,\n@@ -606,6 +607,12 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             }\n         }\n \n+        // If the structure is marked as non_exhaustive then lower the visibility\n+        // to within the crate.\n+        if adt_def.is_non_exhaustive() && ctor_vis == ty::Visibility::Public {\n+            ctor_vis = ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));\n+        }\n+\n         let repr_options = get_repr_options(&tcx, adt_def_id);\n \n         Entry {"}, {"sha": "6d9c294884128688364485bd5e63d7908e7ffe51", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -42,6 +42,15 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n+    fn invalid_non_exhaustive_attribute(&self, variant: &Variant) {\n+        let has_non_exhaustive = variant.node.attrs.iter()\n+            .any(|attr| attr.check_name(\"non_exhaustive\"));\n+        if has_non_exhaustive {\n+            self.err_handler().span_err(variant.span,\n+                                        \"#[non_exhaustive] is not yet supported on variants\");\n+        }\n+    }\n+\n     fn invalid_visibility(&self, vis: &Visibility, span: Span, note: Option<&str>) {\n         if vis != &Visibility::Inherited {\n             let mut err = struct_span_err!(self.session,\n@@ -224,6 +233,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             ItemKind::Enum(ref def, _) => {\n                 for variant in &def.variants {\n+                    self.invalid_non_exhaustive_attribute(variant);\n                     for field in variant.node.data.fields() {\n                         self.invalid_visibility(&field.vis, field.span, None);\n                     }"}, {"sha": "630260feed789acc5a11f51f99165a140e0b71f8", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -627,6 +627,16 @@ impl<'a, 'tcx> TypePrivacyVisitor<'a, 'tcx> {\n                                 ctor_vis = field_vis;\n                             }\n                         }\n+\n+                        // If the structure is marked as non_exhaustive then lower the\n+                        // visibility to within the crate.\n+                        let struct_def_id = self.tcx.hir.get_parent_did(node_id);\n+                        let adt_def = self.tcx.adt_def(struct_def_id);\n+                        if adt_def.is_non_exhaustive() && ctor_vis == ty::Visibility::Public {\n+                            ctor_vis = ty::Visibility::Restricted(\n+                                DefId::local(CRATE_DEF_INDEX));\n+                        }\n+\n                         return ctor_vis;\n                     }\n                     node => bug!(\"unexpected node kind: {:?}\", node)"}, {"sha": "a10bce293422645ea01729844bb0c4e9edb3f1bf", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -338,11 +338,22 @@ impl<'a> Resolver<'a> {\n             // These items live in both the type and value namespaces.\n             ItemKind::Struct(ref struct_def, _) => {\n                 // Define a name in the type namespace.\n-                let def = Def::Struct(self.definitions.local_def_id(item.id));\n+                let def_id = self.definitions.local_def_id(item.id);\n+                let def = Def::Struct(def_id);\n                 self.define(parent, ident, TypeNS, (def, vis, sp, expansion));\n \n-                // Record field names for error reporting.\n                 let mut ctor_vis = vis;\n+\n+                let has_non_exhaustive = item.attrs.iter()\n+                    .any(|item| item.check_name(\"non_exhaustive\"));\n+\n+                // If the structure is marked as non_exhaustive then lower the visibility\n+                // to within the crate.\n+                if has_non_exhaustive && vis == ty::Visibility::Public {\n+                    ctor_vis = ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));\n+                }\n+\n+                // Record field names for error reporting.\n                 let field_names = struct_def.fields().iter().filter_map(|field| {\n                     let field_vis = self.resolve_visibility(&field.vis);\n                     if ctor_vis.is_at_least(field_vis, &*self) {\n@@ -414,6 +425,7 @@ impl<'a> Resolver<'a> {\n         // value namespace, they are reserved for possible future use.\n         let ctor_kind = CtorKind::from_ast(&variant.node.data);\n         let ctor_def = Def::VariantCtor(def_id, ctor_kind);\n+\n         self.define(parent, ident, ValueNS, (ctor_def, vis, variant.span, expansion));\n     }\n "}, {"sha": "272f13b28030ebbd86e873283224c8138ea7ff27", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -825,10 +825,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                def_bm: ty::BindingMode) {\n         let tcx = self.tcx;\n \n-        let (substs, kind_name) = match adt_ty.sty {\n-            ty::TyAdt(adt, substs) => (substs, adt.variant_descr()),\n+        let (substs, adt) = match adt_ty.sty {\n+            ty::TyAdt(adt, substs) => (substs, adt),\n             _ => span_bug!(span, \"struct pattern is not an ADT\")\n         };\n+        let kind_name = adt.variant_descr();\n \n         // Index the struct fields' types.\n         let field_map = variant.fields\n@@ -882,6 +883,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.check_pat_walk(&field.pat, field_ty, def_bm, true);\n         }\n \n+        // Require `..` if struct has non_exhaustive attribute.\n+        if adt.is_struct() && adt.is_non_exhaustive() && !adt.did.is_local() && !etc {\n+            span_err!(tcx.sess, span, E0638,\n+                      \"`..` required with {} marked as non-exhaustive\",\n+                      kind_name);\n+        }\n+\n         // Report an error if incorrect number of the fields were specified.\n         if kind_name == \"union\" {\n             if fields.len() != 1 {"}, {"sha": "82d59ecfc92cfabb75bee8413c423ce30fc70d56", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -3448,6 +3448,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             hir::QPath::TypeRelative(ref qself, _) => qself.span\n         };\n \n+        // Prohibit struct expressions when non exhaustive flag is set.\n+        if let ty::TyAdt(adt, _) = struct_ty.sty {\n+            if !adt.did.is_local() && adt.is_non_exhaustive() {\n+                span_err!(self.tcx.sess, expr.span, E0639,\n+                          \"cannot create non-exhaustive {} using struct expression\",\n+                          adt.variant_descr());\n+            }\n+        }\n+\n         self.check_expr_struct_fields(struct_ty, expected, expr.id, path_span, variant, fields,\n                                       base_expr.is_none());\n         if let &Some(ref base_expr) = base_expr {"}, {"sha": "075367cbbb7cdc2130a0eeec101516bb0484a2f6", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -4606,6 +4606,65 @@ foo.method(); // Ok!\n ```\n \"##,\n \n+E0638: r##\"\n+This error indicates that the struct or enum must be matched non-exhaustively\n+as it has been marked as `non_exhaustive`.\n+\n+When applied within a crate, downstream users of the crate will need to use the\n+`_` pattern when matching enums and use the `..` pattern when matching structs.\n+\n+For example, in the below example, since the enum is marked as\n+`non_exhaustive`, it is required that downstream crates match non-exhaustively\n+on it.\n+\n+```rust,ignore (pseudo-Rust)\n+use std::error::Error as StdError;\n+\n+#[non_exhaustive] pub enum Error {\n+   Message(String),\n+   Other,\n+}\n+\n+impl StdError for Error {\n+   fn description(&self) -> &str {\n+        // This will not error, despite being marked as non_exhaustive, as this\n+        // enum is defined within the current crate, it can be matched\n+        // exhaustively.\n+        match *self {\n+           Message(ref s) => s,\n+           Other => \"other or unknown error\",\n+        }\n+   }\n+}\n+```\n+\n+An example of matching non-exhaustively on the above enum is provided below:\n+\n+```rust,ignore (pseudo-Rust)\n+use mycrate::Error;\n+\n+// This will not error as the non_exhaustive Error enum has been matched with a\n+// wildcard.\n+match error {\n+   Message(ref s) => ...,\n+   Other => ...,\n+   _ => ...,\n+}\n+```\n+\n+Similarly, for structs, match with `..` to avoid this error.\n+\"##,\n+\n+E0639: r##\"\n+This error indicates that the struct or enum cannot be instantiated from\n+outside of the defining crate as it has been marked as `non_exhaustive` and as\n+such more fields/variants may be added in future that could cause adverse side\n+effects for this code.\n+\n+It is recommended that you look for a `new` function or equivalent in the\n+crate's documentation.\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "6339600059e29631498a8b9b0e6498648ad63ad6", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -386,6 +386,9 @@ declare_features! (\n     // allow '|' at beginning of match arms (RFC 1925)\n     (active, match_beginning_vert, \"1.21.0\", Some(44101)),\n \n+    // Future-proofing enums/structs with #[non_exhaustive] attribute (RFC 2008)\n+    (active, non_exhaustive, \"1.22.0\", Some(44109)),\n+\n     // Copy/Clone closures (RFC 2132)\n     (active, clone_closures, \"1.22.0\", Some(44490)),\n     (active, copy_closures, \"1.22.0\", Some(44490)),\n@@ -614,6 +617,12 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                              not yet settled\",\n                                             cfg_fn!(structural_match))),\n \n+    // RFC #2008\n+    (\"non_exhaustive\", Whitelisted, Gated(Stability::Unstable,\n+                                          \"non_exhaustive\",\n+                                          \"non exhaustive is an experimental feature\",\n+                                          cfg_fn!(non_exhaustive))),\n+\n     (\"plugin\", CrateLevel, Gated(Stability::Unstable,\n                                  \"plugin\",\n                                  \"compiler plugins are experimental \\"}, {"sha": "d2711084a4d48d06cb24a9c8a1b687a1c57ca42e", "filename": "src/test/compile-fail/feature-gate-non_exhaustive.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Fcompile-fail%2Ffeature-gate-non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Fcompile-fail%2Ffeature-gate-non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-non_exhaustive.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//#![feature(non_exhaustive)]\n+\n+#[non_exhaustive] //~ERROR non exhaustive is an experimental feature (see issue #44109)\n+pub enum NonExhaustiveEnum {\n+    Unit,\n+    Tuple(u32),\n+    Struct { field: u32 }\n+}\n+\n+fn main() { }"}, {"sha": "12d1bf9ea910499d349b56cf5e99b06580c44960", "filename": "src/test/compile-fail/rfc-2008-non-exhaustive/auxiliary/enums.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+pub enum NonExhaustiveEnum {\n+    Unit,\n+    Tuple(u32),\n+    Struct { field: u32 }\n+}"}, {"sha": "4d083cc5315aa5b15d4c6529621da7956e78185b", "filename": "src/test/compile-fail/rfc-2008-non-exhaustive/auxiliary/structs.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+pub struct NormalStruct {\n+    pub first_field: u16,\n+    pub second_field: u16,\n+}\n+\n+#[non_exhaustive]\n+pub struct UnitStruct;\n+\n+#[non_exhaustive]\n+pub struct TupleStruct(pub u16, pub u16);\n+\n+#[derive(Debug)]\n+#[non_exhaustive]\n+pub struct FunctionalRecord {\n+    pub first_field: u16,\n+    pub second_field: u16,\n+    pub third_field: bool\n+}\n+\n+impl Default for FunctionalRecord {\n+    fn default() -> FunctionalRecord {\n+        FunctionalRecord { first_field: 640, second_field: 480, third_field: false }\n+    }\n+}"}, {"sha": "d04c1073ad9b357fc615eaa979a8193abaa18766", "filename": "src/test/compile-fail/rfc-2008-non-exhaustive/auxiliary/variants.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fvariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fvariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fvariants.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+#![feature(non_exhaustive)]\n+\n+pub enum NonExhaustiveVariants {\n+    #[non_exhaustive] Unit,\n+    #[non_exhaustive] Tuple(u32),\n+    #[non_exhaustive] Struct { field: u32 }\n+}"}, {"sha": "0c19210e4a0ed9900fad4f19a19d1943fac247c1", "filename": "src/test/compile-fail/rfc-2008-non-exhaustive/enum.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fenum.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:enums.rs\n+extern crate enums;\n+\n+use enums::NonExhaustiveEnum;\n+\n+fn main() {\n+    let enum_unit = NonExhaustiveEnum::Unit;\n+\n+    match enum_unit {\n+        //~^ ERROR non-exhaustive patterns: `_` not covered [E0004]\n+        NonExhaustiveEnum::Unit => \"first\",\n+        NonExhaustiveEnum::Tuple(_) => \"second\",\n+        NonExhaustiveEnum::Struct { .. } => \"third\"\n+    };\n+}"}, {"sha": "74c9c7c61ace8ac083be9fe01dd4f5e375704f4a", "filename": "src/test/compile-fail/rfc-2008-non-exhaustive/structs.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fstructs.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:structs.rs\n+extern crate structs;\n+\n+use structs::{NormalStruct, UnitStruct, TupleStruct, FunctionalRecord};\n+\n+fn main() {\n+    let fr = FunctionalRecord {\n+    //~^ ERROR cannot create non-exhaustive struct\n+        first_field: 1920,\n+        second_field: 1080,\n+        ..FunctionalRecord::default()\n+    };\n+\n+    let ns = NormalStruct { first_field: 640, second_field: 480 };\n+    //~^ ERROR cannot create non-exhaustive struct\n+\n+    let NormalStruct { first_field, second_field } = ns;\n+    //~^ ERROR `..` required with struct marked as non-exhaustive\n+\n+    let ts = TupleStruct(640, 480);\n+    //~^ ERROR expected function, found struct `TupleStruct` [E0423]\n+\n+    let ts_explicit = structs::TupleStruct(640, 480);\n+    //~^ ERROR tuple struct `TupleStruct` is private [E0603]\n+\n+    let TupleStruct { 0: first_field, 1: second_field } = ts;\n+    //~^ ERROR `..` required with struct marked as non-exhaustive\n+\n+    let us = UnitStruct;\n+    //~^ ERROR expected value, found struct `UnitStruct` [E0423]\n+\n+    let us_explicit = structs::UnitStruct;\n+    //~^ ERROR unit struct `UnitStruct` is private [E0603]\n+\n+    let UnitStruct { } = us;\n+    //~^ ERROR `..` required with struct marked as non-exhaustive\n+}"}, {"sha": "d1b65ac1f3e523225542f16ba6c80c97bcbabe0d", "filename": "src/test/compile-fail/rfc-2008-non-exhaustive/variants.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fvariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fvariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fvariants.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:variants.rs\n+extern crate variants;\n+\n+use variants::NonExhaustiveVariants;\n+\n+/*\n+ * The initial implementation of #[non_exhaustive] (RFC 2008) does not include support for\n+ * variants. See issue #44109 and PR 45394.\n+ */\n+// ignore-test\n+\n+fn main() {\n+    let variant_struct = NonExhaustiveVariants::Struct { field: 640 };\n+    //~^ ERROR cannot create non-exhaustive variant\n+\n+    let variant_tuple = NonExhaustiveVariants::Tuple { 0: 640 };\n+    //~^ ERROR cannot create non-exhaustive variant\n+\n+    match variant_struct {\n+        NonExhaustiveVariants::Unit => \"\",\n+        NonExhaustiveVariants::Tuple(fe_tpl) => \"\",\n+        //~^ ERROR `..` required with variant marked as non-exhaustive\n+        NonExhaustiveVariants::Struct { field } => \"\"\n+        //~^ ERROR `..` required with variant marked as non-exhaustive\n+    };\n+}"}, {"sha": "f4e4b1bb84b8bf2f47da29fb8bc9154850d58790", "filename": "src/test/compile-fail/rfc-2008-non-exhaustive/variants_create.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fvariants_create.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fvariants_create.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Fvariants_create.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(non_exhaustive)]\n+\n+/*\n+ * The initial implementation of #[non_exhaustive] (RFC 2008) does not include support for\n+ * variants. See issue #44109 and PR 45394.\n+ */\n+\n+pub enum NonExhaustiveVariants {\n+    #[non_exhaustive] Unit,\n+    //~^ ERROR #[non_exhaustive] is not yet supported on variants\n+    #[non_exhaustive] Tuple(u32),\n+    //~^ ERROR #[non_exhaustive] is not yet supported on variants\n+    #[non_exhaustive] Struct { field: u32 }\n+    //~^ ERROR #[non_exhaustive] is not yet supported on variants\n+}\n+\n+fn main() { }"}, {"sha": "12d1bf9ea910499d349b56cf5e99b06580c44960", "filename": "src/test/run-pass/rfc-2008-non-exhaustive/auxiliary/enums.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+pub enum NonExhaustiveEnum {\n+    Unit,\n+    Tuple(u32),\n+    Struct { field: u32 }\n+}"}, {"sha": "a2c6f8c05e2c9fc881de2c5838db631baf2196b9", "filename": "src/test/run-pass/rfc-2008-non-exhaustive/auxiliary/structs.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+pub struct NormalStruct {\n+    pub first_field: u16,\n+    pub second_field: u16,\n+}\n+\n+#[non_exhaustive]\n+pub struct UnitStruct;\n+\n+#[non_exhaustive]\n+pub struct TupleStruct (pub u16, pub u16);"}, {"sha": "d04c1073ad9b357fc615eaa979a8193abaa18766", "filename": "src/test/run-pass/rfc-2008-non-exhaustive/auxiliary/variants.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fvariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fvariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fvariants.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+#![feature(non_exhaustive)]\n+\n+pub enum NonExhaustiveVariants {\n+    #[non_exhaustive] Unit,\n+    #[non_exhaustive] Tuple(u32),\n+    #[non_exhaustive] Struct { field: u32 }\n+}"}, {"sha": "9d41eca8fe5d2c742d13985aad8240a4e8167068", "filename": "src/test/run-pass/rfc-2008-non-exhaustive/enums.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fenums.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:enums.rs\n+extern crate enums;\n+\n+// ignore-pretty issue #37199\n+\n+use enums::NonExhaustiveEnum;\n+\n+fn main() {\n+    let enum_unit = NonExhaustiveEnum::Unit;\n+\n+    match enum_unit {\n+        NonExhaustiveEnum::Unit => 1,\n+        NonExhaustiveEnum::Tuple(_) => 2,\n+        // This particular arm tests that a enum marked as non-exhaustive\n+        // will not error if its variants are matched exhaustively.\n+        NonExhaustiveEnum::Struct { field } => field,\n+        _ => 0 // no error with wildcard\n+    };\n+\n+    match enum_unit {\n+        _ => \"no error with only wildcard\"\n+    };\n+}"}, {"sha": "8f1ba364b0e2bd6cc5aa136b536d2a634f783ee4", "filename": "src/test/run-pass/rfc-2008-non-exhaustive/enums_same_crate.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fenums_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fenums_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fenums_same_crate.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+pub enum NonExhaustiveEnum {\n+    Unit,\n+    Tuple(u32),\n+    Struct { field: u32 }\n+}\n+\n+fn main() {\n+    let enum_unit = NonExhaustiveEnum::Unit;\n+\n+    match enum_unit {\n+        NonExhaustiveEnum::Unit => \"first\",\n+        NonExhaustiveEnum::Tuple(_) => \"second\",\n+        NonExhaustiveEnum::Struct { .. } => \"third\",\n+    };\n+}"}, {"sha": "bb65e10da27bf1ebb064c11a6427a466114ac5fe", "filename": "src/test/run-pass/rfc-2008-non-exhaustive/structs.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fstructs.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:structs.rs\n+extern crate structs;\n+\n+use structs::{NormalStruct, UnitStruct, TupleStruct};\n+\n+// We only test matching here as we cannot create non-exhaustive\n+// structs from another crate. ie. they'll never pass in run-pass tests.\n+\n+fn match_structs(ns: NormalStruct, ts: TupleStruct, us: UnitStruct) {\n+    let NormalStruct { first_field, second_field, .. } = ns;\n+\n+    let TupleStruct { 0: first, 1: second, .. } = ts;\n+\n+    let UnitStruct { .. } = us;\n+}\n+\n+fn main() { }"}, {"sha": "175782f10fc91964b89e12b9e8644d1ca12ae18a", "filename": "src/test/run-pass/rfc-2008-non-exhaustive/structs_same_crate.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fstructs_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fstructs_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fstructs_same_crate.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+pub struct NormalStruct {\n+    pub first_field: u16,\n+    pub second_field: u16,\n+}\n+\n+#[non_exhaustive]\n+pub struct UnitStruct;\n+\n+#[non_exhaustive]\n+pub struct TupleStruct (pub u16, pub u16);\n+\n+fn main() {\n+    let ns = NormalStruct { first_field: 640, second_field: 480 };\n+\n+    let NormalStruct { first_field, second_field } = ns;\n+\n+    let ts = TupleStruct { 0: 340, 1: 480 };\n+    let ts_constructor = TupleStruct(340, 480);\n+\n+    let TupleStruct { 0: first, 1: second } = ts;\n+    let TupleStruct(first, second) = ts_constructor;\n+\n+    let us = UnitStruct {};\n+    let us_constructor = UnitStruct;\n+\n+    let UnitStruct { } = us;\n+}"}, {"sha": "2658c59a6998506d7ccbfad47b6ff8ca5df62512", "filename": "src/test/run-pass/rfc-2008-non-exhaustive/variants.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fvariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fvariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fvariants.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:variants.rs\n+extern crate variants;\n+\n+use variants::NonExhaustiveVariants;\n+\n+/*\n+ * The initial implementation of #[non_exhaustive] (RFC 2008) does not include support for\n+ * variants. See issue #44109 and PR 45394.\n+ */\n+// ignore-test\n+\n+fn main() {\n+    let variant_tuple = NonExhaustiveVariants::Tuple { 0: 340 };\n+    let variant_struct = NonExhaustiveVariants::Struct { field: 340 };\n+\n+    match variant_struct {\n+        NonExhaustiveVariants::Unit => \"\",\n+        NonExhaustiveVariants::Struct { field, .. } => \"\",\n+        NonExhaustiveVariants::Tuple(fe_tpl, ..) => \"\"\n+    };\n+}"}, {"sha": "a1c376c17985d3ebe8a7cde85e61c943cae4939f", "filename": "src/test/run-pass/rfc-2008-non-exhaustive/variants_same_crate.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fvariants_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d762b1d6c67db12e117186d94d70e46cddb22965/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fvariants_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2008-non-exhaustive%2Fvariants_same_crate.rs?ref=d762b1d6c67db12e117186d94d70e46cddb22965", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(non_exhaustive)]\n+\n+/*\n+ * The initial implementation of #[non_exhaustive] (RFC 2008) does not include support for\n+ * variants. See issue #44109 and PR 45394.\n+ */\n+// ignore-test\n+\n+pub enum NonExhaustiveVariants {\n+    #[non_exhaustive] Unit,\n+    #[non_exhaustive] Tuple(u32),\n+    #[non_exhaustive] Struct { field: u32 }\n+}\n+\n+fn main() {\n+    let variant_tuple = NonExhaustiveVariants::Tuple(340);\n+    let variant_struct = NonExhaustiveVariants::Struct { field: 340 };\n+\n+    match variant_tuple {\n+        NonExhaustiveVariants::Unit => \"\",\n+        NonExhaustiveVariants::Tuple(fe_tpl) => \"\",\n+        NonExhaustiveVariants::Struct { field } => \"\"\n+    };\n+}"}]}