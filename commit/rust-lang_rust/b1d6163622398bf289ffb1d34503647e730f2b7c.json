{"sha": "b1d6163622398bf289ffb1d34503647e730f2b7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZDYxNjM2MjIzOThiZjI4OWZmYjFkMzQ1MDM2NDdlNzMwZjJiN2M=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-12T20:46:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-12T20:46:53Z"}, "message": "Rollup merge of #62608 - delan:async-unsafe-fn-tests, r=Centril\n\n`async unsafe fn` tests\n\n- cc #62121\n\nr? @Centril", "tree": {"sha": "46460c0373ce5e6bff3bc99dfcb2be73420087b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46460c0373ce5e6bff3bc99dfcb2be73420087b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1d6163622398bf289ffb1d34503647e730f2b7c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdKPG9CRBK7hj4Ov3rIwAAdHIIAIdtNhlntbxz64SxDmvLQDV9\nDiMhOLwhsp9JM9zdeLkl2PzzntGGHYcjWjnPotyucjunCui7Mv6VEOd2sUiHf6O9\n9cXEgLHpz9VTfxjBLu+OZ+aPmeKkBIQD+IKuGQwW7Stfk5f2xkp5dPaOMR3F6hg6\nVo1i69DhxSxqTbQJWb/wGMtCFXek9ysESYL6P4VMDfP+R81kh+AamKD0DkMv/J1T\nCVXSqCL14QN3JD0+Qj2GL2HO1bDhJUJddVAfNpSgzCFruqnBcVLsFV9rW/m0Kmeq\nY6ajsqs/pWSvGB0IEKrr35mqTld2RIguETRkxfHgy31AbWv0T81QPyq2zwtUfCQ=\n=u8Ui\n-----END PGP SIGNATURE-----\n", "payload": "tree 46460c0373ce5e6bff3bc99dfcb2be73420087b8\nparent a7f1649fbbcdc2b9904a2614c36b44e917747898\nparent 5f8d0a1920de9973f980423cd29dbed2eed0b92c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562964413 +0200\ncommitter GitHub <noreply@github.com> 1562964413 +0200\n\nRollup merge of #62608 - delan:async-unsafe-fn-tests, r=Centril\n\n`async unsafe fn` tests\n\n- cc #62121\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d6163622398bf289ffb1d34503647e730f2b7c", "html_url": "https://github.com/rust-lang/rust/commit/b1d6163622398bf289ffb1d34503647e730f2b7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1d6163622398bf289ffb1d34503647e730f2b7c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7f1649fbbcdc2b9904a2614c36b44e917747898", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f1649fbbcdc2b9904a2614c36b44e917747898", "html_url": "https://github.com/rust-lang/rust/commit/a7f1649fbbcdc2b9904a2614c36b44e917747898"}, {"sha": "5f8d0a1920de9973f980423cd29dbed2eed0b92c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f8d0a1920de9973f980423cd29dbed2eed0b92c", "html_url": "https://github.com/rust-lang/rust/commit/5f8d0a1920de9973f980423cd29dbed2eed0b92c"}], "stats": {"total": 120, "additions": 118, "deletions": 2}, "files": [{"sha": "5ec99c5d183fb957780e46558fc1f58e5947de16", "filename": "src/test/ui/async-await/async-await.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b1d6163622398bf289ffb1d34503647e730f2b7c/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d6163622398bf289ffb1d34503647e730f2b7c/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs?ref=b1d6163622398bf289ffb1d34503647e730f2b7c", "patch": "@@ -70,6 +70,8 @@ fn async_nonmove_block(x: u8) -> impl Future<Output = u8> {\n     }\n }\n \n+// see async-closure.rs for async_closure + async_closure_in_unsafe_block\n+\n async fn async_fn(x: u8) -> u8 {\n     wake_and_yield_once().await;\n     x\n@@ -120,6 +122,18 @@ async unsafe fn unsafe_async_fn(x: u8) -> u8 {\n     x\n }\n \n+unsafe fn unsafe_fn(x: u8) -> u8 {\n+    x\n+}\n+\n+fn async_block_in_unsafe_block(x: u8) -> impl Future<Output = u8> {\n+    unsafe {\n+        async move {\n+            unsafe_fn(unsafe_async_fn(x).await)\n+        }\n+    }\n+}\n+\n struct Foo;\n \n trait Bar {\n@@ -176,6 +190,7 @@ fn main() {\n         async_fn,\n         generic_async_fn,\n         async_fn_with_internal_borrow,\n+        async_block_in_unsafe_block,\n         Foo::async_assoc_item,\n         |x| {\n             async move {"}, {"sha": "925b54b398517dfacc69f3a51d22f6fa87decfd6", "filename": "src/test/ui/async-await/async-closure.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b1d6163622398bf289ffb1d34503647e730f2b7c/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d6163622398bf289ffb1d34503647e730f2b7c/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure.rs?ref=b1d6163622398bf289ffb1d34503647e730f2b7c", "patch": "@@ -53,6 +53,21 @@ fn async_closure(x: u8) -> impl Future<Output = u8> {\n     })(x)\n }\n \n+fn async_closure_in_unsafe_block(x: u8) -> impl Future<Output = u8> {\n+    (unsafe {\n+        async move |x: u8| unsafe_fn(unsafe_async_fn(x).await)\n+    })(x)\n+}\n+\n+async unsafe fn unsafe_async_fn(x: u8) -> u8 {\n+    wake_and_yield_once().await;\n+    x\n+}\n+\n+unsafe fn unsafe_fn(x: u8) -> u8 {\n+    x\n+}\n+\n fn test_future_yields_once_then_returns<F, Fut>(f: F)\n where\n     F: FnOnce(u8) -> Fut,\n@@ -77,5 +92,6 @@ fn main() {\n \n     test! {\n         async_closure,\n+        async_closure_in_unsafe_block,\n     }\n }"}, {"sha": "cb9156dcc6e58e92eb681588576b50c6036e23e7", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b1d6163622398bf289ffb1d34503647e730f2b7c/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d6163622398bf289ffb1d34503647e730f2b7c/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs?ref=b1d6163622398bf289ffb1d34503647e730f2b7c", "patch": "@@ -0,0 +1,21 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+struct S;\n+\n+impl S {\n+    async unsafe fn f() {}\n+}\n+\n+async unsafe fn f() {}\n+\n+async fn g() {\n+    S::f(); //~ ERROR call to unsafe function is unsafe\n+    f(); //~ ERROR call to unsafe function is unsafe\n+}\n+\n+fn main() {\n+    S::f(); //~ ERROR call to unsafe function is unsafe\n+    f(); //~ ERROR call to unsafe function is unsafe\n+}"}, {"sha": "d22413beecbcf4e6516262a71a320ec7322d7129", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b1d6163622398bf289ffb1d34503647e730f2b7c/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d6163622398bf289ffb1d34503647e730f2b7c/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.stderr?ref=b1d6163622398bf289ffb1d34503647e730f2b7c", "patch": "@@ -0,0 +1,35 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:14:5\n+   |\n+LL |     S::f();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n+   |\n+LL |     f();\n+   |     ^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:19:5\n+   |\n+LL |     S::f();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:20:5\n+   |\n+LL |     f();\n+   |     ^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "b9cd3903513a47492bb528adf9b61f50ee7a4ad3", "filename": "src/test/ui/async-await/await-macro.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b1d6163622398bf289ffb1d34503647e730f2b7c/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d6163622398bf289ffb1d34503647e730f2b7c/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs?ref=b1d6163622398bf289ffb1d34503647e730f2b7c", "patch": "@@ -77,6 +77,12 @@ fn async_closure(x: u8) -> impl Future<Output = u8> {\n     })(x)\n }\n \n+fn async_closure_in_unsafe_block(x: u8) -> impl Future<Output = u8> {\n+    (unsafe {\n+        async move |x: u8| unsafe_fn(await!(unsafe_async_fn(x)))\n+    })(x)\n+}\n+\n async fn async_fn(x: u8) -> u8 {\n     await!(wake_and_yield_once());\n     x\n@@ -127,18 +133,34 @@ async unsafe fn unsafe_async_fn(x: u8) -> u8 {\n     x\n }\n \n+unsafe fn unsafe_fn(x: u8) -> u8 {\n+    x\n+}\n+\n+fn async_block_in_unsafe_block(x: u8) -> impl Future<Output = u8> {\n+    unsafe {\n+        async move {\n+            unsafe_fn(await!(unsafe_async_fn(x)))\n+        }\n+    }\n+}\n+\n struct Foo;\n \n trait Bar {\n     fn foo() {}\n }\n \n impl Foo {\n-    async fn async_method(x: u8) -> u8 {\n+    async fn async_assoc_item(x: u8) -> u8 {\n         unsafe {\n             await!(unsafe_async_fn(x))\n         }\n     }\n+\n+    async unsafe fn async_unsafe_assoc_item(x: u8) -> u8 {\n+        await!(unsafe_async_fn(x))\n+    }\n }\n \n fn test_future_yields_once_then_returns<F, Fut>(f: F)\n@@ -177,15 +199,22 @@ fn main() {\n         async_block,\n         async_nonmove_block,\n         async_closure,\n+        async_closure_in_unsafe_block,\n         async_fn,\n         generic_async_fn,\n         async_fn_with_internal_borrow,\n-        Foo::async_method,\n+        async_block_in_unsafe_block,\n+        Foo::async_assoc_item,\n         |x| {\n             async move {\n                 unsafe { await!(unsafe_async_fn(x)) }\n             }\n         },\n+        |x| {\n+            async move {\n+                unsafe { await!(Foo::async_unsafe_assoc_item(x)) }\n+            }\n+        },\n     }\n     test_with_borrow! {\n         async_block_with_borrow_named_lifetime,"}]}