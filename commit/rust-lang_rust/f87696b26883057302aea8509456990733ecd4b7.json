{"sha": "f87696b26883057302aea8509456990733ecd4b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NzY5NmIyNjg4MzA1NzMwMmFlYTg1MDk0NTY5OTA3MzNlY2Q0Yjc=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-09-02T14:02:32Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-09-05T17:17:52Z"}, "message": "Test rustdoc unit tests.\n\nDoc tests are temporarily disabled until next release cycle, since\ncurrent beta Cargo errors on them. Upgrade should be smooth as the\nrelevant tests are already fixed in this commit.", "tree": {"sha": "4aeda63a31023be45d2433b5f833f1320c85d38c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aeda63a31023be45d2433b5f833f1320c85d38c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f87696b26883057302aea8509456990733ecd4b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f87696b26883057302aea8509456990733ecd4b7", "html_url": "https://github.com/rust-lang/rust/commit/f87696b26883057302aea8509456990733ecd4b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f87696b26883057302aea8509456990733ecd4b7/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f1ef9ef1181298d46e79d5dde6bafeb6483926f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f1ef9ef1181298d46e79d5dde6bafeb6483926f", "html_url": "https://github.com/rust-lang/rust/commit/2f1ef9ef1181298d46e79d5dde6bafeb6483926f"}], "stats": {"total": 92, "additions": 79, "deletions": 13}, "files": [{"sha": "4765546b184d39bffa0c1375f8af83da2e9e9b2f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f87696b26883057302aea8509456990733ecd4b7/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f87696b26883057302aea8509456990733ecd4b7/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f87696b26883057302aea8509456990733ecd4b7", "patch": "@@ -251,9 +251,9 @@ impl<'a> Builder<'a> {\n                 tool::RustInstaller, tool::Cargo, tool::Rls, tool::Rustdoc, tool::Clippy,\n                 native::Llvm),\n             Kind::Test => describe!(check::Tidy, check::Bootstrap, check::DefaultCompiletest,\n-                check::HostCompiletest, check::Crate, check::CrateLibrustc, check::Linkcheck,\n-                check::Cargotest, check::Cargo, check::Rls, check::Docs, check::ErrorIndex,\n-                check::Distcheck),\n+                check::HostCompiletest, check::Crate, check::CrateLibrustc, check::Rustdoc,\n+                check::Linkcheck, check::Cargotest, check::Cargo, check::Rls, check::Docs,\n+                check::ErrorIndex, check::Distcheck),\n             Kind::Bench => describe!(check::Crate, check::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n                 doc::Standalone, doc::Std, doc::Test, doc::Rustc, doc::ErrorIndex, doc::Nomicon,"}, {"sha": "0d5c3addd9e7447df135a5ac11610f57af94dc1d", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/f87696b26883057302aea8509456990733ecd4b7/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f87696b26883057302aea8509456990733ecd4b7/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=f87696b26883057302aea8509456990733ecd4b7", "patch": "@@ -900,7 +900,6 @@ impl Step for CrateLibrustc {\n     }\n }\n \n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Crate {\n     compiler: Compiler,\n@@ -1080,6 +1079,74 @@ impl Step for Crate {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct Rustdoc {\n+    host: Interned<String>,\n+    test_kind: TestKind,\n+}\n+\n+impl Step for Rustdoc {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/librustdoc\").path(\"src/tools/rustdoc\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        let builder = run.builder;\n+\n+        let test_kind = if builder.kind == Kind::Test {\n+            TestKind::Test\n+        } else if builder.kind == Kind::Bench {\n+            TestKind::Bench\n+        } else {\n+            panic!(\"unexpected builder.kind in crate: {:?}\", builder.kind);\n+        };\n+\n+        builder.ensure(Rustdoc {\n+            host: run.host,\n+            test_kind,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) {\n+        let build = builder.build;\n+        let test_kind = self.test_kind;\n+\n+        let compiler = builder.compiler(builder.top_stage, self.host);\n+        let target = compiler.host;\n+\n+        builder.ensure(RemoteCopyLibs { compiler, target });\n+\n+        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, test_kind.subcommand());\n+        compile::rustc_cargo(build, &compiler, target, &mut cargo);\n+        let _folder = build.fold_output(|| {\n+            format!(\"{}_stage{}-rustdoc\", test_kind.subcommand(), compiler.stage)\n+        });\n+        println!(\"{} rustdoc stage{} ({} -> {})\", test_kind, compiler.stage,\n+                &compiler.host, target);\n+\n+        if test_kind.subcommand() == \"test\" && !build.fail_fast {\n+            cargo.arg(\"--no-fail-fast\");\n+        }\n+\n+        cargo.arg(\"-p\").arg(\"rustdoc:0.0.0\");\n+\n+        cargo.arg(\"--\");\n+        cargo.args(&build.config.cmd.test_args());\n+\n+        if build.config.quiet_tests {\n+            cargo.arg(\"--quiet\");\n+        }\n+\n+        let _time = util::timeit();\n+\n+        try_run(build, &mut cargo);\n+    }\n+}\n+\n fn envify(s: &str) -> String {\n     s.chars().map(|c| {\n         match c {"}, {"sha": "61ac541e2c13998aec67606c3fe0b4264a3a6707", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f87696b26883057302aea8509456990733ecd4b7/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f87696b26883057302aea8509456990733ecd4b7/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=f87696b26883057302aea8509456990733ecd4b7", "patch": "@@ -7,6 +7,8 @@ build = \"build.rs\"\n [lib]\n name = \"rustdoc\"\n path = \"lib.rs\"\n+# SNAP/stage0(cargo)\n+doctest = false\n \n [dependencies]\n env_logger = { version = \"0.4\", default-features = false }"}, {"sha": "dd36b28bb39acd6dcf0b9b4f360aa0624bf80648", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f87696b26883057302aea8509456990733ecd4b7/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f87696b26883057302aea8509456990733ecd4b7/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=f87696b26883057302aea8509456990733ecd4b7", "patch": "@@ -15,13 +15,8 @@\n //! the AST (e.g. see all of `clean::inline`), but this is not always a\n //! non-lossy transformation. The current format of storage for where clauses\n //! for functions and such is simply a list of predicates. One example of this\n-//! is that the AST predicate of:\n-//!\n-//!     where T: Trait<Foo=Bar>\n-//!\n-//! is encoded as:\n-//!\n-//!     where T: Trait, <T as Trait>::Foo = Bar\n+//! is that the AST predicate of: `where T: Trait<Foo=Bar>` is encoded as:\n+//! `where T: Trait, <T as Trait>::Foo = Bar`.\n //!\n //! This module attempts to reconstruct the original where and/or parameter\n //! bounds by special casing scenarios such as these. Fun!"}, {"sha": "8d913c7552813aa185468092fd8b4ee335071eb4", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f87696b26883057302aea8509456990733ecd4b7/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f87696b26883057302aea8509456990733ecd4b7/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=f87696b26883057302aea8509456990733ecd4b7", "patch": "@@ -16,10 +16,12 @@\n //! of `fmt::Display`. Example usage:\n //!\n //! ```\n-//! use rustdoc::html::markdown::Markdown;\n+//! #![feature(rustc_private)]\n+//!\n+//! use rustdoc::html::markdown::{RenderType, Markdown};\n //!\n //! let s = \"My *markdown* _text_\";\n-//! let html = format!(\"{}\", Markdown(s));\n+//! let html = format!(\"{}\", Markdown(s, RenderType::Pulldown));\n //! // ... something using html\n //! ```\n "}]}