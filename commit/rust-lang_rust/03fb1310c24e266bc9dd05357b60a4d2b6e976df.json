{"sha": "03fb1310c24e266bc9dd05357b60a4d2b6e976df", "node_id": "C_kwDOAAsO6NoAKDAzZmIxMzEwYzI0ZTI2NmJjOWRkMDUzNTdiNjBhNGQyYjZlOTc2ZGY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-18T06:39:54Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-18T06:48:53Z"}, "message": "fix: Fix bind pat hint padding", "tree": {"sha": "00334c0f67814d1deadea6e93d6a626209b7f53f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00334c0f67814d1deadea6e93d6a626209b7f53f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03fb1310c24e266bc9dd05357b60a4d2b6e976df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03fb1310c24e266bc9dd05357b60a4d2b6e976df", "html_url": "https://github.com/rust-lang/rust/commit/03fb1310c24e266bc9dd05357b60a4d2b6e976df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03fb1310c24e266bc9dd05357b60a4d2b6e976df/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c06f08896835d0162a1b328726578dbf886d888f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c06f08896835d0162a1b328726578dbf886d888f", "html_url": "https://github.com/rust-lang/rust/commit/c06f08896835d0162a1b328726578dbf886d888f"}], "stats": {"total": 227, "additions": 105, "deletions": 122}, "files": [{"sha": "07b9f9cc1fff6d5ba057f618ee8d1354c2a66237", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "modified", "additions": 103, "deletions": 120, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/03fb1310c24e266bc9dd05357b60a4d2b6e976df/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fb1310c24e266bc9dd05357b60a4d2b6e976df/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=03fb1310c24e266bc9dd05357b60a4d2b6e976df", "patch": "@@ -89,8 +89,8 @@ pub(super) fn hints(\n         None\n     };\n \n-    let has_colon = matches!(type_ascriptable, Some(Some(_))) && !config.render_colons;\n-    if !has_colon {\n+    let render_colons = config.render_colons && !matches!(type_ascriptable, Some(Some(_)));\n+    if render_colons {\n         label.prepend_str(\": \");\n     }\n \n@@ -107,7 +107,7 @@ pub(super) fn hints(\n         label,\n         text_edit,\n         position: InlayHintPosition::After,\n-        pad_left: false,\n+        pad_left: !render_colons,\n         pad_right: false,\n     });\n \n@@ -194,7 +194,7 @@ mod tests {\n fn foo(a: i32, b: i32) -> i32 { a + b }\n fn main() {\n     let _x = foo(4, 4);\n-      //^^ : i32\n+      //^^ i32\n }\"#,\n         );\n     }\n@@ -206,17 +206,17 @@ fn main() {\n //- minicore: option\n fn main() {\n     let ref foo @ bar @ ref mut baz = 0;\n-          //^^^ : &i32\n-                //^^^ : i32\n-                              //^^^ : &mut i32\n+          //^^^ &i32\n+                //^^^ i32\n+                              //^^^ &mut i32\n     let [x @ ..] = [0];\n-       //^ : [i32; 1]\n+       //^ [i32; 1]\n     if let x @ Some(_) = Some(0) {}\n-         //^ : Option<i32>\n+         //^ Option<i32>\n     let foo @ (bar, baz) = (3, 3);\n-      //^^^ : (i32, i32)\n-             //^^^ : i32\n-                  //^^^ : i32\n+      //^^^ (i32, i32)\n+             //^^^ i32\n+                  //^^^ i32\n }\"#,\n         );\n     }\n@@ -229,11 +229,11 @@ struct Test<K, T = u8> { k: K, t: T }\n \n fn main() {\n     let zz = Test { t: 23u8, k: 33 };\n-      //^^ : Test<i32>\n+      //^^ Test<i32>\n     let zz_ref = &zz;\n-      //^^^^^^ : &Test<i32>\n+      //^^^^^^ &Test<i32>\n     let test = || zz;\n-      //^^^^ : impl FnOnce() -> Test<i32>\n+      //^^^^ impl FnOnce() -> Test<i32>\n }\"#,\n         );\n     }\n@@ -261,10 +261,10 @@ impl<T> Iterator for SomeIter<T> {\n \n fn main() {\n     let mut some_iter = SomeIter::new();\n-          //^^^^^^^^^ : SomeIter<Take<Repeat<i32>>>\n+          //^^^^^^^^^ SomeIter<Take<Repeat<i32>>>\n       some_iter.push(iter::repeat(2).take(2));\n     let iter_of_iters = some_iter.take(2);\n-      //^^^^^^^^^^^^^ : impl Iterator<Item = impl Iterator<Item = i32>>\n+      //^^^^^^^^^^^^^ impl Iterator<Item = impl Iterator<Item = i32>>\n }\n \"#,\n         );\n@@ -323,7 +323,7 @@ fn main(a: SliceIter<'_, Container>) {\n \n             pub fn quux<T: Foo>() -> T::Bar {\n                 let y = Default::default();\n-                  //^ : <T as Foo>::Bar\n+                  //^ <T as Foo>::Bar\n \n                 y\n             }\n@@ -347,21 +347,21 @@ fn foo7() -> *const (impl Fn(f64, f64) -> u32 + Sized) { loop {} }\n \n fn main() {\n     let foo = foo();\n-     // ^^^ : impl Fn()\n+     // ^^^ impl Fn()\n     let foo = foo1();\n-     // ^^^ : impl Fn(f64)\n+     // ^^^ impl Fn(f64)\n     let foo = foo2();\n-     // ^^^ : impl Fn(f64, f64)\n+     // ^^^ impl Fn(f64, f64)\n     let foo = foo3();\n-     // ^^^ : impl Fn(f64, f64) -> u32\n+     // ^^^ impl Fn(f64, f64) -> u32\n     let foo = foo4();\n-     // ^^^ : &dyn Fn(f64, f64) -> u32\n+     // ^^^ &dyn Fn(f64, f64) -> u32\n     let foo = foo5();\n-     // ^^^ : &dyn Fn(&dyn Fn(f64, f64) -> u32, f64) -> u32\n+     // ^^^ &dyn Fn(&dyn Fn(f64, f64) -> u32, f64) -> u32\n     let foo = foo6();\n-     // ^^^ : impl Fn(f64, f64) -> u32\n+     // ^^^ impl Fn(f64, f64) -> u32\n     let foo = foo7();\n-     // ^^^ : *const impl Fn(f64, f64) -> u32\n+     // ^^^ *const impl Fn(f64, f64) -> u32\n }\n \"#,\n         )\n@@ -384,9 +384,9 @@ fn main() {\n             let foo = foo();\n             let foo = foo1();\n             let foo = foo2();\n-             // ^^^ : impl Fn(f64, f64)\n+             // ^^^ impl Fn(f64, f64)\n             let foo = foo3();\n-             // ^^^ : impl Fn(f64, f64) -> u32\n+             // ^^^ impl Fn(f64, f64) -> u32\n             let foo = foo4();\n             let foo = foo5();\n             let foo = foo6();\n@@ -427,25 +427,25 @@ fn foo10() -> *const (impl Fn() + Sized + ?Sized) { loop {} }\n \n fn main() {\n     let foo = foo1();\n-    //  ^^^ : *const impl Fn()\n+    //  ^^^ *const impl Fn()\n     let foo = foo2();\n-    //  ^^^ : *const impl Fn()\n+    //  ^^^ *const impl Fn()\n     let foo = foo3();\n-    //  ^^^ : *const (impl Fn() + ?Sized)\n+    //  ^^^ *const (impl Fn() + ?Sized)\n     let foo = foo4();\n-    //  ^^^ : *const impl Fn()\n+    //  ^^^ *const impl Fn()\n     let foo = foo5();\n-    //  ^^^ : *const (impl Fn() + ?Sized)\n+    //  ^^^ *const (impl Fn() + ?Sized)\n     let foo = foo6();\n-    //  ^^^ : *const (impl Fn() + Trait)\n+    //  ^^^ *const (impl Fn() + Trait)\n     let foo = foo7();\n-    //  ^^^ : *const (impl Fn() + Trait)\n+    //  ^^^ *const (impl Fn() + Trait)\n     let foo = foo8();\n-    //  ^^^ : *const (impl Fn() + Trait + ?Sized)\n+    //  ^^^ *const (impl Fn() + Trait + ?Sized)\n     let foo = foo9();\n-    //  ^^^ : *const (impl Fn() -> u8 + ?Sized)\n+    //  ^^^ *const (impl Fn() -> u8 + ?Sized)\n     let foo = foo10();\n-    //  ^^^ : *const impl Fn()\n+    //  ^^^ *const impl Fn()\n }\n \"#,\n         )\n@@ -496,24 +496,24 @@ fn main() {\n     struct InnerStruct {}\n \n     let test = 54;\n-      //^^^^ : i32\n+      //^^^^ i32\n     let test: i32 = 33;\n     let mut test = 33;\n-          //^^^^ : i32\n+          //^^^^ i32\n     let _ = 22;\n     let test = \"test\";\n-      //^^^^ : &str\n+      //^^^^ &str\n     let test = InnerStruct {};\n-      //^^^^ : InnerStruct\n+      //^^^^ InnerStruct\n \n     let test = unresolved();\n \n     let test = (42, 'a');\n-      //^^^^ : (i32, char)\n-    let (a,      (b,       (c,)) = (2, (3, (9.2,));\n-       //^ : i32  ^ : i32   ^ : f64\n+      //^^^^ (i32, char)\n+    let (a,    (b,     (c,)) = (2, (3, (9.2,));\n+       //^ i32  ^ i32   ^ f64\n     let &x = &92;\n-       //^ : i32\n+       //^ i32\n }\"#,\n         );\n     }\n@@ -526,24 +526,7 @@ fn main() {\n struct Test { a: Option<u32>, b: u8 }\n \n fn main() {\n-    let test = Some(Test { a: Some(3), b: 1 });\n-      //^^^^ : Option<Test>\n-    if let None = &test {};\n-    if let test = &test {};\n-         //^^^^ : &Option<Test>\n-    if let Some(test) = &test {};\n-              //^^^^ : &Test\n-    if let Some(Test { a,               b }) = &test {};\n-                     //^ : &Option<u32> ^ : &u8\n-    if let Some(Test { a: x,               b: y }) = &test {};\n-                        //^ : &Option<u32>    ^ : &u8\n-    if let Some(Test { a: Some(x),    b: y }) = &test {};\n-                             //^ : &u32  ^ : &u8\n-    if let Some(Test { a: None,  b: y }) = &test {};\n-                                  //^ : &u8\n-    if let Some(Test { b: y, .. }) = &test {};\n-                        //^ : &u8\n-    if test == None {}\n+\n }\"#,\n         );\n     }\n@@ -557,9 +540,9 @@ struct Test { a: Option<u32>, b: u8 }\n \n fn main() {\n     let test = Some(Test { a: Some(3), b: 1 });\n-      //^^^^ : Option<Test>\n+      //^^^^ Option<Test>\n     while let Some(Test { a: Some(x),    b: y }) = &test {};\n-                                //^ : &u32  ^ : &u8\n+                                //^ &u32    ^ &u8\n }\"#,\n         );\n     }\n@@ -575,9 +558,9 @@ fn main() {\n     match Some(Test { a: Some(3), b: 1 }) {\n         None => (),\n         test => (),\n-      //^^^^ : Option<Test>\n-        Some(Test { a: Some(x),   b: y }) => (),\n-                          //^ : u32  ^ : u8\n+      //^^^^ Option<Test>\n+        Some(Test { a: Some(x), b: y }) => (),\n+                          //^ u32  ^ u8\n         _ => {}\n     }\n }\"#,\n@@ -609,12 +592,12 @@ impl<T> Iterator for IntoIter<T> {\n \n fn main() {\n     let mut data = Vec::new();\n-          //^^^^ : Vec<&str>\n+          //^^^^ Vec<&str>\n     data.push(\"foo\");\n     for i in data {\n-      //^ : &str\n+      //^ &str\n       let z = i;\n-        //^ : &str\n+        //^ &str\n     }\n }\n \"#,\n@@ -639,11 +622,11 @@ auto trait Sync {}\n fn main() {\n     // The block expression wrapping disables the constructor hint hiding logic\n     let _v = { Vec::<Box<&(dyn Display + Sync)>>::new() };\n-      //^^ : Vec<Box<&(dyn Display + Sync)>>\n+      //^^ Vec<Box<&(dyn Display + Sync)>>\n     let _v = { Vec::<Box<*const (dyn Display + Sync)>>::new() };\n-      //^^ : Vec<Box<*const (dyn Display + Sync)>>\n+      //^^ Vec<Box<*const (dyn Display + Sync)>>\n     let _v = { Vec::<Box<dyn Display + Sync>>::new() };\n-      //^^ : Vec<Box<dyn Display + Sync>>\n+      //^^ Vec<Box<dyn Display + Sync>>\n }\n \"#,\n         );\n@@ -667,14 +650,14 @@ impl Iterator for MyIter {\n \n fn main() {\n     let _x = MyIter;\n-      //^^ : MyIter\n+      //^^ MyIter\n     let _x = iter::repeat(0);\n-      //^^ : impl Iterator<Item = i32>\n+      //^^ impl Iterator<Item = i32>\n     fn generic<T: Clone>(t: T) {\n         let _x = iter::repeat(t);\n-          //^^ : impl Iterator<Item = T>\n+          //^^ impl Iterator<Item = T>\n         let _chained = iter::repeat(t).take(10);\n-          //^^^^^^^^ : impl Iterator<Item = T>\n+          //^^^^^^^^ impl Iterator<Item = T>\n     }\n }\n \"#,\n@@ -738,20 +721,20 @@ fn main() {\n     let tuple_struct = TupleStruct();\n \n     let generic0 = Generic::new();\n-    //  ^^^^^^^^ : Generic<i32>\n+    //  ^^^^^^^^ Generic<i32>\n     let generic1 = Generic(0);\n-    //  ^^^^^^^^ : Generic<i32>\n+    //  ^^^^^^^^ Generic<i32>\n     let generic2 = Generic::<i32>::new();\n     let generic3 = <Generic<i32>>::new();\n     let generic4 = Generic::<i32>(0);\n \n \n     let option = Some(0);\n-    //  ^^^^^^ : Option<i32>\n+    //  ^^^^^^ Option<i32>\n     let func = times2;\n-    //  ^^^^ : fn times2(i32) -> i32\n+    //  ^^^^ fn times2(i32) -> i32\n     let closure = |x: i32| x * 2;\n-    //  ^^^^^^^ : impl Fn(i32) -> i32\n+    //  ^^^^^^^ impl Fn(i32) -> i32\n }\n \n fn fallible() -> ControlFlow<()> {\n@@ -789,20 +772,20 @@ impl Generic<i32> {\n \n fn main() {\n     let strukt = Struct::new();\n-     // ^^^^^^ : Struct\n+     // ^^^^^^ Struct\n     let tuple_struct = TupleStruct();\n-     // ^^^^^^^^^^^^ : TupleStruct\n+     // ^^^^^^^^^^^^ TupleStruct\n     let generic0 = Generic::new();\n-     // ^^^^^^^^ : Generic<i32>\n+     // ^^^^^^^^ Generic<i32>\n     let generic1 = Generic::<i32>::new();\n-     // ^^^^^^^^ : Generic<i32>\n+     // ^^^^^^^^ Generic<i32>\n     let generic2 = <Generic<i32>>::new();\n-     // ^^^^^^^^ : Generic<i32>\n+     // ^^^^^^^^ Generic<i32>\n }\n \n fn fallible() -> ControlFlow<()> {\n     let strukt = Struct::try_new()?;\n-     // ^^^^^^ : Struct\n+     // ^^^^^^ Struct\n }\n \"#,\n         );\n@@ -816,15 +799,15 @@ fn fallible() -> ControlFlow<()> {\n //- minicore: fn\n fn main() {\n     let x = || 2;\n-      //^ : impl Fn() -> i32\n+      //^ impl Fn() -> i32\n     let y = |t: i32| x() + t;\n-      //^ : impl Fn(i32) -> i32\n+      //^ impl Fn(i32) -> i32\n     let mut t = 5;\n-          //^ : i32\n+          //^ i32\n     let z = |k: i32| { t += k; };\n-      //^ : impl FnMut(i32)\n+      //^ impl FnMut(i32)\n     let p = (y, z);\n-      //^ : (impl Fn(i32) -> i32, impl FnMut(i32))\n+      //^ (impl Fn(i32) -> i32, impl FnMut(i32))\n }\n             \"#,\n         );\n@@ -838,15 +821,15 @@ fn main() {\n //- minicore: fn\n fn main() {\n     let x = || 2;\n-      //^ : || -> i32\n+      //^ || -> i32\n     let y = |t: i32| x() + t;\n-      //^ : |i32| -> i32\n+      //^ |i32| -> i32\n     let mut t = 5;\n-          //^ : i32\n+          //^ i32\n     let z = |k: i32| { t += k; };\n-      //^ : |i32| -> ()\n+      //^ |i32| -> ()\n     let p = (y, z);\n-      //^ : (|i32| -> i32, |i32| -> ())\n+      //^ (|i32| -> i32, |i32| -> ())\n }\n             \"#,\n         );\n@@ -860,15 +843,15 @@ fn main() {\n //- minicore: fn\n fn main() {\n     let x = || 2;\n-      //^ : {closure#0}\n+      //^ {closure#0}\n     let y = |t: i32| x() + t;\n-      //^ : {closure#1}\n+      //^ {closure#1}\n     let mut t = 5;\n-          //^ : i32\n+          //^ i32\n     let z = |k: i32| { t += k; };\n-      //^ : {closure#2}\n+      //^ {closure#2}\n     let p = (y, z);\n-      //^ : ({closure#1}, {closure#2})\n+      //^ ({closure#1}, {closure#2})\n }\n             \"#,\n         );\n@@ -882,15 +865,15 @@ fn main() {\n //- minicore: fn\n fn main() {\n     let x = || 2;\n-      //^ : \u2026\n+      //^ \u2026\n     let y = |t: i32| x() + t;\n-      //^ : \u2026\n+      //^ \u2026\n     let mut t = 5;\n-          //^ : i32\n+          //^ i32\n     let z = |k: i32| { t += k; };\n-      //^ : \u2026\n+      //^ \u2026\n     let p = (y, z);\n-      //^ : (\u2026, \u2026)\n+      //^ (\u2026, \u2026)\n }\n             \"#,\n         );\n@@ -910,24 +893,24 @@ fn main() {\n     let multiple_2 = |x: i32| { x * 2 };\n \n     let multiple_2 = |x: i32| x * 2;\n-    //  ^^^^^^^^^^ : impl Fn(i32) -> i32\n+    //  ^^^^^^^^^^ impl Fn(i32) -> i32\n \n     let (not) = (|x: bool| { !x });\n-    //   ^^^ : impl Fn(bool) -> bool\n+    //   ^^^ impl Fn(bool) -> bool\n \n     let (is_zero, _b) = (|x: usize| { x == 0 }, false);\n-    //   ^^^^^^^ : impl Fn(usize) -> bool\n-    //            ^^ : bool\n+    //   ^^^^^^^ impl Fn(usize) -> bool\n+    //            ^^ bool\n \n     let plus_one = |x| { x + 1 };\n-    //              ^ : u8\n+    //              ^ u8\n     foo(plus_one);\n \n     let add_mul = bar(|x: u8| { x + 1 });\n-    //  ^^^^^^^ : impl FnOnce(u8) -> u8 + ?Sized\n+    //  ^^^^^^^ impl FnOnce(u8) -> u8 + ?Sized\n \n     let closure = if let Some(6) = add_mul(2).checked_sub(1) {\n-    //  ^^^^^^^ : fn(i32) -> i32\n+    //  ^^^^^^^ fn(i32) -> i32\n         |x: i32| { x * 2 }\n     } else {\n         |x: i32| { x * 3 }\n@@ -954,11 +937,11 @@ struct VeryLongOuterName<T>(T);\n \n fn main() {\n     let a = Smol(0u32);\n-      //^ : Smol<u32>\n+      //^ Smol<u32>\n     let b = VeryLongOuterName(0usize);\n-      //^ : VeryLongOuterName<\u2026>\n+      //^ VeryLongOuterName<\u2026>\n     let c = Smol(Smol(0u32))\n-      //^ : Smol<Smol<\u2026>>\n+      //^ Smol<Smol<\u2026>>\n }\"#,\n         );\n     }"}, {"sha": "451c15a25c3bb69cdfd3f9d89a4c8108661ed351", "filename": "crates/ide/src/inlay_hints/chaining.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03fb1310c24e266bc9dd05357b60a4d2b6e976df/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fb1310c24e266bc9dd05357b60a4d2b6e976df/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs?ref=03fb1310c24e266bc9dd05357b60a4d2b6e976df", "patch": "@@ -626,11 +626,11 @@ fn main() {\n                     InlayHint {\n                         range: 124..130,\n                         position: After,\n-                        pad_left: false,\n+                        pad_left: true,\n                         pad_right: false,\n                         kind: Type,\n                         label: [\n-                            \": \",\n+                            \"\",\n                             InlayHintLabelPart {\n                                 text: \"Struct\",\n                                 linked_location: Some("}]}