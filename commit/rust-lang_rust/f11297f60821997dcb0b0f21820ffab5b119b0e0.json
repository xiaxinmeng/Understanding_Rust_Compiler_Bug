{"sha": "f11297f60821997dcb0b0f21820ffab5b119b0e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMTI5N2Y2MDgyMTk5N2RjYjBiMGYyMTgyMGZmYWI1YjExOWIwZTA=", "commit": {"author": {"name": "Youngsoo Son", "email": "ysoo.son@samsung.com", "date": "2013-05-15T15:33:54Z"}, "committer": {"name": "Youngsoo Son", "email": "ysoo.son@samsung.com", "date": "2013-05-15T15:33:54Z"}, "message": "rename `at_vec::from_owned` and `at_vec::from_slice` to `at_vec::to_managed_consume` and `at_vec::to_managed`", "tree": {"sha": "89ef43a61a694d872dd7d31e1088305a5152c1f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89ef43a61a694d872dd7d31e1088305a5152c1f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f11297f60821997dcb0b0f21820ffab5b119b0e0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f11297f60821997dcb0b0f21820ffab5b119b0e0", "html_url": "https://github.com/rust-lang/rust/commit/f11297f60821997dcb0b0f21820ffab5b119b0e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f11297f60821997dcb0b0f21820ffab5b119b0e0/comments", "author": {"login": "sonwow", "id": 2674659, "node_id": "MDQ6VXNlcjI2NzQ2NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2674659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sonwow", "html_url": "https://github.com/sonwow", "followers_url": "https://api.github.com/users/sonwow/followers", "following_url": "https://api.github.com/users/sonwow/following{/other_user}", "gists_url": "https://api.github.com/users/sonwow/gists{/gist_id}", "starred_url": "https://api.github.com/users/sonwow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sonwow/subscriptions", "organizations_url": "https://api.github.com/users/sonwow/orgs", "repos_url": "https://api.github.com/users/sonwow/repos", "events_url": "https://api.github.com/users/sonwow/events{/privacy}", "received_events_url": "https://api.github.com/users/sonwow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sonwow", "id": 2674659, "node_id": "MDQ6VXNlcjI2NzQ2NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2674659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sonwow", "html_url": "https://github.com/sonwow", "followers_url": "https://api.github.com/users/sonwow/followers", "following_url": "https://api.github.com/users/sonwow/following{/other_user}", "gists_url": "https://api.github.com/users/sonwow/gists{/gist_id}", "starred_url": "https://api.github.com/users/sonwow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sonwow/subscriptions", "organizations_url": "https://api.github.com/users/sonwow/orgs", "repos_url": "https://api.github.com/users/sonwow/repos", "events_url": "https://api.github.com/users/sonwow/events{/privacy}", "received_events_url": "https://api.github.com/users/sonwow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62c7027a3258b60cbad3e99f4c7cb8d58f59fbd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/62c7027a3258b60cbad3e99f4c7cb8d58f59fbd5", "html_url": "https://github.com/rust-lang/rust/commit/62c7027a3258b60cbad3e99f4c7cb8d58f59fbd5"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "93bbf8fb662149ea23e8900fdccd46cfff193dcf", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f11297f60821997dcb0b0f21820ffab5b119b0e0/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11297f60821997dcb0b0f21820ffab5b119b0e0/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=f11297f60821997dcb0b0f21820ffab5b119b0e0", "patch": "@@ -149,7 +149,7 @@ pub fn from_elem<T:Copy>(n_elts: uint, t: T) -> @[T] {\n  * Creates and initializes an immutable managed vector by moving all the\n  * elements from an owned vector.\n  */\n-pub fn from_owned<T>(v: ~[T]) -> @[T] {\n+pub fn to_managed_consume<T>(v: ~[T]) -> @[T] {\n     let mut av = @[];\n     unsafe {\n         raw::reserve(&mut av, v.len());\n@@ -164,7 +164,7 @@ pub fn from_owned<T>(v: ~[T]) -> @[T] {\n  * Creates and initializes an immutable managed vector by copying all the\n  * elements of a slice.\n  */\n-pub fn from_slice<T:Copy>(v: &[T]) -> @[T] {\n+pub fn to_managed<T:Copy>(v: &[T]) -> @[T] {\n     from_fn(v.len(), |i| v[i])\n }\n \n@@ -304,20 +304,20 @@ mod test {\n     }\n \n     #[test]\n-    fn test_from_owned() {\n-        assert!(from_owned::<int>(~[]) == @[]);\n-        assert!(from_owned(~[true]) == @[true]);\n-        assert!(from_owned(~[1, 2, 3, 4, 5]) == @[1, 2, 3, 4, 5]);\n-        assert!(from_owned(~[~\"abc\", ~\"123\"]) == @[~\"abc\", ~\"123\"]);\n-        assert!(from_owned(~[~[42]]) == @[~[42]]);\n+    fn test_to_managed_consume() {\n+        assert!(to_managed_consume::<int>(~[]) == @[]);\n+        assert!(to_managed_consume(~[true]) == @[true]);\n+        assert!(to_managed_consume(~[1, 2, 3, 4, 5]) == @[1, 2, 3, 4, 5]);\n+        assert!(to_managed_consume(~[~\"abc\", ~\"123\"]) == @[~\"abc\", ~\"123\"]);\n+        assert!(to_managed_consume(~[~[42]]) == @[~[42]]);\n     }\n \n     #[test]\n-    fn test_from_slice() {\n-        assert!(from_slice::<int>([]) == @[]);\n-        assert!(from_slice([true]) == @[true]);\n-        assert!(from_slice([1, 2, 3, 4, 5]) == @[1, 2, 3, 4, 5]);\n-        assert!(from_slice([@\"abc\", @\"123\"]) == @[@\"abc\", @\"123\"]);\n-        assert!(from_slice([@[42]]) == @[@[42]]);\n+    fn test_to_managed() {\n+        assert!(to_managed::<int>([]) == @[]);\n+        assert!(to_managed([true]) == @[true]);\n+        assert!(to_managed([1, 2, 3, 4, 5]) == @[1, 2, 3, 4, 5]);\n+        assert!(to_managed([@\"abc\", @\"123\"]) == @[@\"abc\", @\"123\"]);\n+        assert!(to_managed([@[42]]) == @[@[42]]);\n     }\n }"}, {"sha": "209a14942e9a71dd42695c76cf9876787a8cc519", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f11297f60821997dcb0b0f21820ffab5b119b0e0/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11297f60821997dcb0b0f21820ffab5b119b0e0/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=f11297f60821997dcb0b0f21820ffab5b119b0e0", "patch": "@@ -1108,7 +1108,7 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                 dcx.tcx.adjustments.insert(id, adj);\n             } else if tag == (c::tag_table_capture_map as uint) {\n                 let cvars =\n-                    at_vec::from_owned(\n+                    at_vec::to_managed_consume(\n                         val_dsr.read_to_vec(\n                             |val_dsr| val_dsr.read_capture_var(xcx)));\n                 dcx.maps.capture_map.insert(id, cvars);"}]}