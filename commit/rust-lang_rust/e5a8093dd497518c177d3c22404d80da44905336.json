{"sha": "e5a8093dd497518c177d3c22404d80da44905336", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YTgwOTNkZDQ5NzUxOGMxNzdkM2MyMjQwNGQ4MGRhNDQ5MDUzMzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-09T09:39:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-09T14:31:11Z"}, "message": "document module", "tree": {"sha": "5d5cf644461391e73dc6b6b514c7d09236da7c53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d5cf644461391e73dc6b6b514c7d09236da7c53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5a8093dd497518c177d3c22404d80da44905336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5a8093dd497518c177d3c22404d80da44905336", "html_url": "https://github.com/rust-lang/rust/commit/e5a8093dd497518c177d3c22404d80da44905336", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5a8093dd497518c177d3c22404d80da44905336/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "html_url": "https://github.com/rust-lang/rust/commit/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "a14139b26590c4b1de7ec6f4f1dde108d1525b61", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a8093dd497518c177d3c22404d80da44905336/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a8093dd497518c177d3c22404d80da44905336/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=e5a8093dd497518c177d3c22404d80da44905336", "patch": "@@ -39,7 +39,7 @@ pub fn load_cargo(root: &Path) -> Result<(AnalysisHost, FxHashMap<SourceRootId,\n         sender,\n         Watch(false),\n     );\n-    let crate_graph = ws.to_crate_graph(&mut |path: &Path| {\n+    let (crate_graph, _crate_names) = ws.to_crate_graph(&mut |path: &Path| {\n         let vfs_file = vfs.load(path);\n         log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n         vfs_file.map(vfs_file_to_id)"}, {"sha": "87f3180c3ad584e1bf17c6149bbe88e9213c4d97", "filename": "crates/ra_hir/src/debug.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e5a8093dd497518c177d3c22404d80da44905336/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a8093dd497518c177d3c22404d80da44905336/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdebug.rs?ref=e5a8093dd497518c177d3c22404d80da44905336", "patch": "@@ -1,4 +1,24 @@\n-use std::{cell::Cell, fmt};\n+//! printf debugging infrastructure for rust-analyzer.\n+//!\n+//! When you print a hir type, like a module, using `eprintln!(\"{:?}\", module)`,\n+//! you usually get back a numeric ID, which doesn't tell you much:\n+//! `Module(92)`.\n+//!\n+//! This module adds convenience `debug` methods to various types, which resolve\n+//! the id to a human-readable location info:\n+//!\n+//! ```not_rust\n+//! eprintln!(\"{:?}\", module.debug(db));\n+//! =>\n+//! Module { name: collections, path: \"liballoc/collections/mod.rs\" }\n+//! ```\n+//!\n+//! Note that to get this info, we might need to execute queries! So\n+//!\n+//! * don't use the `debug` methods for logging\n+//! * when debugging, be aware that interference is possible.\n+\n+use std::fmt;\n \n use ra_db::{CrateId, FileId};\n \n@@ -50,15 +70,14 @@ impl<DB: HirDebugHelper> HirDebugDatabase for DB {\n     }\n }\n \n-fn debug_fn(f: impl FnOnce(&mut fmt::Formatter<'_>) -> fmt::Result) -> impl fmt::Debug {\n-    struct DebugFn<F>(Cell<Option<F>>);\n+fn debug_fn(f: impl Fn(&mut fmt::Formatter<'_>) -> fmt::Result) -> impl fmt::Debug {\n+    struct DebugFn<F>(F);\n \n-    impl<F: FnOnce(&mut fmt::Formatter<'_>) -> fmt::Result> fmt::Debug for DebugFn<F> {\n+    impl<F: Fn(&mut fmt::Formatter<'_>) -> fmt::Result> fmt::Debug for DebugFn<F> {\n         fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            let f = self.0.take().unwrap();\n-            f(fmt)\n+            (&self.0)(fmt)\n         }\n     }\n \n-    DebugFn(Cell::new(Some(f)))\n+    DebugFn(f)\n }"}]}