{"sha": "141df6f60e28c83711db5a2a94d5c4ff5e9aecaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MWRmNmY2MGUyOGM4MzcxMWRiNWEyYTk0ZDVjNGZmNWU5YWVjYWE=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-29T00:22:45Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-29T00:27:19Z"}, "message": "Inline `find_suffix` closure that's only used once", "tree": {"sha": "49fd294004ffff6738ef48ded5d1acc11ec865f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49fd294004ffff6738ef48ded5d1acc11ec865f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/141df6f60e28c83711db5a2a94d5c4ff5e9aecaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/141df6f60e28c83711db5a2a94d5c4ff5e9aecaa", "html_url": "https://github.com/rust-lang/rust/commit/141df6f60e28c83711db5a2a94d5c4ff5e9aecaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/141df6f60e28c83711db5a2a94d5c4ff5e9aecaa/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5497f158af58bf6420222472bbaeeae78081d26f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5497f158af58bf6420222472bbaeeae78081d26f", "html_url": "https://github.com/rust-lang/rust/commit/5497f158af58bf6420222472bbaeeae78081d26f"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "55978ca551b05bb2de8984c2e75b43ecdb93090f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/141df6f60e28c83711db5a2a94d5c4ff5e9aecaa/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141df6f60e28c83711db5a2a94d5c4ff5e9aecaa/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=141df6f60e28c83711db5a2a94d5c4ff5e9aecaa", "patch": "@@ -1549,23 +1549,6 @@ impl Disambiguator {\n     fn from_str(link: &str) -> Result<Option<(Self, &str)>, (String, Range<usize>)> {\n         use Disambiguator::{Kind, Namespace as NS, Primitive};\n \n-        let find_suffix = || {\n-            let suffixes = [\n-                (\"!()\", DefKind::Macro(MacroKind::Bang)),\n-                (\"()\", DefKind::Fn),\n-                (\"!\", DefKind::Macro(MacroKind::Bang)),\n-            ];\n-            for &(suffix, kind) in &suffixes {\n-                if let Some(link) = link.strip_suffix(suffix) {\n-                    // Avoid turning `!` or `()` into an empty string\n-                    if !link.is_empty() {\n-                        return Some((Kind(kind), link));\n-                    }\n-                }\n-            }\n-            None\n-        };\n-\n         if let Some(idx) = link.find('@') {\n             let (prefix, rest) = link.split_at(idx);\n             let d = match prefix {\n@@ -1586,7 +1569,20 @@ impl Disambiguator {\n             };\n             Ok(Some((d, &rest[1..])))\n         } else {\n-            Ok(find_suffix())\n+            let suffixes = [\n+                (\"!()\", DefKind::Macro(MacroKind::Bang)),\n+                (\"()\", DefKind::Fn),\n+                (\"!\", DefKind::Macro(MacroKind::Bang)),\n+            ];\n+            for &(suffix, kind) in &suffixes {\n+                if let Some(link) = link.strip_suffix(suffix) {\n+                    // Avoid turning `!` or `()` into an empty string\n+                    if !link.is_empty() {\n+                        return Ok(Some((Kind(kind), link)));\n+                    }\n+                }\n+            }\n+            Ok(None)\n         }\n     }\n "}]}