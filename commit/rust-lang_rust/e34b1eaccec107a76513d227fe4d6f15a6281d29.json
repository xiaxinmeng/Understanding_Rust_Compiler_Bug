{"sha": "e34b1eaccec107a76513d227fe4d6f15a6281d29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNGIxZWFjY2VjMTA3YTc2NTEzZDIyN2ZlNGQ2ZjE1YTYyODFkMjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-02T07:32:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-02T07:32:07Z"}, "message": "auto merge of #11248 : brson/rust/0.9relnotes, r=alexcrichton", "tree": {"sha": "08decfb484d39fe7a4aa63df67360a2aa3150dc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08decfb484d39fe7a4aa63df67360a2aa3150dc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e34b1eaccec107a76513d227fe4d6f15a6281d29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e34b1eaccec107a76513d227fe4d6f15a6281d29", "html_url": "https://github.com/rust-lang/rust/commit/e34b1eaccec107a76513d227fe4d6f15a6281d29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e34b1eaccec107a76513d227fe4d6f15a6281d29/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ba61514c93f849109d274ec2b776b425cf5c77e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ba61514c93f849109d274ec2b776b425cf5c77e", "html_url": "https://github.com/rust-lang/rust/commit/8ba61514c93f849109d274ec2b776b425cf5c77e"}, {"sha": "14a01b149a5a273abca9c32588935cb9acf207f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/14a01b149a5a273abca9c32588935cb9acf207f9", "html_url": "https://github.com/rust-lang/rust/commit/14a01b149a5a273abca9c32588935cb9acf207f9"}], "stats": {"total": 152, "additions": 149, "deletions": 3}, "files": [{"sha": "00e3874370cd01e0afcf71229761275489c75dc4", "filename": "RELEASES.txt", "status": "modified", "additions": 149, "deletions": 3, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/e34b1eaccec107a76513d227fe4d6f15a6281d29/RELEASES.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e34b1eaccec107a76513d227fe4d6f15a6281d29/RELEASES.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.txt?ref=e34b1eaccec107a76513d227fe4d6f15a6281d29", "patch": "@@ -1,10 +1,156 @@\n-Version 0.9 (XXX 2013)\n+Version 0.9 (January 2014)\n --------------------------\n \n-   * ~XXX changes, numerous bugfixes\n+   * ~1600 changes, numerous bugfixes\n+\n+   * Language\n+      * The `float` type has been removed. Use `f32` or `f64` instead.\n+      * A new facility for enabling experimental features (feature gating) has\n+        been added, using the crate-level `#[feature(foo)]` attribute.\n+      * Managed boxes (@) are now behind a feature gate\n+        (`#[feature(managed_boxes)]`) in preperation for future removal. Use the\n+        standard library's `Gc` or `Rc` types instead.\n+      * `@mut` has been removed. Use `std::cell::{Cell, RefCell}` instead.\n+      * Jumping back to the top of a loop is now done with `continue` instead of\n+        `loop`.\n+      * Strings can no longer be mutated through index assignment.\n+      * Raw strings can be created via the basic `r\"foo\"` syntax or with matched\n+        hash delimiters, as in `r###\"foo\"###`.\n+      * `~fn` is now written `proc (args) -> retval { ... }` and may only be\n+        called once.\n+      * The `&fn` type is now written `|args| -> ret` to match the literal form.\n+      * `@fn`s have been removed.\n+      * `do` only works with procs in order to make it obvious what the cost\n+        of `do` is.\n+      * The `#[link(...)]` attribute has been replaced with\n+        `#[crate_id = \"name#vers\"]`.\n+      * Empty `impl`s must be terminated with empty braces and may not be\n+        terminated with a semicolon.\n+      * Keywords are no longer allowed as lifetime names; the `self` lifetime\n+        no longer has any special meaning.\n+      * The old `fmt!` string formatting macro has been removed.\n+      * `printf!` and `printfln!` (old-style formatting) removed in favor of\n+        `print!` and `println!`.\n+      * `mut` works in patterns now, as in `let (mut x, y) = (1, 2);`.\n+      * New reserved keywords: `alignof`, `offsetof`, `sizeof`.\n+      * Macros can have attributes.\n+      * Macros can expand to items with attributes.\n+      * Macros can expand to multiple items.\n+      * The `asm!` macro is feature-gated (`#[feature(asm)]`).\n+      * Comments may be nested.\n+      * Values automatically coerce to trait objects they implement, without\n+        an explicit `as`.\n+      * Enum discriminants are no longer an entire word but as small as needed to\n+        contain all the variants. The `repr` attribute can be used to override\n+        the discriminant size, as in `#[repr(int)]` for integer-sized, and\n+        `#[repr(C)]` to match C enums.\n+      * Non-string literals are not allowed in attributes (they never worked).\n+      * The FFI now supports variadic functions.\n+      * Octal numeric literals, as in `0o7777`.\n+      * The `concat!` syntax extension performs compile-time string concatenation.\n+      * The `#[fixed_stack_segment]` and `#[rust_stack]` attributes have been\n+        removed as Rust no longer uses segmented stacks.\n+      * Non-ascii identifiers are feature-gated (`#[feature(non_ascii_idents)]`).\n+      * Ignoring all fields of an enum variant or tuple-struct is done with `..`,\n+        not `*`; ignoring remaining fields of a struct is also done with `..`,\n+        not `_`; ignoring a slice of a vector is done with `..`, not `.._`.\n+      * `rustc` supports the \"win64\" calling convention via `extern \"win64\"`.\n+      * `rustc` supports the \"system\" calling convention, which defaults to the\n+        preferred convention for the target platform, \"stdcall\" on 32-bit Windows,\n+        \"C\" elsewhere.\n+      * The `type_overflow` lint (default: warn) checks literals for overflow.\n+      * The `unsafe_block` lint (default: allow) checks for usage of `unsafe`.\n+      * The `attribute_usage` lint (default: warn) warns about unknown\n+        attributes.\n+      * The `unknown_features` lint (default: warn) warns about unknown\n+        feature gates.\n+      * The `dead_code` lint (default: warn) checks for dead code.\n+      * Rust libraries can be linked statically to one another\n+      * `#[link_args]` is behind the `link_args` feature gate.\n+      * Native libraries are now linked with `#[link(name = \"foo\")]`\n+      * Native libraries can be statically linked to a rust crate\n+        (`#[link(name = \"foo\", kind = \"static\")]`).\n+      * Native OS X frameworks are now officially supported\n+        (`#[link(name = \"foo\", kind = \"framework\")]`).\n+      * The `#[thread_local]` attribute creates thread-local (not task-local)\n+        variables. Currently behind the `thread_local` feature gate.\n+      * The `return` keyword may be used in closures.\n+      * Types that can be copied via a memcpy implement the `Pod` kind.\n+\n+   * Libraries\n+      * std: The `option` and `result` API's have been overhauled to make them\n+        simpler, more consistent, and more composable.\n+      * std: The entire `std::io` module has been replaced with one that is\n+        more comprehensive and that properly interfaces with the underlying\n+        scheduler. File, TCP, UDP, Unix sockets, pipes, and timers are all\n+        implemented.\n+      * std: `io::util` contains a number of useful implementations of\n+        `Reader` and `Writer`, including `NullReader`, `NullWriter`,\n+        `ZeroReader`, `TeeReader`.\n+      * std: The reference counted pointer type `extra::rc` moved into std.\n+      * std: The `Gc` type in the `gc` module will replace `@` (it is currently\n+        just a wrapper around it).\n+      * std: `fmt::Default` can be implemented for any type to provide default\n+        formatting to the `format!` macro, as in `format!(\"{}\", myfoo)`.\n+      * std: The `rand` API continues to be tweaked.\n+      * std: Functions dealing with type size and alignment have moved from the\n+        `sys` module to the `mem` module.\n+      * std: The `path` module was written and API changed.\n+      * std: `str::from_utf8` has been changed to cast instead of allocate.\n+      * std: `starts_with` and `ends_with` methods added to vectors via the\n+        `ImmutableEqVector` trait, which is in the prelude.\n+      * std: Vectors can be indexed with the `get_opt` method, which returns `None`\n+        if the index is out of bounds.\n+      * std: Task failure no longer propagates between tasks, as the model was\n+        complex, expensive, and incompatible with thread-based tasks.\n+      * std: The `Any` type can be used for dynamic typing.\n+      * std: `~Any` can be passed to the `fail!` macro and retrieved via\n+        `task::try`.\n+      * std: Methods that produce iterators generally do not have an `_iter`\n+        suffix now.\n+      * std: `cell::Cell` and `cell::RefCell` can be used to introduce mutability\n+        roots (mutable fields, etc.). Use instead of e.g. `@mut`.\n+      * std: `util::ignore` renamed to `prelude::drop`.\n+      * std: Slices have `sort` and `sort_by` methods via the `MutableVector`\n+        trait.\n+      * std: `vec::raw` has seen a lot of cleanup and API changes.\n+      * std: The standard library no longer includes any C++ code, and very\n+        minimal C, eliminating the dependency on libstdc++.\n+      * std: Runtime scheduling and I/O functionality has been factored out into\n+        extensible interfaces and is now implemented by two different crates:\n+        libnative, for native threading and I/O; and libgreen, for green threading\n+        and I/O. This paves the way for using the standard library in more limited\n+        embeded environments.\n+      * std: The `comm` module has been rewritten to be much faster, have a\n+        simpler, more consistent API, and to work for both native and green\n+        threading.\n+      * std: All libuv dependencies have been moved into the rustuv crate.\n+      * native: New implementations of runtime scheduling on top of OS threads.\n+      * native: New native implementations of TCP, UDP, file I/O, process spawning,\n+        and other I/O.\n+      * green: The green thread scheduler and message passing types are almost\n+        entirely lock-free.\n+      * extra: The `flatpipes` module had bitrotted and was removed.\n+      * extra: All crypto functions have been removed and Rust now has a policy of\n+        not reimplementing crypto in the standard library. In the future crypto\n+        will be provided by external crates with bindings to established libraries.\n+      * extra: `c_vec` has been modernized.\n+      * extra: The `sort` module has been removed. Use the `sort` method on\n+        mutable slices.\n \n    * Tooling\n-      * The `rust` and `rusti` commands have been removed, due to lack of maintenance.\n+      * The `rust` and `rusti` commands have been removed, due to lack of\n+        maintenance.\n+      * `rustdoc` was completely rewritten.\n+      * `rustdoc` can test code examples in documentation.\n+      * `rustpkg` can test packages with the argument, 'test'.\n+      * `rustpkg` supports arbitrary dependencies, including C libraries.\n+      * `rustc`'s support for generating debug info is improved again.\n+      * `rustc` has better error reporting for unbalanced delimiters.\n+      * `rustc`'s JIT support was removed due to bitrot.\n+      * Executables and static libraries can be built with LTO (-Z lto)\n+      * `rustc` adds a `--dep-info` flag for communicating dependencies to\n+        build tools.\n \n Version 0.8 (September 2013)\n --------------------------"}]}