{"sha": "f6ca5aa19a567f6cb95a0c568cac148f8eb443fb", "node_id": "C_kwDOAAsO6NoAKGY2Y2E1YWExOWE1NjdmNmNiOTVhMGM1NjhjYWMxNDhmOGViNDQzZmI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-04T23:02:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-04T23:02:05Z"}, "message": "Rollup merge of #103977 - TimNN:memory-effects, r=nikic\n\nLLVM 16: Switch to using MemoryEffects\n\nThis adapts the compiler to the changes required by https://github.com/llvm/llvm-project/commit/304f1d59ca41872c094def3aee0a8689df6aa398.\n\nAFAICT, `WriteOnly` isn't used by the compiler, all `ReadNone` uses were migrated and the remaining use of `ReadOnly` is only for function parameters.\n\nTo simplify the FFI, this PR uses an enum to represent `MemoryEffects` across the FFI boundary, which then gets mapped to the matching static factory method when constructing the attribute.\n\nFixes #103961.\n\n`@rustbot` label +llvm-main\n\nr? `@nikic`", "tree": {"sha": "678187a31916d945048be88350736a4ecb158fcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/678187a31916d945048be88350736a4ecb158fcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjZZntCRBK7hj4Ov3rIwAAH7EIAJlq8WTC1/165NvGpGA9FIeX\nN/tJzCKF47JWLNChCNvHdE0hKxV7G58UzrG2chUQzarFBVQDIL0h4mY6jCLnQcWw\nR5dtc+pPMpSgfKpMFR6c5pupRj98XNyHY5OMa03Jk5n4SdXxI2lYlB5G7byBI2xa\npG4wSqy5JWk0efr9Q/2/QT63oB25DbeH+m6RXHojRky9nABhSW3tF6FkERle0Yv6\ns+ljdNNxNyAM7CfSr3IshXfWafSf7KUqJ3ww+cm293IP5yIIDHQKPryGiyLnRv1e\nllm/I6sHoZe9FCX+9tMCE5BgndRbdIzTia6MKmljePTxttfic6JzgSTGIIEJrXU=\n=xT0b\n-----END PGP SIGNATURE-----\n", "payload": "tree 678187a31916d945048be88350736a4ecb158fcf\nparent b1a47d2fd95e64227c07b428ba2e5170fac368f8\nparent c15cfc91c4567c4f079c2543dd395908f30f4911\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667602925 +0100\ncommitter GitHub <noreply@github.com> 1667602925 +0100\n\nRollup merge of #103977 - TimNN:memory-effects, r=nikic\n\nLLVM 16: Switch to using MemoryEffects\n\nThis adapts the compiler to the changes required by https://github.com/llvm/llvm-project/commit/304f1d59ca41872c094def3aee0a8689df6aa398.\n\nAFAICT, `WriteOnly` isn't used by the compiler, all `ReadNone` uses were migrated and the remaining use of `ReadOnly` is only for function parameters.\n\nTo simplify the FFI, this PR uses an enum to represent `MemoryEffects` across the FFI boundary, which then gets mapped to the matching static factory method when constructing the attribute.\n\nFixes #103961.\n\n`@rustbot` label +llvm-main\n\nr? `@nikic`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb", "html_url": "https://github.com/rust-lang/rust/commit/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1a47d2fd95e64227c07b428ba2e5170fac368f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1a47d2fd95e64227c07b428ba2e5170fac368f8", "html_url": "https://github.com/rust-lang/rust/commit/b1a47d2fd95e64227c07b428ba2e5170fac368f8"}, {"sha": "c15cfc91c4567c4f079c2543dd395908f30f4911", "url": "https://api.github.com/repos/rust-lang/rust/commits/c15cfc91c4567c4f079c2543dd395908f30f4911", "html_url": "https://github.com/rust-lang/rust/commit/c15cfc91c4567c4f079c2543dd395908f30f4911"}], "stats": {"total": 79, "additions": 67, "deletions": 12}, "files": [{"sha": "219a4f8fa89594a909cfb3936557c950067fdac9", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=f6ca5aa19a567f6cb95a0c568cac148f8eb443fb", "patch": "@@ -285,13 +285,13 @@ impl<'ll, 'tcx> AsmBuilderMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n         let mut attrs = SmallVec::<[_; 2]>::new();\n         if options.contains(InlineAsmOptions::PURE) {\n             if options.contains(InlineAsmOptions::NOMEM) {\n-                attrs.push(llvm::AttributeKind::ReadNone.create_attr(self.cx.llcx));\n+                attrs.push(llvm::MemoryEffects::None.create_attr(self.cx.llcx));\n             } else if options.contains(InlineAsmOptions::READONLY) {\n-                attrs.push(llvm::AttributeKind::ReadOnly.create_attr(self.cx.llcx));\n+                attrs.push(llvm::MemoryEffects::ReadOnly.create_attr(self.cx.llcx));\n             }\n             attrs.push(llvm::AttributeKind::WillReturn.create_attr(self.cx.llcx));\n         } else if options.contains(InlineAsmOptions::NOMEM) {\n-            attrs.push(llvm::AttributeKind::InaccessibleMemOnly.create_attr(self.cx.llcx));\n+            attrs.push(llvm::MemoryEffects::InaccessibleMemOnly.create_attr(self.cx.llcx));\n         } else {\n             // LLVM doesn't have an attribute to represent ReadOnly + SideEffect\n         }"}, {"sha": "d96da5cc11d1f72fba53e7116afb7810ca11d39c", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=f6ca5aa19a567f6cb95a0c568cac148f8eb443fb", "patch": "@@ -13,7 +13,7 @@ use smallvec::SmallVec;\n \n use crate::attributes;\n use crate::llvm::AttributePlace::Function;\n-use crate::llvm::{self, AllocKindFlags, Attribute, AttributeKind, AttributePlace};\n+use crate::llvm::{self, AllocKindFlags, Attribute, AttributeKind, AttributePlace, MemoryEffects};\n use crate::llvm_util;\n pub use rustc_attr::{InlineAttr, InstructionSetAttr, OptimizeAttr};\n \n@@ -303,10 +303,10 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n         to_add.push(AttributeKind::ReturnsTwice.create_attr(cx.llcx));\n     }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::FFI_PURE) {\n-        to_add.push(AttributeKind::ReadOnly.create_attr(cx.llcx));\n+        to_add.push(MemoryEffects::ReadOnly.create_attr(cx.llcx));\n     }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::FFI_CONST) {\n-        to_add.push(AttributeKind::ReadNone.create_attr(cx.llcx));\n+        to_add.push(MemoryEffects::None.create_attr(cx.llcx));\n     }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NAKED) {\n         to_add.push(AttributeKind::Naked.create_attr(cx.llcx));"}, {"sha": "e2d0390821d1eb780fb387f5412cc225f325586c", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=f6ca5aa19a567f6cb95a0c568cac148f8eb443fb", "patch": "@@ -183,7 +183,6 @@ pub enum AttributeKind {\n     OptimizeNone = 24,\n     ReturnsTwice = 25,\n     ReadNone = 26,\n-    InaccessibleMemOnly = 27,\n     SanitizeHWAddress = 28,\n     WillReturn = 29,\n     StackProtectReq = 30,\n@@ -590,6 +589,15 @@ pub enum ChecksumKind {\n     SHA256,\n }\n \n+/// LLVMRustMemoryEffects\n+#[derive(Copy, Clone)]\n+#[repr(C)]\n+pub enum MemoryEffects {\n+    None,\n+    ReadOnly,\n+    InaccessibleMemOnly,\n+}\n+\n extern \"C\" {\n     type Opaque;\n }\n@@ -1175,6 +1183,7 @@ extern \"C\" {\n     pub fn LLVMRustCreateUWTableAttr(C: &Context, async_: bool) -> &Attribute;\n     pub fn LLVMRustCreateAllocSizeAttr(C: &Context, size_arg: u32) -> &Attribute;\n     pub fn LLVMRustCreateAllocKindAttr(C: &Context, size_arg: u64) -> &Attribute;\n+    pub fn LLVMRustCreateMemoryEffectsAttr(C: &Context, effects: MemoryEffects) -> &Attribute;\n \n     // Operations on functions\n     pub fn LLVMRustGetOrInsertFunction<'a>("}, {"sha": "f820e7523712ce541fc32cb1a71dd69623e8a639", "filename": "compiler/rustc_codegen_llvm/src/llvm/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs?ref=f6ca5aa19a567f6cb95a0c568cac148f8eb443fb", "patch": "@@ -185,6 +185,13 @@ impl AttributeKind {\n     }\n }\n \n+impl MemoryEffects {\n+    /// Create an LLVM Attribute with these memory effects.\n+    pub fn create_attr(self, llcx: &Context) -> &Attribute {\n+        unsafe { LLVMRustCreateMemoryEffectsAttr(llcx, self) }\n+    }\n+}\n+\n pub fn set_section(llglobal: &Value, section_name: &str) {\n     let section_name_cstr = CString::new(section_name).expect(\"unexpected CString error\");\n     unsafe {"}, {"sha": "727cfc4416ee94889cef6eb11cc01f98e120ab45", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=f6ca5aa19a567f6cb95a0c568cac148f8eb443fb", "patch": "@@ -76,7 +76,6 @@ enum LLVMRustAttribute {\n   OptimizeNone = 24,\n   ReturnsTwice = 25,\n   ReadNone = 26,\n-  InaccessibleMemOnly = 27,\n   SanitizeHWAddress = 28,\n   WillReturn = 29,\n   StackProtectReq = 30,"}, {"sha": "0d9b5a57b69a2dc719d72ebd7792af14d4b2da9b", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=f6ca5aa19a567f6cb95a0c568cac148f8eb443fb", "patch": "@@ -8,6 +8,9 @@\n #include \"llvm/IR/Intrinsics.h\"\n #include \"llvm/IR/IntrinsicsARM.h\"\n #include \"llvm/IR/Mangler.h\"\n+#if LLVM_VERSION_GE(16, 0)\n+#include \"llvm/IR/ModRef.h\"\n+#endif\n #include \"llvm/Object/Archive.h\"\n #include \"llvm/Object/COFFImportFile.h\"\n #include \"llvm/Object/ObjectFile.h\"\n@@ -213,8 +216,6 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::ReturnsTwice;\n   case ReadNone:\n     return Attribute::ReadNone;\n-  case InaccessibleMemOnly:\n-    return Attribute::InaccessibleMemOnly;\n   case SanitizeHWAddress:\n     return Attribute::SanitizeHWAddress;\n   case WillReturn:\n@@ -379,6 +380,43 @@ extern \"C\" LLVMAttributeRef LLVMRustCreateAllocKindAttr(LLVMContextRef C, uint64\n #endif\n }\n \n+// Simplified representation of `MemoryEffects` across the FFI boundary.\n+//\n+// Each variant corresponds to one of the static factory methods on `MemoryEffects`.\n+enum class LLVMRustMemoryEffects {\n+  None,\n+  ReadOnly,\n+  InaccessibleMemOnly,\n+};\n+\n+extern \"C\" LLVMAttributeRef LLVMRustCreateMemoryEffectsAttr(LLVMContextRef C,\n+                                                            LLVMRustMemoryEffects Effects) {\n+#if LLVM_VERSION_GE(16, 0)\n+  switch (Effects) {\n+    case LLVMRustMemoryEffects::None:\n+      return wrap(Attribute::getWithMemoryEffects(*unwrap(C), MemoryEffects::none()));\n+    case LLVMRustMemoryEffects::ReadOnly:\n+      return wrap(Attribute::getWithMemoryEffects(*unwrap(C), MemoryEffects::readOnly()));\n+    case LLVMRustMemoryEffects::InaccessibleMemOnly:\n+      return wrap(Attribute::getWithMemoryEffects(*unwrap(C),\n+                                                  MemoryEffects::inaccessibleMemOnly()));\n+    default:\n+      report_fatal_error(\"bad MemoryEffects.\");\n+  }\n+#else\n+  switch (Effects) {\n+    case LLVMRustMemoryEffects::None:\n+      return wrap(Attribute::get(*unwrap(C), Attribute::ReadNone));\n+    case LLVMRustMemoryEffects::ReadOnly:\n+      return wrap(Attribute::get(*unwrap(C), Attribute::ReadOnly));\n+    case LLVMRustMemoryEffects::InaccessibleMemOnly:\n+      return wrap(Attribute::get(*unwrap(C), Attribute::InaccessibleMemOnly));\n+    default:\n+      report_fatal_error(\"bad MemoryEffects.\");\n+  }\n+#endif\n+}\n+\n // Enable a fast-math flag\n //\n // https://llvm.org/docs/LangRef.html#fast-math-flags"}, {"sha": "93720503480881a3ccf0df16ae6e81bdeea30a90", "filename": "src/test/codegen/ffi-const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/src%2Ftest%2Fcodegen%2Fffi-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/src%2Ftest%2Fcodegen%2Fffi-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fffi-const.rs?ref=f6ca5aa19a567f6cb95a0c568cac148f8eb443fb", "patch": "@@ -7,6 +7,7 @@ pub fn bar() { unsafe { foo() } }\n extern \"C\" {\n     // CHECK-LABEL: declare{{.*}}void @foo()\n     // CHECK-SAME: [[ATTRS:#[0-9]+]]\n-    // CHECK-DAG: attributes [[ATTRS]] = { {{.*}}readnone{{.*}} }\n+    // The attribute changed from `readnone` to `memory(none)` with LLVM 16.0.\n+    // CHECK-DAG: attributes [[ATTRS]] = { {{.*}}{{readnone|memory\\(none\\)}}{{.*}} }\n     #[ffi_const] pub fn foo();\n }"}, {"sha": "2ed735813582f67138a6e92689509d06ae6c6b75", "filename": "src/test/codegen/ffi-pure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/src%2Ftest%2Fcodegen%2Fffi-pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ca5aa19a567f6cb95a0c568cac148f8eb443fb/src%2Ftest%2Fcodegen%2Fffi-pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fffi-pure.rs?ref=f6ca5aa19a567f6cb95a0c568cac148f8eb443fb", "patch": "@@ -7,6 +7,7 @@ pub fn bar() { unsafe { foo() } }\n extern \"C\" {\n     // CHECK-LABEL: declare{{.*}}void @foo()\n     // CHECK-SAME: [[ATTRS:#[0-9]+]]\n-    // CHECK-DAG: attributes [[ATTRS]] = { {{.*}}readonly{{.*}} }\n+    // The attribute changed from `readonly` to `memory(read)` with LLVM 16.0.\n+    // CHECK-DAG: attributes [[ATTRS]] = { {{.*}}{{readonly|memory\\(read\\)}}{{.*}} }\n     #[ffi_pure] pub fn foo();\n }"}]}