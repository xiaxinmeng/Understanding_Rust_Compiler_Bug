{"sha": "a7c049df289eb90f8e691c27276cd70f913cb3c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YzA0OWRmMjg5ZWI5MGY4ZTY5MWMyNzI3NmNkNzBmOTEzY2IzYzM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-02-21T14:30:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-21T14:30:39Z"}, "message": "Merge pull request #1564 from Manishearth/cleanup\n\nCleanup test suite", "tree": {"sha": "cdfa011ac90055bc918aaea577b2ea72fb9b4e0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdfa011ac90055bc918aaea577b2ea72fb9b4e0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7c049df289eb90f8e691c27276cd70f913cb3c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c049df289eb90f8e691c27276cd70f913cb3c3", "html_url": "https://github.com/rust-lang/rust/commit/a7c049df289eb90f8e691c27276cd70f913cb3c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7c049df289eb90f8e691c27276cd70f913cb3c3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d032b8967cdff300bd48ea983b0ac2a9d207bc57", "url": "https://api.github.com/repos/rust-lang/rust/commits/d032b8967cdff300bd48ea983b0ac2a9d207bc57", "html_url": "https://github.com/rust-lang/rust/commit/d032b8967cdff300bd48ea983b0ac2a9d207bc57"}, {"sha": "25e230419c642e925f168e473f6bec7c34bdf252", "url": "https://api.github.com/repos/rust-lang/rust/commits/25e230419c642e925f168e473f6bec7c34bdf252", "html_url": "https://github.com/rust-lang/rust/commit/25e230419c642e925f168e473f6bec7c34bdf252"}], "stats": {"total": 1204, "additions": 169, "deletions": 1035}, "files": [{"sha": "34a0773df27f6e52fba7e4eacbfa54ff1d51cc08", "filename": "tests/compile-fail/methods.rs", "status": "removed", "additions": 0, "deletions": 689, "changes": 689, "blob_url": "https://github.com/rust-lang/rust/blob/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=d032b8967cdff300bd48ea983b0ac2a9d207bc57", "patch": "@@ -1,689 +0,0 @@\n-#![feature(plugin)]\n-#![feature(const_fn)]\n-#![plugin(clippy)]\n-\n-#![deny(clippy, clippy_pedantic)]\n-#![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default, new_without_default_derive, missing_docs_in_private_items)]\n-\n-use std::collections::BTreeMap;\n-use std::collections::HashMap;\n-use std::collections::HashSet;\n-use std::collections::VecDeque;\n-use std::ops::Mul;\n-use std::iter::FromIterator;\n-\n-struct T;\n-\n-impl T {\n-    fn add(self, other: T) -> T { self }\n-    fn drop(&mut self) { }\n-\n-    fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n-    fn div(self) -> T { self } // no error, different #arguments\n-    fn rem(self, other: T) { } // no error, wrong return type\n-\n-    fn into_u32(self) -> u32 { 0 } // fine\n-    fn into_u16(&self) -> u16 { 0 }\n-\n-    fn to_something(self) -> u32 { 0 }\n-\n-    fn new(self) {}\n-}\n-\n-struct Lt<'a> {\n-    foo: &'a u32,\n-}\n-\n-impl<'a> Lt<'a> {\n-    // The lifetime is different, but that\u2019s irrelevant, see #734\n-    #[allow(needless_lifetimes)]\n-    pub fn new<'b>(s: &'b str) -> Lt<'b> { unimplemented!() }\n-}\n-\n-struct Lt2<'a> {\n-    foo: &'a u32,\n-}\n-\n-impl<'a> Lt2<'a> {\n-    // The lifetime is different, but that\u2019s irrelevant, see #734\n-    pub fn new(s: &str) -> Lt2 { unimplemented!() }\n-}\n-\n-struct Lt3<'a> {\n-    foo: &'a u32,\n-}\n-\n-impl<'a> Lt3<'a> {\n-    // The lifetime is different, but that\u2019s irrelevant, see #734\n-    pub fn new() -> Lt3<'static> { unimplemented!() }\n-}\n-\n-#[derive(Clone,Copy)]\n-struct U;\n-\n-impl U {\n-    fn new() -> Self { U }\n-    fn to_something(self) -> u32 { 0 } // ok because U is Copy\n-}\n-\n-struct V<T> {\n-    _dummy: T\n-}\n-\n-impl<T> V<T> {\n-    fn new() -> Option<V<T>> { None }\n-}\n-\n-impl Mul<T> for T {\n-    type Output = T;\n-    fn mul(self, other: T) -> T { self } // no error, obviously\n-}\n-\n-/// Utility macro to test linting behavior in `option_methods()`\n-/// The lints included in `option_methods()` should not lint if the call to map is partially\n-/// within a macro\n-macro_rules! opt_map {\n-    ($opt:expr, $map:expr) => {($opt).map($map)};\n-}\n-\n-/// Checks implementation of the following lints:\n-/// * `OPTION_MAP_UNWRAP_OR`\n-/// * `OPTION_MAP_UNWRAP_OR_ELSE`\n-fn option_methods() {\n-    let opt = Some(1);\n-\n-    // Check OPTION_MAP_UNWRAP_OR\n-    // single line case\n-    let _ = opt.map(|x| x + 1)\n-\n-               .unwrap_or(0); // should lint even though this call is on a separate line\n-    // multi line cases\n-    let _ = opt.map(|x| {\n-                        x + 1\n-                    }\n-              ).unwrap_or(0);\n-    let _ = opt.map(|x| x + 1)\n-               .unwrap_or({\n-                    0\n-                });\n-    // macro case\n-    let _ = opt_map!(opt, |x| x + 1).unwrap_or(0); // should not lint\n-\n-    // Check OPTION_MAP_UNWRAP_OR_ELSE\n-    // single line case\n-    let _ = opt.map(|x| x + 1)\n-\n-               .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n-    // multi line cases\n-    let _ = opt.map(|x| {\n-                        x + 1\n-                    }\n-              ).unwrap_or_else(|| 0);\n-    let _ = opt.map(|x| x + 1)\n-               .unwrap_or_else(||\n-                    0\n-                );\n-    // macro case\n-    let _ = opt_map!(opt, |x| x + 1).unwrap_or_else(|| 0); // should not lint\n-}\n-\n-/// Struct to generate false positives for things with .iter()\n-#[derive(Copy, Clone)]\n-struct HasIter;\n-\n-impl HasIter {\n-    fn iter(self) -> IteratorFalsePositives {\n-        IteratorFalsePositives { foo: 0 }\n-    }\n-\n-    fn iter_mut(self) -> IteratorFalsePositives {\n-        IteratorFalsePositives { foo: 0 }\n-    }\n-}\n-\n-/// Struct to generate false positive for Iterator-based lints\n-#[derive(Copy, Clone)]\n-struct IteratorFalsePositives {\n-    foo: u32,\n-}\n-\n-impl IteratorFalsePositives {\n-    fn filter(self) -> IteratorFalsePositives {\n-        self\n-    }\n-\n-    fn next(self) -> IteratorFalsePositives {\n-        self\n-    }\n-\n-    fn find(self) -> Option<u32> {\n-        Some(self.foo)\n-    }\n-\n-    fn position(self) -> Option<u32> {\n-        Some(self.foo)\n-    }\n-\n-    fn rposition(self) -> Option<u32> {\n-        Some(self.foo)\n-    }\n-\n-    fn nth(self, n: usize) -> Option<u32> {\n-        Some(self.foo)\n-    }\n-\n-    fn skip(self, _: usize) -> IteratorFalsePositives {\n-        self\n-    }\n-}\n-\n-#[derive(Copy, Clone)]\n-struct HasChars;\n-\n-impl HasChars {\n-    fn chars(self) -> std::str::Chars<'static> {\n-        \"HasChars\".chars()\n-    }\n-}\n-\n-/// Checks implementation of `FILTER_NEXT` lint\n-fn filter_next() {\n-    let v = vec![3, 2, 1, 0, -1, -2, -3];\n-\n-    // check single-line case\n-    let _ = v.iter().filter(|&x| *x < 0).next();\n-\n-\n-\n-    // check multi-line case\n-    let _ = v.iter().filter(|&x| {\n-                                *x < 0\n-                            }\n-                   ).next();\n-\n-    // check that we don't lint if the caller is not an Iterator\n-    let foo = IteratorFalsePositives { foo: 0 };\n-    let _ = foo.filter().next();\n-}\n-\n-/// Checks implementation of `SEARCH_IS_SOME` lint\n-fn search_is_some() {\n-    let v = vec![3, 2, 1, 0, -1, -2, -3];\n-\n-    // check `find().is_some()`, single-line\n-    let _ = v.iter().find(|&x| *x < 0).is_some();\n-\n-\n-\n-    // check `find().is_some()`, multi-line\n-    let _ = v.iter().find(|&x| {\n-                              *x < 0\n-                          }\n-                   ).is_some();\n-\n-    // check `position().is_some()`, single-line\n-    let _ = v.iter().position(|&x| x < 0).is_some();\n-\n-\n-\n-    // check `position().is_some()`, multi-line\n-    let _ = v.iter().position(|&x| {\n-                                  x < 0\n-                              }\n-                   ).is_some();\n-\n-    // check `rposition().is_some()`, single-line\n-    let _ = v.iter().rposition(|&x| x < 0).is_some();\n-\n-\n-\n-    // check `rposition().is_some()`, multi-line\n-    let _ = v.iter().rposition(|&x| {\n-                                   x < 0\n-                               }\n-                   ).is_some();\n-\n-    // check that we don't lint if the caller is not an Iterator\n-    let foo = IteratorFalsePositives { foo: 0 };\n-    let _ = foo.find().is_some();\n-    let _ = foo.position().is_some();\n-    let _ = foo.rposition().is_some();\n-}\n-\n-/// Checks implementation of the `OR_FUN_CALL` lint\n-fn or_fun_call() {\n-    struct Foo;\n-\n-    impl Foo {\n-        fn new() -> Foo { Foo }\n-    }\n-\n-    enum Enum {\n-        A(i32),\n-    }\n-\n-    const fn make_const(i: i32) -> i32 { i }\n-\n-    fn make<T>() -> T { unimplemented!(); }\n-\n-    let with_enum = Some(Enum::A(1));\n-    with_enum.unwrap_or(Enum::A(5));\n-\n-    let with_const_fn = Some(1);\n-    with_const_fn.unwrap_or(make_const(5));\n-\n-    let with_constructor = Some(vec![1]);\n-    with_constructor.unwrap_or(make());\n-\n-\n-\n-\n-    let with_new = Some(vec![1]);\n-    with_new.unwrap_or(Vec::new());\n-\n-\n-\n-\n-    let with_const_args = Some(vec![1]);\n-    with_const_args.unwrap_or(Vec::with_capacity(12));\n-\n-\n-\n-\n-    let with_err : Result<_, ()> = Ok(vec![1]);\n-    with_err.unwrap_or(make());\n-\n-\n-\n-\n-    let with_err_args : Result<_, ()> = Ok(vec![1]);\n-    with_err_args.unwrap_or(Vec::with_capacity(12));\n-\n-\n-\n-\n-    let with_default_trait = Some(1);\n-    with_default_trait.unwrap_or(Default::default());\n-\n-\n-\n-\n-    let with_default_type = Some(1);\n-    with_default_type.unwrap_or(u64::default());\n-\n-\n-\n-\n-    let with_vec = Some(vec![1]);\n-    with_vec.unwrap_or(vec![]);\n-\n-\n-    // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n-\n-    let without_default = Some(Foo);\n-    without_default.unwrap_or(Foo::new());\n-\n-\n-\n-\n-    let mut map = HashMap::<u64, String>::new();\n-    map.entry(42).or_insert(String::new());\n-\n-\n-\n-\n-    let mut btree = BTreeMap::<u64, String>::new();\n-    btree.entry(42).or_insert(String::new());\n-\n-\n-\n-\n-    let stringy = Some(String::from(\"\"));\n-    let _ = stringy.unwrap_or(\"\".to_owned());\n-\n-\n-\n-}\n-\n-/// Checks implementation of `ITER_NTH` lint\n-fn iter_nth() {\n-    let mut some_vec = vec![0, 1, 2, 3];\n-    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n-    let mut some_vec_deque: VecDeque<_> = some_vec.iter().cloned().collect();\n-\n-    {\n-        // Make sure we lint `.iter()` for relevant types\n-        let bad_vec = some_vec.iter().nth(3);\n-\n-        let bad_slice = &some_vec[..].iter().nth(3);\n-\n-        let bad_boxed_slice = boxed_slice.iter().nth(3);\n-\n-        let bad_vec_deque = some_vec_deque.iter().nth(3);\n-\n-    }\n-\n-    {\n-        // Make sure we lint `.iter_mut()` for relevant types\n-        let bad_vec = some_vec.iter_mut().nth(3);\n-\n-    }\n-    {\n-        let bad_slice = &some_vec[..].iter_mut().nth(3);\n-\n-    }\n-    {\n-        let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n-\n-    }\n-\n-    // Make sure we don't lint for non-relevant types\n-    let false_positive = HasIter;\n-    let ok = false_positive.iter().nth(3);\n-    let ok_mut = false_positive.iter_mut().nth(3);\n-}\n-\n-/// Checks implementation of `ITER_SKIP_NEXT` lint\n-fn iter_skip_next() {\n-    let mut some_vec = vec![0, 1, 2, 3];\n-\n-    let _ = some_vec.iter().skip(42).next();\n-\n-\n-    let _ = some_vec.iter().cycle().skip(42).next();\n-\n-\n-    let _ = (1..10).skip(10).next();\n-\n-\n-    let _ = &some_vec[..].iter().skip(3).next();\n-\n-\n-    let foo = IteratorFalsePositives { foo : 0 };\n-    let _ = foo.skip(42).next();\n-    let _ = foo.filter().skip(42).next();\n-}\n-\n-struct GetFalsePositive {\n-    arr: [u32; 3],\n-}\n-\n-impl GetFalsePositive {\n-    fn get(&self, pos: usize) -> Option<&u32> { self.arr.get(pos) }\n-    fn get_mut(&mut self, pos: usize) -> Option<&mut u32> { self.arr.get_mut(pos) }\n-}\n-\n-/// Checks implementation of `GET_UNWRAP` lint\n-fn get_unwrap() {\n-    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n-    let mut some_slice = &mut [0, 1, 2, 3];\n-    let mut some_vec = vec![0, 1, 2, 3];\n-    let mut some_vecdeque: VecDeque<_> = some_vec.iter().cloned().collect();\n-    let mut some_hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n-    let mut some_btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n-    let mut false_positive = GetFalsePositive { arr: [0, 1, 2] };\n-\n-    { // Test `get().unwrap()`\n-        let _ = boxed_slice.get(1).unwrap();\n-\n-\n-\n-        let _ = some_slice.get(0).unwrap();\n-\n-\n-\n-        let _ = some_vec.get(0).unwrap();\n-\n-\n-\n-        let _ = some_vecdeque.get(0).unwrap();\n-\n-\n-\n-        let _ = some_hashmap.get(&1).unwrap();\n-\n-\n-\n-        let _ = some_btreemap.get(&1).unwrap();\n-\n-\n-\n-\n-        let _ = false_positive.get(0).unwrap();\n-    }\n-\n-    { // Test `get_mut().unwrap()`\n-        *boxed_slice.get_mut(0).unwrap() = 1;\n-\n-\n-\n-        *some_slice.get_mut(0).unwrap() = 1;\n-\n-\n-\n-        *some_vec.get_mut(0).unwrap() = 1;\n-\n-\n-\n-        *some_vecdeque.get_mut(0).unwrap() = 1;\n-\n-\n-\n-\n-        // Check false positives\n-        *some_hashmap.get_mut(&1).unwrap() = 'b';\n-        *some_btreemap.get_mut(&1).unwrap() = 'b';\n-        *false_positive.get_mut(0).unwrap() = 1;\n-    }\n-}\n-\n-\n-#[allow(similar_names)]\n-fn main() {\n-    use std::io;\n-\n-    let opt = Some(0);\n-    let _ = opt.unwrap();\n-\n-    let res: Result<i32, ()> = Ok(0);\n-    let _ = res.unwrap();\n-\n-    res.ok().expect(\"disaster!\");\n-    // the following should not warn, since `expect` isn't implemented unless\n-    // the error type implements `Debug`\n-    let res2: Result<i32, MyError> = Ok(0);\n-    res2.ok().expect(\"oh noes!\");\n-    let res3: Result<u32, MyErrorWithParam<u8>>= Ok(0);\n-    res3.ok().expect(\"whoof\");\n-    let res4: Result<u32, io::Error> = Ok(0);\n-    res4.ok().expect(\"argh\");\n-    let res5: io::Result<u32> = Ok(0);\n-    res5.ok().expect(\"oops\");\n-    let res6: Result<u32, &str> = Ok(0);\n-    res6.ok().expect(\"meh\");\n-}\n-\n-struct MyError(()); // doesn't implement Debug\n-\n-#[derive(Debug)]\n-struct MyErrorWithParam<T> {\n-    x: T\n-}\n-\n-#[allow(unnecessary_operation)]\n-fn starts_with() {\n-    \"\".chars().next() == Some(' ');\n-\n-\n-\n-\n-    Some(' ') != \"\".chars().next();\n-\n-\n-\n-}\n-\n-fn str_extend_chars() {\n-    let abc = \"abc\";\n-    let def = String::from(\"def\");\n-    let mut s = String::new();\n-\n-    s.push_str(abc);\n-    s.extend(abc.chars());\n-\n-\n-\n-\n-    s.push_str(\"abc\");\n-    s.extend(\"abc\".chars());\n-\n-\n-\n-\n-    s.push_str(&def);\n-    s.extend(def.chars());\n-\n-\n-\n-\n-    s.extend(abc.chars().skip(1));\n-    s.extend(\"abc\".chars().skip(1));\n-    s.extend(['a', 'b', 'c'].iter());\n-\n-    let f = HasChars;\n-    s.extend(f.chars());\n-}\n-\n-fn clone_on_copy() {\n-    42.clone();\n-\n-\n-    vec![1].clone(); // ok, not a Copy type\n-    Some(vec![1]).clone(); // ok, not a Copy type\n-    (&42).clone();\n-\n-\n-}\n-\n-fn clone_on_copy_generic<T: Copy>(t: T) {\n-    t.clone();\n-\n-\n-    Some(t).clone();\n-\n-\n-}\n-\n-fn clone_on_double_ref() {\n-    let x = vec![1];\n-    let y = &&x;\n-    let z: &Vec<_> = y.clone();\n-\n-\n-    println!(\"{:p} {:p}\",*y, z);\n-}\n-\n-fn single_char_pattern() {\n-    let x = \"foo\";\n-    x.split(\"x\");\n-\n-\n-\n-\n-    x.split(\"xx\");\n-\n-    x.split('x');\n-\n-    let y = \"x\";\n-    x.split(y);\n-\n-    // Not yet testing for multi-byte characters\n-    // Changing `r.len() == 1` to `r.chars().count() == 1` in `lint_single_char_pattern`\n-    // should have done this but produced an ICE\n-    //\n-    // We may not want to suggest changing these anyway\n-    // See: https://github.com/Manishearth/rust-clippy/issues/650#issuecomment-184328984\n-    x.split(\"\u00df\");\n-    x.split(\"\u211d\");\n-    x.split(\"\ud83d\udca3\");\n-    // Can't use this lint for unicode code points which don't fit in a char\n-    x.split(\"\u2764\ufe0f\");\n-\n-    x.contains(\"x\");\n-\n-\n-\n-    x.starts_with(\"x\");\n-\n-\n-\n-    x.ends_with(\"x\");\n-\n-\n-\n-    x.find(\"x\");\n-\n-\n-\n-    x.rfind(\"x\");\n-\n-\n-\n-    x.rsplit(\"x\");\n-\n-\n-\n-    x.split_terminator(\"x\");\n-\n-\n-\n-    x.rsplit_terminator(\"x\");\n-\n-\n-\n-    x.splitn(0, \"x\");\n-\n-\n-\n-    x.rsplitn(0, \"x\");\n-\n-\n-\n-    x.matches(\"x\");\n-\n-\n-\n-    x.rmatches(\"x\");\n-\n-\n-\n-    x.match_indices(\"x\");\n-\n-\n-\n-    x.rmatch_indices(\"x\");\n-\n-\n-\n-    x.trim_left_matches(\"x\");\n-\n-\n-\n-    x.trim_right_matches(\"x\");\n-\n-\n-\n-\n-    let h = HashSet::<String>::new();\n-    h.contains(\"X\"); // should not warn\n-}\n-\n-#[allow(result_unwrap_used)]\n-fn temporary_cstring() {\n-    use std::ffi::CString;\n-\n-    CString::new(\"foo\").unwrap().as_ptr();\n-\n-\n-\n-}"}, {"sha": "649a5ecb812d95ab830855d55389b31d756fa6dc", "filename": "tests/compile-fail/non_expressive_names.rs", "status": "removed", "additions": 0, "deletions": 150, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnon_expressive_names.rs?ref=d032b8967cdff300bd48ea983b0ac2a9d207bc57", "patch": "@@ -1,150 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-#![deny(clippy,similar_names)]\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-#![allow(unused)]\n-\n-\n-struct Foo {\n-    apple: i32,\n-    bpple: i32,\n-}\n-\n-fn main() {\n-    let specter: i32;\n-    let spectre: i32;\n-\n-    let apple: i32;\n-\n-    let bpple: i32;\n-\n-    let cpple: i32;\n-\n-\n-    let a_bar: i32;\n-    let b_bar: i32;\n-    let c_bar: i32;\n-\n-    let items = [5];\n-    for item in &items {\n-        loop {}\n-    }\n-\n-    let foo_x: i32;\n-    let foo_y: i32;\n-\n-    let rhs: i32;\n-    let lhs: i32;\n-\n-    let bla_rhs: i32;\n-    let bla_lhs: i32;\n-\n-    let blubrhs: i32;\n-    let blublhs: i32;\n-\n-    let blubx: i32;\n-    let bluby: i32;\n-\n-\n-    let cake: i32;\n-    let cakes: i32;\n-    let coke: i32;\n-\n-    match 5 {\n-        cheese @ 1 => {},\n-        rabbit => panic!(),\n-    }\n-    let cheese: i32;\n-    match (42, 43) {\n-        (cheese1, 1) => {},\n-        (cheese2, 2) => panic!(),\n-        _ => println!(\"\"),\n-    }\n-    let ipv4: i32;\n-    let ipv6: i32;\n-    let abcd1: i32;\n-    let abdc2: i32;\n-    let xyz1abc: i32;\n-    let xyz2abc: i32;\n-    let xyzeabc: i32;\n-\n-    let parser: i32;\n-    let parsed: i32;\n-    let parsee: i32;\n-\n-\n-    let setter: i32;\n-    let getter: i32;\n-    let tx1: i32;\n-    let rx1: i32;\n-    let tx_cake: i32;\n-    let rx_cake: i32;\n-}\n-\n-fn foo() {\n-    let Foo { apple, bpple } = unimplemented!();\n-    let Foo { apple: spring,\n-        bpple: sprang } = unimplemented!();\n-}\n-\n-#[derive(Clone, Debug)]\n-enum MaybeInst {\n-    Split,\n-    Split1(usize),\n-    Split2(usize),\n-}\n-\n-struct InstSplit {\n-    uiae: usize,\n-}\n-\n-impl MaybeInst {\n-    fn fill(&mut self) {\n-        let filled = match *self {\n-            MaybeInst::Split1(goto1) => panic!(1),\n-            MaybeInst::Split2(goto2) => panic!(2),\n-            _ => unimplemented!(),\n-        };\n-        unimplemented!()\n-    }\n-}\n-\n-fn bla() {\n-    let a: i32;\n-    let (b, c, d): (i32, i64, i16);\n-    {\n-        {\n-            let cdefg: i32;\n-            let blar: i32;\n-        }\n-        {\n-            let e: i32;\n-\n-        }\n-        {\n-            let e: i32;\n-\n-            let f: i32;\n-\n-        }\n-        match 5 {\n-            1 => println!(\"\"),\n-            e => panic!(),\n-\n-        }\n-        match 5 {\n-            1 => println!(\"\"),\n-            _ => panic!(),\n-        }\n-    }\n-}"}, {"sha": "f893d99491bee50b7c902c40003ac9e250ca9ead", "filename": "tests/compile-fail/strings.rs", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fcompile-fail%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fcompile-fail%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstrings.rs?ref=d032b8967cdff300bd48ea983b0ac2a9d207bc57", "patch": "@@ -1,73 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#[deny(string_add)]\n-#[allow(string_add_assign)]\n-fn add_only() { // ignores assignment distinction\n-    let mut x = \"\".to_owned();\n-\n-    for _ in 1..3 {\n-        x = x + \".\";\n-    }\n-\n-    let y = \"\".to_owned();\n-    let z = y + \"...\";\n-\n-    assert_eq!(&x, &z);\n-}\n-\n-#[deny(string_add_assign)]\n-fn add_assign_only() {\n-    let mut x = \"\".to_owned();\n-\n-    for _ in 1..3 {\n-        x = x + \".\";\n-    }\n-\n-    let y = \"\".to_owned();\n-    let z = y + \"...\";\n-\n-    assert_eq!(&x, &z);\n-}\n-\n-#[deny(string_add, string_add_assign)]\n-fn both() {\n-    let mut x = \"\".to_owned();\n-\n-    for _ in 1..3 {\n-        x = x + \".\";\n-    }\n-\n-    let y = \"\".to_owned();\n-    let z = y + \"...\";\n-\n-    assert_eq!(&x, &z);\n-}\n-\n-#[allow(dead_code, unused_variables)]\n-#[deny(string_lit_as_bytes)]\n-fn str_lit_as_bytes() {\n-    let bs = \"hello there\".as_bytes();\n-\n-\n-\n-\n-    // no warning, because this cannot be written as a byte string literal:\n-    let ubs = \"\u2603\".as_bytes();\n-\n-    let strify = stringify!(foobar).as_bytes();\n-}\n-\n-fn main() {\n-    add_only();\n-    add_assign_only();\n-    both();\n-\n-    // the add is only caught for `String`\n-    let mut x = 1;\n-    ; x = x + 1;\n-\n-\n-\n-    assert_eq!(2, x);\n-}"}, {"sha": "95478dda0d32ea964463b03ef7b1853b4edbbfe8", "filename": "tests/compile-fail/swap.rs", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fcompile-fail%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fcompile-fail%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fswap.rs?ref=d032b8967cdff300bd48ea983b0ac2a9d207bc57", "patch": "@@ -1,84 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![deny(clippy)]\n-#![allow(blacklisted_name, unused_assignments)]\n-\n-struct Foo(u32);\n-\n-fn array() {\n-    let mut foo = [1, 2];\n-    let temp = foo[0];\n-    foo[0] = foo[1];\n-    foo[1] = temp;\n-\n-\n-\n-\n-    foo.swap(0, 1);\n-}\n-\n-fn slice() {\n-    let foo = &mut [1, 2];\n-    let temp = foo[0];\n-    foo[0] = foo[1];\n-    foo[1] = temp;\n-\n-\n-\n-\n-    foo.swap(0, 1);\n-}\n-\n-fn vec() {\n-    let mut foo = vec![1, 2];\n-    let temp = foo[0];\n-    foo[0] = foo[1];\n-    foo[1] = temp;\n-\n-\n-\n-\n-    foo.swap(0, 1);\n-}\n-\n-fn main() {\n-    array();\n-    slice();\n-    vec();\n-\n-    let mut a = 42;\n-    let mut b = 1337;\n-\n-    a = b;\n-    b = a;\n-\n-\n-\n-\n-\n-    ; let t = a;\n-    a = b;\n-    b = t;\n-\n-\n-\n-\n-\n-    let mut c = Foo(42);\n-\n-    c.0 = a;\n-    a = c.0;\n-\n-\n-\n-\n-\n-    ; let t = c.0;\n-    c.0 = a;\n-    a = t;\n-\n-\n-\n-\n-}"}, {"sha": "7920bd35589da9fe21b8bd22f98431949d299fbe", "filename": "tests/ui-posix/conf_bad_toml.stderr", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fui-posix%2Fconf_bad_toml.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fui-posix%2Fconf_bad_toml.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-posix%2Fconf_bad_toml.stderr?ref=d032b8967cdff300bd48ea983b0ac2a9d207bc57", "patch": "@@ -1,4 +0,0 @@\n-error: error reading Clippy's configuration file: No such file or directory (os error 2)\n-\n-error: aborting due to previous error\n-"}, {"sha": "7920bd35589da9fe21b8bd22f98431949d299fbe", "filename": "tests/ui-posix/conf_bad_type.stderr", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fui-posix%2Fconf_bad_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fui-posix%2Fconf_bad_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-posix%2Fconf_bad_type.stderr?ref=d032b8967cdff300bd48ea983b0ac2a9d207bc57", "patch": "@@ -1,4 +0,0 @@\n-error: error reading Clippy's configuration file: No such file or directory (os error 2)\n-\n-error: aborting due to previous error\n-"}, {"sha": "d6aa69c7e8d3ecec149a1c3880b20ab18c8cabc2", "filename": "tests/ui-posix/update-all-references.sh", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui-posix%2Fupdate-all-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui-posix%2Fupdate-all-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-posix%2Fupdate-all-references.sh?ref=a7c049df289eb90f8e691c27276cd70f913cb3c3", "patch": "@@ -0,0 +1,28 @@\n+#!/bin/bash\n+#\n+# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# A script to update the references for all tests. The idea is that\n+# you do a run, which will generate files in the build directory\n+# containing the (normalized) actual output of the compiler. You then\n+# run this script, which will copy those files over. If you find\n+# yourself manually editing a foo.stderr file, you're doing it wrong.\n+#\n+# See all `update-references.sh`, if you just want to update a single test.\n+\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" ]]; then\n+    echo \"usage: $0\"\n+fi\n+\n+BUILD_DIR=$PWD/target/debug/test_build_base\n+MY_DIR=$(dirname $0)\n+cd $MY_DIR\n+find . -name '*.rs' | xargs ./update-references.sh $BUILD_DIR"}, {"sha": "aa99d35f7aa779924dd17c96675ee50449f3343f", "filename": "tests/ui-posix/update-references.sh", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui-posix%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui-posix%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-posix%2Fupdate-references.sh?ref=a7c049df289eb90f8e691c27276cd70f913cb3c3", "patch": "@@ -0,0 +1,50 @@\n+#!/bin/bash\n+#\n+# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# A script to update the references for particular tests. The idea is\n+# that you do a run, which will generate files in the build directory\n+# containing the (normalized) actual output of the compiler. This\n+# script will then copy that output and replace the \"expected output\"\n+# files. You can then commit the changes.\n+#\n+# If you find yourself manually editing a foo.stderr file, you're\n+# doing it wrong.\n+\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" == \"\" ]]; then\n+    echo \"usage: $0 <build-directory> <relative-path-to-rs-files>\"\n+    echo \"\"\n+    echo \"For example:\"\n+    echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui *.rs */*.rs\"\n+fi\n+\n+MYDIR=$(dirname $0)\n+\n+BUILD_DIR=\"$1\"\n+shift\n+\n+while [[ \"$1\" != \"\" ]]; do\n+    STDERR_NAME=\"${1/%.rs/.stderr}\"\n+    STDOUT_NAME=\"${1/%.rs/.stdout}\"\n+    shift\n+    if [ -f $BUILD_DIR/$STDOUT_NAME ] && \\\n+           ! (diff $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME >& /dev/null); then\n+        echo updating $MYDIR/$STDOUT_NAME\n+        cp $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME\n+    fi\n+    if [ -f $BUILD_DIR/$STDERR_NAME ] && \\\n+           ! (diff $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME >& /dev/null); then\n+        echo updating $MYDIR/$STDERR_NAME\n+        cp $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME\n+    fi\n+done\n+\n+"}, {"sha": "b5ea6d96ef58a5be9dafcb54b158bc3b4af272d8", "filename": "tests/ui-windows/conf_bad_toml.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fui-windows%2Fconf_bad_toml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fui-windows%2Fconf_bad_toml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-windows%2Fconf_bad_toml.rs?ref=d032b8967cdff300bd48ea983b0ac2a9d207bc57", "patch": "@@ -1,6 +0,0 @@\n-// error-pattern: error reading Clippy's configuration file\n-\n-#![feature(plugin)]\n-#![plugin(clippy(conf_file=\"./tests/compile-fail/conf_bad_toml.toml\"))]\n-\n-fn main() {}"}, {"sha": "f21ae524f5eaafee1d82f7a66edbcb23a42594e8", "filename": "tests/ui-windows/conf_bad_toml.stderr", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fui-windows%2Fconf_bad_toml.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fui-windows%2Fconf_bad_toml.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-windows%2Fconf_bad_toml.stderr?ref=d032b8967cdff300bd48ea983b0ac2a9d207bc57", "patch": "@@ -1,4 +0,0 @@\n-error: error reading Clippy's configuration file: The system cannot find the file specified. (os error 2)\n-\n-error: aborting due to previous error\n-"}, {"sha": "823e01a33b96172e13855c6c023599f2852e71f9", "filename": "tests/ui-windows/conf_bad_toml.toml", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fui-windows%2Fconf_bad_toml.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fui-windows%2Fconf_bad_toml.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-windows%2Fconf_bad_toml.toml?ref=d032b8967cdff300bd48ea983b0ac2a9d207bc57", "patch": "@@ -1,2 +0,0 @@\n-fn this_is_obviously(not: a, toml: file) {\n-}"}, {"sha": "8dc3e4ec2e675c61c5c8bffa38b4521db5cdb4a6", "filename": "tests/ui-windows/conf_bad_type.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fui-windows%2Fconf_bad_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fui-windows%2Fconf_bad_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-windows%2Fconf_bad_type.rs?ref=d032b8967cdff300bd48ea983b0ac2a9d207bc57", "patch": "@@ -1,6 +0,0 @@\n-// error-pattern: error reading Clippy's configuration file: `blacklisted-names` is expected to be a `Vec < String >` but is a `integer`\n-\n-#![feature(plugin)]\n-#![plugin(clippy(conf_file=\"./tests/compile-fail/conf_bad_type.toml\"))]\n-\n-fn main() {}"}, {"sha": "f21ae524f5eaafee1d82f7a66edbcb23a42594e8", "filename": "tests/ui-windows/conf_bad_type.stderr", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fui-windows%2Fconf_bad_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fui-windows%2Fconf_bad_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-windows%2Fconf_bad_type.stderr?ref=d032b8967cdff300bd48ea983b0ac2a9d207bc57", "patch": "@@ -1,4 +0,0 @@\n-error: error reading Clippy's configuration file: The system cannot find the file specified. (os error 2)\n-\n-error: aborting due to previous error\n-"}, {"sha": "168675394d7f45124940fcfa3433aab378c1fbd8", "filename": "tests/ui-windows/conf_bad_type.toml", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fui-windows%2Fconf_bad_type.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d032b8967cdff300bd48ea983b0ac2a9d207bc57/tests%2Fui-windows%2Fconf_bad_type.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-windows%2Fconf_bad_type.toml?ref=d032b8967cdff300bd48ea983b0ac2a9d207bc57", "patch": "@@ -1 +0,0 @@\n-blacklisted-names = 42"}, {"sha": "d6aa69c7e8d3ecec149a1c3880b20ab18c8cabc2", "filename": "tests/ui-windows/update-all-references.sh", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui-windows%2Fupdate-all-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui-windows%2Fupdate-all-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-windows%2Fupdate-all-references.sh?ref=a7c049df289eb90f8e691c27276cd70f913cb3c3", "patch": "@@ -0,0 +1,28 @@\n+#!/bin/bash\n+#\n+# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# A script to update the references for all tests. The idea is that\n+# you do a run, which will generate files in the build directory\n+# containing the (normalized) actual output of the compiler. You then\n+# run this script, which will copy those files over. If you find\n+# yourself manually editing a foo.stderr file, you're doing it wrong.\n+#\n+# See all `update-references.sh`, if you just want to update a single test.\n+\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" ]]; then\n+    echo \"usage: $0\"\n+fi\n+\n+BUILD_DIR=$PWD/target/debug/test_build_base\n+MY_DIR=$(dirname $0)\n+cd $MY_DIR\n+find . -name '*.rs' | xargs ./update-references.sh $BUILD_DIR"}, {"sha": "aa99d35f7aa779924dd17c96675ee50449f3343f", "filename": "tests/ui-windows/update-references.sh", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui-windows%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui-windows%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-windows%2Fupdate-references.sh?ref=a7c049df289eb90f8e691c27276cd70f913cb3c3", "patch": "@@ -0,0 +1,50 @@\n+#!/bin/bash\n+#\n+# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# A script to update the references for particular tests. The idea is\n+# that you do a run, which will generate files in the build directory\n+# containing the (normalized) actual output of the compiler. This\n+# script will then copy that output and replace the \"expected output\"\n+# files. You can then commit the changes.\n+#\n+# If you find yourself manually editing a foo.stderr file, you're\n+# doing it wrong.\n+\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" == \"\" ]]; then\n+    echo \"usage: $0 <build-directory> <relative-path-to-rs-files>\"\n+    echo \"\"\n+    echo \"For example:\"\n+    echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui *.rs */*.rs\"\n+fi\n+\n+MYDIR=$(dirname $0)\n+\n+BUILD_DIR=\"$1\"\n+shift\n+\n+while [[ \"$1\" != \"\" ]]; do\n+    STDERR_NAME=\"${1/%.rs/.stderr}\"\n+    STDOUT_NAME=\"${1/%.rs/.stdout}\"\n+    shift\n+    if [ -f $BUILD_DIR/$STDOUT_NAME ] && \\\n+           ! (diff $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME >& /dev/null); then\n+        echo updating $MYDIR/$STDOUT_NAME\n+        cp $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME\n+    fi\n+    if [ -f $BUILD_DIR/$STDERR_NAME ] && \\\n+           ! (diff $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME >& /dev/null); then\n+        echo updating $MYDIR/$STDERR_NAME\n+        cp $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME\n+    fi\n+done\n+\n+"}, {"sha": "22cbfca759e997f832c37589b14dc6279e8ed3f4", "filename": "tests/ui/conf_bad_toml.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui%2Fconf_bad_toml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui%2Fconf_bad_toml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.rs?ref=a7c049df289eb90f8e691c27276cd70f913cb3c3", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: error reading Clippy's configuration file\n \n #![feature(plugin)]\n-#![plugin(clippy(conf_file=\"./tests/compile-fail/conf_bad_toml.toml\"))]\n+#![plugin(clippy(conf_file=\"./tests/ui/conf_bad_toml.toml\"))]\n \n fn main() {}", "previous_filename": "tests/ui-posix/conf_bad_toml.rs"}, {"sha": "a56cfea266c4e7dd1627ae1cb30467891aa04b34", "filename": "tests/ui/conf_bad_toml.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui%2Fconf_bad_toml.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui%2Fconf_bad_toml.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.stderr?ref=a7c049df289eb90f8e691c27276cd70f913cb3c3", "patch": "@@ -0,0 +1,4 @@\n+error: error reading Clippy's configuration file: expected `=`, but found `t`\n+\n+error: aborting due to previous error\n+"}, {"sha": "823e01a33b96172e13855c6c023599f2852e71f9", "filename": "tests/ui/conf_bad_toml.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui%2Fconf_bad_toml.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui%2Fconf_bad_toml.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.toml?ref=a7c049df289eb90f8e691c27276cd70f913cb3c3", "previous_filename": "tests/ui-posix/conf_bad_toml.toml"}, {"sha": "d5cca60a30134ddd0749433be0a57bcb4e676813", "filename": "tests/ui/conf_bad_type.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui%2Fconf_bad_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui%2Fconf_bad_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.rs?ref=a7c049df289eb90f8e691c27276cd70f913cb3c3", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: error reading Clippy's configuration file: `blacklisted-names` is expected to be a `Vec < String >` but is a `integer`\n \n #![feature(plugin)]\n-#![plugin(clippy(conf_file=\"./tests/compile-fail/conf_bad_type.toml\"))]\n+#![plugin(clippy(conf_file=\"./tests/ui/conf_bad_type.toml\"))]\n \n fn main() {}", "previous_filename": "tests/ui-posix/conf_bad_type.rs"}, {"sha": "015d9ca2a3a8ae0b7d988f68699b1fe9033c9153", "filename": "tests/ui/conf_bad_type.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui%2Fconf_bad_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui%2Fconf_bad_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.stderr?ref=a7c049df289eb90f8e691c27276cd70f913cb3c3", "patch": "@@ -0,0 +1,4 @@\n+error: error reading Clippy's configuration file: `blacklisted-names` is expected to be a `Vec < String >` but is a `integer`\n+\n+error: aborting due to previous error\n+"}, {"sha": "168675394d7f45124940fcfa3433aab378c1fbd8", "filename": "tests/ui/conf_bad_type.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui%2Fconf_bad_type.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui%2Fconf_bad_type.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.toml?ref=a7c049df289eb90f8e691c27276cd70f913cb3c3", "previous_filename": "tests/ui-posix/conf_bad_type.toml"}, {"sha": "d6aa69c7e8d3ecec149a1c3880b20ab18c8cabc2", "filename": "tests/ui/update-all-references.sh", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui%2Fupdate-all-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a7c049df289eb90f8e691c27276cd70f913cb3c3/tests%2Fui%2Fupdate-all-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fupdate-all-references.sh?ref=a7c049df289eb90f8e691c27276cd70f913cb3c3", "patch": "@@ -18,14 +18,11 @@\n #\n # See all `update-references.sh`, if you just want to update a single test.\n \n-if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" != \"\" ]]; then\n-    echo \"usage: $0 <build-directory>\"\n-    echo \"\"\n-    echo \"For example:\"\n-    echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui\"\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" ]]; then\n+    echo \"usage: $0\"\n fi\n \n-BUILD_DIR=$PWD/$1\n+BUILD_DIR=$PWD/target/debug/test_build_base\n MY_DIR=$(dirname $0)\n cd $MY_DIR\n find . -name '*.rs' | xargs ./update-references.sh $BUILD_DIR"}]}