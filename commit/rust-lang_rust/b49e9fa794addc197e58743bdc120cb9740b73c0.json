{"sha": "b49e9fa794addc197e58743bdc120cb9740b73c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OWU5ZmE3OTRhZGRjMTk3ZTU4NzQzYmRjMTIwY2I5NzQwYjczYzA=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-04T21:05:31Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-05T03:09:51Z"}, "message": "forbid cast as bool\n\nThis is currently unsound since `bool` is represented as `i8`. It will\nbecome sound when `bool` is stored as `i8` but always used as `i1`.\n\nHowever, the current behaviour will always be identical to `x & 1 != 0`,\nso there's no need for it. It's also surprising, since `x != 0` is the\nexpected behaviour.\n\nCloses #7311", "tree": {"sha": "871cb27ab7a5fe68de7aced2ce22794bb9011f1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/871cb27ab7a5fe68de7aced2ce22794bb9011f1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b49e9fa794addc197e58743bdc120cb9740b73c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b49e9fa794addc197e58743bdc120cb9740b73c0", "html_url": "https://github.com/rust-lang/rust/commit/b49e9fa794addc197e58743bdc120cb9740b73c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b49e9fa794addc197e58743bdc120cb9740b73c0/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8827b94e5b02d8f0c9d1d9858f3e387e55711dd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4", "html_url": "https://github.com/rust-lang/rust/commit/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "d8d54e20e97b8991bf45ed38e47652644794a080", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b49e9fa794addc197e58743bdc120cb9740b73c0/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b49e9fa794addc197e58743bdc120cb9740b73c0/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=b49e9fa794addc197e58743bdc120cb9740b73c0", "patch": "@@ -410,7 +410,7 @@ pub mod reader {\n         }\n \n         fn read_bool(&mut self) -> bool {\n-            doc_as_u8(self.next_doc(EsBool)) as bool\n+            doc_as_u8(self.next_doc(EsBool)) != 0\n         }\n \n         fn read_f64(&mut self) -> f64 {"}, {"sha": "9b5ba00a34a7e177e91ea1f3553d2dd671c568b7", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b49e9fa794addc197e58743bdc120cb9740b73c0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b49e9fa794addc197e58743bdc120cb9740b73c0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b49e9fa794addc197e58743bdc120cb9740b73c0", "patch": "@@ -2219,7 +2219,7 @@ pub fn trans_item(ccx: @mut CrateContext, item: &ast::item) {\n               }\n               let v = ccx.const_values.get_copy(&item.id);\n               unsafe {\n-                  if !(llvm::LLVMConstIntGetZExtValue(v) as bool) {\n+                  if !(llvm::LLVMConstIntGetZExtValue(v) != 0) {\n                       ccx.sess.span_fatal(expr.span, \"static assertion failed\");\n                   }\n               }"}, {"sha": "0e335cf3f145d48e79f5328879a26bd0aeee67ae", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b49e9fa794addc197e58743bdc120cb9740b73c0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b49e9fa794addc197e58743bdc120cb9740b73c0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=b49e9fa794addc197e58743bdc120cb9740b73c0", "patch": "@@ -2696,6 +2696,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                         }, t_e, None);\n                     }\n \n+                    let t1 = structurally_resolved_type(fcx, e.span, t_1);\n                     let te = structurally_resolved_type(fcx, e.span, t_e);\n                     let t_1_is_char = type_is_char(fcx, expr.span, t_1);\n \n@@ -2710,6 +2711,9 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                                 fmt!(\"only `u8` can be cast as `char`, not `%s`\", actual)\n                             }, t_e, None);\n                         }\n+                    } else if ty::get(t1).sty == ty::ty_bool {\n+                        fcx.tcx().sess.span_err(expr.span,\n+                                                \"cannot cast as `bool`, compare with zero instead\");\n                     } else if type_is_region_ptr(fcx, expr.span, t_e) &&\n                         type_is_unsafe_ptr(fcx, expr.span, t_1) {\n "}, {"sha": "6d68f56b2b18a6c234ec19ba1c0ca7871e16c352", "filename": "src/test/compile-fail/cast-as-bool.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b49e9fa794addc197e58743bdc120cb9740b73c0/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b49e9fa794addc197e58743bdc120cb9740b73c0/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs?ref=b49e9fa794addc197e58743bdc120cb9740b73c0", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: cannot cast as `bool`, compare with zero instead\n+fn main() { let u = (5 as bool); }"}, {"sha": "8cf7c2eec999319aaece88d29abe31574c238b60", "filename": "src/test/run-pass/cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b49e9fa794addc197e58743bdc120cb9740b73c0/src%2Ftest%2Frun-pass%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b49e9fa794addc197e58743bdc120cb9740b73c0/src%2Ftest%2Frun-pass%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast.rs?ref=b49e9fa794addc197e58743bdc120cb9740b73c0", "patch": "@@ -18,6 +18,5 @@ pub fn main() {\n     assert_eq!(i as u8, 'Q' as u8);\n     assert_eq!(i as u8 as i8, 'Q' as u8 as i8);\n     assert_eq!(0x51u8 as char, 'Q');\n-    assert_eq!(true, 1 as bool);\n     assert_eq!(0 as u32, false as u32);\n }"}, {"sha": "663f36ce6739523c13e9e5e133dc6234c8044f75", "filename": "src/test/run-pass/supported-cast.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b49e9fa794addc197e58743bdc120cb9740b73c0/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b49e9fa794addc197e58743bdc120cb9740b73c0/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsupported-cast.rs?ref=b49e9fa794addc197e58743bdc120cb9740b73c0", "patch": "@@ -26,7 +26,6 @@ pub fn main() {\n   info!(1 as int);\n   info!(1 as uint);\n   info!(1 as float);\n-  info!(1 as bool);\n   info!(1 as *libc::FILE);\n   info!(1 as i8);\n   info!(1 as i16);\n@@ -42,7 +41,6 @@ pub fn main() {\n   info!(1u as int);\n   info!(1u as uint);\n   info!(1u as float);\n-  info!(1u as bool);\n   info!(1u as *libc::FILE);\n   info!(1u as i8);\n   info!(1u as i16);\n@@ -58,7 +56,6 @@ pub fn main() {\n   info!(1i8 as int);\n   info!(1i8 as uint);\n   info!(1i8 as float);\n-  info!(1i8 as bool);\n   info!(1i8 as *libc::FILE);\n   info!(1i8 as i8);\n   info!(1i8 as i16);\n@@ -74,7 +71,6 @@ pub fn main() {\n   info!(1u8 as int);\n   info!(1u8 as uint);\n   info!(1u8 as float);\n-  info!(1u8 as bool);\n   info!(1u8 as *libc::FILE);\n   info!(1u8 as i8);\n   info!(1u8 as i16);\n@@ -90,7 +86,6 @@ pub fn main() {\n   info!(1i16 as int);\n   info!(1i16 as uint);\n   info!(1i16 as float);\n-  info!(1i16 as bool);\n   info!(1i16 as *libc::FILE);\n   info!(1i16 as i8);\n   info!(1i16 as i16);\n@@ -106,7 +101,6 @@ pub fn main() {\n   info!(1u16 as int);\n   info!(1u16 as uint);\n   info!(1u16 as float);\n-  info!(1u16 as bool);\n   info!(1u16 as *libc::FILE);\n   info!(1u16 as i8);\n   info!(1u16 as i16);\n@@ -122,7 +116,6 @@ pub fn main() {\n   info!(1i32 as int);\n   info!(1i32 as uint);\n   info!(1i32 as float);\n-  info!(1i32 as bool);\n   info!(1i32 as *libc::FILE);\n   info!(1i32 as i8);\n   info!(1i32 as i16);\n@@ -138,7 +131,6 @@ pub fn main() {\n   info!(1u32 as int);\n   info!(1u32 as uint);\n   info!(1u32 as float);\n-  info!(1u32 as bool);\n   info!(1u32 as *libc::FILE);\n   info!(1u32 as i8);\n   info!(1u32 as i16);\n@@ -154,7 +146,6 @@ pub fn main() {\n   info!(1i64 as int);\n   info!(1i64 as uint);\n   info!(1i64 as float);\n-  info!(1i64 as bool);\n   info!(1i64 as *libc::FILE);\n   info!(1i64 as i8);\n   info!(1i64 as i16);\n@@ -170,7 +161,6 @@ pub fn main() {\n   info!(1u64 as int);\n   info!(1u64 as uint);\n   info!(1u64 as float);\n-  info!(1u64 as bool);\n   info!(1u64 as *libc::FILE);\n   info!(1u64 as i8);\n   info!(1u64 as i16);\n@@ -186,7 +176,6 @@ pub fn main() {\n   info!(1u64 as int);\n   info!(1u64 as uint);\n   info!(1u64 as float);\n-  info!(1u64 as bool);\n   info!(1u64 as *libc::FILE);\n   info!(1u64 as i8);\n   info!(1u64 as i16);\n@@ -202,7 +191,6 @@ pub fn main() {\n   info!(true as int);\n   info!(true as uint);\n   info!(true as float);\n-  info!(true as bool);\n   info!(true as *libc::FILE);\n   info!(true as i8);\n   info!(true as i16);\n@@ -218,7 +206,6 @@ pub fn main() {\n   info!(1. as int);\n   info!(1. as uint);\n   info!(1. as float);\n-  info!(1. as bool);\n   info!(1. as i8);\n   info!(1. as i16);\n   info!(1. as i32);\n@@ -233,7 +220,6 @@ pub fn main() {\n   info!(1f32 as int);\n   info!(1f32 as uint);\n   info!(1f32 as float);\n-  info!(1f32 as bool);\n   info!(1f32 as i8);\n   info!(1f32 as i16);\n   info!(1f32 as i32);\n@@ -248,7 +234,6 @@ pub fn main() {\n   info!(1f64 as int);\n   info!(1f64 as uint);\n   info!(1f64 as float);\n-  info!(1f64 as bool);\n   info!(1f64 as i8);\n   info!(1f64 as i16);\n   info!(1f64 as i32);"}]}