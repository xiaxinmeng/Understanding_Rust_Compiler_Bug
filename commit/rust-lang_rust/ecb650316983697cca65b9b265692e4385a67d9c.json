{"sha": "ecb650316983697cca65b9b265692e4385a67d9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYjY1MDMxNjk4MzY5N2NjYTY1YjliMjY1NjkyZTQzODVhNjdkOWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-13T03:37:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-13T03:37:03Z"}, "message": "Rollup merge of #58200 - RalfJung:str-as-mut-ptr, r=SimonSapin\n\nfix str mutating through a ptr derived from &self\n\nFound by Miri: In `get_unchecked_mut` (also used by the checked variants internally) uses `str::as_ptr` to create a mutable reference, but `as_ptr` takes `&self`.  This means the mutable references we return here got created from a shared reference, which violates the shared-references-are-read-only discipline!\n\nFor this by using a newly introduced `as_mut_ptr` instead.", "tree": {"sha": "dc518ed04ee8f7339609b579cdc543a56bf31da2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc518ed04ee8f7339609b579cdc543a56bf31da2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecb650316983697cca65b9b265692e4385a67d9c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcY5DfCRBK7hj4Ov3rIwAAdHIIACK5NO6ZgMWS0Aosan+j0dgk\npQMBVpAZhuh+0nXHKBxTvZirEJUert2N2wAIsUkY+Xv/6rAwMoHrSMVA18pqcWi2\nZwijHSwNiwM86wGrnjrdEFR8mDUaTRqw6Nb44FKJzpCOXJybqDOXWDjhON1ZqNw8\nuvBr7rBk9lMOFQnS4Yx9yYa2dU7PY1/KrQseki43T5ptBfZscLG1SRGwU0fUewNk\n0XWDXX+TNiULrQ933z9wziMDMSawglF3OJGwhvQZi49lV6xTca6U98MZ9UPFotBV\n0N1kgUbUdFPbLd3oSLV0NNbnqXEZU/x58K6MQSSdZ4TNouM0BspB94qzSqQmrbY=\n=8OqO\n-----END PGP SIGNATURE-----\n", "payload": "tree dc518ed04ee8f7339609b579cdc543a56bf31da2\nparent 856e41142cad7b3ce2494ee8edd7d1c1d1e58a44\nparent 66c894e07f95a324a39bb4c281c8db4c8842689b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550029023 +0100\ncommitter GitHub <noreply@github.com> 1550029023 +0100\n\nRollup merge of #58200 - RalfJung:str-as-mut-ptr, r=SimonSapin\n\nfix str mutating through a ptr derived from &self\n\nFound by Miri: In `get_unchecked_mut` (also used by the checked variants internally) uses `str::as_ptr` to create a mutable reference, but `as_ptr` takes `&self`.  This means the mutable references we return here got created from a shared reference, which violates the shared-references-are-read-only discipline!\n\nFor this by using a newly introduced `as_mut_ptr` instead.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecb650316983697cca65b9b265692e4385a67d9c", "html_url": "https://github.com/rust-lang/rust/commit/ecb650316983697cca65b9b265692e4385a67d9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecb650316983697cca65b9b265692e4385a67d9c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "856e41142cad7b3ce2494ee8edd7d1c1d1e58a44", "url": "https://api.github.com/repos/rust-lang/rust/commits/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44", "html_url": "https://github.com/rust-lang/rust/commit/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44"}, {"sha": "66c894e07f95a324a39bb4c281c8db4c8842689b", "url": "https://api.github.com/repos/rust-lang/rust/commits/66c894e07f95a324a39bb4c281c8db4c8842689b", "html_url": "https://github.com/rust-lang/rust/commit/66c894e07f95a324a39bb4c281c8db4c8842689b"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "76a45e53684bd93b723f263ba1224623fcc74ceb", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ecb650316983697cca65b9b265692e4385a67d9c/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb650316983697cca65b9b265692e4385a67d9c/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=ecb650316983697cca65b9b265692e4385a67d9c", "patch": "@@ -1741,9 +1741,9 @@ mod traits {\n         }\n         #[inline]\n         unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n-            let ptr = slice.as_ptr().add(self.start);\n+            let ptr = slice.as_mut_ptr().add(self.start);\n             let len = self.end - self.start;\n-            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr as *mut u8, len))\n+            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr, len))\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n@@ -1805,8 +1805,8 @@ mod traits {\n         }\n         #[inline]\n         unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n-            let ptr = slice.as_ptr();\n-            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr as *mut u8, self.end))\n+            let ptr = slice.as_mut_ptr();\n+            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr, self.end))\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n@@ -1867,9 +1867,9 @@ mod traits {\n         }\n         #[inline]\n         unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n-            let ptr = slice.as_ptr().add(self.start);\n+            let ptr = slice.as_mut_ptr().add(self.start);\n             let len = slice.len() - self.start;\n-            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr as *mut u8, len))\n+            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr, len))\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n@@ -2197,6 +2197,22 @@ impl str {\n         self as *const str as *const u8\n     }\n \n+    /// Converts a mutable string slice to a raw pointer.\n+    ///\n+    /// As string slices are a slice of bytes, the raw pointer points to a\n+    /// [`u8`]. This pointer will be pointing to the first byte of the string\n+    /// slice.\n+    ///\n+    /// It is your responsibility to make sure that the string slice only gets\n+    /// modified in a way that it remains valid UTF-8.\n+    ///\n+    /// [`u8`]: primitive.u8.html\n+    #[unstable(feature = \"str_as_mut_ptr\", issue = \"58215\")]\n+    #[inline]\n+    pub fn as_mut_ptr(&mut self) -> *mut u8 {\n+        self as *mut str as *mut u8\n+    }\n+\n     /// Returns a subslice of `str`.\n     ///\n     /// This is the non-panicking alternative to indexing the `str`. Returns\n@@ -2484,7 +2500,7 @@ impl str {\n         // is_char_boundary checks that the index is in [0, .len()]\n         if self.is_char_boundary(mid) {\n             let len = self.len();\n-            let ptr = self.as_ptr() as *mut u8;\n+            let ptr = self.as_mut_ptr();\n             unsafe {\n                 (from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr, mid)),\n                  from_utf8_unchecked_mut(slice::from_raw_parts_mut("}]}