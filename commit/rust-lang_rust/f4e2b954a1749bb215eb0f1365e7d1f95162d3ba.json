{"sha": "f4e2b954a1749bb215eb0f1365e7d1f95162d3ba", "node_id": "C_kwDOAAsO6NoAKGY0ZTJiOTU0YTE3NDliYjIxNWViMGYxMzY1ZTdkMWY5NTE2MmQzYmE", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-05T14:53:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-05T14:53:47Z"}, "message": "rustc_metadata: Encode/decode `DefPathHash`es without an `Option`", "tree": {"sha": "bd2b0569731441d2cd30712f1ea2fe5ce6ad6b5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd2b0569731441d2cd30712f1ea2fe5ce6ad6b5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4e2b954a1749bb215eb0f1365e7d1f95162d3ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e2b954a1749bb215eb0f1365e7d1f95162d3ba", "html_url": "https://github.com/rust-lang/rust/commit/f4e2b954a1749bb215eb0f1365e7d1f95162d3ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4e2b954a1749bb215eb0f1365e7d1f95162d3ba/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c60cc439858a028d8ecc2be1e7468c04cc36e8f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c60cc439858a028d8ecc2be1e7468c04cc36e8f2", "html_url": "https://github.com/rust-lang/rust/commit/c60cc439858a028d8ecc2be1e7468c04cc36e8f2"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "e2b07fad6e782ee24ed5e65f8889a15e1bea3516", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e2b954a1749bb215eb0f1365e7d1f95162d3ba/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e2b954a1749bb215eb0f1365e7d1f95162d3ba/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=f4e2b954a1749bb215eb0f1365e7d1f95162d3ba", "patch": "@@ -1319,7 +1319,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     ) -> DefPathHash {\n         *def_path_hashes\n             .entry(index)\n-            .or_insert_with(|| self.root.tables.def_path_hashes.get(self, index).unwrap())\n+            .or_insert_with(|| self.root.tables.def_path_hashes.get(self, index))\n     }\n \n     #[inline]"}, {"sha": "85e9ae9a98302bb780f1866295e0768970998982", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4e2b954a1749bb215eb0f1365e7d1f95162d3ba/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e2b954a1749bb215eb0f1365e7d1f95162d3ba/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f4e2b954a1749bb215eb0f1365e7d1f95162d3ba", "patch": "@@ -478,13 +478,13 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 let def_key = self.lazy(table.def_key(def_index));\n                 let def_path_hash = table.def_path_hash(def_index);\n                 self.tables.def_keys.set_some(def_index, def_key);\n-                self.tables.def_path_hashes.set_some(def_index, def_path_hash);\n+                self.tables.def_path_hashes.set(def_index, def_path_hash);\n             }\n         } else {\n             for (def_index, def_key, def_path_hash) in table.enumerated_keys_and_path_hashes() {\n                 let def_key = self.lazy(def_key);\n                 self.tables.def_keys.set_some(def_index, def_key);\n-                self.tables.def_path_hashes.set_some(def_index, *def_path_hash);\n+                self.tables.def_path_hashes.set(def_index, *def_path_hash);\n             }\n         }\n     }"}, {"sha": "a74aa381d9eb829097c219163db4f04750a3d098", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e2b954a1749bb215eb0f1365e7d1f95162d3ba/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e2b954a1749bb215eb0f1365e7d1f95162d3ba/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=f4e2b954a1749bb215eb0f1365e7d1f95162d3ba", "patch": "@@ -350,6 +350,7 @@ define_tables! {\n     is_macro_rules: Table<DefIndex, bool>,\n     is_type_alias_impl_trait: Table<DefIndex, bool>,\n     attr_flags: Table<DefIndex, AttrFlags>,\n+    def_path_hashes: Table<DefIndex, DefPathHash>,\n     explicit_item_bounds: Table<DefIndex, LazyArray<(ty::Predicate<'static>, Span)>>,\n     inferred_outlives_of: Table<DefIndex, LazyArray<(ty::Clause<'static>, Span)>>,\n     inherent_impls: Table<DefIndex, LazyArray<DefIndex>>,\n@@ -403,7 +404,6 @@ define_tables! {\n     // `DefPathTable` up front, since we may only ever use a few\n     // definitions from any given crate.\n     def_keys: Table<DefIndex, LazyValue<DefKey>>,\n-    def_path_hashes: Table<DefIndex, DefPathHash>,\n     proc_macro_quoted_spans: Table<usize, LazyValue<Span>>,\n     generator_diagnostic_data: Table<DefIndex, LazyValue<GeneratorDiagnosticData<'static>>>,\n     variant_data: Table<DefIndex, LazyValue<VariantData>>,"}, {"sha": "99bec570600a0faae76c4afb1479ce834e1702c1", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f4e2b954a1749bb215eb0f1365e7d1f95162d3ba/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e2b954a1749bb215eb0f1365e7d1f95162d3ba/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=f4e2b954a1749bb215eb0f1365e7d1f95162d3ba", "patch": "@@ -44,6 +44,12 @@ impl<T> IsDefault for LazyArray<T> {\n     }\n }\n \n+impl IsDefault for DefPathHash {\n+    fn is_default(&self) -> bool {\n+        self.0 == Fingerprint::ZERO\n+    }\n+}\n+\n /// Helper trait, for encoding to, and decoding from, a fixed number of bytes.\n /// Used mainly for Lazy positions and lengths.\n /// Unchecked invariant: `Self::default()` should encode as `[0; BYTE_LEN]`,\n@@ -191,21 +197,18 @@ fixed_size_enum! {\n }\n \n // We directly encode `DefPathHash` because a `LazyValue` would incur a 25% cost.\n-impl FixedSizeEncoding for Option<DefPathHash> {\n+impl FixedSizeEncoding for DefPathHash {\n     type ByteArray = [u8; 16];\n \n     #[inline]\n     fn from_bytes(b: &[u8; 16]) -> Self {\n-        // NOTE: There's a collision between `None` and `Some(0)`.\n-        Some(DefPathHash(Fingerprint::from_le_bytes(*b)))\n+        DefPathHash(Fingerprint::from_le_bytes(*b))\n     }\n \n     #[inline]\n     fn write_to_bytes(self, b: &mut [u8; 16]) {\n-        match self {\n-            None => unreachable!(),\n-            Some(DefPathHash(fingerprint)) => *b = fingerprint.to_le_bytes(),\n-        }\n+        debug_assert!(!self.is_default());\n+        *b = self.0.to_le_bytes();\n     }\n }\n "}, {"sha": "cdda052f529067a27f4c82d49c04bef4a8d7df6e", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4e2b954a1749bb215eb0f1365e7d1f95162d3ba/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e2b954a1749bb215eb0f1365e7d1f95162d3ba/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=f4e2b954a1749bb215eb0f1365e7d1f95162d3ba", "patch": "@@ -119,6 +119,12 @@ impl DefPathHash {\n     }\n }\n \n+impl Default for DefPathHash {\n+    fn default() -> Self {\n+        DefPathHash(Fingerprint::ZERO)\n+    }\n+}\n+\n impl Borrow<Fingerprint> for DefPathHash {\n     #[inline]\n     fn borrow(&self) -> &Fingerprint {"}]}