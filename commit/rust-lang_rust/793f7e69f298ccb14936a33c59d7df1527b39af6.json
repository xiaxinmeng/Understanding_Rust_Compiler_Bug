{"sha": "793f7e69f298ccb14936a33c59d7df1527b39af6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5M2Y3ZTY5ZjI5OGNjYjE0OTM2YTMzYzU5ZDdkZjE1MjdiMzlhZjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-09T13:17:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-09T13:17:55Z"}, "message": "Merge #1976\n\n1976: Add `module` methods r=matklad a=viorina\n\n\n\nCo-authored-by: Ekaterina Babshukova <ekaterina.babshukova@yandex.ru>", "tree": {"sha": "b3d92530c2f9b2caa4015f70803008de47ec088f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3d92530c2f9b2caa4015f70803008de47ec088f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/793f7e69f298ccb14936a33c59d7df1527b39af6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdnd4DCRBK7hj4Ov3rIwAAdHIIAJSYu73Sgjn9Nf2FiYwV+N3J\nYz8bRCvOwetQmv1t/qajGGPiBOG7u5BCrcWVAy4DqjkRTWJHzDa48fTikOYVdbY/\nJ/C3SyWA+9bXmkJPiTsDRTaStTDtIRxwOoc2hpjeUwqnjh/xg16G9gYkFaSZPkay\nzBFnosj9nXlzMId4ef2ZMlovsKWLawCv49LYI1C40nTnXGhEDKTOR4E4sg2F3MhH\ncQuEniThmhESPcKMT4PbRWYYGQS+J40ydL8VXXRN/fKV72Wv0kwFfvM+F5SE60nv\nXPdgLpt1i7i6iYQc5CHiW93tw677MSeS2hqtwM7DXYCvQe5LbWb3eN83WCDfQFE=\n=mBEa\n-----END PGP SIGNATURE-----\n", "payload": "tree b3d92530c2f9b2caa4015f70803008de47ec088f\nparent cc2f2a74f66a131bcee63656ec94424b61895ec5\nparent aa2f58550a3ea135035118da92a0d7733bad2e1a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1570627075 +0000\ncommitter GitHub <noreply@github.com> 1570627075 +0000\n\nMerge #1976\n\n1976: Add `module` methods r=matklad a=viorina\n\n\n\nCo-authored-by: Ekaterina Babshukova <ekaterina.babshukova@yandex.ru>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/793f7e69f298ccb14936a33c59d7df1527b39af6", "html_url": "https://github.com/rust-lang/rust/commit/793f7e69f298ccb14936a33c59d7df1527b39af6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/793f7e69f298ccb14936a33c59d7df1527b39af6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc2f2a74f66a131bcee63656ec94424b61895ec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2f2a74f66a131bcee63656ec94424b61895ec5", "html_url": "https://github.com/rust-lang/rust/commit/cc2f2a74f66a131bcee63656ec94424b61895ec5"}, {"sha": "aa2f58550a3ea135035118da92a0d7733bad2e1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa2f58550a3ea135035118da92a0d7733bad2e1a", "html_url": "https://github.com/rust-lang/rust/commit/aa2f58550a3ea135035118da92a0d7733bad2e1a"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "3e9cd3c63d46f8d96f2104362e504e2e375bee9b", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/793f7e69f298ccb14936a33c59d7df1527b39af6/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/793f7e69f298ccb14936a33c59d7df1527b39af6/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=793f7e69f298ccb14936a33c59d7df1527b39af6", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::ast::{self, NameOwner, StructKind, TypeAscriptionOwner};\n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     type_ref::TypeRef,\n-    AsName, Enum, EnumVariant, FieldSource, HasSource, Name, Source, Struct, StructField,\n+    AsName, Enum, EnumVariant, FieldSource, HasSource, Module, Name, Source, Struct, StructField,\n };\n \n impl Struct {\n@@ -170,12 +170,20 @@ impl VariantDef {\n         }\n     }\n \n-    pub(crate) fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n+    pub fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n         match self {\n             VariantDef::Struct(it) => it.field(db, name),\n             VariantDef::EnumVariant(it) => it.field(db, name),\n         }\n     }\n+\n+    pub fn module(self, db: &impl HirDatabase) -> Module {\n+        match self {\n+            VariantDef::Struct(it) => it.module(db),\n+            VariantDef::EnumVariant(it) => it.module(db),\n+        }\n+    }\n+\n     pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n         match self {\n             VariantDef::Struct(it) => it.variant_data(db),"}, {"sha": "8055a07dbe26396a8bd1105a09dbf6fdff7f6db9", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/793f7e69f298ccb14936a33c59d7df1527b39af6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/793f7e69f298ccb14936a33c59d7df1527b39af6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=793f7e69f298ccb14936a33c59d7df1527b39af6", "patch": "@@ -569,6 +569,14 @@ impl DefWithBody {\n             DefWithBody::Static(s) => s.krate(db),\n         }\n     }\n+\n+    pub fn module(self, db: &impl HirDatabase) -> Module {\n+        match self {\n+            DefWithBody::Const(c) => c.module(db),\n+            DefWithBody::Function(f) => f.module(db),\n+            DefWithBody::Static(s) => s.module(db),\n+        }\n+    }\n }\n \n pub trait HasBody: Copy {\n@@ -789,6 +797,20 @@ impl Const {\n         ImplBlock::containing(module_impls, self.into())\n     }\n \n+    pub fn parent_trait(self, db: &impl DefDatabase) -> Option<Trait> {\n+        db.trait_items_index(self.module(db)).get_parent_trait(self.into())\n+    }\n+\n+    pub fn container(self, db: &impl DefDatabase) -> Option<Container> {\n+        if let Some(impl_block) = self.impl_block(db) {\n+            Some(impl_block.into())\n+        } else if let Some(trait_) = self.parent_trait(db) {\n+            Some(trait_.into())\n+        } else {\n+            None\n+        }\n+    }\n+\n     // FIXME: move to a more general type for 'body-having' items\n     /// Builds a resolver for code inside this item.\n     pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n@@ -1075,3 +1097,13 @@ impl From<AssocItem> for crate::generics::GenericDef {\n         }\n     }\n }\n+\n+impl AssocItem {\n+    pub fn module(self, db: &impl DefDatabase) -> Module {\n+        match self {\n+            AssocItem::Function(f) => f.module(db),\n+            AssocItem::Const(c) => c.module(db),\n+            AssocItem::TypeAlias(t) => t.module(db),\n+        }\n+    }\n+}"}]}