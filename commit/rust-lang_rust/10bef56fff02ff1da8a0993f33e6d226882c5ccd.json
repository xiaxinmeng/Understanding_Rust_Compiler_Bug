{"sha": "10bef56fff02ff1da8a0993f33e6d226882c5ccd", "node_id": "C_kwDOAAsO6NoAKDEwYmVmNTZmZmYwMmZmMWRhOGEwOTkzZjMzZTZkMjI2ODgyYzVjY2Q", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-09-22T20:25:42Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-09-24T10:01:57Z"}, "message": "Simplify explicit request check", "tree": {"sha": "7b49d269cb2961d282d4296144d4657957a0156f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b49d269cb2961d282d4296144d4657957a0156f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10bef56fff02ff1da8a0993f33e6d226882c5ccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10bef56fff02ff1da8a0993f33e6d226882c5ccd", "html_url": "https://github.com/rust-lang/rust/commit/10bef56fff02ff1da8a0993f33e6d226882c5ccd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10bef56fff02ff1da8a0993f33e6d226882c5ccd/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfff31bc833070a00578bd6178160aeed56f28ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfff31bc833070a00578bd6178160aeed56f28ba", "html_url": "https://github.com/rust-lang/rust/commit/cfff31bc833070a00578bd6178160aeed56f28ba"}], "stats": {"total": 47, "additions": 30, "deletions": 17}, "files": [{"sha": "1f2109879d121bc452264f42afbf8f60dae5fecf", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10bef56fff02ff1da8a0993f33e6d226882c5ccd/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10bef56fff02ff1da8a0993f33e6d226882c5ccd/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=10bef56fff02ff1da8a0993f33e6d226882c5ccd", "patch": "@@ -1617,6 +1617,22 @@ impl<'a> Builder<'a> {\n         // Only execute if it's supposed to run as default\n         if desc.default && should_run.is_really_default() { self.ensure(step) } else { None }\n     }\n+\n+    /// Checks if any of the \"should_run\" paths is in the `Builder` paths.\n+    pub(crate) fn was_invoked_explicitly<S: Step>(&'a self) -> bool {\n+        let desc = StepDescription::from::<S>();\n+        let should_run = (desc.should_run)(ShouldRun::new(self));\n+\n+        for path in &self.paths {\n+            if should_run.paths.iter().any(|s| s.has(path))\n+                && !desc.is_excluded(self, &PathSet::Suite(path.clone()))\n+            {\n+                return true;\n+            }\n+        }\n+\n+        false\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "1ebaf4ca5190c5d70f0c73625d8aa21d221da191", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/10bef56fff02ff1da8a0993f33e6d226882c5ccd/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10bef56fff02ff1da8a0993f33e6d226882c5ccd/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=10bef56fff02ff1da8a0993f33e6d226882c5ccd", "patch": "@@ -102,18 +102,10 @@ fn open(builder: &Builder<'_>, path: impl AsRef<Path>) {\n // Used for deciding whether a particular step is one requested by the user on\n // the `x.py doc` command line, which determines whether `--open` will open that\n // page.\n-fn components_simplified(path: &PathBuf) -> Vec<&str> {\n+pub(crate) fn components_simplified(path: &PathBuf) -> Vec<&str> {\n     path.iter().map(|component| component.to_str().unwrap_or(\"???\")).collect()\n }\n \n-fn is_explicit_request(builder: &Builder<'_>, path: &str) -> bool {\n-    builder\n-        .paths\n-        .iter()\n-        .map(components_simplified)\n-        .any(|requested| requested.iter().copied().eq(path.split('/')))\n-}\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct UnstableBook {\n     target: TargetSelection,\n@@ -248,7 +240,7 @@ impl Step for TheBook {\n             invoke_rustdoc(builder, compiler, target, path);\n         }\n \n-        if is_explicit_request(builder, \"src/doc/book\") {\n+        if builder.was_invoked_explicitly::<Self>() {\n             let out = builder.doc_out(target);\n             let index = out.join(\"book\").join(\"index.html\");\n             open(builder, &index);\n@@ -408,7 +400,7 @@ impl Step for Standalone {\n \n         // We open doc/index.html as the default if invoked as `x.py doc --open`\n         // with no particular explicit doc requested (e.g. library/core).\n-        if builder.paths.is_empty() || is_explicit_request(builder, \"src/doc\") {\n+        if builder.paths.is_empty() || builder.was_invoked_explicitly::<Self>() {\n             let index = out.join(\"index.html\");\n             open(builder, &index);\n         }\n@@ -553,7 +545,6 @@ impl Step for Rustc {\n     fn run(self, builder: &Builder<'_>) {\n         let stage = self.stage;\n         let target = self.target;\n-        let mut is_explicit_request = false;\n         builder.info(&format!(\"Documenting stage{} compiler ({})\", stage, target));\n \n         let paths = builder\n@@ -562,15 +553,14 @@ impl Step for Rustc {\n             .map(components_simplified)\n             .filter_map(|path| {\n                 if path.get(0) == Some(&\"compiler\") {\n-                    is_explicit_request = true;\n                     path.get(1).map(|p| p.to_owned())\n                 } else {\n                     None\n                 }\n             })\n             .collect::<Vec<_>>();\n \n-        if !builder.config.compiler_docs && !is_explicit_request {\n+        if !builder.config.compiler_docs && !builder.was_invoked_explicitly::<Self>() {\n             builder.info(\"\\tskipping - compiler/librustdoc docs disabled\");\n             return;\n         }\n@@ -700,15 +690,22 @@ macro_rules! tool_doc {\n             fn run(self, builder: &Builder<'_>) {\n                 let stage = self.stage;\n                 let target = self.target;\n-                builder.info(&format!(\"Documenting stage{} {} ({})\", stage, stringify!($tool).to_lowercase(), target));\n+                builder.info(\n+                    &format!(\n+                        \"Documenting stage{} {} ({})\",\n+                        stage,\n+                        stringify!($tool).to_lowercase(),\n+                        target,\n+                    ),\n+                );\n \n                 // This is the intended out directory for compiler documentation.\n                 let out = builder.compiler_doc_out(target);\n                 t!(fs::create_dir_all(&out));\n \n                 let compiler = builder.compiler(stage, builder.config.build);\n \n-                if !builder.config.compiler_docs {\n+                if !builder.config.compiler_docs && !builder.was_invoked_explicitly::<Self>() {\n                     builder.info(\"\\tskipping - compiler/tool docs disabled\");\n                     return;\n                 }\n@@ -912,7 +909,7 @@ impl Step for RustcBook {\n             name: INTERNER.intern_str(\"rustc\"),\n             src: INTERNER.intern_path(out_base),\n         });\n-        if is_explicit_request(builder, \"src/doc/rustc\") {\n+        if builder.was_invoked_explicitly::<Self>() {\n             let out = builder.doc_out(self.target);\n             let index = out.join(\"rustc\").join(\"index.html\");\n             open(builder, &index);"}]}