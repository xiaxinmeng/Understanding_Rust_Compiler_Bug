{"sha": "913023b6b475ac5caed060771526e0777a13ae94", "node_id": "C_kwDOAAsO6NoAKDkxMzAyM2I2YjQ3NWFjNWNhZWQwNjA3NzE1MjZlMDc3N2ExM2FlOTQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-11T07:06:18Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-11T07:06:18Z"}, "message": "Use Visibility::is_accessible_from to make suggestion more specific", "tree": {"sha": "b917f4ee21ad9dda79ca646756beae4b3ac207bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b917f4ee21ad9dda79ca646756beae4b3ac207bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/913023b6b475ac5caed060771526e0777a13ae94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/913023b6b475ac5caed060771526e0777a13ae94", "html_url": "https://github.com/rust-lang/rust/commit/913023b6b475ac5caed060771526e0777a13ae94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/913023b6b475ac5caed060771526e0777a13ae94/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95", "html_url": "https://github.com/rust-lang/rust/commit/f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "34f4a9f790266939cce46ccd9f726a2bd971f940", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/913023b6b475ac5caed060771526e0777a13ae94/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913023b6b475ac5caed060771526e0777a13ae94/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=913023b6b475ac5caed060771526e0777a13ae94", "patch": "@@ -673,6 +673,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             if !self.report_similar_impl_candidates(\n                                 impl_candidates,\n                                 trait_ref,\n+                                obligation.cause.body_id,\n                                 &mut err,\n                             ) {\n                                 // This is *almost* equivalent to\n@@ -707,6 +708,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                     self.report_similar_impl_candidates(\n                                         impl_candidates,\n                                         trait_ref,\n+                                        obligation.cause.body_id,\n                                         &mut err,\n                                     );\n                                 }\n@@ -1353,6 +1355,7 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n         &self,\n         impl_candidates: Vec<ImplCandidate<'tcx>>,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n+        body_id: hir::HirId,\n         err: &mut Diagnostic,\n     ) -> bool;\n \n@@ -1735,6 +1738,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         impl_candidates: Vec<ImplCandidate<'tcx>>,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n+        body_id: hir::HirId,\n         err: &mut Diagnostic,\n     ) -> bool {\n         let report = |mut candidates: Vec<TraitRef<'tcx>>, err: &mut Diagnostic| {\n@@ -1816,11 +1820,9 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         // FIXME(compiler-errors): This could be generalized, both to\n                         // be more granular, and probably look past other `#[fundamental]`\n                         // types, too.\n-                        match self.tcx.visibility(def.did()) {\n-                            ty::Visibility::Public => true,\n-                            ty::Visibility::Restricted(def_id) => def_id.is_local(),\n-                            ty::Visibility::Invisible => false,\n-                        }\n+                        self.tcx\n+                            .visibility(def.did())\n+                            .is_accessible_from(body_id.owner.to_def_id(), self.tcx)\n                     } else {\n                         true\n                     }"}]}