{"sha": "0aeddb3673459969fdbb32018f9c59f603607cf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZWRkYjM2NzM0NTk5NjlmZGJiMzIwMThmOWM1OWY2MDM2MDdjZjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-06T01:47:12Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-06T01:47:12Z"}, "message": "rt: Stub compare glue", "tree": {"sha": "2fa3c4ef97a3297733cf3a03628c6e041298a6c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fa3c4ef97a3297733cf3a03628c6e041298a6c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aeddb3673459969fdbb32018f9c59f603607cf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aeddb3673459969fdbb32018f9c59f603607cf5", "html_url": "https://github.com/rust-lang/rust/commit/0aeddb3673459969fdbb32018f9c59f603607cf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aeddb3673459969fdbb32018f9c59f603607cf5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7828e694df3b345317ab3d8390582779fef6560", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7828e694df3b345317ab3d8390582779fef6560", "html_url": "https://github.com/rust-lang/rust/commit/d7828e694df3b345317ab3d8390582779fef6560"}], "stats": {"total": 82, "additions": 60, "deletions": 22}, "files": [{"sha": "594c31383310eabd0578c772d6ff083545356f78", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 60, "deletions": 22, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/0aeddb3673459969fdbb32018f9c59f603607cf5/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0aeddb3673459969fdbb32018f9c59f603607cf5/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=0aeddb3673459969fdbb32018f9c59f603607cf5", "patch": "@@ -75,6 +75,14 @@ round_up(T size, size_t alignment) {\n     return x;\n }\n \n+template<typename T>\n+static inline T\n+bump_dp(uint8_t *dp) {\n+    T x = *((T *)dp);\n+    dp += sizeof(T);\n+    return x;\n+}\n+\n \n // Utility classes\n \n@@ -125,6 +133,34 @@ struct tag_info {\n     const type_param *params;               // Array of type parameters.\n };\n \n+template<typename T>\n+class data_pair {\n+public:\n+    T fst, snd;\n+    inline void operator=(const T rhs) { fst = snd = rhs; }\n+};\n+\n+class ptr_pair {\n+public:\n+    uint8_t *fst, *snd;\n+\n+    template<typename T>\n+    class data { typedef data_pair<T> t; };\n+\n+    ptr_pair(uint8_t *in_fst, uint8_t *in_snd) : fst(in_fst), snd(in_snd) {}\n+\n+    inline void operator=(uint8_t *rhs) { fst = snd = rhs; }\n+\n+    inline ptr_pair operator+(size_t n) const {\n+        return make(fst + n, snd + n);\n+    }\n+\n+    static inline ptr_pair make(uint8_t *fst, uint8_t *snd) {\n+        ptr_pair self(fst, snd);\n+        return self;\n+    }\n+};\n+\n \n // Contexts\n \n@@ -719,16 +755,15 @@ size_of::walk_ivec(bool align, bool is_pod, size_align &elem_sa) {\n // for methods that actually manipulate the data involved.\n \n #define DATA_SIMPLE(ty, call) \\\n-    if (align) dp.align_to(sizeof(ty)); \\\n+    if (align) dp = align_to(dp, sizeof(ty)); \\\n     static_cast<T *>(this)->call; \\\n     dp += sizeof(ty);\n \n-template<typename T>\n-class data : public ctxt< data<T> > {\n-private:\n-    typename T::data_ptr dp;\n-\n+template<typename T,typename U>\n+class data : public ctxt< data<T,U> > {\n public:\n+    U dp;\n+\n     void walk_tag(bool align, tag_info &tinfo);\n     void walk_ivec(bool align, bool is_pod, size_align &elem_sa);\n \n@@ -750,13 +785,13 @@ class data : public ctxt< data<T> > {\n     void walk_task(bool align)  { DATA_SIMPLE(void *, walk_task(align)); }\n \n     void walk_fn(bool align) {\n-        if (align) dp.align_to(sizeof(void *));\n+        if (align) dp = align_to(dp, sizeof(void *));\n         static_cast<T *>(this)->walk_fn(align);\n         dp += sizeof(void *) * 2;\n     }\n \n     void walk_obj(bool align) {\n-        if (align) dp.align_to(sizeof(void *));\n+        if (align) dp = align_to(dp, sizeof(void *));\n         static_cast<T *>(this)->walk_obj(align);\n         dp += sizeof(void *) * 2;\n     }\n@@ -766,43 +801,40 @@ class data : public ctxt< data<T> > {\n     }\n \n     template<typename W>\n-    void walk_number(bool align) {\n-        DATA_SIMPLE(W, walk_number<W>(align));\n-    }\n+    void walk_number(bool align) { DATA_SIMPLE(W, walk_number<W>(align)); }\n };\n \n-template<typename T>\n+template<typename T,typename U>\n void\n-data<T>::walk_ivec(bool align, bool is_pod, size_align &elem_sa) {\n+data<T,U>::walk_ivec(bool align, bool is_pod, size_align &elem_sa) {\n     if (!elem_sa.is_set())\n         elem_sa = size_of::get(*this);\n     else if (elem_sa.alignment == 8)\n         elem_sa.alignment = 4;  // FIXME: This is an awful hack.\n \n     // Get a pointer to the interior vector, and skip over it.\n-    if (align) dp.align_to(ALIGNOF(rust_ivec *));\n-    typename T::data_ptr end_dp = dp + sizeof(rust_ivec) - sizeof(uintptr_t) +\n-        elem_sa.size * 4;\n+    if (align) dp = align_to(dp, ALIGNOF(rust_ivec *));\n+    U end_dp = dp + sizeof(rust_ivec) - sizeof(uintptr_t) + elem_sa.size * 4;\n \n     // Call to the implementation.\n     static_cast<T *>(this)->walk_ivec(align, is_pod, elem_sa);\n \n     dp = end_dp;\n }\n \n-template<typename T>\n+template<typename T,typename U>\n void\n-data<T>::walk_tag(bool align, tag_info &tinfo) {\n+data<T,U>::walk_tag(bool align, tag_info &tinfo) {\n     size_of::compute_tag_size(tinfo);\n \n     if (tinfo.variant_count > 1 && align)\n-        dp.align_to(ALIGNOF(uint32_t));\n+        dp = align_to(dp, ALIGNOF(uint32_t));\n \n-    typename T::data_ptr end_dp = tinfo.tag_sa.size;\n+    U end_dp = tinfo.tag_sa.size;\n \n-    typename T::template data<uint32_t> tag_variant;\n+    typename U::template data<uint32_t>::t tag_variant;\n     if (tinfo.variant_count > 1)\n-        tag_variant = dp.template get_bump<uint32_t>();\n+        tag_variant = bump_dp<uint32_t>(dp);\n     else\n         tag_variant = 0;\n \n@@ -820,5 +852,11 @@ class copy : public data<copy> {\n \n #endif\n \n+\n+// Structural comparison glue.\n+\n+class cmp : public data<cmp,ptr_pair> {\n+};\n+\n } // end namespace shape\n "}]}