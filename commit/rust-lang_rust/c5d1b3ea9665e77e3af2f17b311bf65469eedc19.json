{"sha": "c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "node_id": "C_kwDOAAsO6NoAKGM1ZDFiM2VhOTY2NWU3N2UzYWYyZjE3YjMxMWJmNjU0NjllZWRjMTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-16T16:11:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-16T16:11:54Z"}, "message": "Auto merge of #108020 - nnethercote:opt-mk_region, r=compiler-errors\n\nOptimize `mk_region`\n\nPR #107869 avoiding some interning under `mk_ty` by special-casing `Ty` variants with simple (integer) bodies. This PR does something similar for regions.\n\nr? `@compiler-errors`", "tree": {"sha": "86493d29ad1fbfdf42869d9c848c8b4336f42360", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86493d29ad1fbfdf42869d9c848c8b4336f42360"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "html_url": "https://github.com/rust-lang/rust/commit/c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af3c8b27266e290cf65704284f6862d0f90ee4fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/af3c8b27266e290cf65704284f6862d0f90ee4fc", "html_url": "https://github.com/rust-lang/rust/commit/af3c8b27266e290cf65704284f6862d0f90ee4fc"}, {"sha": "9a53cee8681348a7ba46158a4e80d36b1b9789d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a53cee8681348a7ba46158a4e80d36b1b9789d8", "html_url": "https://github.com/rust-lang/rust/commit/9a53cee8681348a7ba46158a4e80d36b1b9789d8"}], "stats": {"total": 440, "additions": 254, "deletions": 186}, "files": [{"sha": "d51cc652bfd4660ff6a9e981dd7ee2da245e8bdf", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -180,20 +180,20 @@ trait TypeOpInfo<'tcx> {\n             return;\n         };\n \n-        let placeholder_region = tcx.mk_region(ty::RePlaceholder(ty::Placeholder {\n+        let placeholder_region = tcx.mk_re_placeholder(ty::Placeholder {\n             name: placeholder.name,\n             universe: adjusted_universe.into(),\n-        }));\n+        });\n \n         let error_region =\n             if let RegionElement::PlaceholderRegion(error_placeholder) = error_element {\n                 let adjusted_universe =\n                     error_placeholder.universe.as_u32().checked_sub(base_universe.as_u32());\n                 adjusted_universe.map(|adjusted| {\n-                    tcx.mk_region(ty::RePlaceholder(ty::Placeholder {\n+                    tcx.mk_re_placeholder(ty::Placeholder {\n                         name: error_placeholder.name,\n                         universe: adjusted.into(),\n-                    }))\n+                    })\n                 })\n             } else {\n                 None\n@@ -390,7 +390,7 @@ fn try_extract_error_from_fulfill_cx<'tcx>(\n         error_region,\n         &region_constraints,\n         |vid| ocx.infcx.region_var_origin(vid),\n-        |vid| ocx.infcx.universe_of_region(ocx.infcx.tcx.mk_region(ty::ReVar(vid))),\n+        |vid| ocx.infcx.universe_of_region(ocx.infcx.tcx.mk_re_var(vid)),\n     )\n }\n \n@@ -411,7 +411,7 @@ fn try_extract_error_from_region_constraints<'tcx>(\n                 }\n                 // FIXME: Should this check the universe of the var?\n                 Constraint::VarSubReg(vid, sup) if sup == placeholder_region => {\n-                    Some((infcx.tcx.mk_region(ty::ReVar(vid)), cause.clone()))\n+                    Some((infcx.tcx.mk_re_var(vid), cause.clone()))\n                 }\n                 _ => None,\n             }"}, {"sha": "83fdb6066c6b4a0fb4038afa5175bac4402df549", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -1297,7 +1297,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             let vid = self.to_region_vid(r);\n             let scc = self.constraint_sccs.scc(vid);\n             let repr = self.scc_representatives[scc];\n-            tcx.mk_region(ty::ReVar(repr))\n+            tcx.mk_re_var(repr)\n         })\n     }\n \n@@ -1719,7 +1719,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n \n             // If not, report an error.\n-            let member_region = infcx.tcx.mk_region(ty::ReVar(member_region_vid));\n+            let member_region = infcx.tcx.mk_re_var(member_region_vid);\n             errors_buffer.push(RegionErrorKind::UnexpectedHiddenRegion {\n                 span: m_c.definition_span,\n                 hidden_ty: m_c.hidden_ty,"}, {"sha": "bb42301828d2f48608ad1dbbe08e476eb5b9a984", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     }\n                     None => {\n                         subst_regions.push(vid);\n-                        infcx.tcx.re_error_with_message(\n+                        infcx.tcx.mk_re_error_with_message(\n                             concrete_type.span,\n                             \"opaque type with non-universal region substs\",\n                         )"}, {"sha": "7a05fde47fce90acf314578d3d61387071b947cc", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -137,7 +137,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n     upvars: &[Upvar<'tcx>],\n     use_polonius: bool,\n ) -> MirTypeckResults<'tcx> {\n-    let implicit_region_bound = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));\n+    let implicit_region_bound = infcx.tcx.mk_re_var(universal_regions.fr_fn_body);\n     let mut constraints = MirTypeckRegionConstraints {\n         placeholder_indices: PlaceholderIndices::default(),\n         placeholder_index_to_region: IndexVec::default(),"}, {"sha": "3f254a6b7b670b09205651c780527690f033e2bf", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -480,10 +480,8 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                     LangItem::VaList,\n                     Some(self.infcx.tcx.def_span(self.mir_def.did)),\n                 );\n-                let region = self\n-                    .infcx\n-                    .tcx\n-                    .mk_region(ty::ReVar(self.infcx.next_nll_region_var(FR).to_region_vid()));\n+                let region =\n+                    self.infcx.tcx.mk_re_var(self.infcx.next_nll_region_var(FR).to_region_vid());\n                 let va_list_ty = self\n                     .infcx\n                     .tcx\n@@ -636,7 +634,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                     var: ty::BoundVar::from_usize(bound_vars.len() - 1),\n                     kind: ty::BrEnv,\n                 };\n-                let env_region = ty::ReLateBound(ty::INNERMOST, br);\n+                let env_region = tcx.mk_re_late_bound(ty::INNERMOST, br);\n                 let closure_ty = tcx.closure_env_ty(def_id, substs, env_region).unwrap();\n \n                 // The \"inputs\" of the closure in the\n@@ -748,10 +746,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     {\n         let (value, _map) = self.tcx.replace_late_bound_regions(value, |br| {\n             debug!(?br);\n-            let liberated_region = self.tcx.mk_region(ty::ReFree(ty::FreeRegion {\n-                scope: all_outlive_scope.to_def_id(),\n-                bound_region: br.kind,\n-            }));\n+            let liberated_region = self.tcx.mk_re_free(all_outlive_scope.to_def_id(), br.kind);\n             let region_vid = self.next_nll_region_var(origin);\n             indices.insert_late_bound_region(liberated_region, region_vid.to_region_vid());\n             debug!(?liberated_region, ?region_vid);\n@@ -843,7 +838,7 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        tcx.fold_regions(value, |region, _| tcx.mk_region(ty::ReVar(self.to_region_vid(region))))\n+        tcx.fold_regions(value, |region, _| tcx.mk_re_var(self.to_region_vid(region)))\n     }\n }\n \n@@ -883,8 +878,7 @@ fn for_each_late_bound_region_in_item<'tcx>(\n \n     for bound_var in tcx.late_bound_vars(tcx.hir().local_def_id_to_hir_id(mir_def_id)) {\n         let ty::BoundVariableKind::Region(bound_region) = bound_var else { continue; };\n-        let liberated_region = tcx\n-            .mk_region(ty::ReFree(ty::FreeRegion { scope: mir_def_id.to_def_id(), bound_region }));\n+        let liberated_region = tcx.mk_re_free(mir_def_id.to_def_id(), bound_region);\n         f(liberated_region);\n     }\n }"}, {"sha": "e5c176f19ea955be56182c63a55083c75483a920", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -234,23 +234,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     var: ty::BoundVar::from_u32(index),\n                     kind: ty::BrNamed(def_id, name),\n                 };\n-                tcx.mk_region(ty::ReLateBound(debruijn, br))\n+                tcx.mk_re_late_bound(debruijn, br)\n             }\n \n             Some(rl::Region::EarlyBound(def_id)) => {\n                 let name = tcx.hir().ty_param_name(def_id.expect_local());\n                 let item_def_id = tcx.hir().ty_param_owner(def_id.expect_local());\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id];\n-                tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion { def_id, index, name }))\n+                tcx.mk_re_early_bound(ty::EarlyBoundRegion { def_id, index, name })\n             }\n \n             Some(rl::Region::Free(scope, id)) => {\n                 let name = lifetime_name(id.expect_local());\n-                tcx.mk_region(ty::ReFree(ty::FreeRegion {\n-                    scope,\n-                    bound_region: ty::BrNamed(id, name),\n-                }))\n+                tcx.mk_re_free(scope, ty::BrNamed(id, name))\n \n                 // (*) -- not late-bound, won't change\n             }\n@@ -263,7 +260,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     // elision. `resolve_lifetime` should have\n                     // reported an error in this case -- but if\n                     // not, let's error out.\n-                    tcx.re_error_with_message(lifetime.ident.span, \"unelided lifetime in signature\")\n+                    tcx.mk_re_error_with_message(\n+                        lifetime.ident.span,\n+                        \"unelided lifetime in signature\",\n+                    )\n                 })\n             }\n         }\n@@ -477,7 +477,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             debug!(?param, \"unelided lifetime in signature\");\n \n                             // This indicates an illegal lifetime in a non-assoc-trait position\n-                            tcx.re_error_with_message(self.span, \"unelided lifetime in signature\")\n+                            tcx.mk_re_error_with_message(\n+                                self.span,\n+                                \"unelided lifetime in signature\",\n+                            )\n                         })\n                         .into(),\n                     GenericParamDefKind::Type { has_default, .. } => {\n@@ -1622,7 +1625,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         } else {\n                             err.emit()\n                         };\n-                        tcx.re_error(e)\n+                        tcx.mk_re_error(e)\n                     })\n                 }\n             })"}, {"sha": "94e1fcebccdd85f688fd894437afd393f3d8b37b", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -464,14 +464,10 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for RemapLateBound<'_, 'tcx> {\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         if let ty::ReFree(fr) = *r {\n-            self.tcx.mk_region(ty::ReFree(ty::FreeRegion {\n-                bound_region: self\n-                    .mapping\n-                    .get(&fr.bound_region)\n-                    .copied()\n-                    .unwrap_or(fr.bound_region),\n-                ..fr\n-            }))\n+            self.tcx.mk_re_free(\n+                fr.scope,\n+                self.mapping.get(&fr.bound_region).copied().unwrap_or(fr.bound_region),\n+            )\n         } else {\n             r\n         }\n@@ -777,13 +773,13 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n                     }\n                     let Some(ty::ReEarlyBound(e)) = map.get(&region.into()).map(|r| r.expect_region().kind())\n                     else {\n-                        return tcx.re_error_with_message(return_span, \"expected ReFree to map to ReEarlyBound\")\n+                        return tcx.mk_re_error_with_message(return_span, \"expected ReFree to map to ReEarlyBound\")\n                     };\n-                    tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n+                    tcx.mk_re_early_bound(ty::EarlyBoundRegion {\n                         def_id: e.def_id,\n                         name: e.name,\n                         index: (e.index as usize - num_trait_substs + num_impl_substs) as u32,\n-                    }))\n+                    })\n                 });\n                 debug!(%ty);\n                 collected_tys.insert(def_id, ty);\n@@ -1920,10 +1916,10 @@ pub(super) fn check_type_bounds<'tcx>(\n             let kind = ty::BoundRegionKind::BrNamed(param.def_id, param.name);\n             let bound_var = ty::BoundVariableKind::Region(kind);\n             bound_vars.push(bound_var);\n-            tcx.mk_region(ty::ReLateBound(\n+            tcx.mk_re_late_bound(\n                 ty::INNERMOST,\n                 ty::BoundRegion { var: ty::BoundVar::from_usize(bound_vars.len() - 1), kind },\n-            ))\n+            )\n             .into()\n         }\n         GenericParamDefKind::Const { .. } => {"}, {"sha": "4fc37856dfca03e1db69f3140b3fe24d2da92ab0", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -149,14 +149,14 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n     );\n     let mk_va_list_ty = |mutbl| {\n         tcx.lang_items().va_list().map(|did| {\n-            let region = tcx.mk_region(ty::ReLateBound(\n+            let region = tcx.mk_re_late_bound(\n                 ty::INNERMOST,\n                 ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0, None) },\n-            ));\n-            let env_region = tcx.mk_region(ty::ReLateBound(\n+            );\n+            let env_region = tcx.mk_re_late_bound(\n                 ty::INNERMOST,\n                 ty::BoundRegion { var: ty::BoundVar::from_u32(1), kind: ty::BrEnv },\n-            ));\n+            );\n             let va_list_ty = tcx.bound_type_of(did).subst(tcx, &[region.into()]);\n             (tcx.mk_ref(env_region, ty::TypeAndMut { ty: va_list_ty, mutbl }), va_list_ty)\n         })\n@@ -377,9 +377,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                     ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0, None) };\n                 (\n                     1,\n-                    vec![\n-                        tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)), param(0)),\n-                    ],\n+                    vec![tcx.mk_imm_ref(tcx.mk_re_late_bound(ty::INNERMOST, br), param(0))],\n                     tcx.mk_projection(discriminant_def_id, tcx.mk_substs([param(0).into()].iter())),\n                 )\n             }\n@@ -430,8 +428,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             sym::raw_eq => {\n                 let br =\n                     ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0, None) };\n-                let param_ty =\n-                    tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)), param(0));\n+                let param_ty = tcx.mk_imm_ref(tcx.mk_re_late_bound(ty::INNERMOST, br), param(0));\n                 (1, vec![param_ty; 2], tcx.types.bool)\n             }\n "}, {"sha": "ee39fde1dcb4d2d0f72ab0c6758b6e6ad1dc361b", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -607,12 +607,11 @@ fn gather_gat_bounds<'tcx, T: TypeFoldable<'tcx>>(\n                 // Same for the region. In our example, 'a corresponds\n                 // to the 'me parameter.\n                 let region_param = gat_generics.param_at(*region_a_idx, tcx);\n-                let region_param =\n-                    tcx.mk_region(ty::RegionKind::ReEarlyBound(ty::EarlyBoundRegion {\n-                        def_id: region_param.def_id,\n-                        index: region_param.index,\n-                        name: region_param.name,\n-                    }));\n+                let region_param = tcx.mk_re_early_bound(ty::EarlyBoundRegion {\n+                    def_id: region_param.def_id,\n+                    index: region_param.index,\n+                    name: region_param.name,\n+                });\n                 // The predicate we expect to see. (In our example,\n                 // `Self: 'me`.)\n                 let clause = ty::PredicateKind::Clause(ty::Clause::TypeOutlives(\n@@ -645,20 +644,18 @@ fn gather_gat_bounds<'tcx, T: TypeFoldable<'tcx>>(\n                 debug!(\"required clause: {region_a} must outlive {region_b}\");\n                 // Translate into the generic parameters of the GAT.\n                 let region_a_param = gat_generics.param_at(*region_a_idx, tcx);\n-                let region_a_param =\n-                    tcx.mk_region(ty::RegionKind::ReEarlyBound(ty::EarlyBoundRegion {\n-                        def_id: region_a_param.def_id,\n-                        index: region_a_param.index,\n-                        name: region_a_param.name,\n-                    }));\n+                let region_a_param = tcx.mk_re_early_bound(ty::EarlyBoundRegion {\n+                    def_id: region_a_param.def_id,\n+                    index: region_a_param.index,\n+                    name: region_a_param.name,\n+                });\n                 // Same for the region.\n                 let region_b_param = gat_generics.param_at(*region_b_idx, tcx);\n-                let region_b_param =\n-                    tcx.mk_region(ty::RegionKind::ReEarlyBound(ty::EarlyBoundRegion {\n-                        def_id: region_b_param.def_id,\n-                        index: region_b_param.index,\n-                        name: region_b_param.name,\n-                    }));\n+                let region_b_param = tcx.mk_re_early_bound(ty::EarlyBoundRegion {\n+                    def_id: region_b_param.def_id,\n+                    index: region_b_param.index,\n+                    name: region_b_param.name,\n+                });\n                 // The predicate we expect to see.\n                 let clause = ty::PredicateKind::Clause(ty::Clause::RegionOutlives(\n                     ty::OutlivesPredicate(region_a_param, region_b_param),"}, {"sha": "456c5bc99b73f6c3203eba9640f1bdfc269e26d2", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -458,13 +458,11 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n                                         self.tcx.replace_late_bound_regions_uncached(\n                                             poly_trait_ref,\n                                             |_| {\n-                                                self.tcx.mk_region(ty::ReEarlyBound(\n-                                                    ty::EarlyBoundRegion {\n-                                                        def_id: item_def_id,\n-                                                        index: 0,\n-                                                        name: Symbol::intern(&lt_name),\n-                                                    },\n-                                                ))\n+                                                self.tcx.mk_re_early_bound(ty::EarlyBoundRegion {\n+                                                    def_id: item_def_id,\n+                                                    index: 0,\n+                                                    name: Symbol::intern(&lt_name),\n+                                                })\n                                             }\n                                         ),\n                                     ),"}, {"sha": "5ac9003556d5ed03ad72b7702e721770add8a053", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -284,11 +284,11 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n \n             let Some(dup_index) = generics.param_def_id_to_index(tcx, dup_def) else { bug!() };\n \n-            let dup_region = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n+            let dup_region = tcx.mk_re_early_bound(ty::EarlyBoundRegion {\n                 def_id: dup_def,\n                 index: dup_index,\n                 name: duplicate.name.ident().name,\n-            }));\n+            });\n             predicates.push((\n                 ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::RegionOutlives(\n                     ty::OutlivesPredicate(orig_region, dup_region),"}, {"sha": "de7819e3c6a007a93627d1d3cc5951906d3c2421", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -1269,10 +1269,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // ```\n                 let ref_ty = match mutability {\n                     hir::Mutability::Mut => {\n-                        self.tcx.mk_mut_ref(self.tcx.mk_region(ty::ReStatic), checked_ty)\n+                        self.tcx.mk_mut_ref(self.tcx.lifetimes.re_static, checked_ty)\n                     }\n                     hir::Mutability::Not => {\n-                        self.tcx.mk_imm_ref(self.tcx.mk_region(ty::ReStatic), checked_ty)\n+                        self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, checked_ty)\n                     }\n                 };\n                 if self.can_coerce(ref_ty, expected) {"}, {"sha": "0e9e698e8298dd7aa6f9db523df6ae31366acc2c", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -271,7 +271,7 @@ pub fn resolve_interior<'a, 'tcx>(\n                     },\n                     _ => mk_bound_region(None),\n                 };\n-                let r = fcx.tcx.mk_region(ty::ReLateBound(current_depth, br));\n+                let r = fcx.tcx.mk_re_late_bound(current_depth, br);\n                 r\n             });\n             if captured_tys.insert(ty) {\n@@ -302,7 +302,7 @@ pub fn resolve_interior<'a, 'tcx>(\n                     let var = ty::BoundVar::from_usize(bound_vars.len());\n                     bound_vars.push(ty::BoundVariableKind::Region(kind));\n                     counter += 1;\n-                    fcx.tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BoundRegion { var, kind }))\n+                    fcx.tcx.mk_re_late_bound(ty::INNERMOST, ty::BoundRegion { var, kind })\n                 },\n                 types: &mut |b| bug!(\"unexpected bound ty in binder: {b:?}\"),\n                 consts: &mut |b, ty| bug!(\"unexpected bound ct in binder: {b:?} {ty}\"),\n@@ -364,7 +364,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                             let ty = tcx.mk_ref(\n                                 // Use `ReErased` as `resolve_interior` is going to replace all the\n                                 // regions anyway.\n-                                tcx.mk_region(ty::ReErased),\n+                                tcx.lifetimes.re_erased,\n                                 ty::TypeAndMut { ty, mutbl: hir::Mutability::Not },\n                             );\n                             self.interior_visitor.record("}, {"sha": "2b33d31994f2fc9d5b326874cb9b6a6dac36ecb2", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -363,7 +363,7 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'cx, 'tcx> {\n                      opportunistically resolved to {:?}\",\n                     vid, resolved_vid\n                 );\n-                let r = self.tcx.reuse_or_mk_region(r, ty::ReVar(resolved_vid));\n+                let r = self.tcx.mk_re_var(resolved_vid);\n                 self.canonicalize_mode.canonicalize_free_region(self, r)\n             }\n \n@@ -737,8 +737,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     ) -> ty::Region<'tcx> {\n         let var = self.canonical_var(info, r.into());\n         let br = ty::BoundRegion { var, kind: ty::BrAnon(var.as_u32(), None) };\n-        let region = ty::ReLateBound(self.binder_index, br);\n-        self.interner().mk_region(region)\n+        self.interner().mk_re_late_bound(self.binder_index, br)\n     }\n \n     /// Given a type variable `ty_var` of the given kind, first check"}, {"sha": "4552256545b4ba8d3551b2e1ca18f99eb9372880", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -137,7 +137,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             CanonicalVarKind::PlaceholderRegion(ty::PlaceholderRegion { universe, name }) => {\n                 let universe_mapped = universe_map(universe);\n                 let placeholder_mapped = ty::PlaceholderRegion { universe: universe_mapped, name };\n-                self.tcx.mk_region(ty::RePlaceholder(placeholder_mapped)).into()\n+                self.tcx.mk_re_placeholder(placeholder_mapped).into()\n             }\n \n             CanonicalVarKind::Const(ui, ty) => self"}, {"sha": "b9cb9732ca3edc4196ba883b5c66d1336aefd38a", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -642,15 +642,14 @@ pub fn make_query_region_constraints<'tcx>(\n             let constraint = match *k {\n                 // Swap regions because we are going from sub (<=) to outlives\n                 // (>=).\n-                Constraint::VarSubVar(v1, v2) => ty::OutlivesPredicate(\n-                    tcx.mk_region(ty::ReVar(v2)).into(),\n-                    tcx.mk_region(ty::ReVar(v1)),\n-                ),\n+                Constraint::VarSubVar(v1, v2) => {\n+                    ty::OutlivesPredicate(tcx.mk_re_var(v2).into(), tcx.mk_re_var(v1))\n+                }\n                 Constraint::VarSubReg(v1, r2) => {\n-                    ty::OutlivesPredicate(r2.into(), tcx.mk_region(ty::ReVar(v1)))\n+                    ty::OutlivesPredicate(r2.into(), tcx.mk_re_var(v1))\n                 }\n                 Constraint::RegSubVar(r1, v2) => {\n-                    ty::OutlivesPredicate(tcx.mk_region(ty::ReVar(v2)).into(), r1)\n+                    ty::OutlivesPredicate(tcx.mk_re_var(v2).into(), r1)\n                 }\n                 Constraint::RegSubReg(r1, r2) => ty::OutlivesPredicate(r2.into(), r1),\n             };\n@@ -690,7 +689,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n     }\n \n     fn next_placeholder_region(&mut self, placeholder: ty::PlaceholderRegion) -> ty::Region<'tcx> {\n-        self.infcx.tcx.mk_region(ty::RePlaceholder(placeholder))\n+        self.infcx.tcx.mk_re_placeholder(placeholder)\n     }\n \n     fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {"}, {"sha": "c1ea0a0d95e96a1d9dd7a106346e815e879461f2", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::print::{FmtPrinter, Print, RegionHighlightMode};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, RePlaceholder, ReVar, Region, TyCtxt};\n+use rustc_middle::ty::{self, RePlaceholder, Region, TyCtxt};\n \n use std::fmt;\n \n@@ -79,7 +79,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 sup_placeholder @ Region(Interned(RePlaceholder(_), _)),\n                 _,\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(self.tcx().mk_region(ReVar(*vid))),\n+                Some(self.tcx().mk_re_var(*vid)),\n                 cause,\n                 Some(*sub_placeholder),\n                 Some(*sup_placeholder),\n@@ -95,7 +95,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 _,\n                 _,\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(self.tcx().mk_region(ReVar(*vid))),\n+                Some(self.tcx().mk_re_var(*vid)),\n                 cause,\n                 Some(*sub_placeholder),\n                 None,\n@@ -111,7 +111,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 sup_placeholder @ Region(Interned(RePlaceholder(_), _)),\n                 _,\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(self.tcx().mk_region(ReVar(*vid))),\n+                Some(self.tcx().mk_re_var(*vid)),\n                 cause,\n                 None,\n                 Some(*sup_placeholder),\n@@ -127,7 +127,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 sup_placeholder @ Region(Interned(RePlaceholder(_), _)),\n                 _,\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(self.tcx().mk_region(ReVar(*vid))),\n+                Some(self.tcx().mk_re_var(*vid)),\n                 cause,\n                 None,\n                 Some(*sup_placeholder),\n@@ -141,7 +141,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sup_placeholder @ Region(Interned(RePlaceholder(_), _)),\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(self.tcx().mk_region(ReVar(*vid))),\n+                Some(self.tcx().mk_re_var(*vid)),\n                 cause,\n                 None,\n                 Some(*sup_placeholder),"}, {"sha": "82a1bb1fd1615a9de220b2fae4c8b872cf69f665", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -82,10 +82,10 @@ impl<'tcx> InferCtxt<'tcx> {\n \n         let delegate = FnMutDelegate {\n             regions: &mut |br: ty::BoundRegion| {\n-                self.tcx.mk_region(ty::RePlaceholder(ty::PlaceholderRegion {\n+                self.tcx.mk_re_placeholder(ty::PlaceholderRegion {\n                     universe: next_universe,\n                     name: br.kind,\n-                }))\n+                })\n             },\n             types: &mut |bound_ty: ty::BoundTy| {\n                 self.tcx.mk_placeholder(ty::PlaceholderType {"}, {"sha": "ac203c4eb0b24d054df8636e86c37369192ff547", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -382,7 +382,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     // name the placeholder, then the placeholder is\n                     // larger; otherwise, the only ancestor is `'static`.\n                     Err(placeholder) if empty_ui.can_name(placeholder.universe) => {\n-                        self.tcx().mk_region(RePlaceholder(placeholder))\n+                        self.tcx().mk_re_placeholder(placeholder)\n                     }\n                     Err(_) => self.tcx().lifetimes.re_static,\n                 };\n@@ -1046,7 +1046,7 @@ impl<'tcx> LexicalRegionResolutions<'tcx> {\n             ty::ReVar(rid) => match self.values[rid] {\n                 VarValue::Empty(_) => r,\n                 VarValue::Value(r) => r,\n-                VarValue::ErrorValue => tcx.re_error_misc(),\n+                VarValue::ErrorValue => tcx.mk_re_error_misc(),\n             },\n             _ => r,\n         };"}, {"sha": "bb734ccb20ef52c37ff7554674a96133953389fe", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -1093,7 +1093,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     ) -> ty::Region<'tcx> {\n         let region_var =\n             self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);\n-        self.tcx.mk_region(ty::ReVar(region_var))\n+        self.tcx.mk_re_var(region_var)\n     }\n \n     /// Return the universe that the region `r` was created in. For"}, {"sha": "e413b2bb570d6b23d79a23c00bc121182c5d8b31", "filename": "compiler/rustc_infer/src/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -280,7 +280,7 @@ impl<'me, 'tcx> LeakCheck<'me, 'tcx> {\n         placeholder1: ty::PlaceholderRegion,\n         placeholder2: ty::PlaceholderRegion,\n     ) -> TypeError<'tcx> {\n-        self.error(placeholder1, self.tcx.mk_region(ty::RePlaceholder(placeholder2)))\n+        self.error(placeholder1, self.tcx.mk_re_placeholder(placeholder2))\n     }\n \n     fn error(\n@@ -413,19 +413,19 @@ impl<'tcx> MiniGraph<'tcx> {\n         for undo_entry in undo_log {\n             match undo_entry {\n                 &AddConstraint(Constraint::VarSubVar(a, b)) => {\n-                    each_edge(tcx.mk_region(ReVar(a)), tcx.mk_region(ReVar(b)));\n+                    each_edge(tcx.mk_re_var(a), tcx.mk_re_var(b));\n                 }\n                 &AddConstraint(Constraint::RegSubVar(a, b)) => {\n-                    each_edge(a, tcx.mk_region(ReVar(b)));\n+                    each_edge(a, tcx.mk_re_var(b));\n                 }\n                 &AddConstraint(Constraint::VarSubReg(a, b)) => {\n-                    each_edge(tcx.mk_region(ReVar(a)), b);\n+                    each_edge(tcx.mk_re_var(a), b);\n                 }\n                 &AddConstraint(Constraint::RegSubReg(a, b)) => {\n                     each_edge(a, b);\n                 }\n                 &AddGiven(a, b) => {\n-                    each_edge(a, tcx.mk_region(ReVar(b)));\n+                    each_edge(a, tcx.mk_re_var(b));\n                 }\n                 &AddVerify(i) => span_bug!(\n                     verifys[i].origin.span(),"}, {"sha": "33514eedfc3d009ed6cfe9b736e3d869830f139d", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -651,7 +651,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n                 let unified_region = self.unification_table().probe_value(rid);\n                 unified_region.0.unwrap_or_else(|| {\n                     let root = self.unification_table().find(rid).vid;\n-                    tcx.reuse_or_mk_region(region, ty::ReVar(root))\n+                    tcx.mk_re_var(root)\n                 })\n             }\n             _ => region,\n@@ -675,15 +675,15 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     ) -> Region<'tcx> {\n         let vars = TwoRegions { a, b };\n         if let Some(&c) = self.combine_map(t).get(&vars) {\n-            return tcx.mk_region(ReVar(c));\n+            return tcx.mk_re_var(c);\n         }\n         let a_universe = self.universe(a);\n         let b_universe = self.universe(b);\n         let c_universe = cmp::max(a_universe, b_universe);\n         let c = self.new_region_var(c_universe, MiscVariable(origin.span()));\n         self.combine_map(t).insert(vars, c);\n         self.undo_log.push(AddCombination(t, vars));\n-        let new_r = tcx.mk_region(ReVar(c));\n+        let new_r = tcx.mk_re_var(c);\n         for old_r in [a, b] {\n             match t {\n                 Glb => self.make_subregion(origin.clone(), new_r, old_r),"}, {"sha": "2c246a5787c7cf92e299ea6efd732efb3399cd09", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for OpportunisticRegionResolver<'a, 'tcx\n                     .borrow_mut()\n                     .unwrap_region_constraints()\n                     .opportunistic_resolve_var(rid);\n-                TypeFolder::interner(self).reuse_or_mk_region(r, ty::ReVar(resolved))\n+                TypeFolder::interner(self).mk_re_var(resolved)\n             }\n             _ => r,\n         }"}, {"sha": "bb617e692cceaadc3c7395167c154a1f2245e449", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -353,7 +353,7 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n                                 var: ty::BoundVar::from_usize(i),\n                                 kind: ty::BrAnon(i as u32, None),\n                             };\n-                            tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)).into()\n+                            tcx.mk_re_late_bound(ty::INNERMOST, br).into()\n                         }\n                         CanonicalVarKind::Const(_, ty)\n                         | CanonicalVarKind::PlaceholderConst(_, ty) => tcx"}, {"sha": "b47996ffba2dc2f7869379d9400d7d4cc16a0c4e", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 110, "deletions": 16, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -243,11 +243,20 @@ impl<'tcx> CtxtInterners<'tcx> {\n     }\n }\n \n+// For these preinterned values, an alternative would be to have\n+// variable-length vectors that grow as needed. But that turned out to be\n+// slightly more complex and no faster.\n+\n const NUM_PREINTERNED_TY_VARS: u32 = 100;\n const NUM_PREINTERNED_FRESH_TYS: u32 = 20;\n const NUM_PREINTERNED_FRESH_INT_TYS: u32 = 3;\n const NUM_PREINTERNED_FRESH_FLOAT_TYS: u32 = 3;\n \n+// This number may seem high, but it is reached in all but the smallest crates.\n+const NUM_PREINTERNED_RE_VARS: u32 = 500;\n+const NUM_PREINTERNED_RE_LATE_BOUNDS_I: u32 = 2;\n+const NUM_PREINTERNED_RE_LATE_BOUNDS_V: u32 = 20;\n+\n pub struct CommonTypes<'tcx> {\n     pub unit: Ty<'tcx>,\n     pub bool: Ty<'tcx>,\n@@ -295,6 +304,14 @@ pub struct CommonLifetimes<'tcx> {\n \n     /// Erased region, used outside of type inference.\n     pub re_erased: Region<'tcx>,\n+\n+    /// Pre-interned `ReVar(ty::RegionVar(n))` for small values of `n`.\n+    pub re_vars: Vec<Region<'tcx>>,\n+\n+    /// Pre-interned values of the form:\n+    /// `ReLateBound(DebruijnIndex(i), BoundRegion { var: v, kind: BrAnon(v, None) })\n+    /// for small values of `i` and `v`.\n+    pub re_late_bounds: Vec<Vec<Region<'tcx>>>,\n }\n \n pub struct CommonConsts<'tcx> {\n@@ -358,7 +375,31 @@ impl<'tcx> CommonLifetimes<'tcx> {\n             ))\n         };\n \n-        CommonLifetimes { re_static: mk(ty::ReStatic), re_erased: mk(ty::ReErased) }\n+        let re_vars =\n+            (0..NUM_PREINTERNED_RE_VARS).map(|n| mk(ty::ReVar(ty::RegionVid::from(n)))).collect();\n+\n+        let re_late_bounds = (0..NUM_PREINTERNED_RE_LATE_BOUNDS_I)\n+            .map(|i| {\n+                (0..NUM_PREINTERNED_RE_LATE_BOUNDS_V)\n+                    .map(|v| {\n+                        mk(ty::ReLateBound(\n+                            ty::DebruijnIndex::from(i),\n+                            ty::BoundRegion {\n+                                var: ty::BoundVar::from(v),\n+                                kind: ty::BrAnon(v, None),\n+                            },\n+                        ))\n+                    })\n+                    .collect()\n+            })\n+            .collect();\n+\n+        CommonLifetimes {\n+            re_static: mk(ty::ReStatic),\n+            re_erased: mk(ty::ReErased),\n+            re_vars,\n+            re_late_bounds,\n+        }\n     }\n }\n \n@@ -697,15 +738,15 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Constructs a `RegionKind::ReError` lifetime.\n     #[track_caller]\n-    pub fn re_error(self, reported: ErrorGuaranteed) -> Region<'tcx> {\n-        self.mk_region(ty::ReError(reported))\n+    pub fn mk_re_error(self, reported: ErrorGuaranteed) -> Region<'tcx> {\n+        self.intern_region(ty::ReError(reported))\n     }\n \n     /// Constructs a `RegionKind::ReError` lifetime and registers a `delay_span_bug` to ensure it\n     /// gets used.\n     #[track_caller]\n-    pub fn re_error_misc(self) -> Region<'tcx> {\n-        self.re_error_with_message(\n+    pub fn mk_re_error_misc(self) -> Region<'tcx> {\n+        self.mk_re_error_with_message(\n             DUMMY_SP,\n             \"RegionKind::ReError constructed but no error reported\",\n         )\n@@ -714,9 +755,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Constructs a `RegionKind::ReError` lifetime and registers a `delay_span_bug` with the given\n     /// `msg` to ensure it gets used.\n     #[track_caller]\n-    pub fn re_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Region<'tcx> {\n+    pub fn mk_re_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Region<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n-        self.re_error(reported)\n+        self.mk_re_error(reported)\n     }\n \n     /// Like [TyCtxt::ty_error] but for constants, with current `ErrorGuaranteed`\n@@ -1517,7 +1558,7 @@ macro_rules! direct_interners {\n }\n \n direct_interners! {\n-    region: mk_region(RegionKind<'tcx>): Region -> Region<'tcx>,\n+    region: intern_region(RegionKind<'tcx>): Region -> Region<'tcx>,\n     const_: mk_const_internal(ConstData<'tcx>): Const -> Const<'tcx>,\n     const_allocation: intern_const_alloc(Allocation): ConstAllocation -> ConstAllocation<'tcx>,\n     layout: intern_layout(LayoutS): Layout -> Layout<'tcx>,\n@@ -1631,13 +1672,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n-    /// Same a `self.mk_region(kind)`, but avoids accessing the interners if\n-    /// `*r == kind`.\n-    #[inline]\n-    pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind<'tcx>) -> Region<'tcx> {\n-        if *r == kind { r } else { self.mk_region(kind) }\n-    }\n-\n     // Avoid this in favour of more specific `mk_*` methods, where possible.\n     #[allow(rustc::usage_of_ty_tykind)]\n     #[inline]\n@@ -1966,7 +2000,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {\n         match param.kind {\n             GenericParamDefKind::Lifetime => {\n-                self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()\n+                self.mk_re_early_bound(param.to_early_bound_region_data()).into()\n             }\n             GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),\n             GenericParamDefKind::Const { .. } => self\n@@ -1998,6 +2032,66 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_alias(ty::Opaque, self.mk_alias_ty(def_id, substs))\n     }\n \n+    #[inline]\n+    pub fn mk_re_early_bound(self, early_bound_region: ty::EarlyBoundRegion) -> Region<'tcx> {\n+        self.intern_region(ty::ReEarlyBound(early_bound_region))\n+    }\n+\n+    #[inline]\n+    pub fn mk_re_late_bound(\n+        self,\n+        debruijn: ty::DebruijnIndex,\n+        bound_region: ty::BoundRegion,\n+    ) -> Region<'tcx> {\n+        // Use a pre-interned one when possible.\n+        if let ty::BoundRegion { var, kind: ty::BrAnon(v, None) } = bound_region\n+            && var.as_u32() == v\n+            && let Some(inner) = self.lifetimes.re_late_bounds.get(debruijn.as_usize())\n+            && let Some(re) = inner.get(v as usize).copied()\n+        {\n+            re\n+        } else {\n+            self.intern_region(ty::ReLateBound(debruijn, bound_region))\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn mk_re_free(self, scope: DefId, bound_region: ty::BoundRegionKind) -> Region<'tcx> {\n+        self.intern_region(ty::ReFree(ty::FreeRegion { scope, bound_region }))\n+    }\n+\n+    #[inline]\n+    pub fn mk_re_var(self, v: ty::RegionVid) -> Region<'tcx> {\n+        // Use a pre-interned one when possible.\n+        self.lifetimes\n+            .re_vars\n+            .get(v.as_usize())\n+            .copied()\n+            .unwrap_or_else(|| self.intern_region(ty::ReVar(v)))\n+    }\n+\n+    #[inline]\n+    pub fn mk_re_placeholder(self, placeholder: ty::PlaceholderRegion) -> Region<'tcx> {\n+        self.intern_region(ty::RePlaceholder(placeholder))\n+    }\n+\n+    // Avoid this in favour of more specific `mk_re_*` methods, where possible,\n+    // to avoid the cost of the `match`.\n+    pub fn mk_region(self, kind: ty::RegionKind<'tcx>) -> Region<'tcx> {\n+        match kind {\n+            ty::ReEarlyBound(region) => self.mk_re_early_bound(region),\n+            ty::ReLateBound(debruijn, region) => self.mk_re_late_bound(debruijn, region),\n+            ty::ReFree(ty::FreeRegion { scope, bound_region }) => {\n+                self.mk_re_free(scope, bound_region)\n+            }\n+            ty::ReStatic => self.lifetimes.re_static,\n+            ty::ReVar(vid) => self.mk_re_var(vid),\n+            ty::RePlaceholder(region) => self.mk_re_placeholder(region),\n+            ty::ReErased => self.lifetimes.re_erased,\n+            ty::ReError(reported) => self.mk_re_error(reported),\n+        }\n+    }\n+\n     pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {\n         self.mk_place_elem(place, PlaceElem::Field(f, ty))\n     }"}, {"sha": "ee36e60bff15edf8991d9eace3c36341677cdbad", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -234,7 +234,7 @@ where\n                     // debruijn index. Then we adjust it to the\n                     // correct depth.\n                     assert_eq!(debruijn1, ty::INNERMOST);\n-                    self.tcx.reuse_or_mk_region(region, ty::ReLateBound(debruijn, br))\n+                    self.tcx.mk_re_late_bound(debruijn, br)\n                 } else {\n                     region\n                 }\n@@ -349,10 +349,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         T: TypeFoldable<'tcx>,\n     {\n         self.replace_late_bound_regions_uncached(value, |br| {\n-            self.mk_region(ty::ReFree(ty::FreeRegion {\n-                scope: all_outlive_scope,\n-                bound_region: br.kind,\n-            }))\n+            self.mk_re_free(all_outlive_scope, br.kind)\n         })\n     }\n \n@@ -365,10 +362,10 @@ impl<'tcx> TyCtxt<'tcx> {\n             value,\n             FnMutDelegate {\n                 regions: &mut |r: ty::BoundRegion| {\n-                    self.mk_region(ty::ReLateBound(\n+                    self.mk_re_late_bound(\n                         ty::INNERMOST,\n                         ty::BoundRegion { var: shift_bv(r.var), kind: r.kind },\n-                    ))\n+                    )\n                 },\n                 types: &mut |t: ty::BoundTy| {\n                     self.mk_bound(ty::INNERMOST, ty::BoundTy { var: shift_bv(t.var), kind: t.kind })\n@@ -409,7 +406,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     })\n                     .expect_region();\n                 let br = ty::BoundRegion { var, kind };\n-                self.tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br))\n+                self.tcx.mk_re_late_bound(ty::INNERMOST, br)\n             }\n             fn replace_ty(&mut self, bt: ty::BoundTy) -> Ty<'tcx> {\n                 let entry = self.map.entry(bt.var);\n@@ -479,8 +476,7 @@ impl<'tcx> ir::TypeFolder<TyCtxt<'tcx>> for Shifter<'tcx> {\n         match *r {\n             ty::ReLateBound(debruijn, br) if debruijn >= self.current_index => {\n                 let debruijn = debruijn.shifted_in(self.amount);\n-                let shifted = ty::ReLateBound(debruijn, br);\n-                self.tcx.mk_region(shifted)\n+                self.tcx.mk_re_late_bound(debruijn, br)\n             }\n             _ => r,\n         }\n@@ -521,7 +517,7 @@ pub fn shift_region<'tcx>(\n ) -> ty::Region<'tcx> {\n     match *region {\n         ty::ReLateBound(debruijn, br) if amount > 0 => {\n-            tcx.mk_region(ty::ReLateBound(debruijn.shifted_in(amount), br))\n+            tcx.mk_re_late_bound(debruijn.shifted_in(amount), br)\n         }\n         _ => region,\n     }"}, {"sha": "c29a94c971468e60a6f52eebda8970caa8c8ddc7", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -100,7 +100,7 @@ impl GenericParamDef {\n         preceding_substs: &[ty::GenericArg<'tcx>],\n     ) -> ty::GenericArg<'tcx> {\n         match &self.kind {\n-            ty::GenericParamDefKind::Lifetime => tcx.re_error_misc().into(),\n+            ty::GenericParamDefKind::Lifetime => tcx.mk_re_error_misc().into(),\n             ty::GenericParamDefKind::Type { .. } => tcx.ty_error().into(),\n             ty::GenericParamDefKind::Const { .. } => {\n                 tcx.const_error(tcx.bound_type_of(self.def_id).subst(tcx, preceding_substs)).into()"}, {"sha": "8aeef4684b38e1f0838bc8acca0af86036363ea1", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -143,7 +143,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseMapper<'tcx> {\n                     )\n                     .emit();\n \n-                self.interner().re_error(e)\n+                self.interner().mk_re_error(e)\n             }\n         }\n     }"}, {"sha": "1a228e99effc63ee5f9d42d03b1c766f3a22a563", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -182,7 +182,7 @@ impl<'tcx> RegionHighlightMode<'tcx> {\n \n     /// Convenience wrapper for `highlighting_region`.\n     pub fn highlighting_region_vid(&mut self, vid: ty::RegionVid, number: usize) {\n-        self.highlighting_region(self.tcx.mk_region(ty::ReVar(vid)), number)\n+        self.highlighting_region(self.tcx.mk_re_var(vid), number)\n     }\n \n     /// Returns `Some(n)` with the number to use for the given region, if any.\n@@ -2271,7 +2271,7 @@ impl<'a, 'tcx> ty::ir::TypeFolder<TyCtxt<'tcx>> for RegionFolder<'a, 'tcx> {\n         };\n         if let ty::ReLateBound(debruijn1, br) = *region {\n             assert_eq!(debruijn1, ty::INNERMOST);\n-            self.tcx.mk_region(ty::ReLateBound(self.current_index, br))\n+            self.tcx.mk_re_late_bound(self.current_index, br)\n         } else {\n             region\n         }\n@@ -2383,10 +2383,10 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                         if let Some(lt_idx) = lifetime_idx {\n                             if lt_idx > binder_level_idx {\n                                 let kind = ty::BrNamed(CRATE_DEF_ID.to_def_id(), name);\n-                                return tcx.mk_region(ty::ReLateBound(\n+                                return tcx.mk_re_late_bound(\n                                     ty::INNERMOST,\n                                     ty::BoundRegion { var: br.var, kind },\n-                                ));\n+                                );\n                             }\n                         }\n \n@@ -2398,10 +2398,10 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                         if let Some(lt_idx) = lifetime_idx {\n                             if lt_idx > binder_level_idx {\n                                 let kind = ty::BrNamed(def_id, name);\n-                                return tcx.mk_region(ty::ReLateBound(\n+                                return tcx.mk_re_late_bound(\n                                     ty::INNERMOST,\n                                     ty::BoundRegion { var: br.var, kind },\n-                                ));\n+                                );\n                             }\n                         }\n \n@@ -2411,10 +2411,10 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                         if let Some(lt_idx) = lifetime_idx {\n                             if lt_idx > binder_level_idx {\n                                 let kind = br.kind;\n-                                return tcx.mk_region(ty::ReLateBound(\n+                                return tcx.mk_re_late_bound(\n                                     ty::INNERMOST,\n                                     ty::BoundRegion { var: br.var, kind },\n-                                ));\n+                                );\n                             }\n                         }\n \n@@ -2426,7 +2426,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                     start_or_continue(&mut self, \"for<\", \", \");\n                     do_continue(&mut self, name);\n                 }\n-                tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BoundRegion { var: br.var, kind }))\n+                tcx.mk_re_late_bound(ty::INNERMOST, ty::BoundRegion { var: br.var, kind })\n             };\n             let mut folder = RegionFolder {\n                 tcx,"}, {"sha": "85c63131bffbb189938767fa553a1a168c9cddb2", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -1187,7 +1187,7 @@ impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for SkipBindersAt<'tcx> {\n             if index == self.index {\n                 Err(())\n             } else {\n-                Ok(self.interner().mk_region(ty::ReLateBound(index.shifted_out(1), bv)))\n+                Ok(self.interner().mk_re_late_bound(index.shifted_out(1), bv))\n             }\n         } else {\n             r.try_super_fold_with(self)"}, {"sha": "7f5ffe6f27a45e85a9b3b7abdff59e13b97a3a5a", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -564,14 +564,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         closure_def_id: DefId,\n         closure_substs: SubstsRef<'tcx>,\n-        env_region: ty::RegionKind<'tcx>,\n+        env_region: ty::Region<'tcx>,\n     ) -> Option<Ty<'tcx>> {\n         let closure_ty = self.mk_closure(closure_def_id, closure_substs);\n         let closure_kind_ty = closure_substs.as_closure().kind_ty();\n         let closure_kind = closure_kind_ty.to_opt_closure_kind()?;\n         let env_ty = match closure_kind {\n-            ty::ClosureKind::Fn => self.mk_imm_ref(self.mk_region(env_region), closure_ty),\n-            ty::ClosureKind::FnMut => self.mk_mut_ref(self.mk_region(env_region), closure_ty),\n+            ty::ClosureKind::Fn => self.mk_imm_ref(env_region, closure_ty),\n+            ty::ClosureKind::FnMut => self.mk_mut_ref(env_region, closure_ty),\n             ty::ClosureKind::FnOnce => closure_ty,\n         };\n         Some(env_ty)"}, {"sha": "c9fa599f52dd37deb2038ce689127647a8381e39", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -140,7 +140,7 @@ impl<'tcx> Cx<'tcx> {\n                     var: ty::BoundVar::from_usize(bound_vars.len() - 1),\n                     kind: ty::BrEnv,\n                 };\n-                let env_region = ty::ReLateBound(ty::INNERMOST, br);\n+                let env_region = self.tcx.mk_re_late_bound(ty::INNERMOST, br);\n                 let closure_env_ty =\n                     self.tcx.closure_env_ty(closure_def_id, closure_substs, env_region).unwrap();\n                 let liberated_closure_env_ty = self.tcx.erase_late_bound_regions("}, {"sha": "2ca33a624e20661592a956e4d5c76ca70880ada3", "filename": "compiler/rustc_mir_transform/src/large_enums.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -3,7 +3,7 @@ use crate::MirPass;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::mir::interpret::AllocId;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, AdtDef, Const, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtDef, ParamEnv, Ty, TyCtxt};\n use rustc_session::Session;\n use rustc_target::abi::{HasDataLayout, Size, TagEncoding, Variants};\n \n@@ -141,10 +141,7 @@ impl EnumSizeOpt {\n                         self.candidate(tcx, param_env, ty, &mut alloc_cache)?;\n                     let alloc = tcx.global_alloc(alloc_id).unwrap_memory();\n \n-                    let tmp_ty = tcx.mk_ty(ty::Array(\n-                        tcx.types.usize,\n-                        Const::from_target_usize(tcx, num_variants as u64),\n-                    ));\n+                    let tmp_ty = tcx.mk_array(tcx.types.usize, num_variants as u64);\n \n                     let size_array_local = local_decls.push(LocalDecl::new(tmp_ty, span));\n                     let store_live = Statement {"}, {"sha": "84c50a3aa8a3288a66325f7fd8855551cbe4eb10", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -527,8 +527,7 @@ fn virtual_call_violation_for_method<'tcx>(\n                 }\n             }\n \n-            let trait_object_ty =\n-                object_ty_for_trait(tcx, trait_def_id, tcx.mk_region(ty::ReStatic));\n+            let trait_object_ty = object_ty_for_trait(tcx, trait_def_id, tcx.lifetimes.re_static);\n \n             // e.g., `Rc<dyn Trait>`\n             let trait_object_receiver ="}, {"sha": "7ddffe595be7261f58d0eb707ae2a7508de0c948", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -767,7 +767,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'_, 'tcx> {\n                 let universe = self.universe_for(debruijn);\n                 let p = ty::PlaceholderRegion { universe, name: br.kind };\n                 self.mapped_regions.insert(p, br);\n-                self.infcx.tcx.mk_region(ty::RePlaceholder(p))\n+                self.infcx.tcx.mk_re_placeholder(p)\n             }\n             _ => r,\n         }\n@@ -888,7 +888,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for PlaceholderReplacer<'_, 'tcx> {\n                         let db = ty::DebruijnIndex::from_usize(\n                             self.universe_indices.len() - index + self.current_index.as_usize() - 1,\n                         );\n-                        self.interner().mk_region(ty::ReLateBound(db, *replace_var))\n+                        self.interner().mk_re_late_bound(db, *replace_var)\n                     }\n                     None => r1,\n                 }"}, {"sha": "9770813e86d86108574a6d3ca154369b290f8b10", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -540,13 +540,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                 let kind = ty::BoundRegionKind::BrNamed(param.def_id, param.name);\n                                 let bound_var = ty::BoundVariableKind::Region(kind);\n                                 bound_vars.push(bound_var);\n-                                tcx.mk_region(ty::ReLateBound(\n+                                tcx.mk_re_late_bound(\n                                     ty::INNERMOST,\n                                     ty::BoundRegion {\n                                         var: ty::BoundVar::from_usize(bound_vars.len() - 1),\n                                         kind,\n                                     },\n-                                ))\n+                                )\n                                 .into()\n                             }\n                             GenericParamDefKind::Const { .. } => {"}, {"sha": "215d39ef3749b8b62ab5410253cba09c34721bbe", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -3023,7 +3023,7 @@ fn bind_generator_hidden_types_above<'tcx>(\n                             kind: ty::BrAnon(counter, None),\n                         };\n                         counter += 1;\n-                        r = tcx.mk_region(ty::ReLateBound(current_depth, br));\n+                        r = tcx.mk_re_late_bound(current_depth, br);\n                     }\n                     r\n                 })"}, {"sha": "bb2b3ac660904754531b66387f266d8dda57061c", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -732,7 +732,7 @@ fn bound_vars_for_item(tcx: TyCtxt<'_>, def_id: DefId) -> SubstsRef<'_> {\n                 var: ty::BoundVar::from_usize(substs.len()),\n                 kind: ty::BrAnon(substs.len() as u32, None),\n             };\n-            tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)).into()\n+            tcx.mk_re_late_bound(ty::INNERMOST, br).into()\n         }\n \n         ty::GenericParamDefKind::Const { .. } => tcx"}, {"sha": "9abbd0c5b3448b04b66644acaf9c5424c4cfb678", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -521,24 +521,24 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'t\n \n impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'tcx>> {\n     fn lower_into(self, interner: RustInterner<'tcx>) -> Region<'tcx> {\n-        let kind = match self.data(interner) {\n-            chalk_ir::LifetimeData::BoundVar(var) => ty::ReLateBound(\n+        let tcx = interner.tcx;\n+        match self.data(interner) {\n+            chalk_ir::LifetimeData::BoundVar(var) => tcx.mk_re_late_bound(\n                 ty::DebruijnIndex::from_u32(var.debruijn.depth()),\n                 ty::BoundRegion {\n                     var: ty::BoundVar::from_usize(var.index),\n                     kind: ty::BrAnon(var.index as u32, None),\n                 },\n             ),\n             chalk_ir::LifetimeData::InferenceVar(_var) => unimplemented!(),\n-            chalk_ir::LifetimeData::Placeholder(p) => ty::RePlaceholder(ty::Placeholder {\n+            chalk_ir::LifetimeData::Placeholder(p) => tcx.mk_re_placeholder(ty::Placeholder {\n                 universe: ty::UniverseIndex::from_usize(p.ui.counter),\n                 name: ty::BoundRegionKind::BrAnon(p.idx as u32, None),\n             }),\n-            chalk_ir::LifetimeData::Static => return interner.tcx.lifetimes.re_static,\n-            chalk_ir::LifetimeData::Erased => return interner.tcx.lifetimes.re_erased,\n+            chalk_ir::LifetimeData::Static => tcx.lifetimes.re_static,\n+            chalk_ir::LifetimeData::Erased => tcx.lifetimes.re_erased,\n             chalk_ir::LifetimeData::Phantom(void, _) => match *void {},\n-        };\n-        interner.tcx.mk_region(kind)\n+        }\n     }\n }\n \n@@ -1025,7 +1025,7 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for NamedBoundVarSubstitutor<'a, 'tcx> {\n                 ty::BrNamed(def_id, _name) => match self.named_parameters.get(&def_id) {\n                     Some(idx) => {\n                         let new_br = ty::BoundRegion { var: br.var, kind: ty::BrAnon(*idx, None) };\n-                        return self.tcx.mk_region(ty::ReLateBound(index, new_br));\n+                        return self.tcx.mk_re_late_bound(index, new_br);\n                     }\n                     None => panic!(\"Missing `BrNamed`.\"),\n                 },\n@@ -1107,7 +1107,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ParamsSubstitutor<'tcx> {\n                         var: ty::BoundVar::from_u32(*idx),\n                         kind: ty::BrAnon(*idx, None),\n                     };\n-                    self.tcx.mk_region(ty::ReLateBound(self.binder_index, br))\n+                    self.tcx.mk_re_late_bound(self.binder_index, br)\n                 }\n                 None => {\n                     let idx = self.named_regions.len() as u32;\n@@ -1116,7 +1116,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ParamsSubstitutor<'tcx> {\n                         kind: ty::BrAnon(idx, None),\n                     };\n                     self.named_regions.insert(_re.def_id, idx);\n-                    self.tcx.mk_region(ty::ReLateBound(self.binder_index, br))\n+                    self.tcx.mk_re_late_bound(self.binder_index, br)\n                 }\n             },\n "}, {"sha": "03025e186b3e02f69812685ab6f23f722e170d8e", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1b3ea9665e77e3af2f17b311bf65469eedc19/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "patch": "@@ -70,7 +70,7 @@ fn fn_sig_for_fn_abi<'tcx>(\n                 var: ty::BoundVar::from_usize(bound_vars.len() - 1),\n                 kind: ty::BoundRegionKind::BrEnv,\n             };\n-            let env_region = ty::ReLateBound(ty::INNERMOST, br);\n+            let env_region = tcx.mk_re_late_bound(ty::INNERMOST, br);\n             let env_ty = tcx.closure_env_ty(def_id, substs, env_region).unwrap();\n \n             let sig = sig.skip_binder();\n@@ -95,8 +95,7 @@ fn fn_sig_for_fn_abi<'tcx>(\n                 var: ty::BoundVar::from_usize(bound_vars.len() - 1),\n                 kind: ty::BoundRegionKind::BrEnv,\n             };\n-            let env_region = ty::ReLateBound(ty::INNERMOST, br);\n-            let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n+            let env_ty = tcx.mk_mut_ref(tcx.mk_re_late_bound(ty::INNERMOST, br), ty);\n \n             let pin_did = tcx.require_lang_item(LangItem::Pin, None);\n             let pin_adt_ref = tcx.adt_def(pin_did);"}]}