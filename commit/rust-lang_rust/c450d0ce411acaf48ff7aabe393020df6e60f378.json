{"sha": "c450d0ce411acaf48ff7aabe393020df6e60f378", "node_id": "C_kwDOAAsO6NoAKGM0NTBkMGNlNDExYWNhZjQ4ZmY3YWFiZTM5MzAyMGRmNmU2MGYzNzg", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-02-15T14:47:23Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-02-15T14:47:23Z"}, "message": "cleanup", "tree": {"sha": "57024e76acdf0ef9314b76d9cdeb82d47d3890e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57024e76acdf0ef9314b76d9cdeb82d47d3890e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c450d0ce411acaf48ff7aabe393020df6e60f378", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmILvPsACgkQeO9fUvOM\nSb1wiQv/SDcS2/sxNfQC8qMS1OlMckOnuGE248OSrUNvI2q7Pmkjmek/lfp5ehzM\nQD1zR2rmGIRNU7sFGQ1uGNcrD/xKgygf9C2xwRF6DtLhro/MCvTSIaoxRaIhwy7X\njNAEmC1cMY5MA+0eO1WK8GvVlonCgPV2wJamX1tM/U8nKNpuTO+V7y4u4Jg9Gr6D\n2b6c50dF90QToLM3d5Yh9dTykjnkz4F769cQJSW51g/nsWRK0YbC/m+d3iCL7eSU\nN9OGGtc9GF3KGS2xuDbDMpakxDTkVfjmMMVgnLrb8p7dIBsvKC5xo5EFSCgKYm9L\npr8x/GD5hqznfqp+stmLyAM4HN1iQSEu+fMVMuVgxxk5AI9AjDxid9iQKeOYDqvM\n75/gqneVna4czd6GBtCdyAsi7yWZd2MrIijVhjWjvXChHd42rE97SCCxGFQkkukR\nFKPADqdD+zGAlGeCvfJQ5c3GX3JFZRtyodh1wnAm8TfmoVfIR1gy5asOjOyGirQX\nFH1MLrfC\n=VG/X\n-----END PGP SIGNATURE-----", "payload": "tree 57024e76acdf0ef9314b76d9cdeb82d47d3890e1\nparent 73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1644936443 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1644936443 +0000\n\ncleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c450d0ce411acaf48ff7aabe393020df6e60f378", "html_url": "https://github.com/rust-lang/rust/commit/c450d0ce411acaf48ff7aabe393020df6e60f378", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c450d0ce411acaf48ff7aabe393020df6e60f378/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd", "html_url": "https://github.com/rust-lang/rust/commit/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd"}], "stats": {"total": 25, "additions": 7, "deletions": 18}, "files": [{"sha": "3f83041bec0e2b1ede472977f443cf9eac64c8bb", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c450d0ce411acaf48ff7aabe393020df6e60f378/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c450d0ce411acaf48ff7aabe393020df6e60f378/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=c450d0ce411acaf48ff7aabe393020df6e60f378", "patch": "@@ -5,7 +5,7 @@ exclude = [\"crates/proc_macro_test/imp\"]\n [profile.dev]\n # Disabling debug info speeds up builds a bunch,\n # and we don't rely on it for debugging that much.\n-debug = 2\n+debug = 0\n \n [profile.dev.package]\n # These speed up local tests."}, {"sha": "1e949771ea01ffb8a69adb4c2c89280a41ab9cf9", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c450d0ce411acaf48ff7aabe393020df6e60f378/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c450d0ce411acaf48ff7aabe393020df6e60f378/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=c450d0ce411acaf48ff7aabe393020df6e60f378", "patch": "@@ -22,9 +22,7 @@ use crate::{\n \n impl HirDisplay for Function {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n-        println!(\"Formatting for Function\");\n         let data = f.db.function_data(self.id);\n-        println!(\"data: {:?}\", &data);\n         write_visibility(self.module(f.db).id, self.visibility(f.db), f)?;\n         if data.is_default() {\n             write!(f, \"default \")?;\n@@ -463,15 +461,13 @@ impl HirDisplay for Trait {\n \n impl HirDisplay for TypeAlias {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n-        println!(\"Formatting for TypeAlias\");\n         write_visibility(self.module(f.db).id, self.visibility(f.db), f)?;\n         let data = f.db.type_alias_data(self.id);\n         write!(f, \"type {}\", data.name)?;\n         if !data.bounds.is_empty() {\n             write!(f, \": \")?;\n             f.write_joined(&data.bounds, \" + \")?;\n         }\n-        println!(\"type_ref: {:?}\", &data.type_ref);\n         if let Some(ty) = &data.type_ref {\n             write!(f, \" = \")?;\n             ty.hir_fmt(f)?;"}, {"sha": "0df6e97dd463234f0128a271283266583bb1963a", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c450d0ce411acaf48ff7aabe393020df6e60f378/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c450d0ce411acaf48ff7aabe393020df6e60f378/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=c450d0ce411acaf48ff7aabe393020df6e60f378", "patch": "@@ -493,10 +493,10 @@ impl<'a> Printer<'a> {\n                 w!(self, \"]\");\n             }\n             TypeRef::Fn(args_and_ret, varargs) => {\n-                let (ret, args) =\n+                let ((_, return_type), args) =\n                     args_and_ret.split_last().expect(\"TypeRef::Fn is missing return type\");\n                 w!(self, \"fn(\");\n-                for (i, (name, typeref)) in args.iter().enumerate() {\n+                for (i, (_, typeref)) in args.iter().enumerate() {\n                     if i != 0 {\n                         w!(self, \", \");\n                     }\n@@ -509,7 +509,7 @@ impl<'a> Printer<'a> {\n                     w!(self, \"...\");\n                 }\n                 w!(self, \") -> \");\n-                self.print_type_ref(&ret.1);\n+                self.print_type_ref(&return_type);\n             }\n             TypeRef::Macro(_ast_id) => {\n                 w!(self, \"<macro>\");"}, {"sha": "8667e0a7d6da0545bc0617fee3429ad59fbd5cad", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c450d0ce411acaf48ff7aabe393020df6e60f378/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c450d0ce411acaf48ff7aabe393020df6e60f378/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=c450d0ce411acaf48ff7aabe393020df6e60f378", "patch": "@@ -189,10 +189,9 @@ impl TypeRef {\n                     }\n \n                     pl.params().map(|p| (p.pat(), p.ty())).map(|it| {\n-                        println!(\"{it:?}\");\n                         let type_ref = TypeRef::from_ast_opt(ctx, it.1);\n-                        let name = it.0.unwrap().syntax().text().to_string();\n-                        (Some(name), type_ref)\n+                        let name = if it.0.is_some() { Some(it.0.unwrap().syntax().text().to_string()) } else { None };\n+                        (name, type_ref)\n                     }).collect()\n                 } else {\n                     Vec::new()"}, {"sha": "ad330d6261c361031d1c02affedf171abe911cab", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c450d0ce411acaf48ff7aabe393020df6e60f378/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c450d0ce411acaf48ff7aabe393020df6e60f378/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=c450d0ce411acaf48ff7aabe393020df6e60f378", "patch": "@@ -239,7 +239,6 @@ where\n     T: HirDisplay,\n {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        println!(\"formatting..\");\n         match self.t.hir_fmt(&mut HirFormatter {\n             db: self.db,\n             fmt: f,\n@@ -341,10 +340,7 @@ impl HirDisplay for Ty {\n         if f.should_truncate() {\n             return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n         }\n-\n-        let interner_kind = self.kind(Interner);\n-        println!(\"interner kind: {interner_kind:?}\");\n-\n+        \n         match self.kind(Interner) {\n             TyKind::Never => write!(f, \"!\")?,\n             TyKind::Str => write!(f, \"str\")?,"}, {"sha": "0eba0b09ba6e2dfded2f179b785f18c7e1bcd5a0", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c450d0ce411acaf48ff7aabe393020df6e60f378/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c450d0ce411acaf48ff7aabe393020df6e60f378/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=c450d0ce411acaf48ff7aabe393020df6e60f378", "patch": "@@ -172,7 +172,6 @@ pub(crate) fn hover_for_definition(\n         Definition::BuiltinType(_) => Some(FamousDefs(sema, sema.scope(node).krate())),\n         _ => None,\n     };\n-    println!(\"definition: {definition:?}\");\n     if let Some(markup) = render::definition(sema.db, definition, famous_defs.as_ref(), config) {\n         let mut res = HoverResult::default();\n         res.markup = render::process_markup(sema.db, definition, &markup, config);"}, {"sha": "f94348ec581df33d1e1a4ef85043dbb504473175", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c450d0ce411acaf48ff7aabe393020df6e60f378/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c450d0ce411acaf48ff7aabe393020df6e60f378/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=c450d0ce411acaf48ff7aabe393020df6e60f378", "patch": "@@ -411,7 +411,6 @@ where\n     D: HasAttrs + HirDisplay,\n {\n     let label = def.display(db).to_string();\n-    println!(\"label: {label:?}\");\n     let docs = def.attrs(db).docs();\n     (label, docs)\n }"}]}