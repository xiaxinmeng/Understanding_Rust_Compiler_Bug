{"sha": "9b7ba980cf9b7f69a8c637aec9c7e2bb9d0fc931", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliN2JhOTgwY2Y5YjdmNjlhOGM2MzdhZWM5YzdlMmJiOWQwZmM5MzE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "topecongiro@localhost.localdomain", "date": "2017-06-03T14:17:30Z"}, "committer": {"name": "Seiichi Uchida", "email": "topecongiro@localhost.localdomain", "date": "2017-06-03T14:17:30Z"}, "message": "Use correct budget", "tree": {"sha": "c18ae05af88c4a1d11763b453b554a45565fda0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c18ae05af88c4a1d11763b453b554a45565fda0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b7ba980cf9b7f69a8c637aec9c7e2bb9d0fc931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b7ba980cf9b7f69a8c637aec9c7e2bb9d0fc931", "html_url": "https://github.com/rust-lang/rust/commit/9b7ba980cf9b7f69a8c637aec9c7e2bb9d0fc931", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b7ba980cf9b7f69a8c637aec9c7e2bb9d0fc931/comments", "author": null, "committer": null, "parents": [{"sha": "d21792a73086e3517545c56a5c620bf3dd414cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d21792a73086e3517545c56a5c620bf3dd414cdc", "html_url": "https://github.com/rust-lang/rust/commit/d21792a73086e3517545c56a5c620bf3dd414cdc"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "ac46c908a01a05449d62f9e89c19e812c63a1623", "filename": "src/items.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b7ba980cf9b7f69a8c637aec9c7e2bb9d0fc931/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7ba980cf9b7f69a8c637aec9c7e2bb9d0fc931/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=9b7ba980cf9b7f69a8c637aec9c7e2bb9d0fc931", "patch": "@@ -1998,25 +1998,21 @@ fn compute_budgets_for_args(context: &RewriteContext,\n \n         if one_line_budget > 0 {\n             // 4 = \"() {\".len()\n-            let multi_line_budget = try_opt!(context\n-                                                 .config\n-                                                 .max_width()\n-                                                 .checked_sub(indent.width() + result.len() + 4));\n+            let multi_line_overhead = indent.width() + result.len() +\n+                                      if newline_brace { 2 } else { 4 };\n+            let multi_line_budget =\n+                try_opt!(context.config.max_width().checked_sub(multi_line_overhead));\n \n             return Some((one_line_budget, multi_line_budget, indent + result.len() + 1));\n         }\n     }\n \n     // Didn't work. we must force vertical layout and put args on a newline.\n     let new_indent = indent.block_indent(context.config);\n-    let used_space = new_indent.width() + 4; // Account for `(` and `)` and possibly ` {`.\n-    let max_space = context.config.max_width();\n-    if used_space <= max_space {\n-        Some((0, max_space - used_space, new_indent))\n-    } else {\n-        // Whoops! bankrupt.\n-        None\n-    }\n+    // Account for `)` and possibly ` {`.\n+    let used_space = new_indent.width() + if ret_str_len == 0 { 1 } else { 3 };\n+    let max_space = try_opt!(context.config.max_width().checked_sub(used_space));\n+    Some((0, max_space, new_indent))\n }\n \n fn newline_for_brace(config: &Config, where_clause: &ast::WhereClause) -> bool {"}]}