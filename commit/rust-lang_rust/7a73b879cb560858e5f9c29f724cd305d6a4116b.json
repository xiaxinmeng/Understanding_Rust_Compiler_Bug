{"sha": "7a73b879cb560858e5f9c29f724cd305d6a4116b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNzNiODc5Y2I1NjA4NThlNWY5YzI5ZjcyNGNkMzA1ZDZhNDExNmI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-22T08:23:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-24T07:34:28Z"}, "message": "fix const_prop ICE", "tree": {"sha": "f98f688d955bd26de2021339cb285836a3013085", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f98f688d955bd26de2021339cb285836a3013085"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a73b879cb560858e5f9c29f724cd305d6a4116b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a73b879cb560858e5f9c29f724cd305d6a4116b", "html_url": "https://github.com/rust-lang/rust/commit/7a73b879cb560858e5f9c29f724cd305d6a4116b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a73b879cb560858e5f9c29f724cd305d6a4116b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58a56cc8c088cbe51d1c6d324ab6f9bb03e365fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/58a56cc8c088cbe51d1c6d324ab6f9bb03e365fd", "html_url": "https://github.com/rust-lang/rust/commit/58a56cc8c088cbe51d1c6d324ab6f9bb03e365fd"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "aa30f43df93500018eebc19b9fb7abb95303dc7d", "filename": "src/librustc_mir/const_eval/error.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a73b879cb560858e5f9c29f724cd305d6a4116b/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a73b879cb560858e5f9c29f724cd305d6a4116b/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs?ref=7a73b879cb560858e5f9c29f724cd305d6a4116b", "patch": "@@ -34,11 +34,9 @@ impl fmt::Display for ConstEvalErrKind {\n                 write!(f, \"\\\"{}\\\" needs an rfc before being allowed inside constants\", msg)\n             }\n             ConstAccessesStatic => write!(f, \"constant accesses static\"),\n-            ModifiedGlobal => write!(\n-                f,\n-                \"modifying a static's initial value from another static's \\\n-                    initializer\"\n-            ),\n+            ModifiedGlobal => {\n+                write!(f, \"modifying a static's initial value from another static's initializer\")\n+            }\n             AssertFailure(ref msg) => write!(f, \"{:?}\", msg),\n             Panic { msg, line, col, file } => {\n                 write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col)"}, {"sha": "8f4501cc3fb69ace1fd213244a418c1bab5d4275", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a73b879cb560858e5f9c29f724cd305d6a4116b/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a73b879cb560858e5f9c29f724cd305d6a4116b/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=7a73b879cb560858e5f9c29f724cd305d6a4116b", "patch": "@@ -358,6 +358,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n         } else if is_write {\n             Err(ConstEvalErrKind::ModifiedGlobal.into())\n         } else if memory_extra.can_access_statics || def_id.is_none() {\n+            // `def_id.is_none()` indicates this is not a static, but a const or so.\n             Ok(())\n         } else {\n             Err(ConstEvalErrKind::ConstAccessesStatic.into())"}, {"sha": "cc87c2916862be2e88b414ae56b07a530f4c2482", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a73b879cb560858e5f9c29f724cd305d6a4116b/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a73b879cb560858e5f9c29f724cd305d6a4116b/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=7a73b879cb560858e5f9c29f724cd305d6a4116b", "patch": "@@ -209,6 +209,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     }\n \n     /// Called before a global allocation is accessed.\n+    /// `def_id` is `Some` if this is the \"lazy\" allocation of a static.\n     #[inline]\n     fn before_access_global(\n         _memory_extra: &Self::MemoryExtra,"}, {"sha": "110f2ffd9d78c8045affa8d9e6545e415d1785c3", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a73b879cb560858e5f9c29f724cd305d6a4116b/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a73b879cb560858e5f9c29f724cd305d6a4116b/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=7a73b879cb560858e5f9c29f724cd305d6a4116b", "patch": "@@ -416,7 +416,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, Cow<'tcx, Allocation<M::PointerTag, M::AllocExtra>>> {\n         let alloc = tcx.alloc_map.lock().get(id);\n         let (alloc, def_id) = match alloc {\n-            Some(GlobalAlloc::Memory(mem)) => (mem, None),\n+            Some(GlobalAlloc::Memory(mem)) => {\n+                // Memory of a constant or promoted or anonymous memory referenced by a static.\n+                (mem, None)\n+            }\n             Some(GlobalAlloc::Function(..)) => throw_ub!(DerefFunctionPointer(id)),\n             None => throw_ub!(PointerUseAfterFree(id)),\n             Some(GlobalAlloc::Static(def_id)) => {"}, {"sha": "ef2d5404541b9ae032465a7046b20df4b295e929", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a73b879cb560858e5f9c29f724cd305d6a4116b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a73b879cb560858e5f9c29f724cd305d6a4116b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=7a73b879cb560858e5f9c29f724cd305d6a4116b", "patch": "@@ -274,15 +274,19 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         _memory_extra: &(),\n         _alloc_id: AllocId,\n         allocation: &Allocation<Self::PointerTag, Self::AllocExtra>,\n-        _def_id: Option<DefId>,\n+        def_id: Option<DefId>,\n         is_write: bool,\n     ) -> InterpResult<'tcx> {\n         if is_write {\n             throw_machine_stop_str!(\"can't write to global\");\n         }\n         // If the static allocation is mutable or if it has relocations (it may be legal to mutate\n         // the memory behind that in the future), then we can't const prop it.\n-        if allocation.mutability == Mutability::Mut || allocation.relocations().len() > 0 {\n+        // FIXME: we only check statics here (that have a `DefId`), not other mutable allocations.\n+        // Why that?\n+        if def_id.is_some()\n+            && (allocation.mutability == Mutability::Mut || allocation.relocations().len() > 0)\n+        {\n             throw_machine_stop_str!(\"can't eval mutable statics in ConstProp\");\n         }\n "}]}