{"sha": "495566ee61174066014b928fffd182834c1eb214", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NTU2NmVlNjExNzQwNjYwMTRiOTI4ZmZmZDE4MjgzNGMxZWIyMTQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-02T00:53:28Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-13T12:19:17Z"}, "message": "Decouple structure kinds from NodeIds", "tree": {"sha": "6af573a725d3b5916cccc8d3122163166fc40f64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6af573a725d3b5916cccc8d3122163166fc40f64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/495566ee61174066014b928fffd182834c1eb214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/495566ee61174066014b928fffd182834c1eb214", "html_url": "https://github.com/rust-lang/rust/commit/495566ee61174066014b928fffd182834c1eb214", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/495566ee61174066014b928fffd182834c1eb214/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2314ab29c26c9364c7f8e26b55ce091998489f58", "url": "https://api.github.com/repos/rust-lang/rust/commits/2314ab29c26c9364c7f8e26b55ce091998489f58", "html_url": "https://github.com/rust-lang/rust/commit/2314ab29c26c9364c7f8e26b55ce091998489f58"}], "stats": {"total": 244, "additions": 113, "deletions": 131}, "files": [{"sha": "51ba799c5d1111e10ef11cf4135b4c1bbe6c4c1c", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -150,8 +150,8 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n             }\n             ItemStruct(ref struct_def, _) => {\n                 // If this is a tuple-like struct, register the constructor.\n-                if let Some(ctor_id) = struct_def.ctor_id {\n-                    self.insert_def(ctor_id,\n+                if struct_def.kind != VariantKind::Dict {\n+                    self.insert_def(struct_def.id,\n                                     NodeStructCtor(&**struct_def),\n                                     DefPathData::StructCtor);\n                 }"}, {"sha": "b183f12a092cfeae00c240190cc52cf9d97b53fb", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -480,8 +480,8 @@ impl<'ast> Map<'ast> {\n                 }\n             }\n             Some(NodeVariant(variant)) => {\n-                match variant.node.def.ctor_id {\n-                    None => &variant.node.def,\n+                match variant.node.def.kind {\n+                    VariantKind::Dict => &variant.node.def,\n                     _ => panic!(\"struct ID bound to enum variant that isn't struct-like\"),\n                 }\n             }"}, {"sha": "7c08d7618d79b179a705f408ae1b916795daef93", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -381,12 +381,8 @@ fn each_auxiliary_node_id<F>(item: &hir::Item, callback: F) -> bool where\n     match item.node {\n         hir::ItemStruct(ref struct_def, _) => {\n             // If this is a newtype struct, return the constructor.\n-            match struct_def.ctor_id {\n-                Some(ctor_id) if !struct_def.fields.is_empty() &&\n-                        struct_def.fields[0].node.kind.is_unnamed() => {\n-                    continue_ = callback(ctor_id);\n-                }\n-                _ => {}\n+            if struct_def.kind == hir::VariantKind::Tuple {\n+                continue_ = callback(struct_def.id);\n             }\n         }\n         _ => {}\n@@ -1085,9 +1081,8 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         }\n \n         // If this is a tuple-like struct, encode the type of the constructor.\n-        if let Some(ctor_id) = struct_def.ctor_id {\n-            encode_info_for_struct_ctor(ecx, rbml_w, item.name,\n-                                        ctor_id, index, item.id);\n+        if struct_def.kind != hir::VariantKind::Dict {\n+            encode_info_for_struct_ctor(ecx, rbml_w, item.name, struct_def.id, index, item.id);\n         }\n       }\n       hir::ItemDefaultImpl(unsafety, _) => {"}, {"sha": "f977992e735fec3216316ff17b3be8e84e8c1d42", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -426,7 +426,9 @@ fn find_live(tcx: &ty::ctxt,\n \n fn get_struct_ctor_id(item: &hir::Item) -> Option<ast::NodeId> {\n     match item.node {\n-        hir::ItemStruct(ref struct_def, _) => struct_def.ctor_id,\n+        hir::ItemStruct(ref struct_def, _) if struct_def.kind != hir::VariantKind::Dict => {\n+            Some(struct_def.id)\n+        }\n         _ => None\n     }\n }"}, {"sha": "8476adf68381ed673e38af508811b24bf4a2d00b", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -185,9 +185,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n                       |v| visit::walk_item(v, i), required);\n \n         if let hir::ItemStruct(ref sd, _) = i.node {\n-            sd.ctor_id.map(|id| {\n-                self.annotate(id, true, &i.attrs, i.span, |_| {}, true)\n-            });\n+            if sd.kind != hir::VariantKind::Dict {\n+                self.annotate(sd.id, true, &i.attrs, i.span, |_| {}, true)\n+            }\n         }\n     }\n "}, {"sha": "3251808179409e3588c30c7181d621c2d6ef4af0", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -699,10 +699,11 @@ pub fn noop_fold_where_predicate<T: Folder>(pred: WherePredicate, fld: &mut T) -\n }\n \n pub fn noop_fold_struct_def<T: Folder>(struct_def: P<StructDef>, fld: &mut T) -> P<StructDef> {\n-    struct_def.map(|StructDef { fields, ctor_id }| {\n+    struct_def.map(|StructDef { fields, id, kind }| {\n         StructDef {\n             fields: fields.move_map(|f| fld.fold_struct_field(f)),\n-            ctor_id: ctor_id.map(|cid| fld.new_id(cid)),\n+            id: fld.new_id(id),\n+            kind: kind,\n         }\n     })\n }"}, {"sha": "b93224165418e0548f087b6a7917c9967df3f0cf", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -33,7 +33,6 @@ pub use self::Ty_::*;\n pub use self::TyParamBound::*;\n pub use self::UnOp::*;\n pub use self::UnsafeSource::*;\n-pub use self::VariantKind::*;\n pub use self::ViewPath_::*;\n pub use self::Visibility::*;\n pub use self::PathParameters::*;\n@@ -1021,14 +1020,6 @@ pub struct VariantArg {\n     pub id: NodeId,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum VariantKind {\n-    /// Tuple variant, e.g. `Foo(A, B)`\n-    TupleVariantKind(Vec<VariantArg>),\n-    /// Struct variant, e.g. `Foo {x: A, y: B}`\n-    StructVariantKind(P<StructDef>),\n-}\n-\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct EnumDef {\n     pub variants: Vec<P<Variant>>,\n@@ -1176,13 +1167,21 @@ impl StructFieldKind {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum VariantKind {\n+    Dict,\n+    Tuple,\n+    Unit,\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct StructDef {\n     /// Fields, not including ctor\n     pub fields: Vec<StructField>,\n     /// ID of the constructor. This is only used for tuple- or enum-like\n     /// structs.\n-    pub ctor_id: Option<NodeId>,\n+    pub id: NodeId,\n+    pub kind: VariantKind,\n }\n \n /*"}, {"sha": "1539613070fcd494cd4fc0c0db31048aa6a88f3d", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -502,7 +502,12 @@ pub fn lower_where_predicate(_lctx: &LoweringContext,\n pub fn lower_struct_def(_lctx: &LoweringContext, sd: &StructDef) -> P<hir::StructDef> {\n     P(hir::StructDef {\n         fields: sd.fields.iter().map(|f| lower_struct_field(_lctx, f)).collect(),\n-        ctor_id: sd.ctor_id,\n+        id: sd.id,\n+        kind: match sd.kind {\n+            VariantKind::Dict => hir::VariantKind::Dict,\n+            VariantKind::Tuple => hir::VariantKind::Tuple,\n+            VariantKind::Unit => hir::VariantKind::Unit,\n+        }\n     })\n }\n "}, {"sha": "8d4422011f00ae0d408b2ddf6b1ad0209ced7ca3", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -896,8 +896,8 @@ impl<'a> State<'a> {\n                         -> io::Result<()> {\n         try!(self.print_name(name));\n         try!(self.print_generics(generics));\n-        if ::util::struct_def_is_tuple_like(struct_def) {\n-            if !struct_def.fields.is_empty() {\n+        if struct_def.kind != hir::VariantKind::Dict {\n+            if struct_def.kind == hir::VariantKind::Tuple {\n                 try!(self.popen());\n                 try!(self.commasep(Inconsistent,\n                                    &struct_def.fields,"}, {"sha": "05a548a8c662188a2f6d4c6fef653b2a4e2090aa", "filename": "src/librustc_front/util.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_front%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_front%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Futil.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -81,12 +81,6 @@ pub fn binop_to_string(op: BinOp_) -> &'static str {\n     }\n }\n \n-/// Returns true if the given struct def is tuple-like; i.e. that its fields\n-/// are unnamed.\n-pub fn struct_def_is_tuple_like(struct_def: &hir::StructDef) -> bool {\n-    struct_def.ctor_id.is_some()\n-}\n-\n pub fn stmt_id(s: &Stmt) -> NodeId {\n     match s.node {\n         StmtDecl(_, id) => id,\n@@ -298,7 +292,7 @@ impl<'a, 'v, O: ast_util::IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O>\n                         _: &hir::Generics,\n                         id: NodeId) {\n         self.operation.visit_id(id);\n-        struct_def.ctor_id.map(|ctor_id| self.operation.visit_id(ctor_id));\n+        self.operation.visit_id(struct_def.id);\n         visit::walk_struct_def(self, struct_def);\n     }\n "}, {"sha": "4e4609fb083c0984280dc6a4b059fccc9b2d8dfa", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -132,9 +132,8 @@ impl<'v> Visitor<'v> for ParentVisitor {\n                         _: &'v hir::Generics, n: ast::NodeId) {\n         // Struct constructors are parented to their struct definitions because\n         // they essentially are the struct definitions.\n-        match s.ctor_id {\n-            Some(id) => { self.parents.insert(id, n); }\n-            None => {}\n+        if s.kind != hir::VariantKind::Dict {\n+            self.parents.insert(s.id, n);\n         }\n \n         // While we have the id of the struct definition, go ahead and parent\n@@ -320,9 +319,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n \n             // Struct constructors are public if the struct is all public.\n             hir::ItemStruct(ref def, _) if public_first => {\n-                match def.ctor_id {\n-                    Some(id) => { self.exported_items.insert(id); }\n-                    None => {}\n+                if def.kind != hir::VariantKind::Dict {\n+                    self.exported_items.insert(def.id);\n                 }\n                 // fields can be public or private, so lets check\n                 for field in &def.fields {"}, {"sha": "6b4b33341664bda2e6ad3b4af90737e602b44f61", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -492,9 +492,9 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             // These items live in both the type and value namespaces.\n             ItemStruct(ref struct_def, _) => {\n                 // Adding to both Type and Value namespaces or just Type?\n-                let (forbid, ctor_id) = match struct_def.ctor_id {\n-                    Some(ctor_id)   => (ForbidDuplicateTypesAndValues, Some(ctor_id)),\n-                    None            => (ForbidDuplicateTypesAndModules, None)\n+                let (forbid, ctor_id) = match struct_def.kind {\n+                    hir::VariantKind::Dict => (ForbidDuplicateTypesAndModules, None),\n+                    _                     => (ForbidDuplicateTypesAndValues, Some(struct_def.id)),\n                 };\n \n                 let name_bindings = self.add_child(name, parent, forbid, sp);\n@@ -587,14 +587,14 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                        item_id: DefId,\n                                        parent: &Rc<Module>) {\n         let name = variant.node.name;\n-        let is_exported = match variant.node.def.ctor_id {\n-            Some(_) => false,\n-            None => {\n+        let is_exported = match variant.node.def.kind {\n+            hir::VariantKind::Dict => {\n                 // Not adding fields for variants as they are not accessed with a self receiver\n                 let variant_def_id = self.ast_map.local_def_id(variant.node.id);\n                 self.structs.insert(variant_def_id, Vec::new());\n                 true\n             }\n+            _ => false,\n         };\n \n         let child = self.add_child(name, parent,"}, {"sha": "fb1c494ffd44eb41f3a6d12609b9680136889c4b", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -462,16 +462,12 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                       ty_params: &ast::Generics) {\n         let qualname = format!(\"::{}\", self.tcx.map.path_to_string(item.id));\n \n-        let ctor_id = match def.ctor_id {\n-            Some(node_id) => node_id,\n-            None => ast::DUMMY_NODE_ID,\n-        };\n         let val = self.span.snippet(item.span);\n         let sub_span = self.span.sub_span_after_keyword(item.span, keywords::Struct);\n         self.fmt.struct_str(item.span,\n                             sub_span,\n                             item.id,\n-                            ctor_id,\n+                            def.id,\n                             &qualname,\n                             self.cur_scope,\n                             &val);\n@@ -505,11 +501,10 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n             qualname.push_str(name);\n             let val = self.span.snippet(variant.span);\n \n-            let ctor_id = variant.node.def.ctor_id.unwrap_or(ast::DUMMY_NODE_ID);\n             self.fmt.struct_variant_str(variant.span,\n                                         self.span.span_for_first_ident(variant.span),\n                                         variant.node.id,\n-                                        ctor_id,\n+                                        variant.node.def.id,\n                                         &qualname,\n                                         &enum_data.qualname,\n                                         &val,"}, {"sha": "06cb8de054229065451e9a48d854b553afcdf699", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -2428,7 +2428,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n \n         hir_map::NodeVariant(ref v) => {\n             let llfn;\n-            let fields = if v.node.def.ctor_id.is_none() {\n+            let fields = if v.node.def.kind == hir::VariantKind::Dict {\n                 ccx.sess().bug(\"struct variant kind unexpected in get_item_val\")\n             } else {\n                 &v.node.def.fields\n@@ -2454,12 +2454,12 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n \n         hir_map::NodeStructCtor(struct_def) => {\n             // Only register the constructor if this is a tuple-like struct.\n-            let ctor_id = match struct_def.ctor_id {\n-                None => {\n+            let ctor_id = match struct_def.kind {\n+                hir::VariantKind::Dict => {\n                     ccx.sess().bug(\"attempt to register a constructor of \\\n                                     a non-tuple-like struct\")\n                 }\n-                Some(ctor_id) => ctor_id,\n+                _ => struct_def.id,\n             };\n             let parent = ccx.tcx().map.get_parent(id);\n             let struct_item = ccx.tcx().map.expect_item(parent);"}, {"sha": "fdcc2623ef104ce66499a49ff8eb937307a77f30", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -418,7 +418,7 @@ pub fn trans_fn_ref_with_substs<'a, 'tcx>(\n \n         match map_node {\n             hir_map::NodeVariant(v) => {\n-                v.node.def.ctor_id.is_some() && !v.node.def.fields.is_empty()\n+                v.node.def.kind == hir::VariantKind::Tuple\n             }\n             hir_map::NodeStructCtor(_) => true,\n             _ => false"}, {"sha": "9cb4b271742c4e5231f651cf5054ce16f68769a3", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -115,12 +115,12 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: DefId)\n                     }\n                 }\n                 hir::ItemStruct(ref struct_def, _) => {\n-                    match struct_def.ctor_id {\n-                        None => ccx.sess().bug(\"instantiate_inline: called on a \\\n-                                                non-tuple struct\"),\n-                        Some(ctor_id) => {\n-                            ccx.external().borrow_mut().insert(fn_id, Some(ctor_id));\n-                            my_id = ctor_id;\n+                    match struct_def.kind {\n+                        hir::VariantKind::Dict => ccx.sess().bug(\"instantiate_inline: called on a \\\n+                                                                 non-tuple struct\"),\n+                        _ => {\n+                            ccx.external().borrow_mut().insert(fn_id, Some(struct_def.id));\n+                            my_id = struct_def.id;\n                         }\n                     }\n                 }"}, {"sha": "49009378bb9797a108e60eed615115cfbb34b376", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -246,9 +246,11 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         hir_map::NodeStructCtor(struct_def) => {\n             let d = mk_lldecl(abi::Rust);\n             attributes::inline(d, attributes::InlineAttr::Hint);\n+            if struct_def.kind == hir::VariantKind::Dict {\n+                panic!(\"ast-mapped struct didn't have a ctor id\")\n+            }\n             base::trans_tuple_struct(ccx,\n-                                     struct_def.ctor_id.expect(\"ast-mapped tuple struct \\\n-                                                                didn't have a ctor id\"),\n+                                     struct_def.id,\n                                      psubsts,\n                                      d);\n             d"}, {"sha": "879432d89c8c80ccdf3da97080e71cd08f8ffbe9", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -1014,8 +1014,8 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                 convert_field(ccx, &scheme.generics, &predicates, f, ty_f)\n             }\n \n-            if let Some(ctor_id) = struct_def.ctor_id {\n-                convert_variant_ctor(tcx, ctor_id, variant, scheme, predicates);\n+            if struct_def.kind != hir::VariantKind::Dict {\n+                convert_variant_ctor(tcx, struct_def.id, variant, scheme, predicates);\n             }\n         },\n         hir::ItemTy(_, ref generics) => {"}, {"sha": "a5ed0ea6c095e1192d4fd70a4724318684b83e53", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -1917,25 +1917,10 @@ pub enum VariantKind {\n     StructVariant(VariantStruct),\n }\n \n-impl Clean<VariantKind> for hir::VariantKind {\n-    fn clean(&self, cx: &DocContext) -> VariantKind {\n-        match self {\n-            &hir::TupleVariantKind(ref args) => {\n-                if args.is_empty() {\n-                    CLikeVariant\n-                } else {\n-                    TupleVariant(args.iter().map(|x| x.ty.clean(cx)).collect())\n-                }\n-            },\n-            &hir::StructVariantKind(ref sd) => StructVariant(sd.clean(cx)),\n-        }\n-    }\n-}\n-\n fn struct_def_to_variant_kind(struct_def: &hir::StructDef, cx: &DocContext) -> VariantKind {\n-    if struct_def.ctor_id.is_none() {\n+    if struct_def.kind == hir::VariantKind::Dict {\n         StructVariant(struct_def.clean(cx))\n-    } else if struct_def.fields.is_empty() {\n+    } else if struct_def.kind == hir::VariantKind::Unit {\n         CLikeVariant\n     } else {\n         TupleVariant(struct_def.fields.iter().map(|x| x.node.ty.clean(cx)).collect())"}, {"sha": "c65c31e6c3cc3ea58d8bc3eb46945e627cb9fb80", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -235,7 +235,7 @@ pub struct Import {\n }\n \n pub fn struct_type_from_def(sd: &hir::StructDef) -> StructType {\n-    if sd.ctor_id.is_some() {\n+    if sd.kind != hir::VariantKind::Dict {\n         // We are in a tuple-struct\n         match sd.fields.len() {\n             0 => Unit,"}, {"sha": "66c0d858e3c7a027029e95a3354ddbf9ba1a39a2", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -44,7 +44,6 @@ pub use self::TyParamBound::*;\n pub use self::UintTy::*;\n pub use self::UnOp::*;\n pub use self::UnsafeSource::*;\n-pub use self::VariantKind::*;\n pub use self::ViewPath_::*;\n pub use self::Visibility::*;\n pub use self::PathParameters::*;\n@@ -1577,14 +1576,6 @@ pub struct VariantArg {\n     pub id: NodeId,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum VariantKind {\n-    /// Tuple variant, e.g. `Foo(A, B)`\n-    TupleVariantKind(Vec<VariantArg>),\n-    /// Struct variant, e.g. `Foo {x: A, y: B}`\n-    StructVariantKind(P<StructDef>),\n-}\n-\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct EnumDef {\n     pub variants: Vec<P<Variant>>,\n@@ -1756,13 +1747,21 @@ impl StructFieldKind {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum VariantKind {\n+    Dict,\n+    Tuple,\n+    Unit,\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct StructDef {\n     /// Fields, not including ctor\n     pub fields: Vec<StructField>,\n     /// ID of the constructor. This is only used for tuple- or enum-like\n     /// structs.\n-    pub ctor_id: Option<NodeId>,\n+    pub id: NodeId,\n+    pub kind: VariantKind,\n }\n \n /*"}, {"sha": "87f05f7f41e3f0edabd85b1b4fd8e704eb1fbe51", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -463,7 +463,7 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n                         _: &ast::Generics,\n                         id: NodeId) {\n         self.operation.visit_id(id);\n-        struct_def.ctor_id.map(|ctor_id| self.operation.visit_id(ctor_id));\n+        self.operation.visit_id(struct_def.id);\n         visit::walk_struct_def(self, struct_def);\n     }\n \n@@ -529,12 +529,6 @@ pub fn compute_id_range_for_fn_body(fk: FnKind,\n     id_visitor.operation.result\n }\n \n-/// Returns true if the given struct def is tuple-like; i.e. that its fields\n-/// are unnamed.\n-pub fn struct_def_is_tuple_like(struct_def: &ast::StructDef) -> bool {\n-    struct_def.ctor_id.is_some()\n-}\n-\n /// Returns true if the given pattern consists solely of an identifier\n /// and false otherwise.\n pub fn pat_is_ident(pat: P<ast::Pat>) -> bool {"}, {"sha": "d47072d477e86a2241e3f774c34331eb9ac06f71", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -168,12 +168,13 @@ fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_\n fn fold_struct<F>(cx: &mut Context<F>, def: P<ast::StructDef>) -> P<ast::StructDef> where\n     F: FnMut(&[ast::Attribute]) -> bool\n {\n-    def.map(|ast::StructDef { fields, ctor_id }| {\n+    def.map(|ast::StructDef { fields, id, kind }| {\n         ast::StructDef {\n             fields: fields.into_iter().filter(|m| {\n                 (cx.in_cfg)(&m.node.attrs)\n             }).collect(),\n-            ctor_id: ctor_id,\n+            id: id,\n+            kind: kind,\n         }\n     })\n }"}, {"sha": "132ab6e67feeebc63cb4e4130d7319b39e5f107b", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -993,7 +993,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn variant(&self, span: Span, name: Ident, tys: Vec<P<ast::Ty>> ) -> ast::Variant {\n-        let fields = tys.into_iter().map(|ty| {\n+        let fields: Vec<_> = tys.into_iter().map(|ty| {\n             Spanned { span: ty.span, node: ast::StructField_ {\n                 ty: ty,\n                 kind: ast::UnnamedField(ast::Inherited),\n@@ -1002,11 +1002,15 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             }}\n         }).collect();\n \n+        let kind = if fields.is_empty() { ast::VariantKind::Unit } else { ast::VariantKind::Tuple };\n+\n         respan(span,\n                ast::Variant_ {\n                    name: name,\n                    attrs: Vec::new(),\n-                   def: P(ast::StructDef { fields: fields, ctor_id: Some(ast::DUMMY_NODE_ID) }),\n+                   def: P(ast::StructDef { fields: fields,\n+                                           id: ast::DUMMY_NODE_ID,\n+                                           kind: kind }),\n                    id: ast::DUMMY_NODE_ID,\n                    disr_expr: None,\n                })"}, {"sha": "7b64e5522a4fbc0fc6ea02366c31fb2a6f74eb54", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -95,7 +95,7 @@ fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure\n \n             for variant in &enum_def.variants {\n                 let def = &variant.node.def;\n-                if def.ctor_id.is_none() || !def.fields.is_empty() {\n+                if def.kind != ast::VariantKind::Unit {\n                     cx.span_err(trait_span, \"`FromPrimitive` cannot be derived \\\n                                              for enums with non-unit variants\");\n                     return cx.expr_fail(trait_span,"}, {"sha": "0b3af659a7b2d00b971a0189b81d611e2c9c01f3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -828,7 +828,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                         }\n                     }\n                 }\n-                if def.fields.is_empty() && def.ctor_id.is_none() {\n+                if def.fields.is_empty() && def.kind == ast::VariantKind::Dict {\n                     self.gate_feature(\"braced_empty_structs\", i.span,\n                                       \"empty structs with braces are unstable\");\n                 }"}, {"sha": "8156ef20faf0b1bdf8b206f2f733540ae38f02d2", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -820,9 +820,10 @@ pub fn noop_fold_where_predicate<T: Folder>(\n }\n \n pub fn noop_fold_struct_def<T: Folder>(struct_def: P<StructDef>, fld: &mut T) -> P<StructDef> {\n-    struct_def.map(|StructDef { fields, ctor_id }| StructDef {\n+    struct_def.map(|StructDef { fields, id, kind }| StructDef {\n         fields: fields.move_map(|f| fld.fold_struct_field(f)),\n-        ctor_id: ctor_id.map(|cid| fld.new_id(cid)),\n+        id: fld.new_id(id),\n+        kind: kind,\n     })\n }\n "}, {"sha": "1b446fb9902abffb2df5bbc6f091d03252042411", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -45,7 +45,7 @@ use ast::{PatRegion, PatStruct, PatTup, PatVec, PatWild, PatWildMulti};\n use ast::PatWildSingle;\n use ast::{PolyTraitRef, QSelf};\n use ast::{Return, BiShl, BiShr, Stmt, StmtDecl};\n-use ast::{StmtExpr, StmtSemi, StmtMac, StructDef, StructField};\n+use ast::{StmtExpr, StmtSemi, StmtMac, StructDef, StructField, VariantKind};\n use ast::{BiSub, StrStyle};\n use ast::{SelfExplicit, SelfRegion, SelfStatic, SelfValue};\n use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n@@ -4640,26 +4640,26 @@ impl<'a> Parser<'a> {\n         // Otherwise if we look ahead and see a paren we parse a tuple-style\n         // struct.\n \n-        let (fields, ctor_id) = if self.token.is_keyword(keywords::Where) {\n+        let (fields, kind) = if self.token.is_keyword(keywords::Where) {\n             generics.where_clause = try!(self.parse_where_clause());\n             if try!(self.eat(&token::Semi)) {\n                 // If we see a: `struct Foo<T> where T: Copy;` style decl.\n-                (Vec::new(), Some(ast::DUMMY_NODE_ID))\n+                (Vec::new(), VariantKind::Unit)\n             } else {\n                 // If we see: `struct Foo<T> where T: Copy { ... }`\n-                (try!(self.parse_record_struct_body()), None)\n+                (try!(self.parse_record_struct_body()), VariantKind::Dict)\n             }\n         // No `where` so: `struct Foo<T>;`\n         } else if try!(self.eat(&token::Semi) ){\n-            (Vec::new(), Some(ast::DUMMY_NODE_ID))\n+            (Vec::new(), VariantKind::Unit)\n         // Record-style struct definition\n         } else if self.token == token::OpenDelim(token::Brace) {\n             let fields = try!(self.parse_record_struct_body());\n-            (fields, None)\n+            (fields, VariantKind::Dict)\n         // Tuple-style struct definition with optional where-clause.\n         } else if self.token == token::OpenDelim(token::Paren) {\n             let fields = try!(self.parse_tuple_struct_body(class_name, &mut generics));\n-            (fields, Some(ast::DUMMY_NODE_ID))\n+            (fields, VariantKind::Tuple)\n         } else {\n             let token_str = self.this_token_to_string();\n             return Err(self.fatal(&format!(\"expected `where`, `{{`, `(`, or `;` after struct \\\n@@ -4669,7 +4669,8 @@ impl<'a> Parser<'a> {\n         Ok((class_name,\n          ItemStruct(P(ast::StructDef {\n              fields: fields,\n-             ctor_id: ctor_id,\n+             id: ast::DUMMY_NODE_ID,\n+             kind: kind,\n          }), generics),\n          None))\n     }\n@@ -5118,7 +5119,8 @@ impl<'a> Parser<'a> {\n \n         Ok(P(StructDef {\n             fields: fields,\n-            ctor_id: None,\n+            id: ast::DUMMY_NODE_ID,\n+            kind: VariantKind::Dict,\n         }))\n     }\n \n@@ -5156,15 +5158,18 @@ impl<'a> Parser<'a> {\n                     }});\n                 }\n                 struct_def = P(StructDef { fields: fields,\n-                                           ctor_id: Some(ast::DUMMY_NODE_ID) });\n+                                           id: ast::DUMMY_NODE_ID,\n+                                           kind: ast::VariantKind::Tuple });\n             } else if try!(self.eat(&token::Eq) ){\n                 disr_expr = Some(try!(self.parse_expr_nopanic()));\n                 any_disr = disr_expr.as_ref().map(|expr| expr.span);\n                 struct_def = P(StructDef { fields: Vec::new(),\n-                                           ctor_id: Some(ast::DUMMY_NODE_ID) });\n+                                           id: ast::DUMMY_NODE_ID,\n+                                           kind: ast::VariantKind::Unit });\n             } else {\n                 struct_def = P(StructDef { fields: Vec::new(),\n-                                           ctor_id: Some(ast::DUMMY_NODE_ID) });\n+                                           id: ast::DUMMY_NODE_ID,\n+                                           kind: ast::VariantKind::Unit });\n             }\n \n             let vr = ast::Variant_ {"}, {"sha": "2d6829c5e75b5dae0f924c753eb604108038720d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495566ee61174066014b928fffd182834c1eb214/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=495566ee61174066014b928fffd182834c1eb214", "patch": "@@ -1392,8 +1392,8 @@ impl<'a> State<'a> {\n                         print_finalizer: bool) -> io::Result<()> {\n         try!(self.print_ident(ident));\n         try!(self.print_generics(generics));\n-        if ast_util::struct_def_is_tuple_like(struct_def) {\n-            if !struct_def.fields.is_empty() {\n+        if struct_def.kind != ast::VariantKind::Dict {\n+            if struct_def.kind == ast::VariantKind::Tuple {\n                 try!(self.popen());\n                 try!(self.commasep(\n                     Inconsistent, &struct_def.fields,\n@@ -3119,7 +3119,9 @@ mod tests {\n             name: ident,\n             attrs: Vec::new(),\n             // making this up as I go.... ?\n-            def: P(ast::StructDef { fields: Vec::new(), ctor_id: Some(ast::DUMMY_NODE_ID) }),\n+            def: P(ast::StructDef { fields: Vec::new(),\n+                                    id: ast::DUMMY_NODE_ID,\n+                                    kind: ast::VariantKind::Unit }),\n             id: 0,\n             disr_expr: None,\n         });"}]}