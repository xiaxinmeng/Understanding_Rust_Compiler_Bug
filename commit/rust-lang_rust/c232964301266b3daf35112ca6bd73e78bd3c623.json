{"sha": "c232964301266b3daf35112ca6bd73e78bd3c623", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMzI5NjQzMDEyNjZiM2RhZjM1MTEyY2E2YmQ3M2U3OGJkM2M2MjM=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-05-31T21:36:08Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-01T00:39:14Z"}, "message": "Implement move semantics.", "tree": {"sha": "e49ebfe0714f1561be0a5556727eaaa6dc8aee4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e49ebfe0714f1561be0a5556727eaaa6dc8aee4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c232964301266b3daf35112ca6bd73e78bd3c623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c232964301266b3daf35112ca6bd73e78bd3c623", "html_url": "https://github.com/rust-lang/rust/commit/c232964301266b3daf35112ca6bd73e78bd3c623", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c232964301266b3daf35112ca6bd73e78bd3c623/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e7bba3d23c8b521df78302047452c9071832be1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7bba3d23c8b521df78302047452c9071832be1", "html_url": "https://github.com/rust-lang/rust/commit/5e7bba3d23c8b521df78302047452c9071832be1"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "072e4aaf373d4ca76bc8d691b27db3623d95fd9c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c232964301266b3daf35112ca6bd73e78bd3c623/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c232964301266b3daf35112ca6bd73e78bd3c623/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c232964301266b3daf35112ca6bd73e78bd3c623", "patch": "@@ -3259,6 +3259,45 @@ fn copy_val(&@block_ctxt cx,\n     fail;\n }\n \n+// This works like copy_val, except that it deinitializes the source.\n+// Since it needs to zero out the source, src also needs to be an lval.\n+// FIXME: We always zero out the source. Ideally we would detect the\n+// case where a variable is always deinitialized by block exit and thus\n+// doesn't need to be dropped.\n+fn move_val(&@block_ctxt cx,\n+           copy_action action,\n+           ValueRef dst,\n+           ValueRef src,\n+           &ty::t t) -> result {\n+    if (ty::type_is_scalar(cx.fcx.lcx.ccx.tcx, t) ||\n+            ty::type_is_native(cx.fcx.lcx.ccx.tcx, t)) {\n+        ret res(cx, cx.build.Store(src, dst));\n+    } else if (ty::type_is_nil(cx.fcx.lcx.ccx.tcx, t) ||\n+               ty::type_is_bot(cx.fcx.lcx.ccx.tcx, t)) {\n+        ret res(cx, C_nil());\n+\n+    } else if (ty::type_is_boxed(cx.fcx.lcx.ccx.tcx, t)) {\n+        if (action == DROP_EXISTING) {\n+            cx = drop_ty(cx, cx.build.Load(dst), t).bcx;\n+        }\n+        auto r = res(cx, cx.build.Store(cx.build.Load(src), dst));\n+        ret zero_alloca(r.bcx, src, t);\n+\n+    } else if (ty::type_is_structural(cx.fcx.lcx.ccx.tcx, t) ||\n+               ty::type_has_dynamic_size(cx.fcx.lcx.ccx.tcx, t)) {\n+        if (action == DROP_EXISTING) {\n+            cx = drop_ty(cx, dst, t).bcx;\n+        }\n+        auto r = memmove_ty(cx, dst, cx.build.Load(src), t);\n+        ret zero_alloca(r.bcx, src, t);\n+    }\n+\n+    cx.fcx.lcx.ccx.sess.bug(\"unexpected type in trans::move_val: \" +\n+                        ty::ty_to_str(cx.fcx.lcx.ccx.tcx, t));\n+    fail;\n+}\n+\n+\n fn trans_lit(&@crate_ctxt cx, &ast::lit lit, &ast::ann ann) -> ValueRef {\n     alt (lit.node) {\n         case (ast::lit_int(?i)) {\n@@ -5504,12 +5543,11 @@ fn trans_expr_out(&@block_ctxt cx, &@ast::expr e, out_method output)\n             auto lhs_res = trans_lval(cx, dst);\n             assert (lhs_res.is_mem);\n             *(lhs_res.res.bcx) = rec(sp=src.span with *(lhs_res.res.bcx));\n-            auto rhs_res = trans_expr(lhs_res.res.bcx, src);\n+            auto rhs_res = trans_lval(lhs_res.res.bcx, src);\n             auto t = node_ann_type(cx.fcx.lcx.ccx, ann);\n             // FIXME: calculate copy init-ness in typestate.\n-            // FIXME: do all of the special move stuff\n-            ret copy_ty(rhs_res.bcx, DROP_EXISTING,\n-                        lhs_res.res.val, rhs_res.val, t);\n+            ret move_val(rhs_res.res.bcx, DROP_EXISTING,\n+                         lhs_res.res.val, rhs_res.res.val, t);\n         }\n \n         case (ast::expr_assign(?dst, ?src, ?ann)) {"}]}