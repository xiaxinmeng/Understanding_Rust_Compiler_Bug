{"sha": "186707893bdb50a0954b04b7451a334620137784", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NjcwNzg5M2JkYjUwYTA5NTRiMDRiNzQ1MWEzMzQ2MjAxMzc3ODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-29T21:29:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-29T21:29:03Z"}, "message": "Auto merge of #27383 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #26778, #27232, #27352, #27369, #27373\n- Failed merges:", "tree": {"sha": "8e469866030aecd5aca3f100dfbe441e8ef88919", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e469866030aecd5aca3f100dfbe441e8ef88919"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/186707893bdb50a0954b04b7451a334620137784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/186707893bdb50a0954b04b7451a334620137784", "html_url": "https://github.com/rust-lang/rust/commit/186707893bdb50a0954b04b7451a334620137784", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/186707893bdb50a0954b04b7451a334620137784/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "823f4fcf22d4dc02e00447c21e7d15c2af904a1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/823f4fcf22d4dc02e00447c21e7d15c2af904a1d", "html_url": "https://github.com/rust-lang/rust/commit/823f4fcf22d4dc02e00447c21e7d15c2af904a1d"}, {"sha": "b904b452c607e84c1fb7e4b1a5f9ed6cb4e043e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b904b452c607e84c1fb7e4b1a5f9ed6cb4e043e6", "html_url": "https://github.com/rust-lang/rust/commit/b904b452c607e84c1fb7e4b1a5f9ed6cb4e043e6"}], "stats": {"total": 167, "additions": 97, "deletions": 70}, "files": [{"sha": "307aef8018066827593cb2b2c542dda63e26e069", "filename": "src/doc/trpl/glossary.md", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/186707893bdb50a0954b04b7451a334620137784/src%2Fdoc%2Ftrpl%2Fglossary.md", "raw_url": "https://github.com/rust-lang/rust/raw/186707893bdb50a0954b04b7451a334620137784/src%2Fdoc%2Ftrpl%2Fglossary.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fglossary.md?ref=186707893bdb50a0954b04b7451a334620137784", "patch": "@@ -3,24 +3,12 @@\n Not every Rustacean has a background in systems programming, nor in computer\n science, so we've added explanations of terms that might be unfamiliar.\n \n-### Arity\n-\n-Arity refers to the number of arguments a function or operation takes.\n-\n-```rust\n-let x = (2, 3);\n-let y = (4, 6);\n-let z = (8, 2, 6);\n-```\n-\n-In the example above `x` and `y` have arity 2. `z` has arity 3.\n-\n ### Abstract Syntax Tree\n \n-When a compiler is compiling your program, it does a number of different\n-things. One of the things that it does is turn the text of your program into an\n-\u2018abstract syntax tree\u2019, or \u2018AST\u2019. This tree is a representation of the\n-structure of your program. For example, `2 + 3` can be turned into a tree:\n+When a compiler is compiling your program, it does a number of different things.\n+One of the things that it does is turn the text of your program into an\n+\u2018abstract syntax tree\u2019, or \u2018AST\u2019. This tree is a representation of the structure\n+of your program. For example, `2 + 3` can be turned into a tree:\n \n ```text\n   +\n@@ -37,3 +25,41 @@ And `2 + (3 * 4)` would look like this:\n    / \\\n   3   4\n ```\n+\n+### Arity\n+\n+Arity refers to the number of arguments a function or operation takes.\n+\n+```rust\n+let x = (2, 3);\n+let y = (4, 6);\n+let z = (8, 2, 6);\n+```\n+\n+In the example above `x` and `y` have arity 2. `z` has arity 3.\n+\n+### Expression\n+\n+In computer programming, an expression is a combination of values, constants,\n+variables, operators and functions that evaluate to a single value. For example,\n+`2 + (3 * 4)` is an expression that returns the value 14. It is worth noting\n+that expressions can have side-effects. For example, a function included in an\n+expression might perform actions other than simply returning a value.\n+\n+### Expression-Oriented Language\n+\n+In early programming languages, [expressions][expression] and\n+[statements][statement] were two separate syntactic categories: expressions had\n+a value and statements did things. However, later languages blurred this\n+distinction, allowing expressions to do things and statements to have a value.\n+In an expression-oriented language, (nearly) every statement is an expression\n+and therefore returns a value. Consequently, these expression statements can\n+themselves form part of larger expressions.\n+\n+[expression]: glossary.html#expression\n+[statement]: glossary.html#statement\n+\n+### Statement\n+\n+In computer programming, a statement is the smallest standalone element of a\n+programming language that commands a computer to perform an action."}, {"sha": "cd4326a28d80967f41b85cc6b058b8a62e71ee93", "filename": "src/doc/trpl/hello-world.md", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/186707893bdb50a0954b04b7451a334620137784/src%2Fdoc%2Ftrpl%2Fhello-world.md", "raw_url": "https://github.com/rust-lang/rust/raw/186707893bdb50a0954b04b7451a334620137784/src%2Fdoc%2Ftrpl%2Fhello-world.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-world.md?ref=186707893bdb50a0954b04b7451a334620137784", "patch": "@@ -111,10 +111,13 @@ string to the screen. Easy enough!\n \n [allocation]: the-stack-and-the-heap.html\n \n-Finally, the line ends with a semicolon (`;`). Rust is an \u2018expression oriented\u2019\n-language, which means that most things are expressions, rather than statements.\n-The `;` is used to indicate that this expression is over, and the next one is\n-ready to begin. Most lines of Rust code end with a `;`.\n+Finally, the line ends with a semicolon (`;`). Rust is an [\u2018expression oriented\u2019\n+language][expression-oriented language], which means that most things are\n+expressions, rather than statements. The `;` is used to indicate that this\n+expression is over, and the next one is ready to begin. Most lines of Rust code\n+end with a `;`.\n+\n+[expression-oriented language]: glossary.html#expression-oriented-language\n \n Finally, actually compiling and running our program. We can compile with our\n compiler, `rustc`, by passing it the name of our source file:"}, {"sha": "b6c4905e41cce75f5a4f3ca2f64951e55da25892", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/186707893bdb50a0954b04b7451a334620137784/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186707893bdb50a0954b04b7451a334620137784/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=186707893bdb50a0954b04b7451a334620137784", "patch": "@@ -85,9 +85,9 @@\n //! format!(\"{a} {c} {b}\", a=\"a\", b='b', c=3);  // => \"a 3 b\"\n //! ```\n //!\n-//! It is illegal to put positional parameters (those without names) after\n-//! arguments which have names. Like with positional parameters, it is illegal\n-//! to provide named parameters that are unused by the format string.\n+//! It is not valid to put positional parameters (those without names) after\n+//! arguments which have names. Like with positional parameters, it is not\n+//! valid to provide named parameters that are unused by the format string.\n //!\n //! ## Argument types\n //!\n@@ -103,19 +103,21 @@\n //! hexadecimal as well as an\n //! octal.\n //!\n-//! There are various parameters which do require a particular type, however. Namely, the `{:.*}`\n-//! syntax, which sets the number of numbers after the decimal in floating-point types:\n+//! There are various parameters which do require a particular type, however.\n+//! Namely, the `{:.*}` syntax, which sets the number of numbers after the\n+//! decimal in floating-point types:\n //!\n //! ```\n //! let formatted_number = format!(\"{:.*}\", 2, 1.234567);\n //!\n //! assert_eq!(\"1.23\", formatted_number)\n //! ```\n //!\n-//! If this syntax is used, then the number of characters to print precedes the actual object being\n-//! formatted, and the number of characters must have the type `usize`. Although a `usize` can be\n-//! printed with `{}`, it is illegal to reference an argument as such. For example this is another\n-//! invalid format string:\n+//! If this syntax is used, then the number of characters to print precedes the\n+//! actual object being formatted, and the number of characters must have the\n+//! type `usize`. Although a `usize` can be printed with `{}`, it is invalid to\n+//! reference an argument as such. For example this is another invalid format\n+//! string:\n //!\n //! ```text\n //! {:.*} {0}"}, {"sha": "ebd6ba544e4604f028e0b8af3f676c380898c402", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/186707893bdb50a0954b04b7451a334620137784/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186707893bdb50a0954b04b7451a334620137784/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=186707893bdb50a0954b04b7451a334620137784", "patch": "@@ -205,7 +205,7 @@ pub trait Copy : Clone {\n /// Any types with interior mutability must also use the `std::cell::UnsafeCell`\n /// wrapper around the value(s) which can be mutated when behind a `&`\n /// reference; not doing this is undefined behaviour (for example,\n-/// `transmute`-ing from `&T` to `&mut T` is illegal).\n+/// `transmute`-ing from `&T` to `&mut T` is invalid).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"sync\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be shared between threads safely\"]"}, {"sha": "ad891bf8fa6239e35b9359856e2e3cb42186abca", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/186707893bdb50a0954b04b7451a334620137784/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186707893bdb50a0954b04b7451a334620137784/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=186707893bdb50a0954b04b7451a334620137784", "patch": "@@ -479,8 +479,8 @@ macro_rules! int_impl {\n         /// wrapping around at the boundary of the type.\n         ///\n         /// Such wrap-around never actually occurs mathematically;\n-        /// implementation artifacts make `x % y` illegal for `MIN /\n-        /// -1` on a signed type illegal (where `MIN` is the negative\n+        /// implementation artifacts make `x % y` invalid for `MIN /\n+        /// -1` on a signed type (where `MIN` is the negative\n         /// minimal value). In such a case, this function returns `0`.\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n@@ -1051,8 +1051,8 @@ macro_rules! uint_impl {\n         /// wrapping around at the boundary of the type.\n         ///\n         /// Such wrap-around never actually occurs mathematically;\n-        /// implementation artifacts make `x % y` illegal for `MIN /\n-        /// -1` on a signed type illegal (where `MIN` is the negative\n+        /// implementation artifacts make `x % y` invalid for `MIN /\n+        /// -1` on a signed type (where `MIN` is the negative\n         /// minimal value). In such a case, this function returns `0`.\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]"}, {"sha": "9c2cdba0ae47b214834b8ea8dbceb2417d42b4d4", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/186707893bdb50a0954b04b7451a334620137784/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186707893bdb50a0954b04b7451a334620137784/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=186707893bdb50a0954b04b7451a334620137784", "patch": "@@ -41,7 +41,7 @@ arms.\n \"##,\n \n E0002: r##\"\n-This error indicates that an empty match expression is illegal because the type\n+This error indicates that an empty match expression is invalid because the type\n it is matching on is non-empty (there exist values of this type). In safe code\n it is impossible to create an instance of an empty type, so empty match\n expressions are almost never desired.  This error is typically fixed by adding\n@@ -1055,7 +1055,7 @@ because the `'static` lifetime is a special built-in lifetime name denoting\n the lifetime of the entire program, this is an error:\n \n ```\n-// error, illegal lifetime parameter name `'static`\n+// error, invalid lifetime parameter name `'static`\n fn foo<'static>(x: &'static str) { }\n ```\n \"##,\n@@ -1805,7 +1805,7 @@ For more information about `const fn`'s, see [RFC 911].\n E0394: r##\"\n From [RFC 246]:\n \n- > It is illegal for a static to reference another static by value. It is\n+ > It is invalid for a static to reference another static by value. It is\n  > required that all references be borrowed.\n \n [RFC 246]: https://github.com/rust-lang/rfcs/pull/246"}, {"sha": "88fc6181f924121457cd23d08c46a1df8508d661", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/186707893bdb50a0954b04b7451a334620137784/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186707893bdb50a0954b04b7451a334620137784/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=186707893bdb50a0954b04b7451a334620137784", "patch": "@@ -44,7 +44,7 @@ use metadata::csearch;\n use middle;\n use middle::cast;\n use middle::check_const;\n-use middle::const_eval::{self, ConstVal};\n+use middle::const_eval::{self, ConstVal, ErrKind};\n use middle::const_eval::EvalHint::UncheckedExprHint;\n use middle::def::{self, DefMap, ExportMap};\n use middle::dependency_format;\n@@ -6107,20 +6107,20 @@ impl<'tcx> ctxt<'tcx> {\n                     found);\n             }\n             Err(err) => {\n-                let err_description = err.description();\n-                let found = match count_expr.node {\n+                let err_msg = match count_expr.node {\n                     ast::ExprPath(None, ast::Path {\n                         global: false,\n                         ref segments,\n                         ..\n                     }) if segments.len() == 1 =>\n-                        format!(\"{}\", \"found variable\"),\n-                    _ =>\n-                        format!(\"but {}\", err_description),\n+                        format!(\"found variable\"),\n+                    _ => match err.kind {\n+                        ErrKind::MiscCatchAll => format!(\"but found {}\", err.description()),\n+                        _ => format!(\"but {}\", err.description())\n+                    }\n                 };\n                 span_err!(self.sess, count_expr.span, E0307,\n-                    \"expected constant integer for repeat count, {}\",\n-                    found);\n+                    \"expected constant integer for repeat count, {}\", err_msg);\n             }\n         }\n         0"}, {"sha": "6db4e49e98fabcb4743b8f5a137f4dcb360e6568", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/186707893bdb50a0954b04b7451a334620137784/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186707893bdb50a0954b04b7451a334620137784/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=186707893bdb50a0954b04b7451a334620137784", "patch": "@@ -106,7 +106,7 @@ mod foo {\n use foo::MyTrait::do_something;\n ```\n \n-It's illegal to directly import methods belonging to a trait or concrete type.\n+It's invalid to directly import methods belonging to a trait or concrete type.\n \"##,\n \n E0255: r##\""}, {"sha": "d94870c68bd4d36b777d69c3dd2bc13895663ab6", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/186707893bdb50a0954b04b7451a334620137784/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186707893bdb50a0954b04b7451a334620137784/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=186707893bdb50a0954b04b7451a334620137784", "patch": "@@ -584,7 +584,7 @@ extern \"C\" {\n ```\n \n Using this declaration, it must be called with at least one argument, so\n-simply calling `printf()` is illegal. But the following uses are allowed:\n+simply calling `printf()` is invalid. But the following uses are allowed:\n \n ```\n unsafe {"}, {"sha": "1649154970582377aca56e06720100ed599417e7", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/186707893bdb50a0954b04b7451a334620137784/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186707893bdb50a0954b04b7451a334620137784/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=186707893bdb50a0954b04b7451a334620137784", "patch": "@@ -281,36 +281,31 @@ extern crate libc;\n \n #[macro_use] #[no_link] extern crate rustc_bitflags;\n \n-// Make std testable by not duplicating lang items. See #2912\n+// Make std testable by not duplicating lang items and other globals. See #2912\n #[cfg(test)] extern crate std as realstd;\n-#[cfg(test)] pub use realstd::marker;\n-#[cfg(test)] pub use realstd::ops;\n-#[cfg(test)] pub use realstd::cmp;\n-#[cfg(test)] pub use realstd::boxed;\n-\n \n // NB: These reexports are in the order they should be listed in rustdoc\n \n pub use core::any;\n pub use core::cell;\n pub use core::clone;\n-#[cfg(not(test))] pub use core::cmp;\n+pub use core::cmp;\n pub use core::convert;\n pub use core::default;\n pub use core::hash;\n pub use core::intrinsics;\n pub use core::iter;\n-#[cfg(not(test))] pub use core::marker;\n+pub use core::marker;\n pub use core::mem;\n-#[cfg(not(test))] pub use core::ops;\n+pub use core::ops;\n pub use core::ptr;\n pub use core::raw;\n pub use core::simd;\n pub use core::result;\n pub use core::option;\n pub mod error;\n \n-#[cfg(not(test))] pub use alloc::boxed;\n+pub use alloc::boxed;\n pub use alloc::rc;\n \n pub use core_collections::borrow;"}, {"sha": "beecb445e8d687fd6ab6aefd5804f3ec0cf68a78", "filename": "src/libstd/sys/unix/condvar.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/186707893bdb50a0954b04b7451a334620137784/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186707893bdb50a0954b04b7451a334620137784/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs?ref=186707893bdb50a0954b04b7451a334620137784", "patch": "@@ -60,21 +60,22 @@ impl Condvar {\n         let r = ffi::gettimeofday(&mut sys_now, ptr::null_mut());\n         debug_assert_eq!(r, 0);\n \n+        let nsec = dur.extra_nanos() as libc::c_long +\n+                   (sys_now.tv_usec * 1000) as libc::c_long;\n+        let extra = (nsec / 1_000_000_000) as libc::time_t;\n+        let nsec = nsec % 1_000_000_000;\n         let seconds = dur.secs() as libc::time_t;\n-        let timeout = match sys_now.tv_sec.checked_add(seconds) {\n-            Some(sec) => {\n-                libc::timespec {\n-                    tv_sec: sec,\n-                    tv_nsec: dur.extra_nanos() as libc::c_long,\n-                }\n-            }\n-            None => {\n-                libc::timespec {\n-                    tv_sec: <libc::time_t>::max_value(),\n-                    tv_nsec: 1_000_000_000 - 1,\n-                }\n+\n+        let timeout = sys_now.tv_sec.checked_add(extra).and_then(|s| {\n+            s.checked_add(seconds)\n+        }).map(|s| {\n+            libc::timespec { tv_sec: s, tv_nsec: nsec }\n+        }).unwrap_or_else(|| {\n+            libc::timespec {\n+                tv_sec: <libc::time_t>::max_value(),\n+                tv_nsec: 1_000_000_000 - 1,\n             }\n-        };\n+        });\n \n         // And wait!\n         let r = ffi::pthread_cond_timedwait(self.inner.get(), mutex::raw(mutex),"}]}