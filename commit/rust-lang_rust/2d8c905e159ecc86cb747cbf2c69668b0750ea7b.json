{"sha": "2d8c905e159ecc86cb747cbf2c69668b0750ea7b", "node_id": "C_kwDOAAsO6NoAKDJkOGM5MDVlMTU5ZWNjODZjYjc0N2NiZjJjNjk2NjhiMDc1MGVhN2I", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-25T15:36:17Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-25T15:36:17Z"}, "message": "Move `TraitRef` constructors to the top\n\nIn rust `new`-ish functions are usually the first ones in an `impl` block", "tree": {"sha": "0a041715cac43799773d58413d952c9fcde6728a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a041715cac43799773d58413d952c9fcde6728a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d8c905e159ecc86cb747cbf2c69668b0750ea7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8c905e159ecc86cb747cbf2c69668b0750ea7b", "html_url": "https://github.com/rust-lang/rust/commit/2d8c905e159ecc86cb747cbf2c69668b0750ea7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d8c905e159ecc86cb747cbf2c69668b0750ea7b/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14f832733d89a968b347ced1a82f84abfeda13b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/14f832733d89a968b347ced1a82f84abfeda13b0", "html_url": "https://github.com/rust-lang/rust/commit/14f832733d89a968b347ced1a82f84abfeda13b0"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "6146476de37f0eed6b0541f6b28e4ffe80a96780", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2d8c905e159ecc86cb747cbf2c69668b0750ea7b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8c905e159ecc86cb747cbf2c69668b0750ea7b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=2d8c905e159ecc86cb747cbf2c69668b0750ea7b", "patch": "@@ -844,11 +844,13 @@ impl<'tcx> TraitRef<'tcx> {\n         Self::new(tcx.tcx, trait_def_id, substs)\n     }\n \n-    pub fn with_self_ty(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self {\n-        tcx.mk_trait_ref(\n-            self.def_id,\n-            [self_ty.into()].into_iter().chain(self.substs.iter().skip(1)),\n-        )\n+    pub fn from_method(\n+        tcx: TyCtxt<'tcx>,\n+        trait_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+    ) -> ty::TraitRef<'tcx> {\n+        let defs = tcx.generics_of(trait_id);\n+        tcx.mk_trait_ref(trait_id, tcx.mk_substs(&substs[..defs.params.len()]))\n     }\n \n     /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n@@ -857,19 +859,17 @@ impl<'tcx> TraitRef<'tcx> {\n         ty::Binder::dummy(tcx.mk_trait_ref(def_id, InternalSubsts::identity_for_item(tcx, def_id)))\n     }\n \n+    pub fn with_self_ty(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self {\n+        tcx.mk_trait_ref(\n+            self.def_id,\n+            [self_ty.into()].into_iter().chain(self.substs.iter().skip(1)),\n+        )\n+    }\n+\n     #[inline]\n     pub fn self_ty(&self) -> Ty<'tcx> {\n         self.substs.type_at(0)\n     }\n-\n-    pub fn from_method(\n-        tcx: TyCtxt<'tcx>,\n-        trait_id: DefId,\n-        substs: SubstsRef<'tcx>,\n-    ) -> ty::TraitRef<'tcx> {\n-        let defs = tcx.generics_of(trait_id);\n-        tcx.mk_trait_ref(trait_id, tcx.mk_substs(&substs[..defs.params.len()]))\n-    }\n }\n \n pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;"}]}