{"sha": "444635df25c7a2192147c179bb981492ae05b967", "node_id": "C_kwDOAAsO6NoAKDQ0NDYzNWRmMjVjN2EyMTkyMTQ3YzE3OWJiOTgxNDkyYWUwNWI5Njc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-02T21:16:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-02T21:16:08Z"}, "message": "Rollup merge of #89954 - GuillaumeGomez:legacy-const-generic-doc, r=Amanieu\n\nFix legacy_const_generic doc arguments display\n\nFixes https://github.com/rust-lang/rust/issues/83167.\n\ncc ``@Amanieu``", "tree": {"sha": "6fd1ace7fd2e05890c28e57e3e33d530b3fd2a8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fd1ace7fd2e05890c28e57e3e33d530b3fd2a8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/444635df25c7a2192147c179bb981492ae05b967", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhqTeYCRBK7hj4Ov3rIwAAF2sIAIjLB+k6d+O0E7XkoLHUkArQ\nVo0P3Jd14qglbjDTKFIxa1+1cnzzhVRIR2d0xw0QwBhvZIV59ACiZClc94ZVOApH\n+gOUUoDLjOs/Skvf5rTlj9J67zIKo8E83xiNRpjHCkJdsfdWi/RQjrbG3oTr0AUh\nnSiz6Kr4ZNWa8L/aszz8V/wASS1qsRifNi5Ag5U9MquN/lNWHspDFp7mER3hSq9n\nAumy49JtuPWUbBX5x6BiDsQWWFkNa/hQmAGbOqiPfYbV5x07zvE7JWahUfJ8VxRQ\nUodeGuLwtxSpVXEmMBemS+/nQslCiXoanYOZ7dIEicGqk3mirjJuj5Yn459WuHo=\n=Z/cg\n-----END PGP SIGNATURE-----\n", "payload": "tree 6fd1ace7fd2e05890c28e57e3e33d530b3fd2a8e\nparent e5038e20999eef35260b070189883edc2a8a34b2\nparent 5c75a4857ee447437ca71b981eadfb1a38ad7268\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638479768 +0100\ncommitter GitHub <noreply@github.com> 1638479768 +0100\n\nRollup merge of #89954 - GuillaumeGomez:legacy-const-generic-doc, r=Amanieu\n\nFix legacy_const_generic doc arguments display\n\nFixes https://github.com/rust-lang/rust/issues/83167.\n\ncc ``@Amanieu``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/444635df25c7a2192147c179bb981492ae05b967", "html_url": "https://github.com/rust-lang/rust/commit/444635df25c7a2192147c179bb981492ae05b967", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/444635df25c7a2192147c179bb981492ae05b967/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5038e20999eef35260b070189883edc2a8a34b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5038e20999eef35260b070189883edc2a8a34b2", "html_url": "https://github.com/rust-lang/rust/commit/e5038e20999eef35260b070189883edc2a8a34b2"}, {"sha": "5c75a4857ee447437ca71b981eadfb1a38ad7268", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c75a4857ee447437ca71b981eadfb1a38ad7268", "html_url": "https://github.com/rust-lang/rust/commit/5c75a4857ee447437ca71b981eadfb1a38ad7268"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "9c3484b4a316727e39817871d20fcedd32562c94", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/444635df25c7a2192147c179bb981492ae05b967/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444635df25c7a2192147c179bb981492ae05b967/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=444635df25c7a2192147c179bb981492ae05b967", "patch": "@@ -749,11 +749,42 @@ fn clean_fn_or_proc_macro(\n                 } else {\n                     hir::Constness::NotConst\n                 };\n+            clean_fn_decl_legacy_const_generics(&mut func, attrs);\n             FunctionItem(func)\n         }\n     }\n }\n \n+/// This is needed to make it more \"readable\" when documenting functions using\n+/// `rustc_legacy_const_generics`. More information in\n+/// <https://github.com/rust-lang/rust/issues/83167>.\n+fn clean_fn_decl_legacy_const_generics(func: &mut Function, attrs: &[ast::Attribute]) {\n+    for meta_item_list in attrs\n+        .iter()\n+        .filter(|a| a.has_name(sym::rustc_legacy_const_generics))\n+        .filter_map(|a| a.meta_item_list())\n+    {\n+        for (pos, literal) in meta_item_list.iter().filter_map(|meta| meta.literal()).enumerate() {\n+            match literal.kind {\n+                ast::LitKind::Int(a, _) => {\n+                    let gen = func.generics.params.remove(0);\n+                    if let GenericParamDef { name, kind: GenericParamDefKind::Const { ty, .. } } =\n+                        gen\n+                    {\n+                        func.decl\n+                            .inputs\n+                            .values\n+                            .insert(a as _, Argument { name, type_: *ty, is_const: true });\n+                    } else {\n+                        panic!(\"unexpected non const in position {}\", pos);\n+                    }\n+                }\n+                _ => panic!(\"invalid arg index\"),\n+            }\n+        }\n+    }\n+}\n+\n impl<'a> Clean<Function> for (&'a hir::FnSig<'a>, &'a hir::Generics<'a>, hir::BodyId) {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Function {\n         let (generics, decl) = enter_impl_trait(cx, |cx| {\n@@ -779,7 +810,7 @@ impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], &'a [Ident]) {\n                     if name.is_empty() {\n                         name = kw::Underscore;\n                     }\n-                    Argument { name, type_: ty.clean(cx) }\n+                    Argument { name, type_: ty.clean(cx), is_const: false }\n                 })\n                 .collect(),\n         }\n@@ -798,6 +829,7 @@ impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], hir::BodyId) {\n                 .map(|(i, ty)| Argument {\n                     name: name_from_pat(body.params[i].pat),\n                     type_: ty.clean(cx),\n+                    is_const: false,\n                 })\n                 .collect(),\n         }\n@@ -828,6 +860,7 @@ impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n                     .map(|t| Argument {\n                         type_: t.clean(cx),\n                         name: names.next().map_or(kw::Empty, |i| i.name),\n+                        is_const: false,\n                     })\n                     .collect(),\n             },"}, {"sha": "1267e88f358f11c38914b2991c95b9af31ba4d62", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/444635df25c7a2192147c179bb981492ae05b967/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444635df25c7a2192147c179bb981492ae05b967/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=444635df25c7a2192147c179bb981492ae05b967", "patch": "@@ -1353,6 +1353,9 @@ crate struct Arguments {\n crate struct Argument {\n     crate type_: Type,\n     crate name: Symbol,\n+    /// This field is used to represent \"const\" arguments from the `rustc_legacy_const_generics`\n+    /// feature. More information in <https://github.com/rust-lang/rust/issues/83167>.\n+    crate is_const: bool,\n }\n \n #[derive(Clone, PartialEq, Debug)]"}, {"sha": "25471dd726d6b346429abd24ab44d3935ea01edb", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444635df25c7a2192147c179bb981492ae05b967/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444635df25c7a2192147c179bb981492ae05b967/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=444635df25c7a2192147c179bb981492ae05b967", "patch": "@@ -1177,6 +1177,10 @@ impl clean::FnDecl {\n                     args.push_str(\" <br>\");\n                     args_plain.push(' ');\n                 }\n+                if input.is_const {\n+                    args.push_str(\"const \");\n+                    args_plain.push_str(\"const \");\n+                }\n                 if !input.name.is_empty() {\n                     args.push_str(&format!(\"{}: \", input.name));\n                     args_plain.push_str(&format!(\"{}: \", input.name));"}, {"sha": "46a50e2fc30b4b33e3e9004e53d97d593984cb9c", "filename": "src/test/rustdoc/legacy-const-generic.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444635df25c7a2192147c179bb981492ae05b967/src%2Ftest%2Frustdoc%2Flegacy-const-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444635df25c7a2192147c179bb981492ae05b967/src%2Ftest%2Frustdoc%2Flegacy-const-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Flegacy-const-generic.rs?ref=444635df25c7a2192147c179bb981492ae05b967", "patch": "@@ -0,0 +1,16 @@\n+#![crate_name = \"foo\"]\n+#![feature(rustc_attrs)]\n+\n+// @has 'foo/fn.foo.html'\n+// @has - '//*[@class=\"rust fn\"]' 'fn foo(x: usize, const Y: usize, z: usize) -> [usize; 3]'\n+#[rustc_legacy_const_generics(1)]\n+pub fn foo<const Y: usize>(x: usize, z: usize) -> [usize; 3] {\n+    [x, Y, z]\n+}\n+\n+// @has 'foo/fn.bar.html'\n+// @has - '//*[@class=\"rust fn\"]' 'fn bar(x: usize, const Y: usize, const Z: usize) -> [usize; 3]'\n+#[rustc_legacy_const_generics(1, 2)]\n+pub fn bar<const Y: usize, const Z: usize>(x: usize) -> [usize; 3] {\n+    [x, Y, z]\n+}"}]}