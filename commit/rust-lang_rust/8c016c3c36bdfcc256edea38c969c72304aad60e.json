{"sha": "8c016c3c36bdfcc256edea38c969c72304aad60e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMDE2YzNjMzZiZGZjYzI1NmVkZWEzOGM5NjljNzIzMDRhYWQ2MGU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-01-17T13:23:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-17T13:23:41Z"}, "message": "Rollup merge of #67791 - Zoxc:lift-interning, r=eddyb\n\nImplement Lift using interners instead of in_arena\n\nr? @eddyb\ncc @cjgillot", "tree": {"sha": "e8ebce57d95a8c9626c66119fd6307ff42576af4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8ebce57d95a8c9626c66119fd6307ff42576af4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c016c3c36bdfcc256edea38c969c72304aad60e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeIbVdCRBK7hj4Ov3rIwAAdHIIAKvsq7mjTGMncYONzL7gMo7N\nkZAHZOdQCP0Qn+D/Fza6RgoitII35JGUuNHGxNNuLD1MsTXeyZk+AzOkYezrTaQ5\nkihfNbjKguPcjUU2Pl938erPAsnO9J62juw8OJ32vYGap/A5G+zyYVKYyjJKXQs+\n+6J64yysk/YzL59zhVjNfkytPtQ8l5bwcFPtcyGZoR6Z7qwvnlD7zM6A5vPhTTgT\nu4YkAFwWl927ucA0cmucbqQztxO5IGO9AYvYUaBVhrO5bPOOIj9gXzyv3uLAOyPM\nBmq7B51AjwQ5tJxW8dTG1RqwgBt8OwjYtMKYzzjwnH3X44TirhvqEJZQHedNKO4=\n=A2Gt\n-----END PGP SIGNATURE-----\n", "payload": "tree e8ebce57d95a8c9626c66119fd6307ff42576af4\nparent d3589aa4ed63c321fe2fc94af70c7f352971745f\nparent f4968c8e00daed7cc4e5658a7abe61557abd4570\nauthor Dylan DPC <dylan.dpc@gmail.com> 1579267421 +0530\ncommitter GitHub <noreply@github.com> 1579267421 +0530\n\nRollup merge of #67791 - Zoxc:lift-interning, r=eddyb\n\nImplement Lift using interners instead of in_arena\n\nr? @eddyb\ncc @cjgillot\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c016c3c36bdfcc256edea38c969c72304aad60e", "html_url": "https://github.com/rust-lang/rust/commit/8c016c3c36bdfcc256edea38c969c72304aad60e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c016c3c36bdfcc256edea38c969c72304aad60e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3589aa4ed63c321fe2fc94af70c7f352971745f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3589aa4ed63c321fe2fc94af70c7f352971745f", "html_url": "https://github.com/rust-lang/rust/commit/d3589aa4ed63c321fe2fc94af70c7f352971745f"}, {"sha": "f4968c8e00daed7cc4e5658a7abe61557abd4570", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4968c8e00daed7cc4e5658a7abe61557abd4570", "html_url": "https://github.com/rust-lang/rust/commit/f4968c8e00daed7cc4e5658a7abe61557abd4570"}], "stats": {"total": 199, "additions": 67, "deletions": 132}, "files": [{"sha": "2a3d92edc4956dafc26936d82c8a506ff0e5029a", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8c016c3c36bdfcc256edea38c969c72304aad60e/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c016c3c36bdfcc256edea38c969c72304aad60e/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=8c016c3c36bdfcc256edea38c969c72304aad60e", "patch": "@@ -21,7 +21,6 @@\n extern crate alloc;\n \n use rustc_data_structures::cold_path;\n-use rustc_data_structures::sync::MTLock;\n use smallvec::SmallVec;\n \n use std::cell::{Cell, RefCell};\n@@ -116,11 +115,6 @@ impl<T> Default for TypedArena<T> {\n }\n \n impl<T> TypedArena<T> {\n-    pub fn in_arena(&self, ptr: *const T) -> bool {\n-        let ptr = ptr as *const T as *mut T;\n-\n-        self.chunks.borrow().iter().any(|chunk| chunk.start() <= ptr && ptr < chunk.end())\n-    }\n     /// Allocates an object in the `TypedArena`, returning a reference to it.\n     #[inline]\n     pub fn alloc(&self, object: T) -> &mut T {\n@@ -334,12 +328,6 @@ impl Default for DroplessArena {\n }\n \n impl DroplessArena {\n-    pub fn in_arena<T: ?Sized>(&self, ptr: *const T) -> bool {\n-        let ptr = ptr as *const u8 as *mut u8;\n-\n-        self.chunks.borrow().iter().any(|chunk| chunk.start() <= ptr && ptr < chunk.end())\n-    }\n-\n     #[inline]\n     fn align(&self, align: usize) {\n         let final_address = ((self.ptr.get() as usize) + align - 1) & !(align - 1);\n@@ -500,66 +488,5 @@ impl DroplessArena {\n     }\n }\n \n-#[derive(Default)]\n-// FIXME(@Zoxc): this type is entirely unused in rustc\n-pub struct SyncTypedArena<T> {\n-    lock: MTLock<TypedArena<T>>,\n-}\n-\n-impl<T> SyncTypedArena<T> {\n-    #[inline(always)]\n-    pub fn alloc(&self, object: T) -> &mut T {\n-        // Extend the lifetime of the result since it's limited to the lock guard\n-        unsafe { &mut *(self.lock.lock().alloc(object) as *mut T) }\n-    }\n-\n-    #[inline(always)]\n-    pub fn alloc_slice(&self, slice: &[T]) -> &mut [T]\n-    where\n-        T: Copy,\n-    {\n-        // Extend the lifetime of the result since it's limited to the lock guard\n-        unsafe { &mut *(self.lock.lock().alloc_slice(slice) as *mut [T]) }\n-    }\n-\n-    #[inline(always)]\n-    pub fn clear(&mut self) {\n-        self.lock.get_mut().clear();\n-    }\n-}\n-\n-#[derive(Default)]\n-pub struct SyncDroplessArena {\n-    lock: MTLock<DroplessArena>,\n-}\n-\n-impl SyncDroplessArena {\n-    #[inline(always)]\n-    pub fn in_arena<T: ?Sized>(&self, ptr: *const T) -> bool {\n-        self.lock.lock().in_arena(ptr)\n-    }\n-\n-    #[inline(always)]\n-    pub fn alloc_raw(&self, bytes: usize, align: usize) -> &mut [u8] {\n-        // Extend the lifetime of the result since it's limited to the lock guard\n-        unsafe { &mut *(self.lock.lock().alloc_raw(bytes, align) as *mut [u8]) }\n-    }\n-\n-    #[inline(always)]\n-    pub fn alloc<T>(&self, object: T) -> &mut T {\n-        // Extend the lifetime of the result since it's limited to the lock guard\n-        unsafe { &mut *(self.lock.lock().alloc(object) as *mut T) }\n-    }\n-\n-    #[inline(always)]\n-    pub fn alloc_slice<T>(&self, slice: &[T]) -> &mut [T]\n-    where\n-        T: Copy,\n-    {\n-        // Extend the lifetime of the result since it's limited to the lock guard\n-        unsafe { &mut *(self.lock.lock().alloc_slice(slice) as *mut [T]) }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests;"}, {"sha": "15e92d8d8421930d60c32929051b805f72c4d7b2", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c016c3c36bdfcc256edea38c969c72304aad60e/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c016c3c36bdfcc256edea38c969c72304aad60e/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=8c016c3c36bdfcc256edea38c969c72304aad60e", "patch": "@@ -123,6 +123,9 @@ macro_rules! arena_types {\n             [few] inferred_outlives_crate: rustc::ty::CratePredicatesMap<'tcx>,\n             [] upvars: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n \n+            // Interned types\n+            [] tys: rustc::ty::TyS<$tcx>,\n+\n             // HIR types\n             [few] hir_forest: rustc::hir::map::Forest<$tcx>,\n             [] arm: rustc_hir::Arm<$tcx>,\n@@ -176,7 +179,7 @@ macro_rules! declare_arena {\n     ([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n         #[derive(Default)]\n         pub struct Arena<$tcx> {\n-            dropless: DroplessArena,\n+            pub dropless: DroplessArena,\n             drop: DropArena,\n             $($name: arena_for_type!($a[$ty]),)*\n         }"}, {"sha": "a51f0f7f24c368e6f8aebcc45fb6a023c745c0c0", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 26, "deletions": 33, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8c016c3c36bdfcc256edea38c969c72304aad60e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c016c3c36bdfcc256edea38c969c72304aad60e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=8c016c3c36bdfcc256edea38c969c72304aad60e", "patch": "@@ -51,10 +51,9 @@ use rustc_session::config::CrateType;\n use rustc_session::config::{BorrowckMode, OutputFilenames};\n use rustc_session::Session;\n \n-use arena::SyncDroplessArena;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n-use rustc_data_structures::sharded::ShardedHashMap;\n+use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n use rustc_data_structures::stable_hasher::{\n     hash_stable_hashmap, HashStable, StableHasher, StableVec,\n };\n@@ -83,21 +82,11 @@ use syntax::ast;\n use syntax::attr;\n use syntax::expand::allocator::AllocatorKind;\n \n-pub struct AllArenas {\n-    pub interner: SyncDroplessArena,\n-}\n-\n-impl AllArenas {\n-    pub fn new() -> Self {\n-        AllArenas { interner: SyncDroplessArena::default() }\n-    }\n-}\n-\n type InternedSet<'tcx, T> = ShardedHashMap<Interned<'tcx, T>, ()>;\n \n pub struct CtxtInterners<'tcx> {\n     /// The arena that types, regions, etc. are allocated from.\n-    arena: &'tcx SyncDroplessArena,\n+    arena: &'tcx WorkerLocal<Arena<'tcx>>,\n \n     /// Specifically use a speedy hash algorithm for these hash sets, since\n     /// they're accessed quite often.\n@@ -117,7 +106,7 @@ pub struct CtxtInterners<'tcx> {\n }\n \n impl<'tcx> CtxtInterners<'tcx> {\n-    fn new(arena: &'tcx SyncDroplessArena) -> CtxtInterners<'tcx> {\n+    fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {\n         CtxtInterners {\n             arena,\n             type_: Default::default(),\n@@ -1125,7 +1114,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,\n         local_providers: ty::query::Providers<'tcx>,\n         extern_providers: ty::query::Providers<'tcx>,\n-        arenas: &'tcx AllArenas,\n         arena: &'tcx WorkerLocal<Arena<'tcx>>,\n         resolutions: ty::ResolverOutputs,\n         hir: hir_map::Map<'tcx>,\n@@ -1136,7 +1124,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let data_layout = TargetDataLayout::parse(&s.target.target).unwrap_or_else(|err| {\n             s.fatal(&err);\n         });\n-        let interners = CtxtInterners::new(&arenas.interner);\n+        let interners = CtxtInterners::new(arena);\n         let common_types = CommonTypes::new(&interners);\n         let common_lifetimes = CommonLifetimes::new(&interners);\n         let common_consts = CommonConsts::new(&interners, &common_types);\n@@ -1567,11 +1555,11 @@ pub trait Lift<'tcx>: fmt::Debug {\n }\n \n macro_rules! nop_lift {\n-    ($ty:ty => $lifted:ty) => {\n+    ($set:ident; $ty:ty => $lifted:ty) => {\n         impl<'a, 'tcx> Lift<'tcx> for $ty {\n             type Lifted = $lifted;\n             fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-                if tcx.interners.arena.in_arena(*self as *const _) {\n+                if tcx.interners.$set.contains_pointer_to(&Interned(*self)) {\n                     Some(unsafe { mem::transmute(*self) })\n                 } else {\n                     None\n@@ -1582,14 +1570,14 @@ macro_rules! nop_lift {\n }\n \n macro_rules! nop_list_lift {\n-    ($ty:ty => $lifted:ty) => {\n+    ($set:ident; $ty:ty => $lifted:ty) => {\n         impl<'a, 'tcx> Lift<'tcx> for &'a List<$ty> {\n             type Lifted = &'tcx List<$lifted>;\n             fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n                 if self.is_empty() {\n                     return Some(List::empty());\n                 }\n-                if tcx.interners.arena.in_arena(*self as *const _) {\n+                if tcx.interners.$set.contains_pointer_to(&Interned(*self)) {\n                     Some(unsafe { mem::transmute(*self) })\n                 } else {\n                     None\n@@ -1599,21 +1587,21 @@ macro_rules! nop_list_lift {\n     };\n }\n \n-nop_lift! {Ty<'a> => Ty<'tcx>}\n-nop_lift! {Region<'a> => Region<'tcx>}\n-nop_lift! {Goal<'a> => Goal<'tcx>}\n-nop_lift! {&'a Const<'a> => &'tcx Const<'tcx>}\n+nop_lift! {type_; Ty<'a> => Ty<'tcx>}\n+nop_lift! {region; Region<'a> => Region<'tcx>}\n+nop_lift! {goal; Goal<'a> => Goal<'tcx>}\n+nop_lift! {const_; &'a Const<'a> => &'tcx Const<'tcx>}\n \n-nop_list_lift! {Goal<'a> => Goal<'tcx>}\n-nop_list_lift! {Clause<'a> => Clause<'tcx>}\n-nop_list_lift! {Ty<'a> => Ty<'tcx>}\n-nop_list_lift! {ExistentialPredicate<'a> => ExistentialPredicate<'tcx>}\n-nop_list_lift! {Predicate<'a> => Predicate<'tcx>}\n-nop_list_lift! {CanonicalVarInfo => CanonicalVarInfo}\n-nop_list_lift! {ProjectionKind => ProjectionKind}\n+nop_list_lift! {goal_list; Goal<'a> => Goal<'tcx>}\n+nop_list_lift! {clauses; Clause<'a> => Clause<'tcx>}\n+nop_list_lift! {type_list; Ty<'a> => Ty<'tcx>}\n+nop_list_lift! {existential_predicates; ExistentialPredicate<'a> => ExistentialPredicate<'tcx>}\n+nop_list_lift! {predicates; Predicate<'a> => Predicate<'tcx>}\n+nop_list_lift! {canonical_var_infos; CanonicalVarInfo => CanonicalVarInfo}\n+nop_list_lift! {projs; ProjectionKind => ProjectionKind}\n \n // This is the impl for `&'a InternalSubsts<'a>`.\n-nop_list_lift! {GenericArg<'a> => GenericArg<'tcx>}\n+nop_list_lift! {substs; GenericArg<'a> => GenericArg<'tcx>}\n \n pub mod tls {\n     use super::{ptr_eq, GlobalCtxt, TyCtxt};\n@@ -1937,6 +1925,11 @@ impl<'tcx, T: 'tcx + ?Sized> Clone for Interned<'tcx, T> {\n }\n impl<'tcx, T: 'tcx + ?Sized> Copy for Interned<'tcx, T> {}\n \n+impl<'tcx, T: 'tcx + ?Sized> IntoPointer for Interned<'tcx, T> {\n+    fn into_pointer(&self) -> *const () {\n+        self.0 as *const _ as *const ()\n+    }\n+}\n // N.B., an `Interned<Ty>` compares and hashes as a `TyKind`.\n impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {\n     fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {\n@@ -2089,7 +2082,7 @@ macro_rules! slice_interners {\n         $(impl<'tcx> TyCtxt<'tcx> {\n             pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {\n                 self.interners.$field.intern_ref(v, || {\n-                    Interned(List::from_arena(&self.interners.arena, v))\n+                    Interned(List::from_arena(&*self.arena, v))\n                 }).0\n             }\n         })+"}, {"sha": "282136fa3546bec71efc57113912be3ad8b6bc64", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c016c3c36bdfcc256edea38c969c72304aad60e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c016c3c36bdfcc256edea38c969c72304aad60e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=8c016c3c36bdfcc256edea38c969c72304aad60e", "patch": "@@ -6,6 +6,7 @@ pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n pub use self::Variance::*;\n \n+use crate::arena::Arena;\n use crate::hir::exports::ExportMap;\n use crate::hir::map as hir_map;\n \n@@ -25,7 +26,6 @@ use crate::ty::layout::VariantIdx;\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use crate::ty::util::{Discr, IntTypeExt};\n use crate::ty::walk::TypeWalker;\n-use arena::SyncDroplessArena;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::fx::FxIndexMap;\n@@ -74,7 +74,7 @@ pub use crate::ty::diagnostics::*;\n pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n \n-pub use self::context::{keep_local, tls, AllArenas, FreeRegionInfo, TyCtxt};\n+pub use self::context::{keep_local, tls, FreeRegionInfo, TyCtxt};\n pub use self::context::{\n     CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, ResolvedOpaqueTy,\n     UserType, UserTypeAnnotationIndex,\n@@ -604,7 +604,7 @@ unsafe impl<T: Sync> Sync for List<T> {}\n \n impl<T: Copy> List<T> {\n     #[inline]\n-    fn from_arena<'tcx>(arena: &'tcx SyncDroplessArena, slice: &[T]) -> &'tcx List<T> {\n+    fn from_arena<'tcx>(arena: &'tcx Arena<'tcx>, slice: &[T]) -> &'tcx List<T> {\n         assert!(!mem::needs_drop::<T>());\n         assert!(mem::size_of::<T>() != 0);\n         assert!(slice.len() != 0);\n@@ -617,7 +617,9 @@ impl<T: Copy> List<T> {\n \n         let size = offset + slice.len() * mem::size_of::<T>();\n \n-        let mem = arena.alloc_raw(size, cmp::max(mem::align_of::<T>(), mem::align_of::<usize>()));\n+        let mem = arena\n+            .dropless\n+            .alloc_raw(size, cmp::max(mem::align_of::<T>(), mem::align_of::<usize>()));\n         unsafe {\n             let result = &mut *(mem.as_mut_ptr() as *mut List<T>);\n             // Write the length"}, {"sha": "ee3f88ff1675fa6039077b6ad8c5e258a38ec10a", "filename": "src/librustc_data_structures/sharded.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8c016c3c36bdfcc256edea38c969c72304aad60e/src%2Flibrustc_data_structures%2Fsharded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c016c3c36bdfcc256edea38c969c72304aad60e/src%2Flibrustc_data_structures%2Fsharded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsharded.rs?ref=8c016c3c36bdfcc256edea38c969c72304aad60e", "patch": "@@ -137,6 +137,20 @@ impl<K: Eq + Hash + Copy> ShardedHashMap<K, ()> {\n     }\n }\n \n+pub trait IntoPointer {\n+    /// Returns a pointer which outlives `self`.\n+    fn into_pointer(&self) -> *const ();\n+}\n+\n+impl<K: Eq + Hash + Copy + IntoPointer> ShardedHashMap<K, ()> {\n+    pub fn contains_pointer_to<T: Hash + IntoPointer>(&self, value: &T) -> bool {\n+        let hash = make_hash(&value);\n+        let shard = self.get_shard_by_hash(hash).lock();\n+        let value = value.into_pointer();\n+        shard.raw_entry().from_hash(hash, |entry| entry.into_pointer() == value).is_some()\n+    }\n+}\n+\n #[inline]\n fn make_hash<K: Hash + ?Sized>(val: &K) -> u64 {\n     let mut state = FxHasher::default();"}, {"sha": "d62c7539d5f2189ac7c0663c7dc4e4231219bc29", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c016c3c36bdfcc256edea38c969c72304aad60e/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c016c3c36bdfcc256edea38c969c72304aad60e/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=8c016c3c36bdfcc256edea38c969c72304aad60e", "patch": "@@ -15,7 +15,7 @@ use rustc::session::search_paths::PathKind;\n use rustc::session::Session;\n use rustc::traits;\n use rustc::ty::steal::Steal;\n-use rustc::ty::{self, AllArenas, GlobalCtxt, ResolverOutputs, TyCtxt};\n+use rustc::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc::util::common::ErrorReported;\n use rustc_builtin_macros;\n use rustc_codegen_ssa::back::link::emit_metadata;\n@@ -715,7 +715,6 @@ pub fn create_global_ctxt<'tcx>(\n     outputs: OutputFilenames,\n     crate_name: &str,\n     global_ctxt: &'tcx Once<GlobalCtxt<'tcx>>,\n-    all_arenas: &'tcx AllArenas,\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n ) -> QueryContext<'tcx> {\n     let sess = &compiler.session();\n@@ -746,7 +745,6 @@ pub fn create_global_ctxt<'tcx>(\n                 lint_store,\n                 local_providers,\n                 extern_providers,\n-                &all_arenas,\n                 arena,\n                 resolver_outputs,\n                 hir_map,"}, {"sha": "0af9b17a2995b2f5026b2d1cefc2759ddb93d316", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c016c3c36bdfcc256edea38c969c72304aad60e/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c016c3c36bdfcc256edea38c969c72304aad60e/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=8c016c3c36bdfcc256edea38c969c72304aad60e", "patch": "@@ -7,7 +7,7 @@ use rustc::hir::map;\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::session::Session;\n use rustc::ty::steal::Steal;\n-use rustc::ty::{AllArenas, GlobalCtxt, ResolverOutputs};\n+use rustc::ty::{GlobalCtxt, ResolverOutputs};\n use rustc::util::common::ErrorReported;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::sync::{Lrc, Once, WorkerLocal};\n@@ -66,7 +66,6 @@ pub struct Queries<'tcx> {\n     compiler: &'tcx Compiler,\n     gcx: Once<GlobalCtxt<'tcx>>,\n \n-    all_arenas: AllArenas,\n     arena: WorkerLocal<Arena<'tcx>>,\n \n     dep_graph_future: Query<Option<DepGraphFuture>>,\n@@ -86,7 +85,6 @@ impl<'tcx> Queries<'tcx> {\n         Queries {\n             compiler,\n             gcx: Once::new(),\n-            all_arenas: AllArenas::new(),\n             arena: WorkerLocal::new(|_| Arena::default()),\n             dep_graph_future: Default::default(),\n             parse: Default::default(),\n@@ -265,7 +263,6 @@ impl<'tcx> Queries<'tcx> {\n                 outputs,\n                 &crate_name,\n                 &self.gcx,\n-                &self.all_arenas,\n                 &self.arena,\n             ))\n         })"}, {"sha": "173bb29e964d160c278b01ac66fecaff9f5785ce", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8c016c3c36bdfcc256edea38c969c72304aad60e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c016c3c36bdfcc256edea38c969c72304aad60e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=8c016c3c36bdfcc256edea38c969c72304aad60e", "patch": "@@ -1320,10 +1320,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // those that do.\n                 self.one_bound_for_assoc_type(\n                     || traits::supertraits(tcx, trait_ref),\n-                    &trait_ref.print_only_trait_path().to_string(),\n+                    || trait_ref.print_only_trait_path().to_string(),\n                     binding.item_name,\n                     path_span,\n-                    match binding.kind {\n+                    || match binding.kind {\n                         ConvertedBindingKind::Equality(ty) => Some(ty.to_string()),\n                         _ => None,\n                     },\n@@ -1880,10 +1880,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     predicates.iter().filter_map(|(p, _)| p.to_opt_poly_trait_ref()),\n                 )\n             },\n-            &param_name.as_str(),\n+            || param_name.to_string(),\n             assoc_name,\n             span,\n-            None,\n+            || None,\n         )\n     }\n \n@@ -1892,10 +1892,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     fn one_bound_for_assoc_type<I>(\n         &self,\n         all_candidates: impl Fn() -> I,\n-        ty_param_name: &str,\n+        ty_param_name: impl Fn() -> String,\n         assoc_name: ast::Ident,\n         span: Span,\n-        is_equality: Option<String>,\n+        is_equality: impl Fn() -> Option<String>,\n     ) -> Result<ty::PolyTraitRef<'tcx>, ErrorReported>\n     where\n         I: Iterator<Item = ty::PolyTraitRef<'tcx>>,\n@@ -1908,7 +1908,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             None => {\n                 self.complain_about_assoc_type_not_found(\n                     all_candidates,\n-                    ty_param_name,\n+                    &ty_param_name(),\n                     assoc_name,\n                     span,\n                 );\n@@ -1921,6 +1921,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         if let Some(bound2) = matching_candidates.next() {\n             debug!(\"one_bound_for_assoc_type: bound2 = {:?}\", bound2);\n \n+            let is_equality = is_equality();\n             let bounds = iter::once(bound).chain(iter::once(bound2)).chain(matching_candidates);\n             let mut err = if is_equality.is_some() {\n                 // More specific Error Index entry.\n@@ -1930,7 +1931,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     E0222,\n                     \"ambiguous associated type `{}` in bounds of `{}`\",\n                     assoc_name,\n-                    ty_param_name\n+                    ty_param_name()\n                 )\n             } else {\n                 struct_span_err!(\n@@ -1939,7 +1940,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     E0221,\n                     \"ambiguous associated type `{}` in bounds of `{}`\",\n                     assoc_name,\n-                    ty_param_name\n+                    ty_param_name()\n                 )\n             };\n             err.span_label(span, format!(\"ambiguous associated type `{}`\", assoc_name));\n@@ -1977,7 +1978,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             \"use fully qualified syntax to disambiguate\",\n                             format!(\n                                 \"<{} as {}>::{}\",\n-                                ty_param_name,\n+                                ty_param_name(),\n                                 bound.print_only_trait_path(),\n                                 assoc_name,\n                             ),\n@@ -1987,7 +1988,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 } else {\n                     err.note(&format!(\n                         \"associated type `{}` could derive from `{}`\",\n-                        ty_param_name,\n+                        ty_param_name(),\n                         bound.print_only_trait_path(),\n                     ));\n                 }\n@@ -1996,7 +1997,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 err.help(&format!(\n                     \"consider introducing a new type parameter `T` and adding `where` constraints:\\\n                      \\n    where\\n        T: {},\\n{}\",\n-                    ty_param_name,\n+                    ty_param_name(),\n                     where_bounds.join(\",\\n\"),\n                 ));\n             }\n@@ -2110,10 +2111,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n                 self.one_bound_for_assoc_type(\n                     || traits::supertraits(tcx, ty::Binder::bind(trait_ref)),\n-                    \"Self\",\n+                    || \"Self\".to_string(),\n                     assoc_ident,\n                     span,\n-                    None,\n+                    || None,\n                 )?\n             }\n             (&ty::Param(_), Res::SelfTy(Some(param_did), None))"}]}