{"sha": "5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMDQ5NTdhNGI0NzE0ZjcxZDM4MzI2ZmM5NmEwYjBlZjZkYzU4MDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-22T19:48:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-22T19:48:27Z"}, "message": "Auto merge of #79278 - mark-i-m:stabilize-or-pattern, r=nikomatsakis\n\nStabilize or_patterns (RFC 2535, 2530, 2175)\n\ncloses #54883\n\nThis PR stabilizes the or_patterns feature in Rust 1.53.\n\nThis is blocked on the following (in order):\n- [x] The crater run in https://github.com/rust-lang/rust/pull/78935#issuecomment-731564021\n- [x] The resolution of the unresolved questions and a second crater run (https://github.com/rust-lang/rust/pull/78935#issuecomment-735412705)\n    - It looks like we will need to pursue some sort of edition-based transition for `:pat`.\n- [x] Nomination and discussion by T-lang\n- [x] Implement new behavior for `:pat` based on consensus (https://github.com/rust-lang/rust/pull/80100).\n- [ ] An FCP on stabilization\n\nEDIT: Stabilization report is in https://github.com/rust-lang/rust/pull/79278#issuecomment-772815177", "tree": {"sha": "45939952625262270e987784f023dbddeae05635", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45939952625262270e987784f023dbddeae05635"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "html_url": "https://github.com/rust-lang/rust/commit/5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2287a8823d2d731b9bf3064da305fc5c408b24e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2287a8823d2d731b9bf3064da305fc5c408b24e2", "html_url": "https://github.com/rust-lang/rust/commit/2287a8823d2d731b9bf3064da305fc5c408b24e2"}, {"sha": "b9ecba30bc45af1d5ebe6480ccfb69efc7496a25", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9ecba30bc45af1d5ebe6480ccfb69efc7496a25", "html_url": "https://github.com/rust-lang/rust/commit/b9ecba30bc45af1d5ebe6480ccfb69efc7496a25"}], "stats": {"total": 1255, "additions": 416, "deletions": 839}, "files": [{"sha": "c1aa74029f5ebca96e67cb1d9d6fc86ea8e611de", "filename": "compiler/rustc_apfloat/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -34,7 +34,7 @@\n #![no_std]\n #![forbid(unsafe_code)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n \n #[macro_use]\n extern crate alloc;"}, {"sha": "a823d375fcf50158e499ffaaf04e6868c2c39c2f", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -16,7 +16,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "8a051066c7d218209ddc6fdb2a6df147bc354b44", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -31,7 +31,7 @@\n //! in the HIR, especially for multiple identifiers.\n \n #![feature(crate_visibility_modifier)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "2f73e44faf62b0cd9c7a62ae4f45164b2c1d3199", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -686,7 +686,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n         \"to use an async block, remove the `||`: `async {`\"\n     );\n     gate_all!(generators, \"yield syntax is experimental\");\n-    gate_all!(or_patterns, \"or-patterns syntax is experimental\");\n     gate_all!(raw_ref_op, \"raw address of syntax is experimental\");\n     gate_all!(const_trait_bound_opt_out, \"`?const` on trait bounds is experimental\");\n     gate_all!(const_trait_impl, \"const trait impls are experimental\");"}, {"sha": "67b66284f66f022dd0478bdefd32a9a50156ef1f", "filename": "compiler/rustc_ast_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_ast_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_ast_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,6 +1,6 @@\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "ab68d24e4b339959fe71800d0b267cce2474d6c7", "filename": "compiler/rustc_attr/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -4,7 +4,7 @@\n //! The goal is to move the definition of `MetaItem` and things that don't need to be in `syntax`\n //! to this crate.\n \n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "fe4bede6a48b9c7cfc8f1a57bb23956420f8b928", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -8,7 +8,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![recursion_limit = \"256\"]"}, {"sha": "de7f5fc6e29828bc5dd0fde32c9b5821c0f4cbcc", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -12,7 +12,7 @@\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n use back::write::{create_informational_target_machine, create_target_machine};"}, {"sha": "6eead2812ba70f3a8c2c6f9a59d6ed3b2a43ab1d", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -6,7 +6,7 @@\n #![feature(try_blocks)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(associated_type_bounds)]\n #![recursion_limit = \"256\"]\n #![feature(box_syntax)]"}, {"sha": "2674ccced6f61f08cff4af792f26032277be3034", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -22,7 +22,7 @@ use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, PResult};\n use rustc_feature::Features;\n-use rustc_parse::parser::{AttemptLocalParseRecovery, ForceCollect, GateOr, Parser, RecoverComma};\n+use rustc_parse::parser::{AttemptLocalParseRecovery, ForceCollect, Parser, RecoverComma};\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::UNUSED_DOC_COMMENTS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n@@ -917,7 +917,7 @@ pub fn parse_ast_fragment<'a>(\n         }\n         AstFragmentKind::Ty => AstFragment::Ty(this.parse_ty()?),\n         AstFragmentKind::Pat => {\n-            AstFragment::Pat(this.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)?)\n+            AstFragment::Pat(this.parse_pat_allow_top_alt(None, RecoverComma::No)?)\n         }\n         AstFragmentKind::Arms\n         | AstFragmentKind::Fields"}, {"sha": "14f04dcb51a0bac00abd714c100056348c35c87d", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -2,7 +2,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(destructuring_assignment)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_span)]"}, {"sha": "ce9f711b27e53f154dbaf18eb2c4e4d2c5bff5c5", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -277,6 +277,8 @@ declare_features! (\n     (accepted, min_const_generics, \"1.51.0\", Some(74878), None),\n     /// The `unsafe_op_in_unsafe_fn` lint (allowed by default): no longer treat an unsafe function as an unsafe block.\n     (accepted, unsafe_block_in_unsafe_fn, \"1.51.0\", Some(71668), None),\n+    /// Allows the use of or-patterns (e.g., `0 | 1`).\n+    (accepted, or_patterns, \"1.53.0\", Some(54883), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "f55ba22e7dd473b470c1d4c5ffc11dc94390b233", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -488,9 +488,6 @@ declare_features! (\n     /// Allows `impl Trait` to be used inside type aliases (RFC 2515).\n     (active, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n \n-    /// Allows the use of or-patterns (e.g., `0 | 1`).\n-    (active, or_patterns, \"1.38.0\", Some(54883), None),\n-\n     /// Allows the definition of `const extern fn` and `const unsafe extern fn`.\n     (active, const_extern_fn, \"1.40.0\", Some(64926), None),\n "}, {"sha": "36a30900fb26cdbcbf926001292991ddcf061be5", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -8,7 +8,7 @@\n #![feature(extended_key_value_attributes)]\n #![feature(in_band_lifetimes)]\n #![feature(once_cell)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "76e5d30dc5ee2bd78448288b0149911a494cd9fd", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,4 +1,4 @@\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n use rustc_ast as ast;"}, {"sha": "4ec229ebcf559faea0bdfb90c3d9c04d91319639", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -20,7 +20,7 @@\n #![feature(const_panic)]\n #![feature(extend_one)]\n #![feature(never_type)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(in_band_lifetimes)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"512\"] // For rustdoc"}, {"sha": "cacdf2605482500f8969317a12d03b87b0905408", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -35,7 +35,7 @@\n #![feature(iter_order_by)]\n #![feature(never_type)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n #![feature(control_flow_enum)]"}, {"sha": "fe93f4230e95b0f8e9606ac349660c905986b19f", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -5,7 +5,7 @@\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(once_cell)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(proc_macro_internals)]\n #![feature(min_specialization)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "1561b3d7d2962343e4ebffcd9037a551636c30a7", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -38,7 +38,7 @@\n #![feature(extern_types)]\n #![feature(nll)]\n #![feature(once_cell)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(min_specialization)]\n #![feature(trusted_len)]\n #![feature(test)]"}, {"sha": "32354641412376e342f186626b14212a9d249df3", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -27,7 +27,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(stmt_expr_attributes)]\n #![feature(trait_alias)]\n #![feature(option_get_or_insert_default)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(once_cell)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"256\"]"}, {"sha": "9aca005ae9101128a67813c690cebef8448f9137", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -10,7 +10,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(bool_to_option)]\n #![feature(once_cell)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "9fead30c4a178c7900f9af69f459034c320835fd", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -3,7 +3,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(bindings_after_at)]\n #![feature(iter_order_by)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(box_syntax)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]"}, {"sha": "d64e5173b926c578d44d9774a5f666e23d1fc283", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,4 +1,4 @@\n-use super::pat::{GateOr, RecoverComma, PARAM_EXPECTED};\n+use super::pat::{RecoverComma, PARAM_EXPECTED};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{AttrWrapper, BlockMode, ForceCollect, Parser, PathStyle, Restrictions, TokenType};\n use super::{SemiColonMode, SeqSep, TokenExpectType, TrailingToken};\n@@ -1803,7 +1803,7 @@ impl<'a> Parser<'a> {\n     /// The `let` token has already been eaten.\n     fn parse_let_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_token.span;\n-        let pat = self.parse_pat_allow_top_alt(None, GateOr::No, RecoverComma::Yes)?;\n+        let pat = self.parse_pat_allow_top_alt(None, RecoverComma::Yes)?;\n         self.expect(&token::Eq)?;\n         let expr = self.with_res(self.restrictions | Restrictions::NO_STRUCT_LITERAL, |this| {\n             this.parse_assoc_expr_with(1 + prec_let_scrutinee_needs_par(), None.into())\n@@ -1866,7 +1866,7 @@ impl<'a> Parser<'a> {\n             _ => None,\n         };\n \n-        let pat = self.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::Yes)?;\n+        let pat = self.parse_pat_allow_top_alt(None, RecoverComma::Yes)?;\n         if !self.eat_keyword(kw::In) {\n             self.error_missing_in_for_loop();\n         }\n@@ -2073,7 +2073,7 @@ impl<'a> Parser<'a> {\n         let attrs = self.parse_outer_attributes()?;\n         self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n             let lo = this.token.span;\n-            let pat = this.parse_pat_allow_top_alt(None, GateOr::No, RecoverComma::Yes)?;\n+            let pat = this.parse_pat_allow_top_alt(None, RecoverComma::Yes)?;\n             let guard = if this.eat_keyword(kw::If) {\n                 let if_span = this.prev_token.span;\n                 let cond = this.parse_expr()?;"}, {"sha": "71103840f1396f4af37f5754d36fa9607ad0d516", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -14,7 +14,7 @@ use crate::lexer::UnmatchedBrace;\n pub use attr_wrapper::AttrWrapper;\n pub use diagnostics::AttemptLocalParseRecovery;\n use diagnostics::Error;\n-pub use pat::{GateOr, RecoverComma};\n+pub use pat::RecoverComma;\n pub use path::PathStyle;\n \n use rustc_ast::ptr::P;"}, {"sha": "464524e3c061f9efda9cd6d30a6fe64c39468fce", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -4,7 +4,7 @@ use rustc_ast_pretty::pprust;\n use rustc_errors::PResult;\n use rustc_span::symbol::{kw, Ident};\n \n-use crate::parser::pat::{GateOr, RecoverComma};\n+use crate::parser::pat::RecoverComma;\n use crate::parser::{FollowedByType, ForceCollect, Parser, PathStyle};\n \n impl<'a> Parser<'a> {\n@@ -122,7 +122,7 @@ impl<'a> Parser<'a> {\n                 token::NtPat(self.collect_tokens_no_attrs(|this| match kind {\n                     NonterminalKind::Pat2018 { .. } => this.parse_pat_no_top_alt(None),\n                     NonterminalKind::Pat2021 { .. } => {\n-                        this.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)\n+                        this.parse_pat_allow_top_alt(None, RecoverComma::No)\n                     }\n                     _ => unreachable!(),\n                 })?)"}, {"sha": "0abefbd6a1219c36390f0eb6021b215add2f38ef", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 19, "deletions": 54, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -17,13 +17,6 @@ pub(super) const PARAM_EXPECTED: Expected = Some(\"parameter name\");\n \n const WHILE_PARSING_OR_MSG: &str = \"while parsing this or-pattern starting here\";\n \n-/// Whether or not an or-pattern should be gated when occurring in the current context.\n-#[derive(PartialEq, Clone, Copy)]\n-pub enum GateOr {\n-    Yes,\n-    No,\n-}\n-\n /// Whether or not to recover a `,` when parsing or-patterns.\n #[derive(PartialEq, Copy, Clone)]\n pub enum RecoverComma {\n@@ -64,18 +57,16 @@ impl<'a> Parser<'a> {\n     pub fn parse_pat_allow_top_alt(\n         &mut self,\n         expected: Expected,\n-        gate_or: GateOr,\n         rc: RecoverComma,\n     ) -> PResult<'a, P<Pat>> {\n-        self.parse_pat_allow_top_alt_inner(expected, gate_or, rc).map(|(pat, _)| pat)\n+        self.parse_pat_allow_top_alt_inner(expected, rc).map(|(pat, _)| pat)\n     }\n \n     /// Returns the pattern and a bool indicating whether we recovered from a trailing vert (true =\n     /// recovered).\n     fn parse_pat_allow_top_alt_inner(\n         &mut self,\n         expected: Expected,\n-        gate_or: GateOr,\n         rc: RecoverComma,\n     ) -> PResult<'a, (P<Pat>, bool)> {\n         // Keep track of whether we recovered from a trailing vert so that we can avoid duplicated\n@@ -90,7 +81,7 @@ impl<'a> Parser<'a> {\n \n         // Parse the first pattern (`p_0`).\n         let first_pat = self.parse_pat_no_top_alt(expected)?;\n-        self.maybe_recover_unexpected_comma(first_pat.span, rc, gate_or)?;\n+        self.maybe_recover_unexpected_comma(first_pat.span, rc)?;\n \n         // If the next token is not a `|`,\n         // this is not an or-pattern and we should exit here.\n@@ -99,10 +90,6 @@ impl<'a> Parser<'a> {\n             // then we should really gate the leading `|`.\n             // This complicated procedure is done purely for diagnostics UX.\n             if let Some(leading_vert_span) = leading_vert_span {\n-                if gate_or == GateOr::Yes && self.sess.gated_spans.is_ungated(sym::or_patterns) {\n-                    self.sess.gated_spans.gate(sym::or_patterns, leading_vert_span);\n-                }\n-\n                 // If there was a leading vert, treat this as an or-pattern. This improves\n                 // diagnostics.\n                 let span = leading_vert_span.to(self.prev_token.span);\n@@ -128,16 +115,11 @@ impl<'a> Parser<'a> {\n                 err.span_label(lo, WHILE_PARSING_OR_MSG);\n                 err\n             })?;\n-            self.maybe_recover_unexpected_comma(pat.span, rc, gate_or)?;\n+            self.maybe_recover_unexpected_comma(pat.span, rc)?;\n             pats.push(pat);\n         }\n         let or_pattern_span = lo.to(self.prev_token.span);\n \n-        // Feature gate the or-pattern if instructed:\n-        if gate_or == GateOr::Yes {\n-            self.sess.gated_spans.gate(sym::or_patterns, or_pattern_span);\n-        }\n-\n         Ok((self.mk_pat(or_pattern_span, PatKind::Or(pats)), trailing_vert))\n     }\n \n@@ -152,14 +134,13 @@ impl<'a> Parser<'a> {\n     pub(super) fn parse_pat_before_ty(\n         &mut self,\n         expected: Expected,\n-        gate_or: GateOr,\n         rc: RecoverComma,\n         syntax_loc: &str,\n     ) -> PResult<'a, (P<Pat>, bool)> {\n         // We use `parse_pat_allow_top_alt` regardless of whether we actually want top-level\n         // or-patterns so that we can detect when a user tries to use it. This allows us to print a\n         // better error message.\n-        let (pat, trailing_vert) = self.parse_pat_allow_top_alt_inner(expected, gate_or, rc)?;\n+        let (pat, trailing_vert) = self.parse_pat_allow_top_alt_inner(expected, rc)?;\n         let colon = self.eat(&token::Colon);\n \n         if let PatKind::Or(pats) = &pat.kind {\n@@ -213,12 +194,7 @@ impl<'a> Parser<'a> {\n             self.bump();\n         }\n \n-        self.parse_pat_before_ty(\n-            PARAM_EXPECTED,\n-            GateOr::No,\n-            RecoverComma::No,\n-            \"function parameters\",\n-        )\n+        self.parse_pat_before_ty(PARAM_EXPECTED, RecoverComma::No, \"function parameters\")\n     }\n \n     /// Eat the or-pattern `|` separator.\n@@ -287,12 +263,7 @@ impl<'a> Parser<'a> {\n \n     /// Some special error handling for the \"top-level\" patterns in a match arm,\n     /// `for` loop, `let`, &c. (in contrast to subpatterns within such).\n-    fn maybe_recover_unexpected_comma(\n-        &mut self,\n-        lo: Span,\n-        rc: RecoverComma,\n-        gate_or: GateOr,\n-    ) -> PResult<'a, ()> {\n+    fn maybe_recover_unexpected_comma(&mut self, lo: Span, rc: RecoverComma) -> PResult<'a, ()> {\n         if rc == RecoverComma::No || self.token != token::Comma {\n             return Ok(());\n         }\n@@ -313,22 +284,18 @@ impl<'a> Parser<'a> {\n         if let Ok(seq_snippet) = self.span_to_snippet(seq_span) {\n             const MSG: &str = \"try adding parentheses to match on a tuple...\";\n \n-            let or_suggestion =\n-                gate_or == GateOr::No || !self.sess.gated_spans.is_ungated(sym::or_patterns);\n             err.span_suggestion(\n                 seq_span,\n-                if or_suggestion { MSG } else { MSG.trim_end_matches('.') },\n+                MSG,\n                 format!(\"({})\", seq_snippet),\n                 Applicability::MachineApplicable,\n             );\n-            if or_suggestion {\n-                err.span_suggestion(\n-                    seq_span,\n-                    \"...or a vertical bar to match on multiple alternatives\",\n-                    seq_snippet.replace(\",\", \" |\"),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n+            err.span_suggestion(\n+                seq_span,\n+                \"...or a vertical bar to match on multiple alternatives\",\n+                seq_snippet.replace(\",\", \" |\"),\n+                Applicability::MachineApplicable,\n+            );\n         }\n         Err(err)\n     }\n@@ -383,7 +350,7 @@ impl<'a> Parser<'a> {\n         } else if self.check(&token::OpenDelim(token::Bracket)) {\n             // Parse `[pat, pat,...]` as a slice pattern.\n             let (pats, _) = self.parse_delim_comma_seq(token::Bracket, |p| {\n-                p.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)\n+                p.parse_pat_allow_top_alt(None, RecoverComma::No)\n             })?;\n             PatKind::Slice(pats)\n         } else if self.check(&token::DotDot) && !self.is_pat_range_end_start(1) {\n@@ -596,9 +563,8 @@ impl<'a> Parser<'a> {\n \n     /// Parse a tuple or parenthesis pattern.\n     fn parse_pat_tuple_or_parens(&mut self) -> PResult<'a, PatKind> {\n-        let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| {\n-            p.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)\n-        })?;\n+        let (fields, trailing_comma) =\n+            self.parse_paren_comma_seq(|p| p.parse_pat_allow_top_alt(None, RecoverComma::No))?;\n \n         // Here, `(pat,)` is a tuple pattern.\n         // For backward compatibility, `(..)` is a tuple pattern as well.\n@@ -911,9 +877,8 @@ impl<'a> Parser<'a> {\n         if qself.is_some() {\n             return self.error_qpath_before_pat(&path, \"(\");\n         }\n-        let (fields, _) = self.parse_paren_comma_seq(|p| {\n-            p.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)\n-        })?;\n+        let (fields, _) =\n+            self.parse_paren_comma_seq(|p| p.parse_pat_allow_top_alt(None, RecoverComma::No))?;\n         Ok(PatKind::TupleStruct(path, fields))\n     }\n \n@@ -1079,7 +1044,7 @@ impl<'a> Parser<'a> {\n             // Parsing a pattern of the form `fieldname: pat`.\n             let fieldname = self.parse_field_name()?;\n             self.bump();\n-            let pat = self.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)?;\n+            let pat = self.parse_pat_allow_top_alt(None, RecoverComma::No)?;\n             hi = pat.span;\n             (pat, fieldname, false)\n         } else {"}, {"sha": "24fb4301cc2b8b66124c60b75b2971ab69a37b9f", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,7 +1,7 @@\n use super::attr::DEFAULT_INNER_ATTR_FORBIDDEN;\n use super::diagnostics::{AttemptLocalParseRecovery, Error};\n use super::expr::LhsExpr;\n-use super::pat::{GateOr, RecoverComma};\n+use super::pat::RecoverComma;\n use super::path::PathStyle;\n use super::TrailingToken;\n use super::{AttrWrapper, BlockMode, ForceCollect, Parser, Restrictions, SemiColonMode};\n@@ -221,8 +221,7 @@ impl<'a> Parser<'a> {\n     /// Parses a local variable declaration.\n     fn parse_local(&mut self, attrs: AttrVec) -> PResult<'a, P<Local>> {\n         let lo = self.prev_token.span;\n-        let (pat, colon) =\n-            self.parse_pat_before_ty(None, GateOr::Yes, RecoverComma::Yes, \"`let` bindings\")?;\n+        let (pat, colon) = self.parse_pat_before_ty(None, RecoverComma::Yes, \"`let` bindings\")?;\n \n         let (err, ty) = if colon {\n             // Save the state of the parser before parsing type normally, in case there is a `:`"}, {"sha": "c2fc2bfcd335337987b1cee1663924f87527d750", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -10,7 +10,7 @@\n     test(attr(deny(warnings)))\n )]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(bool_to_option)]\n \n pub use Alignment::*;"}, {"sha": "7ad6bd2bb36678f90bc34c8d144bbcd3dc849c1d", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -10,7 +10,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "de264b5bb04030195decf6475de822eb14789138", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,7 +1,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(control_flow_enum)]\n #![feature(try_blocks)]\n #![feature(associated_type_defaults)]"}, {"sha": "d8f201fd0d8fa40b243e26d0f00f3ac8c3c378c5", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -15,7 +15,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(format_args_capture)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n pub use rustc_hir::def::{Namespace, PerNS};"}, {"sha": "13d613132c09d5f1810690d4dcb80d37d9f4e8be", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,6 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n mod dump_visitor;"}, {"sha": "95d17125a11a905c3052ad0cfc7faf2b2fb39ea2", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,6 +1,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(once_cell)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "3dd7ce93deb982f36945e4445f610ff85e40fc95", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -90,7 +90,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(never_type)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(in_band_lifetimes)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "aeb7b149786e40f8e61731b3edb84305a7d99368", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -17,7 +17,7 @@\n #![feature(in_band_lifetimes)]\n #![feature(never_type)]\n #![feature(crate_visibility_modifier)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"512\"] // For rustdoc\n "}, {"sha": "c270a2368110af905ca78190b7d6fbed0d08c8b8", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -64,7 +64,7 @@ This API is completely unstable and subject to change.\n #![feature(in_band_lifetimes)]\n #![feature(is_sorted)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(try_blocks)]\n #![feature(never_type)]\n #![feature(slice_partition_dedup)]"}, {"sha": "f34d25e01fc2ffe5cce3ee5509a781e8c1f31dcb", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -118,7 +118,7 @@\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(auto_traits)]\n #![feature(option_result_unwrap_unchecked)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(pattern)]\n #![feature(ptr_internals)]\n #![feature(rustc_attrs)]"}, {"sha": "f47ad7e6bc214988227094b4b886df2e83aee130", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -126,7 +126,7 @@\n #![feature(exhaustive_patterns)]\n #![feature(no_core)]\n #![feature(auto_traits)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(prelude_import)]\n #![cfg_attr(not(bootstrap), feature(ptr_metadata))]\n #![feature(repr_simd, platform_intrinsics)]"}, {"sha": "8b34fb0505517b7c09d88d14b89dd8d021341db8", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -297,7 +297,7 @@\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(once_cell)]\n #![feature(auto_traits)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(panic_info_message)]\n #![feature(panic_internals)]\n #![feature(panic_unwind)]"}, {"sha": "55c31add26d774f87dfec49785fcc5c10314eabd", "filename": "src/doc/unstable-book/src/language-features/or-patterns.md", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2For-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2For-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2For-patterns.md?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -1,36 +0,0 @@\n-# `or_patterns`\n-\n-The tracking issue for this feature is: [#54883]\n-\n-[#54883]: https://github.com/rust-lang/rust/issues/54883\n-\n-------------------------\n-\n-The `or_pattern` language feature allows `|` to be arbitrarily nested within\n-a pattern, for example, `Some(A(0) | B(1 | 2))` becomes a valid pattern.\n-\n-## Examples\n-\n-```rust,no_run\n-#![feature(or_patterns)]\n-\n-pub enum Foo {\n-    Bar,\n-    Baz,\n-    Quux,\n-}\n-\n-pub fn example(maybe_foo: Option<Foo>) {\n-    match maybe_foo {\n-        Some(Foo::Bar | Foo::Baz) => {\n-            println!(\"The value contained `Bar` or `Baz`\");\n-        }\n-        Some(_) => {\n-            println!(\"The value did not contain `Bar` or `Baz`\");\n-        }\n-        None => {\n-            println!(\"The value was `None`\");\n-        }\n-    }\n-}\n-```"}, {"sha": "dabc21e3a447c66582e13f9d22934d0ccd428014", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -8,7 +8,7 @@\n #![feature(box_syntax)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(test)]\n #![feature(crate_visibility_modifier)]\n #![feature(never_type)]"}, {"sha": "0b8be8385dde41ec2349f99258287b96a9ba6a19", "filename": "src/test/mir-opt/exponential-or.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fmir-opt%2Fexponential-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fmir-opt%2Fexponential-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential-or.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,7 +1,5 @@\n // Test that simple or-patterns don't get expanded to exponentially large CFGs\n \n-#![feature(or_patterns)]\n-\n // EMIT_MIR exponential_or.match_tuple.SimplifyCfg-initial.after.mir\n fn match_tuple(x: (u32, bool, Option<i32>, u32)) -> u32 {\n     match x {"}, {"sha": "aa4f996c4b46a25c31fa2db9403becd1173491b5", "filename": "src/test/mir-opt/exponential_or.match_tuple.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,83 +1,83 @@\n // MIR for `match_tuple` after SimplifyCfg-initial\n \n fn match_tuple(_1: (u32, bool, Option<i32>, u32)) -> u32 {\n-    debug x => _1;                       // in scope 0 at $DIR/exponential-or.rs:6:16: 6:17\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/exponential-or.rs:6:53: 6:56\n-    let mut _2: isize;                   // in scope 0 at $DIR/exponential-or.rs:8:37: 8:48\n-    let mut _3: bool;                    // in scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n-    let mut _4: bool;                    // in scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n-    let mut _5: bool;                    // in scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n-    let mut _6: bool;                    // in scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n-    let _7: u32;                         // in scope 0 at $DIR/exponential-or.rs:8:10: 8:21\n-    let _8: u32;                         // in scope 0 at $DIR/exponential-or.rs:8:57: 8:78\n-    let mut _9: u32;                     // in scope 0 at $DIR/exponential-or.rs:8:83: 8:84\n-    let mut _10: u32;                    // in scope 0 at $DIR/exponential-or.rs:8:87: 8:88\n+    debug x => _1;                       // in scope 0 at $DIR/exponential-or.rs:4:16: 4:17\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/exponential-or.rs:4:53: 4:56\n+    let mut _2: isize;                   // in scope 0 at $DIR/exponential-or.rs:6:37: 6:48\n+    let mut _3: bool;                    // in scope 0 at $DIR/exponential-or.rs:6:70: 6:77\n+    let mut _4: bool;                    // in scope 0 at $DIR/exponential-or.rs:6:70: 6:77\n+    let mut _5: bool;                    // in scope 0 at $DIR/exponential-or.rs:6:62: 6:67\n+    let mut _6: bool;                    // in scope 0 at $DIR/exponential-or.rs:6:62: 6:67\n+    let _7: u32;                         // in scope 0 at $DIR/exponential-or.rs:6:10: 6:21\n+    let _8: u32;                         // in scope 0 at $DIR/exponential-or.rs:6:57: 6:78\n+    let mut _9: u32;                     // in scope 0 at $DIR/exponential-or.rs:6:83: 6:84\n+    let mut _10: u32;                    // in scope 0 at $DIR/exponential-or.rs:6:87: 6:88\n     scope 1 {\n-        debug y => _7;                   // in scope 1 at $DIR/exponential-or.rs:8:10: 8:21\n-        debug z => _8;                   // in scope 1 at $DIR/exponential-or.rs:8:57: 8:78\n+        debug y => _7;                   // in scope 1 at $DIR/exponential-or.rs:6:10: 6:21\n+        debug z => _8;                   // in scope 1 at $DIR/exponential-or.rs:6:57: 6:78\n     }\n \n     bb0: {\n-        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/exponential-or.rs:7:11: 7:12\n-        switchInt((_1.0: u32)) -> [1_u32: bb2, 4_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:8:15: 8:16\n+        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/exponential-or.rs:5:11: 5:12\n+        switchInt((_1.0: u32)) -> [1_u32: bb2, 4_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:6:15: 6:16\n     }\n \n     bb1: {\n-        _0 = const 0_u32;                // scope 0 at $DIR/exponential-or.rs:9:14: 9:15\n-        goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:7:5: 10:6\n+        _0 = const 0_u32;                // scope 0 at $DIR/exponential-or.rs:7:14: 7:15\n+        goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:5:5: 8:6\n     }\n \n     bb2: {\n-        _2 = discriminant((_1.2: std::option::Option<i32>)); // scope 0 at $DIR/exponential-or.rs:8:37: 8:48\n-        switchInt(move _2) -> [0_isize: bb4, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:8:37: 8:48\n+        _2 = discriminant((_1.2: std::option::Option<i32>)); // scope 0 at $DIR/exponential-or.rs:6:37: 6:48\n+        switchInt(move _2) -> [0_isize: bb4, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:6:37: 6:48\n     }\n \n     bb3: {\n-        switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1_i32: bb4, 8_i32: bb4, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:8:42: 8:43\n+        switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1_i32: bb4, 8_i32: bb4, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:6:42: 6:43\n     }\n \n     bb4: {\n-        _5 = Le(const 6_u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n-        switchInt(move _5) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n+        _5 = Le(const 6_u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:6:62: 6:67\n+        switchInt(move _5) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/exponential-or.rs:6:62: 6:67\n     }\n \n     bb5: {\n-        _6 = Le((_1.3: u32), const 9_u32); // scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n-        switchInt(move _6) -> [false: bb6, otherwise: bb8]; // scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n+        _6 = Le((_1.3: u32), const 9_u32); // scope 0 at $DIR/exponential-or.rs:6:62: 6:67\n+        switchInt(move _6) -> [false: bb6, otherwise: bb8]; // scope 0 at $DIR/exponential-or.rs:6:62: 6:67\n     }\n \n     bb6: {\n-        _3 = Le(const 13_u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n-        switchInt(move _3) -> [false: bb1, otherwise: bb7]; // scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n+        _3 = Le(const 13_u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:6:70: 6:77\n+        switchInt(move _3) -> [false: bb1, otherwise: bb7]; // scope 0 at $DIR/exponential-or.rs:6:70: 6:77\n     }\n \n     bb7: {\n-        _4 = Le((_1.3: u32), const 16_u32); // scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n-        switchInt(move _4) -> [false: bb1, otherwise: bb8]; // scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n+        _4 = Le((_1.3: u32), const 16_u32); // scope 0 at $DIR/exponential-or.rs:6:70: 6:77\n+        switchInt(move _4) -> [false: bb1, otherwise: bb8]; // scope 0 at $DIR/exponential-or.rs:6:70: 6:77\n     }\n \n     bb8: {\n-        falseEdge -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/exponential-or.rs:8:9: 8:79\n+        falseEdge -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/exponential-or.rs:6:9: 6:79\n     }\n \n     bb9: {\n-        StorageLive(_7);                 // scope 0 at $DIR/exponential-or.rs:8:10: 8:21\n-        _7 = (_1.0: u32);                // scope 0 at $DIR/exponential-or.rs:8:10: 8:21\n-        StorageLive(_8);                 // scope 0 at $DIR/exponential-or.rs:8:57: 8:78\n-        _8 = (_1.3: u32);                // scope 0 at $DIR/exponential-or.rs:8:57: 8:78\n-        StorageLive(_9);                 // scope 1 at $DIR/exponential-or.rs:8:83: 8:84\n-        _9 = _7;                         // scope 1 at $DIR/exponential-or.rs:8:83: 8:84\n-        StorageLive(_10);                // scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n-        _10 = _8;                        // scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n-        _0 = BitXor(move _9, move _10);  // scope 1 at $DIR/exponential-or.rs:8:83: 8:88\n-        StorageDead(_10);                // scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n-        StorageDead(_9);                 // scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n-        StorageDead(_8);                 // scope 0 at $DIR/exponential-or.rs:8:87: 8:88\n-        StorageDead(_7);                 // scope 0 at $DIR/exponential-or.rs:8:87: 8:88\n-        goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:7:5: 10:6\n+        StorageLive(_7);                 // scope 0 at $DIR/exponential-or.rs:6:10: 6:21\n+        _7 = (_1.0: u32);                // scope 0 at $DIR/exponential-or.rs:6:10: 6:21\n+        StorageLive(_8);                 // scope 0 at $DIR/exponential-or.rs:6:57: 6:78\n+        _8 = (_1.3: u32);                // scope 0 at $DIR/exponential-or.rs:6:57: 6:78\n+        StorageLive(_9);                 // scope 1 at $DIR/exponential-or.rs:6:83: 6:84\n+        _9 = _7;                         // scope 1 at $DIR/exponential-or.rs:6:83: 6:84\n+        StorageLive(_10);                // scope 1 at $DIR/exponential-or.rs:6:87: 6:88\n+        _10 = _8;                        // scope 1 at $DIR/exponential-or.rs:6:87: 6:88\n+        _0 = BitXor(move _9, move _10);  // scope 1 at $DIR/exponential-or.rs:6:83: 6:88\n+        StorageDead(_10);                // scope 1 at $DIR/exponential-or.rs:6:87: 6:88\n+        StorageDead(_9);                 // scope 1 at $DIR/exponential-or.rs:6:87: 6:88\n+        StorageDead(_8);                 // scope 0 at $DIR/exponential-or.rs:6:87: 6:88\n+        StorageDead(_7);                 // scope 0 at $DIR/exponential-or.rs:6:87: 6:88\n+        goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:5:5: 8:6\n     }\n \n     bb10: {\n-        return;                          // scope 0 at $DIR/exponential-or.rs:11:2: 11:2\n+        return;                          // scope 0 at $DIR/exponential-or.rs:9:2: 9:2\n     }\n }"}, {"sha": "b914055813f64ad67e5ff2a604751fb7606fdb00", "filename": "src/test/mir-opt/issues/issue-75439.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fmir-opt%2Fissues%2Fissue-75439.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fmir-opt%2Fissues%2Fissue-75439.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue-75439.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,7 +1,6 @@\n // EMIT_MIR issue_75439.foo.MatchBranchSimplification.diff\n \n #![feature(const_fn_transmute)]\n-#![feature(or_patterns)]\n \n use std::mem::transmute;\n "}, {"sha": "d5edf16525235cd01c53080a3770b8ad7961a0d8", "filename": "src/test/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -2,17 +2,17 @@\n + // MIR for `foo` after MatchBranchSimplification\n   \n   fn foo(_1: [u8; 16]) -> Option<[u8; 4]> {\n-      debug bytes => _1;                   // in scope 0 at $DIR/issue-75439.rs:8:12: 8:17\n-      let mut _0: std::option::Option<[u8; 4]>; // return place in scope 0 at $DIR/issue-75439.rs:8:32: 8:47\n-      let _2: [u32; 4];                    // in scope 0 at $DIR/issue-75439.rs:10:9: 10:15\n-      let mut _3: [u8; 16];                // in scope 0 at $DIR/issue-75439.rs:10:47: 10:52\n-      let mut _5: [u8; 4];                 // in scope 0 at $DIR/issue-75439.rs:13:14: 13:38\n-      let mut _6: u32;                     // in scope 0 at $DIR/issue-75439.rs:13:33: 13:35\n+      debug bytes => _1;                   // in scope 0 at $DIR/issue-75439.rs:7:12: 7:17\n+      let mut _0: std::option::Option<[u8; 4]>; // return place in scope 0 at $DIR/issue-75439.rs:7:32: 7:47\n+      let _2: [u32; 4];                    // in scope 0 at $DIR/issue-75439.rs:9:9: 9:15\n+      let mut _3: [u8; 16];                // in scope 0 at $DIR/issue-75439.rs:9:47: 9:52\n+      let mut _5: [u8; 4];                 // in scope 0 at $DIR/issue-75439.rs:12:14: 12:38\n+      let mut _6: u32;                     // in scope 0 at $DIR/issue-75439.rs:12:33: 12:35\n       scope 1 {\n-          debug dwords => _2;              // in scope 1 at $DIR/issue-75439.rs:10:9: 10:15\n-          let _4: u32;                     // in scope 1 at $DIR/issue-75439.rs:12:27: 12:29\n+          debug dwords => _2;              // in scope 1 at $DIR/issue-75439.rs:9:9: 9:15\n+          let _4: u32;                     // in scope 1 at $DIR/issue-75439.rs:11:27: 11:29\n           scope 3 {\n-              debug ip => _4;              // in scope 3 at $DIR/issue-75439.rs:12:27: 12:29\n+              debug ip => _4;              // in scope 3 at $DIR/issue-75439.rs:11:27: 11:29\n               scope 4 {\n               }\n           }\n@@ -21,67 +21,67 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-75439.rs:10:9: 10:15\n-          StorageLive(_3);                 // scope 2 at $DIR/issue-75439.rs:10:47: 10:52\n-          _3 = _1;                         // scope 2 at $DIR/issue-75439.rs:10:47: 10:52\n-          _2 = transmute::<[u8; 16], [u32; 4]>(move _3) -> bb1; // scope 2 at $DIR/issue-75439.rs:10:37: 10:53\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-75439.rs:9:9: 9:15\n+          StorageLive(_3);                 // scope 2 at $DIR/issue-75439.rs:9:47: 9:52\n+          _3 = _1;                         // scope 2 at $DIR/issue-75439.rs:9:47: 9:52\n+          _2 = transmute::<[u8; 16], [u32; 4]>(move _3) -> bb1; // scope 2 at $DIR/issue-75439.rs:9:37: 9:53\n                                            // mir::Constant\n-                                           // + span: $DIR/issue-75439.rs:10:37: 10:46\n+                                           // + span: $DIR/issue-75439.rs:9:37: 9:46\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn([u8; 16]) -> [u32; 4] {std::intrinsics::transmute::<[u8; 16], [u32; 4]>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 2 at $DIR/issue-75439.rs:10:52: 10:53\n-          switchInt(_2[0 of 4]) -> [0_u32: bb2, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:12:13: 12:14\n+          StorageDead(_3);                 // scope 2 at $DIR/issue-75439.rs:9:52: 9:53\n+          switchInt(_2[0 of 4]) -> [0_u32: bb2, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:11:13: 11:14\n       }\n   \n       bb2: {\n-          switchInt(_2[1 of 4]) -> [0_u32: bb3, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:12:16: 12:17\n+          switchInt(_2[1 of 4]) -> [0_u32: bb3, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:11:16: 11:17\n       }\n   \n       bb3: {\n-          switchInt(_2[2 of 4]) -> [0_u32: bb6, 4294901760_u32: bb7, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:12:19: 12:20\n+          switchInt(_2[2 of 4]) -> [0_u32: bb6, 4294901760_u32: bb7, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:11:19: 11:20\n       }\n   \n       bb4: {\n-          discriminant(_0) = 0;            // scope 1 at $DIR/issue-75439.rs:15:9: 15:13\n-          goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:12:5: 16:6\n+          discriminant(_0) = 0;            // scope 1 at $DIR/issue-75439.rs:14:9: 14:13\n+          goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:11:5: 15:6\n       }\n   \n       bb5: {\n-          StorageLive(_5);                 // scope 3 at $DIR/issue-75439.rs:13:14: 13:38\n-          StorageLive(_6);                 // scope 4 at $DIR/issue-75439.rs:13:33: 13:35\n-          _6 = _4;                         // scope 4 at $DIR/issue-75439.rs:13:33: 13:35\n-          _5 = transmute::<u32, [u8; 4]>(move _6) -> bb8; // scope 4 at $DIR/issue-75439.rs:13:23: 13:36\n+          StorageLive(_5);                 // scope 3 at $DIR/issue-75439.rs:12:14: 12:38\n+          StorageLive(_6);                 // scope 4 at $DIR/issue-75439.rs:12:33: 12:35\n+          _6 = _4;                         // scope 4 at $DIR/issue-75439.rs:12:33: 12:35\n+          _5 = transmute::<u32, [u8; 4]>(move _6) -> bb8; // scope 4 at $DIR/issue-75439.rs:12:23: 12:36\n                                            // mir::Constant\n-                                           // + span: $DIR/issue-75439.rs:13:23: 13:32\n+                                           // + span: $DIR/issue-75439.rs:12:23: 12:32\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32) -> [u8; 4] {std::intrinsics::transmute::<u32, [u8; 4]>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb6: {\n-          StorageLive(_4);                 // scope 1 at $DIR/issue-75439.rs:12:27: 12:29\n-          _4 = _2[3 of 4];                 // scope 1 at $DIR/issue-75439.rs:12:27: 12:29\n-          goto -> bb5;                     // scope 1 at $DIR/issue-75439.rs:12:5: 16:6\n+          StorageLive(_4);                 // scope 1 at $DIR/issue-75439.rs:11:27: 11:29\n+          _4 = _2[3 of 4];                 // scope 1 at $DIR/issue-75439.rs:11:27: 11:29\n+          goto -> bb5;                     // scope 1 at $DIR/issue-75439.rs:11:5: 15:6\n       }\n   \n       bb7: {\n-          StorageLive(_4);                 // scope 1 at $DIR/issue-75439.rs:12:27: 12:29\n-          _4 = _2[3 of 4];                 // scope 1 at $DIR/issue-75439.rs:12:27: 12:29\n-          goto -> bb5;                     // scope 1 at $DIR/issue-75439.rs:12:5: 16:6\n+          StorageLive(_4);                 // scope 1 at $DIR/issue-75439.rs:11:27: 11:29\n+          _4 = _2[3 of 4];                 // scope 1 at $DIR/issue-75439.rs:11:27: 11:29\n+          goto -> bb5;                     // scope 1 at $DIR/issue-75439.rs:11:5: 15:6\n       }\n   \n       bb8: {\n-          StorageDead(_6);                 // scope 4 at $DIR/issue-75439.rs:13:35: 13:36\n-          ((_0 as Some).0: [u8; 4]) = move _5; // scope 3 at $DIR/issue-75439.rs:13:9: 13:39\n-          discriminant(_0) = 1;            // scope 3 at $DIR/issue-75439.rs:13:9: 13:39\n-          StorageDead(_5);                 // scope 3 at $DIR/issue-75439.rs:13:38: 13:39\n-          StorageDead(_4);                 // scope 1 at $DIR/issue-75439.rs:14:5: 14:6\n-          goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:12:5: 16:6\n+          StorageDead(_6);                 // scope 4 at $DIR/issue-75439.rs:12:35: 12:36\n+          ((_0 as Some).0: [u8; 4]) = move _5; // scope 3 at $DIR/issue-75439.rs:12:9: 12:39\n+          discriminant(_0) = 1;            // scope 3 at $DIR/issue-75439.rs:12:9: 12:39\n+          StorageDead(_5);                 // scope 3 at $DIR/issue-75439.rs:12:38: 12:39\n+          StorageDead(_4);                 // scope 1 at $DIR/issue-75439.rs:13:5: 13:6\n+          goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:11:5: 15:6\n       }\n   \n       bb9: {\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-75439.rs:17:1: 17:2\n-          return;                          // scope 0 at $DIR/issue-75439.rs:17:2: 17:2\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-75439.rs:16:1: 16:2\n+          return;                          // scope 0 at $DIR/issue-75439.rs:16:2: 16:2\n       }\n   }\n   "}, {"sha": "2839a65deaa4bd4dd0c477cbb245feb0c346bda5", "filename": "src/test/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,6 +1,5 @@\n // Tests using a combination of pattern features has the expected borrow checking behavior\n #![feature(bindings_after_at)]\n-#![feature(or_patterns)]\n #![feature(box_patterns)]\n \n enum Test {"}, {"sha": "2204dcabc9e474f5f5a5249926efc79df63c52f7", "filename": "src/test/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,5 +1,5 @@\n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:38:9\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:37:9\n    |\n LL |         ref foo @ [.., ref mut bar] => (),\n    |         -------^^^^^^^^-----------^\n@@ -8,7 +8,7 @@ LL |         ref foo @ [.., ref mut bar] => (),\n    |         immutable borrow, by `foo`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:122:9\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:121:9\n    |\n LL |         ref foo @ Some(box ref mut s) => (),\n    |         -------^^^^^^^^^^^^---------^\n@@ -17,7 +17,7 @@ LL |         ref foo @ Some(box ref mut s) => (),\n    |         immutable borrow, by `foo`, occurs here\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:20:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:19:5\n    |\n LL | fn bindings_after_at_slice_patterns_move_binding(x: [String; 4]) {\n    |                                                  - move occurs because `x` has type `[String; 4]`, which does not implement the `Copy` trait\n@@ -29,7 +29,7 @@ LL |     &x;\n    |     ^^ value borrowed here after move\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:30:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:29:5\n    |\n LL |         ref mut foo @ [.., _] => Some(foo),\n    |         --------------------- mutable borrow occurs here\n@@ -41,7 +41,7 @@ LL |     drop(r);\n    |          - mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:52:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:51:5\n    |\n LL |         [ref foo @ .., ref bar] => Some(foo),\n    |          ------------ immutable borrow occurs here\n@@ -53,7 +53,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:64:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:63:5\n    |\n LL |         ref foo @ [.., ref bar] => Some(foo),\n    |         ----------------------- immutable borrow occurs here\n@@ -65,7 +65,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:78:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:77:5\n    |\n LL | fn bindings_after_at_or_patterns_move(x: Option<Test>) {\n    |                                       - move occurs because `x` has type `Option<Test>`, which does not implement the `Copy` trait\n@@ -80,7 +80,7 @@ LL |     &x;\n    |     ^^ value borrowed here after move\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:88:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:87:5\n    |\n LL |         ref foo @ Some(Test::Foo | Test::Bar) => Some(foo),\n    |         ------------------------------------- immutable borrow occurs here\n@@ -92,7 +92,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:100:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:99:5\n    |\n LL |         ref mut foo @ Some(Test::Foo | Test::Bar) => Some(foo),\n    |         ----------------------------------------- mutable borrow occurs here\n@@ -104,7 +104,7 @@ LL |     drop(r);\n    |          - mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:114:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:113:5\n    |\n LL |         ref foo @ Some(box ref s) => Some(foo),\n    |         ------------------------- immutable borrow occurs here\n@@ -116,7 +116,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:136:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:135:5\n    |\n LL | fn bindings_after_at_slice_patterns_or_patterns_moves(x: [Option<Test>; 4]) {\n    |                                                       - move occurs because `x` has type `[Option<Test>; 4]`, which does not implement the `Copy` trait\n@@ -131,7 +131,7 @@ LL |     &x;\n    |     ^^ value borrowed here after move\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:146:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:145:5\n    |\n LL |         ref a @ [ref b @ .., Some(Test::Foo | Test::Bar)] => Some(a),\n    |         ------------------------------------------------- immutable borrow occurs here\n@@ -143,7 +143,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:158:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:157:5\n    |\n LL |         ref a @ [ref b @ .., Some(Test::Foo | Test::Bar)] => Some(b),\n    |                  ---------- immutable borrow occurs here\n@@ -155,7 +155,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:172:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:171:5\n    |\n LL |         [_, ref a @ Some(box ref b), ..] => Some(a),\n    |             ----------------------- immutable borrow occurs here\n@@ -167,7 +167,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:188:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:187:5\n    |\n LL |         [_, ref a @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n    |             ------------------------------------------- immutable borrow occurs here\n@@ -179,7 +179,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:202:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:201:5\n    |\n LL |         [_, ref mut a @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n    |             ----------------------------------------------- mutable borrow occurs here\n@@ -191,7 +191,7 @@ LL |     drop(r);\n    |          - mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:216:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:215:5\n    |\n LL |         ref a @ [_, ref b @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n    |         ------------------------------------------------------------ immutable borrow occurs here"}, {"sha": "aeab3b92e9840703371ed766d96f541a56fab01d", "filename": "src/test/ui/borrowck/or-patterns.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fborrowck%2For-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fborrowck%2For-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2For-patterns.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,8 +1,6 @@\n // Test that borrow check considers all choices in an or pattern, even the\n // unreachable ones.\n \n-#![feature(or_patterns)]\n-\n fn or_pattern_moves_all(x: ((String, String),)) {\n     match x {\n         ((y, _) | (_, y),) => (),"}, {"sha": "dd5797c3f79cc17a02449842b54b771ea82c928e", "filename": "src/test/ui/borrowck/or-patterns.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fborrowck%2For-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fborrowck%2For-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2For-patterns.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: borrow of moved value: `x.0.0`\n-  --> $DIR/or-patterns.rs:10:5\n+  --> $DIR/or-patterns.rs:8:5\n    |\n LL |         ((y, _) | (_, y),) => (),\n    |           - value moved here\n@@ -10,7 +10,7 @@ LL |     &x.0 .0;\n    = note: move occurs because `x.0.0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x.0.1`\n-  --> $DIR/or-patterns.rs:12:5\n+  --> $DIR/or-patterns.rs:10:5\n    |\n LL |         ((y, _) | (_, y),) => (),\n    |                       - value moved here\n@@ -21,7 +21,7 @@ LL |     &x.0 .1;\n    = note: move occurs because `x.0.1` has type `String`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `x.0.0` as mutable because it is also borrowed as immutable\n-  --> $DIR/or-patterns.rs:20:5\n+  --> $DIR/or-patterns.rs:18:5\n    |\n LL |         ((ref y, _) | (_, ref y),) => y,\n    |           ----- immutable borrow occurs here\n@@ -33,7 +33,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x.0.1` as mutable because it is also borrowed as immutable\n-  --> $DIR/or-patterns.rs:22:5\n+  --> $DIR/or-patterns.rs:20:5\n    |\n LL |         ((ref y, _) | (_, ref y),) => y,\n    |                           ----- immutable borrow occurs here\n@@ -45,7 +45,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x.0.0` as immutable because it is also borrowed as mutable\n-  --> $DIR/or-patterns.rs:31:5\n+  --> $DIR/or-patterns.rs:29:5\n    |\n LL |         ((ref mut y, _) | (_, ref mut y),) => y,\n    |           --------- mutable borrow occurs here\n@@ -57,7 +57,7 @@ LL |     drop(r);\n    |          - mutable borrow later used here\n \n error[E0502]: cannot borrow `x.0.1` as immutable because it is also borrowed as mutable\n-  --> $DIR/or-patterns.rs:33:5\n+  --> $DIR/or-patterns.rs:31:5\n    |\n LL |         ((ref mut y, _) | (_, ref mut y),) => y,\n    |                               --------- mutable borrow occurs here\n@@ -69,7 +69,7 @@ LL |     drop(r);\n    |          - mutable borrow later used here\n \n error[E0382]: borrow of moved value: `x.0.0`\n-  --> $DIR/or-patterns.rs:40:5\n+  --> $DIR/or-patterns.rs:38:5\n    |\n LL |     let ((y, _) | (_, y),) = x;\n    |           - value moved here\n@@ -79,7 +79,7 @@ LL |     &x.0 .0;\n    = note: move occurs because `x.0.0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x.0.1`\n-  --> $DIR/or-patterns.rs:42:5\n+  --> $DIR/or-patterns.rs:40:5\n    |\n LL |     let ((y, _) | (_, y),) = x;\n    |                       - value moved here\n@@ -90,7 +90,7 @@ LL |     &x.0 .1;\n    = note: move occurs because `x.0.1` has type `String`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `x.0.0` as mutable because it is also borrowed as immutable\n-  --> $DIR/or-patterns.rs:48:5\n+  --> $DIR/or-patterns.rs:46:5\n    |\n LL |     let ((ref r, _) | (_, ref r),) = x;\n    |           ----- immutable borrow occurs here\n@@ -101,7 +101,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x.0.1` as mutable because it is also borrowed as immutable\n-  --> $DIR/or-patterns.rs:50:5\n+  --> $DIR/or-patterns.rs:48:5\n    |\n LL |     let ((ref r, _) | (_, ref r),) = x;\n    |                           ----- immutable borrow occurs here\n@@ -113,7 +113,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x.0.0` as immutable because it is also borrowed as mutable\n-  --> $DIR/or-patterns.rs:57:5\n+  --> $DIR/or-patterns.rs:55:5\n    |\n LL |     let ((ref mut r, _) | (_, ref mut r),) = x;\n    |           --------- mutable borrow occurs here\n@@ -124,7 +124,7 @@ LL |     drop(r);\n    |          - mutable borrow later used here\n \n error[E0502]: cannot borrow `x.0.1` as immutable because it is also borrowed as mutable\n-  --> $DIR/or-patterns.rs:59:5\n+  --> $DIR/or-patterns.rs:57:5\n    |\n LL |     let ((ref mut r, _) | (_, ref mut r),) = x;\n    |                               --------- mutable borrow occurs here"}, {"sha": "d05d6d120b08477e4d0eb61d6b959e895e80a4a9", "filename": "src/test/ui/did_you_mean/issue-48492-tuple-destructure-missing-parens.stderr", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -47,19 +47,46 @@ error: unexpected `,` in pattern\n   --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:67:10\n    |\n LL |     for x, _barr_body in women.iter().map(|woman| woman.allosomes.clone()) {\n-   |         -^----------- help: try adding parentheses to match on a tuple: `(x, _barr_body)`\n+   |          ^\n+   |\n+help: try adding parentheses to match on a tuple...\n+   |\n+LL |     for (x, _barr_body) in women.iter().map(|woman| woman.allosomes.clone()) {\n+   |         ^^^^^^^^^^^^^^^\n+help: ...or a vertical bar to match on multiple alternatives\n+   |\n+LL |     for x | _barr_body in women.iter().map(|woman| woman.allosomes.clone()) {\n+   |         ^^^^^^^^^^^^^^\n \n error: unexpected `,` in pattern\n   --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:75:10\n    |\n LL |     for x, y @ Allosome::Y(_) in men.iter().map(|man| man.allosomes.clone()) {\n-   |         -^------------------- help: try adding parentheses to match on a tuple: `(x, y @ Allosome::Y(_))`\n+   |          ^\n+   |\n+help: try adding parentheses to match on a tuple...\n+   |\n+LL |     for (x, y @ Allosome::Y(_)) in men.iter().map(|man| man.allosomes.clone()) {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+help: ...or a vertical bar to match on multiple alternatives\n+   |\n+LL |     for x | y @ Allosome::Y(_) in men.iter().map(|man| man.allosomes.clone()) {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error: unexpected `,` in pattern\n   --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:84:14\n    |\n LL |     let women, men: (Vec<Genome>, Vec<Genome>) = genomes.iter().cloned()\n-   |         -----^---- help: try adding parentheses to match on a tuple: `(women, men)`\n+   |              ^\n+   |\n+help: try adding parentheses to match on a tuple...\n+   |\n+LL |     let (women, men): (Vec<Genome>, Vec<Genome>) = genomes.iter().cloned()\n+   |         ^^^^^^^^^^^^\n+help: ...or a vertical bar to match on multiple alternatives\n+   |\n+LL |     let women | men: (Vec<Genome>, Vec<Genome>) = genomes.iter().cloned()\n+   |         ^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "0b3fe9371f7758a63a2fbd098d3007583031f0e0", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.fixed?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n \n #![feature(box_patterns, stmt_expr_attributes)]\n-#![feature(or_patterns)]\n \n #![allow(\n     dead_code,"}, {"sha": "1e78ec5f7d95de02d7483ffe4e20097066a1ed12", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n \n #![feature(box_patterns, stmt_expr_attributes)]\n-#![feature(or_patterns)]\n \n #![allow(\n     dead_code,"}, {"sha": "e6d0a359c5ca7d857e935ca3004cc4039e54b4c5", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,149 +1,149 @@\n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:17:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:16:9\n    |\n LL |     let (a) = 0;\n    |         ^^^ help: remove these parentheses\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-54538-unused-parens-lint.rs:14:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:13:9\n    |\n LL | #![deny(unused_parens)]\n    |         ^^^^^^^^^^^^^\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:18:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:17:9\n    |\n LL |     for (a) in 0..1 {}\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:19:12\n+  --> $DIR/issue-54538-unused-parens-lint.rs:18:12\n    |\n LL |     if let (a) = 0 {}\n    |            ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:20:15\n+  --> $DIR/issue-54538-unused-parens-lint.rs:19:15\n    |\n LL |     while let (a) = 0 {}\n    |               ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:21:12\n+  --> $DIR/issue-54538-unused-parens-lint.rs:20:12\n    |\n LL |     fn foo((a): u8) {}\n    |            ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:22:14\n+  --> $DIR/issue-54538-unused-parens-lint.rs:21:14\n    |\n LL |     let _ = |(a): u8| 0;\n    |              ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:50:12\n+  --> $DIR/issue-54538-unused-parens-lint.rs:49:12\n    |\n LL |     if let (0 | 1) = 0 {}\n    |            ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:51:13\n+  --> $DIR/issue-54538-unused-parens-lint.rs:50:13\n    |\n LL |     if let ((0 | 1),) = (0,) {}\n    |             ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:52:13\n+  --> $DIR/issue-54538-unused-parens-lint.rs:51:13\n    |\n LL |     if let [(0 | 1)] = [0] {}\n    |             ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:53:16\n+  --> $DIR/issue-54538-unused-parens-lint.rs:52:16\n    |\n LL |     if let 0 | (1 | 2) = 0 {}\n    |                ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:55:15\n+  --> $DIR/issue-54538-unused-parens-lint.rs:54:15\n    |\n LL |     if let TS((0 | 1)) = TS(0) {}\n    |               ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:57:20\n+  --> $DIR/issue-54538-unused-parens-lint.rs:56:20\n    |\n LL |     if let NS { f: (0 | 1) } = (NS { f: 0 }) {}\n    |                    ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:67:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:66:9\n    |\n LL |         (_) => {}\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:68:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:67:9\n    |\n LL |         (y) => {}\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:69:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:68:9\n    |\n LL |         (ref r) => {}\n    |         ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:70:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:69:9\n    |\n LL |         (e @ 1...2) => {}\n    |         ^^^^^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:76:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:75:9\n    |\n LL |         (e @ &(1...2)) => {}\n    |         ^^^^^^^^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:77:10\n+  --> $DIR/issue-54538-unused-parens-lint.rs:76:10\n    |\n LL |         &(_) => {}\n    |          ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:88:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:87:9\n    |\n LL |         (_) => {}\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:89:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:88:9\n    |\n LL |         (y) => {}\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:90:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:89:9\n    |\n LL |         (ref r) => {}\n    |         ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:91:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:90:9\n    |\n LL |         (e @ 1..=2) => {}\n    |         ^^^^^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:97:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:96:9\n    |\n LL |         (e @ &(1..=2)) => {}\n    |         ^^^^^^^^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:98:10\n+  --> $DIR/issue-54538-unused-parens-lint.rs:97:10\n    |\n LL |         &(_) => {}\n    |          ^^^ help: remove these parentheses"}, {"sha": "e3631d014d63b1150188ccb4efeb95bc053302b2", "filename": "src/test/ui/lint/issue-67691-unused-field-in-or-pattern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,7 +1,6 @@\n // FIXME: should be run-rustfix, but rustfix doesn't currently support multipart suggestions, see\n // #53934\n \n-#![feature(or_patterns)]\n #![deny(unused)]\n \n pub enum MyEnum {"}, {"sha": "8aefe243a944b497575cd0418829bd07dc6f658a", "filename": "src/test/ui/lint/issue-67691-unused-field-in-or-pattern.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,11 +1,11 @@\n error: unused variable: `j`\n-  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:21:16\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:20:16\n    |\n LL |         A { i, j } | B { i, j } => {\n    |                ^            ^\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:5:9\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:4:9\n    |\n LL | #![deny(unused)]\n    |         ^^^^^^\n@@ -16,7 +16,7 @@ LL |         A { i, j: _ } | B { i, j: _ } => {\n    |                ^^^^            ^^^^\n \n error: unused variable: `j`\n-  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:31:16\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:30:16\n    |\n LL |         A { i, ref j } | B { i, ref j } => {\n    |                ^^^^^            ^^^^^\n@@ -27,7 +27,7 @@ LL |         A { i, j: _ } | B { i, j: _ } => {\n    |                ^^^^            ^^^^\n \n error: unused variable: `j`\n-  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:41:21\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:40:21\n    |\n LL |         Some(A { i, j } | B { i, j }) => {\n    |                     ^            ^\n@@ -38,7 +38,7 @@ LL |         Some(A { i, j: _ } | B { i, j: _ }) => {\n    |                     ^^^^            ^^^^\n \n error: unused variable: `j`\n-  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:53:21\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:52:21\n    |\n LL |         Some(A { i, ref j } | B { i, ref j }) => {\n    |                     ^^^^^            ^^^^^\n@@ -49,7 +49,7 @@ LL |         Some(A { i, j: _ } | B { i, j: _ }) => {\n    |                     ^^^^            ^^^^\n \n error: unused variable: `i`\n-  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:63:24\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:62:24\n    |\n LL |         MixedEnum::A { i } | MixedEnum::B(i) => {\n    |                        ^                  ^\n@@ -60,7 +60,7 @@ LL |         MixedEnum::A { i: _ } | MixedEnum::B(_) => {\n    |                        ^^^^                  ^\n \n error: unused variable: `i`\n-  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:71:24\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:70:24\n    |\n LL |         MixedEnum::A { ref i } | MixedEnum::B(ref i) => {\n    |                        ^^^^^                  ^^^^^"}, {"sha": "b8f9f12f413802effc5c1cba735890bc7007474e", "filename": "src/test/ui/macros/edition-macro-pats.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fmacros%2Fedition-macro-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fmacros%2Fedition-macro-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fedition-macro-pats.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(or_patterns)]\n #![feature(edition_macro_pats)]\n \n macro_rules! foo {"}, {"sha": "c13cace76008687c0f039ad4a3a65d72bb153fdb", "filename": "src/test/ui/match/issue-72680.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fmatch%2Fissue-72680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fmatch%2Fissue-72680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-72680.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(or_patterns)]\n-\n fn main() {\n     assert!(f(\"\", 0));\n     assert!(f(\"a\", 1));"}, {"sha": "65c25293d9eccb4257501a4720871125419ad872", "filename": "src/test/ui/or-patterns/already-bound-name.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,8 +1,6 @@\n // This test ensures that the \"already bound identifier in a product pattern\"\n // correctly accounts for or-patterns.\n \n-#![feature(or_patterns)]\n-\n enum E<T> { A(T, T), B(T) }\n \n use E::*;"}, {"sha": "66112165622b95ff35a27d74a4fdf908cf172567", "filename": "src/test/ui/or-patterns/already-bound-name.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,89 +1,89 @@\n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/already-bound-name.rs:11:13\n+  --> $DIR/already-bound-name.rs:9:13\n    |\n LL |     let (a, a) = (0, 1); // Standard duplication without an or-pattern.\n    |             ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/already-bound-name.rs:14:15\n+  --> $DIR/already-bound-name.rs:12:15\n    |\n LL |     let (a, A(a, _) | B(a)) = (0, A(1, 2));\n    |               ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/already-bound-name.rs:14:25\n+  --> $DIR/already-bound-name.rs:12:25\n    |\n LL |     let (a, A(a, _) | B(a)) = (0, A(1, 2));\n    |                         ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/already-bound-name.rs:18:26\n+  --> $DIR/already-bound-name.rs:16:26\n    |\n LL |     let (A(a, _) | B(a), a) = (A(0, 1), 2);\n    |                          ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/already-bound-name.rs:21:15\n+  --> $DIR/already-bound-name.rs:19:15\n    |\n LL |     let (A(a, a) | B(a)) = A(0, 1);\n    |               ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/already-bound-name.rs:24:22\n+  --> $DIR/already-bound-name.rs:22:22\n    |\n LL |     let (B(a) | A(a, a)) = A(0, 1);\n    |                      ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/already-bound-name.rs:28:21\n+  --> $DIR/already-bound-name.rs:26:21\n    |\n LL |         B(a) | A(a, a) => {} // Let's ensure `match` has no funny business.\n    |                     ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/already-bound-name.rs:32:37\n+  --> $DIR/already-bound-name.rs:30:37\n    |\n LL |     let (B(A(a, _) | B(a)) | A(a, A(a, _) | B(a))) = B(B(1));\n    |                                     ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/already-bound-name.rs:32:47\n+  --> $DIR/already-bound-name.rs:30:47\n    |\n LL |     let (B(A(a, _) | B(a)) | A(a, A(a, _) | B(a))) = B(B(1));\n    |                                               ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/already-bound-name.rs:37:37\n+  --> $DIR/already-bound-name.rs:35:37\n    |\n LL |     let (B(_) | A(A(a, _) | B(a), A(a, _) | B(a))) = B(B(1));\n    |                                     ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/already-bound-name.rs:37:47\n+  --> $DIR/already-bound-name.rs:35:47\n    |\n LL |     let (B(_) | A(A(a, _) | B(a), A(a, _) | B(a))) = B(B(1));\n    |                                               ^ used in a pattern more than once\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/already-bound-name.rs:37:10\n+  --> $DIR/already-bound-name.rs:35:10\n    |\n LL |     let (B(_) | A(A(a, _) | B(a), A(a, _) | B(a))) = B(B(1));\n    |          ^^^^ pattern doesn't bind `a`        - variable not in all patterns\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/already-bound-name.rs:42:50\n+  --> $DIR/already-bound-name.rs:40:50\n    |\n LL |     let (B(A(a, _) | B(a)) | A(A(a, _) | B(a), A(a, _) | B(a))) = B(B(1));\n    |                                                  ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/already-bound-name.rs:42:60\n+  --> $DIR/already-bound-name.rs:40:60\n    |\n LL |     let (B(A(a, _) | B(a)) | A(A(a, _) | B(a), A(a, _) | B(a))) = B(B(1));\n    |                                                            ^ used in a pattern more than once\n \n error[E0308]: mismatched types\n-  --> $DIR/already-bound-name.rs:32:32\n+  --> $DIR/already-bound-name.rs:30:32\n    |\n LL |     let (B(A(a, _) | B(a)) | A(a, A(a, _) | B(a))) = B(B(1));\n    |              -                 ^                     ------- this expression has type `E<E<{integer}>>`"}, {"sha": "674fbc3cc99fcb87f7730c4980d7837906099746", "filename": "src/test/ui/or-patterns/basic-switch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fbasic-switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fbasic-switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fbasic-switch.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -3,8 +3,6 @@\n \n // run-pass\n \n-#![feature(or_patterns)]\n-\n #[derive(Debug)]\n enum Test {\n     Foo,"}, {"sha": "adb902caf011d45b3399866dba12abca3afc9066", "filename": "src/test/ui/or-patterns/basic-switchint.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fbasic-switchint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fbasic-switchint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fbasic-switchint.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -3,8 +3,6 @@\n \n // run-pass\n \n-#![feature(or_patterns)]\n-\n #[derive(Debug, PartialEq)]\n enum MatchArm {\n     Arm(usize),"}, {"sha": "3406d5197c4975e370f9c82373322ad96aecdf59", "filename": "src/test/ui/or-patterns/bindings-runpass-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fbindings-runpass-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fbindings-runpass-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fbindings-runpass-1.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(or_patterns)]\n-\n fn two_bindings(x: &((bool, bool), u8)) -> u8 {\n     match x {\n         &((true, y) | (y, true), z @ (0 | 4)) => (y as u8) + z,"}, {"sha": "5b9bb748c7cee68594eb28e46dd270e0f73a7746", "filename": "src/test/ui/or-patterns/bindings-runpass-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fbindings-runpass-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fbindings-runpass-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fbindings-runpass-2.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(or_patterns)]\n-\n fn or_at(x: Result<u32, u32>) -> u32 {\n     match x {\n         Ok(x @ 4) | Err(x @ (6 | 8)) => x,"}, {"sha": "73051401c181e5d6d5ea7a0220c914a310ffa6ef", "filename": "src/test/ui/or-patterns/box-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fbox-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fbox-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fbox-patterns.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -2,7 +2,6 @@\n \n // run-pass\n \n-#![feature(or_patterns)]\n #![feature(box_patterns)]\n \n #[derive(Debug, PartialEq)]"}, {"sha": "ecae1d8a2732a986e9edc2c8807addcdb8e585e1", "filename": "src/test/ui/or-patterns/consistent-bindings.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -4,8 +4,6 @@\n \n // check-pass\n \n-#![feature(or_patterns)]\n-\n fn main() {\n     // One level:\n     let (Ok(a) | Err(a)) = Ok(0);"}, {"sha": "ca512ac7119055017538f31f7a89b0c3905d1ad1", "filename": "src/test/ui/or-patterns/const-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fconst-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fconst-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fconst-fn.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-#![feature(or_patterns)]\n \n const fn foo((Ok(a) | Err(a)): Result<i32, i32>) {\n     let x = Ok(3);"}, {"sha": "5999e04e0e2dd30c963ba66008b45f71d5e098b2", "filename": "src/test/ui/or-patterns/exhaustiveness-non-exhaustive.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,4 +1,3 @@\n-#![feature(or_patterns)]\n #![deny(unreachable_patterns)]\n \n // We wrap patterns in a tuple because top-level or-patterns were special-cased."}, {"sha": "44f334eee9386cf99d12306e276f32c53a10526c", "filename": "src/test/ui/or-patterns/exhaustiveness-non-exhaustive.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `(2_u8..=u8::MAX, _)` not covered\n-  --> $DIR/exhaustiveness-non-exhaustive.rs:6:11\n+  --> $DIR/exhaustiveness-non-exhaustive.rs:5:11\n    |\n LL |     match (0u8, 0u8) {\n    |           ^^^^^^^^^^ pattern `(2_u8..=u8::MAX, _)` not covered\n@@ -8,7 +8,7 @@ LL |     match (0u8, 0u8) {\n    = note: the matched value is of type `(u8, u8)`\n \n error[E0004]: non-exhaustive patterns: `((4_u8..=u8::MAX))` not covered\n-  --> $DIR/exhaustiveness-non-exhaustive.rs:10:11\n+  --> $DIR/exhaustiveness-non-exhaustive.rs:9:11\n    |\n LL |     match ((0u8,),) {\n    |           ^^^^^^^^^ pattern `((4_u8..=u8::MAX))` not covered\n@@ -17,7 +17,7 @@ LL |     match ((0u8,),) {\n    = note: the matched value is of type `((u8,),)`\n \n error[E0004]: non-exhaustive patterns: `(Some(2_u8..=u8::MAX))` not covered\n-  --> $DIR/exhaustiveness-non-exhaustive.rs:14:11\n+  --> $DIR/exhaustiveness-non-exhaustive.rs:13:11\n    |\n LL |     match (Some(0u8),) {\n    |           ^^^^^^^^^^^^ pattern `(Some(2_u8..=u8::MAX))` not covered"}, {"sha": "e8c8a0e7ba52a26f8b4a0e29cdc48f1b000ab710", "filename": "src/test/ui/or-patterns/exhaustiveness-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,4 +1,3 @@\n-#![feature(or_patterns)]\n #![deny(unreachable_patterns)]\n \n // check-pass"}, {"sha": "8429799cabf155b3f76e999a866bcaafe51e2938", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,4 +1,3 @@\n-#![feature(or_patterns)]\n #![deny(unreachable_patterns)]\n \n // We wrap patterns in a tuple because top-level or-patterns were special-cased."}, {"sha": "a84681e0056f01e0eda5ab3ee44feedb4dc8162f", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,138 +1,138 @@\n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:8:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:7:9\n    |\n LL |         (1,) => {}\n    |         ^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:2:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:1:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:13:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:12:9\n    |\n LL |         (2,) => {}\n    |         ^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:19:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:18:9\n    |\n LL |         (1 | 2,) => {}\n    |         ^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:24:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:23:9\n    |\n LL |         (1, 3) => {}\n    |         ^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:25:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:24:9\n    |\n LL |         (1, 4) => {}\n    |         ^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:26:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:25:9\n    |\n LL |         (2, 4) => {}\n    |         ^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:27:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:26:9\n    |\n LL |         (2 | 1, 4) => {}\n    |         ^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:29:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:28:9\n    |\n LL |         (1, 4 | 5) => {}\n    |         ^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:37:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:36:9\n    |\n LL |         (Some(1),) => {}\n    |         ^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:38:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:37:9\n    |\n LL |         (None,) => {}\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:43:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:42:9\n    |\n LL |         ((1..=4,),) => {}\n    |         ^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:48:14\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:47:14\n    |\n LL |         (1 | 1,) => {}\n    |              ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:52:19\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:51:19\n    |\n LL |         (0 | 1) | 1 => {}\n    |                   ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:58:14\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:57:14\n    |\n LL |         0 | (0 | 0) => {}\n    |              ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:58:18\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:57:18\n    |\n LL |         0 | (0 | 0) => {}\n    |                  ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:66:13\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:65:13\n    |\n LL | /             Some(\n LL | |                 0 | 0) => {}\n    | |______________________^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:72:15\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:71:15\n    |\n LL |             | 0\n    |               ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:74:15\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:73:15\n    |\n LL |             | 0] => {}\n    |               ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:82:10\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:81:10\n    |\n LL |         [1\n    |          ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:94:10\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:93:10\n    |\n LL |         [true\n    |          ^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:101:36\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:100:36\n    |\n LL |         (true | false, None | Some(true\n    |                                    ^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:106:14\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:105:14\n    |\n LL |             (true\n    |              ^^^^\n@@ -143,25 +143,25 @@ LL |         (true | false, None | Some(t_or_f!())) => {}\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:117:14\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:116:14\n    |\n LL |         Some(0\n    |              ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:136:19\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:135:19\n    |\n LL |                 | false) => {}\n    |                   ^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:144:15\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:143:15\n    |\n LL |             | true) => {}\n    |               ^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:150:15\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:149:15\n    |\n LL |             | true,\n    |               ^^^^"}, {"sha": "de8e1bba5576cbbf14fbcd1fe2ff4d810513ea6b", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns-leading-for.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.rs?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -1,8 +0,0 @@\n-// Test feature gating for a sole leading `|` in `let`.\n-\n-fn main() {}\n-\n-#[cfg(FALSE)]\n-fn gated_leading_vert_in_let() {\n-    for | A in 0 {} //~ ERROR or-patterns syntax is experimental\n-}"}, {"sha": "abcee435530200f16ca28efa49e77381b9920106", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns-leading-for.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.stderr?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns-leading-for.rs:7:9\n-   |\n-LL |     for | A in 0 {}\n-   |         ^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "6c592550ec25705e2c5e1704bf8b152f80cb9f22", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns-leading-let.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.rs?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -1,9 +0,0 @@\n-// Test feature gating for a sole leading `|` in `let`.\n-\n-fn main() {}\n-\n-#[cfg(FALSE)]\n-fn gated_leading_vert_in_let() {\n-    let | A; //~ ERROR or-patterns syntax is experimental\n-    //~^ ERROR top-level or-patterns are not allowed\n-}"}, {"sha": "d556532cd6ad8bade1914fe93d4b60e44ffeab7c", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns-leading-let.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.stderr?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -1,18 +0,0 @@\n-error: top-level or-patterns are not allowed in `let` bindings\n-  --> $DIR/feature-gate-or_patterns-leading-let.rs:7:9\n-   |\n-LL |     let | A;\n-   |         ^^^ help: remove the `|`: `A`\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns-leading-let.rs:7:9\n-   |\n-LL |     let | A;\n-   |         ^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "8bb45e606be965dbccf792a83d984ec24c5f3bf3", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns.rs", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.rs?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -1,54 +0,0 @@\n-fn main() {}\n-\n-pub fn example(x: Option<usize>) {\n-    match x {\n-        Some(0 | 1 | 2) => {}\n-        //~^ ERROR: or-patterns syntax is experimental\n-        _ => {}\n-    }\n-}\n-\n-// Test the `pat` macro fragment parser:\n-macro_rules! accept_pat {\n-    ($p:pat) => {}\n-}\n-\n-accept_pat!((p | q)); //~ ERROR or-patterns syntax is experimental\n-accept_pat!((p | q,)); //~ ERROR or-patterns syntax is experimental\n-accept_pat!(TS(p | q)); //~ ERROR or-patterns syntax is experimental\n-accept_pat!(NS { f: p | q }); //~ ERROR or-patterns syntax is experimental\n-accept_pat!([p | q]); //~ ERROR or-patterns syntax is experimental\n-\n-// Non-macro tests:\n-\n-#[cfg(FALSE)]\n-fn or_patterns() {\n-    // Gated:\n-\n-    let | A | B; //~ ERROR or-patterns syntax is experimental\n-    //~^ ERROR top-level or-patterns are not allowed\n-    let A | B; //~ ERROR or-patterns syntax is experimental\n-    //~^ ERROR top-level or-patterns are not allowed\n-    for | A | B in 0 {} //~ ERROR or-patterns syntax is experimental\n-    for A | B in 0 {} //~ ERROR or-patterns syntax is experimental\n-    fn fun((A | B): _) {} //~ ERROR or-patterns syntax is experimental\n-    let _ = |(A | B): u8| (); //~ ERROR or-patterns syntax is experimental\n-    let (A | B); //~ ERROR or-patterns syntax is experimental\n-    let (A | B,); //~ ERROR or-patterns syntax is experimental\n-    let A(B | C); //~ ERROR or-patterns syntax is experimental\n-    let E::V(B | C); //~ ERROR or-patterns syntax is experimental\n-    let S { f1: B | C, f2 }; //~ ERROR or-patterns syntax is experimental\n-    let E::V { f1: B | C, f2 }; //~ ERROR or-patterns syntax is experimental\n-    let [A | B]; //~ ERROR or-patterns syntax is experimental\n-\n-    // Top level of `while`, `if`, and `match` arms are allowed:\n-\n-    while let | A = 0 {}\n-    while let A | B = 0 {}\n-    if let | A = 0 {}\n-    if let A | B = 0 {}\n-    match 0 {\n-        | A => {},\n-        A | B => {},\n-    }\n-}"}, {"sha": "7988af5b94213639ad4db93565ad7b211825b495", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns.stderr", "status": "removed", "additions": 0, "deletions": 186, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.stderr?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -1,186 +0,0 @@\n-error: top-level or-patterns are not allowed in `let` bindings\n-  --> $DIR/feature-gate-or_patterns.rs:28:9\n-   |\n-LL |     let | A | B;\n-   |         ^^^^^^^ help: wrap the pattern in parentheses: `(A | B)`\n-\n-error: top-level or-patterns are not allowed in `let` bindings\n-  --> $DIR/feature-gate-or_patterns.rs:30:9\n-   |\n-LL |     let A | B;\n-   |         ^^^^^ help: wrap the pattern in parentheses: `(A | B)`\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:5:14\n-   |\n-LL |         Some(0 | 1 | 2) => {}\n-   |              ^^^^^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:28:9\n-   |\n-LL |     let | A | B;\n-   |         ^^^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:30:9\n-   |\n-LL |     let A | B;\n-   |         ^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:32:9\n-   |\n-LL |     for | A | B in 0 {}\n-   |         ^^^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:33:9\n-   |\n-LL |     for A | B in 0 {}\n-   |         ^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:34:13\n-   |\n-LL |     fn fun((A | B): _) {}\n-   |             ^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:35:15\n-   |\n-LL |     let _ = |(A | B): u8| ();\n-   |               ^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:36:10\n-   |\n-LL |     let (A | B);\n-   |          ^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:37:10\n-   |\n-LL |     let (A | B,);\n-   |          ^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:38:11\n-   |\n-LL |     let A(B | C);\n-   |           ^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:39:14\n-   |\n-LL |     let E::V(B | C);\n-   |              ^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:40:17\n-   |\n-LL |     let S { f1: B | C, f2 };\n-   |                 ^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:41:20\n-   |\n-LL |     let E::V { f1: B | C, f2 };\n-   |                    ^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:42:10\n-   |\n-LL |     let [A | B];\n-   |          ^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:16:14\n-   |\n-LL | accept_pat!((p | q));\n-   |              ^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:17:14\n-   |\n-LL | accept_pat!((p | q,));\n-   |              ^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:18:16\n-   |\n-LL | accept_pat!(TS(p | q));\n-   |                ^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:19:21\n-   |\n-LL | accept_pat!(NS { f: p | q });\n-   |                     ^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:20:14\n-   |\n-LL | accept_pat!([p | q]);\n-   |              ^^^^^\n-   |\n-   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error: aborting due to 21 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "b9490aaf9de05792e09026d3dda6b72dc61e5813", "filename": "src/test/ui/or-patterns/fn-param-wrap-parens.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.fixed?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -2,7 +2,6 @@\n \n // run-rustfix\n \n-#![feature(or_patterns)]\n #![allow(warnings)]\n \n fn main() {}"}, {"sha": "8e703d274c78531ab52ff23ce7072026352d6cb1", "filename": "src/test/ui/or-patterns/fn-param-wrap-parens.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -2,7 +2,6 @@\n \n // run-rustfix\n \n-#![feature(or_patterns)]\n #![allow(warnings)]\n \n fn main() {}"}, {"sha": "73270284131f9eb9fd93929eeddf05c62e9bc97d", "filename": "src/test/ui/or-patterns/fn-param-wrap-parens.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,5 +1,5 @@\n error: top-level or-patterns are not allowed in function parameters\n-  --> $DIR/fn-param-wrap-parens.rs:14:9\n+  --> $DIR/fn-param-wrap-parens.rs:13:9\n    |\n LL | fn fun1(A | B: E) {}\n    |         ^^^^^ help: wrap the pattern in parentheses: `(A | B)`"}, {"sha": "11b61cb69f1d2c9d4739bb1f717d360ff6742b79", "filename": "src/test/ui/or-patterns/for-loop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Ffor-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Ffor-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffor-loop.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,8 +1,6 @@\n // Check that or patterns are lowered correctly in `for` loops.\n // run-pass\n \n-#![feature(or_patterns)]\n-\n fn main() {\n     let v = vec![Ok(2), Err(3), Ok(5)];\n     let mut w = Vec::new();"}, {"sha": "92a1bb256668b02c1e684395e980f8ebc57c0562", "filename": "src/test/ui/or-patterns/if-let-while-let.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fif-let-while-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fif-let-while-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fif-let-while-let.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,8 +1,6 @@\n // Check that or patterns are lowered correctly in `if let` and `while let` expressions.\n // run-pass\n \n-#![feature(or_patterns)]\n-\n fn main() {\n     let mut opt = Some(3);\n     let mut w = Vec::new();"}, {"sha": "a87a10ce8a4ca6145f074b159bc6fbeffa4ca687", "filename": "src/test/ui/or-patterns/inconsistent-modes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,6 +1,5 @@\n // This test ensures that or patterns require binding mode consistency across arms.\n \n-#![feature(or_patterns)]\n #![allow(non_camel_case_types)]\n fn main() {\n     // One level:"}, {"sha": "dae6bb41e74e296b67127be90a874cbcde098403", "filename": "src/test/ui/or-patterns/inconsistent-modes.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,55 +1,55 @@\n error[E0409]: variable `a` is bound inconsistently across alternatives separated by `|`\n-  --> $DIR/inconsistent-modes.rs:7:26\n+  --> $DIR/inconsistent-modes.rs:6:26\n    |\n LL |     let (Ok(a) | Err(ref a)): Result<&u8, u8> = Ok(&0);\n    |             -            ^ bound in different ways\n    |             |\n    |             first binding\n \n error[E0409]: variable `a` is bound inconsistently across alternatives separated by `|`\n-  --> $DIR/inconsistent-modes.rs:9:30\n+  --> $DIR/inconsistent-modes.rs:8:30\n    |\n LL |     let (Ok(ref mut a) | Err(a)): Result<u8, &mut u8> = Ok(0);\n    |                     -        ^ bound in different ways\n    |                     |\n    |                     first binding\n \n error[E0409]: variable `a` is bound inconsistently across alternatives separated by `|`\n-  --> $DIR/inconsistent-modes.rs:11:34\n+  --> $DIR/inconsistent-modes.rs:10:34\n    |\n LL |     let (Ok(ref a) | Err(ref mut a)): Result<&u8, &mut u8> = Ok(&0);\n    |                 - first binding  ^ bound in different ways\n \n error[E0409]: variable `a` is bound inconsistently across alternatives separated by `|`\n-  --> $DIR/inconsistent-modes.rs:14:40\n+  --> $DIR/inconsistent-modes.rs:13:40\n    |\n LL |     let (Ok((ref a, b)) | Err((ref mut a, ref b))) = Ok((0, &0));\n    |                  - first binding       ^ bound in different ways\n \n error[E0409]: variable `b` is bound inconsistently across alternatives separated by `|`\n-  --> $DIR/inconsistent-modes.rs:14:47\n+  --> $DIR/inconsistent-modes.rs:13:47\n    |\n LL |     let (Ok((ref a, b)) | Err((ref mut a, ref b))) = Ok((0, &0));\n    |                     - first binding           ^ bound in different ways\n \n error[E0409]: variable `a` is bound inconsistently across alternatives separated by `|`\n-  --> $DIR/inconsistent-modes.rs:20:39\n+  --> $DIR/inconsistent-modes.rs:19:39\n    |\n LL |     let (Ok(Ok(a) | Err(a)) | Err(ref a)) = Err(0);\n    |                         -             ^ bound in different ways\n    |                         |\n    |                         first binding\n \n error[E0409]: variable `a` is bound inconsistently across alternatives separated by `|`\n-  --> $DIR/inconsistent-modes.rs:24:34\n+  --> $DIR/inconsistent-modes.rs:23:34\n    |\n LL |     let (Ok([Ok((Ok(ref a) | Err(a),)) | Err(a)]) | Err(a)) = Err(&1);\n    |                         -        ^ bound in different ways\n    |                         |\n    |                         first binding\n \n error[E0308]: mismatched types\n-  --> $DIR/inconsistent-modes.rs:11:26\n+  --> $DIR/inconsistent-modes.rs:10:26\n    |\n LL |     let (Ok(ref a) | Err(ref mut a)): Result<&u8, &mut u8> = Ok(&0);\n    |             -----        ^^^^^^^^^    -------------------- expected due to this\n@@ -62,7 +62,7 @@ LL |     let (Ok(ref a) | Err(ref mut a)): Result<&u8, &mut u8> = Ok(&0);\n    = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/inconsistent-modes.rs:14:32\n+  --> $DIR/inconsistent-modes.rs:13:32\n    |\n LL |     let (Ok((ref a, b)) | Err((ref mut a, ref b))) = Ok((0, &0));\n    |              -----             ^^^^^^^^^             ----------- this expression has type `Result<({integer}, &{integer}), (_, _)>`"}, {"sha": "73931def89584038d9199cc2f2540df237df7609", "filename": "src/test/ui/or-patterns/issue-67514-irrefutable-param.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fissue-67514-irrefutable-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fissue-67514-irrefutable-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-67514-irrefutable-param.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -2,8 +2,6 @@\n \n // check-pass\n \n-#![feature(or_patterns)]\n-\n fn foo((Some(_) | None): Option<u32>) {}\n \n fn main() {"}, {"sha": "7339a7e23f9e2111dce4d8bb5347b3d8c1885d5d", "filename": "src/test/ui/or-patterns/issue-68785-irrefutable-param-with-at.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fissue-68785-irrefutable-param-with-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fissue-68785-irrefutable-param-with-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-68785-irrefutable-param-with-at.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(or_patterns)]\n-\n enum MyEnum {\n     FirstCase(u8),\n     OtherCase(u16),"}, {"sha": "3538aad5d772f7b1d2b209348e1e82100f96d415", "filename": "src/test/ui/or-patterns/issue-69875-should-have-been-expanded-earlier-non-exhaustive.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,5 +1,3 @@\n-#![feature(or_patterns)]\n-\n fn main() {\n     let (0 | (1 | 2)) = 0; //~ ERROR refutable pattern in local binding\n     match 0 {"}, {"sha": "61175b84ee1deb6f701d057645ad1c74820e9003", "filename": "src/test/ui/or-patterns/issue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `3_i32..=i32::MAX` not covered\n-  --> $DIR/issue-69875-should-have-been-expanded-earlier-non-exhaustive.rs:4:10\n+  --> $DIR/issue-69875-should-have-been-expanded-earlier-non-exhaustive.rs:2:10\n    |\n LL |     let (0 | (1 | 2)) = 0;\n    |          ^^^^^^^^^^^ patterns `i32::MIN..=-1_i32` and `3_i32..=i32::MAX` not covered\n@@ -13,7 +13,7 @@ LL |     if let (0 | (1 | 2)) = 0 { /* */ }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0004]: non-exhaustive patterns: `i32::MIN..=-1_i32` and `3_i32..=i32::MAX` not covered\n-  --> $DIR/issue-69875-should-have-been-expanded-earlier-non-exhaustive.rs:5:11\n+  --> $DIR/issue-69875-should-have-been-expanded-earlier-non-exhaustive.rs:3:11\n    |\n LL |     match 0 {\n    |           ^ patterns `i32::MIN..=-1_i32` and `3_i32..=i32::MAX` not covered"}, {"sha": "408ac24f39a49037372aa92e8aa0d254259f8756", "filename": "src/test/ui/or-patterns/issue-69875-should-have-been-expanded-earlier.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(or_patterns)]\n-\n fn main() {\n     let (0 | (1 | _)) = 0;\n     if let 0 | (1 | 2) = 0 {}"}, {"sha": "8a3c640b10dee6632944af7e0b4f66191d17246a", "filename": "src/test/ui/or-patterns/issue-70413-no-unreachable-pat-and-guard.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fissue-70413-no-unreachable-pat-and-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fissue-70413-no-unreachable-pat-and-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-70413-no-unreachable-pat-and-guard.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -2,7 +2,6 @@\n \n #![deny(unreachable_patterns)]\n \n-#![feature(or_patterns)]\n fn main() {\n     match (3,42) {\n         (a,_) | (_,a) if a > 10 => {println!(\"{}\", a)}"}, {"sha": "97207e83e2e65562223dcbaf76080d14c2403b9e", "filename": "src/test/ui/or-patterns/let-pattern.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Flet-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Flet-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Flet-pattern.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,5 +1,3 @@\n-#![feature(or_patterns)]\n-\n // run-pass\n \n fn or_pat_let(x: Result<u32, u32>) -> u32 {"}, {"sha": "8c581b630decef8b9f21200793c4eb192be37738", "filename": "src/test/ui/or-patterns/macro-pat.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fmacro-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fmacro-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmacro-pat.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -3,8 +3,6 @@\n // ignore-test\n // FIXME(mark-i-m): enable this test again when 2021 machinery is available\n \n-#![feature(or_patterns)]\n-\n use Foo::*;\n \n #[derive(Eq, PartialEq, Debug)]"}, {"sha": "d1cb73aafa0c051699258b02514512f06fb671ea", "filename": "src/test/ui/or-patterns/mismatched-bindings-async-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fmismatched-bindings-async-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fmismatched-bindings-async-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmismatched-bindings-async-fn.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,8 +1,6 @@\n // Regression test for #71297\n // edition:2018\n \n-#![feature(or_patterns)]\n-\n async fn a((x | s): String) {}\n //~^ ERROR variable `x` is not bound in all patterns\n //~| ERROR variable `s` is not bound in all patterns"}, {"sha": "81602fffa8d070b4ad767ea2598f124ee17eb849", "filename": "src/test/ui/or-patterns/mismatched-bindings-async-fn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fmismatched-bindings-async-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fmismatched-bindings-async-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmismatched-bindings-async-fn.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,29 +1,29 @@\n error[E0408]: variable `s` is not bound in all patterns\n-  --> $DIR/mismatched-bindings-async-fn.rs:6:13\n+  --> $DIR/mismatched-bindings-async-fn.rs:4:13\n    |\n LL | async fn a((x | s): String) {}\n    |             ^   - variable not in all patterns\n    |             |\n    |             pattern doesn't bind `s`\n \n error[E0408]: variable `x` is not bound in all patterns\n-  --> $DIR/mismatched-bindings-async-fn.rs:6:17\n+  --> $DIR/mismatched-bindings-async-fn.rs:4:17\n    |\n LL | async fn a((x | s): String) {}\n    |             -   ^ pattern doesn't bind `x`\n    |             |\n    |             variable not in all patterns\n \n error[E0408]: variable `s` is not bound in all patterns\n-  --> $DIR/mismatched-bindings-async-fn.rs:11:10\n+  --> $DIR/mismatched-bindings-async-fn.rs:9:10\n    |\n LL |     let (x | s) = String::new();\n    |          ^   - variable not in all patterns\n    |          |\n    |          pattern doesn't bind `s`\n \n error[E0408]: variable `x` is not bound in all patterns\n-  --> $DIR/mismatched-bindings-async-fn.rs:11:14\n+  --> $DIR/mismatched-bindings-async-fn.rs:9:14\n    |\n LL |     let (x | s) = String::new();\n    |          -   ^ pattern doesn't bind `x`"}, {"sha": "7c26012c0e93df075abbd604635f92bc0b680803", "filename": "src/test/ui/or-patterns/missing-bindings.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fmissing-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fmissing-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmissing-bindings.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -2,7 +2,6 @@\n \n // edition:2018\n \n-#![feature(or_patterns)]\n #![allow(non_camel_case_types)]\n \n fn main() {}"}, {"sha": "c173a3a9aba200053ad6e0cff16a26ba7ebb3089", "filename": "src/test/ui/or-patterns/missing-bindings.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fmissing-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fmissing-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmissing-bindings.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,5 +1,5 @@\n error[E0408]: variable `beta` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:20:10\n+  --> $DIR/missing-bindings.rs:19:10\n    |\n LL |     let (alpha | beta | charlie) = alpha;\n    |          ^^^^^   ----   ^^^^^^^ pattern doesn't bind `beta`\n@@ -8,167 +8,167 @@ LL |     let (alpha | beta | charlie) = alpha;\n    |          pattern doesn't bind `beta`\n \n error[E0408]: variable `beta` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:22:14\n+  --> $DIR/missing-bindings.rs:21:14\n    |\n LL |         Some(alpha | beta) => {}\n    |              ^^^^^   ---- variable not in all patterns\n    |              |\n    |              pattern doesn't bind `beta`\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:34:20\n+  --> $DIR/missing-bindings.rs:33:20\n    |\n LL |     let (A(a, _) | _) = X;\n    |            -       ^ pattern doesn't bind `a`\n    |            |\n    |            variable not in all patterns\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:35:10\n+  --> $DIR/missing-bindings.rs:34:10\n    |\n LL |     let (_ | B(a)) = X;\n    |          ^     - variable not in all patterns\n    |          |\n    |          pattern doesn't bind `a`\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:36:10\n+  --> $DIR/missing-bindings.rs:35:10\n    |\n LL |     let (A(..) | B(a)) = X;\n    |          ^^^^^     - variable not in all patterns\n    |          |\n    |          pattern doesn't bind `a`\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:37:20\n+  --> $DIR/missing-bindings.rs:36:20\n    |\n LL |     let (A(a, _) | B(_)) = X;\n    |            -       ^^^^ pattern doesn't bind `a`\n    |            |\n    |            variable not in all patterns\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:38:20\n+  --> $DIR/missing-bindings.rs:37:20\n    |\n LL |     let (A(_, a) | B(_)) = X;\n    |               -    ^^^^ pattern doesn't bind `a`\n    |               |\n    |               variable not in all patterns\n \n error[E0408]: variable `b` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:39:20\n+  --> $DIR/missing-bindings.rs:38:20\n    |\n LL |     let (A(a, b) | B(a)) = X;\n    |               -    ^^^^ pattern doesn't bind `b`\n    |               |\n    |               variable not in all patterns\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:43:10\n+  --> $DIR/missing-bindings.rs:42:10\n    |\n LL |     let (A(A(..) | B(_), _) | B(a)) = Y;\n    |          ^^^^^^^^^^^^^^^^^^     - variable not in all patterns\n    |          |\n    |          pattern doesn't bind `a`\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:44:12\n+  --> $DIR/missing-bindings.rs:43:12\n    |\n LL |     let (A(A(..) | B(a), _) | B(A(a, _) | B(a))) = Y;\n    |            ^^^^^     - variable not in all patterns\n    |            |\n    |            pattern doesn't bind `a`\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:46:22\n+  --> $DIR/missing-bindings.rs:45:22\n    |\n LL |     let (A(A(a, b) | B(c), d) | B(e)) = Y;\n    |              -       ^^^^ pattern doesn't bind `a`\n    |              |\n    |              variable not in all patterns\n \n error[E0408]: variable `b` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:46:22\n+  --> $DIR/missing-bindings.rs:45:22\n    |\n LL |     let (A(A(a, b) | B(c), d) | B(e)) = Y;\n    |                 -    ^^^^ pattern doesn't bind `b`\n    |                 |\n    |                 variable not in all patterns\n \n error[E0408]: variable `c` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:46:12\n+  --> $DIR/missing-bindings.rs:45:12\n    |\n LL |     let (A(A(a, b) | B(c), d) | B(e)) = Y;\n    |            ^^^^^^^     - variable not in all patterns\n    |            |\n    |            pattern doesn't bind `c`\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:46:33\n+  --> $DIR/missing-bindings.rs:45:33\n    |\n LL |     let (A(A(a, b) | B(c), d) | B(e)) = Y;\n    |              -                  ^^^^ pattern doesn't bind `a`\n    |              |\n    |              variable not in all patterns\n \n error[E0408]: variable `b` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:46:33\n+  --> $DIR/missing-bindings.rs:45:33\n    |\n LL |     let (A(A(a, b) | B(c), d) | B(e)) = Y;\n    |                 -               ^^^^ pattern doesn't bind `b`\n    |                 |\n    |                 variable not in all patterns\n \n error[E0408]: variable `c` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:46:33\n+  --> $DIR/missing-bindings.rs:45:33\n    |\n LL |     let (A(A(a, b) | B(c), d) | B(e)) = Y;\n    |                        -        ^^^^ pattern doesn't bind `c`\n    |                        |\n    |                        variable not in all patterns\n \n error[E0408]: variable `d` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:46:33\n+  --> $DIR/missing-bindings.rs:45:33\n    |\n LL |     let (A(A(a, b) | B(c), d) | B(e)) = Y;\n    |                            -    ^^^^ pattern doesn't bind `d`\n    |                            |\n    |                            variable not in all patterns\n \n error[E0408]: variable `e` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:46:10\n+  --> $DIR/missing-bindings.rs:45:10\n    |\n LL |     let (A(A(a, b) | B(c), d) | B(e)) = Y;\n    |          ^^^^^^^^^^^^^^^^^^^^     - variable not in all patterns\n    |          |\n    |          pattern doesn't bind `e`\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:62:29\n+  --> $DIR/missing-bindings.rs:61:29\n    |\n LL |                     Ok(a) | Err(_),\n    |                        -    ^^^^^^ pattern doesn't bind `a`\n    |                        |\n    |                        variable not in all patterns\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:70:21\n+  --> $DIR/missing-bindings.rs:69:21\n    |\n LL |                     A(_, a) |\n    |                          - variable not in all patterns\n LL |                     B(b),\n    |                     ^^^^ pattern doesn't bind `a`\n \n error[E0408]: variable `b` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:69:21\n+  --> $DIR/missing-bindings.rs:68:21\n    |\n LL |                     A(_, a) |\n    |                     ^^^^^^^ pattern doesn't bind `b`\n LL |                     B(b),\n    |                       - variable not in all patterns\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:73:17\n+  --> $DIR/missing-bindings.rs:72:17\n    |\n LL |                     A(_, a) |\n    |                          - variable not in all patterns\n@@ -177,7 +177,7 @@ LL |                 B(_)\n    |                 ^^^^ pattern doesn't bind `a`\n \n error[E0408]: variable `b` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:73:17\n+  --> $DIR/missing-bindings.rs:72:17\n    |\n LL |                     B(b),\n    |                       - variable not in all patterns\n@@ -186,7 +186,7 @@ LL |                 B(_)\n    |                 ^^^^ pattern doesn't bind `b`\n \n error[E0408]: variable `a` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:77:13\n+  --> $DIR/missing-bindings.rs:76:13\n    |\n LL |                 B(Ok(a) | Err(a))\n    |                               - variable not in all patterns\n@@ -198,7 +198,7 @@ LL |             V3(c),\n    |             ^^^^^ pattern doesn't bind `a`\n \n error[E0408]: variable `b` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:58:13\n+  --> $DIR/missing-bindings.rs:57:13\n    |\n LL | /             V1(\n LL | |\n@@ -216,7 +216,7 @@ LL |               V3(c),\n    |               ^^^^^ pattern doesn't bind `b`\n \n error[E0408]: variable `c` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:58:13\n+  --> $DIR/missing-bindings.rs:57:13\n    |\n LL | /             V1(\n LL | |"}, {"sha": "d9911cda1b6855f74d458c85a864357b9dc807c5", "filename": "src/test/ui/or-patterns/mix-with-wild.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fmix-with-wild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fmix-with-wild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmix-with-wild.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -4,7 +4,6 @@\n //  2) or-patterns should work with simplifyable patterns.\n \n // run-pass\n-#![feature(or_patterns)]\n \n pub fn test(x: Option<usize>) -> bool {\n     match x {"}, {"sha": "5f201253304c4a975b76189e3a89f95248c39754", "filename": "src/test/ui/or-patterns/multiple-pattern-typo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,4 +1,4 @@\n-#![feature(or_patterns)]\n+//! Test for `||` in or-patterns\n \n fn main() {\n     let x = 3;"}, {"sha": "fa470de7fb5555e750923ecdb19bce280f6e5355", "filename": "src/test/ui/or-patterns/or-patterns-binding-type-mismatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2For-patterns-binding-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2For-patterns-binding-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-binding-type-mismatch.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,8 +1,6 @@\n // Here we test type checking of bindings when combined with or-patterns.\n // Specifically, we ensure that introducing bindings of different types result in type errors.\n \n-#![feature(or_patterns)]\n-\n fn main() {\n     enum Blah {\n         A(isize, isize, usize),"}, {"sha": "00ce46c5690d59176cef6902054bc52c344748c4", "filename": "src/test/ui/or-patterns/or-patterns-binding-type-mismatch.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2For-patterns-binding-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2For-patterns-binding-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-binding-type-mismatch.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:13:39\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:11:39\n    |\n LL |     match Blah::A(1, 1, 2) {\n    |           ---------------- this expression has type `Blah`\n@@ -11,7 +11,7 @@ LL |         Blah::A(_, x, y) | Blah::B(x, y) => {}\n    = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:17:44\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:15:44\n    |\n LL |     match Some(Blah::A(1, 1, 2)) {\n    |           ---------------------- this expression has type `Option<Blah>`\n@@ -23,7 +23,7 @@ LL |         Some(Blah::A(_, x, y) | Blah::B(x, y)) => {}\n    = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:21:19\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:19:19\n    |\n LL |     match (0u8, 1u16) {\n    |           ----------- this expression has type `(u8, u16)`\n@@ -35,7 +35,7 @@ LL |         (x, y) | (y, x) => {}\n    = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:21:22\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:19:22\n    |\n LL |     match (0u8, 1u16) {\n    |           ----------- this expression has type `(u8, u16)`\n@@ -47,7 +47,7 @@ LL |         (x, y) | (y, x) => {}\n    = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:26:41\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:24:41\n    |\n LL |     match Some((0u8, Some((1u16, 2u32)))) {\n    |           ------------------------------- this expression has type `Option<(u8, Option<(u16, u32)>)>`\n@@ -59,7 +59,7 @@ LL |         Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x)))) => {}\n    = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:26:50\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:24:50\n    |\n LL |     match Some((0u8, Some((1u16, 2u32)))) {\n    |           ------------------------------- this expression has type `Option<(u8, Option<(u16, u32)>)>`\n@@ -71,7 +71,7 @@ LL |         Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x)))) => {}\n    = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:26:59\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:24:59\n    |\n LL |     match Some((0u8, Some((1u16, 2u32)))) {\n    |           ------------------------------- this expression has type `Option<(u8, Option<(u16, u32)>)>`\n@@ -83,7 +83,7 @@ LL |         Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x)))) => {}\n    = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:26:62\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:24:62\n    |\n LL |     match Some((0u8, Some((1u16, 2u32)))) {\n    |           ------------------------------- this expression has type `Option<(u8, Option<(u16, u32)>)>`\n@@ -93,7 +93,7 @@ LL |         Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x)))) => {}\n    = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:34:42\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:32:42\n    |\n LL |     if let Blah::A(_, x, y) | Blah::B(x, y) = Blah::A(1, 1, 2) {\n    |                          -               ^    ---------------- this expression has type `Blah`\n@@ -104,7 +104,7 @@ LL |     if let Blah::A(_, x, y) | Blah::B(x, y) = Blah::A(1, 1, 2) {\n    = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:38:47\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:36:47\n    |\n LL |     if let Some(Blah::A(_, x, y) | Blah::B(x, y)) = Some(Blah::A(1, 1, 2)) {\n    |                               -               ^     ---------------------- this expression has type `Option<Blah>`\n@@ -115,7 +115,7 @@ LL |     if let Some(Blah::A(_, x, y) | Blah::B(x, y)) = Some(Blah::A(1, 1, 2))\n    = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:42:22\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:40:22\n    |\n LL |     if let (x, y) | (y, x) = (0u8, 1u16) {\n    |                -     ^       ----------- this expression has type `(u8, u16)`\n@@ -126,7 +126,7 @@ LL |     if let (x, y) | (y, x) = (0u8, 1u16) {\n    = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:42:25\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:40:25\n    |\n LL |     if let (x, y) | (y, x) = (0u8, 1u16) {\n    |             -           ^    ----------- this expression has type `(u8, u16)`\n@@ -137,7 +137,7 @@ LL |     if let (x, y) | (y, x) = (0u8, 1u16) {\n    = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:47:44\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:45:44\n    |\n LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n    |                           -                ^ expected `u16`, found `u8`\n@@ -150,7 +150,7 @@ LL |     = Some((0u8, Some((1u16, 2u32))))\n    = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:47:53\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:45:53\n    |\n LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n    |                  -                                  ^ expected `u8`, found `u16`\n@@ -163,7 +163,7 @@ LL |     = Some((0u8, Some((1u16, 2u32))))\n    = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:47:62\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:45:62\n    |\n LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n    |                              -                               ^ expected `u32`, found `u16`\n@@ -176,7 +176,7 @@ LL |     = Some((0u8, Some((1u16, 2u32))))\n    = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:47:65\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:45:65\n    |\n LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n    |                  - first introduced with type `u8` here         ^ expected `u8`, found `u32`\n@@ -187,7 +187,7 @@ LL |     = Some((0u8, Some((1u16, 2u32))))\n    = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:55:40\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:53:40\n    |\n LL |     let (Blah::A(_, x, y) | Blah::B(x, y)) = Blah::A(1, 1, 2);\n    |                        -               ^     ---------------- this expression has type `Blah`\n@@ -198,7 +198,7 @@ LL |     let (Blah::A(_, x, y) | Blah::B(x, y)) = Blah::A(1, 1, 2);\n    = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:58:20\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:56:20\n    |\n LL |     let ((x, y) | (y, x)) = (0u8, 1u16);\n    |              -     ^        ----------- this expression has type `(u8, u16)`\n@@ -209,7 +209,7 @@ LL |     let ((x, y) | (y, x)) = (0u8, 1u16);\n    = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:58:23\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:56:23\n    |\n LL |     let ((x, y) | (y, x)) = (0u8, 1u16);\n    |           -           ^     ----------- this expression has type `(u8, u16)`\n@@ -220,7 +220,7 @@ LL |     let ((x, y) | (y, x)) = (0u8, 1u16);\n    = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:62:42\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:60:42\n    |\n LL |     fn f1((Blah::A(_, x, y) | Blah::B(x, y)): Blah) {}\n    |                          -               ^    ---- expected due to this\n@@ -231,7 +231,7 @@ LL |     fn f1((Blah::A(_, x, y) | Blah::B(x, y)): Blah) {}\n    = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:65:22\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:63:22\n    |\n LL |     fn f2(((x, y) | (y, x)): (u8, u16)) {}\n    |                -     ^       --------- expected due to this\n@@ -242,7 +242,7 @@ LL |     fn f2(((x, y) | (y, x)): (u8, u16)) {}\n    = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-binding-type-mismatch.rs:65:25\n+  --> $DIR/or-patterns-binding-type-mismatch.rs:63:25\n    |\n LL |     fn f2(((x, y) | (y, x)): (u8, u16)) {}\n    |             -           ^    --------- expected due to this"}, {"sha": "e56f9ffe23c635df036dd4aea93fdf6d529a3ab4", "filename": "src/test/ui/or-patterns/or-patterns-default-binding-modes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -2,7 +2,6 @@\n \n // check-pass\n \n-#![feature(or_patterns)]\n #![allow(irrefutable_let_patterns)]\n \n fn main() {"}, {"sha": "358e9d034c474e79faae55a068e900a3c394a003", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,8 +1,6 @@\n // Test some cases where or-patterns may ostensibly be allowed but are in fact not.\n // This is not a semantic test. We only test parsing.\n \n-#![feature(or_patterns)]\n-\n fn main() {}\n \n enum E { A, B }"}, {"sha": "5406d51c644a5f1940e90bae95427051b1626f38", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,29 +1,29 @@\n error: top-level or-patterns are not allowed in function parameters\n-  --> $DIR/or-patterns-syntactic-fail.rs:17:13\n+  --> $DIR/or-patterns-syntactic-fail.rs:15:13\n    |\n LL |     fn fun1(A | B: E) {}\n    |             ^^^^^ help: wrap the pattern in parentheses: `(A | B)`\n \n error: top-level or-patterns are not allowed in function parameters\n-  --> $DIR/or-patterns-syntactic-fail.rs:20:13\n+  --> $DIR/or-patterns-syntactic-fail.rs:18:13\n    |\n LL |     fn fun2(| A | B: E) {}\n    |             ^^^^^^^ help: wrap the pattern in parentheses: `(A | B)`\n \n error: top-level or-patterns are not allowed in `let` bindings\n-  --> $DIR/or-patterns-syntactic-fail.rs:25:9\n+  --> $DIR/or-patterns-syntactic-fail.rs:23:9\n    |\n LL |     let A | B: E = A;\n    |         ^^^^^ help: wrap the pattern in parentheses: `(A | B)`\n \n error: top-level or-patterns are not allowed in `let` bindings\n-  --> $DIR/or-patterns-syntactic-fail.rs:28:9\n+  --> $DIR/or-patterns-syntactic-fail.rs:26:9\n    |\n LL |     let | A | B: E = A;\n    |         ^^^^^^^ help: wrap the pattern in parentheses: `(A | B)`\n \n error[E0369]: no implementation for `E | ()`\n-  --> $DIR/or-patterns-syntactic-fail.rs:13:22\n+  --> $DIR/or-patterns-syntactic-fail.rs:11:22\n    |\n LL |     let _ = |A | B: E| ();\n    |                  ----^ -- ()"}, {"sha": "6f9a631b092a71aafe7102708830e27120a8dd70", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -3,8 +3,6 @@\n \n // check-pass\n \n-#![feature(or_patterns)]\n-\n fn main() {}\n \n // Test the `pat` macro fragment parser:"}, {"sha": "b1cd0a94437f6ca063ddf92d0d480e007641a773", "filename": "src/test/ui/or-patterns/remove-leading-vert.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.fixed?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -2,7 +2,6 @@\n \n // run-rustfix\n \n-#![feature(or_patterns)]\n #![allow(warnings)]\n \n fn main() {}"}, {"sha": "dc12382aa3a232c77fc9f4ab32fcc01cbf53eaba", "filename": "src/test/ui/or-patterns/remove-leading-vert.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -2,7 +2,6 @@\n \n // run-rustfix\n \n-#![feature(or_patterns)]\n #![allow(warnings)]\n \n fn main() {}"}, {"sha": "af51c67e1c8ba8bcdec583c2c5be43ed8db3b6e4", "filename": "src/test/ui/or-patterns/remove-leading-vert.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,107 +1,107 @@\n error: top-level or-patterns are not allowed in function parameters\n-  --> $DIR/remove-leading-vert.rs:12:14\n+  --> $DIR/remove-leading-vert.rs:11:14\n    |\n LL |     fn fun1( | A: E) {}\n    |              ^^^ help: remove the `|`: `A`\n \n error: unexpected `||` before function parameter\n-  --> $DIR/remove-leading-vert.rs:13:14\n+  --> $DIR/remove-leading-vert.rs:12:14\n    |\n LL |     fn fun2( || A: E) {}\n    |              ^^ help: remove the `||`\n    |\n    = note: alternatives in or-patterns are separated with `|`, not `||`\n \n error: unexpected token `||` in pattern\n-  --> $DIR/remove-leading-vert.rs:15:11\n+  --> $DIR/remove-leading-vert.rs:14:11\n    |\n LL |     let ( || A): (E);\n    |           ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n \n error: unexpected token `||` in pattern\n-  --> $DIR/remove-leading-vert.rs:18:11\n+  --> $DIR/remove-leading-vert.rs:17:11\n    |\n LL |     let [ || A ]: [E; 1];\n    |           ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n \n error: unexpected token `||` in pattern\n-  --> $DIR/remove-leading-vert.rs:20:13\n+  --> $DIR/remove-leading-vert.rs:19:13\n    |\n LL |     let TS( || A ): TS;\n    |             ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n \n error: unexpected token `||` in pattern\n-  --> $DIR/remove-leading-vert.rs:22:17\n+  --> $DIR/remove-leading-vert.rs:21:17\n    |\n LL |     let NS { f: || A }: NS;\n    |                 ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n \n error: a trailing `|` is not allowed in an or-pattern\n-  --> $DIR/remove-leading-vert.rs:27:13\n+  --> $DIR/remove-leading-vert.rs:26:13\n    |\n LL |     let ( A | ): E;\n    |           - ^ help: remove the `|`\n    |           |\n    |           while parsing this or-pattern starting here\n \n error: a trailing `|` is not allowed in an or-pattern\n-  --> $DIR/remove-leading-vert.rs:28:12\n+  --> $DIR/remove-leading-vert.rs:27:12\n    |\n LL |     let (a |,): (E,);\n    |          - ^ help: remove the `|`\n    |          |\n    |          while parsing this or-pattern starting here\n \n error: a trailing `|` is not allowed in an or-pattern\n-  --> $DIR/remove-leading-vert.rs:29:17\n+  --> $DIR/remove-leading-vert.rs:28:17\n    |\n LL |     let ( A | B | ): E;\n    |           -     ^ help: remove the `|`\n    |           |\n    |           while parsing this or-pattern starting here\n \n error: a trailing `|` is not allowed in an or-pattern\n-  --> $DIR/remove-leading-vert.rs:30:17\n+  --> $DIR/remove-leading-vert.rs:29:17\n    |\n LL |     let [ A | B | ]: [E; 1];\n    |           -     ^ help: remove the `|`\n    |           |\n    |           while parsing this or-pattern starting here\n \n error: a trailing `|` is not allowed in an or-pattern\n-  --> $DIR/remove-leading-vert.rs:31:18\n+  --> $DIR/remove-leading-vert.rs:30:18\n    |\n LL |     let S { f: B | };\n    |                - ^ help: remove the `|`\n    |                |\n    |                while parsing this or-pattern starting here\n \n error: unexpected token `||` in pattern\n-  --> $DIR/remove-leading-vert.rs:32:13\n+  --> $DIR/remove-leading-vert.rs:31:13\n    |\n LL |     let ( A || B | ): E;\n    |           - ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n    |           |\n    |           while parsing this or-pattern starting here\n \n error: a trailing `|` is not allowed in an or-pattern\n-  --> $DIR/remove-leading-vert.rs:32:18\n+  --> $DIR/remove-leading-vert.rs:31:18\n    |\n LL |     let ( A || B | ): E;\n    |           -      ^ help: remove the `|`\n    |           |\n    |           while parsing this or-pattern starting here\n \n error: a trailing `|` is not allowed in an or-pattern\n-  --> $DIR/remove-leading-vert.rs:35:11\n+  --> $DIR/remove-leading-vert.rs:34:11\n    |\n LL |         A | => {}\n    |         - ^ help: remove the `|`\n    |         |\n    |         while parsing this or-pattern starting here\n \n error: a trailing `|` is not allowed in an or-pattern\n-  --> $DIR/remove-leading-vert.rs:36:11\n+  --> $DIR/remove-leading-vert.rs:35:11\n    |\n LL |         A || => {}\n    |         - ^^ help: remove the `||`\n@@ -111,47 +111,47 @@ LL |         A || => {}\n    = note: alternatives in or-patterns are separated with `|`, not `||`\n \n error: unexpected token `||` in pattern\n-  --> $DIR/remove-leading-vert.rs:37:11\n+  --> $DIR/remove-leading-vert.rs:36:11\n    |\n LL |         A || B | => {}\n    |         - ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n    |         |\n    |         while parsing this or-pattern starting here\n \n error: a trailing `|` is not allowed in an or-pattern\n-  --> $DIR/remove-leading-vert.rs:37:16\n+  --> $DIR/remove-leading-vert.rs:36:16\n    |\n LL |         A || B | => {}\n    |         -      ^ help: remove the `|`\n    |         |\n    |         while parsing this or-pattern starting here\n \n error: a trailing `|` is not allowed in an or-pattern\n-  --> $DIR/remove-leading-vert.rs:39:17\n+  --> $DIR/remove-leading-vert.rs:38:17\n    |\n LL |         | A | B | => {}\n    |         -       ^ help: remove the `|`\n    |         |\n    |         while parsing this or-pattern starting here\n \n error: a trailing `|` is not allowed in an or-pattern\n-  --> $DIR/remove-leading-vert.rs:46:11\n+  --> $DIR/remove-leading-vert.rs:45:11\n    |\n LL |     let a | : u8 = 0;\n    |         - ^ help: remove the `|`\n    |         |\n    |         while parsing this or-pattern starting here\n \n error: a trailing `|` is not allowed in an or-pattern\n-  --> $DIR/remove-leading-vert.rs:47:11\n+  --> $DIR/remove-leading-vert.rs:46:11\n    |\n LL |     let a | = 0;\n    |         - ^ help: remove the `|`\n    |         |\n    |         while parsing this or-pattern starting here\n \n error: a trailing `|` is not allowed in an or-pattern\n-  --> $DIR/remove-leading-vert.rs:48:11\n+  --> $DIR/remove-leading-vert.rs:47:11\n    |\n LL |     let a | ;\n    |         - ^ help: remove the `|`"}, {"sha": "d98606deda570ec8a11fca632159eecaf4d61d3e", "filename": "src/test/ui/or-patterns/search-via-bindings.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fsearch-via-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fsearch-via-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fsearch-via-bindings.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -2,8 +2,6 @@\n \n // run-pass\n \n-#![feature(or_patterns)]\n-\n fn search(target: (bool, bool, bool)) -> u32 {\n     let x = ((false, true), (false, true), (false, true));\n     let mut guard_count = 0;"}, {"sha": "ed5eace0b7e6cdb73dff719f49318a88978eabeb", "filename": "src/test/ui/or-patterns/slice-patterns.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fslice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fslice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fslice-patterns.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -2,8 +2,6 @@\n \n // run-pass\n \n-#![feature(or_patterns)]\n-\n #[derive(Debug, PartialEq)]\n enum MatchArm {\n     Arm(usize),"}, {"sha": "7de690d2d816a63d7186b1ceea4a272dba8d6c45", "filename": "src/test/ui/or-patterns/struct-like.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fstruct-like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2For-patterns%2Fstruct-like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fstruct-like.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(or_patterns)]\n-\n #[derive(Debug)]\n enum Other {\n     One,"}, {"sha": "cffff80eead11d10f5ab37a14cc68c2563b45555", "filename": "src/test/ui/pattern/bindings-after-at/or-patterns-box-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-box-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-box-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-box-patterns.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -3,7 +3,6 @@\n // run-pass\n \n #![feature(bindings_after_at)]\n-#![feature(or_patterns)]\n #![feature(box_patterns)]\n \n #[derive(Debug, PartialEq)]"}, {"sha": "a99ec0158f02df99016eb2325a755a432a460db9", "filename": "src/test/ui/pattern/bindings-after-at/or-patterns-slice-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-slice-patterns.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -3,7 +3,6 @@\n // run-pass\n \n #![feature(bindings_after_at)]\n-#![feature(or_patterns)]\n \n #[derive(Debug, PartialEq)]\n enum MatchArm {"}, {"sha": "caf6d91e0011b64ca175bdf5c9ea748d563a135c", "filename": "src/test/ui/pattern/bindings-after-at/or-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -3,7 +3,6 @@\n // run-pass\n \n #![feature(bindings_after_at)]\n-#![feature(or_patterns)]\n \n #[derive(Debug, PartialEq)]\n enum MatchArm {"}, {"sha": "09df15f754538a7b4d776ca095e009b5e6e2f6f5", "filename": "src/test/ui/pattern/bindings-after-at/pat-at-same-name-both.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -2,7 +2,6 @@\n // The code that is tested here lives in resolve (see `resolve_pattern_inner`).\n \n #![feature(bindings_after_at)]\n-#![feature(or_patterns)]\n \n fn main() {\n     fn f(a @ a @ a: ()) {}"}, {"sha": "77a493732243038031d5634e4c400f997e9dc7a8", "filename": "src/test/ui/pattern/bindings-after-at/pat-at-same-name-both.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,59 +1,59 @@\n error[E0415]: identifier `a` is bound more than once in this parameter list\n-  --> $DIR/pat-at-same-name-both.rs:8:14\n+  --> $DIR/pat-at-same-name-both.rs:7:14\n    |\n LL |     fn f(a @ a @ a: ()) {}\n    |              ^ used as parameter more than once\n \n error[E0415]: identifier `a` is bound more than once in this parameter list\n-  --> $DIR/pat-at-same-name-both.rs:8:18\n+  --> $DIR/pat-at-same-name-both.rs:7:18\n    |\n LL |     fn f(a @ a @ a: ()) {}\n    |                  ^ used as parameter more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:13:20\n+  --> $DIR/pat-at-same-name-both.rs:12:20\n    |\n LL |         Ok(a @ b @ a)\n    |                    ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:15:23\n+  --> $DIR/pat-at-same-name-both.rs:14:23\n    |\n LL |         | Err(a @ b @ a)\n    |                       ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:20:13\n+  --> $DIR/pat-at-same-name-both.rs:19:13\n    |\n LL |     let a @ a @ a = ();\n    |             ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:20:17\n+  --> $DIR/pat-at-same-name-both.rs:19:17\n    |\n LL |     let a @ a @ a = ();\n    |                 ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:23:21\n+  --> $DIR/pat-at-same-name-both.rs:22:21\n    |\n LL |     let ref a @ ref a = ();\n    |                     ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:25:29\n+  --> $DIR/pat-at-same-name-both.rs:24:29\n    |\n LL |     let ref mut a @ ref mut a = ();\n    |                             ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:28:17\n+  --> $DIR/pat-at-same-name-both.rs:27:17\n    |\n LL |     let a @ (Ok(a) | Err(a)) = Ok(());\n    |                 ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:28:26\n+  --> $DIR/pat-at-same-name-both.rs:27:26\n    |\n LL |     let a @ (Ok(a) | Err(a)) = Ok(());\n    |                          ^ used in a pattern more than once"}, {"sha": "b4c450bda5c728fa4d2f2cf93bd00a4a7440cd49", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -5,7 +5,7 @@\n #![feature(drain_filter)]\n #![feature(in_band_lifetimes)]\n #![feature(once_cell)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]\n #![feature(control_flow_enum)]"}, {"sha": "5826e9a4aa5b354a8023eb3f6ffa9910d5f18e5c", "filename": "src/tools/clippy/clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -72,11 +72,6 @@ impl EarlyLintPass for UnnestedOrPatterns {\n }\n \n fn lint_unnested_or_patterns(cx: &EarlyContext<'_>, pat: &Pat) {\n-    if !cx.sess.features_untracked().or_patterns {\n-        // Do not suggest nesting the patterns if the feature `or_patterns` is not enabled.\n-        return;\n-    }\n-\n     if let Ident(.., None) | Lit(_) | Wild | Path(..) | Range(..) | Rest | MacCall(_) = pat.kind {\n         // This is a leaf pattern, so cloning is unprofitable.\n         return;"}, {"sha": "7d3584333af6ef1313ee63edbce09f29f570b8dc", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,6 +1,6 @@\n #![feature(box_patterns)]\n #![feature(in_band_lifetimes)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(rustc_private)]\n #![recursion_limit = \"512\"]\n #![allow(clippy::missing_errors_doc, clippy::missing_panics_doc, clippy::must_use_candidate)]"}, {"sha": "46463a29e9b20deec853a9a7fab3293cad5017d5", "filename": "src/tools/clippy/tests/ui/unnested_or_patterns.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns.fixed?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(or_patterns)]\n #![feature(box_patterns)]\n #![warn(clippy::unnested_or_patterns)]\n #![allow(clippy::cognitive_complexity, clippy::match_ref_pats, clippy::upper_case_acronyms)]"}, {"sha": "8ce0738bfc27b3c31cfe88e858544cf8d3bddc71", "filename": "src/tools/clippy/tests/ui/unnested_or_patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(or_patterns)]\n #![feature(box_patterns)]\n #![warn(clippy::unnested_or_patterns)]\n #![allow(clippy::cognitive_complexity, clippy::match_ref_pats, clippy::upper_case_acronyms)]"}, {"sha": "f7cb513c15c90867ec1eceab3a656d66a0ba4bb7", "filename": "src/tools/clippy/tests/ui/unnested_or_patterns.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,5 +1,5 @@\n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:10:12\n+  --> $DIR/unnested_or_patterns.rs:9:12\n    |\n LL |     if let box 0 | box 2 = Box::new(0) {}\n    |            ^^^^^^^^^^^^^\n@@ -11,7 +11,7 @@ LL |     if let box (0 | 2) = Box::new(0) {}\n    |            ^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:11:12\n+  --> $DIR/unnested_or_patterns.rs:10:12\n    |\n LL |     if let box ((0 | 1)) | box (2 | 3) | box 4 = Box::new(0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ LL |     if let box (0 | 1 | 2 | 3 | 4) = Box::new(0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:13:12\n+  --> $DIR/unnested_or_patterns.rs:12:12\n    |\n LL |     if let &0 | C0 | &2 = &0 {}\n    |            ^^^^^^^^^^^^\n@@ -33,7 +33,7 @@ LL |     if let &(0 | 2) | C0 = &0 {}\n    |            ^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:14:12\n+  --> $DIR/unnested_or_patterns.rs:13:12\n    |\n LL |     if let &mut 0 | &mut 2 = &mut 0 {}\n    |            ^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     if let &mut (0 | 2) = &mut 0 {}\n    |            ^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:15:12\n+  --> $DIR/unnested_or_patterns.rs:14:12\n    |\n LL |     if let x @ 0 | x @ 2 = 0 {}\n    |            ^^^^^^^^^^^^^\n@@ -55,7 +55,7 @@ LL |     if let x @ (0 | 2) = 0 {}\n    |            ^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:16:12\n+  --> $DIR/unnested_or_patterns.rs:15:12\n    |\n LL |     if let (0, 1) | (0, 2) | (0, 3) = (0, 0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -66,7 +66,7 @@ LL |     if let (0, 1 | 2 | 3) = (0, 0) {}\n    |            ^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:17:12\n+  --> $DIR/unnested_or_patterns.rs:16:12\n    |\n LL |     if let (1, 0) | (2, 0) | (3, 0) = (0, 0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -77,7 +77,7 @@ LL |     if let (1 | 2 | 3, 0) = (0, 0) {}\n    |            ^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:18:12\n+  --> $DIR/unnested_or_patterns.rs:17:12\n    |\n LL |     if let (x, ..) | (x, 1) | (x, 2) = (0, 1) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -88,7 +88,7 @@ LL |     if let (x, ..) | (x, 1 | 2) = (0, 1) {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:19:12\n+  --> $DIR/unnested_or_patterns.rs:18:12\n    |\n LL |     if let [0] | [1] = [0] {}\n    |            ^^^^^^^^^\n@@ -99,7 +99,7 @@ LL |     if let [0 | 1] = [0] {}\n    |            ^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:20:12\n+  --> $DIR/unnested_or_patterns.rs:19:12\n    |\n LL |     if let [x, 0] | [x, 1] = [0, 1] {}\n    |            ^^^^^^^^^^^^^^^\n@@ -110,7 +110,7 @@ LL |     if let [x, 0 | 1] = [0, 1] {}\n    |            ^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:21:12\n+  --> $DIR/unnested_or_patterns.rs:20:12\n    |\n LL |     if let [x, 0] | [x, 1] | [x, 2] = [0, 1] {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -121,7 +121,7 @@ LL |     if let [x, 0 | 1 | 2] = [0, 1] {}\n    |            ^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:22:12\n+  --> $DIR/unnested_or_patterns.rs:21:12\n    |\n LL |     if let [x, ..] | [x, 1] | [x, 2] = [0, 1] {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -132,7 +132,7 @@ LL |     if let [x, ..] | [x, 1 | 2] = [0, 1] {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:24:12\n+  --> $DIR/unnested_or_patterns.rs:23:12\n    |\n LL |     if let TS(0, x) | TS(1, x) = TS(0, 0) {}\n    |            ^^^^^^^^^^^^^^^^^^^\n@@ -143,7 +143,7 @@ LL |     if let TS(0 | 1, x) = TS(0, 0) {}\n    |            ^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:25:12\n+  --> $DIR/unnested_or_patterns.rs:24:12\n    |\n LL |     if let TS(1, 0) | TS(2, 0) | TS(3, 0) = TS(0, 0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -154,7 +154,7 @@ LL |     if let TS(1 | 2 | 3, 0) = TS(0, 0) {}\n    |            ^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:26:12\n+  --> $DIR/unnested_or_patterns.rs:25:12\n    |\n LL |     if let TS(x, ..) | TS(x, 1) | TS(x, 2) = TS(0, 0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -165,7 +165,7 @@ LL |     if let TS(x, ..) | TS(x, 1 | 2) = TS(0, 0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:31:12\n+  --> $DIR/unnested_or_patterns.rs:30:12\n    |\n LL |     if let S { x: 0, y } | S { y, x: 1 } = (S { x: 0, y: 1 }) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d3539d798157b699c7aee8aea479741d38e8bbba", "filename": "src/tools/clippy/tests/ui/unnested_or_patterns2.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns2.fixed?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(or_patterns)]\n #![feature(box_patterns)]\n #![warn(clippy::unnested_or_patterns)]\n #![allow(clippy::cognitive_complexity, clippy::match_ref_pats)]"}, {"sha": "9cea5cdea69977755613df2f9d58e351406cb7df", "filename": "src/tools/clippy/tests/ui/unnested_or_patterns2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns2.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(or_patterns)]\n #![feature(box_patterns)]\n #![warn(clippy::unnested_or_patterns)]\n #![allow(clippy::cognitive_complexity, clippy::match_ref_pats)]"}, {"sha": "9042c9c00b1ac525a6c448fe9ea9a7a2343b448b", "filename": "src/tools/clippy/tests/ui/unnested_or_patterns2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns2.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,5 +1,5 @@\n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns2.rs:10:12\n+  --> $DIR/unnested_or_patterns2.rs:9:12\n    |\n LL |     if let Some(Some(0)) | Some(Some(1)) = None {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -11,7 +11,7 @@ LL |     if let Some(Some(0 | 1)) = None {}\n    |            ^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns2.rs:11:12\n+  --> $DIR/unnested_or_patterns2.rs:10:12\n    |\n LL |     if let Some(Some(0)) | Some(Some(1) | Some(2)) = None {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ LL |     if let Some(Some(0 | 1 | 2)) = None {}\n    |            ^^^^^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns2.rs:12:12\n+  --> $DIR/unnested_or_patterns2.rs:11:12\n    |\n LL |     if let Some(Some(0 | 1) | Some(2)) | Some(Some(3) | Some(4)) = None {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -33,7 +33,7 @@ LL |     if let Some(Some(0 | 1 | 2 | 3 | 4)) = None {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns2.rs:13:12\n+  --> $DIR/unnested_or_patterns2.rs:12:12\n    |\n LL |     if let Some(Some(0) | Some(1 | 2)) = None {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     if let Some(Some(0 | 1 | 2)) = None {}\n    |            ^^^^^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns2.rs:14:12\n+  --> $DIR/unnested_or_patterns2.rs:13:12\n    |\n LL |     if let ((0,),) | ((1,) | (2,),) = ((0,),) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -55,7 +55,7 @@ LL |     if let ((0 | 1 | 2,),) = ((0,),) {}\n    |            ^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns2.rs:15:12\n+  --> $DIR/unnested_or_patterns2.rs:14:12\n    |\n LL |     if let 0 | (1 | 2) = 0 {}\n    |            ^^^^^^^^^^^\n@@ -66,7 +66,7 @@ LL |     if let 0 | 1 | 2 = 0 {}\n    |            ^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns2.rs:16:12\n+  --> $DIR/unnested_or_patterns2.rs:15:12\n    |\n LL |     if let box (0 | 1) | (box 2 | box (3 | 4)) = Box::new(0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -77,7 +77,7 @@ LL |     if let box (0 | 1 | 2 | 3 | 4) = Box::new(0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns2.rs:17:12\n+  --> $DIR/unnested_or_patterns2.rs:16:12\n    |\n LL |     if let box box 0 | box (box 2 | box 4) = Box::new(Box::new(0)) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "6bd35057bfad12f8ef301d808fc12e38db203a4c", "filename": "src/tools/clippy/tests/ui/unnested_or_patterns3.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnested_or_patterns3.rs?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -1,6 +0,0 @@\n-#![warn(clippy::unnested_or_patterns)]\n-\n-// Test that `unnested_or_patterns` does not trigger without enabling `or_patterns`\n-fn main() {\n-    if let (0, 1) | (0, 2) | (0, 3) = (0, 0) {}\n-}"}, {"sha": "749393db124b67bed265c18304c7b3966043115e", "filename": "src/tools/clippy/tests/ui/while_let_on_iterator.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.fixed?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -2,7 +2,6 @@\n \n #![warn(clippy::while_let_on_iterator)]\n #![allow(clippy::never_loop, unreachable_code, unused_mut)]\n-#![feature(or_patterns)]\n \n fn base() {\n     let mut iter = 1..20;"}, {"sha": "30e3b82a7ccdd9e8669ec9cc4ed6d22e5645c9a8", "filename": "src/tools/clippy/tests/ui/while_let_on_iterator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.rs?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -2,7 +2,6 @@\n \n #![warn(clippy::while_let_on_iterator)]\n #![allow(clippy::never_loop, unreachable_code, unused_mut)]\n-#![feature(or_patterns)]\n \n fn base() {\n     let mut iter = 1..20;"}, {"sha": "6554977c798bc4195a9688b5c51d3b7afe7d1d81", "filename": "src/tools/clippy/tests/ui/while_let_on_iterator.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.stderr?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "patch": "@@ -1,43 +1,43 @@\n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:9:5\n+  --> $DIR/while_let_on_iterator.rs:8:5\n    |\n LL |     while let Option::Some(x) = iter.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n    |\n    = note: `-D clippy::while-let-on-iterator` implied by `-D warnings`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:14:5\n+  --> $DIR/while_let_on_iterator.rs:13:5\n    |\n LL |     while let Some(x) = iter.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:19:5\n+  --> $DIR/while_let_on_iterator.rs:18:5\n    |\n LL |     while let Some(_) = iter.next() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:102:9\n+  --> $DIR/while_let_on_iterator.rs:101:9\n    |\n LL |         while let Some([..]) = it.next() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for [..] in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:109:9\n+  --> $DIR/while_let_on_iterator.rs:108:9\n    |\n LL |         while let Some([_x]) = it.next() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for [_x] in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:122:9\n+  --> $DIR/while_let_on_iterator.rs:121:9\n    |\n LL |         while let Some(x @ [_]) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x @ [_] in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:154:9\n+  --> $DIR/while_let_on_iterator.rs:153:9\n    |\n LL |         while let Some(_) = y.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in y`"}]}