{"sha": "c0efd2a15bde43a96280d6e4480f33a5f80b7a53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZWZkMmExNWJkZTQzYTk2MjgwZDZlNDQ4MGYzM2E1ZjgwYjdhNTM=", "commit": {"author": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-06-17T02:40:37Z"}, "committer": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-06-17T02:40:37Z"}, "message": "Prefer `partition_point` to look up assoc items", "tree": {"sha": "248e952b54183549ccbb1c9cdded230697a23ba6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/248e952b54183549ccbb1c9cdded230697a23ba6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0efd2a15bde43a96280d6e4480f33a5f80b7a53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEx6scKn6IIf/+FpBu2rpbBylhwYoFAmDKtiUACgkQ2rpbBylh\nwYputRAAwqiCCuQONeu0nk21C7omfavzMrv2gubC6GjB2PKXBS9oPx0Ki6GmjqKQ\n/SYW79mkarM6GgO746H1nHf+KnqHb9i3rBvarDQuC+ASspCtpfOdOnMkiw3ITIOV\nXrerccWURv9p5JsA2cFxcCV0CRoyYEk3u99mowD+7rIR9F2J8wWFH87tUMe2i6MQ\nyIlDWapFprzJJr9WvfmmQWlFMInW0Nt5hwScPlOXNc1Yz4yp84I/HHRGvJda/Ppj\nE2srb5H8pmxCLr9SkAqVbN7+V5iKIAcEKWsOujStUBt9rDq4wRrNSTEIrDVItXtz\n+LRAhAuQBSo8KJo6twtGjaTpAeCo3zDzm7fnXGlG4cOGqSF8EspZq0qNHst3EX4x\niQIAebE0nnv6uYUnseuzJn390S1/Efv4uzmeqg3Dx8O7BClLnvsPmuUoSKUj5o24\n+3J5NC0Pg4yGDi3nQ7uiPZGjbRT6FKvYWr1dQyX0m+OmAMIiEuHl6TQ3XBdtBwRI\nDpkdWDoyR+/efeci+edMClFDtai1gw8RSs8ADtZsBgzs11GuUQXTxBthaJgcHLkg\n9N+dmIpczzmxcjjAFbgZYJun6p9Ovvcj4MPX7U1/8xFn8uy6qXVuaVRFXO20f11Q\n/p2LifxJeBwtF8Zr9gQspB7CgmLIY1FgzoskibX6J2n3bNKt0tg=\n=ye78\n-----END PGP SIGNATURE-----", "payload": "tree 248e952b54183549ccbb1c9cdded230697a23ba6\nparent 9fef8d91b4a6c5bfe07c025c434f2d623ad83337\nauthor Yuki Okushi <yuki.okushi@huawei.com> 1623897637 +0900\ncommitter Yuki Okushi <yuki.okushi@huawei.com> 1623897637 +0900\n\nPrefer `partition_point` to look up assoc items\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0efd2a15bde43a96280d6e4480f33a5f80b7a53", "html_url": "https://github.com/rust-lang/rust/commit/c0efd2a15bde43a96280d6e4480f33a5f80b7a53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0efd2a15bde43a96280d6e4480f33a5f80b7a53/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fef8d91b4a6c5bfe07c025c434f2d623ad83337", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fef8d91b4a6c5bfe07c025c434f2d623ad83337", "html_url": "https://github.com/rust-lang/rust/commit/9fef8d91b4a6c5bfe07c025c434f2d623ad83337"}], "stats": {"total": 52, "additions": 5, "deletions": 47}, "files": [{"sha": "65689ab769c1a1a55701d4aa5eba64f12833136f", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 5, "deletions": 47, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c0efd2a15bde43a96280d6e4480f33a5f80b7a53/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0efd2a15bde43a96280d6e4480f33a5f80b7a53/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=c0efd2a15bde43a96280d6e4480f33a5f80b7a53", "patch": "@@ -94,13 +94,15 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n         Q: Ord + ?Sized,\n         K: Borrow<Q>,\n     {\n-        // FIXME: This should be in the standard library as `equal_range`. See rust-lang/rfcs#2184.\n         match self.binary_search_idx(key) {\n             Err(_) => self.idxs_to_items_enumerated(&[]),\n \n             Ok(idx) => {\n-                let start = self.find_lower_bound(key, idx);\n-                let end = self.find_upper_bound(key, idx);\n+                let start = self.idx_sorted_by_item_key[..idx]\n+                    .partition_point(|&i| self.items[i].0.borrow() != key);\n+                let end = idx\n+                    + self.idx_sorted_by_item_key[idx..]\n+                        .partition_point(|&i| self.items[i].0.borrow() == key);\n                 self.idxs_to_items_enumerated(&self.idx_sorted_by_item_key[start..end])\n             }\n         }\n@@ -114,50 +116,6 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n         self.idx_sorted_by_item_key.binary_search_by(|&idx| self.items[idx].0.borrow().cmp(key))\n     }\n \n-    /// Returns the index into the `idx_sorted_by_item_key` array of the first item equal to\n-    /// `key`.\n-    ///\n-    /// `initial` must be an index into that same array for an item that is equal to `key`.\n-    fn find_lower_bound<Q>(&self, key: &Q, initial: usize) -> usize\n-    where\n-        Q: Ord + ?Sized,\n-        K: Borrow<Q>,\n-    {\n-        debug_assert!(self.items[self.idx_sorted_by_item_key[initial]].0.borrow() == key);\n-\n-        // FIXME: At present, this uses linear search, meaning lookup is only `O(log n)` if duplicate\n-        // entries are rare. It would be better to start with a linear search for the common case but\n-        // fall back to an exponential search if many duplicates are found. This applies to\n-        // `upper_bound` as well.\n-        let mut start = initial;\n-        while start != 0 && self.items[self.idx_sorted_by_item_key[start - 1]].0.borrow() == key {\n-            start -= 1;\n-        }\n-\n-        start\n-    }\n-\n-    /// Returns the index into the `idx_sorted_by_item_key` array of the first item greater than\n-    /// `key`, or `self.len()` if no such item exists.\n-    ///\n-    /// `initial` must be an index into that same array for an item that is equal to `key`.\n-    fn find_upper_bound<Q>(&self, key: &Q, initial: usize) -> usize\n-    where\n-        Q: Ord + ?Sized,\n-        K: Borrow<Q>,\n-    {\n-        debug_assert!(self.items[self.idx_sorted_by_item_key[initial]].0.borrow() == key);\n-\n-        // See the FIXME for `find_lower_bound`.\n-        let mut end = initial + 1;\n-        let len = self.items.len();\n-        while end < len && self.items[self.idx_sorted_by_item_key[end]].0.borrow() == key {\n-            end += 1;\n-        }\n-\n-        end\n-    }\n-\n     fn idxs_to_items_enumerated(&'a self, idxs: &'a [I]) -> impl 'a + Iterator<Item = (I, &'a V)> {\n         idxs.iter().map(move |&idx| (idx, &self.items[idx].1))\n     }"}]}