{"sha": "8796e012cbfa0bf63522e409edc10cbac5afaacd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3OTZlMDEyY2JmYTBiZjYzNTIyZTQwOWVkYzEwY2JhYzVhZmFhY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-13T08:15:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-13T08:15:45Z"}, "message": "Auto merge of #29498 - wthrowe:replace-pattern, r=alexcrichton\n\nIt appears this was left out of RFC rust-lang/rfcs#528 because it might be useful to\nalso generalize the second argument in some way.  That doesn't seem to\nprevent generalizing the first argument now, however.\n\nThis is a [breaking-change] because it could cause type-inference to\nfail where it previously succeeded.\n\nAlso update docs for a few other methods that still referred to `&str` instead of patterns.", "tree": {"sha": "9c7831f26abfe80fc99be28be9b394134ed3b907", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c7831f26abfe80fc99be28be9b394134ed3b907"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8796e012cbfa0bf63522e409edc10cbac5afaacd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8796e012cbfa0bf63522e409edc10cbac5afaacd", "html_url": "https://github.com/rust-lang/rust/commit/8796e012cbfa0bf63522e409edc10cbac5afaacd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8796e012cbfa0bf63522e409edc10cbac5afaacd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d", "html_url": "https://github.com/rust-lang/rust/commit/f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d"}, {"sha": "34fe201c1a6370a945398fda58c192cd4921afb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/34fe201c1a6370a945398fda58c192cd4921afb0", "html_url": "https://github.com/rust-lang/rust/commit/34fe201c1a6370a945398fda58c192cd4921afb0"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "f3bdb0efeef1d82bf72a2e92d76c4d2b43731a9c", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8796e012cbfa0bf63522e409edc10cbac5afaacd/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8796e012cbfa0bf63522e409edc10cbac5afaacd/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=8796e012cbfa0bf63522e409edc10cbac5afaacd", "patch": "@@ -857,9 +857,10 @@ impl str {\n         Utf16Units { encoder: Utf16Encoder::new(self[..].chars()) }\n     }\n \n-    /// Returns `true` if the given `&str` is a sub-slice of this string slice.\n+    /// Returns `true` if the given pattern matches a sub-slice of\n+    /// this string slice.\n     ///\n-    /// Returns `false` if it's not.\n+    /// Returns `false` if it does not.\n     ///\n     /// # Examples\n     ///\n@@ -876,9 +877,10 @@ impl str {\n         core_str::StrExt::contains(self, pat)\n     }\n \n-    /// Returns `true` if the given `&str` is a prefix of this string slice.\n+    /// Returns `true` if the given pattern matches a prefix of this\n+    /// string slice.\n     ///\n-    /// Returns `false` if it's not.\n+    /// Returns `false` if it does not.\n     ///\n     /// # Examples\n     ///\n@@ -895,9 +897,10 @@ impl str {\n         core_str::StrExt::starts_with(self, pat)\n     }\n \n-    /// Returns `true` if the given `&str` is a suffix of this string slice.\n+    /// Returns `true` if the given pattern matches a suffix of this\n+    /// string slice.\n     ///\n-    /// Returns `false` if not.\n+    /// Returns `false` if it does not.\n     ///\n     /// # Examples\n     ///\n@@ -1681,11 +1684,11 @@ impl str {\n         core_str::StrExt::parse(self)\n     }\n \n-    /// Replaces all occurrences of one string with another.\n+    /// Replaces all matches of a pattern with another string.\n     ///\n     /// `replace` creates a new [`String`], and copies the data from this string slice into it.\n-    /// While doing so, it attempts to find a sub-`&str`. If it finds it, it replaces it with\n-    /// the replacement string slice.\n+    /// While doing so, it attempts to find matches of a pattern. If it finds any, it\n+    /// replaces them with the replacement string slice.\n     ///\n     /// [`String`]: string/struct.String.html\n     ///\n@@ -1699,14 +1702,14 @@ impl str {\n     /// assert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n     /// ```\n     ///\n-    /// When a `&str` isn't found:\n+    /// When the pattern doesn't match:\n     ///\n     /// ```\n     /// let s = \"this is old\";\n     /// assert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn replace(&self, from: &str, to: &str) -> String {\n+    pub fn replace<'a, P: Pattern<'a>>(&'a self, from: P, to: &str) -> String {\n         let mut result = String::new();\n         let mut last_end = 0;\n         for (start, part) in self.match_indices(from) {"}, {"sha": "4d84855ddf97f3b7bf712b72b5b737ddc70b26cd", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8796e012cbfa0bf63522e409edc10cbac5afaacd/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8796e012cbfa0bf63522e409edc10cbac5afaacd/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=8796e012cbfa0bf63522e409edc10cbac5afaacd", "patch": "@@ -269,6 +269,15 @@ fn test_replace_2d() {\n     assert_eq!(data.replace(d, repl), data);\n }\n \n+#[test]\n+fn test_replace_pattern() {\n+    let data = \"abcd\u03b1\u03b2\u03b3\u03b4abcd\u03b1\u03b2\u03b3\u03b4\";\n+    assert_eq!(data.replace(\"d\u03b1\u03b2\", \"\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\"), \"abc\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b3\u03b4abc\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b3\u03b4\");\n+    assert_eq!(data.replace('\u03b3', \"\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\"), \"abcd\u03b1\u03b2\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b4abcd\u03b1\u03b2\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b4\");\n+    assert_eq!(data.replace(&['a', '\u03b3'] as &[_], \"\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\"), \"\ud83d\ude3a\ud83d\ude3a\ud83d\ude3abcd\u03b1\u03b2\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b4\ud83d\ude3a\ud83d\ude3a\ud83d\ude3abcd\u03b1\u03b2\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b4\");\n+    assert_eq!(data.replace(|c| c == '\u03b3', \"\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\"), \"abcd\u03b1\u03b2\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b4abcd\u03b1\u03b2\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b4\");\n+}\n+\n #[test]\n fn test_slice() {\n     assert_eq!(\"ab\", &\"abc\"[0..2]);"}]}