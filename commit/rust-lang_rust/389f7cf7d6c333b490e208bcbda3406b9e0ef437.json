{"sha": "389f7cf7d6c333b490e208bcbda3406b9e0ef437", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4OWY3Y2Y3ZDZjMzMzYjQ5MGUyMDhiY2JkYTM0MDZiOWUwZWY0Mzc=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-02T22:31:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-02T22:31:08Z"}, "message": "Rollup merge of #76745 - workingjubilee:move-wrapping-tests, r=matklad\n\nMove Wrapping<T> ui tests into library\n\nPart of #76268\nr? @matklad", "tree": {"sha": "f2d46469b168c7d122e59c9256146205b6b9404f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2d46469b168c7d122e59c9256146205b6b9404f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/389f7cf7d6c333b490e208bcbda3406b9e0ef437", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfd6otCRBK7hj4Ov3rIwAAdHIIAFvxBLcAz6j7Ler0x9xLVpQu\nfD/aqTSxw0Bur/cSiD9jtuEHfmQzLkFlVIlhqlCQDFizyrzntZh1LSupBHUoGww2\niJDnNoUsXVmqpp9t5+KsG7MOmnoA/BpyrSR+vIx7bv84nQj4vf8moOufB7acWw1q\nf/8rhIxogesvue/g51H3Sf3uGvM4BUkjK0GMihjpIRJliGKDo0zu4l5MIH75Ud8E\ncHPBxv+t6Fy6aq0BMawFGiiKjCpuWwFSw7q1hO0zh03V0kwy9H9wbHc+GRCxN0Ho\nvXPaF2A0/UKWSSTwFwYpWvJqYOQYCGetIQsHWGmx/4LHfetuwxqjUGoxK3htlZc=\n=gNS9\n-----END PGP SIGNATURE-----\n", "payload": "tree f2d46469b168c7d122e59c9256146205b6b9404f\nparent ca0ff934e939969e09abcc2d17f0cff89b8147ee\nparent 4e973966b95e5157754f91216456a3c37a1472b2\nauthor Jonas Schievink <jonasschievink@gmail.com> 1601677868 +0200\ncommitter GitHub <noreply@github.com> 1601677868 +0200\n\nRollup merge of #76745 - workingjubilee:move-wrapping-tests, r=matklad\n\nMove Wrapping<T> ui tests into library\n\nPart of #76268\nr? @matklad\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/389f7cf7d6c333b490e208bcbda3406b9e0ef437", "html_url": "https://github.com/rust-lang/rust/commit/389f7cf7d6c333b490e208bcbda3406b9e0ef437", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/389f7cf7d6c333b490e208bcbda3406b9e0ef437/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca0ff934e939969e09abcc2d17f0cff89b8147ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca0ff934e939969e09abcc2d17f0cff89b8147ee", "html_url": "https://github.com/rust-lang/rust/commit/ca0ff934e939969e09abcc2d17f0cff89b8147ee"}, {"sha": "4e973966b95e5157754f91216456a3c37a1472b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e973966b95e5157754f91216456a3c37a1472b2", "html_url": "https://github.com/rust-lang/rust/commit/4e973966b95e5157754f91216456a3c37a1472b2"}], "stats": {"total": 153, "additions": 76, "deletions": 77}, "files": [{"sha": "5d4ecb2669a96de3bc4c5db7b92687296ebc5f3e", "filename": "library/core/tests/num/wrapping.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/389f7cf7d6c333b490e208bcbda3406b9e0ef437/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389f7cf7d6c333b490e208bcbda3406b9e0ef437/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs?ref=389f7cf7d6c333b490e208bcbda3406b9e0ef437", "patch": "@@ -0,0 +1,76 @@\n+use core::num::Wrapping;\n+\n+macro_rules! wrapping_operation {\n+    ($result:expr, $lhs:ident $op:tt $rhs:expr) => {\n+        assert_eq!($result, $lhs $op $rhs);\n+        assert_eq!($result, &$lhs $op $rhs);\n+        assert_eq!($result, $lhs $op &$rhs);\n+        assert_eq!($result, &$lhs $op &$rhs);\n+    };\n+    ($result:expr, $op:tt $expr:expr) => {\n+        assert_eq!($result, $op $expr);\n+        assert_eq!($result, $op &$expr);\n+    };\n+}\n+\n+macro_rules! wrapping_assignment {\n+    ($result:expr, $lhs:ident $op:tt $rhs:expr) => {\n+        let mut lhs1 = $lhs;\n+        lhs1 $op $rhs;\n+        assert_eq!($result, lhs1);\n+\n+        let mut lhs2 = $lhs;\n+        lhs2 $op &$rhs;\n+        assert_eq!($result, lhs2);\n+    };\n+}\n+\n+macro_rules! wrapping_test {\n+    ($type:ty, $min:expr, $max:expr) => {\n+        #[test]\n+        fn wrapping_$type() {\n+            let zero: Wrapping<$type> = Wrapping(0);\n+            let one: Wrapping<$type> = Wrapping(1);\n+            let min: Wrapping<$type> = Wrapping($min);\n+            let max: Wrapping<$type> = Wrapping($max);\n+\n+            wrapping_operation!(min, max + one);\n+            wrapping_assignment!(min, max += one);\n+            wrapping_operation!(max, min - one);\n+            wrapping_assignment!(max, min -= one);\n+            wrapping_operation!(max, max * one);\n+            wrapping_assignment!(max, max *= one);\n+            wrapping_operation!(max, max / one);\n+            wrapping_assignment!(max, max /= one);\n+            wrapping_operation!(zero, max % one);\n+            wrapping_assignment!(zero, max %= one);\n+            wrapping_operation!(zero, zero & max);\n+            wrapping_assignment!(zero, zero &= max);\n+            wrapping_operation!(max, zero | max);\n+            wrapping_assignment!(max, zero |= max);\n+            wrapping_operation!(zero, max ^ max);\n+            wrapping_assignment!(zero, max ^= max);\n+            wrapping_operation!(zero, zero << 1usize);\n+            wrapping_assignment!(zero, zero <<= 1usize);\n+            wrapping_operation!(zero, zero >> 1usize);\n+            wrapping_assignment!(zero, zero >>= 1usize);\n+            wrapping_operation!(zero, -zero);\n+            wrapping_operation!(max, !min);\n+        }\n+    };\n+}\n+\n+wrapping_test!(i8, i8::MIN, i8::MAX);\n+wrapping_test!(i16, i16::MIN, i16::MAX);\n+wrapping_test!(i32, i32::MIN, i32::MAX);\n+wrapping_test!(i64, i64::MIN, i64::MAX);\n+#[cfg(not(target_os = \"emscripten\"))]\n+wrapping_test!(i128, i128::MIN, i128::MAX);\n+wrapping_test!(isize, isize::MIN, isize::MAX);\n+wrapping_test!(u8, u8::MIN, u8::MAX);\n+wrapping_test!(u16, u16::MIN, u16::MAX);\n+wrapping_test!(u32, u32::MIN, u32::MAX);\n+wrapping_test!(u64, u64::MIN, u64::MAX);\n+#[cfg(not(target_os = \"emscripten\"))]\n+wrapping_test!(u128, u128::MIN, u128::MAX);\n+wrapping_test!(usize, usize::MIN, usize::MAX);"}, {"sha": "f0bc479ee0ff28d2478b75fec605a5fb377452b0", "filename": "src/test/ui/wrapping-int-combinations.rs", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/ca0ff934e939969e09abcc2d17f0cff89b8147ee/src%2Ftest%2Fui%2Fwrapping-int-combinations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0ff934e939969e09abcc2d17f0cff89b8147ee/src%2Ftest%2Fui%2Fwrapping-int-combinations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrapping-int-combinations.rs?ref=ca0ff934e939969e09abcc2d17f0cff89b8147ee", "patch": "@@ -1,77 +0,0 @@\n-// run-pass\n-\n-use std::num::Wrapping;\n-\n-macro_rules! wrapping_operation {\n-    ($result:expr, $lhs:ident $op:tt $rhs:expr) => {\n-        assert_eq!($result, $lhs $op $rhs);\n-        assert_eq!($result, &$lhs $op $rhs);\n-        assert_eq!($result, $lhs $op &$rhs);\n-        assert_eq!($result, &$lhs $op &$rhs);\n-    };\n-    ($result:expr, $op:tt $expr:expr) => {\n-        assert_eq!($result, $op $expr);\n-        assert_eq!($result, $op &$expr);\n-    };\n-}\n-\n-macro_rules! wrapping_assignment {\n-    ($result:expr, $lhs:ident $op:tt $rhs:expr) => {\n-        let mut lhs1 = $lhs;\n-        lhs1 $op $rhs;\n-        assert_eq!($result, lhs1);\n-\n-        let mut lhs2 = $lhs;\n-        lhs2 $op &$rhs;\n-        assert_eq!($result, lhs2);\n-    };\n-}\n-\n-macro_rules! wrapping_test {\n-    ($type:ty, $min:expr, $max:expr) => {\n-        let zero: Wrapping<$type> = Wrapping(0);\n-        let one: Wrapping<$type> = Wrapping(1);\n-        let min: Wrapping<$type> = Wrapping($min);\n-        let max: Wrapping<$type> = Wrapping($max);\n-\n-        wrapping_operation!(min, max + one);\n-        wrapping_assignment!(min, max += one);\n-        wrapping_operation!(max, min - one);\n-        wrapping_assignment!(max, min -= one);\n-        wrapping_operation!(max, max * one);\n-        wrapping_assignment!(max, max *= one);\n-        wrapping_operation!(max, max / one);\n-        wrapping_assignment!(max, max /= one);\n-        wrapping_operation!(zero, max % one);\n-        wrapping_assignment!(zero, max %= one);\n-        wrapping_operation!(zero, zero & max);\n-        wrapping_assignment!(zero, zero &= max);\n-        wrapping_operation!(max, zero | max);\n-        wrapping_assignment!(max, zero |= max);\n-        wrapping_operation!(zero, max ^ max);\n-        wrapping_assignment!(zero, max ^= max);\n-        wrapping_operation!(zero, zero << 1usize);\n-        wrapping_assignment!(zero, zero <<= 1usize);\n-        wrapping_operation!(zero, zero >> 1usize);\n-        wrapping_assignment!(zero, zero >>= 1usize);\n-        wrapping_operation!(zero, -zero);\n-        wrapping_operation!(max, !min);\n-    };\n-}\n-\n-fn main() {\n-    wrapping_test!(i8, std::i8::MIN, std::i8::MAX);\n-    wrapping_test!(i16, std::i16::MIN, std::i16::MAX);\n-    wrapping_test!(i32, std::i32::MIN, std::i32::MAX);\n-    wrapping_test!(i64, std::i64::MIN, std::i64::MAX);\n-    #[cfg(not(target_os = \"emscripten\"))]\n-    wrapping_test!(i128, std::i128::MIN, std::i128::MAX);\n-    wrapping_test!(isize, std::isize::MIN, std::isize::MAX);\n-    wrapping_test!(u8, std::u8::MIN, std::u8::MAX);\n-    wrapping_test!(u16, std::u16::MIN, std::u16::MAX);\n-    wrapping_test!(u32, std::u32::MIN, std::u32::MAX);\n-    wrapping_test!(u64, std::u64::MIN, std::u64::MAX);\n-    #[cfg(not(target_os = \"emscripten\"))]\n-    wrapping_test!(u128, std::u128::MIN, std::u128::MAX);\n-    wrapping_test!(usize, std::usize::MIN, std::usize::MAX);\n-}"}]}