{"sha": "28f7d223f423e20ae643bf5946a09312db457cee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZjdkMjIzZjQyM2UyMGFlNjQzYmY1OTQ2YTA5MzEyZGI0NTdjZWU=", "commit": {"author": {"name": "Maik Klein", "email": "maikklein@googlemail.com", "date": "2017-10-26T08:32:39Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-18T15:08:49Z"}, "message": "Rename as_trans_item to as_mono_item", "tree": {"sha": "54ebc71c75bda112a416b938b64ce377fd29fb42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54ebc71c75bda112a416b938b64ce377fd29fb42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28f7d223f423e20ae643bf5946a09312db457cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28f7d223f423e20ae643bf5946a09312db457cee", "html_url": "https://github.com/rust-lang/rust/commit/28f7d223f423e20ae643bf5946a09312db457cee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28f7d223f423e20ae643bf5946a09312db457cee/comments", "author": {"login": "MaikKlein", "id": 1994306, "node_id": "MDQ6VXNlcjE5OTQzMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1994306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaikKlein", "html_url": "https://github.com/MaikKlein", "followers_url": "https://api.github.com/users/MaikKlein/followers", "following_url": "https://api.github.com/users/MaikKlein/following{/other_user}", "gists_url": "https://api.github.com/users/MaikKlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaikKlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaikKlein/subscriptions", "organizations_url": "https://api.github.com/users/MaikKlein/orgs", "repos_url": "https://api.github.com/users/MaikKlein/repos", "events_url": "https://api.github.com/users/MaikKlein/events{/privacy}", "received_events_url": "https://api.github.com/users/MaikKlein/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17bfd74955dcc7555a4409cef55590c37baca4dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/17bfd74955dcc7555a4409cef55590c37baca4dd", "html_url": "https://github.com/rust-lang/rust/commit/17bfd74955dcc7555a4409cef55590c37baca4dd"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "1c174293cca0bfcb6de1228c851344e766a5bf76", "filename": "src/librustc_mir/monomorphize/mono_item.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28f7d223f423e20ae643bf5946a09312db457cee/src%2Flibrustc_mir%2Fmonomorphize%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f7d223f423e20ae643bf5946a09312db457cee/src%2Flibrustc_mir%2Fmonomorphize%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmono_item.rs?ref=28f7d223f423e20ae643bf5946a09312db457cee", "patch": "@@ -82,7 +82,7 @@ pub enum InstantiationMode {\n }\n \n pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n-    fn as_trans_item(&self) -> &MonoItem<'tcx>;\n+    fn as_mono_item(&self) -> &MonoItem<'tcx>;\n \n     fn instantiation_mode(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>)\n@@ -92,7 +92,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n                 tcx.sess.opts.optimize != OptLevel::No\n             });\n \n-        match *self.as_trans_item() {\n+        match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => {\n                 // If this function isn't inlined or otherwise has explicit\n                 // linkage, then we'll be creating a globally shared version.\n@@ -132,7 +132,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n     }\n \n     fn explicit_linkage(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<Linkage> {\n-        let def_id = match *self.as_trans_item() {\n+        let def_id = match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => instance.def_id(),\n             MonoItem::Static(node_id) => tcx.hir.local_def_id(node_id),\n             MonoItem::GlobalAsm(..) => return None,\n@@ -182,7 +182,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n     /// which will never be accessed) in its place.\n     fn is_instantiable(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> bool {\n         debug!(\"is_instantiable({:?})\", self);\n-        let (def_id, substs) = match *self.as_trans_item() {\n+        let (def_id, substs) = match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => (instance.def_id(), instance.substs),\n             MonoItem::Static(node_id) => (tcx.hir.local_def_id(node_id), Substs::empty()),\n             // global asm never has predicates\n@@ -196,7 +196,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n     fn to_string(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> String {\n         let hir_map = &tcx.hir;\n \n-        return match *self.as_trans_item() {\n+        return match *self.as_mono_item() {\n             MonoItem::Fn(instance) => {\n                 to_string_internal(tcx, \"fn \", instance)\n             },\n@@ -224,7 +224,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n }\n \n impl<'a, 'tcx> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n-    fn as_trans_item(&self) -> &MonoItem<'tcx> {\n+    fn as_mono_item(&self) -> &MonoItem<'tcx> {\n         self\n     }\n }"}, {"sha": "678771aae3289a6a814c5d8701f31ce9b32fba98", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28f7d223f423e20ae643bf5946a09312db457cee/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f7d223f423e20ae643bf5946a09312db457cee/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=28f7d223f423e20ae643bf5946a09312db457cee", "patch": "@@ -46,7 +46,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n                self.to_raw_string(),\n                ccx.codegen_unit().name());\n \n-        match *self.as_trans_item() {\n+        match *self.as_mono_item() {\n             MonoItem::Static(node_id) => {\n                 let tcx = ccx.tcx();\n                 let item = tcx.hir.expect_item(node_id);\n@@ -93,7 +93,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n \n         debug!(\"symbol {}\", &symbol_name);\n \n-        match *self.as_trans_item() {\n+        match *self.as_mono_item() {\n             MonoItem::Static(node_id) => {\n                 predefine_static(ccx, node_id, linkage, visibility, &symbol_name);\n             }\n@@ -110,7 +110,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n     }\n \n     fn symbol_name(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ty::SymbolName {\n-        match *self.as_trans_item() {\n+        match *self.as_mono_item() {\n             MonoItem::Fn(instance) => tcx.symbol_name(instance),\n             MonoItem::Static(node_id) => {\n                 let def_id = tcx.hir.local_def_id(node_id);\n@@ -126,7 +126,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n     }\n \n     fn local_span(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<Span> {\n-        match *self.as_trans_item() {\n+        match *self.as_mono_item() {\n             MonoItem::Fn(Instance { def, .. }) => {\n                 tcx.hir.as_local_node_id(def.def_id())\n             }\n@@ -138,7 +138,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n     }\n \n     fn is_generic_fn(&self) -> bool {\n-        match *self.as_trans_item() {\n+        match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => {\n                 instance.substs.types().next().is_some()\n             }\n@@ -148,7 +148,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n     }\n \n     fn to_raw_string(&self) -> String {\n-        match *self.as_trans_item() {\n+        match *self.as_mono_item() {\n             MonoItem::Fn(instance) => {\n                 format!(\"Fn({:?}, {})\",\n                          instance.def,"}]}