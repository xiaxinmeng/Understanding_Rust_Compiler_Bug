{"sha": "109d5c768859b91293fddd24e0235a35abb6ea50", "node_id": "C_kwDOAAsO6NoAKDEwOWQ1Yzc2ODg1OWI5MTI5M2ZkZGQyNGUwMjM1YTM1YWJiNmVhNTA", "commit": {"author": {"name": "Alexander", "email": "alex.m.vlasov@gmail.com", "date": "2021-10-06T15:53:11Z"}, "committer": {"name": "Alexander", "email": "alex.m.vlasov@gmail.com", "date": "2021-10-06T15:53:11Z"}, "message": "add MIR artifacts", "tree": {"sha": "94e4d37e97098929586d79550f5d2d4c7961b909", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94e4d37e97098929586d79550f5d2d4c7961b909"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/109d5c768859b91293fddd24e0235a35abb6ea50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/109d5c768859b91293fddd24e0235a35abb6ea50", "html_url": "https://github.com/rust-lang/rust/commit/109d5c768859b91293fddd24e0235a35abb6ea50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/109d5c768859b91293fddd24e0235a35abb6ea50/comments", "author": {"login": "shamatar", "id": 6467575, "node_id": "MDQ6VXNlcjY0Njc1NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shamatar", "html_url": "https://github.com/shamatar", "followers_url": "https://api.github.com/users/shamatar/followers", "following_url": "https://api.github.com/users/shamatar/following{/other_user}", "gists_url": "https://api.github.com/users/shamatar/gists{/gist_id}", "starred_url": "https://api.github.com/users/shamatar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions", "organizations_url": "https://api.github.com/users/shamatar/orgs", "repos_url": "https://api.github.com/users/shamatar/repos", "events_url": "https://api.github.com/users/shamatar/events{/privacy}", "received_events_url": "https://api.github.com/users/shamatar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shamatar", "id": 6467575, "node_id": "MDQ6VXNlcjY0Njc1NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shamatar", "html_url": "https://github.com/shamatar", "followers_url": "https://api.github.com/users/shamatar/followers", "following_url": "https://api.github.com/users/shamatar/following{/other_user}", "gists_url": "https://api.github.com/users/shamatar/gists{/gist_id}", "starred_url": "https://api.github.com/users/shamatar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions", "organizations_url": "https://api.github.com/users/shamatar/orgs", "repos_url": "https://api.github.com/users/shamatar/repos", "events_url": "https://api.github.com/users/shamatar/events{/privacy}", "received_events_url": "https://api.github.com/users/shamatar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d61f95fead2102e2f515e5c220fbc6f8671616cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d61f95fead2102e2f515e5c220fbc6f8671616cb", "html_url": "https://github.com/rust-lang/rust/commit/d61f95fead2102e2f515e5c220fbc6f8671616cb"}], "stats": {"total": 629, "additions": 626, "deletions": 3}, "files": [{"sha": "c7226573d75c52f17eaed715b28b5b2b0651203e", "filename": "src/test/mir-opt/lower_array_len.array_bound.InstCombine.diff", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.InstCombine.diff?ref=109d5c768859b91293fddd24e0235a35abb6ea50", "patch": "@@ -0,0 +1,66 @@\n+- // MIR for `array_bound` before InstCombine\n++ // MIR for `array_bound` after InstCombine\n+  \n+  fn array_bound(_1: usize, _2: &[u8; N]) -> u8 {\n+      debug index => _1;                   // in scope 0 at $DIR/lower_array_len.rs:6:36: 6:41\n+      debug slice => _2;                   // in scope 0 at $DIR/lower_array_len.rs:6:50: 6:55\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len.rs:6:70: 6:72\n+      let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+      let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+      let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+      let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+      let mut _7: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+      let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+      let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+      let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+      let mut _11: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n++         _7 = _2;                         // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          _11 = _7;                        // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:20: 7:21\n+-         _5 = Len((*_11));                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n++         _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+      }\n+  \n+      bb1: {\n+          StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+          _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+-         _9 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n++         _9 = const N;                    // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+          _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+      }\n+  \n+      bb2: {\n+          _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+          StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:9:5: 9:6\n+          goto -> bb4;                     // scope 0 at $DIR/lower_array_len.rs:7:5: 11:6\n+      }\n+  \n+      bb3: {\n+          _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len.rs:10:9: 10:11\n+          goto -> bb4;                     // scope 0 at $DIR/lower_array_len.rs:7:5: 11:6\n+      }\n+  \n+      bb4: {\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:11:5: 11:6\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:12:2: 12:2\n+      }\n+  }\n+  "}, {"sha": "d6c1c92cd9177a273a7b11cbefd73ffe7c1c41e9", "filename": "src/test/mir-opt/lower_array_len.array_bound.NormalizeArrayLen.diff", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff?ref=109d5c768859b91293fddd24e0235a35abb6ea50", "patch": "@@ -0,0 +1,68 @@\n+- // MIR for `array_bound` before NormalizeArrayLen\n++ // MIR for `array_bound` after NormalizeArrayLen\n+  \n+  fn array_bound(_1: usize, _2: &[u8; N]) -> u8 {\n+      debug index => _1;                   // in scope 0 at $DIR/lower_array_len.rs:6:36: 6:41\n+      debug slice => _2;                   // in scope 0 at $DIR/lower_array_len.rs:6:50: 6:55\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len.rs:6:70: 6:72\n+      let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+      let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+      let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+      let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+      let mut _7: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+      let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+      let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+      let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n++     let mut _11: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n++         StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n++         _11 = _7;                        // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:20: 7:21\n+-         _5 = Len((*_6));                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n++         _5 = Len((*_11));                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n++         StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          goto -> bb1;                     // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+      }\n+  \n+      bb1: {\n+          StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          switchInt(move _3) -> [false: bb4, otherwise: bb2]; // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+      }\n+  \n+      bb2: {\n+          StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+          _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+          _9 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+          _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb3; // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+      }\n+  \n+      bb3: {\n+          _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+          StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:9:5: 9:6\n+          goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:7:5: 11:6\n+      }\n+  \n+      bb4: {\n+          _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len.rs:10:9: 10:11\n+          goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:7:5: 11:6\n+      }\n+  \n+      bb5: {\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:11:5: 11:6\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:12:2: 12:2\n+      }\n+  }\n+  "}, {"sha": "5cf3312cd641b528b4b737184e8c7d0b027e50b2", "filename": "src/test/mir-opt/lower_array_len.array_bound.SimplifyLocals.diff", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff?ref=109d5c768859b91293fddd24e0235a35abb6ea50", "patch": "@@ -0,0 +1,73 @@\n+- // MIR for `array_bound` before SimplifyLocals\n++ // MIR for `array_bound` after SimplifyLocals\n+  \n+  fn array_bound(_1: usize, _2: &[u8; N]) -> u8 {\n+      debug index => _1;                   // in scope 0 at $DIR/lower_array_len.rs:6:36: 6:41\n+      debug slice => _2;                   // in scope 0 at $DIR/lower_array_len.rs:6:50: 6:55\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len.rs:6:70: 6:72\n+      let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+      let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+      let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-     let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-     let mut _7: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-     let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+-     let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+-     let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+-     let mut _11: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n++     let _6: usize;                       // in scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n++     let mut _7: usize;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n++     let mut _8: bool;                    // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         _7 = _2;                         // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         _11 = _7;                        // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:20: 7:21\n+          _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+-         _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+-         _9 = const N;                    // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+-         _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+-         assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n++         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n++         _6 = _1;                         // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n++         _7 = const N;                    // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n++         _8 = Lt(_6, _7);                 // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb2; // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+      }\n+  \n+      bb2: {\n+-         _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+-         StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:9:5: 9:6\n++         _0 = (*_2)[_6];                  // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n++         StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:9:5: 9:6\n+          goto -> bb4;                     // scope 0 at $DIR/lower_array_len.rs:7:5: 11:6\n+      }\n+  \n+      bb3: {\n+          _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len.rs:10:9: 10:11\n+          goto -> bb4;                     // scope 0 at $DIR/lower_array_len.rs:7:5: 11:6\n+      }\n+  \n+      bb4: {\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:11:5: 11:6\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:12:2: 12:2\n+      }\n+  }\n+  "}, {"sha": "5622d48453213636615700b6928fa0140b05b27a", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.InstCombine.diff", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.InstCombine.diff?ref=109d5c768859b91293fddd24e0235a35abb6ea50", "patch": "@@ -0,0 +1,79 @@\n+- // MIR for `array_bound_mut` before InstCombine\n++ // MIR for `array_bound_mut` after InstCombine\n+  \n+  fn array_bound_mut(_1: usize, _2: &mut [u8; N]) -> u8 {\n+      debug index => _1;                   // in scope 0 at $DIR/lower_array_len.rs:17:40: 17:45\n+      debug slice => _2;                   // in scope 0 at $DIR/lower_array_len.rs:17:54: 17:59\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len.rs:17:78: 17:80\n+      let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+      let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+      let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+      let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+      let mut _7: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+      let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+      let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+      let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+      let _11: usize;                      // in scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+      let mut _12: usize;                  // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+      let mut _13: bool;                   // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+      let mut _14: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageLive(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          _14 = _7;                        // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:20: 18:21\n+-         _5 = Len((*_14));                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n++         _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageDead(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+      }\n+  \n+      bb1: {\n+          StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+          _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+-         _9 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n++         _9 = const N;                    // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+          _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+      }\n+  \n+      bb2: {\n+          _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+          StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:20:5: 20:6\n+          goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:18:5: 24:6\n+      }\n+  \n+      bb3: {\n+          StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+          _11 = const 0_usize;             // scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+-         _12 = Len((*_2));                // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n++         _12 = const N;                   // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+          _13 = Lt(_11, _12);              // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+          assert(move _13, \"index out of bounds: the length is {} but the index is {}\", move _12, _11) -> bb4; // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+      }\n+  \n+      bb4: {\n+          (*_2)[_11] = const 42_u8;        // scope 0 at $DIR/lower_array_len.rs:21:9: 21:22\n+          StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:21:22: 21:23\n+          _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len.rs:23:9: 23:11\n+          goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:18:5: 24:6\n+      }\n+  \n+      bb5: {\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:24:5: 24:6\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:25:2: 25:2\n+      }\n+  }\n+  "}, {"sha": "11fc20aa693c71c18ffdefdf6fc62e68cac6d5d8", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.NormalizeArrayLen.diff", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff?ref=109d5c768859b91293fddd24e0235a35abb6ea50", "patch": "@@ -0,0 +1,81 @@\n+- // MIR for `array_bound_mut` before NormalizeArrayLen\n++ // MIR for `array_bound_mut` after NormalizeArrayLen\n+  \n+  fn array_bound_mut(_1: usize, _2: &mut [u8; N]) -> u8 {\n+      debug index => _1;                   // in scope 0 at $DIR/lower_array_len.rs:17:40: 17:45\n+      debug slice => _2;                   // in scope 0 at $DIR/lower_array_len.rs:17:54: 17:59\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len.rs:17:78: 17:80\n+      let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+      let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+      let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+      let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+      let mut _7: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+      let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+      let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+      let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+      let _11: usize;                      // in scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+      let mut _12: usize;                  // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+      let mut _13: bool;                   // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n++     let mut _14: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n++         StorageLive(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n++         _14 = _7;                        // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:20: 18:21\n+-         _5 = Len((*_6));                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n++         _5 = Len((*_14));                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n++         StorageDead(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          goto -> bb1;                     // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+      }\n+  \n+      bb1: {\n+          StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          switchInt(move _3) -> [false: bb4, otherwise: bb2]; // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+      }\n+  \n+      bb2: {\n+          StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+          _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+          _9 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+          _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb3; // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+      }\n+  \n+      bb3: {\n+          _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+          StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:20:5: 20:6\n+          goto -> bb6;                     // scope 0 at $DIR/lower_array_len.rs:18:5: 24:6\n+      }\n+  \n+      bb4: {\n+          StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+          _11 = const 0_usize;             // scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+          _12 = Len((*_2));                // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+          _13 = Lt(_11, _12);              // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+          assert(move _13, \"index out of bounds: the length is {} but the index is {}\", move _12, _11) -> bb5; // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+      }\n+  \n+      bb5: {\n+          (*_2)[_11] = const 42_u8;        // scope 0 at $DIR/lower_array_len.rs:21:9: 21:22\n+          StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:21:22: 21:23\n+          _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len.rs:23:9: 23:11\n+          goto -> bb6;                     // scope 0 at $DIR/lower_array_len.rs:18:5: 24:6\n+      }\n+  \n+      bb6: {\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:24:5: 24:6\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:25:2: 25:2\n+      }\n+  }\n+  "}, {"sha": "f72aee0e502804108014d4fddebdabd4aae6f66c", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.SimplifyLocals.diff", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff?ref=109d5c768859b91293fddd24e0235a35abb6ea50", "patch": "@@ -0,0 +1,96 @@\n+- // MIR for `array_bound_mut` before SimplifyLocals\n++ // MIR for `array_bound_mut` after SimplifyLocals\n+  \n+  fn array_bound_mut(_1: usize, _2: &mut [u8; N]) -> u8 {\n+      debug index => _1;                   // in scope 0 at $DIR/lower_array_len.rs:17:40: 17:45\n+      debug slice => _2;                   // in scope 0 at $DIR/lower_array_len.rs:17:54: 17:59\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len.rs:17:78: 17:80\n+      let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+      let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+      let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-     let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-     let mut _7: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-     let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+-     let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+-     let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+-     let _11: usize;                      // in scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+-     let mut _12: usize;                  // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+-     let mut _13: bool;                   // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+-     let mut _14: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n++     let _6: usize;                       // in scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n++     let mut _7: usize;                   // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n++     let mut _8: bool;                    // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n++     let _9: usize;                       // in scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n++     let mut _10: usize;                  // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n++     let mut _11: bool;                   // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageLive(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         _14 = _7;                        // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:20: 18:21\n+          _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageDead(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+-         _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+-         _9 = const N;                    // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+-         _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+-         assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n++         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n++         _6 = _1;                         // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n++         _7 = const N;                    // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n++         _8 = Lt(_6, _7);                 // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb2; // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+      }\n+  \n+      bb2: {\n+-         _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+-         StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:20:5: 20:6\n++         _0 = (*_2)[_6];                  // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n++         StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:20:5: 20:6\n+          goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:18:5: 24:6\n+      }\n+  \n+      bb3: {\n+-         StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+-         _11 = const 0_usize;             // scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+-         _12 = const N;                   // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+-         _13 = Lt(const 0_usize, _12);    // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+-         assert(move _13, \"index out of bounds: the length is {} but the index is {}\", move _12, const 0_usize) -> bb4; // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n++         StorageLive(_9);                 // scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n++         _9 = const 0_usize;              // scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n++         _10 = const N;                   // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n++         _11 = Lt(const 0_usize, _10);    // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n++         assert(move _11, \"index out of bounds: the length is {} but the index is {}\", move _10, const 0_usize) -> bb4; // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+      }\n+  \n+      bb4: {\n+-         (*_2)[_11] = const 42_u8;        // scope 0 at $DIR/lower_array_len.rs:21:9: 21:22\n+-         StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:21:22: 21:23\n++         (*_2)[_9] = const 42_u8;         // scope 0 at $DIR/lower_array_len.rs:21:9: 21:22\n++         StorageDead(_9);                 // scope 0 at $DIR/lower_array_len.rs:21:22: 21:23\n+          _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len.rs:23:9: 23:11\n+          goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:18:5: 24:6\n+      }\n+  \n+      bb5: {\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:24:5: 24:6\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:25:2: 25:2\n+      }\n+  }\n+  "}, {"sha": "a818de39bcc8406769768b6ca350dae3b598aa98", "filename": "src/test/mir-opt/lower_array_len.array_len.InstCombine.diff", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.InstCombine.diff?ref=109d5c768859b91293fddd24e0235a35abb6ea50", "patch": "@@ -0,0 +1,27 @@\n+- // MIR for `array_len` before InstCombine\n++ // MIR for `array_len` after InstCombine\n+  \n+  fn array_len(_1: &[u8; N]) -> usize {\n+      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:30:34: 30:37\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:30:52: 30:57\n+      let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+      let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+      let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         _3 = &(*_1);                     // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n++         _3 = _1;                         // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:7: 31:8\n+-         _0 = Len((*_4));                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n++         _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:13: 31:14\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:32:2: 32:2\n+      }\n+  }\n+  "}, {"sha": "892fdda818ebd1694eeec93f89235b3f50c1bd4b", "filename": "src/test/mir-opt/lower_array_len.array_len.NormalizeArrayLen.diff", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff?ref=109d5c768859b91293fddd24e0235a35abb6ea50", "patch": "@@ -0,0 +1,30 @@\n+- // MIR for `array_len` before NormalizeArrayLen\n++ // MIR for `array_len` after NormalizeArrayLen\n+  \n+  fn array_len(_1: &[u8; N]) -> usize {\n+      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:30:34: 30:37\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:30:52: 30:57\n+      let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+      let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n++     let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          _3 = &(*_1);                     // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n++         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n++         _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:7: 31:8\n+-         _0 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n++         _0 = Len((*_4));                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n++         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          goto -> bb1;                     // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:13: 31:14\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:32:2: 32:2\n+      }\n+  }\n+  "}, {"sha": "20e2685aba59f69656e5cbe1080ca84af6122ebf", "filename": "src/test/mir-opt/lower_array_len.array_len.SimplifyLocals.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff?ref=109d5c768859b91293fddd24e0235a35abb6ea50", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `array_len` before SimplifyLocals\n++ // MIR for `array_len` after SimplifyLocals\n+  \n+  fn array_len(_1: &[u8; N]) -> usize {\n+      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:30:34: 30:37\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:30:52: 30:57\n+-     let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-     let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-     let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         _3 = _1;                         // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:7: 31:8\n+          _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:13: 31:14\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:32:2: 32:2\n+      }\n+  }\n+  "}, {"sha": "ce12531e84bbf24fc2328e93095e6951c31de7b7", "filename": "src/test/mir-opt/lower_array_len.array_len_by_value.InstCombine.diff", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.InstCombine.diff?ref=109d5c768859b91293fddd24e0235a35abb6ea50", "patch": "@@ -0,0 +1,26 @@\n+- // MIR for `array_len_by_value` before InstCombine\n++ // MIR for `array_len_by_value` after InstCombine\n+  \n+  fn array_len_by_value(_1: [u8; N]) -> usize {\n+      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:37:43: 37:46\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:37:60: 37:65\n+      let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+      let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+      let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          _3 = &_1;                        // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:38:7: 38:8\n+-         _0 = Len((*_4));                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n++         _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:38:13: 38:14\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:39:2: 39:2\n+      }\n+  }\n+  "}, {"sha": "201fffbf0d45a5752960262c671d39009d88f8b5", "filename": "src/test/mir-opt/lower_array_len.array_len_by_value.NormalizeArrayLen.diff", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff?ref=109d5c768859b91293fddd24e0235a35abb6ea50", "patch": "@@ -0,0 +1,30 @@\n+- // MIR for `array_len_by_value` before NormalizeArrayLen\n++ // MIR for `array_len_by_value` after NormalizeArrayLen\n+  \n+  fn array_len_by_value(_1: [u8; N]) -> usize {\n+      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:37:43: 37:46\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:37:60: 37:65\n+      let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+      let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n++     let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          _3 = &_1;                        // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n++         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n++         _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:38:7: 38:8\n+-         _0 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n++         _0 = Len((*_4));                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n++         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          goto -> bb1;                     // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:38:13: 38:14\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:39:2: 39:2\n+      }\n+  }\n+  "}, {"sha": "7e7b708145f40a4ebd2b6c6dd298c3d7c650ab4a", "filename": "src/test/mir-opt/lower_array_len.array_len_by_value.SimplifyLocals.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff?ref=109d5c768859b91293fddd24e0235a35abb6ea50", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `array_len_by_value` before SimplifyLocals\n++ // MIR for `array_len_by_value` after SimplifyLocals\n+  \n+  fn array_len_by_value(_1: [u8; N]) -> usize {\n+      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:37:43: 37:46\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:37:60: 37:65\n+-     let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-     let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-     let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-         StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-         _3 = &_1;                        // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-         _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-         _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-         StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:38:7: 38:8\n+          _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-         StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:38:13: 38:14\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:39:2: 39:2\n+      }\n+  }\n+  "}, {"sha": "d4905d4ac02ea47fa1eb2e49960fd7fbcad983c3", "filename": "src/test/mir-opt/lower_array_len.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109d5c768859b91293fddd24e0235a35abb6ea50/src%2Ftest%2Fmir-opt%2Flower_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.rs?ref=109d5c768859b91293fddd24e0235a35abb6ea50", "patch": "@@ -1,6 +1,3 @@\n-\n-Viewed\n-@@ -0,0 +1,47 @@\n // compile-flags: -Z mir-opt-level=3\n \n // EMIT_MIR lower_array_len.array_bound.NormalizeArrayLen.diff"}]}