{"sha": "ae2551825dbe5a688d00e1d1e7aa7dbaec274e50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMjU1MTgyNWRiZTVhNjg4ZDAwZTFkMWU3YWE3ZGJhZWMyNzRlNTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-30T13:14:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-30T13:14:53Z"}, "message": "Rollup merge of #59380 - philipc:thinlto-variant, r=michaelwoerister\n\nFix invalid DWARF for enums when using ThinLTO\n\nWe were setting the same identifier for both the DW_TAG_structure_type\nand the DW_TAG_variant_part. This becomes a problem when using ThinLTO\nbecauses it uses the identifier as a key for a map of types that is used\nto delete duplicates based on the ODR, so one of them is deleted as a\nduplicate, resulting in invalid DWARF.\n\nThe DW_TAG_variant_part isn't a standalone type, so it doesn't need\nan identifier. Fix by omitting its identifier.\n\nODR uniquing is [enabled here](https://github.com/rust-lang/rust/blob/f21dee2c6179276321a88a63300dce74ff707e92/src/rustllvm/PassWrapper.cpp#L1101).", "tree": {"sha": "4df81cb1ef65b47a84456e6c9fb735765042b5bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4df81cb1ef65b47a84456e6c9fb735765042b5bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae2551825dbe5a688d00e1d1e7aa7dbaec274e50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcn2vOCRBK7hj4Ov3rIwAAdHIIAEmvSFW8YkKrKJxvKlUNq2cq\nUju6AscV6s7bMHFo3kZfypy//zP9nRAG++TcK1XcPo4RcWAF2VmGaA31OpNXk40Z\nZMBWbTKU+oxJ0sS7p/SKYio92eDjb/sKA8pJ2cMlG5zuvhV6eVV0OknhyO/ViRwD\nHYe7f2pvd+EyAwth+gwNwO0TuAiuM9rckjJC6YbkXir4MY2Ot1mtt5Mn4AxPt14Q\nyFVB5FMaUGveh/F5wzu1cvKtUzC5OlaxAnGHcPXQ0gjyjXtv5VW6MfEroOvo5OBW\neGZd8WgDvENp5oP0I/5BeXavbeWeuAIG3T0KIMNg/JpevEHdjokiuKDyIuwFsw8=\n=MA7M\n-----END PGP SIGNATURE-----\n", "payload": "tree 4df81cb1ef65b47a84456e6c9fb735765042b5bf\nparent be6b4c06be1481c0ade7ed683fc36b039166a8a1\nparent 3a5a8a529a14271f5d8c21bec8746edfa93eec5f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553951693 +0100\ncommitter GitHub <noreply@github.com> 1553951693 +0100\n\nRollup merge of #59380 - philipc:thinlto-variant, r=michaelwoerister\n\nFix invalid DWARF for enums when using ThinLTO\n\nWe were setting the same identifier for both the DW_TAG_structure_type\nand the DW_TAG_variant_part. This becomes a problem when using ThinLTO\nbecauses it uses the identifier as a key for a map of types that is used\nto delete duplicates based on the ODR, so one of them is deleted as a\nduplicate, resulting in invalid DWARF.\n\nThe DW_TAG_variant_part isn't a standalone type, so it doesn't need\nan identifier. Fix by omitting its identifier.\n\nODR uniquing is [enabled here](https://github.com/rust-lang/rust/blob/f21dee2c6179276321a88a63300dce74ff707e92/src/rustllvm/PassWrapper.cpp#L1101).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae2551825dbe5a688d00e1d1e7aa7dbaec274e50", "html_url": "https://github.com/rust-lang/rust/commit/ae2551825dbe5a688d00e1d1e7aa7dbaec274e50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae2551825dbe5a688d00e1d1e7aa7dbaec274e50/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be6b4c06be1481c0ade7ed683fc36b039166a8a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/be6b4c06be1481c0ade7ed683fc36b039166a8a1", "html_url": "https://github.com/rust-lang/rust/commit/be6b4c06be1481c0ade7ed683fc36b039166a8a1"}, {"sha": "3a5a8a529a14271f5d8c21bec8746edfa93eec5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5a8a529a14271f5d8c21bec8746edfa93eec5f", "html_url": "https://github.com/rust-lang/rust/commit/3a5a8a529a14271f5d8c21bec8746edfa93eec5f"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "e50839cd5983c74853ff02e8f82b7d1deec5b58a", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae2551825dbe5a688d00e1d1e7aa7dbaec274e50/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae2551825dbe5a688d00e1d1e7aa7dbaec274e50/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=ae2551825dbe5a688d00e1d1e7aa7dbaec274e50", "patch": "@@ -189,6 +189,17 @@ impl TypeMap<'ll, 'tcx> {\n         let interner_key = self.unique_id_interner.intern(&enum_variant_type_id);\n         UniqueTypeId(interner_key)\n     }\n+\n+    // Get the unique type id string for an enum variant part.\n+    // Variant parts are not types and shouldn't really have their own id,\n+    // but it makes set_members_of_composite_type() simpler.\n+    fn get_unique_type_id_str_of_enum_variant_part<'a>(&mut self,\n+                                                       enum_type_id: UniqueTypeId) -> &str {\n+        let variant_part_type_id = format!(\"{}_variant_part\",\n+                                           self.get_unique_type_id_as_string(enum_type_id));\n+        let interner_key = self.unique_id_interner.intern(&variant_part_type_id);\n+        self.unique_id_interner.get(interner_key)\n+    }\n }\n \n // A description of some recursive type. It can either be already finished (as\n@@ -1689,6 +1700,11 @@ fn prepare_enum_metadata(\n         },\n     };\n \n+    let variant_part_unique_type_id_str = SmallCStr::new(\n+        debug_context(cx).type_map\n+            .borrow_mut()\n+            .get_unique_type_id_str_of_enum_variant_part(unique_type_id)\n+    );\n     let empty_array = create_DIArray(DIB(cx), &[]);\n     let variant_part = unsafe {\n         llvm::LLVMRustDIBuilderCreateVariantPart(\n@@ -1702,7 +1718,7 @@ fn prepare_enum_metadata(\n             DIFlags::FlagZero,\n             discriminator_metadata,\n             empty_array,\n-            unique_type_id_str.as_ptr())\n+            variant_part_unique_type_id_str.as_ptr())\n     };\n \n     // The variant part must be wrapped in a struct according to DWARF."}, {"sha": "7f15ed90e67b37b64d752353dd7e6802a58b3d73", "filename": "src/test/debuginfo/enum-thinlto.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ae2551825dbe5a688d00e1d1e7aa7dbaec274e50/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae2551825dbe5a688d00e1d1e7aa7dbaec274e50/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs?ref=ae2551825dbe5a688d00e1d1e7aa7dbaec274e50", "patch": "@@ -0,0 +1,48 @@\n+// ignore-tidy-linelength\n+\n+// Require LLVM with DW_TAG_variant_part and a gdb that can read it.\n+// min-system-llvm-version: 8.0\n+// min-gdb-version: 8.2\n+\n+// compile-flags:-g -Z thinlto\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command:run\n+\n+// gdb-command:print *abc\n+// gdbr-check:$1 = enum_thinlto::ABC::TheA{x: 0, y: 8970181431921507452}\n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print *abc\n+// lldbg-check:(enum_thinlto::ABC) $0 = ABC { }\n+\n+#![allow(unused_variables)]\n+#![feature(omit_gdb_pretty_printer_section)]\n+#![omit_gdb_pretty_printer_section]\n+\n+// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n+// the size of the discriminant value is machine dependent, this has be taken into account when\n+// datatype layout should be predictable as in this case.\n+#[derive(Debug)]\n+enum ABC {\n+    TheA { x: i64, y: i64 },\n+    TheB (i64, i32, i32),\n+}\n+\n+fn main() {\n+    let abc = ABC::TheA { x: 0, y: 0x7c7c_7c7c_7c7c_7c7c };\n+\n+    f(&abc);\n+}\n+\n+fn f(abc: &ABC) {\n+    zzz(); // #break\n+\n+    println!(\"{:?}\", abc);\n+}\n+\n+fn zzz() {()}"}]}