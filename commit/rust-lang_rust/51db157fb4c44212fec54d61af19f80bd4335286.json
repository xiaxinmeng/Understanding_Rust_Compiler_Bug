{"sha": "51db157fb4c44212fec54d61af19f80bd4335286", "node_id": "C_kwDOAAsO6NoAKDUxZGIxNTdmYjRjNDQyMTJmZWM1NGQ2MWFmMTlmODBiZDQzMzUyODY", "commit": {"author": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-04-23T13:45:26Z"}, "committer": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-04-23T13:45:26Z"}, "message": "fix", "tree": {"sha": "8acd6077fc53afbc8df6f0437b6679aae10ad45c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8acd6077fc53afbc8df6f0437b6679aae10ad45c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51db157fb4c44212fec54d61af19f80bd4335286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51db157fb4c44212fec54d61af19f80bd4335286", "html_url": "https://github.com/rust-lang/rust/commit/51db157fb4c44212fec54d61af19f80bd4335286", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51db157fb4c44212fec54d61af19f80bd4335286/comments", "author": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cef882cc9dfae7980a1712609f8d00bfaf78062c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cef882cc9dfae7980a1712609f8d00bfaf78062c", "html_url": "https://github.com/rust-lang/rust/commit/cef882cc9dfae7980a1712609f8d00bfaf78062c"}], "stats": {"total": 53, "additions": 25, "deletions": 28}, "files": [{"sha": "f3be71f6b8bb8dd78d6cfc5b2825857dea528e2a", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/51db157fb4c44212fec54d61af19f80bd4335286/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51db157fb4c44212fec54d61af19f80bd4335286/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=51db157fb4c44212fec54d61af19f80bd4335286", "patch": "@@ -296,15 +296,15 @@ declare_clippy_lint! {\n     /// Checks for methods with certain name prefixes and which\n     /// doesn't match how self is taken. The actual rules are:\n     ///\n-    /// |Prefix |Postfix     |`self` taken           | `self` type  |\n-    /// |-------|------------|-----------------------|--------------|\n-    /// |`as_`  | none       |`&self` or `&mut self` | any          |\n-    /// |`from_`| none       | none                  | any          |\n-    /// |`into_`| none       |`self`                 | any          |\n-    /// |`is_`  | none       |`&self` or none        | any          |\n-    /// |`to_`  | `_mut`     |`&mut self`            | any          |\n-    /// |`to_`  | not `_mut` |`self`                 | `Copy`       |\n-    /// |`to_`  | not `_mut` |`&self`                | not `Copy`   |\n+    /// |Prefix |Postfix     |`self` taken                   | `self` type  |\n+    /// |-------|------------|-------------------------------|--------------|\n+    /// |`as_`  | none       |`&self` or `&mut self`         | any          |\n+    /// |`from_`| none       | none                          | any          |\n+    /// |`into_`| none       |`self`                         | any          |\n+    /// |`is_`  | none       |`&mut self` or `&self` or none | any          |\n+    /// |`to_`  | `_mut`     |`&mut self`                    | any          |\n+    /// |`to_`  | not `_mut` |`self`                         | `Copy`       |\n+    /// |`to_`  | not `_mut` |`&self`                        | not `Copy`   |\n     ///\n     /// Note: Clippy doesn't trigger methods with `to_` prefix in:\n     /// - Traits definition."}, {"sha": "4b368d3ffae254abd04ba4727b7b30faed484ef3", "filename": "clippy_lints/src/methods/wrong_self_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51db157fb4c44212fec54d61af19f80bd4335286/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51db157fb4c44212fec54d61af19f80bd4335286/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs?ref=51db157fb4c44212fec54d61af19f80bd4335286", "patch": "@@ -14,7 +14,7 @@ const CONVENTIONS: [(&[Convention], &[SelfKind]); 9] = [\n     (&[Convention::StartsWith(\"as_\")], &[SelfKind::Ref, SelfKind::RefMut]),\n     (&[Convention::StartsWith(\"from_\")], &[SelfKind::No]),\n     (&[Convention::StartsWith(\"into_\")], &[SelfKind::Value]),\n-    (&[Convention::StartsWith(\"is_\")], &[SelfKind::Ref, SelfKind::No]),\n+    (&[Convention::StartsWith(\"is_\")], &[SelfKind::RefMut, SelfKind::Ref, SelfKind::No]),\n     (&[Convention::Eq(\"to_mut\")], &[SelfKind::RefMut]),\n     (&[Convention::StartsWith(\"to_\"), Convention::EndsWith(\"_mut\")], &[SelfKind::RefMut]),\n "}, {"sha": "e3cc90ee222ada2f2e2ca21742f13a03b10ba50b", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/51db157fb4c44212fec54d61af19f80bd4335286/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51db157fb4c44212fec54d61af19f80bd4335286/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=51db157fb4c44212fec54d61af19f80bd4335286", "patch": "@@ -193,11 +193,6 @@ pub mod issue8142 {\n     struct S;\n \n     impl S {\n-        // Should lint: is_ methods should only take &self, or no self at all.\n-        fn is_still_buggy(&mut self) -> bool {\n-            false\n-        }\n-\n         // Should not lint: \"no self at all\" is allowed.\n         fn is_forty_two(x: u32) -> bool {\n             x == 42"}, {"sha": "2e7ee51d7e11a7e07593df9a926e2b7912a2f78c", "filename": "tests/ui/wrong_self_convention.stderr", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/51db157fb4c44212fec54d61af19f80bd4335286/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51db157fb4c44212fec54d61af19f80bd4335286/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=51db157fb4c44212fec54d61af19f80bd4335286", "patch": "@@ -31,7 +31,7 @@ LL |     fn into_i32(&self) {}\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `is_*` usually take `self` by reference or no `self`\n+error: methods called `is_*` usually take `self` by mutable reference or `self` by reference or no `self`\n   --> $DIR/wrong_self_convention.rs:38:15\n    |\n LL |     fn is_i32(self) {}\n@@ -71,7 +71,7 @@ LL |     pub fn into_i64(&self) {}\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `is_*` usually take `self` by reference or no `self`\n+error: methods called `is_*` usually take `self` by mutable reference or `self` by reference or no `self`\n   --> $DIR/wrong_self_convention.rs:46:19\n    |\n LL |     pub fn is_i64(self) {}\n@@ -111,7 +111,7 @@ LL |         fn into_i32_ref(&self) {}\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `is_*` usually take `self` by reference or no `self`\n+error: methods called `is_*` usually take `self` by mutable reference or `self` by reference or no `self`\n   --> $DIR/wrong_self_convention.rs:98:19\n    |\n LL |         fn is_i32(self) {}\n@@ -143,7 +143,7 @@ LL |         fn into_i32_ref(&self);\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `is_*` usually take `self` by reference or no `self`\n+error: methods called `is_*` usually take `self` by mutable reference or `self` by reference or no `self`\n   --> $DIR/wrong_self_convention.rs:122:19\n    |\n LL |         fn is_i32(self);\n@@ -191,13 +191,5 @@ LL |         fn to_u64(self) -> u64 {\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `is_*` usually take `self` by reference or no `self`\n-  --> $DIR/wrong_self_convention.rs:197:27\n-   |\n-LL |         fn is_still_buggy(&mut self) -> bool {\n-   |                           ^^^^^^^^^\n-   |\n-   = help: consider choosing a less ambiguous name\n-\n-error: aborting due to 25 previous errors\n+error: aborting due to 24 previous errors\n "}, {"sha": "0dcf4743e8b8dbcd1186b794a9f2846a763a2da2", "filename": "tests/ui/wrong_self_convention2.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/51db157fb4c44212fec54d61af19f80bd4335286/tests%2Fui%2Fwrong_self_convention2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51db157fb4c44212fec54d61af19f80bd4335286/tests%2Fui%2Fwrong_self_convention2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention2.rs?ref=51db157fb4c44212fec54d61af19f80bd4335286", "patch": "@@ -104,3 +104,13 @@ mod issue4546 {\n         pub fn to_other_thingy(self: Pin<&Self>) {}\n     }\n }\n+\n+mod issue_8480_8513 {\n+    struct Cat(String);\n+\n+    impl Cat {\n+        fn is_animal(&mut self) -> bool {\n+            todo!();\n+        }\n+    }\n+}"}]}