{"sha": "9e4c28820146ccaf29ecbce9802aeba80183851a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNGMyODgyMDE0NmNjYWYyOWVjYmNlOTgwMmFlYmE4MDE4Mzg1MWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-31T17:30:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-31T17:30:21Z"}, "message": "File builder growndwork", "tree": {"sha": "ff9097e6588c6675906d3fb0f4bbaf4ef5efe5c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff9097e6588c6675906d3fb0f4bbaf4ef5efe5c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e4c28820146ccaf29ecbce9802aeba80183851a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4c28820146ccaf29ecbce9802aeba80183851a", "html_url": "https://github.com/rust-lang/rust/commit/9e4c28820146ccaf29ecbce9802aeba80183851a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e4c28820146ccaf29ecbce9802aeba80183851a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c804accf19d1a93739a7cbfdd1da5528833d6c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c804accf19d1a93739a7cbfdd1da5528833d6c3", "html_url": "https://github.com/rust-lang/rust/commit/9c804accf19d1a93739a7cbfdd1da5528833d6c3"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "af0a4a9e7f069259ccca3306241bf12f32a6100c", "filename": "src/text.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e4c28820146ccaf29ecbce9802aeba80183851a/src%2Ftext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4c28820146ccaf29ecbce9802aeba80183851a/src%2Ftext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftext.rs?ref=9e4c28820146ccaf29ecbce9802aeba80183851a", "patch": "@@ -32,6 +32,12 @@ impl From<TextUnit> for u32 {\n     }\n }\n \n+impl From<u32> for TextUnit {\n+    fn from(tu: u32) -> TextUnit {\n+        TextUnit::new(tu)\n+    }\n+}\n+\n impl ops::Add<TextUnit> for TextUnit {\n     type Output = TextUnit;\n     fn add(self, rhs: TextUnit) -> TextUnit {"}, {"sha": "c977b254ca4ebf042d24a113b01a58cd8f3fbd7f", "filename": "src/tree/file_builder.rs", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/9e4c28820146ccaf29ecbce9802aeba80183851a/src%2Ftree%2Ffile_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4c28820146ccaf29ecbce9802aeba80183851a/src%2Ftree%2Ffile_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Ffile_builder.rs?ref=9e4c28820146ccaf29ecbce9802aeba80183851a", "patch": "@@ -0,0 +1,111 @@\n+use {SyntaxKind, TextUnit, TextRange};\n+use super::{NodeData, NodeIdx, File};\n+\n+pub struct FileBuilder {\n+    text: String,\n+    nodes: Vec<NodeData>,\n+    in_progress: Vec<(NodeIdx, Option<NodeIdx>)>, // (parent, last_child)\n+    pos: TextUnit,\n+}\n+\n+impl FileBuilder {\n+    pub fn new(text: String) -> FileBuilder {\n+        FileBuilder {\n+            text,\n+            nodes: Vec::new(),\n+            in_progress: Vec::new(),\n+            pos: TextUnit::new(0),\n+        }\n+    }\n+\n+    pub fn finish(self) -> File {\n+        assert!(self.in_progress.is_empty());\n+        assert!(self.pos == (self.text.len() as u32).into());\n+        File {\n+            text: self.text,\n+            nodes: self.nodes,\n+        }\n+    }\n+\n+    pub fn leaf(&mut self, kind: SyntaxKind, len: TextUnit) {\n+        let leaf = NodeData {\n+            kind,\n+            range: TextRange::from_len(self.pos, len),\n+            parent: None,\n+            first_child: None,\n+            next_sibling: None,\n+        };\n+        self.pos += len;\n+        let id = self.push_child(leaf);\n+        self.add_len(id);\n+    }\n+\n+    pub fn start_internal(&mut self, kind: SyntaxKind) {\n+        let node = NodeData {\n+            kind,\n+            range: TextRange::from_len(self.pos, 0.into()),\n+            parent: None,\n+            first_child: None,\n+            next_sibling: None,\n+        };\n+        let id = if self.in_progress.is_empty() {\n+            self.new_node(node)\n+        } else {\n+            self.push_child(node)\n+        };\n+        self.in_progress.push((id, None))\n+    }\n+\n+    pub fn finish_internal(&mut self) {\n+        let (id, _) = self.in_progress.pop().unwrap();\n+        if !self.in_progress.is_empty() {\n+            self.add_len(id);\n+        }\n+    }\n+\n+    fn new_node(&mut self, data: NodeData) -> NodeIdx {\n+        let id = NodeIdx(self.nodes.len() as u32);\n+        self.nodes.push(data);\n+        id\n+    }\n+\n+    fn push_child(&mut self, mut child: NodeData) -> NodeIdx {\n+        child.parent = Some(self.current_id());\n+        let id = self.new_node(child);\n+        if let Some(sibling) = self.current_sibling() {\n+            fill(&mut sibling.next_sibling, id);\n+            return id\n+        }\n+        fill(&mut self.current_parent().first_child, id);\n+        id\n+    }\n+\n+    fn add_len(&mut self, child: NodeIdx) {\n+        let range = self.nodes[child.0 as usize].range;\n+        grow(&mut self.current_parent().range, range);\n+    }\n+\n+    fn current_id(&self) -> NodeIdx {\n+        self.in_progress.last().unwrap().0\n+    }\n+\n+    fn current_parent(&mut self) -> &mut NodeData {\n+        let NodeIdx(idx) = self.current_id();\n+        &mut self.nodes[idx as usize]\n+    }\n+\n+    fn current_sibling(&mut self) -> Option<&mut NodeData> {\n+        let NodeIdx(idx) = self.in_progress.last().unwrap().1?;\n+        Some(&mut self.nodes[idx as usize])\n+    }\n+}\n+\n+fn fill<T>(slot: &mut Option<T>, value: T) {\n+    assert!(slot.is_none());\n+    *slot = Some(value);\n+}\n+\n+fn grow(left: &mut TextRange, right: TextRange) {\n+    assert_eq!(left.end(), right.start());\n+    *left = TextRange::from_to(left.start(), right.end())\n+}\n\\ No newline at end of file"}, {"sha": "b90a5d7d39d0d0945836c1f1a7965306d878dba1", "filename": "src/tree/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e4c28820146ccaf29ecbce9802aeba80183851a/src%2Ftree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4c28820146ccaf29ecbce9802aeba80183851a/src%2Ftree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Fmod.rs?ref=9e4c28820146ccaf29ecbce9802aeba80183851a", "patch": "@@ -3,6 +3,9 @@ use syntax_kinds::syntax_info;\n \n use std::fmt;\n \n+mod file_builder;\n+pub use self::file_builder::FileBuilder;\n+\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct SyntaxKind(pub(crate) u32);\n "}]}