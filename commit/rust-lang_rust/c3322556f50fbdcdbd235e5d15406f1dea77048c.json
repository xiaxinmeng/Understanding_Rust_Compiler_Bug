{"sha": "c3322556f50fbdcdbd235e5d15406f1dea77048c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMzIyNTU2ZjUwZmJkY2RiZDIzNWU1ZDE1NDA2ZjFkZWE3NzA0OGM=", "commit": {"author": {"name": "F001", "email": "changchun.fan@qq.com", "date": "2018-05-19T14:47:34Z"}, "committer": {"name": "F001", "email": "changchun.fan@qq.com", "date": "2018-05-20T02:16:33Z"}, "message": "Fix according to comments", "tree": {"sha": "3bc25f4f69c3141c0fb4848ff9b4f0ef722eaef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bc25f4f69c3141c0fb4848ff9b4f0ef722eaef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3322556f50fbdcdbd235e5d15406f1dea77048c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3322556f50fbdcdbd235e5d15406f1dea77048c", "html_url": "https://github.com/rust-lang/rust/commit/c3322556f50fbdcdbd235e5d15406f1dea77048c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3322556f50fbdcdbd235e5d15406f1dea77048c/comments", "author": {"login": "F001", "id": 3314340, "node_id": "MDQ6VXNlcjMzMTQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3314340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F001", "html_url": "https://github.com/F001", "followers_url": "https://api.github.com/users/F001/followers", "following_url": "https://api.github.com/users/F001/following{/other_user}", "gists_url": "https://api.github.com/users/F001/gists{/gist_id}", "starred_url": "https://api.github.com/users/F001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F001/subscriptions", "organizations_url": "https://api.github.com/users/F001/orgs", "repos_url": "https://api.github.com/users/F001/repos", "events_url": "https://api.github.com/users/F001/events{/privacy}", "received_events_url": "https://api.github.com/users/F001/received_events", "type": "User", "site_admin": false}, "committer": {"login": "F001", "id": 3314340, "node_id": "MDQ6VXNlcjMzMTQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3314340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F001", "html_url": "https://github.com/F001", "followers_url": "https://api.github.com/users/F001/followers", "following_url": "https://api.github.com/users/F001/following{/other_user}", "gists_url": "https://api.github.com/users/F001/gists{/gist_id}", "starred_url": "https://api.github.com/users/F001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F001/subscriptions", "organizations_url": "https://api.github.com/users/F001/orgs", "repos_url": "https://api.github.com/users/F001/repos", "events_url": "https://api.github.com/users/F001/events{/privacy}", "received_events_url": "https://api.github.com/users/F001/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb39966a670864de0078cafc1e5b623ca1b2ec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb39966a670864de0078cafc1e5b623ca1b2ec3", "html_url": "https://github.com/rust-lang/rust/commit/4bb39966a670864de0078cafc1e5b623ca1b2ec3"}], "stats": {"total": 60, "additions": 39, "deletions": 21}, "files": [{"sha": "5d7d2f0f9e69878edbc9cb2a97586098f23e2ffe", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3322556f50fbdcdbd235e5d15406f1dea77048c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3322556f50fbdcdbd235e5d15406f1dea77048c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=c3322556f50fbdcdbd235e5d15406f1dea77048c", "patch": "@@ -280,7 +280,7 @@ declare_lint! {\n }\n \n declare_lint! {\n-    pub DUPLICATE_ASSOCIATED_TYPE_BINDING,\n+    pub DUPLICATE_ASSOCIATED_TYPE_BINDINGS,\n     Warn,\n     \"warns about duplicate associated type bindings in generics\"\n }\n@@ -336,7 +336,7 @@ impl LintPass for HardwiredLints {\n             BARE_TRAIT_OBJECT,\n             ABSOLUTE_PATH_NOT_STARTING_WITH_CRATE,\n             UNSTABLE_NAME_COLLISION,\n-            DUPLICATE_ASSOCIATED_TYPE_BINDING,\n+            DUPLICATE_ASSOCIATED_TYPE_BINDINGS,\n         )\n     }\n }"}, {"sha": "e35537459b70fe713b9ea8f67eea9470e71c29b9", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3322556f50fbdcdbd235e5d15406f1dea77048c/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3322556f50fbdcdbd235e5d15406f1dea77048c/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=c3322556f50fbdcdbd235e5d15406f1dea77048c", "patch": "@@ -283,6 +283,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue TBD\",\n             edition: Some(Edition::Edition2018),\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(DUPLICATE_ASSOCIATED_TYPE_BINDINGS),\n+            reference: \"issue #50589 <https://github.com/rust-lang/rust/issues/50589>\",\n+            edition: None,\n+        },\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "677244b612a820bfbc11021dbc4252d1c4fd5cd7", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c3322556f50fbdcdbd235e5d15406f1dea77048c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3322556f50fbdcdbd235e5d15406f1dea77048c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=c3322556f50fbdcdbd235e5d15406f1dea77048c", "patch": "@@ -406,16 +406,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                     trait_ref.ref_id, poly_trait_ref, binding, speculative, &mut dup_bindings);\n             predicate.ok() // ok to ignore Err() because ErrorReported (see above)\n         }));\n-        for (_id, spans) in dup_bindings {\n-            if spans.len() > 1 {\n-                self.tcx().struct_span_lint_node(\n-                        ::rustc::lint::builtin::DUPLICATE_ASSOCIATED_TYPE_BINDING,\n-                        trait_ref.ref_id,\n-                        spans,\n-                        \"duplicate associated type binding\"\n-                    ).emit();\n-            }\n-        }\n \n         debug!(\"ast_path_to_poly_trait_ref({:?}, projections={:?}) -> {:?}\",\n                trait_ref, poly_projections, poly_trait_ref);\n@@ -499,7 +489,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         binding: &ConvertedBinding<'tcx>,\n         speculative: bool,\n-        dup_bindings: &mut FxHashMap<DefId, Vec<Span>>)\n+        dup_bindings: &mut FxHashMap<DefId, Span>)\n         -> Result<ty::PolyProjectionPredicate<'tcx>, ErrorReported>\n     {\n         let tcx = self.tcx();\n@@ -577,7 +567,21 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             tcx.sess.span_err(binding.span, &msg);\n         }\n         tcx.check_stability(assoc_ty.def_id, Some(ref_id), binding.span);\n-        dup_bindings.entry(assoc_ty.def_id).or_insert(Vec::new()).push(binding.span);\n+\n+        dup_bindings.entry(assoc_ty.def_id)\n+            .and_modify(|prev_span| {\n+                let mut err = self.tcx().struct_span_lint_node(\n+                    ::rustc::lint::builtin::DUPLICATE_ASSOCIATED_TYPE_BINDINGS,\n+                    ref_id,\n+                    binding.span,\n+                    &format!(\"associated type binding `{}` specified more than once\",\n+                            binding.item_name)\n+                );\n+                err.span_label(binding.span, \"used more than once\");\n+                err.span_label(*prev_span, format!(\"first use of `{}`\", binding.item_name));\n+                err.emit();\n+            })\n+            .or_insert(binding.span);\n \n         Ok(candidate.map_bound(|trait_ref| {\n             ty::ProjectionPredicate {"}, {"sha": "7f0a1ee1f3307b2a4f3f226d88f715a50af84def", "filename": "src/test/ui/lint/issue-50589-multiple-associated-types.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c3322556f50fbdcdbd235e5d15406f1dea77048c/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3322556f50fbdcdbd235e5d15406f1dea77048c/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.stderr?ref=c3322556f50fbdcdbd235e5d15406f1dea77048c", "patch": "@@ -1,14 +1,23 @@\n-warning: duplicate associated type binding\n-  --> $DIR/issue-50589-multiple-associated-types.rs:17:28\n+warning: associated type binding `Item` specified more than once\n+  --> $DIR/issue-50589-multiple-associated-types.rs:17:39\n    |\n LL | fn test() ->  Box<Iterator<Item = (), Item = Unit>> {\n-   |                            ^^^^^^^^^  ^^^^^^^^^^^\n+   |                            ---------  ^^^^^^^^^^^ used more than once\n+   |                            |\n+   |                            first use of `Item`\n    |\n-   = note: #[warn(duplicate_associated_type_binding)] on by default\n+   = note: #[warn(duplicate_associated_type_bindings)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #50589 <https://github.com/rust-lang/rust/issues/50589>\n \n-warning: duplicate associated type binding\n-  --> $DIR/issue-50589-multiple-associated-types.rs:17:28\n+warning: associated type binding `Item` specified more than once\n+  --> $DIR/issue-50589-multiple-associated-types.rs:17:39\n    |\n LL | fn test() ->  Box<Iterator<Item = (), Item = Unit>> {\n-   |                            ^^^^^^^^^  ^^^^^^^^^^^\n+   |                            ---------  ^^^^^^^^^^^ used more than once\n+   |                            |\n+   |                            first use of `Item`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #50589 <https://github.com/rust-lang/rust/issues/50589>\n "}]}