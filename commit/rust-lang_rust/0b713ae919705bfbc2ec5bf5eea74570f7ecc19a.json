{"sha": "0b713ae919705bfbc2ec5bf5eea74570f7ecc19a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNzEzYWU5MTk3MDViZmJjMmVjNWJmNWVlYTc0NTcwZjdlY2MxOWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-13T21:54:20Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-13T21:54:20Z"}, "message": "typeck: extract ban_private_field_access", "tree": {"sha": "5e1f700133c658106904e15deecfdc2c31601b55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e1f700133c658106904e15deecfdc2c31601b55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b713ae919705bfbc2ec5bf5eea74570f7ecc19a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b713ae919705bfbc2ec5bf5eea74570f7ecc19a", "html_url": "https://github.com/rust-lang/rust/commit/0b713ae919705bfbc2ec5bf5eea74570f7ecc19a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b713ae919705bfbc2ec5bf5eea74570f7ecc19a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60960a260f7b5c695fd0717311d72ce62dd4eb43", "url": "https://api.github.com/repos/rust-lang/rust/commits/60960a260f7b5c695fd0717311d72ce62dd4eb43", "html_url": "https://github.com/rust-lang/rust/commit/60960a260f7b5c695fd0717311d72ce62dd4eb43"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "b4154c15d67394a51b1c9e899fd87c382472fae2", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0b713ae919705bfbc2ec5bf5eea74570f7ecc19a/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b713ae919705bfbc2ec5bf5eea74570f7ecc19a/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=0b713ae919705bfbc2ec5bf5eea74570f7ecc19a", "patch": "@@ -24,6 +24,7 @@ use syntax::source_map::Span;\n use syntax::util::lev_distance::find_best_match_for_name;\n use rustc::hir;\n use rustc::hir::{ExprKind, QPath};\n+use rustc::hir::def_id::DefId;\n use rustc::hir::def::{CtorKind, Res, DefKind};\n use rustc::hir::ptr::P;\n use rustc::infer;\n@@ -1336,23 +1337,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         autoderef.unambiguous_final_ty(self);\n \n         if let Some((did, field_ty)) = private_candidate {\n-            let struct_path = self.tcx().def_path_str(did);\n-            let mut err = struct_span_err!(self.tcx().sess, expr.span, E0616,\n-                                           \"field `{}` of struct `{}` is private\",\n-                                           field, struct_path);\n-            // Also check if an accessible method exists, which is often what is meant.\n-            if self.method_exists(field, expr_t, expr.hir_id, false)\n-                && !self.expr_in_place(expr.hir_id)\n-            {\n-                self.suggest_method_call(\n-                    &mut err,\n-                    &format!(\"a method `{}` also exists, call it with parentheses\", field),\n-                    field,\n-                    expr_t,\n-                    expr.hir_id,\n-                );\n-            }\n-            err.emit();\n+            self.ban_private_field_access(expr, expr_t, field, did);\n             field_ty\n         } else if field.name == kw::Invalid {\n             self.tcx().types.err\n@@ -1446,6 +1431,37 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn ban_private_field_access(\n+        &self,\n+        expr: &'tcx hir::Expr,\n+        expr_t: Ty<'tcx>,\n+        field: ast::Ident,\n+        def_id: DefId,\n+    ) {\n+        let struct_path = self.tcx().def_path_str(def_id);\n+        let mut err = struct_span_err!(\n+            self.tcx().sess,\n+            expr.span,\n+            E0616,\n+            \"field `{}` of struct `{}` is private\",\n+            field,\n+            struct_path\n+        );\n+        // Also check if an accessible method exists, which is often what is meant.\n+        if self.method_exists(field, expr_t, expr.hir_id, false)\n+            && !self.expr_in_place(expr.hir_id)\n+        {\n+            self.suggest_method_call(\n+                &mut err,\n+                &format!(\"a method `{}` also exists, call it with parentheses\", field),\n+                field,\n+                expr_t,\n+                expr.hir_id,\n+            );\n+        }\n+        err.emit();\n+    }\n+\n     fn no_such_field_err<T: Display>(&self, span: Span, field: T, expr_t: &ty::TyS<'_>)\n         -> DiagnosticBuilder<'_> {\n         type_error_struct!(self.tcx().sess, span, expr_t, E0609,"}]}