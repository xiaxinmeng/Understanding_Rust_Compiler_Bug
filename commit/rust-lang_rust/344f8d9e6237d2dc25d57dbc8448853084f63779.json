{"sha": "344f8d9e6237d2dc25d57dbc8448853084f63779", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NGY4ZDllNjIzN2QyZGMyNWQ1N2RiYzg0NDg4NTMwODRmNjM3Nzk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-02-12T09:55:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-12T09:55:36Z"}, "message": "Rollup merge of #68487 - 0dvictor:nolink, r=tmandry\n\n[experiment] Support linking from a .rlink file\n\nFlag `-Z no-link` was previously introduced, which allows creating an `.rlink` file to perform compilation without linking. This change enables linking from an `.rlink` file.\n\nPart of Issue #64191", "tree": {"sha": "0a71b84b69f9957961bd5f752a30b2e7142d7475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a71b84b69f9957961bd5f752a30b2e7142d7475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/344f8d9e6237d2dc25d57dbc8448853084f63779", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeQ8uYCRBK7hj4Ov3rIwAAdHIIAA7Nvl7R5aMkLwckfchPWdEw\nTJMQQFOCtp6eCfkmotb5AN9Q3P6LM4Ub+M4/QANuFeNUoF8PNpaf6vIzuzFKFWE9\na3EDBNc7A4h2hSFF+OyVcLBc+LotXMFJKRC8AmMMNwCfULl+3Vxrvf5GkTIaZSfn\ntMT7PlCTg4zTOVZtKH1SWy5/Ik0d6sIczFZjiZr9cFssBzcOlwv0PpMDbo9UBi+y\n9QFP+W97tzsp8Ujd6R5reA9VnciAJT5hVqjq1NiJM9FfNt0RzRLEzZWiuKSZIVmg\nuKJdRS4aU6szwnPBxQHgEpChc/7XRsV0FIHgBwDsLn68Sf0Kf0oSwFWr6+eGMrs=\n=987z\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a71b84b69f9957961bd5f752a30b2e7142d7475\nparent b6a9aa9dd7702fb27cd7b1e9c351e954bf19182a\nparent a47fdb99c04fc9119247c6511033e30735490804\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1581501336 +0900\ncommitter GitHub <noreply@github.com> 1581501336 +0900\n\nRollup merge of #68487 - 0dvictor:nolink, r=tmandry\n\n[experiment] Support linking from a .rlink file\n\nFlag `-Z no-link` was previously introduced, which allows creating an `.rlink` file to perform compilation without linking. This change enables linking from an `.rlink` file.\n\nPart of Issue #64191\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/344f8d9e6237d2dc25d57dbc8448853084f63779", "html_url": "https://github.com/rust-lang/rust/commit/344f8d9e6237d2dc25d57dbc8448853084f63779", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/344f8d9e6237d2dc25d57dbc8448853084f63779/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6a9aa9dd7702fb27cd7b1e9c351e954bf19182a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6a9aa9dd7702fb27cd7b1e9c351e954bf19182a", "html_url": "https://github.com/rust-lang/rust/commit/b6a9aa9dd7702fb27cd7b1e9c351e954bf19182a"}, {"sha": "a47fdb99c04fc9119247c6511033e30735490804", "url": "https://api.github.com/repos/rust-lang/rust/commits/a47fdb99c04fc9119247c6511033e30735490804", "html_url": "https://github.com/rust-lang/rust/commit/a47fdb99c04fc9119247c6511033e30735490804"}], "stats": {"total": 65, "additions": 57, "deletions": 8}, "files": [{"sha": "6ba5e324c0d9bc6fd2b28577bdf73a2ff0a7d200", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/344f8d9e6237d2dc25d57dbc8448853084f63779/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/344f8d9e6237d2dc25d57dbc8448853084f63779/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=344f8d9e6237d2dc25d57dbc8448853084f63779", "patch": "@@ -3552,6 +3552,7 @@ dependencies = [\n  \"log\",\n  \"rustc\",\n  \"rustc_ast_pretty\",\n+ \"rustc_codegen_ssa\",\n  \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n  \"rustc_error_codes\","}, {"sha": "7aaa70d6ec4d3d13c4dba22e53a082a77e32cf38", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/344f8d9e6237d2dc25d57dbc8448853084f63779/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344f8d9e6237d2dc25d57dbc8448853084f63779/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=344f8d9e6237d2dc25d57dbc8448853084f63779", "patch": "@@ -32,7 +32,7 @@ use syntax::expand::allocator::AllocatorKind;\n \n use rustc::dep_graph::DepGraph;\n use rustc::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n-use rustc::session::config::{OptLevel, OutputFilenames, PrintRequest};\n+use rustc::session::config::{self, OptLevel, OutputFilenames, PrintRequest};\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n use rustc::util::common::ErrorReported;\n@@ -301,7 +301,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n             let rlink_data = json::encode(&codegen_results).map_err(|err| {\n                 sess.fatal(&format!(\"failed to encode rlink: {}\", err));\n             })?;\n-            let rlink_file = outputs.with_extension(\"rlink\");\n+            let rlink_file = outputs.with_extension(config::RLINK_EXT);\n             fs::write(&rlink_file, rlink_data).map_err(|err| {\n                 sess.fatal(&format!(\"failed to write file {}: {}\", rlink_file.display(), err));\n             })?;"}, {"sha": "5b185f9a8b6b9bee7c67054866971f48afa93583", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/344f8d9e6237d2dc25d57dbc8448853084f63779/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/344f8d9e6237d2dc25d57dbc8448853084f63779/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=344f8d9e6237d2dc25d57dbc8448853084f63779", "patch": "@@ -26,6 +26,7 @@ rustc_mir = { path = \"../librustc_mir\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_plugin_impl = { path = \"../librustc_plugin_impl\" }\n rustc_save_analysis = { path = \"../librustc_save_analysis\" }\n+rustc_codegen_ssa = { path = \"../librustc_codegen_ssa\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n rustc_interface = { path = \"../librustc_interface\" }"}, {"sha": "2e6dde6459a40eb3c42fd6f7f7df48780f75e933", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/344f8d9e6237d2dc25d57dbc8448853084f63779/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344f8d9e6237d2dc25d57dbc8448853084f63779/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=344f8d9e6237d2dc25d57dbc8448853084f63779", "patch": "@@ -26,25 +26,27 @@ use rustc::session::{config, DiagnosticOutput, Session};\n use rustc::session::{early_error, early_warn};\n use rustc::ty::TyCtxt;\n use rustc::util::common::ErrorReported;\n+use rustc_codegen_ssa::CodegenResults;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::profiling::print_time_passes_entry;\n use rustc_data_structures::sync::SeqCst;\n use rustc_errors::{registry::Registry, PResult};\n use rustc_feature::{find_gated_cfg, UnstableFeatures};\n use rustc_hir::def_id::LOCAL_CRATE;\n-use rustc_interface::util::get_builtin_codegen_backend;\n+use rustc_interface::util::{collect_crate_types, get_builtin_codegen_backend};\n use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n use rustc_metadata::locator;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n-use rustc_serialize::json::ToJson;\n+use rustc_serialize::json::{self, ToJson};\n \n use std::borrow::Cow;\n use std::cmp::max;\n use std::default::Default;\n use std::env;\n use std::ffi::OsString;\n+use std::fs;\n use std::io::{self, Read, Write};\n use std::mem;\n use std::panic::{self, catch_unwind};\n@@ -281,7 +283,8 @@ pub fn run_compiler(\n                 &matches,\n                 compiler.input(),\n             )\n-        });\n+        })\n+        .and_then(|| RustcDefaultCalls::try_process_rlink(sess, compiler));\n \n         if should_stop == Compilation::Stop {\n             return sess.compile_status();\n@@ -588,6 +591,34 @@ fn show_content_with_pager(content: &String) {\n }\n \n impl RustcDefaultCalls {\n+    fn process_rlink(sess: &Session, compiler: &interface::Compiler) -> Result<(), ErrorReported> {\n+        if let Input::File(file) = compiler.input() {\n+            // FIXME: #![crate_type] and #![crate_name] support not implemented yet\n+            let attrs = vec![];\n+            sess.crate_types.set(collect_crate_types(sess, &attrs));\n+            let outputs = compiler.build_output_filenames(&sess, &attrs);\n+            let rlink_data = fs::read_to_string(file).unwrap_or_else(|err| {\n+                sess.fatal(&format!(\"failed to read rlink file: {}\", err));\n+            });\n+            let codegen_results: CodegenResults = json::decode(&rlink_data).unwrap_or_else(|err| {\n+                sess.fatal(&format!(\"failed to decode rlink: {}\", err));\n+            });\n+            compiler.codegen_backend().link(&sess, Box::new(codegen_results), &outputs)\n+        } else {\n+            sess.fatal(&format!(\"rlink must be a file\"))\n+        }\n+    }\n+\n+    pub fn try_process_rlink(sess: &Session, compiler: &interface::Compiler) -> Compilation {\n+        if sess.opts.debugging_opts.link_only {\n+            let result = RustcDefaultCalls::process_rlink(sess, compiler);\n+            abort_on_err(result, sess);\n+            Compilation::Stop\n+        } else {\n+            Compilation::Continue\n+        }\n+    }\n+\n     pub fn list_metadata(\n         sess: &Session,\n         metadata_loader: &dyn MetadataLoader,\n@@ -663,7 +694,7 @@ impl RustcDefaultCalls {\n                         println!(\"{}\", id);\n                         continue;\n                     }\n-                    let crate_types = rustc_interface::util::collect_crate_types(sess, attrs);\n+                    let crate_types = collect_crate_types(sess, attrs);\n                     for &style in &crate_types {\n                         let fname = rustc_codegen_utils::link::filename_for_input(\n                             sess, style, &id, &t_outputs,"}, {"sha": "e213a4d33a6fb9921af19663df2a79235e31dab8", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/344f8d9e6237d2dc25d57dbc8448853084f63779/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344f8d9e6237d2dc25d57dbc8448853084f63779/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=344f8d9e6237d2dc25d57dbc8448853084f63779", "patch": "@@ -2,7 +2,7 @@ pub use crate::passes::BoxedResolver;\n use crate::util;\n \n use rustc::lint;\n-use rustc::session::config::{self, ErrorOutputType, Input};\n+use rustc::session::config::{self, ErrorOutputType, Input, OutputFilenames};\n use rustc::session::early_error;\n use rustc::session::{DiagnosticOutput, Session};\n use rustc::ty;\n@@ -20,7 +20,7 @@ use rustc_span::source_map::{FileLoader, FileName, SourceMap};\n use std::path::PathBuf;\n use std::result;\n use std::sync::{Arc, Mutex};\n-use syntax::ast::MetaItemKind;\n+use syntax::ast::{self, MetaItemKind};\n use syntax::token;\n \n pub type Result<T> = result::Result<T, ErrorReported>;\n@@ -61,6 +61,19 @@ impl Compiler {\n     pub fn output_file(&self) -> &Option<PathBuf> {\n         &self.output_file\n     }\n+    pub fn build_output_filenames(\n+        &self,\n+        sess: &Session,\n+        attrs: &[ast::Attribute],\n+    ) -> OutputFilenames {\n+        util::build_output_filenames(\n+            &self.input,\n+            &self.output_dir,\n+            &self.output_file,\n+            &attrs,\n+            &sess,\n+        )\n+    }\n }\n \n /// Converts strings provided as `--cfg [cfgspec]` into a `crate_cfg`."}, {"sha": "aeb7e891cec02be3f8249aa61c6ddb54849d2b50", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/344f8d9e6237d2dc25d57dbc8448853084f63779/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344f8d9e6237d2dc25d57dbc8448853084f63779/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=344f8d9e6237d2dc25d57dbc8448853084f63779", "patch": "@@ -465,6 +465,7 @@ pub struct OutputFilenames {\n \n impl_stable_hash_via_hash!(OutputFilenames);\n \n+pub const RLINK_EXT: &str = \"rlink\";\n pub const RUST_CGU_EXT: &str = \"rcgu\";\n \n impl OutputFilenames {"}, {"sha": "4b3645cce723a3f1ef3297e92b10e6b49d5e1fdd", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/344f8d9e6237d2dc25d57dbc8448853084f63779/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344f8d9e6237d2dc25d57dbc8448853084f63779/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=344f8d9e6237d2dc25d57dbc8448853084f63779", "patch": "@@ -966,4 +966,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"use Windows Control Flow Guard (`disabled`, `nochecks` or `checks`)\"),\n     no_link: bool = (false, parse_bool, [TRACKED],\n         \"compile without linking\"),\n+    link_only: bool = (false, parse_bool, [TRACKED],\n+        \"link the `.rlink` file generated by `-Z no-link`\"),\n }"}]}