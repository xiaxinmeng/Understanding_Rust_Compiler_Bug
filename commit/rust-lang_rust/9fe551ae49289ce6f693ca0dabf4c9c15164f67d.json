{"sha": "9fe551ae49289ce6f693ca0dabf4c9c15164f67d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZTU1MWFlNDkyODljZTZmNjkzY2EwZGFiZjRjOWMxNTE2NGY2N2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-07T11:09:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-07T11:09:41Z"}, "message": "Auto merge of #74366 - t-rapp:tr-bufreader-pos, r=LukasKalbertodt\n\nImplement Seek::stream_position() for BufReader\n\nOptimization over `BufReader::seek()` for getting the current position without flushing the internal buffer.\n\nRelated to #31100. Based on the code in #70577.", "tree": {"sha": "161dafa13e61df09b284a2fd78c39dcdcd3dcab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/161dafa13e61df09b284a2fd78c39dcdcd3dcab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fe551ae49289ce6f693ca0dabf4c9c15164f67d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe551ae49289ce6f693ca0dabf4c9c15164f67d", "html_url": "https://github.com/rust-lang/rust/commit/9fe551ae49289ce6f693ca0dabf4c9c15164f67d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fe551ae49289ce6f693ca0dabf4c9c15164f67d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f76eda3f01ba8e9714b579dc3e563ee973ade83d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f76eda3f01ba8e9714b579dc3e563ee973ade83d", "html_url": "https://github.com/rust-lang/rust/commit/f76eda3f01ba8e9714b579dc3e563ee973ade83d"}, {"sha": "246d3271fe5fa180713b16aa33dacc6aeca46851", "url": "https://api.github.com/repos/rust-lang/rust/commits/246d3271fe5fa180713b16aa33dacc6aeca46851", "html_url": "https://github.com/rust-lang/rust/commit/246d3271fe5fa180713b16aa33dacc6aeca46851"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "97c4b879793b71cd4f7ac958788586bf253f7930", "filename": "library/std/src/io/buffered.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9fe551ae49289ce6f693ca0dabf4c9c15164f67d/library%2Fstd%2Fsrc%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe551ae49289ce6f693ca0dabf4c9c15164f67d/library%2Fstd%2Fsrc%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered.rs?ref=9fe551ae49289ce6f693ca0dabf4c9c15164f67d", "patch": "@@ -386,6 +386,51 @@ impl<R: Seek> Seek for BufReader<R> {\n         self.discard_buffer();\n         Ok(result)\n     }\n+\n+    /// Returns the current seek position from the start of the stream.\n+    ///\n+    /// The value returned is equivalent to `self.seek(SeekFrom::Current(0))`\n+    /// but does not flush the internal buffer. Due to this optimization the\n+    /// function does not guarantee that calling `.into_inner()` immediately\n+    /// afterwards will yield the underlying reader at the same position. Use\n+    /// [`BufReader::seek`] instead if you require that guarantee.\n+    ///\n+    /// # Panics\n+    ///\n+    /// This function will panic if the position of the inner reader is smaller\n+    /// than the amount of buffered data. That can happen if the inner reader\n+    /// has an incorrect implementation of [`Seek::stream_position`], or if the\n+    /// position has gone out of sync due to calling [`Seek::seek`] directly on\n+    /// the underlying reader.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```no_run\n+    /// #![feature(seek_convenience)]\n+    /// use std::{\n+    ///     io::{self, BufRead, BufReader, Seek},\n+    ///     fs::File,\n+    /// };\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut f = BufReader::new(File::open(\"foo.txt\")?);\n+    ///\n+    ///     let before = f.stream_position()?;\n+    ///     f.read_line(&mut String::new())?;\n+    ///     let after = f.stream_position()?;\n+    ///\n+    ///     println!(\"The first line was {} bytes long\", after - before);\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    fn stream_position(&mut self) -> io::Result<u64> {\n+        let remainder = (self.cap - self.pos) as u64;\n+        self.inner.stream_position().map(|pos| {\n+            pos.checked_sub(remainder).expect(\n+                \"overflow when subtracting remaining buffer size from inner stream position\",\n+            )\n+        })\n+    }\n }\n \n /// Wraps a writer and buffers its output."}, {"sha": "66a64f667baa4f0d8f085922123bb1e753c42b46", "filename": "library/std/src/io/buffered/tests.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9fe551ae49289ce6f693ca0dabf4c9c15164f67d/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe551ae49289ce6f693ca0dabf4c9c15164f67d/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs?ref=9fe551ae49289ce6f693ca0dabf4c9c15164f67d", "patch": "@@ -1,5 +1,6 @@\n use crate::io::prelude::*;\n use crate::io::{self, BufReader, BufWriter, ErrorKind, IoSlice, LineWriter, SeekFrom};\n+use crate::panic;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::thread;\n \n@@ -86,6 +87,47 @@ fn test_buffered_reader_seek_relative() {\n     assert_eq!(reader.fill_buf().ok(), Some(&[2, 3][..]));\n }\n \n+#[test]\n+fn test_buffered_reader_stream_position() {\n+    let inner: &[u8] = &[5, 6, 7, 0, 1, 2, 3, 4];\n+    let mut reader = BufReader::with_capacity(2, io::Cursor::new(inner));\n+\n+    assert_eq!(reader.stream_position().ok(), Some(0));\n+    assert_eq!(reader.seek(SeekFrom::Start(3)).ok(), Some(3));\n+    assert_eq!(reader.stream_position().ok(), Some(3));\n+    // relative seeking within the buffer and reading position should keep the buffer\n+    assert_eq!(reader.fill_buf().ok(), Some(&[0, 1][..]));\n+    assert!(reader.seek_relative(0).is_ok());\n+    assert_eq!(reader.stream_position().ok(), Some(3));\n+    assert_eq!(reader.buffer(), &[0, 1][..]);\n+    assert!(reader.seek_relative(1).is_ok());\n+    assert_eq!(reader.stream_position().ok(), Some(4));\n+    assert_eq!(reader.buffer(), &[1][..]);\n+    assert!(reader.seek_relative(-1).is_ok());\n+    assert_eq!(reader.stream_position().ok(), Some(3));\n+    assert_eq!(reader.buffer(), &[0, 1][..]);\n+    // relative seeking outside the buffer will discard it\n+    assert!(reader.seek_relative(2).is_ok());\n+    assert_eq!(reader.stream_position().ok(), Some(5));\n+    assert_eq!(reader.buffer(), &[][..]);\n+}\n+\n+#[test]\n+fn test_buffered_reader_stream_position_panic() {\n+    let inner: &[u8] = &[5, 6, 7, 0, 1, 2, 3, 4];\n+    let mut reader = BufReader::with_capacity(4, io::Cursor::new(inner));\n+\n+    // cause internal buffer to be filled but read only partially\n+    let mut buffer = [0, 0];\n+    assert!(reader.read_exact(&mut buffer).is_ok());\n+    // rewinding the internal reader will cause buffer to loose sync\n+    let inner = reader.get_mut();\n+    assert!(inner.seek(SeekFrom::Start(0)).is_ok());\n+    // overflow when subtracting the remaining buffer size from current position\n+    let result = panic::catch_unwind(panic::AssertUnwindSafe(|| reader.stream_position().ok()));\n+    assert!(result.is_err());\n+}\n+\n #[test]\n fn test_buffered_reader_invalidated_after_read() {\n     let inner: &[u8] = &[5, 6, 7, 0, 1, 2, 3, 4];"}]}