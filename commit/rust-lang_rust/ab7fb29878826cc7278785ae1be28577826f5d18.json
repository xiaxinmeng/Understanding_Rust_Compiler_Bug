{"sha": "ab7fb29878826cc7278785ae1be28577826f5d18", "node_id": "C_kwDOAAsO6NoAKGFiN2ZiMjk4Nzg4MjZjYzcyNzg3ODVhZTFiZTI4NTc3ODI2ZjVkMTg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-16T05:12:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-16T05:12:47Z"}, "message": "Rollup merge of #96050 - oli-obk:deaggregator_cleanup, r=RalfJung\n\nRemove some now-dead code that was only relevant before deaggregation.\n\nThe code was broken anyway, if the deaggregator is disabled, it would have ICEd on any non-enum Adt\n\nr? ```@RalfJung```", "tree": {"sha": "4b3025753889db25cfaa5db0bdf218d150b405bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b3025753889db25cfaa5db0bdf218d150b405bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab7fb29878826cc7278785ae1be28577826f5d18", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiWlBPCRBK7hj4Ov3rIwAAtnYIAKzfnhJiwrUfFg0zwWI86dg0\nXhBb7BJuLzaCRR+4gtUlY37UYLSkvjHUYUI0/hnhr5u6K1fYf5kd/UQAa3oHTstE\n1DPnyhVmV+KtCrtDdVcN+w1939h5L3JLCVEcjksUskwquOFlYTWUKkU5dtr/tVJA\ntON0v1kaGl8EyN7+6Ohi3IUbAzSsijpfqj3Di07Sv9pwwefKGabNE1U71Ky/T3IP\nYuVb6rE6mpvUpztDiqAn5n86JFPS3tL9GThWEizchPU+Ma0Re5SSkASl96RwOwCG\n49Dh4K135NHEoWADPOMHlETqtU/uPbWsDhIATApj7NsNK/CtiszU046CI5pCLHM=\n=jfSi\n-----END PGP SIGNATURE-----\n", "payload": "tree 4b3025753889db25cfaa5db0bdf218d150b405bb\nparent fd7a1f153d2598e59ed7014f6ee7054a1e4ac8e4\nparent 48029aba2c4a902fae9c6f028bceae5105979114\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650085967 +0200\ncommitter GitHub <noreply@github.com> 1650085967 +0200\n\nRollup merge of #96050 - oli-obk:deaggregator_cleanup, r=RalfJung\n\nRemove some now-dead code that was only relevant before deaggregation.\n\nThe code was broken anyway, if the deaggregator is disabled, it would have ICEd on any non-enum Adt\n\nr? ```@RalfJung```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7fb29878826cc7278785ae1be28577826f5d18", "html_url": "https://github.com/rust-lang/rust/commit/ab7fb29878826cc7278785ae1be28577826f5d18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab7fb29878826cc7278785ae1be28577826f5d18/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd7a1f153d2598e59ed7014f6ee7054a1e4ac8e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd7a1f153d2598e59ed7014f6ee7054a1e4ac8e4", "html_url": "https://github.com/rust-lang/rust/commit/fd7a1f153d2598e59ed7014f6ee7054a1e4ac8e4"}, {"sha": "48029aba2c4a902fae9c6f028bceae5105979114", "url": "https://api.github.com/repos/rust-lang/rust/commits/48029aba2c4a902fae9c6f028bceae5105979114", "html_url": "https://github.com/rust-lang/rust/commit/48029aba2c4a902fae9c6f028bceae5105979114"}], "stats": {"total": 22, "additions": 3, "deletions": 19}, "files": [{"sha": "e6dfdf54a32d136c7dbf70edb52ba4c9bbeb9ab3", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab7fb29878826cc7278785ae1be28577826f5d18/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7fb29878826cc7278785ae1be28577826f5d18/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=ab7fb29878826cc7278785ae1be28577826f5d18", "patch": "@@ -196,27 +196,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_immediate(*val, &dest)?;\n             }\n \n-            Aggregate(ref kind, ref operands) => {\n-                // active_field_index is for union initialization.\n-                let (dest, active_field_index) = match **kind {\n-                    mir::AggregateKind::Adt(adt_did, variant_index, _, _, active_field_index) => {\n-                        self.write_discriminant(variant_index, &dest)?;\n-                        if self.tcx.adt_def(adt_did).is_enum() {\n-                            assert!(active_field_index.is_none());\n-                            (self.place_downcast(&dest, variant_index)?, None)\n-                        } else {\n-                            if active_field_index.is_some() {\n-                                assert_eq!(operands.len(), 1);\n-                            }\n-                            (dest, active_field_index)\n-                        }\n-                    }\n-                    _ => (dest, None),\n-                };\n+            Aggregate(box ref kind, ref operands) => {\n+                assert!(matches!(kind, mir::AggregateKind::Array(..)));\n \n-                for (i, operand) in operands.iter().enumerate() {\n+                for (field_index, operand) in operands.iter().enumerate() {\n                     let op = self.eval_operand(operand, None)?;\n-                    let field_index = active_field_index.unwrap_or(i);\n                     let field_dest = self.place_field(&dest, field_index)?;\n                     self.copy_op(&op, &field_dest)?;\n                 }"}]}