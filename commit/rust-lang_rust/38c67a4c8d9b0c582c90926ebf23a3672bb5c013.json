{"sha": "38c67a4c8d9b0c582c90926ebf23a3672bb5c013", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YzY3YTRjOGQ5YjBjNTgyYzkwOTI2ZWJmMjNhMzY3MmJiNWMwMTM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-30T19:24:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-30T23:18:19Z"}, "message": "Abstract the build directories further in the makefiles\n\nThis defines variables for host bin and lib directories as well as all target\nbin and lib directories then uses them everywhere.", "tree": {"sha": "d00bd0e1b1db139de8c26cd38a2b6c6b2e7d72dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d00bd0e1b1db139de8c26cd38a2b6c6b2e7d72dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38c67a4c8d9b0c582c90926ebf23a3672bb5c013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38c67a4c8d9b0c582c90926ebf23a3672bb5c013", "html_url": "https://github.com/rust-lang/rust/commit/38c67a4c8d9b0c582c90926ebf23a3672bb5c013", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed106dd6eaa7d2140c082852d95f79717a48d23d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed106dd6eaa7d2140c082852d95f79717a48d23d", "html_url": "https://github.com/rust-lang/rust/commit/ed106dd6eaa7d2140c082852d95f79717a48d23d"}], "stats": {"total": 198, "additions": 103, "deletions": 95}, "files": [{"sha": "60967797eb8bc2786c6acac1201c28377ae87f81", "filename": "Makefile.in", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=38c67a4c8d9b0c582c90926ebf23a3672bb5c013", "patch": "@@ -169,32 +169,41 @@ LLC := $(CFG_LLVM_BINDIR)/llc$(X)\n \n define SREQ\n \n+# Destinations of artifacts for target architectures\n TARGET_ROOT$(1)$(2) = stage$(1)/lib/rustc/$(2)\n-TARGET_BIN$(1)$(2) = $(TARGET_ROOT$(1)$(2))/bin\n-TARGET_LIB$(1)$(2) = $(TARGET_ROOT$(1)$(2))/lib\n-HOST_ROOT$(1) = $(TARGET_ROOT$(1)$$(CFG_HOST_TRIPLE))\n-HOST_BIN$(1) = $(TARGET_BIN$(1)$$(CFG_HOST_TRIPLE))\n-HOST_LIB$(1) = $(TARGET_LIB$(1)$$(CFG_HOST_TRIPLE))\n+TARGET_BIN$(1)$(2) = $$(TARGET_ROOT$(1)$(2))/bin\n+TARGET_LIB$(1)$(2) = $$(TARGET_ROOT$(1)$(2))\n+\n+# Destinations of artifacts for the host compiler\n+HOST_ROOT$(1) = stage$(1)\n+HOST_BIN$(1) = $$(HOST_ROOT$(1))/bin\n+HOST_LIB$(1) = $$(HOST_ROOT$(1))/lib\n+\n+# The target locations of artifacts for the host architecture (used for\n+# promoting target binaries to host binaries)\n+TARGET_HOST_ROOT$(1) = $$(TARGET_ROOT$(1)$$(CFG_HOST_TRIPLE))\n+TARGET_HOST_BIN$(1) = $$(TARGET_BIN$(1)$$(CFG_HOST_TRIPLE))\n+TARGET_HOST_LIB$(1) = $$(TARGET_LIB$(1)$$(CFG_HOST_TRIPLE))\n \n ifdef CFG_DISABLE_SHAREDSTD\n-SREQ$(1)$(2) = $(HOST_BIN$(1))/rustc$(X)          \\\n-           $(HOST_LIB$(1))/$$(CFG_RUNTIME)     \\\n+SREQ$(1)$(2) = $$(HOST_BIN$(1))/rustc$(X)          \\\n+           $$(HOST_LIB$(1))/$$(CFG_RUNTIME)     \\\n            $$(call CFG_STDLIB_DEFAULT,stage$(1),stage$(1)) \\\n-           $(HOST_LIB$(1))/$$(CFG_RUSTLLVM)    \\\n-           $(TARGET_LIB$(1)$(2))/$$(CFG_RUNTIME) \\\n-           $(TARGET_LIB$(1)$(2))/$$(CFG_STDLIB) \\\n-           $(TARGET_LIB$(1)$(2))/intrinsics.bc \\\n-           $(TARGET_LIB$(1)$(2))/main.o \\\n+           $$(HOST_LIB$(1))/$$(CFG_RUSTLLVM)    \\\n+           $$(TARGET_LIB$(1)$(2))/$$(CFG_RUNTIME) \\\n+           $$(TARGET_LIB$(1)$(2))/$$(CFG_STDLIB) \\\n+           $$(TARGET_LIB$(1)$(2))/intrinsics.bc \\\n+           $$(TARGET_LIB$(1)$(2))/main.o \\\n            $$(MKFILES)\n else\n-SREQ$(1)$(2) = $(HOST_BIN$(1))/rustc$(X)          \\\n-           $(HOST_LIB$(1))/$$(CFG_RUNTIME)     \\\n+SREQ$(1)$(2) = $$(HOST_BIN$(1))/rustc$(X)          \\\n+           $$(HOST_LIB$(1))/$$(CFG_RUNTIME)     \\\n            $$(call CFG_STDLIB_DEFAULT,stage$(1),stage$(1)) \\\n-           $(HOST_LIB$(1))/$$(CFG_RUSTLLVM)    \\\n-           $(TARGET_LIB$(1)$(2))/$$(CFG_RUNTIME) \\\n-           $(TARGET_LIB$(1)$(2))/$$(CFG_STDLIB) \\\n-           $(TARGET_LIB$(1)$(2))/intrinsics.bc \\\n-           $(TARGET_LIB$(1)$(2))/main.o \\\n+           $$(HOST_LIB$(1))/$$(CFG_RUSTLLVM)    \\\n+           $$(TARGET_LIB$(1)$(2))/$$(CFG_RUNTIME) \\\n+           $$(TARGET_LIB$(1)$(2))/$$(CFG_STDLIB) \\\n+           $$(TARGET_LIB$(1)$(2))/intrinsics.bc \\\n+           $$(TARGET_LIB$(1)$(2))/main.o \\\n            $$(MKFILES)\n endif\n \n@@ -205,17 +214,17 @@ else\n CFG_VALGRIND_COMPILE$(1) = $$(CFG_VALGRIND_COMPILE)\n endif\n \n-STAGE$(1) := $$(Q)$$(call CFG_RUN_TARG,stage$(1), \\\n-                $$(CFG_VALGRIND_COMPILE) stage$(1)/bin/rustc$$(X) \\\n+STAGE$(1) := $$(Q)$$(call CFG_RUN_TARG,$(1), \\\n+                $$(CFG_VALGRIND_COMPILE) $$(HOST_BIN$(1))/rustc$$(X) \\\n                 $$(CFG_RUSTC_FLAGS) --target=$(2))\n \n-PERF_STAGE$(1) := $$(Q)$$(call CFG_RUN_TARG,stage$(1), \\\n-                $$(CFG_PERF_TOOL) stage$(1)/bin/rustc$$(X) \\\n+PERF_STAGE$(1) := $$(Q)$$(call CFG_RUN_TARG,$(1), \\\n+                $$(CFG_PERF_TOOL) $$(HOST_BIN$(1))/rustc$$(X) \\\n                 $$(CFG_RUSTC_FLAGS) --target=$(2))\n \n endef\n \n-FUZZ := stage1/bin/fuzzer$(X)\n+FUZZ := $(HOST_BIN$(1))/fuzzer$(X)\n \n $(foreach target,$(CFG_TARGET_TRIPLES), \\\n  $(eval $(call SREQ,0,$(target))) \\"}, {"sha": "0d55b0e724ae818536ae5e324d7b024a257caf62", "filename": "mk/clean.mk", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=38c67a4c8d9b0c582c90926ebf23a3672bb5c013", "patch": "@@ -44,16 +44,16 @@ clean-misc:\n define CLEAN_STAGE_N\n \n clean$(1)$(2):\n-\t$(Q)rm -f stage$(1)/bin/rustc\n-\t$(Q)rm -f stage$(1)/bin/fuzzer\n-\t$(Q)rm -f stage$(1)/lib/$(CFG_RUNTIME)\n-\t$(Q)rm -f stage$(1)/lib/$(CFG_STDLIB)\n-\t$(Q)rm -f stage$(1)/lib/$(CFG_RUSTLLVM)\n-\t$(Q)rm -f stage$(1)/lib/rustc/$(2)/$(CFG_RUNTIME)\n-\t$(Q)rm -f stage$(1)/lib/rustc/$(2)/$(CFG_STDLIB)\n-\t$(Q)rm -f stage$(1)/lib/rustc/$(2)/libstd.rlib\n-\t$(Q)rm -f stage$(1)/lib/rustc/$(2)/intrinsics.bc\n-\t$(Q)rm -f stage$(1)/lib/rustc/$(2)/main.o\n+\t$(Q)rm -f $$(HOST_BIN$(1))/rustc\n+\t$(Q)rm -f $$(HOST_BIN$(1))/fuzzer\n+\t$(Q)rm -f $$(HOST_LIB$(1))/$(CFG_RUNTIME)\n+\t$(Q)rm -f $$(HOST_LIB$(1))/$(CFG_STDLIB)\n+\t$(Q)rm -f $$(HOST_LIB$(1))/$(CFG_RUSTLLVM)\n+\t$(Q)rm -f $$(TARGET_LIB$(1)$(2))/$(CFG_RUNTIME)\n+\t$(Q)rm -f $$(TARGET_LIB$(1)$(2))/$(CFG_STDLIB)\n+\t$(Q)rm -f $$(TARGET_LIB$(1)$(2))/libstd.rlib\n+\t$(Q)rm -f $$(TARGET_LIB$(1)$(2))/intrinsics.bc\n+\t$(Q)rm -f $$(TARGET_LIB$(1)$(2))/main.o\n \n endef\n "}, {"sha": "fae07ba3a4c7dec8845c6653260373de1adb5563", "filename": "mk/fuzzer.mk", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2Ffuzzer.mk", "raw_url": "https://github.com/rust-lang/rust/raw/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2Ffuzzer.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ffuzzer.mk?ref=38c67a4c8d9b0c582c90926ebf23a3672bb5c013", "patch": "@@ -4,13 +4,13 @@ FUZZER_INPUTS := $(wildcard $(addprefix $(S)src/fuzzer/, *.rs))\n define FUZZ_STAGE_N\n \n stage$(2)/bin/fuzzer$$(X): $$(FUZZER_CRATE) $$(FUZZER_INPUTS) \\\n-                          $$(SREQ$(2)$(CFG_HOST_TRIPLE)) \\\n-                          stage$(2)/lib/$$(CFG_RUNTIME)                       \\\n-                          stage$(2)/lib/$$(CFG_RUSTLLVM)                      \\\n-                          stage$(2)/lib/$$(CFG_STDLIB) \\\n-                          stage$(2)/lib/$$(CFG_LIBRUSTC)\n+                          $$(SREQ$(2)$$(CFG_HOST_TRIPLE)) \\\n+                          $$(HOST_LIB$(2))/$$(CFG_RUNTIME) \\\n+                          $$(HOST_LIB$(2))/$$(CFG_RUSTLLVM) \\\n+                          $$(HOST_LIB$(2))/$$(CFG_STDLIB) \\\n+                          $$(HOST_LIB$(2))/$$(CFG_LIBRUSTC)\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)) -L stage1/lib -o $$@ $$<\n+\t$$(STAGE$(1)) -L $$(HOST_LIB$(2)) -o $$@ $$<\n \n endef\n "}, {"sha": "63d2529f9be20d64c60cce16a73a2d1cdb1c3b30", "filename": "mk/perf.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2Fperf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2Fperf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fperf.mk?ref=38c67a4c8d9b0c582c90926ebf23a3672bb5c013", "patch": "@@ -2,7 +2,7 @@\n ifdef CFG_PERF_TOOL\n rustc-perf$(X): stage2/bin/rustc$(X)\n \t@$(call E, perf compile: $@)\n-\t$(PERF_STAGE1) -L stage2 -o $@ $(COMPILER_CRATE) >rustc-perf.err 2>&1\n+\t$(PERF_STAGE1) -o $@ $(COMPILER_CRATE) >rustc-perf.err 2>&1\n \t$(Q)rm -f $@\n else\n rustc-perf$(X): stage2/bin/rustc$(X)"}, {"sha": "d83d248b437f4d7a0270b7e1e11ce300db508be9", "filename": "mk/platform.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=38c67a4c8d9b0c582c90926ebf23a3672bb5c013", "patch": "@@ -98,7 +98,7 @@ ifdef CFG_UNIXY\n   CFG_EXE_SUFFIX :=\n   CFG_LDPATH :=\n   CFG_RUN=$(CFG_LDENV)=$(1) $(2)\n-  CFG_RUN_TARG=$(call CFG_RUN,$(CFG_BUILD_DIR)/$(1)/lib,$(2))\n+  CFG_RUN_TARG=$(call CFG_RUN,$(CFG_BUILD_DIR)/$(HOST_LIB$(1)),$(2))\n   CFG_RUN_TEST=$(call CFG_RUN,$(call CFG_TESTLIB,$(1)),\\\n       $(CFG_VALGRIND) $(1))\n   CFG_LIBUV_LINK_FLAGS=-lpthread\n@@ -139,7 +139,7 @@ ifdef CFG_WINDOWSY\n   CFG_LDPATH :=$(CFG_LLVM_BINDIR)\n   CFG_LDPATH :=$(CFG_LDPATH):$$PATH\n   CFG_RUN=PATH=\"$(CFG_LDPATH):$(1)\" $(2)\n-  CFG_RUN_TARG=$(call CFG_RUN,$(1)/lib,$(2))\n+  CFG_RUN_TARG=$(call CFG_RUN,$(HOST_LIB$(1)),$(2))\n   CFG_RUN_TEST=$(call CFG_RUN,$(call CFG_TESTLIB,$(1)),$(1))\n   CFG_LIBUV_LINK_FLAGS=-lWs2_32\n "}, {"sha": "a70fce3c8a18dc74a3cbbd640923f7051882f2b1", "filename": "mk/pp.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2Fpp.mk", "raw_url": "https://github.com/rust-lang/rust/raw/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2Fpp.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fpp.mk?ref=38c67a4c8d9b0c582c90926ebf23a3672bb5c013", "patch": "@@ -12,10 +12,10 @@ else\n                        \"no-reformat\\|xfail-pretty\\|xfail-test\")\n endif\n \n-reformat: $(SREQ1)\n+reformat: $(SREQ1$(CFG_HOST_TRIPLE))\n \t@$(call E, reformat [stage1]: $@)\n \tfor i in $(PP_INPUTS_FILTERED);  \\\n-    do $(call CFG_RUN_TARG,stage1,stage1/rustc$(X)) \\\n+    do $(call CFG_RUN_TARG,1,stage1/rustc$(X)) \\\n        --pretty normal $$i >$$i.tmp; \\\n     if [ $$? -ne 0 ]; \\\n         then echo failed to print $$i; rm $$i.tmp; \\"}, {"sha": "36244d7c7f6da322a635c6c4bc50c00b5d6a99c2", "filename": "mk/snap.mk", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2Fsnap.mk", "raw_url": "https://github.com/rust-lang/rust/raw/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2Fsnap.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fsnap.mk?ref=38c67a4c8d9b0c582c90926ebf23a3672bb5c013", "patch": "@@ -1,13 +1,12 @@\n \n-snap-stage1: stage1/bin/rustc$(X) stage1/lib/$(CFG_RUNTIME) \\\n-\tstage1/lib/$(CFG_RUSTLLVM) stage1/lib/$(CFG_STDLIB)\n+snap-stage1: $(HOST_BIN1)/rustc$(X) $(HOST_LIB1)/$(CFG_RUNTIME) \\\n+\t$(HOST_LIB1)/$(CFG_RUSTLLVM) $(HOST_LIB1)/$(CFG_STDLIB)\n \t$(S)src/etc/make-snapshot.py stage1\n \n-snap-stage2: stage2/bin/rustc$(X) stage2/lib/$(CFG_RUNTIME) \\\n-\tstage2/lib/$(CFG_RUSTLLVM) stage2/lib/$(CFG_STDLIB)\n-\t$(S)src/etc/make-snapshot.py stage2\n-\n-snap-stage3: stage3/bin/rustc$(X) stage3/lib/$(CFG_RUNTIME) \\\n-\tstage3/lib/$(CFG_RUSTLLVM) stage3/lib/$(CFG_STDLIB)\n-\t$(S)src/etc/make-snapshot.py stage3\n+snap-stage1: $(HOST_BIN2)/rustc$(X) $(HOST_LIB2)/$(CFG_RUNTIME) \\\n+\t$(HOST_LIB2)/$(CFG_RUSTLLVM) $(HOST_LIB2)/$(CFG_STDLIB)\n+\t$(S)src/etc/make-snapshot.py stage1\n \n+snap-stage1: $(HOST_BIN3)/rustc$(X) $(HOST_LIB3)/$(CFG_RUNTIME) \\\n+\t$(HOST_LIB3)/$(CFG_RUSTLLVM) $(HOST_LIB3)/$(CFG_STDLIB)\n+\t$(S)src/etc/make-snapshot.py stage1"}, {"sha": "3f4ed12f514d04d1f7bbbd235ae7eb96da1a7d64", "filename": "mk/stage0.mk", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=38c67a4c8d9b0c582c90926ebf23a3672bb5c013", "patch": "@@ -1,22 +1,22 @@\n-stage0/bin/rustc$(X): $(S)src/snapshots.txt $(S)src/etc/get-snapshot.py $(MKFILES)\n+$(HOST_BIN0)/rustc$(X): $(S)src/snapshots.txt $(S)src/etc/get-snapshot.py $(MKFILES)\n \t@$(call E, fetch: $@)\n \t$(Q)$(S)src/etc/get-snapshot.py\n \t$(Q)touch $@\n \n # Host libs will be made in the process of making rustc above.\n \n-stage0/lib/$(CFG_RUNTIME): stage0/bin/rustc$(X)\n+$(HOST_LIB0)/$(CFG_RUNTIME): $(HOST_BIN0)/rustc$(X)\n \t$(Q)touch $@\n \n-stage0/lib/$(CFG_STDLIB): stage0/bin/rustc$(X)\n+$(HOST_LIB0)/$(CFG_STDLIB): $(HOST_BIN0)/rustc$(X)\n \t$(Q)touch $@\n \n-stage0/lib/$(CFG_RUSTLLVM): stage0/bin/rustc$(X)\n+$(HOST_LIB0)/$(CFG_RUSTLLVM): $(HOST_BIN0)/rustc$(X)\n \t$(Q)touch $@\n \n # Instantiate template (in stageN.mk) for building\n # target libraries.\n \n-SREQpre = stage0/lib/$(CFG_HOST_TRIPLE)/main.o $(MKFILES)\n+SREQpre = $(MKFILES)\n $(eval $(call TARGET_LIBS,pre,0,$(CFG_HOST_TRIPLE)))\n "}, {"sha": "7e726bcae5e6dbe3669dd2b6a5a29d413f565e20", "filename": "mk/stageN.mk", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2FstageN.mk", "raw_url": "https://github.com/rust-lang/rust/raw/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2FstageN.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2FstageN.mk?ref=38c67a4c8d9b0c582c90926ebf23a3672bb5c013", "patch": "@@ -19,37 +19,37 @@ define STAGE_N\n # for different directories, to handle cases where (say) a test relies on a\n # compiler that relies on a .o file.\n \n-stage$(2)/bin/%.o: stage$(2)/bin/%.s\n+$$(HOST_BIN$(2))/%.o: $$(HOST_BIN$(2))/%.s\n \t@$$(call E, assemble [gcc]: $$@)\n \t$$(Q)gcc $$(CFG_GCCISH_CFLAGS) -o $$@ -c $$<\n \n-stage$(2)/lib/%.o: stage$(2)/lib/%.s\n+$$(HOST_LIB$(2))/%.o: $$(HOST_LIB$(2))/%.s\n \t@$$(call E, assemble [gcc]: $$@)\n \t$$(Q)gcc $$(CFG_GCCISH_CFLAGS) -o $$@ -c $$<\n \n-stage$(2)/bin/rustc$$(X): $$(COMPILER_CRATE) $$(COMPILER_INPUTS)          \\\n-                          stage$(2)/lib/$$(CFG_RUNTIME)                       \\\n+$$(HOST_BIN$(2))/rustc$$(X): $$(COMPILER_CRATE) $$(COMPILER_INPUTS)          \\\n+                          $$(HOST_LIB$(2))/$$(CFG_RUNTIME)                       \\\n                           $$(call CFG_STDLIB_DEFAULT,stage$(1),stage$(2)) \\\n-                          stage$(2)/lib/$$(CFG_RUSTLLVM)                      \\\n+                          $$(HOST_LIB$(2))/$$(CFG_RUSTLLVM)                      \\\n                           $$(SREQ$(1)$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)) -L stage$(2)/lib -o $$@ $$<\n+\t$$(STAGE$(1)) -L $$(HOST_LIB$(2)) -o $$@ $$<\n \n-stage$(2)/lib/$$(CFG_LIBRUSTC): \\\n+$$(HOST_LIB$(2))/$$(CFG_LIBRUSTC): \\\n           $$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n           $$(SREQ$(2)$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)) -L stage$(2)/lib --lib -o $$@ $$<\n+\t$$(STAGE$(1)) -L $$(HOST_LIB$(2)) --lib -o $$@ $$<\n \n-stage$(2)/lib/$$(CFG_RUNTIME): rt/$$(CFG_RUNTIME)\n+$$(HOST_LIB$(2))/$$(CFG_RUNTIME): rt/$$(CFG_RUNTIME)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-stage$(2)/lib/$$(CFG_STDLIB): stage$(1)/lib/rustc/$$(CFG_HOST_TRIPLE)/$$(CFG_STDLIB)\n+$$(HOST_LIB$(2))/$$(CFG_STDLIB): $$(TARGET_HOST_LIB$(1))/$$(CFG_STDLIB)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-stage$(2)/lib/$$(CFG_RUSTLLVM): rustllvm/$$(CFG_RUSTLLVM)\n+$$(HOST_LIB$(2))/$$(CFG_RUSTLLVM): rustllvm/$$(CFG_RUSTLLVM)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n@@ -66,35 +66,35 @@ define TARGET_LIBS\n # using these exclusively, you should delete the non-arch-prefixed\n # rules above. They're duplicates, redundant.\n \n-stage$(2)/lib/rustc/$(3)/intrinsics.bc: $$(INTRINSICS_BC)\n+$$(TARGET_LIB$(2)$(3))/intrinsics.bc: $$(INTRINSICS_BC)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-stage$(2)/lib/rustc/$(3)/main.o: rt/main.o\n+$$(TARGET_LIB$(2)$(3))/main.o: rt/main.o\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-stage$(2)/lib/rustc/$(3)/$$(CFG_STDLIB): \\\n+$$(TARGET_LIB$(2)$(3))/$$(CFG_STDLIB): \\\n         $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-        stage$(2)/bin/rustc$$(X)               \\\n-        stage$(2)/lib/$$(CFG_RUNTIME)          \\\n-        stage$(2)/lib/$$(CFG_RUSTLLVM)         \\\n-        stage$(2)/lib/rustc/$(3)/intrinsics.bc        \\\n+        $$(HOST_BIN$(2))/rustc$$(X)               \\\n+        $$(HOST_LIB$(2))/$$(CFG_RUNTIME)          \\\n+        $$(HOST_LIB$(2))/$$(CFG_RUSTLLVM)         \\\n+        $$(TARGET_LIB$(2)$(3))/intrinsics.bc        \\\n         $$(SREQ$(1)$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(2))  --lib -o $$@ $$<\n \n-stage$(2)/lib/rustc/$(3)/libstd.rlib: \\\n+$$(TARGET_LIB$(2)$(3))/libstd.rlib: \\\n         $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-        stage$(2)/bin/rustc$$(X)               \\\n-        stage$(2)/lib/$$(CFG_RUNTIME)          \\\n-        stage$(2)/lib/$$(CFG_RUSTLLVM)         \\\n-        stage$(2)/lib/rustc/$(3)/intrinsics.bc        \\\n+        $$(HOST_BIN$(2))/rustc$$(X)               \\\n+        $$(HOST_LIB$(2))/$$(CFG_RUNTIME)          \\\n+        $$(HOST_LIB$(2))/$$(CFG_RUSTLLVM)         \\\n+        $$(TARGET_LIB$(2)$(3))/intrinsics.bc        \\\n         $$(SREQ$(1)$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(2)) --lib --static -o $$@ $$<\n \n-stage$(2)/lib/rustc/$(3)/$$(CFG_RUNTIME): rt/$$(CFG_RUNTIME)\n+$$(TARGET_LIB$(2)$(3))/$$(CFG_RUNTIME): rt/$$(CFG_RUNTIME)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n "}, {"sha": "49534206df76f1de897978f1ecbdedc3f40b41de", "filename": "mk/tests.mk", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/38c67a4c8d9b0c582c90926ebf23a3672bb5c013/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=38c67a4c8d9b0c582c90926ebf23a3672bb5c013", "patch": "@@ -68,7 +68,7 @@ STDTEST_INPUTS := $(wildcard $(S)src/test/stdtest/*rs)\n ifdef CTEST_VALGRIND\n   CFG_RUN_CTEST=$(call CFG_RUN_TEST,$(2))\n else\n-  CFG_RUN_CTEST=$(call CFG_RUN,stage$(1)/lib/rustc/$(CFG_HOST_TRIPLE),$(2))\n+  CFG_RUN_CTEST=$(call CFG_RUN,$(TARGET_HOST_LIB$(1)),$(2))\n endif\n \n ######################################################################\n@@ -146,16 +146,16 @@ test/stdtest.stage$(2).out.tmp: test/stdtest.stage$(2)$$(X)\n check-stage$(2)-rustc: test/rustctest.stage$(2).out \\\n \n test/rustctest.stage$(2)$$(X): $$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n-                           stage$(2)/lib/$$(CFG_RUNTIME) \\\n+                           $$(HOST_LIB$(2))/$$(CFG_RUNTIME) \\\n                            $$(call CFG_STDLIB_DEFAULT,stage$(1),stage$(2)) \\\n-                           stage$(2)/lib/$$(CFG_RUSTLLVM) \\\n+                           $$(HOST_LIB$(2))/$$(CFG_RUSTLLVM) \\\n                            $$(SREQ$(1)$$(CFG_HOST_TRIPLE))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)) -o $$@ $$< --test\n \n test/rustctest.stage$(2).out.tmp: test/rustctest.stage$(2)$$(X)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN,$(CFG_BUILD_DIR)/stage$(2)/lib,$$(CFG_VALGRIND) $$<) \\\n+\t$$(Q)$$(call CFG_RUN,$$(HOST_LIB$(2)),$$(CFG_VALGRIND) $$<) \\\n \t  $$(TESTARGS)\n \t$$(Q)touch $$@\n \n@@ -185,9 +185,9 @@ check-stage$(2)-pretty: check-stage$(2)-pretty-rpass \\\n                         check-stage$(2)-pretty-bench \\\n                         check-stage$(2)-pretty-pretty \\\n \n-CTEST_COMMON_ARGS$(2) := --compile-lib-path stage$(2)/lib \\\n-                         --run-lib-path stage$(2)/lib/$$(CFG_HOST_TRIPLE) \\\n-                         --rustc-path stage$(2)/bin/rustc$$(X) \\\n+CTEST_COMMON_ARGS$(2) := --compile-lib-path $$(HOST_LIB$(2)) \\\n+                         --run-lib-path $$(TARGET_LIB$(2)$$(CFG_HOST_TRIPLE)) \\\n+                         --rustc-path $$(HOST_BIN$(2))/rustc$$(X) \\\n                          --stage-id stage$(2) \\\n                          --rustcflags \"$$(CFG_RUSTC_FLAGS)\" \\\n                          $$(CTEST_TESTARGS) \\\n@@ -204,19 +204,19 @@ RFAIL_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n                   $$(CTEST_RUNTOOL) \\\n \n RPASS_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n-                  --src-base $(S)src/test/run-pass/ \\\n+                  --src-base $$(S)src/test/run-pass/ \\\n                   --build-base test/run-pass/ \\\n                   --mode run-pass \\\n                   $$(CTEST_RUNTOOL) \\\n \n BENCH_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n-                  --src-base $(S)src/test/bench/ \\\n+                  --src-base $$(S)src/test/bench/ \\\n                   --build-base test/bench/ \\\n                   --mode run-pass \\\n                   $$(CTEST_RUNTOOL) \\\n \n PERF_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n-                  --src-base $(S)src/test/bench/ \\\n+                  --src-base $$(S)src/test/bench/ \\\n                   --build-base test/perf/ \\\n                   --mode run-pass \\\n                   $$(CTEST_PERF_RUNTOOL) \\\n@@ -324,9 +324,9 @@ stage2/lib/$(FT_LIB): test/$(FT).rc $(SREQ2$(CFG_HOST_TRIPLE))\n \t@$(call E, compile_and_link: $@)\n \t$(STAGE2) --lib -o $@ $<\n \n-test/$(FT_DRIVER)$(X): test/$(FT_DRIVER).rs stage2/lib/$(FT_LIB) $(SREQ2$(CFG_HOST_TRIPLE))\n+test/$(FT_DRIVER)$(X): test/$(FT_DRIVER).rs $(HOST_LIB2)/$(FT_LIB) $(SREQ2$(CFG_HOST_TRIPLE))\n \t@$(call E, compile_and_link: $@)\n-\t$(STAGE2) -L stage2/lib -o $@ $<\n+\t$(STAGE2) -L $(HOST_LIB2) -o $@ $<\n \n test/$(FT_DRIVER).out: test/$(FT_DRIVER)$(X) $(SREQ2$(CFG_HOST_TRIPLE))\n \t$(Q)$(call CFG_RUN_TEST, $<)"}]}