{"sha": "90d28eada18e19cde2764d360d72da0cf72c9694", "node_id": "C_kwDOAAsO6NoAKDkwZDI4ZWFkYTE4ZTE5Y2RlMjc2NGQzNjBkNzJkYTBjZjcyYzk2OTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-15T07:11:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-15T07:11:51Z"}, "message": "Auto merge of #2116 - carbotaniuman:minimal-miri-changes, r=RalfJung\n\nMinimal miri changes for rustc permissive provenance\n\nSimple no-op changes to adapt to new API surface.", "tree": {"sha": "3e2273447ed6871494f8ff4fc46c40f63b9cae9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e2273447ed6871494f8ff4fc46c40f63b9cae9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90d28eada18e19cde2764d360d72da0cf72c9694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90d28eada18e19cde2764d360d72da0cf72c9694", "html_url": "https://github.com/rust-lang/rust/commit/90d28eada18e19cde2764d360d72da0cf72c9694", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90d28eada18e19cde2764d360d72da0cf72c9694/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98c8c8f9b5090d9aee1900aabcc24ff850c40683", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c8c8f9b5090d9aee1900aabcc24ff850c40683", "html_url": "https://github.com/rust-lang/rust/commit/98c8c8f9b5090d9aee1900aabcc24ff850c40683"}, {"sha": "f8478df6dcdf92192f0df550145283673c494a73", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8478df6dcdf92192f0df550145283673c494a73", "html_url": "https://github.com/rust-lang/rust/commit/f8478df6dcdf92192f0df550145283673c494a73"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "1c54dc72ba4b0d2cc0e191a9f10746dec14d930e", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d28eada18e19cde2764d360d72da0cf72c9694/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/90d28eada18e19cde2764d360d72da0cf72c9694/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=90d28eada18e19cde2764d360d72da0cf72c9694", "patch": "@@ -1 +1 @@\n-481db40311cdd241ae4d33f34f2f75732e44d8e8\n+2d691170885b32502b391b8b1a0d54d2419a5653"}, {"sha": "3d97bed7ae2568163b747d18eabc372f2ca69626", "filename": "src/machine.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/90d28eada18e19cde2764d360d72da0cf72c9694/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d28eada18e19cde2764d360d72da0cf72c9694/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=90d28eada18e19cde2764d360d72da0cf72c9694", "patch": "@@ -159,8 +159,8 @@ impl Provenance for Tag {\n         write!(f, \"{:?}\", tag.sb)\n     }\n \n-    fn get_alloc_id(self) -> AllocId {\n-        self.alloc_id\n+    fn get_alloc_id(self) -> Option<AllocId> {\n+        Some(self.alloc_id)\n     }\n }\n \n@@ -608,21 +608,37 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     }\n \n     #[inline(always)]\n-    fn ptr_from_addr(\n+    fn ptr_from_addr_cast(\n         ecx: &MiriEvalContext<'mir, 'tcx>,\n         addr: u64,\n     ) -> Pointer<Option<Self::PointerTag>> {\n         intptrcast::GlobalStateInner::ptr_from_addr(addr, ecx)\n     }\n \n+    #[inline(always)]\n+    fn ptr_from_addr_transmute(\n+        ecx: &MiriEvalContext<'mir, 'tcx>,\n+        addr: u64,\n+    ) -> Pointer<Option<Self::PointerTag>> {\n+        Self::ptr_from_addr_cast(ecx, addr)\n+    }\n+\n+    #[inline(always)]\n+    fn expose_ptr(\n+        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        _ptr: Pointer<Self::PointerTag>,\n+    ) -> InterpResult<'tcx> {\n+        Ok(())\n+    }\n+\n     /// Convert a pointer with provenance into an allocation-offset pair,\n     /// or a `None` with an absolute address if that conversion is not possible.\n     fn ptr_get_alloc(\n         ecx: &MiriEvalContext<'mir, 'tcx>,\n         ptr: Pointer<Self::PointerTag>,\n-    ) -> (AllocId, Size, Self::TagExtra) {\n+    ) -> Option<(AllocId, Size, Self::TagExtra)> {\n         let rel = intptrcast::GlobalStateInner::abs_ptr_to_rel(ecx, ptr);\n-        (ptr.provenance.alloc_id, rel, ptr.provenance.sb)\n+        Some((ptr.provenance.alloc_id, rel, ptr.provenance.sb))\n     }\n \n     #[inline(always)]"}]}