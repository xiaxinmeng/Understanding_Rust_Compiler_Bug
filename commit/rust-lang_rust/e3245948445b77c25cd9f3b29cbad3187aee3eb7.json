{"sha": "e3245948445b77c25cd9f3b29cbad3187aee3eb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMjQ1OTQ4NDQ1Yjc3YzI1Y2Q5ZjNiMjljYmFkMzE4N2FlZTNlYjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-14T02:11:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-14T02:11:18Z"}, "message": "Auto merge of #43842 - bjorn3:no_llvm_cleanup, r=alexcrichton\n\nCleanup for \"Support compiling rustc without LLVM (try 2)\"\n\nThis includes a small patch to allow running tests without llvm. Also check if you are not trying to compile a dylib.\n\ncc #42932\nr? @alexcrichton", "tree": {"sha": "9a1f08b560d38c777a77eb1e6bdc85d691adcd41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a1f08b560d38c777a77eb1e6bdc85d691adcd41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3245948445b77c25cd9f3b29cbad3187aee3eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3245948445b77c25cd9f3b29cbad3187aee3eb7", "html_url": "https://github.com/rust-lang/rust/commit/e3245948445b77c25cd9f3b29cbad3187aee3eb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3245948445b77c25cd9f3b29cbad3187aee3eb7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3cf2062015200c0705ec2820dd02a7b9dc9bb22", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3cf2062015200c0705ec2820dd02a7b9dc9bb22", "html_url": "https://github.com/rust-lang/rust/commit/f3cf2062015200c0705ec2820dd02a7b9dc9bb22"}, {"sha": "005bc2c3a5e20c14638e5df3f2338cbbb949c760", "url": "https://api.github.com/repos/rust-lang/rust/commits/005bc2c3a5e20c14638e5df3f2338cbbb949c760", "html_url": "https://github.com/rust-lang/rust/commit/005bc2c3a5e20c14638e5df3f2338cbbb949c760"}], "stats": {"total": 285, "additions": 144, "deletions": 141}, "files": [{"sha": "1823dd4ebc0434bc16607c2361e07e49fe593249", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e3245948445b77c25cd9f3b29cbad3187aee3eb7/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3245948445b77c25cd9f3b29cbad3187aee3eb7/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=e3245948445b77c25cd9f3b29cbad3187aee3eb7", "patch": "@@ -618,12 +618,6 @@ impl Step for Compiletest {\n         if let Some(ref dir) = build.lldb_python_dir {\n             cmd.arg(\"--lldb-python-dir\").arg(dir);\n         }\n-        let llvm_config = build.llvm_config(target);\n-        let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));\n-        cmd.arg(\"--llvm-version\").arg(llvm_version);\n-        if !build.is_rust_llvm(target) {\n-            cmd.arg(\"--system-llvm\");\n-        }\n \n         cmd.args(&build.config.cmd.test_args());\n \n@@ -635,17 +629,32 @@ impl Step for Compiletest {\n             cmd.arg(\"--quiet\");\n         }\n \n-        // Only pass correct values for these flags for the `run-make` suite as it\n-        // requires that a C++ compiler was configured which isn't always the case.\n-        if suite == \"run-make\" {\n-            let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n-            let llvm_cxxflags = output(Command::new(&llvm_config).arg(\"--cxxflags\"));\n-            cmd.arg(\"--cc\").arg(build.cc(target))\n-               .arg(\"--cxx\").arg(build.cxx(target).unwrap())\n-               .arg(\"--cflags\").arg(build.cflags(target).join(\" \"))\n-               .arg(\"--llvm-components\").arg(llvm_components.trim())\n-               .arg(\"--llvm-cxxflags\").arg(llvm_cxxflags.trim());\n-        } else {\n+        if build.config.llvm_enabled {\n+            let llvm_config = build.llvm_config(target);\n+            let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));\n+            cmd.arg(\"--llvm-version\").arg(llvm_version);\n+            if !build.is_rust_llvm(target) {\n+                cmd.arg(\"--system-llvm\");\n+            }\n+\n+            // Only pass correct values for these flags for the `run-make` suite as it\n+            // requires that a C++ compiler was configured which isn't always the case.\n+            if suite == \"run-make\" {\n+                let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n+                let llvm_cxxflags = output(Command::new(&llvm_config).arg(\"--cxxflags\"));\n+                cmd.arg(\"--cc\").arg(build.cc(target))\n+                .arg(\"--cxx\").arg(build.cxx(target).unwrap())\n+                .arg(\"--cflags\").arg(build.cflags(target).join(\" \"))\n+                .arg(\"--llvm-components\").arg(llvm_components.trim())\n+                .arg(\"--llvm-cxxflags\").arg(llvm_cxxflags.trim());\n+            }\n+        }\n+        if suite == \"run-make\" && !build.config.llvm_enabled {\n+            println!(\"Ignoring run-make test suite as they generally dont work without LLVM\");\n+            return;\n+        }\n+\n+        if suite != \"run-make\" {\n             cmd.arg(\"--cc\").arg(\"\")\n                .arg(\"--cxx\").arg(\"\")\n                .arg(\"--cflags\").arg(\"\")"}, {"sha": "1444dcf4271c84563628bbe145e67e0bf6f81590", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 27, "deletions": 35, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e3245948445b77c25cd9f3b29cbad3187aee3eb7/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3245948445b77c25cd9f3b29cbad3187aee3eb7/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=e3245948445b77c25cd9f3b29cbad3187aee3eb7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![cfg_attr(not(feature=\"llvm\"), allow(dead_code))]\n+\n use rustc::hir::{self, map as hir_map};\n use rustc::hir::lowering::lower_crate;\n use rustc::ich::Fingerprint;\n@@ -19,8 +21,6 @@ use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n use rustc::session::search_paths::PathKind;\n use rustc::lint;\n use rustc::middle::{self, stability, reachable};\n-#[cfg(feature=\"llvm\")]\n-use rustc::middle::dependency_format;\n use rustc::middle::privacy::AccessLevels;\n use rustc::mir::transform::{MIR_CONST, MIR_VALIDATED, MIR_OPTIMIZED, Passes};\n use rustc::ty::{self, TyCtxt, Resolutions, GlobalArenas};\n@@ -33,9 +33,7 @@ use rustc_incremental::{self, IncrementalHashesMap};\n use rustc_resolve::{MakeGlobMap, Resolver};\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::{self, CStore};\n-#[cfg(feature=\"llvm\")]\n-use rustc_trans::back::{link, write};\n-#[cfg(feature=\"llvm\")]\n+use rustc_trans::back::write;\n use rustc_trans as trans;\n use rustc_typeck as typeck;\n use rustc_privacy;\n@@ -73,11 +71,7 @@ pub fn compile_input(sess: &Session,\n                      output: &Option<PathBuf>,\n                      addl_plugins: Option<Vec<String>>,\n                      control: &CompileController) -> CompileResult {\n-    #[cfg(feature=\"llvm\")]\n     use rustc_trans::back::write::OngoingCrateTranslation;\n-    #[cfg(not(feature=\"llvm\"))]\n-    type OngoingCrateTranslation = ();\n-\n     macro_rules! controller_entry_point {\n         ($point: ident, $tsess: expr, $make_state: expr, $phase_result: expr) => {{\n             let state = &mut $make_state;\n@@ -94,6 +88,23 @@ pub fn compile_input(sess: &Session,\n         }}\n     }\n \n+    if cfg!(not(feature=\"llvm\")) {\n+        use rustc::session::config::CrateType;\n+        if !sess.opts.debugging_opts.no_trans && sess.opts.output_types.should_trans() {\n+            sess.err(\"LLVM is not supported by this rustc. Please use -Z no-trans to compile\")\n+        }\n+\n+        if sess.opts.crate_types.iter().all(|&t|{\n+            t != CrateType::CrateTypeRlib && t != CrateType::CrateTypeExecutable\n+        }) && !sess.opts.crate_types.is_empty() {\n+            sess.err(\n+                \"LLVM is not supported by this rustc, so non rlib libraries are not supported\"\n+            );\n+        }\n+\n+        sess.abort_if_errors();\n+    }\n+\n     // We need nested scopes here, because the intermediate results can keep\n     // large chunks of memory alive and we want to free them as soon as\n     // possible to keep the peak memory usage low\n@@ -217,7 +228,6 @@ pub fn compile_input(sess: &Session,\n                 tcx.print_debug_stats();\n             }\n \n-            #[cfg(feature=\"llvm\")]\n             let trans = phase_4_translate_to_llvm(tcx, analysis, incremental_hashes_map,\n                                                   &outputs);\n \n@@ -233,24 +243,13 @@ pub fn compile_input(sess: &Session,\n                 }\n             }\n \n-            #[cfg(not(feature=\"llvm\"))]\n-            {\n-                let _ = incremental_hashes_map;\n-                sess.err(&format!(\"LLVM is not supported by this rustc\"));\n-                sess.abort_if_errors();\n-                unreachable!();\n-            }\n-\n-            #[cfg(feature=\"llvm\")]\n             Ok((outputs, trans))\n         })??\n     };\n \n-    #[cfg(not(feature=\"llvm\"))]\n-    {\n-        let _ = outputs;\n-        let _ = trans;\n-        unreachable!();\n+    if cfg!(not(feature=\"llvm\")) {\n+        let (_, _) = (outputs, trans);\n+        sess.fatal(\"LLVM is not supported by this rustc\");\n     }\n \n     #[cfg(feature=\"llvm\")]\n@@ -393,7 +392,6 @@ pub struct CompileState<'a, 'tcx: 'a> {\n     pub resolutions: Option<&'a Resolutions>,\n     pub analysis: Option<&'a ty::CrateAnalysis>,\n     pub tcx: Option<TyCtxt<'a, 'tcx, 'tcx>>,\n-    #[cfg(feature=\"llvm\")]\n     pub trans: Option<&'a trans::CrateTranslation>,\n }\n \n@@ -420,7 +418,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n             resolutions: None,\n             analysis: None,\n             tcx: None,\n-            #[cfg(feature=\"llvm\")]\n             trans: None,\n         }\n     }\n@@ -509,7 +506,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n         }\n     }\n \n-    #[cfg(feature=\"llvm\")]\n     fn state_after_llvm(input: &'a Input,\n                         session: &'tcx Session,\n                         out_dir: &'a Option<PathBuf>,\n@@ -523,7 +519,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n         }\n     }\n \n-    #[cfg(feature=\"llvm\")]\n     fn state_when_compilation_done(input: &'a Input,\n                                    session: &'tcx Session,\n                                    out_dir: &'a Option<PathBuf>,\n@@ -942,7 +937,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     mir::provide(&mut local_providers);\n     reachable::provide(&mut local_providers);\n     rustc_privacy::provide(&mut local_providers);\n-    #[cfg(feature=\"llvm\")]\n     trans::provide(&mut local_providers);\n     typeck::provide(&mut local_providers);\n     ty::provide(&mut local_providers);\n@@ -955,7 +949,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     let mut extern_providers = ty::maps::Providers::default();\n     cstore::provide(&mut extern_providers);\n-    #[cfg(feature=\"llvm\")]\n     trans::provide(&mut extern_providers);\n     ty::provide_extern(&mut extern_providers);\n     traits::provide_extern(&mut extern_providers);\n@@ -1102,7 +1095,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n /// Run the translation phase to LLVM, after which the AST and analysis can\n /// be discarded.\n-#[cfg(feature=\"llvm\")]\n pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            analysis: ty::CrateAnalysis,\n                                            incremental_hashes_map: IncrementalHashesMap,\n@@ -1112,7 +1104,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     time(time_passes,\n          \"resolving dependency formats\",\n-         || dependency_format::calculate(tcx));\n+         || ::rustc::middle::dependency_format::calculate(tcx));\n \n     let translation =\n         time(time_passes,\n@@ -1147,9 +1139,9 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n pub fn phase_6_link_output(sess: &Session,\n                            trans: &trans::CrateTranslation,\n                            outputs: &OutputFilenames) {\n-    time(sess.time_passes(),\n-         \"linking\",\n-         || link::link_binary(sess, trans, outputs, &trans.crate_name.as_str()));\n+    time(sess.time_passes(), \"linking\", || {\n+        ::rustc_trans::back::link::link_binary(sess, trans, outputs, &trans.crate_name.as_str())\n+    });\n }\n \n fn escape_dep_filename(filename: &str) -> String {"}, {"sha": "f8cd2280cafe1e5779ab0c277e3538ecf3f21d3d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 87, "deletions": 60, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/e3245948445b77c25cd9f3b29cbad3187aee3eb7/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3245948445b77c25cd9f3b29cbad3187aee3eb7/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e3245948445b77c25cd9f3b29cbad3187aee3eb7", "patch": "@@ -28,15 +28,10 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(set_stdio)]\n \n-#[cfg(not(feature=\"llvm\"))]\n-extern crate ar;\n-\n extern crate arena;\n extern crate getopts;\n extern crate graphviz;\n extern crate env_logger;\n-#[cfg(not(feature=\"llvm\"))]\n-extern crate owning_ref;\n extern crate libc;\n extern crate rustc;\n extern crate rustc_allocator;\n@@ -71,8 +66,6 @@ use pretty::{PpMode, UserIdentifiedItem};\n use rustc_resolve as resolve;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n-#[cfg(feature=\"llvm\")]\n-use rustc_trans::back::write::{RELOC_MODEL_ARGS, CODE_GEN_MODEL_ARGS};\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config, Session, build_session, CompileResult};\n use rustc::session::CompileIncomplete;\n@@ -81,13 +74,9 @@ use rustc::session::config::nightly_options;\n use rustc::session::{early_error, early_warn};\n use rustc::lint::Lint;\n use rustc::lint;\n-#[cfg(not(feature=\"llvm\"))]\n-use rustc::middle::cstore::MetadataLoader as MetadataLoaderTrait;\n use rustc_metadata::locator;\n use rustc_metadata::cstore::CStore;\n use rustc::util::common::{time, ErrorReported};\n-#[cfg(not(feature=\"llvm\"))]\n-use rustc_back::target::Target;\n \n use serialize::json::ToJson;\n \n@@ -100,8 +89,6 @@ use std::ffi::OsString;\n use std::io::{self, Read, Write};\n use std::iter::repeat;\n use std::path::PathBuf;\n-#[cfg(not(feature=\"llvm\"))]\n-use std::path::Path;\n use std::process::{self, Command, Stdio};\n use std::rc::Rc;\n use std::str;\n@@ -114,15 +101,11 @@ use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n use syntax::parse::{self, PResult};\n use syntax_pos::{DUMMY_SP, MultiSpan};\n \n-#[cfg(not(feature=\"llvm\"))]\n-use owning_ref::{OwningRef, ErasedBoxRef};\n-\n #[cfg(test)]\n pub mod test;\n \n pub mod driver;\n pub mod pretty;\n-#[cfg(feature=\"llvm\")]\n pub mod target_features;\n mod derive_registrar;\n \n@@ -169,48 +152,106 @@ pub fn run<F>(run_compiler: F) -> isize\n }\n \n #[cfg(not(feature=\"llvm\"))]\n-pub struct NoLLvmMetadataLoader;\n-\n-#[cfg(not(feature=\"llvm\"))]\n-pub use NoLLvmMetadataLoader as MetadataLoader;\n+pub use no_llvm_metadata_loader::NoLLvmMetadataLoader as MetadataLoader;\n #[cfg(feature=\"llvm\")]\n pub use rustc_trans::LlvmMetadataLoader as MetadataLoader;\n \n #[cfg(not(feature=\"llvm\"))]\n-impl MetadataLoaderTrait for NoLLvmMetadataLoader {\n-    fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<ErasedBoxRef<[u8]>, String> {\n-        use std::fs::File;\n-        use std::io;\n-        use self::ar::Archive;\n-\n-        let file = File::open(filename).map_err(|e|format!(\"metadata file open err: {:?}\", e))?;\n-        let mut archive = Archive::new(file);\n-\n-        while let Some(entry_result) = archive.next_entry() {\n-            let mut entry = entry_result.map_err(|e|format!(\"metadata section read err: {:?}\", e))?;\n-            if entry.header().identifier() == \"rust.metadata.bin\" {\n-                let mut buf = Vec::new();\n-                io::copy(&mut entry, &mut buf).unwrap();\n-                let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n-                return Ok(buf.map_owner_box().erase_owner());\n+mod no_llvm_metadata_loader {\n+    extern crate ar;\n+    extern crate owning_ref;\n+\n+    use rustc::middle::cstore::MetadataLoader as MetadataLoaderTrait;\n+    use rustc_back::target::Target;\n+    use std::io;\n+    use std::fs::File;\n+    use std::path::Path;\n+\n+    use self::ar::Archive;\n+    use self::owning_ref::{OwningRef, ErasedBoxRef};\n+\n+    pub struct NoLLvmMetadataLoader;\n+\n+    impl MetadataLoaderTrait for NoLLvmMetadataLoader {\n+        fn get_rlib_metadata(\n+            &self,\n+            _: &Target,\n+            filename: &Path\n+        ) -> Result<ErasedBoxRef<[u8]>, String> {\n+            let file = File::open(filename).map_err(|e| {\n+                format!(\"metadata file open err: {:?}\", e)\n+            })?;\n+            let mut archive = Archive::new(file);\n+\n+            while let Some(entry_result) = archive.next_entry() {\n+                let mut entry = entry_result.map_err(|e| {\n+                    format!(\"metadata section read err: {:?}\", e)\n+                })?;\n+                if entry.header().identifier() == \"rust.metadata.bin\" {\n+                    let mut buf = Vec::new();\n+                    io::copy(&mut entry, &mut buf).unwrap();\n+                    let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n+                    return Ok(buf.map_owner_box().erase_owner());\n+                }\n             }\n+\n+            Err(\"Couldnt find metadata section\".to_string())\n         }\n \n-        Err(\"Couldnt find metadata section\".to_string())\n+        fn get_dylib_metadata(&self,\n+                            _target: &Target,\n+                            _filename: &Path)\n+                            -> Result<ErasedBoxRef<[u8]>, String> {\n+            panic!(\"Dylib metadata loading not supported without LLVM\")\n+        }\n     }\n+}\n \n-    fn get_dylib_metadata(&self,\n-                          _target: &Target,\n-                          _filename: &Path)\n-                          -> Result<ErasedBoxRef<[u8]>, String> {\n-        panic!(\"Dylib metadata loading not supported without LLVM\")\n+#[cfg(not(feature=\"llvm\"))]\n+mod rustc_trans {\n+    use syntax_pos::symbol::Symbol;\n+    use rustc::session::Session;\n+    use rustc::session::config::{PrintRequest, OutputFilenames};\n+    use rustc::ty::{TyCtxt, CrateAnalysis};\n+    use rustc::ty::maps::Providers;\n+    use rustc_incremental::IncrementalHashesMap;\n+\n+    use self::back::write::OngoingCrateTranslation;\n+\n+    pub fn init(_sess: &Session) {}\n+    pub fn enable_llvm_debug() {}\n+    pub fn provide(_providers: &mut Providers) {}\n+    pub fn print_version() {}\n+    pub fn print_passes() {}\n+    pub fn print(_req: PrintRequest, _sess: &Session) {}\n+    pub fn target_features(_sess: &Session) -> Vec<Symbol> { vec![] }\n+\n+    pub fn trans_crate<'a, 'tcx>(\n+        _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        _analysis: CrateAnalysis,\n+        _incr_hashes_map: IncrementalHashesMap,\n+        _output_filenames: &OutputFilenames\n+    ) -> OngoingCrateTranslation {\n+        OngoingCrateTranslation(())\n     }\n+\n+    pub struct CrateTranslation(());\n+\n+    pub mod back {\n+        pub mod write {\n+            pub struct OngoingCrateTranslation(pub (in ::rustc_trans) ());\n+\n+            pub const RELOC_MODEL_ARGS: [(&'static str, ()); 0] = [];\n+            pub const CODE_GEN_MODEL_ARGS: [(&'static str, ()); 0] = [];\n+        }\n+    }\n+\n+    __build_diagnostic_array! { librustc_trans, DIAGNOSTICS }\n }\n \n // Parse args and run the compiler. This is the primary entry point for rustc.\n // See comments on CompilerCalls below for details about the callbacks argument.\n // The FileLoader provides a way to load files from sources other than the file system.\n-#[cfg_attr(not(feature=\"llvm\"), allow(unused_mut))]\n pub fn run_compiler<'a>(args: &[String],\n                         callbacks: &mut CompilerCalls<'a>,\n                         file_loader: Option<Box<FileLoader + 'static>>,\n@@ -232,7 +273,6 @@ pub fn run_compiler<'a>(args: &[String],\n     let (sopts, cfg) = config::build_session_options_and_crate_config(&matches);\n \n     if sopts.debugging_opts.debug_llvm {\n-        #[cfg(feature=\"llvm\")]\n         rustc_trans::enable_llvm_debug();\n     }\n \n@@ -262,12 +302,10 @@ pub fn run_compiler<'a>(args: &[String],\n     let mut sess = session::build_session_with_codemap(\n         sopts, &dep_graph, input_file_path, descriptions, cstore.clone(), codemap, emitter_dest,\n     );\n-    #[cfg(feature=\"llvm\")]\n     rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n     let mut cfg = config::build_configuration(&sess, cfg);\n-    #[cfg(feature=\"llvm\")]\n     target_features::add_configuration(&mut cfg, &sess);\n     sess.parse_sess.config = cfg;\n \n@@ -520,7 +558,6 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n         Compilation::Continue\n     }\n \n-    #[cfg_attr(not(feature=\"llvm\"), allow(unused_mut))]\n     fn no_input(&mut self,\n                 matches: &getopts::Matches,\n                 sopts: &config::Options,\n@@ -544,11 +581,9 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                     None,\n                     descriptions.clone(),\n                     cstore.clone());\n-                #[cfg(feature=\"llvm\")]\n                 rustc_trans::init(&sess);\n                 rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n                 let mut cfg = config::build_configuration(&sess, cfg.clone());\n-                #[cfg(feature=\"llvm\")]\n                 target_features::add_configuration(&mut cfg, &sess);\n                 sess.parse_sess.config = cfg;\n                 let should_stop =\n@@ -802,25 +837,20 @@ impl RustcDefaultCalls {\n                 }\n                 PrintRequest::RelocationModels => {\n                     println!(\"Available relocation models:\");\n-                    #[cfg(feature=\"llvm\")]\n-                    for &(name, _) in RELOC_MODEL_ARGS.iter() {\n+                    for &(name, _) in rustc_trans::back::write::RELOC_MODEL_ARGS.iter() {\n                         println!(\"    {}\", name);\n                     }\n                     println!(\"\");\n                 }\n                 PrintRequest::CodeModels => {\n                     println!(\"Available code models:\");\n-                    #[cfg(feature=\"llvm\")]\n-                    for &(name, _) in CODE_GEN_MODEL_ARGS.iter(){\n+                    for &(name, _) in rustc_trans::back::write::CODE_GEN_MODEL_ARGS.iter(){\n                         println!(\"    {}\", name);\n                     }\n                     println!(\"\");\n                 }\n                 PrintRequest::TargetCPUs | PrintRequest::TargetFeatures => {\n-                    #[cfg(feature=\"llvm\")]\n                     rustc_trans::print(*req, sess);\n-                    #[cfg(not(feature=\"llvm\"))]\n-                    panic!(\"LLVM not supported by this rustc\")\n                 }\n             }\n         }\n@@ -859,7 +889,6 @@ pub fn version(binary: &str, matches: &getopts::Matches) {\n         println!(\"commit-date: {}\", unw(commit_date_str()));\n         println!(\"host: {}\", config::host_triple());\n         println!(\"release: {}\", unw(release_str()));\n-        #[cfg(feature=\"llvm\")]\n         rustc_trans::print_version();\n     }\n }\n@@ -1157,7 +1186,6 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     }\n \n     if cg_flags.contains(&\"passes=list\".to_string()) {\n-        #[cfg(feature=\"llvm\")]\n         rustc_trans::print_passes();\n         return None;\n     }\n@@ -1285,7 +1313,6 @@ pub fn diagnostics_registry() -> errors::registry::Registry {\n     all_errors.extend_from_slice(&rustc_borrowck::DIAGNOSTICS);\n     all_errors.extend_from_slice(&rustc_resolve::DIAGNOSTICS);\n     all_errors.extend_from_slice(&rustc_privacy::DIAGNOSTICS);\n-    #[cfg(feature=\"llvm\")]\n     all_errors.extend_from_slice(&rustc_trans::DIAGNOSTICS);\n     all_errors.extend_from_slice(&rustc_const_eval::DIAGNOSTICS);\n     all_errors.extend_from_slice(&rustc_metadata::DIAGNOSTICS);"}, {"sha": "b187cdaa480ed17fff846ff205846c7827f78178", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3245948445b77c25cd9f3b29cbad3187aee3eb7/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3245948445b77c25cd9f3b29cbad3187aee3eb7/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=e3245948445b77c25cd9f3b29cbad3187aee3eb7", "patch": "@@ -14,7 +14,6 @@ use driver;\n use rustc::dep_graph::DepGraph;\n use rustc_lint;\n use rustc_resolve::MakeGlobMap;\n-#[cfg(feature=\"llvm\")]\n use rustc_trans;\n use rustc::middle::lang_items;\n use rustc::middle::free_region::FreeRegionMap;\n@@ -114,7 +113,6 @@ fn test_env<F>(source_string: &str,\n                                        diagnostic_handler,\n                                        Rc::new(CodeMap::new(FilePathMapping::empty())),\n                                        cstore.clone());\n-    #[cfg(feature=\"llvm\")]\n     rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     let input = config::Input::Str {"}, {"sha": "264158f0de9eeedf986e8e99d388de473f587d06", "filename": "src/librustc_trans_utils/link.rs", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e3245948445b77c25cd9f3b29cbad3187aee3eb7/src%2Flibrustc_trans_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3245948445b77c25cd9f3b29cbad3187aee3eb7/src%2Flibrustc_trans_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flink.rs?ref=e3245948445b77c25cd9f3b29cbad3187aee3eb7", "patch": "@@ -8,34 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::session::config::{self, /*NoDebugInfo,*/ OutputFilenames, Input, OutputType};\n-/*use rustc::session::filesearch;\n-use rustc::session::search_paths::PathKind;\n-*/use rustc::session::Session;\n-use rustc::middle::cstore;/*::{self, LinkMeta, NativeLibrary, LibSource, LinkagePreference,\n-                            NativeLibraryKind};*/\n-/*use rustc::middle::dependency_format::Linkage;\n-use rustc::util::common::time;\n-use rustc::util::fs::fix_windows_verbatim_for_gcc;\n-use rustc::dep_graph::{DepKind, DepNode};\n-use rustc::hir::def_id::CrateNum;\n-use rustc::hir::svh::Svh;\n-use rustc_back::tempdir::TempDir;\n-use rustc_back::{PanicStrategy, RelroLevel};\n-use rustc_incremental::IncrementalHashesMap;*/\n-\n-/*use std::ascii;\n-use std::char;\n-use std::env;\n-use std::ffi::OsString;\n-use std::fs;\n-use std::io::{self, Read, Write};\n-use std::mem;\n-*/use std::path::PathBuf;/*{Path, PathBuf};\n-use std::process::Command;\n-use std::str;*/\n+use rustc::session::config::{self, OutputFilenames, Input, OutputType};\n+use rustc::session::Session;\n+use rustc::middle::cstore;\n+use std::path::PathBuf;\n use syntax::ast;\n-//use syntax::attr;\n use syntax_pos::Span;\n \n pub fn find_crate_name(sess: Option<&Session>,"}]}