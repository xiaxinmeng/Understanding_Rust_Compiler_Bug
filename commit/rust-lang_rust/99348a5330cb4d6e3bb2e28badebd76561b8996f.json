{"sha": "99348a5330cb4d6e3bb2e28badebd76561b8996f", "node_id": "C_kwDOAAsO6NoAKDk5MzQ4YTUzMzBjYjRkNmUzYmIyZTI4YmFkZWJkNzY1NjFiODk5NmY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-29T13:10:42Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-06T18:59:46Z"}, "message": "Change CTFE backtraces to use `note` instead of `label` to preserve their order\n\nlabels are reordered within the file in which they are reported, which can mess up the stack trace", "tree": {"sha": "4f203b0595506539c7247a0836e41db91221bb23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f203b0595506539c7247a0836e41db91221bb23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99348a5330cb4d6e3bb2e28badebd76561b8996f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99348a5330cb4d6e3bb2e28badebd76561b8996f", "html_url": "https://github.com/rust-lang/rust/commit/99348a5330cb4d6e3bb2e28badebd76561b8996f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99348a5330cb4d6e3bb2e28badebd76561b8996f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa99459b4286a2fb45dd1f224a9fc5788da84cfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa99459b4286a2fb45dd1f224a9fc5788da84cfb", "html_url": "https://github.com/rust-lang/rust/commit/fa99459b4286a2fb45dd1f224a9fc5788da84cfb"}], "stats": {"total": 2504, "additions": 1860, "deletions": 644}, "files": [{"sha": "c60d6e4fed9f55277ba8640f9fb8ed81d4612dfc", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -123,14 +123,14 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                 // Helper closure to print duplicated lines.\n                 let mut flush_last_line = |last_frame, times| {\n                     if let Some((line, span)) = last_frame {\n-                        err.span_label(span, &line);\n+                        err.span_note(span, &line);\n                         // Don't print [... additional calls ...] if the number of lines is small\n                         if times < 3 {\n                             for _ in 0..times {\n-                                err.span_label(span, &line);\n+                                err.span_note(span, &line);\n                             }\n                         } else {\n-                            err.span_label(\n+                            err.span_note(\n                                 span,\n                                 format!(\"[... {} additional calls {} ...]\", times, &line),\n                             );"}, {"sha": "1b03bc3af9c72d8c4fbbc0d84141233aedf7b078", "filename": "src/test/ui/borrowck/issue-81899.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -1,15 +1,19 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-81899.rs:11:5\n    |\n-LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   |                        -------------- inside `_CONST`\n-...\n+LL |     panic!()\n+   |     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/issue-81899.rs:11:5\n+   |\n+note: inside `f::<[closure@$DIR/issue-81899.rs:4:31: 4:34]>`\n+  --> $DIR/issue-81899.rs:11:5\n+   |\n LL |     panic!()\n    |     ^^^^^^^^\n-   |     |\n-   |     the evaluated program panicked at 'explicit panic', $DIR/issue-81899.rs:11:5\n-   |     inside `f::<[closure@$DIR/issue-81899.rs:4:31: 4:34]>`\n+note: inside `_CONST`\n+  --> $DIR/issue-81899.rs:4:24\n    |\n+LL | const _CONST: &[u8] = &f(&[], |_| {});\n+   |                        ^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: erroneous constant used"}, {"sha": "a5a571c6d4df09036758caf0ffe792cba65a8e02", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -1,15 +1,19 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-88434-minimal-example.rs:10:5\n    |\n-LL | const _CONST: &() = &f(&|_| {});\n-   |                      ---------- inside `_CONST`\n-...\n+LL |     panic!()\n+   |     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:10:5\n+   |\n+note: inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:3:25: 3:28]>`\n+  --> $DIR/issue-88434-minimal-example.rs:10:5\n+   |\n LL |     panic!()\n    |     ^^^^^^^^\n-   |     |\n-   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:10:5\n-   |     inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:3:25: 3:28]>`\n+note: inside `_CONST`\n+  --> $DIR/issue-88434-minimal-example.rs:3:22\n    |\n+LL | const _CONST: &() = &f(&|_| {});\n+   |                      ^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: erroneous constant used"}, {"sha": "00023c459a8e7228b6e5c4bcd3250debddb2c507", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -1,15 +1,19 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-88434-removal-index-should-be-less.rs:10:5\n    |\n-LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   |                        -------------- inside `_CONST`\n-...\n+LL |     panic!()\n+   |     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:10:5\n+   |\n+note: inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:3:31: 3:34]>`\n+  --> $DIR/issue-88434-removal-index-should-be-less.rs:10:5\n+   |\n LL |     panic!()\n    |     ^^^^^^^^\n-   |     |\n-   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:10:5\n-   |     inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:3:31: 3:34]>`\n+note: inside `_CONST`\n+  --> $DIR/issue-88434-removal-index-should-be-less.rs:3:24\n    |\n+LL | const _CONST: &[u8] = &f(&[], |_| {});\n+   |                        ^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: erroneous constant used"}, {"sha": "bf1b411ee7ccfdffe5485386a183c7ac81dd9376", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-80742.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -2,15 +2,18 @@ error[E0080]: evaluation of `Inline::<dyn std::fmt::Debug>::{constant#0}` failed\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     size_of called on unsized type `dyn Debug`\n-   |     inside `std::mem::size_of::<dyn Debug>`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ size_of called on unsized type `dyn Debug`\n+   |\n+note: inside `std::mem::size_of::<dyn Debug>`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n-  ::: $DIR/issue-80742.rs:22:10\n+LL |     intrinsics::size_of::<T>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `Inline::<dyn Debug>::{constant#0}`\n+  --> $DIR/issue-80742.rs:22:10\n    |\n LL |     [u8; size_of::<T>() + 1]: ,\n-   |          -------------- inside `Inline::<dyn Debug>::{constant#0}`\n+   |          ^^^^^^^^^^^^^^\n \n error[E0599]: the function or associated item `new` exists for struct `Inline<dyn Debug>`, but its trait bounds were not satisfied\n   --> $DIR/issue-80742.rs:30:36\n@@ -33,15 +36,18 @@ error[E0080]: evaluation of `Inline::<dyn std::fmt::Debug>::{constant#0}` failed\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     size_of called on unsized type `dyn Debug`\n-   |     inside `std::mem::size_of::<dyn Debug>`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ size_of called on unsized type `dyn Debug`\n+   |\n+note: inside `std::mem::size_of::<dyn Debug>`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n-  ::: $DIR/issue-80742.rs:14:10\n+LL |     intrinsics::size_of::<T>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `Inline::<dyn Debug>::{constant#0}`\n+  --> $DIR/issue-80742.rs:14:10\n    |\n LL |     [u8; size_of::<T>() + 1]: ,\n-   |          -------------- inside `Inline::<dyn Debug>::{constant#0}`\n+   |          ^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `dyn Debug` cannot be known at compilation time\n   --> $DIR/issue-80742.rs:30:15"}, {"sha": "d4b486376cac822ddf8dd2dc2f7825755b1773f1", "filename": "src/test/ui/const-generics/issues/issue-100313.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -1,14 +1,19 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-100313.rs:10:13\n    |\n+LL |             *(B as *const bool as *mut bool) = false;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ writing to alloc7 which is read-only\n+   |\n+note: inside `T::<&true>::set_false`\n+  --> $DIR/issue-100313.rs:10:13\n+   |\n LL |             *(B as *const bool as *mut bool) = false;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |             |\n-   |             writing to alloc7 which is read-only\n-   |             inside `T::<&true>::set_false`\n-...\n+note: inside `_`\n+  --> $DIR/issue-100313.rs:18:5\n+   |\n LL |     x.set_false();\n-   |     ------------- inside `_`\n+   |     ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "43529d57f4021aabc40869804ed85b177fece5ac", "filename": "src/test/ui/const-ptr/forbidden_slices.64bit.stderr", "status": "modified", "additions": 110, "deletions": 77, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -2,43 +2,52 @@ error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n-   |         inside `std::slice::from_raw_parts::<'_, u32>`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n+   |\n+note: inside `std::slice::from_raw_parts::<'_, u32>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:18:34\n+LL |         &*ptr::slice_from_raw_parts(data, len)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `S0`\n+  --> $DIR/forbidden_slices.rs:18:34\n    |\n LL | pub static S0: &[u32] = unsafe { from_raw_parts(ptr::null(), 0) };\n-   |                                  ------------------------------ inside `S0`\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n-   |         inside `std::slice::from_raw_parts::<'_, ()>`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n+   |\n+note: inside `std::slice::from_raw_parts::<'_, ()>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:19:33\n+LL |         &*ptr::slice_from_raw_parts(data, len)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `S1`\n+  --> $DIR/forbidden_slices.rs:19:33\n    |\n LL | pub static S1: &[()] = unsafe { from_raw_parts(ptr::null(), 0) };\n-   |                                 ------------------------------ inside `S1`\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         dereferencing pointer failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n-   |         inside `std::slice::from_raw_parts::<'_, u32>`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n+   |\n+note: inside `std::slice::from_raw_parts::<'_, u32>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:22:34\n+LL |         &*ptr::slice_from_raw_parts(data, len)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `S2`\n+  --> $DIR/forbidden_slices.rs:22:34\n    |\n LL | pub static S2: &[u32] = unsafe { from_raw_parts(&D0, 2) };\n-   |                                  ---------------------- inside `S2`\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:25:1\n@@ -89,72 +98,85 @@ error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         dereferencing pointer failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n-   |         inside `std::slice::from_raw_parts::<'_, u64>`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n    |\n-  ::: $DIR/forbidden_slices.rs:43:5\n+note: inside `std::slice::from_raw_parts::<'_, u64>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |\n+LL |         &*ptr::slice_from_raw_parts(data, len)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `S8`\n+  --> $DIR/forbidden_slices.rs:43:5\n    |\n LL |     from_raw_parts(ptr, 1)\n-   |     ---------------------- inside `S8`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n    |\n-  ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>`\n+LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `from_ptr_range::<'_, u32>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:46:34\n+LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R0`\n+  --> $DIR/forbidden_slices.rs:46:34\n    |\n LL | pub static R0: &[u32] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n-   |                                  ---------------------------------------- inside `R0`\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         the evaluated program panicked at 'assertion failed: 0 < pointee_size && pointee_size <= isize::MAX as usize', $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |         inside `ptr::const_ptr::<impl *const ()>::sub_ptr`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: 0 < pointee_size && pointee_size <= isize::MAX as usize', $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const ()>::sub_ptr`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, ()>`\n+LL |         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `from_ptr_range::<'_, ()>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:47:33\n+LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R1`\n+  --> $DIR/forbidden_slices.rs:47:33\n    |\n LL | pub static R1: &[()] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n-   |                                 ---------------------------------------- inside `R1`\n-   |\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n+   |\n+note: inside `ptr::const_ptr::<impl *const u32>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u32>::offset`\n-...\n-LL |         unsafe { self.offset(count as isize) }\n-   |                  --------------------------- inside `ptr::const_ptr::<impl *const u32>::add`\n+note: inside `ptr::const_ptr::<impl *const u32>::add`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:50:25\n+LL |         unsafe { self.offset(count as isize) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R2`\n+  --> $DIR/forbidden_slices.rs:50:25\n    |\n LL |     from_ptr_range(ptr..ptr.add(2))\n-   |                         ---------- inside `R2`\n+   |                         ^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:52:1\n@@ -204,57 +226,68 @@ LL | pub static R7: &[u16] = unsafe {\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n+   |\n+note: inside `ptr::const_ptr::<impl *const u64>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u64>::offset`\n-...\n-LL |         unsafe { self.offset(count as isize) }\n-   |                  --------------------------- inside `ptr::const_ptr::<impl *const u64>::add`\n+note: inside `ptr::const_ptr::<impl *const u64>::add`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:74:25\n+LL |         unsafe { self.offset(count as isize) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R8`\n+  --> $DIR/forbidden_slices.rs:74:25\n    |\n LL |     from_ptr_range(ptr..ptr.add(1))\n-   |                         ---------- inside `R8`\n+   |                         ^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  `ptr_offset_from_unsigned` called on pointers into different allocations\n-   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ptr_offset_from_unsigned` called on pointers into different allocations\n    |\n-  ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>`\n+LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `from_ptr_range::<'_, u32>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:79:34\n+LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R9`\n+  --> $DIR/forbidden_slices.rs:79:34\n    |\n LL | pub static R9: &[u32] = unsafe { from_ptr_range(&D0..(&D0 as *const u32).add(1)) };\n-   |                                  ----------------------------------------------- inside `R9`\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  `ptr_offset_from_unsigned` called on pointers into different allocations\n-   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ptr_offset_from_unsigned` called on pointers into different allocations\n    |\n-  ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>`\n+LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `from_ptr_range::<'_, u32>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:80:35\n+LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R10`\n+  --> $DIR/forbidden_slices.rs:80:35\n    |\n LL | pub static R10: &[u32] = unsafe { from_ptr_range(&D0..&D0) };\n-   |                                   ------------------------ inside `R10`\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 18 previous errors\n "}, {"sha": "bca29b4688136542bae551591938a27e90fa9de1", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -2,53 +2,62 @@ error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n-   |         inside `std::ptr::read::<u32>`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n+   |\n+note: inside `std::ptr::read::<u32>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-  ::: $DIR/out_of_bounds_read.rs:12:33\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `_READ`\n+  --> $DIR/out_of_bounds_read.rs:12:33\n    |\n LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n-   |                                 ----------------------- inside `_READ`\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n-   |         inside `std::ptr::read::<u32>`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |\n-  ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+note: inside `std::ptr::read::<u32>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL |         unsafe { read(self) }\n-   |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read`\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `ptr::const_ptr::<impl *const u32>::read`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/out_of_bounds_read.rs:13:39\n+LL |         unsafe { read(self) }\n+   |                  ^^^^^^^^^^\n+note: inside `_CONST_READ`\n+  --> $DIR/out_of_bounds_read.rs:13:39\n    |\n LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n-   |                                       ------------------- inside `_CONST_READ`\n+   |                                       ^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n-   |         inside `std::ptr::read::<u32>`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n+   |\n+note: inside `std::ptr::read::<u32>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `ptr::mut_ptr::<impl *mut u32>::read`\n+  --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n LL |         unsafe { read(self) }\n-   |                  ---------- inside `ptr::mut_ptr::<impl *mut u32>::read`\n-   |\n-  ::: $DIR/out_of_bounds_read.rs:14:37\n+   |                  ^^^^^^^^^^\n+note: inside `_MUT_READ`\n+  --> $DIR/out_of_bounds_read.rs:14:37\n    |\n LL |     const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n-   |                                     --------------------------------- inside `_MUT_READ`\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0734f479f9897b41a2190df93da3462fab41698e", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -1,26 +1,36 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_fn_ptr_fail2.rs:9:5\n    |\n+LL |     x(y)\n+   |     ^^^^ calling non-const function `double`\n+   |\n+note: inside `bar`\n+  --> $DIR/const_fn_ptr_fail2.rs:9:5\n+   |\n LL |     x(y)\n    |     ^^^^\n-   |     |\n-   |     calling non-const function `double`\n-   |     inside `bar`\n-...\n+note: inside `Y`\n+  --> $DIR/const_fn_ptr_fail2.rs:14:18\n+   |\n LL | const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday\n-   |                  --------- inside `Y`\n+   |                  ^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_fn_ptr_fail2.rs:9:5\n    |\n+LL |     x(y)\n+   |     ^^^^ calling non-const function `double`\n+   |\n+note: inside `bar`\n+  --> $DIR/const_fn_ptr_fail2.rs:9:5\n+   |\n LL |     x(y)\n    |     ^^^^\n-   |     |\n-   |     calling non-const function `double`\n-   |     inside `bar`\n-...\n+note: inside `Z`\n+  --> $DIR/const_fn_ptr_fail2.rs:15:18\n+   |\n LL | const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n-   |                  -------------- inside `Z`\n+   |                  ^^^^^^^^^^^^^^\n \n warning: skipping const checks\n    |"}, {"sha": "846458176d6fd79fc1fb710ace41c55912adc867", "filename": "src/test/ui/consts/const-eval/const_panic_track_caller.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -1,14 +1,19 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_track_caller.rs:15:5\n    |\n+LL |     b()\n+   |     ^^^ the evaluated program panicked at 'hey', $DIR/const_panic_track_caller.rs:15:5\n+   |\n+note: inside `c`\n+  --> $DIR/const_panic_track_caller.rs:15:5\n+   |\n LL |     b()\n    |     ^^^\n-   |     |\n-   |     the evaluated program panicked at 'hey', $DIR/const_panic_track_caller.rs:15:5\n-   |     inside `c`\n-...\n+note: inside `X`\n+  --> $DIR/const_panic_track_caller.rs:21:16\n+   |\n LL | const X: u32 = c();\n-   |                --- inside `X`\n+   |                ^^^\n \n error: aborting due to previous error\n "}, {"sha": "8f3b3d5f700a22c037f5519126495dd722befa7d", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.stderr", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -1,14 +1,19 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/alloc_intrinsic_errors.rs:9:17\n    |\n-LL | const FOO: i32 = foo();\n-   |                  ----- inside `FOO`\n-...\n+LL |         let _ = intrinsics::const_allocate(4, 3) as *mut i32;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ align has to be a power of 2, `3` is not a power of 2\n+   |\n+note: inside `foo`\n+  --> $DIR/alloc_intrinsic_errors.rs:9:17\n+   |\n LL |         let _ = intrinsics::const_allocate(4, 3) as *mut i32;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 align has to be a power of 2, `3` is not a power of 2\n-   |                 inside `foo`\n+note: inside `FOO`\n+  --> $DIR/alloc_intrinsic_errors.rs:6:18\n+   |\n+LL | const FOO: i32 = foo();\n+   |                  ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "759ce15ab1b5d30e74961ac7077802d0f0d8317e", "filename": "src/test/ui/consts/const-eval/unwind-abort.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -1,15 +1,19 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/unwind-abort.rs:4:5\n    |\n+LL |     panic!()\n+   |     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/unwind-abort.rs:4:5\n+   |\n+note: inside `foo`\n+  --> $DIR/unwind-abort.rs:4:5\n+   |\n LL |     panic!()\n    |     ^^^^^^^^\n-   |     |\n-   |     the evaluated program panicked at 'explicit panic', $DIR/unwind-abort.rs:4:5\n-   |     inside `foo`\n-...\n-LL | const _: () = foo();\n-   |               ----- inside `_`\n+note: inside `_`\n+  --> $DIR/unwind-abort.rs:7:15\n    |\n+LL | const _: () = foo();\n+   |               ^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "9710bf476ecc913b26808998c73240d9bad37f3f", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -13,14 +13,19 @@ LL |     unsafe { std::mem::transmute(()) }\n error[E0080]: evaluation of constant value failed\n   --> $DIR/validate_uninhabited_zsts.rs:4:14\n    |\n+LL |     unsafe { std::mem::transmute(()) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   |\n+note: inside `foo`\n+  --> $DIR/validate_uninhabited_zsts.rs:4:14\n+   |\n LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              transmuting to uninhabited type\n-   |              inside `foo`\n-...\n+note: inside `FOO`\n+  --> $DIR/validate_uninhabited_zsts.rs:19:33\n+   |\n LL | const FOO: [empty::Empty; 3] = [foo(); 3];\n-   |                                 ----- inside `FOO`\n+   |                                 ^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_uninhabited_zsts.rs:21:1"}, {"sha": "195a087ffa5b0aad0c0c8abd0e41b7885cf29fd2", "filename": "src/test/ui/consts/const-float-bits-reject-conv.stderr", "status": "modified", "additions": 52, "deletions": 36, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -1,39 +1,47 @@\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n    |\n+LL |                     panic!(\"const-eval error: cannot use f32::to_bits on a NaN\")\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'const-eval error: cannot use f32::to_bits on a NaN', $SRC_DIR/core/src/num/f32.rs:LL:COL\n+   |\n+note: inside `core::f32::<impl f32>::to_bits::ct_f32_to_u32`\n+  --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n+   |\n LL |                     panic!(\"const-eval error: cannot use f32::to_bits on a NaN\")\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     the evaluated program panicked at 'const-eval error: cannot use f32::to_bits on a NaN', $SRC_DIR/core/src/num/f32.rs:LL:COL\n-   |                     inside `core::f32::<impl f32>::to_bits::ct_f32_to_u32`\n-...\n-LL |         unsafe { intrinsics::const_eval_select((self,), ct_f32_to_u32, rt_f32_to_u32) }\n-   |                  -------------------------------------------------------------------- inside `core::f32::<impl f32>::to_bits`\n+note: inside `core::f32::<impl f32>::to_bits`\n+  --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n    |\n-  ::: $DIR/const-float-bits-reject-conv.rs:28:30\n+LL |         unsafe { intrinsics::const_eval_select((self,), ct_f32_to_u32, rt_f32_to_u32) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `f32::MASKED_NAN1`\n+  --> $DIR/const-float-bits-reject-conv.rs:28:30\n    |\n LL |     const MASKED_NAN1: u32 = f32::NAN.to_bits() ^ 0x002A_AAAA;\n-   |                              ------------------ inside `f32::MASKED_NAN1`\n-   |\n+   |                              ^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n    |\n+LL |                     panic!(\"const-eval error: cannot use f32::to_bits on a NaN\")\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'const-eval error: cannot use f32::to_bits on a NaN', $SRC_DIR/core/src/num/f32.rs:LL:COL\n+   |\n+note: inside `core::f32::<impl f32>::to_bits::ct_f32_to_u32`\n+  --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n+   |\n LL |                     panic!(\"const-eval error: cannot use f32::to_bits on a NaN\")\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     the evaluated program panicked at 'const-eval error: cannot use f32::to_bits on a NaN', $SRC_DIR/core/src/num/f32.rs:LL:COL\n-   |                     inside `core::f32::<impl f32>::to_bits::ct_f32_to_u32`\n-...\n-LL |         unsafe { intrinsics::const_eval_select((self,), ct_f32_to_u32, rt_f32_to_u32) }\n-   |                  -------------------------------------------------------------------- inside `core::f32::<impl f32>::to_bits`\n+note: inside `core::f32::<impl f32>::to_bits`\n+  --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n    |\n-  ::: $DIR/const-float-bits-reject-conv.rs:30:30\n+LL |         unsafe { intrinsics::const_eval_select((self,), ct_f32_to_u32, rt_f32_to_u32) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `f32::MASKED_NAN2`\n+  --> $DIR/const-float-bits-reject-conv.rs:30:30\n    |\n LL |     const MASKED_NAN2: u32 = f32::NAN.to_bits() ^ 0x0055_5555;\n-   |                              ------------------ inside `f32::MASKED_NAN2`\n-   |\n+   |                              ^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: erroneous constant used\n@@ -63,39 +71,47 @@ LL |     const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n    |\n+LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a NaN\")\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'const-eval error: cannot use f64::to_bits on a NaN', $SRC_DIR/core/src/num/f64.rs:LL:COL\n+   |\n+note: inside `core::f64::<impl f64>::to_bits::ct_f64_to_u64`\n+  --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n+   |\n LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a NaN\")\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     the evaluated program panicked at 'const-eval error: cannot use f64::to_bits on a NaN', $SRC_DIR/core/src/num/f64.rs:LL:COL\n-   |                     inside `core::f64::<impl f64>::to_bits::ct_f64_to_u64`\n-...\n-LL |         unsafe { intrinsics::const_eval_select((self,), ct_f64_to_u64, rt_f64_to_u64) }\n-   |                  -------------------------------------------------------------------- inside `core::f64::<impl f64>::to_bits`\n+note: inside `core::f64::<impl f64>::to_bits`\n+  --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n    |\n-  ::: $DIR/const-float-bits-reject-conv.rs:50:30\n+LL |         unsafe { intrinsics::const_eval_select((self,), ct_f64_to_u64, rt_f64_to_u64) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `f64::MASKED_NAN1`\n+  --> $DIR/const-float-bits-reject-conv.rs:50:30\n    |\n LL |     const MASKED_NAN1: u64 = f64::NAN.to_bits() ^ 0x000A_AAAA_AAAA_AAAA;\n-   |                              ------------------ inside `f64::MASKED_NAN1`\n-   |\n+   |                              ^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n    |\n+LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a NaN\")\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'const-eval error: cannot use f64::to_bits on a NaN', $SRC_DIR/core/src/num/f64.rs:LL:COL\n+   |\n+note: inside `core::f64::<impl f64>::to_bits::ct_f64_to_u64`\n+  --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n+   |\n LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a NaN\")\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     the evaluated program panicked at 'const-eval error: cannot use f64::to_bits on a NaN', $SRC_DIR/core/src/num/f64.rs:LL:COL\n-   |                     inside `core::f64::<impl f64>::to_bits::ct_f64_to_u64`\n-...\n-LL |         unsafe { intrinsics::const_eval_select((self,), ct_f64_to_u64, rt_f64_to_u64) }\n-   |                  -------------------------------------------------------------------- inside `core::f64::<impl f64>::to_bits`\n+note: inside `core::f64::<impl f64>::to_bits`\n+  --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n    |\n-  ::: $DIR/const-float-bits-reject-conv.rs:52:30\n+LL |         unsafe { intrinsics::const_eval_select((self,), ct_f64_to_u64, rt_f64_to_u64) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `f64::MASKED_NAN2`\n+  --> $DIR/const-float-bits-reject-conv.rs:52:30\n    |\n LL |     const MASKED_NAN2: u64 = f64::NAN.to_bits() ^ 0x0005_5555_5555_5555;\n-   |                              ------------------ inside `f64::MASKED_NAN2`\n-   |\n+   |                              ^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: erroneous constant used"}, {"sha": "6e110dbdd6417dd5f87e0f8e845437e592dd6d6f", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -1,14 +1,19 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/mut_ref_in_final_dynamic_check.rs:13:10\n    |\n+LL |     Some(&mut *(42 as *mut i32))\n+   |          ^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0x2a[noalloc] is a dangling pointer (it has no provenance)\n+   |\n+note: inside `helper`\n+  --> $DIR/mut_ref_in_final_dynamic_check.rs:13:10\n+   |\n LL |     Some(&mut *(42 as *mut i32))\n    |          ^^^^^^^^^^^^^^^^^^^^^^\n-   |          |\n-   |          dereferencing pointer failed: 0x2a[noalloc] is a dangling pointer (it has no provenance)\n-   |          inside `helper`\n-...\n+note: inside `A`\n+  --> $DIR/mut_ref_in_final_dynamic_check.rs:18:29\n+   |\n LL | const A: Option<&mut i32> = helper();\n-   |                             -------- inside `A`\n+   |                             ^^^^^^^^\n \n error: encountered dangling pointer in final constant\n   --> $DIR/mut_ref_in_final_dynamic_check.rs:25:1"}, {"sha": "cbc7cac937ae1b5b945e34a8c4f411780f26bd70", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.stderr", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -2,18 +2,23 @@ error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/hint.rs:LL:COL\n    |\n LL |         intrinsics::unreachable()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         entering unreachable code\n-   |         inside `unreachable_unchecked`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ entering unreachable code\n+   |\n+note: inside `unreachable_unchecked`\n+  --> $SRC_DIR/core/src/hint.rs:LL:COL\n    |\n-  ::: $DIR/const_unsafe_unreachable_ub.rs:6:18\n+LL |         intrinsics::unreachable()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `foo`\n+  --> $DIR/const_unsafe_unreachable_ub.rs:6:18\n    |\n LL |         false => std::hint::unreachable_unchecked(),\n-   |                  ---------------------------------- inside `foo`\n-...\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `BAR`\n+  --> $DIR/const_unsafe_unreachable_ub.rs:10:28\n+   |\n LL | const BAR: bool = unsafe { foo(false) };\n-   |                            ---------- inside `BAR`\n+   |                            ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2603a73583ebda4b6b007a9668a8ece944b3c545", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.with_flag.stderr", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -32,20 +32,23 @@ error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         accessing memory with alignment 1, but alignment 4 is required\n-   |         inside `std::ptr::read::<u32>`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ accessing memory with alignment 1, but alignment 4 is required\n    |\n-  ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+note: inside `std::ptr::read::<u32>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL |         unsafe { read(self) }\n-   |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read`\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `ptr::const_ptr::<impl *const u32>::read`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/detect-extra-ub.rs:38:9\n+LL |         unsafe { read(self) }\n+   |                  ^^^^^^^^^^\n+note: inside `INNER`\n+  --> $DIR/detect-extra-ub.rs:38:9\n    |\n LL |         ptr.read();\n-   |         ---------- inside `INNER`\n+   |         ^^^^^^^^^^\n \n note: erroneous constant used\n   --> $DIR/detect-extra-ub.rs:32:5"}, {"sha": "1f82e1777af5bf43de2242ccd75029923cf5fc71", "filename": "src/test/ui/consts/issue-miri-1910.stderr", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -2,23 +2,25 @@ error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         unable to copy parts of a pointer from memory at ALLOC\n-   |         inside `std::ptr::read::<u8>`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to copy parts of a pointer from memory at ALLOC\n    |\n-  ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n+   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+note: inside `std::ptr::read::<u8>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL |         unsafe { read(self) }\n-   |                  ---------- inside `ptr::const_ptr::<impl *const u8>::read`\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `ptr::const_ptr::<impl *const u8>::read`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/issue-miri-1910.rs:8:5\n+LL |         unsafe { read(self) }\n+   |                  ^^^^^^^^^^\n+note: inside `C`\n+  --> $DIR/issue-miri-1910.rs:8:5\n    |\n LL |     (&foo as *const _ as *const u8).add(one_and_a_half_pointers).read();\n-   |     ------------------------------------------------------------------- inside `C`\n-   |\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "cf3fd88d0342e06c15700d8e46ea2ad669b4add0", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -1,14 +1,19 @@\n error[E0080]: could not evaluate static initializer\n   --> $DIR/abi-mismatch.rs:9:5\n    |\n+LL |     my_fn();\n+   |     ^^^^^^^ calling a function with calling convention C using calling convention Rust\n+   |\n+note: inside `call_rust_fn`\n+  --> $DIR/abi-mismatch.rs:9:5\n+   |\n LL |     my_fn();\n    |     ^^^^^^^\n-   |     |\n-   |     calling a function with calling convention C using calling convention Rust\n-   |     inside `call_rust_fn`\n-...\n+note: inside `VAL`\n+  --> $DIR/abi-mismatch.rs:15:18\n+   |\n LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n-   |                  --------------------------------------------------------------------- inside `VAL`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: skipping const checks\n    |"}, {"sha": "b26f121dba0612946658cb27fc97dbf5dddaa642", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -1,17 +1,24 @@\n error[E0080]: evaluation of `<std::string::String as Bar<std::vec::Vec<u32>, std::string::String>>::F` failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `<Vec<u32> as Drop>::drop`\n+   |\n+note: inside `std::ptr::drop_in_place::<Vec<u32>> - shim(Some(Vec<u32>))`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | calling non-const function `<Vec<u32> as Drop>::drop`\n-   | inside `std::ptr::drop_in_place::<Vec<u32>> - shim(Some(Vec<u32>))`\n-   | inside `std::ptr::drop_in_place::<(Vec<u32>, u32)> - shim(Some((Vec<u32>, u32)))`\n+note: inside `std::ptr::drop_in_place::<(Vec<u32>, u32)> - shim(Some((Vec<u32>, u32)))`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-  ::: $DIR/assoc_const.rs:12:31\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `<String as Bar<Vec<u32>, String>>::F`\n+  --> $DIR/assoc_const.rs:12:31\n    |\n LL |     const F: u32 = (U::X, 42).1;\n-   |                               - inside `<String as Bar<Vec<u32>, String>>::F`\n+   |                               ^\n \n note: erroneous constant used\n   --> $DIR/assoc_const.rs:29:13"}, {"sha": "e2e2f16d5a02500fc5d03ffd14412dc9e2be89ef", "filename": "src/test/ui/consts/miri_unleashed/drop.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -2,15 +2,18 @@ error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | calling non-const function `<Vec<i32> as Drop>::drop`\n-   | inside `std::ptr::drop_in_place::<Vec<i32>> - shim(Some(Vec<i32>))`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `<Vec<i32> as Drop>::drop`\n+   |\n+note: inside `std::ptr::drop_in_place::<Vec<i32>> - shim(Some(Vec<i32>))`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-  ::: $DIR/drop.rs:17:1\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `TEST_BAD`\n+  --> $DIR/drop.rs:17:1\n    |\n LL | };\n-   | - inside `TEST_BAD`\n+   | ^\n \n warning: skipping const checks\n    |"}, {"sha": "f2a79a1d3d34cebe36b89005c247bf804f33ea58", "filename": "src/test/ui/consts/missing_span_in_backtrace.stderr", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -1,22 +1,25 @@\n error[E0080]: evaluation of constant value failed\n-/rustc/xyz/library/core/src/ptr/mod.rs:925:14: inside `swap_nonoverlapping::<MaybeUninit<u8>>`\n-/rustc/xyz/library/core/src/ptr/mod.rs:944:9: inside `ptr::swap_nonoverlapping_simple_untyped::<MaybeUninit<u8>>`\n---> /rustc/xyz/library/core/src/ptr/mod.rs:1135:9\n-note: unable to copy parts of a pointer from memory at alloc10\n-note: inside `std::ptr::read::<MaybeUninit<MaybeUninit<u8>>>`\n-/rustc/xyz/library/core/src/mem/mod.rs:773:17: inside `mem::swap_simple::<MaybeUninit<MaybeUninit<u8>>>`\n+/rustc/xyz/library/core/src/ptr/mod.rs:1135:9: unable to copy parts of a pointer from memory at alloc10\n    |\n-  ::: $DIR/missing_span_in_backtrace.rs:16:9\n+   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n+   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+note: inside `std::ptr::read::<MaybeUninit<MaybeUninit<u8>>>`\n+/rustc/xyz/library/core/src/ptr/mod.rs:1135:9\n+note: inside `mem::swap_simple::<MaybeUninit<MaybeUninit<u8>>>`\n+/rustc/xyz/library/core/src/mem/mod.rs:773:17\n+note: inside `ptr::swap_nonoverlapping_simple_untyped::<MaybeUninit<u8>>`\n+/rustc/xyz/library/core/src/ptr/mod.rs:944:9\n+note: inside `swap_nonoverlapping::<MaybeUninit<u8>>`\n+/rustc/xyz/library/core/src/ptr/mod.rs:925:14\n+note: inside `X`\n+  --> $DIR/missing_span_in_backtrace.rs:16:9\n    |\n LL | /         ptr::swap_nonoverlapping(\n LL | |             &mut ptr1 as *mut _ as *mut MaybeUninit<u8>,\n LL | |             &mut ptr2 as *mut _ as *mut MaybeUninit<u8>,\n LL | |             mem::size_of::<&i32>(),\n LL | |         );\n-   | |_________- inside `X`\n-   |\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   | |_________^\n \n error: aborting due to previous error\n "}, {"sha": "9578d90ea9d8827762177a1be47df1d3a080745a", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -8,15 +8,18 @@ error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  `ptr_offset_from` called on pointers into different allocations\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset_from`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ptr_offset_from` called on pointers into different allocations\n+   |\n+note: inside `ptr::const_ptr::<impl *const u8>::offset_from`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_from_ub.rs:24:14\n+LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `NOT_PTR`\n+  --> $DIR/offset_from_ub.rs:24:14\n    |\n LL |     unsafe { (42 as *const u8).offset_from(&5u8) as usize }\n-   |              ----------------------------------- inside `NOT_PTR`\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/offset_from_ub.rs:31:14\n@@ -88,29 +91,35 @@ error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset_from`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n    |\n-  ::: $DIR/offset_from_ub.rs:115:14\n+note: inside `ptr::const_ptr::<impl *const u8>::offset_from`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `OFFSET_VERY_FAR1`\n+  --> $DIR/offset_from_ub.rs:115:14\n    |\n LL |     unsafe { ptr2.offset_from(ptr1) }\n-   |              ---------------------- inside `OFFSET_VERY_FAR1`\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset_from`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n    |\n-  ::: $DIR/offset_from_ub.rs:121:14\n+note: inside `ptr::const_ptr::<impl *const u8>::offset_from`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `OFFSET_VERY_FAR2`\n+  --> $DIR/offset_from_ub.rs:121:14\n    |\n LL |     unsafe { ptr1.offset_from(ptr2.wrapping_offset(1)) }\n-   |              ----------------------------------------- inside `OFFSET_VERY_FAR2`\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 15 previous errors\n "}, {"sha": "7938f70a2695ed60f43b0123a4177340da9b5902", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 108, "deletions": 72, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -2,169 +2,205 @@ error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  overflowing in-bounds pointer arithmetic\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n+   |\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:7:46\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `BEFORE_START`\n+  --> $DIR/offset_ub.rs:7:46\n    |\n LL | pub const BEFORE_START: *const u8 = unsafe { (&0u8 as *const u8).offset(-1) };\n-   |                                              ------------------------------ inside `BEFORE_START`\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset 0 is out-of-bounds\n    |\n-  ::: $DIR/offset_ub.rs:8:43\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `AFTER_END`\n+  --> $DIR/offset_ub.rs:8:43\n    |\n LL | pub const AFTER_END: *const u8 = unsafe { (&0u8 as *const u8).offset(2) };\n-   |                                           ----------------------------- inside `AFTER_END`\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: allocN has size 100, so pointer to 101 bytes starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: allocN has size 100, so pointer to 101 bytes starting at offset 0 is out-of-bounds\n    |\n-  ::: $DIR/offset_ub.rs:9:45\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `AFTER_ARRAY`\n+  --> $DIR/offset_ub.rs:9:45\n    |\n LL | pub const AFTER_ARRAY: *const u8 = unsafe { [0u8; 100].as_ptr().offset(101) };\n-   |                                             ------------------------------- inside `AFTER_ARRAY`\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  overflowing in-bounds pointer arithmetic\n-   |                  inside `ptr::const_ptr::<impl *const u16>::offset`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n+   |\n+note: inside `ptr::const_ptr::<impl *const u16>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:11:43\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `OVERFLOW`\n+  --> $DIR/offset_ub.rs:11:43\n    |\n LL | pub const OVERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MAX) };\n-   |                                           ------------------------------------- inside `OVERFLOW`\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  overflowing in-bounds pointer arithmetic\n-   |                  inside `ptr::const_ptr::<impl *const u16>::offset`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n    |\n-  ::: $DIR/offset_ub.rs:12:44\n+note: inside `ptr::const_ptr::<impl *const u16>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `UNDERFLOW`\n+  --> $DIR/offset_ub.rs:12:44\n    |\n LL | pub const UNDERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MIN) };\n-   |                                            ------------------------------------- inside `UNDERFLOW`\n+   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  overflowing in-bounds pointer arithmetic\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n    |\n-  ::: $DIR/offset_ub.rs:13:56\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `OVERFLOW_ADDRESS_SPACE`\n+  --> $DIR/offset_ub.rs:13:56\n    |\n LL | pub const OVERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (usize::MAX as *const u8).offset(2) };\n-   |                                                        ----------------------------------- inside `OVERFLOW_ADDRESS_SPACE`\n+   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  overflowing in-bounds pointer arithmetic\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n+   |\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:14:57\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `UNDERFLOW_ADDRESS_SPACE`\n+  --> $DIR/offset_ub.rs:14:57\n    |\n LL | pub const UNDERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (1 as *const u8).offset(-2) };\n-   |                                                         --------------------------- inside `UNDERFLOW_ADDRESS_SPACE`\n+   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset -4 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset -4 is out-of-bounds\n    |\n-  ::: $DIR/offset_ub.rs:15:49\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `NEGATIVE_OFFSET`\n+  --> $DIR/offset_ub.rs:15:49\n    |\n LL | pub const NEGATIVE_OFFSET: *const u8 = unsafe { [0u8; 1].as_ptr().wrapping_offset(-2).offset(-2) };\n-   |                                                 ------------------------------------------------ inside `NEGATIVE_OFFSET`\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: allocN has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: allocN has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n    |\n-  ::: $DIR/offset_ub.rs:17:50\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `ZERO_SIZED_ALLOC`\n+  --> $DIR/offset_ub.rs:17:50\n    |\n LL | pub const ZERO_SIZED_ALLOC: *const u8 = unsafe { [0u8; 0].as_ptr().offset(1) };\n-   |                                                  --------------------------- inside `ZERO_SIZED_ALLOC`\n+   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: 0x1[noalloc] is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::mut_ptr::<impl *mut u8>::offset`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: 0x1[noalloc] is a dangling pointer (it has no provenance)\n+   |\n+note: inside `ptr::mut_ptr::<impl *mut u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:18:42\n+LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `DANGLING`\n+  --> $DIR/offset_ub.rs:18:42\n    |\n LL | pub const DANGLING: *const u8 = unsafe { ptr::NonNull::<u8>::dangling().as_ptr().offset(4) };\n-   |                                          ------------------------------------------------- inside `DANGLING`\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: null pointer is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: null pointer is a dangling pointer (it has no provenance)\n    |\n-  ::: $DIR/offset_ub.rs:21:50\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `NULL_OFFSET_ZERO`\n+  --> $DIR/offset_ub.rs:21:50\n    |\n LL | pub const NULL_OFFSET_ZERO: *const u8 = unsafe { ptr::null::<u8>().offset(0) };\n-   |                                                  --------------------------- inside `NULL_OFFSET_ZERO`\n+   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: 0x7f..f[noalloc] is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: 0x7f..f[noalloc] is a dangling pointer (it has no provenance)\n    |\n-  ::: $DIR/offset_ub.rs:24:47\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `UNDERFLOW_ABS`\n+  --> $DIR/offset_ub.rs:24:47\n    |\n LL | pub const UNDERFLOW_ABS: *const u8 = unsafe { (usize::MAX as *const u8).offset(isize::MIN) };\n-   |                                               -------------------------------------------- inside `UNDERFLOW_ABS`\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 12 previous errors\n "}, {"sha": "274753ef1bc234c4a5cae52520870ec906aa6085", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -2,15 +2,18 @@ error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const usize>::offset`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n+   |\n+note: inside `ptr::const_ptr::<impl *const usize>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/ptr_comparisons.rs:50:34\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `_`\n+  --> $DIR/ptr_comparisons.rs:50:34\n    |\n LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n-   |                                  ------------------------------- inside `_`\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/ptr_comparisons.rs:53:33"}, {"sha": "60ce64d2a1e0f4dd864a8d565bc61cd13718cfc7", "filename": "src/test/ui/consts/recursive.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -12,15 +12,24 @@ LL |     f(x);\n error[E0080]: evaluation of constant value failed\n   --> $DIR/recursive.rs:4:5\n    |\n+LL |     f(x);\n+   |     ^^^^ reached the configured maximum number of stack frames\n+   |\n+note: inside `f::<i32>`\n+  --> $DIR/recursive.rs:4:5\n+   |\n LL |     f(x);\n    |     ^^^^\n-   |     |\n-   |     reached the configured maximum number of stack frames\n-   |     inside `f::<i32>`\n-   |     [... 126 additional calls inside `f::<i32>` ...]\n-...\n+note: [... 126 additional calls inside `f::<i32>` ...]\n+  --> $DIR/recursive.rs:4:5\n+   |\n+LL |     f(x);\n+   |     ^^^^\n+note: inside `X`\n+  --> $DIR/recursive.rs:8:15\n+   |\n LL | const X: () = f(1);\n-   |               ---- inside `X`\n+   |               ^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "3a94e19313f6c52b719ead4dddf54b6e1872822c", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 640, "deletions": 135, "changes": 775, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -1,144 +1,649 @@\n error[E0080]: evaluation of `<i32 as Const>::CONSTANT` failed\n   --> $DIR/uninhabited-const-issue-61744.rs:4:5\n    |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^ reached the configured maximum number of stack frames\n+   |\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n LL |     hint_unreachable()\n    |     ^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     reached the configured maximum number of stack frames\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<!>`\n-   |     inside `fake_type::<i32>`\n-...\n-LL |     fake_type()\n-   |     -----------\n-   |     |\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-   |     inside `hint_unreachable`\n-...\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<i32>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `<i32 as Const>::CONSTANT`\n+  --> $DIR/uninhabited-const-issue-61744.rs:12:36\n+   |\n LL |     const CONSTANT: i32 = unsafe { fake_type() };\n-   |                                    ----------- inside `<i32 as Const>::CONSTANT`\n+   |                                    ^^^^^^^^^^^\n \n note: erroneous constant used\n   --> $DIR/uninhabited-const-issue-61744.rs:18:10"}, {"sha": "53b603a47b5516a7d2f6800ed980e593c16bbf0f", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.stderr", "status": "modified", "additions": 640, "deletions": 135, "changes": 775, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -2,143 +2,648 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/infinite-recursion-const-fn.rs:4:5\n    |\n LL |     b()\n+   |     ^^^ reached the configured maximum number of stack frames\n+   |\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n    |     ^^^\n-   |     |\n-   |     reached the configured maximum number of stack frames\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-   |     inside `a`\n-...\n-LL |     a()\n-   |     ---\n-   |     |\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-   |     inside `b`\n-LL | }\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `ARR::{constant#0}`\n+  --> $DIR/infinite-recursion-const-fn.rs:9:18\n+   |\n LL | const ARR: [i32; a()] = [5; 6];\n-   |                  --- inside `ARR::{constant#0}`\n+   |                  ^^^\n \n error: aborting due to previous error\n "}, {"sha": "f17f8141b909a442c7897f818c30e2090c90df23", "filename": "src/test/ui/limits/issue-55878.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99348a5330cb4d6e3bb2e28badebd76561b8996f/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr?ref=99348a5330cb4d6e3bb2e28badebd76561b8996f", "patch": "@@ -2,12 +2,18 @@ error[E0080]: values of the type `[u8; SIZE]` are too big for the current archit\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ inside `std::mem::size_of::<[u8; SIZE]>`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-  ::: $DIR/issue-55878.rs:7:26\n+note: inside `std::mem::size_of::<[u8; SIZE]>`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL |     intrinsics::size_of::<T>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `main`\n+  --> $DIR/issue-55878.rs:7:26\n    |\n LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n-   |                          ---------------------------------------------- inside `main`\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n note: erroneous constant used\n   --> $DIR/issue-55878.rs:7:26"}]}