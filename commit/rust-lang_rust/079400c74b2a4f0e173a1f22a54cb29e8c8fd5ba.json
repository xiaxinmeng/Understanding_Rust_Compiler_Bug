{"sha": "079400c74b2a4f0e173a1f22a54cb29e8c8fd5ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3OTQwMGM3NGIyYTRmMGUxNzNhMWYyMmE1NGNiMjllOGM4ZmQ1YmE=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-05-09T14:17:16Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-05-17T16:38:24Z"}, "message": "Fix bug just discovered\n\nSuggested by matthewjasper here:\nhttps://github.com/rust-lang/rust/pull/71930#issuecomment-626022502\nI have no idea what this does but it seems to work.", "tree": {"sha": "35bef70f1131cad1c4293ec11d92154c73551376", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35bef70f1131cad1c4293ec11d92154c73551376"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/079400c74b2a4f0e173a1f22a54cb29e8c8fd5ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/079400c74b2a4f0e173a1f22a54cb29e8c8fd5ba", "html_url": "https://github.com/rust-lang/rust/commit/079400c74b2a4f0e173a1f22a54cb29e8c8fd5ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/079400c74b2a4f0e173a1f22a54cb29e8c8fd5ba/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5a2cd526a6ad92b90dda81104abc7adf4c83495", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5a2cd526a6ad92b90dda81104abc7adf4c83495", "html_url": "https://github.com/rust-lang/rust/commit/e5a2cd526a6ad92b90dda81104abc7adf4c83495"}], "stats": {"total": 24, "additions": 3, "deletions": 21}, "files": [{"sha": "707502640e05c613619a3d458a3f91f479cd6c98", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/079400c74b2a4f0e173a1f22a54cb29e8c8fd5ba/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079400c74b2a4f0e173a1f22a54cb29e8c8fd5ba/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=079400c74b2a4f0e173a1f22a54cb29e8c8fd5ba", "patch": "@@ -186,30 +186,10 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n         // Fourth, check for unreachable arms.\n         let matrix = check_arms(&mut cx, &inlined_arms, source);\n \n-        // FIXME: getting the type using `node_type` means that if `f` has output type `!`, we\n-        // get `scrut_ty = !` instead of `bool` in the following:\n-        // ```\n-        // fn from(never: !) -> usize {\n-        //     match never {\n-        //         true => 1,\n-        //         false => 0,\n-        //     }\n-        // }\n-        // ```\n-        // If we use `expr_ty_adjusted` instead, then the following breaks, because we get\n-        // `scrut_ty = ()` instead of `!`.\n-        // ```\n-        // fn from(never: !) -> usize {\n-        //     match never {}\n-        // }\n-        // ```\n-        // As a workaround, we retrieve the type from the match arms when possible.\n-        let scrut_ty = self.tables.node_type(scrut.hir_id);\n-        let scrut_ty = inlined_arms.iter().map(|(p, _, _)| p.ty).next().unwrap_or(scrut_ty);\n-\n         // Fifth, check if the match is exhaustive.\n         // Note: An empty match isn't the same as an empty matrix for diagnostics purposes,\n         // since an empty matrix can occur when there are arms, if those arms all have guards.\n+        let scrut_ty = self.tables.expr_ty_adjusted(scrut);\n         let is_empty_match = inlined_arms.is_empty();\n         check_exhaustive(&mut cx, scrut_ty, scrut.span, &matrix, scrut.hir_id, is_empty_match);\n     }"}, {"sha": "fb139b5033b3b40b6571331624344cb3e1e843e9", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/079400c74b2a4f0e173a1f22a54cb29e8c8fd5ba/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079400c74b2a4f0e173a1f22a54cb29e8c8fd5ba/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=079400c74b2a4f0e173a1f22a54cb29e8c8fd5ba", "patch": "@@ -436,6 +436,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if let Some(m) = contains_ref_bindings {\n             self.check_expr_with_needs(scrut, Needs::maybe_mut_place(m))\n+        } else if arms.is_empty() {\n+            self.check_expr(scrut)\n         } else {\n             // ...but otherwise we want to use any supertype of the\n             // scrutinee. This is sort of a workaround, see note (*) in"}]}