{"sha": "7e70fee0c76422e986514306b3673f79f7e37ec7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNzBmZWUwYzc2NDIyZTk4NjUxNDMwNmIzNjczZjc5ZjdlMzdlYzc=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-08-27T17:42:43Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-09-20T10:42:35Z"}, "message": "add more tests for traits-in-non-module-scope", "tree": {"sha": "ee0bdbd2feadb13e765a1884149b0f492d0d4412", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee0bdbd2feadb13e765a1884149b0f492d0d4412"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e70fee0c76422e986514306b3673f79f7e37ec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e70fee0c76422e986514306b3673f79f7e37ec7", "html_url": "https://github.com/rust-lang/rust/commit/7e70fee0c76422e986514306b3673f79f7e37ec7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e70fee0c76422e986514306b3673f79f7e37ec7/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e79780f18f8697f50dabeda243f60314ed56f938", "url": "https://api.github.com/repos/rust-lang/rust/commits/e79780f18f8697f50dabeda243f60314ed56f938", "html_url": "https://github.com/rust-lang/rust/commit/e79780f18f8697f50dabeda243f60314ed56f938"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "24fec62dd573a3876b8e5d153e6dc32128a6cb14", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e70fee0c76422e986514306b3673f79f7e37ec7/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70fee0c76422e986514306b3673f79f7e37ec7/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=7e70fee0c76422e986514306b3673f79f7e37ec7", "patch": "@@ -320,7 +320,7 @@ impl<'a> fold::DocFolder for ImplStripper<'a> {\n                     if let Some(did) = typaram.def_id() {\n                         if did.is_local() && !self.retained.contains(&did) {\n                             debug!(\"ImplStripper: stripped item in trait's generics; \\\n-                                   removing impl\");\n+                                    removing impl\");\n                             return None;\n                         }\n                     }"}, {"sha": "7457a5d4899fe4ad759b104479a9c7520758a200", "filename": "src/test/rustdoc/inline_cross/auxiliary/trait-vis.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7e70fee0c76422e986514306b3673f79f7e37ec7/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Ftrait-vis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70fee0c76422e986514306b3673f79f7e37ec7/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Ftrait-vis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Ftrait-vis.rs?ref=7e70fee0c76422e986514306b3673f79f7e37ec7", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"inner\"]\n+\n+pub struct SomeStruct;\n+\n+fn asdf() {\n+    const _FOO: () = {\n+        impl Clone for SomeStruct {\n+            fn clone(&self) -> Self {\n+                SomeStruct\n+            }\n+        }\n+    };\n+}"}, {"sha": "5b5410b1da44d6226ca318402c9d9a2c6eba2455", "filename": "src/test/rustdoc/inline_cross/trait-vis.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7e70fee0c76422e986514306b3673f79f7e37ec7/src%2Ftest%2Frustdoc%2Finline_cross%2Ftrait-vis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70fee0c76422e986514306b3673f79f7e37ec7/src%2Ftest%2Frustdoc%2Finline_cross%2Ftrait-vis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Ftrait-vis.rs?ref=7e70fee0c76422e986514306b3673f79f7e37ec7", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:trait-vis.rs\n+\n+extern crate inner;\n+\n+// @has trait_vis/struct.SomeStruct.html\n+// @has - '//code' 'impl Clone for SomeStruct'\n+pub use inner::SomeStruct;"}, {"sha": "73b1cc2ce8f2dee2738263aae738c8843f83bb2b", "filename": "src/test/rustdoc/inline_local/trait-vis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e70fee0c76422e986514306b3673f79f7e37ec7/src%2Ftest%2Frustdoc%2Finline_local%2Ftrait-vis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70fee0c76422e986514306b3673f79f7e37ec7/src%2Ftest%2Frustdoc%2Finline_local%2Ftrait-vis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Ftrait-vis.rs?ref=7e70fee0c76422e986514306b3673f79f7e37ec7", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //"}, {"sha": "a771b1b15ce4d66543d91a2296147c1cd62f318e", "filename": "src/test/rustdoc/primitive-generic-impl.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e70fee0c76422e986514306b3673f79f7e37ec7/src%2Ftest%2Frustdoc%2Fprimitive-generic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70fee0c76422e986514306b3673f79f7e37ec7/src%2Ftest%2Frustdoc%2Fprimitive-generic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-generic-impl.rs?ref=7e70fee0c76422e986514306b3673f79f7e37ec7", "patch": "@@ -10,9 +10,6 @@\n \n #![crate_name = \"foo\"]\n \n-// we need to reexport something from libstd so that `all_trait_implementations` is called.\n-pub use std::string::String;\n-\n include!(\"primitive/primitive-generic-impl.rs\");\n \n // @has foo/primitive.i32.html '//h3[@id=\"impl-ToString\"]//code' 'impl<T> ToString for T'"}, {"sha": "a1d4019bba2bfe7e0dcc9fa7f63870f3ca5e4615", "filename": "src/test/rustdoc/traits-in-bodies.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7e70fee0c76422e986514306b3673f79f7e37ec7/src%2Ftest%2Frustdoc%2Ftraits-in-bodies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70fee0c76422e986514306b3673f79f7e37ec7/src%2Ftest%2Frustdoc%2Ftraits-in-bodies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftraits-in-bodies.rs?ref=7e70fee0c76422e986514306b3673f79f7e37ec7", "patch": "@@ -39,3 +39,24 @@ const _FOO: () = {\n     impl Copy for Point {}\n     ()\n };\n+\n+// @has traits_in_bodies/struct.Inception.html\n+// @has - '//code' 'impl Clone for Inception'\n+pub struct Inception;\n+\n+static _BAR: usize = {\n+    trait HiddenTrait {\n+        fn hidden_fn(&self) {\n+            for _ in 0..5 {\n+                impl Clone for Inception {\n+                    fn clone(&self) -> Self {\n+                        // we need to go deeper\n+                        Inception\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    5\n+};"}]}