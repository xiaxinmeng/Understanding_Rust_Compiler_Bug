{"sha": "38ef5ee48f7a2994a7fd8e6a1a818d378d51d40e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZWY1ZWU0OGY3YTI5OTRhN2ZkOGU2YTFhODE4ZDM3OGQ1MWQ0MGU=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-19T20:13:55Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-22T01:14:27Z"}, "message": "Check constituent types are known", "tree": {"sha": "38d9e4c869d384ed94bb3946928ce27a396b2d22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38d9e4c869d384ed94bb3946928ce27a396b2d22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38ef5ee48f7a2994a7fd8e6a1a818d378d51d40e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38ef5ee48f7a2994a7fd8e6a1a818d378d51d40e", "html_url": "https://github.com/rust-lang/rust/commit/38ef5ee48f7a2994a7fd8e6a1a818d378d51d40e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38ef5ee48f7a2994a7fd8e6a1a818d378d51d40e/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8df95d77f65a3a1456f7e10d9d1dd209acf2879", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8df95d77f65a3a1456f7e10d9d1dd209acf2879", "html_url": "https://github.com/rust-lang/rust/commit/e8df95d77f65a3a1456f7e10d9d1dd209acf2879"}], "stats": {"total": 56, "additions": 36, "deletions": 20}, "files": [{"sha": "c86f0004de9a50ab27520230b7d5abcddae3b8a4", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 36, "deletions": 20, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/38ef5ee48f7a2994a7fd8e6a1a818d378d51d40e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ef5ee48f7a2994a7fd8e6a1a818d378d51d40e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=38ef5ee48f7a2994a7fd8e6a1a818d378d51d40e", "patch": "@@ -1152,7 +1152,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n             _ => {\n                 if ty::trait_has_default_impl(self.tcx(), def_id) {\n-                    candidates.vec.push(DefaultImplCandidate(def_id.clone()))\n+                    match self.constituent_types_for_ty(self_ty) {\n+                        Some(_) => {\n+                            candidates.vec.push(DefaultImplCandidate(def_id.clone()))\n+                        }\n+                        None => {\n+                            candidates.ambiguous = true;\n+                        }\n+                    }\n                 }\n             }\n         }\n@@ -1625,7 +1632,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n-    fn constituent_ty_obligations(&self, t: Ty<'tcx>) -> Vec<Ty<'tcx>> {\n+    fn constituent_types_for_ty(&self, t: Ty<'tcx>) -> Option<Vec<Ty<'tcx>>> {\n         match t.sty {\n             ty::ty_uint(_) |\n             ty::ty_int(_) |\n@@ -1636,7 +1643,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::ty_err |\n             ty::ty_param(..) |\n             ty::ty_char => {\n-                Vec::new()\n+                Some(Vec::new())\n             }\n \n             ty::ty_trait(..) |\n@@ -1649,50 +1656,50 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ty::ty_uniq(referent_ty) => {  // Box<T>\n-                vec![referent_ty]\n+                Some(vec![referent_ty])\n             }\n \n-            ty::ty_open(element_ty) => {vec![element_ty]},\n+            ty::ty_open(element_ty) => {Some(vec![element_ty])},\n \n             ty::ty_ptr(ty::mt { ty: element_ty, ..}) |\n             ty::ty_rptr(_, ty::mt { ty: element_ty, ..}) => {\n-                vec![element_ty]\n+                Some(vec![element_ty])\n             },\n \n             ty::ty_vec(element_ty, _) => {\n-                vec![element_ty]\n+                Some(vec![element_ty])\n             }\n \n             ty::ty_tup(ref tys) => {\n                 // (T1, ..., Tn) -- meets any bound that all of T1...Tn meet\n-                tys.clone()\n+                Some(tys.clone())\n             }\n \n             ty::ty_closure(def_id, _, substs) => {\n                 assert_eq!(def_id.krate, ast::LOCAL_CRATE);\n \n                 match self.closure_typer.closure_upvars(def_id, substs) {\n                     Some(upvars) => {\n-                        upvars.iter().map(|c| c.ty).collect()\n+                        Some(upvars.iter().map(|c| c.ty).collect())\n                     }\n                     None => {\n-                        Vec::new()\n+                        None\n                     }\n                 }\n             }\n \n             ty::ty_struct(def_id, substs) => {\n-                ty::struct_fields(self.tcx(), def_id, substs).iter()\n-                    .map(|f| f.mt.ty)\n-                    .collect()\n+                Some(ty::struct_fields(self.tcx(), def_id, substs).iter()\n+                     .map(|f| f.mt.ty)\n+                     .collect())\n             }\n \n             ty::ty_enum(def_id, substs) => {\n-                ty::substd_enum_variants(self.tcx(), def_id, substs)\n-                    .iter()\n-                    .flat_map(|variant| variant.args.iter())\n-                    .map(|&ty| ty)\n-                    .collect()\n+                Some(ty::substd_enum_variants(self.tcx(), def_id, substs)\n+                     .iter()\n+                     .flat_map(|variant| variant.args.iter())\n+                     .map(|&ty| ty)\n+                     .collect())\n             }\n         }\n     }\n@@ -1891,8 +1898,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                impl_def_id.repr(self.tcx()));\n \n         let self_ty = self.infcx.shallow_resolve(obligation.predicate.0.self_ty());\n-        let types = self.constituent_ty_obligations(self_ty);\n-        Ok(self.vtable_default_impl(obligation, impl_def_id, types))\n+        match self.constituent_types_for_ty(self_ty) {\n+            Some(types) => {\n+                Ok(self.vtable_default_impl(obligation, impl_def_id, types))\n+            }\n+            None => {\n+                self.tcx().sess.bug(\n+                    &format!(\n+                        \"asked to confirm default implementation for ambiguous type: {}\",\n+                        self_ty.repr(self.tcx()))[]);\n+            }\n+        }\n     }\n \n     /// See `confirm_default_impl_candidate`"}]}