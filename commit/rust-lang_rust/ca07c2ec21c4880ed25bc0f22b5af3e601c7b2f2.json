{"sha": "ca07c2ec21c4880ed25bc0f22b5af3e601c7b2f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMDdjMmVjMjFjNDg4MGVkMjViYzBmMjJiNWFmM2U2MDFjN2IyZjI=", "commit": {"author": {"name": "Alex Burka", "email": "durka42+github@gmail.com", "date": "2015-12-01T23:18:19Z"}, "committer": {"name": "Alex Burka", "email": "durka42+github@gmail.com", "date": "2015-12-01T23:18:19Z"}, "message": "trpl: explain how to inhibit rustdoc's auto-main\n\nI think this fixes #30137. I basically just repeated some details that were scattered around other places in this document, and emphasized that you probably don't want an `extern crate` or `mod` statement to end up inside a function.", "tree": {"sha": "da2eb640d1e5220b23dd2cd68540acb7c33109ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da2eb640d1e5220b23dd2cd68540acb7c33109ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca07c2ec21c4880ed25bc0f22b5af3e601c7b2f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca07c2ec21c4880ed25bc0f22b5af3e601c7b2f2", "html_url": "https://github.com/rust-lang/rust/commit/ca07c2ec21c4880ed25bc0f22b5af3e601c7b2f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca07c2ec21c4880ed25bc0f22b5af3e601c7b2f2/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb1d018c01f70bcfc38bc8365a3de71c1564f694", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb1d018c01f70bcfc38bc8365a3de71c1564f694", "html_url": "https://github.com/rust-lang/rust/commit/eb1d018c01f70bcfc38bc8365a3de71c1564f694"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "0d0fd8cf1d0a641e1c4f526be1f79181532e3f58", "filename": "src/doc/book/documentation.md", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ca07c2ec21c4880ed25bc0f22b5af3e601c7b2f2/src%2Fdoc%2Fbook%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca07c2ec21c4880ed25bc0f22b5af3e601c7b2f2/src%2Fdoc%2Fbook%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fdocumentation.md?ref=ca07c2ec21c4880ed25bc0f22b5af3e601c7b2f2", "patch": "@@ -213,8 +213,8 @@ Let's discuss our sample example documentation:\n ```\n \n You'll notice that you don't need a `fn main()` or anything here. `rustdoc` will\n-automatically add a `main()` wrapper around your code, and in the right place.\n-For example:\n+automatically add a `main()` wrapper around your code, using heuristics to attempt\n+to put it in the right place. For example:\n \n ```rust\n /// ```\n@@ -242,11 +242,18 @@ Here's the full algorithm rustdoc uses to preprocess examples:\n    `unused_attributes`, and `dead_code`. Small examples often trigger\n    these lints.\n 3. If the example does not contain `extern crate`, then `extern crate\n-   <mycrate>;` is inserted.\n-2. Finally, if the example does not contain `fn main`, the remainder of the\n-   text is wrapped in `fn main() { your_code }`\n-\n-Sometimes, this isn't enough, though. For example, all of these code samples\n+   <mycrate>;` is inserted (note the lack of `#[macro_use]`).\n+4. Finally, if the example does not contain `fn main`, the remainder of the\n+   text is wrapped in `fn main() { your_code }`.\n+\n+This generated `fn main` can be a problem! If you have `extern crate` or a `mod`\n+statements in the example code that are referred to by `use` statements, they will\n+fail to resolve unless you include at least `fn main() {}` to inhibit step 4.\n+`#[macro_use] extern crate` also does not work except at the crate root, so when\n+testing macros an explicit `main` is always required. It doesn't have to clutter\n+up your docs, though -- keep reading!\n+\n+Sometimes this algorithm isn't enough, though. For example, all of these code samples\n with `///` we've been talking about? The raw text:\n \n ```text\n@@ -370,8 +377,8 @@ macro_rules! panic_unless {\n \n You\u2019ll note three things: we need to add our own `extern crate` line, so that\n we can add the `#[macro_use]` attribute. Second, we\u2019ll need to add our own\n-`main()` as well. Finally, a judicious use of `#` to comment out those two\n-things, so they don\u2019t show up in the output.\n+`main()` as well (for reasons discussed above). Finally, a judicious use of\n+`#` to comment out those two things, so they don\u2019t show up in the output.\n \n Another case where the use of `#` is handy is when you want to ignore\n error handling. Lets say you want the following,"}]}