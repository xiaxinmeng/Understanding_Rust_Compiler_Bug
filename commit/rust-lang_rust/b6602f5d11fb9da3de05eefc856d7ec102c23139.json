{"sha": "b6602f5d11fb9da3de05eefc856d7ec102c23139", "node_id": "C_kwDOAAsO6NoAKGI2NjAyZjVkMTFmYjlkYTNkZTA1ZWVmYzg1NmQ3ZWMxMDJjMjMxMzk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-07T01:45:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-07T02:55:12Z"}, "message": "rustup", "tree": {"sha": "c8270c1bed92f8e83b5c93e1769b9218a57fcb12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8270c1bed92f8e83b5c93e1769b9218a57fcb12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6602f5d11fb9da3de05eefc856d7ec102c23139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6602f5d11fb9da3de05eefc856d7ec102c23139", "html_url": "https://github.com/rust-lang/rust/commit/b6602f5d11fb9da3de05eefc856d7ec102c23139", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6602f5d11fb9da3de05eefc856d7ec102c23139/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fed3ebc26ae0a9b17c0099fa71df636644f7312", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fed3ebc26ae0a9b17c0099fa71df636644f7312", "html_url": "https://github.com/rust-lang/rust/commit/5fed3ebc26ae0a9b17c0099fa71df636644f7312"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "37d1eb0fbdecacff8f8bb0eedf74459f3e0a0821", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6602f5d11fb9da3de05eefc856d7ec102c23139/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/b6602f5d11fb9da3de05eefc856d7ec102c23139/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=b6602f5d11fb9da3de05eefc856d7ec102c23139", "patch": "@@ -1 +1 @@\n-7665c3543079ebc3710b676d0fd6951bedfd4b29\n+8824d131619e58a38bde8bcf56401629b91a204a"}, {"sha": "2c77830a6d14524015f1db49badf6bf436a0c74a", "filename": "src/operator.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6602f5d11fb9da3de05eefc856d7ec102c23139/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602f5d11fb9da3de05eefc856d7ec102c23139/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=b6602f5d11fb9da3de05eefc856d7ec102c23139", "patch": "@@ -35,11 +35,13 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n                     Immediate::Scalar(l) => (l.check_init()?.to_bits(size)?, 0),\n                     Immediate::ScalarPair(l1, l2) =>\n                         (l1.check_init()?.to_bits(size)?, l2.check_init()?.to_bits(size)?),\n+                    Immediate::Uninit => throw_ub!(InvalidUninitBytes(None)),\n                 };\n                 let right = match **right {\n                     Immediate::Scalar(r) => (r.check_init()?.to_bits(size)?, 0),\n                     Immediate::ScalarPair(r1, r2) =>\n                         (r1.check_init()?.to_bits(size)?, r2.check_init()?.to_bits(size)?),\n+                    Immediate::Uninit => throw_ub!(InvalidUninitBytes(None)),\n                 };\n                 let res = match bin_op {\n                     Eq => left == right,"}, {"sha": "bae8856001428c025f739f694c648a511c1015ee", "filename": "tests/fail/data_race/stack_pop_race.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6602f5d11fb9da3de05eefc856d7ec102c23139/tests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602f5d11fb9da3de05eefc856d7ec102c23139/tests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fstack_pop_race.rs?ref=b6602f5d11fb9da3de05eefc856d7ec102c23139", "patch": "@@ -1,11 +1,14 @@\n+// ignore-windows: Concurrency on Windows is not supported yet.\n // compile-flags: -Zmiri-preemption-rate=0\n use std::thread;\n \n #[derive(Copy, Clone)]\n struct MakeSend(*const i32);\n unsafe impl Send for MakeSend {}\n \n-fn main() { race(0); }\n+fn main() {\n+    race(0);\n+}\n \n // Using an argument for the ptr to point to, since those do not get StorageDead.\n fn race(local: i32) {"}, {"sha": "ba830753f6eeae910323ceef03994a239f55ae95", "filename": "tests/fail/data_race/stack_pop_race.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6602f5d11fb9da3de05eefc856d7ec102c23139/tests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6602f5d11fb9da3de05eefc856d7ec102c23139/tests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr?ref=b6602f5d11fb9da3de05eefc856d7ec102c23139", "patch": "@@ -11,8 +11,8 @@ LL | }\n note: inside `main` at $DIR/stack_pop_race.rs:LL:CC\n   --> $DIR/stack_pop_race.rs:LL:CC\n    |\n-LL | fn main() { race(0); }\n-   |             ^^^^^^^\n+LL |     race(0);\n+   |     ^^^^^^^\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "d9beac4327d7f2fd1651273f9ec62fa34e6a6cab", "filename": "tests/pass/unsized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6602f5d11fb9da3de05eefc856d7ec102c23139/tests%2Fpass%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6602f5d11fb9da3de05eefc856d7ec102c23139/tests%2Fpass%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Funsized.rs?ref=b6602f5d11fb9da3de05eefc856d7ec102c23139", "patch": "@@ -24,7 +24,7 @@ fn unsized_params() {\n     f0(*c);\n     let foo = \"foo\".to_string().into_boxed_str();\n     f1(*foo);\n-    let sl: Box::<[i32]> = [0, 1, 2].to_vec().into_boxed_slice();\n+    let sl: Box<[i32]> = [0, 1, 2].to_vec().into_boxed_slice();\n     f2(5, *sl);\n     let p: Box<dyn Send> = Box::new((1, 2));\n     f3(*p);"}]}