{"sha": "437f017e2ed2e8c60b6f4af9dc71559ca87fd645", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzN2YwMTdlMmVkMmU4YzYwYjZmNGFmOWRjNzE1NTljYTg3ZmQ2NDU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-03-22T16:30:15Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-08-05T15:48:04Z"}, "message": "Clean up the `ty::Const::assert*` methods", "tree": {"sha": "7354fb41aee7af9e7d754c5220918f2a0d035d9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7354fb41aee7af9e7d754c5220918f2a0d035d9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/437f017e2ed2e8c60b6f4af9dc71559ca87fd645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/437f017e2ed2e8c60b6f4af9dc71559ca87fd645", "html_url": "https://github.com/rust-lang/rust/commit/437f017e2ed2e8c60b6f4af9dc71559ca87fd645", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/437f017e2ed2e8c60b6f4af9dc71559ca87fd645/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be067558962c004b638e4c6f162d50f7c0c98b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4be067558962c004b638e4c6f162d50f7c0c98b6", "html_url": "https://github.com/rust-lang/rust/commit/4be067558962c004b638e4c6f162d50f7c0c98b6"}], "stats": {"total": 80, "additions": 30, "deletions": 50}, "files": [{"sha": "e71f8d94e7cbe06e07fa74089b7bc07e88e5a123", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/437f017e2ed2e8c60b6f4af9dc71559ca87fd645/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437f017e2ed2e8c60b6f4af9dc71559ca87fd645/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=437f017e2ed2e8c60b6f4af9dc71559ca87fd645", "patch": "@@ -2368,7 +2368,7 @@ impl<'tcx> AdtDef {\n         match tcx.const_eval(param_env.and(cid)) {\n             Ok(val) => {\n                 // FIXME: Find the right type and use it instead of `val.ty` here\n-                if let Some(b) = val.assert_bits(tcx.global_tcx(), param_env.and(val.ty)) {\n+                if let Some(b) = val.assert_bits(tcx.global_tcx(), val.ty) {\n                     trace!(\"discriminants: {} ({:?})\", b, repr_type);\n                     Some(Discr {\n                         val: b,"}, {"sha": "7849ae3d516d4df910c307a83e1fa3464cf4381b", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/437f017e2ed2e8c60b6f4af9dc71559ca87fd645/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437f017e2ed2e8c60b6f4af9dc71559ca87fd645/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=437f017e2ed2e8c60b6f4af9dc71559ca87fd645", "patch": "@@ -15,7 +15,7 @@ use crate::ty::{self, AdtDef, Discr, DefIdTree, TypeFlags, Ty, TyCtxt, TypeFolda\n use crate::ty::{List, TyS, ParamEnvAnd, ParamEnv};\n use crate::ty::layout::VariantIdx;\n use crate::util::captures::Captures;\n-use crate::mir::interpret::{Scalar, Pointer};\n+use crate::mir::interpret::Scalar;\n \n use smallvec::SmallVec;\n use std::borrow::Cow;\n@@ -2291,29 +2291,16 @@ impl<'tcx> Const<'tcx> {\n     }\n \n     #[inline]\n-    pub fn to_bits(&self, tcx: TyCtxt<'tcx>, ty: ParamEnvAnd<'tcx, Ty<'tcx>>) -> Option<u128> {\n-        if self.ty != ty.value {\n-            return None;\n-        }\n-        let size = tcx.layout_of(ty).ok()?.size;\n-        self.val.try_to_bits(size)\n-    }\n-\n-    #[inline]\n-    pub fn to_ptr(&self) -> Option<Pointer> {\n-        self.val.try_to_ptr()\n-    }\n-\n-    #[inline]\n-    pub fn assert_bits(&self, tcx: TyCtxt<'tcx>, ty: ParamEnvAnd<'tcx, Ty<'tcx>>) -> Option<u128> {\n-        assert_eq!(self.ty, ty.value);\n-        let size = tcx.layout_of(ty).ok()?.size;\n+    pub fn assert_bits(&self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<u128> {\n+        assert_eq!(self.ty, ty);\n+        let ty = tcx.lift_to_global(&ty).unwrap();\n+        let size = tcx.layout_of(ParamEnv::empty().and(ty)).ok()?.size;\n         self.val.try_to_bits(size)\n     }\n \n     #[inline]\n     pub fn assert_bool(&self, tcx: TyCtxt<'tcx>) -> Option<bool> {\n-        self.assert_bits(tcx, ParamEnv::empty().and(tcx.types.bool)).and_then(|v| match v {\n+        self.assert_bits(tcx, tcx.types.bool).and_then(|v| match v {\n             0 => Some(false),\n             1 => Some(true),\n             _ => None,\n@@ -2322,19 +2309,18 @@ impl<'tcx> Const<'tcx> {\n \n     #[inline]\n     pub fn assert_usize(&self, tcx: TyCtxt<'tcx>) -> Option<u64> {\n-        self.assert_bits(tcx, ParamEnv::empty().and(tcx.types.usize)).map(|v| v as u64)\n+        self.assert_bits(tcx, tcx.types.usize).map(|v| v as u64)\n     }\n \n     #[inline]\n-    pub fn unwrap_bits(&self, tcx: TyCtxt<'tcx>, ty: ParamEnvAnd<'tcx, Ty<'tcx>>) -> u128 {\n+    pub fn unwrap_bits(&self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> u128 {\n         self.assert_bits(tcx, ty).unwrap_or_else(||\n-            bug!(\"expected bits of {}, got {:#?}\", ty.value, self))\n+            bug!(\"expected bits of {}, got {:#?}\", ty, self))\n     }\n \n     #[inline]\n     pub fn unwrap_usize(&self, tcx: TyCtxt<'tcx>) -> u64 {\n-        self.assert_usize(tcx).unwrap_or_else(||\n-            bug!(\"expected constant usize, got {:#?}\", self))\n+        self.unwrap_bits(tcx, tcx.types.usize) as u64\n     }\n }\n "}, {"sha": "45efbfe9b1aacaf231ef93b7562d0d30dad6a4ef", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/437f017e2ed2e8c60b6f4af9dc71559ca87fd645/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437f017e2ed2e8c60b6f4af9dc71559ca87fd645/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=437f017e2ed2e8c60b6f4af9dc71559ca87fd645", "patch": "@@ -109,7 +109,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         match *match_pair.pattern.kind {\n             PatternKind::Constant { value } => {\n-                let switch_ty = ty::ParamEnv::empty().and(switch_ty);\n                 indices.entry(value)\n                        .or_insert_with(|| {\n                            options.push(value.unwrap_bits(self.hir.tcx(), switch_ty));\n@@ -653,11 +652,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     use std::cmp::Ordering::*;\n                     use rustc::hir::RangeEnd::*;\n \n-                    let param_env = ty::ParamEnv::empty().and(test.ty);\n                     let tcx = self.hir.tcx();\n \n-                    let lo = compare_const_vals(tcx, test.lo, pat.hi, param_env)?;\n-                    let hi = compare_const_vals(tcx, test.hi, pat.lo, param_env)?;\n+                    let lo = compare_const_vals(tcx, test.lo, pat.hi, test.ty)?;\n+                    let hi = compare_const_vals(tcx, test.hi, pat.lo, test.ty)?;\n \n                     match (test.end, pat.end, lo, hi) {\n                         // pat < test\n@@ -772,11 +770,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ) -> Option<bool> {\n         use std::cmp::Ordering::*;\n \n-        let param_env = ty::ParamEnv::empty().and(range.ty);\n         let tcx = self.hir.tcx();\n \n-        let a = compare_const_vals(tcx, range.lo, value, param_env)?;\n-        let b = compare_const_vals(tcx, value, range.hi, param_env)?;\n+        let a = compare_const_vals(tcx, range.lo, value, range.ty)?;\n+        let b = compare_const_vals(tcx, value, range.hi, range.ty)?;\n \n         match (b, range.end) {\n             (Less, _) |"}, {"sha": "8baefc3162baa7cc074349e9e1ff88c2c800e027", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/437f017e2ed2e8c60b6f4af9dc71559ca87fd645/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437f017e2ed2e8c60b6f4af9dc71559ca87fd645/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=437f017e2ed2e8c60b6f4af9dc71559ca87fd645", "patch": "@@ -856,7 +856,7 @@ impl<'tcx> IntRange<'tcx> {\n             }\n             ConstantValue(val) if is_integral(val.ty) => {\n                 let ty = val.ty;\n-                if let Some(val) = val.assert_bits(tcx, ty::ParamEnv::empty().and(ty)) {\n+                if let Some(val) = val.assert_bits(tcx, ty) {\n                     let bias = IntRange::signed_bias(tcx, ty);\n                     let val = val ^ bias;\n                     Some(IntRange { range: val..=val, ty })\n@@ -873,8 +873,8 @@ impl<'tcx> IntRange<'tcx> {\n             match pat.kind {\n                 box PatternKind::Constant { value } => break ConstantValue(value),\n                 box PatternKind::Range(PatternRange { lo, hi, ty, end }) => break ConstantRange(\n-                    lo.to_bits(tcx, ty::ParamEnv::empty().and(ty)).unwrap(),\n-                    hi.to_bits(tcx, ty::ParamEnv::empty().and(ty)).unwrap(),\n+                    lo.unwrap_bits(tcx, ty),\n+                    hi.unwrap_bits(tcx, ty),\n                     ty,\n                     end,\n                 ),\n@@ -1327,8 +1327,8 @@ fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n         PatternKind::Constant { value } => Some(vec![ConstantValue(value)]),\n         PatternKind::Range(PatternRange { lo, hi, ty, end }) =>\n             Some(vec![ConstantRange(\n-                lo.to_bits(cx.tcx, ty::ParamEnv::empty().and(ty)).unwrap(),\n-                hi.to_bits(cx.tcx, ty::ParamEnv::empty().and(ty)).unwrap(),\n+                lo.unwrap_bits(cx.tcx, ty),\n+                hi.unwrap_bits(cx.tcx, ty),\n                 ty,\n                 end,\n             )]),\n@@ -1464,7 +1464,7 @@ fn slice_pat_covered_by_const<'tcx>(\n     {\n         match pat.kind {\n             box PatternKind::Constant { value } => {\n-                let b = value.unwrap_bits(tcx, ty::ParamEnv::empty().and(pat.ty));\n+                let b = value.unwrap_bits(tcx, pat.ty);\n                 assert_eq!(b as u8 as u128, b);\n                 if b as u8 != *ch {\n                     return Ok(false);\n@@ -1641,9 +1641,9 @@ fn constructor_covered_by_range<'tcx>(\n         _ => bug!(\"`constructor_covered_by_range` called with {:?}\", pat),\n     };\n     trace!(\"constructor_covered_by_range {:#?}, {:#?}, {:#?}, {}\", ctor, from, to, ty);\n-    let cmp_from = |c_from| compare_const_vals(tcx, c_from, from, ty::ParamEnv::empty().and(ty))\n+    let cmp_from = |c_from| compare_const_vals(tcx, c_from, from, ty)\n         .map(|res| res != Ordering::Less);\n-    let cmp_to = |c_to| compare_const_vals(tcx, c_to, to, ty::ParamEnv::empty().and(ty));\n+    let cmp_to = |c_to| compare_const_vals(tcx, c_to, to, ty);\n     macro_rules! some_or_ok {\n         ($e:expr) => {\n             match $e {"}, {"sha": "745266a64857d7640ec8bb13e2800641b034b0c3", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/437f017e2ed2e8c60b6f4af9dc71559ca87fd645/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437f017e2ed2e8c60b6f4af9dc71559ca87fd645/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=437f017e2ed2e8c60b6f4af9dc71559ca87fd645", "patch": "@@ -446,7 +446,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                             self.tcx,\n                             lo,\n                             hi,\n-                            self.param_env.and(ty),\n+                            ty,\n                         );\n                         match (end, cmp) {\n                             (RangeEnd::Excluded, Some(Ordering::Less)) =>\n@@ -1451,7 +1451,7 @@ pub fn compare_const_vals<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     a: &'tcx ty::Const<'tcx>,\n     b: &'tcx ty::Const<'tcx>,\n-    ty: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n+    ty: Ty<'tcx>,\n ) -> Option<Ordering> {\n     trace!(\"compare_const_vals: {:?}, {:?}\", a, b);\n \n@@ -1466,15 +1466,13 @@ pub fn compare_const_vals<'tcx>(\n     let fallback = || from_bool(a == b);\n \n     // Use the fallback if any type differs\n-    if a.ty != b.ty || a.ty != ty.value {\n+    if a.ty != b.ty || a.ty != ty {\n         return fallback();\n     }\n \n-    // FIXME: This should use assert_bits(ty) instead of use_bits\n-    // but triggers possibly bugs due to mismatching of arrays and slices\n-    if let (Some(a), Some(b)) = (a.to_bits(tcx, ty), b.to_bits(tcx, ty)) {\n+    if let (Some(a), Some(b)) = (a.assert_bits(tcx, ty), b.assert_bits(tcx, ty)) {\n         use ::rustc_apfloat::Float;\n-        return match ty.value.sty {\n+        return match ty.sty {\n             ty::Float(ast::FloatTy::F32) => {\n                 let l = ::rustc_apfloat::ieee::Single::from_bits(a);\n                 let r = ::rustc_apfloat::ieee::Single::from_bits(b);\n@@ -1497,7 +1495,7 @@ pub fn compare_const_vals<'tcx>(\n         }\n     }\n \n-    if let ty::Str = ty.value.sty {\n+    if let ty::Str = ty.sty {\n         match (a.val, b.val) {\n             (\n                 ConstValue::Slice { data: alloc_a, start: offset_a, end: end_a },"}, {"sha": "dd45595a4fe93721f3824f162ef7fe3bbe88f62f", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/437f017e2ed2e8c60b6f4af9dc71559ca87fd645/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437f017e2ed2e8c60b6f4af9dc71559ca87fd645/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=437f017e2ed2e8c60b6f4af9dc71559ca87fd645", "patch": "@@ -1,6 +1,6 @@\n //! A pass that simplifies branches when their condition is known.\n \n-use rustc::ty::{TyCtxt, ParamEnv};\n+use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use crate::transform::{MirPass, MirSource};\n \n@@ -26,7 +26,6 @@ impl MirPass for SimplifyBranches {\n                 TerminatorKind::SwitchInt {\n                     discr: Operand::Constant(ref c), switch_ty, ref values, ref targets, ..\n                 } => {\n-                    let switch_ty = ParamEnv::empty().and(switch_ty);\n                     let constant = c.literal.assert_bits(tcx, switch_ty);\n                     if let Some(constant) = constant {\n                         let (otherwise, targets) = targets.split_last().unwrap();"}]}