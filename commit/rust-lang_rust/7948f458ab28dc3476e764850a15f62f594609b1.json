{"sha": "7948f458ab28dc3476e764850a15f62f594609b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NDhmNDU4YWIyOGRjMzQ3NmU3NjQ4NTBhMTVmNjJmNTk0NjA5YjE=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2018-01-05T14:02:10Z"}, "committer": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2018-01-05T14:02:10Z"}, "message": "Write examples for {BTree,Hash}Set::{get,replace,take}", "tree": {"sha": "3a96784e7cd98b78f32c3a31cd8eda5edc5a085b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a96784e7cd98b78f32c3a31cd8eda5edc5a085b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7948f458ab28dc3476e764850a15f62f594609b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7948f458ab28dc3476e764850a15f62f594609b1", "html_url": "https://github.com/rust-lang/rust/commit/7948f458ab28dc3476e764850a15f62f594609b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7948f458ab28dc3476e764850a15f62f594609b1/comments", "author": null, "committer": null, "parents": [{"sha": "dd582ac38ec066859334061e71faf2631220d98b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd582ac38ec066859334061e71faf2631220d98b", "html_url": "https://github.com/rust-lang/rust/commit/dd582ac38ec066859334061e71faf2631220d98b"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "e094070fc3dd10cb864e31e49cb142005ed8d00a", "filename": "src/liballoc/btree/set.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7948f458ab28dc3476e764850a15f62f594609b1/src%2Fliballoc%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7948f458ab28dc3476e764850a15f62f594609b1/src%2Fliballoc%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fset.rs?ref=7948f458ab28dc3476e764850a15f62f594609b1", "patch": "@@ -415,6 +415,16 @@ impl<T: Ord> BTreeSet<T> {\n     /// The value may be any borrowed form of the set's value type,\n     /// but the ordering on the borrowed form *must* match the\n     /// ordering on the value type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// assert_eq!(set.get(&2), Some(&2));\n+    /// assert_eq!(set.get(&4), None);\n+    /// ```\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T>\n         where T: Borrow<Q>,\n@@ -540,6 +550,19 @@ impl<T: Ord> BTreeSet<T> {\n \n     /// Adds a value to the set, replacing the existing value, if any, that is equal to the given\n     /// one. Returns the replaced value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut set = BTreeSet::new();\n+    /// set.insert(Vec::<i32>::new());\n+    ///\n+    /// assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);\n+    /// set.replace(Vec::with_capacity(10));\n+    /// assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);\n+    /// ```\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn replace(&mut self, value: T) -> Option<T> {\n         Recover::replace(&mut self.map, value)\n@@ -576,6 +599,16 @@ impl<T: Ord> BTreeSet<T> {\n     /// The value may be any borrowed form of the set's value type,\n     /// but the ordering on the borrowed form *must* match the\n     /// ordering on the value type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// assert_eq!(set.take(&2), Some(2));\n+    /// assert_eq!(set.take(&2), None);\n+    /// ```\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn take<Q: ?Sized>(&mut self, value: &Q) -> Option<T>\n         where T: Borrow<Q>,"}, {"sha": "e9427fb40a0165d79738dc4343288f1e22684a2e", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7948f458ab28dc3476e764850a15f62f594609b1/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7948f458ab28dc3476e764850a15f62f594609b1/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=7948f458ab28dc3476e764850a15f62f594609b1", "patch": "@@ -527,6 +527,16 @@ impl<T, S> HashSet<T, S>\n     /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n     /// the value type.\n     ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// assert_eq!(set.get(&2), Some(&2));\n+    /// assert_eq!(set.get(&4), None);\n+    /// ```\n+    ///\n     /// [`Eq`]: ../../std/cmp/trait.Eq.html\n     /// [`Hash`]: ../../std/hash/trait.Hash.html\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n@@ -631,6 +641,19 @@ impl<T, S> HashSet<T, S>\n \n     /// Adds a value to the set, replacing the existing value, if any, that is equal to the given\n     /// one. Returns the replaced value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set = HashSet::new();\n+    /// set.insert(Vec::<i32>::new());\n+    ///\n+    /// assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);\n+    /// set.replace(Vec::with_capacity(10));\n+    /// assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);\n+    /// ```\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn replace(&mut self, value: T) -> Option<T> {\n         Recover::replace(&mut self.map, value)\n@@ -671,6 +694,16 @@ impl<T, S> HashSet<T, S>\n     /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n     /// the value type.\n     ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// assert_eq!(set.take(&2), Some(2));\n+    /// assert_eq!(set.take(&2), None);\n+    /// ```\n+    ///\n     /// [`Eq`]: ../../std/cmp/trait.Eq.html\n     /// [`Hash`]: ../../std/hash/trait.Hash.html\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]"}]}