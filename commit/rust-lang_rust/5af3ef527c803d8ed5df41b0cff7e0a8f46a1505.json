{"sha": "5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "node_id": "C_kwDOAAsO6NoAKDVhZjNlZjUyN2M4MDNkOGVkNWRmNDFiMGNmZjdlMGE4ZjQ2YTE1MDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-14T11:53:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-14T11:53:29Z"}, "message": "Auto merge of #12735 - feniljain:fix-completions, r=feniljain\n\nfix(completion): `super::` completion at crate root and module depth aware\n\n- should close #12439\n- Suggest super according to the depth in tree", "tree": {"sha": "a93ccc4009b1f5a1472f34c2b377f034cd0b55da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a93ccc4009b1f5a1472f34c2b377f034cd0b55da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "html_url": "https://github.com/rust-lang/rust/commit/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "794ecd58a32dfd9fdab0596b181133d4d2ae4b6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/794ecd58a32dfd9fdab0596b181133d4d2ae4b6f", "html_url": "https://github.com/rust-lang/rust/commit/794ecd58a32dfd9fdab0596b181133d4d2ae4b6f"}, {"sha": "4cbde4ed8f9764e0ecf922279f26613fa3edca54", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cbde4ed8f9764e0ecf922279f26613fa3edca54", "html_url": "https://github.com/rust-lang/rust/commit/4cbde4ed8f9764e0ecf922279f26613fa3edca54"}], "stats": {"total": 252, "additions": 140, "deletions": 112}, "files": [{"sha": "b254e458eb5677bdded5539c74955d1d68c5507d", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -91,11 +91,31 @@ impl Completions {\n     }\n \n     pub(crate) fn add_nameref_keywords_with_colon(&mut self, ctx: &CompletionContext) {\n-        [\"self::\", \"super::\", \"crate::\"].into_iter().for_each(|kw| self.add_keyword(ctx, kw));\n+        [\"self::\", \"crate::\"].into_iter().for_each(|kw| self.add_keyword(ctx, kw));\n+\n+        if ctx.depth_from_crate_root > 0 {\n+            self.add_keyword(ctx, \"super::\");\n+        }\n     }\n \n     pub(crate) fn add_nameref_keywords(&mut self, ctx: &CompletionContext) {\n-        [\"self\", \"super\", \"crate\"].into_iter().for_each(|kw| self.add_keyword(ctx, kw));\n+        [\"self\", \"crate\"].into_iter().for_each(|kw| self.add_keyword(ctx, kw));\n+\n+        if ctx.depth_from_crate_root > 0 {\n+            self.add_keyword(ctx, \"super\");\n+        }\n+    }\n+\n+    pub(crate) fn add_super_keyword(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        super_chain_len: Option<usize>,\n+    ) {\n+        if let Some(len) = super_chain_len {\n+            if len > 0 && len < ctx.depth_from_crate_root {\n+                self.add_keyword(ctx, \"super::\");\n+            }\n+        }\n     }\n \n     pub(crate) fn add_keyword_snippet_expr("}, {"sha": "cbf40e913442a4b10429e052cf01125717258f1d", "filename": "crates/ide-completion/src/completions/attribute.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -82,12 +82,10 @@ pub(crate) fn complete_attribute_path(\n     match qualified {\n         Qualified::With {\n             resolution: Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))),\n-            is_super_chain,\n+            super_chain_len,\n             ..\n         } => {\n-            if *is_super_chain {\n-                acc.add_keyword(ctx, \"super::\");\n-            }\n+            acc.add_super_keyword(ctx, *super_chain_len);\n \n             for (name, def) in module.scope(ctx.db, Some(ctx.module)) {\n                 match def {"}, {"sha": "b3cc1826a6eb3492dda0e6acae1c6a838445ef2f", "filename": "crates/ide-completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -21,12 +21,10 @@ pub(crate) fn complete_derive_path(\n     match qualified {\n         Qualified::With {\n             resolution: Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))),\n-            is_super_chain,\n+            super_chain_len,\n             ..\n         } => {\n-            if *is_super_chain {\n-                acc.add_keyword(ctx, \"super::\");\n-            }\n+            acc.add_super_keyword(ctx, *super_chain_len);\n \n             for (name, def) in module.scope(ctx.db, Some(ctx.module)) {\n                 match def {"}, {"sha": "43b48993902e621ff5a131cfbb707d59d58537c8", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -36,7 +36,7 @@ pub(crate) fn complete_item_list(\n     match qualified {\n         Qualified::With {\n             resolution: Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))),\n-            is_super_chain,\n+            super_chain_len,\n             ..\n         } => {\n             for (name, def) in module.scope(ctx.db, Some(ctx.module)) {\n@@ -51,9 +51,7 @@ pub(crate) fn complete_item_list(\n                 }\n             }\n \n-            if *is_super_chain {\n-                acc.add_keyword(ctx, \"super::\");\n-            }\n+            acc.add_super_keyword(ctx, *super_chain_len);\n         }\n         Qualified::Absolute => acc.add_crate_roots(ctx, path_ctx),\n         Qualified::No if ctx.qualifier_ctx.none() => {"}, {"sha": "8d7fbc6627a4f63aa1dea94b935f899da1281c37", "filename": "crates/ide-completion/src/completions/pattern.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -111,10 +111,8 @@ pub(crate) fn complete_pattern_path(\n     path_ctx @ PathCompletionCtx { qualified, .. }: &PathCompletionCtx,\n ) {\n     match qualified {\n-        Qualified::With { resolution: Some(resolution), is_super_chain, .. } => {\n-            if *is_super_chain {\n-                acc.add_keyword(ctx, \"super::\");\n-            }\n+        Qualified::With { resolution: Some(resolution), super_chain_len, .. } => {\n+            acc.add_super_keyword(ctx, *super_chain_len);\n \n             match resolution {\n                 hir::PathResolution::Def(hir::ModuleDef::Module(module)) => {"}, {"sha": "d4827771ad792799f3cd89f4fdd8e5046732c4a8", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -17,10 +17,9 @@ pub(crate) fn complete_use_path(\n     name_ref: &Option<ast::NameRef>,\n ) {\n     match qualified {\n-        Qualified::With { path, resolution: Some(resolution), is_super_chain } => {\n-            if *is_super_chain {\n-                acc.add_keyword(ctx, \"super::\");\n-            }\n+        Qualified::With { path, resolution: Some(resolution), super_chain_len } => {\n+            acc.add_super_keyword(ctx, *super_chain_len);\n+\n             // only show `self` in a new use-tree when the qualifier doesn't end in self\n             let not_preceded_by_self = *use_tree_parent\n                 && !matches!("}, {"sha": "39028eca41c6aac2c49071360b886d8f345ba2e1", "filename": "crates/ide-completion/src/completions/vis.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -14,7 +14,7 @@ pub(crate) fn complete_vis_path(\n     match qualified {\n         Qualified::With {\n             resolution: Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))),\n-            is_super_chain,\n+            super_chain_len,\n             ..\n         } => {\n             // Try completing next child module of the path that is still a parent of the current module\n@@ -27,9 +27,7 @@ pub(crate) fn complete_vis_path(\n                 }\n             }\n \n-            if *is_super_chain {\n-                acc.add_keyword(ctx, \"super::\");\n-            }\n+            acc.add_super_keyword(ctx, *super_chain_len);\n         }\n         Qualified::Absolute | Qualified::Infer | Qualified::With { .. } => {}\n         Qualified::No => {"}, {"sha": "c93fd0d7bb04d27300a0f5befe20fabaa63766f5", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -4,6 +4,8 @@ mod analysis;\n #[cfg(test)]\n mod tests;\n \n+use std::iter;\n+\n use base_db::SourceDatabaseExt;\n use hir::{\n     HasAttrs, Local, Name, PathResolution, ScopeDef, Semantics, SemanticsScope, Type, TypeInfo,\n@@ -174,8 +176,17 @@ pub(super) enum Qualified {\n     With {\n         path: ast::Path,\n         resolution: Option<PathResolution>,\n-        /// Whether this path consists solely of `super` segments\n-        is_super_chain: bool,\n+        /// How many `super` segments are present in the path\n+        ///\n+        /// This would be None, if path is not solely made of\n+        /// `super` segments, e.g.\n+        ///\n+        /// ```rust\n+        ///   use super::foo;\n+        /// ```\n+        ///\n+        /// Otherwise it should be Some(count of `super`)\n+        super_chain_len: Option<usize>,\n     },\n     /// <_>::\n     Infer,\n@@ -343,6 +354,12 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) qualifier_ctx: QualifierCtx,\n \n     pub(super) locals: FxHashMap<Name, Local>,\n+\n+    /// - crate-root\n+    ///  - mod foo\n+    ///   - mod bar\n+    /// Here depth will be 2: {[bar<->foo], [foo<->crate-root]}\n+    pub(super) depth_from_crate_root: usize,\n }\n \n impl<'a> CompletionContext<'a> {\n@@ -521,6 +538,8 @@ impl<'a> CompletionContext<'a> {\n             }\n         });\n \n+        let depth_from_crate_root = iter::successors(module.parent(db), |m| m.parent(db)).count();\n+\n         let mut ctx = CompletionContext {\n             sema,\n             scope,\n@@ -535,6 +554,7 @@ impl<'a> CompletionContext<'a> {\n             expected_type: None,\n             qualifier_ctx: Default::default(),\n             locals,\n+            depth_from_crate_root,\n         };\n         let ident_ctx = ctx.expand_and_analyze(\n             original_file.syntax().clone(),"}, {"sha": "7fc77aae91fd4328ffc0793a500be44ed288c6b7", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -899,10 +899,25 @@ impl<'a> CompletionContext<'a> {\n                         Qualified::Infer\n                     } else {\n                         let res = sema.resolve_path(&path);\n-                        let is_super_chain =\n-                            iter::successors(Some(path.clone()), |p| p.qualifier())\n-                                .all(|p| p.segment().and_then(|s| s.super_token()).is_some());\n-                        Qualified::With { path, resolution: res, is_super_chain }\n+\n+                        // For understanding how and why super_chain_len is calculated the way it\n+                        // is check the documentation at it's definition\n+                        let mut segment_count = 0;\n+                        let super_count = iter::successors(Some(path.clone()), |p| p.qualifier())\n+                            .take_while(|p| {\n+                                p.segment()\n+                                    .and_then(|s| {\n+                                        segment_count += 1;\n+                                        s.super_token()\n+                                    })\n+                                    .is_some()\n+                            })\n+                            .count();\n+\n+                        let super_chain_len =\n+                            if segment_count > super_count { None } else { Some(super_count) };\n+\n+                        Qualified::With { path, resolution: res, super_chain_len }\n                     }\n                 };\n             }"}, {"sha": "1578ba2c3771267d1dc7adc817f8795beb132b97", "filename": "crates/ide-completion/src/tests/attribute.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fattribute.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -35,7 +35,6 @@ struct Foo;\n             md proc_macros\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     )\n }\n@@ -85,7 +84,6 @@ fn with_existing_attr() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     )\n }\n@@ -117,7 +115,6 @@ fn attr_on_source_file() {\n             at windows_subsystem = \"\u2026\"\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -190,7 +187,6 @@ fn attr_on_macro_rules() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -214,7 +210,6 @@ fn attr_on_macro_def() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -239,7 +234,6 @@ fn attr_on_extern_crate() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -263,7 +257,6 @@ fn attr_on_use() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -287,7 +280,6 @@ fn attr_on_type_alias() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -320,7 +312,6 @@ struct Foo;\n             md core\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -347,7 +338,6 @@ fn attr_on_enum() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -371,7 +361,6 @@ fn attr_on_const() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -400,7 +389,6 @@ fn attr_on_static() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -425,7 +413,6 @@ fn attr_on_trait() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -450,7 +437,6 @@ fn attr_on_impl() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n     check(\n@@ -470,7 +456,6 @@ fn attr_on_impl() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -495,7 +480,6 @@ fn attr_on_extern_block() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n     check(\n@@ -516,7 +500,6 @@ fn attr_on_extern_block() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -535,7 +518,6 @@ fn attr_on_variant() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -574,7 +556,6 @@ fn attr_on_fn() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -622,7 +603,6 @@ fn attr_in_source_file_end() {\n             at warn(\u2026)\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -679,7 +659,6 @@ mod derive {\n                 md core\n                 kw crate::\n                 kw self::\n-                kw super::\n             \"#]],\n         );\n     }\n@@ -701,7 +680,6 @@ mod derive {\n                 md core\n                 kw crate::\n                 kw self::\n-                kw super::\n             \"#]],\n         )\n     }\n@@ -723,7 +701,6 @@ mod derive {\n                 md core\n                 kw crate::\n                 kw self::\n-                kw super::\n             \"#]],\n         );\n     }\n@@ -744,7 +721,6 @@ mod derive {\n                 md core\n                 kw crate::\n                 kw self::\n-                kw super::\n             \"#]],\n         );\n     }\n@@ -763,7 +739,6 @@ mod derive {\n                 md proc_macros\n                 kw crate::\n                 kw self::\n-                kw super::\n             \"#]],\n         );\n         check_derive(\n@@ -779,7 +754,6 @@ use proc_macros::DeriveIdentity;\n                 md proc_macros\n                 kw crate::\n                 kw self::\n-                kw super::\n             \"#]],\n         );\n     }"}, {"sha": "ce9d01d337bae55378f75eb02bd2b2ddaf7a7ee1", "filename": "crates/ide-completion/src/tests/expression.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -58,7 +58,6 @@ fn baz() {\n             kw mut\n             kw return\n             kw self::\n-            kw super::\n             kw true\n             kw unsafe\n             kw while\n@@ -100,7 +99,6 @@ fn func(param0 @ (param1, param2): (i32, i32)) {\n             kw match\n             kw return\n             kw self::\n-            kw super::\n             kw true\n             kw unsafe\n             kw while\n@@ -162,7 +160,6 @@ impl Unit {\n             kw self::\n             kw static\n             kw struct\n-            kw super::\n             kw trait\n             kw true\n             kw type\n@@ -240,7 +237,6 @@ fn complete_in_block() {\n             kw self::\n             kw static\n             kw struct\n-            kw super::\n             kw trait\n             kw true\n             kw type\n@@ -288,7 +284,6 @@ fn complete_after_if_expr() {\n             kw self::\n             kw static\n             kw struct\n-            kw super::\n             kw trait\n             kw true\n             kw type\n@@ -326,7 +321,6 @@ fn complete_in_match_arm() {\n             kw match\n             kw return\n             kw self::\n-            kw super::\n             kw true\n             kw unsafe\n             kw while\n@@ -362,7 +356,6 @@ fn completes_in_loop_ctx() {\n             kw self::\n             kw static\n             kw struct\n-            kw super::\n             kw trait\n             kw true\n             kw type\n@@ -394,7 +387,6 @@ fn completes_in_let_initializer() {\n             kw match\n             kw return\n             kw self::\n-            kw super::\n             kw true\n             kw unsafe\n             kw while\n@@ -429,7 +421,6 @@ fn foo() {\n             kw match\n             kw return\n             kw self::\n-            kw super::\n             kw true\n             kw unsafe\n             kw while\n@@ -465,7 +456,6 @@ fn foo() {\n             kw match\n             kw return\n             kw self::\n-            kw super::\n             kw true\n             kw unsafe\n             kw while\n@@ -497,7 +487,6 @@ fn quux(x: i32) {\n             kw match\n             kw return\n             kw self::\n-            kw super::\n             kw true\n             kw unsafe\n             kw while\n@@ -525,7 +514,6 @@ fn quux(x: i32) {\n             kw match\n             kw return\n             kw self::\n-            kw super::\n             kw true\n             kw unsafe\n             kw while"}, {"sha": "409413c1dcdb1ec8c35d3cc74826439b700978b2", "filename": "crates/ide-completion/src/tests/item.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -29,7 +29,6 @@ impl Tra$0\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     )\n }\n@@ -52,7 +51,6 @@ impl Trait for Str$0\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     )\n }"}, {"sha": "5076c6e86caeebf11ba0c653d483220a954fb05c", "filename": "crates/ide-completion/src/tests/item_list.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -60,7 +60,6 @@ fn in_source_file_item_list() {\n             kw self::\n             kw static\n             kw struct\n-            kw super::\n             kw trait\n             kw type\n             kw union\n@@ -93,7 +92,6 @@ fn in_item_list_after_attr() {\n             kw self::\n             kw static\n             kw struct\n-            kw super::\n             kw trait\n             kw type\n             kw union\n@@ -175,7 +173,6 @@ fn in_impl_assoc_item_list() {\n             kw pub(crate)\n             kw pub(super)\n             kw self::\n-            kw super::\n             kw unsafe\n         \"#]],\n     )\n@@ -195,7 +192,6 @@ fn in_impl_assoc_item_list_after_attr() {\n             kw pub(crate)\n             kw pub(super)\n             kw self::\n-            kw super::\n             kw unsafe\n         \"#]],\n     )\n@@ -212,7 +208,6 @@ fn in_trait_assoc_item_list() {\n             kw crate::\n             kw fn\n             kw self::\n-            kw super::\n             kw type\n             kw unsafe\n         \"#]],\n@@ -247,7 +242,6 @@ impl Test for () {\n             ta type Type1 =\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }"}, {"sha": "180886806600111e41dea94bf237d76ac566c859", "filename": "crates/ide-completion/src/tests/pattern.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -414,7 +414,6 @@ fn foo() {\n             st Bar\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n     check_empty(\n@@ -430,7 +429,6 @@ fn foo() {\n             st Foo\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n     check_empty("}, {"sha": "a8676e2f247870cf90c8c245f2717f2f6abdc478", "filename": "crates/ide-completion/src/tests/predicate.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Fpredicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Fpredicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fpredicate.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -28,7 +28,6 @@ struct Foo<'lt, T, const C: usize> where $0 {}\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -45,7 +44,6 @@ struct Foo<'lt, T, const C: usize> where T: $0 {}\n             tt Trait\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -64,7 +62,6 @@ struct Foo<'lt, T, const C: usize> where 'lt: $0 {}\n             tt Trait\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -81,7 +78,6 @@ struct Foo<'lt, T, const C: usize> where for<'a> T: $0 {}\n             tt Trait\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -105,7 +101,6 @@ struct Foo<'lt, T, const C: usize> where for<'a> $0 {}\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -131,7 +126,6 @@ impl Record {\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }"}, {"sha": "ec32602fa3c2f83f95ab6f8db5b193b966068ac7", "filename": "crates/ide-completion/src/tests/record.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -171,7 +171,6 @@ fn main() {\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n     check("}, {"sha": "f0b7726c51d9bb42d5620d813f18ac4932e05403", "filename": "crates/ide-completion/src/tests/type_pos.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -31,7 +31,6 @@ struct Foo<'lt, T, const C: usize> {\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     )\n }\n@@ -60,7 +59,6 @@ struct Foo<'lt, T, const C: usize>(f$0);\n             kw pub(crate)\n             kw pub(super)\n             kw self::\n-            kw super::\n         \"#]],\n     )\n }\n@@ -84,7 +82,6 @@ fn x<'lt, T, const C: usize>() -> $0\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -115,7 +112,6 @@ fn foo() -> B$0 {\n         it ()\n         kw crate::\n         kw self::\n-        kw super::\n     \"#]],\n     )\n }\n@@ -141,7 +137,6 @@ const FOO: $0 = Foo(2);\n             it Foo<i32>\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -168,7 +163,6 @@ fn f2() {\n             it i32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -197,7 +191,6 @@ fn f2() {\n             it u64\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -223,7 +216,6 @@ fn f2(x: u64) -> $0 {\n             it u64\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -250,7 +242,6 @@ fn f2(x: $0) {\n             it i32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -285,7 +276,6 @@ fn foo<'lt, T, const C: usize>() {\n             it a::Foo<a::Foo<i32>>\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -315,7 +305,6 @@ fn foo<'lt, T, const C: usize>() {\n             it Foo<i32>\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -342,7 +331,6 @@ fn foo<'lt, T, const C: usize>() {\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n     check(\n@@ -412,7 +400,6 @@ fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n     check(\n@@ -465,7 +452,6 @@ impl Tr<$0\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -512,7 +498,6 @@ fn f(t: impl MyTrait<u$0\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n \n@@ -539,7 +524,6 @@ fn f(t: impl MyTrait<u8, u$0\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n \n@@ -584,7 +568,6 @@ fn f(t: impl MyTrait<u$0\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n \n@@ -613,7 +596,6 @@ fn f(t: impl MyTrait<u8, u$0\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n \n@@ -658,7 +640,6 @@ fn f(t: impl MyTrait<Item1 = $0\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n \n@@ -685,7 +666,6 @@ fn f(t: impl MyTrait<Item1 = u8, Item2 = $0\n             bt u32\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }"}, {"sha": "037d7dce52e632c0999d7ebf7724d8ded660669a", "filename": "crates/ide-completion/src/tests/use_tree.rs", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -31,7 +31,6 @@ mod foo {}\n             md other_crate\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }\n@@ -214,7 +213,6 @@ struct Bar;\n             md bar\n             md foo\n             st Bar\n-            kw super::\n         \"#]],\n     );\n }\n@@ -284,9 +282,73 @@ pub use $0;\n             md bar\n             kw crate::\n             kw self::\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn pub_suggest_use_tree_super_acc_to_depth_in_tree() {\n+    // https://github.com/rust-lang/rust-analyzer/issues/12439\n+    // Check discussion in https://github.com/rust-lang/rust-analyzer/pull/12447\n+\n+    check(\n+        r#\"\n+mod foo {\n+    mod bar {\n+        pub use super::$0;\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            md bar\n+            kw super::\n+        \"#]],\n+    );\n+\n+    // Not suggest super when at crate root\n+    check(\n+        r#\"\n+mod foo {\n+    mod bar {\n+        pub use super::super::$0;\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            md foo\n+        \"#]],\n+    );\n+\n+    check(\n+        r#\"\n+mod foo {\n+    use $0;\n+}\n+\"#,\n+        expect![[r#\"\n+            kw crate::\n+            kw self::\n             kw super::\n         \"#]],\n     );\n+\n+    // Not suggest super after another kw in path ( here it is foo1 )\n+    check(\n+        r#\"\n+mod foo {\n+    mod bar {\n+        use super::super::foo1::$0;\n+    }\n+}\n+\n+mod foo1 {\n+    pub mod bar1 {}\n+}\n+\"#,\n+        expect![[r#\"\n+            md bar1\n+        \"#]],\n+    );\n }\n \n #[test]\n@@ -301,7 +363,6 @@ use {$0};\n             md bar\n             kw crate::\n             kw self::\n-            kw super::\n         \"#]],\n     );\n }"}, {"sha": "c18d6e66dd602d9bb95fa7e1e55140d2f40993d5", "filename": "crates/ide-completion/src/tests/visibility.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505/crates%2Fide-completion%2Fsrc%2Ftests%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fvisibility.rs?ref=5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "patch": "@@ -25,7 +25,6 @@ pub($0)\n             kw crate\n             kw in\n             kw self\n-            kw super\n         \"#]],\n     );\n }\n@@ -39,7 +38,6 @@ pub(in $0)\n         expect![[r#\"\n             kw crate\n             kw self\n-            kw super\n         \"#]],\n     );\n }"}]}