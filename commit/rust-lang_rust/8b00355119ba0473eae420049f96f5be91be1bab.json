{"sha": "8b00355119ba0473eae420049f96f5be91be1bab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMDAzNTUxMTliYTA0NzNlYWU0MjAwNDlmOTZmNWJlOTFiZTFiYWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-01T02:00:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-01T02:00:36Z"}, "message": "Auto merge of #36339 - brson:emscripten-new, r=alexcrichton\n\nWorking asmjs and wasm targets\n\nThis patch set results in a working standard library for the asmjs-unknown-emscripten and wasm32-unknown-emscripten targets. It is based on the work of @badboy and @rschulman.\n\nIt does a few things:\n\n- Updates LLVM with the emscripten [fastcomp](https://github.com/rust-lang/llvm/pull/50) patches, which include the pnacl IR legalizer and the asm.js backend. This patch is thought not to have any significant effect on existing targets.\n- Teaches rustbuild to correctly link C code with emscripten\n- Updates gcc-rs to work correctly with emscripten\n- Teaches rustbuild to run crate tests for emscripten with node\n- Modifies Thread::new to return an error on emscripten, to facilitate debugging a common failure mode\n- Modifies libtest to run in single-threaded mode for emscripten\n- Ignores a host of tests that don't work yet, mostly dealing with threads and I/O\n- Updates libc with wasm32 definitions (presently the same as asmjs)\n- Adds a wasm32-unknown-emscripten target that feeds the output of LLVM's asmjs backend through emcc to generate wasm\n\nNotes and caveats:\n\n- This is only known to work with `--enable-rustbuild`.\n- The wasm32 target can't be tested correctly yet because of issues in compiletest and limitations in node https://github.com/kripken/emscripten/issues/4542, but hello.rs does seem to work when run on node via the binaryen interpreter\n- This requires an up to date installation of the emscripten sdk from its incoming branch\n- Unwinding is very broken\n- When enabling the emscripten targets jemalloc is disabled for all targets, which results in test failures for the host\n\nNext steps are to fix the jemalloc issue, start building the two emscripten targets on the auto builders, then start producing nightlies.\n\nhttps://github.com/rust-lang/rust/issues/36317 tracks work on this.\n\nFixes https://github.com/rust-lang/rust/issues/36515\nFixes https://github.com/rust-lang/rust/issues/36515\nFixes https://github.com/rust-lang/rust/issues/36356", "tree": {"sha": "4a133c1bb38dd054db51c7b326f6ccd9d6f0a701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a133c1bb38dd054db51c7b326f6ccd9d6f0a701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b00355119ba0473eae420049f96f5be91be1bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b00355119ba0473eae420049f96f5be91be1bab", "html_url": "https://github.com/rust-lang/rust/commit/8b00355119ba0473eae420049f96f5be91be1bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b00355119ba0473eae420049f96f5be91be1bab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bba3fca20e3ddfdf1173c8ae2851b492ca2c98a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bba3fca20e3ddfdf1173c8ae2851b492ca2c98a6", "html_url": "https://github.com/rust-lang/rust/commit/bba3fca20e3ddfdf1173c8ae2851b492ca2c98a6"}, {"sha": "afa72b5dd6b75ed4577a4e73c1525dcd58d93b51", "url": "https://api.github.com/repos/rust-lang/rust/commits/afa72b5dd6b75ed4577a4e73c1525dcd58d93b51", "html_url": "https://github.com/rust-lang/rust/commit/afa72b5dd6b75ed4577a4e73c1525dcd58d93b51"}], "stats": {"total": 826, "additions": 615, "deletions": 211}, "files": [{"sha": "997bdfbf03ab191af0de9d40c8de297709a3e0b1", "filename": "mk/cfg/wasm32-unknown-emscripten.mk", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/mk%2Fcfg%2Fwasm32-unknown-emscripten.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/mk%2Fcfg%2Fwasm32-unknown-emscripten.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fwasm32-unknown-emscripten.mk?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -0,0 +1,24 @@\n+# wasm32-unknown-emscripten configuration\n+CC_wasm32-unknown-emscripten=emcc\n+CXX_wasm32-unknown-emscripten=em++\n+CPP_wasm32-unknown-emscripten=$(CPP)\n+AR_wasm32-unknown-emscripten=emar\n+CFG_LIB_NAME_wasm32-unknown-emscripten=lib$(1).so\n+CFG_STATIC_LIB_NAME_wasm32-unknown-emscripten=lib$(1).a\n+CFG_LIB_GLOB_wasm32-unknown-emscripten=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_wasm32-unknown-emscripten=lib$(1)-*.dylib.dSYM\n+CFG_JEMALLOC_CFLAGS_wasm32-unknown-emscripten := -m32 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_wasm32-unknown-emscripten :=  -g -fPIC -m32 -s BINARYEN=1 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_wasm32-unknown-emscripten := -fno-rtti -s BINARYEN=1 $(CXXFLAGS)\n+CFG_GCCISH_LINK_FLAGS_wasm32-unknown-emscripten := -shared -fPIC -ldl -pthread  -lrt -g -m32 -s BINARYEN=1\n+CFG_GCCISH_DEF_FLAG_wasm32-unknown-emscripten := -Wl,--export-dynamic,--dynamic-list=\n+CFG_LLC_FLAGS_wasm32-unknown-emscripten :=\n+CFG_INSTALL_NAME_wasm32-unknown-emscripten =\n+CFG_EXE_SUFFIX_wasm32-unknown-emscripten =\n+CFG_WINDOWSY_wasm32-unknown-emscripten :=\n+CFG_UNIXY_wasm32-unknown-emscripten := 1\n+CFG_LDPATH_wasm32-unknown-emscripten :=\n+CFG_RUN_wasm32-unknown-emscripten=$(2)\n+CFG_RUN_TARG_wasm32-unknown-emscripten=$(call CFG_RUN_wasm32-unknown-emscripten,,$(2))\n+CFG_GNU_TRIPLE_wasm32-unknown-emscripten := wasm32-unknown-emscripten\n+CFG_DISABLE_JEMALLOC_wasm32-unknown-emscripten := 1"}, {"sha": "e68a8f3005561d56309527c7ac1de40c82e0ae93", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -300,7 +300,7 @@ endif\n # LLVM macros\n ######################################################################\n \n-LLVM_OPTIONAL_COMPONENTS=x86 arm aarch64 mips powerpc pnacl systemz\n+LLVM_OPTIONAL_COMPONENTS=x86 arm aarch64 mips powerpc pnacl systemz jsbackend\n LLVM_REQUIRED_COMPONENTS=ipo bitreader bitwriter linker asmparser mcjit \\\n                 interpreter instrumentation\n "}, {"sha": "babbb6a16bae0002e1b4506e13394f6e60986e15", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -5,16 +5,16 @@ dependencies = [\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.31 (git+https://github.com/alexcrichton/gcc-rs)\",\n+ \"gcc 0.3.35 (git+https://github.com/alexcrichton/gcc-rs)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"md5 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.1.73 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -34,25 +34,25 @@ name = \"cmake\"\n version = \"0.1.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"filetime\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"gcc\"\n-version = \"0.3.31\"\n-source = \"git+https://github.com/alexcrichton/gcc-rs#b8e2400883f1a2749b323354dad372cdd1c838c7\"\n+version = \"0.3.35\"\n+source = \"git+https://github.com/alexcrichton/gcc-rs#8ff5360b6e0dc4f3c9d3f71036f1ff403c68469d\"\n \n [[package]]\n name = \"gcc\"\n-version = \"0.3.31\"\n+version = \"0.3.35\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -65,13 +65,13 @@ name = \"kernel32-sys\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"winapi 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.10\"\n+version = \"0.2.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -84,15 +84,15 @@ name = \"memchr\"\n version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"num_cpus\"\n-version = \"0.2.11\"\n+version = \"0.2.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -123,7 +123,7 @@ version = \"2.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -136,7 +136,7 @@ dependencies = [\n \n [[package]]\n name = \"toml\"\n-version = \"0.1.28\"\n+version = \"0.1.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -149,7 +149,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"winapi\"\n-version = \"0.2.6\"\n+version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -161,20 +161,20 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum aho-corasick 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2b3fb52b09c1710b961acb35390d514be82e4ac96a9969a8e38565a29b878dc9\"\n \"checksum cmake 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dfcf5bcece56ef953b8ea042509e9dcbdfe97820b7e20d86beb53df30ed94978\"\n \"checksum filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5363ab8e4139b8568a6237db5248646e5a8a2f89bd5ccb02092182b11fd3e922\"\n-\"checksum gcc 0.3.31 (git+https://github.com/alexcrichton/gcc-rs)\" = \"<none>\"\n-\"checksum gcc 0.3.31 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cfe877476e53690ebb0ce7325d0bf43e198d9500291b54b3c65e518de5039b07\"\n+\"checksum gcc 0.3.35 (git+https://github.com/alexcrichton/gcc-rs)\" = \"<none>\"\n+\"checksum gcc 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"91ecd03771effb0c968fd6950b37e89476a578aaf1c70297d8e92b6516ec3312\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum libc 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"55f3730be7e803cf350d32061958171731c2395831fbd67a61083782808183e0\"\n+\"checksum libc 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23e3757828fa702a20072c37ff47938e9dd331b92fac6e223d26d4b7a55f7ee2\"\n \"checksum md5 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a5539a8dee9b4ae308c9c406a379838b435a8f2c84cf9fedc6d5a576be9888db\"\n \"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n-\"checksum num_cpus 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"51fedae97a05f7353612fe017ab705a37e6db8f4d67c5c6fe739a9e70d6eed09\"\n+\"checksum num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cee7e88156f3f9e19bdd598f8d6c9db7bf4078f99f8381f43a55b09648d1a6e3\"\n \"checksum regex 0.1.73 (registry+https://github.com/rust-lang/crates.io-index)\" = \"56b7ee9f764ecf412c6e2fff779bca4b22980517ae335a21aeaf4e32625a5df2\"\n \"checksum regex-syntax 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31040aad7470ad9d8c46302dcffba337bb4289ca5da2e3cd6e37b64109a85199\"\n \"checksum rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6159e4e6e559c81bd706afe9c8fd68f547d3e851ce12e76b1de7914bab61691b\"\n \"checksum thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9539db560102d1cef46b8b78ce737ff0bb64e7e18d35b2a5688f7d097d0ff03\"\n \"checksum thread_local 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"55dd963dbaeadc08aa7266bf7f91c3154a7805e32bb94b820b769d2ef3b4744d\"\n-\"checksum toml 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fcd27a04ca509aff336ba5eb2abc58d456f52c4ff64d9724d88acb85ead560b6\"\n+\"checksum toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0590d72182e50e879c4da3b11c6488dae18fccb1ae0c7a3eda18e16795844796\"\n \"checksum utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1ca13c08c41c9c3e04224ed9ff80461d97e121589ff27c753a16cb10830ae0f\"\n-\"checksum winapi 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4dfaaa8fbdaa618fa6914b59b2769d690dd7521920a18d84b42d254678dd5fd4\"\n+\"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\""}, {"sha": "b8417218a2231e285e3adbefc3b99ba1c01fc77d", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -108,6 +108,10 @@ pub fn compiletest(build: &Build,\n     cmd.arg(\"--host\").arg(compiler.host);\n     cmd.arg(\"--llvm-filecheck\").arg(build.llvm_filecheck(&build.config.build));\n \n+    if let Some(nodejs) = build.config.nodejs.as_ref() {\n+        cmd.arg(\"--nodejs\").arg(nodejs);\n+    }\n+\n     let mut flags = vec![\"-Crpath\".to_string()];\n     if build.config.rust_optimize_tests {\n         flags.push(\"-O\".to_string());\n@@ -323,6 +327,9 @@ pub fn krate(build: &Build,\n     if target.contains(\"android\") {\n         build.run(cargo.arg(\"--no-run\"));\n         krate_android(build, compiler, target, mode);\n+    } else if target.contains(\"emscripten\") {\n+        build.run(cargo.arg(\"--no-run\"));\n+        krate_emscripten(build, compiler, target, mode);\n     } else {\n         cargo.args(&build.flags.args);\n         build.run(&mut cargo);\n@@ -371,6 +378,35 @@ fn krate_android(build: &Build,\n     }\n }\n \n+fn krate_emscripten(build: &Build,\n+                    compiler: &Compiler,\n+                    target: &str,\n+                    mode: Mode) {\n+     let mut tests = Vec::new();\n+     let out_dir = build.cargo_out(compiler, mode, target);\n+     find_tests(&out_dir, target, &mut tests);\n+     find_tests(&out_dir.join(\"deps\"), target, &mut tests);\n+\n+     for test in tests {\n+         let test_file_name = test.to_string_lossy().into_owned();\n+         println!(\"running {}\", test_file_name);\n+         let nodejs = build.config.nodejs.as_ref().expect(\"nodejs not configured\");\n+         let status = Command::new(nodejs)\n+             .arg(&test_file_name)\n+             .stderr(::std::process::Stdio::inherit())\n+             .status();\n+         match status {\n+             Ok(status) => {\n+                 if !status.success() {\n+                     panic!(\"some tests failed\");\n+                 }\n+             }\n+             Err(e) => panic!(format!(\"failed to execute command: {}\", e)),\n+         };\n+     }\n+ }\n+\n+\n fn find_tests(dir: &Path,\n               target: &str,\n               dst: &mut Vec<PathBuf>) {\n@@ -381,7 +417,8 @@ fn find_tests(dir: &Path,\n         }\n         let filename = e.file_name().into_string().unwrap();\n         if (target.contains(\"windows\") && filename.ends_with(\".exe\")) ||\n-           (!target.contains(\"windows\") && !filename.contains(\".\")) {\n+           (!target.contains(\"windows\") && !filename.contains(\".\")) ||\n+           (target.contains(\"emscripten\") && filename.contains(\".js\")){\n             dst.push(e.path());\n         }\n     }"}, {"sha": "033cefb8dea3603e478978728da388bbd5cfe680", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -975,7 +975,8 @@ impl Build {\n         // than an entry here.\n \n         let mut base = Vec::new();\n-        if target != self.config.build && !target.contains(\"msvc\") {\n+        if target != self.config.build && !target.contains(\"msvc\") &&\n+            !target.contains(\"emscripten\") {\n             base.push(format!(\"-Clinker={}\", self.cc(target).display()));\n         }\n         return base"}, {"sha": "63fc59e43286e24d987de924f87b57afbf85ee01", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -65,7 +65,7 @@ pub fn llvm(build: &Build, target: &str) {\n        .out_dir(&dst)\n        .profile(if build.config.llvm_optimize {\"Release\"} else {\"Debug\"})\n        .define(\"LLVM_ENABLE_ASSERTIONS\", assertions)\n-       .define(\"LLVM_TARGETS_TO_BUILD\", \"X86;ARM;AArch64;Mips;PowerPC;SystemZ\")\n+       .define(\"LLVM_TARGETS_TO_BUILD\", \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend\")\n        .define(\"LLVM_INCLUDE_EXAMPLES\", \"OFF\")\n        .define(\"LLVM_INCLUDE_TESTS\", \"OFF\")\n        .define(\"LLVM_INCLUDE_DOCS\", \"OFF\")"}, {"sha": "c4e6399c2c36d270fc65fed47663379bf92bacff", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -95,6 +95,13 @@ pub fn check(build: &mut Build) {\n     // We're gonna build some custom C code here and there, host triples\n     // also build some C++ shims for LLVM so we need a C++ compiler.\n     for target in build.config.target.iter() {\n+        // On emscripten we don't actually need the C compiler to just\n+        // build the target artifacts, only for testing. For the sake\n+        // of easier bot configuration, just skip detection.\n+        if target.contains(\"emscripten\") {\n+            continue;\n+        }\n+\n         need_cmd(build.cc(target).as_ref());\n         if let Some(ar) = build.ar(target) {\n             need_cmd(ar.as_ref());\n@@ -104,22 +111,21 @@ pub fn check(build: &mut Build) {\n         need_cmd(build.cxx(host).as_ref());\n     }\n \n+    // The msvc hosts don't use jemalloc, turn it off globally to\n+    // avoid packaging the dummy liballoc_jemalloc on that platform.\n+    for host in build.config.host.iter() {\n+        if host.contains(\"msvc\") {\n+            build.config.use_jemalloc = false;\n+        }\n+    }\n+\n     // Externally configured LLVM requires FileCheck to exist\n     let filecheck = build.llvm_filecheck(&build.config.build);\n     if !filecheck.starts_with(&build.out) && !filecheck.exists() && build.config.codegen_tests {\n         panic!(\"filecheck executable {:?} does not exist\", filecheck);\n     }\n \n     for target in build.config.target.iter() {\n-        // Either can't build or don't want to run jemalloc on these targets\n-        if target.contains(\"rumprun\") ||\n-           target.contains(\"bitrig\") ||\n-           target.contains(\"openbsd\") ||\n-           target.contains(\"msvc\") ||\n-           target.contains(\"emscripten\") {\n-            build.config.use_jemalloc = false;\n-        }\n-\n         // Can't compile for iOS unless we're on OSX\n         if target.contains(\"apple-ios\") &&\n            !build.config.build.contains(\"apple-darwin\") {"}, {"sha": "8a96cd1b4d23939f5e08e516beaa4a984e5c96fc", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -418,7 +418,6 @@ impl<'a> Step<'a> {\n                     self.check_crate_std(compiler),\n                     self.check_crate_test(compiler),\n                     self.check_debuginfo(compiler),\n-                    self.dist(stage),\n                 ];\n \n                 // If we're testing the build triple, then we know we can\n@@ -463,6 +462,9 @@ impl<'a> Step<'a> {\n                         // misc\n                         self.check_linkcheck(stage),\n                         self.check_tidy(stage),\n+\n+                        // can we make the distributables?\n+                        self.dist(stage),\n                     ]);\n                 }\n                 return base"}, {"sha": "29e18781ce2a597884333e84f57f5d1938a27948", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -1000,6 +1000,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn manually_share_arc() {\n         let v = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n         let arc_v = Arc::new(v);"}, {"sha": "028d742cc832ea7c0a466562075f25c787f629e3", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -27,6 +27,24 @@ fn main() {\n     let build_dir = PathBuf::from(env::var_os(\"OUT_DIR\").unwrap());\n     let src_dir = env::current_dir().unwrap();\n \n+    // FIXME: This is a hack to support building targets that don't\n+    // support jemalloc alongside hosts that do. The jemalloc build is\n+    // controlled by a feature of the std crate, and if that feature\n+    // changes between targets, it invalidates the fingerprint of\n+    // std's build script (this is a cargo bug); so we must ensure\n+    // that the feature set used by std is the same across all\n+    // targets, which means we have to build the alloc_jemalloc crate\n+    // for targets like emscripten, even if we don't use it.\n+    if target.contains(\"rumprun\") ||\n+        target.contains(\"bitrig\") ||\n+        target.contains(\"openbsd\") ||\n+        target.contains(\"msvc\") ||\n+        target.contains(\"emscripten\")\n+    {\n+        println!(\"cargo:rustc-cfg=dummy_jemalloc\");\n+        return;\n+    }\n+\n     if let Some(jemalloc) = env::var_os(\"JEMALLOC_OVERRIDE\") {\n         let jemalloc = PathBuf::from(jemalloc);\n         println!(\"cargo:rustc-link-search=native={}\","}, {"sha": "21e45f9c4b20c81598c7629da18deeedc31941b4", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 154, "deletions": 108, "changes": 262, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -23,124 +23,170 @@\n \n extern crate libc;\n \n-use libc::{c_int, c_void, size_t};\n+pub use imp::*;\n \n-// Linkage directives to pull in jemalloc and its dependencies.\n-//\n-// On some platforms we need to be sure to link in `pthread` which jemalloc\n-// depends on, and specifically on android we need to also link to libgcc.\n-// Currently jemalloc is compiled with gcc which will generate calls to\n-// intrinsics that are libgcc specific (e.g. those intrinsics aren't present in\n-// libcompiler-rt), so link that in to get that support.\n-#[link(name = \"jemalloc\", kind = \"static\")]\n-#[cfg_attr(target_os = \"android\", link(name = \"gcc\"))]\n-#[cfg_attr(all(not(windows),\n-               not(target_os = \"android\"),\n-               not(target_env = \"musl\")),\n-           link(name = \"pthread\"))]\n-#[cfg(not(cargobuild))]\n-extern \"C\" {}\n-\n-// Note that the symbols here are prefixed by default on OSX and Windows (we\n-// don't explicitly request it), and on Android and DragonFly we explicitly\n-// request it as unprefixing cause segfaults (mismatches in allocators).\n-extern \"C\" {\n-    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n-                   target_os = \"dragonfly\", target_os = \"windows\"),\n-               link_name = \"je_mallocx\")]\n-    fn mallocx(size: size_t, flags: c_int) -> *mut c_void;\n-    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n-                   target_os = \"dragonfly\", target_os = \"windows\"),\n-               link_name = \"je_rallocx\")]\n-    fn rallocx(ptr: *mut c_void, size: size_t, flags: c_int) -> *mut c_void;\n-    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n-                   target_os = \"dragonfly\", target_os = \"windows\"),\n-               link_name = \"je_xallocx\")]\n-    fn xallocx(ptr: *mut c_void, size: size_t, extra: size_t, flags: c_int) -> size_t;\n-    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n-                   target_os = \"dragonfly\", target_os = \"windows\"),\n-               link_name = \"je_sdallocx\")]\n-    fn sdallocx(ptr: *mut c_void, size: size_t, flags: c_int);\n-    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n-                   target_os = \"dragonfly\", target_os = \"windows\"),\n-               link_name = \"je_nallocx\")]\n-    fn nallocx(size: size_t, flags: c_int) -> size_t;\n-}\n+// See comments in build.rs for why we sometimes build a crate that does nothing\n+#[cfg(not(dummy_jemalloc))]\n+mod imp {\n+    use libc::{c_int, c_void, size_t};\n \n-// The minimum alignment guaranteed by the architecture. This value is used to\n-// add fast paths for low alignment values. In practice, the alignment is a\n-// constant at the call site and the branch will be optimized out.\n-#[cfg(all(any(target_arch = \"arm\",\n-              target_arch = \"mips\",\n-              target_arch = \"powerpc\")))]\n-const MIN_ALIGN: usize = 8;\n-#[cfg(all(any(target_arch = \"x86\",\n-              target_arch = \"x86_64\",\n-              target_arch = \"aarch64\",\n-              target_arch = \"powerpc64\",\n-              target_arch = \"mips64\",\n-              target_arch = \"s390x\")))]\n-const MIN_ALIGN: usize = 16;\n-\n-// MALLOCX_ALIGN(a) macro\n-fn mallocx_align(a: usize) -> c_int {\n-    a.trailing_zeros() as c_int\n-}\n+    // Linkage directives to pull in jemalloc and its dependencies.\n+    //\n+    // On some platforms we need to be sure to link in `pthread` which jemalloc\n+    // depends on, and specifically on android we need to also link to libgcc.\n+    // Currently jemalloc is compiled with gcc which will generate calls to\n+    // intrinsics that are libgcc specific (e.g. those intrinsics aren't present in\n+    // libcompiler-rt), so link that in to get that support.\n+    #[link(name = \"jemalloc\", kind = \"static\")]\n+    #[cfg_attr(target_os = \"android\", link(name = \"gcc\"))]\n+    #[cfg_attr(all(not(windows),\n+                   not(target_os = \"android\"),\n+                   not(target_env = \"musl\")),\n+               link(name = \"pthread\"))]\n+    #[cfg(not(cargobuild))]\n+    extern \"C\" {}\n+\n+    // Note that the symbols here are prefixed by default on OSX and Windows (we\n+    // don't explicitly request it), and on Android and DragonFly we explicitly\n+    // request it as unprefixing cause segfaults (mismatches in allocators).\n+    extern \"C\" {\n+        #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n+                       target_os = \"dragonfly\", target_os = \"windows\"),\n+                   link_name = \"je_mallocx\")]\n+        fn mallocx(size: size_t, flags: c_int) -> *mut c_void;\n+        #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n+                       target_os = \"dragonfly\", target_os = \"windows\"),\n+                   link_name = \"je_rallocx\")]\n+        fn rallocx(ptr: *mut c_void, size: size_t, flags: c_int) -> *mut c_void;\n+        #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n+                       target_os = \"dragonfly\", target_os = \"windows\"),\n+                   link_name = \"je_xallocx\")]\n+        fn xallocx(ptr: *mut c_void, size: size_t, extra: size_t, flags: c_int) -> size_t;\n+        #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n+                       target_os = \"dragonfly\", target_os = \"windows\"),\n+                   link_name = \"je_sdallocx\")]\n+        fn sdallocx(ptr: *mut c_void, size: size_t, flags: c_int);\n+        #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n+                       target_os = \"dragonfly\", target_os = \"windows\"),\n+                   link_name = \"je_nallocx\")]\n+        fn nallocx(size: size_t, flags: c_int) -> size_t;\n+    }\n+\n+    // The minimum alignment guaranteed by the architecture. This value is used to\n+    // add fast paths for low alignment values. In practice, the alignment is a\n+    // constant at the call site and the branch will be optimized out.\n+    #[cfg(all(any(target_arch = \"arm\",\n+                  target_arch = \"mips\",\n+                  target_arch = \"powerpc\")))]\n+    const MIN_ALIGN: usize = 8;\n+    #[cfg(all(any(target_arch = \"x86\",\n+                  target_arch = \"x86_64\",\n+                  target_arch = \"aarch64\",\n+                  target_arch = \"powerpc64\",\n+                  target_arch = \"mips64\",\n+                  target_arch = \"s390x\")))]\n+    const MIN_ALIGN: usize = 16;\n+\n+    // MALLOCX_ALIGN(a) macro\n+    fn mallocx_align(a: usize) -> c_int {\n+        a.trailing_zeros() as c_int\n+    }\n+\n+    fn align_to_flags(align: usize) -> c_int {\n+        if align <= MIN_ALIGN {\n+            0\n+        } else {\n+            mallocx_align(align)\n+        }\n+    }\n+\n+    #[no_mangle]\n+    pub extern \"C\" fn __rust_allocate(size: usize, align: usize) -> *mut u8 {\n+        let flags = align_to_flags(align);\n+        unsafe { mallocx(size as size_t, flags) as *mut u8 }\n+    }\n+\n+    #[no_mangle]\n+    pub extern \"C\" fn __rust_reallocate(ptr: *mut u8,\n+                                        _old_size: usize,\n+                                        size: usize,\n+                                        align: usize)\n+                                        -> *mut u8 {\n+        let flags = align_to_flags(align);\n+        unsafe { rallocx(ptr as *mut c_void, size as size_t, flags) as *mut u8 }\n+    }\n+\n+    #[no_mangle]\n+    pub extern \"C\" fn __rust_reallocate_inplace(ptr: *mut u8,\n+                                                _old_size: usize,\n+                                                size: usize,\n+                                                align: usize)\n+                                                -> usize {\n+        let flags = align_to_flags(align);\n+        unsafe { xallocx(ptr as *mut c_void, size as size_t, 0, flags) as usize }\n+    }\n \n-fn align_to_flags(align: usize) -> c_int {\n-    if align <= MIN_ALIGN {\n+    #[no_mangle]\n+    pub extern \"C\" fn __rust_deallocate(ptr: *mut u8, old_size: usize, align: usize) {\n+        let flags = align_to_flags(align);\n+        unsafe { sdallocx(ptr as *mut c_void, old_size as size_t, flags) }\n+    }\n+\n+    #[no_mangle]\n+    pub extern \"C\" fn __rust_usable_size(size: usize, align: usize) -> usize {\n+        let flags = align_to_flags(align);\n+        unsafe { nallocx(size as size_t, flags) as usize }\n+    }\n+\n+    // These symbols are used by jemalloc on android but the really old android\n+    // we're building on doesn't have them defined, so just make sure the symbols\n+    // are available.\n+    #[no_mangle]\n+    #[cfg(target_os = \"android\")]\n+    pub extern \"C\" fn pthread_atfork(_prefork: *mut u8,\n+                                     _postfork_parent: *mut u8,\n+                                     _postfork_child: *mut u8)\n+                                     -> i32 {\n         0\n-    } else {\n-        mallocx_align(align)\n     }\n }\n \n-#[no_mangle]\n-pub extern \"C\" fn __rust_allocate(size: usize, align: usize) -> *mut u8 {\n-    let flags = align_to_flags(align);\n-    unsafe { mallocx(size as size_t, flags) as *mut u8 }\n-}\n+#[cfg(dummy_jemalloc)]\n+mod imp {\n+    fn bogus() -> ! {\n+        panic!(\"jemalloc is not implemented for this platform\");\n+    }\n \n-#[no_mangle]\n-pub extern \"C\" fn __rust_reallocate(ptr: *mut u8,\n-                                    _old_size: usize,\n-                                    size: usize,\n-                                    align: usize)\n-                                    -> *mut u8 {\n-    let flags = align_to_flags(align);\n-    unsafe { rallocx(ptr as *mut c_void, size as size_t, flags) as *mut u8 }\n-}\n+    #[no_mangle]\n+    pub extern \"C\" fn __rust_allocate(_size: usize, _align: usize) -> *mut u8 {\n+        bogus()\n+    }\n \n-#[no_mangle]\n-pub extern \"C\" fn __rust_reallocate_inplace(ptr: *mut u8,\n-                                            _old_size: usize,\n-                                            size: usize,\n-                                            align: usize)\n-                                            -> usize {\n-    let flags = align_to_flags(align);\n-    unsafe { xallocx(ptr as *mut c_void, size as size_t, 0, flags) as usize }\n-}\n+    #[no_mangle]\n+    pub extern \"C\" fn __rust_reallocate(_ptr: *mut u8,\n+                                        _old_size: usize,\n+                                        _size: usize,\n+                                        _align: usize)\n+                                        -> *mut u8 {\n+        bogus()\n+    }\n \n-#[no_mangle]\n-pub extern \"C\" fn __rust_deallocate(ptr: *mut u8, old_size: usize, align: usize) {\n-    let flags = align_to_flags(align);\n-    unsafe { sdallocx(ptr as *mut c_void, old_size as size_t, flags) }\n-}\n+    #[no_mangle]\n+    pub extern \"C\" fn __rust_reallocate_inplace(_ptr: *mut u8,\n+                                                _old_size: usize,\n+                                                _size: usize,\n+                                                _align: usize)\n+                                                -> usize {\n+        bogus()\n+    }\n \n-#[no_mangle]\n-pub extern \"C\" fn __rust_usable_size(size: usize, align: usize) -> usize {\n-    let flags = align_to_flags(align);\n-    unsafe { nallocx(size as size_t, flags) as usize }\n-}\n+    #[no_mangle]\n+    pub extern \"C\" fn __rust_deallocate(_ptr: *mut u8, _old_size: usize, _align: usize) {\n+        bogus()\n+    }\n \n-// These symbols are used by jemalloc on android but the really old android\n-// we're building on doesn't have them defined, so just make sure the symbols\n-// are available.\n-#[no_mangle]\n-#[cfg(target_os = \"android\")]\n-pub extern \"C\" fn pthread_atfork(_prefork: *mut u8,\n-                                 _postfork_parent: *mut u8,\n-                                 _postfork_child: *mut u8)\n-                                 -> i32 {\n-    0\n+    #[no_mangle]\n+    pub extern \"C\" fn __rust_usable_size(_size: usize, _align: usize) -> usize {\n+        bogus()\n+    }\n }"}, {"sha": "dacafe771edc2c500264e0d028fcbe6ddfbc5fbd", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -29,7 +29,8 @@\n               target_arch = \"mips\",\n               target_arch = \"powerpc\",\n               target_arch = \"powerpc64\",\n-              target_arch = \"asmjs\")))]\n+              target_arch = \"asmjs\",\n+              target_arch = \"wasm32\")))]\n const MIN_ALIGN: usize = 8;\n #[cfg(all(any(target_arch = \"x86_64\",\n               target_arch = \"aarch64\","}, {"sha": "67f3708a62b91dbf50e83d6bf98fcb5842f967b0", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -1294,6 +1294,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_send() {\n         let n = list_from(&[1, 2, 3]);\n         thread::spawn(move || {"}, {"sha": "9580714075ad78260e8c68e50354d8af085319ea", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -1116,6 +1116,7 @@ fn test_box_slice_clone() {\n }\n \n #[test]\n+#[cfg_attr(target_os = \"emscripten\", ignore)]\n fn test_box_slice_clone_panics() {\n     use std::sync::Arc;\n     use std::sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "acbd39bb1630c483c3a25064c8780eb95c118728", "filename": "src/libcompiler_builtins/build.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibcompiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibcompiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Fbuild.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -73,6 +73,12 @@ impl Sources {\n \n fn main() {\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n+\n+    // Emscripten's runtime includes all the builtins\n+    if target.contains(\"emscripten\") {\n+        return;\n+    }\n+\n     let cfg = &mut gcc::Config::new();\n \n     if target.contains(\"msvc\") {"}, {"sha": "0bca616ea9abcc99e5fc604ee4d91f2472b2985d", "filename": "src/libcoretest/num/flt2dec/estimator.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibcoretest%2Fnum%2Fflt2dec%2Festimator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibcoretest%2Fnum%2Fflt2dec%2Festimator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fflt2dec%2Festimator.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// FIXME https://github.com/kripken/emscripten/issues/4563\n+// NB we have to actually not compile this test to avoid\n+// an undefined symbol error\n+#![cfg(not(target_os = \"emscripten\"))]\n+\n use core::num::flt2dec::estimator::*;\n \n #[test]"}, {"sha": "0cf75c941508b7b378ceeb86cb3105e0c593df5b", "filename": "src/libpanic_unwind/Cargo.lock", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibpanic_unwind%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibpanic_unwind%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2FCargo.lock?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -5,6 +5,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"core 0.0.0\",\n  \"libc 0.0.0\",\n+ \"unwind 0.0.0\",\n ]\n \n [[package]]\n@@ -25,3 +26,11 @@ dependencies = [\n  \"core 0.0.0\",\n ]\n \n+[[package]]\n+name = \"unwind\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"core 0.0.0\",\n+ \"libc 0.0.0\",\n+]\n+"}, {"sha": "b3ab1117674ca9c014b508752cc988f0d3ca982a", "filename": "src/libpanic_unwind/emcc.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibpanic_unwind%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibpanic_unwind%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Femcc.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -0,0 +1,78 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Unwinding for emscripten\n+//!\n+//! Whereas Rust's usual unwinding implementation for Unix platforms\n+//! calls into the libunwind APIs directly, on emscripten we instead\n+//! call into the C++ unwinding APIs. This is just an expedience since\n+//! emscripten's runtime always implements those APIs and does not\n+//! implement libunwind.\n+\n+#![allow(private_no_mangle_fns)]\n+\n+use core::any::Any;\n+use core::ptr;\n+use alloc::boxed::Box;\n+use libc::{self, c_int};\n+use unwind as uw;\n+use core::mem;\n+\n+pub fn payload() -> *mut u8 {\n+    ptr::null_mut()\n+}\n+\n+pub unsafe fn cleanup(ptr: *mut u8) -> Box<Any + Send> {\n+    assert!(!ptr.is_null());\n+    let ex = ptr::read(ptr as *mut _);\n+    __cxa_free_exception(ptr as *mut _);\n+    ex\n+}\n+\n+pub unsafe fn panic(data: Box<Any + Send>) -> u32 {\n+    let sz = mem::size_of_val(&data);\n+    let exception = __cxa_allocate_exception(sz);\n+    if exception == ptr::null_mut() {\n+        return uw::_URC_FATAL_PHASE1_ERROR as u32;\n+    }\n+    let exception = exception as *mut Box<Any + Send>;\n+    ptr::write(exception, data);\n+    __cxa_throw(exception as *mut _, ptr::null_mut(), ptr::null_mut());\n+\n+    unreachable!()\n+}\n+\n+#[lang = \"eh_personality\"]\n+#[no_mangle]\n+unsafe extern \"C\" fn rust_eh_personality(version: c_int,\n+                                         actions: uw::_Unwind_Action,\n+                                         exception_class: uw::_Unwind_Exception_Class,\n+                                         exception_object: *mut uw::_Unwind_Exception,\n+                                         context: *mut uw::_Unwind_Context)\n+                                         -> uw::_Unwind_Reason_Code {\n+    __gxx_personality_v0(version, actions,\n+                         exception_class,\n+                         exception_object,\n+                         context)\n+}\n+\n+extern {\n+    fn __cxa_allocate_exception(thrown_size: libc::size_t) -> *mut libc::c_void;\n+    fn __cxa_free_exception(thrown_exception: *mut libc::c_void);\n+    fn __cxa_throw(thrown_exception: *mut libc::c_void,\n+                   tinfo: *mut libc::c_void,\n+                   dest: *mut libc::c_void);\n+    fn __gxx_personality_v0(version: c_int,\n+                            actions: uw::_Unwind_Action,\n+                            exception_class: uw::_Unwind_Exception_Class,\n+                            exception_object: *mut uw::_Unwind_Exception,\n+                            context: *mut uw::_Unwind_Context)\n+                            -> uw::_Unwind_Reason_Code;\n+}"}, {"sha": "ff483fa823e0cc0c86d7b224474b0ad5ae7266d7", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -68,10 +68,16 @@ mod imp;\n mod imp;\n \n // i686-pc-windows-gnu and all others\n-#[cfg(any(unix, all(windows, target_arch = \"x86\", target_env = \"gnu\")))]\n+#[cfg(any(all(unix, not(target_os = \"emscripten\")),\n+          all(windows, target_arch = \"x86\", target_env = \"gnu\")))]\n #[path = \"gcc.rs\"]\n mod imp;\n \n+// emscripten\n+#[cfg(target_os = \"emscripten\")]\n+#[path = \"emcc.rs\"]\n+mod imp;\n+\n mod dwarf;\n mod windows;\n "}, {"sha": "667f7cf2c214a9defc7c7b01c0d0f60addf59e91", "filename": "src/librustc_back/target/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -22,6 +22,7 @@ pub fn target() -> Result<Target, String> {\n         allow_asm: false,\n         obj_is_bitcode: true,\n         max_atomic_width: 32,\n+        post_link_args: vec![\"-s\".to_string(), \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()],\n         .. Default::default()\n     };\n     Ok(Target {"}, {"sha": "6e2f7b1bf5313526b7c6adc34c6f4916742b37f9", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -190,7 +190,8 @@ supported_targets! {\n     (\"i586-pc-windows-msvc\", i586_pc_windows_msvc),\n \n     (\"le32-unknown-nacl\", le32_unknown_nacl),\n-    (\"asmjs-unknown-emscripten\", asmjs_unknown_emscripten)\n+    (\"asmjs-unknown-emscripten\", asmjs_unknown_emscripten),\n+    (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten)\n }\n \n /// Everything `rustc` knows about how to compile for a specific target."}, {"sha": "2923f2eb92e452fb520b5fd30903d86b891798c3", "filename": "src/librustc_back/target/wasm32_unknown_emscripten.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use super::{Target, TargetOptions};\n+\n+pub fn target() -> Result<Target, String> {\n+    let opts = TargetOptions {\n+        linker: \"emcc\".to_string(),\n+        ar: \"emar\".to_string(),\n+\n+        dynamic_linking: false,\n+        executables: true,\n+        // Today emcc emits two files - a .js file to bootstrap and\n+        // possibly interpret the wasm, and a .wasm file\n+        exe_suffix: \".js\".to_string(),\n+        linker_is_gnu: true,\n+        allow_asm: false,\n+        obj_is_bitcode: true,\n+        max_atomic_width: 32,\n+        post_link_args: vec![\"-s\".to_string(), \"BINARYEN=1\".to_string(),\n+                             \"-s\".to_string(), \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()],\n+        .. Default::default()\n+    };\n+    Ok(Target {\n+        llvm_target: \"asmjs-unknown-emscripten\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_os: \"emscripten\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        data_layout: \"e-p:32:32-i64:64-v128:32:128-n32-S128\".to_string(),\n+        arch: \"wasm32\".to_string(),\n+        options: opts,\n+    })\n+}"}, {"sha": "492165e2f2a8e081290d8af025ea390352c5b330", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -1075,7 +1075,7 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n     }\n \n     let thread = cfg.spawn(move || {\n-         io::set_panic(box err);\n+         io::set_panic(Some(box err));\n          f()\n      });\n \n@@ -1121,7 +1121,7 @@ fn exit_on_err() -> ! {\n     // Panic so the process returns a failure code, but don't pollute the\n     // output with some unnecessary panic messages, we've already\n     // printed everything that we needed to.\n-    io::set_panic(box io::sink());\n+    io::set_panic(Some(box io::sink()));\n     panic!();\n }\n "}, {"sha": "5257575a94e8b1322a87ce3e0986adc1fa16afb7", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -66,7 +66,8 @@ fn main() {\n     let host = env::var(\"HOST\").expect(\"HOST was not set\");\n     let is_crossed = target != host;\n \n-    let optional_components = [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\", \"systemz\"];\n+    let optional_components = [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\", \"systemz\",\n+                               \"jsbackend\"];\n \n     // FIXME: surely we don't need all these components, right? Stuff like mcjit\n     //        or interpreter the compiler itself never uses."}, {"sha": "3946b44ead5787c69b5e925359cef91f8aed5943", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -434,6 +434,10 @@ pub fn initialize_available_targets() {\n                  LLVMInitializeSystemZTargetMC,\n                  LLVMInitializeSystemZAsmPrinter,\n                  LLVMInitializeSystemZAsmParser);\n+    init_target!(llvm_component = \"jsbackend\",\n+                 LLVMInitializeJSBackendTargetInfo,\n+                 LLVMInitializeJSBackendTarget,\n+                 LLVMInitializeJSBackendTargetMC);\n }\n \n pub fn last_error() -> Option<String> {"}, {"sha": "0a5b013c79ac21fbdc979244a6a11a98b8a922c7", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -519,6 +519,7 @@ impl FnType {\n             \"powerpc64\" => cabi_powerpc64::compute_abi_info(ccx, self),\n             \"s390x\" => cabi_s390x::compute_abi_info(ccx, self),\n             \"asmjs\" => cabi_asmjs::compute_abi_info(ccx, self),\n+            \"wasm32\" => cabi_asmjs::compute_abi_info(ccx, self),\n             a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }\n "}, {"sha": "02f0916de0ef3a970e0cd95c11ba4f0823912912", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -228,7 +228,7 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     let codemap = Rc::new(CodeMap::new());\n     let emitter = errors::emitter::EmitterWriter::new(box Sink(data.clone()),\n                                                       Some(codemap.clone()));\n-    let old = io::set_panic(box Sink(data.clone()));\n+    let old = io::set_panic(Some(box Sink(data.clone())));\n     let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));\n \n     // Compile the code"}, {"sha": "76a2f93c162e7a3f9579fd69388dbc450aa9a109", "filename": "src/libstd/env.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -892,7 +892,18 @@ mod os {\n     pub const EXE_EXTENSION: &'static str = \"pexe\";\n }\n \n-#[cfg(target_os = \"emscripten\")]\n+#[cfg(all(target_os = \"emscripten\", target_arch = \"asmjs\"))]\n+mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"emscripten\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \".js\";\n+    pub const EXE_EXTENSION: &'static str = \"js\";\n+}\n+\n+#[cfg(all(target_os = \"emscripten\", target_arch = \"wasm32\"))]\n mod os {\n     pub const FAMILY: &'static str = \"unix\";\n     pub const OS: &'static str = \"emscripten\";\n@@ -969,6 +980,11 @@ mod arch {\n     pub const ARCH: &'static str = \"asmjs\";\n }\n \n+#[cfg(target_arch = \"wasm32\")]\n+mod arch {\n+    pub const ARCH: &'static str = \"wasm32\";\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -1017,6 +1033,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_var_big() {\n         let mut s = \"\".to_string();\n         let mut i = 0;\n@@ -1030,6 +1047,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_self_exe_path() {\n         let path = current_exe();\n         assert!(path.is_ok());\n@@ -1040,6 +1058,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_env_set_get_huge() {\n         let n = make_rand_name();\n         let s = repeat(\"x\").take(10000).collect::<String>();"}, {"sha": "2f2969b110db17a7687b81802ce6409013526277", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -1686,7 +1686,7 @@ impl AsInnerMut<fs_imp::DirBuilder> for DirBuilder {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use io::prelude::*;\n "}, {"sha": "21a0cc1fb3b13e0028014fc916973a9f06ef7775", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -1107,6 +1107,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn panic_in_write_doesnt_flush_in_drop() {\n         static WRITES: AtomicUsize = AtomicUsize::new(0);\n "}, {"sha": "3becc0a0c9ee17ca1886823e0ad87c0cb2c02ce0", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -1757,6 +1757,7 @@ mod tests {\n     use super::repeat;\n \n     #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn read_until() {\n         let mut buf = Cursor::new(&b\"12\"[..]);\n         let mut v = Vec::new();\n@@ -1967,6 +1968,7 @@ mod tests {\n     }\n \n     #[bench]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn bench_read_to_end(b: &mut test::Bencher) {\n         b.iter(|| {\n             let mut lr = repeat(1).take(10000000);"}, {"sha": "6421595a009a7124e5635abf580f271b111c5719", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -593,11 +593,11 @@ impl<'a> Write for StderrLock<'a> {\n                      with a more general mechanism\",\n            issue = \"0\")]\n #[doc(hidden)]\n-pub fn set_panic(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n+pub fn set_panic(sink: Option<Box<Write + Send>>) -> Option<Box<Write + Send>> {\n     use panicking::LOCAL_STDERR;\n     use mem;\n     LOCAL_STDERR.with(move |slot| {\n-        mem::replace(&mut *slot.borrow_mut(), Some(sink))\n+        mem::replace(&mut *slot.borrow_mut(), sink)\n     }).and_then(|mut s| {\n         let _ = s.flush();\n         Some(s)\n@@ -617,10 +617,10 @@ pub fn set_panic(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n                      with a more general mechanism\",\n            issue = \"0\")]\n #[doc(hidden)]\n-pub fn set_print(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n+pub fn set_print(sink: Option<Box<Write + Send>>) -> Option<Box<Write + Send>> {\n     use mem;\n     LOCAL_STDOUT.with(move |slot| {\n-        mem::replace(&mut *slot.borrow_mut(), Some(sink))\n+        mem::replace(&mut *slot.borrow_mut(), sink)\n     }).and_then(|mut s| {\n         let _ = s.flush();\n         Some(s)\n@@ -668,6 +668,7 @@ mod tests {\n     use super::*;\n \n     #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn panic_doesnt_poison() {\n         thread::spawn(|| {\n             let _a = stdin();"}, {"sha": "58daa7dbf8dc4d843b9b5e49f2da0f860d0e85f8", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -519,7 +519,7 @@ impl<'a, T: ToSocketAddrs + ?Sized> ToSocketAddrs for &'a T {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use net::*;\n     use net::test::{tsa, sa6, sa4};"}, {"sha": "ba2cd70e0d7776a77f0b553b2006eeb95c38d850", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -669,7 +669,7 @@ impl From<[u8; 16]> for Ipv6Addr {\n }\n \n // Tests for this module\n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use net::*;\n     use net::Ipv6MulticastScope::*;"}, {"sha": "7dd0e30df0368cf5abd3b3dd42facc610096ddf2", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -31,7 +31,8 @@ mod addr;\n mod tcp;\n mod udp;\n mod parser;\n-#[cfg(test)] mod test;\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n+mod test;\n \n /// Possible values which can be passed to the [`shutdown`] method of\n /// [`TcpStream`]."}, {"sha": "0e7c5b06713fb31a58d3977a85f7f4f1aa5e27ac", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -428,7 +428,7 @@ impl fmt::Debug for TcpListener {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use io::ErrorKind;\n     use io::prelude::*;"}, {"sha": "c03ac496adbb27b6f9c4ecef20e412a7f833764e", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -353,7 +353,7 @@ impl fmt::Debug for UdpSocket {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use io::ErrorKind;\n     use net::*;"}, {"sha": "e6a95bc831ffbafdbea5df3a14e5610d2c8cb32f", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -34,7 +34,8 @@ pub use self::arch::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n           target_arch = \"le32\",\n           target_arch = \"powerpc\",\n           target_arch = \"arm\",\n-          target_arch = \"asmjs\"))]\n+          target_arch = \"asmjs\",\n+          target_arch = \"wasm32\"))]\n mod arch {\n     use os::raw::{c_long, c_short, c_uint};\n "}, {"sha": "9d21a76e81b9e41f4e39ebe1af7fba669e002aa2", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -825,7 +825,7 @@ pub fn exit(code: i32) -> ! {\n     ::sys::os::exit(code)\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use io::prelude::*;\n "}, {"sha": "69cd37651d5c28bde1bc9d5427975abea94e0133", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -242,6 +242,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_os_rng_tasks() {\n \n         let mut txs = vec!();"}, {"sha": "f46eab684846384a9b5245657d11f20bd450d867", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -118,6 +118,7 @@ mod tests {\n     use thread;\n \n     #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_barrier() {\n         const N: usize = 10;\n "}, {"sha": "a983ae716a4816d387c75659c4dedafc3a5007e3", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -270,6 +270,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn notify_one() {\n         let m = Arc::new(Mutex::new(()));\n         let m2 = m.clone();\n@@ -286,6 +287,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn notify_all() {\n         const N: usize = 10;\n \n@@ -322,6 +324,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn wait_timeout_ms() {\n         let m = Arc::new(Mutex::new(()));\n         let m2 = m.clone();\n@@ -343,6 +346,7 @@ mod tests {\n \n     #[test]\n     #[should_panic]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn two_mutexes() {\n         let m = Arc::new(Mutex::new(()));\n         let m2 = m.clone();"}, {"sha": "d9c14ef2f771eb83a81cdb8ea9130704449d66d9", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -1268,7 +1268,7 @@ impl error::Error for TryRecvError {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use env;\n     use super::*;\n@@ -1942,7 +1942,7 @@ mod tests {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod sync_tests {\n     use env;\n     use thread;"}, {"sha": "8d80f942ff75cb9f50c29919c75d7beaf6a21466", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -146,7 +146,7 @@ impl<T> Drop for Queue<T> {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use sync::mpsc::channel;\n     use super::{Queue, Data, Empty, Inconsistent};"}, {"sha": "91896e1ab85dca7ccadbfb4f3d980949a4330ec5", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -366,7 +366,7 @@ impl<'rx, T:Send+'rx> fmt::Debug for Handle<'rx, T> {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n #[allow(unused_imports)]\n mod tests {\n     use thread;"}, {"sha": "5858e4b6ddb1f2ab35312aaa4a5406baa84ca29c", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -231,7 +231,7 @@ impl<T> Drop for Queue<T> {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use sync::Arc;\n     use super::Queue;"}, {"sha": "812724c7a167eaf13e61801d079dd421222c9315", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -352,7 +352,7 @@ pub fn guard_poison<'a, T: ?Sized>(guard: &MutexGuard<'a, T>) -> &'a poison::Fla\n     &guard.__lock.poison\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use sync::mpsc::channel;\n     use sync::{Arc, Mutex, Condvar};"}, {"sha": "ad9d0b375442200be9ecf0cf59fb04d64dcfdd44", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -367,7 +367,7 @@ impl OnceState {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use panic;\n     use sync::mpsc::channel;"}, {"sha": "48ecae185f95c37e9e9a54a3e24c121587bb5fcc", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -380,7 +380,7 @@ impl<'a, T: ?Sized> Drop for RwLockWriteGuard<'a, T> {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     #![allow(deprecated)] // rand\n "}, {"sha": "47cec4ef5c2762a7c6e2601e28f88c84bb728974", "filename": "src/libstd/sys/common/io.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsys%2Fcommon%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsys%2Fcommon%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fio.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -50,7 +50,7 @@ pub unsafe fn read_to_end_uninitialized(r: &mut Read, buf: &mut Vec<u8>) -> io::\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n pub mod test {\n     use path::{Path, PathBuf};\n     use env;\n@@ -165,6 +165,7 @@ mod tests {\n     }\n \n     #[bench]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn bench_uninitialized(b: &mut ::test::Bencher) {\n         b.iter(|| {\n             let mut lr = repeat(1).take(10000000);"}, {"sha": "4d0407ccf6c8903bb20eee0059b492319a94d81f", "filename": "src/libstd/sys/common/remutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -156,7 +156,7 @@ impl<'a, T> Drop for ReentrantMutexGuard<'a, T> {\n }\n \n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n     use cell::RefCell;"}, {"sha": "40fe24cf10e281626d97a14e6da9f540bd3a5776", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -786,7 +786,7 @@ impl IntoRawFd for UnixDatagram {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod test {\n     use thread;\n     use io;"}, {"sha": "dafc11d9cc8e9c7b01b01f1aeb0968d1254b9a3c", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -369,7 +369,7 @@ impl Command {\n         }\n \n         // NaCl has no signal support.\n-        if cfg!(not(target_os = \"nacl\")) {\n+        if cfg!(not(any(target_os = \"nacl\", target_os = \"emscripten\"))) {\n             // Reset signal handling so the child process starts in a\n             // standardized state. libstd ignores SIGPIPE, and signal-handling\n             // libraries often set a mask. Child processes inherit ignored\n@@ -589,7 +589,7 @@ impl Process {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use super::*;\n "}, {"sha": "1e879117f73abf2e185c0d7b57a05ad38aaed1f3", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -29,6 +29,20 @@ pub struct Thread {\n unsafe impl Send for Thread {}\n unsafe impl Sync for Thread {}\n \n+// The pthread_attr_setstacksize symbol doesn't exist in the emscripten libc,\n+// so we have to not link to it to satisfy emcc's ERROR_ON_UNDEFINED_SYMBOLS.\n+#[cfg(not(target_os = \"emscripten\"))]\n+unsafe fn pthread_attr_setstacksize(attr: *mut libc::pthread_attr_t,\n+                                    stack_size: libc::size_t) -> libc::c_int {\n+    libc::pthread_attr_setstacksize(attr, stack_size)\n+}\n+\n+#[cfg(target_os = \"emscripten\")]\n+unsafe fn pthread_attr_setstacksize(_attr: *mut libc::pthread_attr_t,\n+                                    _stack_size: libc::size_t) -> libc::c_int {\n+    panic!()\n+}\n+\n impl Thread {\n     pub unsafe fn new<'a>(stack: usize, p: Box<FnBox() + 'a>)\n                           -> io::Result<Thread> {\n@@ -38,8 +52,8 @@ impl Thread {\n         assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n \n         let stack_size = cmp::max(stack, min_stack_size(&attr));\n-        match libc::pthread_attr_setstacksize(&mut attr,\n-                                              stack_size as libc::size_t) {\n+        match pthread_attr_setstacksize(&mut attr,\n+                                        stack_size as libc::size_t) {\n             0 => {}\n             n => {\n                 assert_eq!(n, libc::EINVAL);"}, {"sha": "a333a7d967d240fa11f757543fe50f068c529cad", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -524,7 +524,7 @@ pub mod os {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use sync::mpsc::{channel, Sender};\n     use cell::{Cell, UnsafeCell};"}, {"sha": "901ff98fcb3c5fa51e23b52a83e42042cbb9d0ca", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -741,7 +741,7 @@ fn _assert_sync_and_send() {\n // Tests\n ////////////////////////////////////////////////////////////////////////////////\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use any::Any;\n     use sync::mpsc::{channel, Sender};"}, {"sha": "5949afe0ff167c070710d903c126450d693da163", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 51, "deletions": 18, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -1182,26 +1182,59 @@ pub fn run_test(opts: &TestOpts,\n             }\n         }\n \n-        thread::spawn(move || {\n-            let data = Arc::new(Mutex::new(Vec::new()));\n-            let data2 = data.clone();\n-            let cfg = thread::Builder::new().name(match desc.name {\n-                DynTestName(ref name) => name.clone(),\n-                StaticTestName(name) => name.to_owned(),\n+        // If the platform is single-threaded we're just going to run\n+        // the test synchronously, regardless of the concurrency\n+        // level.\n+        let supports_threads = !cfg!(target_os = \"emscripten\");\n+\n+        // Buffer for capturing standard I/O\n+        let data = Arc::new(Mutex::new(Vec::new()));\n+        let data2 = data.clone();\n+\n+        if supports_threads {\n+            thread::spawn(move || {\n+                let cfg = thread::Builder::new().name(match desc.name {\n+                    DynTestName(ref name) => name.clone(),\n+                    StaticTestName(name) => name.to_owned(),\n+                });\n+\n+                let result_guard = cfg.spawn(move || {\n+                    if !nocapture {\n+                        io::set_print(Some(box Sink(data2.clone())));\n+                        io::set_panic(Some(box Sink(data2)));\n+                    }\n+                    testfn()\n+                })\n+                    .unwrap();\n+                let test_result = calc_result(&desc, result_guard.join());\n+                let stdout = data.lock().unwrap().to_vec();\n+                monitor_ch.send((desc.clone(), test_result, stdout)).unwrap();\n             });\n+        } else {\n+            let oldio = if !nocapture {\n+                Some((\n+                    io::set_print(Some(box Sink(data2.clone()))),\n+                    io::set_panic(Some(box Sink(data2)))\n+                ))\n+            } else {\n+                None\n+            };\n \n-            let result_guard = cfg.spawn(move || {\n-                                      if !nocapture {\n-                                          io::set_print(box Sink(data2.clone()));\n-                                          io::set_panic(box Sink(data2));\n-                                      }\n-                                      testfn()\n-                                  })\n-                                  .unwrap();\n-            let test_result = calc_result(&desc, result_guard.join());\n+            use std::panic::{catch_unwind, AssertUnwindSafe};\n+\n+            let result = catch_unwind(AssertUnwindSafe(|| {\n+                testfn()\n+            }));\n+\n+            if let Some((printio, panicio)) = oldio {\n+                io::set_print(printio);\n+                io::set_panic(panicio);\n+            };\n+\n+            let test_result = calc_result(&desc, result);\n             let stdout = data.lock().unwrap().to_vec();\n             monitor_ch.send((desc.clone(), test_result, stdout)).unwrap();\n-        });\n+        }\n     }\n \n     match testfn {\n@@ -1291,15 +1324,15 @@ impl MetricMap {\n ///\n /// This function is a no-op, and does not even read from `dummy`.\n #[cfg(not(any(all(target_os = \"nacl\", target_arch = \"le32\"),\n-              target_arch = \"asmjs\")))]\n+              target_arch = \"asmjs\", target_arch = \"wasm32\")))]\n pub fn black_box<T>(dummy: T) -> T {\n     // we need to \"use\" the argument in some way LLVM can't\n     // introspect.\n     unsafe { asm!(\"\" : : \"r\"(&dummy)) }\n     dummy\n }\n #[cfg(any(all(target_os = \"nacl\", target_arch = \"le32\"),\n-          target_arch = \"asmjs\"))]\n+          target_arch = \"asmjs\", target_arch = \"wasm32\"))]\n #[inline(never)]\n pub fn black_box<T>(dummy: T) -> T {\n     dummy"}, {"sha": "c2edf754e49c18ef38c97ac9fbb1d8b25f8658c6", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -65,7 +65,7 @@ pub const unwinder_private_data_size: usize = 2;\n #[cfg(target_arch = \"s390x\")]\n pub const unwinder_private_data_size: usize = 2;\n \n-#[cfg(target_arch = \"asmjs\")]\n+#[cfg(target_os = \"emscripten\")]\n pub const unwinder_private_data_size: usize = 20;\n \n #[repr(C)]"}, {"sha": "3e03f7374169cd41547d75e62ac2ab8a103a913c", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -1 +1 @@\n-Subproject commit 7801978ec1f3637fcda1b564048ebc732bf586af\n+Subproject commit 3e03f7374169cd41547d75e62ac2ab8a103a913c"}, {"sha": "979f5f07abea129a351a1e5e27a26547d0e56fe2", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2016-09-17\n+2016-09-25"}, {"sha": "4c576de22021ccedf276bec0859bbe85e04f55c1", "filename": "src/test/compile-fail/allocator-dylib-is-system.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Fcompile-fail%2Fallocator-dylib-is-system.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Fcompile-fail%2Fallocator-dylib-is-system.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator-dylib-is-system.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -18,6 +18,8 @@\n // system allocator. Do this by linking in jemalloc and making sure that we get\n // an error.\n \n+// ignore-emscripten FIXME: What \"other allocator\" should we use for emcc?\n+\n #![feature(alloc_jemalloc)]\n \n extern crate allocator_dylib;"}, {"sha": "02c271ab24da3185a550c14d08775e1aadcba06a", "filename": "src/test/compile-fail/allocator-rust-dylib-is-jemalloc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Fcompile-fail%2Fallocator-rust-dylib-is-jemalloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Fcompile-fail%2Fallocator-rust-dylib-is-jemalloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator-rust-dylib-is-jemalloc.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -16,6 +16,8 @@\n // Ensure that rust dynamic libraries use jemalloc as their allocator, verifying\n // by linking in the system allocator here and ensuring that we get a complaint.\n \n+// ignore-emscripten FIXME: What \"other allocator\" is correct for emscripten?\n+\n #![feature(alloc_system)]\n \n extern crate allocator_dylib2;"}, {"sha": "36e2a4b86aa3965fa7d6ade6835e392162e58a55", "filename": "src/test/run-fail/panic-task-name-none.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-fail%2Fpanic-task-name-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-fail%2Fpanic-task-name-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-task-name-none.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // error-pattern:thread '<unnamed>' panicked at 'test'\n+// ignore-emscripten Needs threads\n \n use std::thread;\n "}, {"sha": "4da40c3158b84c22ef955e8e243d3224b1e1a5cd", "filename": "src/test/run-fail/panic-task-name-owned.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // error-pattern:thread 'owned name' panicked at 'test'\n+// ignore-emscripten Needs threads.\n \n use std::thread::Builder;\n "}, {"sha": "108430848b9b29673efe9b569fae95650be2bc3b", "filename": "src/test/run-fail/task-spawn-barefn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-fail%2Ftask-spawn-barefn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-fail%2Ftask-spawn-barefn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-spawn-barefn.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // error-pattern:Ensure that the child thread runs by panicking\n+// ignore-emscripten Needs threads.\n \n use std::thread;\n "}, {"sha": "21ced01d9d69efe619f8e23d79a72411bdf72b41", "filename": "src/test/run-fail/test-panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-fail%2Ftest-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-fail%2Ftest-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftest-panic.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -12,6 +12,7 @@\n // error-pattern:thread 'test_foo' panicked at\n // compile-flags: --test\n // ignore-pretty: does not work well with `--test`\n+// ignore-emscripten\n \n #[test]\n fn test_foo() {"}, {"sha": "74b5f17bcf9bad053905f6d917fb3498f63d7b87", "filename": "src/test/run-fail/test-should-fail-bad-message.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-fail%2Ftest-should-fail-bad-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-fail%2Ftest-should-fail-bad-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftest-should-fail-bad-message.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -12,6 +12,7 @@\n // error-pattern:thread 'test_foo' panicked at\n // compile-flags: --test\n // ignore-pretty: does not work well with `--test`\n+// ignore-emscripten\n \n #[test]\n #[should_panic(expected = \"foobar\")]"}, {"sha": "b5c222764d243ea33060ff3826da71884f908c42", "filename": "src/test/run-fail/test-tasks-invalid-value.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-fail%2Ftest-tasks-invalid-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-fail%2Ftest-tasks-invalid-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftest-tasks-invalid-value.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -15,6 +15,7 @@\n // compile-flags: --test\n // exec-env:RUST_TEST_THREADS=foo\n // ignore-pretty: does not work well with `--test`\n+// ignore-emscripten\n \n #[test]\n fn do_nothing() {}"}, {"sha": "ca2dbdf2b3de30a4a3672ecd389dc075889ca29c", "filename": "src/test/run-pass/allocator-override.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fallocator-override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fallocator-override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator-override.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -10,6 +10,7 @@\n \n // no-prefer-dynamic\n // aux-build:allocator-dummy.rs\n+// ignore-emscripten\n \n #![feature(test)]\n "}, {"sha": "801a3c40ab47ddb9a2d0dd73248e521da5f0ab07", "filename": "src/test/run-pass/extern-pass-empty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fextern-pass-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fextern-pass-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-empty.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -12,6 +12,7 @@\n \n // pretty-expanded FIXME #23616\n // ignore-msvc\n+// ignore-emscripten\n \n struct TwoU8s {\n     one: u8,"}, {"sha": "1b9b4ab32ca40cb1cb1f767ef4cf565721470b7e", "filename": "src/test/run-pass/format-no-std.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-no-std.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten missing rust_begin_unwind\n+\n #![feature(lang_items, start, collections)]\n #![no_std]\n "}, {"sha": "d1e05e5a0184c3d1c8cac004726b958bf3b0c5c2", "filename": "src/test/run-pass/packed-struct-layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fpacked-struct-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fpacked-struct-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-layout.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+// ignore-emscripten Not sure what's happening here.\n \n \n use std::mem;"}, {"sha": "ee4eb86ed0de3d04a6c30d4552810aac53646e26", "filename": "src/test/run-pass/packed-tuple-struct-layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-layout.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+// ignore-emscripten\n \n \n use std::mem;"}, {"sha": "1c273fcba02daf77b148b7c9f44dd9779b4d416e", "filename": "src/test/run-pass/panic-runtime/abort-link-to-unwinding-crates.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort-link-to-unwinding-crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort-link-to-unwinding-crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort-link-to-unwinding-crates.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -11,6 +11,7 @@\n // compile-flags:-C panic=abort\n // aux-build:exit-success-if-unwind.rs\n // no-prefer-dynamic\n+// ignore-emscripten Function not implemented\n \n extern crate exit_success_if_unwind;\n "}, {"sha": "be38f6ea3643a8857c7c553af3e2df34aa8ac59d", "filename": "src/test/run-pass/panic-runtime/abort.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -10,6 +10,7 @@\n \n // compile-flags:-C panic=abort\n // no-prefer-dynamic\n+// ignore-emscripten Function not implemented.\n \n use std::process::Command;\n use std::env;"}, {"sha": "e4cd4e809a4c6bf7684b9346ea325dbca9335c39", "filename": "src/test/run-pass/panic-runtime/lto-abort.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Flto-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Flto-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Flto-abort.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -10,6 +10,7 @@\n \n // compile-flags:-C lto -C panic=abort\n // no-prefer-dynamic\n+// ignore-emscripten Function not implemented.\n \n use std::process::Command;\n use std::env;"}, {"sha": "768b88fd09e0b3fad9c8aaa33c2b3db88e2fca0e", "filename": "src/test/run-pass/panic-runtime/lto-unwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Flto-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Flto-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Flto-unwind.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -10,6 +10,7 @@\n \n // compile-flags:-C lto -C panic=unwind\n // no-prefer-dynamic\n+// ignore-emscripten Function not implemented.\n \n use std::process::Command;\n use std::env;"}, {"sha": "ff389bec899efba23026791c97f3aaad210e03f6", "filename": "src/test/run-pass/process-status-inherits-stdin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fprocess-status-inherits-stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fprocess-status-inherits-stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-status-inherits-stdin.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+// ignore-emscripten Function not implemented.\n \n use std::env;\n use std::io;"}, {"sha": "d32fa01c7b9453fb2e3c1d52705b6d070eb108c5", "filename": "src/test/run-pass/simd-intrinsic-generic-cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-cast.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+// ignore-emscripten linking with emcc failed\n \n #![feature(repr_simd, platform_intrinsics, concat_idents, test)]\n #![allow(non_camel_case_types)]"}, {"sha": "13d5cc989e94dac4a8dfd332bc55e2abcea5d87b", "filename": "src/test/run-pass/task-stderr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-stderr.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -30,7 +30,7 @@ fn main() {\n     let data = Arc::new(Mutex::new(Vec::new()));\n     let sink = Sink(data.clone());\n     let res = thread::Builder::new().spawn(move|| -> () {\n-        io::set_panic(Box::new(sink));\n+        io::set_panic(Some(Box::new(sink)));\n         panic!(\"Hello, world!\")\n     }).unwrap().join();\n     assert!(res.is_err());"}, {"sha": "81cb927f26b0210d33ff07695a281f424ba70142", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -183,4 +183,5 @@ pub struct Config {\n     pub cflags: String,\n     pub llvm_components: String,\n     pub llvm_cxxflags: String,\n+    pub nodejs: Option<String>,\n }"}, {"sha": "ff91ab7c70b3ee97a05f96c7e93e3033c3554b51", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -109,6 +109,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           reqopt(\"\", \"cflags\", \"flags for the C compiler\", \"FLAGS\"),\n           reqopt(\"\", \"llvm-components\", \"list of LLVM components built in\", \"LIST\"),\n           reqopt(\"\", \"llvm-cxxflags\", \"C++ flags for LLVM\", \"FLAGS\"),\n+          optopt(\"\", \"nodejs\", \"the name of nodejs\", \"PATH\"),\n           optflag(\"h\", \"help\", \"show this message\"));\n \n     let (argv0, args_) = args.split_first().unwrap();\n@@ -190,6 +191,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         cflags: matches.opt_str(\"cflags\").unwrap(),\n         llvm_components: matches.opt_str(\"llvm-components\").unwrap(),\n         llvm_cxxflags: matches.opt_str(\"llvm-cxxflags\").unwrap(),\n+        nodejs: matches.opt_str(\"nodejs\"),\n     }\n }\n \n@@ -431,10 +433,17 @@ pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn\n         }\n     };\n \n+    // Debugging emscripten code doesn't make sense today\n+    let mut ignore = early_props.ignore;\n+    if (config.mode == DebugInfoGdb || config.mode == DebugInfoLldb) &&\n+        config.target.contains(\"emscripten\") {\n+        ignore = true;\n+    }\n+\n     test::TestDescAndFn {\n         desc: test::TestDesc {\n             name: make_test_name(config, testpaths),\n-            ignore: early_props.ignore,\n+            ignore: ignore,\n             should_panic: should_panic,\n         },\n         testfn: make_test_closure(config, testpaths),"}, {"sha": "35b93392baf2c4c96110e961a7a871f714394a01", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -1168,7 +1168,6 @@ actual:\\n\\\n             \"arm-linux-androideabi\" | \"armv7-linux-androideabi\" | \"aarch64-linux-android\" => {\n                 self._arm_exec_compiled_test(env)\n             }\n-\n             _=> {\n                 let aux_dir = self.aux_output_dir_name();\n                 self.compose_and_run(self.make_run_args(),\n@@ -1421,7 +1420,7 @@ actual:\\n\\\n     fn make_exe_name(&self) -> PathBuf {\n         let mut f = self.output_base_name();\n         // FIXME: This is using the host architecture exe suffix, not target!\n-        if self.config.target == \"asmjs-unknown-emscripten\" {\n+        if self.config.target.contains(\"emscripten\") {\n             let mut fname = f.file_name().unwrap().to_os_string();\n             fname.push(\".js\");\n             f.set_file_name(&fname);\n@@ -1439,8 +1438,9 @@ actual:\\n\\\n         let mut args = self.split_maybe_args(&self.config.runtool);\n \n         // If this is emscripten, then run tests under nodejs\n-        if self.config.target == \"asmjs-unknown-emscripten\" {\n-            args.push(\"nodejs\".to_owned());\n+        if self.config.target.contains(\"emscripten\") {\n+            let nodejs = self.config.nodejs.clone().unwrap_or(\"nodejs\".to_string());\n+            args.push(nodejs);\n         }\n \n         let exe_file = self.make_exe_name();"}, {"sha": "cad71c59f0a4aef93ccd10d3d75b1022b0bafdc9", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00355119ba0473eae420049f96f5be91be1bab/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=8b00355119ba0473eae420049f96f5be91be1bab", "patch": "@@ -43,7 +43,8 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[(\"aarch64\", \"aarch\n                                                               (\"sparc\", \"sparc\"),\n                                                               (\"x86_64\", \"x86_64\"),\n                                                               (\"xcore\", \"xcore\"),\n-                                                              (\"asmjs\", \"asmjs\")];\n+                                                              (\"asmjs\", \"asmjs\"),\n+                                                              (\"wasm32\", \"wasm32\")];\n \n pub fn get_os(triple: &str) -> &'static str {\n     for &(triple_os, os) in OS_TABLE {"}]}