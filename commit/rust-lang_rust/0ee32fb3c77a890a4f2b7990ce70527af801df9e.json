{"sha": "0ee32fb3c77a890a4f2b7990ce70527af801df9e", "node_id": "C_kwDOAAsO6NoAKDBlZTMyZmIzYzc3YTg5MGE0ZjJiNzk5MGNlNzA1MjdhZjgwMWRmOWU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-25T17:11:46Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-25T17:11:46Z"}, "message": "Move unstatisfaction check earlier.", "tree": {"sha": "e1ef273f9f25facef422d93ae62f5a623861ab4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1ef273f9f25facef422d93ae62f5a623861ab4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ee32fb3c77a890a4f2b7990ce70527af801df9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee32fb3c77a890a4f2b7990ce70527af801df9e", "html_url": "https://github.com/rust-lang/rust/commit/0ee32fb3c77a890a4f2b7990ce70527af801df9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ee32fb3c77a890a4f2b7990ce70527af801df9e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f857791ad731343631b6dfc415cb46222cc95b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f857791ad731343631b6dfc415cb46222cc95b0", "html_url": "https://github.com/rust-lang/rust/commit/0f857791ad731343631b6dfc415cb46222cc95b0"}], "stats": {"total": 94, "additions": 44, "deletions": 50}, "files": [{"sha": "a3759a66e241b7d0113319e18557574b706588db", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 44, "deletions": 50, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/0ee32fb3c77a890a4f2b7990ce70527af801df9e/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee32fb3c77a890a4f2b7990ce70527af801df9e/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=0ee32fb3c77a890a4f2b7990ce70527af801df9e", "patch": "@@ -390,6 +390,50 @@ fn mir_drops_elaborated_and_const_checked(tcx: TyCtxt<'_>, def: LocalDefId) -> &\n         body.tainted_by_errors = Some(error_reported);\n     }\n \n+    // Check if it's even possible to satisfy the 'where' clauses\n+    // for this item.\n+    //\n+    // This branch will never be taken for any normal function.\n+    // However, it's possible to `#!feature(trivial_bounds)]` to write\n+    // a function with impossible to satisfy clauses, e.g.:\n+    // `fn foo() where String: Copy {}`\n+    //\n+    // We don't usually need to worry about this kind of case,\n+    // since we would get a compilation error if the user tried\n+    // to call it. However, since we optimize even without any\n+    // calls to the function, we need to make sure that it even\n+    // makes sense to try to evaluate the body.\n+    //\n+    // If there are unsatisfiable where clauses, then all bets are\n+    // off, and we just give up.\n+    //\n+    // We manually filter the predicates, skipping anything that's not\n+    // \"global\". We are in a potentially generic context\n+    // (e.g. we are evaluating a function without substituting generic\n+    // parameters, so this filtering serves two purposes:\n+    //\n+    // 1. We skip evaluating any predicates that we would\n+    // never be able prove are unsatisfiable (e.g. `<T as Foo>`\n+    // 2. We avoid trying to normalize predicates involving generic\n+    // parameters (e.g. `<T as Foo>::MyItem`). This can confuse\n+    // the normalization code (leading to cycle errors), since\n+    // it's usually never invoked in this way.\n+    let predicates = tcx\n+        .predicates_of(body.source.def_id())\n+        .predicates\n+        .iter()\n+        .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n+    if traits::impossible_predicates(tcx, traits::elaborate(tcx, predicates).collect()) {\n+        trace!(\"found unsatisfiable predicates for {:?}\", body.source);\n+        // Clear the body to only contain a single `unreachable` statement.\n+        let bbs = body.basic_blocks.as_mut();\n+        bbs.raw.truncate(1);\n+        bbs[START_BLOCK].statements.clear();\n+        bbs[START_BLOCK].terminator_mut().kind = TerminatorKind::Unreachable;\n+        body.var_debug_info.clear();\n+        body.local_decls.raw.truncate(body.arg_count + 1);\n+    }\n+\n     run_analysis_to_runtime_passes(tcx, &mut body);\n \n     tcx.alloc_steal_mir(body)\n@@ -482,56 +526,6 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         WithMinOptLevel(1, x)\n     }\n \n-    // Check if it's even possible to satisfy the 'where' clauses\n-    // for this item.\n-    // This branch will never be taken for any normal function.\n-    // However, it's possible to `#!feature(trivial_bounds)]` to write\n-    // a function with impossible to satisfy clauses, e.g.:\n-    // `fn foo() where String: Copy {}`\n-    //\n-    // We don't usually need to worry about this kind of case,\n-    // since we would get a compilation error if the user tried\n-    // to call it. However, since we optimize even without any\n-    // calls to the function, we need to make sure that it even\n-    // makes sense to try to evaluate the body.\n-    //\n-    // If there are unsatisfiable where clauses, then all bets are\n-    // off, and we just give up.\n-    //\n-    // We manually filter the predicates, skipping anything that's not\n-    // \"global\". We are in a potentially generic context\n-    // (e.g. we are evaluating a function without substituting generic\n-    // parameters, so this filtering serves two purposes:\n-    //\n-    // 1. We skip evaluating any predicates that we would\n-    // never be able prove are unsatisfiable (e.g. `<T as Foo>`\n-    // 2. We avoid trying to normalize predicates involving generic\n-    // parameters (e.g. `<T as Foo>::MyItem`). This can confuse\n-    // the normalization code (leading to cycle errors), since\n-    // it's usually never invoked in this way.\n-    let predicates = tcx\n-        .predicates_of(body.source.def_id())\n-        .predicates\n-        .iter()\n-        .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n-    if traits::impossible_predicates(tcx, traits::elaborate(tcx, predicates).collect()) {\n-        trace!(\"optimizations skipped for {:?}: found unsatisfiable predicates\", body.source);\n-        // Clear the body to only contain a single `unreachable` statement.\n-        let bbs = body.basic_blocks.as_mut();\n-        bbs.raw.truncate(1);\n-        bbs[START_BLOCK].statements.clear();\n-        bbs[START_BLOCK].terminator_mut().kind = TerminatorKind::Unreachable;\n-        body.var_debug_info.clear();\n-        body.local_decls.raw.truncate(body.arg_count + 1);\n-        pm::run_passes(\n-            tcx,\n-            body,\n-            &[&reveal_all::RevealAll, &dump_mir::Marker(\"PreCodegen\")],\n-            Some(MirPhase::Runtime(RuntimePhase::Optimized)),\n-        );\n-        return;\n-    }\n-\n     // The main optimizations that we do on MIR.\n     pm::run_passes(\n         tcx,"}]}