{"sha": "d855bde45728cf8716a0adcdecd98815e4faabd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NTViZGU0NTcyOGNmODcxNmEwYWRjZGVjZDk4ODE1ZTRmYWFiZDU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T10:11:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-05T10:11:07Z"}, "message": "Rollup merge of #63930 - estebank:rustdoc-ice, r=GuillaumeGomez\n\nAccount for doc comments coming from proc macros without spans\n\nFix https://github.com/rust-lang/rust/issues/63821.", "tree": {"sha": "3e75ee0930f3de231827bf132b79ef377848cbe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e75ee0930f3de231827bf132b79ef377848cbe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d855bde45728cf8716a0adcdecd98815e4faabd5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcN87CRBK7hj4Ov3rIwAAdHIIAIo1lSsLPK954NBOHpeLhzdM\nOyvrjI62DgENFo+4CQH7BLVPFTFAnPY8bAGCRBfI3CetbLJL1oUCHXn+NkEumfaK\n2zj3UXGTJGu8r019HDhOkcRSM6JPT+U5jtMJm5MxJ3iSDgaWEyJTqGPAnFmYP/sm\nJUw8MeRUg3RNwVarmKQhx7k45Pr2HJftL1yqycmo764JBpYZdvQmvh8Lkc64zgt3\njGC1J/pOUIHoc7ICtKBt/sxM2BIQulyi5VNP+gevn9oi0o4iKW7WYoVfAW/Y4Yft\nirhe4Tc6+TO5csrpdec0Gd6R0ATpufSRpMzBqlOmrpBNxcNlqj6Mt46aiSVQ4O0=\n=/qRM\n-----END PGP SIGNATURE-----\n", "payload": "tree 3e75ee0930f3de231827bf132b79ef377848cbe8\nparent 6da74a26059c3d6e60d0b9af28499a74daacf26a\nparent 7ed542da7815070b4fc7aa87d53e5b97aa2e8828\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567678267 +0200\ncommitter GitHub <noreply@github.com> 1567678267 +0200\n\nRollup merge of #63930 - estebank:rustdoc-ice, r=GuillaumeGomez\n\nAccount for doc comments coming from proc macros without spans\n\nFix https://github.com/rust-lang/rust/issues/63821.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d855bde45728cf8716a0adcdecd98815e4faabd5", "html_url": "https://github.com/rust-lang/rust/commit/d855bde45728cf8716a0adcdecd98815e4faabd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d855bde45728cf8716a0adcdecd98815e4faabd5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6da74a26059c3d6e60d0b9af28499a74daacf26a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6da74a26059c3d6e60d0b9af28499a74daacf26a", "html_url": "https://github.com/rust-lang/rust/commit/6da74a26059c3d6e60d0b9af28499a74daacf26a"}, {"sha": "7ed542da7815070b4fc7aa87d53e5b97aa2e8828", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ed542da7815070b4fc7aa87d53e5b97aa2e8828", "html_url": "https://github.com/rust-lang/rust/commit/7ed542da7815070b4fc7aa87d53e5b97aa2e8828"}], "stats": {"total": 59, "additions": 46, "deletions": 13}, "files": [{"sha": "32044e48b6f99207f94a071ea0d396724922a7a0", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d855bde45728cf8716a0adcdecd98815e4faabd5/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d855bde45728cf8716a0adcdecd98815e4faabd5/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=d855bde45728cf8716a0adcdecd98815e4faabd5", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n                 // We couldn't calculate the span of the markdown block that had the error, so our\n                 // diagnostics are going to be a bit lacking.\n                 let mut diag = self.cx.sess().struct_span_warn(\n-                    super::span_of_attrs(&item.attrs),\n+                    super::span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n                     \"doc comment contains an invalid Rust code block\",\n                 );\n "}, {"sha": "2951b2ccb2af91c062b96099e64ff15e99dc9a2b", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d855bde45728cf8716a0adcdecd98815e4faabd5/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d855bde45728cf8716a0adcdecd98815e4faabd5/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=d855bde45728cf8716a0adcdecd98815e4faabd5", "patch": "@@ -465,7 +465,7 @@ fn resolution_failure(\n         }\n     };\n     let attrs = &item.attrs;\n-    let sp = span_of_attrs(attrs);\n+    let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n \n     let mut diag = cx.tcx.struct_span_lint_hir(\n         lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n@@ -517,7 +517,7 @@ fn ambiguity_error(\n         }\n     };\n     let attrs = &item.attrs;\n-    let sp = span_of_attrs(attrs);\n+    let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n \n     let mut msg = format!(\"`{}` is \", path_str);\n "}, {"sha": "49a34c7e46281a1bd12048917a0b4a902fd5098b", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d855bde45728cf8716a0adcdecd98815e4faabd5/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d855bde45728cf8716a0adcdecd98815e4faabd5/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=d855bde45728cf8716a0adcdecd98815e4faabd5", "patch": "@@ -339,7 +339,7 @@ pub fn look_for_tests<'tcx>(\n     find_testable_code(&dox, &mut tests, ErrorCodes::No);\n \n     if check_missing_code == true && tests.found_tests == 0 {\n-        let sp = span_of_attrs(&item.attrs).substitute_dummy(item.source.span());\n+        let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n         let mut diag = cx.tcx.struct_span_lint_hir(\n             lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n             hir_id,\n@@ -352,20 +352,23 @@ pub fn look_for_tests<'tcx>(\n         let mut diag = cx.tcx.struct_span_lint_hir(\n             lint::builtin::PRIVATE_DOC_TESTS,\n             hir_id,\n-            span_of_attrs(&item.attrs),\n+            span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n             \"Documentation test in private item\");\n         diag.emit();\n     }\n }\n \n /// Returns a span encompassing all the given attributes.\n-crate fn span_of_attrs(attrs: &clean::Attributes) -> Span {\n+crate fn span_of_attrs(attrs: &clean::Attributes) -> Option<Span> {\n     if attrs.doc_strings.is_empty() {\n-        return DUMMY_SP;\n+        return None;\n     }\n     let start = attrs.doc_strings[0].span();\n+    if start == DUMMY_SP {\n+        return None;\n+    }\n     let end = attrs.doc_strings.last().expect(\"No doc strings provided\").span();\n-    start.to(end)\n+    Some(start.to(end))\n }\n \n /// Attempts to match a range of bytes from parsed markdown to a `Span` in the source code.\n@@ -391,7 +394,7 @@ crate fn source_span_for_markdown_range(\n     let snippet = cx\n         .sess()\n         .source_map()\n-        .span_to_snippet(span_of_attrs(attrs))\n+        .span_to_snippet(span_of_attrs(attrs)?)\n         .ok()?;\n \n     let starting_line = markdown[..md_range.start].matches('\\n').count();\n@@ -441,10 +444,8 @@ crate fn source_span_for_markdown_range(\n         }\n     }\n \n-    let sp = span_of_attrs(attrs).from_inner(InnerSpan::new(\n+    Some(span_of_attrs(attrs)?.from_inner(InnerSpan::new(\n         md_range.start + start_bytes,\n         md_range.end + start_bytes + end_bytes,\n-    ));\n-\n-    Some(sp)\n+    )))\n }"}, {"sha": "5c4a01ee3a74a5e18c59c10b6a318e73da165447", "filename": "src/test/rustdoc/auxiliary/through-proc-macro-aux.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d855bde45728cf8716a0adcdecd98815e4faabd5/src%2Ftest%2Frustdoc%2Fauxiliary%2Fthrough-proc-macro-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d855bde45728cf8716a0adcdecd98815e4faabd5/src%2Ftest%2Frustdoc%2Fauxiliary%2Fthrough-proc-macro-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fthrough-proc-macro-aux.rs?ref=d855bde45728cf8716a0adcdecd98815e4faabd5", "patch": "@@ -0,0 +1,20 @@\n+// force-host\n+// no-prefer-dynamic\n+#![crate_type = \"proc-macro\"]\n+#![crate_name=\"some_macros\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn first(_attr: TokenStream, item: TokenStream) -> TokenStream {\n+    item // This doesn't erase the spans.\n+}\n+\n+#[proc_macro_attribute]\n+pub fn second(_attr: TokenStream, item: TokenStream) -> TokenStream {\n+    // Make a new `TokenStream` to erase the spans:\n+    let mut out: TokenStream = TokenStream::new();\n+    out.extend(item);\n+    out\n+}"}, {"sha": "348c9eea2dcbf89ca1627a3f6e439f90aed5f8c4", "filename": "src/test/rustdoc/through-proc-macro.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d855bde45728cf8716a0adcdecd98815e4faabd5/src%2Ftest%2Frustdoc%2Fthrough-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d855bde45728cf8716a0adcdecd98815e4faabd5/src%2Ftest%2Frustdoc%2Fthrough-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fthrough-proc-macro.rs?ref=d855bde45728cf8716a0adcdecd98815e4faabd5", "patch": "@@ -0,0 +1,12 @@\n+// aux-build:through-proc-macro-aux.rs\n+// build-aux-docs\n+#![warn(intra_doc_link_resolution_failure)]\n+extern crate some_macros;\n+\n+#[some_macros::second]\n+pub enum Boom {\n+    /// [Oooops]\n+    Bam,\n+}\n+\n+fn main() {}"}]}