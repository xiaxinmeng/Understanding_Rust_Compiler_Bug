{"sha": "bb2059f9591b9ecb02f8ac038e1e9f5771f15f55", "node_id": "C_kwDOAAsO6NoAKGJiMjA1OWY5NTkxYjllY2IwMmY4YWMwMzhlMWU5ZjU3NzFmMTVmNTU", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-02-24T16:19:18Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-02-25T09:30:45Z"}, "message": "debuginfo: Simplify TypeMap used during LLVM debuginfo generation -- address review comments.", "tree": {"sha": "f65cd40f8caba88c09ba26b82bd93ca440765360", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f65cd40f8caba88c09ba26b82bd93ca440765360"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb2059f9591b9ecb02f8ac038e1e9f5771f15f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb2059f9591b9ecb02f8ac038e1e9f5771f15f55", "html_url": "https://github.com/rust-lang/rust/commit/bb2059f9591b9ecb02f8ac038e1e9f5771f15f55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb2059f9591b9ecb02f8ac038e1e9f5771f15f55/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e72e6399b1688d611d3814149e9e580774a2b6f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e72e6399b1688d611d3814149e9e580774a2b6f5", "html_url": "https://github.com/rust-lang/rust/commit/e72e6399b1688d611d3814149e9e580774a2b6f5"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "822d02fdee3043b1c39704fad55f62fd090041c1", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bb2059f9591b9ecb02f8ac038e1e9f5771f15f55/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2059f9591b9ecb02f8ac038e1e9f5771f15f55/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=bb2059f9591b9ecb02f8ac038e1e9f5771f15f55", "patch": "@@ -113,11 +113,20 @@ mod unique_type_id {\n     /// A unique identifier for anything that we create a debuginfo node for.\n     /// The types it contains are expected to already be normalized (which\n     /// is debug_asserted in the constructors).\n+    ///\n+    /// Note that there are some things that only show up in debuginfo, like\n+    /// the separate type descriptions for each enum variant. These get an ID\n+    /// too because they have their own debuginfo node in LLVM IR.\n     #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, HashStable)]\n     pub(super) enum UniqueTypeId<'tcx> {\n+        /// The ID of a regular type as it shows up at the language level.\n         Ty(Ty<'tcx>, HiddenZst),\n+        /// The ID for the artificial struct type describing a single enum variant.\n         Variant(Ty<'tcx>, VariantIdx, HiddenZst),\n+        /// The ID for the single DW_TAG_variant_part nested inside the top-level\n+        /// DW_TAG_structure_type that describes enums and generators.\n         VariantPart(Ty<'tcx>, HiddenZst),\n+        /// The ID of the artificial type we create for VTables.\n         VTableTy(Ty<'tcx>, Option<PolyExistentialTraitRef<'tcx>>, HiddenZst),\n     }\n \n@@ -163,7 +172,11 @@ mod unique_type_id {\n             UniqueTypeId::VTableTy(self_type, implemented_trait, HiddenZst { _inaccessible: () })\n         }\n \n-        pub fn to_string(&self, tcx: TyCtxt<'tcx>) -> String {\n+        /// Generates a string version of this [UniqueTypeId], which can be used as the `UniqueId`\n+        /// argument of the various `LLVMRustDIBuilderCreate*Type()` methods.\n+        ///\n+        /// Right now this takes the form of a hex-encoded opaque hash value.\n+        pub fn generate_unique_id_string(&self, tcx: TyCtxt<'tcx>) -> String {\n             let mut hasher = StableHasher::new();\n             let mut hcx = tcx.create_stable_hashing_context();\n             hcx.while_hashing_spans(false, |hcx| {\n@@ -646,9 +659,8 @@ pub fn type_metadata<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll\n                             \"expected type metadata for unique \\\n                                type ID '{:?}' to already be in \\\n                                the `debuginfo::TypeMap` but it \\\n-                               was not. (Ty = {})\",\n+                               was not.\",\n                             unique_type_id,\n-                            t\n                         );\n                     }\n                 };\n@@ -672,6 +684,9 @@ fn recursion_marker_type<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) -> &'ll DIType {\n             //\n             // FIXME: the name `<recur_type>` does not fit the naming scheme\n             //        of other types.\n+            //\n+            // FIXME: it might make sense to use an actual pointer type here\n+            //        so that debuggers can show the address.\n             let name = \"<recur_type>\";\n             llvm::LLVMRustDIBuilderCreateBasicType(\n                 DIB(cx),\n@@ -2030,7 +2045,7 @@ fn prepare_enum_metadata<'ll, 'tcx>(\n         };\n \n         let enum_metadata = {\n-            let unique_type_id_str = unique_type_id.to_string(tcx);\n+            let unique_type_id_str = unique_type_id.generate_unique_id_string(tcx);\n \n             unsafe {\n                 llvm::LLVMRustDIBuilderCreateUnionType(\n@@ -2142,7 +2157,7 @@ fn prepare_enum_metadata<'ll, 'tcx>(\n     };\n \n     let variant_part_unique_type_id_str =\n-        UniqueTypeId::for_enum_variant_part(tcx, enum_type).to_string(tcx);\n+        UniqueTypeId::for_enum_variant_part(tcx, enum_type).generate_unique_id_string(tcx);\n \n     let empty_array = create_DIArray(DIB(cx), &[]);\n     let name = \"\";\n@@ -2171,7 +2186,7 @@ fn prepare_enum_metadata<'ll, 'tcx>(\n         // an equivalent layout but offers us much better integration with\n         // debuggers.\n         let type_array = create_DIArray(DIB(cx), &[Some(variant_part)]);\n-        let unique_type_id_str = unique_type_id.to_string(tcx);\n+        let unique_type_id_str = unique_type_id.generate_unique_id_string(tcx);\n \n         unsafe {\n             llvm::LLVMRustDIBuilderCreateStructType(\n@@ -2345,7 +2360,7 @@ fn create_struct_stub<'ll, 'tcx>(\n     flags: DIFlags,\n     vtable_holder: Option<&'ll DIType>,\n ) -> &'ll DICompositeType {\n-    let unique_type_id = unique_type_id.to_string(cx.tcx);\n+    let unique_type_id = unique_type_id.generate_unique_id_string(cx.tcx);\n \n     let metadata_stub = unsafe {\n         // `LLVMRustDIBuilderCreateStructType()` wants an empty array. A null\n@@ -2383,7 +2398,7 @@ fn create_union_stub<'ll, 'tcx>(\n     containing_scope: &'ll DIScope,\n ) -> &'ll DICompositeType {\n     let (union_size, union_align) = cx.size_and_align_of(union_type);\n-    let unique_type_id = unique_type_id.to_string(cx.tcx);\n+    let unique_type_id = unique_type_id.generate_unique_id_string(cx.tcx);\n \n     let metadata_stub = unsafe {\n         // `LLVMRustDIBuilderCreateUnionType()` wants an empty array. A null"}]}