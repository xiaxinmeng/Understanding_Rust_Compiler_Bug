{"sha": "77acb5c162957d9748d1f35261982591d9a85e22", "node_id": "C_kwDOAAsO6NoAKDc3YWNiNWMxNjI5NTdkOTc0OGQxZjM1MjYxOTgyNTkxZDlhODVlMjI", "commit": {"author": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-07-24T05:29:07Z"}, "committer": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-07-24T14:07:43Z"}, "message": "fix: Autocomplete for struct fields includes receiver\n\nfixes #12857", "tree": {"sha": "b05d0aeed7ac11aba3d575ae28a5941957930a1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b05d0aeed7ac11aba3d575ae28a5941957930a1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77acb5c162957d9748d1f35261982591d9a85e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77acb5c162957d9748d1f35261982591d9a85e22", "html_url": "https://github.com/rust-lang/rust/commit/77acb5c162957d9748d1f35261982591d9a85e22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77acb5c162957d9748d1f35261982591d9a85e22/comments", "author": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "977e12a0bdc3e329af179ef3a9d466af9eb613bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/977e12a0bdc3e329af179ef3a9d466af9eb613bb", "html_url": "https://github.com/rust-lang/rust/commit/977e12a0bdc3e329af179ef3a9d466af9eb613bb"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "9b25964a6086e704e0c4ca5ef5676cf1f985127c", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/77acb5c162957d9748d1f35261982591d9a85e22/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77acb5c162957d9748d1f35261982591d9a85e22/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=77acb5c162957d9748d1f35261982591d9a85e22", "patch": "@@ -121,7 +121,7 @@ pub(crate) fn render_field(\n     let mut item = CompletionItem::new(\n         SymbolKind::Field,\n         ctx.source_range(),\n-        receiver.map_or_else(|| name.clone(), |receiver| format!(\"{}.{}\", receiver, name).into()),\n+        field_with_receiver(receiver.as_ref(), &name),\n     );\n     item.set_relevance(CompletionRelevance {\n         type_match: compute_type_match(ctx.completion, ty),\n@@ -132,7 +132,7 @@ pub(crate) fn render_field(\n         .set_documentation(field.docs(ctx.db()))\n         .set_deprecated(is_deprecated)\n         .lookup_by(name.clone());\n-    item.insert_text(escaped_name);\n+    item.insert_text(field_with_receiver(receiver.as_ref(), &escaped_name));\n     if let Some(receiver) = &dot_access.receiver {\n         if let Some(original) = ctx.completion.sema.original_ast_node(receiver.clone()) {\n             if let Some(ref_match) = compute_ref_match(ctx.completion, ty) {\n@@ -143,6 +143,11 @@ pub(crate) fn render_field(\n     item.build()\n }\n \n+fn field_with_receiver(receiver: Option<&hir::Name>, field_name: &str) -> SmolStr {\n+    receiver\n+        .map_or_else(|| field_name.into(), |receiver| format!(\"{}.{}\", receiver, field_name).into())\n+}\n+\n pub(crate) fn render_tuple_field(\n     ctx: RenderContext<'_>,\n     receiver: Option<hir::Name>,\n@@ -152,7 +157,7 @@ pub(crate) fn render_tuple_field(\n     let mut item = CompletionItem::new(\n         SymbolKind::Field,\n         ctx.source_range(),\n-        receiver.map_or_else(|| field.to_string(), |receiver| format!(\"{}.{}\", receiver, field)),\n+        field_with_receiver(receiver.as_ref(), &field.to_string()),\n     );\n     item.detail(ty.display(ctx.db()).to_string()).lookup_by(field.to_string());\n     item.build()\n@@ -1873,6 +1878,35 @@ impl r#trait for r#struct { type t$0 }\n struct r#struct {}\n trait r#trait { type r#type; }\n impl r#trait for r#struct { type r#type = $0; }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn field_access_includes_self() {\n+        check_edit(\n+            \"length\",\n+            r#\"\n+struct S {\n+    length: i32\n+}\n+\n+impl S {\n+    fn some_fn(&self) {\n+        let l = len$0\n+    }\n+}\n+\"#,\n+            r#\"\n+struct S {\n+    length: i32\n+}\n+\n+impl S {\n+    fn some_fn(&self) {\n+        let l = self.length\n+    }\n+}\n \"#,\n         )\n     }"}]}