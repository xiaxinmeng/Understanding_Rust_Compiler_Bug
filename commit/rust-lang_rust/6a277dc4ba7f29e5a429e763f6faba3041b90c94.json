{"sha": "6a277dc4ba7f29e5a429e763f6faba3041b90c94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMjc3ZGM0YmE3ZjI5ZTVhNDI5ZTc2M2Y2ZmFiYTMwNDFiOTBjOTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-26T19:27:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-26T19:27:38Z"}, "message": "rustdoc: Strip implementations of private traits\n\nCloses #5416", "tree": {"sha": "777d0af9339c73d08d6716d3a16b6f8a69e26bcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/777d0af9339c73d08d6716d3a16b6f8a69e26bcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a277dc4ba7f29e5a429e763f6faba3041b90c94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a277dc4ba7f29e5a429e763f6faba3041b90c94", "html_url": "https://github.com/rust-lang/rust/commit/6a277dc4ba7f29e5a429e763f6faba3041b90c94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a277dc4ba7f29e5a429e763f6faba3041b90c94/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca697d370594aaed020fb252a216b632abc56d33", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca697d370594aaed020fb252a216b632abc56d33", "html_url": "https://github.com/rust-lang/rust/commit/ca697d370594aaed020fb252a216b632abc56d33"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "bf35c93caae428b9c60c56280541002d4cd4e517", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6a277dc4ba7f29e5a429e763f6faba3041b90c94/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a277dc4ba7f29e5a429e763f6faba3041b90c94/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=6a277dc4ba7f29e5a429e763f6faba3041b90c94", "patch": "@@ -10,6 +10,7 @@\n \n use std::num;\n use std::uint;\n+use std::hashmap::HashSet;\n \n use syntax::ast;\n \n@@ -50,9 +51,10 @@ pub fn strip_hidden(crate: clean::Crate) -> plugins::PluginResult {\n \n /// Strip private items from the point of view of a crate or externally from a\n /// crate, specified by the `xcrate` flag.\n-pub fn strip_private(crate: clean::Crate) -> plugins::PluginResult {\n-    struct Stripper;\n-    impl fold::DocFolder for Stripper {\n+pub fn strip_private(mut crate: clean::Crate) -> plugins::PluginResult {\n+    // This stripper collects all *retained* nodes.\n+    struct Stripper<'self>(&'self mut HashSet<ast::NodeId>);\n+    impl<'self> fold::DocFolder for Stripper<'self> {\n         fn fold_item(&mut self, i: Item) -> Option<Item> {\n             match i.inner {\n                 // These items can all get re-exported\n@@ -98,6 +100,7 @@ pub fn strip_private(crate: clean::Crate) -> plugins::PluginResult {\n             };\n \n             let i = if fastreturn {\n+                self.insert(i.id);\n                 return Some(i);\n             } else {\n                 self.fold_item_recur(i)\n@@ -109,15 +112,50 @@ pub fn strip_private(crate: clean::Crate) -> plugins::PluginResult {\n                         // emptied modules/impls have no need to exist\n                         clean::ModuleItem(ref m) if m.items.len() == 0 => None,\n                         clean::ImplItem(ref i) if i.methods.len() == 0 => None,\n-                        _ => Some(i),\n+                        _ => {\n+                            self.insert(i.id);\n+                            Some(i)\n+                        }\n                     }\n                 }\n                 None => None,\n             }\n         }\n     }\n-    let mut stripper = Stripper;\n-    let crate = stripper.fold_crate(crate);\n+\n+    // This stripper discards all private impls of traits\n+    struct ImplStripper<'self>(&'self HashSet<ast::NodeId>);\n+    impl<'self> fold::DocFolder for ImplStripper<'self> {\n+        fn fold_item(&mut self, i: Item) -> Option<Item> {\n+            match i.inner {\n+                clean::ImplItem(ref imp) => {\n+                    match imp.trait_ {\n+                        Some(clean::ResolvedPath{ id, _ }) => {\n+                            if !self.contains(&id) {\n+                                return None;\n+                            }\n+                        }\n+                        Some(*) | None => {}\n+                    }\n+                }\n+                _ => {}\n+            }\n+            self.fold_item_recur(i)\n+        }\n+    }\n+\n+    let mut retained = HashSet::new();\n+    // First, strip all private items\n+    {\n+        let mut stripper = Stripper(&mut retained);\n+        crate = stripper.fold_crate(crate);\n+    }\n+\n+    // Next, strip all private implementations of traits\n+    {\n+        let mut stripper = ImplStripper(&retained);\n+        crate = stripper.fold_crate(crate);\n+    }\n     (crate, None)\n }\n "}]}