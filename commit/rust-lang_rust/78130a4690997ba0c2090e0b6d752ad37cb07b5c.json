{"sha": "78130a4690997ba0c2090e0b6d752ad37cb07b5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MTMwYTQ2OTA5OTdiYTBjMjA5MGUwYjZkNzUyYWQzN2NiMDdiNWM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-29T09:37:19Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-29T21:05:09Z"}, "message": "lint for mixing `#[repr(C)]` with an impl of `Drop`.", "tree": {"sha": "d0b1a63f0112a6ef9ea13b4589aacbc9c39725b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0b1a63f0112a6ef9ea13b4589aacbc9c39725b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78130a4690997ba0c2090e0b6d752ad37cb07b5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78130a4690997ba0c2090e0b6d752ad37cb07b5c", "html_url": "https://github.com/rust-lang/rust/commit/78130a4690997ba0c2090e0b6d752ad37cb07b5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78130a4690997ba0c2090e0b6d752ad37cb07b5c/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "551a74dddd84cf01440ee84148ebd18bc68bd7c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/551a74dddd84cf01440ee84148ebd18bc68bd7c8", "html_url": "https://github.com/rust-lang/rust/commit/551a74dddd84cf01440ee84148ebd18bc68bd7c8"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "cc2c9b735ea44b881aa9d763af3ea37919eb13b7", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/78130a4690997ba0c2090e0b6d752ad37cb07b5c/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78130a4690997ba0c2090e0b6d752ad37cb07b5c/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=78130a4690997ba0c2090e0b6d752ad37cb07b5c", "patch": "@@ -2142,3 +2142,57 @@ impl LintPass for UnstableFeatures {\n         }\n     }\n }\n+\n+/// Lints for attempts to impl Drop on types that have `#[repr(C)]`\n+/// attribute (see issue #24585).\n+#[derive(Copy, Clone)]\n+pub struct DropWithReprExtern;\n+\n+declare_lint! {\n+    DROP_WITH_REPR_EXTERN,\n+    Warn,\n+    \"use of #[repr(C)] on a type that implements Drop\"\n+}\n+\n+impl LintPass for DropWithReprExtern {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DROP_WITH_REPR_EXTERN)\n+    }\n+    fn check_crate(&mut self, ctx: &Context, _: &ast::Crate) {\n+        for dtor_did in ctx.tcx.destructors.borrow().iter() {\n+            let (drop_impl_did, dtor_self_type) =\n+                if dtor_did.krate == ast::LOCAL_CRATE {\n+                    let impl_did = ctx.tcx.map.get_parent_did(dtor_did.node);\n+                    let ty = ty::lookup_item_type(ctx.tcx, impl_did).ty;\n+                    (impl_did, ty)\n+                } else {\n+                    continue;\n+                };\n+\n+            match dtor_self_type.sty {\n+                ty::ty_enum(self_type_did, _) |\n+                ty::ty_struct(self_type_did, _) |\n+                ty::ty_closure(self_type_did, _) => {\n+                    let hints = ty::lookup_repr_hints(ctx.tcx, self_type_did);\n+                    if hints.iter().any(|attr| *attr == attr::ReprExtern) &&\n+                        ty::ty_dtor(ctx.tcx, self_type_did).has_drop_flag() {\n+                        let drop_impl_span = ctx.tcx.map.def_id_span(drop_impl_did,\n+                                                                     codemap::DUMMY_SP);\n+                        let self_defn_span = ctx.tcx.map.def_id_span(self_type_did,\n+                                                                     codemap::DUMMY_SP);\n+                        ctx.span_lint(DROP_WITH_REPR_EXTERN,\n+                                      drop_impl_span,\n+                                      \"implementing Drop adds hidden state to types, \\\n+                                       possibly conflicting with `#[repr(C)]`\");\n+                        // FIXME #19668: could be span_lint_note instead of manual guard.\n+                        if ctx.current_level(DROP_WITH_REPR_EXTERN) != Level::Allow {\n+                            ctx.sess().span_note(self_defn_span,\n+                                               \"the `#[repr(C)]` attribute is attached here\");\n+                        }\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+}"}, {"sha": "970f9c634a2caad2c4cbe4abb402786486e03c5f", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78130a4690997ba0c2090e0b6d752ad37cb07b5c/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78130a4690997ba0c2090e0b6d752ad37cb07b5c/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=78130a4690997ba0c2090e0b6d752ad37cb07b5c", "patch": "@@ -108,6 +108,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  UnconditionalRecursion,\n                  InvalidNoMangleItems,\n                  PluginAsLibrary,\n+                 DropWithReprExtern,\n                  );\n \n     add_builtin_with_new!(sess,"}]}