{"sha": "89bc23643bc4ba979f28d6df8c091813c89c36a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YmMyMzY0M2JjNGJhOTc5ZjI4ZDZkZjhjMDkxODEzYzg5YzM2YTk=", "commit": {"author": {"name": "lzutao", "email": "taolzu@gmail.com", "date": "2020-04-02T02:43:23Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-04-02T02:43:23Z"}, "message": "Use unrolled loop", "tree": {"sha": "8cb75b45c011a4dfd561acd029fc4b941d9a1890", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cb75b45c011a4dfd561acd029fc4b941d9a1890"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89bc23643bc4ba979f28d6df8c091813c89c36a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89bc23643bc4ba979f28d6df8c091813c89c36a9", "html_url": "https://github.com/rust-lang/rust/commit/89bc23643bc4ba979f28d6df8c091813c89c36a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89bc23643bc4ba979f28d6df8c091813c89c36a9/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "041e1704fcd9cc932a4fa587c43d32ed9dcb9712", "url": "https://api.github.com/repos/rust-lang/rust/commits/041e1704fcd9cc932a4fa587c43d32ed9dcb9712", "html_url": "https://github.com/rust-lang/rust/commit/041e1704fcd9cc932a4fa587c43d32ed9dcb9712"}], "stats": {"total": 52, "additions": 43, "deletions": 9}, "files": [{"sha": "d745e87a07258258ebe442c6f1171733e7c0506c", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/89bc23643bc4ba979f28d6df8c091813c89c36a9/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89bc23643bc4ba979f28d6df8c091813c89c36a9/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=89bc23643bc4ba979f28d6df8c091813c89c36a9", "patch": "@@ -81,20 +81,54 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n     }\n }\n \n-pub fn wmemchr(needle: u16, haystack: &[u16]) -> Option<usize> {\n-    extern \"C\" {\n-        fn wmemchr(s: *const u16, c: u16, n: usize) -> *mut u16;\n-    }\n-    let len = haystack.len();\n+pub fn unrolled_find_u16s(needle: u16, haystack: &[u16]) -> Option<usize> {\n     let ptr = haystack.as_ptr();\n-    let p = unsafe { wmemchr(ptr, needle, len) };\n-    if p.is_null() { None } else { Some((p as usize - ptr as usize) / 2) }\n+    let mut len = haystack.len();\n+    let mut start = &haystack[..];\n+\n+    // For performance reasons unfold the loop eight times.\n+    while len >= 8 {\n+        if start[0] == needle {\n+            return Some((start.as_ptr() as usize - ptr as usize) / 2);\n+        }\n+        if start[1] == needle {\n+            return Some((start[1..].as_ptr() as usize - ptr as usize) / 2);\n+        }\n+        if start[2] == needle {\n+            return Some((start[2..].as_ptr() as usize - ptr as usize) / 2);\n+        }\n+        if start[3] == needle {\n+            return Some((start[3..].as_ptr() as usize - ptr as usize) / 2);\n+        }\n+        if start[4] == needle {\n+            return Some((start[4..].as_ptr() as usize - ptr as usize) / 2);\n+        }\n+        if start[5] == needle {\n+            return Some((start[5..].as_ptr() as usize - ptr as usize) / 2);\n+        }\n+        if start[6] == needle {\n+            return Some((start[6..].as_ptr() as usize - ptr as usize) / 2);\n+        }\n+        if start[7] == needle {\n+            return Some((start[7..].as_ptr() as usize - ptr as usize) / 2);\n+        }\n+\n+        start = &start[8..];\n+        len -= 8;\n+    }\n+\n+    for (i, c) in start.iter().enumerate() {\n+        if *c == needle {\n+            return Some((start.as_ptr() as usize - ptr as usize) / 2 + i);\n+        }\n+    }\n+    None\n }\n \n pub fn to_u16s<S: AsRef<OsStr>>(s: S) -> crate::io::Result<Vec<u16>> {\n     fn inner(s: &OsStr) -> crate::io::Result<Vec<u16>> {\n         let mut maybe_result: Vec<u16> = s.encode_wide().collect();\n-        if wmemchr(0, &maybe_result).is_some() {\n+        if unrolled_find_u16s(0, &maybe_result).is_some() {\n             return Err(crate::io::Error::new(\n                 ErrorKind::InvalidInput,\n                 \"strings passed to WinAPI cannot contain NULs\",\n@@ -224,7 +258,7 @@ fn wide_char_to_multi_byte(\n }\n \n pub fn truncate_utf16_at_nul(v: &[u16]) -> &[u16] {\n-    match wmemchr(0, v) {\n+    match unrolled_find_u16s(0, v) {\n         // don't include the 0\n         Some(i) => &v[..i],\n         None => v,"}]}