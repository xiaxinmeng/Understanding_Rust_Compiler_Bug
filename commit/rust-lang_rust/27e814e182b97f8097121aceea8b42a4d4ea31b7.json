{"sha": "27e814e182b97f8097121aceea8b42a4d4ea31b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZTgxNGUxODJiOTdmODA5NzEyMWFjZWVhOGI0MmE0ZDRlYTMxYjc=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-20T12:28:59Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-20T12:28:59Z"}, "message": "Simplify NO_BLOCK testing", "tree": {"sha": "d50c1b1dbaabcef9dd39e8a4de582eb883c4b3fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d50c1b1dbaabcef9dd39e8a4de582eb883c4b3fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27e814e182b97f8097121aceea8b42a4d4ea31b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27e814e182b97f8097121aceea8b42a4d4ea31b7", "html_url": "https://github.com/rust-lang/rust/commit/27e814e182b97f8097121aceea8b42a4d4ea31b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27e814e182b97f8097121aceea8b42a4d4ea31b7/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5205c016e9f704796aa7893f89ef108248bda2e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5205c016e9f704796aa7893f89ef108248bda2e2", "html_url": "https://github.com/rust-lang/rust/commit/5205c016e9f704796aa7893f89ef108248bda2e2"}], "stats": {"total": 14, "additions": 3, "deletions": 11}, "files": [{"sha": "4f8c46ab3c2821a0722f6a7d8dbc1c0cad7efd0c", "filename": "crates/ra_syntax/src/grammar/expressions.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27e814e182b97f8097121aceea8b42a4d4ea31b7/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e814e182b97f8097121aceea8b42a4d4ea31b7/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=27e814e182b97f8097121aceea8b42a4d4ea31b7", "patch": "@@ -5,7 +5,6 @@ pub(super) use self::atom::{literal, LITERAL_FIRST};\n use super::*;\n \n const EXPR_FIRST: TokenSet = LHS_FIRST;\n-const EXPR_FIRST_NO_BLOCK: TokenSet = LHS_FIRST_NO_BLOCK;\n \n pub(super) fn expr(p: &mut Parser) -> BlockLike {\n     let r = Restrictions {\n@@ -210,10 +209,6 @@ const LHS_FIRST: TokenSet = token_set_union![\n     token_set![AMP, STAR, EXCL, DOTDOT, MINUS],\n     atom::ATOM_EXPR_FIRST,\n ];\n-const LHS_FIRST_NO_BLOCK: TokenSet = token_set_union![\n-    token_set![AMP, STAR, EXCL, DOTDOT, MINUS],\n-    atom::ATOM_EXPR_FIRST_NO_BLOCK,\n-];\n \n fn lhs(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)> {\n     let m;"}, {"sha": "3b5749318d2d33a369b4da5888f780f0edb022c8", "filename": "crates/ra_syntax/src/grammar/expressions/atom.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/27e814e182b97f8097121aceea8b42a4d4ea31b7/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e814e182b97f8097121aceea8b42a4d4ea31b7/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=27e814e182b97f8097121aceea8b42a4d4ea31b7", "patch": "@@ -36,10 +36,11 @@ pub(crate) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n }\n \n // E.g. for after the break in `if break {}`, this should not match\n-pub(super) const ATOM_EXPR_FIRST_NO_BLOCK: TokenSet = token_set_union![\n+pub(super) const ATOM_EXPR_FIRST: TokenSet = token_set_union![\n     LITERAL_FIRST,\n     token_set![\n         L_PAREN,\n+        L_CURLY,\n         L_BRACK,\n         PIPE,\n         MOVE_KW,\n@@ -59,9 +60,6 @@ pub(super) const ATOM_EXPR_FIRST_NO_BLOCK: TokenSet = token_set_union![\n     ],\n ];\n \n-pub(super) const ATOM_EXPR_FIRST: TokenSet =\n-    token_set_union![ATOM_EXPR_FIRST_NO_BLOCK, token_set![L_CURLY],];\n-\n const EXPR_RECOVERY_SET: TokenSet = token_set![LET_KW];\n \n pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)> {\n@@ -442,8 +440,7 @@ fn break_expr(p: &mut Parser, r: Restrictions) -> CompletedMarker {\n     //     for i in break {}\n     //     match break {}\n     // }\n-    if r.forbid_structs && p.at_ts(EXPR_FIRST_NO_BLOCK) || !r.forbid_structs && p.at_ts(EXPR_FIRST)\n-    {\n+    if p.at_ts(EXPR_FIRST) && !(r.forbid_structs && p.at(L_CURLY)) {\n         expr(p);\n     }\n     m.complete(p, BREAK_EXPR)"}]}