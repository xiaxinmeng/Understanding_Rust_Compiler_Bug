{"sha": "837df52d85b925fda5d6142fbc1ad52303f173c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzN2RmNTJkODViOTI1ZmRhNWQ2MTQyZmJjMWFkNTIzMDNmMTczYzE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-01T04:50:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-01T04:50:00Z"}, "message": "Rollup merge of #60729 - matthewjasper:leak-after-into, r=nikomatsakis\n\nExpand dynamic drop tests for cases in #47949\n\nAdds test cases for #47949", "tree": {"sha": "8f78a8eaf287958899885f25b70be66bf04247b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f78a8eaf287958899885f25b70be66bf04247b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/837df52d85b925fda5d6142fbc1ad52303f173c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc8gP4CRBK7hj4Ov3rIwAAdHIIAAXBv6M3Jw1Z9k4Kkhfhjfbx\nuP9LxKNu1kJKnElDbr/7PDcGnmmmZDCGIxege6spn6BjQx2e7cQkehQECKMumsYr\nqSuI/OqQEf9SjYQlqbA/fTSx0J93kq44kA7qJIATQHjvw6gP5br9pORNjtgonFkb\n6W1xEMfhQPk6z7hPsfhoks47ZR0piF+YrExHWQ7pTiz5P57S1M+L/reZ9CLhVuem\nuYq54jc5slNZDXmTGBhw0ILMqcjd9uXNUmjZnDecMg7Hzv4Y+NEdh7j3UGrZSvNi\nwyRqm72x/Zs+FJ2u5QauGwbcGl/GOEtg5ddIA2JtlDnistGo0KIbJ2or+z64rOM=\n=TdAO\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f78a8eaf287958899885f25b70be66bf04247b3\nparent 84f729d0d4dade321210b78f56bedd88025eeff6\nparent 6a9e68af199a02347c7452efc46b82bbf057692f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559364600 +0200\ncommitter GitHub <noreply@github.com> 1559364600 +0200\n\nRollup merge of #60729 - matthewjasper:leak-after-into, r=nikomatsakis\n\nExpand dynamic drop tests for cases in #47949\n\nAdds test cases for #47949\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/837df52d85b925fda5d6142fbc1ad52303f173c1", "html_url": "https://github.com/rust-lang/rust/commit/837df52d85b925fda5d6142fbc1ad52303f173c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/837df52d85b925fda5d6142fbc1ad52303f173c1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84f729d0d4dade321210b78f56bedd88025eeff6", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f729d0d4dade321210b78f56bedd88025eeff6", "html_url": "https://github.com/rust-lang/rust/commit/84f729d0d4dade321210b78f56bedd88025eeff6"}, {"sha": "6a9e68af199a02347c7452efc46b82bbf057692f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a9e68af199a02347c7452efc46b82bbf057692f", "html_url": "https://github.com/rust-lang/rust/commit/6a9e68af199a02347c7452efc46b82bbf057692f"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "eb1a3f3a9f9cbed7f587c9a1dcfc41f726acf78f", "filename": "src/test/run-pass/drop/dynamic-drop.rs", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/837df52d85b925fda5d6142fbc1ad52303f173c1/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837df52d85b925fda5d6142fbc1ad52303f173c1/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs?ref=837df52d85b925fda5d6142fbc1ad52303f173c1", "patch": "@@ -41,7 +41,7 @@ impl Allocator {\n             data: RefCell::new(vec![])\n         }\n     }\n-    fn alloc(&self) -> Ptr {\n+    fn alloc(&self) -> Ptr<'_> {\n         self.cur_ops.set(self.cur_ops.get() + 1);\n \n         if self.cur_ops.get() == self.failing_op {\n@@ -53,6 +53,20 @@ impl Allocator {\n         data.push(true);\n         Ptr(addr, self)\n     }\n+    // FIXME(#47949) Any use of this indicates a bug in rustc: we should never\n+    // be leaking values in the cases here.\n+    //\n+    // Creates a `Ptr<'_>` and checks that the allocated value is leaked if the\n+    // `failing_op` is in the list of exception.\n+    fn alloc_leaked(&self, exceptions: Vec<usize>) -> Ptr<'_> {\n+        let ptr = self.alloc();\n+\n+        if exceptions.iter().any(|operation| *operation == self.failing_op) {\n+            let mut data = self.data.borrow_mut();\n+            data[ptr.0] = false;\n+        }\n+        ptr\n+    }\n }\n \n struct Ptr<'a>(usize, &'a Allocator);\n@@ -255,6 +269,72 @@ fn subslice_pattern_reassign(a: &Allocator) {\n     let[_, _y..] = ar;\n }\n \n+fn panic_after_return(a: &Allocator) -> Ptr<'_> {\n+    // Panic in the drop of `p` or `q` can leak\n+    let exceptions = vec![8, 9];\n+    a.alloc();\n+    let p = a.alloc();\n+    {\n+        a.alloc();\n+        let p = a.alloc();\n+        // FIXME (#47949) We leak values when we panic in a destructor after\n+        // evaluating an expression with `rustc_mir::build::Builder::into`.\n+        a.alloc_leaked(exceptions)\n+    }\n+}\n+\n+fn panic_after_return_expr(a: &Allocator) -> Ptr<'_> {\n+    // Panic in the drop of `p` or `q` can leak\n+    let exceptions = vec![8, 9];\n+    a.alloc();\n+    let p = a.alloc();\n+    {\n+        a.alloc();\n+        let q = a.alloc();\n+        // FIXME (#47949)\n+        return a.alloc_leaked(exceptions);\n+    }\n+}\n+\n+fn panic_after_init(a: &Allocator) {\n+    // Panic in the drop of `r` can leak\n+    let exceptions = vec![8];\n+    a.alloc();\n+    let p = a.alloc();\n+    let q = {\n+        a.alloc();\n+        let r = a.alloc();\n+        // FIXME (#47949)\n+        a.alloc_leaked(exceptions)\n+    };\n+}\n+\n+fn panic_after_init_temp(a: &Allocator) {\n+    // Panic in the drop of `r` can leak\n+    let exceptions = vec![8];\n+    a.alloc();\n+    let p = a.alloc();\n+    {\n+        a.alloc();\n+        let r = a.alloc();\n+        // FIXME (#47949)\n+        a.alloc_leaked(exceptions)\n+    };\n+}\n+\n+fn panic_after_init_by_loop(a: &Allocator) {\n+    // Panic in the drop of `r` can leak\n+    let exceptions = vec![8];\n+    a.alloc();\n+    let p = a.alloc();\n+    let q = loop {\n+        a.alloc();\n+        let r = a.alloc();\n+        // FIXME (#47949)\n+        break a.alloc_leaked(exceptions);\n+    };\n+}\n+\n fn run_test<F>(mut f: F)\n     where F: FnMut(&Allocator)\n {\n@@ -342,5 +422,15 @@ fn main() {\n     run_test(|a| slice_pattern_reassign(a));\n     run_test(|a| subslice_pattern_reassign(a));\n \n+    run_test(|a| {\n+        panic_after_return(a);\n+    });\n+    run_test(|a| {\n+        panic_after_return_expr(a);\n+    });\n+    run_test(|a| panic_after_init(a));\n+    run_test(|a| panic_after_init_temp(a));\n+    run_test(|a| panic_after_init_by_loop(a));\n+\n     run_test_nopanic(|a| union1(a));\n }"}]}