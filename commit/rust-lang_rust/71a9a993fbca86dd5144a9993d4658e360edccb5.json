{"sha": "71a9a993fbca86dd5144a9993d4658e360edccb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYTlhOTkzZmJjYTg2ZGQ1MTQ0YTk5OTNkNDY1OGUzNjBlZGNjYjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-16T04:23:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-16T04:23:39Z"}, "message": "Rollup merge of #67325 - Centril:push-fake-read, r=matthewjasper\n\ncleanup with push_fake_read\n\n...and make things a bit more readable.\n\nr? @matthewjasper", "tree": {"sha": "4fc99aa630f968c89e1baf45b39b30b09b01b59c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fc99aa630f968c89e1baf45b39b30b09b01b59c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71a9a993fbca86dd5144a9993d4658e360edccb5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd9wbLCRBK7hj4Ov3rIwAAdHIIAIsjrRSQsvz9d0u4ALzPeYy7\nTeLcW/vpcfoRDd+VbzPtGYKh++vAOG5uRBYJb6Ihf1op18bbUfcS2qT/awslfCDY\n6MiVGKXkDAzTt0yuifKpTOb0nJXjfrvddPwoJ1jLfqDaMDOSA4UuEqGmzJUuhpa1\nfav+1tTQf0lxhvISNz6+Jge8Gtx4laMZFfQkObzhot3hE1I2IDNmElnCCq0lKlk+\nLOV0OP3JwOv5wRBue/idDerS38IK2DpXLe3yXLmml660H9qFZpwMHDh6e4U8owyY\nNnJHcLcHL0PkriO16suHBTtPK7jv6/KaKuk8pmfJ0GZa/Wb8V4nbs1Z+oiTfCEU=\n=+3E/\n-----END PGP SIGNATURE-----\n", "payload": "tree 4fc99aa630f968c89e1baf45b39b30b09b01b59c\nparent 9f0cb17b211a429f427fd6b33069a8d6f5dcf582\nparent 2d96f2097fc85665b99f2dbc00b0059e52b9f4ec\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576470219 +0100\ncommitter GitHub <noreply@github.com> 1576470219 +0100\n\nRollup merge of #67325 - Centril:push-fake-read, r=matthewjasper\n\ncleanup with push_fake_read\n\n...and make things a bit more readable.\n\nr? @matthewjasper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71a9a993fbca86dd5144a9993d4658e360edccb5", "html_url": "https://github.com/rust-lang/rust/commit/71a9a993fbca86dd5144a9993d4658e360edccb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71a9a993fbca86dd5144a9993d4658e360edccb5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f0cb17b211a429f427fd6b33069a8d6f5dcf582", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f0cb17b211a429f427fd6b33069a8d6f5dcf582", "html_url": "https://github.com/rust-lang/rust/commit/9f0cb17b211a429f427fd6b33069a8d6f5dcf582"}, {"sha": "2d96f2097fc85665b99f2dbc00b0059e52b9f4ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d96f2097fc85665b99f2dbc00b0059e52b9f4ec", "html_url": "https://github.com/rust-lang/rust/commit/2d96f2097fc85665b99f2dbc00b0059e52b9f4ec"}], "stats": {"total": 71, "additions": 23, "deletions": 48}, "files": [{"sha": "6bd8d2f7c0792b36c1a1a9006d50b28ed268210e", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71a9a993fbca86dd5144a9993d4658e360edccb5/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a9a993fbca86dd5144a9993d4658e360edccb5/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=71a9a993fbca86dd5144a9993d4658e360edccb5", "patch": "@@ -59,6 +59,18 @@ impl<'tcx> CFG<'tcx> {\n         ));\n     }\n \n+    pub fn push_fake_read(\n+        &mut self,\n+        block: BasicBlock,\n+        source_info: SourceInfo,\n+        cause: FakeReadCause,\n+        place: Place<'tcx>,\n+    ) {\n+        let kind = StatementKind::FakeRead(cause, box place);\n+        let stmt = Statement { source_info, kind };\n+        self.push(block, stmt);\n+    }\n+\n     pub fn terminate(&mut self,\n                      block: BasicBlock,\n                      source_info: SourceInfo,"}, {"sha": "ddacda72e1e656b133aa60c02475adf9029741cb", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/71a9a993fbca86dd5144a9993d4658e360edccb5/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a9a993fbca86dd5144a9993d4658e360edccb5/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=71a9a993fbca86dd5144a9993d4658e360edccb5", "patch": "@@ -484,24 +484,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     fn read_fake_borrows(\n         &mut self,\n-        block: BasicBlock,\n+        bb: BasicBlock,\n         fake_borrow_temps: &mut Vec<Local>,\n         source_info: SourceInfo,\n     ) {\n         // All indexes have been evaluated now, read all of the\n         // fake borrows so that they are live across those index\n         // expressions.\n         for temp in fake_borrow_temps {\n-            self.cfg.push(\n-                block,\n-                Statement {\n-                    source_info,\n-                    kind: StatementKind::FakeRead(\n-                        FakeReadCause::ForIndex,\n-                        Box::new(Place::from(*temp)),\n-                    )\n-                }\n-            );\n+            self.cfg.push_fake_read(bb, source_info, FakeReadCause::ForIndex, Place::from(*temp));\n         }\n     }\n }"}, {"sha": "bf0b2439c00b5924119452edd3dba08b2f96b519", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 9, "deletions": 37, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/71a9a993fbca86dd5144a9993d4658e360edccb5/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a9a993fbca86dd5144a9993d4658e360edccb5/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=71a9a993fbca86dd5144a9993d4658e360edccb5", "patch": "@@ -131,13 +131,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // check safety.\n \n         let source_info = self.source_info(scrutinee_span);\n-        self.cfg.push(block, Statement {\n-            source_info,\n-            kind: StatementKind::FakeRead(\n-                FakeReadCause::ForMatchedPlace,\n-                box(scrutinee_place.clone()),\n-            ),\n-        });\n+        let cause_matched_place = FakeReadCause::ForMatchedPlace;\n+        self.cfg.push_fake_read(block, source_info, cause_matched_place, scrutinee_place.clone());\n \n         // Step 2. Create the otherwise and prebinding blocks.\n \n@@ -313,16 +308,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     self.storage_live_binding(block, var, irrefutable_pat.span, OutsideGuard);\n                 unpack!(block = self.into(&place, block, initializer));\n \n-\n                 // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n                 let source_info = self.source_info(irrefutable_pat.span);\n-                self.cfg.push(\n-                    block,\n-                    Statement {\n-                        source_info,\n-                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, box(place)),\n-                    },\n-                );\n+                self.cfg.push_fake_read(block, source_info, FakeReadCause::ForLet, place);\n \n                 self.schedule_drop_for_binding(var, irrefutable_pat.span, OutsideGuard);\n                 block.unit()\n@@ -358,13 +346,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n                 let pattern_source_info = self.source_info(irrefutable_pat.span);\n-                self.cfg.push(\n-                    block,\n-                    Statement {\n-                        source_info: pattern_source_info,\n-                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, box(place.clone())),\n-                    },\n-                );\n+                let cause_let = FakeReadCause::ForLet;\n+                self.cfg.push_fake_read(block, pattern_source_info, cause_let, place.clone());\n \n                 let ty_source_info = self.source_info(user_ty_span);\n                 let user_ty = pat_ascription_ty.user_ty(\n@@ -1515,13 +1498,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             );\n \n             for &(_, temp) in fake_borrows {\n-                self.cfg.push(post_guard_block, Statement {\n-                    source_info: guard_end,\n-                    kind: StatementKind::FakeRead(\n-                        FakeReadCause::ForMatchGuard,\n-                        box(Place::from(temp)),\n-                    ),\n-                });\n+                let cause = FakeReadCause::ForMatchGuard;\n+                self.cfg.push_fake_read(post_guard_block, guard_end, cause, Place::from(temp));\n             }\n \n             self.exit_scope(\n@@ -1564,14 +1542,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // place they refer to can't be modified by the guard.\n             for binding in by_value_bindings.clone() {\n                 let local_id = self.var_local_id(binding.var_id, RefWithinGuard);\n-                let place = Place::from(local_id);\n-                self.cfg.push(\n-                    post_guard_block,\n-                    Statement {\n-                        source_info: guard_end,\n-                        kind: StatementKind::FakeRead(FakeReadCause::ForGuardBinding, box(place)),\n-                    },\n-                );\n+                let cause = FakeReadCause::ForGuardBinding;\n+                self.cfg.push_fake_read(post_guard_block, guard_end, cause, Place::from(local_id));\n             }\n             self.bind_matched_candidate_for_arm_body(\n                 post_guard_block,"}]}