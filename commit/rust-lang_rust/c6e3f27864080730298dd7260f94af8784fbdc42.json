{"sha": "c6e3f27864080730298dd7260f94af8784fbdc42", "node_id": "C_kwDOAAsO6NoAKGM2ZTNmMjc4NjQwODA3MzAyOThkZDcyNjBmOTRhZjg3ODRmYmRjNDI", "commit": {"author": {"name": "Dominik Stolz", "email": "d.stolz@tum.de", "date": "2023-05-23T09:16:59Z"}, "committer": {"name": "Dominik Stolz", "email": "d.stolz@tum.de", "date": "2023-05-23T12:36:36Z"}, "message": "Move BodyWithBorrowckFacts to consumers", "tree": {"sha": "2e100453cce87ad4a926a656ad73c1fd90b1d195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e100453cce87ad4a926a656ad73c1fd90b1d195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6e3f27864080730298dd7260f94af8784fbdc42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e3f27864080730298dd7260f94af8784fbdc42", "html_url": "https://github.com/rust-lang/rust/commit/c6e3f27864080730298dd7260f94af8784fbdc42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6e3f27864080730298dd7260f94af8784fbdc42/comments", "author": {"login": "voidc", "id": 5302792, "node_id": "MDQ6VXNlcjUzMDI3OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5302792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/voidc", "html_url": "https://github.com/voidc", "followers_url": "https://api.github.com/users/voidc/followers", "following_url": "https://api.github.com/users/voidc/following{/other_user}", "gists_url": "https://api.github.com/users/voidc/gists{/gist_id}", "starred_url": "https://api.github.com/users/voidc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/voidc/subscriptions", "organizations_url": "https://api.github.com/users/voidc/orgs", "repos_url": "https://api.github.com/users/voidc/repos", "events_url": "https://api.github.com/users/voidc/events{/privacy}", "received_events_url": "https://api.github.com/users/voidc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "voidc", "id": 5302792, "node_id": "MDQ6VXNlcjUzMDI3OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5302792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/voidc", "html_url": "https://github.com/voidc", "followers_url": "https://api.github.com/users/voidc/followers", "following_url": "https://api.github.com/users/voidc/following{/other_user}", "gists_url": "https://api.github.com/users/voidc/gists{/gist_id}", "starred_url": "https://api.github.com/users/voidc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/voidc/subscriptions", "organizations_url": "https://api.github.com/users/voidc/orgs", "repos_url": "https://api.github.com/users/voidc/repos", "events_url": "https://api.github.com/users/voidc/events{/privacy}", "received_events_url": "https://api.github.com/users/voidc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75e172e71073d771db8e410bbe16c9827db7cada", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e172e71073d771db8e410bbe16c9827db7cada", "html_url": "https://github.com/rust-lang/rust/commit/75e172e71073d771db8e410bbe16c9827db7cada"}], "stats": {"total": 69, "additions": 36, "deletions": 33}, "files": [{"sha": "3b749a3a38e7376ae7e2c94e14f01cdcc1969cae", "filename": "compiler/rustc_borrowck/src/consumers.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c6e3f27864080730298dd7260f94af8784fbdc42/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e3f27864080730298dd7260f94af8784fbdc42/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs?ref=c6e3f27864080730298dd7260f94af8784fbdc42", "patch": "@@ -3,10 +3,13 @@\n //! This file provides API for compiler consumers.\n \n use rustc_hir::def_id::LocalDefId;\n-use rustc_index::IndexSlice;\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_infer::infer::{DefiningAnchor, TyCtxtInferExt};\n-use rustc_middle::mir::Body;\n+use rustc_middle::mir::{Body, Promoted};\n use rustc_middle::ty::TyCtxt;\n+use std::rc::Rc;\n+\n+use crate::borrow_set::BorrowSet;\n \n pub use super::{\n     dataflow::{calculate_borrows_out_of_scope_at_location, BorrowIndex, Borrows},\n@@ -16,7 +19,6 @@ pub use super::{\n     place_ext::PlaceExt,\n     places_conflict::{places_conflict, PlaceConflictBias},\n     region_infer::RegionInferenceContext,\n-    BodyWithBorrowckFacts,\n };\n \n /// Options determining the output behavior of [`get_body_with_borrowck_facts`].\n@@ -56,6 +58,34 @@ impl ConsumerOptions {\n     }\n }\n \n+/// A `Body` with information computed by the borrow checker. This struct is\n+/// intended to be consumed by compiler consumers.\n+///\n+/// We need to include the MIR body here because the region identifiers must\n+/// match the ones in the Polonius facts.\n+pub struct BodyWithBorrowckFacts<'tcx> {\n+    /// A mir body that contains region identifiers.\n+    pub body: Body<'tcx>,\n+    /// The mir bodies of promoteds.\n+    pub promoted: IndexVec<Promoted, Body<'tcx>>,\n+    /// The set of borrows occurring in `body` with data about them.\n+    pub borrow_set: Rc<BorrowSet<'tcx>>,\n+    /// Context generated during borrowck, intended to be passed to\n+    /// [`calculate_borrows_out_of_scope_at_location`].\n+    pub region_inference_context: Rc<RegionInferenceContext<'tcx>>,\n+    /// The table that maps Polonius points to locations in the table.\n+    /// Populated when using [`ConsumerOptions::PoloniusInputFacts`]\n+    /// or [`ConsumerOptions::PoloniusOutputFacts`].\n+    pub location_table: Option<LocationTable>,\n+    /// Polonius input facts.\n+    /// Populated when using [`ConsumerOptions::PoloniusInputFacts`]\n+    /// or [`ConsumerOptions::PoloniusOutputFacts`].\n+    pub input_facts: Option<Box<PoloniusInput>>,\n+    /// Polonius output facts. Populated when using\n+    /// [`ConsumerOptions::PoloniusOutputFacts`].\n+    pub output_facts: Option<Rc<PoloniusOutput>>,\n+}\n+\n /// This function computes borrowck facts for the given body. The [`ConsumerOptions`]\n /// determine which facts are returned. This function makes a copy of the body because\n /// it needs to regenerate the region identifiers. It should never be invoked during a"}, {"sha": "28e5f3e2a16a7d26bb221d3b744bf3eb9ac3a68b", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c6e3f27864080730298dd7260f94af8784fbdc42/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e3f27864080730298dd7260f94af8784fbdc42/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=c6e3f27864080730298dd7260f94af8784fbdc42", "patch": "@@ -62,8 +62,7 @@ use crate::session_diagnostics::VarNeedNotMut;\n use self::diagnostics::{AccessKind, RegionName};\n use self::location::LocationTable;\n use self::prefixes::PrefixSet;\n-use consumers::ConsumerOptions;\n-use facts::AllFacts;\n+use consumers::{BodyWithBorrowckFacts, ConsumerOptions};\n \n use self::path_utils::*;\n \n@@ -463,32 +462,6 @@ fn do_mir_borrowck<'tcx>(\n     (result, body_with_facts)\n }\n \n-/// A `Body` with information computed by the borrow checker. This struct is\n-/// intended to be consumed by compiler consumers.\n-///\n-/// We need to include the MIR body here because the region identifiers must\n-/// match the ones in the Polonius facts.\n-pub struct BodyWithBorrowckFacts<'tcx> {\n-    /// A mir body that contains region identifiers.\n-    pub body: Body<'tcx>,\n-    /// The mir bodies of promoteds.\n-    pub promoted: IndexVec<Promoted, Body<'tcx>>,\n-    /// The set of borrows occurring in `body` with data about them.\n-    pub borrow_set: Rc<BorrowSet<'tcx>>,\n-    /// Context generated during borrowck, intended to be passed to\n-    /// [`OutOfScopePrecomputer`](dataflow::OutOfScopePrecomputer).\n-    pub region_inference_context: Rc<RegionInferenceContext<'tcx>>,\n-    /// The table that maps Polonius points to locations in the table. Populated\n-    /// when using [`ConsumerOptions::PoloniusInputFacts`] or above.\n-    pub location_table: Option<LocationTable>,\n-    /// Polonius input facts. Populated when using\n-    /// [`ConsumerOptions::PoloniusInputFacts`] or above.\n-    pub input_facts: Option<Box<AllFacts>>,\n-    /// Polonius output facts. Populated when using\n-    /// [`ConsumerOptions::PoloniusOutputFacts`] or above.\n-    pub output_facts: Option<Rc<self::nll::PoloniusOutput>>,\n-}\n-\n pub struct BorrowckInferCtxt<'cx, 'tcx> {\n     pub(crate) infcx: &'cx InferCtxt<'tcx>,\n     pub(crate) reg_var_to_origin: RefCell<FxIndexMap<ty::RegionVid, RegionCtxt>>,"}, {"sha": "b59a65a713f953c8d1b60788500c43079a565c92", "filename": "tests/run-make-fulldeps/obtain-borrowck/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6e3f27864080730298dd7260f94af8784fbdc42/tests%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e3f27864080730298dd7260f94af8784fbdc42/tests%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs?ref=c6e3f27864080730298dd7260f94af8784fbdc42", "patch": "@@ -18,7 +18,7 @@ extern crate rustc_interface;\n extern crate rustc_middle;\n extern crate rustc_session;\n \n-use rustc_borrowck::consumers::BodyWithBorrowckFacts;\n+use rustc_borrowck::consumers::{self, BodyWithBorrowckFacts, ConsumerOptions};\n use rustc_driver::Compilation;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n@@ -128,7 +128,7 @@ thread_local! {\n \n fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> ProvidedValue<'tcx> {\n     let opts = ConsumerOptions::PoloniusInputFacts;\n-    let body_with_facts = rustc_borrowck::consumers::get_body_with_borrowck_facts(tcx, def_id, opts);\n+    let body_with_facts = consumers::get_body_with_borrowck_facts(tcx, def_id, opts);\n     // SAFETY: The reader casts the 'static lifetime to 'tcx before using it.\n     let body_with_facts: BodyWithBorrowckFacts<'static> =\n         unsafe { std::mem::transmute(body_with_facts) };"}]}