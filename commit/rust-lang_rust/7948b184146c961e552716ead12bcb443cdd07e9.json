{"sha": "7948b184146c961e552716ead12bcb443cdd07e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NDhiMTg0MTQ2Yzk2MWU1NTI3MTZlYWQxMmJjYjQ0M2NkZDA3ZTk=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-01-12T15:13:33Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-01-12T15:18:55Z"}, "message": "Use `ptr::eq` where applicable", "tree": {"sha": "59ba5f72aa034efe6026079bb9a7ad9564a6b522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59ba5f72aa034efe6026079bb9a7ad9564a6b522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7948b184146c961e552716ead12bcb443cdd07e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7948b184146c961e552716ead12bcb443cdd07e9", "html_url": "https://github.com/rust-lang/rust/commit/7948b184146c961e552716ead12bcb443cdd07e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7948b184146c961e552716ead12bcb443cdd07e9/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b", "html_url": "https://github.com/rust-lang/rust/commit/1190f7cdf7a62e25c9a8eaf58e0906849692bf2b"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "d26d6f20041e206e893367b4dee329334dd4575b", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7948b184146c961e552716ead12bcb443cdd07e9/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7948b184146c961e552716ead12bcb443cdd07e9/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=7948b184146c961e552716ead12bcb443cdd07e9", "patch": "@@ -59,6 +59,7 @@ use std::hash::{Hash, Hasher};\n use std::fmt;\n use std::mem;\n use std::ops::{Deref, Bound};\n+use std::ptr;\n use std::iter;\n use std::sync::mpsc;\n use std::sync::Arc;\n@@ -168,7 +169,7 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n \n                 // Make sure we don't end up with inference\n                 // types/regions in the global interner\n-                if local as *const _ as usize == global as *const _ as usize {\n+                if ptr::eq(local, global) {\n                     bug!(\"Attempted to intern `{:?}` which contains \\\n                         inference types/regions in the global type context\",\n                         &ty_struct);\n@@ -1125,9 +1126,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     /// Returns true if self is the same as self.global_tcx().\n     fn is_global(self) -> bool {\n-        let local = self.interners as *const _;\n-        let global = &self.global_interners as *const _;\n-        local as usize == global as usize\n+        ptr::eq(self.interners, &self.global_interners)\n     }\n \n     /// Create a type context and call the closure with a `TyCtxt` reference\n@@ -1777,6 +1776,7 @@ pub mod tls {\n     use std::fmt;\n     use std::mem;\n     use std::marker::PhantomData;\n+    use std::ptr;\n     use syntax_pos;\n     use ty::query;\n     use errors::{Diagnostic, TRACK_DIAGNOSTICS};\n@@ -2011,8 +2011,7 @@ pub mod tls {\n     {\n         with_context(|context| {\n             unsafe {\n-                let gcx = tcx.gcx as *const _ as usize;\n-                assert!(context.tcx.gcx as *const _ as usize == gcx);\n+                assert!(ptr::eq(context.tcx.gcx, tcx.gcx));\n                 let context: &ImplicitCtxt<'_, '_, '_> = mem::transmute(context);\n                 f(context)\n             }\n@@ -2030,10 +2029,8 @@ pub mod tls {\n     {\n         with_context(|context| {\n             unsafe {\n-                let gcx = tcx.gcx as *const _ as usize;\n-                let interners = tcx.interners as *const _ as usize;\n-                assert!(context.tcx.gcx as *const _ as usize == gcx);\n-                assert!(context.tcx.interners as *const _ as usize == interners);\n+                assert!(ptr::eq(context.tcx.gcx, tcx.gcx));\n+                assert!(ptr::eq(context.tcx.interners, tcx.interners));\n                 let context: &ImplicitCtxt<'_, '_, '_> = mem::transmute(context);\n                 f(context)\n             }"}, {"sha": "6deedd0b5ea33c38e28b1fd582b4393bce3a78b5", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7948b184146c961e552716ead12bcb443cdd07e9/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7948b184146c961e552716ead12bcb443cdd07e9/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=7948b184146c961e552716ead12bcb443cdd07e9", "patch": "@@ -47,7 +47,7 @@ use syntax_pos::{self, Span, FileName};\n \n impl PartialEq for llvm::Metadata {\n     fn eq(&self, other: &Self) -> bool {\n-        self as *const _ == other as *const _\n+        ptr::eq(self, other)\n     }\n }\n "}, {"sha": "958e00506d62a266f192d23eed05cc83328062fb", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7948b184146c961e552716ead12bcb443cdd07e9/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7948b184146c961e552716ead12bcb443cdd07e9/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=7948b184146c961e552716ead12bcb443cdd07e9", "patch": "@@ -20,12 +20,13 @@ use abi::{LlvmType, FnTypeExt};\n \n use std::fmt;\n use std::cell::RefCell;\n+use std::ptr;\n \n use libc::c_uint;\n \n impl PartialEq for Type {\n     fn eq(&self, other: &Self) -> bool {\n-        self as *const _ == other as *const _\n+        ptr::eq(self, other)\n     }\n }\n "}, {"sha": "3ad1521be9393bb487ed6c476f43f621418b2a24", "filename": "src/librustc_codegen_llvm/value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7948b184146c961e552716ead12bcb443cdd07e9/src%2Flibrustc_codegen_llvm%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7948b184146c961e552716ead12bcb443cdd07e9/src%2Flibrustc_codegen_llvm%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fvalue.rs?ref=7948b184146c961e552716ead12bcb443cdd07e9", "patch": "@@ -4,10 +4,11 @@ use llvm;\n \n use std::fmt;\n use std::hash::{Hash, Hasher};\n+use std::ptr;\n \n impl PartialEq for Value {\n     fn eq(&self, other: &Self) -> bool {\n-        self as *const _ == other as *const _\n+        ptr::eq(self, other)\n     }\n }\n "}]}