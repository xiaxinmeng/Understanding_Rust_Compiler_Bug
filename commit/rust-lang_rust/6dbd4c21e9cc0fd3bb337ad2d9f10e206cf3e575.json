{"sha": "6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYmQ0YzIxZTljYzBmZDNiYjMzN2FkMmQ5ZjEwZTIwNmNmM2U1NzU=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-12-02T16:51:59Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-13T00:15:29Z"}, "message": "rustc: build versioned library with hash in its name\n\nAlso updated build to install versioned libraries and added a few\nmissing actions for `make clean`.", "tree": {"sha": "e81b1c77a6b247a0521eca58f71ff629c0cad4e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e81b1c77a6b247a0521eca58f71ff629c0cad4e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575", "html_url": "https://github.com/rust-lang/rust/commit/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4f450a7938ef560168947a28600663389969a02", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f450a7938ef560168947a28600663389969a02", "html_url": "https://github.com/rust-lang/rust/commit/b4f450a7938ef560168947a28600663389969a02"}], "stats": {"total": 76, "additions": 56, "deletions": 20}, "files": [{"sha": "5d98b87e0166d390c23fc9d84c4e1a4ada87b30e", "filename": "Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575", "patch": "@@ -108,6 +108,10 @@ CFG_CORELIB :=$(call CFG_LIB_NAME,core)\n CFG_STDLIB :=$(call CFG_LIB_NAME,std)\n CFG_LIBRUSTC :=$(call CFG_LIB_NAME,rustc)\n \n+STDLIB_GLOB :=$(call CFG_LIB_GLOB,std)\n+CORELIB_GLOB :=$(call CFG_LIB_GLOB,core)\n+LIBRUSTC_GLOB :=$(call CFG_LIB_GLOB,rustc)\n+\n # version-string calculation\n CFG_GIT_DIR := $(CFG_SRC_DIR).git\n CFG_VERSION = prerelease"}, {"sha": "e28bfc92c5e5a0afdb46f45707fb2734827c37b2", "filename": "mk/clean.mk", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575", "patch": "@@ -56,7 +56,12 @@ clean$(1)_H_$(2):\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/fuzzer$(X)\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/cargo$(X)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUNTIME)\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_CORELIB)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_STDLIB)\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTC)\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CORELIB_GLOB)\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(STDLIB_GLOB)\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTC_GLOB)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUSTLLVM)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/libstd.rlib\n \n@@ -72,7 +77,12 @@ clean$(1)_T_$(2)_H_$(3):\n \t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustc$(X)\n \t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/fuzzer$(X)\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME)\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB)\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB)\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC)\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CORELIB_GLOB)\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(STDLIB_GLOB)\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTC_GLOB)\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM)\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libstd.rlib\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/intrinsics.bc"}, {"sha": "475fa8085a69818964c1ad2f4176e1761f7b5d21", "filename": "mk/host.mk", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/mk%2Fhost.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/mk%2Fhost.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fhost.mk?ref=6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575", "patch": "@@ -30,6 +30,8 @@ $$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC): \\\n \t$$(HSTDLIB_DEFAULT$(2)_H_$(3))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n+\t$$(Q)cp $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_GLOB) \\\n+\t        $$(HLIB$(2)_H_$(4))\n \n $$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME): \\\n \t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_RUNTIME)\n@@ -41,13 +43,17 @@ $$(HLIB$(2)_H_$(4))/$$(CFG_CORELIB): \\\n \t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n+\t$$(Q)cp $$(TLIB$(1)_T_$(4)_H_$(3))/$(CORELIB_GLOB) \\\n+\t        $$(HLIB$(2)_H_$(4))\n \n $$(HLIB$(2)_H_$(4))/$$(CFG_STDLIB): \\\n \t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB) \\\n \t$$(HLIB$(2)_H_$(4))/$$(CFG_CORELIB) \\\n \t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n+\t$$(Q)cp $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_GLOB) \\\n+\t        $$(HLIB$(2)_H_$(4))\n \n $$(HLIB$(2)_H_$(4))/libcore.rlib: \\\n \t$$(TLIB$(1)_T_$(4)_H_$(3))/libcore.rlib \\"}, {"sha": "e0e32769629cfa71b412ca3cbb2d62726383f623", "filename": "mk/install.mk", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575", "patch": "@@ -3,11 +3,14 @@\n # mirror of the installation directory structure.\n \n # Installation macro. Call with source directory as arg 1,\n-# destination directory as arg 2, and filename as arg 3\n+# destination directory as arg 2, and filename/libname-glob as arg 3\n ifdef VERBOSE\n  INSTALL = cp $(1)/$(3) $(2)/$(3)\n+ INSTALL_LIB = cp `ls -rt1 $(1)/$(3) | tail -1` $(2)/\n else\n  INSTALL = $(Q)$(call E, install: $(2)/$(3)) && cp $(1)/$(3) $(2)/$(3)\n+ INSTALL_LIB = $(Q)$(call E, install_lib: $(2)/$(3)) &&                    \\\n+\t       cp `ls -rt1 $(1)/$(3) | tail -1` $(2)/\n endif\n \n # The stage we install from\n@@ -33,8 +36,10 @@ PTL$(1)$(2) = $$(PTR$(1)$(2))/lib\n install-target-$(1)-host-$(2): $$(SREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \t$$(Q)mkdir -p $$(PTL$(1)$(2))\n \t$$(Q)$$(call INSTALL,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CFG_RUNTIME))\n-\t$$(Q)$$(call INSTALL,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CFG_CORELIB))\n-\t$$(Q)$$(call INSTALL,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CFG_STDLIB))\n+\t$$(Q)$$(call INSTALL_LIB, \\\n+\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CORELIB_GLOB))\n+\t$$(Q)$$(call INSTALL_LIB, \\\n+\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(STDLIB_GLOB))\n \t$$(Q)$$(call INSTALL,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),intrinsics.bc)\n \t$$(Q)$$(call INSTALL,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),libmorestack.a)\n endef\n@@ -62,8 +67,8 @@ install-host: $(SREQ$(ISTAGE)_T_$(CFG_HOST_TRIPLE)_H_$(CFG_HOST_TRIPLE))\n \t$(Q)mkdir -p $(PREFIX_ROOT)/share/man/man1\n \t$(Q)$(call INSTALL,$(HB),$(PHB),rustc$(X))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUNTIME))\n-\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_CORELIB))\n-\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_STDLIB))\n+\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(CORELIB_GLOB))\n+\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(STDLIB_GLOB))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUSTLLVM))\n \t$(Q)$(call INSTALL,$(S)/man, \\\n \t     $(PREFIX_ROOT)/share/man/man1,rustc.1)"}, {"sha": "c4cce8c94388f4087e43a80777dcf09f697bca4f", "filename": "mk/platform.mk", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575", "patch": "@@ -23,6 +23,7 @@ endif\n \n ifneq ($(findstring freebsd,$(CFG_OSTYPE)),)\n   CFG_LIB_NAME=lib$(1).so\n+  CFG_LIB_GLOB=lib$(1)-*.so\n   CFG_GCCISH_CFLAGS += -fPIC -march=i686 -I/usr/local/include\n   CFG_GCCISH_LINK_FLAGS += -shared -fPIC -lpthread -lrt\n   ifeq ($(CFG_CPUTYPE), x86_64)\n@@ -40,6 +41,7 @@ endif\n \n ifneq ($(findstring linux,$(CFG_OSTYPE)),)\n   CFG_LIB_NAME=lib$(1).so\n+  CFG_LIB_GLOB=lib$(1)-*.so\n   CFG_GCCISH_CFLAGS += -fPIC\n   CFG_GCCISH_LINK_FLAGS += -shared -fPIC -ldl -lpthread -lrt\n   CFG_GCCISH_DEF_FLAG := -Wl,--export-dynamic,--dynamic-list=\n@@ -71,6 +73,7 @@ endif\n \n ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n   CFG_LIB_NAME=lib$(1).dylib\n+  CFG_LIB_GLOB=lib$(1)-*.dylib\n   CFG_UNIXY := 1\n   CFG_LDENV := DYLD_LIBRARY_PATH\n   CFG_GCCISH_LINK_FLAGS += -dynamiclib -lpthread -framework CoreServices\n@@ -156,6 +159,7 @@ ifdef CFG_WINDOWSY\n \n   CFG_EXE_SUFFIX := .exe\n   CFG_LIB_NAME=$(1).dll\n+  CFG_LIB_GLOB=$(1)-*.dll\n   CFG_DEF_SUFFIX := .def\n   CFG_LDPATH :=$(CFG_LDPATH):$$PATH\n   CFG_RUN=PATH=\"$(CFG_LDPATH):$(1)\" $(2)"}, {"sha": "4df1d6dd3928b7870f9bca9a3b4f6dd5ef370d9a", "filename": "mk/target.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575", "patch": "@@ -26,14 +26,14 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB): \\\n \t\t$$(CORELIB_CRATE) $$(CORELIB_INPUTS) \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) --no-core --lib -o $$@ $$<\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) --no-core --lib -o $$@ $$< && touch $$@\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB): \\\n \t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n         $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB) \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) --lib -o $$@ $$<\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) --lib -o $$@ $$< && touch $$@\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUNTIME): \\\n \t\trt/$(2)/$$(CFG_RUNTIME)\n@@ -59,7 +59,7 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC):\t\t\\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM)\t\\\n \t\t$$(TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3))  --lib -o $$@ $$<\n+\t$$(STAGE$(1)_T_$(2)_H_$(3))  --lib -o $$@ $$< && touch $$@\n \n endef\n "}, {"sha": "36a6daeff81f4df2b64a73afb538c461a0ef0e89", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575", "patch": "@@ -551,7 +551,8 @@ fn mangle_internal_name_by_seq(ccx: @crate_ctxt, flav: str) -> str {\n // gcc to link the object file with some libs\n fn link_binary(sess: session::session,\n                obj_filename: str,\n-               out_filename: str) {\n+               out_filename: str,\n+               lm: link_meta) {\n     // The default library location, we need this to find the runtime.\n     // The location of crates will be determined as needed.\n     let stage: str = \"-L\" + sess.filesearch().get_target_lib_path();\n@@ -611,14 +612,17 @@ fn link_binary(sess: session::session,\n     let used_libs = cstore::get_used_libraries(cstore);\n     for l: str in used_libs { gcc_args += [\"-l\" + l]; }\n \n+    let long_libname =\n+        std::os::dylib_filename(#fmt(\"%s-%s-%s\",\n+                                     lm.name, lm.extras_hash, lm.vers));\n+\n     if sess.building_library() {\n         gcc_args += [lib_cmd];\n \n         // On mac we need to tell the linker to let this library\n         // be rpathed\n         if sess.get_targ_cfg().os == session::os_macos {\n-            gcc_args += [\"-Wl,-install_name,@rpath/\"\n-                        + fs::basename(out_filename)];\n+            gcc_args += [\"-Wl,-install_name,@rpath/\" + long_libname];\n         }\n     } else {\n         // FIXME: why do we hardcode -lm?\n@@ -651,19 +655,22 @@ fn link_binary(sess: session::session,\n         sess.note(prog.err + prog.out);\n         sess.abort_if_errors();\n     }\n-    // Clean up on Darwin\n \n+    // Clean up on Darwin\n     if sess.get_targ_cfg().os == session::os_macos {\n         run::run_program(\"dsymutil\", [out_filename]);\n     }\n \n-\n     // Remove the temporary object file if we aren't saving temps\n     if !sess.get_opts().save_temps {\n         run::run_program(\"rm\", [obj_filename]);\n     }\n-}\n \n+    if sess.building_library() {\n+        let fullname = fs::connect(fs::dirname(out_filename), long_libname);\n+        run::run_program(\"mv\", [out_filename, fullname]);\n+    }\n+}\n //\n // Local Variables:\n // mode: rust"}, {"sha": "76c51e35da7d5b86aee8413077f6cfe26a20e3ee", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575", "patch": "@@ -10,7 +10,7 @@ import middle::{trans, resolve, freevars, kind, ty, typeck, fn_usage,\n import syntax::print::{pp, pprust};\n import util::{ppaux, filesearch};\n import back::link;\n-import std::{option, str, vec, int, io, getopts, result};\n+import std::{fs, option, str, vec, int, io, getopts, result};\n import std::option::{some, none};\n import std::getopts::{optopt, optmulti, optflag, optflagopt, opt_present};\n import back::{x86, x86_64};\n@@ -193,7 +193,7 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n \n     let outputs = build_output_filenames(input, output, sess);\n \n-    let llmod =\n+    let (llmod, link_meta) =\n         time(time_passes, \"translation\",\n              bind trans::trans_crate(sess, crate, ty_cx,\n                                      outputs.obj_filename, ast_map,\n@@ -209,7 +209,7 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n \n     time(time_passes, \"Linking\",\n          bind link::link_binary(sess, outputs.obj_filename,\n-                                outputs.out_filename));\n+                                outputs.out_filename, link_meta));\n }\n \n fn pretty_print_input(sess: session::session, cfg: ast::crate_cfg, input: str,"}, {"sha": "b94110acb3136c5f3f6b6f0802e6c03a9d6c756a", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575", "patch": "@@ -157,7 +157,7 @@ fn find_library_crate_aux(sess: session::session,\n                           metas: [@ast::meta_item],\n                           filesearch: filesearch::filesearch) ->\n    option::t<{ident: str, data: @[u8]}> {\n-    let prefix: str = nn.prefix + crate_name;\n+    let prefix: str = nn.prefix + crate_name + \"-\";\n     let suffix: str = nn.suffix;\n \n     ret filesearch::search(filesearch, { |path|"}, {"sha": "fcae4dd45bf7bf8a35c81c234847580aff97810a", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=6dbd4c21e9cc0fd3bb337ad2d9f10e206cf3e575", "patch": "@@ -6020,7 +6020,7 @@ fn write_abi_version(ccx: @crate_ctxt) {\n fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n                output: str, amap: ast_map::map, mut_map: mut::mut_map,\n                copy_map: alias::copy_map, last_uses: last_use::last_uses)\n-    -> ModuleRef {\n+    -> (ModuleRef, link::link_meta) {\n     let sha = std::sha1::mk_sha1();\n     let link_meta = link::build_link_meta(sess, *crate, output, sha);\n \n@@ -6138,7 +6138,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n             log_err #fmt[\"time: %s took %d ms\", timing.ident, timing.time];\n         }\n     }\n-    ret llmod;\n+    ret (llmod, link_meta);\n }\n //\n // Local Variables:"}]}