{"sha": "3473f734bddb895bdbde82d4633432ad8833d95f", "node_id": "C_kwDOAAsO6NoAKDM0NzNmNzM0YmRkYjg5NWJkYmRlODJkNDYzMzQzMmFkODgzM2Q5NWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-06T16:43:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-06T16:43:00Z"}, "message": "Rollup merge of #110004 - SparrowLii:failure_status, r=oli-obk\n\nadd `dont_check_failure_status` option in the compiler test\n\nSometimes the compiler triggers one ice while processing another ice. This will cause a recursive panic and go to [`sys::abort_internal()`](https://github.com/rust-lang/rust/blob/master/library/std/src/panicking.rs#L675), which generates an unfixed exit code. So I think we need an option to allow these use cases to generate different exit codes\n\nUpdates #75760\ncc #95134\n\nFor example, when set `parallel_compiler = true`, issue-95134 will ice in `report_ice` since it try to print the query stack. Below is the brief error message:\n```\nfailures:\n\n---- [ui] tests\\ui\\recursion\\issue-95134.rs stdout ----\n\nerror: Error: expected failure status (Some(101)) but received status Some(-1073740791).\nstatus: exit code: 0xc0000409\ncommand: PATH=\"D:\\rust-backup\\parallel_rust\\rust-para\\build\\x86_64-pc-windows-msvc\\stage1\\bin;C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30133\\bin\\HostX64\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30133\\bin\\HostX64\\x64;D:\\rust-backup\\parallel_rust\\rust-para\\build\\x86_64-pc-windows-msvc\\stage0-bootstrap-tools\\x86_64-pc-windows-msvc\\release\\deps;D:\\rust-backup\\parallel_rust\\rust-para\\build\\x86_64-pc-windows-msvc\\stage0\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4\\libnvvp;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files\\CMake\\bin;C:\\Program Files (x86)\\GnuWin32\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\NVIDIA Corporation\\Nsight Compute 2021.2.1\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Users\\HuaweiOpensource\\anaconda3;C:\\Users\\HuaweiOpensource\\anaconda3\\Scripts;C:\\Users\\HuaweiOpensource\\anaconda3\\Library\\bin;C:\\Users\\HuaweiOpensource\\anaconda3\\Library\\mingw-w64;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files (x86)\\GnuWin32\\bin;C:\\Users\\HuaweiOpensource\\AppData\\Local\\Programs\\Python\\Python38\\Scripts\\;C:\\Users\\HuaweiOpensource\\AppData\\Local\\Programs\\Python\\Python38\\;C:\\Users\\HuaweiOpensource\\.cargo\\bin;C:\\Users\\HuaweiOpensource\\.cargo\\bin;D:\\Program Files\\JetBrains\\CLion 2022.1.3\\bin;;D:\\Program Files\\JetBrains\\PyCharm Community Edition 2020.3\\bin;;D:\\Program Files\\OpenSSL-Win64\\bin;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit;C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.19041.0\\x64;\" \"D:\\\\rust-backup\\\\parallel_rust\\\\rust-para\\\\build\\\\x86_64-pc-windows-msvc\\\\stage1\\\\bin\\\\rustc.exe\" \"D:\\\\rust-backup\\\\parallel_rust\\\\rust-para\\\\tests\\\\ui\\\\recursion\\\\issue-95134.rs\" \"-Zthreads=1\" \"--target=x86_64-pc-windows-msvc\" \"--error-format\" \"json\" \"--json\" \"future-incompat\" \"-Ccodegen-units=1\" \"-Zui-testing\" \"-Zsimulate-remapped-rust-src-base=/rustc/FAKE_PREFIX\" \"-Ztranslate-remapped-path-to-local-path=no\" \"-Zdeduplicate-diagnostics=no\" \"-Cstrip=debuginfo\" \"--remap-path-prefix=D:\\\\rust-backup\\\\parallel_rust\\\\rust-para\\\\tests\\\\ui=fake-test-src-base\" \"-C\" \"prefer-dynamic\" \"--out-dir\" \"D:\\\\rust-backup\\\\parallel_rust\\\\rust-para\\\\build\\\\x86_64-pc-windows-msvc\\\\test\\\\ui\\\\recursion\\\\issue-95134\" \"-A\" \"unused\" \"-Crpath\" \"-Cdebuginfo=0\" \"-Lnative=D:\\\\rust-backup\\\\parallel_rust\\\\rust-para\\\\build\\\\x86_64-pc-windows-msvc\\\\native\\\\rust-test-helpers\" \"-L\" \"D:\\\\rust-backup\\\\parallel_rust\\\\rust-para\\\\build\\\\x86_64-pc-windows-msvc\\\\test\\\\ui\\\\recursion\\\\issue-95134\\\\auxiliary\" \"-Copt-level=0\"\nstdout: none\n--- stderr -------------------------------\nthread 'rustc' panicked at 'index out of bounds: the len is 0 but the index is 0', C:\\Users\\HuaweiOpensource\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ena-0.14.2\\src\\snapshot_vec.rs:199:10\nstack backtrace:\n   0:     0x7ffc3e90bc05 - std::backtrace_rs::backtrace::trace_unsynchronized::hfabb14c555fa1e54\n   1:     0x7ffc3e900799 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h88786f2c1c37cad0\n   2:     0x7ffc3e95143b - core::fmt::write::hef4555c5285e005b\n   3:     0x7ffc3e8ef2aa - std::io::Write::write_fmt::h9ea304efc4781c26\n   4:     0x7ffc3e90059b - std::sys_common::backtrace::print::h7b33cd350eefb143\n......\n 178:     0x7ffc27d6a3f2 - <&mut serde_json[7222a1897944c7c8]::ser::Serializer<&mut alloc[6a6f6c0f0cd9fa15]::vec::Vec<u8>, serde_json[7222a1897944c7c8]::ser::PrettyFormatter> as serde[d3e6684f4f38fcf7]::ser::Serializer>::collect_seq::<&alloc[6a6f6c0f0cd9fa15]::vec::Vec<serde_json[7222a1897944c7c8]::value::Value>>\n 179:     0x7ffc3e8ed9ec - std::sys::windows::thread::Thread::new::thread_start::h5be4f069fac1a629\n 180:     0x7ffcb0b37614 - BaseThreadInitThunk\n 181:     0x7ffcb18c26a1 - RtlUserThreadStart\n\nerror: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.70.0-dev running on x86_64-pc-windows-msvc\n\nnote: compiler flags: -Z threads=1 -C codegen-units=1 -Z ui-testing -Z simulate-remapped-rust-src-base=/rustc/FAKE_PREFIX -Z translate-remapped-path-to-local-path=no -Z deduplicate-diagnostics=no -C strip=debuginfo -C prefer-dynamic -C rpath -C debuginfo=0 -C opt-level=0\n\nquery stack during panic:\nthread 'rustc' panicked at 'type variables should not be hashed: _#0t', D:\\rust-backup\\parallel_rust\\rust-para\\compiler\\rustc_type_ir\\src\\lib.rs:718:17\nstack backtrace:\n   0:     0x7ffc3e90bc05 - std::backtrace_rs::backtrace::trace_unsynchronized::hfabb14c555fa1e54\n   1:     0x7ffc3e900799 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h88786f2c1c37cad0\n   2:     0x7ffc3e95143b - core::fmt::write::hef4555c5285e005b\n   3:     0x7ffc3e8ef2aa - std::io::Write::write_fmt::h9ea304efc4781c26\n   4:     0x7ffc3e90059b - std::sys_common::backtrace::print::h7b33cd350eefb143\n   5:     0x7ffc3e91c109 - std::panicking::default_hook::h12f01c5f2b8959c6\n......\n 197:     0x7ffc27d6a3f2 - <&mut serde_json[7222a1897944c7c8]::ser::Serializer<&mut alloc[6a6f6c0f0cd9fa15]::vec::Vec<u8>, serde_json[7222a1897944c7c8]::ser::PrettyFormatter> as serde[d3e6684f4f38fcf7]::ser::Serializer>::collect_seq::<&alloc[6a6f6c0f0cd9fa15]::vec::Vec<serde_json[7222a1897944c7c8]::value::Value>>\n 198:     0x7ffc3e8ed9ec - std::sys::windows::thread::Thread::new::thread_start::h5be4f069fac1a629\n 199:     0x7ffcb0b37614 - BaseThreadInitThunk\n 200:     0x7ffcb18c26a1 - RtlUserThreadStart\n\nerror: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.70.0-dev running on x86_64-pc-windows-msvc\n\nnote: compiler flags: -Z threads=1 -C codegen-units=1 -Z ui-testing -Z simulate-remapped-rust-src-base=/rustc/FAKE_PREFIX -Z translate-remapped-path-to-local-path=no -Z deduplicate-diagnostics=no -C strip=debuginfo -C prefer-dynamic -C rpath -C debuginfo=0 -C opt-level=0\n\nquery stack during panic:\nthread panicked while processing panic. aborting.\n------------------------------------------\n```", "tree": {"sha": "e7acf74f6b6cb7e4403375c0dee312a618d4af62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7acf74f6b6cb7e4403375c0dee312a618d4af62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3473f734bddb895bdbde82d4633432ad8833d95f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkLvaUCRBK7hj4Ov3rIwAAtMMIAAXcNUjX6+xAtwhJOMIpBqxk\njhLrTJMQ+GgK9bo9zl7CaR4g9bnatM+jMDGwG0cNDEPk/7jO3OmTEV46KbBdvP57\nBidmX7ejbr1S/Nb9i8bcFn+S5t8NsMPi3NnDRrAoXLFNBlC01Nnv1VuQs5lami4K\nABg7H5Wjy3XDennc3kcYAfoER91wCfkWJCtKgJQ0oPF9LO9N0fxmXPLwopY4VQws\nm9R0bxyMuXzjzbb8svHZ4GgFnOMzTAq1PvjQQXy/i6Dg1XxRgBNx8gqQhS859I8X\nFlWJPzxgCewHNBJprYxpHgDElgNQ7pZ+ArTVgEODNK37YT6+OA0Pc5Hp1GsSvFo=\n=d0Bx\n-----END PGP SIGNATURE-----\n", "payload": "tree e7acf74f6b6cb7e4403375c0dee312a618d4af62\nparent 4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696\nparent ded048398f36c6bc15c71b1be270cc91c418935e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1680799380 +0200\ncommitter GitHub <noreply@github.com> 1680799380 +0200\n\nRollup merge of #110004 - SparrowLii:failure_status, r=oli-obk\n\nadd `dont_check_failure_status` option in the compiler test\n\nSometimes the compiler triggers one ice while processing another ice. This will cause a recursive panic and go to [`sys::abort_internal()`](https://github.com/rust-lang/rust/blob/master/library/std/src/panicking.rs#L675), which generates an unfixed exit code. So I think we need an option to allow these use cases to generate different exit codes\n\nUpdates #75760\ncc #95134\n\nFor example, when set `parallel_compiler = true`, issue-95134 will ice in `report_ice` since it try to print the query stack. Below is the brief error message:\n```\nfailures:\n\n---- [ui] tests\\ui\\recursion\\issue-95134.rs stdout ----\n\nerror: Error: expected failure status (Some(101)) but received status Some(-1073740791).\nstatus: exit code: 0xc0000409\ncommand: PATH=\"D:\\rust-backup\\parallel_rust\\rust-para\\build\\x86_64-pc-windows-msvc\\stage1\\bin;C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30133\\bin\\HostX64\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30133\\bin\\HostX64\\x64;D:\\rust-backup\\parallel_rust\\rust-para\\build\\x86_64-pc-windows-msvc\\stage0-bootstrap-tools\\x86_64-pc-windows-msvc\\release\\deps;D:\\rust-backup\\parallel_rust\\rust-para\\build\\x86_64-pc-windows-msvc\\stage0\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4\\libnvvp;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files\\CMake\\bin;C:\\Program Files (x86)\\GnuWin32\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\NVIDIA Corporation\\Nsight Compute 2021.2.1\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Users\\HuaweiOpensource\\anaconda3;C:\\Users\\HuaweiOpensource\\anaconda3\\Scripts;C:\\Users\\HuaweiOpensource\\anaconda3\\Library\\bin;C:\\Users\\HuaweiOpensource\\anaconda3\\Library\\mingw-w64;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files (x86)\\GnuWin32\\bin;C:\\Users\\HuaweiOpensource\\AppData\\Local\\Programs\\Python\\Python38\\Scripts\\;C:\\Users\\HuaweiOpensource\\AppData\\Local\\Programs\\Python\\Python38\\;C:\\Users\\HuaweiOpensource\\.cargo\\bin;C:\\Users\\HuaweiOpensource\\.cargo\\bin;D:\\Program Files\\JetBrains\\CLion 2022.1.3\\bin;;D:\\Program Files\\JetBrains\\PyCharm Community Edition 2020.3\\bin;;D:\\Program Files\\OpenSSL-Win64\\bin;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit;C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.19041.0\\x64;\" \"D:\\\\rust-backup\\\\parallel_rust\\\\rust-para\\\\build\\\\x86_64-pc-windows-msvc\\\\stage1\\\\bin\\\\rustc.exe\" \"D:\\\\rust-backup\\\\parallel_rust\\\\rust-para\\\\tests\\\\ui\\\\recursion\\\\issue-95134.rs\" \"-Zthreads=1\" \"--target=x86_64-pc-windows-msvc\" \"--error-format\" \"json\" \"--json\" \"future-incompat\" \"-Ccodegen-units=1\" \"-Zui-testing\" \"-Zsimulate-remapped-rust-src-base=/rustc/FAKE_PREFIX\" \"-Ztranslate-remapped-path-to-local-path=no\" \"-Zdeduplicate-diagnostics=no\" \"-Cstrip=debuginfo\" \"--remap-path-prefix=D:\\\\rust-backup\\\\parallel_rust\\\\rust-para\\\\tests\\\\ui=fake-test-src-base\" \"-C\" \"prefer-dynamic\" \"--out-dir\" \"D:\\\\rust-backup\\\\parallel_rust\\\\rust-para\\\\build\\\\x86_64-pc-windows-msvc\\\\test\\\\ui\\\\recursion\\\\issue-95134\" \"-A\" \"unused\" \"-Crpath\" \"-Cdebuginfo=0\" \"-Lnative=D:\\\\rust-backup\\\\parallel_rust\\\\rust-para\\\\build\\\\x86_64-pc-windows-msvc\\\\native\\\\rust-test-helpers\" \"-L\" \"D:\\\\rust-backup\\\\parallel_rust\\\\rust-para\\\\build\\\\x86_64-pc-windows-msvc\\\\test\\\\ui\\\\recursion\\\\issue-95134\\\\auxiliary\" \"-Copt-level=0\"\nstdout: none\n--- stderr -------------------------------\nthread 'rustc' panicked at 'index out of bounds: the len is 0 but the index is 0', C:\\Users\\HuaweiOpensource\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ena-0.14.2\\src\\snapshot_vec.rs:199:10\nstack backtrace:\n   0:     0x7ffc3e90bc05 - std::backtrace_rs::backtrace::trace_unsynchronized::hfabb14c555fa1e54\n   1:     0x7ffc3e900799 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h88786f2c1c37cad0\n   2:     0x7ffc3e95143b - core::fmt::write::hef4555c5285e005b\n   3:     0x7ffc3e8ef2aa - std::io::Write::write_fmt::h9ea304efc4781c26\n   4:     0x7ffc3e90059b - std::sys_common::backtrace::print::h7b33cd350eefb143\n......\n 178:     0x7ffc27d6a3f2 - <&mut serde_json[7222a1897944c7c8]::ser::Serializer<&mut alloc[6a6f6c0f0cd9fa15]::vec::Vec<u8>, serde_json[7222a1897944c7c8]::ser::PrettyFormatter> as serde[d3e6684f4f38fcf7]::ser::Serializer>::collect_seq::<&alloc[6a6f6c0f0cd9fa15]::vec::Vec<serde_json[7222a1897944c7c8]::value::Value>>\n 179:     0x7ffc3e8ed9ec - std::sys::windows::thread::Thread::new::thread_start::h5be4f069fac1a629\n 180:     0x7ffcb0b37614 - BaseThreadInitThunk\n 181:     0x7ffcb18c26a1 - RtlUserThreadStart\n\nerror: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.70.0-dev running on x86_64-pc-windows-msvc\n\nnote: compiler flags: -Z threads=1 -C codegen-units=1 -Z ui-testing -Z simulate-remapped-rust-src-base=/rustc/FAKE_PREFIX -Z translate-remapped-path-to-local-path=no -Z deduplicate-diagnostics=no -C strip=debuginfo -C prefer-dynamic -C rpath -C debuginfo=0 -C opt-level=0\n\nquery stack during panic:\nthread 'rustc' panicked at 'type variables should not be hashed: _#0t', D:\\rust-backup\\parallel_rust\\rust-para\\compiler\\rustc_type_ir\\src\\lib.rs:718:17\nstack backtrace:\n   0:     0x7ffc3e90bc05 - std::backtrace_rs::backtrace::trace_unsynchronized::hfabb14c555fa1e54\n   1:     0x7ffc3e900799 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h88786f2c1c37cad0\n   2:     0x7ffc3e95143b - core::fmt::write::hef4555c5285e005b\n   3:     0x7ffc3e8ef2aa - std::io::Write::write_fmt::h9ea304efc4781c26\n   4:     0x7ffc3e90059b - std::sys_common::backtrace::print::h7b33cd350eefb143\n   5:     0x7ffc3e91c109 - std::panicking::default_hook::h12f01c5f2b8959c6\n......\n 197:     0x7ffc27d6a3f2 - <&mut serde_json[7222a1897944c7c8]::ser::Serializer<&mut alloc[6a6f6c0f0cd9fa15]::vec::Vec<u8>, serde_json[7222a1897944c7c8]::ser::PrettyFormatter> as serde[d3e6684f4f38fcf7]::ser::Serializer>::collect_seq::<&alloc[6a6f6c0f0cd9fa15]::vec::Vec<serde_json[7222a1897944c7c8]::value::Value>>\n 198:     0x7ffc3e8ed9ec - std::sys::windows::thread::Thread::new::thread_start::h5be4f069fac1a629\n 199:     0x7ffcb0b37614 - BaseThreadInitThunk\n 200:     0x7ffcb18c26a1 - RtlUserThreadStart\n\nerror: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.70.0-dev running on x86_64-pc-windows-msvc\n\nnote: compiler flags: -Z threads=1 -C codegen-units=1 -Z ui-testing -Z simulate-remapped-rust-src-base=/rustc/FAKE_PREFIX -Z translate-remapped-path-to-local-path=no -Z deduplicate-diagnostics=no -C strip=debuginfo -C prefer-dynamic -C rpath -C debuginfo=0 -C opt-level=0\n\nquery stack during panic:\nthread panicked while processing panic. aborting.\n------------------------------------------\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3473f734bddb895bdbde82d4633432ad8833d95f", "html_url": "https://github.com/rust-lang/rust/commit/3473f734bddb895bdbde82d4633432ad8833d95f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3473f734bddb895bdbde82d4633432ad8833d95f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696", "html_url": "https://github.com/rust-lang/rust/commit/4ecfb7fc04ddb3dd03e0794d54ed7595ad7fe696"}, {"sha": "ded048398f36c6bc15c71b1be270cc91c418935e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ded048398f36c6bc15c71b1be270cc91c418935e", "html_url": "https://github.com/rust-lang/rust/commit/ded048398f36c6bc15c71b1be270cc91c418935e"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "735351fbf605fb02df1df7a5329902154e0e989e", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3473f734bddb895bdbde82d4633432ad8833d95f/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3473f734bddb895bdbde82d4633432ad8833d95f/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=3473f734bddb895bdbde82d4633432ad8833d95f", "patch": "@@ -144,6 +144,8 @@ pub struct TestProps {\n     pub normalize_stdout: Vec<(String, String)>,\n     pub normalize_stderr: Vec<(String, String)>,\n     pub failure_status: i32,\n+    // For UI tests, allows compiler to exit with arbitrary failure status\n+    pub dont_check_failure_status: bool,\n     // Whether or not `rustfix` should apply the `CodeSuggestion`s of this test and compile the\n     // resulting Rust code.\n     pub run_rustfix: bool,\n@@ -186,6 +188,7 @@ mod directives {\n     pub const CHECK_TEST_LINE_NUMBERS_MATCH: &'static str = \"check-test-line-numbers-match\";\n     pub const IGNORE_PASS: &'static str = \"ignore-pass\";\n     pub const FAILURE_STATUS: &'static str = \"failure-status\";\n+    pub const DONT_CHECK_FAILURE_STATUS: &'static str = \"dont-check-failure-status\";\n     pub const RUN_RUSTFIX: &'static str = \"run-rustfix\";\n     pub const RUSTFIX_ONLY_MACHINE_APPLICABLE: &'static str = \"rustfix-only-machine-applicable\";\n     pub const ASSEMBLY_OUTPUT: &'static str = \"assembly-output\";\n@@ -233,6 +236,7 @@ impl TestProps {\n             normalize_stdout: vec![],\n             normalize_stderr: vec![],\n             failure_status: -1,\n+            dont_check_failure_status: false,\n             run_rustfix: false,\n             rustfix_only_machine_applicable: false,\n             assembly_output: None,\n@@ -395,6 +399,12 @@ impl TestProps {\n                     self.failure_status = code;\n                 }\n \n+                config.set_name_directive(\n+                    ln,\n+                    DONT_CHECK_FAILURE_STATUS,\n+                    &mut self.dont_check_failure_status,\n+                );\n+\n                 config.set_name_directive(ln, RUN_RUSTFIX, &mut self.run_rustfix);\n                 config.set_name_directive(\n                     ln,"}, {"sha": "a35284f05b540d38d0dbadf7c8c706a499f8146c", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3473f734bddb895bdbde82d4633432ad8833d95f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3473f734bddb895bdbde82d4633432ad8833d95f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=3473f734bddb895bdbde82d4633432ad8833d95f", "patch": "@@ -310,7 +310,9 @@ impl<'test> TestCx<'test> {\n                 );\n             }\n \n-            self.check_correct_failure_status(proc_res);\n+            if !self.props.dont_check_failure_status {\n+                self.check_correct_failure_status(proc_res);\n+            }\n         }\n     }\n "}, {"sha": "2f1cffa2fa90721bac14994ce85eb554dcea02ea", "filename": "tests/ui/recursion/issue-95134.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3473f734bddb895bdbde82d4633432ad8833d95f/tests%2Fui%2Frecursion%2Fissue-95134.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3473f734bddb895bdbde82d4633432ad8833d95f/tests%2Fui%2Frecursion%2Fissue-95134.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frecursion%2Fissue-95134.rs?ref=3473f734bddb895bdbde82d4633432ad8833d95f", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // known-bug: #95134\n // compile-flags: -Copt-level=0\n-// failure-status: 101\n+// dont-check-failure-status\n // dont-check-compiler-stderr\n \n pub fn encode_num<Writer: ExampleWriter>(n: u32, mut writer: Writer) -> Result<(), Writer::Error> {"}]}