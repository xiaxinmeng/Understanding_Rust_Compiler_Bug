{"sha": "ed8f5039115308ca9d5591126e4d8a77864d4730", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkOGY1MDM5MTE1MzA4Y2E5ZDU1OTExMjZlNGQ4YTc3ODY0ZDQ3MzA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-18T04:55:04Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-30T00:06:24Z"}, "message": "Add hypothetical support for ranges with only an upper bound\n\nNote that this doesn't add the surface syntax.", "tree": {"sha": "fef6c67dd64068ff73c4509d078d25ba88fa4f21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fef6c67dd64068ff73c4509d078d25ba88fa4f21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed8f5039115308ca9d5591126e4d8a77864d4730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed8f5039115308ca9d5591126e4d8a77864d4730", "html_url": "https://github.com/rust-lang/rust/commit/ed8f5039115308ca9d5591126e4d8a77864d4730", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed8f5039115308ca9d5591126e4d8a77864d4730/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71123902e17ad339649f33423995eac78da40e3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/71123902e17ad339649f33423995eac78da40e3c", "html_url": "https://github.com/rust-lang/rust/commit/71123902e17ad339649f33423995eac78da40e3c"}], "stats": {"total": 121, "additions": 81, "deletions": 40}, "files": [{"sha": "f6b79ccc42b01d3592031a3fed57571947f5470b", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=ed8f5039115308ca9d5591126e4d8a77864d4730", "patch": "@@ -908,6 +908,14 @@ impl<Idx: Clone + Step> Iterator<Idx> for RangeFrom<Idx> {\n     }\n }\n \n+/// A range which is only bounded above.\n+#[deriving(Copy)]\n+#[lang=\"range_to\"]\n+pub struct RangeTo<Idx> {\n+    /// The upper bound of the range (exclusive).\n+    pub end: Idx,\n+}\n+\n \n /// The `Deref` trait is used to specify the functionality of dereferencing\n /// operations like `*v`."}, {"sha": "3c8a6d480f74e7da26b0fbdac6153b180b6823c8", "filename": "src/libcoretest/ops.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibcoretest%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibcoretest%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fops.rs?ref=ed8f5039115308ca9d5591126e4d8a77864d4730", "patch": "@@ -55,6 +55,12 @@ fn test_range_from() {\n     assert!(count == 10);\n }\n \n+#[test]\n+fn test_range_to() {\n+    // Not much to test.\n+    let _ = RangeTo { end: 42u };\n+}\n+\n #[test]\n fn test_full_range() {\n     // Not much to test."}, {"sha": "540f8a20dde2d1773b31311bfcf04426e33f8522", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=ed8f5039115308ca9d5591126e4d8a77864d4730", "patch": "@@ -440,7 +440,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             }\n \n             ast::ExprRange(ref start, ref end) => {\n-                let fields = Some(&**start).into_iter()\n+                let fields = start.as_ref().map(|e| &**e).into_iter()\n                     .chain(end.as_ref().map(|e| &**e).into_iter());\n                 self.straightline(expr, pred, fields)\n             }"}, {"sha": "f564e5cfefbab2f4ec9b2c048b7269e5272a7174", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=ed8f5039115308ca9d5591126e4d8a77864d4730", "patch": "@@ -450,7 +450,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n             }\n \n             ast::ExprRange(ref start, ref end) => {\n-                self.consume_expr(&**start);\n+                start.as_ref().map(|e| self.consume_expr(&**e));\n                 end.as_ref().map(|e| self.consume_expr(&**e));\n             }\n "}, {"sha": "2aef43071992398eefc9197c2c8053e7e302b5dd", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=ed8f5039115308ca9d5591126e4d8a77864d4730", "patch": "@@ -269,6 +269,7 @@ lets_do_this! {\n     SliceMutTraitLangItem,           \"slice_mut\",               slice_mut_trait;\n     RangeStructLangItem,             \"range\",                   range_struct;\n     RangeFromStructLangItem,         \"range_from\",              range_from_struct;\n+    RangeToStructLangItem,           \"range_to\",                range_to_struct;\n     FullRangeStructLangItem,         \"full_range\",              full_range_struct;\n \n     UnsafeTypeLangItem,              \"unsafe\",                  unsafe_type;"}, {"sha": "cbd34c7f25816e5a2063fe268a8fe4baa081eef7", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=ed8f5039115308ca9d5591126e4d8a77864d4730", "patch": "@@ -1199,7 +1199,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n           ast::ExprRange(ref e1, ref e2) => {\n             let succ = e2.as_ref().map_or(succ, |e| self.propagate_through_expr(&**e, succ));\n-            self.propagate_through_expr(&**e1, succ)\n+            e1.as_ref().map_or(succ, |e| self.propagate_through_expr(&**e, succ))\n           }\n \n           ast::ExprBox(None, ref e) |"}, {"sha": "0b0a5ecb59e1b6197c815d07a74589cf1889725e", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=ed8f5039115308ca9d5591126e4d8a77864d4730", "patch": "@@ -3546,7 +3546,7 @@ fn create_scope_map(cx: &CrateContext,\n             }\n \n             ast::ExprRange(ref start, ref end) => {\n-                walk_expr(cx, &**start, scope_stack, scope_map);\n+                start.as_ref().map(|e| walk_expr(cx, &**e, scope_stack, scope_map));\n                 end.as_ref().map(|e| walk_expr(cx, &**e, scope_stack, scope_map));\n             }\n "}, {"sha": "7c4788a29efe443e4fede4f6f2f4bd6409168a22", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=ed8f5039115308ca9d5591126e4d8a77864d4730", "patch": "@@ -1064,22 +1064,34 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             }\n \n             // A range just desugars into a struct.\n-            let (did, fields) = match end {\n-                &Some(ref end) => {\n+            // Note that the type of the start and end may not be the same, but\n+            // they should only differ in their lifetime, which should not matter\n+            // in trans.\n+            let (did, fields, ty_params) = match (start, end) {\n+                (&Some(ref start), &Some(ref end)) => {\n                     // Desugar to Range\n                     let fields = vec!(make_field(\"start\", start.clone()),\n                                       make_field(\"end\", end.clone()));\n-                    (tcx.lang_items.range_struct(), fields)\n+                    (tcx.lang_items.range_struct(), fields, vec![node_id_type(bcx, start.id)])\n                 }\n-                &None => {\n+                (&Some(ref start), &None) => {\n                     // Desugar to RangeFrom\n                     let fields = vec!(make_field(\"start\", start.clone()));\n-                    (tcx.lang_items.range_from_struct(), fields)\n+                    (tcx.lang_items.range_from_struct(), fields, vec![node_id_type(bcx, start.id)])\n+                }\n+                (&None, &Some(ref end)) => {\n+                    // Desugar to RangeTo\n+                    let fields = vec!(make_field(\"end\", end.clone()));\n+                    (tcx.lang_items.range_to_struct(), fields, vec![node_id_type(bcx, end.id)])\n+                }\n+                _ => {\n+                    // Desugar to FullRange\n+                    (tcx.lang_items.full_range_struct(), vec![], vec![])\n                 }\n             };\n \n             if let Some(did) = did {\n-                let substs = Substs::new_type(vec![node_id_type(bcx, start.id)], vec![]);\n+                let substs = Substs::new_type(ty_params, vec![]);\n                 trans_struct(bcx,\n                              fields.as_slice(),\n                              None,"}, {"sha": "b677fb1af92eb7ee2498d3dd796ae5fcc5414a3a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 37, "deletions": 25, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ed8f5039115308ca9d5591126e4d8a77864d4730", "patch": "@@ -4308,46 +4308,58 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n           }\n        }\n        ast::ExprRange(ref start, ref end) => {\n-          check_expr(fcx, &**start);\n-          let t_start = fcx.expr_ty(&**start);\n-\n-          let idx_type = if let &Some(ref e) = end {\n+          let t_start = start.as_ref().map(|e| {\n             check_expr(fcx, &**e);\n-            let t_end = fcx.expr_ty(&**e);\n-            if ty::type_is_error(t_end) {\n-                ty::mk_err()\n-            } else if t_start == ty::mk_err() {\n-                ty::mk_err()\n-            } else {\n-                infer::common_supertype(fcx.infcx(),\n-                                        infer::RangeExpression(expr.span),\n-                                        true,\n-                                        t_start,\n-                                        t_end)\n+            fcx.expr_ty(&**e)\n+          });\n+          let t_end = end.as_ref().map(|e| {\n+            check_expr(fcx, &**e);\n+            fcx.expr_ty(&**e)\n+          });\n+\n+          let idx_type = match (t_start, t_end) {\n+            (Some(ty), None) | (None, Some(ty)) => Some(ty),\n+            (Some(t_start), Some(t_end)) if t_start == ty::mk_err() || t_end == ty::mk_err() => {\n+                Some(ty::mk_err())\n             }\n-          } else {\n-            t_start\n+            (Some(t_start), Some(t_end)) => {\n+                Some(infer::common_supertype(fcx.infcx(),\n+                                             infer::RangeExpression(expr.span),\n+                                             true,\n+                                             t_start,\n+                                             t_end))\n+            }\n+            _ => None\n           };\n \n           // Note that we don't check the type of start/end satisfy any\n           // bounds because right the range structs do not have any. If we add\n           // some bounds, then we'll need to check `t_start` against them here.\n \n-          let range_type = if idx_type == ty::mk_err() {\n+          let range_type = if idx_type == Some(ty::mk_err()) {\n             ty::mk_err()\n+          } else if idx_type.is_none() {\n+            // Neither start nor end => FullRange\n+            if let Some(did) = tcx.lang_items.full_range_struct() {\n+                let substs = Substs::new_type(vec![], vec![]);\n+                ty::mk_struct(tcx, did, substs)\n+            } else {\n+                ty::mk_err()\n+            }\n           } else {\n             // Find the did from the appropriate lang item.\n-            let did = if end.is_some() {\n-                // Range\n-                tcx.lang_items.range_struct()\n-            } else {\n-                // RangeFrom\n-                tcx.lang_items.range_from_struct()\n+            let did = match (start, end) {\n+                (&Some(_), &Some(_)) => tcx.lang_items.range_struct(),\n+                (&Some(_), &None) => tcx.lang_items.range_from_struct(),\n+                (&None, &Some(_)) => tcx.lang_items.range_to_struct(),\n+                (&None, &None) => {\n+                    tcx.sess.span_bug(expr.span,\"full range should be dealt with above\")\n+                }\n             };\n \n             if let Some(did) = did {\n                 let polytype = ty::lookup_item_type(tcx, did);\n-                let substs = Substs::new_type(vec![idx_type], vec![]);\n+                let substs = Substs::new_type(vec![idx_type.unwrap()], vec![]);\n                 let bounds = polytype.generics.to_bounds(tcx, &substs);\n                 fcx.add_obligations_for_parameters(\n                     traits::ObligationCause::new(expr.span,"}, {"sha": "e53e2cea1ccabf86d3c0940b9ea31b82d4562bf8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ed8f5039115308ca9d5591126e4d8a77864d4730", "patch": "@@ -724,7 +724,7 @@ pub enum Expr_ {\n     ExprTupField(P<Expr>, Spanned<uint>),\n     ExprIndex(P<Expr>, P<Expr>),\n     ExprSlice(P<Expr>, Option<P<Expr>>, Option<P<Expr>>, Mutability),\n-    ExprRange(P<Expr>, Option<P<Expr>>),\n+    ExprRange(Option<P<Expr>>, Option<P<Expr>>),\n \n     /// Variable reference, possibly containing `::` and/or\n     /// type parameters, e.g. foo::bar::<baz>"}, {"sha": "ede023c4e8bbc6298a1a328b92ce56928cc5a542", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=ed8f5039115308ca9d5591126e4d8a77864d4730", "patch": "@@ -1391,7 +1391,7 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                           m)\n             }\n             ExprRange(e1, e2) => {\n-                ExprRange(folder.fold_expr(e1),\n+                ExprRange(e1.map(|x| folder.fold_expr(x)),\n                           e2.map(|x| folder.fold_expr(x)))\n             }\n             ExprPath(pth) => ExprPath(folder.fold_path(pth)),"}, {"sha": "ec1e966926a3b9360bc06e5676756431116ce43f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ed8f5039115308ca9d5591126e4d8a77864d4730", "patch": "@@ -2144,7 +2144,7 @@ impl<'a> Parser<'a> {\n                     start: P<Expr>,\n                     end: Option<P<Expr>>)\n                     -> ast::Expr_ {\n-        ExprRange(start, end)\n+        ExprRange(Some(start), end)\n     }\n \n     pub fn mk_field(&mut self, expr: P<Expr>, ident: ast::SpannedIdent) -> ast::Expr_ {"}, {"sha": "a4b349c5f23ecd4bb07e993ed329f60f3087a746", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ed8f5039115308ca9d5591126e4d8a77864d4730", "patch": "@@ -1760,7 +1760,9 @@ impl<'a> State<'a> {\n                 try!(word(&mut self.s, \"]\"));\n             }\n             ast::ExprRange(ref start, ref end) => {\n-                try!(self.print_expr(&**start));\n+                if let &Some(ref e) = start {\n+                    try!(self.print_expr(&**e));\n+                }\n                 try!(word(&mut self.s, \"..\"));\n                 if let &Some(ref e) = end {\n                     try!(self.print_expr(&**e));"}, {"sha": "cde9ba932be3348d8211935762f1f636fcbbceae", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8f5039115308ca9d5591126e4d8a77864d4730/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=ed8f5039115308ca9d5591126e4d8a77864d4730", "patch": "@@ -872,7 +872,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             walk_expr_opt(visitor, end)\n         }\n         ExprRange(ref start, ref end) => {\n-            visitor.visit_expr(&**start);\n+            walk_expr_opt(visitor, start);\n             walk_expr_opt(visitor, end)\n         }\n         ExprPath(ref path) => {"}]}