{"sha": "0c736e92a3575927d693b839f7ab537db7d6f84e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNzM2ZTkyYTM1NzU5MjdkNjkzYjgzOWY3YWI1MzdkYjdkNmY4NGU=", "commit": {"author": {"name": "Tor Hovland", "email": "tor.hovland@bekk.no", "date": "2021-04-05T18:57:49Z"}, "committer": {"name": "Tor Hovland", "email": "tor.hovland@bekk.no", "date": "2021-04-18T08:45:22Z"}, "message": "Add stability tags to ImportItem.", "tree": {"sha": "e9439e2d6954431adc633a2c4d3856fdeb2e9cbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9439e2d6954431adc633a2c4d3856fdeb2e9cbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c736e92a3575927d693b839f7ab537db7d6f84e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c736e92a3575927d693b839f7ab537db7d6f84e", "html_url": "https://github.com/rust-lang/rust/commit/0c736e92a3575927d693b839f7ab537db7d6f84e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c736e92a3575927d693b839f7ab537db7d6f84e/comments", "author": null, "committer": null, "parents": [{"sha": "67650104959003d1a5828f8d79ad72aa08752055", "url": "https://api.github.com/repos/rust-lang/rust/commits/67650104959003d1a5828f8d79ad72aa08752055", "html_url": "https://github.com/rust-lang/rust/commit/67650104959003d1a5828f8d79ad72aa08752055"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "e2c7a244064587ffc6a553a338bdb1525718170e", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0c736e92a3575927d693b839f7ab537db7d6f84e/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c736e92a3575927d693b839f7ab537db7d6f84e/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=0c736e92a3575927d693b839f7ab537db7d6f84e", "patch": "@@ -282,11 +282,29 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n             }\n \n             clean::ImportItem(ref import) => {\n+                let (stab, stab_tags) = if let Some(def_id) = import.source.did {\n+                    // Just need an item with the correct def_id\n+                    let import_item = clean::Item { def_id, ..myitem.clone() };\n+                    let stab = import_item.stability_class(cx.tcx());\n+                    let stab_tags = Some(extra_info_tags(&import_item, item, cx.tcx()));\n+                    (stab, stab_tags)\n+                } else {\n+                    (None, None)\n+                };\n+\n+                let add = if stab.is_some() { \" \" } else { \"\" };\n+\n                 write!(\n                     w,\n-                    \"<tr><td><code>{}{}</code></td></tr>\",\n-                    myitem.visibility.print_with_space(myitem.def_id, cx),\n-                    import.print(cx),\n+                    \"<tr class=\\\"{stab}{add}module-item\\\">\\\n+                         <td><code>{vis}{imp}</code></td>\\\n+                         <td class=\\\"docblock-short\\\">{stab_tags}</td>\\\n+                     </tr>\",\n+                    stab = stab.unwrap_or_default(),\n+                    add = add,\n+                    vis = myitem.visibility.print_with_space(myitem.def_id, cx),\n+                    imp = import.print(cx),\n+                    stab_tags = stab_tags.unwrap_or_default(),\n                 );\n             }\n \n@@ -320,7 +338,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                     docs = MarkdownSummaryLine(&doc_value, &myitem.links(cx)).into_string(),\n                     class = myitem.type_(),\n                     add = add,\n-                    stab = stab.unwrap_or_else(String::new),\n+                    stab = stab.unwrap_or_default(),\n                     unsafety_flag = unsafety_flag,\n                     href = item_path(myitem.type_(), &myitem.name.unwrap().as_str()),\n                     title = [full_path(cx, myitem), myitem.type_().to_string()]"}]}