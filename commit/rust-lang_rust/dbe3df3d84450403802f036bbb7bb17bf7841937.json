{"sha": "dbe3df3d84450403802f036bbb7bb17bf7841937", "node_id": "C_kwDOAAsO6NoAKGRiZTNkZjNkODQ0NTA0MDM4MDJmMDM2YmJiN2JiMTdiZjc4NDE5Mzc", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-10-22T09:07:54Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-01T00:18:41Z"}, "message": "Migrate all diagnostics", "tree": {"sha": "fe732a02982258cb5a19cb077d03f6855a2a06c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe732a02982258cb5a19cb077d03f6855a2a06c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbe3df3d84450403802f036bbb7bb17bf7841937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe3df3d84450403802f036bbb7bb17bf7841937", "html_url": "https://github.com/rust-lang/rust/commit/dbe3df3d84450403802f036bbb7bb17bf7841937", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbe3df3d84450403802f036bbb7bb17bf7841937/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "affe23bc3bf80ab00e3b32fea628846455028f48", "url": "https://api.github.com/repos/rust-lang/rust/commits/affe23bc3bf80ab00e3b32fea628846455028f48", "html_url": "https://github.com/rust-lang/rust/commit/affe23bc3bf80ab00e3b32fea628846455028f48"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "15ad90f9043c0643f3fd34053c4210394c5f8b5a", "filename": "src/errors.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/dbe3df3d84450403802f036bbb7bb17bf7841937/src%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe3df3d84450403802f036bbb7bb17bf7841937/src%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferrors.rs?ref=dbe3df3d84450403802f036bbb7bb17bf7841937", "patch": "@@ -17,7 +17,7 @@ impl IntoDiagnosticArg for ExitCode {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::ranlib_failure)]\n+#[diag(codegen_gcc_ranlib_failure)]\n pub(crate) struct RanlibFailure {\n     exit_code: ExitCode,\n }\n@@ -29,7 +29,7 @@ impl RanlibFailure {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_basic_integer, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_basic_integer, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationBasicInteger<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -38,7 +38,7 @@ pub(crate) struct InvalidMonomorphizationBasicInteger<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_invalid_float_vector, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_invalid_float_vector, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationInvalidFloatVector<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -48,7 +48,7 @@ pub(crate) struct InvalidMonomorphizationInvalidFloatVector<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_not_float, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_not_float, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationNotFloat<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -57,15 +57,15 @@ pub(crate) struct InvalidMonomorphizationNotFloat<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_unrecognized, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_unrecognized, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationUnrecognized {\n     #[primary_span]\n     pub span: Span,\n     pub name: Symbol,\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_expected_signed_unsigned, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_expected_signed_unsigned, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationExpectedSignedUnsigned<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -75,7 +75,7 @@ pub(crate) struct InvalidMonomorphizationExpectedSignedUnsigned<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_unsupported_element, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_unsupported_element, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationUnsupportedElement<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -86,7 +86,7 @@ pub(crate) struct InvalidMonomorphizationUnsupportedElement<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_invalid_bitmask, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_invalid_bitmask, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationInvalidBitmask<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -97,7 +97,7 @@ pub(crate) struct InvalidMonomorphizationInvalidBitmask<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_simd_shuffle, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_simd_shuffle, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationSimdShuffle<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -106,7 +106,7 @@ pub(crate) struct InvalidMonomorphizationSimdShuffle<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_expected_simd, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_expected_simd, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationExpectedSimd<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -116,7 +116,7 @@ pub(crate) struct InvalidMonomorphizationExpectedSimd<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_mask_type, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_mask_type, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationMaskType<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -125,7 +125,7 @@ pub(crate) struct InvalidMonomorphizationMaskType<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_return_length, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_return_length, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationReturnLength<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -136,7 +136,7 @@ pub(crate) struct InvalidMonomorphizationReturnLength<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_return_length_input_type, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_return_length_input_type, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationReturnLengthInputType<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -148,7 +148,7 @@ pub(crate) struct InvalidMonomorphizationReturnLengthInputType<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_return_element, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_return_element, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationReturnElement<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -160,7 +160,7 @@ pub(crate) struct InvalidMonomorphizationReturnElement<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_return_type, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_return_type, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationReturnType<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -171,7 +171,7 @@ pub(crate) struct InvalidMonomorphizationReturnType<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_inserted_type, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_inserted_type, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationInsertedType<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -182,7 +182,7 @@ pub(crate) struct InvalidMonomorphizationInsertedType<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_return_integer_type, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_return_integer_type, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationReturnIntegerType<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -192,7 +192,7 @@ pub(crate) struct InvalidMonomorphizationReturnIntegerType<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_mismatched_lengths, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_mismatched_lengths, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationMismatchedLengths {\n     #[primary_span]\n     pub span: Span,\n@@ -202,7 +202,7 @@ pub(crate) struct InvalidMonomorphizationMismatchedLengths {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_unsupported_cast, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_unsupported_cast, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationUnsupportedCast<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -214,7 +214,7 @@ pub(crate) struct InvalidMonomorphizationUnsupportedCast<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::invalid_monomorphization_unsupported_operation, code = \"E0511\")]\n+#[diag(codegen_gcc_invalid_monomorphization_unsupported_operation, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationUnsupportedOperation<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -224,18 +224,18 @@ pub(crate) struct InvalidMonomorphizationUnsupportedOperation<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::linkage_const_or_mut_type)]\n+#[diag(codegen_gcc_linkage_const_or_mut_type)]\n pub(crate) struct LinkageConstOrMutType {\n     #[primary_span]\n     pub span: Span\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::lto_not_supported)]\n+#[diag(codegen_gcc_lto_not_supported)]\n pub(crate) struct LTONotSupported;\n \n #[derive(Diagnostic)]\n-#[diag(codegen_gcc::unwinding_inline_asm)]\n+#[diag(codegen_gcc_unwinding_inline_asm)]\n pub(crate) struct UnwindingInlineAsm {\n     #[primary_span]\n     pub span: Span"}]}