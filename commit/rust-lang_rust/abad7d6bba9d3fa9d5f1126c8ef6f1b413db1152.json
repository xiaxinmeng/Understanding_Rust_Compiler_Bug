{"sha": "abad7d6bba9d3fa9d5f1126c8ef6f1b413db1152", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYWQ3ZDZiYmE5ZDNmYTlkNWYxMTI2YzhlZjZmMWI0MTNkYjExNTI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-22T21:23:36Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-22T21:23:36Z"}, "message": "placate `make tidy`.", "tree": {"sha": "4fe8116a02df05b5042aa9f1b9e00dd680e5cd40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fe8116a02df05b5042aa9f1b9e00dd680e5cd40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abad7d6bba9d3fa9d5f1126c8ef6f1b413db1152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abad7d6bba9d3fa9d5f1126c8ef6f1b413db1152", "html_url": "https://github.com/rust-lang/rust/commit/abad7d6bba9d3fa9d5f1126c8ef6f1b413db1152", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abad7d6bba9d3fa9d5f1126c8ef6f1b413db1152/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "505cd8a3cc9ddc89ff766a07cc90797421296d34", "url": "https://api.github.com/repos/rust-lang/rust/commits/505cd8a3cc9ddc89ff766a07cc90797421296d34", "html_url": "https://github.com/rust-lang/rust/commit/505cd8a3cc9ddc89ff766a07cc90797421296d34"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "1d466895f2cfbb826287d677017ebc5b0fc7413e", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abad7d6bba9d3fa9d5f1126c8ef6f1b413db1152/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abad7d6bba9d3fa9d5f1126c8ef6f1b413db1152/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=abad7d6bba9d3fa9d5f1126c8ef6f1b413db1152", "patch": "@@ -190,7 +190,7 @@ extern \"rust-intrinsic\" {\n     /// Drop glue is not run on the destination.\n     pub fn move_val_init<T>(dst: *mut T, src: T);\n \n-    // SNAP ba0e1cd\n+    // SNAP d4432b3\n     #[cfg(stage0)]\n     /// Moves a value to an uninitialized memory location.\n     ///"}, {"sha": "c229ac31fc029a21224dac62b625288d473c5ad4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abad7d6bba9d3fa9d5f1126c8ef6f1b413db1152/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abad7d6bba9d3fa9d5f1126c8ef6f1b413db1152/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=abad7d6bba9d3fa9d5f1126c8ef6f1b413db1152", "patch": "@@ -2638,7 +2638,7 @@ impl<'a> Parser<'a> {\n             // ... but for now: check for a place: `box(PLACE) EXPR`.\n \n             if try!(self.eat(&token::OpenDelim(token::Paren)) ){\n-                // SNAP ba0e1cd\n+                // SNAP d4432b3\n                 // Enable this warning after snapshot ...\n                 //\n                 // let box_span = mk_sp(lo, self.last_span.hi);\n@@ -2659,9 +2659,15 @@ impl<'a> Parser<'a> {\n                         self.span_err(span,\n                                       &format!(\"expected expression, found `{}`\",\n                                               this_token_to_string));\n+\n+                        // Spanning just keyword avoids constructing\n+                        // printout of arg expression (which starts\n+                        // with parenthesis, as established above).\n+\n                         let box_span = mk_sp(lo, keyword_hi);\n-                        let new_expr = format!(\"box () {}\", pprust::expr_to_string(&place));\n-                        self.span_suggestion(box_span, \"try using `box ()` instead:\", new_expr);\n+                        self.span_suggestion(box_span,\n+                                             \"try using `box ()` instead:\",\n+                                             format!(\"box ()\"));\n                         self.abort_if_errors();\n                     }\n                     let subexpression = try!(self.parse_prefix_expr());"}]}