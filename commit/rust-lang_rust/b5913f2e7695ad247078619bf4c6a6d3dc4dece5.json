{"sha": "b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1OTEzZjJlNzY5NWFkMjQ3MDc4NjE5YmY0YzZhNmQzZGM0ZGVjZTU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-27T19:09:36Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-15T08:58:01Z"}, "message": "Stabilize `inclusive_range` library feature.\n\nStabilize std::ops::RangeInclusive and std::ops::RangeInclusiveTo.", "tree": {"sha": "95642d12996af9c8beffd55721c629b5ab8fd5ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95642d12996af9c8beffd55721c629b5ab8fd5ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqqNZkACgkQ/vbIBR0O\nATwD0A//b1q66pnlC5+sbAc14KwcY8QSHAKtAO/vvbdYdBp0LBB5ISTw37v3kOro\nlTnMZIppPR49qnvGuPH3iCBsflLDtux0FBfykQ8xh4bMwJRemACiGnZYknuAugi7\nzRxKExBy7Mh5+me1OaeqnIPCEbn7GpesOR9FTTMOwVb0zWtOy1GMcBWs7YMUzFpt\neaxuQQddHwOsElnyLU7gglqVEILmE96mGjbDXHOeXYwWIAkri4SendXvMuASHIak\n5SipzriG4vmU7bU2mwkXjdOVaxtNfwSlo47iIFObsm/uyoFjpeYqI9i4XeS6g/om\nwZeQtybncWYPlABauMNoLrPFIv8iS96R8OwsRHSysf0sETL8AwXFs9omgXEVHkCa\nt0e/t6o3t7rc5bAVLmsATA4NECfJB6hoyug5hvLh/Kp+4Gj6qxlnbQ33+qCCYVLk\npoYvf/5ikYJKo90xZGILqSILuDxqvV4mri6STNN7PYWl+nOjCMQY5KbiktzCvXJo\ncMEsdxxySfVO1vY87hcqQ43m7T3vTJRmmDZEjf4YCFYwFogf7SdaWJxEas+tTHAl\nB/UFY9tvPzfqpYGGwAFckpG8Xkq1r+ep5jNpEujIv43YtreU3MX1+MkltHH0xi3+\n0q6hU91EOQtieV6E9114QRX2zu2CFoQVYy1qW8OgV08Vuk9iYps=\n=AY4L\n-----END PGP SIGNATURE-----", "payload": "tree 95642d12996af9c8beffd55721c629b5ab8fd5ff\nparent 5ebf74851d685f75abec7ef4e805f75fc301460c\nauthor kennytm <kennytm@gmail.com> 1517080176 +0800\ncommitter kennytm <kennytm@gmail.com> 1521104281 +0800\n\nStabilize `inclusive_range` library feature.\n\nStabilize std::ops::RangeInclusive and std::ops::RangeInclusiveTo.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "html_url": "https://github.com/rust-lang/rust/commit/b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ebf74851d685f75abec7ef4e805f75fc301460c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebf74851d685f75abec7ef4e805f75fc301460c", "html_url": "https://github.com/rust-lang/rust/commit/5ebf74851d685f75abec7ef4e805f75fc301460c"}], "stats": {"total": 119, "additions": 33, "deletions": 86}, "files": [{"sha": "cbfec5546049c671d0daff4e9399a04eb2c44170", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -98,7 +98,6 @@\n #![feature(fundamental)]\n #![feature(generic_param_attrs)]\n #![feature(i128_type)]\n-#![feature(inclusive_range)]\n #![feature(iter_rfold)]\n #![feature(lang_items)]\n #![feature(needs_allocator)]"}, {"sha": "b03abc8518087addd1b7d8976c3a0a1f45e06ca8", "filename": "src/liballoc/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Fliballoc%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Fliballoc%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frange.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -103,7 +103,7 @@ impl<T> RangeArgument<T> for Range<T> {\n     }\n }\n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<T> RangeArgument<T> for RangeInclusive<T> {\n     fn start(&self) -> Bound<&T> {\n         Included(&self.start)\n@@ -113,7 +113,7 @@ impl<T> RangeArgument<T> for RangeInclusive<T> {\n     }\n }\n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<T> RangeArgument<T> for RangeToInclusive<T> {\n     fn start(&self) -> Bound<&T> {\n         Unbounded"}, {"sha": "185fb61ae9e1473c1454f8f8e851fbe2c8e3969a", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -1876,7 +1876,7 @@ impl ops::Index<ops::RangeFull> for String {\n         unsafe { str::from_utf8_unchecked(&self.vec) }\n     }\n }\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl ops::Index<ops::RangeInclusive<usize>> for String {\n     type Output = str;\n \n@@ -1885,7 +1885,7 @@ impl ops::Index<ops::RangeInclusive<usize>> for String {\n         Index::index(&**self, index)\n     }\n }\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl ops::Index<ops::RangeToInclusive<usize>> for String {\n     type Output = str;\n \n@@ -1923,14 +1923,14 @@ impl ops::IndexMut<ops::RangeFull> for String {\n         unsafe { str::from_utf8_unchecked_mut(&mut *self.vec) }\n     }\n }\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl ops::IndexMut<ops::RangeInclusive<usize>> for String {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeInclusive<usize>) -> &mut str {\n         IndexMut::index_mut(&mut **self, index)\n     }\n }\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl ops::IndexMut<ops::RangeToInclusive<usize>> for String {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut str {"}, {"sha": "8d1080bb876efdfb164c8c09def52961a3d0b756", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -186,9 +186,7 @@ macro_rules! range_exact_iter_impl {\n \n macro_rules! range_incl_exact_iter_impl {\n     ($($t:ty)*) => ($(\n-        #[unstable(feature = \"inclusive_range\",\n-                   reason = \"recently added, follows RFC\",\n-                   issue = \"28237\")]\n+        #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n         impl ExactSizeIterator for ops::RangeInclusive<$t> { }\n     )*)\n }\n@@ -202,9 +200,7 @@ macro_rules! range_trusted_len_impl {\n \n macro_rules! range_incl_trusted_len_impl {\n     ($($t:ty)*) => ($(\n-        #[unstable(feature = \"inclusive_range\",\n-                   reason = \"recently added, follows RFC\",\n-                   issue = \"28237\")]\n+        #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n         unsafe impl TrustedLen for ops::RangeInclusive<$t> { }\n     )*)\n }\n@@ -328,7 +324,7 @@ impl<A: Step> FusedIterator for ops::RangeFrom<A> {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<A: Step> TrustedLen for ops::RangeFrom<A> {}\n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     type Item = A;\n \n@@ -422,7 +418,7 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     }\n }\n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {"}, {"sha": "234970a81faf72c36d3dc3511a6b74c3ec3f7eab", "filename": "src/libcore/ops/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibcore%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibcore%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fmod.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -191,7 +191,7 @@ pub use self::index::{Index, IndexMut};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::range::{Range, RangeFrom, RangeFull, RangeTo};\n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub use self::range::{RangeInclusive, RangeToInclusive};\n \n #[unstable(feature = \"try_trait\", issue = \"42327\")]"}, {"sha": "9bdd8094f6189dde0cbff2aa28899daff734461f", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -283,7 +283,7 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// # Examples\n ///\n /// ```\n-/// #![feature(inclusive_range,inclusive_range_syntax)]\n+/// #![feature(inclusive_range_syntax)]\n ///\n /// assert_eq!((3..=5), std::ops::RangeInclusive { start: 3, end: 5 });\n /// assert_eq!(3 + 4 + 5, (3..=5).sum());\n@@ -293,21 +293,17 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// assert_eq!(arr[1..=2], [  1,2  ]);  // RangeInclusive\n /// ```\n #[derive(Clone, PartialEq, Eq, Hash)]  // not Copy -- see #27186\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub struct RangeInclusive<Idx> {\n     /// The lower bound of the range (inclusive).\n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n     pub start: Idx,\n     /// The upper bound of the range (inclusive).\n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n     pub end: Idx,\n }\n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeInclusive<Idx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         write!(fmt, \"{:?}..={:?}\", self.start, self.end)\n@@ -385,7 +381,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// The `..=end` syntax is a `RangeToInclusive`:\n ///\n /// ```\n-/// #![feature(inclusive_range,inclusive_range_syntax)]\n+/// #![feature(inclusive_range_syntax)]\n /// assert_eq!((..=5), std::ops::RangeToInclusive{ end: 5 });\n /// ```\n ///\n@@ -417,16 +413,14 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n /// [slicing index]: ../slice/trait.SliceIndex.html\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub struct RangeToInclusive<Idx> {\n     /// The upper bound of the range (inclusive)\n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n     pub end: Idx,\n }\n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeToInclusive<Idx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         write!(fmt, \"..={:?}\", self.end)"}, {"sha": "0f1b7cb8fcc00ea34af430396864d97bb741ab9d", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -1039,7 +1039,7 @@ impl<T> SliceIndex<[T]> for ops::RangeFull {\n }\n \n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<T> SliceIndex<[T]> for ops::RangeInclusive<usize> {\n     type Output = [T];\n \n@@ -1080,7 +1080,7 @@ impl<T> SliceIndex<[T]> for ops::RangeInclusive<usize> {\n     }\n }\n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<T> SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n     type Output = [T];\n "}, {"sha": "9cf862bd93625f9e2604eef7abcc3eb685a40758", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -1779,9 +1779,7 @@ mod traits {\n         }\n     }\n \n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n     impl ops::Index<ops::RangeInclusive<usize>> for str {\n         type Output = str;\n \n@@ -1791,9 +1789,7 @@ mod traits {\n         }\n     }\n \n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n     impl ops::Index<ops::RangeToInclusive<usize>> for str {\n         type Output = str;\n \n@@ -1803,18 +1799,14 @@ mod traits {\n         }\n     }\n \n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n     impl ops::IndexMut<ops::RangeInclusive<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeInclusive<usize>) -> &mut str {\n             index.index_mut(self)\n         }\n     }\n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n     impl ops::IndexMut<ops::RangeToInclusive<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut str {\n@@ -1997,9 +1989,7 @@ mod traits {\n         }\n     }\n \n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n     impl SliceIndex<str> for ops::RangeInclusive<usize> {\n         type Output = str;\n         #[inline]\n@@ -2042,9 +2032,7 @@ mod traits {\n \n \n \n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n     impl SliceIndex<str> for ops::RangeToInclusive<usize> {\n         type Output = str;\n         #[inline]"}, {"sha": "8f01fbeb30e4881564c7da54df66319a918e018b", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -23,7 +23,6 @@\n #![feature(fmt_internals)]\n #![feature(iterator_step_by)]\n #![feature(i128_type)]\n-#![feature(inclusive_range)]\n #![feature(inclusive_range_syntax)]\n #![feature(iterator_try_fold)]\n #![feature(iterator_flatten)]"}, {"sha": "149ea96b636cec386a7f98cae2c49961c2f254a7", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -54,7 +54,6 @@\n #![feature(fs_read_write)]\n #![feature(i128)]\n #![feature(i128_type)]\n-#![feature(inclusive_range)]\n #![feature(inclusive_range_syntax)]\n #![cfg_attr(windows, feature(libc))]\n #![feature(match_default_bindings)]"}, {"sha": "31eb203eefe3f6230c9bab2bca0e3662d7207b09", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -29,7 +29,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(fs_read_write)]\n #![feature(i128_type)]\n #![feature(inclusive_range_syntax)]\n-#![feature(inclusive_range)]\n #![feature(macro_vis_matcher)]\n #![feature(match_default_bindings)]\n #![feature(exhaustive_patterns)]"}, {"sha": "a9334461825c41fcadf9e4c04c7407d016d62056", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -26,7 +26,6 @@\n #![allow(unused_attributes)]\n #![feature(i128_type)]\n #![feature(i128)]\n-#![feature(inclusive_range)]\n #![feature(inclusive_range_syntax)]\n #![feature(libc)]\n #![feature(quote)]"}, {"sha": "c71a562b0d157b5d63e16c5ede9258ac205ea4eb", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -271,7 +271,6 @@\n #![feature(heap_api)]\n #![feature(i128)]\n #![feature(i128_type)]\n-#![feature(inclusive_range)]\n #![feature(int_error_internals)]\n #![feature(integer_atomics)]\n #![feature(into_cow)]"}, {"sha": "5b063dc1137c0b3be5faaae240277448609ea14c", "filename": "src/test/compile-fail/range_inclusive_gate.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Frange_inclusive_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Frange_inclusive_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange_inclusive_gate.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Make sure that #![feature(inclusive_range)] is required.\n-\n-#![feature(inclusive_range_syntax)]\n-// #![feature(inclusive_range)]\n-\n-pub fn main() {\n-    let _: std::ops::RangeInclusive<_> = { use std::intrinsics; 1 } ..= { use std::intrinsics; 2 };\n-    //~^ ERROR use of unstable library feature 'inclusive_range'\n-    //~| ERROR core_intrinsics\n-    //~| ERROR core_intrinsics\n-}"}, {"sha": "7645dbb1a6dee5f38dee0c05c51cb5393edef17c", "filename": "src/test/compile-fail/range_traits-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Ftest%2Fcompile-fail%2Frange_traits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Ftest%2Fcompile-fail%2Frange_traits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange_traits-1.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(inclusive_range)]\n-\n use std::ops::*;\n \n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]"}, {"sha": "f9510b5061caecf706fe57cd644eae3c7c741edc", "filename": "src/test/compile-fail/range_traits-6.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Ftest%2Fcompile-fail%2Frange_traits-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Ftest%2Fcompile-fail%2Frange_traits-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange_traits-6.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(inclusive_range)]\n-\n use std::ops::*;\n \n #[derive(Copy, Clone)] //~ ERROR Copy"}, {"sha": "871b55b85cf88a0194f8d208141c3459f94b4ec6", "filename": "src/test/compile-fail/range_traits-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Ftest%2Fcompile-fail%2Frange_traits-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Ftest%2Fcompile-fail%2Frange_traits-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange_traits-7.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs, inclusive_range)]\n+#![feature(rustc_attrs)]\n \n use std::ops::*;\n "}, {"sha": "6c6caa1e649755761304351f106e8aa3137008da", "filename": "src/test/parse-fail/range_inclusive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -10,7 +10,7 @@\n \n // Make sure that inclusive ranges with no end point don't parse.\n \n-#![feature(inclusive_range_syntax, inclusive_range)]\n+#![feature(inclusive_range_syntax)]\n \n pub fn main() {\n     for _ in 1..= {} //~ERROR inclusive range with no end"}, {"sha": "8a24038638b380f4d9947d224675d120063bfb76", "filename": "src/test/parse-fail/range_inclusive_dotdotdot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Ftest%2Fparse-fail%2Frange_inclusive_dotdotdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Ftest%2Fparse-fail%2Frange_inclusive_dotdotdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Frange_inclusive_dotdotdot.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -12,7 +12,7 @@\n \n // Make sure that inclusive ranges with `...` syntax don't parse.\n \n-#![feature(inclusive_range_syntax, inclusive_range)]\n+#![feature(inclusive_range_syntax)]\n \n use std::ops::RangeToInclusive;\n "}, {"sha": "c8c84000e41ef56f1bff8c50999af171b83ffe61", "filename": "src/test/parse-fail/range_inclusive_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Ftest%2Fparse-fail%2Frange_inclusive_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Ftest%2Fparse-fail%2Frange_inclusive_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Frange_inclusive_gate.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -12,7 +12,7 @@\n \n // Make sure that #![feature(inclusive_range_syntax)] is required.\n \n-// #![feature(inclusive_range_syntax, inclusive_range)]\n+// #![feature(inclusive_range_syntax)]\n \n macro_rules! m {\n     () => { for _ in 1..=10 {} } //~ ERROR inclusive range syntax is experimental"}, {"sha": "29947860ff6ae669e099d59b08d34e653d8e45a2", "filename": "src/test/run-pass/range_inclusive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange_inclusive.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -10,7 +10,7 @@\n \n // Test inclusive range syntax.\n \n-#![feature(inclusive_range_syntax, inclusive_range, iterator_step_by)]\n+#![feature(inclusive_range_syntax, iterator_step_by)]\n \n use std::ops::{RangeInclusive, RangeToInclusive};\n "}]}