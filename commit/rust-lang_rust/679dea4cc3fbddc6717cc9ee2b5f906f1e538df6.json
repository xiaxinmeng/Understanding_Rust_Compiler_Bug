{"sha": "679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3OWRlYTRjYzNmYmRkYzY3MTdjYzllZTJiNWY5MDZmMWU1MzhkZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-18T05:50:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-18T05:50:55Z"}, "message": "Auto merge of #87738 - lqd:polonius-master, r=nikomatsakis\n\nUpdate `polonius-engine` to 0.13.0\n\nThis PR updates the use of `polonius-engine` to the recently released 0.13.0:\n- this version renamed a lot of relations to match the current terminology\n- \"illegal subset relationships errors\" (AKA \"subset errors\" or \"universal region errors\" in rustc parlance) have been implemented in all variants, and therefore the `Hybrid` variant can be the rustc default once again\n- some of the blessed expectations were updated: new tests have been added since the last time I updated the tests, diagnostics have changed, etc.\n\nIn particular:\n- a few tests had trivial expectations changes such as basic diagnostics changes for the migrate-mode and full NLLs\n- others were recursion and lengths limits which emits a file, and under the polonius compare-mode, the folder has a different name\n- a few tests were ignored in the NLL compare-mode for reasons that obviously also apply to Polonius\n- some diagnostics were unified so that older expectations no longer made sense: the NLL and Polonius outputs were identical.\n- in a few cases Polonius gets a chance to emit more errors than NLLs\n\nA few tests in the compare-mode still are super slow and trigger the 60s warning, or OOM rustc during fact generation, and I've detailed these [on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Challenges.20for.20move.2Finit.2C.20liveness.2C.20and.20.60Location.3A.3AAll.60):\n- `src/test/ui/numbers-arithmetic/saturating-float-casts.rs` -> OOM during rustc fact generation\n- `src/test/ui/numbers-arithmetic/num-wrapping.rs`\n- `src/test/ui/issues/issue-72933-match-stack-overflow.rs`\n- `src/test/ui/issues/issue-74564-if-expr-stack-overflow.rs`\n- `src/test/ui/repr/repr-no-niche.rs`\n\nIn addition, 2 tests don't currently pass and I didn't want to bless them now: they deal with HRTBs and miss errors that NLLs emit. We're currently trying to see if we need chalk to deal with HRTB errors (as we thought we would have to) but during the recent sprint, we discovered that we may be able to detect some of these errors in a way that resembles subset errors:\n- `ui/hrtb/hrtb-just-for-static.rs` -> 3 errors in NLL, 2 in polonius: a missing error about HRTB + needing to outlive 'static\n- `ui/issues/issue-26217.rs` -> missing HRTB that makes the test compile instead of emitting an error\n\nWe'll keep talking about this at the next sprint as well.\n\ncc `@rust-lang/wg-polonius` r? `@nikomatsakis`", "tree": {"sha": "816942aac4f51ac8d357052a026be73e672dd4a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/816942aac4f51ac8d357052a026be73e672dd4a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "html_url": "https://github.com/rust-lang/rust/commit/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbe3afece59d85a53b9c7e085c1426c9bac2b526", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe3afece59d85a53b9c7e085c1426c9bac2b526", "html_url": "https://github.com/rust-lang/rust/commit/cbe3afece59d85a53b9c7e085c1426c9bac2b526"}, {"sha": "f2a4d7fdbe4fd5b91632c30cf67ea7f3249a3030", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a4d7fdbe4fd5b91632c30cf67ea7f3249a3030", "html_url": "https://github.com/rust-lang/rust/commit/f2a4d7fdbe4fd5b91632c30cf67ea7f3249a3030"}], "stats": {"total": 424, "additions": 346, "deletions": 78}, "files": [{"sha": "1476c7d5bb605450d3542a05d526b6c745eaacdc", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -2618,9 +2618,9 @@ checksum = \"d36492546b6af1463394d46f0c834346f31548646f6ba10849802c9c9a27ac33\"\n \n [[package]]\n name = \"polonius-engine\"\n-version = \"0.12.1\"\n+version = \"0.13.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ef2558a4b464e185b36ee08a2937ebb62ea5464c38856cfb1465c97cb38db52d\"\n+checksum = \"c4e8e505342045d397d0b6674dcb82d6faf5cf40484d30eeb88fc82ef14e903f\"\n dependencies = [\n  \"datafrog\",\n  \"log\","}, {"sha": "2403ce2d24f559bc3bc3205d955e704fc28fa283", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -11,7 +11,7 @@ rustc_arena = { path = \"../rustc_arena\" }\n bitflags = \"1.2.1\"\n tracing = \"0.1\"\n rustc-rayon-core = \"0.3.1\"\n-polonius-engine = \"0.12.0\"\n+polonius-engine = \"0.13.0\"\n rustc_apfloat = { path = \"../rustc_apfloat\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_feature = { path = \"../rustc_feature\" }"}, {"sha": "7656cf38cc14caf0280eb60e9d8873db7d28e467", "filename": "compiler/rustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/compiler%2Frustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/compiler%2Frustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2FCargo.toml?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -12,7 +12,7 @@ rustc_graphviz = { path = \"../rustc_graphviz\" }\n gsgdt = \"0.1.2\"\n itertools = \"0.9\"\n tracing = \"0.1\"\n-polonius-engine = \"0.12.0\"\n+polonius-engine = \"0.13.0\"\n regex = \"1\"\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_attr = { path = \"../rustc_attr\" }"}, {"sha": "c84928523d9d6106a997d3a44e23c2d1a23f458e", "filename": "compiler/rustc_mir/src/borrow_check/constraint_generation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fconstraint_generation.rs?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -224,7 +224,7 @@ impl<'cx, 'cg, 'tcx> ConstraintGeneration<'cx, 'cg, 'tcx> {\n \n                             if places_conflict {\n                                 let location_index = self.location_table.mid_index(location);\n-                                all_facts.killed.push((borrow_index, location_index));\n+                                all_facts.loan_killed_at.push((borrow_index, location_index));\n                             }\n                         }\n                     }\n@@ -243,10 +243,10 @@ fn record_killed_borrows_for_local(\n     location: Location,\n ) {\n     if let Some(borrow_indices) = borrow_set.local_map.get(&local) {\n-        all_facts.killed.reserve(borrow_indices.len());\n+        all_facts.loan_killed_at.reserve(borrow_indices.len());\n         for &borrow_index in borrow_indices {\n             let location_index = location_table.mid_index(location);\n-            all_facts.killed.push((borrow_index, location_index));\n+            all_facts.loan_killed_at.push((borrow_index, location_index));\n         }\n     }\n }"}, {"sha": "215dead5bd15e3ced92ee4d06ce3b6b4522aa12f", "filename": "compiler/rustc_mir/src/borrow_check/facts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ffacts.rs?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -64,13 +64,12 @@ impl AllFactsExt for AllFacts {\n         }\n         write_facts_to_path! {\n             wr.write_facts_to_path(self.[\n-                borrow_region,\n+                loan_issued_at,\n                 universal_region,\n-                placeholder,\n                 cfg_edge,\n-                killed,\n-                outlives,\n-                invalidates,\n+                loan_killed_at,\n+                subset_base,\n+                loan_invalidated_at,\n                 var_used_at,\n                 var_defined_at,\n                 var_dropped_at,\n@@ -81,7 +80,8 @@ impl AllFactsExt for AllFacts {\n                 path_assigned_at_base,\n                 path_moved_at_base,\n                 path_accessed_at_base,\n-                known_subset,\n+                known_placeholder_subset,\n+                placeholder,\n             ])\n         }\n         Ok(())"}, {"sha": "b83a427f4757475e80d00ec88afc03d4983b21e0", "filename": "compiler/rustc_mir/src/borrow_check/invalidation.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -179,7 +179,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 let resume = self.location_table.start_index(resume.start_location());\n                 for (i, data) in borrow_set.iter_enumerated() {\n                     if borrow_of_local_data(data.borrowed_place) {\n-                        self.all_facts.invalidates.push((resume, i));\n+                        self.all_facts.loan_invalidated_at.push((resume, i));\n                     }\n                 }\n \n@@ -191,7 +191,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 let start = self.location_table.start_index(location);\n                 for (i, data) in borrow_set.iter_enumerated() {\n                     if borrow_of_local_data(data.borrowed_place) {\n-                        self.all_facts.invalidates.push((start, i));\n+                        self.all_facts.loan_invalidated_at.push((start, i));\n                     }\n                 }\n             }\n@@ -420,26 +420,26 @@ impl<'cx, 'tcx> InvalidationGenerator<'cx, 'tcx> {\n \n                         // Unique and mutable borrows are invalidated by reads from any\n                         // involved path\n-                        this.generate_invalidates(borrow_index, location);\n+                        this.emit_loan_invalidated_at(borrow_index, location);\n                     }\n \n                     (Reservation(_) | Activation(_, _) | Write(_), _) => {\n                         // unique or mutable borrows are invalidated by writes.\n                         // Reservations count as writes since we need to check\n                         // that activating the borrow will be OK\n                         // FIXME(bob_twinkles) is this actually the right thing to do?\n-                        this.generate_invalidates(borrow_index, location);\n+                        this.emit_loan_invalidated_at(borrow_index, location);\n                     }\n                 }\n                 Control::Continue\n             },\n         );\n     }\n \n-    /// Generates a new `invalidates(L, B)` fact.\n-    fn generate_invalidates(&mut self, b: BorrowIndex, l: Location) {\n+    /// Generates a new `loan_invalidated_at(L, B)` fact.\n+    fn emit_loan_invalidated_at(&mut self, b: BorrowIndex, l: Location) {\n         let lidx = self.location_table.start_index(l);\n-        self.all_facts.invalidates.push((lidx, b));\n+        self.all_facts.loan_invalidated_at.push((lidx, b));\n     }\n \n     fn check_activations(&mut self, location: Location) {"}, {"sha": "b74b1eb49525f9079eb0ee86913e36b927232c31", "filename": "compiler/rustc_mir/src/borrow_check/nll.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -217,14 +217,15 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n         }\n \n         // 2: the universal region relations `outlives` constraints are emitted as\n-        //  `known_subset` facts.\n+        //  `known_placeholder_subset` facts.\n         for (fr1, fr2) in universal_region_relations.known_outlives() {\n             if fr1 != fr2 {\n                 debug!(\n-                    \"compute_regions: emitting polonius `known_subset` fr1={:?}, fr2={:?}\",\n+                    \"compute_regions: emitting polonius `known_placeholder_subset` \\\n+                     fr1={:?}, fr2={:?}\",\n                     fr1, fr2\n                 );\n-                all_facts.known_subset.push((*fr1, *fr2));\n+                all_facts.known_placeholder_subset.push((*fr1, *fr2));\n             }\n         }\n     }\n@@ -282,7 +283,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n \n         if infcx.tcx.sess.opts.debugging_opts.polonius {\n             let algorithm =\n-                env::var(\"POLONIUS_ALGORITHM\").unwrap_or_else(|_| String::from(\"Naive\"));\n+                env::var(\"POLONIUS_ALGORITHM\").unwrap_or_else(|_| String::from(\"Hybrid\"));\n             let algorithm = Algorithm::from_str(&algorithm).unwrap();\n             debug!(\"compute_regions: using polonius algorithm {:?}\", algorithm);\n             let _prof_timer = infcx.tcx.prof.generic_activity(\"polonius_analysis\");"}, {"sha": "801318e01d79bf316c9a86f9326079c4b32346b6", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -273,7 +273,7 @@ fn translate_outlives_facts(typeck: &mut TypeChecker<'_, '_>) {\n     if let Some(facts) = cx.all_facts {\n         let _prof_timer = typeck.infcx.tcx.prof.generic_activity(\"polonius_fact_generation\");\n         let location_table = cx.location_table;\n-        facts.outlives.extend(cx.constraints.outlives_constraints.outlives().iter().flat_map(\n+        facts.subset_base.extend(cx.constraints.outlives_constraints.outlives().iter().flat_map(\n             |constraint: &OutlivesConstraint<'_>| {\n                 if let Some(from_location) = constraint.locations.from_location() {\n                     Either::Left(iter::once((\n@@ -2446,7 +2446,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         let BorrowCheckContext { borrow_set, location_table, all_facts, constraints, .. } =\n             self.borrowck_context;\n \n-        // In Polonius mode, we also push a `borrow_region` fact\n+        // In Polonius mode, we also push a `loan_issued_at` fact\n         // linking the loan to the region (in some cases, though,\n         // there is no loan associated with this borrow expression --\n         // that occurs when we are borrowing an unsafe place, for\n@@ -2455,7 +2455,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             let _prof_timer = self.infcx.tcx.prof.generic_activity(\"polonius_fact_generation\");\n             if let Some(borrow_index) = borrow_set.get_index_of(&location) {\n                 let region_vid = borrow_region.to_region_vid();\n-                all_facts.borrow_region.push((\n+                all_facts.loan_issued_at.push((\n                     region_vid,\n                     borrow_index,\n                     location_table.mid_index(location),"}, {"sha": "8846ccef34e2b2ed72b3b7575184a3cfd74e05d1", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region-2.polonius.stderr", "status": "renamed", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -1,25 +1,5 @@\n-error[E0521]: borrowed data escapes outside of closure\n-  --> $DIR/expect-region-supply-region.rs:18:9\n-   |\n-LL |     let mut f: Option<&u32> = None;\n-   |         ----- `f` declared here, outside of the closure body\n-LL |     closure_expecting_bound(|x| {\n-   |                              - `x` is a reference that is only valid in the closure body\n-LL |         f = Some(x);\n-   |         ^^^^^^^^^^^ `x` escapes the closure body here\n-\n-error[E0521]: borrowed data escapes outside of closure\n-  --> $DIR/expect-region-supply-region.rs:28:9\n-   |\n-LL |     let mut f: Option<&u32> = None;\n-   |         ----- `f` declared here, outside of the closure body\n-LL |     closure_expecting_bound(|x: &u32| {\n-   |                              - `x` is a reference that is only valid in the closure body\n-LL |         f = Some(x);\n-   |         ^^^^^^^^^^^ `x` escapes the closure body here\n-\n error: lifetime may not live long enough\n-  --> $DIR/expect-region-supply-region.rs:37:30\n+  --> $DIR/expect-region-supply-region-2.rs:14:30\n    |\n LL | fn expect_bound_supply_named<'x>() {\n    |                              -- lifetime `'x` defined here\n@@ -30,7 +10,7 @@ LL |     closure_expecting_bound(|x: &'x u32| {\n    |                              requires that `'1` must outlive `'x`\n \n error[E0521]: borrowed data escapes outside of closure\n-  --> $DIR/expect-region-supply-region.rs:42:9\n+  --> $DIR/expect-region-supply-region-2.rs:20:9\n    |\n LL |     let mut f: Option<&u32> = None;\n    |         ----- `f` declared here, outside of the closure body\n@@ -42,7 +22,7 @@ LL |         f = Some(x);\n    |         ^^^^^^^^^^^ `x` escapes the closure body here\n \n error: lifetime may not live long enough\n-  --> $DIR/expect-region-supply-region.rs:37:30\n+  --> $DIR/expect-region-supply-region-2.rs:14:30\n    |\n LL | fn expect_bound_supply_named<'x>() {\n    |                              -- lifetime `'x` defined here\n@@ -52,5 +32,6 @@ LL |     closure_expecting_bound(|x: &'x u32| {\n    |\n    = help: consider replacing `'x` with `'static`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0521`.", "previous_filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region.polonius.stderr"}, {"sha": "a94c80eb30b16c23589d081828522ac35303e96c", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.polonius.stderr", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -1,11 +1,11 @@\n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:22:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:16:1\n    |\n-LL | / fn no_hrtb<'b,T>(mut t: T)\n-LL | |     where T : Bar<&'b isize>\n+LL | / fn no_hrtb<'b, T>(mut t: T)\n+LL | | where\n+LL | |     T: Bar<&'b isize>,\n LL | | {\n-LL | |     // OK -- `T : Bar<&'b isize>`, and thus the impl above ensures that\n-LL | |     // `&mut T : Bar<&'b isize>`.\n+...  |\n LL | |     no_hrtb(&mut t);\n    | |     --------------- recursive call site\n LL | | }\n@@ -15,12 +15,12 @@ LL | | }\n    = help: a `loop` may express intention better if this is on purpose\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:30:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:25:1\n    |\n LL | / fn bar_hrtb<T>(mut t: T)\n-LL | |     where T : for<'b> Bar<&'b isize>\n+LL | | where\n+LL | |     T: for<'b> Bar<&'b isize>,\n LL | | {\n-LL | |     // OK -- `T : for<'b> Bar<&'b isize>`, and thus the impl above\n ...  |\n LL | |     bar_hrtb(&mut t);\n    | |     ---------------- recursive call site\n@@ -30,40 +30,42 @@ LL | | }\n    = help: a `loop` may express intention better if this is on purpose\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:39:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:35:1\n    |\n-LL | / fn foo_hrtb_bar_not<'b,T>(mut t: T)\n-LL | |     where T : for<'a> Foo<&'a isize> + Bar<&'b isize>\n+LL | / fn foo_hrtb_bar_not<'b, T>(mut t: T)\n+LL | | where\n+LL | |     T: for<'a> Foo<&'a isize> + Bar<&'b isize>,\n LL | | {\n-LL | |     // Not OK -- The forwarding impl for `Foo` requires that `Bar` also\n ...  |\n LL | |     foo_hrtb_bar_not(&mut t);\n    | |     ------------------------ recursive call site\n LL | |\n+LL | |\n LL | | }\n    | |_^ cannot return without recursing\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: higher-ranked subtype error\n-  --> $DIR/hrtb-perfect-forwarding.rs:46:5\n+  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:50:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:48:1\n    |\n LL | / fn foo_hrtb_bar_hrtb<T>(mut t: T)\n-LL | |     where T : for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>\n+LL | | where\n+LL | |     T: for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>,\n LL | | {\n-LL | |     // OK -- now we have `T : for<'b> Bar&'b isize>`.\n+LL | |     // OK -- now we have `T : for<'b> Bar<&'b isize>`.\n LL | |     foo_hrtb_bar_hrtb(&mut t);\n    | |     ------------------------- recursive call site\n LL | | }\n    | |_^ cannot return without recursing\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 4 warnings emitted\n "}, {"sha": "ccd0040030da2044edde008cdd951cc306c6b5ee", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.polonius.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/error-handling.rs:23:16\n+  --> $DIR/error-handling.rs:22:16\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        --  -- lifetime `'b` defined here"}, {"sha": "29eb8c481cdee174baedf3bf601acafbe2885406", "filename": "src/test/ui/infinite/infinite-instantiation.polonius.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -0,0 +1,15 @@\n+error: reached the recursion limit while instantiating `function::<Option<Option<Option<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/infinite-instantiation.rs:22:9\n+   |\n+LL |         function(counter - 1, t.to_option());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: `function` defined here\n+  --> $DIR/infinite-instantiation.rs:20:1\n+   |\n+LL | fn function<T:ToOpt + Clone>(counter: usize, t: T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/infinite/infinite-instantiation.polonius/infinite-instantiation.long-type.txt'\n+\n+error: aborting due to previous error\n+"}, {"sha": "87a7c00e4107b62988685564563945a7a0fadab4", "filename": "src/test/ui/issues/issue-22638.polonius.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fissues%2Fissue-22638.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fissues%2Fissue-22638.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22638.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -0,0 +1,15 @@\n+error: reached the recursion limit while instantiating `A::matches::$CLOSURE`\n+  --> $DIR/issue-22638.rs:56:9\n+   |\n+LL |         a.matches(f)\n+   |         ^^^^^^^^^^^^\n+   |\n+note: `A::matches` defined here\n+  --> $DIR/issue-22638.rs:15:5\n+   |\n+LL |     pub fn matches<F: Fn()>(&self, f: &F) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-22638.polonius/issue-22638.long-type.txt'\n+\n+error: aborting due to previous error\n+"}, {"sha": "3a1c0b82c227a92230d2a55f6bb0961280d82270", "filename": "src/test/ui/issues/issue-37311-type-length-limit/issue-37311.polonius.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -0,0 +1,15 @@\n+error: reached the recursion limit while instantiating `<(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(.....), ...), ...) as Foo>::recurse`\n+  --> $DIR/issue-37311.rs:17:9\n+   |\n+LL |         (self, self).recurse();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: `<T as Foo>::recurse` defined here\n+  --> $DIR/issue-37311.rs:16:5\n+   |\n+LL |     fn recurse(&self) {\n+   |     ^^^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-37311-type-length-limit/issue-37311.polonius/issue-37311.long-type.txt'\n+\n+error: aborting due to previous error\n+"}, {"sha": "9ab77d3444d002fe7341aa7bdc4457d412e72080", "filename": "src/test/ui/issues/issue-67552.polonius.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fissues%2Fissue-67552.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fissues%2Fissue-67552.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67552.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -0,0 +1,17 @@\n+error: reached the recursion limit while instantiating `rec::<&mut &mut &mut &mut &mut &... &mut &mut &mut &mut &mut Empty>`\n+  --> $DIR/issue-67552.rs:28:9\n+   |\n+LL |         rec(identity(&mut it))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: `rec` defined here\n+  --> $DIR/issue-67552.rs:21:1\n+   |\n+LL | / fn rec<T>(mut it: T)\n+LL | | where\n+LL | |     T: Iterator,\n+   | |________________^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-67552.polonius/issue-67552.long-type.txt'\n+\n+error: aborting due to previous error\n+"}, {"sha": "283c01b6b62a2c8872387a5d14375a8cf3909a05", "filename": "src/test/ui/issues/issue-8727.polonius.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fissues%2Fissue-8727.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fissues%2Fissue-8727.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -0,0 +1,26 @@\n+warning: function cannot return without recursing\n+  --> $DIR/issue-8727.rs:7:1\n+   |\n+LL | fn generic<T>() {\n+   | ^^^^^^^^^^^^^^^ cannot return without recursing\n+LL |     generic::<Option<T>>();\n+   |     ---------------------- recursive call site\n+   |\n+   = note: `#[warn(unconditional_recursion)]` on by default\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+error: reached the recursion limit while instantiating `generic::<Option<Option<Option<O...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/issue-8727.rs:8:5\n+   |\n+LL |     generic::<Option<T>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: `generic` defined here\n+  --> $DIR/issue-8727.rs:7:1\n+   |\n+LL | fn generic<T>() {\n+   | ^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-8727.polonius/issue-8727.long-type.txt'\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "2aabc0dab1edb1daff842c15f4204566fe4fe8fc", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.rs?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -10,6 +10,7 @@\n // relationship, and that holds.\n //\n // ignore-compare-mode-nll\n+// ignore-compare-mode-polonius\n \n fn foo(x: for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8, y: for<'a> fn(&'a u8, &'a u8) -> &'a u8) {\n     // The two types above are not equivalent. With the older LUB/GLB"}, {"sha": "eacbbb8764025bd8a809d58fd95afaa68c303d63", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/old-lub-glb-hr-noteq2.rs:20:14\n+  --> $DIR/old-lub-glb-hr-noteq2.rs:21:14\n    |\n LL |       let z = match 22 {\n    |  _____________-"}, {"sha": "7985357d0aed6507c01eb0f5bdf1c9188b99e2ca", "filename": "src/test/ui/meta/meta-expected-error-wrong-rev.a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fmeta%2Fmeta-expected-error-wrong-rev.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fmeta%2Fmeta-expected-error-wrong-rev.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmeta%2Fmeta-expected-error-wrong-rev.a.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/meta-expected-error-wrong-rev.rs:13:18\n+  --> $DIR/meta-expected-error-wrong-rev.rs:14:18\n    |\n LL |     let x: u32 = 22_usize;\n    |            ---   ^^^^^^^^ expected `u32`, found `usize`"}, {"sha": "80af527a6978de08524711bff3830565a0be48d7", "filename": "src/test/ui/meta/meta-expected-error-wrong-rev.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fmeta%2Fmeta-expected-error-wrong-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fmeta%2Fmeta-expected-error-wrong-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmeta%2Fmeta-expected-error-wrong-rev.rs?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -1,4 +1,5 @@\n // ignore-compare-mode-nll\n+// ignore-compare-mode-polonius\n \n // revisions: a\n // should-fail"}, {"sha": "c00288f2e3c73b6d9b3623001bfdd5253c523dbb", "filename": "src/test/ui/nll/outlives-suggestion-simple.polonius.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -121,3 +121,4 @@ LL |         Bar2::new(&self)\n \n error: aborting due to 10 previous errors\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "af159a6cd1b850cabc7afceb6daeba02b3e3e45b", "filename": "src/test/ui/nll/user-annotations/closure-substs.polonius.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -21,7 +21,7 @@ error: lifetime may not live long enough\n   --> $DIR/closure-substs.rs:15:16\n    |\n LL |     |x: &i32| -> &'static i32 {\n-   |         -        ------------ return type of closure is &'2 i32\n+   |         -        - let's call the lifetime of this reference `'2`\n    |         |\n    |         let's call the lifetime of this reference `'1`\n LL |         return x;\n@@ -58,3 +58,4 @@ LL |         b(x);\n \n error: aborting due to 6 previous errors\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "4b4fc4fb7d1898166066fa40e02e02b5186e3c65", "filename": "src/test/ui/recursion/issue-38591-non-regular-dropck-recursion.polonius.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -0,0 +1,15 @@\n+error: reached the recursion limit while instantiating `std::ptr::drop_in_place::<S<fn(f...)))))))))))))))))))))))))))))>))`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: `std::ptr::drop_in_place` defined here\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-38591-non-regular-dropck-recursion.polonius/issue-38591-non-regular-dropck-recursion.long-type.txt'\n+\n+error: aborting due to previous error\n+"}, {"sha": "c727fe551e3bc7386728c6e44f9e83c8ae328cd6", "filename": "src/test/ui/recursion/recursion.polonius.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Frecursion%2Frecursion.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Frecursion%2Frecursion.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursion.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -0,0 +1,15 @@\n+error: reached the recursion limit while instantiating `test::<Cons<Cons<Cons<Cons<Cons<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/recursion.rs:18:11\n+   |\n+LL |     _ => {test (n-1, i+1, Cons {head:2*i+1, tail:first}, Cons{head:i*i, tail:second})}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: `test` defined here\n+  --> $DIR/recursion.rs:16:1\n+   |\n+LL | fn test<T:Dot> (n:isize, i:isize, first:T, second:T) ->isize {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/recursion.polonius/recursion.long-type.txt'\n+\n+error: aborting due to previous error\n+"}, {"sha": "5250848a65cc3fb0bddc30a800e68d14e5d26f8b", "filename": "src/test/ui/regions/issue-78262.default.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fregions%2Fissue-78262.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fregions%2Fissue-78262.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-78262.default.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-78262.rs:12:28\n+  --> $DIR/issue-78262.rs:14:28\n    |\n LL |     let f = |x: &dyn TT| x.func();\n    |                            ^^^^ lifetime mismatch\n    |\n    = note: expected reference `&(dyn TT + 'static)`\n               found reference `&dyn TT`\n-note: the anonymous lifetime #1 defined on the body at 12:13...\n-  --> $DIR/issue-78262.rs:12:13\n+note: the anonymous lifetime #1 defined on the body at 14:13...\n+  --> $DIR/issue-78262.rs:14:13\n    |\n LL |     let f = |x: &dyn TT| x.func();\n    |             ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a35d6fd9bf8854b0cfc0807748d2ed353f8142af", "filename": "src/test/ui/regions/issue-78262.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fregions%2Fissue-78262.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fregions%2Fissue-78262.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-78262.nll.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -1,5 +1,5 @@\n error[E0521]: borrowed data escapes outside of closure\n-  --> $DIR/issue-78262.rs:12:26\n+  --> $DIR/issue-78262.rs:14:26\n    |\n LL |     let f = |x: &dyn TT| x.func();\n    |              -           ^^^^^^^^ `x` escapes the closure body here"}, {"sha": "a35d6fd9bf8854b0cfc0807748d2ed353f8142af", "filename": "src/test/ui/regions/issue-78262.polonius.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fregions%2Fissue-78262.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fregions%2Fissue-78262.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-78262.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -0,0 +1,11 @@\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/issue-78262.rs:14:26\n+   |\n+LL |     let f = |x: &dyn TT| x.func();\n+   |              -           ^^^^^^^^ `x` escapes the closure body here\n+   |              |\n+   |              `x` is a reference that is only valid in the closure body\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "b88ad678ee61c35d9e13adbec93505887b55d69c", "filename": "src/test/ui/regions/issue-78262.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fregions%2Fissue-78262.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fregions%2Fissue-78262.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-78262.rs?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -1,6 +1,8 @@\n-// revisions: nll default\n+// revisions: default nll polonius\n // ignore-compare-mode-nll\n-//[nll]compile-flags: -Z borrowck=mir\n+// ignore-compare-mode-polonius\n+// [nll] compile-flags: -Z borrowck=mir\n+// [polonius] compile-flags: -Z borrowck=mir -Z polonius\n \n trait TT {}\n \n@@ -11,4 +13,5 @@ impl dyn TT {\n fn main() {\n     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n     //[nll]~^ ERROR: borrowed data escapes outside of closure\n+    //[polonius]~^^ ERROR: borrowed data escapes outside of closure\n }"}, {"sha": "13741664ef227bd0c49d7947110453d5ce3bbe3d", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.polonius.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -0,0 +1,82 @@\n+error: lifetime may not live long enough\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:9:5\n+   |\n+LL | fn b<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n+   |      --  -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+LL |     // Illegal now because there is no `'b:'a` declaration.\n+LL |     *x = *y;\n+   |     ^^^^^^^ assignment requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:10:5\n+   |\n+LL | fn b<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n+   |          --  -- lifetime `'c` defined here\n+   |          |\n+   |          lifetime `'b` defined here\n+...\n+LL |     *z = *y;\n+   |     ^^^^^^^ assignment requires that `'b` must outlive `'c`\n+   |\n+   = help: consider adding the following bound: `'b: 'c`\n+\n+help: add bound `'b: 'a + 'c`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:16:5\n+   |\n+LL | fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n+   |      -- -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+...\n+LL |     a(x, y, z);\n+   |     ^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+   = note: requirement occurs because of a mutable reference to &isize\n+   = note: mutable references are invariant over their type parameter\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n+\n+error: lifetime may not live long enough\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:16:5\n+   |\n+LL | fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n+   |         --  -- lifetime `'c` defined here\n+   |         |\n+   |         lifetime `'b` defined here\n+...\n+LL |     a(x, y, z);\n+   |     ^^^^^^^^^^ argument requires that `'b` must outlive `'c`\n+   |\n+   = help: consider adding the following bound: `'b: 'c`\n+   = note: requirement occurs because of a mutable reference to &isize\n+   = note: mutable references are invariant over their type parameter\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n+\n+help: add bound `'b: 'a + 'c`\n+\n+error: higher-ranked subtype error\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:12\n+   |\n+LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:12\n+   |\n+LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:12\n+   |\n+LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "e48ba709af1fd8505d76d5823bec81ae302d09ca", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-3.polonius.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -0,0 +1,22 @@\n+error: lifetime may not live long enough\n+  --> $DIR/type-checking-test-3.rs:13:13\n+   |\n+LL | fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n+   |                -- lifetime `'a` defined here\n+LL |     let _ = x as &dyn Bar<'a>; // Error\n+   |             ^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/type-checking-test-3.rs:18:13\n+   |\n+LL | fn test_wrong2<'a>(x: &dyn Foo<'a>) {\n+   |                -- lifetime `'a` defined here\n+LL |     let _ = x as &dyn Bar<'static>; // Error\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a3411f40ad0fb527c5b0df2cee6fdc69a9293e52", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.polonius.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -0,0 +1,33 @@\n+error: lifetime may not live long enough\n+  --> $DIR/type-checking-test-4.rs:17:13\n+   |\n+LL | fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n+   |                -- lifetime `'a` defined here\n+LL |     let _ = x as &dyn Bar<'static, 'a>; // Error\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/type-checking-test-4.rs:22:13\n+   |\n+LL | fn test_wrong2<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n+   |                -- lifetime `'a` defined here\n+LL |     let _ = x as &dyn Bar<'a, 'static>; // Error\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/type-checking-test-4.rs:29:5\n+   |\n+LL | fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                -- lifetime `'a` defined here\n+...\n+LL |     y.get_b() // ERROR\n+   |     ^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "82d066b2a2fefae45ebb58e584d0d05ce6d3f5df", "filename": "src/test/ui/type_length_limit.polonius.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Ftype_length_limit.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679dea4cc3fbddc6717cc9ee2b5f906f1e538df6/src%2Ftest%2Fui%2Ftype_length_limit.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.polonius.stderr?ref=679dea4cc3fbddc6717cc9ee2b5f906f1e538df6", "patch": "@@ -0,0 +1,11 @@\n+error: reached the type-length limit while instantiating `std::mem::drop::<Option<((((...,....., ...), ..., ...), ..., ...)>>`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub fn drop<T>(_x: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit.polonius/type_length_limit.long-type.txt'\n+   = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n+\n+error: aborting due to previous error\n+"}]}