{"sha": "82ebd2bc2077184f5f93d8320e6af3cea5e22479", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZWJkMmJjMjA3NzE4NGY1ZjkzZDgzMjBlNmFmM2NlYTVlMjI0Nzk=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-25T03:04:35Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-30T06:45:22Z"}, "message": "librustc_trans: Remove some dead code now that procs are gone.", "tree": {"sha": "828076c1da16977af4f273a65c1d260f1dabf5fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/828076c1da16977af4f273a65c1d260f1dabf5fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82ebd2bc2077184f5f93d8320e6af3cea5e22479", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82ebd2bc2077184f5f93d8320e6af3cea5e22479", "html_url": "https://github.com/rust-lang/rust/commit/82ebd2bc2077184f5f93d8320e6af3cea5e22479", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82ebd2bc2077184f5f93d8320e6af3cea5e22479/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19f73b4ef6fb1d24f19738a8665889396fc1b0c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/19f73b4ef6fb1d24f19738a8665889396fc1b0c8", "html_url": "https://github.com/rust-lang/rust/commit/19f73b4ef6fb1d24f19738a8665889396fc1b0c8"}], "stats": {"total": 60, "additions": 7, "deletions": 53}, "files": [{"sha": "295d09f83bb2cd55acf6d5e78fa0db2969297bbb", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/82ebd2bc2077184f5f93d8320e6af3cea5e22479/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ebd2bc2077184f5f93d8320e6af3cea5e22479/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=82ebd2bc2077184f5f93d8320e6af3cea5e22479", "patch": "@@ -55,7 +55,7 @@ use trans::cleanup::CleanupMethods;\n use trans::cleanup;\n use trans::closure;\n use trans::common::{Block, C_bool, C_bytes_in_context, C_i32, C_integral};\n-use trans::common::{C_null, C_struct_in_context, C_u64, C_u8, C_uint, C_undef};\n+use trans::common::{C_null, C_struct_in_context, C_u64, C_u8, C_undef};\n use trans::common::{CrateContext, ExternMap, FunctionContext};\n use trans::common::{NodeInfo, Result};\n use trans::common::{node_id_type, return_type_is_void};\n@@ -73,7 +73,7 @@ use trans::glue;\n use trans::inline;\n use trans::intrinsic;\n use trans::machine;\n-use trans::machine::{llsize_of, llsize_of_real, llalign_of_min};\n+use trans::machine::{llsize_of, llsize_of_real};\n use trans::meth;\n use trans::monomorphize;\n use trans::tvec;\n@@ -394,30 +394,6 @@ pub fn malloc_raw_dyn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     Result::new(r.bcx, PointerCast(r.bcx, r.val, llty_ptr))\n }\n \n-pub fn malloc_raw_dyn_proc<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: Ty<'tcx>)\n-                                       -> Result<'blk, 'tcx> {\n-    let _icx = push_ctxt(\"malloc_raw_dyn_proc\");\n-    let ccx = bcx.ccx();\n-\n-    // Grab the TypeRef type of ptr_ty.\n-    let ptr_ty = ty::mk_uniq(bcx.tcx(), t);\n-    let ptr_llty = type_of(ccx, ptr_ty);\n-\n-    let llty = type_of(bcx.ccx(), t);\n-    let size = llsize_of(bcx.ccx(), llty);\n-    let llalign = C_uint(ccx, llalign_of_min(bcx.ccx(), llty));\n-\n-    // Allocate space and store the destructor pointer:\n-    let Result {bcx, val: llbox} = malloc_raw_dyn(bcx, ptr_llty, t, size, llalign);\n-    let dtor_ptr = GEPi(bcx, llbox, &[0u, abi::BOX_FIELD_DROP_GLUE]);\n-    let drop_glue_field_ty = type_of(ccx, ty::mk_nil_ptr(bcx.tcx()));\n-    let drop_glue = PointerCast(bcx, glue::get_drop_glue(ccx, ty::mk_uniq(bcx.tcx(), t)),\n-                                drop_glue_field_ty);\n-    Store(bcx, drop_glue, dtor_ptr);\n-\n-    Result::new(bcx, llbox)\n-}\n-\n // Type descriptor and type glue stuff\n \n pub fn get_tydesc<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,"}, {"sha": "f3f8be4efb2b258efe9bdff90005aba2fbadb39d", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/82ebd2bc2077184f5f93d8320e6af3cea5e22479/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ebd2bc2077184f5f93d8320e6af3cea5e22479/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=82ebd2bc2077184f5f93d8320e6af3cea5e22479", "patch": "@@ -137,26 +137,6 @@ fn tuplify_box_ty<'tcx>(tcx: &ty::ctxt<'tcx>, t: Ty<'tcx>) -> Ty<'tcx> {\n     ty::mk_tup(tcx, vec!(ty::mk_uint(), ty::mk_nil_ptr(tcx), ptr, ptr, t))\n }\n \n-fn allocate_cbox<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                             store: ty::TraitStore,\n-                             cdata_ty: Ty<'tcx>)\n-                             -> Result<'blk, 'tcx> {\n-    let _icx = push_ctxt(\"closure::allocate_cbox\");\n-    let tcx = bcx.tcx();\n-\n-    // Allocate and initialize the box:\n-    let cbox_ty = tuplify_box_ty(tcx, cdata_ty);\n-    match store {\n-        ty::UniqTraitStore => {\n-            malloc_raw_dyn_proc(bcx, cbox_ty)\n-        }\n-        ty::RegionTraitStore(..) => {\n-            let llbox = alloc_ty(bcx, cbox_ty, \"__closure\");\n-            Result::new(bcx, llbox)\n-        }\n-    }\n-}\n-\n pub struct ClosureResult<'blk, 'tcx: 'blk> {\n     llbox: ValueRef,        // llvalue of ptr to closure\n     cdata_ty: Ty<'tcx>,     // type of the closure data\n@@ -168,8 +148,7 @@ pub struct ClosureResult<'blk, 'tcx: 'blk> {\n // heap allocated closure that copies the upvars into environment.\n // Otherwise, it is stack allocated and copies pointers to the upvars.\n pub fn store_environment<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                     bound_values: Vec<EnvValue<'tcx>> ,\n-                                     store: ty::TraitStore)\n+                                     bound_values: Vec<EnvValue<'tcx>>)\n                                      -> ClosureResult<'blk, 'tcx> {\n     let _icx = push_ctxt(\"closure::store_environment\");\n     let ccx = bcx.ccx();\n@@ -193,7 +172,7 @@ pub fn store_environment<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     }\n \n     // allocate closure in the heap\n-    let Result {bcx, val: llbox} = allocate_cbox(bcx, store, cdata_ty);\n+    let llbox = alloc_ty(bcx, cbox_ty, \"__closure\");\n \n     let llbox = PointerCast(bcx, llbox, llboxptr_ty);\n     debug!(\"tuplify_box_ty = {}\", ty_to_string(tcx, cbox_ty));\n@@ -227,8 +206,7 @@ pub fn store_environment<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n // collects the upvars and packages them up for store_environment.\n fn build_closure<'blk, 'tcx>(bcx0: Block<'blk, 'tcx>,\n                              freevar_mode: ast::CaptureClause,\n-                             freevars: &Vec<ty::Freevar>,\n-                             store: ty::TraitStore)\n+                             freevars: &Vec<ty::Freevar>)\n                              -> ClosureResult<'blk, 'tcx> {\n     let _icx = push_ctxt(\"closure::build_closure\");\n \n@@ -242,7 +220,7 @@ fn build_closure<'blk, 'tcx>(bcx0: Block<'blk, 'tcx>,\n         env_vals.push(EnvValue {action: freevar_mode, datum: datum});\n     }\n \n-    store_environment(bcx, env_vals, store)\n+    store_environment(bcx, env_vals)\n }\n \n // Given an enclosing block context, a new function context, a closure type,\n@@ -456,7 +434,7 @@ pub fn trans_expr_fn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         llbox,\n         cdata_ty,\n         bcx\n-    } = build_closure(bcx, freevar_mode, &freevars, store);\n+    } = build_closure(bcx, freevar_mode, &freevars);\n \n     trans_closure(ccx,\n                   decl,"}]}