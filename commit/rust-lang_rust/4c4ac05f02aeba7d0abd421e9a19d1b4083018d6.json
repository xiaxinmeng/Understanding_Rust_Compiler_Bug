{"sha": "4c4ac05f02aeba7d0abd421e9a19d1b4083018d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNGFjMDVmMDJhZWJhN2QwYWJkNDIxZTlhMTlkMWI0MDgzMDE4ZDY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-19T04:30:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-19T04:41:57Z"}, "message": "rustdoc: Print type params in fn sigs. Closes #2021", "tree": {"sha": "a37b4482d028d49a407b3dbca05d57689ee00347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a37b4482d028d49a407b3dbca05d57689ee00347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c4ac05f02aeba7d0abd421e9a19d1b4083018d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c4ac05f02aeba7d0abd421e9a19d1b4083018d6", "html_url": "https://github.com/rust-lang/rust/commit/4c4ac05f02aeba7d0abd421e9a19d1b4083018d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c4ac05f02aeba7d0abd421e9a19d1b4083018d6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dcac31e4d45308b0aa873fdeecd48cee88cbbb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dcac31e4d45308b0aa873fdeecd48cee88cbbb8", "html_url": "https://github.com/rust-lang/rust/commit/7dcac31e4d45308b0aa873fdeecd48cee88cbbb8"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "1819e7f088810411514a2558c376917ff51a1aa4", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4c4ac05f02aeba7d0abd421e9a19d1b4083018d6/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4ac05f02aeba7d0abd421e9a19d1b4083018d6/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=4c4ac05f02aeba7d0abd421e9a19d1b4083018d6", "patch": "@@ -50,28 +50,28 @@ fn get_fn_sig(srv: astsrv::srv, fn_id: doc::ast_id) -> option<str> {\n         alt check ctxt.ast_map.get(fn_id) {\n           ast_map::node_item(@{\n             ident: ident,\n-            node: ast::item_fn(decl, _, _), _\n+            node: ast::item_fn(decl, tys, _), _\n           }, _) |\n           ast_map::node_native_item(@{\n             ident: ident,\n-            node: ast::native_item_fn(decl, _), _\n+            node: ast::native_item_fn(decl, tys), _\n           }, _, _) {\n-            some(pprust::fun_to_str(decl, ident, []))\n+            some(pprust::fun_to_str(decl, ident, tys))\n           }\n         }\n     }\n }\n \n #[test]\n fn should_add_fn_sig() {\n-    let doc = test::mk_doc(\"fn a() -> int { }\");\n-    assert doc.cratemod().fns()[0].sig == some(\"fn a() -> int\");\n+    let doc = test::mk_doc(\"fn a<T>() -> int { }\");\n+    assert doc.cratemod().fns()[0].sig == some(\"fn a<T>() -> int\");\n }\n \n #[test]\n fn should_add_native_fn_sig() {\n-    let doc = test::mk_doc(\"native mod a { fn a() -> int; }\");\n-    assert doc.cratemod().nmods()[0].fns[0].sig == some(\"fn a() -> int\");\n+    let doc = test::mk_doc(\"native mod a { fn a<T>() -> int; }\");\n+    assert doc.cratemod().nmods()[0].fns[0].sig == some(\"fn a<T>() -> int\");\n }\n \n fn fold_const(\n@@ -149,9 +149,9 @@ fn fold_res(\n         sig: some(astsrv::exec(srv) {|ctxt|\n             alt check ctxt.ast_map.get(doc.id()) {\n               ast_map::node_item(@{\n-                node: ast::item_res(decl, _, _, _, _), _\n+                node: ast::item_res(decl, tys, _, _, _), _\n               }, _) {\n-                pprust::res_to_str(decl, doc.name(), [])\n+                pprust::res_to_str(decl, doc.name(), tys)\n               }\n             }\n         })\n@@ -161,8 +161,9 @@ fn fold_res(\n \n #[test]\n fn should_add_resource_sigs() {\n-    let doc = test::mk_doc(\"resource r(b: bool) { }\");\n-    assert doc.cratemod().resources()[0].sig == some(\"resource r(b: bool)\");\n+    let doc = test::mk_doc(\"resource r<T>(b: bool) { }\");\n+    assert doc.cratemod().resources()[0].sig\n+        == some(\"resource r<T>(b: bool)\");\n }\n \n fn fold_iface(\n@@ -202,7 +203,11 @@ fn get_method_sig(\n                 method.ident == method_name\n             } {\n                 some(method) {\n-                    some(pprust::fun_to_str(method.decl, method.ident, []))\n+                    some(pprust::fun_to_str(\n+                        method.decl,\n+                        method.ident,\n+                        method.tps\n+                    ))\n                 }\n             }\n           }\n@@ -213,7 +218,11 @@ fn get_method_sig(\n                 method.ident == method_name\n             } {\n                 some(method) {\n-                    some(pprust::fun_to_str(method.decl, method.ident, []))\n+                    some(pprust::fun_to_str(\n+                        method.decl,\n+                        method.ident,\n+                        method.tps\n+                    ))\n                 }\n             }\n           }\n@@ -223,8 +232,9 @@ fn get_method_sig(\n \n #[test]\n fn should_add_iface_method_sigs() {\n-    let doc = test::mk_doc(\"iface i { fn a() -> int; }\");\n-    assert doc.cratemod().ifaces()[0].methods[0].sig == some(\"fn a() -> int\");\n+    let doc = test::mk_doc(\"iface i { fn a<T>() -> int; }\");\n+    assert doc.cratemod().ifaces()[0].methods[0].sig\n+        == some(\"fn a<T>() -> int\");\n }\n \n fn fold_impl(\n@@ -258,7 +268,7 @@ fn fold_impl(\n \n #[test]\n fn should_add_impl_iface_ty() {\n-    let doc = test::mk_doc(\"impl i of j for int { fn a() { } }\");\n+    let doc = test::mk_doc(\"impl i of j for int { fn a<T>() { } }\");\n     assert doc.cratemod().impls()[0].iface_ty == some(\"j\");\n }\n \n@@ -276,8 +286,9 @@ fn should_add_impl_self_ty() {\n \n #[test]\n fn should_add_impl_method_sigs() {\n-    let doc = test::mk_doc(\"impl i for int { fn a() -> int { fail } }\");\n-    assert doc.cratemod().impls()[0].methods[0].sig == some(\"fn a() -> int\");\n+    let doc = test::mk_doc(\"impl i for int { fn a<T>() -> int { fail } }\");\n+    assert doc.cratemod().impls()[0].methods[0].sig\n+        == some(\"fn a<T>() -> int\");\n }\n \n fn fold_type("}]}