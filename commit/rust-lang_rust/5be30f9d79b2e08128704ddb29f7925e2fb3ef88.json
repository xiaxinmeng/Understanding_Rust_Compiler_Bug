{"sha": "5be30f9d79b2e08128704ddb29f7925e2fb3ef88", "node_id": "C_kwDOAAsO6NoAKDViZTMwZjlkNzliMmUwODEyODcwNGRkYjI5Zjc5MjVlMmZiM2VmODg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-02T15:57:31Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-09T01:31:45Z"}, "message": "Make async fn in traits work", "tree": {"sha": "569598861d0545c9bd19c1e3aafca6b374d276f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/569598861d0545c9bd19c1e3aafca6b374d276f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5be30f9d79b2e08128704ddb29f7925e2fb3ef88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5be30f9d79b2e08128704ddb29f7925e2fb3ef88", "html_url": "https://github.com/rust-lang/rust/commit/5be30f9d79b2e08128704ddb29f7925e2fb3ef88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed2a32f22cfb7e43a3d8c732ac8fa8007c061c5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed2a32f22cfb7e43a3d8c732ac8fa8007c061c5f", "html_url": "https://github.com/rust-lang/rust/commit/ed2a32f22cfb7e43a3d8c732ac8fa8007c061c5f"}], "stats": {"total": 87, "additions": 46, "deletions": 41}, "files": [{"sha": "c07ba88ae204d9a414e1f4f704e242408fb19265", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=5be30f9d79b2e08128704ddb29f7925e2fb3ef88", "patch": "@@ -2367,9 +2367,9 @@ impl Async {\n     }\n \n     /// In this case this is an `async` return, the `NodeId` for the generated `impl Trait` item.\n-    pub fn opt_return_id(self) -> Option<NodeId> {\n+    pub fn opt_return_id(self) -> Option<(NodeId, Span)> {\n         match self {\n-            Async::Yes { return_impl_trait_id, .. } => Some(return_impl_trait_id),\n+            Async::Yes { return_impl_trait_id, span, .. } => Some((return_impl_trait_id, span)),\n             Async::No => None,\n         }\n     }"}, {"sha": "c87d0ca96570e74f2904068202102ce712b68a9a", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=5be30f9d79b2e08128704ddb29f7925e2fb3ef88", "patch": "@@ -334,3 +334,14 @@ pub struct InclusiveRangeWithNoEnd {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(SessionDiagnostic, Clone, Copy)]\n+#[diag(ast_lowering::trait_fn_async, code = \"E0706\")]\n+#[note]\n+#[note(ast_lowering::note2)]\n+pub struct TraitFnAsync {\n+    #[primary_span]\n+    pub fn_span: Span,\n+    #[label]\n+    pub span: Span,\n+}"}, {"sha": "f929549d70448100ea8c7f2516e4ac440f02066b", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=5be30f9d79b2e08128704ddb29f7925e2fb3ef88", "patch": "@@ -851,7 +851,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         self.lower_lifetime_binder(closure_id, generic_params, |lctx, bound_generic_params| {\n             // Lower outside new scope to preserve `is_in_loop_condition`.\n-            let fn_decl = lctx.lower_fn_decl(decl, None, FnDeclKind::Closure, None);\n+            let fn_decl = lctx.lower_fn_decl(decl, None, fn_decl_span, FnDeclKind::Closure, None);\n \n             let c = lctx.arena.alloc(hir::Closure {\n                 binder: binder_clause,\n@@ -955,7 +955,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             // We need to lower the declaration outside the new scope, because we\n             // have to conserve the state of being inside a loop condition for the\n             // closure argument types.\n-            let fn_decl = lctx.lower_fn_decl(&outer_decl, None, FnDeclKind::Closure, None);\n+            let fn_decl =\n+                lctx.lower_fn_decl(&outer_decl, None, fn_decl_span, FnDeclKind::Closure, None);\n \n             let c = lctx.arena.alloc(hir::Closure {\n                 binder: binder_clause,"}, {"sha": "96e281ca5c8449c14454343d704a73841f006c3e", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=5be30f9d79b2e08128704ddb29f7925e2fb3ef88", "patch": "@@ -269,7 +269,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let mut itctx = ImplTraitContext::Universal;\n                     let (generics, decl) = this.lower_generics(generics, id, &mut itctx, |this| {\n                         let ret_id = asyncness.opt_return_id();\n-                        this.lower_fn_decl(&decl, Some(id), FnDeclKind::Fn, ret_id)\n+                        this.lower_fn_decl(&decl, Some(id), fn_sig_span, FnDeclKind::Fn, ret_id)\n                     });\n                     let sig = hir::FnSig {\n                         decl,\n@@ -661,7 +661,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         self.lower_generics(generics, i.id, &mut itctx, |this| {\n                             (\n                                 // Disallow `impl Trait` in foreign items.\n-                                this.lower_fn_decl(fdec, None, FnDeclKind::ExternFn, None),\n+                                this.lower_fn_decl(\n+                                    fdec,\n+                                    None,\n+                                    sig.span,\n+                                    FnDeclKind::ExternFn,\n+                                    None,\n+                                ),\n                                 this.lower_fn_params_to_names(fdec),\n                             )\n                         });\n@@ -1240,12 +1246,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         sig: &FnSig,\n         id: NodeId,\n         kind: FnDeclKind,\n-        is_async: Option<NodeId>,\n+        is_async: Option<(NodeId, Span)>,\n     ) -> (&'hir hir::Generics<'hir>, hir::FnSig<'hir>) {\n         let header = self.lower_fn_header(sig.header);\n         let mut itctx = ImplTraitContext::Universal;\n         let (generics, decl) = self.lower_generics(generics, id, &mut itctx, |this| {\n-            this.lower_fn_decl(&sig.decl, Some(id), kind, is_async)\n+            this.lower_fn_decl(&sig.decl, Some(id), sig.span, kind, is_async)\n         });\n         (generics, hir::FnSig { header, decl, span: self.lower_span(sig.span) })\n     }"}, {"sha": "de7e64351b9485576c31dbff7bd05a08cc441fb7", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=5be30f9d79b2e08128704ddb29f7925e2fb3ef88", "patch": "@@ -42,7 +42,7 @@\n #[macro_use]\n extern crate tracing;\n \n-use crate::errors::{AssocTyParentheses, AssocTyParenthesesSub, MisplacedImplTrait};\n+use crate::errors::{AssocTyParentheses, AssocTyParenthesesSub, MisplacedImplTrait, TraitFnAsync};\n \n use rustc_arena::declare_arena;\n use rustc_ast::ptr::P;\n@@ -1274,7 +1274,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         generic_params,\n                         unsafety: lctx.lower_unsafety(f.unsafety),\n                         abi: lctx.lower_extern(f.ext),\n-                        decl: lctx.lower_fn_decl(&f.decl, None, FnDeclKind::Pointer, None),\n+                        decl: lctx.lower_fn_decl(&f.decl, None, t.span, FnDeclKind::Pointer, None),\n                         param_names: lctx.lower_fn_params_to_names(&f.decl),\n                     }))\n                 })\n@@ -1677,19 +1677,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     // `fn_def_id`: if `Some`, impl Trait arguments are lowered into generic parameters on the\n     //      given DefId, otherwise impl Trait is disallowed. Must be `Some` if\n     //      `make_ret_async` is also `Some`.\n-    // `impl_trait_return_allow`: determines whether `impl Trait` can be used in return position.\n-    //      This guards against trait declarations and implementations where `impl Trait` is\n-    //      disallowed.\n     // `make_ret_async`: if `Some`, converts `-> T` into `-> impl Future<Output = T>` in the\n     //      return type. This is used for `async fn` declarations. The `NodeId` is the ID of the\n-    //      return type `impl Trait` item.\n+    //      return type `impl Trait` item, and the `Span` points to the `async` keyword.\n     #[instrument(level = \"debug\", skip(self))]\n     fn lower_fn_decl(\n         &mut self,\n         decl: &FnDecl,\n         fn_node_id: Option<NodeId>,\n+        fn_span: Span,\n         kind: FnDeclKind,\n-        make_ret_async: Option<NodeId>,\n+        make_ret_async: Option<(NodeId, Span)>,\n     ) -> &'hir hir::FnDecl<'hir> {\n         let c_variadic = decl.c_variadic();\n \n@@ -1720,7 +1718,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n         }));\n \n-        let output = if let Some(ret_id) = make_ret_async {\n+        let output = if let Some((ret_id, span)) = make_ret_async {\n+            if !self.tcx.features().return_position_impl_trait_in_trait {\n+                self.tcx.sess.emit_feature_err(\n+                    TraitFnAsync { fn_span, span },\n+                    sym::return_position_impl_trait_in_trait,\n+                );\n+            }\n+\n             self.lower_async_fn_ret_ty(\n                 &decl.output,\n                 fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),"}, {"sha": "6c754f38d144be96ba43f6a24d69b647491496a0", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=5be30f9d79b2e08128704ddb29f7925e2fb3ef88", "patch": "@@ -290,12 +290,6 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_trait_fn_not_async(&self, fn_span: Span, asyncness: Async) {\n-        if let Async::Yes { span, .. } = asyncness {\n-            self.session.emit_err(TraitFnAsync { fn_span, span });\n-        }\n-    }\n-\n     fn check_trait_fn_not_const(&self, constness: Const) {\n         if let Const::Yes(span) = constness {\n             self.session.emit_err(TraitFnConst { span });\n@@ -1596,7 +1590,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             self.invalid_visibility(&item.vis, None);\n             if let AssocItemKind::Fn(box Fn { sig, .. }) = &item.kind {\n                 self.check_trait_fn_not_const(sig.header.constness);\n-                self.check_trait_fn_not_async(item.span, sig.header.asyncness);\n             }\n         }\n "}, {"sha": "4f3b09c587113597d816dfc5bec14ca21283b91b", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=5be30f9d79b2e08128704ddb29f7925e2fb3ef88", "patch": "@@ -79,17 +79,6 @@ pub enum InvalidVisibilityNote {\n     IndividualForeignItems,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(ast_passes::trait_fn_async, code = \"E0706\")]\n-#[note]\n-#[note(ast_passes::note2)]\n-pub struct TraitFnAsync {\n-    #[primary_span]\n-    pub fn_span: Span,\n-    #[label]\n-    pub span: Span,\n-}\n-\n #[derive(SessionDiagnostic)]\n #[diag(ast_passes::trait_fn_const, code = \"E0379\")]\n pub struct TraitFnConst {"}, {"sha": "c45e045b4dba0d27d159382a181f94e10dc7368d", "filename": "compiler/rustc_error_messages/locales/en-US/ast_lowering.ftl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl?ref=5be30f9d79b2e08128704ddb29f7925e2fb3ef88", "patch": "@@ -131,3 +131,9 @@ ast_lowering_arbitrary_expression_in_pattern =\n     arbitrary expressions aren't allowed in patterns\n \n ast_lowering_inclusive_range_with_no_end = inclusive range with no end\n+\n+ast_lowering_trait_fn_async =\n+    functions in traits cannot be declared `async`\n+    .label = `async` because of this\n+    .note = `async` trait functions are not currently supported\n+    .note2 = consider using the `async-trait` crate: https://crates.io/crates/async-trait"}, {"sha": "e5cd1142b20c8c8738055ac3d52d845fb801b24d", "filename": "compiler/rustc_error_messages/locales/en-US/ast_passes.ftl", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl?ref=5be30f9d79b2e08128704ddb29f7925e2fb3ef88", "patch": "@@ -26,12 +26,6 @@ ast_passes_invalid_visibility =\n     .individual_impl_items = place qualifiers on individual impl items instead\n     .individual_foreign_items = place qualifiers on individual foreign items instead\n \n-ast_passes_trait_fn_async =\n-    functions in traits cannot be declared `async`\n-    .label = `async` because of this\n-    .note = `async` trait functions are not currently supported\n-    .note2 = consider using the `async-trait` crate: https://crates.io/crates/async-trait\n-\n ast_passes_trait_fn_const =\n     functions in traits cannot be declared const\n     .label = functions in traits cannot be const"}, {"sha": "2d6e76c451bfa3ea1a525e167f187874338f06f9", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be30f9d79b2e08128704ddb29f7925e2fb3ef88/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=5be30f9d79b2e08128704ddb29f7925e2fb3ef88", "patch": "@@ -851,7 +851,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         // We include all lifetime parameters, either named or \"Fresh\".\n                         // The order of those parameters does not matter, as long as it is\n                         // deterministic.\n-                        if let Some(async_node_id) = async_node_id {\n+                        if let Some((async_node_id, _)) = async_node_id {\n                             let mut extra_lifetime_params = this\n                                 .r\n                                 .extra_lifetime_params_map"}]}