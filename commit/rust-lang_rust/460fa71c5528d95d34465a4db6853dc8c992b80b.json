{"sha": "460fa71c5528d95d34465a4db6853dc8c992b80b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MGZhNzFjNTUyOGQ5NWQzNDQ2NWE0ZGI2ODUzZGM4Yzk5MmI4MGI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-31T12:01:00Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-11T22:33:04Z"}, "message": "Use `self`", "tree": {"sha": "9cf429e8242f0ea5bf525f88b3d1a48ce01430dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cf429e8242f0ea5bf525f88b3d1a48ce01430dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/460fa71c5528d95d34465a4db6853dc8c992b80b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/460fa71c5528d95d34465a4db6853dc8c992b80b", "html_url": "https://github.com/rust-lang/rust/commit/460fa71c5528d95d34465a4db6853dc8c992b80b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/460fa71c5528d95d34465a4db6853dc8c992b80b/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2906d188c2442d67b3d3b1bf532553e5adc9020a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2906d188c2442d67b3d3b1bf532553e5adc9020a", "html_url": "https://github.com/rust-lang/rust/commit/2906d188c2442d67b3d3b1bf532553e5adc9020a"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "69cdfc943a49e54d6b8a2f89a25d2d24c245b69b", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/460fa71c5528d95d34465a4db6853dc8c992b80b/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460fa71c5528d95d34465a4db6853dc8c992b80b/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=460fa71c5528d95d34465a4db6853dc8c992b80b", "patch": "@@ -11,6 +11,10 @@ use hir_expand::name::Name;\n \n const MAX_PATH_LEN: usize = 15;\n \n+// FIXME: handle local items\n+\n+/// Find a path that can be used to refer to a certain item. This can depend on\n+/// *from where* you're referring to the item, hence the `from` parameter.\n pub fn find_path(db: &impl DefDatabase, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n     find_path_inner(db, item, from, MAX_PATH_LEN)\n }\n@@ -44,6 +48,11 @@ fn find_path_inner(\n         return Some(ModPath::from_simple_segments(PathKind::Crate, Vec::new()));\n     }\n \n+    // - if the item is the module we're in, use `self`\n+    if item == ItemInNs::Types(from.into()) {\n+        return Some(ModPath::from_simple_segments(PathKind::Super(0), Vec::new()));\n+    }\n+\n     // - if the item is the parent module, use `super` (this is not used recursively, since `super::super` is ugly)\n     if let Some(parent_id) = def_map.modules[from.local_id].parent {\n         if item\n@@ -271,6 +280,17 @@ mod tests {\n         check_found_path(code, \"super::S\");\n     }\n \n+    #[test]\n+    fn self_module() {\n+        let code = r#\"\n+            //- /main.rs\n+            mod foo;\n+            //- /foo.rs\n+            <|>\n+        \"#;\n+        check_found_path(code, \"self\");\n+    }\n+\n     #[test]\n     fn crate_root() {\n         let code = r#\""}]}