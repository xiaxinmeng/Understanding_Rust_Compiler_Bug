{"sha": "d1263f5e66d31ad170c524a70aa5f21e08474326", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMjYzZjVlNjZkMzFhZDE3MGM1MjRhNzBhYTVmMjFlMDg0NzQzMjY=", "commit": {"author": {"name": "Ashley Mannix", "email": "ashleymannix@live.com.au", "date": "2020-06-30T06:27:35Z"}, "committer": {"name": "Ashley Mannix", "email": "ashleymannix@live.com.au", "date": "2020-07-16T21:25:32Z"}, "message": "use set() in SyncOnceCell::from", "tree": {"sha": "b920c1e1447883debd9910a8cc0bafa3f51b267d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b920c1e1447883debd9910a8cc0bafa3f51b267d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1263f5e66d31ad170c524a70aa5f21e08474326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1263f5e66d31ad170c524a70aa5f21e08474326", "html_url": "https://github.com/rust-lang/rust/commit/d1263f5e66d31ad170c524a70aa5f21e08474326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1263f5e66d31ad170c524a70aa5f21e08474326/comments", "author": {"login": "KodrAus", "id": 6721458, "node_id": "MDQ6VXNlcjY3MjE0NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6721458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KodrAus", "html_url": "https://github.com/KodrAus", "followers_url": "https://api.github.com/users/KodrAus/followers", "following_url": "https://api.github.com/users/KodrAus/following{/other_user}", "gists_url": "https://api.github.com/users/KodrAus/gists{/gist_id}", "starred_url": "https://api.github.com/users/KodrAus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KodrAus/subscriptions", "organizations_url": "https://api.github.com/users/KodrAus/orgs", "repos_url": "https://api.github.com/users/KodrAus/repos", "events_url": "https://api.github.com/users/KodrAus/events{/privacy}", "received_events_url": "https://api.github.com/users/KodrAus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KodrAus", "id": 6721458, "node_id": "MDQ6VXNlcjY3MjE0NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6721458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KodrAus", "html_url": "https://github.com/KodrAus", "followers_url": "https://api.github.com/users/KodrAus/followers", "following_url": "https://api.github.com/users/KodrAus/following{/other_user}", "gists_url": "https://api.github.com/users/KodrAus/gists{/gist_id}", "starred_url": "https://api.github.com/users/KodrAus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KodrAus/subscriptions", "organizations_url": "https://api.github.com/users/KodrAus/orgs", "repos_url": "https://api.github.com/users/KodrAus/repos", "events_url": "https://api.github.com/users/KodrAus/events{/privacy}", "received_events_url": "https://api.github.com/users/KodrAus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237a97760ad79a21ce0655b9f5adc0cc5b5cbc79", "url": "https://api.github.com/repos/rust-lang/rust/commits/237a97760ad79a21ce0655b9f5adc0cc5b5cbc79", "html_url": "https://github.com/rust-lang/rust/commit/237a97760ad79a21ce0655b9f5adc0cc5b5cbc79"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "aed91df47449f795b729efd3b6d8515129cffa5e", "filename": "src/libstd/lazy.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d1263f5e66d31ad170c524a70aa5f21e08474326/src%2Flibstd%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1263f5e66d31ad170c524a70aa5f21e08474326/src%2Flibstd%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flazy.rs?ref=d1263f5e66d31ad170c524a70aa5f21e08474326", "patch": "@@ -85,23 +85,25 @@ impl<T: fmt::Debug> fmt::Debug for SyncOnceCell<T> {\n #[unstable(feature = \"once_cell\", issue = \"68198\")]\n impl<T: Clone> Clone for SyncOnceCell<T> {\n     fn clone(&self) -> SyncOnceCell<T> {\n-        let res = SyncOnceCell::new();\n+        let cell = Self::new();\n         if let Some(value) = self.get() {\n-            match res.set(value.clone()) {\n+            match cell.set(value.clone()) {\n                 Ok(()) => (),\n                 Err(_) => unreachable!(),\n             }\n         }\n-        res\n+        cell\n     }\n }\n \n #[unstable(feature = \"once_cell\", issue = \"68198\")]\n impl<T> From<T> for SyncOnceCell<T> {\n     fn from(value: T) -> Self {\n         let cell = Self::new();\n-        cell.get_or_init(|| value);\n-        cell\n+        match cell.set(value) {\n+            Ok(()) => cell,\n+            Err(_) => unreachable!(),\n+        }\n     }\n }\n \n@@ -155,8 +157,7 @@ impl<T> SyncOnceCell<T> {\n \n     /// Sets the contents of this cell to `value`.\n     ///\n-    /// Returns `Ok(())` if the cell was empty and `Err(value)` if it was\n-    /// full.\n+    /// Returns `Ok(())` if the cell's value was updated.\n     ///\n     /// # Examples\n     ///\n@@ -262,8 +263,10 @@ impl<T> SyncOnceCell<T> {\n         F: FnOnce() -> Result<T, E>,\n     {\n         // Fast path check\n-        // NOTE: This acquire here is important to ensure\n-        // `SyncLazy::force` is correctly synchronized\n+        // NOTE: We need to perform an acquire on the state in this method\n+        // in order to correctly synchronize `SyncLazy::force`. This is\n+        // currently done by calling `self.get()`, which in turn calls\n+        // `self.is_initialized()`, which in turn performs the acquire.\n         if let Some(value) = self.get() {\n             return Ok(value);\n         }\n@@ -410,6 +413,8 @@ const COMPLETE: usize = 0x2;\n \n const STATE_MASK: usize = 0x3;\n \n+// The alignment here is so that we can stash the state in the lower\n+// bits of the `next` pointer\n #[repr(align(4))]\n struct Waiter {\n     thread: Cell<Option<Thread>>,"}]}