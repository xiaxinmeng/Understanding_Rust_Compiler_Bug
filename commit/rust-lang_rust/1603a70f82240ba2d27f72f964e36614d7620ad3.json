{"sha": "1603a70f82240ba2d27f72f964e36614d7620ad3", "node_id": "C_kwDOAAsO6NoAKDE2MDNhNzBmODIyNDBiYTJkMjdmNzJmOTY0ZTM2NjE0ZDc2MjBhZDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-10T06:09:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-10T06:09:10Z"}, "message": "Auto merge of #100356 - matthiaskrgr:rollup-he0vkjc, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #99573 (Stabilize backtrace)\n - #100069 (Add error if link_ordinal used with unsupported link kind)\n - #100086 (Add more `// unit-test`s to MIR opt tests)\n - #100332 (Rename integer log* methods to ilog*)\n - #100334 (Suggest a missing semicolon before an array)\n - #100340 (Iterate generics_def_id_map in reverse order to fix P-critical issue)\n - #100345 (docs: remove repetition in `is_numeric` function docs)\n - #100352 (Update cargo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "92fec792de17c4f5ae761d3b9254ad1fa2a54d68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92fec792de17c4f5ae761d3b9254ad1fa2a54d68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1603a70f82240ba2d27f72f964e36614d7620ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1603a70f82240ba2d27f72f964e36614d7620ad3", "html_url": "https://github.com/rust-lang/rust/commit/1603a70f82240ba2d27f72f964e36614d7620ad3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1603a70f82240ba2d27f72f964e36614d7620ad3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0459d2fa736a556332ea9613ad0edf073107cb40", "url": "https://api.github.com/repos/rust-lang/rust/commits/0459d2fa736a556332ea9613ad0edf073107cb40", "html_url": "https://github.com/rust-lang/rust/commit/0459d2fa736a556332ea9613ad0edf073107cb40"}, {"sha": "f6ce6aba6e464644d9bb8cb21e30f9d09078df61", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6ce6aba6e464644d9bb8cb21e30f9d09078df61", "html_url": "https://github.com/rust-lang/rust/commit/f6ce6aba6e464644d9bb8cb21e30f9d09078df61"}], "stats": {"total": 846, "additions": 504, "deletions": 342}, "files": [{"sha": "31f43a24d96d8dc45b399fd0003c4cbf65eb8b77", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -465,6 +465,7 @@ dependencies = [\n  \"termcolor\",\n  \"toml_edit\",\n  \"url 2.2.2\",\n+ \"winapi\",\n ]\n \n [[package]]\n@@ -2655,9 +2656,9 @@ checksum = \"dd20eec3dbe4376829cb7d80ae6ac45e0a766831dca50202ff2d40db46a8a024\"\n \n [[package]]\n name = \"os_info\"\n-version = \"3.4.0\"\n+version = \"3.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0eca3ecae1481e12c3d9379ec541b238a16f0b75c9a409942daa8ec20dbfdb62\"\n+checksum = \"5209b2162b2c140df493a93689e04f8deab3a67634f5bc7a553c0a98e5b8d399\"\n dependencies = [\n  \"log\",\n  \"serde\","}, {"sha": "38d30d0ffdedbfa8c286be6a95e5c7420b20a7a3", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -220,7 +220,20 @@ impl ResolverAstLoweringExt for ResolverAstLowering {\n     }\n \n     fn get_remapped_def_id(&self, mut local_def_id: LocalDefId) -> LocalDefId {\n-        for map in &self.generics_def_id_map {\n+        // `generics_def_id_map` is a stack of mappings. As we go deeper in impl traits nesting we\n+        // push new mappings so we need to try first the latest mappings, hence `iter().rev()`.\n+        //\n+        // Consider:\n+        //\n+        // `fn test<'a, 'b>() -> impl Trait<&'a u8, Ty = impl Sized + 'b> {}`\n+        //\n+        // We would end with a generics_def_id_map like:\n+        //\n+        // `[[fn#'b -> impl_trait#'b], [fn#'b -> impl_sized#'b]]`\n+        //\n+        // for the opaque type generated on `impl Sized + 'b`, We want the result to be:\n+        // impl_sized#'b, so iterating forward is the wrong thing to do.\n+        for map in self.generics_def_id_map.iter().rev() {\n             if let Some(r) = map.get(&local_def_id) {\n                 debug!(\"def_id_remapper: remapping from `{local_def_id:?}` to `{r:?}`\");\n                 local_def_id = *r;"}, {"sha": "15c1858023de7f0de498a09245e7257fda773372", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -4,7 +4,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(drain_filter)]\n-#![feature(backtrace)]\n #![feature(if_let_guard)]\n #![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]"}, {"sha": "c5e39507d7e4d806ae1a3fd50ab7aa35b10b5351", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -328,7 +328,31 @@ impl<'tcx> Collector<'tcx> {\n                         .map(|child_item| self.build_dll_import(abi, child_item))\n                         .collect()\n                 }\n-                _ => Vec::new(),\n+                _ => {\n+                    for child_item in foreign_mod_items {\n+                        if self.tcx.def_kind(child_item.id.def_id).has_codegen_attrs()\n+                            && self\n+                                .tcx\n+                                .codegen_fn_attrs(child_item.id.def_id)\n+                                .link_ordinal\n+                                .is_some()\n+                        {\n+                            let link_ordinal_attr = self\n+                                .tcx\n+                                .hir()\n+                                .attrs(self.tcx.hir().local_def_id_to_hir_id(child_item.id.def_id))\n+                                .iter()\n+                                .find(|a| a.has_name(sym::link_ordinal))\n+                                .unwrap();\n+                            sess.span_err(\n+                                link_ordinal_attr.span,\n+                                \"`#[link_ordinal]` is only supported if link kind is `raw-dylib`\",\n+                            );\n+                        }\n+                    }\n+\n+                    Vec::new()\n+                }\n             };\n             self.libs.push(NativeLib {\n                 name: name.map(|(name, _)| name),"}, {"sha": "4e1254efd179fa7f4b4f9f3578e18d731914083d", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -26,7 +26,6 @@\n #![feature(allocator_api)]\n #![feature(array_windows)]\n #![feature(assert_matches)]\n-#![feature(backtrace)]\n #![feature(box_patterns)]\n #![feature(core_intrinsics)]\n #![feature(discriminant_kind)]"}, {"sha": "b8bd960a5b3d632591dcbec3735484c9d5dfd03a", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1258,8 +1258,11 @@ impl<'a> Parser<'a> {\n \n     /// Parse an indexing expression `expr[...]`.\n     fn parse_index_expr(&mut self, lo: Span, base: P<Expr>) -> PResult<'a, P<Expr>> {\n+        let prev_span = self.prev_token.span;\n+        let open_delim_span = self.token.span;\n         self.bump(); // `[`\n         let index = self.parse_expr()?;\n+        self.suggest_missing_semicolon_before_array(prev_span, open_delim_span)?;\n         self.expect(&token::CloseDelim(Delimiter::Bracket))?;\n         Ok(self.mk_expr(lo.to(self.prev_token.span), self.mk_index(base, index), AttrVec::new()))\n     }\n@@ -2056,6 +2059,45 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn suggest_missing_semicolon_before_array(\n+        &self,\n+        prev_span: Span,\n+        open_delim_span: Span,\n+    ) -> PResult<'a, ()> {\n+        if self.token.kind == token::Comma {\n+            let mut snapshot = self.create_snapshot_for_diagnostic();\n+            snapshot.bump();\n+            match snapshot.parse_seq_to_before_end(\n+                &token::CloseDelim(Delimiter::Bracket),\n+                SeqSep::trailing_allowed(token::Comma),\n+                |p| p.parse_expr(),\n+            ) {\n+                Ok(_)\n+                    // When the close delim is `)`, `token.kind` is expected to be `token::CloseDelim(Delimiter::Parenthesis)`,\n+                    // but the actual `token.kind` is `token::CloseDelim(Delimiter::Bracket)`.\n+                    // This is because the `token.kind` of the close delim is treated as the same as\n+                    // that of the open delim in `TokenTreesReader::parse_token_tree`, even if the delimiters of them are different.\n+                    // Therefore, `token.kind` should not be compared here.\n+                    if snapshot\n+                        .span_to_snippet(snapshot.token.span)\n+                        .map_or(false, |snippet| snippet == \"]\") =>\n+                {\n+                    let mut err = self.struct_span_err(open_delim_span, \"expected `;`, found `[`\");\n+                    err.span_suggestion_verbose(\n+                        prev_span.shrink_to_hi(),\n+                        \"consider adding `;` here\",\n+                        ';',\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    return Err(err);\n+                }\n+                Ok(_) => (),\n+                Err(err) => err.cancel(),\n+            }\n+        }\n+        Ok(())\n+    }\n+\n     /// Parses a block or unsafe block.\n     pub(super) fn parse_block_expr(\n         &mut self,"}, {"sha": "3c01e2998cd2f02d4a5c2e8fe49a3fd402793467", "filename": "library/core/benches/num/int_log/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -9,7 +9,7 @@ macro_rules! int_log_bench {\n                 for n in 0..(<$t>::BITS / 8) {\n                     for i in 1..=(100 as $t) {\n                         let x = black_box(i << (n * 8));\n-                        black_box(x.log10());\n+                        black_box(x.ilog10());\n                     }\n                 }\n             });\n@@ -27,7 +27,7 @@ macro_rules! int_log_bench {\n                 .collect();\n             bench.iter(|| {\n                 for x in &numbers {\n-                    black_box(black_box(x).log10());\n+                    black_box(black_box(x).ilog10());\n                 }\n             });\n         }\n@@ -44,7 +44,7 @@ macro_rules! int_log_bench {\n                 .collect();\n             bench.iter(|| {\n                 for x in &numbers {\n-                    black_box(black_box(x).log10());\n+                    black_box(black_box(x).ilog10());\n                 }\n             });\n         }"}, {"sha": "2433139a592b568b9399c8ec0306ac1d9df1e01f", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -892,8 +892,7 @@ impl char {\n     ///\n     /// The general categories for numbers (`Nd` for decimal digits, `Nl` for letter-like numeric\n     /// characters, and `No` for other numeric characters) are specified in the [Unicode Character\n-    /// Database][ucd] [`UnicodeData.txt`]. Note that this means ideographic numbers like '\u4e09'\n-    /// are considered alphabetic, not numeric. Please consider to use `is_ascii_digit` or `is_digit`.\n+    /// Database][ucd] [`UnicodeData.txt`].\n     ///\n     /// This method doesn't cover everything that could be considered a number, e.g. ideographic numbers like '\u4e09'.\n     /// If you want everything including characters with overlapping purposes then you might want to use"}, {"sha": "d2a21b6b38260770323a2d68b39bc0471b09c47b", "filename": "library/core/src/num/bignum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fcore%2Fsrc%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fcore%2Fsrc%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fbignum.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -137,7 +137,7 @@ macro_rules! define_bignum {\n                 // Find the most significant non-zero digit.\n                 let msd = digits.iter().rposition(|&x| x != 0);\n                 match msd {\n-                    Some(msd) => msd * digitbits + digits[msd].log2() as usize + 1,\n+                    Some(msd) => msd * digitbits + digits[msd].ilog2() as usize + 1,\n                     // There are no non-zero digits, i.e., the number is zero.\n                     _ => 0,\n                 }"}, {"sha": "92b12ed33528db86c9cf897d785bc6347bf72353", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -2204,7 +2204,7 @@ macro_rules! int_impl {\n         /// rounded down.\n         ///\n         /// This method might not be optimized owing to implementation details;\n-        /// `log2` can produce results more efficiently for base 2, and `log10`\n+        /// `ilog2` can produce results more efficiently for base 2, and `ilog10`\n         /// can produce results more efficiently for base 10.\n         ///\n         /// # Panics\n@@ -2217,7 +2217,7 @@ macro_rules! int_impl {\n         ///\n         /// ```\n         /// #![feature(int_log)]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".log(5), 1);\")]\n+        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".ilog(5), 1);\")]\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n@@ -2226,8 +2226,8 @@ macro_rules! int_impl {\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n-        pub const fn log(self, base: Self) -> u32 {\n-            match self.checked_log(base) {\n+        pub const fn ilog(self, base: Self) -> u32 {\n+            match self.checked_ilog(base) {\n                 Some(n) => n,\n                 None => {\n                     // In debug builds, trigger a panic on None.\n@@ -2250,7 +2250,7 @@ macro_rules! int_impl {\n         ///\n         /// ```\n         /// #![feature(int_log)]\n-        #[doc = concat!(\"assert_eq!(2\", stringify!($SelfT), \".log2(), 1);\")]\n+        #[doc = concat!(\"assert_eq!(2\", stringify!($SelfT), \".ilog2(), 1);\")]\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n@@ -2259,8 +2259,8 @@ macro_rules! int_impl {\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n-        pub const fn log2(self) -> u32 {\n-            match self.checked_log2() {\n+        pub const fn ilog2(self) -> u32 {\n+            match self.checked_ilog2() {\n                 Some(n) => n,\n                 None => {\n                     // In debug builds, trigger a panic on None.\n@@ -2283,7 +2283,7 @@ macro_rules! int_impl {\n         ///\n         /// ```\n         /// #![feature(int_log)]\n-        #[doc = concat!(\"assert_eq!(10\", stringify!($SelfT), \".log10(), 1);\")]\n+        #[doc = concat!(\"assert_eq!(10\", stringify!($SelfT), \".ilog10(), 1);\")]\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n@@ -2292,8 +2292,8 @@ macro_rules! int_impl {\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n-        pub const fn log10(self) -> u32 {\n-            match self.checked_log10() {\n+        pub const fn ilog10(self) -> u32 {\n+            match self.checked_ilog10() {\n                 Some(n) => n,\n                 None => {\n                     // In debug builds, trigger a panic on None.\n@@ -2311,20 +2311,20 @@ macro_rules! int_impl {\n         /// Returns `None` if the number is negative or zero, or if the base is not at least 2.\n         ///\n         /// This method might not be optimized owing to implementation details;\n-        /// `checked_log2` can produce results more efficiently for base 2, and\n-        /// `checked_log10` can produce results more efficiently for base 10.\n+        /// `checked_ilog2` can produce results more efficiently for base 2, and\n+        /// `checked_ilog10` can produce results more efficiently for base 10.\n         ///\n         /// # Examples\n         ///\n         /// ```\n         /// #![feature(int_log)]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".checked_log(5), Some(1));\")]\n+        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".checked_ilog(5), Some(1));\")]\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n-        pub const fn checked_log(self, base: Self) -> Option<u32> {\n+        pub const fn checked_ilog(self, base: Self) -> Option<u32> {\n             if self <= 0 || base <= 1 {\n                 None\n             } else {\n@@ -2333,7 +2333,7 @@ macro_rules! int_impl {\n \n                 // Optimization for 128 bit wide integers.\n                 if Self::BITS == 128 {\n-                    let b = Self::log2(self) / (Self::log2(base) + 1);\n+                    let b = Self::ilog2(self) / (Self::ilog2(base) + 1);\n                     n += b;\n                     r /= base.pow(b as u32);\n                 }\n@@ -2354,13 +2354,13 @@ macro_rules! int_impl {\n         ///\n         /// ```\n         /// #![feature(int_log)]\n-        #[doc = concat!(\"assert_eq!(2\", stringify!($SelfT), \".checked_log2(), Some(1));\")]\n+        #[doc = concat!(\"assert_eq!(2\", stringify!($SelfT), \".checked_ilog2(), Some(1));\")]\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n-        pub const fn checked_log2(self) -> Option<u32> {\n+        pub const fn checked_ilog2(self) -> Option<u32> {\n             if self <= 0 {\n                 None\n             } else {\n@@ -2378,13 +2378,13 @@ macro_rules! int_impl {\n         ///\n         /// ```\n         /// #![feature(int_log)]\n-        #[doc = concat!(\"assert_eq!(10\", stringify!($SelfT), \".checked_log10(), Some(1));\")]\n+        #[doc = concat!(\"assert_eq!(10\", stringify!($SelfT), \".checked_ilog10(), Some(1));\")]\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n-        pub const fn checked_log10(self) -> Option<u32> {\n+        pub const fn checked_ilog10(self) -> Option<u32> {\n             if self > 0 {\n                 Some(int_log10::$ActualT(self as $ActualT))\n             } else {"}, {"sha": "6196c4da4e32928670529a82433ff98baaea50ba", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -450,7 +450,7 @@ macro_rules! nonzero_unsigned_operations {\n                 /// Returns the base 2 logarithm of the number, rounded down.\n                 ///\n                 /// This is the same operation as\n-                #[doc = concat!(\"[`\", stringify!($Int), \"::log2`],\")]\n+                #[doc = concat!(\"[`\", stringify!($Int), \"::ilog2`],\")]\n                 /// except that it has no failure cases to worry about\n                 /// since this value can never be zero.\n                 ///\n@@ -460,22 +460,22 @@ macro_rules! nonzero_unsigned_operations {\n                 /// #![feature(int_log)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n-                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(7).unwrap().log2(), 2);\")]\n-                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(8).unwrap().log2(), 3);\")]\n-                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(9).unwrap().log2(), 3);\")]\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(7).unwrap().ilog2(), 2);\")]\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(8).unwrap().ilog2(), 3);\")]\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(9).unwrap().ilog2(), 3);\")]\n                 /// ```\n                 #[unstable(feature = \"int_log\", issue = \"70887\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]\n-                pub const fn log2(self) -> u32 {\n+                pub const fn ilog2(self) -> u32 {\n                     Self::BITS - 1 - self.leading_zeros()\n                 }\n \n                 /// Returns the base 10 logarithm of the number, rounded down.\n                 ///\n                 /// This is the same operation as\n-                #[doc = concat!(\"[`\", stringify!($Int), \"::log10`],\")]\n+                #[doc = concat!(\"[`\", stringify!($Int), \"::ilog10`],\")]\n                 /// except that it has no failure cases to worry about\n                 /// since this value can never be zero.\n                 ///\n@@ -485,15 +485,15 @@ macro_rules! nonzero_unsigned_operations {\n                 /// #![feature(int_log)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n-                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(99).unwrap().log10(), 1);\")]\n-                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(100).unwrap().log10(), 2);\")]\n-                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(101).unwrap().log10(), 2);\")]\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(99).unwrap().ilog10(), 1);\")]\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(100).unwrap().ilog10(), 2);\")]\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(101).unwrap().ilog10(), 2);\")]\n                 /// ```\n                 #[unstable(feature = \"int_log\", issue = \"70887\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]\n-                pub const fn log10(self) -> u32 {\n+                pub const fn ilog10(self) -> u32 {\n                     super::int_log10::$Int(self.0)\n                 }\n             }"}, {"sha": "aa3e8b9974ecb9e820f287330a3bd84e21d65d4a", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -700,7 +700,7 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_log)]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".log(5), 1);\")]\n+        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".ilog(5), 1);\")]\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n@@ -709,8 +709,8 @@ macro_rules! uint_impl {\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n-        pub const fn log(self, base: Self) -> u32 {\n-            match self.checked_log(base) {\n+        pub const fn ilog(self, base: Self) -> u32 {\n+            match self.checked_ilog(base) {\n                 Some(n) => n,\n                 None => {\n                     // In debug builds, trigger a panic on None.\n@@ -733,7 +733,7 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_log)]\n-        #[doc = concat!(\"assert_eq!(2\", stringify!($SelfT), \".log2(), 1);\")]\n+        #[doc = concat!(\"assert_eq!(2\", stringify!($SelfT), \".ilog2(), 1);\")]\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n@@ -742,8 +742,8 @@ macro_rules! uint_impl {\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n-        pub const fn log2(self) -> u32 {\n-            match self.checked_log2() {\n+        pub const fn ilog2(self) -> u32 {\n+            match self.checked_ilog2() {\n                 Some(n) => n,\n                 None => {\n                     // In debug builds, trigger a panic on None.\n@@ -766,7 +766,7 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_log)]\n-        #[doc = concat!(\"assert_eq!(10\", stringify!($SelfT), \".log10(), 1);\")]\n+        #[doc = concat!(\"assert_eq!(10\", stringify!($SelfT), \".ilog10(), 1);\")]\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n@@ -775,8 +775,8 @@ macro_rules! uint_impl {\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n-        pub const fn log10(self) -> u32 {\n-            match self.checked_log10() {\n+        pub const fn ilog10(self) -> u32 {\n+            match self.checked_ilog10() {\n                 Some(n) => n,\n                 None => {\n                     // In debug builds, trigger a panic on None.\n@@ -794,20 +794,20 @@ macro_rules! uint_impl {\n         /// Returns `None` if the number is zero, or if the base is not at least 2.\n         ///\n         /// This method might not be optimized owing to implementation details;\n-        /// `checked_log2` can produce results more efficiently for base 2, and\n-        /// `checked_log10` can produce results more efficiently for base 10.\n+        /// `checked_ilog2` can produce results more efficiently for base 2, and\n+        /// `checked_ilog10` can produce results more efficiently for base 10.\n         ///\n         /// # Examples\n         ///\n         /// ```\n         /// #![feature(int_log)]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".checked_log(5), Some(1));\")]\n+        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".checked_ilog(5), Some(1));\")]\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n-        pub const fn checked_log(self, base: Self) -> Option<u32> {\n+        pub const fn checked_ilog(self, base: Self) -> Option<u32> {\n             if self <= 0 || base <= 1 {\n                 None\n             } else {\n@@ -816,7 +816,7 @@ macro_rules! uint_impl {\n \n                 // Optimization for 128 bit wide integers.\n                 if Self::BITS == 128 {\n-                    let b = Self::log2(self) / (Self::log2(base) + 1);\n+                    let b = Self::ilog2(self) / (Self::ilog2(base) + 1);\n                     n += b;\n                     r /= base.pow(b as u32);\n                 }\n@@ -837,15 +837,15 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_log)]\n-        #[doc = concat!(\"assert_eq!(2\", stringify!($SelfT), \".checked_log2(), Some(1));\")]\n+        #[doc = concat!(\"assert_eq!(2\", stringify!($SelfT), \".checked_ilog2(), Some(1));\")]\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n-        pub const fn checked_log2(self) -> Option<u32> {\n+        pub const fn checked_ilog2(self) -> Option<u32> {\n             if let Some(x) = <$NonZeroT>::new(self) {\n-                Some(x.log2())\n+                Some(x.ilog2())\n             } else {\n                 None\n             }\n@@ -859,15 +859,15 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_log)]\n-        #[doc = concat!(\"assert_eq!(10\", stringify!($SelfT), \".checked_log10(), Some(1));\")]\n+        #[doc = concat!(\"assert_eq!(10\", stringify!($SelfT), \".checked_ilog10(), Some(1));\")]\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n-        pub const fn checked_log10(self) -> Option<u32> {\n+        pub const fn checked_ilog10(self) -> Option<u32> {\n             if let Some(x) = <$NonZeroT>::new(self) {\n-                Some(x.log10())\n+                Some(x.ilog10())\n             } else {\n                 None\n             }"}, {"sha": "2c57569b5aa5376ae3d4616f90cdd40ffb697669", "filename": "library/core/src/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1135,7 +1135,7 @@ impl fmt::Debug for Duration {\n                     // 2. The postfix: can be \"\u00b5s\" so we have to count UTF8 characters.\n                     let mut actual_w = prefix.len() + postfix.chars().count();\n                     // 3. The integer part:\n-                    if let Some(log) = integer_part.checked_log10() {\n+                    if let Some(log) = integer_part.checked_ilog10() {\n                         // integer_part is > 0, so has length log10(x)+1\n                         actual_w += 1 + log as usize;\n                     } else {"}, {"sha": "be203fb5c04ff00eb04757cec2448f43db1adf68", "filename": "library/core/tests/num/int_log.rs", "status": "modified", "additions": 78, "deletions": 78, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,166 +1,166 @@\n-//! This tests the `Integer::{log,log2,log10}` methods. These tests are in a\n+//! This tests the `Integer::{ilog,log2,log10}` methods. These tests are in a\n //! separate file because there's both a large number of them, and not all tests\n-//! can be run on Android. This is because in Android `log2` uses an imprecise\n+//! can be run on Android. This is because in Android `ilog2` uses an imprecise\n //! approximation:https://github.com/rust-lang/rust/blob/4825e12fc9c79954aa0fe18f5521efa6c19c7539/src/libstd/sys/unix/android.rs#L27-L53\n \n #[test]\n-fn checked_log() {\n-    assert_eq!(999u32.checked_log(10), Some(2));\n-    assert_eq!(1000u32.checked_log(10), Some(3));\n-    assert_eq!(555u32.checked_log(13), Some(2));\n-    assert_eq!(63u32.checked_log(4), Some(2));\n-    assert_eq!(64u32.checked_log(4), Some(3));\n-    assert_eq!(10460353203u64.checked_log(3), Some(21));\n-    assert_eq!(10460353202u64.checked_log(3), Some(20));\n-    assert_eq!(147808829414345923316083210206383297601u128.checked_log(3), Some(80));\n-    assert_eq!(147808829414345923316083210206383297600u128.checked_log(3), Some(79));\n-    assert_eq!(22528399544939174411840147874772641u128.checked_log(19683), Some(8));\n-    assert_eq!(22528399544939174411840147874772631i128.checked_log(19683), Some(7));\n-\n-    assert_eq!(0u8.checked_log(4), None);\n-    assert_eq!(0u16.checked_log(4), None);\n-    assert_eq!(0i8.checked_log(4), None);\n-    assert_eq!(0i16.checked_log(4), None);\n+fn checked_ilog() {\n+    assert_eq!(999u32.checked_ilog(10), Some(2));\n+    assert_eq!(1000u32.checked_ilog(10), Some(3));\n+    assert_eq!(555u32.checked_ilog(13), Some(2));\n+    assert_eq!(63u32.checked_ilog(4), Some(2));\n+    assert_eq!(64u32.checked_ilog(4), Some(3));\n+    assert_eq!(10460353203u64.checked_ilog(3), Some(21));\n+    assert_eq!(10460353202u64.checked_ilog(3), Some(20));\n+    assert_eq!(147808829414345923316083210206383297601u128.checked_ilog(3), Some(80));\n+    assert_eq!(147808829414345923316083210206383297600u128.checked_ilog(3), Some(79));\n+    assert_eq!(22528399544939174411840147874772641u128.checked_ilog(19683), Some(8));\n+    assert_eq!(22528399544939174411840147874772631i128.checked_ilog(19683), Some(7));\n+\n+    assert_eq!(0u8.checked_ilog(4), None);\n+    assert_eq!(0u16.checked_ilog(4), None);\n+    assert_eq!(0i8.checked_ilog(4), None);\n+    assert_eq!(0i16.checked_ilog(4), None);\n \n     #[cfg(not(miri))] // Miri is too slow\n     for i in i16::MIN..=0 {\n-        assert_eq!(i.checked_log(4), None);\n+        assert_eq!(i.checked_ilog(4), None);\n     }\n     #[cfg(not(miri))] // Miri is too slow\n     for i in 1..=i16::MAX {\n-        assert_eq!(i.checked_log(13), Some((i as f32).log(13.0) as u32));\n+        assert_eq!(i.checked_ilog(13), Some((i as f32).log(13.0) as u32));\n     }\n     #[cfg(not(miri))] // Miri is too slow\n     for i in 1..=u16::MAX {\n-        assert_eq!(i.checked_log(13), Some((i as f32).log(13.0) as u32));\n+        assert_eq!(i.checked_ilog(13), Some((i as f32).log(13.0) as u32));\n     }\n }\n \n #[test]\n-fn checked_log2() {\n-    assert_eq!(5u32.checked_log2(), Some(2));\n-    assert_eq!(0u64.checked_log2(), None);\n-    assert_eq!(128i32.checked_log2(), Some(7));\n-    assert_eq!((-55i16).checked_log2(), None);\n+fn checked_ilog2() {\n+    assert_eq!(5u32.checked_ilog2(), Some(2));\n+    assert_eq!(0u64.checked_ilog2(), None);\n+    assert_eq!(128i32.checked_ilog2(), Some(7));\n+    assert_eq!((-55i16).checked_ilog2(), None);\n \n-    assert_eq!(0u8.checked_log2(), None);\n-    assert_eq!(0u16.checked_log2(), None);\n-    assert_eq!(0i8.checked_log2(), None);\n-    assert_eq!(0i16.checked_log2(), None);\n+    assert_eq!(0u8.checked_ilog2(), None);\n+    assert_eq!(0u16.checked_ilog2(), None);\n+    assert_eq!(0i8.checked_ilog2(), None);\n+    assert_eq!(0i16.checked_ilog2(), None);\n \n     for i in 1..=u8::MAX {\n-        assert_eq!(i.checked_log2(), Some((i as f32).log2() as u32));\n+        assert_eq!(i.checked_ilog2(), Some((i as f32).log2() as u32));\n     }\n     #[cfg(not(miri))] // Miri is too slow\n     for i in 1..=u16::MAX {\n-        // Guard against Android's imprecise f32::log2 implementation.\n+        // Guard against Android's imprecise f32::ilog2 implementation.\n         if i != 8192 && i != 32768 {\n-            assert_eq!(i.checked_log2(), Some((i as f32).log2() as u32));\n+            assert_eq!(i.checked_ilog2(), Some((i as f32).log2() as u32));\n         }\n     }\n     for i in i8::MIN..=0 {\n-        assert_eq!(i.checked_log2(), None);\n+        assert_eq!(i.checked_ilog2(), None);\n     }\n     for i in 1..=i8::MAX {\n-        assert_eq!(i.checked_log2(), Some((i as f32).log2() as u32));\n+        assert_eq!(i.checked_ilog2(), Some((i as f32).log2() as u32));\n     }\n     #[cfg(not(miri))] // Miri is too slow\n     for i in i16::MIN..=0 {\n-        assert_eq!(i.checked_log2(), None);\n+        assert_eq!(i.checked_ilog2(), None);\n     }\n     #[cfg(not(miri))] // Miri is too slow\n     for i in 1..=i16::MAX {\n-        // Guard against Android's imprecise f32::log2 implementation.\n+        // Guard against Android's imprecise f32::ilog2 implementation.\n         if i != 8192 {\n-            assert_eq!(i.checked_log2(), Some((i as f32).log2() as u32));\n+            assert_eq!(i.checked_ilog2(), Some((i as f32).log2() as u32));\n         }\n     }\n }\n \n-// Validate cases that fail on Android's imprecise float log2 implementation.\n+// Validate cases that fail on Android's imprecise float ilog2 implementation.\n #[test]\n #[cfg(not(target_os = \"android\"))]\n-fn checked_log2_not_android() {\n-    assert_eq!(8192u16.checked_log2(), Some((8192f32).log2() as u32));\n-    assert_eq!(32768u16.checked_log2(), Some((32768f32).log2() as u32));\n-    assert_eq!(8192i16.checked_log2(), Some((8192f32).log2() as u32));\n+fn checked_ilog2_not_android() {\n+    assert_eq!(8192u16.checked_ilog2(), Some((8192f32).log2() as u32));\n+    assert_eq!(32768u16.checked_ilog2(), Some((32768f32).log2() as u32));\n+    assert_eq!(8192i16.checked_ilog2(), Some((8192f32).log2() as u32));\n }\n \n #[test]\n-fn checked_log10() {\n-    assert_eq!(0u8.checked_log10(), None);\n-    assert_eq!(0u16.checked_log10(), None);\n-    assert_eq!(0i8.checked_log10(), None);\n-    assert_eq!(0i16.checked_log10(), None);\n+fn checked_ilog10() {\n+    assert_eq!(0u8.checked_ilog10(), None);\n+    assert_eq!(0u16.checked_ilog10(), None);\n+    assert_eq!(0i8.checked_ilog10(), None);\n+    assert_eq!(0i16.checked_ilog10(), None);\n \n     #[cfg(not(miri))] // Miri is too slow\n     for i in i16::MIN..=0 {\n-        assert_eq!(i.checked_log10(), None);\n+        assert_eq!(i.checked_ilog10(), None);\n     }\n     #[cfg(not(miri))] // Miri is too slow\n     for i in 1..=i16::MAX {\n-        assert_eq!(i.checked_log10(), Some((i as f32).log10() as u32));\n+        assert_eq!(i.checked_ilog10(), Some((i as f32).log10() as u32));\n     }\n     #[cfg(not(miri))] // Miri is too slow\n     for i in 1..=u16::MAX {\n-        assert_eq!(i.checked_log10(), Some((i as f32).log10() as u32));\n+        assert_eq!(i.checked_ilog10(), Some((i as f32).log10() as u32));\n     }\n     #[cfg(not(miri))] // Miri is too slow\n     for i in 1..=100_000u32 {\n-        assert_eq!(i.checked_log10(), Some((i as f32).log10() as u32));\n+        assert_eq!(i.checked_ilog10(), Some((i as f32).log10() as u32));\n     }\n }\n \n-macro_rules! log10_loop {\n-    ($T:ty, $log10_max:expr) => {\n-        assert_eq!(<$T>::MAX.log10(), $log10_max);\n-        for i in 0..=$log10_max {\n+macro_rules! ilog10_loop {\n+    ($T:ty, $ilog10_max:expr) => {\n+        assert_eq!(<$T>::MAX.ilog10(), $ilog10_max);\n+        for i in 0..=$ilog10_max {\n             let p = (10 as $T).pow(i as u32);\n             if p >= 10 {\n-                assert_eq!((p - 9).log10(), i - 1);\n-                assert_eq!((p - 1).log10(), i - 1);\n+                assert_eq!((p - 9).ilog10(), i - 1);\n+                assert_eq!((p - 1).ilog10(), i - 1);\n             }\n-            assert_eq!(p.log10(), i);\n-            assert_eq!((p + 1).log10(), i);\n+            assert_eq!(p.ilog10(), i);\n+            assert_eq!((p + 1).ilog10(), i);\n             if p >= 10 {\n-                assert_eq!((p + 9).log10(), i);\n+                assert_eq!((p + 9).ilog10(), i);\n             }\n \n-            // also check `x.log(10)`\n+            // also check `x.ilog(10)`\n             if p >= 10 {\n-                assert_eq!((p - 9).log(10), i - 1);\n-                assert_eq!((p - 1).log(10), i - 1);\n+                assert_eq!((p - 9).ilog(10), i - 1);\n+                assert_eq!((p - 1).ilog(10), i - 1);\n             }\n-            assert_eq!(p.log(10), i);\n-            assert_eq!((p + 1).log(10), i);\n+            assert_eq!(p.ilog(10), i);\n+            assert_eq!((p + 1).ilog(10), i);\n             if p >= 10 {\n-                assert_eq!((p + 9).log(10), i);\n+                assert_eq!((p + 9).ilog(10), i);\n             }\n         }\n     };\n }\n \n #[test]\n-fn log10_u8() {\n-    log10_loop! { u8, 2 }\n+fn ilog10_u8() {\n+    ilog10_loop! { u8, 2 }\n }\n \n #[test]\n-fn log10_u16() {\n-    log10_loop! { u16, 4 }\n+fn ilog10_u16() {\n+    ilog10_loop! { u16, 4 }\n }\n \n #[test]\n-fn log10_u32() {\n-    log10_loop! { u32, 9 }\n+fn ilog10_u32() {\n+    ilog10_loop! { u32, 9 }\n }\n \n #[test]\n-fn log10_u64() {\n-    log10_loop! { u64, 19 }\n+fn ilog10_u64() {\n+    ilog10_loop! { u64, 19 }\n }\n \n #[test]\n-fn log10_u128() {\n-    log10_loop! { u128, 38 }\n+fn ilog10_u128() {\n+    ilog10_loop! { u128, 38 }\n }"}, {"sha": "b91db03a3d55355405bce81a06ad53a06f6c5751", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -9,12 +9,6 @@\n //! implementing `std::error::Error`) to get a causal chain of where an error\n //! was generated.\n //!\n-//! > **Note**: this module is unstable and is designed in [RFC 2504], and you\n-//! > can learn more about its status in the [tracking issue].\n-//!\n-//! [RFC 2504]: https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md\n-//! [tracking issue]: https://github.com/rust-lang/rust/issues/53487\n-//!\n //! ## Accuracy\n //!\n //! Backtraces are attempted to be as accurate as possible, but no guarantees\n@@ -64,7 +58,7 @@\n //! `RUST_LIB_BACKTRACE` or `RUST_BACKTRACE` at runtime might not actually change\n //! how backtraces are captured.\n \n-#![unstable(feature = \"backtrace\", issue = \"53487\")]\n+#![stable(feature = \"backtrace\", since = \"1.65.0\")]\n \n #[cfg(test)]\n mod tests;\n@@ -110,13 +104,15 @@ use crate::vec::Vec;\n /// previous point in time. In some instances the `Backtrace` type may\n /// internally be empty due to configuration. For more information see\n /// `Backtrace::capture`.\n+#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n #[must_use]\n pub struct Backtrace {\n     inner: Inner,\n }\n \n /// The current status of a backtrace, indicating whether it was captured or\n /// whether it is empty for some other reason.\n+#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n #[non_exhaustive]\n #[derive(Debug, PartialEq, Eq)]\n pub enum BacktraceStatus {\n@@ -174,6 +170,7 @@ enum BytesOrWide {\n     Wide(Vec<u16>),\n }\n \n+#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n impl fmt::Debug for Backtrace {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let capture = match &self.inner {\n@@ -200,6 +197,7 @@ impl fmt::Debug for Backtrace {\n     }\n }\n \n+#[unstable(feature = \"backtrace_frames\", issue = \"79676\")]\n impl fmt::Debug for BacktraceFrame {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut dbg = fmt.debug_list();\n@@ -288,6 +286,7 @@ impl Backtrace {\n     ///\n     /// To forcibly capture a backtrace regardless of environment variables, use\n     /// the `Backtrace::force_capture` function.\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     #[inline(never)] // want to make sure there's a frame here to remove\n     pub fn capture() -> Backtrace {\n         if !Backtrace::enabled() {\n@@ -306,13 +305,16 @@ impl Backtrace {\n     /// Note that capturing a backtrace can be an expensive operation on some\n     /// platforms, so this should be used with caution in performance-sensitive\n     /// parts of code.\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     #[inline(never)] // want to make sure there's a frame here to remove\n     pub fn force_capture() -> Backtrace {\n         Backtrace::create(Backtrace::force_capture as usize)\n     }\n \n     /// Forcibly captures a disabled backtrace, regardless of environment\n     /// variable configuration.\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n+    #[rustc_const_stable(feature = \"backtrace\", since = \"1.65.0\")]\n     pub const fn disabled() -> Backtrace {\n         Backtrace { inner: Inner::Disabled }\n     }\n@@ -356,6 +358,7 @@ impl Backtrace {\n     /// Returns the status of this backtrace, indicating whether this backtrace\n     /// request was unsupported, disabled, or a stack trace was actually\n     /// captured.\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     #[must_use]\n     pub fn status(&self) -> BacktraceStatus {\n         match self.inner {\n@@ -375,6 +378,7 @@ impl<'a> Backtrace {\n     }\n }\n \n+#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n impl fmt::Display for Backtrace {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let capture = match &self.inner {"}, {"sha": "df7a49d258282488ff8e1e8e54d13da68bdb0f61", "filename": "library/std/src/error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1454,7 +1454,6 @@ impl<E> Report<E> {\n     ///\n     /// ```rust\n     /// #![feature(error_reporter)]\n-    /// #![feature(backtrace)]\n     /// #![feature(provide_any)]\n     /// #![feature(error_generic_member_access)]\n     /// # use std::error::Error;"}, {"sha": "4435bf5b0f2c8b480531b4689913c1c96f828a9b", "filename": "src/test/mir-opt/bool_compare.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fbool_compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fbool_compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: InstCombine\n+\n // EMIT_MIR bool_compare.opt1.InstCombine.diff\n fn opt1(x: bool) -> u32 {\n     if x != true { 0 } else { 1 }"}, {"sha": "c73150f947dfef7764c1b5c62fcfa9b9583a9f10", "filename": "src/test/mir-opt/combine_array_len.norm2.InstCombine.64bit.diff", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/0459d2fa736a556332ea9613ad0edf073107cb40/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0459d2fa736a556332ea9613ad0edf073107cb40/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.64bit.diff?ref=0459d2fa736a556332ea9613ad0edf073107cb40", "patch": "@@ -1,77 +0,0 @@\n-- // MIR for `norm2` before InstCombine\n-+ // MIR for `norm2` after InstCombine\n-  \n-  fn norm2(_1: [f32; 2]) -> f32 {\n-      debug x => _1;                       // in scope 0 at $DIR/combine_array_len.rs:+0:10: +0:11\n-      let mut _0: f32;                     // return place in scope 0 at $DIR/combine_array_len.rs:+0:26: +0:29\n-      let _2: f32;                         // in scope 0 at $DIR/combine_array_len.rs:+1:9: +1:10\n-      let _3: usize;                       // in scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n-      let mut _4: usize;                   // in scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-      let mut _5: bool;                    // in scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-      let _7: usize;                       // in scope 0 at $DIR/combine_array_len.rs:+2:15: +2:16\n-      let mut _8: usize;                   // in scope 0 at $DIR/combine_array_len.rs:+2:13: +2:17\n-      let mut _9: bool;                    // in scope 0 at $DIR/combine_array_len.rs:+2:13: +2:17\n-      let mut _10: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:5: +3:8\n-      let mut _11: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:5: +3:6\n-      let mut _12: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:7: +3:8\n-      let mut _13: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:11: +3:14\n-      let mut _14: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:11: +3:12\n-      let mut _15: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:13: +3:14\n-      scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/combine_array_len.rs:+1:9: +1:10\n-          let _6: f32;                     // in scope 1 at $DIR/combine_array_len.rs:+2:9: +2:10\n-          scope 2 {\n-              debug b => _6;               // in scope 2 at $DIR/combine_array_len.rs:+2:9: +2:10\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/combine_array_len.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n-          _3 = const 0_usize;              // scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n--         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-+         _4 = const 2_usize;              // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-          _5 = Lt(_3, _4);                 // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-          assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-      }\n-  \n-      bb1: {\n-          _2 = _1[_3];                     // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-          StorageDead(_3);                 // scope 0 at $DIR/combine_array_len.rs:+1:17: +1:18\n-          StorageLive(_6);                 // scope 1 at $DIR/combine_array_len.rs:+2:9: +2:10\n-          StorageLive(_7);                 // scope 1 at $DIR/combine_array_len.rs:+2:15: +2:16\n-          _7 = const 1_usize;              // scope 1 at $DIR/combine_array_len.rs:+2:15: +2:16\n--         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-+         _8 = const 2_usize;              // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-          _9 = Lt(_7, _8);                 // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-      }\n-  \n-      bb2: {\n-          _6 = _1[_7];                     // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-          StorageDead(_7);                 // scope 1 at $DIR/combine_array_len.rs:+2:17: +2:18\n-          StorageLive(_10);                // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:8\n-          StorageLive(_11);                // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:6\n-          _11 = _2;                        // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:6\n-          StorageLive(_12);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n-          _12 = _2;                        // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n-          _10 = Mul(move _11, move _12);   // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:8\n-          StorageDead(_12);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n-          StorageDead(_11);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n-          StorageLive(_13);                // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:14\n-          StorageLive(_14);                // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:12\n-          _14 = _6;                        // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:12\n-          StorageLive(_15);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          _15 = _6;                        // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          _13 = Mul(move _14, move _15);   // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:14\n-          StorageDead(_15);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          StorageDead(_14);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          _0 = Add(move _10, move _13);    // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:14\n-          StorageDead(_13);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          StorageDead(_10);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          StorageDead(_6);                 // scope 1 at $DIR/combine_array_len.rs:+4:1: +4:2\n-          StorageDead(_2);                 // scope 0 at $DIR/combine_array_len.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/combine_array_len.rs:+4:2: +4:2\n-      }\n-  }\n-  "}, {"sha": "c73150f947dfef7764c1b5c62fcfa9b9583a9f10", "filename": "src/test/mir-opt/combine_array_len.norm2.InstCombine.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.diff?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "previous_filename": "src/test/mir-opt/combine_array_len.norm2.InstCombine.32bit.diff"}, {"sha": "3ef3bd09afdef2ad8594db7252d50ae52823ed4d", "filename": "src/test/mir-opt/combine_array_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,4 +1,4 @@\n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+// unit-test: InstCombine\n // EMIT_MIR combine_array_len.norm2.InstCombine.diff\n \n fn norm2(x: [f32; 2]) -> f32 {"}, {"sha": "6f84f186b31152dc3b65e2c9324f6a3c925ff78c", "filename": "src/test/mir-opt/const_goto.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fconst_goto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fconst_goto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: ConstGoto\n+\n pub enum Foo {\n     A,\n     B,"}, {"sha": "81c356cb1db526b0373d8664983d63a44ae428ba", "filename": "src/test/mir-opt/const_goto_storage.match_nested_if.ConstGoto.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -17,7 +17,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_goto_storage.rs:+1:9: +1:12\n -         StorageLive(_2);                 // scope 0 at $DIR/const_goto_storage.rs:+1:21: +1:23\n--         nop;                             // scope 0 at $DIR/const_goto_storage.rs:+1:21: +1:23\n+-         Deinit(_2);                      // scope 0 at $DIR/const_goto_storage.rs:+1:21: +1:23\n -         StorageLive(_3);                 // scope 0 at $DIR/const_goto_storage.rs:+2:15: +6:10\n -         StorageLive(_4);                 // scope 0 at $DIR/const_goto_storage.rs:+2:18: +2:76\n -         StorageLive(_5);                 // scope 0 at $DIR/const_goto_storage.rs:+2:21: +2:52"}, {"sha": "459599c73eb9ccefabeef4d73f687fe2f97282ab", "filename": "src/test/mir-opt/const_goto_storage.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: ConstGoto\n+\n // EMIT_MIR const_goto_storage.match_nested_if.ConstGoto.diff\n fn match_nested_if() -> bool {\n     let val = match () {"}, {"sha": "ee59402af386ba1d16ec8ffd93edfd1889acc608", "filename": "src/test/mir-opt/deaggregator_test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: Deaggregator\n+\n struct Baz {\n     x: usize,\n     y: f32,"}, {"sha": "ea402dafdec7a8f23cebe29f036f1f05aea64d1c", "filename": "src/test/mir-opt/deaggregator_test_enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: Deaggregator\n+\n enum Baz {\n     Empty,\n     Foo { x: usize },"}, {"sha": "955c317324aa8418059bfc7635dda5521e825df8", "filename": "src/test/mir-opt/deaggregator_test_enum_2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: Deaggregator\n // Test that deaggregate fires in more than one basic block\n \n enum Foo {"}, {"sha": "46305fe21d28c2c33d325974fb8f6cd1e7bb4b53", "filename": "src/test/mir-opt/deaggregator_test_multiple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: Deaggregator\n // Test that deaggregate fires more than once per block\n \n enum Foo {"}, {"sha": "53f977de5d6ad6b09b1a679d7d57a666cb712a06", "filename": "src/test/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "status": "modified", "additions": 41, "deletions": 48, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -7,101 +7,94 @@\n       let mut _2: &[u8];                   // in scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n       let mut _3: &str;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n       let mut _4: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-      let mut _5: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-      let mut _6: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-      let mut _7: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-      scope 1 (inlined core::str::<impl str>::as_bytes) { // at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-          debug self => _3;                // in scope 1 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n-          let mut _8: &str;                // in scope 1 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n-          scope 2 {\n-          }\n-      }\n+      let mut _5: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+      let mut _6: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+      let mut _7: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+      let mut _8: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+      let mut _9: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n           StorageLive(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n-          _3 = _1;                         // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n-          StorageLive(_8);                 // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n-          _8 = _3;                         // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n--         _2 = transmute::<&str, &[u8]>(move _8) -> bb14; // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n-+         _2 = transmute::<&str, &[u8]>(move _8) -> bb12; // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n+          _3 = &(*_1);                     // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n+          _2 = core::str::<impl str>::as_bytes(move _3) -> bb1; // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/str/mod.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&str) -> &[u8] {transmute::<&str, &[u8]>}, val: Value(<ZST>) }\n+                                           // + span: $DIR/deduplicate_blocks.rs:5:13: 5:21\n+                                           // + literal: Const { ty: for<'r> fn(&'r str) -> &'r [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          switchInt((*_2)[0 of 4]) -> [47_u8: bb2, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          StorageDead(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:22: +1:23\n+          _7 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+          _8 = const 4_usize;              // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+          _9 = Ge(move _7, move _8);       // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+          switchInt(move _9) -> [false: bb6, otherwise: bb2]; // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n       }\n   \n       bb2: {\n-          switchInt((*_2)[1 of 4]) -> [47_u8: bb3, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[0 of 4]) -> [47_u8: bb3, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb3: {\n-          switchInt((*_2)[2 of 4]) -> [47_u8: bb4, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[1 of 4]) -> [47_u8: bb4, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb4: {\n--         switchInt((*_2)[3 of 4]) -> [47_u8: bb10, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n-+         switchInt((*_2)[3 of 4]) -> [47_u8: bb9, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[2 of 4]) -> [47_u8: bb5, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb5: {\n-          _4 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-          _5 = Ge(move _4, const 3_usize); // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-          switchInt(move _5) -> [false: bb9, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+-         switchInt((*_2)[3 of 4]) -> [47_u8: bb11, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n++         switchInt((*_2)[3 of 4]) -> [47_u8: bb10, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb6: {\n-          switchInt((*_2)[0 of 3]) -> [47_u8: bb7, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          _4 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+          _5 = const 3_usize;              // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+          _6 = Ge(move _4, move _5);       // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+          switchInt(move _6) -> [false: bb10, otherwise: bb7]; // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n       }\n   \n       bb7: {\n-          switchInt((*_2)[1 of 3]) -> [47_u8: bb8, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[0 of 3]) -> [47_u8: bb8, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb8: {\n--         switchInt((*_2)[2 of 3]) -> [47_u8: bb11, 33_u8: bb12, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n-+         switchInt((*_2)[2 of 3]) -> [47_u8: bb10, 33_u8: bb10, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[1 of 3]) -> [47_u8: bb9, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb9: {\n+-         switchInt((*_2)[2 of 3]) -> [47_u8: bb12, 33_u8: bb13, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n++         switchInt((*_2)[2 of 3]) -> [47_u8: bb11, 33_u8: bb11, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+      }\n+  \n+      bb10: {\n -         _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:+5:14: +5:19\n--         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:+5:14: +5:19\n+-         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+5:14: +5:19\n -     }\n - \n--     bb10: {\n+-     bb11: {\n           _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n--         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n-+         goto -> bb11;                    // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n+-         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n++         goto -> bb12;                    // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n       }\n   \n--     bb11: {\n+-     bb12: {\n -         _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:+3:35: +3:39\n--         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:+3:35: +3:39\n+-         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+3:35: +3:39\n -     }\n - \n--     bb12: {\n-+     bb10: {\n-          _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n--         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n-+         goto -> bb11;                    // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n-      }\n-  \n -     bb13: {\n +     bb11: {\n-          StorageDead(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/deduplicate_blocks.rs:+7:2: +7:2\n+          _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n+-         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n++         goto -> bb12;                    // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n       }\n   \n -     bb14: {\n +     bb12: {\n-          StorageDead(_8);                 // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n-          StorageDead(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:22: +1:23\n-          _6 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-          _7 = Ge(move _6, const 4_usize); // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-          switchInt(move _7) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+          StorageDead(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/deduplicate_blocks.rs:+7:2: +7:2\n       }\n   }\n   "}, {"sha": "2b9eed99ecdbf1c7d4c9f8ed374c576d6fddd466", "filename": "src/test/mir-opt/deduplicate_blocks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: DeduplicateBlocks\n+\n // EMIT_MIR deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff\n pub const fn is_line_doc_comment_2(s: &str) -> bool {\n     match s.as_bytes() {"}, {"sha": "abd6193fed95739568fc7437f95ec4b0201cb335", "filename": "src/test/mir-opt/derefer_complex_case.main.Derefer.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -30,12 +30,12 @@\n           StorageLive(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n           _14 = const main::promoted[0];   // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:5:17: 5:26\n+                                           // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n                                            // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[0])) }\n           _2 = &(*_14);                    // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n           _1 = <&[i32; 2] as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:5:17: 5:26\n+                                           // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n                                            // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }\n       }\n   \n@@ -55,7 +55,7 @@\n           _8 = &mut (*_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n           _7 = <std::slice::Iter<i32> as Iterator>::next(move _8) -> bb3; // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:5:17: 5:26\n+                                           // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n                                            // + literal: Const { ty: for<'r> fn(&'r mut std::slice::Iter<i32>) -> Option<<std::slice::Iter<i32> as Iterator>::Item> {<std::slice::Iter<i32> as Iterator>::next}, val: Value(<ZST>) }\n       }\n   \n@@ -76,7 +76,7 @@\n           _13 = _12;                       // scope 2 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n           _6 = std::mem::drop::<i32>(move _13) -> bb7; // scope 2 at $DIR/derefer_complex_case.rs:+1:29: +1:38\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:5:29: 5:33\n+                                           // + span: $DIR/derefer_complex_case.rs:6:29: 6:33\n                                            // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "dc48cee950bc98021145ca525841a075cd791db6", "filename": "src/test/mir-opt/derefer_complex_case.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: Derefer\n // EMIT_MIR derefer_complex_case.main.Derefer.diff\n // ignore-wasm32\n "}, {"sha": "3540df308367093f2e0e8bafc00be66f70abdf0f", "filename": "src/test/mir-opt/derefer_inline_test.main.Derefer.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -17,7 +17,7 @@\n           _3 = AlignOf(std::boxed::Box<u32>); // scope 1 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n           _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 1 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_inline_test.rs:10:5: 10:12\n+                                           // + span: $DIR/derefer_inline_test.rs:11:5: 11:12\n                                            // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n       }\n   \n@@ -26,7 +26,7 @@\n           _5 = ShallowInitBox(move _4, std::boxed::Box<u32>); // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n           (*_5) = f() -> [return: bb2, unwind: bb6]; // scope 0 at $DIR/derefer_inline_test.rs:+1:9: +1:12\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_inline_test.rs:10:9: 10:10\n+                                           // + span: $DIR/derefer_inline_test.rs:11:9: 11:10\n                                            // + literal: Const { ty: fn() -> Box<u32> {f}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "cc06a7dd8c40a12101b771d40bd9de199ea1388c", "filename": "src/test/mir-opt/derefer_inline_test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: Derefer\n // EMIT_MIR derefer_inline_test.main.Derefer.diff\n // ignore-wasm32 compiled with panic=abort by default\n "}, {"sha": "ed336208325fe5ae39bbab1b920399e4b9ef8f8f", "filename": "src/test/mir-opt/derefer_terminator_test.main.Derefer.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -32,15 +32,15 @@\n           StorageLive(_1);                 // scope 0 at $DIR/derefer_terminator_test.rs:+1:9: +1:10\n           _1 = foo() -> bb1;               // scope 0 at $DIR/derefer_terminator_test.rs:+1:13: +1:18\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_terminator_test.rs:5:13: 5:16\n+                                           // + span: $DIR/derefer_terminator_test.rs:6:13: 6:16\n                                            // + literal: Const { ty: fn() -> bool {foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n           StorageLive(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:+2:9: +2:10\n           _2 = foo() -> bb2;               // scope 1 at $DIR/derefer_terminator_test.rs:+2:13: +2:18\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_terminator_test.rs:6:13: 6:16\n+                                           // + span: $DIR/derefer_terminator_test.rs:7:13: 7:16\n                                            // + literal: Const { ty: fn() -> bool {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "d6750c29dd98c98fe61cf3241e5cf4bfd67435c0", "filename": "src/test/mir-opt/derefer_terminator_test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: Derefer\n // EMIT_MIR derefer_terminator_test.main.Derefer.diff\n // ignore-wasm32\n "}, {"sha": "fad0fe8eb6fc315bd57a8c577ad59105f30b13bd", "filename": "src/test/mir-opt/derefer_test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fderefer_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fderefer_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: Derefer\n // EMIT_MIR derefer_test.main.Derefer.diff\n fn main() {\n     let mut a = (42,43);"}, {"sha": "0b3888b07ab45735f77899475ddaf60baef4dff1", "filename": "src/test/mir-opt/derefer_test_multiple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: Derefer\n // EMIT_MIR derefer_test_multiple.main.Derefer.diff\n fn main () {\n     let mut a = (42, 43);"}, {"sha": "717d10c6d76276bcd506881dc409a6aae251fab9", "filename": "src/test/mir-opt/equal_true.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fequal_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fequal_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fequal_true.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,5 @@\n+// unit-test InstCombine\n+\n // EMIT_MIR equal_true.opt.InstCombine.diff\n \n fn opt(x: bool) -> i32 {"}, {"sha": "a3cee3ecf61cb4d82fafaba385f41bc8f818e432", "filename": "src/test/mir-opt/instrument_coverage.bar.InstrumentCoverage.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Finstrument_coverage.bar.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Finstrument_coverage.bar.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.bar.InstrumentCoverage.diff?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -5,7 +5,7 @@\n       let mut _0: bool;                    // return place in scope 0 at /the/src/instrument_coverage.rs:+0:13: +0:17\n   \n       bb0: {\n-+         Coverage::Counter(1) for /the/src/instrument_coverage.rs:19:1 - 21:2; // scope 0 at /the/src/instrument_coverage.rs:+2:2: +2:2\n++         Coverage::Counter(1) for /the/src/instrument_coverage.rs:20:1 - 22:2; // scope 0 at /the/src/instrument_coverage.rs:+2:2: +2:2\n           _0 = const true;                 // scope 0 at /the/src/instrument_coverage.rs:+1:5: +1:9\n           return;                          // scope 0 at /the/src/instrument_coverage.rs:+2:2: +2:2\n       }"}, {"sha": "81d5528231db65fb0437724d99cde06f9dd27b0c", "filename": "src/test/mir-opt/instrument_coverage.main.InstrumentCoverage.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -8,20 +8,20 @@\n       let mut _3: !;                       // in scope 0 at /the/src/instrument_coverage.rs:+2:18: +4:10\n   \n       bb0: {\n-+         Coverage::Counter(1) for /the/src/instrument_coverage.rs:10:1 - 10:11; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n++         Coverage::Counter(1) for /the/src/instrument_coverage.rs:11:1 - 11:11; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n           goto -> bb1;                     // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n       }\n   \n       bb1: {\n-+         Coverage::Expression(4294967295) = 1 + 2 for /the/src/instrument_coverage.rs:11:5 - 12:17; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n++         Coverage::Expression(4294967295) = 1 + 2 for /the/src/instrument_coverage.rs:12:5 - 13:17; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n           falseUnwind -> [real: bb2, cleanup: bb6]; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n       }\n   \n       bb2: {\n           StorageLive(_2);                 // scope 0 at /the/src/instrument_coverage.rs:+2:12: +2:17\n           _2 = bar() -> [return: bb3, unwind: bb6]; // scope 0 at /the/src/instrument_coverage.rs:+2:12: +2:17\n                                            // mir::Constant\n-                                           // + span: /the/src/instrument_coverage.rs:12:12: 12:15\n+                                           // + span: /the/src/instrument_coverage.rs:13:12: 13:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(<ZST>) }\n       }\n   \n@@ -30,15 +30,15 @@\n       }\n   \n       bb4: {\n-+         Coverage::Expression(4294967293) = 4294967294 + 0 for /the/src/instrument_coverage.rs:16:1 - 16:2; // scope 0 at /the/src/instrument_coverage.rs:+6:2: +6:2\n-+         Coverage::Expression(4294967294) = 4294967295 - 2 for /the/src/instrument_coverage.rs:13:13 - 13:18; // scope 0 at /the/src/instrument_coverage.rs:+6:2: +6:2\n++         Coverage::Expression(4294967293) = 4294967294 + 0 for /the/src/instrument_coverage.rs:17:1 - 17:2; // scope 0 at /the/src/instrument_coverage.rs:+6:2: +6:2\n++         Coverage::Expression(4294967294) = 4294967295 - 2 for /the/src/instrument_coverage.rs:14:13 - 14:18; // scope 0 at /the/src/instrument_coverage.rs:+6:2: +6:2\n           _0 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:+3:13: +3:18\n           StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:+4:9: +4:10\n           return;                          // scope 0 at /the/src/instrument_coverage.rs:+6:2: +6:2\n       }\n   \n       bb5: {\n-+         Coverage::Counter(2) for /the/src/instrument_coverage.rs:14:10 - 14:11; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n++         Coverage::Counter(2) for /the/src/instrument_coverage.rs:15:10 - 15:11; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n           _1 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:+4:10: +4:10\n           StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:+4:9: +4:10\n           goto -> bb1;                     // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6"}, {"sha": "7f6a0a0eb094a0434e9f693efd741ea4c49aebb7", "filename": "src/test/mir-opt/instrument_coverage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,6 +1,7 @@\n // Test that `-C instrument-coverage` injects Coverage statements. The Coverage Counter statements\n // are later converted into LLVM instrprof.increment intrinsics, during codegen.\n \n+// unit-test: InstrumentCoverage\n // needs-profiler-support\n // ignore-windows\n // compile-flags: -C instrument-coverage --remap-path-prefix={{src-base}}=/the/src"}, {"sha": "2ae03da40f8a2b6bbf637eadb5c619f35cb9073f", "filename": "src/test/mir-opt/not_equal_false.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fnot_equal_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fnot_equal_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnot_equal_false.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: InstCombine\n // EMIT_MIR not_equal_false.opt.InstCombine.diff\n \n fn opt(x: bool) -> u32 {"}, {"sha": "99667aabdaee27d68e8e13ccb62a94c85c0247cd", "filename": "src/test/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -23,13 +23,6 @@\n               scope 3 {\n                   debug i => _12;          // in scope 3 at $DIR/remove_storage_markers.rs:+2:9: +2:10\n               }\n-              scope 5 (inlined iter::range::<impl Iterator for std::ops::Range<i32>>::next) { // at $DIR/remove_storage_markers.rs:8:14: 8:19\n-                  debug self => _8;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                  let mut _14: &mut std::ops::Range<i32>; // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-              }\n-          }\n-          scope 4 (inlined <std::ops::Range<i32> as IntoIterator>::into_iter) { // at $DIR/remove_storage_markers.rs:8:14: 8:19\n-              debug self => _3;            // in scope 4 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n           }\n       }\n   \n@@ -41,29 +34,39 @@\n           Deinit(_3);                      // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n           (_3.0: i32) = const 0_i32;       // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n           (_3.1: i32) = const 10_i32;      // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n-          _2 = move _3;                    // scope 4 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+          _2 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _3) -> bb1; // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/remove_storage_markers.rs:10:14: 10:19\n+                                           // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n -         StorageDead(_3);                 // scope 1 at $DIR/remove_storage_markers.rs:+2:18: +2:19\n -         StorageLive(_4);                 // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n           _4 = move _2;                    // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n-          goto -> bb1;                     // scope 2 at $DIR/remove_storage_markers.rs:+2:5: +4:6\n+          goto -> bb2;                     // scope 2 at $DIR/remove_storage_markers.rs:+2:5: +4:6\n       }\n   \n-      bb1: {\n+      bb2: {\n -         StorageLive(_6);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n -         StorageLive(_7);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n -         StorageLive(_8);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n -         StorageLive(_9);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n           _9 = &mut _4;                    // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n           _8 = &mut (*_9);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n--         StorageLive(_14);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-          _14 = &mut (*_8);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-          _7 = <std::ops::Range<i32> as iter::range::RangeIteratorImpl>::spec_next(move _14) -> bb4; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+          _7 = <std::ops::Range<i32> as Iterator>::next(move _8) -> bb3; // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<i32> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(<ZST>) }\n+                                           // + span: $DIR/remove_storage_markers.rs:10:14: 10:19\n+                                           // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }\n       }\n   \n-      bb2: {\n+      bb3: {\n+-         StorageDead(_8);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:18: +2:19\n+          _10 = discriminant(_7);          // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n+          switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n+      }\n+  \n+      bb4: {\n -         StorageLive(_12);                // scope 2 at $DIR/remove_storage_markers.rs:+2:9: +2:10\n           _12 = ((_7 as Some).0: i32);     // scope 2 at $DIR/remove_storage_markers.rs:+2:9: +2:10\n -         StorageLive(_13);                // scope 3 at $DIR/remove_storage_markers.rs:+3:16: +3:17\n@@ -76,10 +79,14 @@\n -         StorageDead(_7);                 // scope 2 at $DIR/remove_storage_markers.rs:+4:5: +4:6\n -         StorageDead(_6);                 // scope 2 at $DIR/remove_storage_markers.rs:+4:5: +4:6\n           _5 = const ();                   // scope 2 at $DIR/remove_storage_markers.rs:+2:5: +4:6\n-          goto -> bb1;                     // scope 2 at $DIR/remove_storage_markers.rs:+2:5: +4:6\n+          goto -> bb2;                     // scope 2 at $DIR/remove_storage_markers.rs:+2:5: +4:6\n       }\n   \n-      bb3: {\n+      bb5: {\n+          unreachable;                     // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n+      }\n+  \n+      bb6: {\n           _0 = const ();                   // scope 2 at $DIR/remove_storage_markers.rs:+2:5: +4:6\n -         StorageDead(_9);                 // scope 2 at $DIR/remove_storage_markers.rs:+4:5: +4:6\n -         StorageDead(_7);                 // scope 2 at $DIR/remove_storage_markers.rs:+4:5: +4:6\n@@ -89,12 +96,5 @@\n -         StorageDead(_1);                 // scope 0 at $DIR/remove_storage_markers.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/remove_storage_markers.rs:+5:2: +5:2\n       }\n-  \n-      bb4: {\n--         StorageDead(_14);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n--         StorageDead(_8);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:18: +2:19\n-          _10 = discriminant(_7);          // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n-          switchInt(move _10) -> [0_isize: bb3, otherwise: bb2]; // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n-      }\n   }\n   "}, {"sha": "f00b826911c6a09770d112ad4dccad2ddde56d6e", "filename": "src/test/mir-opt/remove_storage_markers.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: RemoveStorageMarkers\n+\n // Checks that storage markers are removed at opt-level=0.\n //\n // compile-flags: -C opt-level=0 -Coverflow-checks=off"}, {"sha": "8b9de9b4d65a66fd987f2357d44fc0cecf038e42", "filename": "src/test/mir-opt/remove_zsts_dont_touch_unions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fremove_zsts_dont_touch_unions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fremove_zsts_dont_touch_unions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_zsts_dont_touch_unions.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmir-opt-level=3\n+// unit-test: RemoveZsts\n \n // Ensure RemoveZsts doesn't remove ZST assignments to union fields,\n // which causes problems in Miri."}, {"sha": "05554174ae2c78aa6dd13da4083ee1f82ba18564", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -80,7 +80,7 @@ fn array_casts() -> () {\n         _7 = _2;                         // scope 3 at $DIR/retag.rs:+3:15: +3:16\n         _6 = ptr::mut_ptr::<impl *mut usize>::add(move _7, const 1_usize) -> bb1; // scope 3 at $DIR/retag.rs:+3:15: +3:23\n                                          // mir::Constant\n-                                         // + span: $DIR/retag.rs:60:17: 60:20\n+                                         // + span: $DIR/retag.rs:61:17: 61:20\n                                          // + literal: Const { ty: unsafe fn(*mut usize, usize) -> *mut usize {ptr::mut_ptr::<impl *mut usize>::add}, val: Value(<ZST>) }\n     }\n \n@@ -111,7 +111,7 @@ fn array_casts() -> () {\n         _17 = _9;                        // scope 6 at $DIR/retag.rs:+7:26: +7:27\n         _16 = ptr::const_ptr::<impl *const usize>::add(move _17, const 1_usize) -> bb2; // scope 6 at $DIR/retag.rs:+7:26: +7:34\n                                          // mir::Constant\n-                                         // + span: $DIR/retag.rs:64:28: 64:31\n+                                         // + span: $DIR/retag.rs:65:28: 65:31\n                                          // + literal: Const { ty: unsafe fn(*const usize, usize) -> *const usize {ptr::const_ptr::<impl *const usize>::add}, val: Value(<ZST>) }\n     }\n "}, {"sha": "8802f3b295851a4aaa4d9e9bf34b968dbd6b61c9", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -73,7 +73,7 @@ fn main() -> () {\n         Retag([2phase] _6);              // scope 1 at $DIR/retag.rs:+3:29: +3:35\n         _3 = Test::foo(move _4, move _6) -> [return: bb1, unwind: bb8]; // scope 1 at $DIR/retag.rs:+3:17: +3:36\n                                          // mir::Constant\n-                                         // + span: $DIR/retag.rs:32:25: 32:28\n+                                         // + span: $DIR/retag.rs:33:25: 33:28\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}, val: Value(<ZST>) }\n     }\n \n@@ -149,7 +149,7 @@ fn main() -> () {\n         StorageLive(_23);                // scope 7 at $DIR/retag.rs:+18:21: +18:23\n         _28 = const main::promoted[0];   // scope 7 at $DIR/retag.rs:+18:21: +18:23\n                                          // mir::Constant\n-                                         // + span: $DIR/retag.rs:47:21: 47:23\n+                                         // + span: $DIR/retag.rs:48:21: 48:23\n                                          // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n         Retag(_28);                      // scope 7 at $DIR/retag.rs:+18:21: +18:23\n         _23 = &(*_28);                   // scope 7 at $DIR/retag.rs:+18:21: +18:23\n@@ -158,7 +158,7 @@ fn main() -> () {\n         Retag(_22);                      // scope 7 at $DIR/retag.rs:+18:21: +18:23\n         _19 = Test::foo_shr(move _20, move _22) -> [return: bb4, unwind: bb7]; // scope 7 at $DIR/retag.rs:+18:5: +18:24\n                                          // mir::Constant\n-                                         // + span: $DIR/retag.rs:47:13: 47:20\n+                                         // + span: $DIR/retag.rs:48:13: 48:20\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}, val: Value(<ZST>) }\n     }\n \n@@ -182,7 +182,7 @@ fn main() -> () {\n         StorageLive(_27);                // scope 8 at $DIR/retag.rs:+23:5: +23:18\n         _27 = array_casts() -> bb6;      // scope 8 at $DIR/retag.rs:+23:5: +23:18\n                                          // mir::Constant\n-                                         // + span: $DIR/retag.rs:52:5: 52:16\n+                                         // + span: $DIR/retag.rs:53:5: 53:16\n                                          // + literal: Const { ty: fn() {array_casts}, val: Value(<ZST>) }\n     }\n "}, {"sha": "86deb0e7ccdedbf0e935d2cd515f2545749e0f5b", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: AddRetag\n // ignore-wasm32-bare compiled with panic=abort by default\n // ignore-tidy-linelength\n // compile-flags: -Z mir-emit-retag -Z mir-opt-level=0 -Z span_free_formats"}, {"sha": "25d400f0c9fb20220c1eec60e7277f2276fdba7f", "filename": "src/test/mir-opt/retag.{impl#0}-foo.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo.SimplifyCfg-elaborate-drops.after.mir?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `<impl at $DIR/retag.rs:11:1: 11:10>::foo` after SimplifyCfg-elaborate-drops\n+// MIR for `<impl at $DIR/retag.rs:12:1: 12:10>::foo` after SimplifyCfg-elaborate-drops\n \n-fn <impl at $DIR/retag.rs:11:1: 11:10>::foo(_1: &Test, _2: &mut i32) -> &mut i32 {\n+fn <impl at $DIR/retag.rs:12:1: 12:10>::foo(_1: &Test, _2: &mut i32) -> &mut i32 {\n     debug self => _1;                    // in scope 0 at $DIR/retag.rs:+0:16: +0:21\n     debug x => _2;                       // in scope 0 at $DIR/retag.rs:+0:23: +0:24\n     let mut _0: &mut i32;                // return place in scope 0 at $DIR/retag.rs:+0:42: +0:53"}, {"sha": "84ad8afc357604ac362dd54b410d8141a2383ec8", "filename": "src/test/mir-opt/retag.{impl#0}-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `<impl at $DIR/retag.rs:11:1: 11:10>::foo_shr` after SimplifyCfg-elaborate-drops\n+// MIR for `<impl at $DIR/retag.rs:12:1: 12:10>::foo_shr` after SimplifyCfg-elaborate-drops\n \n-fn <impl at $DIR/retag.rs:11:1: 11:10>::foo_shr(_1: &Test, _2: &i32) -> &i32 {\n+fn <impl at $DIR/retag.rs:12:1: 12:10>::foo_shr(_1: &Test, _2: &i32) -> &i32 {\n     debug self => _1;                    // in scope 0 at $DIR/retag.rs:+0:20: +0:25\n     debug x => _2;                       // in scope 0 at $DIR/retag.rs:+0:27: +0:28\n     let mut _0: &i32;                    // return place in scope 0 at $DIR/retag.rs:+0:42: +0:49"}, {"sha": "39b7911d4aedbcfafd6fd3a4c38ed43f92a189f9", "filename": "src/test/mir-opt/simplify-locals-removes-unused-consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: SimplifyLocals\n // compile-flags: -C overflow-checks=no\n \n fn use_zst(_: ((), ())) {}"}, {"sha": "b41527ba02de5cc3dd92d78456e536a7cd541595", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -16,29 +16,53 @@\n -     let mut _11: Temp;                   // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n +     let _1: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+2:5: +2:22\n +     let mut _2: ((), ());                // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n-+     let _3: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n++     let mut _3: ();                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+2:14: +2:16\n++     let mut _4: ();                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+2:18: +2:20\n++     let _5: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n++     let mut _6: u8;                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:34\n++     let mut _7: u8;                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:30\n++     let mut _8: Temp;                    // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n       scope 1 {\n       }\n   \n       bb0: {\n -         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:20: +1:28\n -         StorageLive(_2);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:21: +1:23\n+-         Deinit(_2);                      // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:21: +1:23\n -         StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:25: +1:27\n+-         Deinit(_3);                      // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:25: +1:27\n+-         Deinit(_1);                      // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:20: +1:28\n+-         (_1.0: ()) = move _2;            // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:20: +1:28\n+-         (_1.1: ()) = move _3;            // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:20: +1:28\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:27: +1:28\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:27: +1:28\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:28: +1:29\n -         StorageLive(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:5: +2:22\n -         StorageLive(_5);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n -         StorageLive(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:14: +2:16\n+-         Deinit(_6);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:14: +2:16\n -         StorageLive(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:18: +2:20\n+-         Deinit(_7);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:18: +2:20\n+-         Deinit(_5);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n+-         (_5.0: ()) = move _6;            // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n+-         (_5.1: ()) = move _7;            // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n -         StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:20: +2:21\n -         StorageDead(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:20: +2:21\n -         _4 = use_zst(move _5) -> bb1;    // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:5: +2:22\n +         StorageLive(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:5: +2:22\n +         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n++         StorageLive(_3);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:14: +2:16\n++         Deinit(_3);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:14: +2:16\n++         StorageLive(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:18: +2:20\n++         Deinit(_4);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:18: +2:20\n++         Deinit(_2);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n++         (_2.0: ()) = move _3;            // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n++         (_2.1: ()) = move _4;            // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n++         StorageDead(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:20: +2:21\n++         StorageDead(_3);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:20: +2:21\n +         _1 = use_zst(move _2) -> bb1;    // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:5: +2:22\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:12\n+                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:15:5: 15:12\n                                            // + literal: Const { ty: fn(((), ())) {use_zst}, val: Value(<ZST>) }\n       }\n   \n@@ -49,22 +73,36 @@\n -         StorageLive(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:34\n -         StorageLive(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:30\n -         StorageLive(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n+-         Deinit(_11);                     // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n+-         (_11.0: u8) = const 40_u8;       // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n+-         _10 = (_11.0: u8);               // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:30\n+-         _9 = Add(move _10, const 2_u8);  // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:34\n -         StorageDead(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:33: +4:34\n--         _8 = use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n+-         _8 = use_u8(move _9) -> bb2;     // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n +         StorageDead(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:21: +2:22\n +         StorageDead(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:22: +2:23\n-+         StorageLive(_3);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n-+         _3 = use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n++         StorageLive(_5);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n++         StorageLive(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:34\n++         StorageLive(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:30\n++         StorageLive(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n++         Deinit(_8);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n++         (_8.0: u8) = const 40_u8;        // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n++         _7 = (_8.0: u8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:30\n++         _6 = Add(move _7, const 2_u8);   // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:34\n++         StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:33: +4:34\n++         _5 = use_u8(move _6) -> bb2;     // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:11\n+                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:17:5: 17:11\n                                            // + literal: Const { ty: fn(u8) {use_u8}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n -         StorageDead(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:34: +4:35\n -         StorageDead(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:35: +4:36\n--         StorageDead(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:35: +4:36\n-+         StorageDead(_3);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:35: +4:36\n++         StorageDead(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:34: +4:35\n+          StorageDead(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:35: +4:36\n++         StorageDead(_5);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:35: +4:36\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+0:11: +5:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+5:2: +5:2\n       }\n   }"}, {"sha": "a2c7a31b7c329b7654e806575805d70ec24eb9d8", "filename": "src/test/run-make-fulldeps/issue-47551/eh_frame-terminator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Frun-make-fulldeps%2Fissue-47551%2Feh_frame-terminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Frun-make-fulldeps%2Fissue-47551%2Feh_frame-terminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-47551%2Feh_frame-terminator.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(backtrace)]\n #[derive(Clone, Copy)]\n struct Foo {\n     array: [u64; 10240],"}, {"sha": "8d1141b58648d39102cdaf9ea9a3d0be1878dd88", "filename": "src/test/rustdoc-json/primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Frustdoc-json%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Frustdoc-json%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitive.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -7,8 +7,8 @@ mod usize {}\n \n // @set local_crate_id = primitive.json \"$.index[*][?(@.name=='primitive')].crate_id\"\n \n-// @has - \"$.index[*][?(@.name=='log10')]\"\n-// @!is - \"$.index[*][?(@.name=='log10')].crate_id\" $local_crate_id\n+// @has - \"$.index[*][?(@.name=='ilog10')]\"\n+// @!is - \"$.index[*][?(@.name=='ilog10')].crate_id\" $local_crate_id\n // @has - \"$.index[*][?(@.name=='checked_add')]\"\n // @!is - \"$.index[*][?(@.name=='checked_add')]\" $local_crate_id\n // @!has - \"$.index[*][?(@.name=='is_ascii_uppercase')]\""}, {"sha": "3844ebcfd30d71a5e56b4f1ca4f24d1d557e122d", "filename": "src/test/ui/backtrace-apple-no-dsymutil.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Fbacktrace-apple-no-dsymutil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Fbacktrace-apple-no-dsymutil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbacktrace-apple-no-dsymutil.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -4,8 +4,6 @@\n // compile-flags:-g -Csplit-debuginfo=unpacked\n // only-macos\n \n-#![feature(backtrace)]\n-\n use std::process::Command;\n use std::str;\n "}, {"sha": "fc541c69629284bbfb6d85b544d8a8b2167c000c", "filename": "src/test/ui/impl-trait/issue-100187.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100187.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100187.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100187.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+trait Trait<T> {\n+    type Ty;\n+}\n+impl Trait<&u8> for () {\n+    type Ty = ();\n+}\n+\n+fn test<'a, 'b>() -> impl Trait<&'a u8, Ty = impl Sized + 'b> {}\n+\n+fn main() {}"}, {"sha": "7ebf3f6b0d89981c4a2f5fb6c1c726473c18b2f5", "filename": "src/test/ui/parser/do-not-suggest-suggest-semicolon-before-array.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-suggest-semicolon-before-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-suggest-semicolon-before-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-suggest-semicolon-before-array.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -0,0 +1,8 @@\n+fn foo() {}\n+\n+fn bar() -> [u8; 2] {\n+    foo()\n+    [1, 3) //~ ERROR expected one of `.`, `?`, `]`, or an operator, found `,`\n+}\n+\n+fn main() {}"}, {"sha": "d6e8db803299ca6fa4c95e0ca4e6a5540cfa8ad9", "filename": "src/test/ui/parser/do-not-suggest-suggest-semicolon-before-array.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-suggest-semicolon-before-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-suggest-semicolon-before-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-suggest-semicolon-before-array.stderr?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -0,0 +1,10 @@\n+error: expected one of `.`, `?`, `]`, or an operator, found `,`\n+  --> $DIR/do-not-suggest-suggest-semicolon-before-array.rs:5:5\n+   |\n+LL |     [1, 3)\n+   |     ^ ^ help: `]` may belong here\n+   |     |\n+   |     unclosed delimiter\n+\n+error: aborting due to previous error\n+"}, {"sha": "a06b58b2740fa2175a46e02d205df1f323e3807c", "filename": "src/test/ui/parser/suggest-suggest-semicolon-before-array.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Fparser%2Fsuggest-suggest-semicolon-before-array.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Fparser%2Fsuggest-suggest-semicolon-before-array.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest-suggest-semicolon-before-array.fixed?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+fn foo() {}\n+\n+fn bar() -> [u8; 2] {\n+    foo();\n+    [1, 3] //~ ERROR expected `;`, found `[`\n+}\n+\n+fn main() {}"}, {"sha": "f601ca2aef54efe8e8d4316d668ee0413caa043b", "filename": "src/test/ui/parser/suggest-suggest-semicolon-before-array.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Fparser%2Fsuggest-suggest-semicolon-before-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Fparser%2Fsuggest-suggest-semicolon-before-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest-suggest-semicolon-before-array.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+fn foo() {}\n+\n+fn bar() -> [u8; 2] {\n+    foo()\n+    [1, 3] //~ ERROR expected `;`, found `[`\n+}\n+\n+fn main() {}"}, {"sha": "bf86b43554d1a22ad793edd82275980045a46c4e", "filename": "src/test/ui/parser/suggest-suggest-semicolon-before-array.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Fparser%2Fsuggest-suggest-semicolon-before-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Fparser%2Fsuggest-suggest-semicolon-before-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest-suggest-semicolon-before-array.stderr?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -0,0 +1,13 @@\n+error: expected `;`, found `[`\n+  --> $DIR/suggest-suggest-semicolon-before-array.rs:8:5\n+   |\n+LL |     [1, 3]\n+   |     ^\n+   |\n+help: consider adding `;` here\n+   |\n+LL |     foo();\n+   |          +\n+\n+error: aborting due to previous error\n+"}, {"sha": "99f317399d768c439c46929248323c7b78fd9e32", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-unsupported-link-kind.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-unsupported-link-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-unsupported-link-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-unsupported-link-kind.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -0,0 +1,18 @@\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete\n+\n+#[link(name = \"foo\")]\n+extern \"C\" {\n+    #[link_ordinal(3)]\n+    //~^ ERROR `#[link_ordinal]` is only supported if link kind is `raw-dylib`\n+    fn foo();\n+}\n+\n+#[link(name = \"bar\", kind = \"static\")]\n+extern \"C\" {\n+    #[link_ordinal(3)]\n+    //~^ ERROR `#[link_ordinal]` is only supported if link kind is `raw-dylib`\n+    fn bar();\n+}\n+\n+fn main() {}"}, {"sha": "f1eeb22da59c94b698cb36c93d8cf4474f29cf5c", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-unsupported-link-kind.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-unsupported-link-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-unsupported-link-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-unsupported-link-kind.stderr?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/link-ordinal-unsupported-link-kind.rs:1:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+error: `#[link_ordinal]` is only supported if link kind is `raw-dylib`\n+  --> $DIR/link-ordinal-unsupported-link-kind.rs:6:5\n+   |\n+LL |     #[link_ordinal(3)]\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: `#[link_ordinal]` is only supported if link kind is `raw-dylib`\n+  --> $DIR/link-ordinal-unsupported-link-kind.rs:13:5\n+   |\n+LL |     #[link_ordinal(3)]\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+"}, {"sha": "3f8306baf8a217454028845bac589362015b3163", "filename": "src/test/ui/std-backtrace.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Fstd-backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1603a70f82240ba2d27f72f964e36614d7620ad3/src%2Ftest%2Fui%2Fstd-backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstd-backtrace.rs?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -7,8 +7,6 @@\n // compile-flags:-g\n // compile-flags:-Cstrip=none\n \n-#![feature(backtrace)]\n-\n use std::env;\n use std::process::Command;\n use std::str;"}, {"sha": "ce40690a5e4e315d3dab0aae1eae69d0252c52ac", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=1603a70f82240ba2d27f72f964e36614d7620ad3", "patch": "@@ -1 +1 @@\n-Subproject commit 4fd148c47e733770c537efac5220744945d572ef\n+Subproject commit ce40690a5e4e315d3dab0aae1eae69d0252c52ac"}]}