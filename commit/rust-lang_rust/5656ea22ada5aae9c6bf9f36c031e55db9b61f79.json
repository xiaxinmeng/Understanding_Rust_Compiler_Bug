{"sha": "5656ea22ada5aae9c6bf9f36c031e55db9b61f79", "node_id": "C_kwDOAAsO6NoAKDU2NTZlYTIyYWRhNWFhZTljNmJmOWYzNmMwMzFlNTVkYjliNjFmNzk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-05-12T14:41:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-12T14:41:06Z"}, "message": "Rollup merge of #96968 - cjgillot:codegen-fulfill-nice, r=oli-obk\n\nAdd tests for #96806\n\nI messed up the rebase in https://github.com/rust-lang/rust/pull/96806.\n\nI took the opportunity to add an extra mir-opt test from https://github.com/rust-lang/rust/pull/91743.\n\nr? `@oli-obk`", "tree": {"sha": "ec3a2d0b0ebef7636f6089daccb4c91f72586508", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec3a2d0b0ebef7636f6089daccb4c91f72586508"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5656ea22ada5aae9c6bf9f36c031e55db9b61f79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJifRyCCRBK7hj4Ov3rIwAA3ngIAETeuc9tARCOGCWDv1lqce62\nNS6JqsZtosVk3G6iN/aShZg9w+GhGOjygknF6iCG1dwogs4tVUxebj00UBNpvZYs\nhk09H9jBc9/+vZAtYLJrFTpGviRcxpGBLheRY/cNzsVJyEDzXuCAM4kfrtnRGPaj\nVURF0Qz4XarB5dFpfdx2W+ZjxTkLbE76wL2T3Ko4EvKJFsacHR0yEGo3Y2C/q6G3\npaNE25L1FscFNh7RDnGR9uc2T5GN0aSXZGJ5QXLdCobrcjVfNV8K6W85/de4i7wc\nAhamtk5/pe6kNPeeoOTFENeKJHrGKu+Smsoaw4aiF4Gd6YKaDDuk1xbNZS0+wrc=\n=kaOn\n-----END PGP SIGNATURE-----\n", "payload": "tree ec3a2d0b0ebef7636f6089daccb4c91f72586508\nparent 47e4c9efdc369c71920e20f13553d5f7ac791250\nparent bd41874eeadba20870f49e837babc56e67292b10\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1652366466 +0200\ncommitter GitHub <noreply@github.com> 1652366466 +0200\n\nRollup merge of #96968 - cjgillot:codegen-fulfill-nice, r=oli-obk\n\nAdd tests for #96806\n\nI messed up the rebase in https://github.com/rust-lang/rust/pull/96806.\n\nI took the opportunity to add an extra mir-opt test from https://github.com/rust-lang/rust/pull/91743.\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5656ea22ada5aae9c6bf9f36c031e55db9b61f79", "html_url": "https://github.com/rust-lang/rust/commit/5656ea22ada5aae9c6bf9f36c031e55db9b61f79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47e4c9efdc369c71920e20f13553d5f7ac791250", "url": "https://api.github.com/repos/rust-lang/rust/commits/47e4c9efdc369c71920e20f13553d5f7ac791250", "html_url": "https://github.com/rust-lang/rust/commit/47e4c9efdc369c71920e20f13553d5f7ac791250"}, {"sha": "bd41874eeadba20870f49e837babc56e67292b10", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd41874eeadba20870f49e837babc56e67292b10", "html_url": "https://github.com/rust-lang/rust/commit/bd41874eeadba20870f49e837babc56e67292b10"}], "stats": {"total": 346, "additions": 346, "deletions": 0}, "files": [{"sha": "6a46e1e07b1a8154428b88f88a60209319b609a6", "filename": "src/test/mir-opt/inline/dyn-trait.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fmir-opt%2Finline%2Fdyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fmir-opt%2Finline%2Fdyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn-trait.rs?ref=5656ea22ada5aae9c6bf9f36c031e55db9b61f79", "patch": "@@ -0,0 +1,35 @@\n+#![crate_type = \"lib\"]\n+\n+use std::fmt::Debug;\n+\n+pub trait Cache {\n+    type V: Debug;\n+\n+    fn store_nocache(&self);\n+}\n+\n+pub trait Query {\n+    type V;\n+    type C: Cache<V = Self::V>;\n+\n+    fn cache<T>(s: &T) -> &Self::C;\n+}\n+\n+// EMIT_MIR dyn_trait.mk_cycle.Inline.diff\n+#[inline(always)]\n+pub fn mk_cycle<V: Debug>(c: &dyn Cache<V = V>) {\n+    c.store_nocache()\n+}\n+\n+// EMIT_MIR dyn_trait.try_execute_query.Inline.diff\n+#[inline(always)]\n+pub fn try_execute_query<C: Cache>(c: &C) {\n+    mk_cycle(c)\n+}\n+\n+// EMIT_MIR dyn_trait.get_query.Inline.diff\n+#[inline(always)]\n+pub fn get_query<Q: Query, T>(t: &T) {\n+    let c = Q::cache(t);\n+    try_execute_query(c)\n+}"}, {"sha": "953d7b85c5ba728ba5971ad94f0252541b84b5db", "filename": "src/test/mir-opt/inline/dyn_trait.get_query.Inline.diff", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff?ref=5656ea22ada5aae9c6bf9f36c031e55db9b61f79", "patch": "@@ -0,0 +1,62 @@\n+- // MIR for `get_query` before Inline\n++ // MIR for `get_query` after Inline\n+  \n+  fn get_query(_1: &T) -> () {\n+      debug t => _1;                       // in scope 0 at $DIR/dyn-trait.rs:32:31: 32:32\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:32:38: 32:38\n+      let _2: &<Q as Query>::C;            // in scope 0 at $DIR/dyn-trait.rs:33:9: 33:10\n+      let mut _3: &T;                      // in scope 0 at $DIR/dyn-trait.rs:33:22: 33:23\n+      let mut _4: &<Q as Query>::C;        // in scope 0 at $DIR/dyn-trait.rs:34:23: 34:24\n+      scope 1 {\n+          debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:33:9: 33:10\n++         scope 2 (inlined try_execute_query::<<Q as Query>::C>) { // at $DIR/dyn-trait.rs:34:5: 34:25\n++             debug c => _4;               // in scope 2 at $DIR/dyn-trait.rs:26:36: 26:37\n++             let mut _5: &dyn Cache<V = <Q as Query>::V>; // in scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++             let mut _6: &<Q as Query>::C; // in scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++             scope 3 (inlined mk_cycle::<<Q as Query>::V>) { // at $DIR/dyn-trait.rs:27:5: 27:16\n++                 debug c => _5;           // in scope 3 at $DIR/dyn-trait.rs:20:27: 20:28\n++                 let mut _7: &dyn Cache<V = <Q as Query>::V>; // in scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n++             }\n++         }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:33:9: 33:10\n+          StorageLive(_3);                 // scope 0 at $DIR/dyn-trait.rs:33:22: 33:23\n+          _3 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:33:22: 33:23\n+          _2 = <Q as Query>::cache::<T>(move _3) -> bb1; // scope 0 at $DIR/dyn-trait.rs:33:13: 33:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/dyn-trait.rs:33:13: 33:21\n+                                           // + user_ty: UserType(0)\n+                                           // + literal: Const { ty: for<'r> fn(&'r T) -> &'r <Q as Query>::C {<Q as Query>::cache::<T>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 0 at $DIR/dyn-trait.rs:33:23: 33:24\n+          StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:34:23: 34:24\n+          _4 = &(*_2);                     // scope 1 at $DIR/dyn-trait.rs:34:23: 34:24\n+-         _0 = try_execute_query::<<Q as Query>::C>(move _4) -> bb2; // scope 1 at $DIR/dyn-trait.rs:34:5: 34:25\n++         StorageLive(_5);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         StorageLive(_6);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         _6 = _4;                         // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         _5 = move _6 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         StorageDead(_6);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         StorageLive(_7);                 // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n++         _7 = _5;                         // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n++         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(move _7) -> bb2; // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n+                                           // mir::Constant\n+-                                          // + span: $DIR/dyn-trait.rs:34:5: 34:22\n+-                                          // + literal: Const { ty: for<'r> fn(&'r <Q as Query>::C) {try_execute_query::<<Q as Query>::C>}, val: Value(Scalar(<ZST>)) }\n++                                          // + span: $DIR/dyn-trait.rs:21:7: 21:20\n++                                          // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = <Q as Query>::V>) {<dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb2: {\n++         StorageDead(_7);                 // scope 3 at $DIR/dyn-trait.rs:21:21: 21:22\n++         StorageDead(_5);                 // scope 2 at $DIR/dyn-trait.rs:27:15: 27:16\n+          StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:34:24: 34:25\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:35:1: 35:2\n+          return;                          // scope 0 at $DIR/dyn-trait.rs:35:2: 35:2\n+      }\n+  }\n+  "}, {"sha": "27309328052c758d3d743e1ca4e9cf41fdcf76bc", "filename": "src/test/mir-opt/inline/dyn_trait.mk_cycle.Inline.diff", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff?ref=5656ea22ada5aae9c6bf9f36c031e55db9b61f79", "patch": "@@ -0,0 +1,23 @@\n+- // MIR for `mk_cycle` before Inline\n++ // MIR for `mk_cycle` after Inline\n+  \n+  fn mk_cycle(_1: &dyn Cache<V = V>) -> () {\n+      debug c => _1;                       // in scope 0 at $DIR/dyn-trait.rs:20:27: 20:28\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:20:49: 20:49\n+      let mut _2: &dyn Cache<V = V>;       // in scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n+          _2 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n+          _0 = <dyn Cache<V = V> as Cache>::store_nocache(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/dyn-trait.rs:21:7: 21:20\n+                                           // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = V>) {<dyn Cache<V = V> as Cache>::store_nocache}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:21:21: 21:22\n+          return;                          // scope 0 at $DIR/dyn-trait.rs:22:2: 22:2\n+      }\n+  }\n+  "}, {"sha": "93bba58825d205830c894ddd4a4012390167e00c", "filename": "src/test/mir-opt/inline/dyn_trait.try_execute_query.Inline.diff", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff?ref=5656ea22ada5aae9c6bf9f36c031e55db9b61f79", "patch": "@@ -0,0 +1,37 @@\n+- // MIR for `try_execute_query` before Inline\n++ // MIR for `try_execute_query` after Inline\n+  \n+  fn try_execute_query(_1: &C) -> () {\n+      debug c => _1;                       // in scope 0 at $DIR/dyn-trait.rs:26:36: 26:37\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:26:43: 26:43\n+      let mut _2: &dyn Cache<V = <C as Cache>::V>; // in scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+      let mut _3: &C;                      // in scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n++     scope 1 (inlined mk_cycle::<<C as Cache>::V>) { // at $DIR/dyn-trait.rs:27:5: 27:16\n++         debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:20:27: 20:28\n++         let mut _4: &dyn Cache<V = <C as Cache>::V>; // in scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n++     }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+          StorageLive(_3);                 // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+          _3 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+          _2 = move _3 as &dyn Cache<V = <C as Cache>::V> (Pointer(Unsize)); // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+          StorageDead(_3);                 // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+-         _0 = mk_cycle::<<C as Cache>::V>(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:27:5: 27:16\n++         StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n++         _4 = _2;                         // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n++         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(move _4) -> bb1; // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n+                                           // mir::Constant\n+-                                          // + span: $DIR/dyn-trait.rs:27:5: 27:13\n+-                                          // + literal: Const { ty: for<'r> fn(&'r (dyn Cache<V = <C as Cache>::V> + 'r)) {mk_cycle::<<C as Cache>::V>}, val: Value(Scalar(<ZST>)) }\n++                                          // + span: $DIR/dyn-trait.rs:21:7: 21:20\n++                                          // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = <C as Cache>::V>) {<dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n++         StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:21:21: 21:22\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:27:15: 27:16\n+          return;                          // scope 0 at $DIR/dyn-trait.rs:28:2: 28:2\n+      }\n+  }\n+  "}, {"sha": "f1144db44ca445c86d63664ae577aaf2e27228c0", "filename": "src/test/ui/associated-consts/issue-88599-ref-self.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-88599-ref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-88599-ref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-88599-ref-self.rs?ref=5656ea22ada5aae9c6bf9f36c031e55db9b61f79", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub trait First {\n+    const CONST: usize;\n+}\n+pub trait Second {}\n+\n+impl<'a> First for dyn Second\n+where\n+    &'a Self: First,\n+{\n+    const CONST: usize = <&Self>::CONST;\n+}\n+\n+trait Third: First\n+where\n+    [u8; Self::CONST]:\n+{\n+    const VAL: [u8; Self::CONST] = [0; Self::CONST];\n+}\n+\n+fn main() {}"}, {"sha": "1c6df0da60c0e773d487de067bf3322a5ca45f70", "filename": "src/test/ui/issues/issue-37725.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fui%2Fissues%2Fissue-37725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fui%2Fissues%2Fissue-37725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37725.rs?ref=5656ea22ada5aae9c6bf9f36c031e55db9b61f79", "patch": "@@ -1,4 +1,6 @@\n // build-pass\n+// compiler-opts: -Zmir-opt-level=2\n+\n #![allow(dead_code)]\n trait Foo {\n     fn foo(&self);"}, {"sha": "40829f53709e52915879f039e98064591318b02d", "filename": "src/test/ui/trivial-bounds/issue-73021-impossible-inline.inline.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.inline.stderr?ref=5656ea22ada5aae9c6bf9f36c031e55db9b61f79", "patch": "@@ -0,0 +1,46 @@\n+warning: trait bound for<'any> &'any mut (): Clone does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:20:29\n+   |\n+LL |     for<'any> &'any mut (): Clone,\n+   |                             ^^^^^\n+   |\n+   = note: `#[warn(trivial_bounds)]` on by default\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:28:21\n+   |\n+LL | struct S where i32: Foo;\n+   |                     ^^^\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:31:28\n+   |\n+LL | impl Foo for () where i32: Foo {\n+   |                            ^^^\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:40:19\n+   |\n+LL | fn f() where i32: Foo {\n+   |                   ^^^\n+\n+warning: trait bound &'static str: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:48:28\n+   |\n+LL | fn g() where &'static str: Foo {\n+   |                            ^^^\n+\n+warning: trait bound String: Neg does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:57:13\n+   |\n+LL |     String: ::std::ops::Neg<Output = String>,\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: trait bound i32: Iterator does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:65:10\n+   |\n+LL |     i32: Iterator,\n+   |          ^^^^^^^^\n+\n+warning: 7 warnings emitted\n+"}, {"sha": "40829f53709e52915879f039e98064591318b02d", "filename": "src/test/ui/trivial-bounds/issue-73021-impossible-inline.no-opt.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.no-opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.no-opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.no-opt.stderr?ref=5656ea22ada5aae9c6bf9f36c031e55db9b61f79", "patch": "@@ -0,0 +1,46 @@\n+warning: trait bound for<'any> &'any mut (): Clone does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:20:29\n+   |\n+LL |     for<'any> &'any mut (): Clone,\n+   |                             ^^^^^\n+   |\n+   = note: `#[warn(trivial_bounds)]` on by default\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:28:21\n+   |\n+LL | struct S where i32: Foo;\n+   |                     ^^^\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:31:28\n+   |\n+LL | impl Foo for () where i32: Foo {\n+   |                            ^^^\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:40:19\n+   |\n+LL | fn f() where i32: Foo {\n+   |                   ^^^\n+\n+warning: trait bound &'static str: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:48:28\n+   |\n+LL | fn g() where &'static str: Foo {\n+   |                            ^^^\n+\n+warning: trait bound String: Neg does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:57:13\n+   |\n+LL |     String: ::std::ops::Neg<Output = String>,\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: trait bound i32: Iterator does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:65:10\n+   |\n+LL |     i32: Iterator,\n+   |          ^^^^^^^^\n+\n+warning: 7 warnings emitted\n+"}, {"sha": "ab6677e911b24b944e1d5e576e672abb70f5e31b", "filename": "src/test/ui/trivial-bounds/issue-73021-impossible-inline.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5656ea22ada5aae9c6bf9f36c031e55db9b61f79/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.rs?ref=5656ea22ada5aae9c6bf9f36c031e55db9b61f79", "patch": "@@ -0,0 +1,71 @@\n+// build-pass\n+// revisions: no-opt inline\n+// [inline]compile-flags: -Zmir-opt-level=3 --emit=mir\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+trait Foo {\n+    fn test(&self);\n+}\n+\n+fn foo<'a>(s: &'a mut ())\n+where\n+    &'a mut (): Foo,\n+{\n+    s.test();\n+}\n+\n+fn clone(it: &mut ()) -> &mut ()\n+where\n+    for<'any> &'any mut (): Clone,\n+    //~^ WARN trait bound for<'any> &'any mut (): Clone does not depend on any type or lifetime parameters\n+{\n+    it.clone()\n+}\n+\n+fn generic_function<X: Foo>(x: X) {}\n+\n+struct S where i32: Foo;\n+//~^ WARN trait bound i32: Foo does not depend on any type or lifetime parameters\n+\n+impl Foo for () where i32: Foo {\n+//~^ WARN trait bound i32: Foo does not depend on any type or lifetime parameters\n+    fn test(&self) {\n+        3i32.test();\n+        Foo::test(&4i32);\n+        generic_function(5i32);\n+    }\n+}\n+\n+fn f() where i32: Foo {\n+//~^ WARN trait bound i32: Foo does not depend on any type or lifetime parameters\n+    let s = S;\n+    3i32.test();\n+    Foo::test(&4i32);\n+    generic_function(5i32);\n+}\n+\n+fn g() where &'static str: Foo {\n+//~^ WARN trait bound &'static str: Foo does not depend on any type or lifetime parameters\n+    \"Foo\".test();\n+    Foo::test(&\"Foo\");\n+    generic_function(\"Foo\");\n+}\n+\n+fn use_op(s: String) -> String\n+where\n+    String: ::std::ops::Neg<Output = String>,\n+//~^ WARN trait bound String: Neg does not depend on any type or lifetime parameters\n+{\n+    -s\n+}\n+\n+fn use_for()\n+where\n+    i32: Iterator,\n+//~^ WARN trait bound i32: Iterator does not depend on any type or lifetime parameters\n+{\n+    for _ in 2i32 {}\n+}\n+\n+fn main() {}"}]}