{"sha": "0d8f7164bb2a5b949e8b34e8bf08b19eb32b1144", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkOGY3MTY0YmIyYTViOTQ5ZThiMzRlOGJmMDhiMTllYjMyYjExNDQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-10-17T14:22:42Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-10-17T14:22:42Z"}, "message": "Review feedback: expand comment and simplify some code.", "tree": {"sha": "5b3c23e191e2eba2ab502416f8b4adddbe50ed18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b3c23e191e2eba2ab502416f8b4adddbe50ed18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d8f7164bb2a5b949e8b34e8bf08b19eb32b1144", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d8f7164bb2a5b949e8b34e8bf08b19eb32b1144", "html_url": "https://github.com/rust-lang/rust/commit/0d8f7164bb2a5b949e8b34e8bf08b19eb32b1144", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d8f7164bb2a5b949e8b34e8bf08b19eb32b1144/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85d2e4d1d6c78f885d010284a439041aa6f2bc80", "url": "https://api.github.com/repos/rust-lang/rust/commits/85d2e4d1d6c78f885d010284a439041aa6f2bc80", "html_url": "https://github.com/rust-lang/rust/commit/85d2e4d1d6c78f885d010284a439041aa6f2bc80"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "665931ec324ca3c09992285f7dec6c9e074738ed", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0d8f7164bb2a5b949e8b34e8bf08b19eb32b1144/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8f7164bb2a5b949e8b34e8bf08b19eb32b1144/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=0d8f7164bb2a5b949e8b34e8bf08b19eb32b1144", "patch": "@@ -520,8 +520,9 @@ enum DropckKind<'tcx> {\n \n     /// Assume all borrowed data access by dtor occurs as if Self has the\n     /// type carried by this variant. In practice this means that some\n-    /// of the type parameters are remapped to `()`, because the developer\n-    /// has asserted that the destructor will not access their contents.\n+    /// of the type parameters are remapped to `()` (and some lifetime\n+    /// parameters remapped to `'static`), because the developer has asserted\n+    /// that the destructor will not access their contents.\n     RevisedSelf(Ty<'tcx>),\n }\n \n@@ -539,13 +540,8 @@ fn has_dtor_of_interest<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n \n             // Find the `impl<..> Drop for _` to inspect any\n             // attributes attached to the impl's generics.\n-            let opt_dtor_method = adt_def.destructor();\n-            let dtor_method = if let Some(dtor_method) = opt_dtor_method {\n-                dtor_method\n-            } else {\n-                return DropckKind::BorrowedDataMustStrictlyOutliveSelf;\n-            };\n-\n+            let dtor_method = adt_def.destructor()\n+                .expect(\"dtorck type without destructor impossible\");\n             let method = tcx.impl_or_trait_item(dtor_method);\n             let impl_id: DefId = method.container().id();\n             let revised_ty = revise_self_ty(tcx, adt_def, impl_id, substs);"}]}