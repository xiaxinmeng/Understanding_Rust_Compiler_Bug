{"sha": "ef4b3069baafa75bc047a80b58cc130e80576a4e", "node_id": "C_kwDOAAsO6NoAKGVmNGIzMDY5YmFhZmE3NWJjMDQ3YTgwYjU4Y2MxMzBlODA1NzZhNGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-12T23:59:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-12T23:59:48Z"}, "message": "Auto merge of #89774 - the8472:inline-mut-iter-next, r=m-ou-se\n\ninline next() on &mut Iterator impl\n\nIn [#87431](https://github.com/rust-lang/rust/pull/87431/files#diff-79a6b417b85ecf4f1a4ef2235135fedf540199caf6e9e1d154ac6a413b40a757R132-R136)   I found that `(&mut range).fold` doesn't optimize well because the default impl for for `fold` on `&mut Iterator` doesn't inline `next`. In that particular case it was worked around by using `try_fold` which takes a `&mut self` instead of `self`.\n\nLet's see if this can be fixed more broadly.", "tree": {"sha": "f6555341c1bd9a3e10e5b3da15b4694332d48197", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6555341c1bd9a3e10e5b3da15b4694332d48197"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef4b3069baafa75bc047a80b58cc130e80576a4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4b3069baafa75bc047a80b58cc130e80576a4e", "html_url": "https://github.com/rust-lang/rust/commit/ef4b3069baafa75bc047a80b58cc130e80576a4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef4b3069baafa75bc047a80b58cc130e80576a4e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7c97a02d1215e4ef26c31cb72dbaf16fd548b2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c97a02d1215e4ef26c31cb72dbaf16fd548b2c", "html_url": "https://github.com/rust-lang/rust/commit/d7c97a02d1215e4ef26c31cb72dbaf16fd548b2c"}, {"sha": "f1c588f1ef391b33663f44c52b17c9cc12928a75", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1c588f1ef391b33663f44c52b17c9cc12928a75", "html_url": "https://github.com/rust-lang/rust/commit/f1c588f1ef391b33663f44c52b17c9cc12928a75"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "5d63cf03fcbc4fa0bc8c2a126bbb584ee8acd078", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ef4b3069baafa75bc047a80b58cc130e80576a4e/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4b3069baafa75bc047a80b58cc130e80576a4e/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=ef4b3069baafa75bc047a80b58cc130e80576a4e", "patch": "@@ -135,19 +135,12 @@ impl<T, const N: usize> Iterator for IntoIter<T, N> {\n         Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n         let data = &mut self.data;\n-        // FIXME: This uses try_fold(&mut iter) instead of fold(iter) because the latter\n-        //  would go through the blanket `impl Iterator for &mut I` implementation\n-        //  which lacks inline annotations on its methods and adding those would be a larger\n-        //  perturbation than using try_fold here.\n-        //  Whether it would be beneficial to add those annotations should be investigated separately.\n-        (&mut self.alive)\n-            .try_fold::<_, _, Result<_, !>>(init, |acc, idx| {\n-                // SAFETY: idx is obtained by folding over the `alive` range, which implies the\n-                // value is currently considered alive but as the range is being consumed each value\n-                // we read here will only be read once and then considered dead.\n-                Ok(fold(acc, unsafe { data.get_unchecked(idx).assume_init_read() }))\n-            })\n-            .unwrap()\n+        self.alive.by_ref().fold(init, |acc, idx| {\n+            // SAFETY: idx is obtained by folding over the `alive` range, which implies the\n+            // value is currently considered alive but as the range is being consumed each value\n+            // we read here will only be read once and then considered dead.\n+            fold(acc, unsafe { data.get_unchecked(idx).assume_init_read() })\n+        })\n     }\n \n     fn count(self) -> usize {"}, {"sha": "f53d6cac7ed98221782ae68c1741c48f1664cdb4", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef4b3069baafa75bc047a80b58cc130e80576a4e/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4b3069baafa75bc047a80b58cc130e80576a4e/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=ef4b3069baafa75bc047a80b58cc130e80576a4e", "patch": "@@ -3460,6 +3460,7 @@ pub trait Iterator {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: Iterator + ?Sized> Iterator for &mut I {\n     type Item = I::Item;\n+    #[inline]\n     fn next(&mut self) -> Option<I::Item> {\n         (**self).next()\n     }"}]}