{"sha": "a83599548895c35d3f9b87f7f2e012b09af404c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MzU5OTU0ODg5NWMzNWQzZjliODdmN2YyZTAxMmIwOWFmNDA0YzA=", "commit": {"author": {"name": "Tim Kuehn", "email": "tkuehn@cmu.edu", "date": "2013-09-01T02:02:22Z"}, "committer": {"name": "Tim Kuehn", "email": "tkuehn@cmu.edu", "date": "2013-09-12T02:03:54Z"}, "message": "Rendezvous stream for synchronous channel messaging", "tree": {"sha": "05591a08b935b2789bbf220a6b62538d000ae0d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05591a08b935b2789bbf220a6b62538d000ae0d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a83599548895c35d3f9b87f7f2e012b09af404c0", "comment_count": 26, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a83599548895c35d3f9b87f7f2e012b09af404c0", "html_url": "https://github.com/rust-lang/rust/commit/a83599548895c35d3f9b87f7f2e012b09af404c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a83599548895c35d3f9b87f7f2e012b09af404c0/comments", "author": null, "committer": null, "parents": [{"sha": "49eb7bd2716f59e0cd47c427a4c60f49e8ce6e50", "url": "https://api.github.com/repos/rust-lang/rust/commits/49eb7bd2716f59e0cd47c427a4c60f49e8ce6e50", "html_url": "https://github.com/rust-lang/rust/commit/49eb7bd2716f59e0cd47c427a4c60f49e8ce6e50"}], "stats": {"total": 104, "additions": 102, "deletions": 2}, "files": [{"sha": "dc6f4964b317794d4cba77022ec2ee24043af92e", "filename": "src/libextra/comm.rs", "status": "modified", "additions": 102, "deletions": 2, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/a83599548895c35d3f9b87f7f2e012b09af404c0/src%2Flibextra%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83599548895c35d3f9b87f7f2e012b09af404c0/src%2Flibextra%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcomm.rs?ref=a83599548895c35d3f9b87f7f2e012b09af404c0", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -90,9 +90,55 @@ pub fn DuplexStream<T:Send,U:Send>()\n      })\n }\n \n+/// An extension of `pipes::stream` that provides synchronous message sending.\n+pub struct SyncChan<T> { priv duplex_stream: DuplexStream<T, ()> }\n+/// An extension of `pipes::stream` that acknowledges each message received.\n+pub struct SyncPort<T> { priv duplex_stream: DuplexStream<(), T> }\n+\n+impl<T: Send> GenericChan<T> for SyncChan<T> {\n+    fn send(&self, val: T) {\n+        assert!(self.try_send(val), \"SyncChan.send: receiving port closed\");\n+    }\n+}\n+\n+impl<T: Send> GenericSmartChan<T> for SyncChan<T> {\n+    /// Sends a message, or report if the receiver has closed the connection before receiving.\n+    fn try_send(&self, val: T) -> bool {\n+        self.duplex_stream.try_send(val) && self.duplex_stream.try_recv().is_some()\n+    }\n+}\n+\n+impl<T: Send> GenericPort<T> for SyncPort<T> {\n+    fn recv(&self) -> T {\n+        self.try_recv().expect(\"SyncPort.recv: sending channel closed\")\n+    }\n+\n+    fn try_recv(&self) -> Option<T> {\n+        do self.duplex_stream.try_recv().map_move |val| {\n+            self.duplex_stream.try_send(());\n+            val\n+        }\n+    }\n+}\n+\n+impl<T: Send> Peekable<T> for SyncPort<T> {\n+    fn peek(&self) -> bool {\n+        self.duplex_stream.peek()\n+    }\n+}\n+\n+/// Creates a stream whose channel, upon sending a message, blocks until the message is received.\n+pub fn rendezvous<T: Send>() -> (SyncPort<T>, SyncChan<T>) {\n+    let (chan_stream, port_stream) = DuplexStream();\n+    (SyncPort { duplex_stream: port_stream }, SyncChan { duplex_stream: chan_stream })\n+}\n+\n #[cfg(test)]\n mod test {\n-    use comm::DuplexStream;\n+    use comm::{DuplexStream, rendezvous};\n+    use std::rt::test::run_in_newsched_task;\n+    use std::task::spawn_unlinked;\n+\n \n     #[test]\n     pub fn DuplexStream1() {\n@@ -104,4 +150,58 @@ mod test {\n         assert!(left.recv() == 123);\n         assert!(right.recv() == ~\"abc\");\n     }\n+\n+    #[test]\n+    pub fn basic_rendezvous_test() {\n+        let (port, chan) = rendezvous();\n+\n+        do spawn {\n+            chan.send(\"abc\");\n+        }\n+\n+        assert!(port.recv() == \"abc\");\n+    }\n+\n+    #[test]\n+    fn recv_a_lot() {\n+        // Rendezvous streams should be able to handle any number of messages being sent\n+        do run_in_newsched_task {\n+            let (port, chan) = rendezvous();\n+            do spawn {\n+                do 1000000.times { chan.send(()) }\n+            }\n+            do 1000000.times { port.recv() }\n+        }\n+    }\n+\n+    #[test]\n+    fn send_and_fail_and_try_recv() {\n+        let (port, chan) = rendezvous();\n+        do spawn_unlinked {\n+            chan.duplex_stream.send(()); // Can't access this field outside this module\n+            fail!()\n+        }\n+        port.recv()\n+    }\n+\n+    #[test]\n+    fn try_send_and_recv_then_fail_before_ack() {\n+        let (port, chan) = rendezvous();\n+        do spawn_unlinked {\n+            port.duplex_stream.recv();\n+            fail!()\n+        }\n+        chan.try_send(());\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn send_and_recv_then_fail_before_ack() {\n+        let (port, chan) = rendezvous();\n+        do spawn_unlinked {\n+            port.duplex_stream.recv();\n+            fail!()\n+        }\n+        chan.send(());\n+    }\n }"}]}