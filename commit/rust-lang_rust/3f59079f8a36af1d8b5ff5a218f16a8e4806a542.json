{"sha": "3f59079f8a36af1d8b5ff5a218f16a8e4806a542", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNTkwNzlmOGEzNmFmMWQ4YjVmZjVhMjE4ZjE2YThlNDgwNmE1NDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-13T17:57:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-13T22:33:09Z"}, "message": "kill `CrateContextList` as a thing", "tree": {"sha": "a45ea537c9b4428e2ff076689b168da11bad463f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a45ea537c9b4428e2ff076689b168da11bad463f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f59079f8a36af1d8b5ff5a218f16a8e4806a542", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f59079f8a36af1d8b5ff5a218f16a8e4806a542", "html_url": "https://github.com/rust-lang/rust/commit/3f59079f8a36af1d8b5ff5a218f16a8e4806a542", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f59079f8a36af1d8b5ff5a218f16a8e4806a542/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "863927c712d703709c0ee9fa709306ec90e5a88d", "url": "https://api.github.com/repos/rust-lang/rust/commits/863927c712d703709c0ee9fa709306ec90e5a88d", "html_url": "https://github.com/rust-lang/rust/commit/863927c712d703709c0ee9fa709306ec90e5a88d"}], "stats": {"total": 216, "additions": 62, "deletions": 154}, "files": [{"sha": "309161676218b062acd96a57b5b0b11a1665eeaa", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 50, "deletions": 69, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/3f59079f8a36af1d8b5ff5a218f16a8e4806a542/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f59079f8a36af1d8b5ff5a218f16a8e4806a542/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=3f59079f8a36af1d8b5ff5a218f16a8e4806a542", "patch": "@@ -38,7 +38,7 @@ use rustc::hir::def_id::LOCAL_CRATE;\n use middle::lang_items::StartFnLangItem;\n use middle::cstore::EncodedMetadata;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::dep_graph::{AssertDepGraphSafe, DepNode, WorkProduct};\n+use rustc::dep_graph::{AssertDepGraphSafe, DepNode};\n use rustc::hir::map as hir_map;\n use rustc::util::common::time;\n use session::config::{self, NoDebugInfo};\n@@ -56,7 +56,7 @@ use common::CrateContext;\n use common::{type_is_zero_size, val_ty};\n use common;\n use consts;\n-use context::{self, SharedCrateContext, CrateContextList};\n+use context::{self, LocalCrateContext, SharedCrateContext};\n use debuginfo;\n use declare;\n use machine;\n@@ -1113,41 +1113,61 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let symbol_map = Rc::new(symbol_map);\n \n-    let previous_work_products = trans_reuse_previous_work_products(&shared_ccx,\n-                                                                    &codegen_units,\n-                                                                    &symbol_map);\n-\n-    let crate_context_list = CrateContextList::new(&shared_ccx,\n-                                                   codegen_units,\n-                                                   previous_work_products,\n-                                                   symbol_map.clone());\n-\n-    let modules: Vec<ModuleTranslation> = crate_context_list\n-        .iter_all()\n-        .map(|ccx| {\n-            let dep_node = ccx.codegen_unit().work_product_dep_node();\n+    let modules: Vec<ModuleTranslation> = codegen_units\n+        .into_iter()\n+        .map(|cgu| {\n+            let dep_node = cgu.work_product_dep_node();\n             tcx.dep_graph.with_task(dep_node,\n-                                    ccx,\n-                                    AssertDepGraphSafe(symbol_map.clone()),\n+                                    AssertDepGraphSafe(&shared_ccx),\n+                                    AssertDepGraphSafe((cgu, symbol_map.clone())),\n                                     module_translation)\n         })\n         .collect();\n \n-    fn module_translation<'a, 'tcx>(ccx: CrateContext<'a, 'tcx>,\n-                                    symbol_map: AssertDepGraphSafe<Rc<SymbolMap<'tcx>>>)\n-                                    -> ModuleTranslation {\n-        // FIXME(#40304): Instead of this, the symbol-map should be an\n-        // on-demand thing that we compute.\n-        let AssertDepGraphSafe(symbol_map) = symbol_map;\n+    fn module_translation<'a, 'tcx>(\n+        scx: AssertDepGraphSafe<&SharedCrateContext<'a, 'tcx>>,\n+        args: AssertDepGraphSafe<(CodegenUnit<'tcx>, Rc<SymbolMap<'tcx>>)>)\n+        -> ModuleTranslation\n+    {\n+        // FIXME(#40304): We ought to be using the id as a key and some queries, I think.\n+        let AssertDepGraphSafe(scx) = scx;\n+        let AssertDepGraphSafe((cgu, symbol_map)) = args;\n+\n+        let cgu_name = String::from(cgu.name());\n+        let cgu_id = cgu.work_product_id();\n+        let symbol_name_hash = cgu.compute_symbol_name_hash(scx, &symbol_map);\n+\n+        // Check whether there is a previous work-product we can\n+        // re-use.  Not only must the file exist, and the inputs not\n+        // be dirty, but the hash of the symbols we will generate must\n+        // be the same.\n+        let previous_work_product =\n+            scx.dep_graph().previous_work_product(&cgu_id).and_then(|work_product| {\n+                if work_product.input_hash == symbol_name_hash {\n+                    debug!(\"trans_reuse_previous_work_products: reusing {:?}\", work_product);\n+                    Some(work_product)\n+                } else {\n+                    if scx.sess().opts.debugging_opts.incremental_info {\n+                        println!(\"incremental: CGU `{}` invalidated because of \\\n+                                  changed partitioning hash.\",\n+                                 cgu.name());\n+                    }\n+                    debug!(\"trans_reuse_previous_work_products: \\\n+                            not reusing {:?} because hash changed to {:?}\",\n+                           work_product, symbol_name_hash);\n+                    None\n+                }\n+            });\n \n-        let source = if let Some(buf) = ccx.previous_work_product() {\n+        let source = if let Some(buf) = previous_work_product {\n             // Don't need to translate this module.\n             ModuleSource::Preexisting(buf.clone())\n         } else {\n             // Instantiate translation items without filling out definitions yet...\n-\n-            let cgu = ccx.codegen_unit();\n-            let trans_items = cgu.items_in_deterministic_order(ccx.tcx(), &symbol_map);\n+            let lcx = LocalCrateContext::new(scx, cgu, symbol_map.clone());\n+            let ccx = CrateContext::new(scx, &lcx);\n+            let trans_items = ccx.codegen_unit()\n+                                 .items_in_deterministic_order(ccx.tcx(), &symbol_map);\n             for &(trans_item, linkage) in &trans_items {\n                 trans_item.predefine(&ccx, linkage);\n             }\n@@ -1199,11 +1219,9 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         };\n \n         ModuleTranslation {\n-            name: String::from(ccx.codegen_unit().name()),\n-            symbol_name_hash: ccx.codegen_unit()\n-                                 .compute_symbol_name_hash(ccx.shared(),\n-                                                           &symbol_map),\n-            source: source,\n+            name: cgu_name,\n+            symbol_name_hash,\n+            source,\n         }\n     }\n \n@@ -1487,43 +1505,6 @@ fn gather_type_sizes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     }\n }\n \n-/// For each CGU, identify if we can reuse an existing object file (or\n-/// maybe other context).\n-fn trans_reuse_previous_work_products(scx: &SharedCrateContext,\n-                                      codegen_units: &[CodegenUnit],\n-                                      symbol_map: &SymbolMap)\n-                                      -> Vec<Option<WorkProduct>> {\n-    debug!(\"trans_reuse_previous_work_products()\");\n-    codegen_units\n-        .iter()\n-        .map(|cgu| {\n-            let id = cgu.work_product_id();\n-\n-            let hash = cgu.compute_symbol_name_hash(scx, symbol_map);\n-\n-            debug!(\"trans_reuse_previous_work_products: id={:?} hash={}\", id, hash);\n-\n-            if let Some(work_product) = scx.dep_graph().previous_work_product(&id) {\n-                if work_product.input_hash == hash {\n-                    debug!(\"trans_reuse_previous_work_products: reusing {:?}\", work_product);\n-                    return Some(work_product);\n-                } else {\n-                    if scx.sess().opts.debugging_opts.incremental_info {\n-                        println!(\"incremental: CGU `{}` invalidated because of \\\n-                                  changed partitioning hash.\",\n-                                  cgu.name());\n-                    }\n-                    debug!(\"trans_reuse_previous_work_products: \\\n-                            not reusing {:?} because hash changed to {:?}\",\n-                           work_product, hash);\n-                }\n-            }\n-\n-            None\n-        })\n-        .collect()\n-}\n-\n fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>)\n                                                      -> (Vec<CodegenUnit<'tcx>>, SymbolMap<'tcx>) {\n     let time_passes = scx.sess().time_passes();"}, {"sha": "80d6f15518f97c6054f8357478f6eaf8261c5fe3", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 12, "deletions": 85, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/3f59079f8a36af1d8b5ff5a218f16a8e4806a542/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f59079f8a36af1d8b5ff5a218f16a8e4806a542/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=3f59079f8a36af1d8b5ff5a218f16a8e4806a542", "patch": "@@ -10,8 +10,7 @@\n \n use llvm;\n use llvm::{ContextRef, ModuleRef, ValueRef};\n-use rustc::dep_graph::{DepGraph, DepGraphSafe, DepNode, DepTrackingMap,\n-                       DepTrackingMapConfig, WorkProduct};\n+use rustc::dep_graph::{DepGraph, DepGraphSafe, DepNode, DepTrackingMap, DepTrackingMapConfig};\n use middle::cstore::LinkMeta;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n@@ -86,7 +85,6 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n pub struct LocalCrateContext<'tcx> {\n     llmod: ModuleRef,\n     llcx: ContextRef,\n-    previous_work_product: Option<WorkProduct>,\n     codegen_unit: CodegenUnit<'tcx>,\n     needs_unwind_cleanup_cache: RefCell<FxHashMap<Ty<'tcx>, bool>>,\n     /// Cache instances of monomorphic and polymorphic items\n@@ -211,41 +209,6 @@ impl<'gcx> DepTrackingMapConfig for ProjectionCache<'gcx> {\n     }\n }\n \n-/// This list owns a number of LocalCrateContexts and binds them to their common\n-/// SharedCrateContext. This type just exists as a convenience, something to\n-/// pass around all LocalCrateContexts with and get an iterator over them.\n-pub struct CrateContextList<'a, 'tcx: 'a> {\n-    shared: &'a SharedCrateContext<'a, 'tcx>,\n-    local_ccxs: Vec<LocalCrateContext<'tcx>>,\n-}\n-\n-impl<'a, 'tcx: 'a> CrateContextList<'a, 'tcx> {\n-    pub fn new(shared_ccx: &'a SharedCrateContext<'a, 'tcx>,\n-               codegen_units: Vec<CodegenUnit<'tcx>>,\n-               previous_work_products: Vec<Option<WorkProduct>>,\n-               symbol_map: Rc<SymbolMap<'tcx>>)\n-               -> CrateContextList<'a, 'tcx> {\n-        CrateContextList {\n-            shared: shared_ccx,\n-            local_ccxs: codegen_units.into_iter().zip(previous_work_products).map(|(cgu, wp)| {\n-                LocalCrateContext::new(shared_ccx, cgu, wp, symbol_map.clone())\n-            }).collect()\n-        }\n-    }\n-\n-    /// Iterate over all crate contexts, whether or not they need\n-    /// translation.  That is, whether or not a `.o` file is available\n-    /// for re-use from a previous incr. comp.).\n-    pub fn iter_all<'b>(&'b self) -> CrateContextIterator<'b, 'tcx> {\n-        CrateContextIterator {\n-            shared: self.shared,\n-            index: 0,\n-            local_ccxs: &self.local_ccxs[..],\n-            filter_to_previous_work_product_unavail: false,\n-        }\n-    }\n-}\n-\n /// A CrateContext value binds together one LocalCrateContext with the\n /// SharedCrateContext. It exists as a convenience wrapper, so we don't have to\n /// pass around (SharedCrateContext, LocalCrateContext) tuples all over trans.\n@@ -254,45 +217,15 @@ pub struct CrateContext<'a, 'tcx: 'a> {\n     local_ccx: &'a LocalCrateContext<'tcx>,\n }\n \n-impl<'a, 'tcx> DepGraphSafe for CrateContext<'a, 'tcx> {\n-}\n-\n-pub struct CrateContextIterator<'a, 'tcx: 'a> {\n-    shared: &'a SharedCrateContext<'a, 'tcx>,\n-    local_ccxs: &'a [LocalCrateContext<'tcx>],\n-    index: usize,\n-\n-    /// if true, only return results where `previous_work_product` is none\n-    filter_to_previous_work_product_unavail: bool,\n+impl<'a, 'tcx> CrateContext<'a, 'tcx> {\n+    pub fn new(shared: &'a SharedCrateContext<'a, 'tcx>,\n+               local_ccx: &'a LocalCrateContext<'tcx>)\n+               -> Self {\n+        CrateContext { shared, local_ccx }\n+    }\n }\n \n-impl<'a, 'tcx> Iterator for CrateContextIterator<'a,'tcx> {\n-    type Item = CrateContext<'a, 'tcx>;\n-\n-    fn next(&mut self) -> Option<CrateContext<'a, 'tcx>> {\n-        loop {\n-            if self.index >= self.local_ccxs.len() {\n-                return None;\n-            }\n-\n-            let index = self.index;\n-            self.index += 1;\n-\n-            let ccx = CrateContext {\n-                shared: self.shared,\n-                local_ccx: &self.local_ccxs[index],\n-            };\n-\n-            if\n-                self.filter_to_previous_work_product_unavail &&\n-                ccx.previous_work_product().is_some()\n-            {\n-                continue;\n-            }\n-\n-            return Some(ccx);\n-        }\n-    }\n+impl<'a, 'tcx> DepGraphSafe for CrateContext<'a, 'tcx> {\n }\n \n pub fn get_reloc_model(sess: &Session) -> llvm::RelocMode {\n@@ -512,11 +445,10 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n }\n \n impl<'tcx> LocalCrateContext<'tcx> {\n-    fn new<'a>(shared: &SharedCrateContext<'a, 'tcx>,\n-               codegen_unit: CodegenUnit<'tcx>,\n-               previous_work_product: Option<WorkProduct>,\n-               symbol_map: Rc<SymbolMap<'tcx>>)\n-           -> LocalCrateContext<'tcx> {\n+    pub fn new<'a>(shared: &SharedCrateContext<'a, 'tcx>,\n+                   codegen_unit: CodegenUnit<'tcx>,\n+                   symbol_map: Rc<SymbolMap<'tcx>>)\n+                   -> LocalCrateContext<'tcx> {\n         unsafe {\n             // Append \".rs\" to LLVM module identifier.\n             //\n@@ -542,7 +474,6 @@ impl<'tcx> LocalCrateContext<'tcx> {\n             let local_ccx = LocalCrateContext {\n                 llmod: llmod,\n                 llcx: llcx,\n-                previous_work_product: previous_work_product,\n                 codegen_unit: codegen_unit,\n                 needs_unwind_cleanup_cache: RefCell::new(FxHashMap()),\n                 instances: RefCell::new(FxHashMap()),\n@@ -651,10 +582,6 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         self.local().llcx\n     }\n \n-    pub fn previous_work_product(&self) -> Option<&WorkProduct> {\n-        self.local().previous_work_product.as_ref()\n-    }\n-\n     pub fn codegen_unit(&self) -> &CodegenUnit<'tcx> {\n         &self.local().codegen_unit\n     }"}]}