{"sha": "e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MjI2MWRmYmI1ZmVhYTJkMjhkMmIxMzhmNGFhYmIyYWE1MmM5NGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-03T20:45:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-03T20:45:54Z"}, "message": "Auto merge of #50413 - kennytm:rollup, r=kennytm\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #50302 (Add query search order check)\n - #50320 (Fix invalid path generation in rustdoc search)\n - #50349 (Rename \"show type declaration\" to \"show declaration\")\n - #50360 (Clarify wordings of the `unstable_name_collision` lint.)\n - #50365 (Use two vectors in nearest_common_ancestor.)\n - #50393 (Allow unaligned reads in constants)\n - #50401 (Revert \"Implement FromStr for PathBuf\")\n - #50406 (Forbid constructing empty identifiers from concat_idents)\n - #50407 (Always inline simple BytePos and CharPos methods.)\n - #50416 (check if the token is a lifetime before parsing)\n - #50417 (Update Cargo)\n - #50421 (Fix ICE when using a..=b in a closure.)\n\nFailed merges:", "tree": {"sha": "3bade0f4dfbda64eac4eed19227ac3f46acdf373", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bade0f4dfbda64eac4eed19227ac3f46acdf373"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "html_url": "https://github.com/rust-lang/rust/commit/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d68b0eceaaf719a4702ab13a7ca62dea5d966082", "url": "https://api.github.com/repos/rust-lang/rust/commits/d68b0eceaaf719a4702ab13a7ca62dea5d966082", "html_url": "https://github.com/rust-lang/rust/commit/d68b0eceaaf719a4702ab13a7ca62dea5d966082"}, {"sha": "03a0402dbf3143ab6a8b7166f4d1f74aa68f71df", "url": "https://api.github.com/repos/rust-lang/rust/commits/03a0402dbf3143ab6a8b7166f4d1f74aa68f71df", "html_url": "https://github.com/rust-lang/rust/commit/03a0402dbf3143ab6a8b7166f4d1f74aa68f71df"}], "stats": {"total": 223, "additions": 162, "deletions": 61}, "files": [{"sha": "c830c22ee5f50b1c58a46732cbe56036882756c2", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -606,8 +606,8 @@ mod builtin {\n     #[macro_export]\n     #[cfg(dox)]\n     macro_rules! concat_idents {\n-        ($($e:ident),*) => ({ /* compiler built-in */ });\n-        ($($e:ident,)*) => ({ /* compiler built-in */ });\n+        ($($e:ident),+) => ({ /* compiler built-in */ });\n+        ($($e:ident,)+) => ({ /* compiler built-in */ });\n     }\n \n     /// Concatenates literals into a static string slice."}, {"sha": "51f0c1d7047c91613c76e3ece8213546ec6db877", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -3121,9 +3121,9 @@ impl<'a> LoweringContext<'a> {\n             }\n             // Desugar `<start>..=<end>` to `std::ops::RangeInclusive::new(<start>, <end>)`\n             ExprKind::Range(Some(ref e1), Some(ref e2), RangeLimits::Closed) => {\n-                // FIXME: Use head_sp directly after RangeInclusive::new() is stabilized in stage0.\n+                // FIXME: Use e.span directly after RangeInclusive::new() is stabilized in stage0.\n                 let span = self.allow_internal_unstable(CompilerDesugaringKind::DotFill, e.span);\n-                let id = self.lower_node_id(e.id);\n+                let id = self.next_id();\n                 let e1 = self.lower_expr(e1);\n                 let e2 = self.lower_expr(e2);\n                 let ty_path = P(self.std_path(span, &[\"ops\", \"RangeInclusive\"], false));"}, {"sha": "d6c6f9dc0f61a0b1e5c72fee9af09b4b2634d6e3", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -507,7 +507,7 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n \n         let explanation = if lint_id == LintId::of(::lint::builtin::UNSTABLE_NAME_COLLISION) {\n             \"once this method is added to the standard library, \\\n-             there will be ambiguity here, which will cause a hard error!\"\n+             the ambiguity may cause an error or change in behavior!\"\n                 .to_owned()\n         } else if let Some(edition) = future_incompatible.edition {\n             format!(\"{} in the {} edition!\", STANDARD_MESSAGE, edition)"}, {"sha": "bfc9ff6660de9890254f9d37eb06660d413da73d", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -690,21 +690,22 @@ impl<'tcx> ScopeTree {\n         // the start. So this algorithm is faster.\n         let mut ma = Some(scope_a);\n         let mut mb = Some(scope_b);\n-        let mut seen: SmallVec<[Scope; 32]> = SmallVec::new();\n+        let mut seen_a: SmallVec<[Scope; 32]> = SmallVec::new();\n+        let mut seen_b: SmallVec<[Scope; 32]> = SmallVec::new();\n         loop {\n             if let Some(a) = ma {\n-                if seen.iter().position(|s| *s == a).is_some() {\n+                if seen_b.iter().position(|s| *s == a).is_some() {\n                     return a;\n                 }\n-                seen.push(a);\n+                seen_a.push(a);\n                 ma = self.parent_map.get(&a).map(|s| *s);\n             }\n \n             if let Some(b) = mb {\n-                if seen.iter().position(|s| *s == b).is_some() {\n+                if seen_a.iter().position(|s| *s == b).is_some() {\n                     return b;\n                 }\n-                seen.push(b);\n+                seen_b.push(b);\n                 mb = self.parent_map.get(&b).map(|s| *s);\n             }\n "}, {"sha": "623e0de478bcaf6979361d138b70674651fbdd36", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -792,7 +792,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 ConstVal::Value(miri) => const_val_field(\n                     self.tcx, self.param_env, instance,\n                     variant_opt, field, miri, cv.ty,\n-                ).unwrap(),\n+                ).expect(\"field access failed\"),\n                 _ => bug!(\"{:#?} is not a valid adt\", cv),\n             };\n             self.const_to_pat(instance, val, id, span)"}, {"sha": "bea29b6926aa63c1b48b1c6a5266a75b809885d7", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -1340,9 +1340,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         use syntax::ast::FloatTy;\n \n         let layout = self.layout_of(ty)?;\n-        // do the strongest layout check of the two\n-        let align = layout.align.max(ptr_align);\n-        self.memory.check_align(ptr, align)?;\n+        self.memory.check_align(ptr, ptr_align)?;\n \n         if layout.size.bytes() == 0 {\n             return Ok(Some(Value::ByVal(PrimVal::Undef)));"}, {"sha": "21de2db1dfe74fd7bf1930e06b38b3e20589b31b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -1427,7 +1427,7 @@ impl<'a> Cache {\n         }\n         if let Some(ref item_name) = item.name {\n             let path = self.paths.get(&item.def_id)\n-                                 .map(|p| p.0.join(\"::\").to_string())\n+                                 .map(|p| p.0[..p.0.len() - 1].join(\"::\"))\n                                  .unwrap_or(\"std\".to_owned());\n             for alias in item.attrs.lists(\"doc\")\n                                    .filter(|a| a.check_name(\"alias\"))"}, {"sha": "6d80145b29c7c271a70a5b42166fd6231890de3b", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -1996,7 +1996,7 @@\n         if (e.parentNode.id === \"main\") {\n             var otherMessage;\n             if (hasClass(e, \"type-decl\")) {\n-                otherMessage = '&nbsp;Show&nbsp;type&nbsp;declaration';\n+                otherMessage = '&nbsp;Show&nbsp;declaration';\n             }\n             e.parentNode.insertBefore(createToggle(otherMessage), e);\n             if (otherMessage && getCurrentValue('rustdoc-item-declarations') !== \"false\") {"}, {"sha": "d1274a4090087b61351444b37d2dc510aeb75ec6", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -450,8 +450,8 @@ pub mod builtin {\n     #[unstable(feature = \"concat_idents_macro\", issue = \"29599\")]\n     #[macro_export]\n     macro_rules! concat_idents {\n-        ($($e:ident),*) => ({ /* compiler built-in */ });\n-        ($($e:ident,)*) => ({ /* compiler built-in */ });\n+        ($($e:ident),+) => ({ /* compiler built-in */ });\n+        ($($e:ident,)+) => ({ /* compiler built-in */ });\n     }\n \n     /// Concatenates literals into a static string slice."}, {"sha": "696711a70d4f6408cc773abf87d04ed932e64b02", "filename": "src/libstd/path.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -87,7 +87,6 @@ use io;\n use iter::{self, FusedIterator};\n use ops::{self, Deref};\n use rc::Rc;\n-use str::FromStr;\n use sync::Arc;\n \n use ffi::{OsStr, OsString};\n@@ -1441,32 +1440,6 @@ impl From<String> for PathBuf {\n     }\n }\n \n-/// Error returned from [`PathBuf::from_str`][`from_str`].\n-///\n-/// Note that parsing a path will never fail. This error is just a placeholder\n-/// for implementing `FromStr` for `PathBuf`.\n-///\n-/// [`from_str`]: struct.PathBuf.html#method.from_str\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-#[stable(feature = \"path_from_str\", since = \"1.26.0\")]\n-pub enum ParsePathError {}\n-\n-#[stable(feature = \"path_from_str\", since = \"1.26.0\")]\n-impl fmt::Display for ParsePathError {\n-    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"path_from_str\", since = \"1.26.0\")]\n-impl FromStr for PathBuf {\n-    type Err = ParsePathError;\n-\n-    fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        Ok(PathBuf::from(s))\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<P: AsRef<Path>> iter::FromIterator<P> for PathBuf {\n     fn from_iter<I: IntoIterator<Item = P>>(iter: I) -> PathBuf {"}, {"sha": "71634ada89458012b70f6b307c5f7dca3bf33ddc", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -835,7 +835,13 @@ fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n         \"path\" => token::NtPath(panictry!(p.parse_path_common(PathStyle::Type, false))),\n         \"meta\" => token::NtMeta(panictry!(p.parse_meta_item())),\n         \"vis\" => token::NtVis(panictry!(p.parse_visibility(true))),\n-        \"lifetime\" => token::NtLifetime(p.expect_lifetime().ident),\n+        \"lifetime\" => if p.check_lifetime() {\n+            token::NtLifetime(p.expect_lifetime().ident)\n+        } else {\n+            let token_str = pprust::token_to_string(&p.token);\n+            p.fatal(&format!(\"expected a lifetime, found `{}`\", &token_str)).emit();\n+            FatalError.raise();\n+        }\n         // this is not supposed to happen, since it has been checked\n         // when compiling the macro.\n         _ => p.span_bug(sp, \"invalid fragment specifier\"),"}, {"sha": "bf4a68679df55aacb3637bcaf8b7c5cab1bb5882", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -2042,7 +2042,7 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn check_lifetime(&mut self) -> bool {\n+    pub fn check_lifetime(&mut self) -> bool {\n         self.expected_tokens.push(TokenType::Lifetime);\n         self.token.is_lifetime()\n     }"}, {"sha": "b8345e7cf40c109431a740ab8aea7b19efb46a24", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -31,6 +31,11 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,\n         return base::DummyResult::expr(sp);\n     }\n \n+    if tts.is_empty() {\n+        cx.span_err(sp, \"concat_idents! takes 1 or more arguments.\");\n+        return DummyResult::expr(sp);\n+    }\n+\n     let mut res_str = String::new();\n     for (i, e) in tts.iter().enumerate() {\n         if i & 1 == 1 {"}, {"sha": "8b4a3ea26a1ef7dca52f5a179e2f0110c7ea5f3f", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -1150,13 +1150,17 @@ pub struct CharPos(pub usize);\n // have been unsuccessful\n \n impl Pos for BytePos {\n+    #[inline(always)]\n     fn from_usize(n: usize) -> BytePos { BytePos(n as u32) }\n+\n+    #[inline(always)]\n     fn to_usize(&self) -> usize { let BytePos(n) = *self; n as usize }\n }\n \n impl Add for BytePos {\n     type Output = BytePos;\n \n+    #[inline(always)]\n     fn add(self, rhs: BytePos) -> BytePos {\n         BytePos((self.to_usize() + rhs.to_usize()) as u32)\n     }\n@@ -1165,6 +1169,7 @@ impl Add for BytePos {\n impl Sub for BytePos {\n     type Output = BytePos;\n \n+    #[inline(always)]\n     fn sub(self, rhs: BytePos) -> BytePos {\n         BytePos((self.to_usize() - rhs.to_usize()) as u32)\n     }\n@@ -1183,13 +1188,17 @@ impl Decodable for BytePos {\n }\n \n impl Pos for CharPos {\n+    #[inline(always)]\n     fn from_usize(n: usize) -> CharPos { CharPos(n) }\n+\n+    #[inline(always)]\n     fn to_usize(&self) -> usize { let CharPos(n) = *self; n }\n }\n \n impl Add for CharPos {\n     type Output = CharPos;\n \n+    #[inline(always)]\n     fn add(self, rhs: CharPos) -> CharPos {\n         CharPos(self.to_usize() + rhs.to_usize())\n     }\n@@ -1198,6 +1207,7 @@ impl Add for CharPos {\n impl Sub for CharPos {\n     type Output = CharPos;\n \n+    #[inline(always)]\n     fn sub(self, rhs: CharPos) -> CharPos {\n         CharPos(self.to_usize() - rhs.to_usize())\n     }"}, {"sha": "a2706e83229e5bfdddee3a008f113ef870e2d288", "filename": "src/test/compile-fail/macro-non-lifetime.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Fcompile-fail%2Fmacro-non-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Fcompile-fail%2Fmacro-non-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-non-lifetime.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test for issue #50381: non-lifetime passed to :lifetime.\n+\n+#![feature(macro_lifetime_matcher)]\n+\n+macro_rules! m { ($x:lifetime) => { } }\n+\n+fn main() {\n+    m!(a);\n+    //~^ ERROR expected a lifetime, found `a`\n+}"}, {"sha": "aa493ce03213027f80be84d13086c17c250b8b81", "filename": "src/test/run-pass/issue-50415.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Frun-pass%2Fissue-50415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Frun-pass%2Fissue-50415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-50415.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    // -------- Simplified test case --------\n+\n+    let _ = || 0..=1;\n+\n+    // -------- Original test case --------\n+\n+    let full_length = 1024;\n+    let range = {\n+        // do some stuff, omit here\n+        None\n+    };\n+\n+    let range = range.map(|(s, t)| s..=t).unwrap_or(0..=(full_length-1));\n+\n+    assert_eq!(range, 0..=1023);\n+}"}, {"sha": "0c5ec4fccbcd731abcfd78a3c2233ebb97399082", "filename": "src/test/rustdoc-js/alias-2.js", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Frustdoc-js%2Falias-2.js", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Frustdoc-js%2Falias-2.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Falias-2.js?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-order\n+\n const QUERY = '+';\n \n const EXPECTED = {\n     'others': [\n-        { 'path': 'std::ops::AddAssign', 'name': 'AddAssign' },\n-        { 'path': 'std::ops::Add', 'name': 'Add' },\n+        { 'path': 'std::ops', 'name': 'AddAssign' },\n+        { 'path': 'std::ops', 'name': 'Add' },\n     ],\n };"}, {"sha": "e7aafe3b9e2d158953fe787e58b2dca18f4f8b62", "filename": "src/test/rustdoc-js/alias.js", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Frustdoc-js%2Falias.js", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Frustdoc-js%2Falias.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Falias.js?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-order\n+\n const QUERY = '[';\n \n const EXPECTED = {\n     'others': [\n         { 'path': 'std', 'name': 'slice' },\n-        { 'path': 'std::ops::IndexMut', 'name': 'IndexMut' },\n-        { 'path': 'std::ops::Index', 'name': 'Index' },\n+        { 'path': 'std::ops', 'name': 'IndexMut' },\n+        { 'path': 'std::ops', 'name': 'Index' },\n     ],\n };"}, {"sha": "d7ba1253eabe0ddb377353944d65e89f949ae058", "filename": "src/test/rustdoc-js/basic.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Frustdoc-js%2Fbasic.js", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Frustdoc-js%2Fbasic.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fbasic.js?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -13,8 +13,8 @@ const QUERY = 'String';\n const EXPECTED = {\n     'others': [\n         { 'path': 'std::string', 'name': 'String' },\n-        { 'path': 'std::ffi', 'name': 'OsString' },\n         { 'path': 'std::ffi', 'name': 'CString' },\n+        { 'path': 'std::ffi', 'name': 'OsString' },\n     ],\n     'in_args': [\n         { 'path': 'std::str', 'name': 'eq' },"}, {"sha": "1db12a06b03c4db596fd8f68314441d5cd542e16", "filename": "src/test/ui/const-eval/ice-packed.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Fui%2Fconst-eval%2Fice-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Fui%2Fconst-eval%2Fice-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fice-packed.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+#[derive(Copy, Clone, PartialEq, Eq)]\n+#[repr(packed)]\n+pub struct Num(u64);\n+\n+impl Num {\n+    pub const ZERO: Self = Num(0);\n+}\n+\n+pub fn decrement(a: Num) -> Num {\n+    match a {\n+        Num::ZERO => Num::ZERO,\n+        a => Num(a.0 - 1)\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "5a70dffd4c8c2f91b14e0da642c20f99b62d12d2", "filename": "src/test/ui/inference_unstable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Fui%2Finference_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Fui%2Finference_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference_unstable.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -25,5 +25,5 @@ use inference_unstable_itertools::IpuItertools;\n fn main() {\n     assert_eq!('x'.ipu_flatten(), 1);\n     //~^ WARN a method with this name may be added to the standard library in the future\n-    //~^^ WARN once this method is added to the standard library, there will be ambiguity here\n+    //~^^ WARN once this method is added to the standard library, the ambiguity may cause an error\n }"}, {"sha": "a217bc57b367028cae9be7e8e5d30aba7e79d83a", "filename": "src/test/ui/inference_unstable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Fui%2Finference_unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Fui%2Finference_unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference_unstable.stderr?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -5,7 +5,7 @@ LL |     assert_eq!('x'.ipu_flatten(), 1);\n    |                    ^^^^^^^^^^^\n    |\n    = note: #[warn(unstable_name_collision)] on by default\n-   = warning: once this method is added to the standard library, there will be ambiguity here, which will cause a hard error!\n+   = warning: once this method is added to the standard library, the ambiguity may cause an error or change in behavior!\n    = note: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\n    = help: call with fully qualified syntax `inference_unstable_itertools::IpuItertools::ipu_flatten(...)` to keep using the current method\n    = note: add #![feature(ipu_flatten)] to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_flatten`"}, {"sha": "8d4c6c5140fd68dd815aa3acdf7bcb23f71d2344", "filename": "src/test/ui/issue-50403.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Fui%2Fissue-50403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Fui%2Fissue-50403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50403.rs?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(concat_idents)]\n+\n+fn main() {\n+    let x = concat_idents!(); //~ ERROR concat_idents! takes 1 or more arguments\n+}"}, {"sha": "f2871c72e25af5bc02f678cc98137c80f8fc9c4b", "filename": "src/test/ui/issue-50403.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Fui%2Fissue-50403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftest%2Fui%2Fissue-50403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50403.stderr?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -0,0 +1,8 @@\n+error: concat_idents! takes 1 or more arguments.\n+  --> $DIR/issue-50403.rs:14:13\n+   |\n+LL |     let x = concat_idents!(); //~ ERROR concat_idents! takes 1 or more arguments\n+   |             ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "66b0ffa81c560be1b79511b51f49cbb23bc78651", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -1 +1 @@\n-Subproject commit 122fd5be5201913d42e219e132d6569493583bca\n+Subproject commit 66b0ffa81c560be1b79511b51f49cbb23bc78651"}, {"sha": "1c79443dedf35551319ea138ec6580470e3162af", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "patch": "@@ -87,6 +87,7 @@ function loadContent(content) {\n     var Module = module.constructor;\n     var m = new Module();\n     m._compile(content, \"tmp.js\");\n+    m.exports.ignore_order = content.indexOf(\"\\n// ignore-order\\n\") !== -1;\n     return m.exports;\n }\n \n@@ -130,10 +131,10 @@ function lookForEntry(entry, data) {\n             }\n         }\n         if (allGood === true) {\n-            return true;\n+            return i;\n         }\n     }\n-    return false;\n+    return null;\n }\n \n function main(argv) {\n@@ -177,6 +178,7 @@ function main(argv) {\n                                'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n         const expected = loadedFile.EXPECTED;\n         const query = loadedFile.QUERY;\n+        const ignore_order = loadedFile.ignore_order;\n         var results = loaded.execSearch(loaded.getQuery(query), index);\n         process.stdout.write('Checking \"' + file + '\" ... ');\n         var error_text = [];\n@@ -189,13 +191,17 @@ function main(argv) {\n                 break;\n             }\n             var entry = expected[key];\n-            var found = false;\n+            var prev_pos = 0;\n             for (var i = 0; i < entry.length; ++i) {\n-                if (lookForEntry(entry[i], results[key]) === true) {\n-                    found = true;\n-                } else {\n+                var entry_pos = lookForEntry(entry[i], results[key]);\n+                if (entry_pos === null) {\n                     error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n                                     JSON.stringify(entry[i]) + \"'\");\n+                } else if (entry_pos < prev_pos && ignore_order === false) {\n+                    error_text.push(\"==> '\" + JSON.stringify(entry[i]) + \"' was supposed to be \" +\n+                                    \" before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n+                } else {\n+                    prev_pos = entry_pos;\n                 }\n             }\n         }"}]}