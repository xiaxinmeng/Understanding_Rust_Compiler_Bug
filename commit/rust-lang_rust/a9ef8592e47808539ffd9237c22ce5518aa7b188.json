{"sha": "a9ef8592e47808539ffd9237c22ce5518aa7b188", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZWY4NTkyZTQ3ODA4NTM5ZmZkOTIzN2MyMmNlNTUxOGFhN2IxODg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T20:12:19Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T20:48:23Z"}, "message": "parser: bool -> TopLevel.", "tree": {"sha": "5bd42574a9a7c4ecfd49121aabb8f73d339ba947", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bd42574a9a7c4ecfd49121aabb8f73d339ba947"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ef8592e47808539ffd9237c22ce5518aa7b188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ef8592e47808539ffd9237c22ce5518aa7b188", "html_url": "https://github.com/rust-lang/rust/commit/a9ef8592e47808539ffd9237c22ce5518aa7b188", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ef8592e47808539ffd9237c22ce5518aa7b188/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2966e651de3bf83ab9c712a1afaeba84162cab1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2966e651de3bf83ab9c712a1afaeba84162cab1", "html_url": "https://github.com/rust-lang/rust/commit/b2966e651de3bf83ab9c712a1afaeba84162cab1"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "c168d03378133df0307b46abaa1b3f613960a3eb", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef8592e47808539ffd9237c22ce5518aa7b188/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef8592e47808539ffd9237c22ce5518aa7b188/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=a9ef8592e47808539ffd9237c22ce5518aa7b188", "patch": "@@ -18,6 +18,10 @@ type Expected = Option<&'static str>;\n #[derive(PartialEq)]\n pub enum GateOr { Yes, No }\n \n+/// Whether or not this is the top level pattern context.\n+#[derive(PartialEq, Copy, Clone)]\n+enum TopLevel { Yes, No }\n+\n impl<'a> Parser<'a> {\n     /// Parses a pattern.\n     ///\n@@ -46,7 +50,7 @@ impl<'a> Parser<'a> {\n             self.sess.gated_spans.or_patterns.borrow_mut().push(self.prev_span);\n         }\n \n-        self.parse_pat_with_or(None, gate_or, true)\n+        self.parse_pat_with_or(None, gate_or, TopLevel::Yes)\n     }\n \n     /// Parses a pattern, that may be a or-pattern (e.g. `Foo | Bar` in `Some(Foo | Bar)`).\n@@ -55,7 +59,7 @@ impl<'a> Parser<'a> {\n         &mut self,\n         expected: Expected,\n         gate_or: GateOr,\n-        top_level: bool\n+        top_level: TopLevel,\n     ) -> PResult<'a, P<Pat>> {\n         // Parse the first pattern.\n         let first_pat = self.parse_pat(expected)?;\n@@ -112,8 +116,8 @@ impl<'a> Parser<'a> {\n \n     /// Some special error handling for the \"top-level\" patterns in a match arm,\n     /// `for` loop, `let`, &c. (in contrast to subpatterns within such).\n-    fn maybe_recover_unexpected_comma(&mut self, lo: Span, top_level: bool) -> PResult<'a, ()> {\n-        if !top_level || self.token != token::Comma {\n+    fn maybe_recover_unexpected_comma(&mut self, lo: Span, top_level: TopLevel) -> PResult<'a, ()> {\n+        if top_level == TopLevel::No || self.token != token::Comma {\n             return Ok(());\n         }\n \n@@ -175,7 +179,7 @@ impl<'a> Parser<'a> {\n             self.bump();\n         }\n \n-        self.parse_pat_with_or(expected, GateOr::Yes, false)\n+        self.parse_pat_with_or(expected, GateOr::Yes, TopLevel::No)\n     }\n \n     /// Parses a pattern, with a setting whether modern range patterns (e.g., `a..=b`, `a..b` are"}]}