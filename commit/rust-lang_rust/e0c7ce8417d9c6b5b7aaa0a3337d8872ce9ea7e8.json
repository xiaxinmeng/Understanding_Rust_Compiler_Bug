{"sha": "e0c7ce8417d9c6b5b7aaa0a3337d8872ce9ea7e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYzdjZTg0MTdkOWM2YjViN2FhYTBhMzMzN2Q4ODcyY2U5ZWE3ZTg=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-01-29T20:34:52Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-02-03T11:09:38Z"}, "message": "Allow add_explicit_type to replace a placeholder type", "tree": {"sha": "58993c19d341c65942c17761af8c4e5f57ca0d51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58993c19d341c65942c17761af8c4e5f57ca0d51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0c7ce8417d9c6b5b7aaa0a3337d8872ce9ea7e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c7ce8417d9c6b5b7aaa0a3337d8872ce9ea7e8", "html_url": "https://github.com/rust-lang/rust/commit/e0c7ce8417d9c6b5b7aaa0a3337d8872ce9ea7e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0c7ce8417d9c6b5b7aaa0a3337d8872ce9ea7e8/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52456c44901c8c38c8bcb742ebe305484af8f36f", "url": "https://api.github.com/repos/rust-lang/rust/commits/52456c44901c8c38c8bcb742ebe305484af8f36f", "html_url": "https://github.com/rust-lang/rust/commit/52456c44901c8c38c8bcb742ebe305484af8f36f"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "2443d55415979ffb7d4884d5d98524fe243d1e8d", "filename": "crates/ra_assists/src/assists/add_explicit_type.rs", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e0c7ce8417d9c6b5b7aaa0a3337d8872ce9ea7e8/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c7ce8417d9c6b5b7aaa0a3337d8872ce9ea7e8/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs?ref=e0c7ce8417d9c6b5b7aaa0a3337d8872ce9ea7e8", "patch": "@@ -1,7 +1,7 @@\n use hir::{db::HirDatabase, HirDisplay};\n use ra_syntax::{\n-    ast::{self, AstNode, LetStmt, NameOwner},\n-    TextRange, T,\n+    ast::{self, AstNode, LetStmt, NameOwner, TypeAscriptionOwner},\n+    TextRange,\n };\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -34,17 +34,21 @@ pub(crate) fn add_explicit_type(ctx: AssistCtx<impl HirDatabase>) -> Option<Assi\n     // The binding must have a name\n     let name = pat.name()?;\n     let name_range = name.syntax().text_range();\n-    // Assist should only be applicable if cursor is between 'let' and '='\n     let stmt_range = stmt.syntax().text_range();\n     let eq_range = stmt.eq_token()?.text_range();\n+    // Assist should only be applicable if cursor is between 'let' and '='\n     let let_range = TextRange::from_to(stmt_range.start(), eq_range.start());\n     let cursor_in_range = ctx.frange.range.is_subrange(&let_range);\n     if !cursor_in_range {\n         return None;\n     }\n     // Assist not applicable if the type has already been specified\n-    if stmt.syntax().children_with_tokens().any(|child| child.kind() == T![:]) {\n-        return None;\n+    // and it has no placeholders\n+    let ascribed_ty = stmt.ascribed_type();\n+    if let Some(ref ty) = ascribed_ty {\n+        if ty.syntax().descendants().find_map(ast::PlaceholderType::cast).is_none() {\n+            return None;\n+        }\n     }\n     // Infer type\n     let db = ctx.db;\n@@ -60,7 +64,11 @@ pub(crate) fn add_explicit_type(ctx: AssistCtx<impl HirDatabase>) -> Option<Assi\n         format!(\"Insert explicit type '{}'\", ty.display(db)),\n         |edit| {\n             edit.target(pat_range);\n-            edit.insert(name_range.end(), format!(\": {}\", ty.display(db)));\n+            if let Some(ascribed_ty) = ascribed_ty {\n+                edit.replace(ascribed_ty.syntax().text_range(), format!(\"{}\", ty.display(db)));\n+            } else {\n+                edit.insert(name_range.end(), format!(\": {}\", ty.display(db)));\n+            }\n         },\n     )\n }\n@@ -85,6 +93,40 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn add_explicit_type_works_for_underscore() {\n+        check_assist(\n+            add_explicit_type,\n+            \"fn f() { let a<|>: _ = 1; }\",\n+            \"fn f() { let a<|>: i32 = 1; }\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_explicit_type_works_for_nested_underscore() {\n+        check_assist(\n+            add_explicit_type,\n+            r#\"\n+            enum Option<T> {\n+                Some(T),\n+                None\n+            }\n+\n+            fn f() {\n+                let a<|>: Option<_> = Option::Some(1);\n+            }\"#,\n+            r#\"\n+            enum Option<T> {\n+                Some(T),\n+                None\n+            }\n+\n+            fn f() {\n+                let a<|>: Option<i32> = Option::Some(1);\n+            }\"#,\n+        );\n+    }\n+\n     #[test]\n     fn add_explicit_type_works_for_macro_call() {\n         check_assist("}]}