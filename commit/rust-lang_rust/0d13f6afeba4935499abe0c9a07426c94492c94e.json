{"sha": "0d13f6afeba4935499abe0c9a07426c94492c94e", "node_id": "C_kwDOAAsO6NoAKDBkMTNmNmFmZWJhNDkzNTQ5OWFiZTBjOWEwNzQyNmM5NDQ5MmM5NGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-13T16:04:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-13T16:04:06Z"}, "message": "Auto merge of #96015 - Dylan-DPC:rollup-vhdprid, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #93217 (Improve Rustdoc UI for scraped examples with multiline arguments, fix overflow in line numbers)\n - #95885 (Improve error message in case of missing checksum)\n - #95962 (Document that DirEntry holds the directory open)\n - #95991 (fix: wrong trait import suggestion for T:)\n - #96005 (Add missing article to fix \"few\" to \"a few\".)\n - #96006 (Add a missing article)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6e616ef0fddcb35f3ee85e0d39577d44182b0fb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e616ef0fddcb35f3ee85e0d39577d44182b0fb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d13f6afeba4935499abe0c9a07426c94492c94e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d13f6afeba4935499abe0c9a07426c94492c94e", "html_url": "https://github.com/rust-lang/rust/commit/0d13f6afeba4935499abe0c9a07426c94492c94e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d13f6afeba4935499abe0c9a07426c94492c94e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab33f71a8be01a93d4d14ee5755beeefe38f1946", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab33f71a8be01a93d4d14ee5755beeefe38f1946", "html_url": "https://github.com/rust-lang/rust/commit/ab33f71a8be01a93d4d14ee5755beeefe38f1946"}, {"sha": "e95f2db98f347043e5ba7a3c2c8f7cc58248dae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e95f2db98f347043e5ba7a3c2c8f7cc58248dae9", "html_url": "https://github.com/rust-lang/rust/commit/e95f2db98f347043e5ba7a3c2c8f7cc58248dae9"}], "stats": {"total": 484, "additions": 391, "deletions": 93}, "files": [{"sha": "e6560ca4d9b90e7827e30827220cb075ade931cc", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -1880,9 +1880,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 };\n                             let sp = hir.span(id);\n                             let sp = if let Some(first_bound) = has_bounds {\n-                                // `sp` only covers `T`, change it so that it covers\n-                                // `T:` when appropriate\n                                 sp.until(first_bound.span())\n+                            } else if let Some(colon_sp) =\n+                                // If the generic param is declared with a colon but without bounds:\n+                                // fn foo<T:>(t: T) { ... }\n+                                param.colon_span_for_suggestions(\n+                                    self.inh.tcx.sess.source_map(),\n+                                )\n+                            {\n+                                sp.to(colon_sp)\n                             } else {\n                                 sp\n                             };"}, {"sha": "b30c8a4aeabddbb746fe28ac73b99b69b12a45dd", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -108,11 +108,11 @@ pub const fn identity<T>(x: T) -> T {\n /// If you need to do a costly conversion it is better to implement [`From`] with type\n /// `&T` or write a custom function.\n ///\n-/// `AsRef` has the same signature as [`Borrow`], but [`Borrow`] is different in few aspects:\n+/// `AsRef` has the same signature as [`Borrow`], but [`Borrow`] is different in a few aspects:\n ///\n /// - Unlike `AsRef`, [`Borrow`] has a blanket impl for any `T`, and can be used to accept either\n ///   a reference or a value.\n-/// - [`Borrow`] also requires that [`Hash`], [`Eq`] and [`Ord`] for borrowed value are\n+/// - [`Borrow`] also requires that [`Hash`], [`Eq`] and [`Ord`] for a borrowed value are\n ///   equivalent to those of the owned value. For this reason, if you want to\n ///   borrow only a single field of a struct you can implement `AsRef`, but not [`Borrow`].\n ///"}, {"sha": "433b4d530136b282a9e84d870039c5b1b07eb3de", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -132,6 +132,16 @@ pub struct ReadDir(fs_imp::ReadDir);\n /// An instance of `DirEntry` represents an entry inside of a directory on the\n /// filesystem. Each entry can be inspected via methods to learn about the full\n /// path or possibly other metadata through per-platform extension traits.\n+///\n+/// # Platform-specific behavior\n+///\n+/// On Unix, the `DirEntry` struct contains an internal reference to the open\n+/// directory. Holding `DirEntry` objects will consume a file handle even\n+/// after the `ReadDir` iterator is dropped.\n+///\n+/// Note that this [may change in the future][changes].\n+///\n+/// [changes]: io#platform-specific-behavior\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct DirEntry(fs_imp::DirEntry);\n "}, {"sha": "d437397045c64d0920b6d6330891fad2ac858b2c", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -70,7 +70,11 @@ def get(base, url, path, checksums, verbose=False, do_verify=True, help_on_error\n     try:\n         if do_verify:\n             if url not in checksums:\n-                raise RuntimeError(\"src/stage0.json doesn't contain a checksum for {}\".format(url))\n+                raise RuntimeError((\"src/stage0.json doesn't contain a checksum for {}. \"\n+                                    \"Pre-built artifacts might not available for this \"\n+                                    \"target at this time, see https://doc.rust-lang.org/nightly\"\n+                                    \"/rustc/platform-support.html for more information.\")\n+                                   .format(url))\n             sha256 = checksums[url]\n             if os.path.exists(path):\n                 if verify(path, sha256, False):"}, {"sha": "747cc629ba44b2e02ad4838a6a3cc61af57afbfd", "filename": "src/doc/rustdoc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -9,6 +9,7 @@\n     - [Linking to items by name](write-documentation/linking-to-items-by-name.md)\n     - [Documentation tests](write-documentation/documentation-tests.md)\n - [Rustdoc-specific lints](lints.md)\n+- [Scraped examples](scraped-examples.md)\n - [Advanced features](advanced-features.md)\n - [Unstable features](unstable-features.md)\n - [Deprecated features](deprecated-features.md)"}, {"sha": "d75f6d522e8edafaa5e1e5e46af995cb759e06d9", "filename": "src/doc/rustdoc/src/scraped-examples.md", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Fdoc%2Frustdoc%2Fsrc%2Fscraped-examples.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Fdoc%2Frustdoc%2Fsrc%2Fscraped-examples.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fscraped-examples.md?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -0,0 +1,55 @@\n+# Scraped examples\n+\n+Rustdoc has an unstable feature where it can automatically scrape examples of items being documented from the `examples/` directory of a Cargo workspace. These examples will be included within the generated documentation for that item. For example, if your library contains a public function:\n+\n+```rust,ignore (needs-other-file)\n+// a_crate/src/lib.rs\n+pub fn a_func() {}\n+```\n+\n+And you have an example calling this function:\n+\n+```rust,ignore (needs-other-file)\n+// a_crate/examples/ex.rs\n+fn main() {\n+  a_crate::a_func();\n+}\n+```\n+\n+Then this code snippet will be included in the documentation for `a_func`. This documentation is inserted by Rustdoc and cannot be manually edited by the crate author.\n+\n+\n+## How to use this feature\n+\n+This feature is unstable, so you can enable it by calling Rustdoc with the unstable `rustdoc-scrape-examples` flag:\n+\n+```bash\n+cargo doc -Zunstable-options -Zrustdoc-scrape-examples=examples\n+```\n+\n+To enable this feature on [docs.rs](https://docs.rs), add this to your Cargo.toml:\n+\n+```toml\n+[package.metadata.docs.rs]\n+cargo-args = [\"-Zunstable-options\", \"-Zrustdoc-scrape-examples=examples\"]\n+```\n+\n+\n+## How it works\n+\n+When you run `cargo doc`, Rustdoc will analyze all the crates that match Cargo's `--examples` filter for instances of items being documented. Then Rustdoc will include the source code of these instances in the generated documentation.\n+\n+Rustdoc has a few techniques to ensure these examples don't overwhelm documentation readers, and that it doesn't blow up the page size:\n+\n+1. For a given item, a maximum of 5 examples are included in the page. The remaining examples are just links to source code.\n+2. Only one example is shown by default, and the remaining examples are hidden behind a toggle.\n+3. For a given file that contains examples, only the item containing the examples will be included in the generated documentation.\n+\n+For a given item, Rustdoc sorts its examples based on the size of the example &mdash; smaller ones are shown first.\n+\n+\n+## FAQ\n+\n+### My example is not showing up in the documentation\n+\n+This feature uses Cargo's convention for finding examples. You should ensure that `cargo check --examples` includes your example file."}, {"sha": "90123655758cce202a8521f87d43d7df2fed9fae", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -17,8 +17,8 @@ use super::print_item::{full_path, item_path, print_item};\n use super::search_index::build_index;\n use super::write_shared::write_shared;\n use super::{\n-    collect_spans_and_sources, print_sidebar, settings, AllTypes, LinkFromSrc, NameDoc, StylePath,\n-    BASIC_KEYWORDS,\n+    collect_spans_and_sources, print_sidebar, scrape_examples_help, settings, AllTypes,\n+    LinkFromSrc, NameDoc, StylePath, BASIC_KEYWORDS,\n };\n \n use crate::clean::{self, types::ExternalLocation, ExternalCrate};\n@@ -551,6 +551,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         let crate_name = self.tcx().crate_name(LOCAL_CRATE);\n         let final_file = self.dst.join(crate_name.as_str()).join(\"all.html\");\n         let settings_file = self.dst.join(\"settings.html\");\n+        let scrape_examples_help_file = self.dst.join(\"scrape-examples-help.html\");\n \n         let mut root_path = self.dst.to_str().expect(\"invalid path\").to_owned();\n         if !root_path.ends_with('/') {\n@@ -606,6 +607,20 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             &self.shared.style_files,\n         );\n         self.shared.fs.write(settings_file, v)?;\n+\n+        if self.shared.layout.scrape_examples_extension {\n+            page.title = \"About scraped examples\";\n+            page.description = \"How the scraped examples feature works in Rustdoc\";\n+            let v = layout::render(\n+                &self.shared.layout,\n+                &page,\n+                \"\",\n+                scrape_examples_help(&*self.shared),\n+                &self.shared.style_files,\n+            );\n+            self.shared.fs.write(scrape_examples_help_file, v)?;\n+        }\n+\n         if let Some(ref redirections) = self.shared.redirections {\n             if !redirections.borrow().is_empty() {\n                 let redirect_map_path ="}, {"sha": "a4cc42e2a0185834e3573d4e08cdb105167a318d", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -75,8 +75,10 @@ use crate::html::format::{\n use crate::html::highlight;\n use crate::html::markdown::{HeadingOffset, IdMap, Markdown, MarkdownHtml, MarkdownSummaryLine};\n use crate::html::sources;\n+use crate::html::static_files::SCRAPE_EXAMPLES_HELP_MD;\n use crate::scrape_examples::{CallData, CallLocation};\n use crate::try_none;\n+use crate::DOC_RUST_LANG_ORG_CHANNEL;\n \n /// A pair of name and its optional document.\n crate type NameDoc = (String, Option<String>);\n@@ -460,6 +462,34 @@ fn settings(root_path: &str, suffix: &str, theme_names: Vec<String>) -> Result<S\n     ))\n }\n \n+fn scrape_examples_help(shared: &SharedContext<'_>) -> String {\n+    let mut content = SCRAPE_EXAMPLES_HELP_MD.to_owned();\n+    content.push_str(&format!(\n+      \"## More information\\n\\n\\\n+      If you want more information about this feature, please read the [corresponding chapter in the Rustdoc book]({}/rustdoc/scraped-examples.html).\",\n+      DOC_RUST_LANG_ORG_CHANNEL));\n+\n+    let mut ids = IdMap::default();\n+    format!(\n+        \"<div class=\\\"main-heading\\\">\\\n+            <h1 class=\\\"fqn\\\">\\\n+                <span class=\\\"in-band\\\">About scraped examples</span>\\\n+            </h1>\\\n+        </div>\\\n+        <div>{}</div>\",\n+        Markdown {\n+            content: &content,\n+            links: &[],\n+            ids: &mut ids,\n+            error_codes: shared.codes,\n+            edition: shared.edition(),\n+            playground: &shared.playground,\n+            heading_offset: HeadingOffset::H1\n+        }\n+        .into_string()\n+    )\n+}\n+\n fn document(\n     w: &mut Buffer,\n     cx: &Context<'_>,\n@@ -2743,7 +2773,9 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item) {\n           <span></span>\\\n           <h5 id=\\\"{id}\\\">\\\n              <a href=\\\"#{id}\\\">Examples found in repository</a>\\\n+             <a class=\\\"scrape-help\\\" href=\\\"{root_path}scrape-examples-help.html\\\">?</a>\\\n           </h5>\",\n+        root_path = cx.root_path(),\n         id = id\n     );\n \n@@ -2795,9 +2827,10 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item) {\n             .locations\n             .iter()\n             .map(|loc| {\n-                let (byte_lo, byte_hi) = loc.call_expr.byte_span;\n+                let (byte_lo, byte_hi) = loc.call_ident.byte_span;\n                 let (line_lo, line_hi) = loc.call_expr.line_span;\n                 let byte_range = (byte_lo - byte_min, byte_hi - byte_min);\n+\n                 let line_range = (line_lo - line_min, line_hi - line_min);\n                 let (line_url, line_title) = link_to_loc(call_data, loc);\n \n@@ -2913,6 +2946,7 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item) {\n                   <summary class=\\\"hideme\\\">\\\n                      <span>More examples</span>\\\n                   </summary>\\\n+                  <div class=\\\"hide-more\\\">Hide additional examples</div>\\\n                   <div class=\\\"more-scraped-examples\\\">\\\n                     <div class=\\\"toggle-line\\\"><div class=\\\"toggle-line-inner\\\"></div></div>\\\n                     <div class=\\\"more-scraped-examples-inner\\\">\""}, {"sha": "48cb0a46ad6270f7d37ed23ca5088ceb4ef0a79f", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 44, "deletions": 37, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -618,7 +618,7 @@ h2.location a {\n \tposition: relative;\n }\n \n-.docblock > :not(.information) {\n+.docblock > :not(.information):not(.more-examples-toggle) {\n \tmax-width: 100%;\n \toverflow-x: auto;\n }\n@@ -840,8 +840,8 @@ h2.small-section-header > .anchor {\n \tcontent: '\u00a7';\n }\n \n-.docblock a:not(.srclink):not(.test-arrow):hover,\n-.docblock-short a:not(.srclink):not(.test-arrow):hover, .item-info a {\n+.docblock a:not(.srclink):not(.test-arrow):not(.scrape-help):hover,\n+.docblock-short a:not(.srclink):not(.test-arrow):not(.scrape-help):hover, .item-info a {\n \ttext-decoration: underline;\n }\n \n@@ -2038,21 +2038,45 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \n /* Begin: styles for --scrape-examples feature */\n \n+.scraped-example-list .scrape-help {\n+\tmargin-left: 10px;\n+\tpadding: 0 4px;\n+\tfont-weight: normal;\n+\tfont-size: 12px;\n+\tposition: relative;\n+\tbottom: 1px;\n+\tbackground: transparent;\n+\tborder-width: 1px;\n+\tborder-style: solid;\n+\tborder-radius: 50px;\n+}\n+\n .scraped-example-title {\n \tfont-family: 'Fira Sans';\n }\n \n-.scraped-example:not(.expanded) .code-wrapper pre.line-numbers {\n-\toverflow: hidden;\n+.scraped-example .code-wrapper {\n+\tposition: relative;\n+\tdisplay: flex;\n+\tflex-direction: row;\n+\tflex-wrap: wrap;\n+\twidth: 100%;\n+}\n+\n+.scraped-example:not(.expanded) .code-wrapper {\n \tmax-height: 240px;\n }\n \n-.scraped-example:not(.expanded) .code-wrapper .example-wrap pre.rust {\n+.scraped-example:not(.expanded) .code-wrapper pre {\n \toverflow-y: hidden;\n \tmax-height: 240px;\n \tpadding-bottom: 0;\n }\n \n+.scraped-example:not(.expanded) .code-wrapper pre.line-numbers {\n+\toverflow-x: hidden;\n+}\n+\n .scraped-example .code-wrapper .prev {\n \tposition: absolute;\n \ttop: 0.25em;\n@@ -2077,22 +2101,13 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \tcursor: pointer;\n }\n \n-.scraped-example .code-wrapper {\n-\tposition: relative;\n-\tdisplay: flex;\n-\tflex-direction: row;\n-\tflex-wrap: wrap;\n-\twidth: 100%;\n-}\n-\n .scraped-example:not(.expanded) .code-wrapper:before {\n \tcontent: \" \";\n \twidth: 100%;\n \theight: 5px;\n \tposition: absolute;\n \tz-index: 100;\n \ttop: 0;\n-\tbackground: linear-gradient(to bottom, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n }\n \n .scraped-example:not(.expanded) .code-wrapper:after {\n@@ -2102,12 +2117,6 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \tposition: absolute;\n \tz-index: 100;\n \tbottom: 0;\n-\tbackground: linear-gradient(to top, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n-}\n-\n-.scraped-example:not(.expanded) .code-wrapper {\n-\toverflow: hidden;\n-\tmax-height: 240px;\n }\n \n .scraped-example .code-wrapper .line-numbers {\n@@ -2126,34 +2135,37 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \tmargin-bottom: 0;\n }\n \n+.scraped-example:not(.expanded) .code-wrapper .example-wrap {\n+\toverflow-x: hidden;\n+}\n+\n .scraped-example .code-wrapper .example-wrap pre.rust {\n \toverflow-x: inherit;\n \twidth: inherit;\n \toverflow-y: hidden;\n }\n \n-.scraped-example .example-wrap .rust span.highlight {\n-\tbackground: #fcffd6;\n-}\n-\n-.scraped-example .example-wrap .rust span.highlight.focus {\n-\tbackground: #f6fdb0;\n-}\n \n .more-examples-toggle {\n+\tmax-width: calc(100% + 25px);\n \tmargin-top: 10px;\n+\tmargin-left: -25px;\n+}\n+\n+.more-examples-toggle .hide-more {\n+\tmargin-left: 25px;\n+\tmargin-bottom: 5px;\n+\tcursor: pointer;\n }\n \n-.more-examples-toggle summary {\n-\tcolor: #999;\n+.more-examples-toggle summary, .more-examples-toggle .hide-more {\n \tfont-family: 'Fira Sans';\n }\n \n .more-scraped-examples {\n-\tmargin-left: 25px;\n+\tmargin-left: 5px;\n \tdisplay: flex;\n \tflex-direction: row;\n-\twidth: calc(100% - 25px);\n }\n \n .more-scraped-examples-inner {\n@@ -2169,13 +2181,8 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \tcursor: pointer;\n }\n \n-.toggle-line:hover .toggle-line-inner {\n-\tbackground: #aaa;\n-}\n-\n .toggle-line-inner {\n \tmin-width: 2px;\n-\tbackground: #ddd;\n \theight: 100%;\n }\n "}, {"sha": "b1bf06c1865c7eacb21de75947fcfbfd77d8015a", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -611,6 +611,18 @@ input:checked + .slider {\n \tbackground-color: #ffb454 !important;\n }\n \n+\n+.scraped-example-list .scrape-help {\n+\tborder-color: #aaa;\n+\tcolor: #eee;\n+}\n+.scraped-example-list .scrape-help:hover {\n+\tborder-color: white;\n+\tcolor: white;\n+}\n+.more-examples-toggle summary, .more-examples-toggle .hide-more {\n+\tcolor: #999;\n+}\n .scraped-example .example-wrap .rust span.highlight {\n \tbackground: rgb(91, 59, 1);\n }\n@@ -624,8 +636,8 @@ input:checked + .slider {\n \tbackground: linear-gradient(to top, rgba(15, 20, 25, 1), rgba(15, 20, 25, 0));\n }\n .toggle-line-inner {\n-\tbackground: #616161;\n+\tbackground: #999;\n }\n .toggle-line:hover .toggle-line-inner {\n-\tbackground: #898989;\n+\tbackground: #c5c5c5;\n }"}, {"sha": "236304ccc9f1be49f0809f9487c09edcdd50962b", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -478,6 +478,17 @@ div.files > .selected {\n \tborder-bottom-color: #ddd;\n }\n \n+.scraped-example-list .scrape-help {\n+\tborder-color: #aaa;\n+\tcolor: #eee;\n+}\n+.scraped-example-list .scrape-help:hover {\n+\tborder-color: white;\n+\tcolor: white;\n+}\n+.more-examples-toggle summary, .more-examples-toggle .hide-more {\n+\tcolor: #999;\n+}\n .scraped-example .example-wrap .rust span.highlight {\n \tbackground: rgb(91, 59, 1);\n }\n@@ -491,8 +502,8 @@ div.files > .selected {\n \tbackground: linear-gradient(to top, rgba(53, 53, 53, 1), rgba(53, 53, 53, 0));\n }\n .toggle-line-inner {\n-\tbackground: #616161;\n+\tbackground: #999;\n }\n .toggle-line:hover .toggle-line-inner {\n-\tbackground: #898989;\n+\tbackground: #c5c5c5;\n }"}, {"sha": "c923902aba2d312de59830a51b201ccd9770d8fd", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -462,3 +462,33 @@ div.files > .selected {\n .setting-line > .title {\n \tborder-bottom-color: #D5D5D5;\n }\n+\n+.scraped-example-list .scrape-help {\n+\tborder-color: #555;\n+\tcolor: #333;\n+}\n+.scraped-example-list .scrape-help:hover {\n+\tborder-color: black;\n+\tcolor: black;\n+}\n+.more-examples-toggle summary, .more-examples-toggle .hide-more {\n+\tcolor: #999;\n+}\n+.scraped-example .example-wrap .rust span.highlight {\n+\tbackground: #fcffd6;\n+}\n+.scraped-example .example-wrap .rust span.highlight.focus {\n+\tbackground: #f6fdb0;\n+}\n+.scraped-example:not(.expanded) .code-wrapper:before {\n+\tbackground: linear-gradient(to bottom, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n+}\n+.scraped-example:not(.expanded) .code-wrapper:after {\n+\tbackground: linear-gradient(to top, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n+}\n+.toggle-line-inner {\n+\tbackground: #ccc;\n+}\n+.toggle-line:hover .toggle-line-inner {\n+\tbackground: #999;\n+}"}, {"sha": "a28fb46172990d79ce08c4a73550d24b08292c76", "filename": "src/librustdoc/html/static/js/scrape-examples.js", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -1,14 +1,28 @@\n /* global addClass, hasClass, removeClass, onEach */\n \n (function () {\n-    // Scroll code block to put the given code location in the middle of the viewer\n+    // Number of lines shown when code viewer is not expanded\n+    const MAX_LINES = 10;\n+\n+    // Scroll code block to the given code location\n     function scrollToLoc(elt, loc) {\n-        var wrapper = elt.querySelector(\".code-wrapper\");\n-        var halfHeight = wrapper.offsetHeight / 2;\n         var lines = elt.querySelector('.line-numbers');\n-        var offsetMid = (lines.children[loc[0]].offsetTop\n-                         + lines.children[loc[1]].offsetTop) / 2;\n-        var scrollOffset = offsetMid - halfHeight;\n+        var scrollOffset;\n+\n+        // If the block is greater than the size of the viewer,\n+        // then scroll to the top of the block. Otherwise scroll\n+        // to the middle of the block.\n+        if (loc[1] - loc[0] > MAX_LINES) {\n+            var line = Math.max(0, loc[0] - 1);\n+            scrollOffset = lines.children[line].offsetTop;\n+        } else {\n+            var wrapper = elt.querySelector(\".code-wrapper\");\n+            var halfHeight = wrapper.offsetHeight / 2;\n+            var offsetMid = (lines.children[loc[0]].offsetTop\n+                             + lines.children[loc[1]].offsetTop) / 2;\n+            scrollOffset = offsetMid - halfHeight;\n+        }\n+\n         lines.scrollTo(0, scrollOffset);\n         elt.querySelector(\".rust\").scrollTo(0, scrollOffset);\n     }\n@@ -70,8 +84,10 @@\n     onEach(document.querySelectorAll('.more-examples-toggle'), function(toggle) {\n         // Allow users to click the left border of the <details> section to close it,\n         // since the section can be large and finding the [+] button is annoying.\n-        toggle.querySelector('.toggle-line').addEventListener('click', function() {\n-            toggle.open = false;\n+        toggle.querySelectorAll('.toggle-line, .hide-more').forEach(button => {\n+            button.addEventListener('click', function() {\n+                toggle.open = false;\n+            });\n         });\n \n         var moreExamples = toggle.querySelectorAll('.scraped-example');"}, {"sha": "035b2e18b00ebeaf1839e4ce3b4e85a9158e4e62", "filename": "src/librustdoc/html/static/scrape-examples-help.md", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fscrape-examples-help.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fscrape-examples-help.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fscrape-examples-help.md?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -0,0 +1,34 @@\n+Rustdoc will automatically scrape examples of documented items from the `examples/` directory of a project. These examples will be included within the generated documentation for that item. For example, if your library contains a public function:\n+\n+```rust\n+// src/lib.rs\n+pub fn a_func() {}\n+```\n+\n+And you have an example calling this function:\n+\n+```rust\n+// examples/ex.rs\n+fn main() {\n+  a_crate::a_func();\n+}\n+```\n+\n+Then this code snippet will be included in the documentation for `a_func`.\n+\n+## How to read scraped examples\n+\n+Scraped examples are shown as blocks of code from a given file. The relevant item will be highlighted. If the file is larger than a couple lines, only a small window will be shown which you can expand by clicking &varr; in the top-right. If a file contains multiple instances of an item, you can use the &pr; and &sc; buttons to toggle through each instance.\n+\n+If there is more than one file that contains examples, then you should click \"More examples\" to see these examples.\n+\n+\n+## How Rustdoc scrapes examples\n+\n+When you run `cargo doc`, Rustdoc will analyze all the crates that match Cargo's `--examples` filter for instances of items that occur in the crates being documented. Then Rustdoc will include the source code of these instances in the generated documentation.\n+\n+Rustdoc has a few techniques to ensure this doesn't overwhelm documentation readers, and that it doesn't blow up the page size:\n+\n+1. For a given item, a maximum of 5 examples are included in the page. The remaining examples are just links to source code.\n+2. Only one example is shown by default, and the remaining examples are hidden behind a toggle.\n+3. For a given file that contains examples, only the item containing the examples will be included in the generated documentation."}, {"sha": "1837e4a3b650ab53efc57d674e75344d9f56441d", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -39,6 +39,8 @@ crate static STORAGE_JS: &str = include_str!(\"static/js/storage.js\");\n /// --scrape-examples flag that inserts automatically-found examples of usages of items.\n crate static SCRAPE_EXAMPLES_JS: &str = include_str!(\"static/js/scrape-examples.js\");\n \n+crate static SCRAPE_EXAMPLES_HELP_MD: &str = include_str!(\"static/scrape-examples-help.md\");\n+\n /// The file contents of `brush.svg`, the icon used for the theme-switch button.\n crate static BRUSH_SVG: &[u8] = include_bytes!(\"static/images/brush.svg\");\n "}, {"sha": "0da490f3cd6c8a3b14b9662f09eacff2978c2395", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 71, "deletions": 33, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -71,33 +71,36 @@ crate struct SyntaxRange {\n }\n \n impl SyntaxRange {\n-    fn new(span: rustc_span::Span, file: &SourceFile) -> Self {\n+    fn new(span: rustc_span::Span, file: &SourceFile) -> Option<Self> {\n         let get_pos = |bytepos: BytePos| file.original_relative_byte_pos(bytepos).0;\n-        let get_line = |bytepos: BytePos| file.lookup_line(bytepos).unwrap();\n+        let get_line = |bytepos: BytePos| file.lookup_line(bytepos);\n \n-        SyntaxRange {\n+        Some(SyntaxRange {\n             byte_span: (get_pos(span.lo()), get_pos(span.hi())),\n-            line_span: (get_line(span.lo()), get_line(span.hi())),\n-        }\n+            line_span: (get_line(span.lo())?, get_line(span.hi())?),\n+        })\n     }\n }\n \n #[derive(Encodable, Decodable, Debug, Clone)]\n crate struct CallLocation {\n     crate call_expr: SyntaxRange,\n+    crate call_ident: SyntaxRange,\n     crate enclosing_item: SyntaxRange,\n }\n \n impl CallLocation {\n     fn new(\n         expr_span: rustc_span::Span,\n+        ident_span: rustc_span::Span,\n         enclosing_item_span: rustc_span::Span,\n         source_file: &SourceFile,\n-    ) -> Self {\n-        CallLocation {\n-            call_expr: SyntaxRange::new(expr_span, source_file),\n-            enclosing_item: SyntaxRange::new(enclosing_item_span, source_file),\n-        }\n+    ) -> Option<Self> {\n+        Some(CallLocation {\n+            call_expr: SyntaxRange::new(expr_span, source_file)?,\n+            call_ident: SyntaxRange::new(ident_span, source_file)?,\n+            enclosing_item: SyntaxRange::new(enclosing_item_span, source_file)?,\n+        })\n     }\n }\n \n@@ -146,24 +149,26 @@ where\n         }\n \n         // Get type of function if expression is a function call\n-        let (ty, span) = match ex.kind {\n+        let (ty, call_span, ident_span) = match ex.kind {\n             hir::ExprKind::Call(f, _) => {\n                 let types = tcx.typeck(ex.hir_id.owner);\n \n                 if let Some(ty) = types.node_type_opt(f.hir_id) {\n-                    (ty, ex.span)\n+                    (ty, ex.span, f.span)\n                 } else {\n                     trace!(\"node_type_opt({}) = None\", f.hir_id);\n                     return;\n                 }\n             }\n-            hir::ExprKind::MethodCall(_, _, span) => {\n+            hir::ExprKind::MethodCall(path, _, call_span) => {\n                 let types = tcx.typeck(ex.hir_id.owner);\n                 let Some(def_id) = types.type_dependent_def_id(ex.hir_id) else {\n                     trace!(\"type_dependent_def_id({}) = None\", ex.hir_id);\n                     return;\n                 };\n-                (tcx.type_of(def_id), span)\n+\n+                let ident_span = path.ident.span;\n+                (tcx.type_of(def_id), call_span, ident_span)\n             }\n             _ => {\n                 return;\n@@ -172,8 +177,8 @@ where\n \n         // If this span comes from a macro expansion, then the source code may not actually show\n         // a use of the given item, so it would be a poor example. Hence, we skip all uses in macros.\n-        if span.from_expansion() {\n-            trace!(\"Rejecting expr from macro: {:?}\", span);\n+        if call_span.from_expansion() {\n+            trace!(\"Rejecting expr from macro: {call_span:?}\");\n             return;\n         }\n \n@@ -183,49 +188,82 @@ where\n             .hir()\n             .span_with_body(tcx.hir().local_def_id_to_hir_id(tcx.hir().get_parent_item(ex.hir_id)));\n         if enclosing_item_span.from_expansion() {\n-            trace!(\"Rejecting expr ({:?}) from macro item: {:?}\", span, enclosing_item_span);\n+            trace!(\"Rejecting expr ({call_span:?}) from macro item: {enclosing_item_span:?}\");\n+            return;\n+        }\n+\n+        // If the enclosing item doesn't actually enclose the call, this means we probably have a weird\n+        // macro issue even though the spans aren't tagged as being from an expansion.\n+        if !enclosing_item_span.contains(call_span) {\n+            warn!(\n+                \"Attempted to scrape call at [{call_span:?}] whose enclosing item [{enclosing_item_span:?}] doesn't contain the span of the call.\"\n+            );\n             return;\n         }\n \n-        assert!(\n-            enclosing_item_span.contains(span),\n-            \"Attempted to scrape call at [{:?}] whose enclosing item [{:?}] doesn't contain the span of the call.\",\n-            span,\n-            enclosing_item_span\n-        );\n+        // Similarly for the call w/ the function ident.\n+        if !call_span.contains(ident_span) {\n+            warn!(\n+                \"Attempted to scrape call at [{call_span:?}] whose identifier [{ident_span:?}] was not contained in the span of the call.\"\n+            );\n+            return;\n+        }\n \n         // Save call site if the function resolves to a concrete definition\n         if let ty::FnDef(def_id, _) = ty.kind() {\n             if self.target_crates.iter().all(|krate| *krate != def_id.krate) {\n-                trace!(\"Rejecting expr from crate not being documented: {:?}\", span);\n+                trace!(\"Rejecting expr from crate not being documented: {call_span:?}\");\n                 return;\n             }\n \n             let source_map = tcx.sess.source_map();\n-            let file = source_map.lookup_char_pos(span.lo()).file;\n+            let file = source_map.lookup_char_pos(call_span.lo()).file;\n             let file_path = match file.name.clone() {\n                 FileName::Real(real_filename) => real_filename.into_local_path(),\n                 _ => None,\n             };\n \n             if let Some(file_path) = file_path {\n-                let abs_path = fs::canonicalize(file_path.clone()).unwrap();\n+                let abs_path = match fs::canonicalize(file_path.clone()) {\n+                    Ok(abs_path) => abs_path,\n+                    Err(_) => {\n+                        trace!(\"Could not canonicalize file path: {}\", file_path.display());\n+                        return;\n+                    }\n+                };\n+\n                 let cx = &self.cx;\n+                let clean_span = crate::clean::types::Span::new(call_span);\n+                let url = match cx.href_from_span(clean_span, false) {\n+                    Some(url) => url,\n+                    None => {\n+                        trace!(\n+                            \"Rejecting expr ({call_span:?}) whose clean span ({clean_span:?}) cannot be turned into a link\"\n+                        );\n+                        return;\n+                    }\n+                };\n+\n                 let mk_call_data = || {\n-                    let clean_span = crate::clean::types::Span::new(span);\n-                    let url = cx.href_from_span(clean_span, false).unwrap();\n                     let display_name = file_path.display().to_string();\n-                    let edition = span.edition();\n+                    let edition = call_span.edition();\n                     CallData { locations: Vec::new(), url, display_name, edition }\n                 };\n \n                 let fn_key = tcx.def_path_hash(*def_id);\n                 let fn_entries = self.calls.entry(fn_key).or_default();\n \n-                trace!(\"Including expr: {:?}\", span);\n+                trace!(\"Including expr: {:?}\", call_span);\n                 let enclosing_item_span =\n                     source_map.span_extend_to_prev_char(enclosing_item_span, '\\n', false);\n-                let location = CallLocation::new(span, enclosing_item_span, &file);\n+                let location =\n+                    match CallLocation::new(call_span, ident_span, enclosing_item_span, &file) {\n+                        Some(location) => location,\n+                        None => {\n+                            trace!(\"Could not get serializable call location for {call_span:?}\");\n+                            return;\n+                        }\n+                    };\n                 fn_entries.entry(abs_path).or_insert_with(mk_call_data).locations.push(location);\n             }\n         }\n@@ -259,8 +297,8 @@ crate fn run(\n             .map(|(crate_num, _)| **crate_num)\n             .collect::<Vec<_>>();\n \n-        debug!(\"All crates in TyCtxt: {:?}\", all_crates);\n-        debug!(\"Scrape examples target_crates: {:?}\", target_crates);\n+        debug!(\"All crates in TyCtxt: {all_crates:?}\");\n+        debug!(\"Scrape examples target_crates: {target_crates:?}\");\n \n         // Run call-finder on all items\n         let mut calls = FxHashMap::default();"}, {"sha": "c53c987a7cbf0e428e4ce60fe5523be892e4094a", "filename": "src/test/run-make/rustdoc-scrape-examples-ordering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fsrc%2Flib.rs?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -1,7 +1,6 @@\n // @has foobar/fn.ok.html '//*[@class=\"docblock scraped-example-list\"]' 'ex2'\n // @has foobar/fn.ok.html '//*[@class=\"more-scraped-examples\"]' 'ex1'\n-// @has foobar/fn.ok.html '//*[@class=\"highlight focus\"]' '1'\n-// @has foobar/fn.ok.html '//*[@class=\"highlight\"]' '2'\n-// @has foobar/fn.ok.html '//*[@class=\"highlight focus\"]' '0'\n+// @has foobar/fn.ok.html '//*[@class=\"highlight focus\"]' 'ok'\n+// @has foobar/fn.ok.html '//*[@class=\"highlight\"]' 'ok'\n \n pub fn ok(_x: i32) {}"}, {"sha": "41a20b899599a7668d622404cdf3c8487bc93e96", "filename": "src/test/ui/traits/issue-95898.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Ftest%2Fui%2Ftraits%2Fissue-95898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Ftest%2Fui%2Ftraits%2Fissue-95898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-95898.rs?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -0,0 +1,9 @@\n+// Test for #95898: The trait suggestion had an extra `:` after the trait.\n+// edition:2021\n+\n+fn foo<T:>(t: T) {\n+    t.clone();\n+    //~^ ERROR no method named `clone` found for type parameter `T` in the current scope\n+}\n+\n+fn main() {}"}, {"sha": "d7d4790539604cfe93ab894a0ac2d305d5ec0e64", "filename": "src/test/ui/traits/issue-95898.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Ftest%2Fui%2Ftraits%2Fissue-95898.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d13f6afeba4935499abe0c9a07426c94492c94e/src%2Ftest%2Fui%2Ftraits%2Fissue-95898.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-95898.stderr?ref=0d13f6afeba4935499abe0c9a07426c94492c94e", "patch": "@@ -0,0 +1,15 @@\n+error[E0599]: no method named `clone` found for type parameter `T` in the current scope\n+  --> $DIR/issue-95898.rs:5:7\n+   |\n+LL |     t.clone();\n+   |       ^^^^^ method not found in `T`\n+   |\n+   = help: items from traits can only be used if the type parameter is bounded by the trait\n+help: the following trait defines an item `clone`, perhaps you need to restrict type parameter `T` with it:\n+   |\n+LL | fn foo<T: Clone>(t: T) {\n+   |        ~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}