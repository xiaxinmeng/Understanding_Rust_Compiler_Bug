{"sha": "ac85bf356f3674ed0e0e79668b384141d38e0efe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjODViZjM1NmYzNjc0ZWQwZTBlNzk2NjhiMzg0MTQxZDM4ZTBlZmU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-13T16:09:09Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-13T16:09:09Z"}, "message": "add Option methods for in-place mutation", "tree": {"sha": "0d14d2b33a071e32cb34b3222b362216a1937f94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d14d2b33a071e32cb34b3222b362216a1937f94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac85bf356f3674ed0e0e79668b384141d38e0efe", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac85bf356f3674ed0e0e79668b384141d38e0efe", "html_url": "https://github.com/rust-lang/rust/commit/ac85bf356f3674ed0e0e79668b384141d38e0efe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac85bf356f3674ed0e0e79668b384141d38e0efe/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c6da7761bf74c54c1d56ba85f4ef55004abcb0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6da7761bf74c54c1d56ba85f4ef55004abcb0a", "html_url": "https://github.com/rust-lang/rust/commit/3c6da7761bf74c54c1d56ba85f4ef55004abcb0a"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "40c6315bfe9a29d7fa6f6e280e6a690534e57d1f", "filename": "src/libcore/option.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ac85bf356f3674ed0e0e79668b384141d38e0efe/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac85bf356f3674ed0e0e79668b384141d38e0efe/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=ac85bf356f3674ed0e0e79668b384141d38e0efe", "patch": "@@ -284,6 +284,22 @@ impl<T> Option<T> {\n         match self { None => def, Some(v) => f(v) }\n     }\n \n+    /// Apply a function to the contained value or do nothing\n+    fn mutate(&mut self, f: fn(T) -> T) {\n+        if self.is_some() {\n+            *self = Some(f(self.swap_unwrap()));\n+        }\n+    }\n+\n+    /// Apply a function to the contained value or set it to a default\n+    fn mutate_default(&mut self, def: T, f: fn(T) -> T) {\n+        if self.is_some() {\n+            *self = Some(f(self.swap_unwrap()));\n+        } else {\n+            *self = Some(def);\n+        }\n+    }\n+\n     /// Performs an operation on the contained value by reference\n     #[inline(always)]\n     pure fn iter(&self, f: fn(x: &T)) { iter(self, f) }"}]}