{"sha": "d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "node_id": "C_kwDOAAsO6NoAKGQ4MjJiOTdhMjdlNTBmNWEwOTFkMjkxOGY2ZmYwZmZkMmQyODI3ZjU", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-02-07T00:48:12Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-02-17T00:01:52Z"}, "message": "change usages of type_of to bound_type_of", "tree": {"sha": "dd0aae1c09476ba8d74e83999cadc77266ae2c20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd0aae1c09476ba8d74e83999cadc77266ae2c20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "html_url": "https://github.com/rust-lang/rust/commit/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a7cc6c32f1a690f86827e4724bcda85e506ef35", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7cc6c32f1a690f86827e4724bcda85e506ef35", "html_url": "https://github.com/rust-lang/rust/commit/9a7cc6c32f1a690f86827e4724bcda85e506ef35"}], "stats": {"total": 647, "additions": 385, "deletions": 262}, "files": [{"sha": "4246f6f2133c80207143f2a9a17ed655f2ce71e9", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -2592,7 +2592,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             if is_closure {\n                 None\n             } else {\n-                let ty = self.infcx.tcx.type_of(self.mir_def_id());\n+                let ty = self.infcx.tcx.bound_type_of(self.mir_def_id()).subst_identity();\n                 match ty.kind() {\n                     ty::FnDef(_, _) | ty::FnPtr(_) => self.annotate_fn_sig(\n                         self.mir_def_id(),"}, {"sha": "d566117b38b4d8def94e41caafab6ed0b4c41eca", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -1185,7 +1185,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     let parent_self_ty =\n                         matches!(tcx.def_kind(parent_did), rustc_hir::def::DefKind::Impl { .. })\n                             .then_some(parent_did)\n-                            .and_then(|did| match tcx.type_of(did).kind() {\n+                            .and_then(|did| match tcx.bound_type_of(did).subst_identity().kind() {\n                                 ty::Adt(def, ..) => Some(def.did()),\n                                 _ => None,\n                             });"}, {"sha": "733522d99553c80f6c4305d2675322156affb21e", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -575,7 +575,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n         let mut output_ty = self.regioncx.universal_regions().unnormalized_output_ty;\n         if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *output_ty.kind() {\n-            output_ty = self.infcx.tcx.type_of(def_id)\n+            output_ty = self.infcx.tcx.bound_type_of(def_id).subst_identity()\n         };\n \n         debug!(\"report_fnmut_error: output_ty={:?}\", output_ty);\n@@ -896,7 +896,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             debug!(?fn_did, ?substs);\n \n             // Only suggest this on function calls, not closures\n-            let ty = tcx.type_of(fn_did);\n+            let ty = tcx.bound_type_of(fn_did).subst_identity();\n             debug!(\"ty: {:?}, ty.kind: {:?}\", ty, ty.kind());\n             if let ty::Closure(_, _) = ty.kind() {\n                 return;"}, {"sha": "ff76d87b602355833dd070cfe4338bd4a6895a13", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -850,7 +850,9 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         };\n \n         let found = tcx\n-            .any_free_region_meets(&tcx.type_of(region_parent), |r| *r == ty::ReEarlyBound(region));\n+            .any_free_region_meets(&tcx.bound_type_of(region_parent).subst_identity(), |r| {\n+                *r == ty::ReEarlyBound(region)\n+            });\n \n         Some(RegionName {\n             name: self.synthesize_region_name(),"}, {"sha": "d65b663c00160f61f1a177bd4650b23bcd16f35f", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -402,7 +402,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                     );\n                 }\n             } else if let Some(static_def_id) = constant.check_static_ptr(tcx) {\n-                let unnormalized_ty = tcx.type_of(static_def_id);\n+                let unnormalized_ty = tcx.bound_type_of(static_def_id).subst_identity();\n                 let normalized_ty = self.cx.normalize(unnormalized_ty, locations);\n                 let literal_ty = constant.literal.ty().builtin_deref(true).unwrap().ty;\n "}, {"sha": "1daa337f31966dd2ecce462a6faefc40ba380ca9", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -529,7 +529,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         match tcx.hir().body_owner_kind(self.mir_def.did) {\n             BodyOwnerKind::Closure | BodyOwnerKind::Fn => {\n                 let defining_ty = if self.mir_def.did.to_def_id() == typeck_root_def_id {\n-                    tcx.type_of(typeck_root_def_id)\n+                    tcx.bound_type_of(typeck_root_def_id).subst_identity()\n                 } else {\n                     let tables = tcx.typeck(self.mir_def.did);\n                     tables.node_type(self.mir_hir_id)\n@@ -675,7 +675,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 // For a constant body, there are no inputs, and one\n                 // \"output\" (the type of the constant).\n                 assert_eq!(self.mir_def.did.to_def_id(), def_id);\n-                let ty = tcx.type_of(self.mir_def.def_id_for_type_of());\n+                let ty = tcx.bound_type_of(self.mir_def.def_id_for_type_of()).subst_identity();\n                 let ty = indices.fold_to_region_vids(tcx, ty);\n                 ty::Binder::dummy(tcx.intern_type_list(&[ty]))\n             }"}, {"sha": "96fbf8be7949c36b8e1f558438fac856d357a4ba", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -508,7 +508,7 @@ impl<'ll, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                     let impl_self_ty = cx.tcx.subst_and_normalize_erasing_regions(\n                         instance.substs,\n                         ty::ParamEnv::reveal_all(),\n-                        cx.tcx.type_of(impl_def_id),\n+                        cx.tcx.bound_type_of(impl_def_id).skip_binder(),\n                     );\n \n                     // Only \"class\" methods are generally understood by LLVM,"}, {"sha": "85725e617990951b677dcd1bcb807119b44a297f", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -690,7 +690,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 assert!(self.tcx.is_static(def_id));\n                 assert!(!self.tcx.is_thread_local_static(def_id));\n                 // Use size and align of the type.\n-                let ty = self.tcx.type_of(def_id);\n+                let ty = self.tcx.bound_type_of(def_id).subst_identity();\n                 let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n                 assert!(layout.is_sized());\n                 (layout.size, layout.align.abi, AllocKind::LiveData)"}, {"sha": "05eba88f62318ea71ea8369d8fbbd75e2e988d6c", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -68,7 +68,7 @@ impl<'mir, 'tcx> ConstCx<'mir, 'tcx> {\n     pub fn fn_sig(&self) -> PolyFnSig<'tcx> {\n         let did = self.def_id().to_def_id();\n         if self.tcx.is_closure(did) {\n-            let ty = self.tcx.type_of(did);\n+            let ty = self.tcx.bound_type_of(did).subst_identity();\n             let ty::Closure(_, substs) = ty.kind() else { bug!(\"type_of closure not ty::Closure\") };\n             substs.as_closure().sig()\n         } else {"}, {"sha": "c385516c7787c48bf1f5fae1ee37ecb6b45404fb", "filename": "compiler/rustc_hir_analysis/src/astconv/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -77,7 +77,7 @@ fn generic_arg_mismatch_err(\n             Res::Def(DefKind::TyParam, src_def_id) => {\n                 if let Some(param_local_id) = param.def_id.as_local() {\n                     let param_name = tcx.hir().ty_param_name(param_local_id);\n-                    let param_type = tcx.type_of(param.def_id);\n+                    let param_type = tcx.bound_type_of(param.def_id).subst_identity();\n                     if param_type.is_suggestable(tcx, false) {\n                         err.span_suggestion(\n                             tcx.def_span(src_def_id),\n@@ -97,7 +97,7 @@ fn generic_arg_mismatch_err(\n         (\n             GenericArg::Type(hir::Ty { kind: hir::TyKind::Array(_, len), .. }),\n             GenericParamDefKind::Const { .. },\n-        ) if tcx.type_of(param.def_id) == tcx.types.usize => {\n+        ) if tcx.bound_type_of(param.def_id).skip_binder() == tcx.types.usize => {\n             let snippet = sess.source_map().span_to_snippet(tcx.hir().span(len.hir_id()));\n             if let Ok(snippet) = snippet {\n                 err.span_suggestion("}, {"sha": "878bc746d5a430d6012d546c84255e2dae3321f9", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -30,9 +30,9 @@ use rustc_hir::{GenericArg, GenericArgs, OpaqueTyOrigin};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, SubstsRef};\n+use rustc_middle::ty::DynKind;\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, Const, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeVisitable};\n-use rustc_middle::ty::{DynKind, EarlyBinder};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECTS};\n use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -450,7 +450,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         .into()\n                     }\n                     (&GenericParamDefKind::Const { .. }, hir::GenericArg::Infer(inf)) => {\n-                        let ty = tcx.at(self.span).type_of(param.def_id);\n+                        let ty = tcx.at(self.span).bound_type_of(param.def_id).subst_identity();\n                         if self.astconv.allow_ty_infer() {\n                             self.astconv.ct_infer(ty, Some(param), inf.span).into()\n                         } else {\n@@ -503,7 +503,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         }\n                     }\n                     GenericParamDefKind::Const { has_default } => {\n-                        let ty = tcx.at(self.span).type_of(param.def_id);\n+                        let ty = tcx.at(self.span).bound_type_of(param.def_id).subst_identity();\n                         if ty.references_error() {\n                             return tcx.const_error(ty).into();\n                         }\n@@ -2688,7 +2688,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // `Self` in impl (we know the concrete type).\n                 assert_eq!(opt_self_ty, None);\n                 // Try to evaluate any array length constants.\n-                let ty = tcx.at(span).type_of(def_id);\n+                let ty = tcx.at(span).bound_type_of(def_id).subst_identity();\n                 let span_of_impl = tcx.span_of_impl(def_id);\n                 self.prohibit_generics(path.segments.iter(), |err| {\n                     let def_id = match *ty.kind() {\n@@ -2922,7 +2922,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     None,\n                     ty::BoundConstness::NotConst,\n                 );\n-                EarlyBinder(tcx.at(span).type_of(def_id)).subst(tcx, substs)\n+                tcx.at(span).bound_type_of(def_id).subst(tcx, substs)\n             }\n             hir::TyKind::Array(ty, length) => {\n                 let length = match length {\n@@ -2935,7 +2935,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 tcx.mk_array_with_const_len(self.ast_ty_to_ty(ty), length)\n             }\n             hir::TyKind::Typeof(e) => {\n-                let ty_erased = tcx.type_of(e.def_id);\n+                let ty_erased = tcx.bound_type_of(e.def_id).subst_identity();\n                 let ty = tcx.fold_regions(ty_erased, |r, _| {\n                     if r.is_erased() { tcx.lifetimes.re_static } else { r }\n                 });"}, {"sha": "2e984fa009fc66cc7c10af71e1b398137133a73b", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -93,7 +93,7 @@ fn check_union(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n \n /// Check that the fields of the `union` do not need dropping.\n fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> bool {\n-    let item_type = tcx.type_of(item_def_id);\n+    let item_type = tcx.bound_type_of(item_def_id).subst_identity();\n     if let ty::Adt(def, substs) = item_type.kind() {\n         assert!(def.is_union());\n \n@@ -170,7 +170,7 @@ fn check_static_inhabited(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     // would be enough to check this for `extern` statics, as statics with an initializer will\n     // have UB during initialization if they are uninhabited, but there also seems to be no good\n     // reason to allow any statics to be uninhabited.\n-    let ty = tcx.type_of(def_id);\n+    let ty = tcx.bound_type_of(def_id).subst_identity();\n     let span = tcx.def_span(def_id);\n     let layout = match tcx.layout_of(ParamEnv::reveal_all().and(ty)) {\n         Ok(l) => l,\n@@ -227,7 +227,7 @@ fn check_opaque(tcx: TyCtxt<'_>, id: hir::ItemId) {\n     if !tcx.features().impl_trait_projections {\n         check_opaque_for_inheriting_lifetimes(tcx, item.owner_id.def_id, span);\n     }\n-    if tcx.type_of(item.owner_id.def_id).references_error() {\n+    if tcx.bound_type_of(item.owner_id.def_id).subst_identity().references_error() {\n         return;\n     }\n     if check_opaque_for_cycles(tcx, item.owner_id.def_id, substs, span, &origin).is_err() {\n@@ -492,7 +492,7 @@ fn is_enum_of_nonnullable_ptr<'tcx>(\n \n fn check_static_linkage(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     if tcx.codegen_fn_attrs(def_id).import_linkage.is_some() {\n-        if match tcx.type_of(def_id).kind() {\n+        if match tcx.bound_type_of(def_id).subst_identity().kind() {\n             ty::RawPtr(_) => false,\n             ty::Adt(adt_def, substs) => !is_enum_of_nonnullable_ptr(tcx, *adt_def, *substs),\n             _ => true,\n@@ -578,7 +578,7 @@ fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n             }\n         }\n         DefKind::TyAlias => {\n-            let pty_ty = tcx.type_of(id.owner_id);\n+            let pty_ty = tcx.bound_type_of(id.owner_id).subst_identity();\n             let generics = tcx.generics_of(id.owner_id);\n             check_type_params_are_used(tcx, &generics, pty_ty);\n         }\n@@ -854,7 +854,7 @@ fn check_impl_items_against_trait<'tcx>(\n }\n \n pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: LocalDefId) {\n-    let t = tcx.type_of(def_id);\n+    let t = tcx.bound_type_of(def_id).subst_identity();\n     if let ty::Adt(def, substs) = t.kind()\n         && def.is_struct()\n     {\n@@ -974,7 +974,7 @@ pub(super) fn check_packed(tcx: TyCtxt<'_>, sp: Span, def: ty::AdtDef<'_>) {\n                             &if first {\n                                 format!(\n                                     \"`{}` contains a field of type `{}`\",\n-                                    tcx.type_of(def.did()),\n+                                    tcx.bound_type_of(def.did()).subst_identity(),\n                                     ident\n                                 )\n                             } else {\n@@ -996,7 +996,7 @@ pub(super) fn check_packed_inner(\n     def_id: DefId,\n     stack: &mut Vec<DefId>,\n ) -> Option<Vec<(DefId, Span)>> {\n-    if let ty::Adt(def, substs) = tcx.type_of(def_id).kind() {\n+    if let ty::Adt(def, substs) = tcx.bound_type_of(def_id).subst_identity().kind() {\n         if def.is_struct() || def.is_union() {\n             if def.repr().align.is_some() {\n                 return Some(vec![(def.did(), DUMMY_SP)]);"}, {"sha": "b0dbcb34ce16c41c07a216c267856aff7cda1eb5", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -1580,7 +1580,8 @@ fn compare_generic_param_kinds<'tcx>(\n         use GenericParamDefKind::*;\n         if match (&param_impl.kind, &param_trait.kind) {\n             (Const { .. }, Const { .. })\n-                if tcx.type_of(param_impl.def_id) != tcx.type_of(param_trait.def_id) =>\n+                if tcx.bound_type_of(param_impl.def_id)\n+                    != tcx.bound_type_of(param_trait.def_id) =>\n             {\n                 true\n             }\n@@ -1605,7 +1606,11 @@ fn compare_generic_param_kinds<'tcx>(\n \n             let make_param_message = |prefix: &str, param: &ty::GenericParamDef| match param.kind {\n                 Const { .. } => {\n-                    format!(\"{} const parameter of type `{}`\", prefix, tcx.type_of(param.def_id))\n+                    format!(\n+                        \"{} const parameter of type `{}`\",\n+                        prefix,\n+                        tcx.bound_type_of(param.def_id).subst_identity()\n+                    )\n                 }\n                 Type { .. } => format!(\"{} type parameter\", prefix),\n                 Lifetime { .. } => unreachable!(),\n@@ -1654,7 +1659,7 @@ pub(super) fn compare_impl_const_raw(\n     // Create a parameter environment that represents the implementation's\n     // method.\n     // Compute placeholder form of impl and trait const tys.\n-    let impl_ty = tcx.type_of(impl_const_item_def.to_def_id());\n+    let impl_ty = tcx.bound_type_of(impl_const_item_def.to_def_id()).subst_identity();\n     let trait_ty = tcx.bound_type_of(trait_const_item_def).subst(tcx, trait_to_impl_substs);\n     let mut cause = ObligationCause::new(\n         impl_c_span,\n@@ -1927,7 +1932,7 @@ pub(super) fn check_type_bounds<'tcx>(\n             bound_vars.push(bound_var);\n             tcx.mk_const(\n                 ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_usize(bound_vars.len() - 1)),\n-                tcx.type_of(param.def_id),\n+                tcx.bound_type_of(param.def_id).subst_identity(),\n             )\n             .into()\n         }\n@@ -1937,7 +1942,7 @@ pub(super) fn check_type_bounds<'tcx>(\n     let container_id = impl_ty.container_id(tcx);\n \n     let rebased_substs = impl_ty_substs.rebase_onto(tcx, container_id, impl_trait_ref.substs);\n-    let impl_ty_value = tcx.type_of(impl_ty.def_id);\n+    let impl_ty_value = tcx.bound_type_of(impl_ty.def_id).subst_identity();\n \n     let param_env = tcx.param_env(impl_ty.def_id);\n "}, {"sha": "876189a91c07db4298242d0343d3dbafa8491546", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -27,7 +27,7 @@ use rustc_middle::ty::{self, Predicate, Ty, TyCtxt};\n ///    cannot do `struct S<T>; impl<T:Clone> Drop for S<T> { ... }`).\n ///\n pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), ErrorGuaranteed> {\n-    let dtor_self_type = tcx.type_of(drop_impl_did);\n+    let dtor_self_type = tcx.bound_type_of(drop_impl_did).subst_identity();\n     let dtor_predicates = tcx.predicates_of(drop_impl_did);\n     match dtor_self_type.kind() {\n         ty::Adt(adt_def, self_to_impl_substs) => {"}, {"sha": "9811623f7a7c03f8a7ebebd464e4443308d81f18", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -450,7 +450,7 @@ fn suggestion_signature(assoc: &ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n         }\n         ty::AssocKind::Type => format!(\"type {} = Type;\", assoc.name),\n         ty::AssocKind::Const => {\n-            let ty = tcx.type_of(assoc.def_id);\n+            let ty = tcx.bound_type_of(assoc.def_id).subst_identity();\n             let val = ty_kind_suggestion(ty).unwrap_or(\"value\");\n             format!(\"const {}: {} = {};\", assoc.name, ty, val)\n         }"}, {"sha": "8f721383aec280d102307bec5dbb905c45f20286", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -874,7 +874,7 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n \n         // Const parameters are well formed if their type is structural match.\n         hir::GenericParamKind::Const { ty: hir_ty, default: _ } => {\n-            let ty = tcx.type_of(param.def_id);\n+            let ty = tcx.bound_type_of(param.def_id).subst_identity();\n \n             if tcx.features().adt_const_params {\n                 if let Some(non_structural_match_ty) =\n@@ -1011,12 +1011,12 @@ fn check_associated_item(\n \n         let self_ty = match item.container {\n             ty::TraitContainer => tcx.types.self_param,\n-            ty::ImplContainer => tcx.type_of(item.container_id(tcx)),\n+            ty::ImplContainer => tcx.bound_type_of(item.container_id(tcx)).subst_identity(),\n         };\n \n         match item.kind {\n             ty::AssocKind::Const => {\n-                let ty = tcx.type_of(item.def_id);\n+                let ty = tcx.bound_type_of(item.def_id).subst_identity();\n                 let ty = wfcx.normalize(span, Some(WellFormedLoc::Ty(item_id)), ty);\n                 wfcx.register_wf_obligation(span, loc, ty.into());\n             }\n@@ -1037,7 +1037,7 @@ fn check_associated_item(\n                     check_associated_type_bounds(wfcx, item, span)\n                 }\n                 if item.defaultness(tcx).has_value() {\n-                    let ty = tcx.type_of(item.def_id);\n+                    let ty = tcx.bound_type_of(item.def_id).subst_identity();\n                     let ty = wfcx.normalize(span, Some(WellFormedLoc::Ty(item_id)), ty);\n                     wfcx.register_wf_obligation(span, loc, ty.into());\n                 }\n@@ -1070,7 +1070,11 @@ fn check_type_defn<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item<'tcx>, all_sized: b\n                 let field_id = field.did.expect_local();\n                 let hir::FieldDef { ty: hir_ty, .. } =\n                     tcx.hir().get_by_def_id(field_id).expect_field();\n-                let ty = wfcx.normalize(hir_ty.span, None, tcx.type_of(field.did));\n+                let ty = wfcx.normalize(\n+                    hir_ty.span,\n+                    None,\n+                    tcx.bound_type_of(field.did).subst_identity(),\n+                );\n                 wfcx.register_wf_obligation(\n                     hir_ty.span,\n                     Some(WellFormedLoc::Ty(field_id)),\n@@ -1082,7 +1086,7 @@ fn check_type_defn<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item<'tcx>, all_sized: b\n             // intermediate types must be sized.\n             let needs_drop_copy = || {\n                 packed && {\n-                    let ty = tcx.type_of(variant.fields.last().unwrap().did);\n+                    let ty = tcx.bound_type_of(variant.fields.last().unwrap().did).subst_identity();\n                     let ty = tcx.erase_regions(ty);\n                     if ty.needs_infer() {\n                         tcx.sess\n@@ -1104,7 +1108,11 @@ fn check_type_defn<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item<'tcx>, all_sized: b\n                 let field_id = field.did.expect_local();\n                 let hir::FieldDef { ty: hir_ty, .. } =\n                     tcx.hir().get_by_def_id(field_id).expect_field();\n-                let ty = wfcx.normalize(hir_ty.span, None, tcx.type_of(field.did));\n+                let ty = wfcx.normalize(\n+                    hir_ty.span,\n+                    None,\n+                    tcx.bound_type_of(field.did).subst_identity(),\n+                );\n                 wfcx.register_bound(\n                     traits::ObligationCause::new(\n                         hir_ty.span,\n@@ -1215,7 +1223,7 @@ fn check_item_type(tcx: TyCtxt<'_>, item_id: LocalDefId, ty_span: Span, allow_fo\n     debug!(\"check_item_type: {:?}\", item_id);\n \n     enter_wf_checking_ctxt(tcx, ty_span, item_id, |wfcx| {\n-        let ty = tcx.type_of(item_id);\n+        let ty = tcx.bound_type_of(item_id).subst_identity();\n         let item_ty = wfcx.normalize(ty_span, Some(WellFormedLoc::Ty(item_id)), ty);\n \n         let mut forbid_unsized = true;\n@@ -1300,7 +1308,7 @@ fn check_impl<'tcx>(\n                 wfcx.register_obligations(obligations);\n             }\n             None => {\n-                let self_ty = tcx.type_of(item.owner_id);\n+                let self_ty = tcx.bound_type_of(item.owner_id).subst_identity();\n                 let self_ty = wfcx.normalize(\n                     item.span,\n                     Some(WellFormedLoc::Ty(item.hir_id().expect_owner().def_id)),\n@@ -1345,7 +1353,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n         match param.kind {\n             GenericParamDefKind::Type { .. } => {\n                 if is_our_default(param) {\n-                    let ty = tcx.type_of(param.def_id);\n+                    let ty = tcx.bound_type_of(param.def_id).subst_identity();\n                     // Ignore dependent defaults -- that is, where the default of one type\n                     // parameter includes another (e.g., `<T, U = T>`). In those cases, we can't\n                     // be sure if it will error or not as user might always specify the other.\n@@ -1397,7 +1405,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             GenericParamDefKind::Type { .. } => {\n                 // If the param has a default, ...\n                 if is_our_default(param) {\n-                    let default_ty = tcx.type_of(param.def_id);\n+                    let default_ty = tcx.bound_type_of(param.def_id).subst_identity();\n                     // ... and it's not a dependent default, ...\n                     if !default_ty.needs_subst() {\n                         // ... then substitute it with the default.\n@@ -1813,7 +1821,7 @@ fn check_variances_for_type_defn<'tcx>(\n     item: &hir::Item<'tcx>,\n     hir_generics: &hir::Generics<'_>,\n ) {\n-    let ty = tcx.type_of(item.owner_id);\n+    let ty = tcx.bound_type_of(item.owner_id).subst_identity();\n     if tcx.has_error_field(ty) {\n         return;\n     }"}, {"sha": "c5a618db6d3c0ab724afb0d17ba627bd6d7fcc5b", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> Checker<'tcx> {\n \n fn visit_implementation_of_drop(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     // Destructors only work on local ADT types.\n-    match tcx.type_of(impl_did).kind() {\n+    match tcx.bound_type_of(impl_did).subst_identity().kind() {\n         ty::Adt(def, _) if def.did().is_local() => return,\n         ty::Error(_) => return,\n         _ => {}\n@@ -64,7 +64,7 @@ fn visit_implementation_of_drop(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     debug!(\"visit_implementation_of_copy: impl_did={:?}\", impl_did);\n \n-    let self_type = tcx.type_of(impl_did);\n+    let self_type = tcx.bound_type_of(impl_did).subst_identity();\n     debug!(\"visit_implementation_of_copy: self_type={:?} (bound)\", self_type);\n \n     let param_env = tcx.param_env(impl_did);\n@@ -206,7 +206,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n \n     let dispatch_from_dyn_trait = tcx.require_lang_item(LangItem::DispatchFromDyn, Some(span));\n \n-    let source = tcx.type_of(impl_did);\n+    let source = tcx.bound_type_of(impl_did).subst_identity();\n     assert!(!source.has_escaping_bound_vars());\n     let target = {\n         let trait_ref = tcx.impl_trait_ref(impl_did).unwrap().subst_identity();\n@@ -370,7 +370,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n         tcx.sess.fatal(&format!(\"`CoerceUnsized` implementation {}\", err.to_string()));\n     });\n \n-    let source = tcx.type_of(impl_did);\n+    let source = tcx.bound_type_of(impl_did).subst_identity();\n     let trait_ref = tcx.impl_trait_ref(impl_did).unwrap().subst_identity();\n     assert_eq!(trait_ref.def_id, coerce_unsized_trait);\n     let target = trait_ref.substs.type_at(1);\n@@ -482,7 +482,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n                 .filter_map(|(i, f)| {\n                     let (a, b) = (f.ty(tcx, substs_a), f.ty(tcx, substs_b));\n \n-                    if tcx.type_of(f.did).is_phantom_data() {\n+                    if tcx.bound_type_of(f.did).subst_identity().is_phantom_data() {\n                         // Ignore PhantomData fields\n                         return None;\n                     }"}, {"sha": "81b7ec1b49c2be28c16a48e42ff618748b8e2183", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -173,7 +173,7 @@ impl<'tcx> InherentCollect<'tcx> {\n \n         let id = id.owner_id.def_id;\n         let item_span = self.tcx.def_span(id);\n-        let self_ty = self.tcx.type_of(id);\n+        let self_ty = self.tcx.bound_type_of(id).subst_identity();\n         match *self_ty.kind() {\n             ty::Adt(def, _) => self.check_def_id(id, self_ty, def.did()),\n             ty::Foreign(did) => self.check_def_id(id, self_ty, did),"}, {"sha": "d30efbdbd4f3fe36ffa2f735a84866a24d6d04fb", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -1143,8 +1143,8 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<ty::PolyFnSig<'_>>\n         }\n \n         Ctor(data) | Variant(hir::Variant { data, .. }) if data.ctor().is_some() => {\n-            let ty = tcx.type_of(tcx.hir().get_parent_item(hir_id));\n-            let inputs = data.fields().iter().map(|f| tcx.type_of(f.def_id));\n+            let ty = tcx.bound_type_of(tcx.hir().get_parent_item(hir_id)).subst_identity();\n+            let inputs = data.fields().iter().map(|f| tcx.bound_type_of(f.def_id).subst_identity());\n             ty::Binder::dummy(tcx.mk_fn_sig(\n                 inputs,\n                 ty,\n@@ -1345,7 +1345,7 @@ fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::EarlyBinder<ty::\n         .of_trait\n         .as_ref()\n         .map(|ast_trait_ref| {\n-            let selfty = tcx.type_of(def_id);\n+            let selfty = tcx.bound_type_of(def_id).subst_identity();\n             icx.astconv().instantiate_mono_trait_ref(\n                 ast_trait_ref,\n                 selfty,"}, {"sha": "46a88cb2aa192b0db97157bff24cf9a094191687", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -1804,7 +1804,7 @@ fn is_late_bound_map(\n                     let mut walker = ConstrainedCollectorPostAstConv {\n                         arg_is_constrained: vec![false; generics.params.len()].into_boxed_slice(),\n                     };\n-                    walker.visit_ty(self.tcx.type_of(alias_def));\n+                    walker.visit_ty(self.tcx.bound_type_of(alias_def).subst_identity());\n \n                     match segments.last() {\n                         Some(hir::PathSegment { args: Some(args), .. }) => {"}, {"sha": "6d53ef5fe65c203577b7d2cba8dbf1df4f202f1a", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -251,7 +251,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     // in trait checking. See `setup_constraining_predicates`\n     // for details.\n     if let Node::Item(&Item { kind: ItemKind::Impl { .. }, .. }) = node {\n-        let self_ty = tcx.type_of(def_id);\n+        let self_ty = tcx.bound_type_of(def_id).subst_identity();\n         let trait_ref = tcx.impl_trait_ref(def_id).map(ty::EarlyBinder::subst_identity);\n         cgp::setup_constraining_predicates(\n             tcx,"}, {"sha": "029bef6c4bf7ec8d1dac05119418a3028c113a99", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -377,7 +377,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n         Node::Ctor(def) | Node::Variant(Variant { data: def, .. }) => match def {\n             VariantData::Unit(..) | VariantData::Struct(..) => {\n-                tcx.type_of(tcx.hir().get_parent_item(hir_id))\n+                tcx.bound_type_of(tcx.hir().get_parent_item(hir_id)).subst_identity()\n             }\n             VariantData::Tuple(..) => {\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n@@ -394,7 +394,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n         Node::AnonConst(_) if let Some(param) = tcx.opt_const_param_of(def_id) => {\n             // We defer to `type_of` of the corresponding parameter\n             // for generic arguments.\n-            tcx.type_of(param)\n+            tcx.bound_type_of(param).subst_identity()\n         }\n \n         Node::AnonConst(_) => {\n@@ -456,7 +456,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         def_id.to_def_id(),\n                     );\n                     if let Some(assoc_item) = assoc_item {\n-                        tcx.type_of(assoc_item.def_id)\n+                        tcx.bound_type_of(assoc_item.def_id).subst_identity()\n                     } else {\n                         // FIXME(associated_const_equality): add a useful error message here.\n                         tcx.ty_error_with_message(\n@@ -501,7 +501,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     if let Some(param)\n                         = assoc_item.map(|item| &tcx.generics_of(item.def_id).params[idx]).filter(|param| param.kind.is_ty_or_const())\n                     {\n-                        tcx.type_of(param.def_id)\n+                        tcx.bound_type_of(param.def_id).subst_identity()\n                     } else {\n                         // FIXME(associated_const_equality): add a useful error message here.\n                         tcx.ty_error_with_message(\n@@ -515,7 +515,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     def_id: param_def_id,\n                     kind: GenericParamKind::Const { default: Some(ct), .. },\n                     ..\n-                }) if ct.hir_id == hir_id => tcx.type_of(param_def_id),\n+                }) if ct.hir_id == hir_id => tcx.bound_type_of(param_def_id).subst_identity(),\n \n                 x => tcx.ty_error_with_message(\n                     DUMMY_SP,"}, {"sha": "019c6303b6b0ad64c18c7e55189701a650250655", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -70,7 +70,7 @@ pub fn provide(providers: &mut Providers) {\n \n fn enforce_impl_params_are_constrained(tcx: TyCtxt<'_>, impl_def_id: LocalDefId) {\n     // Every lifetime used in an associated type must be constrained.\n-    let impl_self_ty = tcx.type_of(impl_def_id);\n+    let impl_self_ty = tcx.bound_type_of(impl_def_id).subst_identity();\n     if impl_self_ty.references_error() {\n         // Don't complain about unconstrained type params when self ty isn't known due to errors.\n         // (#36836)\n@@ -104,7 +104,7 @@ fn enforce_impl_params_are_constrained(tcx: TyCtxt<'_>, impl_def_id: LocalDefId)\n             match item.kind {\n                 ty::AssocKind::Type => {\n                     if item.defaultness(tcx).has_value() {\n-                        cgp::parameters_for(&tcx.type_of(def_id), true)\n+                        cgp::parameters_for(&tcx.bound_type_of(def_id).subst_identity(), true)\n                     } else {\n                         Vec::new()\n                     }"}, {"sha": "21c3870f8501abb22c283ea9f283575cd2c6c24f", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -187,7 +187,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n \n     fn main_fn_diagnostics_def_id(tcx: TyCtxt<'_>, def_id: DefId, sp: Span) -> LocalDefId {\n         if let Some(local_def_id) = def_id.as_local() {\n-            let hir_type = tcx.type_of(local_def_id);\n+            let hir_type = tcx.bound_type_of(local_def_id).subst_identity();\n             if !matches!(hir_type.kind(), ty::FnDef(..)) {\n                 span_bug!(sp, \"main has a non-function type: found `{}`\", hir_type);\n             }\n@@ -366,7 +366,7 @@ fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n     let start_def_id = start_def_id.expect_local();\n     let start_id = tcx.hir().local_def_id_to_hir_id(start_def_id);\n     let start_span = tcx.def_span(start_def_id);\n-    let start_t = tcx.type_of(start_def_id);\n+    let start_t = tcx.bound_type_of(start_def_id).subst_identity();\n     match start_t.kind() {\n         ty::FnDef(..) => {\n             if let Some(Node::Item(it)) = tcx.hir().find(start_id) {"}, {"sha": "7274fd3dcc735f6a5448310d868229410a4499de", "filename": "compiler/rustc_hir_analysis/src/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -46,7 +46,7 @@ pub(super) fn infer_predicates(\n                         // For field of type &'a T (reference) or Adt\n                         // (struct/enum/union) there will be outlive\n                         // requirements for adt_def.\n-                        let field_ty = tcx.type_of(field_def.did);\n+                        let field_ty = tcx.bound_type_of(field_def.did).subst_identity();\n                         let field_span = tcx.def_span(field_def.did);\n                         insert_required_predicates_to_be_wf(\n                             tcx,"}, {"sha": "e1ed524de7978f244a96783f4faed477d76fe1b9", "filename": "compiler/rustc_hir_analysis/src/variance/constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n \n         let inferred_start = self.terms_cx.inferred_starts[&def_id];\n         let current_item = &CurrentItem { inferred_start };\n-        match tcx.type_of(def_id).kind() {\n+        match tcx.bound_type_of(def_id).subst_identity().kind() {\n             ty::Adt(def, _) => {\n                 // Not entirely obvious: constraints on structs/enums do not\n                 // affect the variance of their type parameters. See discussion\n@@ -112,7 +112,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 for field in def.all_fields() {\n                     self.add_constraints_from_ty(\n                         current_item,\n-                        tcx.type_of(field.did),\n+                        tcx.bound_type_of(field.did).subst_identity(),\n                         self.covariant,\n                     );\n                 }"}, {"sha": "4989febc89715eb214ee6619a8fda7c872dd183f", "filename": "compiler/rustc_hir_analysis/src/variance/solve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fsolve.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -103,7 +103,7 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n                 self.enforce_const_invariance(generics, variances);\n \n                 // Functions are permitted to have unused generic parameters: make those invariant.\n-                if let ty::FnDef(..) = tcx.type_of(def_id).kind() {\n+                if let ty::FnDef(..) = tcx.bound_type_of(def_id).subst_identity().kind() {\n                     for variance in variances.iter_mut() {\n                         if *variance == ty::Bivariant {\n                             *variance = ty::Invariant;"}, {"sha": "a5c41c5000a6da148cec46f28aa5b66758f30042", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -1130,7 +1130,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .unwrap_or(false);\n \n         let (res, self_ctor_substs) = if let Res::SelfCtor(impl_def_id) = res {\n-            let ty = self.handle_raw_ty(span, tcx.at(span).type_of(impl_def_id));\n+            let ty =\n+                self.handle_raw_ty(span, tcx.at(span).bound_type_of(impl_def_id).subst_identity());\n             match ty.normalized.ty_adt_def() {\n                 Some(adt_def) if adt_def.has_ctor() => {\n                     let (ctor_kind, ctor_def_id) = adt_def.non_enum_variant().ctor.unwrap();\n@@ -1226,7 +1227,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     (GenericParamDefKind::Const { .. }, GenericArg::Infer(inf)) => {\n                         let tcx = self.fcx.tcx();\n-                        self.fcx.ct_infer(tcx.type_of(param.def_id), Some(param), inf.span).into()\n+                        self.fcx\n+                            .ct_infer(\n+                                tcx.bound_type_of(param.def_id).subst_identity(),\n+                                Some(param),\n+                                inf.span,\n+                            )\n+                            .into()\n                     }\n                     _ => unreachable!(),\n                 }"}, {"sha": "ed303fe3fe802241c78b70c0558692a869285fa8", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -312,7 +312,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // same rules that check_expr_struct uses for macro hygiene.\n                 if self.tcx.adjust_ident(expr_field.ident, variant_def_id) == field.ident(self.tcx)\n                 {\n-                    return Some((expr_field.expr, self.tcx.type_of(field.did)));\n+                    return Some((\n+                        expr_field.expr,\n+                        self.tcx.bound_type_of(field.did).subst_identity(),\n+                    ));\n                 }\n             }\n         }\n@@ -339,7 +342,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         receiver: Option<&'tcx hir::Expr<'tcx>>,\n         args: &'tcx [hir::Expr<'tcx>],\n     ) -> bool {\n-        let ty = self.tcx.type_of(def_id);\n+        let ty = self.tcx.bound_type_of(def_id).subst_identity();\n         if !ty.is_fn() {\n             return false;\n         }"}, {"sha": "cf05c94bad193c2e53eda5a6cddac960993051e4", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -1378,7 +1378,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Same item\n             return false;\n         }\n-        let item_ty = self.tcx.type_of(item.def_id);\n+        let item_ty = self.tcx.bound_type_of(item.def_id).subst_identity();\n         // FIXME(compiler-errors): This check is *so* rudimentary\n         if item_ty.needs_subst() {\n             return false;"}, {"sha": "3f569761ae33e505a680519599b4f970c2d2e421", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -154,15 +154,15 @@ fn typeck_const_arg<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (did, param_did): (LocalDefId, DefId),\n ) -> &ty::TypeckResults<'tcx> {\n-    let fallback = move || tcx.type_of(param_did);\n+    let fallback = move || tcx.bound_type_of(param_did).subst_identity();\n     typeck_with_fallback(tcx, did, fallback)\n }\n \n fn typeck<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &ty::TypeckResults<'tcx> {\n     if let Some(param_did) = tcx.opt_const_param_of(def_id) {\n         tcx.typeck_const_arg((def_id, param_did))\n     } else {\n-        let fallback = move || tcx.type_of(def_id.to_def_id());\n+        let fallback = move || tcx.bound_type_of(def_id.to_def_id()).subst_identity();\n         typeck_with_fallback(tcx, def_id, fallback)\n     }\n }"}, {"sha": "ce9da85b64ac32cb09257a3a9cefce886dc4c5a0", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -384,7 +384,13 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                     }\n                     (GenericParamDefKind::Const { .. }, GenericArg::Infer(inf)) => {\n                         let tcx = self.cfcx.tcx();\n-                        self.cfcx.ct_infer(tcx.type_of(param.def_id), Some(param), inf.span).into()\n+                        self.cfcx\n+                            .ct_infer(\n+                                tcx.bound_type_of(param.def_id).subst_identity(),\n+                                Some(param),\n+                                inf.span,\n+                            )\n+                            .into()\n                     }\n                     _ => unreachable!(),\n                 }"}, {"sha": "63bf2f0e009bdb732e2538ffe9364e0a3776263d", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -1958,7 +1958,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     kind: ConstVariableOriginKind::SubstitutionPlaceholder,\n                     span,\n                 };\n-                self.next_const_var(self.tcx.type_of(param.def_id), origin).into()\n+                self.next_const_var(self.tcx.bound_type_of(param.def_id).subst_identity(), origin)\n+                    .into()\n             }\n         })\n     }"}, {"sha": "01c114a12c66758ed8a36ffced6bc44a5b8f8e12", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -906,8 +906,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         // different from the received one\n                                         // So we avoid suggestion method with Box<Self>\n                                         // for instance\n-                                        self.tcx.at(span).type_of(*def_id) != rcvr_ty\n-                                            && self.tcx.at(span).type_of(*def_id) != rcvr_ty\n+                                        self.tcx.at(span).bound_type_of(*def_id).subst_identity()\n+                                            != rcvr_ty\n+                                            && self\n+                                                .tcx\n+                                                .at(span)\n+                                                .bound_type_of(*def_id)\n+                                                .subst_identity()\n+                                                != rcvr_ty\n                                     }\n                                     (Mode::Path, false, _) => true,\n                                     _ => false,\n@@ -927,7 +933,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .iter()\n                             .take(limit)\n                             .map(|impl_item| {\n-                                format!(\"- `{}`\", self.tcx.at(span).type_of(*impl_item))\n+                                format!(\n+                                    \"- `{}`\",\n+                                    self.tcx.at(span).bound_type_of(*impl_item).subst_identity()\n+                                )\n                             })\n                             .collect::<Vec<_>>()\n                             .join(\"\\n\");\n@@ -1104,7 +1113,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         None\n                     };\n \n-                    let impl_ty = self.tcx.at(span).type_of(impl_did);\n+                    let impl_ty = self.tcx.at(span).bound_type_of(impl_did).subst_identity();\n \n                     let insertion = match self.tcx.impl_trait_ref(impl_did) {\n                         None => String::new(),\n@@ -1233,7 +1242,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // When the \"method\" is resolved through dereferencing, we really want the\n             // original type that has the associated function for accurate suggestions.\n             // (#61411)\n-            let impl_ty = self.tcx.type_of(*impl_did);\n+            let impl_ty = self.tcx.bound_type_of(*impl_did).subst_identity();\n             let target_ty = self\n                 .autoderef(sugg_span, rcvr_ty)\n                 .find(|(rcvr_ty, _)| {"}, {"sha": "f7f9697c84da3059d03928c3db3bb93553d545ae", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -72,7 +72,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             };\n \n             // Next, let's figure out the set of trait objects with implicit static bounds\n-            let ty = self.tcx().type_of(*impl_def_id);\n+            let ty = self.tcx().bound_type_of(*impl_def_id).subst_identity();\n             let mut v = super::static_impl_trait::TraitObjectVisitor(FxIndexSet::default());\n             v.visit_ty(ty);\n             let mut traits = vec![];"}, {"sha": "4b66fa138523f642ad4b5442bdbfa0b72e9ddf8b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         br: ty::BoundRegionKind,\n         hir_sig: &hir::FnSig<'_>,\n     ) -> Option<Span> {\n-        let fn_ty = self.tcx().type_of(scope_def_id);\n+        let fn_ty = self.tcx().bound_type_of(scope_def_id).subst_identity();\n         if let ty::FnDef(_, _) = fn_ty.kind() {\n             let ret_ty = fn_ty.fn_sig(self.tcx()).output();\n             let span = hir_sig.decl.output.span();"}, {"sha": "88e107d65a2e9a8b0f3b36f596847294806d26fd", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -1166,7 +1166,9 @@ impl<'tcx> InferCtxt<'tcx> {\n                         origin,\n                         val: ConstVariableValue::Unknown { universe: self.universe() },\n                     });\n-                self.tcx.mk_const(const_var_id, self.tcx.type_of(param.def_id)).into()\n+                self.tcx\n+                    .mk_const(const_var_id, self.tcx.bound_type_of(param.def_id).subst_identity())\n+                    .into()\n             }\n         }\n     }"}, {"sha": "36c9390793f3077fa3b0c6d33c53cb0b8b6dcc62", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -182,17 +182,23 @@ impl<'tcx> LateLintPass<'tcx> for BoxPointers {\n             | hir::ItemKind::TyAlias(..)\n             | hir::ItemKind::Enum(..)\n             | hir::ItemKind::Struct(..)\n-            | hir::ItemKind::Union(..) => {\n-                self.check_heap_type(cx, it.span, cx.tcx.type_of(it.owner_id))\n-            }\n+            | hir::ItemKind::Union(..) => self.check_heap_type(\n+                cx,\n+                it.span,\n+                cx.tcx.bound_type_of(it.owner_id).subst_identity(),\n+            ),\n             _ => (),\n         }\n \n         // If it's a struct, we also have to check the fields' types\n         match it.kind {\n             hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {\n                 for field in struct_def.fields() {\n-                    self.check_heap_type(cx, field.span, cx.tcx.type_of(field.def_id));\n+                    self.check_heap_type(\n+                        cx,\n+                        field.span,\n+                        cx.tcx.bound_type_of(field.def_id).subst_identity(),\n+                    );\n                 }\n             }\n             _ => (),\n@@ -589,7 +595,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             // If the method is an impl for an item with docs_hidden, don't doc.\n             MethodLateContext::PlainImpl => {\n                 let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n-                let impl_ty = cx.tcx.type_of(parent);\n+                let impl_ty = cx.tcx.bound_type_of(parent).subst_identity();\n                 let outerdef = match impl_ty.kind() {\n                     ty::Adt(def, _) => Some(def.did()),\n                     ty::Foreign(def_id) => Some(*def_id),\n@@ -698,7 +704,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {\n         // and recommending Copy might be a bad idea.\n         for field in def.all_fields() {\n             let did = field.did;\n-            if cx.tcx.type_of(did).is_unsafe_ptr() {\n+            if cx.tcx.bound_type_of(did).subst_identity().is_unsafe_ptr() {\n                 return;\n             }\n         }\n@@ -798,7 +804,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDebugImplementations {\n         if self.impling_types.is_none() {\n             let mut impls = LocalDefIdSet::default();\n             cx.tcx.for_each_impl(debug, |d| {\n-                if let Some(ty_def) = cx.tcx.type_of(d).ty_adt_def() {\n+                if let Some(ty_def) = cx.tcx.bound_type_of(d).subst_identity().ty_adt_def() {\n                     if let Some(def_id) = ty_def.did().as_local() {\n                         impls.insert(def_id);\n                     }\n@@ -2852,8 +2858,8 @@ impl ClashingExternDeclarations {\n                                     structurally_same_type_impl(\n                                         seen_types,\n                                         cx,\n-                                        tcx.type_of(a_did),\n-                                        tcx.type_of(b_did),\n+                                        tcx.bound_type_of(a_did).subst_identity(),\n+                                        tcx.bound_type_of(b_did).subst_identity(),\n                                         ckind,\n                                     )\n                                 },\n@@ -2953,8 +2959,8 @@ impl<'tcx> LateLintPass<'tcx> for ClashingExternDeclarations {\n         if let ForeignItemKind::Fn(..) = this_fi.kind {\n             let tcx = cx.tcx;\n             if let Some(existing_did) = self.insert(tcx, this_fi) {\n-                let existing_decl_ty = tcx.type_of(existing_did);\n-                let this_decl_ty = tcx.type_of(this_fi.owner_id);\n+                let existing_decl_ty = tcx.bound_type_of(existing_did).skip_binder();\n+                let this_decl_ty = tcx.bound_type_of(this_fi.owner_id).subst_identity();\n                 debug!(\n                     \"ClashingExternDeclarations: Comparing existing {:?}: {:?} to this {:?}: {:?}\",\n                     existing_did, existing_decl_ty, this_fi.owner_id, this_decl_ty"}, {"sha": "d26d4f4e8c40186409c4ffb2bb9f751b228b1fed", "filename": "compiler/rustc_lint/src/deref_into_dyn_supertrait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_lint%2Fsrc%2Fderef_into_dyn_supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_lint%2Fsrc%2Fderef_into_dyn_supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fderef_into_dyn_supertrait.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> LateLintPass<'tcx> for DerefIntoDynSupertrait {\n         // `Deref` is being implemented for `t`\n         if let hir::ItemKind::Impl(impl_) = item.kind\n             && let Some(trait_) = &impl_.of_trait\n-            && let t = cx.tcx.type_of(item.owner_id)\n+            && let t = cx.tcx.bound_type_of(item.owner_id).subst_identity()\n             && let opt_did @ Some(did) = trait_.trait_def_id()\n             && opt_did == cx.tcx.lang_items().deref_trait()\n             // `t` is `dyn t_principal`"}, {"sha": "72519085187ab34a7cc41c0f181e5b5c8ae807e7", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -216,7 +216,7 @@ fn is_ty_or_ty_ctxt(cx: &LateContext<'_>, path: &Path<'_>) -> Option<String> {\n         }\n         // Only lint on `&Ty` and `&TyCtxt` if it is used outside of a trait.\n         Res::SelfTyAlias { alias_to: did, is_trait_impl: false, .. } => {\n-            if let ty::Adt(adt, substs) = cx.tcx.type_of(did).kind() {\n+            if let ty::Adt(adt, substs) = cx.tcx.bound_type_of(did).subst_identity().kind() {\n                 if let Some(name @ (sym::Ty | sym::TyCtxt)) = cx.tcx.get_diagnostic_name(adt.did())\n                 {\n                     // NOTE: This path is currently unreachable as `Ty<'tcx>` is"}, {"sha": "a6e99cdbbad93bf0c120c006de0bea374caf29ef", "filename": "compiler/rustc_lint/src/pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -50,7 +50,7 @@ fn path_for_pass_by_value(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> Option<Stri\n                 return Some(format!(\"{}{}\", name, gen_args(cx, path_segment)));\n             }\n             Res::SelfTyAlias { alias_to: did, is_trait_impl: false, .. } => {\n-                if let ty::Adt(adt, substs) = cx.tcx.type_of(did).kind() {\n+                if let ty::Adt(adt, substs) = cx.tcx.bound_type_of(did).subst_identity().kind() {\n                     if cx.tcx.has_attr(adt.did(), sym::rustc_pass_by_value) {\n                         return Some(cx.tcx.def_path_str_with_substs(adt.did(), substs));\n                     }"}, {"sha": "0147008272787532e6d98842b4dc35abdad90ffc", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -651,7 +651,7 @@ pub fn transparent_newtype_field<'a, 'tcx>(\n ) -> Option<&'a ty::FieldDef> {\n     let param_env = tcx.param_env(variant.def_id);\n     variant.fields.iter().find(|field| {\n-        let field_ty = tcx.type_of(field.did);\n+        let field_ty = tcx.bound_type_of(field.did).subst_identity();\n         let is_zst = tcx.layout_of(param_env.and(field_ty)).map_or(false, |layout| layout.is_zst());\n         !is_zst\n     })\n@@ -1240,7 +1240,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     }\n \n     fn check_foreign_static(&mut self, id: hir::OwnerId, span: Span) {\n-        let ty = self.cx.tcx.type_of(id);\n+        let ty = self.cx.tcx.bound_type_of(id).subst_identity();\n         self.check_type_for_ffi_and_report_errors(span, ty, true, false);\n     }\n \n@@ -1301,7 +1301,7 @@ declare_lint_pass!(VariantSizeDifferences => [VARIANT_SIZE_DIFFERENCES]);\n impl<'tcx> LateLintPass<'tcx> for VariantSizeDifferences {\n     fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {\n         if let hir::ItemKind::Enum(ref enum_definition, _) = it.kind {\n-            let t = cx.tcx.type_of(it.owner_id);\n+            let t = cx.tcx.bound_type_of(it.owner_id).subst_identity();\n             let ty = cx.tcx.erase_regions(t);\n             let Ok(layout) = cx.layout_of(ty) else { return };\n             let Variants::Multiple {\n@@ -1421,7 +1421,7 @@ impl InvalidAtomicOrdering {\n             && recognized_names.contains(&method_path.ident.name)\n             && let Some(m_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id)\n             && let Some(impl_did) = cx.tcx.impl_of_method(m_def_id)\n-            && let Some(adt) = cx.tcx.type_of(impl_did).ty_adt_def()\n+            && let Some(adt) = cx.tcx.bound_type_of(impl_did).subst_identity().ty_adt_def()\n             // skip extension traits, only lint functions from the standard library\n             && cx.tcx.trait_id_of_impl(impl_did).is_none()\n             && let parent = cx.tcx.parent(adt.did())"}, {"sha": "05ccf472a697d30ebfe275db315e106bfa796f2e", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -498,7 +498,8 @@ impl<'tcx> Collector<'tcx> {\n     fn i686_arg_list_size(&self, item: &hir::ForeignItemRef) -> usize {\n         let argument_types: &List<Ty<'_>> = self.tcx.erase_late_bound_regions(\n             self.tcx\n-                .type_of(item.id.owner_id)\n+                .bound_type_of(item.id.owner_id)\n+                .subst_identity()\n                 .fn_sig(self.tcx)\n                 .inputs()\n                 .map_bound(|slice| self.tcx.mk_type_list(slice.iter())),"}, {"sha": "1e0a9b7e68227935adcf246ba435a9137a3ade0d", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -104,7 +104,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.impl_trait_ref(def_id)\n             .map(|t| t.subst_identity())\n             .map(ImplSubject::Trait)\n-            .unwrap_or_else(|| ImplSubject::Inherent(self.type_of(def_id)))\n+            .unwrap_or_else(|| ImplSubject::Inherent(self.bound_type_of(def_id).subst_identity()))\n     }\n }\n "}, {"sha": "ef3cb6a38669e95ff447efe20104a72dd101ed30", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -2497,7 +2497,7 @@ impl<'tcx> ConstantKind<'tcx> {\n         };\n         debug!(\"expr.kind: {:?}\", expr.kind);\n \n-        let ty = tcx.type_of(def.def_id_for_type_of());\n+        let ty = tcx.bound_type_of(def.def_id_for_type_of()).subst_identity();\n         debug!(?ty);\n \n         // FIXME(const_generics): We currently have to special case parameters because `min_const_generics`"}, {"sha": "cc9cddc8ae516728aa626d863caff011de6a888c", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -165,7 +165,7 @@ impl<'tcx> Rvalue<'tcx> {\n                 tcx.mk_array_with_const_len(operand.ty(local_decls, tcx), count)\n             }\n             Rvalue::ThreadLocalRef(did) => {\n-                let static_ty = tcx.type_of(did);\n+                let static_ty = tcx.bound_type_of(did).subst_identity();\n                 if tcx.is_mutable_static(did) {\n                     tcx.mk_mut_ptr(static_ty)\n                 } else if tcx.is_foreign_item(did) {"}, {"sha": "772517c6970cbfae9b56035aafcb4f59ca060f53", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -263,7 +263,9 @@ pub fn ancestors(\n \n     if let Some(reported) = specialization_graph.has_errored {\n         Err(reported)\n-    } else if let Err(reported) = tcx.type_of(start_from_impl).error_reported() {\n+    } else if let Err(reported) =\n+        tcx.bound_type_of(start_from_impl).subst_identity().error_reported()\n+    {\n         Err(reported)\n     } else {\n         Ok(Ancestors {"}, {"sha": "431537fae84694d4369c7202866edb8574ac6ea5", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -83,7 +83,11 @@ impl AssocItem {\n             }\n             ty::AssocKind::Type => format!(\"type {};\", self.name),\n             ty::AssocKind::Const => {\n-                format!(\"const {}: {:?};\", self.name, tcx.type_of(self.def_id))\n+                format!(\n+                    \"const {}: {:?};\",\n+                    self.name,\n+                    tcx.bound_type_of(self.def_id).subst_identity()\n+                )\n             }\n         }\n     }"}, {"sha": "a4938ebad45202bf61dae409096db1c8fb767f39", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -71,7 +71,7 @@ impl<'tcx> Const<'tcx> {\n         let expr = &tcx.hir().body(body_id).value;\n         debug!(?expr);\n \n-        let ty = tcx.type_of(def.def_id_for_type_of());\n+        let ty = tcx.bound_type_of(def.def_id_for_type_of()).subst_identity();\n \n         match Self::try_eval_lit_or_param(tcx, ty, expr) {\n             Some(v) => v,"}, {"sha": "64ff29af6b5aff12bb99e5b226712acdc92ebac9", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -1149,7 +1149,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             _ => return None,\n         }\n \n-        let ret_ty = self.type_of(scope_def_id);\n+        let ret_ty = self.bound_type_of(scope_def_id).subst_identity();\n         match ret_ty.kind() {\n             ty::FnDef(_, _) => {\n                 let sig = ret_ty.fn_sig(self);\n@@ -2002,7 +2002,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             GenericParamDefKind::Const { .. } => self\n                 .mk_const(\n                     ParamConst { index: param.index, name: param.name },\n-                    self.type_of(param.def_id),\n+                    self.bound_type_of(param.def_id).subst_identity(),\n                 )\n                 .into(),\n         }"}, {"sha": "9abbb95b295a1e983ce03f01d5db11525aa4dc81", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -481,8 +481,9 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for IsSuggestableVisitor<'tcx> {\n \n             Alias(Opaque, AliasTy { def_id, .. }) => {\n                 let parent = self.tcx.parent(def_id);\n+                let parent_ty = self.tcx.bound_type_of(parent).subst_identity();\n                 if let DefKind::TyAlias | DefKind::AssocTy = self.tcx.def_kind(parent)\n-                    && let Alias(Opaque, AliasTy { def_id: parent_opaque_def_id, .. }) = *self.tcx.type_of(parent).kind()\n+                    && let Alias(Opaque, AliasTy { def_id: parent_opaque_def_id, .. }) = *parent_ty.kind()\n                     && parent_opaque_def_id == def_id\n                 {\n                     // Okay\n@@ -564,8 +565,9 @@ impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for MakeSuggestableFolder<'tcx> {\n \n             Alias(Opaque, AliasTy { def_id, .. }) => {\n                 let parent = self.tcx.parent(def_id);\n+                let parent_ty = self.tcx.bound_type_of(parent).subst_identity();\n                 if let hir::def::DefKind::TyAlias | hir::def::DefKind::AssocTy = self.tcx.def_kind(parent)\n-                    && let Alias(Opaque, AliasTy { def_id: parent_opaque_def_id, .. }) = *self.tcx.type_of(parent).kind()\n+                    && let Alias(Opaque, AliasTy { def_id: parent_opaque_def_id, .. }) = *parent_ty.kind()\n                     && parent_opaque_def_id == def_id\n                 {\n                     t"}, {"sha": "7df8024e13cfacbc2a4aa274cbac51c39f9835a2", "filename": "compiler/rustc_middle/src/ty/inhabitedness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> VariantDef {\n         InhabitedPredicate::all(\n             tcx,\n             self.fields.iter().map(|field| {\n-                let pred = tcx.type_of(field.did).inhabited_predicate(tcx);\n+                let pred = tcx.bound_type_of(field.did).subst_identity().inhabited_predicate(tcx);\n                 if adt.is_enum() {\n                     return pred;\n                 }"}, {"sha": "58815bcac17d49233635a9f7af71f32aa8771c4d", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -102,8 +102,8 @@ impl<'tcx> Instance<'tcx> {\n     /// Returns the `Ty` corresponding to this `Instance`, with generic substitutions applied and\n     /// lifetimes erased, allowing a `ParamEnv` to be specified for use during normalization.\n     pub fn ty(&self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Ty<'tcx> {\n-        let ty = tcx.type_of(self.def.def_id());\n-        tcx.subst_and_normalize_erasing_regions(self.substs, param_env, ty)\n+        let ty = tcx.bound_type_of(self.def.def_id());\n+        tcx.subst_and_normalize_erasing_regions(self.substs, param_env, ty.skip_binder())\n     }\n \n     /// Finds a crate that contains a monomorphization of this instance that\n@@ -662,7 +662,7 @@ fn polymorphize<'tcx>(\n     let def_id = instance.def_id();\n     let upvars_ty = if tcx.is_closure(def_id) {\n         Some(substs.as_closure().tupled_upvars_ty())\n-    } else if tcx.type_of(def_id).is_generator() {\n+    } else if tcx.bound_type_of(def_id).skip_binder().is_generator() {\n         Some(substs.as_generator().tupled_upvars_ty())\n     } else {\n         None"}, {"sha": "cdb51f1da4bf35b36a8852825e64836417151a83", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -754,7 +754,7 @@ pub trait PrettyPrinter<'tcx>:\n                         // NOTE: I know we should check for NO_QUERIES here, but it's alright.\n                         // `type_of` on a type alias or assoc type should never cause a cycle.\n                         if let ty::Alias(ty::Opaque, ty::AliasTy { def_id: d, .. }) =\n-                            *self.tcx().type_of(parent).kind()\n+                            *self.tcx().bound_type_of(parent).subst_identity().kind()\n                         {\n                             if d == def_id {\n                                 // If the type alias directly starts with the `impl` of the"}, {"sha": "9214389bec1c5ae2848c3c03df55ed01c0bd4ac0", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -225,7 +225,7 @@ pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> Trait\n     for &impl_def_id in tcx.hir().trait_impls(trait_id) {\n         let impl_def_id = impl_def_id.to_def_id();\n \n-        let impl_self_ty = tcx.type_of(impl_def_id);\n+        let impl_self_ty = tcx.bound_type_of(impl_def_id).subst_identity();\n         if impl_self_ty.references_error() {\n             continue;\n         }"}, {"sha": "0b37602d07bd122ae7a18a844e4aae074bddd52f", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -362,7 +362,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let drop_trait = self.lang_items().drop_trait()?;\n         self.ensure().coherent_trait(drop_trait);\n \n-        let ty = self.type_of(adt_did);\n+        let ty = self.bound_type_of(adt_did).subst_identity();\n         let (did, constness) = self.find_map_relevant_impl(drop_trait, ty, |impl_did| {\n             if let Some(item_id) = self.associated_item_def_ids(impl_did).first() {\n                 if validate(self, impl_did).is_ok() {\n@@ -415,12 +415,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         // <P1, P2, P0>, and then look up which of the impl substs refer to\n         // parameters marked as pure.\n \n-        let impl_substs = match *self.type_of(impl_def_id).kind() {\n+        let impl_substs = match *self.bound_type_of(impl_def_id).subst_identity().kind() {\n             ty::Adt(def_, substs) if def_ == def => substs,\n             _ => bug!(),\n         };\n \n-        let item_substs = match *self.type_of(def.did()).kind() {\n+        let item_substs = match *self.bound_type_of(def.did()).subst_identity().kind() {\n             ty::Adt(def_, substs) if def_ == def => substs,\n             _ => bug!(),\n         };\n@@ -602,7 +602,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Get the type of the pointer to the static that we use in MIR.\n     pub fn static_ptr_ty(self, def_id: DefId) -> Ty<'tcx> {\n         // Make sure that any constants in the static's type are evaluated.\n-        let static_ty = self.normalize_erasing_regions(ty::ParamEnv::empty(), self.type_of(def_id));\n+        let static_ty = self.normalize_erasing_regions(\n+            ty::ParamEnv::empty(),\n+            self.bound_type_of(def_id).subst_identity(),\n+        );\n \n         // Make sure that accesses to unsafe statics end up using raw pointers.\n         // For thread-locals, this needs to be kept in sync with `Rvalue::ty`."}, {"sha": "f5a744f874e9657e906082554be911f081fffee4", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -643,7 +643,7 @@ fn construct_error(\n     let num_params = match body_owner_kind {\n         hir::BodyOwnerKind::Fn => tcx.fn_sig(def).skip_binder().inputs().skip_binder().len(),\n         hir::BodyOwnerKind::Closure => {\n-            let ty = tcx.type_of(def);\n+            let ty = tcx.bound_type_of(def).subst_identity();\n             match ty.kind() {\n                 ty::Closure(_, substs) => {\n                     1 + substs.as_closure().sig().inputs().skip_binder().len()"}, {"sha": "cf676284bee7f1471349aaf33166183c157e363e", "filename": "compiler/rustc_mir_transform/src/abort_unwinding_calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -41,7 +41,7 @@ impl<'tcx> MirPass<'tcx> for AbortUnwindingCalls {\n         //\n         // Here we test for this function itself whether its ABI allows\n         // unwinding or not.\n-        let body_ty = tcx.type_of(def_id);\n+        let body_ty = tcx.bound_type_of(def_id).skip_binder();\n         let body_abi = match body_ty.kind() {\n             ty::FnDef(..) => body_ty.fn_sig(tcx).abi(),\n             ty::Closure(..) => Abi::RustCall,"}, {"sha": "0678dbce3d1b249364b83ccff525af14d585fe77", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -82,7 +82,7 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             return;\n         }\n \n-        let is_generator = tcx.type_of(def_id.to_def_id()).is_generator();\n+        let is_generator = tcx.bound_type_of(def_id.to_def_id()).subst_identity().is_generator();\n         // FIXME(welseywiser) const prop doesn't work on generators because of query cycles\n         // computing their layout.\n         if is_generator {"}, {"sha": "cf959919618fcc08942e37937f082bbe1cb9867a", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> MirLint<'tcx> for ConstProp {\n             return;\n         }\n \n-        let is_generator = tcx.type_of(def_id.to_def_id()).is_generator();\n+        let is_generator = tcx.bound_type_of(def_id.to_def_id()).subst_identity().is_generator();\n         // FIXME(welseywiser) const prop doesn't work on generators because of query cycles\n         // computing their layout.\n         if is_generator {"}, {"sha": "d6c324b581ea252a3d731222bf8ca85389bb44b9", "filename": "compiler/rustc_mir_transform/src/deduce_param_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -163,7 +163,7 @@ pub fn deduced_param_attrs<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx [Ded\n \n     // Codegen won't use this information for anything if all the function parameters are passed\n     // directly. Detect that and bail, for compilation speed.\n-    let fn_ty = tcx.type_of(def_id);\n+    let fn_ty = tcx.bound_type_of(def_id).subst_identity();\n     if matches!(fn_ty.kind(), ty::FnDef(..)) {\n         if fn_ty\n             .fn_sig(tcx)"}, {"sha": "7ed48d6e53e1a8e938dcb691c5e555edd83ae324", "filename": "compiler/rustc_mir_transform/src/elaborate_box_derefs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -93,7 +93,7 @@ impl<'tcx> MirPass<'tcx> for ElaborateBoxDerefs {\n         if let Some(def_id) = tcx.lang_items().owned_box() {\n             let unique_did = tcx.adt_def(def_id).non_enum_variant().fields[0].did;\n \n-            let Some(nonnull_def) = tcx.type_of(unique_did).ty_adt_def() else {\n+            let Some(nonnull_def) = tcx.bound_type_of(unique_did).subst_identity().ty_adt_def() else {\n                 span_bug!(tcx.def_span(unique_did), \"expected Box to contain Unique\")\n             };\n "}, {"sha": "b554918c6da6fb160f3efaca73922711e7bd0080", "filename": "compiler/rustc_mir_transform/src/ffi_unwind_calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -49,7 +49,7 @@ fn has_ffi_unwind_calls(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> bool {\n \n     let body = &*tcx.mir_built(ty::WithOptConstParam::unknown(local_def_id)).borrow();\n \n-    let body_ty = tcx.type_of(def_id);\n+    let body_ty = tcx.bound_type_of(def_id).skip_binder();\n     let body_abi = match body_ty.kind() {\n         ty::FnDef(..) => body_ty.fn_sig(tcx).abi(),\n         ty::Closure(..) => Abi::RustCall,"}, {"sha": "88088af71a6a70dd2ad4444b00a11e41e5bb8d29", "filename": "compiler/rustc_mir_transform/src/remove_zsts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -13,7 +13,7 @@ impl<'tcx> MirPass<'tcx> for RemoveZsts {\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // Avoid query cycles (generators require optimized MIR for layout).\n-        if tcx.type_of(body.source.def_id()).is_generator() {\n+        if tcx.bound_type_of(body.source.def_id()).subst_identity().is_generator() {\n             return;\n         }\n         let param_env = tcx.param_env(body.source.def_id());"}, {"sha": "e393f895c4eafe284b5c3e1c2ccd3ec2e385f01d", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -692,7 +692,7 @@ fn build_call_shim<'tcx>(\n \n         // `FnDef` call with optional receiver.\n         CallKind::Direct(def_id) => {\n-            let ty = tcx.type_of(def_id);\n+            let ty = tcx.bound_type_of(def_id).subst_identity();\n             (\n                 Operand::Constant(Box::new(Constant {\n                     span,"}, {"sha": "d1abcb8005d295106bfaaf3abe0cd79dadaaf51d", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -308,7 +308,7 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n                     let impl_self_ty = tcx.subst_and_normalize_erasing_regions(\n                         instance.substs,\n                         ty::ParamEnv::reveal_all(),\n-                        tcx.type_of(impl_def_id),\n+                        tcx.bound_type_of(impl_def_id).skip_binder(),\n                     );\n                     if let Some(def_id) = characteristic_def_id_of_type(impl_self_ty) {\n                         return Some(def_id);"}, {"sha": "29a504817132bbddc04c0be15eb28a1772720486", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -2174,7 +2174,7 @@ impl CheckAttrVisitor<'_> {\n         let tcx = self.tcx;\n         if target == Target::Fn {\n             let Some(tokenstream) = tcx.get_diagnostic_item(sym::TokenStream) else {return};\n-            let tokenstream = tcx.type_of(tokenstream);\n+            let tokenstream = tcx.bound_type_of(tokenstream).subst_identity();\n \n             let id = hir_id.expect_owner();\n             let hir_sig = tcx.hir().fn_sig_by_hir_id(hir_id).unwrap();"}, {"sha": "ff4f4d5ed90efb1f7305720bbeb0b69da36fcf8f", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -315,7 +315,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                     //// This is done to handle the case where, for example, the static\n                     //// method of a private type is used, but the type itself is never\n                     //// called directly.\n-                    let self_ty = self.tcx.type_of(item);\n+                    let self_ty = self.tcx.bound_type_of(item).subst_identity();\n                     match *self_ty.kind() {\n                         ty::Adt(def, _) => self.check_def_id(def.did()),\n                         ty::Foreign(did) => self.check_def_id(did),\n@@ -654,7 +654,7 @@ impl<'tcx> DeadVisitor<'tcx> {\n         if self.live_symbols.contains(&field.did.expect_local()) {\n             return ShouldWarnAboutField::No;\n         }\n-        let field_type = self.tcx.type_of(field.did);\n+        let field_type = self.tcx.bound_type_of(field.did).subst_identity();\n         if field_type.is_phantom_data() {\n             return ShouldWarnAboutField::No;\n         }"}, {"sha": "2c3fdd4badbd1b351b85ae4299936a8b5ddc088c", "filename": "compiler/rustc_passes/src/layout_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -29,7 +29,7 @@ pub fn test_layout(tcx: TyCtxt<'_>) {\n fn dump_layout_of(tcx: TyCtxt<'_>, item_def_id: LocalDefId, attr: &Attribute) {\n     let tcx = tcx;\n     let param_env = tcx.param_env(item_def_id);\n-    let ty = tcx.type_of(item_def_id);\n+    let ty = tcx.bound_type_of(item_def_id).subst_identity();\n     match tcx.layout_of(param_env.and(ty)) {\n         Ok(ty_layout) => {\n             // Check out the `#[rustc_layout(..)]` attribute to tell what to dump."}, {"sha": "f59860b8abcc5ae208455ad6824d466b4ba64b85", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -207,7 +207,7 @@ where\n                 // so we need to visit the self type additionally.\n                 if let Some(assoc_item) = tcx.opt_associated_item(def_id) {\n                     if let Some(impl_def_id) = assoc_item.impl_container(tcx) {\n-                        tcx.type_of(impl_def_id).visit_with(self)?;\n+                        tcx.bound_type_of(impl_def_id).subst_identity().visit_with(self)?;\n                     }\n                 }\n             }\n@@ -341,7 +341,7 @@ trait VisibilityLike: Sized {\n         effective_visibilities: &EffectiveVisibilities,\n     ) -> Self {\n         let mut find = FindMin { tcx, effective_visibilities, min: Self::MAX };\n-        find.visit(tcx.type_of(def_id));\n+        find.visit(tcx.bound_type_of(def_id).subst_identity());\n         if let Some(trait_ref) = tcx.impl_trait_ref(def_id) {\n             find.visit_trait(trait_ref.subst_identity());\n         }\n@@ -837,11 +837,11 @@ impl ReachEverythingInTheInterfaceVisitor<'_, '_> {\n                 GenericParamDefKind::Lifetime => {}\n                 GenericParamDefKind::Type { has_default, .. } => {\n                     if has_default {\n-                        self.visit(self.ev.tcx.type_of(param.def_id));\n+                        self.visit(self.ev.tcx.bound_type_of(param.def_id).subst_identity());\n                     }\n                 }\n                 GenericParamDefKind::Const { has_default } => {\n-                    self.visit(self.ev.tcx.type_of(param.def_id));\n+                    self.visit(self.ev.tcx.bound_type_of(param.def_id).subst_identity());\n                     if has_default {\n                         self.visit(self.ev.tcx.const_param_default(param.def_id).subst_identity());\n                     }\n@@ -857,7 +857,7 @@ impl ReachEverythingInTheInterfaceVisitor<'_, '_> {\n     }\n \n     fn ty(&mut self) -> &mut Self {\n-        self.visit(self.ev.tcx.type_of(self.item_def_id));\n+        self.visit(self.ev.tcx.bound_type_of(self.item_def_id).subst_identity());\n         self\n     }\n \n@@ -1268,7 +1268,7 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n                 // Method calls have to be checked specially.\n                 self.span = segment.ident.span;\n                 if let Some(def_id) = self.typeck_results().type_dependent_def_id(expr.hir_id) {\n-                    if self.visit(self.tcx.type_of(def_id)).is_break() {\n+                    if self.visit(self.tcx.bound_type_of(def_id).subst_identity()).is_break() {\n                         return;\n                     }\n                 } else {\n@@ -1742,12 +1742,12 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                 GenericParamDefKind::Lifetime => {}\n                 GenericParamDefKind::Type { has_default, .. } => {\n                     if has_default {\n-                        self.visit(self.tcx.type_of(param.def_id));\n+                        self.visit(self.tcx.bound_type_of(param.def_id).subst_identity());\n                     }\n                 }\n                 // FIXME(generic_const_exprs): May want to look inside const here\n                 GenericParamDefKind::Const { .. } => {\n-                    self.visit(self.tcx.type_of(param.def_id));\n+                    self.visit(self.tcx.bound_type_of(param.def_id).subst_identity());\n                 }\n             }\n         }\n@@ -1774,7 +1774,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n     }\n \n     fn ty(&mut self) -> &mut Self {\n-        self.visit(self.tcx.type_of(self.item_def_id));\n+        self.visit(self.tcx.bound_type_of(self.item_def_id).subst_identity());\n         self\n     }\n "}, {"sha": "e988d11cdbd7c5bf1822fa6305e3cbd59b199c07", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -26,7 +26,7 @@ pub(super) fn mangle<'tcx>(\n         let key = tcx.def_key(ty_def_id);\n         match key.disambiguated_data.data {\n             DefPathData::TypeNs(_) | DefPathData::ValueNs(_) => {\n-                instance_ty = tcx.type_of(ty_def_id);\n+                instance_ty = tcx.bound_type_of(ty_def_id).subst_identity();\n                 debug!(?instance_ty);\n                 break;\n             }"}, {"sha": "118be160a7ea238931997d0da3bffdd74d84bfbf", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -696,7 +696,7 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n                 let variant = adt_def.non_enum_variant();\n                 let param_env = tcx.param_env(variant.def_id);\n                 let field = variant.fields.iter().find(|field| {\n-                    let ty = tcx.type_of(field.did);\n+                    let ty = tcx.bound_type_of(field.did).subst_identity();\n                     let is_zst =\n                         tcx.layout_of(param_env.and(ty)).map_or(false, |layout| layout.is_zst());\n                     !is_zst"}, {"sha": "bc639094fdd5593519ae56d6efd0e7210819c09b", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -82,8 +82,8 @@ pub fn overlapping_impls(\n         (Some(a), Some(b)) => iter::zip(a.skip_binder().substs, b.skip_binder().substs)\n             .all(|(arg1, arg2)| drcx.generic_args_may_unify(arg1, arg2)),\n         (None, None) => {\n-            let self_ty1 = tcx.type_of(impl1_def_id);\n-            let self_ty2 = tcx.type_of(impl2_def_id);\n+            let self_ty1 = tcx.bound_type_of(impl1_def_id).skip_binder();\n+            let self_ty2 = tcx.bound_type_of(impl2_def_id).skip_binder();\n             drcx.types_may_unify(self_ty1, self_ty2)\n         }\n         _ => bug!(\"unexpected impls: {impl1_def_id:?} {impl2_def_id:?}\"),"}, {"sha": "671de18b0a82b48fcbe78b1408b8edccb7fb7228", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -2432,7 +2432,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             };\n                             let mut suggestions = vec![(\n                                 path.span.shrink_to_lo(),\n-                                format!(\"<{} as \", self.tcx.type_of(impl_def_id))\n+                                format!(\"<{} as \", self.tcx.bound_type_of(impl_def_id).subst_identity())\n                             )];\n                             if let Some(generic_arg) = trait_path_segment.args {\n                                 let between_span = trait_path_segment.ident.span.between(generic_arg.span_ext);"}, {"sha": "af4d74819afa6bf7057806168c19980e4428f5aa", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -200,7 +200,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             if let Some(def) = self_ty.ty_adt_def() {\n                 // We also want to be able to select self's original\n                 // signature with no type arguments resolved\n-                flags.push((sym::_Self, Some(self.tcx.type_of(def.did()).to_string())));\n+                flags.push((\n+                    sym::_Self,\n+                    Some(self.tcx.bound_type_of(def.did()).subst_identity().to_string()),\n+                ));\n             }\n \n             for param in generics.params.iter() {\n@@ -218,7 +221,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     if let Some(def) = param_ty.ty_adt_def() {\n                         // We also want to be able to select the parameter's\n                         // original signature with no type arguments resolved\n-                        flags.push((name, Some(self.tcx.type_of(def.did()).to_string())));\n+                        flags.push((\n+                            name,\n+                            Some(self.tcx.bound_type_of(def.did()).subst_identity().to_string()),\n+                        ));\n                     }\n                 }\n             }\n@@ -251,7 +257,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 if let Some(def) = aty.ty_adt_def() {\n                     // We also want to be able to select the slice's type's original\n                     // signature with no type arguments resolved\n-                    flags.push((sym::_Self, Some(format!(\"[{}]\", self.tcx.type_of(def.did())))));\n+                    flags.push((\n+                        sym::_Self,\n+                        Some(format!(\"[{}]\", self.tcx.bound_type_of(def.did()).subst_identity())),\n+                    ));\n                 }\n                 if aty.is_integral() {\n                     flags.push((sym::_Self, Some(\"[{integral}]\".to_string())));\n@@ -269,7 +278,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 if let Some(def) = aty.ty_adt_def() {\n                     // We also want to be able to select the array's type's original\n                     // signature with no type arguments resolved\n-                    let def_ty = self.tcx.type_of(def.did());\n+                    let def_ty = self.tcx.bound_type_of(def.did()).subst_identity();\n                     flags.push((sym::_Self, Some(format!(\"[{def_ty}; _]\"))));\n                     if let Some(n) = len {\n                         flags.push((sym::_Self, Some(format!(\"[{def_ty}; {n}]\"))));"}, {"sha": "94d0c9f945cb23fcce7a21611e73880057a60328", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -557,7 +557,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                         ty::INNERMOST,\n                                         ty::BoundVar::from_usize(bound_vars.len() - 1),\n                                     ),\n-                                    tcx.type_of(param.def_id),\n+                                    tcx.bound_type_of(param.def_id).subst_identity(),\n                                 )\n                                 .into()\n                             }"}, {"sha": "9f98ed1365b19ad1ec0789d00190c65fba3aa6f8", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -455,7 +455,13 @@ pub(crate) fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Opti\n         w.push('>');\n     }\n \n-    write!(w, \" {} for {}\", trait_ref.print_only_trait_path(), tcx.type_of(impl_def_id)).unwrap();\n+    write!(\n+        w,\n+        \" {} for {}\",\n+        trait_ref.print_only_trait_path(),\n+        tcx.bound_type_of(impl_def_id).subst_identity()\n+    )\n+    .unwrap();\n \n     // The predicates will contain default bounds like `T: Sized`. We need to\n     // remove these bounds, and add `T: ?Sized` to any untouched type parameters."}, {"sha": "052b049b6f503bd5031170a9e50440a915399215", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -246,7 +246,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         // Grab the ADT and the param we might need to calculate its layout\n         let param_env = tcx.param_env(did);\n-        let adt_ty = tcx.type_of(did);\n+        let adt_ty = tcx.bound_type_of(did).subst_identity();\n \n         // The ADT is a 1-zst if it's a ZST and its alignment is 1.\n         // Mark the ADT as _not_ a 1-zst if there was a layout error.\n@@ -738,7 +738,7 @@ fn bound_vars_for_item(tcx: TyCtxt<'_>, def_id: DefId) -> SubstsRef<'_> {\n         ty::GenericParamDefKind::Const { .. } => tcx\n             .mk_const(\n                 ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from(param.index)),\n-                tcx.type_of(param.def_id),\n+                tcx.bound_type_of(param.def_id).subst_identity(),\n             )\n             .into(),\n     })"}, {"sha": "8011d3932f11262cda2d50702d380bec8c8cb7af", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -308,7 +308,7 @@ pub(crate) fn adt_dtorck_constraint(\n \n     let mut result = DropckConstraint::empty();\n     for field in def.all_fields() {\n-        let fty = tcx.type_of(field.did);\n+        let fty = tcx.bound_type_of(field.did).subst_identity();\n         dtorck_constraint_for_ty(tcx, span, fty, 0, fty, &mut result)?;\n     }\n     result.outlives.extend(tcx.destructor_constraints(def));"}, {"sha": "d7a59edf808c88f6c91aec3c6d76dbb816b865a6", "filename": "compiler/rustc_ty_utils/src/implied_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -28,7 +28,7 @@ fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Ty<'_>> {\n                     tcx.intern_type_list(&types)\n                 }\n                 // Only the impl self type\n-                None => tcx.intern_type_list(&[tcx.type_of(def_id)]),\n+                None => tcx.intern_type_list(&[tcx.bound_type_of(def_id).subst_identity()]),\n             }\n         }\n         DefKind::AssocConst | DefKind::AssocTy => tcx.assumed_wf_types(tcx.parent(def_id)),"}, {"sha": "6e642985c0afe44df284380f17732be2b5b6eb85", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -52,8 +52,9 @@ fn inner_resolve_instance<'tcx>(\n             tcx.normalize_erasing_regions(param_env, substs),\n         )\n     } else {\n-        let ty = tcx.type_of(def.def_id_for_type_of());\n-        let item_type = tcx.subst_and_normalize_erasing_regions(substs, param_env, ty);\n+        let ty = tcx.bound_type_of(def.def_id_for_type_of());\n+        let item_type =\n+            tcx.subst_and_normalize_erasing_regions(substs, param_env, ty.skip_binder());\n \n         let def = match *item_type.kind() {\n             ty::FnDef(def_id, ..) if tcx.is_intrinsic(def_id) => {"}, {"sha": "ae14d54b859825e10c1d99a5d3453fe0a662bbd6", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -453,9 +453,10 @@ fn layout_of_uncached<'tcx>(\n                         let param_env = tcx.param_env(def.did());\n                         def.is_struct()\n                             && match def.variants().iter().next().and_then(|x| x.fields.last()) {\n-                                Some(last_field) => {\n-                                    tcx.type_of(last_field.did).is_sized(tcx, param_env)\n-                                }\n+                                Some(last_field) => tcx\n+                                    .bound_type_of(last_field.did)\n+                                    .subst_identity()\n+                                    .is_sized(tcx, param_env),\n                                 None => false,\n                             }\n                     },"}, {"sha": "01d8fb1c4cf704cc54be8197c45c1224d4899b4d", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -295,9 +295,15 @@ fn adt_drop_tys<'tcx>(\n     let adt_has_dtor =\n         |adt_def: ty::AdtDef<'tcx>| adt_def.destructor(tcx).map(|_| DtorType::Significant);\n     // `tcx.type_of(def_id)` identical to `tcx.make_adt(def, identity_substs)`\n-    drop_tys_helper(tcx, tcx.type_of(def_id), tcx.param_env(def_id), adt_has_dtor, false)\n-        .collect::<Result<Vec<_>, _>>()\n-        .map(|components| tcx.intern_type_list(&components))\n+    drop_tys_helper(\n+        tcx,\n+        tcx.bound_type_of(def_id).subst_identity(),\n+        tcx.param_env(def_id),\n+        adt_has_dtor,\n+        false,\n+    )\n+    .collect::<Result<Vec<_>, _>>()\n+    .map(|components| tcx.intern_type_list(&components))\n }\n // If `def_id` refers to a generic ADT, the queries above and below act as if they had been handed\n // a `tcx.make_ty(def, identity_substs)` and as such it is legal to substitute the generic parameters\n@@ -308,7 +314,7 @@ fn adt_significant_drop_tys(\n ) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n     drop_tys_helper(\n         tcx,\n-        tcx.type_of(def_id), // identical to `tcx.make_adt(def, identity_substs)`\n+        tcx.bound_type_of(def_id).subst_identity(), // identical to `tcx.make_adt(def, identity_substs)`\n         tcx.param_env(def_id),\n         adt_consider_insignificant_dtor(tcx),\n         true,"}, {"sha": "8df91ae2a227e85ad6730ef42f3caba91a925df5", "filename": "compiler/rustc_ty_utils/src/representability.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -31,7 +31,7 @@ fn representability(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Representability {\n             }\n             Representability::Representable\n         }\n-        DefKind::Field => representability_ty(tcx, tcx.type_of(def_id)),\n+        DefKind::Field => representability_ty(tcx, tcx.bound_type_of(def_id).subst_identity()),\n         def_kind => bug!(\"unexpected {def_kind:?}\"),\n     }\n }\n@@ -91,7 +91,11 @@ fn params_in_repr(tcx: TyCtxt<'_>, def_id: DefId) -> BitSet<u32> {\n     let mut params_in_repr = BitSet::new_empty(generics.params.len());\n     for variant in adt_def.variants() {\n         for field in variant.fields.iter() {\n-            params_in_repr_ty(tcx, tcx.type_of(field.did), &mut params_in_repr);\n+            params_in_repr_ty(\n+                tcx,\n+                tcx.bound_type_of(field.did).subst_identity(),\n+                &mut params_in_repr,\n+            );\n         }\n     }\n     params_in_repr"}, {"sha": "3854a27a1803cf6a945eb649e2a74ba86c0f2d8f", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -99,12 +99,10 @@ fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> &[Ty<'_>] {\n     }\n     let def = tcx.adt_def(def_id);\n \n-    let result = tcx.mk_type_list(\n-        def.variants()\n-            .iter()\n-            .flat_map(|v| v.fields.last())\n-            .flat_map(|f| sized_constraint_for_ty(tcx, def, tcx.type_of(f.did))),\n-    );\n+    let result =\n+        tcx.mk_type_list(def.variants().iter().flat_map(|v| v.fields.last()).flat_map(|f| {\n+            sized_constraint_for_ty(tcx, def, tcx.bound_type_of(f.did).subst_identity())\n+        }));\n \n     debug!(\"adt_sized_constraint: {:?} => {:?}\", def, result);\n \n@@ -299,7 +297,7 @@ fn well_formed_types_in_env(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Predica\n         // In an inherent impl, we assume that the receiver type and all its\n         // constituents are well-formed.\n         NodeKind::InherentImpl => {\n-            let self_ty = tcx.type_of(def_id);\n+            let self_ty = tcx.bound_type_of(def_id).subst_identity();\n             inputs.extend(self_ty.walk());\n         }\n "}, {"sha": "bfd9d6d68feb909464e6391207bc9ad11cbbf3f6", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -137,7 +137,7 @@ where\n     pub(crate) fn get_auto_trait_impls(&mut self, item_def_id: DefId) -> Vec<Item> {\n         let tcx = self.cx.tcx;\n         let param_env = tcx.param_env(item_def_id);\n-        let ty = tcx.type_of(item_def_id);\n+        let ty = tcx.bound_type_of(item_def_id).subst_identity();\n         let f = auto_trait::AutoTraitFinder::new(tcx);\n \n         debug!(\"get_auto_trait_impls({:?})\", ty);"}, {"sha": "f5b6003e2a168deeec28d4b3421741b08f269c79", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -303,7 +303,11 @@ fn build_union(cx: &mut DocContext<'_>, did: DefId) -> clean::Union {\n \n fn build_type_alias(cx: &mut DocContext<'_>, did: DefId) -> Box<clean::Typedef> {\n     let predicates = cx.tcx.explicit_predicates_of(did);\n-    let type_ = clean_middle_ty(ty::Binder::dummy(cx.tcx.type_of(did)), cx, Some(did));\n+    let type_ = clean_middle_ty(\n+        ty::Binder::dummy(cx.tcx.bound_type_of(did).subst_identity()),\n+        cx,\n+        Some(did),\n+    );\n \n     Box::new(clean::Typedef {\n         type_,\n@@ -414,7 +418,11 @@ pub(crate) fn build_impl(\n \n     let for_ = match &impl_item {\n         Some(impl_) => clean_ty(impl_.self_ty, cx),\n-        None => clean_middle_ty(ty::Binder::dummy(tcx.type_of(did)), cx, Some(did)),\n+        None => clean_middle_ty(\n+            ty::Binder::dummy(tcx.bound_type_of(did).subst_identity()),\n+            cx,\n+            Some(did),\n+        ),\n     };\n \n     // Only inline impl if the implementing type is\n@@ -652,14 +660,22 @@ pub(crate) fn print_inlined_const(tcx: TyCtxt<'_>, did: DefId) -> String {\n \n fn build_const(cx: &mut DocContext<'_>, def_id: DefId) -> clean::Constant {\n     clean::Constant {\n-        type_: clean_middle_ty(ty::Binder::dummy(cx.tcx.type_of(def_id)), cx, Some(def_id)),\n+        type_: clean_middle_ty(\n+            ty::Binder::dummy(cx.tcx.bound_type_of(def_id).subst_identity()),\n+            cx,\n+            Some(def_id),\n+        ),\n         kind: clean::ConstantKind::Extern { def_id },\n     }\n }\n \n fn build_static(cx: &mut DocContext<'_>, did: DefId, mutable: bool) -> clean::Static {\n     clean::Static {\n-        type_: clean_middle_ty(ty::Binder::dummy(cx.tcx.type_of(did)), cx, Some(did)),\n+        type_: clean_middle_ty(\n+            ty::Binder::dummy(cx.tcx.bound_type_of(did).subst_identity()),\n+            cx,\n+            Some(did),\n+        ),\n         mutability: if mutable { Mutability::Mut } else { Mutability::Not },\n         expr: None,\n     }"}, {"sha": "af91ac81a6b5d35b8534c301245bab3009e39c43", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -217,7 +217,11 @@ fn clean_lifetime<'tcx>(lifetime: &hir::Lifetime, cx: &mut DocContext<'tcx>) ->\n pub(crate) fn clean_const<'tcx>(constant: &hir::ConstArg, cx: &mut DocContext<'tcx>) -> Constant {\n     let def_id = cx.tcx.hir().body_owner_def_id(constant.value.body).to_def_id();\n     Constant {\n-        type_: clean_middle_ty(ty::Binder::dummy(cx.tcx.type_of(def_id)), cx, Some(def_id)),\n+        type_: clean_middle_ty(\n+            ty::Binder::dummy(cx.tcx.bound_type_of(def_id).subst_identity()),\n+            cx,\n+            Some(def_id),\n+        ),\n         kind: ConstantKind::Anonymous { body: constant.value.body },\n     }\n }\n@@ -482,7 +486,7 @@ fn clean_generic_param_def<'tcx>(\n         ty::GenericParamDefKind::Type { has_default, synthetic, .. } => {\n             let default = if has_default {\n                 Some(clean_middle_ty(\n-                    ty::Binder::dummy(cx.tcx.type_of(def.def_id)),\n+                    ty::Binder::dummy(cx.tcx.bound_type_of(def.def_id).subst_identity()),\n                     cx,\n                     Some(def.def_id),\n                 ))\n@@ -504,7 +508,7 @@ fn clean_generic_param_def<'tcx>(\n             GenericParamDefKind::Const {\n                 did: def.def_id,\n                 ty: Box::new(clean_middle_ty(\n-                    ty::Binder::dummy(cx.tcx.type_of(def.def_id)),\n+                    ty::Binder::dummy(cx.tcx.bound_type_of(def.def_id).subst_identity()),\n                     cx,\n                     Some(def.def_id),\n                 )),\n@@ -1214,7 +1218,7 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n     let kind = match assoc_item.kind {\n         ty::AssocKind::Const => {\n             let ty = clean_middle_ty(\n-                ty::Binder::dummy(tcx.type_of(assoc_item.def_id)),\n+                ty::Binder::dummy(tcx.bound_type_of(assoc_item.def_id).subst_identity()),\n                 cx,\n                 Some(assoc_item.def_id),\n             );\n@@ -1253,7 +1257,9 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n \n             if assoc_item.fn_has_self_parameter {\n                 let self_ty = match assoc_item.container {\n-                    ty::ImplContainer => tcx.type_of(assoc_item.container_id(tcx)),\n+                    ty::ImplContainer => {\n+                        tcx.bound_type_of(assoc_item.container_id(tcx)).subst_identity()\n+                    }\n                     ty::TraitContainer => tcx.types.self_param,\n                 };\n                 let self_arg_ty = sig.input(0).skip_binder();\n@@ -1400,7 +1406,9 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n                     AssocTypeItem(\n                         Box::new(Typedef {\n                             type_: clean_middle_ty(\n-                                ty::Binder::dummy(tcx.type_of(assoc_item.def_id)),\n+                                ty::Binder::dummy(\n+                                    tcx.bound_type_of(assoc_item.def_id).subst_identity(),\n+                                ),\n                                 cx,\n                                 Some(assoc_item.def_id),\n                             ),\n@@ -1418,7 +1426,9 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n                 AssocTypeItem(\n                     Box::new(Typedef {\n                         type_: clean_middle_ty(\n-                            ty::Binder::dummy(tcx.type_of(assoc_item.def_id)),\n+                            ty::Binder::dummy(\n+                                tcx.bound_type_of(assoc_item.def_id).subst_identity(),\n+                            ),\n                             cx,\n                             Some(assoc_item.def_id),\n                         ),\n@@ -1928,7 +1938,11 @@ pub(crate) fn clean_middle_field<'tcx>(field: &ty::FieldDef, cx: &mut DocContext\n     clean_field_with_def_id(\n         field.did,\n         field.name,\n-        clean_middle_ty(ty::Binder::dummy(cx.tcx.type_of(field.did)), cx, Some(field.did)),\n+        clean_middle_ty(\n+            ty::Binder::dummy(cx.tcx.bound_type_of(field.did).subst_identity()),\n+            cx,\n+            Some(field.did),\n+        ),\n         cx,\n     )\n }\n@@ -2375,9 +2389,11 @@ fn clean_impl<'tcx>(\n \n     let for_ = clean_ty(impl_.self_ty, cx);\n     let type_alias = for_.def_id(&cx.cache).and_then(|did| match tcx.def_kind(did) {\n-        DefKind::TyAlias => {\n-            Some(clean_middle_ty(ty::Binder::dummy(tcx.type_of(did)), cx, Some(did)))\n-        }\n+        DefKind::TyAlias => Some(clean_middle_ty(\n+            ty::Binder::dummy(tcx.bound_type_of(did).subst_identity()),\n+            cx,\n+            Some(did),\n+        )),\n         _ => None,\n     });\n     let mut make_item = |trait_: Option<Path>, for_: Type, items: Vec<Item>| {"}, {"sha": "601ef6a05543154ee2aca8cfe7251f9402ff904b", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -266,7 +266,7 @@ pub(crate) fn print_evaluated_const(\n     underscores_and_type: bool,\n ) -> Option<String> {\n     tcx.const_eval_poly(def_id).ok().and_then(|val| {\n-        let ty = tcx.type_of(def_id);\n+        let ty = tcx.bound_type_of(def_id).subst_identity();\n         match (val, ty.kind()) {\n             (_, &ty::Ref(..)) => None,\n             (ConstValue::Scalar(_), &ty::Adt(_, _)) => None,"}, {"sha": "d4b8b64d5b60bf87e601eaa0f5c23590d472db99", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -453,7 +453,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                 | clean::BorrowedRef { type_: box clean::Type::Path { ref path }, .. } => {\n                     dids.insert(path.def_id());\n                     if let Some(generics) = path.generics() &&\n-                        let ty::Adt(adt, _) = self.tcx.type_of(path.def_id()).kind() &&\n+                        let ty::Adt(adt, _) = self.tcx.bound_type_of(path.def_id()).subst_identity().kind() &&\n                         adt.is_fundamental() {\n                         for ty in generics {\n                             if let Some(did) = ty.def_id(self.cache) {"}, {"sha": "232d88339dceb253ec597c11285b94e93d2e42ee", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -1855,7 +1855,7 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n \n     let tcx = cx.tcx();\n     let param_env = tcx.param_env(ty_def_id);\n-    let ty = tcx.type_of(ty_def_id);\n+    let ty = tcx.bound_type_of(ty_def_id).subst_identity();\n     match tcx.layout_of(param_env.and(ty)) {\n         Ok(ty_layout) => {\n             writeln!("}, {"sha": "5d6e00027e8bfd2144ef2ae0fbc72e950a305269", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -293,7 +293,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         let ty_res = self.resolve_path(&path, TypeNS, item_id, module_id).ok_or_else(no_res)?;\n \n         match ty_res {\n-            Res::Def(DefKind::Enum, did) => match tcx.type_of(did).kind() {\n+            Res::Def(DefKind::Enum, did) => match tcx.bound_type_of(did).subst_identity().kind() {\n                 ty::Adt(def, _) if def.is_enum() => {\n                     if let Some(variant) = def.variants().iter().find(|v| v.name == variant_name)\n                         && let Some(field) = variant.fields.iter().find(|f| f.name == variant_field_name) {\n@@ -471,7 +471,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n     /// This is used for resolving type aliases.\n     fn def_id_to_res(&self, ty_id: DefId) -> Option<Res> {\n         use PrimitiveType::*;\n-        Some(match *self.cx.tcx.type_of(ty_id).kind() {\n+        Some(match *self.cx.tcx.bound_type_of(ty_id).subst_identity().kind() {\n             ty::Bool => Res::Primitive(Bool),\n             ty::Char => Res::Primitive(Char),\n             ty::Int(ity) => Res::Primitive(ity.into()),\n@@ -572,7 +572,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 debug!(\"looking for associated item named {} for item {:?}\", item_name, did);\n                 // Checks if item_name is a variant of the `SomeItem` enum\n                 if ns == TypeNS && def_kind == DefKind::Enum {\n-                    match tcx.type_of(did).kind() {\n+                    match tcx.bound_type_of(did).subst_identity().kind() {\n                         ty::Adt(adt_def, _) => {\n                             for variant in adt_def.variants() {\n                                 if variant.name == item_name {\n@@ -606,7 +606,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     // something like [`ambi_fn`](<SomeStruct as SomeTrait>::ambi_fn)\n                     .or_else(|| {\n                         resolve_associated_trait_item(\n-                            tcx.type_of(did),\n+                            tcx.bound_type_of(did).subst_identity(),\n                             module_id,\n                             item_name,\n                             ns,\n@@ -639,7 +639,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 // they also look like associated items (`module::Type::Variant`),\n                 // because they are real Rust syntax (unlike the intra-doc links\n                 // field syntax) and are handled by the compiler's resolver.\n-                let def = match tcx.type_of(did).kind() {\n+                let def = match tcx.bound_type_of(did).subst_identity().kind() {\n                     ty::Adt(def, _) if !def.is_enum() => def,\n                     _ => return None,\n                 };"}, {"sha": "717b4f88a850638d796a7e4289643850b961292f", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -109,7 +109,7 @@ pub(crate) fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) ->\n                     // `Generics`. To avoid relying on the `impl` block, these\n                     // things would need to be created from wholecloth, in a\n                     // form that is valid for use in type inference.\n-                    let ty = tcx.type_of(def_id);\n+                    let ty = tcx.bound_type_of(def_id).subst_identity();\n                     match ty.kind() {\n                         ty::Slice(ty)\n                         | ty::Ref(_, ty, _)"}, {"sha": "14c066da9dcea40419f5b2a30dd64e7eabf86be5", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -169,7 +169,7 @@ where\n                 };\n \n                 let ident_span = path.ident.span;\n-                (tcx.type_of(def_id), call_span, ident_span)\n+                (tcx.bound_type_of(def_id).subst_identity(), call_span, ident_span)\n             }\n             _ => {\n                 return;"}, {"sha": "58d4cfff06f50cc50f7b92cd0c4c3ec4e211b3a0", "filename": "src/tools/clippy/clippy_lints/src/casts/cast_ptr_alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -66,7 +66,7 @@ fn is_used_as_unaligned(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n             if matches!(name.ident.as_str(), \"read_unaligned\" | \"write_unaligned\")\n                 && let Some(def_id) = cx.typeck_results().type_dependent_def_id(parent.hir_id)\n                 && let Some(def_id) = cx.tcx.impl_of_method(def_id)\n-                && cx.tcx.type_of(def_id).is_unsafe_ptr()\n+                && cx.tcx.bound_type_of(def_id).subst_identity().is_unsafe_ptr()\n             {\n                 true\n             } else {"}, {"sha": "023f9e64deb922a59774ffef909d96e20793adda", "filename": "src/tools/clippy/clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -43,7 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for CopyIterator {\n                 of_trait: Some(ref trait_ref),\n                 ..\n             }) = item.kind;\n-            let ty = cx.tcx.type_of(item.owner_id);\n+            let ty = cx.tcx.bound_type_of(item.owner_id).subst_identity();\n             if is_copy(cx, ty);\n             if let Some(trait_id) = trait_ref.trait_def_id();\n             if cx.tcx.is_diagnostic_item(sym::Iterator, trait_id);"}, {"sha": "b6b7eaae0686b9f81763e0a564b0f381996dc6a2", "filename": "src/tools/clippy/clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -150,7 +150,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                     .fields\n                     .iter()\n                     .all(|field| {\n-                        is_copy(cx, cx.tcx.type_of(field.did))\n+                        is_copy(cx, cx.tcx.bound_type_of(field.did).subst_identity())\n                     });\n                 if !has_drop(cx, binding_type) || all_fields_are_copy;\n                 then {"}, {"sha": "e368efe944cff53064c1f9a666e0c385d71c3452", "filename": "src/tools/clippy/clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -167,7 +167,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n                                     .iter()\n                                     .find_map(|f_def| {\n                                         if f_def.ident(self.cx.tcx) == field.ident\n-                                            { Some(self.cx.tcx.type_of(f_def.did)) }\n+                                            { Some(self.cx.tcx.bound_type_of(f_def.did).subst_identity()) }\n                                         else { None }\n                                     });\n                             self.ty_bounds.push(bound.into());"}, {"sha": "4c9f4f7f8ccac21ae96a95d3f6766d8874c9ec7e", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -735,7 +735,7 @@ fn walk_parents<'tcx>(\n                 span,\n                 ..\n             }) if span.ctxt() == ctxt => {\n-                let ty = cx.tcx.type_of(owner_id.def_id);\n+                let ty = cx.tcx.bound_type_of(owner_id.def_id).subst_identity();\n                 Some(ty_auto_deref_stability(cx, ty, precedence).position_for_result(cx))\n             },\n \n@@ -771,7 +771,7 @@ fn walk_parents<'tcx>(\n                 }) => variant_of_res(cx, cx.qpath_res(path, *hir_id))\n                     .and_then(|variant| variant.fields.iter().find(|f| f.name == field.ident.name))\n                     .map(|field_def| {\n-                        ty_auto_deref_stability(cx, cx.tcx.type_of(field_def.did), precedence).position_for_arg()\n+                        ty_auto_deref_stability(cx, cx.tcx.bound_type_of(field_def.did).subst_identity(), precedence).position_for_arg()\n                     }),\n                 _ => None,\n             },"}, {"sha": "f1d2db4487189a74208f620566c7483ee1dda29f", "filename": "src/tools/clippy/clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderivable_impls.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -184,7 +184,7 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n             if let Some(Node::ImplItem(impl_item)) = cx.tcx.hir().find(impl_item_hir);\n             if let ImplItemKind::Fn(_, b) = &impl_item.kind;\n             if let Body { value: func_expr, .. } = cx.tcx.hir().body(*b);\n-            if let Some(adt_def) = cx.tcx.type_of(item.owner_id).ty_adt_def();\n+            if let Some(adt_def) = cx.tcx.bound_type_of(item.owner_id).subst_identity().ty_adt_def();\n             if let attrs = cx.tcx.hir().attrs(item.hir_id());\n             if !attrs.iter().any(|attr| attr.doc_str().is_some());\n             if let child_attrs = cx.tcx.hir().attrs(impl_item_hir);"}, {"sha": "0181b164f057e2ffa186e9d218d6cae9fb710b26", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -211,7 +211,7 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n             ..\n         }) = item.kind\n         {\n-            let ty = cx.tcx.type_of(item.owner_id);\n+            let ty = cx.tcx.bound_type_of(item.owner_id).subst_identity();\n             let is_automatically_derived = cx.tcx.has_attr(item.owner_id.to_def_id(), sym::automatically_derived);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n@@ -347,7 +347,7 @@ fn check_copy_clone<'tcx>(cx: &LateContext<'tcx>, item: &Item<'_>, trait_ref: &h\n             let has_copy_impl = cx.tcx.all_local_trait_impls(()).get(&copy_id).map_or(false, |impls| {\n                 impls\n                     .iter()\n-                    .any(|&id| matches!(cx.tcx.type_of(id).kind(), ty::Adt(adt, _) if ty_adt.did() == adt.did()))\n+                    .any(|&id| matches!(cx.tcx.bound_type_of(id).subst_identity().kind(), ty::Adt(adt, _) if ty_adt.did() == adt.did()))\n             });\n             if !has_copy_impl {\n                 return;"}, {"sha": "8c0112ca4a1cbfdf9c473056cb33c15f20095125", "filename": "src/tools/clippy/clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_enum.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for EmptyEnum {\n         }\n \n         if let ItemKind::Enum(..) = item.kind {\n-            let ty = cx.tcx.type_of(item.owner_id);\n+            let ty = cx.tcx.bound_type_of(item.owner_id).subst_identity();\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n             if adt.variants().is_empty() {\n                 span_lint_and_help("}, {"sha": "e5289c177f3e95082503c7d4f331c0aa1eaafa34", "filename": "src/tools/clippy/clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_clike.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -45,7 +45,7 @@ impl<'tcx> LateLintPass<'tcx> for UnportableVariant {\n             for var in def.variants {\n                 if let Some(anon_const) = &var.disr_expr {\n                     let def_id = cx.tcx.hir().body_owner_def_id(anon_const.body);\n-                    let mut ty = cx.tcx.type_of(def_id.to_def_id());\n+                    let mut ty = cx.tcx.bound_type_of(def_id.to_def_id()).subst_identity();\n                     let constant = cx\n                         .tcx\n                         .const_eval_poly(def_id.to_def_id())"}, {"sha": "a41ad735fb8107046fe08fa7a5ddaad4cca33fae", "filename": "src/tools/clippy/clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -108,7 +108,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             if check_inputs(cx, body.params, None, args);\n             let callee_ty = cx.typeck_results().expr_ty_adjusted(callee);\n             let call_ty = cx.typeck_results().type_dependent_def_id(body.value.hir_id)\n-                .map_or(callee_ty, |id| cx.tcx.type_of(id));\n+                .map_or(callee_ty, |id| cx.tcx.bound_type_of(id).subst_identity());\n             if check_sig(cx, closure_ty, call_ty);\n             let substs = cx.typeck_results().node_substs(callee.hir_id);\n             // This fixes some false positives that I don't entirely understand\n@@ -233,7 +233,7 @@ fn get_ufcs_type_name<'tcx>(cx: &LateContext<'tcx>, method_def_id: DefId, substs\n     match assoc_item.container {\n         ty::TraitContainer => cx.tcx.def_path_str(def_id),\n         ty::ImplContainer => {\n-            let ty = cx.tcx.type_of(def_id);\n+            let ty = cx.tcx.bound_type_of(def_id).skip_binder();\n             match ty.kind() {\n                 ty::Adt(adt, _) => cx.tcx.def_path_str(adt.did()),\n                 ty::Array(..)"}, {"sha": "1405316c9bc07b0c3de73da94b05e954900b5fed", "filename": "src/tools/clippy/clippy_lints/src/functions/misnamed_getters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -101,7 +101,7 @@ pub fn check_fn(cx: &LateContext<'_>, kind: FnKind<'_>, decl: &FnDecl<'_>, body:\n         return;\n     };\n \n-    if cx.tcx.type_of(used_field.did) == cx.tcx.type_of(correct_field.did) {\n+    if cx.tcx.bound_type_of(used_field.did) == cx.tcx.bound_type_of(correct_field.did) {\n         let left_span = block_expr.span.until(used_ident.span);\n         let snippet = snippet(cx, left_span, \"..\");\n         let sugg = format!(\"{snippet}{name}\");"}, {"sha": "bff3cd4e3a19b47a8818f482e1c1e726b626d32e", "filename": "src/tools/clippy/clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -102,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                             if let Some(const_id) = cx.typeck_results().type_dependent_def_id(cond_num_val.hir_id);\n                             if let Some(impl_id) = cx.tcx.impl_of_method(const_id);\n                             if let None = cx.tcx.impl_trait_ref(impl_id); // An inherent impl\n-                            if cx.tcx.type_of(impl_id).is_integral();\n+                            if cx.tcx.bound_type_of(impl_id).subst_identity().is_integral();\n                             then {\n                                 print_lint_and_sugg(cx, var_name, expr)\n                             }\n@@ -115,7 +115,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                             if let Some(func_id) = cx.typeck_results().type_dependent_def_id(func.hir_id);\n                             if let Some(impl_id) = cx.tcx.impl_of_method(func_id);\n                             if let None = cx.tcx.impl_trait_ref(impl_id); // An inherent impl\n-                            if cx.tcx.type_of(impl_id).is_integral();\n+                            if cx.tcx.bound_type_of(impl_id).subst_identity().is_integral();\n                             then {\n                                 print_lint_and_sugg(cx, var_name, expr)\n                             }"}, {"sha": "1a959809073e5d42eadacf474e6a665a25df89af", "filename": "src/tools/clippy/clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -66,7 +66,8 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n             )\n         }) {\n             for impl_id in impl_ids.iter().map(|id| id.expect_local()) {\n-                match type_map.entry(cx.tcx.type_of(impl_id)) {\n+                let impl_ty = cx.tcx.bound_type_of(impl_id).subst_identity();\n+                match type_map.entry(impl_ty) {\n                     Entry::Vacant(e) => {\n                         // Store the id for the first impl block of this type. The span is retrieved lazily.\n                         e.insert(IdOrSpan::Id(impl_id));"}, {"sha": "a7c526692bb73a00e9af9bf10c098eab228e497a", "filename": "src/tools/clippy/clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -83,7 +83,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n             return;\n         }\n         if let ItemKind::Enum(ref def, _) = item.kind {\n-            let ty = cx.tcx.type_of(item.owner_id);\n+            let ty = cx.tcx.bound_type_of(item.owner_id).subst_identity();\n             let Adt(adt, subst) = ty.kind() else {\n                 panic!(\"already checked whether this is an enum\")\n             };"}, {"sha": "e3e4c9a5bbe85888c342b0faa26ad8ea04ff5e2e", "filename": "src/tools/clippy/clippy_lints/src/matches/rest_pat_in_fully_bound_struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Frest_pat_in_fully_bound_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Frest_pat_in_fully_bound_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Frest_pat_in_fully_bound_struct.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -10,7 +10,7 @@ pub(crate) fn check(cx: &LateContext<'_>, pat: &Pat<'_>) {\n         if !pat.span.from_expansion();\n         if let PatKind::Struct(QPath::Resolved(_, path), fields, true) = pat.kind;\n         if let Some(def_id) = path.res.opt_def_id();\n-        let ty = cx.tcx.type_of(def_id);\n+        let ty = cx.tcx.bound_type_of(def_id).subst_identity();\n         if let ty::Adt(def, _) = ty.kind();\n         if def.is_struct() || def.is_union();\n         if fields.len() == def.non_enum_variant().fields.len();"}, {"sha": "5b27145ac2266a7883e4be7f32bc763d3fefab3f", "filename": "src/tools/clippy/clippy_lints/src/methods/bytes_count_to_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbytes_count_to_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbytes_count_to_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbytes_count_to_len.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -17,7 +17,7 @@ pub(super) fn check<'tcx>(\n     if_chain! {\n         if let Some(bytes_id) = cx.typeck_results().type_dependent_def_id(count_recv.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(bytes_id);\n-        if cx.tcx.type_of(impl_id).is_str();\n+        if cx.tcx.bound_type_of(impl_id).subst_identity().is_str();\n         let ty = cx.typeck_results().expr_ty(bytes_recv).peel_refs();\n         if ty.is_str() || is_type_lang_item(cx, ty, hir::LangItem::String);\n         then {"}, {"sha": "052f2097899f790a0d10a72836257070fcc7552a", "filename": "src/tools/clippy/clippy_lints/src/methods/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -30,7 +30,7 @@ pub(super) fn check<'tcx>(\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if cx.tcx.type_of(impl_id).is_str();\n+        if cx.tcx.bound_type_of(impl_id).subst_identity().is_str();\n         if let ExprKind::Lit(Spanned { node: LitKind::Str(ext_literal, ..), ..}) = arg.kind;\n         if (2..=6).contains(&ext_literal.as_str().len());\n         let ext_str = ext_literal.as_str();"}, {"sha": "a29c008e3d03829cfcd7631412e7db5b4db9dddc", "filename": "src/tools/clippy/clippy_lints/src/methods/get_first.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fget_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fget_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fget_first.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -19,7 +19,7 @@ pub(super) fn check<'tcx>(\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if cx.tcx.type_of(impl_id).is_slice();\n+        if cx.tcx.bound_type_of(impl_id).subst_identity().is_slice();\n         if let Some(_) = is_slice_of_primitives(cx, recv);\n         if let hir::ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = arg.kind;\n         then {"}, {"sha": "0065806ba2da820e4ad16be49f3235343e108f36", "filename": "src/tools/clippy/clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -53,7 +53,7 @@ pub fn is_clone_like(cx: &LateContext<'_>, method_name: &str, method_def_id: hir\n         \"to_vec\" => cx\n             .tcx\n             .impl_of_method(method_def_id)\n-            .filter(|&impl_did| cx.tcx.type_of(impl_did).is_slice() && cx.tcx.impl_trait_ref(impl_did).is_none())\n+            .filter(|&impl_did| cx.tcx.bound_type_of(impl_did).subst_identity().is_slice() && cx.tcx.impl_trait_ref(impl_did).is_none())\n             .is_some(),\n         _ => false,\n     }"}, {"sha": "b780a66374e9a2dd1b2b8ee0458aff94ab5b2ca2", "filename": "src/tools/clippy/clippy_lints/src/methods/manual_ok_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -21,7 +21,7 @@ pub(super) fn check<'tcx>(\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Option);\n+        if is_type_diagnostic_item(cx, cx.tcx.bound_type_of(impl_id).subst_identity(), sym::Option);\n         if let ExprKind::Call(err_path, [err_arg]) = or_expr.kind;\n         if is_res_lang_ctor(cx, path_res(cx, err_path), ResultErr);\n         if is_ok_wrapping(cx, map_expr);"}, {"sha": "57004b4aea47950d41d16c519c6103428f2b299d", "filename": "src/tools/clippy/clippy_lints/src/methods/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -19,7 +19,7 @@ pub(super) fn check(cx: &LateContext<'_>, e: &hir::Expr<'_>, recv: &hir::Expr<'_\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id);\n         if cx.tcx.impl_of_method(method_id)\n-            .map_or(false, |id| is_type_diagnostic_item(cx, cx.tcx.type_of(id), sym::Option))\n+            .map_or(false, |id| is_type_diagnostic_item(cx, cx.tcx.bound_type_of(id).subst_identity(), sym::Option))\n             || is_diag_trait_item(cx, method_id, sym::Iterator);\n         if let hir::ExprKind::Closure(&hir::Closure{ body, .. }) = arg.kind;\n         then {"}, {"sha": "71fc5341b702ab076d3bf1b81b6267ae0b9d96b7", "filename": "src/tools/clippy/clippy_lints/src/methods/map_err_ignore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_err_ignore.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -9,7 +9,7 @@ use super::MAP_ERR_IGNORE;\n pub(super) fn check(cx: &LateContext<'_>, e: &Expr<'_>, arg: &Expr<'_>) {\n     if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id)\n         && let Some(impl_id) = cx.tcx.impl_of_method(method_id)\n-        && is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Result)\n+        && is_type_diagnostic_item(cx, cx.tcx.bound_type_of(impl_id).subst_identity(), sym::Result)\n         && let ExprKind::Closure(&Closure {\n             capture_clause: CaptureBy::Ref,\n             body,"}, {"sha": "a665f48c151d3e23de9daa28c2c018ec7e35de90", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -3349,7 +3349,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         let name = impl_item.ident.name.as_str();\n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let item = cx.tcx.hir().expect_item(parent);\n-        let self_ty = cx.tcx.type_of(item.owner_id);\n+        let self_ty = cx.tcx.bound_type_of(item.owner_id).subst_identity();\n \n         let implements_trait = matches!(item.kind, hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }));\n         if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind {"}, {"sha": "aa1a4c8075b8ca775f849d2061f6a186ac5599cc", "filename": "src/tools/clippy/clippy_lints/src/methods/mut_mutex_lock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmut_mutex_lock.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -15,7 +15,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, ex: &'tcx Expr<'tcx>, recv: &'\n         if let ty::Ref(_, _, Mutability::Mut) = cx.typeck_results().expr_ty(recv).kind();\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(ex.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Mutex);\n+        if is_type_diagnostic_item(cx, cx.tcx.bound_type_of(impl_id).subst_identity(), sym::Mutex);\n         then {\n             span_lint_and_sugg(\n                 cx,"}, {"sha": "e77bc6af47347c9dd8ef52aa9b2015422de159eb", "filename": "src/tools/clippy/clippy_lints/src/methods/open_options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -11,7 +11,7 @@ use super::NONSENSICAL_OPEN_OPTIONS;\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, recv: &'tcx Expr<'_>) {\n     if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id)\n         && let Some(impl_id) = cx.tcx.impl_of_method(method_id)\n-        && match_type(cx, cx.tcx.type_of(impl_id), &paths::OPEN_OPTIONS)\n+        && match_type(cx, cx.tcx.bound_type_of(impl_id).subst_identity(), &paths::OPEN_OPTIONS)\n     {\n         let mut options = Vec::new();\n         get_open_options(cx, recv, &mut options);"}, {"sha": "4522bf453902551045cd8a34e0e10c2b5b3b8b61", "filename": "src/tools/clippy/clippy_lints/src/methods/path_buf_push_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -14,7 +14,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arg: &'t\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::PathBuf);\n+        if is_type_diagnostic_item(cx, cx.tcx.bound_type_of(impl_id).subst_identity(), sym::PathBuf);\n         if let ExprKind::Lit(ref lit) = arg.kind;\n         if let LitKind::Str(ref path_lit, _) = lit.node;\n         if let pushed_path = Path::new(path_lit.as_str());"}, {"sha": "6a0bf1560c33c16da609ad4d4f689ce2bc346e2e", "filename": "src/tools/clippy/clippy_lints/src/methods/stable_sort_primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstable_sort_primitive.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -10,7 +10,7 @@ use super::STABLE_SORT_PRIMITIVE;\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, recv: &'tcx Expr<'_>) {\n     if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id)\n         && let Some(impl_id) = cx.tcx.impl_of_method(method_id)\n-        && cx.tcx.type_of(impl_id).is_slice()\n+        && cx.tcx.bound_type_of(impl_id).subst_identity().is_slice()\n         && let Some(slice_type) = is_slice_of_primitives(cx, recv)\n     {\n         span_lint_and_then("}, {"sha": "17f422d0e69946d93e556cf7abce9d2fce9e5b64", "filename": "src/tools/clippy/clippy_lints/src/methods/suspicious_splitn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -13,7 +13,7 @@ pub(super) fn check(cx: &LateContext<'_>, method_name: &str, expr: &Expr<'_>, se\n         if let Some(call_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(call_id);\n         if cx.tcx.impl_trait_ref(impl_id).is_none();\n-        let self_ty = cx.tcx.type_of(impl_id);\n+        let self_ty = cx.tcx.bound_type_of(impl_id).subst_identity();\n         if self_ty.is_slice() || self_ty.is_str();\n         then {\n             // Ignore empty slice and string literals when used with a literal count."}, {"sha": "436e637201a0d52587ba8182f1c5509a0edbf7bd", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_sort_by.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -122,7 +122,7 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, arg: &Exp\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if cx.tcx.type_of(impl_id).is_slice();\n+        if cx.tcx.bound_type_of(impl_id).subst_identity().is_slice();\n         if let ExprKind::Closure(&Closure { body, .. }) = arg.kind;\n         if let closure_body = cx.tcx.hir().body(body);\n         if let &["}, {"sha": "5959fdb6625fd661c71437389e520e6a103aad51", "filename": "src/tools/clippy/clippy_lints/src/methods/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Futils.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -143,7 +143,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for CloneOrCopyVisitor<'cx, 'tcx> {\n                         if_chain! {\n                             if args.iter().all(|arg| !self.is_binding(arg));\n                             if let Some(method_def_id) = self.cx.typeck_results().type_dependent_def_id(parent.hir_id);\n-                            let method_ty = self.cx.tcx.type_of(method_def_id);\n+                            let method_ty = self.cx.tcx.bound_type_of(method_def_id).subst_identity();\n                             let self_ty = method_ty.fn_sig(self.cx.tcx).input(0).skip_binder();\n                             if matches!(self_ty.kind(), ty::Ref(_, _, Mutability::Not));\n                             then {"}, {"sha": "8c461b2629d7053e2057059bb6519fa7f1a7ba99", "filename": "src/tools/clippy/clippy_lints/src/methods/vec_resize_to_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fvec_resize_to_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fvec_resize_to_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fvec_resize_to_zero.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -20,7 +20,7 @@ pub(super) fn check<'tcx>(\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Vec);\n+        if is_type_diagnostic_item(cx, cx.tcx.bound_type_of(impl_id).subst_identity(), sym::Vec);\n         if let ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = count_arg.kind;\n         if let ExprKind::Lit(Spanned { node: LitKind::Int(..), .. }) = default_arg.kind;\n         then {"}, {"sha": "47dc4b276a271b807319c00c86f67c7f37ca6cf5", "filename": "src/tools/clippy/clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -98,14 +98,15 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             if name == sym::new;\n                             if cx.effective_visibilities.is_reachable(impl_item.owner_id.def_id);\n                             let self_def_id = cx.tcx.hir().get_parent_item(id.into());\n-                            let self_ty = cx.tcx.type_of(self_def_id);\n+                            let self_ty = cx.tcx.bound_type_of(self_def_id).subst_identity();\n                             if self_ty == return_ty(cx, id);\n                             if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n                             then {\n                                 if self.impling_types.is_none() {\n                                     let mut impls = HirIdSet::default();\n                                     cx.tcx.for_each_impl(default_trait_id, |d| {\n-                                        if let Some(ty_def) = cx.tcx.type_of(d).ty_adt_def() {\n+                                        let ty = cx.tcx.bound_type_of(d).subst_identity();\n+                                        if let Some(ty_def) = ty.ty_adt_def() {\n                                             if let Some(local_def_id) = ty_def.did().as_local() {\n                                                 impls.insert(cx.tcx.hir().local_def_id_to_hir_id(local_def_id));\n                                             }\n@@ -118,7 +119,8 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                                 // generics\n                                 if_chain! {\n                                     if let Some(ref impling_types) = self.impling_types;\n-                                    if let Some(self_def) = cx.tcx.type_of(self_def_id).ty_adt_def();\n+                                    let self_def = cx.tcx.bound_type_of(self_def_id).subst_identity();\n+                                    if let Some(self_def) = self_def.ty_adt_def();\n                                     if let Some(self_local_did) = self_def.did().as_local();\n                                     let self_id = cx.tcx.hir().local_def_id_to_hir_id(self_local_did);\n                                     if impling_types.contains(&self_id);"}, {"sha": "a076bed50d1b7fcff50a04339199b13e6795dda4", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -313,7 +313,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                                 // and, in that case, the definition is *not* generic.\n                                 cx.tcx.normalize_erasing_regions(\n                                     cx.tcx.param_env(of_trait_def_id),\n-                                    cx.tcx.type_of(of_assoc_item),\n+                                    cx.tcx.bound_type_of(of_assoc_item).subst_identity(),\n                                 ),\n                             ))\n                             .is_err();"}, {"sha": "df834962673d366e81e0cde2a46edd698e553a47", "filename": "src/tools/clippy/clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n \n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let item = cx.tcx.hir().expect_item(parent);\n-        let self_ty = cx.tcx.type_of(item.owner_id);\n+        let self_ty = cx.tcx.bound_type_of(item.owner_id).subst_identity();\n         let ret_ty = return_ty(cx, impl_item.owner_id);\n \n         // Do not check trait impls"}, {"sha": "a50b38c54dca42324b302facfbd425a5c14102a4", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -218,7 +218,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             } else {\n                 hir_ty_to_ty(cx.tcx, hir_ty)\n             };\n-            if same_type_and_consts(ty, cx.tcx.type_of(impl_id));\n+            if same_type_and_consts(ty, cx.tcx.bound_type_of(impl_id).subst_identity());\n             then {\n                 span_lint(cx, hir_ty.span);\n             }\n@@ -230,7 +230,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if !expr.span.from_expansion();\n             if self.msrv.meets(msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n-            if cx.typeck_results().expr_ty(expr) == cx.tcx.type_of(impl_id);\n+            if cx.typeck_results().expr_ty(expr) == cx.tcx.bound_type_of(impl_id).subst_identity();\n             then {} else { return; }\n         }\n         match expr.kind {\n@@ -254,7 +254,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if let PatKind::Path(QPath::Resolved(_, path))\n                  | PatKind::TupleStruct(QPath::Resolved(_, path), _, _)\n                  | PatKind::Struct(QPath::Resolved(_, path), _, _) = pat.kind;\n-            if cx.typeck_results().pat_ty(pat) == cx.tcx.type_of(impl_id);\n+            if cx.typeck_results().pat_ty(pat) == cx.tcx.bound_type_of(impl_id).subst_identity();\n             then {\n                 check_path(cx, path);\n             }"}, {"sha": "f62bfa4f221700fbe105aa507eed2708bd3ce6f2", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/interning_defined_symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finterning_defined_symbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finterning_defined_symbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finterning_defined_symbol.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n                 for item in cx.tcx.module_children(def_id).iter() {\n                     if_chain! {\n                         if let Res::Def(DefKind::Const, item_def_id) = item.res;\n-                        let ty = cx.tcx.type_of(item_def_id);\n+                        let ty = cx.tcx.bound_type_of(item_def_id).subst_identity();\n                         if match_type(cx, ty, &paths::SYMBOL);\n                         if let Ok(ConstValue::Scalar(value)) = cx.tcx.const_eval_poly(item_def_id);\n                         if let Ok(value) = value.to_u32();"}, {"sha": "3249b8633914a4515fa69896d293a89eabfb000a", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/msrv_attr_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmsrv_attr_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmsrv_attr_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmsrv_attr_impl.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -38,7 +38,8 @@ impl LateLintPass<'_> for MsrvAttrImpl {\n             if self_ty_def.is_struct();\n             if self_ty_def.all_fields().any(|f| {\n                 cx.tcx\n-                    .type_of(f.did)\n+                    .bound_type_of(f.did)\n+                    .subst_identity()\n                     .walk()\n                     .filter(|t| matches!(t.unpack(), GenericArgKind::Type(_)))\n                     .any(|t| match_type(cx, t.expect_ty(), &paths::MSRV))"}, {"sha": "3f08566dbcc75e6301f459835eac385759d3034a", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/unnecessary_def_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -229,11 +229,11 @@ fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Ve\n             Res::Def(DefKind::Static(_), def_id) => read_mir_alloc_def_path(\n                 cx,\n                 cx.tcx.eval_static_initializer(def_id).ok()?.inner(),\n-                cx.tcx.type_of(def_id),\n+                cx.tcx.bound_type_of(def_id).subst_identity(),\n             ),\n             Res::Def(DefKind::Const, def_id) => match cx.tcx.const_eval_poly(def_id).ok()? {\n                 ConstValue::ByRef { alloc, offset } if offset.bytes() == 0 => {\n-                    read_mir_alloc_def_path(cx, alloc.inner(), cx.tcx.type_of(def_id))\n+                    read_mir_alloc_def_path(cx, alloc.inner(), cx.tcx.bound_type_of(def_id).subst_identity())\n                 },\n                 _ => None,\n             },"}, {"sha": "97b2cc382b0d61a7215e84d898f50ccef4b690d9", "filename": "src/tools/clippy/clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -50,7 +50,7 @@ fn fn_eagerness(cx: &LateContext<'_>, fn_id: DefId, name: Symbol, have_one_arg:\n     let name = name.as_str();\n \n     let ty = match cx.tcx.impl_of_method(fn_id) {\n-        Some(id) => cx.tcx.type_of(id),\n+        Some(id) => cx.tcx.bound_type_of(id).subst_identity(),\n         None => return Lazy,\n     };\n \n@@ -71,7 +71,7 @@ fn fn_eagerness(cx: &LateContext<'_>, fn_id: DefId, name: Symbol, have_one_arg:\n             .variants()\n             .iter()\n             .flat_map(|v| v.fields.iter())\n-            .any(|x| matches!(cx.tcx.type_of(x.did).peel_refs().kind(), ty::Param(_)))\n+            .any(|x| matches!(cx.tcx.bound_type_of(x.did).subst_identity().peel_refs().kind(), ty::Param(_)))\n             && all_predicates_of(cx.tcx, fn_id).all(|(pred, _)| match pred.kind().skip_binder() {\n                 PredicateKind::Clause(ty::Clause::Trait(pred)) => cx.tcx.trait_def(pred.trait_ref.def_id).is_marker,\n                 _ => true,"}, {"sha": "168055657755f83b763185642da8802c829df54e", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -317,7 +317,7 @@ pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str])\n /// Checks if a method is defined in an impl of a diagnostic item\n pub fn is_diag_item_method(cx: &LateContext<'_>, def_id: DefId, diag_item: Symbol) -> bool {\n     if let Some(impl_did) = cx.tcx.impl_of_method(def_id) {\n-        if let Some(adt) = cx.tcx.type_of(impl_did).ty_adt_def() {\n+        if let Some(adt) = cx.tcx.bound_type_of(impl_did).subst_identity().ty_adt_def() {\n             return cx.tcx.is_diagnostic_item(diag_item, adt.did());\n         }\n     }\n@@ -812,7 +812,7 @@ fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<\n     if let QPath::TypeRelative(_, method) = path {\n         if method.ident.name == sym::new {\n             if let Some(impl_did) = cx.tcx.impl_of_method(def_id) {\n-                if let Some(adt) = cx.tcx.type_of(impl_did).ty_adt_def() {\n+                if let Some(adt) = cx.tcx.bound_type_of(impl_did).subst_identity().ty_adt_def() {\n                     return std_types_symbols.iter().any(|&symbol| {\n                         cx.tcx.is_diagnostic_item(symbol, adt.did()) || Some(adt.did()) == cx.tcx.lang_items().string()\n                     });"}, {"sha": "6987d1d2d65a7bf3e5fc98d8a6a013538e36b891", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -780,7 +780,7 @@ impl core::ops::Add<u32> for EnumValue {\n #[expect(clippy::cast_possible_truncation, clippy::cast_possible_wrap)]\n pub fn read_explicit_enum_value(tcx: TyCtxt<'_>, id: DefId) -> Option<EnumValue> {\n     if let Ok(ConstValue::Scalar(Scalar::Int(value))) = tcx.const_eval_poly(id) {\n-        match tcx.type_of(id).kind() {\n+        match tcx.bound_type_of(id).subst_identity().kind() {\n             ty::Int(_) => Some(EnumValue::Signed(match value.size().bytes() {\n                 1 => i128::from(value.assert_bits(Size::from_bytes(1)) as u8 as i8),\n                 2 => i128::from(value.assert_bits(Size::from_bytes(2)) as u16 as i16),\n@@ -903,7 +903,7 @@ pub fn variant_of_res<'tcx>(cx: &LateContext<'tcx>, res: Res) -> Option<&'tcx Va\n             let var_id = cx.tcx.parent(id);\n             Some(cx.tcx.adt_def(cx.tcx.parent(var_id)).variant_with_id(var_id))\n         },\n-        Res::SelfCtor(id) => Some(cx.tcx.type_of(id).ty_adt_def().unwrap().non_enum_variant()),\n+        Res::SelfCtor(id) => Some(cx.tcx.bound_type_of(id).subst_identity().ty_adt_def().unwrap().non_enum_variant()),\n         _ => None,\n     }\n }"}, {"sha": "e4922d92b5ece45b7616fe723d8305cf357c19b5", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d822b97a27e50f5a091d2918f6ff0ffd2d2827f5/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=d822b97a27e50f5a091d2918f6ff0ffd2d2827f5", "patch": "@@ -901,8 +901,9 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n                 panic!(\"extern_statics cannot contain wildcards\")\n             };\n             let (shim_size, shim_align, _kind) = ecx.get_alloc_info(alloc_id);\n+            let def_ty = ecx.tcx.bound_type_of(def_id).subst_identity();\n             let extern_decl_layout =\n-                ecx.tcx.layout_of(ty::ParamEnv::empty().and(ecx.tcx.type_of(def_id))).unwrap();\n+                ecx.tcx.layout_of(ty::ParamEnv::empty().and(def_ty)).unwrap();\n             if extern_decl_layout.size != shim_size || extern_decl_layout.align.abi != shim_align {\n                 throw_unsup_format!(\n                     \"`extern` static `{name}` from crate `{krate}` has been declared \\"}]}