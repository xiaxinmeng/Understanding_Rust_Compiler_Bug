{"sha": "78eead63fa91dbe156236b547bb4290f02784712", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZWVhZDYzZmE5MWRiZTE1NjIzNmI1NDdiYjQyOTBmMDI3ODQ3MTI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-07-20T18:55:47Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:41:38Z"}, "message": "Implement the simd_insert/simd_extract intrinsics.", "tree": {"sha": "c28d0e3ffb8bf528732a8bf5a35d5f82d66b0a68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c28d0e3ffb8bf528732a8bf5a35d5f82d66b0a68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78eead63fa91dbe156236b547bb4290f02784712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78eead63fa91dbe156236b547bb4290f02784712", "html_url": "https://github.com/rust-lang/rust/commit/78eead63fa91dbe156236b547bb4290f02784712", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78eead63fa91dbe156236b547bb4290f02784712/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9af385bddb3076637ab299672c90702562644894", "url": "https://api.github.com/repos/rust-lang/rust/commits/9af385bddb3076637ab299672c90702562644894", "html_url": "https://github.com/rust-lang/rust/commit/9af385bddb3076637ab299672c90702562644894"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "7c8deb9a791ebfb73c630727500da02a4574c81f", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/78eead63fa91dbe156236b547bb4290f02784712/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78eead63fa91dbe156236b547bb4290f02784712/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=78eead63fa91dbe156236b547bb4290f02784712", "patch": "@@ -1426,5 +1426,24 @@ fn generic_simd_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n         return ShuffleVector(bcx, llargs[0], llargs[1], C_vector(&indices))\n     }\n-    C_null(llret_ty)\n+\n+    if name == \"simd_insert\" {\n+        require!(arg_tys[0].is_simd(tcx),\n+                 \"SIMD insert intrinsic monomorphised for non-SIMD input type\");\n+\n+        let elem_ty = arg_tys[0].simd_type(tcx);\n+        require!(arg_tys[2] == elem_ty,\n+                 \"SIMD insert intrinsic monomorphised with inserted type not SIMD element type\");\n+        return InsertElement(bcx, llargs[0], llargs[2], llargs[1])\n+    }\n+    if name == \"simd_extract\" {\n+        require!(arg_tys[0].is_simd(tcx),\n+                 \"SIMD insert intrinsic monomorphised for non-SIMD input type\");\n+\n+        let elem_ty = arg_tys[0].simd_type(tcx);\n+        require!(ret_ty == elem_ty,\n+                 \"SIMD insert intrinsic monomorphised with returned type not SIMD element type\");\n+        return ExtractElement(bcx, llargs[0], llargs[1])\n+    }\n+    bcx.sess().span_bug(call_info.span, \"unknown SIMD intrinsic\");\n }"}, {"sha": "2821538a295361c81c65554a9c8020a078c1fcbe", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78eead63fa91dbe156236b547bb4290f02784712/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78eead63fa91dbe156236b547bb4290f02784712/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=78eead63fa91dbe156236b547bb4290f02784712", "patch": "@@ -5344,6 +5344,8 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n             \"simd_eq\" | \"simd_ne\" | \"simd_lt\" | \"simd_le\" | \"simd_gt\" | \"simd_ge\" => {\n                 (2, vec![param(ccx, 0), param(ccx, 0)], param(ccx, 1))\n             }\n+            \"simd_insert\" => (2, vec![param(ccx, 0), tcx.types.u32, param(ccx, 1)], param(ccx, 0)),\n+            \"simd_extract\" => (2, vec![param(ccx, 0), tcx.types.u32], param(ccx, 1)),\n             name if name.starts_with(\"simd_shuffle\") => {\n                 match name[\"simd_shuffle\".len()..].parse() {\n                     Ok(n) => {"}]}