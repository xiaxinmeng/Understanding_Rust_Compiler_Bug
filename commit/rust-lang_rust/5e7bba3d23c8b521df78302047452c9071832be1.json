{"sha": "5e7bba3d23c8b521df78302047452c9071832be1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlN2JiYTNkMjNjOGI1MjFkZjc4MzAyMDQ3NDUyYzkwNzE4MzJiZTE=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-05-28T00:38:52Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-01T00:39:14Z"}, "message": "Insert plumbing for move that behaves just like assign.", "tree": {"sha": "fe849e7f75b5b8b338a383e46ecad6df14917048", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe849e7f75b5b8b338a383e46ecad6df14917048"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e7bba3d23c8b521df78302047452c9071832be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7bba3d23c8b521df78302047452c9071832be1", "html_url": "https://github.com/rust-lang/rust/commit/5e7bba3d23c8b521df78302047452c9071832be1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e7bba3d23c8b521df78302047452c9071832be1/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43342e9a66c81a9fe4516a498d18c7e1e0944476", "url": "https://api.github.com/repos/rust-lang/rust/commits/43342e9a66c81a9fe4516a498d18c7e1e0944476", "html_url": "https://github.com/rust-lang/rust/commit/43342e9a66c81a9fe4516a498d18c7e1e0944476"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "abfea16b2ad2b101fce53fee22295de7d08a0725", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=5e7bba3d23c8b521df78302047452c9071832be1", "patch": "@@ -257,6 +257,7 @@ tag expr_ {\n     expr_do_while(block, @expr, ann);\n     expr_alt(@expr, vec[arm], ann);\n     expr_block(block, ann);\n+    expr_move(@expr /* TODO: @expr|is_lval */, @expr, ann);\n     expr_assign(@expr /* TODO: @expr|is_lval */, @expr, ann);\n     expr_assign_op(binop, @expr /* TODO: @expr|is_lval */, @expr, ann);\n     expr_send(@expr /* TODO: @expr|is_lval */, @expr, ann);"}, {"sha": "01cf64f3739f050a38dac53669092405e47fad85", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=5e7bba3d23c8b521df78302047452c9071832be1", "patch": "@@ -1251,6 +1251,12 @@ fn parse_assign_expr(&parser p) -> @ast::expr {\n             ret @spanned(lo, rhs.span.hi,\n                          ast::expr_assign_op(aop, lhs, rhs, p.get_ann()));\n         }\n+        case (token::LARROW) {\n+            p.bump();\n+            auto rhs = parse_expr(p);\n+            ret @spanned(lo, rhs.span.hi,\n+                         ast::expr_move(lhs, rhs, p.get_ann()));\n+        }\n         case (token::SEND) {\n             p.bump();\n             auto rhs = parse_expr(p);"}, {"sha": "35ff93593a950c5bdd881f79898e7231b83f40b1", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=5e7bba3d23c8b521df78302047452c9071832be1", "patch": "@@ -5500,6 +5500,18 @@ fn trans_expr_out(&@block_ctxt cx, &@ast::expr e, out_method output)\n             ret res(next_cx, sub.val);\n         }\n \n+        case (ast::expr_move(?dst, ?src, ?ann)) {\n+            auto lhs_res = trans_lval(cx, dst);\n+            assert (lhs_res.is_mem);\n+            *(lhs_res.res.bcx) = rec(sp=src.span with *(lhs_res.res.bcx));\n+            auto rhs_res = trans_expr(lhs_res.res.bcx, src);\n+            auto t = node_ann_type(cx.fcx.lcx.ccx, ann);\n+            // FIXME: calculate copy init-ness in typestate.\n+            // FIXME: do all of the special move stuff\n+            ret copy_ty(rhs_res.bcx, DROP_EXISTING,\n+                        lhs_res.res.val, rhs_res.val, t);\n+        }\n+\n         case (ast::expr_assign(?dst, ?src, ?ann)) {\n             auto lhs_res = trans_lval(cx, dst);\n             assert (lhs_res.is_mem);"}, {"sha": "5a0485e1c79a74a78809daa7ba4a093bd902b1a2", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=5e7bba3d23c8b521df78302047452c9071832be1", "patch": "@@ -109,6 +109,7 @@ import front::ast::expr_rec;\n import front::ast::expr_if;\n import front::ast::expr_binary;\n import front::ast::expr_unary;\n+import front::ast::expr_move;\n import front::ast::expr_assign;\n import front::ast::expr_assign_op;\n import front::ast::expr_while;\n@@ -362,6 +363,17 @@ fn find_pre_post_expr(&fn_ctxt fcx, @expr e) -> () {\n             vec::plus_option[@expr](es, maybe_base);\n             find_pre_post_exprs(fcx, es, a);\n         }\n+        case (expr_move(?lhs, ?rhs, ?a)) {\n+            // FIXME: this needs to deinitialize the rhs\n+            alt (lhs.node) {\n+                case (expr_path(?p, ?a_lhs)) {\n+                  gen_if_local(fcx, lhs, rhs, a, a_lhs);\n+                }\n+                case (_) {\n+                    find_pre_post_exprs(fcx, [lhs, rhs], a);\n+                }\n+            }\n+        }\n         case (expr_assign(?lhs, ?rhs, ?a)) {\n             alt (lhs.node) {\n                 case (expr_path(?p, ?a_lhs)) {"}, {"sha": "16739fdcbadfb9c189ab46144bcca299aa403263", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=5e7bba3d23c8b521df78302047452c9071832be1", "patch": "@@ -119,6 +119,7 @@ import front::ast::expr_rec;\n import front::ast::expr_if;\n import front::ast::expr_binary;\n import front::ast::expr_unary;\n+import front::ast::expr_move;\n import front::ast::expr_assign;\n import front::ast::expr_assign_op;\n import front::ast::expr_while;\n@@ -329,6 +330,32 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n         }\n         ret changed;\n     }\n+    case (expr_move(?lhs, ?rhs, ?a)) {\n+        // FIXME: this needs to deinitialize the rhs\n+        extend_prestate_ann(fcx.ccx, a, pres);\n+\n+        alt (lhs.node) {\n+            case (expr_path(?p, ?a_lhs)) {\n+                // assignment to local var\n+                changed = pure_exp(fcx.ccx, a_lhs, pres) || changed;\n+                changed = find_pre_post_state_expr(fcx, pres, rhs)\n+                    || changed;\n+                changed = extend_poststate_ann(fcx.ccx, a,\n+                            expr_poststate(fcx.ccx, rhs)) || changed;\n+                changed = gen_if_local(fcx, a_lhs, a)|| changed;\n+            }\n+            case (_) {\n+                // assignment to something that must already have been init'd\n+                changed = find_pre_post_state_expr(fcx, pres, lhs)\n+                    || changed;\n+                changed = find_pre_post_state_expr(fcx,\n+                     expr_poststate(fcx.ccx, lhs), rhs) || changed;\n+                changed = extend_poststate_ann(fcx.ccx, a,\n+                            expr_poststate(fcx.ccx, rhs)) || changed;\n+            }\n+        }\n+        ret changed;\n+    }\n     case (expr_assign(?lhs, ?rhs, ?a)) {\n         extend_prestate_ann(fcx.ccx, a, pres);\n "}, {"sha": "f936d7513e5cd3c3f5aebdf46e281408954e1381", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=5e7bba3d23c8b521df78302047452c9071832be1", "patch": "@@ -1767,6 +1767,7 @@ fn expr_ann(&@ast::expr e) -> ast::ann {\n         case (ast::expr_do_while(_,_,?a)) { ret a; }\n         case (ast::expr_alt(_,_,?a)) { ret a; }\n         case (ast::expr_block(_,?a)) { ret a; }\n+        case (ast::expr_move(_,_,?a)) { ret a; }\n         case (ast::expr_assign(_,_,?a)) { ret a; }\n         case (ast::expr_assign_op(_,_,_,?a)) { ret a; }\n         case (ast::expr_send(_,_,?a)) { ret a; }"}, {"sha": "13d7204a71441746814606fdb0e6aa415cd9c910", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=5e7bba3d23c8b521df78302047452c9071832be1", "patch": "@@ -1388,6 +1388,13 @@ mod pushdown {\n                 write::ty_only_fixup(scx, ann.id, t);\n                 pushdown_block(scx, t, bloc);\n             }\n+            case (ast::expr_move(?lhs_0, ?rhs_0, ?ann)) {\n+                auto t = demand::autoderef(scx, e.span, expected,\n+                    ann_to_type(scx.fcx.ccx.tcx.node_types, ann), adk);\n+                pushdown_expr(scx, expected, lhs_0);\n+                pushdown_expr(scx, expected, rhs_0);\n+                write::ty_only_fixup(scx, ann.id, t);\n+            }\n             case (ast::expr_assign(?lhs_0, ?rhs_0, ?ann)) {\n                 auto t = demand::autoderef(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann), adk);\n@@ -2106,6 +2113,11 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n             write::nil_ty(scx.fcx.ccx.tcx, a.id);\n         }\n \n+        case (ast::expr_move(?lhs, ?rhs, ?a)) {\n+            require_impure(scx.fcx.ccx.tcx.sess, scx.fcx.purity, expr.span);\n+            check_assignment(scx, lhs, rhs, a);\n+        }\n+\n         case (ast::expr_assign(?lhs, ?rhs, ?a)) {\n             require_impure(scx.fcx.ccx.tcx.sess, scx.fcx.purity, expr.span);\n             check_assignment(scx, lhs, rhs, a);"}, {"sha": "f0cb9bb5b44f77bb53ff336d4e02f374119028f8", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=5e7bba3d23c8b521df78302047452c9071832be1", "patch": "@@ -394,6 +394,10 @@ fn walk_expr(&ast_visitor v, @ast::expr e) {\n             walk_expr(v, a);\n             walk_expr(v, b);\n         }\n+        case (ast::expr_move(?a, ?b, _)) {\n+            walk_expr(v, a);\n+            walk_expr(v, b);\n+        }\n         case (ast::expr_assign_op(_, ?a, ?b, _)) {\n             walk_expr(v, a);\n             walk_expr(v, b);"}, {"sha": "af6896fd96f3a113fac9bc977edecad397f8584b", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7bba3d23c8b521df78302047452c9071832be1/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=5e7bba3d23c8b521df78302047452c9071832be1", "patch": "@@ -690,6 +690,12 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             ibox(s.s, 0u);\n             print_block(s, block);\n         }\n+        case (ast::expr_move(?lhs,?rhs,_)) {\n+            print_expr(s, lhs);\n+            space(s.s);\n+            wrd1(s, \"<-\");\n+            print_expr(s, rhs);\n+        }\n         case (ast::expr_assign(?lhs,?rhs,_)) {\n             print_expr(s, lhs);\n             space(s.s);"}]}