{"sha": "92e72df2c1402d3d8fceac81e650b633c555a523", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZTcyZGYyYzE0MDJkM2Q4ZmNlYWM4MWU2NTBiNjMzYzU1NWE1MjM=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-13T16:08:34Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-04-21T15:46:32Z"}, "message": "Do not specify type in generated let bindings.\n\nThis avoids issues with `impl_trait_in_bindings` as the type from the\nargument is normally used as the let binding, but `impl Trait` is\nunstable in binding position.", "tree": {"sha": "5d6fe36f785f959875411412aba7717a887e3f77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d6fe36f785f959875411412aba7717a887e3f77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92e72df2c1402d3d8fceac81e650b633c555a523", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAly8kFgACgkQAXYLT59T\n8VRrsBAAgk9Unaa1T5yaUth/ui8KWE1AdCphEne8DFne1+igi8BL/aEY60kGiBpq\nneOl2Gyu6n8J4rqRuSklpF33lx62aHIm7rgRcPvHqN/lQqx+kIdbWti0XIXvG/vm\nHbyqCgAwxzr3jZ3sY8cGHyCU5xhmI5f0npp0oQqngAqTzbD0iVG6jKyH5YznihAU\nuEihNsokCR8muS0IqbOOgz3wVMFJ4ojFivSzI701AyVWTLj1p+JgZeSTCY+p4N4x\np9V/XNeRAmotUWVjbfJaRl46fhVwGc4j/46NERbWMkVcG7FafVnjEDi4mu2gWhIA\n74BWRBk6Db0xJJCtXkxoPBwBBM/CgxUqIkquwi1exG/K80tDwvTo1Q0Q11eF9qKx\nmqdcawHIFUI+IWS49m4gjuiR/UNG2gtDELRoxMD9siZCdnXPVjGzWlPDVt4V2FmC\nUtn9Nau4OUk6JD4RunRi8gEb01uP27uPcvauEmxgCD7HQi/cRAe7ej02pG/sRiHl\nt8lVkPO74lXOjsg0cJb2ZrH5MpGYOZvlfJllk3mfnaJfWzwKtQ+j4Bc7JD/S7vqz\nd2o0bwfHnT5mzKs7VOcNktAFzOwod+NV2Q2z+ElqEh9D8Tt0xfe+OgzQAG9bDJmK\ndCAxvf5CFiOuxShEcSirPS09woXq2hP21dxD6TtNLZ+iZGeaYCM=\n=lFpB\n-----END PGP SIGNATURE-----", "payload": "tree 5d6fe36f785f959875411412aba7717a887e3f77\nparent 61346557cef165e69beef7d4eb45583020ecf988\nauthor David Wood <david@davidtw.co> 1552493314 +0100\ncommitter David Wood <david@davidtw.co> 1555861592 +0100\n\nDo not specify type in generated let bindings.\n\nThis avoids issues with `impl_trait_in_bindings` as the type from the\nargument is normally used as the let binding, but `impl Trait` is\nunstable in binding position.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92e72df2c1402d3d8fceac81e650b633c555a523", "html_url": "https://github.com/rust-lang/rust/commit/92e72df2c1402d3d8fceac81e650b633c555a523", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92e72df2c1402d3d8fceac81e650b633c555a523/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61346557cef165e69beef7d4eb45583020ecf988", "url": "https://api.github.com/repos/rust-lang/rust/commits/61346557cef165e69beef7d4eb45583020ecf988", "html_url": "https://github.com/rust-lang/rust/commit/61346557cef165e69beef7d4eb45583020ecf988"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "172d5c38c778b3d58392edddfd3dad9a59b5609e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/92e72df2c1402d3d8fceac81e650b633c555a523/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e72df2c1402d3d8fceac81e650b633c555a523/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=92e72df2c1402d3d8fceac81e650b633c555a523", "patch": "@@ -8858,15 +8858,16 @@ impl<'a> Parser<'a> {\n                     }),\n                 };\n \n-                // Construct a `let <pat>: <ty> = __argN;` statement to insert at the top of the\n+                // Construct a `let <pat> = __argN;` statement to insert at the top of the\n                 // async closure.\n                 let local = P(Local {\n                     pat: input.pat.clone(),\n-                    ty: Some(P(Ty {\n-                        id,\n-                        node: input.ty.node.clone(),\n-                        span: input.ty.span,\n-                    })),\n+                    // We explicitly do not specify the type for this statement. When the user's\n+                    // argument type is `impl Trait` then this would require the\n+                    // `impl_trait_in_bindings` feature to also be present for that same type to\n+                    // be valid in this binding. At the time of writing (13 Mar 19),\n+                    // `impl_trait_in_bindings` is not stable.\n+                    ty: None,\n                     init: Some(P(Expr {\n                         id,\n                         node: ExprKind::Path(None, ast::Path {"}]}