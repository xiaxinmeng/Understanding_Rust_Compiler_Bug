{"sha": "c535147f291fee0c79553eabcd520156707cd0d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MzUxNDdmMjkxZmVlMGM3OTU1M2VhYmNkNTIwMTU2NzA3Y2QwZDQ=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-10-23T02:41:21Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-10-23T02:45:36Z"}, "message": "Replace the `run_passes!` macro with a regular function\n\nAs suggested in the feedback for #55244.\n\nWhen I replaced the macro with a function, rustc started complaining\nthat there were two unused functions so I also removed those.", "tree": {"sha": "34c88dfa7b1f919f6d6978ebdb157c24100ec370", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34c88dfa7b1f919f6d6978ebdb157c24100ec370"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c535147f291fee0c79553eabcd520156707cd0d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c535147f291fee0c79553eabcd520156707cd0d4", "html_url": "https://github.com/rust-lang/rust/commit/c535147f291fee0c79553eabcd520156707cd0d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c535147f291fee0c79553eabcd520156707cd0d4/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "895a4b2d45e6d5c274bcd561391b2cc6a73dd2c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/895a4b2d45e6d5c274bcd561391b2cc6a73dd2c5", "html_url": "https://github.com/rust-lang/rust/commit/895a4b2d45e6d5c274bcd561391b2cc6a73dd2c5"}], "stats": {"total": 149, "additions": 67, "deletions": 82}, "files": [{"sha": "cfccb950e8276a64a8a1c998b76f06fae68b9561", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c535147f291fee0c79553eabcd520156707cd0d4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c535147f291fee0c79553eabcd520156707cd0d4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=c535147f291fee0c79553eabcd520156707cd0d4", "patch": "@@ -184,7 +184,6 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n     }\n \n     crate fn borrows(&self) -> &IndexVec<BorrowIndex, BorrowData<'tcx>> { &self.borrow_set.borrows }\n-    pub fn scope_tree(&self) -> &Lrc<region::ScopeTree> { &self.scope_tree }\n \n     pub fn location(&self, idx: BorrowIndex) -> &Location {\n         &self.borrow_set.borrows[idx].reserve_location"}, {"sha": "c19145636e6da101b7580299e3fee13c6c7eacb1", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c535147f291fee0c79553eabcd520156707cd0d4/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c535147f291fee0c79553eabcd520156707cd0d4/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=c535147f291fee0c79553eabcd520156707cd0d4", "patch": "@@ -724,20 +724,6 @@ impl<'a, 'tcx, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n             }\n         }\n     }\n-\n-    pub fn new_from_sets(mir: &'a Mir<'tcx>,\n-                         dead_unwinds: &'a BitSet<mir::BasicBlock>,\n-                         sets: AllSets<D::Idx>,\n-                         denotation: D) -> Self {\n-        DataflowAnalysis {\n-            mir,\n-            dead_unwinds,\n-            flow_state: DataflowState {\n-                sets: sets,\n-                operator: denotation,\n-            }\n-        }\n-    }\n }\n \n impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation"}, {"sha": "28b7d517da6c96550ff8738e38cb6bebc8368156", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/c535147f291fee0c79553eabcd520156707cd0d4/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c535147f291fee0c79553eabcd520156707cd0d4/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=c535147f291fee0c79553eabcd520156707cd0d4", "patch": "@@ -155,68 +155,68 @@ pub trait MirPass {\n                           mir: &mut Mir<'tcx>);\n }\n \n-pub macro run_passes(\n-    $tcx:ident,\n-    $mir:ident,\n-    $def_id:ident,\n-    $mir_phase:expr;\n-    $($pass:expr,)*\n-) {{\n-    let phase_index = $mir_phase.phase_index();\n-\n-    let run_passes = |mir: &mut _, promoted| {\n-        let mir: &mut Mir<'_> = mir;\n-\n-        if mir.phase >= $mir_phase {\n+pub fn run_passes(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &mut Mir<'tcx>,\n+    def_id: DefId,\n+    mir_phase: MirPhase,\n+    passes: &[&dyn MirPass]) {\n+    let phase_index = mir_phase.phase_index();\n+\n+    let run_passes = |mir: &mut Mir<'tcx>, promoted| {\n+        if mir.phase >= mir_phase {\n             return;\n         }\n \n         let source = MirSource {\n-            def_id: $def_id,\n-            promoted\n+            def_id,\n+            promoted,\n         };\n         let mut index = 0;\n         let mut run_pass = |pass: &dyn MirPass| {\n             let run_hooks = |mir: &_, index, is_after| {\n-                dump_mir::on_mir_pass($tcx, &format_args!(\"{:03}-{:03}\", phase_index, index),\n+                dump_mir::on_mir_pass(tcx, &format_args!(\"{:03}-{:03}\", phase_index, index),\n                                       &pass.name(), source, mir, is_after);\n             };\n             run_hooks(mir, index, false);\n-            pass.run_pass($tcx, source, mir);\n+            pass.run_pass(tcx, source, mir);\n             run_hooks(mir, index, true);\n \n             index += 1;\n         };\n-        $(run_pass(&$pass);)*\n \n-        mir.phase = $mir_phase;\n+        for pass in passes {\n+            run_pass(*pass);\n+        }\n+\n+        mir.phase = mir_phase;\n     };\n \n-    run_passes(&mut $mir, None);\n+    run_passes(mir, None);\n \n-    for (index, promoted_mir) in $mir.promoted.iter_enumerated_mut() {\n+    for (index, promoted_mir) in mir.promoted.iter_enumerated_mut() {\n         run_passes(promoted_mir, Some(index));\n \n-        // Let's make sure we don't miss any nested instances\n-        assert!(promoted_mir.promoted.is_empty());\n+        //Let's make sure we don't miss any nested instances\n+        assert!(promoted_mir.promoted.is_empty())\n     }\n-}}\n+}\n \n fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Mir<'tcx>> {\n     // Unsafety check uses the raw mir, so make sure it is run\n     let _ = tcx.unsafety_check_result(def_id);\n \n     let mut mir = tcx.mir_built(def_id).steal();\n-    run_passes![tcx, mir, def_id, MirPhase::Const;\n+    run_passes(tcx, &mut mir, def_id, MirPhase::Const, &[\n         // Remove all `EndRegion` statements that are not involved in borrows.\n-        cleanup_post_borrowck::CleanEndRegions,\n+        &cleanup_post_borrowck::CleanEndRegions,\n \n         // What we need to do constant evaluation.\n-        simplify::SimplifyCfg::new(\"initial\"),\n-        type_check::TypeckMir,\n-        rustc_peek::SanityCheck,\n-        uniform_array_move_out::UniformArrayMoveOut,\n-    ];\n+        &simplify::SimplifyCfg::new(\"initial\"),\n+        &type_check::TypeckMir,\n+        &rustc_peek::SanityCheck,\n+        &uniform_array_move_out::UniformArrayMoveOut,\n+    ]);\n     tcx.alloc_steal_mir(mir)\n }\n \n@@ -229,11 +229,11 @@ fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n     }\n \n     let mut mir = tcx.mir_const(def_id).steal();\n-    run_passes![tcx, mir, def_id, MirPhase::Validated;\n+    run_passes(tcx, &mut mir, def_id, MirPhase::Validated, &[\n         // What we need to run borrowck etc.\n-        qualify_consts::QualifyAndPromoteConstants,\n-        simplify::SimplifyCfg::new(\"qualify-consts\"),\n-    ];\n+        &qualify_consts::QualifyAndPromoteConstants,\n+        &simplify::SimplifyCfg::new(\"qualify-consts\"),\n+    ]);\n     tcx.alloc_steal_mir(mir)\n }\n \n@@ -247,59 +247,59 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n     }\n \n     let mut mir = tcx.mir_validated(def_id).steal();\n-    run_passes![tcx, mir, def_id, MirPhase::Optimized;\n+    run_passes(tcx, &mut mir, def_id, MirPhase::Optimized, &[\n         // Remove all things not needed by analysis\n-        no_landing_pads::NoLandingPads,\n-        simplify_branches::SimplifyBranches::new(\"initial\"),\n-        remove_noop_landing_pads::RemoveNoopLandingPads,\n+        &no_landing_pads::NoLandingPads,\n+        &simplify_branches::SimplifyBranches::new(\"initial\"),\n+        &remove_noop_landing_pads::RemoveNoopLandingPads,\n         // Remove all `AscribeUserType` statements.\n-        cleanup_post_borrowck::CleanAscribeUserType,\n+        &cleanup_post_borrowck::CleanAscribeUserType,\n         // Remove all `FakeRead` statements and the borrows that are only\n         // used for checking matches\n-        cleanup_post_borrowck::CleanFakeReadsAndBorrows,\n-        simplify::SimplifyCfg::new(\"early-opt\"),\n+        &cleanup_post_borrowck::CleanFakeReadsAndBorrows,\n+        &simplify::SimplifyCfg::new(\"early-opt\"),\n \n         // These next passes must be executed together\n-        add_call_guards::CriticalCallEdges,\n-        elaborate_drops::ElaborateDrops,\n-        no_landing_pads::NoLandingPads,\n+        &add_call_guards::CriticalCallEdges,\n+        &elaborate_drops::ElaborateDrops,\n+        &no_landing_pads::NoLandingPads,\n         // AddValidation needs to run after ElaborateDrops and before EraseRegions, and it needs\n         // an AllCallEdges pass right before it.\n-        add_call_guards::AllCallEdges,\n-        add_validation::AddValidation,\n+        &add_call_guards::AllCallEdges,\n+        &add_validation::AddValidation,\n         // AddMovesForPackedDrops needs to run after drop\n         // elaboration.\n-        add_moves_for_packed_drops::AddMovesForPackedDrops,\n+        &add_moves_for_packed_drops::AddMovesForPackedDrops,\n \n-        simplify::SimplifyCfg::new(\"elaborate-drops\"),\n+        &simplify::SimplifyCfg::new(\"elaborate-drops\"),\n \n         // No lifetime analysis based on borrowing can be done from here on out.\n \n         // From here on out, regions are gone.\n-        erase_regions::EraseRegions,\n+        &erase_regions::EraseRegions,\n \n-        lower_128bit::Lower128Bit,\n+        &lower_128bit::Lower128Bit,\n \n \n         // Optimizations begin.\n-        uniform_array_move_out::RestoreSubsliceArrayMoveOut,\n-        inline::Inline,\n+        &uniform_array_move_out::RestoreSubsliceArrayMoveOut,\n+        &inline::Inline,\n \n         // Lowering generator control-flow and variables\n         // has to happen before we do anything else to them.\n-        generator::StateTransform,\n-\n-        instcombine::InstCombine,\n-        const_prop::ConstProp,\n-        simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n-        deaggregator::Deaggregator,\n-        copy_prop::CopyPropagation,\n-        remove_noop_landing_pads::RemoveNoopLandingPads,\n-        simplify::SimplifyCfg::new(\"final\"),\n-        simplify::SimplifyLocals,\n-\n-        add_call_guards::CriticalCallEdges,\n-        dump_mir::Marker(\"PreCodegen\"),\n-    ];\n+        &generator::StateTransform,\n+\n+        &instcombine::InstCombine,\n+        &const_prop::ConstProp,\n+        &simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n+        &deaggregator::Deaggregator,\n+        &copy_prop::CopyPropagation,\n+        &remove_noop_landing_pads::RemoveNoopLandingPads,\n+        &simplify::SimplifyCfg::new(\"final\"),\n+        &simplify::SimplifyLocals,\n+\n+        &add_call_guards::CriticalCallEdges,\n+        &dump_mir::Marker(\"PreCodegen\"),\n+    ]);\n     tcx.alloc_mir(mir)\n }"}]}