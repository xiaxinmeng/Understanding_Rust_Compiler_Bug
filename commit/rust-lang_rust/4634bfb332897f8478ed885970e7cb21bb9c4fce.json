{"sha": "4634bfb332897f8478ed885970e7cb21bb9c4fce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MzRiZmIzMzI4OTdmODQ3OGVkODg1OTcwZTdjYjIxYmI5YzRmY2U=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-02T16:03:18Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-03T14:48:29Z"}, "message": "Give better diagnostic if `OUT_DIR` is unset", "tree": {"sha": "eb70d41c024032d1ddcd134fa748b2471bcbc5fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb70d41c024032d1ddcd134fa748b2471bcbc5fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4634bfb332897f8478ed885970e7cb21bb9c4fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4634bfb332897f8478ed885970e7cb21bb9c4fce", "html_url": "https://github.com/rust-lang/rust/commit/4634bfb332897f8478ed885970e7cb21bb9c4fce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4634bfb332897f8478ed885970e7cb21bb9c4fce/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17542d08b4316afd899dabc6c7fc4c66f257dacb", "url": "https://api.github.com/repos/rust-lang/rust/commits/17542d08b4316afd899dabc6c7fc4c66f257dacb", "html_url": "https://github.com/rust-lang/rust/commit/17542d08b4316afd899dabc6c7fc4c66f257dacb"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "c7003f2a6a39e5a21d37b5f4594ed21f4ff61ee6", "filename": "crates/hir_def/src/body/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4634bfb332897f8478ed885970e7cb21bb9c4fce/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634bfb332897f8478ed885970e7cb21bb9c4fce/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs?ref=4634bfb332897f8478ed885970e7cb21bb9c4fce", "patch": "@@ -100,6 +100,9 @@ fn f() {\n     env!(invalid);\n   //^^^^^^^^^^^^^ could not convert tokens\n \n+    env!(\"OUT_DIR\");\n+  //^^^^^^^^^^^^^^^ `OUT_DIR` not set, enable \"load out dirs from check\" to fix\n+\n     // Lazy:\n \n     format_args!();"}, {"sha": "7bb42be6cb4ade55475a5bd81c51bead9a7f989c", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4634bfb332897f8478ed885970e7cb21bb9c4fce/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634bfb332897f8478ed885970e7cb21bb9c4fce/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=4634bfb332897f8478ed885970e7cb21bb9c4fce", "patch": "@@ -417,17 +417,25 @@ fn env_expand(\n         Err(e) => return ExpandResult::only_err(e),\n     };\n \n-    // FIXME:\n-    // If the environment variable is not defined int rustc, then a compilation error will be emitted.\n-    // We might do the same if we fully support all other stuffs.\n-    // But for now on, we should return some dummy string for better type infer purpose.\n-    // However, we cannot use an empty string here, because for\n-    // `include!(concat!(env!(\"OUT_DIR\"), \"/foo.rs\"))` will become\n-    // `include!(\"foo.rs\"), which might go to infinite loop\n-    let s = get_env_inner(db, arg_id, &key).unwrap_or_else(|| \"__RA_UNIMPLEMENTED__\".to_string());\n+    let mut err = None;\n+    let s = get_env_inner(db, arg_id, &key).unwrap_or_else(|| {\n+        // The only variable rust-analyzer ever sets is `OUT_DIR`, so only diagnose that to avoid\n+        // unnecessary diagnostics for eg. `CARGO_PKG_NAME`.\n+        if key == \"OUT_DIR\" {\n+            err = Some(mbe::ExpandError::Other(\n+                r#\"`OUT_DIR` not set, enable \"load out dirs from check\" to fix\"#.into(),\n+            ));\n+        }\n+\n+        // If the variable is unset, still return a dummy string to help type inference along.\n+        // We cannot use an empty string here, because for\n+        // `include!(concat!(env!(\"OUT_DIR\"), \"/foo.rs\"))` will become\n+        // `include!(\"foo.rs\"), which might go to infinite loop\n+        \"__RA_UNIMPLEMENTED__\".to_string()\n+    });\n     let expanded = quote! { #s };\n \n-    ExpandResult::ok(Some((expanded, FragmentKind::Expr)))\n+    ExpandResult { value: Some((expanded, FragmentKind::Expr)), err }\n }\n \n fn option_env_expand("}]}