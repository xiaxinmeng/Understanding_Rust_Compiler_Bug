{"sha": "5683791ebb7bbc440366635c322ad82badc554ca", "node_id": "C_kwDOAAsO6NoAKDU2ODM3OTFlYmI3YmJjNDQwMzY2NjM1YzMyMmFkODJiYWRjNTU0Y2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-13T15:57:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-13T15:57:59Z"}, "message": "Auto merge of #112017 - Nemo157:unsafe-block-rustfix, r=eholk\n\nAdd MVP suggestion for `unsafe_op_in_unsafe_fn`\n\nRebase of https://github.com/rust-lang/rust/pull/99827\n\ncc tracking issue https://github.com/rust-lang/rust/issues/71668\n\nNo real changes since the original PR, just migrated the new suggestion to use fluent messages and added a couple more testcases, AFAICT from the discussion there were no outstanding changes requested.", "tree": {"sha": "575ab63b07ef29f87c03341491b456873218c564", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/575ab63b07ef29f87c03341491b456873218c564"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5683791ebb7bbc440366635c322ad82badc554ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5683791ebb7bbc440366635c322ad82badc554ca", "html_url": "https://github.com/rust-lang/rust/commit/5683791ebb7bbc440366635c322ad82badc554ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5683791ebb7bbc440366635c322ad82badc554ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ca8d358e55bc56755b597ea96b557232ef8bc86", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca8d358e55bc56755b597ea96b557232ef8bc86", "html_url": "https://github.com/rust-lang/rust/commit/2ca8d358e55bc56755b597ea96b557232ef8bc86"}, {"sha": "802c1d5979683c8bf991122643ee2cdbdb51eec4", "url": "https://api.github.com/repos/rust-lang/rust/commits/802c1d5979683c8bf991122643ee2cdbdb51eec4", "html_url": "https://github.com/rust-lang/rust/commit/802c1d5979683c8bf991122643ee2cdbdb51eec4"}], "stats": {"total": 303, "additions": 292, "deletions": 11}, "files": [{"sha": "2598eb2ed0968e2c806269a3b88b4ab91033d029", "filename": "compiler/rustc_mir_transform/messages.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5683791ebb7bbc440366635c322ad82badc554ca/compiler%2Frustc_mir_transform%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5683791ebb7bbc440366635c322ad82badc554ca/compiler%2Frustc_mir_transform%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fmessages.ftl?ref=5683791ebb7bbc440366635c322ad82badc554ca", "patch": "@@ -55,6 +55,8 @@ mir_transform_unaligned_packed_ref = reference to packed field is unaligned\n mir_transform_union_access_label = access to union field\n mir_transform_union_access_note = the field may not be properly initialized: using uninitialized data will cause undefined behavior\n mir_transform_unsafe_op_in_unsafe_fn = {$details} is unsafe and requires unsafe block (error E0133)\n+    .suggestion = consider wrapping the function body in an unsafe block\n+    .note = an unsafe function restricts its caller, but its body is safe by default\n \n mir_transform_unused_unsafe = unnecessary `unsafe` block\n     .label = because it's nested under this `unsafe` block"}, {"sha": "70812761e88d6616305c8bc684dbff7e7c59b053", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5683791ebb7bbc440366635c322ad82badc554ca/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5683791ebb7bbc440366635c322ad82badc554ca/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=5683791ebb7bbc440366635c322ad82badc554ca", "patch": "@@ -525,6 +525,8 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     }\n \n     let UnsafetyCheckResult { violations, unused_unsafes, .. } = tcx.unsafety_check_result(def_id);\n+    // Only suggest wrapping the entire function body in an unsafe block once\n+    let mut suggest_unsafe_block = true;\n \n     for &UnsafetyViolation { source_info, lint_root, kind, details } in violations.iter() {\n         let details = errors::RequiresUnsafeDetail { violation: details, span: source_info.span };\n@@ -559,12 +561,29 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                     op_in_unsafe_fn_allowed,\n                 });\n             }\n-            UnsafetyViolationKind::UnsafeFn => tcx.emit_spanned_lint(\n-                UNSAFE_OP_IN_UNSAFE_FN,\n-                lint_root,\n-                source_info.span,\n-                errors::UnsafeOpInUnsafeFn { details },\n-            ),\n+            UnsafetyViolationKind::UnsafeFn => {\n+                tcx.emit_spanned_lint(\n+                    UNSAFE_OP_IN_UNSAFE_FN,\n+                    lint_root,\n+                    source_info.span,\n+                    errors::UnsafeOpInUnsafeFn {\n+                        details,\n+                        suggest_unsafe_block: suggest_unsafe_block.then(|| {\n+                            let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+                            let fn_sig = tcx\n+                                .hir()\n+                                .fn_sig_by_hir_id(hir_id)\n+                                .expect(\"this violation only occurs in fn\");\n+                            let body = tcx.hir().body_owned_by(def_id);\n+                            let body_span = tcx.hir().body(body).value.span;\n+                            let start = tcx.sess.source_map().start_point(body_span).shrink_to_hi();\n+                            let end = tcx.sess.source_map().end_point(body_span).shrink_to_lo();\n+                            (start, end, fn_sig.span)\n+                        }),\n+                    },\n+                );\n+                suggest_unsafe_block = false;\n+            }\n         }\n     }\n "}, {"sha": "4b796d79ef69ae14dc1331a4794b1aa26fed80ec", "filename": "compiler/rustc_mir_transform/src/errors.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5683791ebb7bbc440366635c322ad82badc554ca/compiler%2Frustc_mir_transform%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5683791ebb7bbc440366635c322ad82badc554ca/compiler%2Frustc_mir_transform%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ferrors.rs?ref=5683791ebb7bbc440366635c322ad82badc554ca", "patch": "@@ -1,5 +1,6 @@\n use rustc_errors::{\n-    DecorateLint, DiagnosticBuilder, DiagnosticMessage, EmissionGuarantee, Handler, IntoDiagnostic,\n+    Applicability, DecorateLint, DiagnosticBuilder, DiagnosticMessage, EmissionGuarantee, Handler,\n+    IntoDiagnostic,\n };\n use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_middle::mir::{AssertKind, UnsafetyViolationDetails};\n@@ -130,6 +131,12 @@ impl RequiresUnsafeDetail {\n \n pub(crate) struct UnsafeOpInUnsafeFn {\n     pub details: RequiresUnsafeDetail,\n+\n+    /// These spans point to:\n+    ///  1. the start of the function body\n+    ///  2. the end of the function body\n+    ///  3. the function signature\n+    pub suggest_unsafe_block: Option<(Span, Span, Span)>,\n }\n \n impl<'a> DecorateLint<'a, ()> for UnsafeOpInUnsafeFn {\n@@ -138,13 +145,21 @@ impl<'a> DecorateLint<'a, ()> for UnsafeOpInUnsafeFn {\n         self,\n         diag: &'b mut DiagnosticBuilder<'a, ()>,\n     ) -> &'b mut DiagnosticBuilder<'a, ()> {\n-        let desc = diag\n-            .handler()\n-            .expect(\"lint should not yet be emitted\")\n-            .eagerly_translate_to_string(self.details.label(), [].into_iter());\n+        let handler = diag.handler().expect(\"lint should not yet be emitted\");\n+        let desc = handler.eagerly_translate_to_string(self.details.label(), [].into_iter());\n         diag.set_arg(\"details\", desc);\n         diag.span_label(self.details.span, self.details.label());\n         diag.note(self.details.note());\n+\n+        if let Some((start, end, fn_sig)) = self.suggest_unsafe_block {\n+            diag.span_note(fn_sig, crate::fluent_generated::mir_transform_note);\n+            diag.tool_only_multipart_suggestion(\n+                crate::fluent_generated::mir_transform_suggestion,\n+                vec![(start, \" unsafe {\".into()), (end, \"}\".into())],\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+\n         diag\n     }\n "}, {"sha": "b3837338b331e85a4347e6b33df1b102cd7c41d0", "filename": "tests/ui/unsafe/auxiliary/external_unsafe_macro.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5683791ebb7bbc440366635c322ad82badc554ca/tests%2Fui%2Funsafe%2Fauxiliary%2Fexternal_unsafe_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5683791ebb7bbc440366635c322ad82badc554ca/tests%2Fui%2Funsafe%2Fauxiliary%2Fexternal_unsafe_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Fauxiliary%2Fexternal_unsafe_macro.rs?ref=5683791ebb7bbc440366635c322ad82badc554ca", "patch": "@@ -0,0 +1,4 @@\n+pub unsafe fn unsf() {}\n+\n+#[macro_export]\n+macro_rules! unsafe_macro { () => ($crate::unsf()) }"}, {"sha": "0c0826c1cfb39b2251c7229443f52d930aa013ae", "filename": "tests/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5683791ebb7bbc440366635c322ad82badc554ca/tests%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5683791ebb7bbc440366635c322ad82badc554ca/tests%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr?ref=5683791ebb7bbc440366635c322ad82badc554ca", "patch": "@@ -5,6 +5,11 @@ LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n+note: an unsafe function restricts its caller, but its body is safe by default\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:11:1\n+   |\n+LL | unsafe fn deny_level() {\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n note: the lint level is defined here\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:4:9\n    |\n@@ -46,6 +51,11 @@ LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n+note: an unsafe function restricts its caller, but its body is safe by default\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:27:1\n+   |\n+LL | unsafe fn warning_level() {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: the lint level is defined here\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:26:8\n    |"}, {"sha": "db1c102210e3b009c44cacbc04160f1f0103bb26", "filename": "tests/ui/unsafe/wrapping-unsafe-block-sugg.fixed", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5683791ebb7bbc440366635c322ad82badc554ca/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5683791ebb7bbc440366635c322ad82badc554ca/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.fixed?ref=5683791ebb7bbc440366635c322ad82badc554ca", "patch": "@@ -0,0 +1,66 @@\n+// run-rustfix\n+// aux-build:external_unsafe_macro.rs\n+\n+#![deny(unsafe_op_in_unsafe_fn)] //~ NOTE\n+\n+extern crate external_unsafe_macro;\n+\n+unsafe fn unsf() {}\n+\n+pub unsafe fn foo() { unsafe {\n+    //~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n+    unsf(); //~ ERROR call to unsafe function is unsafe\n+    //~^ NOTE\n+    //~| NOTE\n+    unsf(); //~ ERROR call to unsafe function is unsafe\n+    //~^ NOTE\n+    //~| NOTE\n+}}\n+\n+pub unsafe fn bar(x: *const i32) -> i32 { unsafe {\n+    //~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n+    let y = *x; //~ ERROR dereference of raw pointer is unsafe and requires unsafe block\n+    //~^ NOTE\n+    //~| NOTE\n+    y + *x //~ ERROR dereference of raw pointer is unsafe and requires unsafe block\n+    //~^ NOTE\n+    //~| NOTE\n+}}\n+\n+static mut BAZ: i32 = 0;\n+pub unsafe fn baz() -> i32 { unsafe {\n+    //~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n+    let y = BAZ; //~ ERROR use of mutable static is unsafe and requires unsafe block\n+    //~^ NOTE\n+    //~| NOTE\n+    y + BAZ //~ ERROR use of mutable static is unsafe and requires unsafe block\n+    //~^ NOTE\n+    //~| NOTE\n+}}\n+\n+macro_rules! unsafe_macro { () => (unsf()) }\n+//~^ ERROR call to unsafe function is unsafe\n+//~| NOTE\n+//~| NOTE\n+//~| ERROR call to unsafe function is unsafe\n+//~| NOTE\n+//~| NOTE\n+\n+pub unsafe fn unsafe_in_macro() { unsafe {\n+    //~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n+    unsafe_macro!();\n+    //~^ NOTE\n+    //~| NOTE\n+    unsafe_macro!();\n+    //~^ NOTE\n+    //~| NOTE\n+}}\n+\n+pub unsafe fn unsafe_in_external_macro() {\n+    // FIXME: https://github.com/rust-lang/rust/issues/112504\n+    // FIXME: ~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n+    external_unsafe_macro::unsafe_macro!();\n+    external_unsafe_macro::unsafe_macro!();\n+}\n+\n+fn main() {}"}, {"sha": "9c6be45896e25e8022d4b952c28511f2cd5665f6", "filename": "tests/ui/unsafe/wrapping-unsafe-block-sugg.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5683791ebb7bbc440366635c322ad82badc554ca/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5683791ebb7bbc440366635c322ad82badc554ca/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.rs?ref=5683791ebb7bbc440366635c322ad82badc554ca", "patch": "@@ -0,0 +1,66 @@\n+// run-rustfix\n+// aux-build:external_unsafe_macro.rs\n+\n+#![deny(unsafe_op_in_unsafe_fn)] //~ NOTE\n+\n+extern crate external_unsafe_macro;\n+\n+unsafe fn unsf() {}\n+\n+pub unsafe fn foo() {\n+    //~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n+    unsf(); //~ ERROR call to unsafe function is unsafe\n+    //~^ NOTE\n+    //~| NOTE\n+    unsf(); //~ ERROR call to unsafe function is unsafe\n+    //~^ NOTE\n+    //~| NOTE\n+}\n+\n+pub unsafe fn bar(x: *const i32) -> i32 {\n+    //~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n+    let y = *x; //~ ERROR dereference of raw pointer is unsafe and requires unsafe block\n+    //~^ NOTE\n+    //~| NOTE\n+    y + *x //~ ERROR dereference of raw pointer is unsafe and requires unsafe block\n+    //~^ NOTE\n+    //~| NOTE\n+}\n+\n+static mut BAZ: i32 = 0;\n+pub unsafe fn baz() -> i32 {\n+    //~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n+    let y = BAZ; //~ ERROR use of mutable static is unsafe and requires unsafe block\n+    //~^ NOTE\n+    //~| NOTE\n+    y + BAZ //~ ERROR use of mutable static is unsafe and requires unsafe block\n+    //~^ NOTE\n+    //~| NOTE\n+}\n+\n+macro_rules! unsafe_macro { () => (unsf()) }\n+//~^ ERROR call to unsafe function is unsafe\n+//~| NOTE\n+//~| NOTE\n+//~| ERROR call to unsafe function is unsafe\n+//~| NOTE\n+//~| NOTE\n+\n+pub unsafe fn unsafe_in_macro() {\n+    //~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n+    unsafe_macro!();\n+    //~^ NOTE\n+    //~| NOTE\n+    unsafe_macro!();\n+    //~^ NOTE\n+    //~| NOTE\n+}\n+\n+pub unsafe fn unsafe_in_external_macro() {\n+    // FIXME: https://github.com/rust-lang/rust/issues/112504\n+    // FIXME: ~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n+    external_unsafe_macro::unsafe_macro!();\n+    external_unsafe_macro::unsafe_macro!();\n+}\n+\n+fn main() {}"}, {"sha": "43f619c27d274bfb69b84ebf4fc9ece3d3724051", "filename": "tests/ui/unsafe/wrapping-unsafe-block-sugg.stderr", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/5683791ebb7bbc440366635c322ad82badc554ca/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5683791ebb7bbc440366635c322ad82badc554ca/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.stderr?ref=5683791ebb7bbc440366635c322ad82badc554ca", "patch": "@@ -0,0 +1,99 @@\n+error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:12:5\n+   |\n+LL |     unsf();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+note: an unsafe function restricts its caller, but its body is safe by default\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:10:1\n+   |\n+LL | pub unsafe fn foo() {\n+   | ^^^^^^^^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:4:9\n+   |\n+LL | #![deny(unsafe_op_in_unsafe_fn)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:15:5\n+   |\n+LL |     unsf();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:22:13\n+   |\n+LL |     let y = *x;\n+   |             ^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+note: an unsafe function restricts its caller, but its body is safe by default\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:20:1\n+   |\n+LL | pub unsafe fn bar(x: *const i32) -> i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:25:9\n+   |\n+LL |     y + *x\n+   |         ^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: use of mutable static is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:33:13\n+   |\n+LL |     let y = BAZ;\n+   |             ^^^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+note: an unsafe function restricts its caller, but its body is safe by default\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:31:1\n+   |\n+LL | pub unsafe fn baz() -> i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: use of mutable static is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:36:9\n+   |\n+LL |     y + BAZ\n+   |         ^^^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:41:36\n+   |\n+LL | macro_rules! unsafe_macro { () => (unsf()) }\n+   |                                    ^^^^^^ call to unsafe function\n+...\n+LL |     unsafe_macro!();\n+   |     --------------- in this macro invocation\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+note: an unsafe function restricts its caller, but its body is safe by default\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:49:1\n+   |\n+LL | pub unsafe fn unsafe_in_macro() {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `unsafe_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:41:36\n+   |\n+LL | macro_rules! unsafe_macro { () => (unsf()) }\n+   |                                    ^^^^^^ call to unsafe function\n+...\n+LL |     unsafe_macro!();\n+   |     --------------- in this macro invocation\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+   = note: this error originates in the macro `unsafe_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 8 previous errors\n+"}]}