{"sha": "f5c9c1215c557104728640d905fe56d83d737fd9", "node_id": "C_kwDOAAsO6NoAKGY1YzljMTIxNWM1NTcxMDQ3Mjg2NDBkOTA1ZmU1NmQ4M2Q3MzdmZDk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-18T23:03:26Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-27T05:58:35Z"}, "message": "Rename `b` as `buf` in several places.\n\nBecause it's easy to confuse with `bridge`.", "tree": {"sha": "36cf573b080fb5424e4fcf002269afbcbf0abc6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36cf573b080fb5424e4fcf002269afbcbf0abc6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5c9c1215c557104728640d905fe56d83d737fd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c9c1215c557104728640d905fe56d83d737fd9", "html_url": "https://github.com/rust-lang/rust/commit/f5c9c1215c557104728640d905fe56d83d737fd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5c9c1215c557104728640d905fe56d83d737fd9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2c505737f3b7f0013954cd5f4eed2dbc5c1003a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c505737f3b7f0013954cd5f4eed2dbc5c1003a", "html_url": "https://github.com/rust-lang/rust/commit/c2c505737f3b7f0013954cd5f4eed2dbc5c1003a"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "54d92ff5767f2b3b19d9255b29d05779233901b1", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f5c9c1215c557104728640d905fe56d83d737fd9/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c9c1215c557104728640d905fe56d83d737fd9/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=f5c9c1215c557104728640d905fe56d83d737fd9", "patch": "@@ -254,17 +254,17 @@ macro_rules! define_client_side {\n         $(impl $name {\n             $(pub(crate) fn $method($($arg: $arg_ty),*) $(-> $ret_ty)* {\n                 Bridge::with(|bridge| {\n-                    let mut b = bridge.cached_buffer.take();\n+                    let mut buf = bridge.cached_buffer.take();\n \n-                    b.clear();\n-                    api_tags::Method::$name(api_tags::$name::$method).encode(&mut b, &mut ());\n-                    reverse_encode!(b; $($arg),*);\n+                    buf.clear();\n+                    api_tags::Method::$name(api_tags::$name::$method).encode(&mut buf, &mut ());\n+                    reverse_encode!(buf; $($arg),*);\n \n-                    b = bridge.dispatch.call(b);\n+                    buf = bridge.dispatch.call(buf);\n \n-                    let r = Result::<_, PanicMessage>::decode(&mut &b[..], &mut ());\n+                    let r = Result::<_, PanicMessage>::decode(&mut &buf[..], &mut ());\n \n-                    bridge.cached_buffer = b;\n+                    bridge.cached_buffer = buf;\n \n                     r.unwrap_or_else(|e| panic::resume_unwind(e.into()))\n                 })\n@@ -383,20 +383,20 @@ fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(\n     f: impl FnOnce(A) -> R,\n ) -> Buffer {\n     // The initial `cached_buffer` contains the input.\n-    let mut b = bridge.cached_buffer.take();\n+    let mut buf = bridge.cached_buffer.take();\n \n     panic::catch_unwind(panic::AssertUnwindSafe(|| {\n         bridge.enter(|| {\n-            let reader = &mut &b[..];\n+            let reader = &mut &buf[..];\n             let input = A::decode(reader, &mut ());\n \n             // Put the `cached_buffer` back in the `Bridge`, for requests.\n-            Bridge::with(|bridge| bridge.cached_buffer = b.take());\n+            Bridge::with(|bridge| bridge.cached_buffer = buf.take());\n \n             let output = f(input);\n \n             // Take the `cached_buffer` back out, for the output value.\n-            b = Bridge::with(|bridge| bridge.cached_buffer.take());\n+            buf = Bridge::with(|bridge| bridge.cached_buffer.take());\n \n             // HACK(eddyb) Separate encoding a success value (`Ok(output)`)\n             // from encoding a panic (`Err(e: PanicMessage)`) to avoid\n@@ -407,16 +407,16 @@ fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(\n             // this is defensively trying to avoid any accidental panicking\n             // reaching the `extern \"C\"` (which should `abort` but might not\n             // at the moment, so this is also potentially preventing UB).\n-            b.clear();\n-            Ok::<_, ()>(output).encode(&mut b, &mut ());\n+            buf.clear();\n+            Ok::<_, ()>(output).encode(&mut buf, &mut ());\n         })\n     }))\n     .map_err(PanicMessage::from)\n     .unwrap_or_else(|e| {\n-        b.clear();\n-        Err::<(), _>(e).encode(&mut b, &mut ());\n+        buf.clear();\n+        Err::<(), _>(e).encode(&mut buf, &mut ());\n     });\n-    b\n+    buf\n }\n \n impl Client<fn(crate::TokenStream) -> crate::TokenStream> {"}, {"sha": "b15afa3298755b0ecf2195a441ac04af5a607b2d", "filename": "library/proc_macro/src/bridge/server.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f5c9c1215c557104728640d905fe56d83d737fd9/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c9c1215c557104728640d905fe56d83d737fd9/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs?ref=f5c9c1215c557104728640d905fe56d83d737fd9", "patch": "@@ -80,15 +80,15 @@ macro_rules! define_dispatcher_impl {\n         pub trait DispatcherTrait {\n             // HACK(eddyb) these are here to allow `Self::$name` to work below.\n             $(type $name;)*\n-            fn dispatch(&mut self, b: Buffer) -> Buffer;\n+            fn dispatch(&mut self, buf: Buffer) -> Buffer;\n         }\n \n         impl<S: Server> DispatcherTrait for Dispatcher<MarkedTypes<S>> {\n             $(type $name = <MarkedTypes<S> as Types>::$name;)*\n-            fn dispatch(&mut self, mut b: Buffer) -> Buffer {\n+            fn dispatch(&mut self, mut buf: Buffer) -> Buffer {\n                 let Dispatcher { handle_store, server } = self;\n \n-                let mut reader = &b[..];\n+                let mut reader = &buf[..];\n                 match api_tags::Method::decode(&mut reader, &mut ()) {\n                     $(api_tags::Method::$name(m) => match m {\n                         $(api_tags::$name::$method => {\n@@ -107,12 +107,12 @@ macro_rules! define_dispatcher_impl {\n                                     .map_err(PanicMessage::from)\n                             };\n \n-                            b.clear();\n-                            r.encode(&mut b, handle_store);\n+                            buf.clear();\n+                            r.encode(&mut buf, handle_store);\n                         })*\n                     }),*\n                 }\n-                b\n+                buf\n             }\n         }\n     }\n@@ -141,7 +141,7 @@ impl ExecutionStrategy for SameThread {\n         client_data: D,\n         force_show_panics: bool,\n     ) -> Buffer {\n-        let mut dispatch = |b| dispatcher.dispatch(b);\n+        let mut dispatch = |buf| dispatcher.dispatch(buf);\n \n         run_client(\n             Bridge {\n@@ -175,8 +175,8 @@ impl ExecutionStrategy for CrossThread1 {\n         let (res_tx, res_rx) = channel();\n \n         let join_handle = thread::spawn(move || {\n-            let mut dispatch = |b| {\n-                req_tx.send(b).unwrap();\n+            let mut dispatch = |buf| {\n+                req_tx.send(buf).unwrap();\n                 res_rx.recv().unwrap()\n             };\n \n@@ -283,18 +283,18 @@ fn run_server<\n     let mut dispatcher =\n         Dispatcher { handle_store: HandleStore::new(handle_counters), server: MarkedTypes(server) };\n \n-    let mut b = Buffer::new();\n-    input.encode(&mut b, &mut dispatcher.handle_store);\n+    let mut buf = Buffer::new();\n+    input.encode(&mut buf, &mut dispatcher.handle_store);\n \n-    b = strategy.run_bridge_and_client(\n+    buf = strategy.run_bridge_and_client(\n         &mut dispatcher,\n-        b,\n+        buf,\n         run_client,\n         client_data,\n         force_show_panics,\n     );\n \n-    Result::decode(&mut &b[..], &mut dispatcher.handle_store)\n+    Result::decode(&mut &buf[..], &mut dispatcher.handle_store)\n }\n \n impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {"}]}