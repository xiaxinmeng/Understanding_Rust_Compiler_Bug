{"sha": "d91323992c7597311d32867c89bc997a9f0c160d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MTMyMzk5MmM3NTk3MzExZDMyODY3Yzg5YmM5OTdhOWYwYzE2MGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-05T20:56:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-06T22:17:49Z"}, "message": "Fix fallout in tests.", "tree": {"sha": "7a1bf6b1bc8743a37fb521fbdd185717785e309d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a1bf6b1bc8743a37fb521fbdd185717785e309d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d91323992c7597311d32867c89bc997a9f0c160d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d91323992c7597311d32867c89bc997a9f0c160d", "html_url": "https://github.com/rust-lang/rust/commit/d91323992c7597311d32867c89bc997a9f0c160d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d91323992c7597311d32867c89bc997a9f0c160d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2375a79152b8a6554c3e97a3f127fedd75f7495f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2375a79152b8a6554c3e97a3f127fedd75f7495f", "html_url": "https://github.com/rust-lang/rust/commit/2375a79152b8a6554c3e97a3f127fedd75f7495f"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "21784bda27a8f14e5e3a0e37a4c8529548d257e4", "filename": "src/test/auxiliary/nested_item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d91323992c7597311d32867c89bc997a9f0c160d/src%2Ftest%2Fauxiliary%2Fnested_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91323992c7597311d32867c89bc997a9f0c160d/src%2Ftest%2Fauxiliary%2Fnested_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnested_item.rs?ref=d91323992c7597311d32867c89bc997a9f0c160d", "patch": "@@ -18,8 +18,8 @@ pub fn foo<T>() -> int {\n \n // issue 8134\n struct Foo;\n-impl<T> Foo {\n-    pub fn foo(&self) {\n+impl Foo {\n+    pub fn foo<T>(&self) {\n         static X: uint = 1;\n     }\n }\n@@ -33,8 +33,8 @@ impl<T: std::iter::Iterator<Item=char>> Parser<T> {\n }\n \n struct Bar;\n-impl<T> Foo {\n-    pub fn bar(&self) {\n+impl Foo {\n+    pub fn bar<T>(&self) {\n         static X: uint = 1;\n     }\n }"}, {"sha": "d86256a77765ee99153f57cd0a261e44fda827eb", "filename": "src/test/compile-fail/coherence-all-remote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d91323992c7597311d32867c89bc997a9f0c160d/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91323992c7597311d32867c89bc997a9f0c160d/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs?ref=d91323992c7597311d32867c89bc997a9f0c160d", "patch": "@@ -11,9 +11,9 @@\n // aux-build:coherence-lib.rs\n \n extern crate \"coherence-lib\" as lib;\n-use lib::Remote;\n+use lib::Remote1;\n \n-impl<T> Remote for int { }\n+impl<T> Remote1<T> for int { }\n //~^ ERROR E0117\n \n fn main() { }"}, {"sha": "24ffc5e9ee373de30f2b032561cd17ad8e0fa984", "filename": "src/test/compile-fail/issue-12028.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d91323992c7597311d32867c89bc997a9f0c160d/src%2Ftest%2Fcompile-fail%2Fissue-12028.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91323992c7597311d32867c89bc997a9f0c160d/src%2Ftest%2Fcompile-fail%2Fissue-12028.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12028.rs?ref=d91323992c7597311d32867c89bc997a9f0c160d", "patch": "@@ -22,27 +22,28 @@ trait Stream {\n     fn result(&self) -> u64;\n }\n \n-trait StreamHasher<S: Stream> {\n-    fn stream(&self) -> S;\n+trait StreamHasher {\n+    type S : Stream;\n+    fn stream(&self) -> Self::S;\n }\n \n //////////////////////////////////////////////////////////////////////////////\n \n-trait StreamHash<S: Stream, H: StreamHasher<S>>: Hash<H> {\n-    fn input_stream(&self, stream: &mut S);\n+trait StreamHash<H: StreamHasher>: Hash<H> {\n+    fn input_stream(&self, stream: &mut H::S);\n }\n \n-impl<S: Stream, H: StreamHasher<S>> Hash<H> for u8 {\n+impl<H: StreamHasher> Hash<H> for u8 {\n     fn hash2(&self, hasher: &H) -> u64 {\n         let mut stream = hasher.stream();\n         self.input_stream(&mut stream); //~ ERROR type annotations required\n-        stream.result()\n+        Stream::result(&stream)\n     }\n }\n \n-impl<S: Stream, H: StreamHasher<S>> StreamHash<S, H> for u8 {\n-    fn input_stream(&self, stream: &mut S) {\n-        stream.input(&[*self]);\n+impl<H: StreamHasher> StreamHash<H> for u8 {\n+    fn input_stream(&self, stream: &mut H::S) {\n+        Stream::input(&*stream, &[*self]);\n     }\n }\n "}, {"sha": "6a017f7bb30c1bda6de09eb42c00331fce6736fb", "filename": "src/test/compile-fail/issue-13853-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d91323992c7597311d32867c89bc997a9f0c160d/src%2Ftest%2Fcompile-fail%2Fissue-13853-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91323992c7597311d32867c89bc997a9f0c160d/src%2Ftest%2Fcompile-fail%2Fissue-13853-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853-5.rs?ref=d91323992c7597311d32867c89bc997a9f0c160d", "patch": "@@ -15,7 +15,7 @@ trait Deserializable {\n }\n \n impl<'a, T: Deserializable> Deserializable for &'a str {\n-    //~^ ERROR unable to infer enough type information\n+    //~^ ERROR type parameter `T` is not constrained\n     fn deserialize_token<D: Deserializer<'a>>(_x: D, _y: &'a str) -> &'a str {\n     }\n }"}, {"sha": "626a442a2c355aed067f28a1af4293f34f284f73", "filename": "src/test/compile-fail/issue-16562.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d91323992c7597311d32867c89bc997a9f0c160d/src%2Ftest%2Fcompile-fail%2Fissue-16562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91323992c7597311d32867c89bc997a9f0c160d/src%2Ftest%2Fcompile-fail%2Fissue-16562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16562.rs?ref=d91323992c7597311d32867c89bc997a9f0c160d", "patch": "@@ -18,7 +18,7 @@ struct Col<D, C> {\n trait Collection { fn len(&self) -> uint; }\n \n impl<T, M: MatrixShape> Collection for Col<M, uint> {\n-//~^ ERROR unable to infer enough type information\n+//~^ ERROR type parameter `T` is not constrained\n     fn len(&self) -> uint {\n         unimplemented!()\n     }"}, {"sha": "382ea0c575887cc9ddc72ebcd47072eec8210159", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d91323992c7597311d32867c89bc997a9f0c160d/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91323992c7597311d32867c89bc997a9f0c160d/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=d91323992c7597311d32867c89bc997a9f0c160d", "patch": "@@ -30,17 +30,23 @@ impl Vec2 {\n }\n \n // Right-hand-side operator visitor pattern\n-trait RhsOfVec2Mul<Result> { fn mul_vec2_by(&self, lhs: &Vec2) -> Result; }\n+trait RhsOfVec2Mul {\n+    type Result;\n+\n+    fn mul_vec2_by(&self, lhs: &Vec2) -> Self::Result;\n+}\n \n // Vec2's implementation of Mul \"from the other side\" using the above trait\n-impl<Res, Rhs: RhsOfVec2Mul<Res>> Mul<Rhs> for Vec2 {\n+impl<Res, Rhs: RhsOfVec2Mul<Result=Res>> Mul<Rhs> for Vec2 {\n     type Output = Res;\n \n     fn mul(self, rhs: Rhs) -> Res { rhs.mul_vec2_by(&self) }\n }\n \n // Implementation of 'f64 as right-hand-side of Vec2::Mul'\n-impl RhsOfVec2Mul<Vec2> for f64 {\n+impl RhsOfVec2Mul for f64 {\n+    type Result = Vec2;\n+\n     fn mul_vec2_by(&self, lhs: &Vec2) -> Vec2 { lhs.vmul(*self) }\n }\n "}]}