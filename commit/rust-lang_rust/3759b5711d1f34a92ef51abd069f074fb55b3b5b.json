{"sha": "3759b5711d1f34a92ef51abd069f074fb55b3b5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NTliNTcxMWQxZjM0YTkyZWY1MWFiZDA2OWYwNzRmYjU1YjNiNWI=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-04-23T16:20:55Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-04-24T20:28:02Z"}, "message": "Fixed typo... And a billion other things.", "tree": {"sha": "fc406c99510acbf1fdeb9da2e25d3a38feb92fad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc406c99510acbf1fdeb9da2e25d3a38feb92fad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3759b5711d1f34a92ef51abd069f074fb55b3b5b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3759b5711d1f34a92ef51abd069f074fb55b3b5b", "html_url": "https://github.com/rust-lang/rust/commit/3759b5711d1f34a92ef51abd069f074fb55b3b5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3759b5711d1f34a92ef51abd069f074fb55b3b5b/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd748079574197215da46ac164f16a392df9cc26", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd748079574197215da46ac164f16a392df9cc26", "html_url": "https://github.com/rust-lang/rust/commit/dd748079574197215da46ac164f16a392df9cc26"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "0173f61e7307dcabd99831a2d11f9d5e40772d17", "filename": "doc/rust.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3759b5711d1f34a92ef51abd069f074fb55b3b5b/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/3759b5711d1f34a92ef51abd069f074fb55b3b5b/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=3759b5711d1f34a92ef51abd069f074fb55b3b5b", "patch": "@@ -802,7 +802,7 @@ An example of `use` declarations:\n \n ~~~~\n use core::float::sin;\n-use core::str::{slice, to_upper};\n+use core::str::{slice, contains};\n use core::option::Some;\n \n fn main() {\n@@ -813,8 +813,8 @@ fn main() {\n     info!(Some(1.0));\n \n     // Equivalent to\n-    // 'info!(core::str::to_upper(core::str::slice(\"foo\", 0, 1)));'\n-    info!(to_upper(slice(\"foo\", 0, 1)));\n+    // 'info!(core::str::contains(core::str::slice(\"foo\", 0, 1), \"oo\"));'\n+    info!(contains(slice(\"foo\", 0, 1), \"oo\"));\n }\n ~~~~\n "}, {"sha": "3aa88523a873a24a6850f423d33fc64068b65c00", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=3759b5711d1f34a92ef51abd069f074fb55b3b5b", "patch": "@@ -51,9 +51,10 @@ fn parse_expected(line_num: uint, line: ~str) -> ~[ExpectedError] {\n     let start_kind = idx;\n     while idx < len && line[idx] != (' ' as u8) { idx += 1u; }\n \n-    // FIXME: 4318 Instead of to_str_ascii, could use\n-    // to_str_consume to not do a unneccessary copy.\n-    let kind = str::slice(line, start_kind, idx).to_ascii().to_lower().to_str_ascii();\n+    // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+    // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+    let kind = str::slice(line, start_kind, idx);\n+    let kind = kind.to_ascii().to_lower().to_str_ascii();\n \n     // Extract msg:\n     while idx < len && line[idx] == (' ' as u8) { idx += 1u; }"}, {"sha": "edc61299af96d1b496f5d8cf5f7150f02bc53617", "filename": "src/libcore/path.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=3759b5711d1f34a92ef51abd069f074fb55b3b5b", "patch": "@@ -19,6 +19,7 @@ use libc;\n use option::{None, Option, Some};\n use str;\n use to_str::ToStr;\n+use ascii::{AsciiCast, AsciiStr};\n \n #[deriving(Clone, Eq)]\n pub struct WindowsPath {\n@@ -753,8 +754,8 @@ impl GenericPath for WindowsPath {\n     fn is_restricted(&self) -> bool {\n         match self.filestem() {\n             Some(stem) => {\n-                // FIXME: 4318 Instead of to_str_ascii, could use\n-                // to_str_consume to not do a unneccessary copy.\n+                // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+                // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n                 match stem.to_ascii().to_lower().to_str_ascii() {\n                     ~\"con\" | ~\"aux\" | ~\"com1\" | ~\"com2\" | ~\"com3\" | ~\"com4\" |\n                     ~\"lpt1\" | ~\"lpt2\" | ~\"lpt3\" | ~\"prn\" | ~\"nul\" => true,\n@@ -812,8 +813,8 @@ impl GenericPath for WindowsPath {\n             device: match self.device {\n                 None => None,\n \n-                // FIXME: 4318 Instead of to_str_ascii, could use\n-                // to_str_consume to not do a unneccessary copy.\n+                // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+                // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n                 Some(ref device) => Some(device.to_ascii().to_upper().to_str_ascii())\n             },\n             is_absolute: self.is_absolute,"}, {"sha": "92c965256ceaff5f4feafb1cf793b4d007dadc4e", "filename": "src/libcore/str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=3759b5711d1f34a92ef51abd069f074fb55b3b5b", "patch": "@@ -27,7 +27,6 @@ use option::{None, Option, Some};\n use iterator::Iterator;\n use ptr;\n use str;\n-use u8;\n use uint;\n use vec;\n use to_str::ToStr;"}, {"sha": "9180c995ca28c1d8e53aea83b95da7fe0d1a10f1", "filename": "src/libcore/str/ascii.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Flibcore%2Fstr%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Flibcore%2Fstr%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fascii.rs?ref=3759b5711d1f34a92ef51abd069f074fb55b3b5b", "patch": "@@ -199,6 +199,7 @@ impl ToStrConsume for ~[Ascii] {\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use str;\n \n     macro_rules! v2ascii (\n         ( [$($e:expr),*]) => ( [$(Ascii{chr:$e}),*]);"}, {"sha": "b812be5575a4a3a3c79de6e6910abb7195be6124", "filename": "src/libcore/unstable/extfmt.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Flibcore%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Flibcore%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fextfmt.rs?ref=3759b5711d1f34a92ef51abd069f074fb55b3b5b", "patch": "@@ -521,9 +521,12 @@ pub mod rt {\n               TyDefault => uint_to_str_prec(u, 10, prec),\n               TyHexLower => uint_to_str_prec(u, 16, prec),\n \n-              // FIXME: 4318 Instead of to_str_ascii, could use\n-              // to_str_consume to not do a unneccessary copy.\n-              TyHexUpper => uint_to_str_prec(u, 16, prec).to_ascii().to_upper().to_str_ascii(),\n+              // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+              // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+              TyHexUpper => {\n+                let s = uint_to_str_prec(u, 16, prec);\n+                s.to_ascii().to_upper().to_str_ascii()\n+              }\n               TyBits => uint_to_str_prec(u, 2, prec),\n               TyOctal => uint_to_str_prec(u, 8, prec)\n             };"}, {"sha": "f33bb878ee4ba42394533eb287f55428ad2d4913", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=3759b5711d1f34a92ef51abd069f074fb55b3b5b", "patch": "@@ -547,9 +547,10 @@ pub fn build_session_options(binary: @~str,\n     for lint_levels.each |level| {\n         let level_name = lint::level_to_str(*level);\n \n-        // FIXME: 4318 Instead of to_str_ascii, could use\n-        // to_str_consume to not do a unneccessary copy.\n-        let level_short = level_name.substr(0,1).to_ascii().to_upper().to_str_ascii();\n+        // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+        // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+        let level_short = level_name.substr(0,1);\n+        let level_short = level_short.to_ascii().to_upper().to_str_ascii();\n         let flags = vec::append(getopts::opt_strs(matches, level_short),\n                                 getopts::opt_strs(matches, level_name));\n         for flags.each |lint_name| {"}, {"sha": "631c86b74f1e92c0749877c4eeb5f717e081f9b9", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=3759b5711d1f34a92ef51abd069f074fb55b3b5b", "patch": "@@ -157,8 +157,8 @@ pub fn pandoc_header_id(header: &str) -> ~str {\n         let s = str::replace(s, ~\" \", ~\"-\");\n         return s;\n     }\n-    // FIXME: 4318 Instead of to_str_ascii, could use\n-    // to_str_consume to not do a unneccessary copy.\n+    // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+    // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n     fn convert_to_lowercase(s: &str) -> ~str { s.to_ascii().to_lower().to_str_ascii() }\n     fn remove_up_to_first_letter(s: &str) -> ~str { s.to_str() }\n     fn maybe_use_section_id(s: &str) -> ~str { s.to_str() }"}, {"sha": "cc002bc8305a25f298e410b66f9900549d465e3c", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=3759b5711d1f34a92ef51abd069f074fb55b3b5b", "patch": "@@ -885,8 +885,8 @@ mod tests {\n         // tjc: funny that we have to use parens\n         fn ile(x: &(&'static str), y: &(&'static str)) -> bool\n         {\n-            // FIXME: 4318 Instead of to_str_ascii, could use\n-            // to_str_consume to not do a unneccessary copy.\n+            // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+            // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n             // (Actually, could just remove the to_str_* call, but needs an deriving(Ord) on\n             // Ascii)\n             let x = x.to_ascii().to_lower().to_str_ascii();"}, {"sha": "4c8c984cd07c96a67c32876ae13d6bfd44f90a42", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3759b5711d1f34a92ef51abd069f074fb55b3b5b/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=3759b5711d1f34a92ef51abd069f074fb55b3b5b", "patch": "@@ -59,7 +59,10 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n    for pairs_sorted.each |kv| {\n        let (k,v) = copy *kv;\n        unsafe {\n-           buffer += (fmt!(\"%s %0.3f\\n\", str::to_upper(str::raw::from_bytes(k)), v));\n+           let b = str::raw::from_bytes(k);\n+           // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+           // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+           buffer += (fmt!(\"%s %0.3f\\n\", b.to_ascii().to_upper().to_str_ascii(), v));\n        }\n    }\n \n@@ -68,7 +71,9 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n \n // given a map, search for the frequency of a pattern\n fn find(mm: &HashMap<~[u8], uint>, key: ~str) -> uint {\n-   match mm.find(&str::to_bytes(str::to_lower(key))) {\n+   // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+   // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+   match mm.find(&str::to_bytes(key.to_ascii().to_lower().to_str_ascii())) {\n       option::None      => { return 0u; }\n       option::Some(&num) => { return num; }\n    }"}]}