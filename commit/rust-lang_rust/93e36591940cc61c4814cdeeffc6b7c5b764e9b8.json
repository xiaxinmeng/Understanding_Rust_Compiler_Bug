{"sha": "93e36591940cc61c4814cdeeffc6b7c5b764e9b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZTM2NTkxOTQwY2M2MWM0ODE0Y2RlZWZmYzZiN2M1Yjc2NGU5Yjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-25T20:51:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-25T20:51:54Z"}, "message": "intenral: small improvements to compile time\n\nAsRef-polymorphism has compile-time cost.", "tree": {"sha": "20d390cfd5afe537b91b2357e4bf94fecbeb2466", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20d390cfd5afe537b91b2357e4bf94fecbeb2466"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93e36591940cc61c4814cdeeffc6b7c5b764e9b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93e36591940cc61c4814cdeeffc6b7c5b764e9b8", "html_url": "https://github.com/rust-lang/rust/commit/93e36591940cc61c4814cdeeffc6b7c5b764e9b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93e36591940cc61c4814cdeeffc6b7c5b764e9b8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c27fdc75fad67381e43cd7ce7e92a59f5e8fe087", "url": "https://api.github.com/repos/rust-lang/rust/commits/c27fdc75fad67381e43cd7ce7e92a59f5e8fe087", "html_url": "https://github.com/rust-lang/rust/commit/c27fdc75fad67381e43cd7ce7e92a59f5e8fe087"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "cdefee804ba8a713b2a6c4e5f2678ccdf1af309c", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93e36591940cc61c4814cdeeffc6b7c5b764e9b8/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e36591940cc61c4814cdeeffc6b7c5b764e9b8/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=93e36591940cc61c4814cdeeffc6b7c5b764e9b8", "patch": "@@ -119,7 +119,7 @@ impl ProjectManifest {\n         }\n     }\n \n-    pub fn discover_all(paths: &[impl AsRef<AbsPath>]) -> Vec<ProjectManifest> {\n+    pub fn discover_all(paths: &[AbsPathBuf]) -> Vec<ProjectManifest> {\n         let mut res = paths\n             .iter()\n             .filter_map(|it| ProjectManifest::discover(it.as_ref()).ok())"}]}