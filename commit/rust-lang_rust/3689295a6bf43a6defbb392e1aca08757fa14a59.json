{"sha": "3689295a6bf43a6defbb392e1aca08757fa14a59", "node_id": "C_kwDOAAsO6NoAKDM2ODkyOTVhNmJmNDNhNmRlZmJiMzkyZTFhY2EwODc1N2ZhMTRhNTk", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-02-09T10:38:45Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-02-09T10:38:45Z"}, "message": "Use `ErrorGuaranteed` more in `ReError`", "tree": {"sha": "f82a102f96234c0764dcf567d6a97f744eec6ab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f82a102f96234c0764dcf567d6a97f744eec6ab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3689295a6bf43a6defbb392e1aca08757fa14a59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3689295a6bf43a6defbb392e1aca08757fa14a59", "html_url": "https://github.com/rust-lang/rust/commit/3689295a6bf43a6defbb392e1aca08757fa14a59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3689295a6bf43a6defbb392e1aca08757fa14a59/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32227255386cb8387e3961845f101d23bac42b0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/32227255386cb8387e3961845f101d23bac42b0a", "html_url": "https://github.com/rust-lang/rust/commit/32227255386cb8387e3961845f101d23bac42b0a"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "f121979be715fd423b06a98fb9532d016bb5d219", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3689295a6bf43a6defbb392e1aca08757fa14a59/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3689295a6bf43a6defbb392e1aca08757fa14a59/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=3689295a6bf43a6defbb392e1aca08757fa14a59", "patch": "@@ -1614,14 +1614,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             \"the lifetime bound for this object type cannot be deduced \\\n                              from context; please supply an explicit bound\"\n                         );\n-                        if borrowed {\n+                        let e = if borrowed {\n                             // We will have already emitted an error E0106 complaining about a\n                             // missing named lifetime in `&dyn Trait`, so we elide this one.\n-                            err.delay_as_bug();\n+                            err.delay_as_bug()\n                         } else {\n-                            err.emit();\n-                        }\n-                        tcx.re_error()\n+                            err.emit()\n+                        };\n+                        tcx.re_error(e)\n                     })\n                 }\n             })"}, {"sha": "4a2210bdb68d020113ce4e7d5db8aa13e0823b5a", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3689295a6bf43a6defbb392e1aca08757fa14a59/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3689295a6bf43a6defbb392e1aca08757fa14a59/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=3689295a6bf43a6defbb392e1aca08757fa14a59", "patch": "@@ -216,7 +216,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 Ok(self.tcx().lifetimes.re_static)\n             }\n \n-            ReError(_) => Ok(self.tcx().re_error()),\n+            ReError(_) => Ok(a_region),\n \n             ReEarlyBound(_) | ReFree(_) => {\n                 // All empty regions are less than early-bound, free,\n@@ -548,7 +548,9 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 );\n             }\n \n-            (ReError(_), _) | (_, ReError(_)) => self.tcx().re_error(),\n+            (ReError(_), _) => a,\n+\n+            (_, ReError(_)) => b,\n \n             (ReStatic, _) | (_, ReStatic) => {\n                 // nothing lives longer than `'static`\n@@ -1044,7 +1046,7 @@ impl<'tcx> LexicalRegionResolutions<'tcx> {\n             ty::ReVar(rid) => match self.values[rid] {\n                 VarValue::Empty(_) => r,\n                 VarValue::Value(r) => r,\n-                VarValue::ErrorValue => tcx.re_error(),\n+                VarValue::ErrorValue => tcx.re_error_misc(),\n             },\n             _ => r,\n         };"}, {"sha": "d1d7d0f84308a5e6a0ddebce8157b63d117f6399", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3689295a6bf43a6defbb392e1aca08757fa14a59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3689295a6bf43a6defbb392e1aca08757fa14a59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=3689295a6bf43a6defbb392e1aca08757fa14a59", "patch": "@@ -649,10 +649,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(Error(reported))\n     }\n \n+    /// Constructs a `RegionKind::ReError` lifetime.\n+    #[track_caller]\n+    pub fn re_error(self, reported: ErrorGuaranteed) -> Region<'tcx> {\n+        self.mk_region(ty::ReError(reported))\n+    }\n+\n     /// Constructs a `RegionKind::ReError` lifetime and registers a `delay_span_bug` to ensure it\n     /// gets used.\n     #[track_caller]\n-    pub fn re_error(self) -> Region<'tcx> {\n+    pub fn re_error_misc(self) -> Region<'tcx> {\n         self.re_error_with_message(\n             DUMMY_SP,\n             \"RegionKind::ReError constructed but no error reported\",\n@@ -664,10 +670,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[track_caller]\n     pub fn re_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Region<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n-        let r = ty::ReError(reported);\n-        Region(Interned::new_unchecked(\n-            self.interners.region.intern(r, |r| InternedInSet(self.interners.arena.alloc(r))).0,\n-        ))\n+        self.re_error(reported)\n     }\n \n     /// Like [TyCtxt::ty_error] but for constants, with current `ErrorGuaranteed`"}, {"sha": "ea95a38f272c6d2be527f64da82d09dd3992c478", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3689295a6bf43a6defbb392e1aca08757fa14a59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3689295a6bf43a6defbb392e1aca08757fa14a59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=3689295a6bf43a6defbb392e1aca08757fa14a59", "patch": "@@ -100,7 +100,7 @@ impl GenericParamDef {\n         preceding_substs: &[ty::GenericArg<'tcx>],\n     ) -> ty::GenericArg<'tcx> {\n         match &self.kind {\n-            ty::GenericParamDefKind::Lifetime => tcx.re_error().into(),\n+            ty::GenericParamDefKind::Lifetime => tcx.re_error_misc().into(),\n             ty::GenericParamDefKind::Type { .. } => tcx.ty_error().into(),\n             ty::GenericParamDefKind::Const { .. } => {\n                 tcx.const_error(tcx.bound_type_of(self.def_id).subst(tcx, preceding_substs)).into()"}, {"sha": "a5ebdbc8792fb9db8c3c597d3f7337692873d1f9", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3689295a6bf43a6defbb392e1aca08757fa14a59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3689295a6bf43a6defbb392e1aca08757fa14a59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=3689295a6bf43a6defbb392e1aca08757fa14a59", "patch": "@@ -127,7 +127,8 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n             Some(u) => panic!(\"region mapped to unexpected kind: {:?}\", u),\n             None if self.do_not_error => self.tcx.lifetimes.re_static,\n             None => {\n-                self.tcx\n+                let e = self\n+                    .tcx\n                     .sess\n                     .struct_span_err(self.span, \"non-defining opaque type use in defining scope\")\n                     .span_label(\n@@ -140,7 +141,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                     )\n                     .emit();\n \n-                self.tcx().re_error()\n+                self.tcx().re_error(e)\n             }\n         }\n     }"}]}