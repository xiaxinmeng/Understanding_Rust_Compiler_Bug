{"sha": "c58ceb7a42b5e06e2d7ba5fe727b05af5d073d3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OGNlYjdhNDJiNWUwNmUyZDdiYTVmZTcyN2IwNWFmNWQwNzNkM2U=", "commit": {"author": {"name": "Taylor Yu", "email": "tlyu@mit.edu", "date": "2021-07-02T20:56:56Z"}, "committer": {"name": "Taylor Yu", "email": "tlyu@mit.edu", "date": "2021-07-02T20:56:56Z"}, "message": "stdio_locked: updates based on feedback\n\nRename methods to `into_locked`. Remove type aliases for owned locks.", "tree": {"sha": "a024176cead0f14a6b61e057595073d80aaab5dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a024176cead0f14a6b61e057595073d80aaab5dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c58ceb7a42b5e06e2d7ba5fe727b05af5d073d3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c58ceb7a42b5e06e2d7ba5fe727b05af5d073d3e", "html_url": "https://github.com/rust-lang/rust/commit/c58ceb7a42b5e06e2d7ba5fe727b05af5d073d3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c58ceb7a42b5e06e2d7ba5fe727b05af5d073d3e/comments", "author": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3db5cd46c6941563ae8792cf61160c5793d397a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3db5cd46c6941563ae8792cf61160c5793d397a", "html_url": "https://github.com/rust-lang/rust/commit/b3db5cd46c6941563ae8792cf61160c5793d397a"}], "stats": {"total": 88, "additions": 14, "deletions": 74}, "files": [{"sha": "acd4e0d79892af54e49862218749e624de0d9860", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c58ceb7a42b5e06e2d7ba5fe727b05af5d073d3e/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58ceb7a42b5e06e2d7ba5fe727b05af5d073d3e/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=c58ceb7a42b5e06e2d7ba5fe727b05af5d073d3e", "patch": "@@ -281,8 +281,6 @@ pub use self::stdio::{stderr, stdin, stdout, Stderr, Stdin, Stdout};\n pub use self::stdio::{stderr_locked, stdin_locked, stdout_locked};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::stdio::{StderrLock, StdinLock, StdoutLock};\n-#[unstable(feature = \"stdio_locked\", issue = \"none\")]\n-pub use self::stdio::{StderrOwnedLock, StdinOwnedLock, StdoutOwnedLock};\n #[unstable(feature = \"print_internals\", issue = \"none\")]\n pub use self::stdio::{_eprint, _print};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "293f0e31ce050e293a2fc9288dce34f3d9652570", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 11, "deletions": 54, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c58ceb7a42b5e06e2d7ba5fe727b05af5d073d3e/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58ceb7a42b5e06e2d7ba5fe727b05af5d073d3e/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=c58ceb7a42b5e06e2d7ba5fe727b05af5d073d3e", "patch": "@@ -261,21 +261,6 @@ pub struct StdinLock<'a> {\n     inner: MutexGuard<'a, BufReader<StdinRaw>>,\n }\n \n-/// Owned locked [`Stdin`] handle, returned by [`Stdin::into_lock`] and\n-/// [`io::stdin_locked`].\n-///\n-/// This is exactly like [`StdinLock`], except that it can outlive the\n-/// [`Stdin`] handle that was used to create it. See the [`StdinLock`]\n-/// documentation for more details.\n-///\n-/// ### Note: Windows Portability Consideration\n-///\n-/// When operating in a console, the Windows implementation of this stream does not support\n-/// non-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return\n-/// an error.\n-#[unstable(feature = \"stdio_locked\", issue = \"none\")]\n-pub type StdinOwnedLock = StdinLock<'static>;\n-\n /// Constructs a new handle to the standard input of the current process.\n ///\n /// Each handle returned is a reference to a shared global buffer whose access\n@@ -363,8 +348,8 @@ pub fn stdin() -> Stdin {\n /// }\n /// ```\n #[unstable(feature = \"stdio_locked\", issue = \"none\")]\n-pub fn stdin_locked() -> StdinOwnedLock {\n-    stdin().into_lock()\n+pub fn stdin_locked() -> StdinLock<'static> {\n+    stdin().into_locked()\n }\n \n impl Stdin {\n@@ -451,14 +436,14 @@ impl Stdin {\n     ///\n     /// fn main() -> io::Result<()> {\n     ///     let mut buffer = String::new();\n-    ///     let mut handle = io::stdin().into_lock();\n+    ///     let mut handle = io::stdin().into_locked();\n     ///\n     ///     handle.read_to_string(&mut buffer)?;\n     ///     Ok(())\n     /// }\n     /// ```\n     #[unstable(feature = \"stdio_locked\", issue = \"none\")]\n-    pub fn into_lock(self) -> StdinOwnedLock {\n+    pub fn into_locked(self) -> StdinLock<'static> {\n         self.lock_any()\n     }\n }\n@@ -601,20 +586,6 @@ pub struct StdoutLock<'a> {\n     inner: ReentrantMutexGuard<'a, RefCell<LineWriter<StdoutRaw>>>,\n }\n \n-/// Owned locked [`Stdout`] handle, returned by [`Stdout::into_lock`] and\n-/// [`io::stdout_locked`].\n-///\n-/// This is exactly like [`StdoutLock`], except that it can outlive the\n-/// [`Stdout`] handle that was used to create it. See the [`StdoutLock`]\n-/// documentation for more details.\n-///\n-/// ### Note: Windows Portability Consideration\n-/// When operating in a console, the Windows implementation of this stream does not support\n-/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n-/// an error.\n-#[unstable(feature = \"stdio_locked\", issue = \"none\")]\n-pub type StdoutOwnedLock = StdoutLock<'static>;\n-\n static STDOUT: SyncOnceCell<ReentrantMutex<RefCell<LineWriter<StdoutRaw>>>> = SyncOnceCell::new();\n \n /// Constructs a new handle to the standard output of the current process.\n@@ -699,7 +670,7 @@ pub fn stdout() -> Stdout {\n /// ```\n #[unstable(feature = \"stdio_locked\", issue = \"none\")]\n pub fn stdout_locked() -> StdoutLock<'static> {\n-    stdout().into_lock()\n+    stdout().into_locked()\n }\n \n pub fn cleanup() {\n@@ -767,15 +738,15 @@ impl Stdout {\n     /// use std::io::{self, Write};\n     ///\n     /// fn main() -> io::Result<()> {\n-    ///     let mut handle = io::stdout().into_lock();\n+    ///     let mut handle = io::stdout().into_locked();\n     ///\n     ///     handle.write_all(b\"hello world\")?;\n     ///\n     ///     Ok(())\n     /// }\n     /// ```\n     #[unstable(feature = \"stdio_locked\", issue = \"none\")]\n-    pub fn into_lock(self) -> StdoutOwnedLock {\n+    pub fn into_locked(self) -> StdoutLock<'static> {\n         self.lock_any()\n     }\n }\n@@ -898,20 +869,6 @@ pub struct StderrLock<'a> {\n     inner: ReentrantMutexGuard<'a, RefCell<StderrRaw>>,\n }\n \n-/// Owned locked [`Stderr`] handle, returned by [`Stderr::into_lock`] and\n-/// [`io::stderr_locked`].\n-///\n-/// This is exactly like [`StderrLock`], except that it can outlive the the\n-/// [`Stderr`] handle that was used to create it. See the [`StderrLock`]\n-/// documentation for more details.\n-///\n-/// ### Note: Windows Portability Consideration\n-/// When operating in a console, the Windows implementation of this stream does not support\n-/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n-/// an error.\n-#[unstable(feature = \"stdio_locked\", issue = \"none\")]\n-pub type StderrOwnedLock = StderrLock<'static>;\n-\n /// Constructs a new handle to the standard error of the current process.\n ///\n /// This handle is not buffered.\n@@ -989,8 +946,8 @@ pub fn stderr() -> Stderr {\n /// }\n /// ```\n #[unstable(feature = \"stdio_locked\", issue = \"none\")]\n-pub fn stderr_locked() -> StderrOwnedLock {\n-    stderr().into_lock()\n+pub fn stderr_locked() -> StderrLock<'static> {\n+    stderr().into_locked()\n }\n \n impl Stderr {\n@@ -1041,15 +998,15 @@ impl Stderr {\n     ///\n     /// fn foo() -> io::Result<()> {\n     ///     let stderr = io::stderr();\n-    ///     let mut handle = stderr.into_lock();\n+    ///     let mut handle = stderr.into_locked();\n     ///\n     ///     handle.write_all(b\"hello world\")?;\n     ///\n     ///     Ok(())\n     /// }\n     /// ```\n     #[unstable(feature = \"stdio_locked\", issue = \"none\")]\n-    pub fn into_lock(self) -> StderrOwnedLock {\n+    pub fn into_locked(self) -> StderrLock<'static> {\n         self.lock_any()\n     }\n }"}, {"sha": "b1df6b7131c8779f0fe2a3da9a51faedc9b36807", "filename": "library/std/src/io/stdio/tests.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c58ceb7a42b5e06e2d7ba5fe727b05af5d073d3e/library%2Fstd%2Fsrc%2Fio%2Fstdio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58ceb7a42b5e06e2d7ba5fe727b05af5d073d3e/library%2Fstd%2Fsrc%2Fio%2Fstdio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio%2Ftests.rs?ref=c58ceb7a42b5e06e2d7ba5fe727b05af5d073d3e", "patch": "@@ -47,21 +47,6 @@ fn panic_doesnt_poison() {\n     let _a = _a.lock();\n }\n \n-#[test]\n-fn stderr_owned_lock_static() {\n-    assert_static::<StderrOwnedLock>();\n-}\n-#[test]\n-fn stdin_owned_lock_static() {\n-    assert_static::<StdinOwnedLock>();\n-}\n-#[test]\n-fn stdout_owned_lock_static() {\n-    assert_static::<StdoutOwnedLock>();\n-}\n-\n-fn assert_static<T: 'static>() {}\n-\n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n fn test_lock_stderr() {\n@@ -107,9 +92,9 @@ impl<'a> Stdio<'a> for Stdout {\n \n // Helper trait to make lock testing function generic.\n trait StdioOwnedLock: 'static {}\n-impl StdioOwnedLock for StderrOwnedLock {}\n-impl StdioOwnedLock for StdinOwnedLock {}\n-impl StdioOwnedLock for StdoutOwnedLock {}\n+impl StdioOwnedLock for StderrLock<'static> {}\n+impl StdioOwnedLock for StdinLock<'static> {}\n+impl StdioOwnedLock for StdoutLock<'static> {}\n \n // Tests locking on stdio handles by starting two threads and checking that\n // they block each other appropriately."}]}