{"sha": "53254a888b424b02b1daaedfae63acb4e3231912", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMjU0YTg4OGI0MjRiMDJiMWRhYWVkZmFlNjNhY2I0ZTMyMzE5MTI=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2018-09-28T05:19:56Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2018-09-28T06:53:38Z"}, "message": "Add enable-missing-tools option", "tree": {"sha": "d25d590b7d1259942e50052f36b5f48c056a4b01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d25d590b7d1259942e50052f36b5f48c056a4b01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53254a888b424b02b1daaedfae63acb4e3231912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53254a888b424b02b1daaedfae63acb4e3231912", "html_url": "https://github.com/rust-lang/rust/commit/53254a888b424b02b1daaedfae63acb4e3231912", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53254a888b424b02b1daaedfae63acb4e3231912/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d52cbce6db83e4fc2d8706b4e4b9c7da76cbcf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d52cbce6db83e4fc2d8706b4e4b9c7da76cbcf8", "html_url": "https://github.com/rust-lang/rust/commit/7d52cbce6db83e4fc2d8706b4e4b9c7da76cbcf8"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "ba2be29e4593237253e57d8f93cf26ffa183f722", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53254a888b424b02b1daaedfae63acb4e3231912/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53254a888b424b02b1daaedfae63acb4e3231912/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=53254a888b424b02b1daaedfae63acb4e3231912", "patch": "@@ -134,6 +134,7 @@ pub struct Config {\n     pub test_miri: bool,\n     pub save_toolstates: Option<PathBuf>,\n     pub print_step_timings: bool,\n+    pub missing_tools: bool,\n \n     // Fallback musl-root for all targets\n     pub musl_root: Option<PathBuf>,\n@@ -375,6 +376,7 @@ impl Config {\n         config.rust_codegen_backends = vec![INTERNER.intern_str(\"llvm\")];\n         config.rust_codegen_backends_dir = \"codegen-backends\".to_owned();\n         config.deny_warnings = true;\n+        config.missing_tools = false;\n \n         // set by bootstrap.py\n         config.build = INTERNER.intern_str(&env::var(\"BUILD\").expect(\"'BUILD' to be set\"));"}, {"sha": "3b8af5061cb3b9c11e8b7791e3cae809009a1466", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53254a888b424b02b1daaedfae63acb4e3231912/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/53254a888b424b02b1daaedfae63acb4e3231912/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=53254a888b424b02b1daaedfae63acb4e3231912", "patch": "@@ -69,6 +69,7 @@ def v(*args):\n o(\"emscripten\", None, \"compile the emscripten backend as well as LLVM\")\n o(\"full-tools\", None, \"enable all tools\")\n o(\"lldb\", \"rust.lldb\", \"build lldb\")\n+o(\"enable-missing-tools\", \"build.missing-tools\", \"allow failures when building tools\")\n \n # Optimization and debugging options. These may be overridden by the release\n # channel, etc."}, {"sha": "c25f94357f24c16734a297c736ccca4271560db4", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/53254a888b424b02b1daaedfae63acb4e3231912/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53254a888b424b02b1daaedfae63acb4e3231912/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=53254a888b424b02b1daaedfae63acb4e3231912", "patch": "@@ -67,6 +67,14 @@ fn rust_installer(builder: &Builder) -> Command {\n     builder.tool_cmd(Tool::RustInstaller)\n }\n \n+fn missing_tool(tool_name: &str, skip: bool) {\n+    if skip {\n+        println!(\"Unable to build {}, skipping dist\", tool_name)\n+    } else {\n+        panic!(\"Unable to build {}\", tool_name)\n+    }\n+}\n+\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Docs {\n     pub stage: u32,\n@@ -1166,7 +1174,7 @@ impl Step for Rls {\n         let rls = builder.ensure(tool::Rls {\n             compiler: builder.compiler(stage, builder.config.build),\n             target, extra_features: Vec::new()\n-        }).or_else(|| { println!(\"Unable to build RLS, skipping dist\"); None })?;\n+        }).or_else(|| { missing_tool(\"RLS\", builder.build.config.missing_tools); None })?;\n \n         builder.install(&rls, &image.join(\"bin\"), 0o755);\n         let doc = image.join(\"share/doc/rls\");\n@@ -1245,11 +1253,11 @@ impl Step for Clippy {\n         let clippy = builder.ensure(tool::Clippy {\n             compiler: builder.compiler(stage, builder.config.build),\n             target, extra_features: Vec::new()\n-        }).or_else(|| { println!(\"Unable to build clippy, skipping dist\"); None })?;\n+        }).or_else(|| { missing_tool(\"clippy\", builder.build.config.missing_tools); None })?;\n         let cargoclippy = builder.ensure(tool::CargoClippy {\n             compiler: builder.compiler(stage, builder.config.build),\n             target, extra_features: Vec::new()\n-        }).or_else(|| { println!(\"Unable to build cargo clippy, skipping dist\"); None })?;\n+        }).or_else(|| { missing_tool(\"cargo clippy\", builder.build.config.missing_tools); None })?;\n \n         builder.install(&clippy, &image.join(\"bin\"), 0o755);\n         builder.install(&cargoclippy, &image.join(\"bin\"), 0o755);\n@@ -1324,11 +1332,11 @@ impl Step for Rustfmt {\n         let rustfmt = builder.ensure(tool::Rustfmt {\n             compiler: builder.compiler(stage, builder.config.build),\n             target, extra_features: Vec::new()\n-        }).or_else(|| { println!(\"Unable to build Rustfmt, skipping dist\"); None })?;\n+        }).or_else(|| { missing_tool(\"Rustfmt\", builder.build.config.missing_tools); None })?;\n         let cargofmt = builder.ensure(tool::Cargofmt {\n             compiler: builder.compiler(stage, builder.config.build),\n             target, extra_features: Vec::new()\n-        }).or_else(|| { println!(\"Unable to build Cargofmt, skipping dist\"); None })?;\n+        }).or_else(|| { missing_tool(\"Cargofmt\", builder.build.config.missing_tools); None })?;\n \n         builder.install(&rustfmt, &image.join(\"bin\"), 0o755);\n         builder.install(&cargofmt, &image.join(\"bin\"), 0o755);"}, {"sha": "281f4f92a7fabf320e69b31cd14530d80c85b2bb", "filename": "src/ci/run.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53254a888b424b02b1daaedfae63acb4e3231912/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/53254a888b424b02b1daaedfae63acb4e3231912/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=53254a888b424b02b1daaedfae63acb4e3231912", "patch": "@@ -76,6 +76,10 @@ else\n   fi\n fi\n \n+if [ \"$RUST_RELEASE_CHANNEL\" = \"nightly\" ] or [ \"$DIST_REQUIRE_ALL_TOOLS\" = \"\" ]; then\n+    RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-missing-tools\"\n+fi\n+\n # We've had problems in the past of shell scripts leaking fds into the sccache\n # server (#48192) which causes Cargo to erroneously think that a build script\n # hasn't finished yet. Try to solve that problem by starting a very long-lived"}]}