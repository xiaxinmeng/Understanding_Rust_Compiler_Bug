{"sha": "d2731d8e9338d8fe844e19d3fbb39617753e65f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNzMxZDhlOTMzOGQ4ZmU4NDRlMTlkM2ZiYjM5NjE3NzUzZTY1ZjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-01T08:22:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-01T08:22:06Z"}, "message": "Auto merge of #82654 - JohnTitor:rollup-nkcdkzp, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #82309 (Propagate RUSTDOCFLAGS in the environment when documenting)\n - #82403 (rustbuild: print out env vars on verbose rustc invocations)\n - #82507 (Rename the `tidy` binary to `rust-tidy`)\n - #82531 (Add GUI tests)\n - #82532 (Add `build.print_step_rusage` to config.toml)\n - #82543 (fix env var name in CI)\n - #82622 (Propagate `--test-args` for `x.py test src/tools/cargo`)\n - #82628 (Try to clarify GlobalAlloc::realloc documentation comment.)\n - #82630 (Fix a typo in the `find_anon_type` doc)\n - #82643 (Add more proc-macro attribute tests)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ad528516bfd655a1c9e08731080484a8fc4c4994", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad528516bfd655a1c9e08731080484a8fc4c4994"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2731d8e9338d8fe844e19d3fbb39617753e65f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2731d8e9338d8fe844e19d3fbb39617753e65f4", "html_url": "https://github.com/rust-lang/rust/commit/d2731d8e9338d8fe844e19d3fbb39617753e65f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2731d8e9338d8fe844e19d3fbb39617753e65f4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05c300144cebbf3ddaff213b7485f669a9e0b660", "url": "https://api.github.com/repos/rust-lang/rust/commits/05c300144cebbf3ddaff213b7485f669a9e0b660", "html_url": "https://github.com/rust-lang/rust/commit/05c300144cebbf3ddaff213b7485f669a9e0b660"}, {"sha": "e2d8efb997f8decf2269366e3c9c9119d6a82e18", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d8efb997f8decf2269366e3c9c9119d6a82e18", "html_url": "https://github.com/rust-lang/rust/commit/e2d8efb997f8decf2269366e3c9c9119d6a82e18"}], "stats": {"total": 2819, "additions": 2428, "deletions": 391}, "files": [{"sha": "99a0c0b4b85de13523646072e0dc3bd8a733ad11", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -63,7 +63,7 @@ jobs:\n         run: \"echo \\\"[CI_PR_NUMBER=$num]\\\"\"\n         env:\n           num: \"${{ github.event.number }}\"\n-        if: \"success() && !env.SKIP_JOBS && github.event_name == 'pull_request'\"\n+        if: \"success() && !env.SKIP_JOB && github.event_name == 'pull_request'\"\n       - name: add extra environment variables\n         run: src/ci/scripts/setup-environment.sh\n         env:\n@@ -425,7 +425,7 @@ jobs:\n         run: \"echo \\\"[CI_PR_NUMBER=$num]\\\"\"\n         env:\n           num: \"${{ github.event.number }}\"\n-        if: \"success() && !env.SKIP_JOBS && github.event_name == 'pull_request'\"\n+        if: \"success() && !env.SKIP_JOB && github.event_name == 'pull_request'\"\n       - name: add extra environment variables\n         run: src/ci/scripts/setup-environment.sh\n         env:\n@@ -532,7 +532,7 @@ jobs:\n         run: \"echo \\\"[CI_PR_NUMBER=$num]\\\"\"\n         env:\n           num: \"${{ github.event.number }}\"\n-        if: \"success() && !env.SKIP_JOBS && github.event_name == 'pull_request'\"\n+        if: \"success() && !env.SKIP_JOB && github.event_name == 'pull_request'\"\n       - name: add extra environment variables\n         run: src/ci/scripts/setup-environment.sh\n         env:"}, {"sha": "d9ab83190455130b4a6bbee4fb9dfe329fb60af6", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -19,7 +19,7 @@ use rustc_middle::ty::{self, Region, TyCtxt};\n ///    { x.push(y); }\n /// ```\n /// The function returns the nested type corresponding to the anonymous region\n-/// for e.g., `&u8` and Vec<`&u8`.\n+/// for e.g., `&u8` and `Vec<&u8>`.\n pub(crate) fn find_anon_type(\n     tcx: TyCtxt<'tcx>,\n     region: Region<'tcx>,"}, {"sha": "ba382aac828d4b139ddb382f62830addf4d74125", "filename": "config.toml.example", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -290,6 +290,12 @@ changelog-seen = 2\n # tracking over time)\n #print-step-timings = false\n \n+# Print out resource usage data for each rustbuild step, as defined by the Unix\n+# struct rusage. (Note that this setting is completely unstable: the data it\n+# captures, what platforms it supports, the format of its associated output, and\n+# this setting's very existence, are all subject to change.)\n+#print-step-rusage = false\n+\n # =============================================================================\n # General install configuration options\n # ============================================================================="}, {"sha": "6dcc110f1539c104ba3a560599bb47ffe7e096ca", "filename": "library/core/src/alloc/global.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -122,7 +122,7 @@ pub unsafe trait GlobalAlloc {\n     ///   this allocator,\n     ///\n     /// * `layout` must be the same layout that was used\n-    ///   to allocate that block of memory,\n+    ///   to allocate that block of memory.\n     #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout);\n \n@@ -167,7 +167,10 @@ pub unsafe trait GlobalAlloc {\n     /// and should be considered unusable (unless of course it was\n     /// transferred back to the caller again via the return value of\n     /// this method). The new memory block is allocated with `layout`, but\n-    /// with the `size` updated to `new_size`.\n+    /// with the `size` updated to `new_size`. This new layout should be\n+    /// used when deallocating the new memory block with `dealloc`. The range\n+    /// `0..min(layout.size(), new_size)` of the new memory block is\n+    /// guaranteed to have the same values as the original block.\n     ///\n     /// If this method returns null, then ownership of the memory\n     /// block has not been transferred to this allocator, and the"}, {"sha": "6b1be0ca09d0d8c2f9c28766c9988a73b78fa046", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 85, "deletions": 3, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -139,6 +139,12 @@ fn main() {\n     }\n \n     if verbose > 1 {\n+        let rust_env_vars =\n+            env::vars().filter(|(k, _)| k.starts_with(\"RUST\") || k.starts_with(\"CARGO\"));\n+        for (i, (k, v)) in rust_env_vars.enumerate() {\n+            eprintln!(\"rustc env[{}]: {:?}={:?}\", i, k, v);\n+        }\n+        eprintln!(\"rustc working directory: {}\", env::current_dir().unwrap().display());\n         eprintln!(\n             \"rustc command: {:?}={:?} {:?}\",\n             bootstrap::util::dylib_path_var(),\n@@ -155,16 +161,24 @@ fn main() {\n         cmd.status().expect(&errmsg)\n     };\n \n-    if env::var_os(\"RUSTC_PRINT_STEP_TIMINGS\").is_some() {\n+    if env::var_os(\"RUSTC_PRINT_STEP_TIMINGS\").is_some()\n+        || env::var_os(\"RUSTC_PRINT_STEP_RUSAGE\").is_some()\n+    {\n         if let Some(crate_name) = crate_name {\n             let dur = start.elapsed();\n             let is_test = args.iter().any(|a| a == \"--test\");\n+            // If the user requested resource usage data, then\n+            // include that in addition to the timing output.\n+            let rusage_data =\n+                env::var_os(\"RUSTC_PRINT_STEP_RUSAGE\").and_then(|_| format_rusage_data());\n             eprintln!(\n-                \"[RUSTC-TIMING] {} test:{} {}.{:03}\",\n+                \"[RUSTC-TIMING] {} test:{} {}.{:03}{}{}\",\n                 crate_name,\n                 is_test,\n                 dur.as_secs(),\n-                dur.subsec_millis()\n+                dur.subsec_millis(),\n+                if rusage_data.is_some() { \" \" } else { \"\" },\n+                rusage_data.unwrap_or(String::new()),\n             );\n         }\n     }\n@@ -192,3 +206,71 @@ fn main() {\n         }\n     }\n }\n+\n+#[cfg(not(unix))]\n+/// getrusage is not available on non-unix platforms. So for now, we do not\n+/// bother trying to make a shim for it.\n+fn format_rusage_data() -> Option<String> {\n+    None\n+}\n+\n+#[cfg(unix)]\n+/// Tries to build a string with human readable data for several of the rusage\n+/// fields. Note that we are focusing mainly on data that we believe to be\n+/// supplied on Linux (the `rusage` struct has other fields in it but they are\n+/// currently unsupported by Linux).\n+fn format_rusage_data() -> Option<String> {\n+    let rusage: libc::rusage = unsafe {\n+        let mut recv = std::mem::zeroed();\n+        // -1 is RUSAGE_CHILDREN, which means to get the rusage for all children\n+        // (and grandchildren, etc) processes that have respectively terminated\n+        // and been waited for.\n+        let retval = libc::getrusage(-1, &mut recv);\n+        if retval != 0 {\n+            return None;\n+        }\n+        recv\n+    };\n+    // Mac OS X reports the maxrss in bytes, not kb.\n+    let divisor = if env::consts::OS == \"macos\" { 1024 } else { 1 };\n+    let maxrss = rusage.ru_maxrss + (divisor - 1) / divisor;\n+\n+    let mut init_str = format!(\n+        \"user: {USER_SEC}.{USER_USEC:03} \\\n+         sys: {SYS_SEC}.{SYS_USEC:03} \\\n+         max rss (kb): {MAXRSS}\",\n+        USER_SEC = rusage.ru_utime.tv_sec,\n+        USER_USEC = rusage.ru_utime.tv_usec,\n+        SYS_SEC = rusage.ru_stime.tv_sec,\n+        SYS_USEC = rusage.ru_stime.tv_usec,\n+        MAXRSS = maxrss\n+    );\n+\n+    // The remaining rusage stats vary in platform support. So we treat\n+    // uniformly zero values in each category as \"not worth printing\", since it\n+    // either means no events of that type occurred, or that the platform\n+    // does not support it.\n+\n+    let minflt = rusage.ru_minflt;\n+    let majflt = rusage.ru_majflt;\n+    if minflt != 0 || majflt != 0 {\n+        init_str.push_str(&format!(\" page reclaims: {} page faults: {}\", minflt, majflt));\n+    }\n+\n+    let inblock = rusage.ru_inblock;\n+    let oublock = rusage.ru_oublock;\n+    if inblock != 0 || oublock != 0 {\n+        init_str.push_str(&format!(\" fs block inputs: {} fs block outputs: {}\", inblock, oublock));\n+    }\n+\n+    let nvcsw = rusage.ru_nvcsw;\n+    let nivcsw = rusage.ru_nivcsw;\n+    if nvcsw != 0 || nivcsw != 0 {\n+        init_str.push_str(&format!(\n+            \" voluntary ctxt switches: {} involuntary ctxt switches: {}\",\n+            nvcsw, nivcsw\n+        ));\n+    }\n+\n+    return Some(init_str);\n+}"}, {"sha": "4a7c1850dd3d59e40f0499484c04863359518585", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -939,6 +939,12 @@ impl<'a> Builder<'a> {\n         // but this breaks CI. At the very least, stage0 `rustdoc` needs `--cfg bootstrap`. See\n         // #71458.\n         let mut rustdocflags = rustflags.clone();\n+        rustdocflags.propagate_cargo_env(\"RUSTDOCFLAGS\");\n+        if stage == 0 {\n+            rustdocflags.env(\"RUSTDOCFLAGS_BOOTSTRAP\");\n+        } else {\n+            rustdocflags.env(\"RUSTDOCFLAGS_NOT_BOOTSTRAP\");\n+        }\n \n         if let Ok(s) = env::var(\"CARGOFLAGS\") {\n             cargo.args(s.split_whitespace());\n@@ -1259,6 +1265,10 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_PRINT_STEP_TIMINGS\", \"1\");\n         }\n \n+        if self.config.print_step_rusage {\n+            cargo.env(\"RUSTC_PRINT_STEP_RUSAGE\", \"1\");\n+        }\n+\n         if self.config.backtrace_on_ice {\n             cargo.env(\"RUSTC_BACKTRACE_ON_ICE\", \"1\");\n         }\n@@ -1544,21 +1554,27 @@ impl<'a> Builder<'a> {\n mod tests;\n \n #[derive(Debug, Clone)]\n-struct Rustflags(String);\n+struct Rustflags(String, TargetSelection);\n \n impl Rustflags {\n     fn new(target: TargetSelection) -> Rustflags {\n-        let mut ret = Rustflags(String::new());\n+        let mut ret = Rustflags(String::new(), target);\n+        ret.propagate_cargo_env(\"RUSTFLAGS\");\n+        ret\n+    }\n \n+    /// By default, cargo will pick up on various variables in the environment. However, bootstrap\n+    /// reuses those variables to pass additional flags to rustdoc, so by default they get overriden.\n+    /// Explicitly add back any previous value in the environment.\n+    ///\n+    /// `prefix` is usually `RUSTFLAGS` or `RUSTDOCFLAGS`.\n+    fn propagate_cargo_env(&mut self, prefix: &str) {\n         // Inherit `RUSTFLAGS` by default ...\n-        ret.env(\"RUSTFLAGS\");\n+        self.env(prefix);\n \n-        // ... and also handle target-specific env RUSTFLAGS if they're\n-        // configured.\n-        let target_specific = format!(\"CARGO_TARGET_{}_RUSTFLAGS\", crate::envify(&target.triple));\n-        ret.env(&target_specific);\n-\n-        ret\n+        // ... and also handle target-specific env RUSTFLAGS if they're configured.\n+        let target_specific = format!(\"CARGO_TARGET_{}_{}\", crate::envify(&self.1.triple), prefix);\n+        self.env(&target_specific);\n     }\n \n     fn env(&mut self, env: &str) {"}, {"sha": "b2af8e59b7c9fcb5e0ed4eda2117b912d2f64792", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -161,6 +161,7 @@ pub struct Config {\n     pub verbose_tests: bool,\n     pub save_toolstates: Option<PathBuf>,\n     pub print_step_timings: bool,\n+    pub print_step_rusage: bool,\n     pub missing_tools: bool,\n \n     // Fallback musl-root for all targets\n@@ -380,6 +381,7 @@ struct Build {\n     configure_args: Option<Vec<String>>,\n     local_rebuild: Option<bool>,\n     print_step_timings: Option<bool>,\n+    print_step_rusage: Option<bool>,\n     check_stage: Option<u32>,\n     doc_stage: Option<u32>,\n     build_stage: Option<u32>,\n@@ -679,6 +681,7 @@ impl Config {\n         set(&mut config.configure_args, build.configure_args);\n         set(&mut config.local_rebuild, build.local_rebuild);\n         set(&mut config.print_step_timings, build.print_step_timings);\n+        set(&mut config.print_step_rusage, build.print_step_rusage);\n \n         // See https://github.com/rust-lang/compiler-team/issues/326\n         config.stage = match config.cmd {"}, {"sha": "c0cd24dd81f01f34e0628b3d16a79cfbd618d5bb", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -212,6 +212,7 @@ impl Step for Cargo {\n         if !builder.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }\n+        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n \n         // Don't run cross-compile tests, we may not have cross-compiled libstd libs\n         // available."}, {"sha": "71aa6bb150e2e7d59f671304029832cb28520c36", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -47,7 +47,7 @@ impl Step for ToolBuild {\n     fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n         let compiler = self.compiler;\n         let target = self.target;\n-        let tool = self.tool;\n+        let mut tool = self.tool;\n         let path = self.path;\n         let is_optional_tool = self.is_optional_tool;\n \n@@ -208,6 +208,12 @@ impl Step for ToolBuild {\n                 None\n             }\n         } else {\n+            // HACK(#82501): on Windows, the tools directory gets added to PATH when running tests, and\n+            // compiletest confuses HTML tidy with the in-tree tidy. Name the in-tree tidy something\n+            // different so the problem doesn't come up.\n+            if tool == \"tidy\" {\n+                tool = \"rust-tidy\";\n+            }\n             let cargo_out =\n                 builder.cargo_out(compiler, self.mode, target).join(exe(tool, compiler.host));\n             let bin = builder.tools_dir(compiler).join(exe(tool, compiler.host));"}, {"sha": "7125b33699a0ceaf4f3078fcf11144cfd882c134", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -110,7 +110,7 @@ x--expand-yaml-anchors--remove:\n         run: echo \"[CI_PR_NUMBER=$num]\"\n         env:\n           num: ${{ github.event.number }}\n-        if: success() && !env.SKIP_JOBS && github.event_name == 'pull_request'\n+        if: success() && !env.SKIP_JOB && github.event_name == 'pull_request'\n \n       - name: add extra environment variables\n         run: src/ci/scripts/setup-environment.sh"}, {"sha": "3eec3459a6393dc22ecd69c8355cde5a335b3771", "filename": "src/test/rustdoc-gui/search-input-mobile.goml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Frustdoc-gui%2Fsearch-input-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Frustdoc-gui%2Fsearch-input-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-input-mobile.goml?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -0,0 +1,11 @@\n+// Test to ensure that you can click on the search input, whatever the width.\n+// The PR which fixed it is: https://github.com/rust-lang/rust/pull/81592\n+goto: file://|DOC_PATH|/index.html\n+size: (463, 700)\n+// We first check that the search input isn't already focused.\n+assert-false: (\"input.search-input:focus\")\n+click: \"input.search-input\"\n+reload:\n+size: (750, 700)\n+click: \"input.search-input\"\n+assert: (\"input.search-input:focus\")"}, {"sha": "c35b48f57f4d23b3f2cb04bbd536515d1fa10011", "filename": "src/test/rustdoc-gui/shortcuts.goml", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Frustdoc-gui%2Fshortcuts.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Frustdoc-gui%2Fshortcuts.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fshortcuts.goml?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -0,0 +1,26 @@\n+// Check that the various shortcuts are working.\n+goto: file://|DOC_PATH|/index.html\n+// We first check that the search input isn't already focused.\n+assert-false: \"input.search-input:focus\"\n+press-key: \"s\"\n+assert: \"input.search-input:focus\"\n+press-key: \"Escape\"\n+assert-false: \"input.search-input:focus\"\n+// We now check for the help popup.\n+press-key: \"?\"\n+assert: (\"#help\", {\"display\": \"flex\"})\n+assert-false: \"#help.hidden\"\n+press-key: \"Escape\"\n+assert: (\"#help.hidden\", {\"display\": \"none\"})\n+// Check for the themes list.\n+assert: (\"#theme-choices\", {\"display\": \"none\"})\n+press-key: \"t\"\n+assert: (\"#theme-choices\", {\"display\": \"block\"})\n+press-key: \"t\"\n+// We ensure that 't' hides back the menu.\n+assert: (\"#theme-choices\", {\"display\": \"none\"})\n+press-key: \"t\"\n+assert: (\"#theme-choices\", {\"display\": \"block\"})\n+press-key: \"Escape\"\n+// We ensure that 'Escape' hides the menu too.\n+assert: (\"#theme-choices\", {\"display\": \"none\"})"}, {"sha": "47734c94fe29717969fd59a6a12eaac2dc221dec", "filename": "src/test/ui/proc-macro/attr-complex-fn.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.rs?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+// compile-flags: -Z span-debug --error-format human\n+// aux-build:test-macros.rs\n+\n+#![feature(stmt_expr_attributes)]\n+#![feature(custom_inner_attributes)]\n+#![feature(rustc_attrs)]\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+trait MyTrait<T> {}\n+struct MyStruct<const N: bool>;\n+\n+#[print_attr]\n+fn foo<T: MyTrait<MyStruct<{ true }>>>() {}\n+\n+impl<T> MyTrait<T> for MyStruct<{true}> {\n+    #![print_attr]\n+    #![rustc_dummy]\n+}\n+\n+fn main() {}"}, {"sha": "a395a9ac3e8faaec76eb89b49ef867647476cbc3", "filename": "src/test/ui/proc-macro/attr-complex-fn.stdout", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.stdout?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -0,0 +1,171 @@\n+PRINT-ATTR INPUT (DISPLAY): fn foo < T : MyTrait < MyStruct < { true } >> > () { }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"fn\",\n+        span: $DIR/attr-complex-fn.rs:19:1: 19:3 (#0),\n+    },\n+    Ident {\n+        ident: \"foo\",\n+        span: $DIR/attr-complex-fn.rs:19:4: 19:7 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:19:7: 19:8 (#0),\n+    },\n+    Ident {\n+        ident: \"T\",\n+        span: $DIR/attr-complex-fn.rs:19:8: 19:9 (#0),\n+    },\n+    Punct {\n+        ch: ':',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:19:9: 19:10 (#0),\n+    },\n+    Ident {\n+        ident: \"MyTrait\",\n+        span: $DIR/attr-complex-fn.rs:19:11: 19:18 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:19:18: 19:19 (#0),\n+    },\n+    Ident {\n+        ident: \"MyStruct\",\n+        span: $DIR/attr-complex-fn.rs:19:19: 19:27 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:19:27: 19:28 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"true\",\n+                span: $DIR/attr-complex-fn.rs:19:30: 19:34 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-complex-fn.rs:19:28: 19:36 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Joint,\n+        span: $DIR/attr-complex-fn.rs:19:36: 19:38 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Joint,\n+        span: $DIR/attr-complex-fn.rs:19:36: 19:38 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:19:38: 19:39 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [],\n+        span: $DIR/attr-complex-fn.rs:19:39: 19:41 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: $DIR/attr-complex-fn.rs:19:42: 19:44 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): impl < T > MyTrait < T > for MyStruct < { true } > { # ! [rustc_dummy] }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"impl\",\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Ident {\n+        ident: \"T\",\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Ident {\n+        ident: \"MyTrait\",\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Ident {\n+        ident: \"T\",\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Ident {\n+        ident: \"for\",\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Ident {\n+        ident: \"MyStruct\",\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"true\",\n+                span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"rustc_dummy\",\n+                        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+]"}, {"sha": "1a5003616400fe3b3b9990d56cce3d684b656c7f", "filename": "src/test/ui/proc-macro/auxiliary/test-macros.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -128,6 +128,20 @@ pub fn print_attr_args(args: TokenStream, input: TokenStream) -> TokenStream {\n     input\n }\n \n+#[proc_macro_attribute]\n+pub fn print_target_and_args(args: TokenStream, input: TokenStream) -> TokenStream {\n+    print_helper(args, \"ATTR_ARGS\");\n+    print_helper(input.clone(), \"ATTR\");\n+    input\n+}\n+\n+#[proc_macro_attribute]\n+pub fn print_target_and_args_consume(args: TokenStream, input: TokenStream) -> TokenStream {\n+    print_helper(args, \"ATTR_ARGS\");\n+    print_helper(input.clone(), \"ATTR\");\n+    TokenStream::new()\n+}\n+\n #[proc_macro_derive(Print, attributes(print_helper))]\n pub fn print_derive(input: TokenStream) -> TokenStream {\n     print_helper(input, \"DERIVE\");"}, {"sha": "ff2876e8471f0ba52f5516041ca4e944a95ba388", "filename": "src/test/ui/proc-macro/expand-to-derive.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-derive.rs?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -0,0 +1,34 @@\n+// check-pass\n+// compile-flags: -Z span-debug --error-format human\n+// aux-build:test-macros.rs\n+\n+#![feature(rustc_attrs)]\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+macro_rules! expand_to_derive {\n+    ($item:item) => {\n+        #[derive(Print)]\n+        struct Foo {\n+            #[cfg(FALSE)] removed: bool,\n+            field: [bool; {\n+                $item\n+                0\n+            }]\n+        }\n+    };\n+}\n+\n+expand_to_derive! {\n+    #[cfg_attr(not(FALSE), rustc_dummy)]\n+    struct Inner {\n+        #[cfg(FALSE)] removed_inner_field: bool,\n+        other_inner_field: u8,\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "7eb68643342c8298382d2673706ecbfc52bd6cca", "filename": "src/test/ui/proc-macro/expand-to-derive.stdout", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-derive.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-derive.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-derive.stdout?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -0,0 +1,109 @@\n+PRINT-DERIVE INPUT (DISPLAY): struct Foo\n+{\n+    field :\n+    [bool ; { #[rustc_dummy] struct Inner { other_inner_field : u8, } 0 }],\n+}\n+PRINT-DERIVE INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"field\",\n+                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"bool\",\n+                        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                    },\n+                    Punct {\n+                        ch: ';',\n+                        spacing: Alone,\n+                        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                    },\n+                    Group {\n+                        delimiter: Brace,\n+                        stream: TokenStream [\n+                            Punct {\n+                                ch: '#',\n+                                spacing: Alone,\n+                                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                            },\n+                            Group {\n+                                delimiter: Bracket,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"rustc_dummy\",\n+                                        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                                    },\n+                                ],\n+                                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                            },\n+                            Ident {\n+                                ident: \"struct\",\n+                                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                            },\n+                            Ident {\n+                                ident: \"Inner\",\n+                                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                            },\n+                            Group {\n+                                delimiter: Brace,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"other_inner_field\",\n+                                        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                                    },\n+                                    Punct {\n+                                        ch: ':',\n+                                        spacing: Alone,\n+                                        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                                    },\n+                                    Ident {\n+                                        ident: \"u8\",\n+                                        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                                    },\n+                                    Punct {\n+                                        ch: ',',\n+                                        spacing: Alone,\n+                                        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                                    },\n+                                ],\n+                                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                            },\n+                            Literal {\n+                                kind: Integer,\n+                                symbol: \"0\",\n+                                suffix: None,\n+                                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                            },\n+                        ],\n+                        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                    },\n+                ],\n+                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+            },\n+        ],\n+        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+    },\n+]"}, {"sha": "6a353ca3263d0728fe3f6829dcb1e2ee2bc8808d", "filename": "src/test/ui/proc-macro/inner-attrs.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.rs?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -0,0 +1,47 @@\n+// check-pass\n+// compile-flags: -Z span-debug --error-format human\n+// aux-build:test-macros.rs\n+\n+#![feature(custom_inner_attributes)]\n+#![feature(proc_macro_hygiene)]\n+#![feature(stmt_expr_attributes)]\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+#[print_target_and_args(first)]\n+#[print_target_and_args(second)]\n+fn foo() {\n+    #![print_target_and_args(third)]\n+    #![print_target_and_args(fourth)]\n+}\n+\n+struct MyStruct {\n+    field: bool\n+}\n+\n+fn bar() {\n+    (#![print_target_and_args(fifth)] 1, 2);\n+\n+    [#![print_target_and_args(sixth)] 1 , 2];\n+    [#![print_target_and_args(seventh)] true ; 5];\n+\n+\n+    match 0 {\n+        #![print_target_and_args(eighth)]\n+        _ => {}\n+    }\n+\n+    MyStruct { #![print_target_and_args(ninth)] field: true };\n+}\n+\n+extern {\n+    fn weird_extern() {\n+        #![print_target_and_args_consume(tenth)]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "2fd8d8a242ef545bdcd5c4d64a12e1de8337de75", "filename": "src/test/ui/proc-macro/inner-attrs.stdout", "status": "added", "additions": 520, "deletions": 0, "changes": 520, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -0,0 +1,520 @@\n+PRINT-ATTR_ARGS INPUT (DISPLAY): first\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"first\",\n+        span: $DIR/inner-attrs.rs:15:25: 15:30 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): #[print_target_and_args(second)] fn foo()\n+{ # ! [print_target_and_args(third)] # ! [print_target_and_args(fourth)] }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"print_target_and_args\",\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"second\",\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Ident {\n+        ident: \"fn\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Ident {\n+        ident: \"foo\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"third\",\n+                                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"fourth\",\n+                                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): second\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"second\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): fn foo()\n+{ # ! [print_target_and_args(third)] # ! [print_target_and_args(fourth)] }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"fn\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Ident {\n+        ident: \"foo\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"third\",\n+                                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"fourth\",\n+                                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): third\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"third\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): fn foo() { # ! [print_target_and_args(fourth)] }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"fn\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Ident {\n+        ident: \"foo\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"fourth\",\n+                                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): fourth\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"fourth\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): fn foo() { }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"fn\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Ident {\n+        ident: \"foo\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): fifth\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"fifth\",\n+        span: $DIR/inner-attrs.rs:27:31: 27:36 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): (1, 2) ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/inner-attrs.rs:27:5: 27:45 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:27:5: 27:45 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"2\",\n+                suffix: None,\n+                span: $DIR/inner-attrs.rs:27:5: 27:45 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:27:5: 27:45 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/inner-attrs.rs:27:5: 27:45 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): sixth\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"sixth\",\n+        span: $DIR/inner-attrs.rs:29:31: 29:36 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): [1, 2] ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/inner-attrs.rs:29:5: 29:46 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:29:5: 29:46 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"2\",\n+                suffix: None,\n+                span: $DIR/inner-attrs.rs:29:5: 29:46 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:29:5: 29:46 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/inner-attrs.rs:29:5: 29:46 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): seventh\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"seventh\",\n+        span: $DIR/inner-attrs.rs:30:31: 30:38 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): [true ; 5] ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"true\",\n+                span: $DIR/inner-attrs.rs:30:5: 30:51 (#0),\n+            },\n+            Punct {\n+                ch: ';',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:30:5: 30:51 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"5\",\n+                suffix: None,\n+                span: $DIR/inner-attrs.rs:30:5: 30:51 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:30:5: 30:51 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/inner-attrs.rs:30:5: 30:51 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): eighth\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"eighth\",\n+        span: $DIR/inner-attrs.rs:34:34: 34:40 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): match 0 { _ => { } }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"match\",\n+        span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n+    },\n+    Literal {\n+        kind: Integer,\n+        symbol: \"0\",\n+        suffix: None,\n+        span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"_\",\n+                span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n+            },\n+            Punct {\n+                ch: '=',\n+                spacing: Joint,\n+                span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n+            },\n+            Punct {\n+                ch: '>',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n+            },\n+            Group {\n+                delimiter: Brace,\n+                stream: TokenStream [],\n+                span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): ninth\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"ninth\",\n+        span: $DIR/inner-attrs.rs:38:41: 38:46 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): MyStruct { field : true, } ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"MyStruct\",\n+        span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"field\",\n+                span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+            },\n+            Ident {\n+                ident: \"true\",\n+                span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): tenth\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"tenth\",\n+        span: $DIR/inner-attrs.rs:43:42: 43:47 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): fn weird_extern() { }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"fn\",\n+        span: $DIR/inner-attrs.rs:42:5: 44:6 (#0),\n+    },\n+    Ident {\n+        ident: \"weird_extern\",\n+        span: $DIR/inner-attrs.rs:42:5: 44:6 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [],\n+        span: $DIR/inner-attrs.rs:42:5: 44:6 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: $DIR/inner-attrs.rs:42:5: 44:6 (#0),\n+    },\n+]"}, {"sha": "ef56e8e02d0c4f0b70ab45de026f1e7c16eedb8b", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.rs?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -10,6 +10,9 @@\n // (a pretty-printed struct may cause a line to start with '{' )\n // FIXME: We currently lose spans here (see issue #43081)\n \n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n #[macro_use]\n extern crate test_macros;\n \n@@ -58,6 +61,10 @@ struct Foo<#[cfg(FALSE)] A, B> {\n             u8\n         );\n \n+        fn plain_removed_fn() {\n+            #![cfg_attr(not(FALSE), cfg(FALSE))]\n+        }\n+\n         0\n     }],\n     #[print_helper(d)]"}, {"sha": "25f36108001883e9749bd301cc4a0bbb5d2be2cd", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stderr?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -1,5 +1,5 @@\n warning: derive helper attribute is used before it is introduced\n-  --> $DIR/issue-75930-derive-cfg.rs:16:3\n+  --> $DIR/issue-75930-derive-cfg.rs:19:3\n    |\n LL | #[print_helper(a)]\n    |   ^^^^^^^^^^^^"}, {"sha": "7cbc0c669a5ddc1d4ee707f84fe91d33863e6731", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.stdout", "status": "modified", "additions": 449, "deletions": 370, "changes": 819, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4"}, {"sha": "a221b9578af3e59cc2a36a090ff39ee3e8c80cd2", "filename": "src/test/ui/proc-macro/macro-rules-derive-cfg.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.rs?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -0,0 +1,31 @@\n+// check-pass\n+// compile-flags: -Z span-debug --error-format human\n+// aux-build:test-macros.rs\n+\n+#![feature(rustc_attrs)]\n+#![feature(stmt_expr_attributes)]\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+macro_rules! produce_it {\n+    ($expr:expr) => {\n+        #[derive(Print)]\n+        struct Foo {\n+            val: [bool; {\n+                let a = #[cfg_attr(not(FALSE), rustc_dummy(first))] $expr;\n+                0\n+            }]\n+        }\n+    }\n+}\n+\n+produce_it!(#[cfg_attr(not(FALSE), rustc_dummy(second))] {\n+    #![cfg_attr(not(FALSE), allow(unused))]\n+    30\n+});\n+\n+fn main() {}"}, {"sha": "5db18590bdf82f6c64d9ae08de210c13a6d069ff", "filename": "src/test/ui/proc-macro/macro-rules-derive-cfg.stdout", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -0,0 +1,176 @@\n+PRINT-DERIVE INPUT (DISPLAY): struct Foo\n+{\n+    val :\n+    [bool ;\n+     {\n+         let a = #[rustc_dummy(first)] #[rustc_dummy(second)]\n+         { # ! [allow(unused)] 30 } ; 0\n+     }],\n+}\n+PRINT-DERIVE INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"val\",\n+                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"bool\",\n+                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                    },\n+                    Punct {\n+                        ch: ';',\n+                        spacing: Alone,\n+                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                    },\n+                    Group {\n+                        delimiter: Brace,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"let\",\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Ident {\n+                                ident: \"a\",\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Punct {\n+                                ch: '=',\n+                                spacing: Alone,\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Punct {\n+                                ch: '#',\n+                                spacing: Alone,\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Group {\n+                                delimiter: Bracket,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"rustc_dummy\",\n+                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                    },\n+                                    Group {\n+                                        delimiter: Parenthesis,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"first\",\n+                                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                            },\n+                                        ],\n+                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                    },\n+                                ],\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Punct {\n+                                ch: '#',\n+                                spacing: Alone,\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Group {\n+                                delimiter: Bracket,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"rustc_dummy\",\n+                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                    },\n+                                    Group {\n+                                        delimiter: Parenthesis,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"second\",\n+                                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                            },\n+                                        ],\n+                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                    },\n+                                ],\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Group {\n+                                delimiter: Brace,\n+                                stream: TokenStream [\n+                                    Punct {\n+                                        ch: '#',\n+                                        spacing: Joint,\n+                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                    },\n+                                    Punct {\n+                                        ch: '!',\n+                                        spacing: Alone,\n+                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                    },\n+                                    Group {\n+                                        delimiter: Bracket,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"allow\",\n+                                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                            },\n+                                            Group {\n+                                                delimiter: Parenthesis,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"unused\",\n+                                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                            },\n+                                        ],\n+                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                    },\n+                                    Literal {\n+                                        kind: Integer,\n+                                        symbol: \"30\",\n+                                        suffix: None,\n+                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                    },\n+                                ],\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Punct {\n+                                ch: ';',\n+                                spacing: Alone,\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Literal {\n+                                kind: Integer,\n+                                symbol: \"0\",\n+                                suffix: None,\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                        ],\n+                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                    },\n+                ],\n+                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+            },\n+        ],\n+        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+    },\n+]"}, {"sha": "53cfbb7c98fc92327aecd4f9a849df78ddab2c84", "filename": "src/test/ui/proc-macro/nested-derive-cfg.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fnested-derive-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fnested-derive-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-derive-cfg.rs?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: -Z span-debug --error-format human\n+// aux-build:test-macros.rs\n+// check-pass\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+#[derive(Print)]\n+struct Foo {\n+    #[cfg(FALSE)] removed: bool,\n+    my_array: [bool; {\n+        struct Inner {\n+            #[cfg(FALSE)] removed_inner_field: u8,\n+            non_removed_inner_field: usize\n+        }\n+        0\n+    }]\n+}\n+\n+fn main() {}"}, {"sha": "cf4e5d94d8a3341b5cd6e8245720dd376dfe9041", "filename": "src/test/ui/proc-macro/nested-derive-cfg.stdout", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fnested-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fnested-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-derive-cfg.stdout?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -0,0 +1,94 @@\n+PRINT-DERIVE INPUT (DISPLAY): struct Foo\n+{\n+    my_array :\n+    [bool ; { struct Inner { non_removed_inner_field : usize, } 0 }],\n+}\n+PRINT-DERIVE INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"my_array\",\n+                span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"bool\",\n+                        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                    },\n+                    Punct {\n+                        ch: ';',\n+                        spacing: Alone,\n+                        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Brace,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"struct\",\n+                                span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"Inner\",\n+                                span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Brace,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"non_removed_inner_field\",\n+                                        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: ':',\n+                                        spacing: Alone,\n+                                        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"usize\",\n+                                        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: ',',\n+                                        spacing: Alone,\n+                                        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                            },\n+                            Literal {\n+                                kind: Integer,\n+                                symbol: \"0\",\n+                                suffix: None,\n+                                span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+    },\n+]"}, {"sha": "b9a7e08f9937994608242a80b65d0f4a17c50be4", "filename": "src/test/ui/proc-macro/weird-braces.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.rs?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -0,0 +1,23 @@\n+// aux-build:test-macros.rs\n+// check-pass\n+// compile-flags: -Z span-debug\n+\n+#![feature(custom_inner_attributes)]\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+extern crate test_macros;\n+use test_macros::{print_target_and_args};\n+\n+struct Foo<const V: bool>;\n+trait Bar<const V: bool> {}\n+\n+#[print_target_and_args(first_outer)]\n+#[print_target_and_args(second_outer)]\n+impl Bar<{1 > 0}> for Foo<{true}> {\n+    #![print_target_and_args(first_inner)]\n+    #![print_target_and_args(second_inner)]\n+}\n+\n+fn main() {}"}, {"sha": "25f0eaf0dd4e2476a8369d3af2162cfad13a29e4", "filename": "src/test/ui/proc-macro/weird-braces.stdout", "status": "added", "additions": 524, "deletions": 0, "changes": 524, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.stdout?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -0,0 +1,524 @@\n+PRINT-ATTR_ARGS INPUT (DISPLAY): first_outer\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"first_outer\",\n+        span: $DIR/weird-braces.rs:16:25: 16:36 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): #[print_target_and_args(second_outer)] impl Bar < { 1 > 0 } > for Foo <\n+{ true } >\n+{\n+    # ! [print_target_and_args(first_inner)] # !\n+    [print_target_and_args(second_inner)]\n+}\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"print_target_and_args\",\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"second_outer\",\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"impl\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Bar\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '>',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"0\",\n+                suffix: None,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"for\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"true\",\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"first_inner\",\n+                                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"second_inner\",\n+                                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): second_outer\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"second_outer\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): impl Bar < { 1 > 0 } > for Foo < { true } >\n+{\n+    # ! [print_target_and_args(first_inner)] # !\n+    [print_target_and_args(second_inner)]\n+}\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"impl\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Bar\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '>',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"0\",\n+                suffix: None,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"for\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"true\",\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"first_inner\",\n+                                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"second_inner\",\n+                                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): first_inner\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"first_inner\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): impl Bar < { 1 > 0 } > for Foo < { true } >\n+{ # ! [print_target_and_args(second_inner)] }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"impl\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Bar\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '>',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"0\",\n+                suffix: None,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"for\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"true\",\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"second_inner\",\n+                                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): second_inner\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"second_inner\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): impl Bar < { 1 > 0 } > for Foo < { true } > { }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"impl\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Bar\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '>',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"0\",\n+                suffix: None,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"for\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"true\",\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+]"}, {"sha": "777d7be8fdc43c22db553171000981b9fc1f60a1", "filename": "src/tools/tidy/Cargo.toml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftools%2Ftidy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d2731d8e9338d8fe844e19d3fbb39617753e65f4/src%2Ftools%2Ftidy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2FCargo.toml?ref=d2731d8e9338d8fe844e19d3fbb39617753e65f4", "patch": "@@ -3,9 +3,14 @@ name = \"tidy\"\n version = \"0.1.0\"\n authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n edition = \"2018\"\n+autobins = false\n \n [dependencies]\n cargo_metadata = \"0.11\"\n regex = \"1\"\n lazy_static = \"1\"\n walkdir = \"2\"\n+\n+[[bin]]\n+name = \"rust-tidy\"\n+path = \"src/main.rs\""}]}