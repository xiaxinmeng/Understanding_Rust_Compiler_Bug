{"sha": "4ef6847d4df609054caca328b69b4ee5335426ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZjY4NDdkNGRmNjA5MDU0Y2FjYTMyOGI2OWI0ZWU1MzM1NDI2YWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-18T18:22:53Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-31T15:05:39Z"}, "message": "Use memchr for [i8]::contains as well", "tree": {"sha": "5979116e18e5a6ccbf191520cef35aa020a498ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5979116e18e5a6ccbf191520cef35aa020a498ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ef6847d4df609054caca328b69b4ee5335426ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ef6847d4df609054caca328b69b4ee5335426ae", "html_url": "https://github.com/rust-lang/rust/commit/4ef6847d4df609054caca328b69b4ee5335426ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ef6847d4df609054caca328b69b4ee5335426ae/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d818a4d8c3fa5b15ad2e2ab30531316565d556c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d818a4d8c3fa5b15ad2e2ab30531316565d556c", "html_url": "https://github.com/rust-lang/rust/commit/1d818a4d8c3fa5b15ad2e2ab30531316565d556c"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "7b08ec131029cfacd22430e562915aeeb8014840", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ef6847d4df609054caca328b69b4ee5335426ae/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ef6847d4df609054caca328b69b4ee5335426ae/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=4ef6847d4df609054caca328b69b4ee5335426ae", "patch": "@@ -2635,3 +2635,11 @@ impl SliceContains for u8 {\n         memchr::memchr(*self, x).is_some()\n     }\n }\n+\n+impl SliceContains for i8 {\n+    fn slice_contains(&self, x: &[Self]) -> bool {\n+        let byte = *self as u8;\n+        let bytes: &[u8] = unsafe { from_raw_parts(x.as_ptr() as *const u8, x.len()) };\n+        memchr::memchr(byte, bytes).is_some()\n+    }\n+}"}]}