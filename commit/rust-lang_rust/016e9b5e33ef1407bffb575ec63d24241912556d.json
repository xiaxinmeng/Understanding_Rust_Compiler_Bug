{"sha": "016e9b5e33ef1407bffb575ec63d24241912556d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNmU5YjVlMzNlZjE0MDdiZmZiNTc1ZWM2M2QyNDI0MTkxMjU1NmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-03T05:12:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-03T05:12:31Z"}, "message": "Auto merge of #84988 - alexcrichton:safe-target-feature-wasm, r=joshtriplett\n\nrustc: Allow safe #[target_feature] on wasm\n\nThis commit updates the compiler's handling of the `#[target_feature]`\nattribute when applied to functions on WebAssembly-based targets. The\ncompiler in general requires that any functions with `#[target_feature]`\nare marked as `unsafe` as well, but this commit relaxes the restriction\nfor WebAssembly targets where the attribute can be applied to safe\nfunctions as well.\n\nThe reason this is done is that the motivation for this feature of the\ncompiler is not applicable for WebAssembly targets. In general the\n`#[target_feature]` attribute is used to enhance target CPU features\nenabled beyond the basic level for the rest of the compilation. If done\nimproperly this means that your program could execute an instruction\nthat the CPU you happen to be running on does not understand. This is\nconsidered undefined behavior where it is unknown what will happen (e.g.\nit's not a deterministic `SIGILL`).\n\nFor WebAssembly, however, the target is different. It is not possible\nfor a running WebAssembly program to execute an instruction that the\nengine does not understand. If this were the case then the program would\nnot have validated in the first place and would not run at all. Even if\nthis were allowed in some hypothetical future where engines have some\nform of runtime feature detection (which they do not right now) any\nimplementation of such a feature would generate a trap if a module\nattempts to execute an instruction the module does not understand. This\ndeterministic trap behavior would still not fall into the category of\nundefined behavior because the trap is deterministic.\n\nFor these reasons the `#[target_feature]` attribute is now allowed on\nsafe functions, but only for WebAssembly targets. This notably enables\nthe wasm-SIMD intrinsics proposed for stabilization in #74372 to be\nmarked as safe generally instead of today where they're all `unsafe` due\nto the historical implementation of `#[target_feature]` in the compiler.", "tree": {"sha": "bff1caf694cf3dfc49831c43a693a99692861ef2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bff1caf694cf3dfc49831c43a693a99692861ef2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/016e9b5e33ef1407bffb575ec63d24241912556d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/016e9b5e33ef1407bffb575ec63d24241912556d", "html_url": "https://github.com/rust-lang/rust/commit/016e9b5e33ef1407bffb575ec63d24241912556d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/016e9b5e33ef1407bffb575ec63d24241912556d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19579c656436d7998289399ca373889b8e6019ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/19579c656436d7998289399ca373889b8e6019ce", "html_url": "https://github.com/rust-lang/rust/commit/19579c656436d7998289399ca373889b8e6019ce"}, {"sha": "7fed92b3a4fd8b219fe576c60d31342b193cd92d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fed92b3a4fd8b219fe576c60d31342b193cd92d", "html_url": "https://github.com/rust-lang/rust/commit/7fed92b3a4fd8b219fe576c60d31342b193cd92d"}], "stats": {"total": 83, "additions": 75, "deletions": 8}, "files": [{"sha": "9a4e51203d2b22f2fb11277f17657876bfd0d99e", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/016e9b5e33ef1407bffb575ec63d24241912556d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016e9b5e33ef1407bffb575ec63d24241912556d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=016e9b5e33ef1407bffb575ec63d24241912556d", "patch": "@@ -376,6 +376,12 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     /// Checks whether calling `func_did` needs an `unsafe` context or not, i.e. whether\n     /// the called function has target features the calling function hasn't.\n     fn check_target_features(&mut self, func_did: DefId) {\n+        // Unsafety isn't required on wasm targets. For more information see\n+        // the corresponding check in typeck/src/collect.rs\n+        if self.tcx.sess.target.options.is_like_wasm {\n+            return;\n+        }\n+\n         let callee_features = &self.tcx.codegen_fn_attrs(func_did).target_features;\n         let self_features = &self.tcx.codegen_fn_attrs(self.body_did).target_features;\n "}, {"sha": "2d52577829c71829f0c2beaaa91526cfeceb3f95", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/016e9b5e33ef1407bffb575ec63d24241912556d/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016e9b5e33ef1407bffb575ec63d24241912556d/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=016e9b5e33ef1407bffb575ec63d24241912556d", "patch": "@@ -166,13 +166,16 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                     self.requires_unsafe(expr.span, CallToUnsafeFunction);\n                 } else if let &ty::FnDef(func_did, _) = self.thir[fun].ty.kind() {\n                     // If the called function has target features the calling function hasn't,\n-                    // the call requires `unsafe`.\n-                    if !self\n-                        .tcx\n-                        .codegen_fn_attrs(func_did)\n-                        .target_features\n-                        .iter()\n-                        .all(|feature| self.body_target_features.contains(feature))\n+                    // the call requires `unsafe`. Don't check this on wasm\n+                    // targets, though. For more information on wasm see the\n+                    // is_like_wasm check in typeck/src/collect.rs\n+                    if !self.tcx.sess.target.options.is_like_wasm\n+                        && !self\n+                            .tcx\n+                            .codegen_fn_attrs(func_did)\n+                            .target_features\n+                            .iter()\n+                            .all(|feature| self.body_target_features.contains(feature))\n                     {\n                         self.requires_unsafe(expr.span, CallToFunctionWith);\n                     }"}, {"sha": "5d83375e5a1b8569f8e3257339ecd630117e4c01", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/016e9b5e33ef1407bffb575ec63d24241912556d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016e9b5e33ef1407bffb575ec63d24241912556d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=016e9b5e33ef1407bffb575ec63d24241912556d", "patch": "@@ -2770,7 +2770,21 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             }\n         } else if tcx.sess.check_name(attr, sym::target_feature) {\n             if !tcx.is_closure(id) && tcx.fn_sig(id).unsafety() == hir::Unsafety::Normal {\n-                if !tcx.features().target_feature_11 {\n+                if tcx.sess.target.is_like_wasm {\n+                    // The `#[target_feature]` attribute is allowed on\n+                    // WebAssembly targets on all functions, including safe\n+                    // ones. Other targets require that `#[target_feature]` is\n+                    // only applied to unsafe funtions (pending the\n+                    // `target_feature_11` feature) because on most targets\n+                    // execution of instructions that are not supported is\n+                    // considered undefined behavior. For WebAssembly which is a\n+                    // 100% safe target at execution time it's not possible to\n+                    // execute undefined instructions, and even if a future\n+                    // feature was added in some form for this it would be a\n+                    // deterministic trap. There is no undefined behavior when\n+                    // executing WebAssembly so `#[target_feature]` is allowed\n+                    // on safe functions (but again, only for WebAssembly)\n+                } else if !tcx.features().target_feature_11 {\n                     let mut err = feature_err(\n                         &tcx.sess.parse_sess,\n                         sym::target_feature_11,"}, {"sha": "4b868684a5206d7d4370d1f2dccae5288290323f", "filename": "src/test/ui/target-feature/wasm-safe.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/016e9b5e33ef1407bffb575ec63d24241912556d/src%2Ftest%2Fui%2Ftarget-feature%2Fwasm-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016e9b5e33ef1407bffb575ec63d24241912556d/src%2Ftest%2Fui%2Ftarget-feature%2Fwasm-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fwasm-safe.rs?ref=016e9b5e33ef1407bffb575ec63d24241912556d", "patch": "@@ -0,0 +1,44 @@\n+// only-wasm32\n+// check-pass\n+\n+#![feature(wasm_target_feature)]\n+#![allow(dead_code)]\n+\n+#[target_feature(enable = \"nontrapping-fptoint\")]\n+fn foo() {}\n+\n+#[target_feature(enable = \"nontrapping-fptoint\")]\n+extern \"C\" fn bar() {}\n+\n+trait A {\n+    fn foo();\n+    fn bar(&self);\n+}\n+\n+struct B;\n+\n+impl B {\n+    #[target_feature(enable = \"nontrapping-fptoint\")]\n+    fn foo() {}\n+    #[target_feature(enable = \"nontrapping-fptoint\")]\n+    fn bar(&self) {}\n+}\n+\n+impl A for B {\n+    #[target_feature(enable = \"nontrapping-fptoint\")]\n+    fn foo() {}\n+    #[target_feature(enable = \"nontrapping-fptoint\")]\n+    fn bar(&self) {}\n+}\n+\n+fn no_features_enabled_on_this_function() {\n+    bar();\n+    foo();\n+    B.bar();\n+    B::foo();\n+    <B as A>::foo();\n+    <B as A>::bar(&B);\n+}\n+\n+#[target_feature(enable = \"nontrapping-fptoint\")]\n+fn main() {}"}]}