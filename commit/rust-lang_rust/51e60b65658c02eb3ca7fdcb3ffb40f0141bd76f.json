{"sha": "51e60b65658c02eb3ca7fdcb3ffb40f0141bd76f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZTYwYjY1NjU4YzAyZWIzY2E3ZmRjYjNmZmI0MGYwMTQxYmQ3NmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T04:03:09Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T16:37:00Z"}, "message": "Comment creader", "tree": {"sha": "7ed71e1966002967247fb47c2bb3df7c5a8a6119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ed71e1966002967247fb47c2bb3df7c5a8a6119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51e60b65658c02eb3ca7fdcb3ffb40f0141bd76f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51e60b65658c02eb3ca7fdcb3ffb40f0141bd76f", "html_url": "https://github.com/rust-lang/rust/commit/51e60b65658c02eb3ca7fdcb3ffb40f0141bd76f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51e60b65658c02eb3ca7fdcb3ffb40f0141bd76f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "639cf1a8ff1c61e1169c43e5a506efc01725397b", "url": "https://api.github.com/repos/rust-lang/rust/commits/639cf1a8ff1c61e1169c43e5a506efc01725397b", "html_url": "https://github.com/rust-lang/rust/commit/639cf1a8ff1c61e1169c43e5a506efc01725397b"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "21b70fd468fa8dab7c4f222eef0a2b97ce30ce0f", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/51e60b65658c02eb3ca7fdcb3ffb40f0141bd76f/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e60b65658c02eb3ca7fdcb3ffb40f0141bd76f/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=51e60b65658c02eb3ca7fdcb3ffb40f0141bd76f", "patch": "@@ -28,6 +28,35 @@ import common::*;\n export read_crates;\n export list_file_metadata;\n \n+// Traverses an AST, reading all the information about use'd crates and native\n+// libraries necessary for later resolving, typechecking, linking, etc.\n+fn read_crates(session::session sess, resolve::crate_map crate_map,\n+               &ast::crate crate) {\n+    auto e =\n+        @rec(sess=sess,\n+             crate_map=crate_map,\n+             crate_cache=@std::map::new_str_hash[int](),\n+             library_search_paths=sess.get_opts().library_search_paths,\n+             mutable next_crate_num=1);\n+    auto v =\n+        rec(visit_view_item_pre=bind visit_view_item(e, _),\n+            visit_item_pre=bind visit_item(e, _)\n+            with walk::default_visitor());\n+    walk::walk_crate(v, crate);\n+}\n+\n+// A diagnostic function for dumping crate metadata to an output stream\n+fn list_file_metadata(str path, io::writer out) {\n+    alt (get_metadata_section(path)) {\n+        case (option::some(?bytes)) {\n+            decoder::list_crate_metadata(bytes, out);\n+        }\n+        case (option::none) {\n+            out.write_str(\"Could not find metadata in \" + path + \".\\n\");\n+        }\n+    }\n+}\n+\n fn metadata_matches(&vec[u8] crate_data,\n                     &(@ast::meta_item)[] metas) -> bool {\n     auto attrs = decoder::get_crate_attributes(crate_data);\n@@ -199,34 +228,6 @@ fn visit_item(env e, &@ast::item i) {\n     }\n }\n \n-// Reads external crates referenced by \"use\" directives.\n-fn read_crates(session::session sess, resolve::crate_map crate_map,\n-               &ast::crate crate) {\n-    auto e =\n-        @rec(sess=sess,\n-             crate_map=crate_map,\n-             crate_cache=@std::map::new_str_hash[int](),\n-             library_search_paths=sess.get_opts().library_search_paths,\n-             mutable next_crate_num=1);\n-    auto v =\n-        rec(visit_view_item_pre=bind visit_view_item(e, _),\n-            visit_item_pre=bind visit_item(e, _)\n-            with walk::default_visitor());\n-    walk::walk_crate(v, crate);\n-}\n-\n-\n-fn list_file_metadata(str path, io::writer out) {\n-    alt (get_metadata_section(path)) {\n-        case (option::some(?bytes)) {\n-            decoder::list_crate_metadata(bytes, out);\n-        }\n-        case (option::none) {\n-            out.write_str(\"Could not find metadata in \" + path + \".\\n\");\n-        }\n-    }\n-}\n-\n \n // Local Variables:\n // mode: rust"}]}