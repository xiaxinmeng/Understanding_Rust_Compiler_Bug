{"sha": "1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "node_id": "C_kwDOAAsO6NoAKDFmM2VlN2YzMmUxMzQ1ZTcwZjMxYWRmMWNiMmQ2ZjExZDFkODdjOWE", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-03-21T05:52:41Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-03-21T06:04:03Z"}, "message": "Rename `~const Drop` to `~const Destruct`", "tree": {"sha": "5979e8a7dbd451f5c73d192b3b9529d52964e890", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5979e8a7dbd451f5c73d192b3b9529d52964e890"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmI4FVMACgkQbQF6ltjm\nwvmDORAArXHnTD1GQnVQ7ERb/hKzXBrRIE9lrNGsaZkhlgVCFbs8c+NaD+L6Wzet\nuMELyXFWxSAA9Vr0TvarztGzvG2WJ8SfVB5UI014hJyQbIiT5MYcQeL+p9SQCWOd\nZAsPrsIGIeiZb3rTWYxrAF/Q7+63tm/7LZ31BtxdCLoBfbJBHj4pTKRh3aNNbUpb\neZCMlECbNwq5yoskQPXle38ji7mTOO4u9M4Q3bJuOuYB73t5gsz/ogC7yKayhwKx\nQcnghHkbDHkpL30QvXb6kMcScLZhIQ3v2XHSwgCcEZQBM4GgWjUvddOXIfnLzhxY\nVhylg6P9NBr2CmDhJMZxuWIW1MnqBkYckIeoH+uDnG1Z/ZIxDNZ07GdwzFtSI9cG\nDLuCLlhBlNA9JTXkuWM5Lhic9SdB4k0mgkpKkxRlCoiVPMnNUJr+rgyuSNfhX4Jw\nROTIepBsGxlV2Gy/ptmsNme19LGGeEkUzQuBZSL6wij1j5eLgLB4HTIP1xNNJ4RH\nX015XXN7/mrEjno8Vm+TKLdxCPydA0xLYBoMgBjd/VI/FcJSJvz0tB+3VXCGlK3P\nAixaOPxIoqU5iI/2sOQ8k+TwH1fUaomrIPzal+ek00XlbnPZe3gQyv0T2aXYRg9V\nm7kLBz0YL40IeOHPSlFMePBr/szEEPFtsAsJWnXkZNKWWxOG9Y4=\n=IltR\n-----END PGP SIGNATURE-----", "payload": "tree 5979e8a7dbd451f5c73d192b3b9529d52964e890\nparent 4df2a28aee55f73d4e898c931664b8087b06522d\nauthor Deadbeef <ent3rm4n@gmail.com> 1647841961 +1100\ncommitter Deadbeef <ent3rm4n@gmail.com> 1647842643 +1100\n\nRename `~const Drop` to `~const Destruct`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "html_url": "https://github.com/rust-lang/rust/commit/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4df2a28aee55f73d4e898c931664b8087b06522d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4df2a28aee55f73d4e898c931664b8087b06522d", "html_url": "https://github.com/rust-lang/rust/commit/4df2a28aee55f73d4e898c931664b8087b06522d"}], "stats": {"total": 488, "additions": 296, "deletions": 192}, "files": [{"sha": "1e02129855e206be2159e1ebe6ba4a6fd09c71e0", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -3,6 +3,7 @@\n //! See the `Qualif` trait for more info.\n \n use rustc_errors::ErrorGuaranteed;\n+use rustc_hir::LangItem;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::TraitEngine;\n use rustc_middle::mir::*;\n@@ -152,18 +153,14 @@ impl Qualif for NeedsNonConstDrop {\n             return false;\n         }\n \n-        let Some(drop_trait) = cx.tcx.lang_items().drop_trait() else {\n-            // there is no way to define a type that needs non-const drop\n-            // without having the lang item present.\n-            return false;\n-        };\n+        let destruct = cx.tcx.require_lang_item(LangItem::Destruct, None);\n \n         let obligation = Obligation::new(\n             ObligationCause::dummy(),\n             cx.param_env,\n             ty::Binder::dummy(ty::TraitPredicate {\n                 trait_ref: ty::TraitRef {\n-                    def_id: drop_trait,\n+                    def_id: destruct,\n                     substs: cx.tcx.mk_substs_trait(ty, &[]),\n                 },\n                 constness: ty::BoundConstness::ConstIfConst,\n@@ -174,15 +171,16 @@ impl Qualif for NeedsNonConstDrop {\n         cx.tcx.infer_ctxt().enter(|infcx| {\n             let mut selcx = SelectionContext::new(&infcx);\n             let Some(impl_src) = selcx.select(&obligation).ok().flatten() else {\n-                // If we couldn't select a const drop candidate, then it's bad\n+                // If we couldn't select a const destruct candidate, then it's bad\n                 return true;\n             };\n \n             if !matches!(\n                 impl_src,\n-                ImplSource::ConstDrop(_) | ImplSource::Param(_, ty::BoundConstness::ConstIfConst)\n+                ImplSource::ConstDestruct(_)\n+                    | ImplSource::Param(_, ty::BoundConstness::ConstIfConst)\n             ) {\n-                // If our const drop candidate is not ConstDrop or implied by the param env,\n+                // If our const destruct candidate is not ConstDestruct or implied by the param env,\n                 // then it's bad\n                 return true;\n             }"}, {"sha": "7c312e1b61d5ad5f10eb7db0de12524397488f70", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -216,7 +216,7 @@ language_item_table! {\n     Freeze,                  sym::freeze,              freeze_trait,               Target::Trait,          GenericRequirement::Exact(0);\n \n     Drop,                    sym::drop,                drop_trait,                 Target::Trait,          GenericRequirement::None;\n-    Destructible,            sym::destructible,        destructible_trait,         Target::Trait,          GenericRequirement::None;\n+    Destruct,                sym::destruct,            destruct_trait,             Target::Trait,          GenericRequirement::None;\n \n     CoerceUnsized,           sym::coerce_unsized,      coerce_unsized_trait,       Target::Trait,          GenericRequirement::Minimum(1);\n     DispatchFromDyn,         sym::dispatch_from_dyn,   dispatch_from_dyn_trait,    Target::Trait,          GenericRequirement::Minimum(1);"}, {"sha": "81d308ee3470246a0829ab54ac5d8ab777e8284a", "filename": "compiler/rustc_lint/src/traits.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -93,10 +93,6 @@ impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n             let Trait(trait_predicate) = predicate.kind().skip_binder() else {\n                 continue\n             };\n-            if trait_predicate.is_const_if_const() {\n-                // `~const Drop` definitely have meanings so avoid linting here.\n-                continue;\n-            }\n             let def_id = trait_predicate.trait_ref.def_id;\n             if cx.tcx.lang_items().drop_trait() == Some(def_id) {\n                 // Explicitly allow `impl Drop`, a drop-guards-as-Voldemort-type pattern."}, {"sha": "36bbccf0a8038348c53fa4eea42b2419abe4221c", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -577,7 +577,7 @@ pub enum ImplSource<'tcx, N> {\n     TraitAlias(ImplSourceTraitAliasData<'tcx, N>),\n \n     /// ImplSource for a `const Drop` implementation.\n-    ConstDrop(ImplSourceConstDropData<N>),\n+    ConstDestruct(ImplSourceConstDestructData<N>),\n }\n \n impl<'tcx, N> ImplSource<'tcx, N> {\n@@ -595,7 +595,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             | ImplSource::Pointee(ImplSourcePointeeData) => Vec::new(),\n             ImplSource::TraitAlias(d) => d.nested,\n             ImplSource::TraitUpcasting(d) => d.nested,\n-            ImplSource::ConstDrop(i) => i.nested,\n+            ImplSource::ConstDestruct(i) => i.nested,\n         }\n     }\n \n@@ -613,7 +613,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             | ImplSource::Pointee(ImplSourcePointeeData) => &[],\n             ImplSource::TraitAlias(d) => &d.nested,\n             ImplSource::TraitUpcasting(d) => &d.nested,\n-            ImplSource::ConstDrop(i) => &i.nested,\n+            ImplSource::ConstDestruct(i) => &i.nested,\n         }\n     }\n \n@@ -672,9 +672,11 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n                     nested: d.nested.into_iter().map(f).collect(),\n                 })\n             }\n-            ImplSource::ConstDrop(i) => ImplSource::ConstDrop(ImplSourceConstDropData {\n-                nested: i.nested.into_iter().map(f).collect(),\n-            }),\n+            ImplSource::ConstDestruct(i) => {\n+                ImplSource::ConstDestruct(ImplSourceConstDestructData {\n+                    nested: i.nested.into_iter().map(f).collect(),\n+                })\n+            }\n         }\n     }\n }\n@@ -767,7 +769,7 @@ pub struct ImplSourceDiscriminantKindData;\n pub struct ImplSourcePointeeData;\n \n #[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n-pub struct ImplSourceConstDropData<N> {\n+pub struct ImplSourceConstDestructData<N> {\n     pub nested: Vec<N>,\n }\n "}, {"sha": "56d42706f6778c90a119e57a3edb4a653070529c", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -146,8 +146,8 @@ pub enum SelectionCandidate<'tcx> {\n \n     BuiltinUnsizeCandidate,\n \n-    /// Implementation of `const Drop`, optionally from a custom `impl const Drop`.\n-    ConstDropCandidate(Option<DefId>),\n+    /// Implementation of `const Destruct`, optionally from a custom `impl const Drop`.\n+    ConstDestructCandidate(Option<DefId>),\n }\n \n /// The result of trait evaluation. The order is important"}, {"sha": "ea706053231f83c1ae111f9033d4f8183e31f1b0", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -33,7 +33,7 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSource<'tcx, N> {\n \n             super::ImplSource::TraitUpcasting(ref d) => write!(f, \"{:?}\", d),\n \n-            super::ImplSource::ConstDrop(ref d) => write!(f, \"{:?}\", d),\n+            super::ImplSource::ConstDestruct(ref d) => write!(f, \"{:?}\", d),\n         }\n     }\n }\n@@ -120,9 +120,9 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSourceTraitAliasData<'tcx,\n     }\n }\n \n-impl<N: fmt::Debug> fmt::Debug for traits::ImplSourceConstDropData<N> {\n+impl<N: fmt::Debug> fmt::Debug for traits::ImplSourceConstDestructData<N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"ImplSourceConstDropData(nested={:?})\", self.nested)\n+        write!(f, \"ImplSourceConstDestructData(nested={:?})\", self.nested)\n     }\n }\n "}, {"sha": "3124cc5dba89ae2a38c97205ec886168bb4de4ef", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -765,6 +765,7 @@ impl<'tcx> TraitPredicate<'tcx> {\n         if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {\n             // remap without changing constness of this predicate.\n             // this is because `T: ~const Drop` has a different meaning to `T: Drop`\n+            // FIXME(fee1-dead): remove this logic after beta bump\n             param_env.remap_constness_with(self.constness)\n         } else {\n             *param_env = param_env.with_constness(self.constness.and(param_env.constness()))"}, {"sha": "48ca321b737469f9575108a32a29824ee7b60a80", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -571,7 +571,7 @@ symbols! {\n         deref_target,\n         derive,\n         derive_default_enum,\n-        destructible,\n+        destruct,\n         destructuring_assignment,\n         diagnostic,\n         direct,"}, {"sha": "390381752f95df54eeaa343ec3555d0e62e2016d", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -1569,7 +1569,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n             super::ImplSource::AutoImpl(..)\n             | super::ImplSource::Builtin(..)\n             | super::ImplSource::TraitUpcasting(_)\n-            | super::ImplSource::ConstDrop(_) => {\n+            | super::ImplSource::ConstDestruct(_) => {\n                 // These traits have no associated types.\n                 selcx.tcx().sess.delay_span_bug(\n                     obligation.cause.span,\n@@ -1644,7 +1644,7 @@ fn confirm_select_candidate<'cx, 'tcx>(\n         | super::ImplSource::Builtin(..)\n         | super::ImplSource::TraitUpcasting(_)\n         | super::ImplSource::TraitAlias(..)\n-        | super::ImplSource::ConstDrop(_) => {\n+        | super::ImplSource::ConstDestruct(_) => {\n             // we don't create Select candidates with this kind of resolution\n             span_bug!(\n                 obligation.cause.span,"}, {"sha": "c0a283d2edae4482222b0517269bf6a423a8a4e2", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -5,6 +5,7 @@\n //! candidates. See the [rustc dev guide] for more details.\n //!\n //! [rustc dev guide]:https://rustc-dev-guide.rust-lang.org/traits/resolution.html#candidate-assembly\n+use hir::LangItem;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::TraitEngine;\n@@ -307,7 +308,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             } else if lang_items.drop_trait() == Some(def_id)\n                 && obligation.predicate.is_const_if_const()\n             {\n-                self.assemble_const_drop_candidates(obligation, &mut candidates);\n+                // holds to make it easier to transition\n+                // FIXME(fee1-dead): add a note for selection error of `~const Drop`\n+                // when beta is bumped\n+                // FIXME: remove this when beta is bumped\n+                #[cfg(bootstrap)]\n+                {}\n+\n+                candidates.vec.push(SelectionCandidate::ConstDestructCandidate(None))\n+            } else if lang_items.destruct_trait() == Some(def_id) {\n+                self.assemble_const_destruct_candidates(obligation, &mut candidates);\n             } else {\n                 if lang_items.clone_trait() == Some(def_id) {\n                     // Same builtin conditions as `Copy`, i.e., every type which has builtin support\n@@ -906,15 +916,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n-    fn assemble_const_drop_candidates(\n+    fn assemble_const_destruct_candidates(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) {\n-        // If the predicate is `~const Drop` in a non-const environment, we don't actually need\n+        // If the predicate is `~const Destruct` in a non-const environment, we don't actually need\n         // to check anything. We'll short-circuit checking any obligations in confirmation, too.\n-        if obligation.param_env.constness() == hir::Constness::NotConst {\n-            candidates.vec.push(ConstDropCandidate(None));\n+        if !obligation.is_const() {\n+            candidates.vec.push(ConstDestructCandidate(None));\n             return;\n         }\n \n@@ -927,7 +937,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Param(_)\n             | ty::Placeholder(_)\n             | ty::Projection(_) => {\n-                // We don't know if these are `~const Drop`, at least\n+                // We don't know if these are `~const Destruct`, at least\n                 // not structurally... so don't push a candidate.\n             }\n \n@@ -951,26 +961,26 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Generator(..)\n             | ty::Tuple(_)\n             | ty::GeneratorWitness(_) => {\n-                // These are built-in, and cannot have a custom `impl const Drop`.\n-                candidates.vec.push(ConstDropCandidate(None));\n+                // These are built-in, and cannot have a custom `impl const Destruct`.\n+                candidates.vec.push(ConstDestructCandidate(None));\n             }\n \n             ty::Adt(..) => {\n                 // Find a custom `impl Drop` impl, if it exists\n                 let relevant_impl = self.tcx().find_map_relevant_impl(\n-                    obligation.predicate.def_id(),\n+                    self.tcx().require_lang_item(LangItem::Drop, None),\n                     obligation.predicate.skip_binder().trait_ref.self_ty(),\n                     Some,\n                 );\n \n                 if let Some(impl_def_id) = relevant_impl {\n                     // Check that `impl Drop` is actually const, if there is a custom impl\n                     if self.tcx().impl_constness(impl_def_id) == hir::Constness::Const {\n-                        candidates.vec.push(ConstDropCandidate(Some(impl_def_id)));\n+                        candidates.vec.push(ConstDestructCandidate(Some(impl_def_id)));\n                     }\n                 } else {\n                     // Otherwise check the ADT like a built-in type (structurally)\n-                    candidates.vec.push(ConstDropCandidate(None));\n+                    candidates.vec.push(ConstDestructCandidate(None));\n                 }\n             }\n "}, {"sha": "3c980af512196acf5ab495923e7baea0239eb9a2", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 43, "deletions": 17, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -8,7 +8,6 @@\n //! https://rustc-dev-guide.rust-lang.org/traits/resolution.html#confirmation\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::Constness;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n@@ -29,9 +28,9 @@ use crate::traits::TraitNotObjectSafe;\n use crate::traits::VtblSegment;\n use crate::traits::{BuiltinDerivedObligation, ImplDerivedObligation};\n use crate::traits::{\n-    ImplSourceAutoImplData, ImplSourceBuiltinData, ImplSourceClosureData, ImplSourceConstDropData,\n-    ImplSourceDiscriminantKindData, ImplSourceFnPointerData, ImplSourceGeneratorData,\n-    ImplSourceObjectData, ImplSourcePointeeData, ImplSourceTraitAliasData,\n+    ImplSourceAutoImplData, ImplSourceBuiltinData, ImplSourceClosureData,\n+    ImplSourceConstDestructData, ImplSourceDiscriminantKindData, ImplSourceFnPointerData,\n+    ImplSourceGeneratorData, ImplSourceObjectData, ImplSourcePointeeData, ImplSourceTraitAliasData,\n     ImplSourceTraitUpcastingData, ImplSourceUserDefinedData,\n };\n use crate::traits::{ObjectCastObligation, PredicateObligation, TraitObligation};\n@@ -156,9 +155,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(ImplSource::TraitUpcasting(data))\n             }\n \n-            ConstDropCandidate(def_id) => {\n-                let data = self.confirm_const_drop_candidate(obligation, def_id)?;\n-                Ok(ImplSource::ConstDrop(data))\n+            ConstDestructCandidate(def_id) => {\n+                let data = self.confirm_const_destruct_candidate(obligation, def_id)?;\n+                Ok(ImplSource::ConstDestruct(data))\n             }\n         }\n     }\n@@ -1037,14 +1036,24 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         Ok(ImplSourceBuiltinData { nested })\n     }\n \n-    fn confirm_const_drop_candidate(\n+    fn confirm_const_destruct_candidate(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         impl_def_id: Option<DefId>,\n-    ) -> Result<ImplSourceConstDropData<PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n-        // `~const Drop` in a non-const environment is always trivially true, since our type is `Drop`\n-        if obligation.param_env.constness() == Constness::NotConst {\n-            return Ok(ImplSourceConstDropData { nested: vec![] });\n+    ) -> Result<ImplSourceConstDestructData<PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n+        // `~const Destruct` in a non-const environment is always trivially true, since our type is `Drop`\n+        if !obligation.is_const() {\n+            return Ok(ImplSourceConstDestructData { nested: vec![] });\n+        }\n+\n+        let drop_trait = self.tcx().require_lang_item(LangItem::Drop, None);\n+        // FIXME: remove if statement below when beta is bumped\n+        #[cfg(bootstrap)]\n+        {}\n+\n+        if obligation.predicate.skip_binder().def_id() == drop_trait\n+        {\n+            return Ok(ImplSourceConstDestructData { nested: vec![] });\n         }\n \n         let tcx = self.tcx();\n@@ -1054,9 +1063,26 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let cause = obligation.derived_cause(BuiltinDerivedObligation);\n \n         // If we have a custom `impl const Drop`, then\n-        // first check it like a regular impl candidate\n+        // first check it like a regular impl candidate.\n+        // This is copied from confirm_impl_candidate but remaps the predicate to `~const Drop` beforehand.\n         if let Some(impl_def_id) = impl_def_id {\n-            nested.extend(self.confirm_impl_candidate(obligation, impl_def_id).nested);\n+            let obligations = self.infcx.commit_unconditionally(|_| {\n+                let mut new_obligation = obligation.clone();\n+                new_obligation.predicate = new_obligation.predicate.map_bound(|mut trait_pred| { trait_pred.trait_ref.def_id = drop_trait; trait_pred });\n+                let substs = self.rematch_impl(impl_def_id, &new_obligation);\n+                debug!(?substs, \"impl substs\");\n+                let cause = obligation.derived_cause(ImplDerivedObligation);\n+                ensure_sufficient_stack(|| {\n+                    self.vtable_impl(\n+                        impl_def_id,\n+                        substs,\n+                        cause,\n+                        new_obligation.recursion_depth + 1,\n+                        new_obligation.param_env,\n+                    )\n+                })\n+            });\n+            nested.extend(obligations.nested);\n         }\n \n         // We want to confirm the ADT's fields if we have an ADT\n@@ -1114,7 +1140,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             self_ty\n                                 .rebind(ty::TraitPredicate {\n                                     trait_ref: ty::TraitRef {\n-                                        def_id: self.tcx().require_lang_item(LangItem::Drop, None),\n+                                        def_id: self.tcx().require_lang_item(LangItem::Destruct, None),\n                                         substs: self.tcx().mk_substs_trait(nested_ty, &[]),\n                                     },\n                                     constness: ty::BoundConstness::ConstIfConst,\n@@ -1140,7 +1166,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     let predicate = self_ty\n                         .rebind(ty::TraitPredicate {\n                             trait_ref: ty::TraitRef {\n-                                def_id: self.tcx().require_lang_item(LangItem::Drop, None),\n+                                def_id: self.tcx().require_lang_item(LangItem::Destruct, None),\n                                 substs: self.tcx().mk_substs_trait(nested_ty, &[]),\n                             },\n                             constness: ty::BoundConstness::ConstIfConst,\n@@ -1158,6 +1184,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n         }\n \n-        Ok(ImplSourceConstDropData { nested })\n+        Ok(ImplSourceConstDestructData { nested })\n     }\n }"}, {"sha": "5d07139e87bf01f6ad81a7495b9bde205e383a10", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -1179,7 +1179,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     GeneratorCandidate => {}\n                     // FnDef where the function is const\n                     FnPointerCandidate { is_const: true } => {}\n-                    ConstDropCandidate(_) => {}\n+                    ConstDestructCandidate(_) => {}\n                     _ => {\n                         // reject all other types of candidates\n                         continue;\n@@ -1589,7 +1589,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         };\n \n         // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,\n-        // `DiscriminantKindCandidate`, and `ConstDropCandidate` to anything else.\n+        // `DiscriminantKindCandidate`, and `ConstDestructCandidate` to anything else.\n         //\n         // This is a fix for #53123 and prevents winnowing from accidentally extending the\n         // lifetime of a variable.\n@@ -1606,15 +1606,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 BuiltinCandidate { has_nested: false }\n                 | DiscriminantKindCandidate\n                 | PointeeCandidate\n-                | ConstDropCandidate(_),\n+                | ConstDestructCandidate(_),\n                 _,\n             ) => true,\n             (\n                 _,\n                 BuiltinCandidate { has_nested: false }\n                 | DiscriminantKindCandidate\n                 | PointeeCandidate\n-                | ConstDropCandidate(_),\n+                | ConstDestructCandidate(_),\n             ) => false,\n \n             (ParamCandidate(other), ParamCandidate(victim)) => {"}, {"sha": "802a59abe5faf53fb7e5cd8eda2dd1ab74eb42f8", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -378,7 +378,7 @@ fn resolve_associated_item<'tcx>(\n         | traits::ImplSource::DiscriminantKind(..)\n         | traits::ImplSource::Pointee(..)\n         | traits::ImplSource::TraitUpcasting(_)\n-        | traits::ImplSource::ConstDrop(_) => None,\n+        | traits::ImplSource::ConstDestruct(_) => None,\n     })\n }\n "}, {"sha": "44389ee47b028270a6c062b01de9a873275b0494", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -14,6 +14,8 @@ use core::ptr::{self, NonNull};\n #[doc(inline)]\n pub use core::alloc::*;\n \n+use core::marker::Destruct;\n+\n #[cfg(test)]\n mod tests;\n \n@@ -324,12 +326,16 @@ unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n #[cfg_attr(not(test), lang = \"box_free\")]\n #[inline]\n #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n+#[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n // This signature has to be the same as `Box`, otherwise an ICE will happen.\n // When an additional parameter to `Box` is added (like `A: Allocator`), this has to be added here as\n // well.\n // For example if `Box` is changed to  `struct Box<T: ?Sized, A: Allocator>(Unique<T>, A)`,\n // this function has to be changed to `fn box_free<T: ?Sized, A: Allocator>(Unique<T>, A)` as well.\n-pub(crate) const unsafe fn box_free<T: ?Sized, A: ~const Allocator + ~const Drop>(\n+pub(crate) const unsafe fn box_free<\n+    T: ?Sized,\n+    A: ~const Allocator + ~const Drop + ~const Destruct,\n+>(\n     ptr: Unique<T>,\n     alloc: A,\n ) {"}, {"sha": "27e5af4f1be890a5b7853bf56fc2415d09b419b3", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -331,6 +331,7 @@ impl<B: ?Sized + ToOwned> Cow<'_, B> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_deref\", issue = \"88955\")]\n+#[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n impl<B: ?Sized + ToOwned> const Deref for Cow<'_, B>\n where\n     B::Owned: ~const Borrow<B>,"}, {"sha": "b5f4c9a237b28751993d359c626fe12029728771", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -143,7 +143,7 @@ use core::hash::{Hash, Hasher};\n #[cfg(not(no_global_oom_handling))]\n use core::iter::FromIterator;\n use core::iter::{FusedIterator, Iterator};\n-use core::marker::{Unpin, Unsize};\n+use core::marker::{Destruct, Unpin, Unsize};\n use core::mem;\n use core::ops::{\n     CoerceUnsized, Deref, DerefMut, DispatchFromDyn, Generator, GeneratorState, Receiver,\n@@ -349,9 +349,10 @@ impl<T, A: Allocator> Box<T, A> {\n     #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[must_use]\n     #[inline]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn new_in(x: T, alloc: A) -> Self\n     where\n-        A: ~const Allocator + ~const Drop,\n+        A: ~const Allocator + ~const Drop + ~const Destruct,\n     {\n         let mut boxed = Self::new_uninit_in(alloc);\n         unsafe {\n@@ -378,10 +379,11 @@ impl<T, A: Allocator> Box<T, A> {\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn try_new_in(x: T, alloc: A) -> Result<Self, AllocError>\n     where\n-        T: ~const Drop,\n-        A: ~const Allocator + ~const Drop,\n+        T: ~const Drop + ~const Destruct,\n+        A: ~const Allocator + ~const Drop + ~const Destruct,\n     {\n         let mut boxed = Self::try_new_uninit_in(alloc)?;\n         unsafe {\n@@ -415,9 +417,10 @@ impl<T, A: Allocator> Box<T, A> {\n     #[cfg(not(no_global_oom_handling))]\n     #[must_use]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn new_uninit_in(alloc: A) -> Box<mem::MaybeUninit<T>, A>\n     where\n-        A: ~const Allocator + ~const Drop,\n+        A: ~const Allocator + ~const Drop + ~const Destruct,\n     {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n         // NOTE: Prefer match over unwrap_or_else since closure sometimes not inlineable.\n@@ -453,9 +456,10 @@ impl<T, A: Allocator> Box<T, A> {\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn try_new_uninit_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError>\n     where\n-        A: ~const Allocator + ~const Drop,\n+        A: ~const Allocator + ~const Drop + ~const Destruct,\n     {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n         let ptr = alloc.allocate(layout)?.cast();\n@@ -487,9 +491,10 @@ impl<T, A: Allocator> Box<T, A> {\n     #[cfg(not(no_global_oom_handling))]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[must_use]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A>\n     where\n-        A: ~const Allocator + ~const Drop,\n+        A: ~const Allocator + ~const Drop + ~const Destruct,\n     {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n         // NOTE: Prefer match over unwrap_or_else since closure sometimes not inlineable.\n@@ -525,9 +530,10 @@ impl<T, A: Allocator> Box<T, A> {\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError>\n     where\n-        A: ~const Allocator + ~const Drop,\n+        A: ~const Allocator + ~const Drop + ~const Destruct,\n     {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n         let ptr = alloc.allocate_zeroed(layout)?.cast();\n@@ -541,9 +547,10 @@ impl<T, A: Allocator> Box<T, A> {\n     #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[must_use]\n     #[inline(always)]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn pin_in(x: T, alloc: A) -> Pin<Self>\n     where\n-        A: 'static + ~const Allocator + ~const Drop,\n+        A: 'static + ~const Allocator + ~const Drop + ~const Destruct,\n     {\n         Self::into_pin(Self::new_in(x, alloc))\n     }\n@@ -572,9 +579,10 @@ impl<T, A: Allocator> Box<T, A> {\n     #[unstable(feature = \"box_into_inner\", issue = \"80437\")]\n     #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn into_inner(boxed: Self) -> T\n     where\n-        Self: ~const Drop,\n+        Self: ~const Drop + ~const Destruct,\n     {\n         *boxed\n     }"}, {"sha": "a13593a539d945a8c7efb84e08df8f2d74a1ac86", "filename": "library/core/src/bool.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Fcore%2Fsrc%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Fcore%2Fsrc%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fbool.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -1,5 +1,7 @@\n //! impl bool {}\n \n+use crate::marker::Destruct;\n+\n #[lang = \"bool\"]\n impl bool {\n     /// Returns `Some(t)` if the `bool` is [`true`](../std/keyword.true.html),\n@@ -16,9 +18,10 @@ impl bool {\n     #[unstable(feature = \"bool_to_option\", issue = \"80967\")]\n     #[rustc_const_unstable(feature = \"const_bool_to_option\", issue = \"91917\")]\n     #[inline]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn then_some<T>(self, t: T) -> Option<T>\n     where\n-        T: ~const Drop,\n+        T: ~const Drop + ~const Destruct,\n     {\n         if self { Some(t) } else { None }\n     }\n@@ -35,10 +38,11 @@ impl bool {\n     #[stable(feature = \"lazy_bool_to_option\", since = \"1.50.0\")]\n     #[rustc_const_unstable(feature = \"const_bool_to_option\", issue = \"91917\")]\n     #[inline]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn then<T, F>(self, f: F) -> Option<T>\n     where\n         F: ~const FnOnce() -> T,\n-        F: ~const Drop,\n+        F: ~const Drop + ~const Destruct,\n     {\n         if self { Some(f()) } else { None }\n     }"}, {"sha": "cfdc51c71ee063825a55283206cc27c734780229", "filename": "library/core/src/clone.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Fcore%2Fsrc%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Fcore%2Fsrc%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fclone.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -36,6 +36,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use crate::marker::Destruct;\n+\n /// A common trait for the ability to explicitly duplicate an object.\n ///\n /// Differs from [`Copy`] in that [`Copy`] is implicit and an inexpensive bit-wise copy, while\n@@ -128,9 +130,10 @@ pub trait Clone: Sized {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[default_method_body_is_const]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     fn clone_from(&mut self, source: &Self)\n     where\n-        Self: ~const Drop,\n+        Self: ~const Drop + ~const Destruct,\n     {\n         *self = source.clone()\n     }"}, {"sha": "22c6c1cd8686142679e662f6151709a428651aa5", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -54,7 +54,7 @@\n )]\n #![allow(missing_docs)]\n \n-use crate::marker::DiscriminantKind;\n+use crate::marker::{Destruct, DiscriminantKind};\n use crate::mem;\n \n // These imports are used for simplifying intra-doc links\n@@ -2353,14 +2353,15 @@ pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n #[rustc_const_unstable(feature = \"const_eval_select\", issue = \"none\")]\n #[lang = \"const_eval_select\"]\n #[rustc_do_not_const_check]\n+#[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n pub const unsafe fn const_eval_select<ARG, F, G, RET>(\n     arg: ARG,\n     _called_in_const: F,\n     called_at_rt: G,\n ) -> RET\n where\n     F: ~const FnOnce<ARG, Output = RET>,\n-    G: FnOnce<ARG, Output = RET> + ~const Drop,\n+    G: FnOnce<ARG, Output = RET> + ~const Drop + ~const Destruct,\n {\n     called_at_rt.call_once(arg)\n }\n@@ -2372,14 +2373,15 @@ where\n )]\n #[rustc_const_unstable(feature = \"const_eval_select\", issue = \"none\")]\n #[lang = \"const_eval_select_ct\"]\n+#[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n pub const unsafe fn const_eval_select_ct<ARG, F, G, RET>(\n     arg: ARG,\n     called_in_const: F,\n     _called_at_rt: G,\n ) -> RET\n where\n     F: ~const FnOnce<ARG, Output = RET>,\n-    G: FnOnce<ARG, Output = RET> + ~const Drop,\n+    G: FnOnce<ARG, Output = RET> + ~const Drop + ~const Destruct,\n {\n     called_in_const.call_once(arg)\n }"}, {"sha": "6b9d6253e425b46a51f17948b9a255d6c1f89213", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -794,10 +794,19 @@ impl<T: ?Sized> Unpin for *mut T {}\n \n /// A marker for types that can be dropped.\n ///\n-/// The compiler logic for this trait is currently unimplemented.\n+/// This should be used for `~const` bounds,\n+/// as non-const bounds will always hold for every type.\n #[unstable(feature = \"const_trait_impl\", issue = \"67792\")]\n-#[cfg_attr(not(bootstrap), lang = \"destructible\")]\n-pub trait Destructible {}\n+#[cfg_attr(not(bootstrap), lang = \"destruct\")]\n+#[cfg_attr(\n+    not(bootstrap),\n+    rustc_on_unimplemented(message = \"can't drop `{Self}`\", append_const_msg,)\n+)]\n+pub trait Destruct {}\n+\n+#[cfg(bootstrap)]\n+#[unstable(feature = \"const_trait_impl\", issue = \"67792\")]\n+impl<T: ?Sized> const Destruct for T {}\n \n /// Implementations of `Copy` for primitive types.\n ///"}, {"sha": "acab8de8c70f575c87df7990fb6c13d699722255", "filename": "library/core/src/option.rs", "status": "modified", "additions": 48, "deletions": 27, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -503,6 +503,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};\n+use crate::marker::Destruct;\n use crate::panicking::{panic, panic_str};\n use crate::pin::Pin;\n use crate::{\n@@ -772,9 +773,10 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn unwrap_or(self, default: T) -> T\n     where\n-        T: ~const Drop,\n+        T: ~const Drop + ~const Destruct,\n     {\n         match self {\n             Some(x) => x,\n@@ -794,10 +796,11 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn unwrap_or_else<F>(self, f: F) -> T\n     where\n         F: ~const FnOnce() -> T,\n-        F: ~const Drop,\n+        F: ~const Drop + ~const Destruct,\n     {\n         match self {\n             Some(x) => x,\n@@ -899,10 +902,11 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn map<U, F>(self, f: F) -> Option<U>\n     where\n         F: ~const FnOnce(T) -> U,\n-        F: ~const Drop,\n+        F: ~const Drop + ~const Destruct,\n     {\n         match self {\n             Some(x) => Some(f(x)),\n@@ -928,10 +932,11 @@ impl<T> Option<T> {\n     #[inline]\n     #[unstable(feature = \"result_option_inspect\", issue = \"91345\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn inspect<F>(self, f: F) -> Self\n     where\n         F: ~const FnOnce(&T),\n-        F: ~const Drop,\n+        F: ~const Drop + ~const Destruct,\n     {\n         if let Some(ref x) = self {\n             f(x);\n@@ -961,11 +966,12 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn map_or<U, F>(self, default: U, f: F) -> U\n     where\n         F: ~const FnOnce(T) -> U,\n-        F: ~const Drop,\n-        U: ~const Drop,\n+        F: ~const Drop + ~const Destruct,\n+        U: ~const Drop + ~const Destruct,\n     {\n         match self {\n             Some(t) => f(t),\n@@ -990,12 +996,13 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U\n     where\n         D: ~const FnOnce() -> U,\n-        D: ~const Drop,\n+        D: ~const Drop + ~const Destruct,\n         F: ~const FnOnce(T) -> U,\n-        F: ~const Drop,\n+        F: ~const Drop + ~const Destruct,\n     {\n         match self {\n             Some(t) => f(t),\n@@ -1027,9 +1034,10 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn ok_or<E>(self, err: E) -> Result<T, E>\n     where\n-        E: ~const Drop,\n+        E: ~const Drop + ~const Destruct,\n     {\n         match self {\n             Some(v) => Ok(v),\n@@ -1056,10 +1064,11 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>\n     where\n         F: ~const FnOnce() -> E,\n-        F: ~const Drop,\n+        F: ~const Drop + ~const Destruct,\n     {\n         match self {\n             Some(v) => Ok(v),\n@@ -1190,10 +1199,11 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn and<U>(self, optb: Option<U>) -> Option<U>\n     where\n-        T: ~const Drop,\n-        U: ~const Drop,\n+        T: ~const Drop + ~const Destruct,\n+        U: ~const Drop + ~const Destruct,\n     {\n         match self {\n             Some(_) => optb,\n@@ -1232,10 +1242,11 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn and_then<U, F>(self, f: F) -> Option<U>\n     where\n         F: ~const FnOnce(T) -> Option<U>,\n-        F: ~const Drop,\n+        F: ~const Drop + ~const Destruct,\n     {\n         match self {\n             Some(x) => f(x),\n@@ -1270,11 +1281,12 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"option_filter\", since = \"1.27.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn filter<P>(self, predicate: P) -> Self\n     where\n-        T: ~const Drop,\n+        T: ~const Drop + ~const Destruct,\n         P: ~const FnOnce(&T) -> bool,\n-        P: ~const Drop,\n+        P: ~const Drop + ~const Destruct,\n     {\n         if let Some(x) = self {\n             if predicate(&x) {\n@@ -1314,9 +1326,10 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn or(self, optb: Option<T>) -> Option<T>\n     where\n-        T: ~const Drop,\n+        T: ~const Drop + ~const Destruct,\n     {\n         match self {\n             Some(x) => Some(x),\n@@ -1340,10 +1353,11 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn or_else<F>(self, f: F) -> Option<T>\n     where\n         F: ~const FnOnce() -> Option<T>,\n-        F: ~const Drop,\n+        F: ~const Drop + ~const Destruct,\n     {\n         match self {\n             Some(x) => Some(x),\n@@ -1375,9 +1389,10 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"option_xor\", since = \"1.37.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn xor(self, optb: Option<T>) -> Option<T>\n     where\n-        T: ~const Drop,\n+        T: ~const Drop + ~const Destruct,\n     {\n         match (self, optb) {\n             (Some(a), None) => Some(a),\n@@ -1413,9 +1428,10 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"option_insert\", since = \"1.53.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn insert(&mut self, value: T) -> &mut T\n     where\n-        T: ~const Drop,\n+        T: ~const Drop + ~const Destruct,\n     {\n         *self = Some(value);\n \n@@ -1446,9 +1462,10 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn get_or_insert(&mut self, value: T) -> &mut T\n     where\n-        T: ~const Drop,\n+        T: ~const Drop + ~const Destruct,\n     {\n         if let None = *self {\n             *self = Some(value);\n@@ -1513,10 +1530,11 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T\n     where\n         F: ~const FnOnce() -> T,\n-        F: ~const Drop,\n+        F: ~const Drop + ~const Destruct,\n     {\n         if let None = *self {\n             // the compiler isn't smart enough to know that we are not dropping a `T`\n@@ -1627,10 +1645,11 @@ impl<T> Option<T> {\n     /// ```\n     #[stable(feature = \"option_zip_option\", since = \"1.46.0\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn zip<U>(self, other: Option<U>) -> Option<(T, U)>\n     where\n-        T: ~const Drop,\n-        U: ~const Drop,\n+        T: ~const Drop + ~const Destruct,\n+        U: ~const Drop + ~const Destruct,\n     {\n         match (self, other) {\n             (Some(a), Some(b)) => Some((a, b)),\n@@ -1668,12 +1687,13 @@ impl<T> Option<T> {\n     /// ```\n     #[unstable(feature = \"option_zip\", issue = \"70086\")]\n     #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    #[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n     pub const fn zip_with<U, F, R>(self, other: Option<U>, f: F) -> Option<R>\n     where\n         F: ~const FnOnce(T, U) -> R,\n-        F: ~const Drop,\n-        T: ~const Drop,\n-        U: ~const Drop,\n+        F: ~const Drop + ~const Destruct,\n+        T: ~const Drop + ~const Destruct,\n+        U: ~const Drop + ~const Destruct,\n     {\n         match (self, other) {\n             (Some(a), Some(b)) => Some(f(a, b)),\n@@ -1860,9 +1880,10 @@ const fn expect_failed(msg: &str) -> ! {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_clone\", issue = \"91805\")]\n+#[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n impl<T> const Clone for Option<T>\n where\n-    T: ~const Clone + ~const Drop,\n+    T: ~const Clone + ~const Drop + ~const Destruct,\n {\n     #[inline]\n     fn clone(&self) -> Self {"}, {"sha": "afd0c8572291d2e788d33226b07c462b60ac97c6", "filename": "library/core/src/result.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -490,6 +490,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};\n+use crate::marker::Destruct;\n use crate::ops::{self, ControlFlow, Deref, DerefMut};\n use crate::{convert, fmt, hint};\n \n@@ -635,7 +636,7 @@ impl<T, E> Result<T, E> {\n     #[rustc_const_unstable(feature = \"const_result_drop\", issue = \"92384\")]\n     pub const fn ok(self) -> Option<T>\n     where\n-        E: ~const Drop,\n+        E: ~const Drop + ~const Destruct,\n     {\n         match self {\n             Ok(x) => Some(x),\n@@ -666,7 +667,7 @@ impl<T, E> Result<T, E> {\n     #[rustc_const_unstable(feature = \"const_result_drop\", issue = \"92384\")]\n     pub const fn err(self) -> Option<E>\n     where\n-        T: ~const Drop,\n+        T: ~const Drop + ~const Destruct,\n     {\n         match self {\n             // FIXME: ~const Drop doesn't quite work right yet\n@@ -1282,9 +1283,9 @@ impl<T, E> Result<T, E> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn and<U>(self, res: Result<U, E>) -> Result<U, E>\n     where\n-        T: ~const Drop,\n-        U: ~const Drop,\n-        E: ~const Drop,\n+        T: ~const Drop + ~const Destruct,\n+        U: ~const Drop + ~const Destruct,\n+        E: ~const Drop + ~const Destruct,\n     {\n         match self {\n             // FIXME: ~const Drop doesn't quite work right yet\n@@ -1367,9 +1368,9 @@ impl<T, E> Result<T, E> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn or<F>(self, res: Result<T, F>) -> Result<T, F>\n     where\n-        T: ~const Drop,\n-        E: ~const Drop,\n-        F: ~const Drop,\n+        T: ~const Drop + ~const Destruct,\n+        E: ~const Drop + ~const Destruct,\n+        F: ~const Drop + ~const Destruct,\n     {\n         match self {\n             Ok(v) => Ok(v),\n@@ -1431,8 +1432,8 @@ impl<T, E> Result<T, E> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn unwrap_or(self, default: T) -> T\n     where\n-        T: ~const Drop,\n-        E: ~const Drop,\n+        T: ~const Drop + ~const Destruct,\n+        E: ~const Drop + ~const Destruct,\n     {\n         match self {\n             Ok(t) => t,\n@@ -1802,10 +1803,11 @@ fn unwrap_failed<T>(_msg: &str, _error: &T) -> ! {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_clone\", issue = \"91805\")]\n+#[cfg_attr(not(bootstrap), allow(drop_bounds))] // FIXME remove `~const Drop` and this attr when bumping\n impl<T, E> const Clone for Result<T, E>\n where\n-    T: ~const Clone + ~const Drop,\n-    E: ~const Clone + ~const Drop,\n+    T: ~const Clone + ~const Drop + ~const Destruct,\n+    E: ~const Clone + ~const Drop + ~const Destruct,\n {\n     #[inline]\n     fn clone(&self) -> Self {"}, {"sha": "1e3260ce9ae2be0d7a394d754d33f0a4ff14040c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -121,11 +121,20 @@ impl Clean<Option<GenericBound>> for hir::GenericBound<'_> {\n             hir::GenericBound::Trait(ref t, modifier) => {\n                 // `T: ~const Drop` is not equivalent to `T: Drop`, and we don't currently document `~const` bounds\n                 // because of its experimental status, so just don't show these.\n-                if Some(t.trait_ref.trait_def_id().unwrap()) == cx.tcx.lang_items().drop_trait()\n-                    && hir::TraitBoundModifier::MaybeConst == modifier\n+                // `T: ~const Destruct` is hidden because `T: Destruct` is a no-op.\n+                if modifier == hir::TraitBoundModifier::MaybeConst\n+                    && [cx.tcx.lang_items().drop_trait(), cx.tcx.lang_items().destruct_trait()]\n+                        .iter()\n+                        .any(|tr| *tr == Some(t.trait_ref.trait_def_id().unwrap()))\n                 {\n                     return None;\n                 }\n+\n+                #[cfg(bootstrap)]\n+                {\n+                    // FIXME: remove `lang_items().drop_trait()` from above logic,\n+                    // as well as the comment about `~const Drop` because it was renamed to `Destruct`.\n+                }\n                 GenericBound::TraitBound(t.clean(cx), modifier)\n             }\n         })\n@@ -306,12 +315,21 @@ impl<'a> Clean<Option<WherePredicate>> for ty::PolyTraitPredicate<'a> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Option<WherePredicate> {\n         // `T: ~const Drop` is not equivalent to `T: Drop`, and we don't currently document `~const` bounds\n         // because of its experimental status, so just don't show these.\n+        // `T: ~const Destruct` is hidden because `T: Destruct` is a no-op.\n         if self.skip_binder().constness == ty::BoundConstness::ConstIfConst\n-            && Some(self.skip_binder().trait_ref.def_id) == cx.tcx.lang_items().drop_trait()\n+            && [cx.tcx.lang_items().drop_trait(), cx.tcx.lang_items().destruct_trait()]\n+                .iter()\n+                .any(|tr| *tr == Some(self.skip_binder().def_id()))\n         {\n             return None;\n         }\n \n+        #[cfg(bootstrap)]\n+        {\n+            // FIXME: remove `lang_items().drop_trait()` from above logic,\n+            // as well as the comment about `~const Drop` because it was renamed to `Destruct`.\n+        }\n+\n         let poly_trait_ref = self.map_bound(|pred| pred.trait_ref);\n         Some(WherePredicate::BoundPredicate {\n             ty: poly_trait_ref.skip_binder().self_ty().clean(cx),"}, {"sha": "42aa0216b873073c1fc4e9b87acf43394452857a", "filename": "src/test/ui/consts/const-block-const-bound.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -1,7 +1,9 @@\n #![allow(unused)]\n #![feature(const_trait_impl, inline_const, negative_impls)]\n \n-const fn f<T: ~const Drop>(x: T) {}\n+use std::marker::Destruct;\n+\n+const fn f<T: ~const Destruct>(x: T) {}\n \n struct UnconstDrop;\n \n@@ -16,8 +18,8 @@ impl !Drop for NonDrop {}\n fn main() {\n     const {\n         f(UnconstDrop);\n-        //~^ ERROR the trait bound `UnconstDrop: ~const Drop` is not satisfied\n+        //~^ ERROR can't drop\n         f(NonDrop);\n-        //~^ ERROR the trait bound `NonDrop: ~const Drop` is not satisfied\n+        //~^ ERROR can't drop\n     }\n }"}, {"sha": "87ca771e54ed41904a1496076a3a2e80d0ad7146", "filename": "src/test/ui/consts/const-block-const-bound.stderr", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.stderr?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -1,36 +1,38 @@\n-error[E0277]: the trait bound `UnconstDrop: ~const Drop` is not satisfied\n-  --> $DIR/const-block-const-bound.rs:18:11\n+error[E0277]: can't drop `UnconstDrop` in const contexts\n+  --> $DIR/const-block-const-bound.rs:20:11\n    |\n LL |         f(UnconstDrop);\n-   |         - ^^^^^^^^^^^ expected an implementor of trait `~const Drop`\n+   |         - ^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n    |         |\n    |         required by a bound introduced by this call\n    |\n+   = note: the trait bound `UnconstDrop: ~const Destruct` is not satisfied\n note: required by a bound in `f`\n-  --> $DIR/const-block-const-bound.rs:4:15\n+  --> $DIR/const-block-const-bound.rs:6:15\n    |\n-LL | const fn f<T: ~const Drop>(x: T) {}\n-   |               ^^^^^^^^^^^ required by this bound in `f`\n+LL | const fn f<T: ~const Destruct>(x: T) {}\n+   |               ^^^^^^^^^^^^^^^ required by this bound in `f`\n help: consider borrowing here\n    |\n LL |         f(&UnconstDrop);\n    |           +\n LL |         f(&mut UnconstDrop);\n    |           ++++\n \n-error[E0277]: the trait bound `NonDrop: ~const Drop` is not satisfied\n-  --> $DIR/const-block-const-bound.rs:20:11\n+error[E0277]: can't drop `NonDrop` in const contexts\n+  --> $DIR/const-block-const-bound.rs:22:11\n    |\n LL |         f(NonDrop);\n-   |         - ^^^^^^^ expected an implementor of trait `~const Drop`\n+   |         - ^^^^^^^ expected an implementor of trait `~const Destruct`\n    |         |\n    |         required by a bound introduced by this call\n    |\n+   = note: the trait bound `NonDrop: ~const Destruct` is not satisfied\n note: required by a bound in `f`\n-  --> $DIR/const-block-const-bound.rs:4:15\n+  --> $DIR/const-block-const-bound.rs:6:15\n    |\n-LL | const fn f<T: ~const Drop>(x: T) {}\n-   |               ^^^^^^^^^^^ required by this bound in `f`\n+LL | const fn f<T: ~const Destruct>(x: T) {}\n+   |               ^^^^^^^^^^^^^^^ required by this bound in `f`\n help: consider borrowing here\n    |\n LL |         f(&NonDrop);"}, {"sha": "c03688d03b66970c09c700bbb3e1547e37083c74", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -48,7 +48,7 @@ LL |     const_eval_select((), 42, 0xDEADBEEF);\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    |\n-LL |     G: FnOnce<ARG, Output = RET> + ~const Drop,\n+LL |     G: FnOnce<ARG, Output = RET> + ~const Drop + ~const Destruct,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error[E0271]: type mismatch resolving `<fn(i32) -> bool {bar} as FnOnce<(i32,)>>::Output == i32`\n@@ -60,7 +60,7 @@ LL |     const_eval_select((1,), foo, bar);\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    |\n-LL |     G: FnOnce<ARG, Output = RET> + ~const Drop,\n+LL |     G: FnOnce<ARG, Output = RET> + ~const Drop + ~const Destruct,\n    |                    ^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error[E0631]: type mismatch in function arguments"}, {"sha": "6fa35d2d97bd32ff6d1fad3c4fa33170371a4a6e", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-bound.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-bound.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -3,7 +3,9 @@\n #![feature(const_trait_impl)]\n #![feature(const_precise_live_drops)]\n \n-const fn foo<T, E>(res: Result<T, E>) -> Option<T> where E: ~const Drop {\n+use std::marker::Destruct;\n+\n+const fn foo<T, E>(res: Result<T, E>) -> Option<T> where E: ~const Destruct {\n     match res {\n         Ok(t) => Some(t),\n         Err(_e) => None,\n@@ -12,7 +14,7 @@ const fn foo<T, E>(res: Result<T, E>) -> Option<T> where E: ~const Drop {\n \n pub struct Foo<T>(T);\n \n-const fn baz<T: ~const Drop, E: ~const Drop>(res: Result<Foo<T>, Foo<E>>) -> Option<Foo<T>> {\n+const fn baz<T: ~const Destruct, E: ~const Destruct>(res: Result<Foo<T>, Foo<E>>) -> Option<Foo<T>> {\n     foo(res)\n }\n "}, {"sha": "fedb1ffdea97aa2a701d819a9181ec51b7a2d0f6", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -1,34 +1,35 @@\n-error[E0277]: the trait bound `NonTrivialDrop: ~const Drop` is not satisfied\n+error[E0277]: can't drop `NonTrivialDrop` in const contexts\n   --> $DIR/const-drop-fail.rs:43:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n ...\n LL |     NonTrivialDrop,\n-   |     ^^^^^^^^^^^^^^ expected an implementor of trait `~const Drop`\n+   |     ^^^^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n    |\n+   = note: the trait bound `NonTrivialDrop: ~const Destruct` is not satisfied\n note: required by a bound in `check`\n   --> $DIR/const-drop-fail.rs:34:19\n    |\n-LL | const fn check<T: ~const Drop>(_: T) {}\n-   |                   ^^^^^^^^^^^ required by this bound in `check`\n+LL | const fn check<T: ~const Destruct>(_: T) {}\n+   |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n help: consider borrowing here\n    |\n LL |     &NonTrivialDrop,\n    |     +\n LL |     &mut NonTrivialDrop,\n    |     ++++\n \n-error[E0277]: the trait bound `NonTrivialDrop: ~const Drop` is not satisfied in `ConstImplWithDropGlue`\n+error[E0277]: can't drop `NonTrivialDrop` in const contexts\n   --> $DIR/const-drop-fail.rs:45:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n ...\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Drop` is not implemented for `NonTrivialDrop`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n    |\n-note: the trait `Drop` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+note: the trait `Destruct` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n   --> $DIR/const-drop-fail.rs:45:5\n    |\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n@@ -41,28 +42,24 @@ LL | struct ConstImplWithDropGlue(NonTrivialDrop);\n note: required by a bound in `check`\n   --> $DIR/const-drop-fail.rs:34:19\n    |\n-LL | const fn check<T: ~const Drop>(_: T) {}\n-   |                   ^^^^^^^^^^^ required by this bound in `check`\n+LL | const fn check<T: ~const Destruct>(_: T) {}\n+   |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n \n-error[E0277]: the trait bound `ConstDropImplWithBounds<NonTrivialDrop>: ~const Drop` is not satisfied\n+error[E0277]: the trait bound `ConstDropImplWithBounds<NonTrivialDrop>: ~const Destruct` is not satisfied\n   --> $DIR/const-drop-fail.rs:47:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n ...\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an implementor of trait `~const Drop`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n    |\n-note: required because of the requirements on the impl of `~const Drop` for `ConstDropImplWithBounds<NonTrivialDrop>`\n-  --> $DIR/const-drop-fail.rs:28:25\n-   |\n-LL | impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n-   |                         ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because of the requirements on the impl of `~const Destruct` for `ConstDropImplWithBounds<NonTrivialDrop>`\n note: required by a bound in `check`\n   --> $DIR/const-drop-fail.rs:34:19\n    |\n-LL | const fn check<T: ~const Drop>(_: T) {}\n-   |                   ^^^^^^^^^^^ required by this bound in `check`\n+LL | const fn check<T: ~const Destruct>(_: T) {}\n+   |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n help: consider borrowing here\n    |\n LL |     &ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),"}, {"sha": "001dd430a8621f997cd3842033f0c9097fbfbc70", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -3,7 +3,7 @@\n #![feature(const_mut_refs)]\n #![cfg_attr(precise, feature(const_precise_live_drops))]\n \n-use std::marker::PhantomData;\n+use std::marker::{Destruct, PhantomData};\n \n struct NonTrivialDrop;\n \n@@ -31,7 +31,7 @@ impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n     }\n }\n \n-const fn check<T: ~const Drop>(_: T) {}\n+const fn check<T: ~const Destruct>(_: T) {}\n \n macro_rules! check_all {\n     ($($exp:expr),*$(,)?) => {$(\n@@ -41,9 +41,9 @@ macro_rules! check_all {\n \n check_all! {\n     NonTrivialDrop,\n-    //~^ ERROR the trait bound\n+    //~^ ERROR can't drop\n     ConstImplWithDropGlue(NonTrivialDrop),\n-    //~^ ERROR the trait bound\n+    //~^ ERROR can't drop\n     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n     //~^ ERROR the trait bound\n }"}, {"sha": "fedb1ffdea97aa2a701d819a9181ec51b7a2d0f6", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -1,34 +1,35 @@\n-error[E0277]: the trait bound `NonTrivialDrop: ~const Drop` is not satisfied\n+error[E0277]: can't drop `NonTrivialDrop` in const contexts\n   --> $DIR/const-drop-fail.rs:43:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n ...\n LL |     NonTrivialDrop,\n-   |     ^^^^^^^^^^^^^^ expected an implementor of trait `~const Drop`\n+   |     ^^^^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n    |\n+   = note: the trait bound `NonTrivialDrop: ~const Destruct` is not satisfied\n note: required by a bound in `check`\n   --> $DIR/const-drop-fail.rs:34:19\n    |\n-LL | const fn check<T: ~const Drop>(_: T) {}\n-   |                   ^^^^^^^^^^^ required by this bound in `check`\n+LL | const fn check<T: ~const Destruct>(_: T) {}\n+   |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n help: consider borrowing here\n    |\n LL |     &NonTrivialDrop,\n    |     +\n LL |     &mut NonTrivialDrop,\n    |     ++++\n \n-error[E0277]: the trait bound `NonTrivialDrop: ~const Drop` is not satisfied in `ConstImplWithDropGlue`\n+error[E0277]: can't drop `NonTrivialDrop` in const contexts\n   --> $DIR/const-drop-fail.rs:45:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n ...\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Drop` is not implemented for `NonTrivialDrop`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n    |\n-note: the trait `Drop` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+note: the trait `Destruct` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n   --> $DIR/const-drop-fail.rs:45:5\n    |\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n@@ -41,28 +42,24 @@ LL | struct ConstImplWithDropGlue(NonTrivialDrop);\n note: required by a bound in `check`\n   --> $DIR/const-drop-fail.rs:34:19\n    |\n-LL | const fn check<T: ~const Drop>(_: T) {}\n-   |                   ^^^^^^^^^^^ required by this bound in `check`\n+LL | const fn check<T: ~const Destruct>(_: T) {}\n+   |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n \n-error[E0277]: the trait bound `ConstDropImplWithBounds<NonTrivialDrop>: ~const Drop` is not satisfied\n+error[E0277]: the trait bound `ConstDropImplWithBounds<NonTrivialDrop>: ~const Destruct` is not satisfied\n   --> $DIR/const-drop-fail.rs:47:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n ...\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an implementor of trait `~const Drop`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n    |\n-note: required because of the requirements on the impl of `~const Drop` for `ConstDropImplWithBounds<NonTrivialDrop>`\n-  --> $DIR/const-drop-fail.rs:28:25\n-   |\n-LL | impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n-   |                         ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because of the requirements on the impl of `~const Destruct` for `ConstDropImplWithBounds<NonTrivialDrop>`\n note: required by a bound in `check`\n   --> $DIR/const-drop-fail.rs:34:19\n    |\n-LL | const fn check<T: ~const Drop>(_: T) {}\n-   |                   ^^^^^^^^^^^ required by this bound in `check`\n+LL | const fn check<T: ~const Destruct>(_: T) {}\n+   |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n help: consider borrowing here\n    |\n LL |     &ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),"}, {"sha": "f50e70939dfd58bc2d9bc6907e64972684d3d832", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -5,6 +5,8 @@\n #![feature(never_type)]\n #![cfg_attr(precise, feature(const_precise_live_drops))]\n \n+use std::marker::Destruct;\n+\n struct S<'a>(&'a mut u8);\n \n impl<'a> const Drop for S<'a> {\n@@ -13,7 +15,7 @@ impl<'a> const Drop for S<'a> {\n     }\n }\n \n-const fn a<T: ~const Drop>(_: T) {}\n+const fn a<T: ~const Destruct>(_: T) {}\n \n const fn b() -> u8 {\n     let mut c = 0;"}, {"sha": "96a3e386e6e91e25810fe45501074125a0766fbf", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-92111.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92111.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92111.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92111.rs?ref=1f3ee7f32e1345e70f31adf1cb2d6f11d1d87c9a", "patch": "@@ -1,16 +1,11 @@\n // Regression test for #92111.\n //\n-// The issue was that we normalize trait bounds before caching\n-// results of selection. Checking that `impl Tr for S` requires\n-// checking `S: !Drop` because it cannot overlap with the blanket\n-// impl. Then we save the (unsatisfied) result from checking `S: Drop`.\n-// Then the call to `a` checks whether `S: ~const Drop` but we normalize\n-// it to `S: Drop` which the cache claims to be unsatisfied.\n-//\n // check-pass\n \n #![feature(const_trait_impl)]\n \n+use std::marker::Destruct;\n+\n pub trait Tr {}\n \n #[allow(drop_bounds)]\n@@ -21,7 +16,7 @@ pub struct S(i32);\n \n impl Tr for S {}\n \n-const fn a<T: ~const Drop>(t: T) {}\n+const fn a<T: ~const Destruct>(t: T) {}\n \n fn main() {\n     a(S(0));"}]}