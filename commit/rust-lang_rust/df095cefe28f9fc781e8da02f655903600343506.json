{"sha": "df095cefe28f9fc781e8da02f655903600343506", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMDk1Y2VmZTI4ZjlmYzc4MWU4ZGEwMmY2NTU5MDM2MDAzNDM1MDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-15T11:31:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-15T11:31:46Z"}, "message": "Auto merge of #45123 - goffrie:fix-method-unit-call, r=oli-obk\n\nProvide the full span of method calls to `check_argument_types`\n\n... so that it includes the span of the passed arguments, not just the name of the called method.\n\nFixes #44760.", "tree": {"sha": "274f45840ae02f6a6abc77d1ce0419aa2db657bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/274f45840ae02f6a6abc77d1ce0419aa2db657bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df095cefe28f9fc781e8da02f655903600343506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df095cefe28f9fc781e8da02f655903600343506", "html_url": "https://github.com/rust-lang/rust/commit/df095cefe28f9fc781e8da02f655903600343506", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df095cefe28f9fc781e8da02f655903600343506/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8382f39b6b5820927ccf5380d8240a0c02311645", "url": "https://api.github.com/repos/rust-lang/rust/commits/8382f39b6b5820927ccf5380d8240a0c02311645", "html_url": "https://github.com/rust-lang/rust/commit/8382f39b6b5820927ccf5380d8240a0c02311645"}, {"sha": "bb4d1caad7f60d095b730fff417e2ac461254600", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb4d1caad7f60d095b730fff417e2ac461254600", "html_url": "https://github.com/rust-lang/rust/commit/bb4d1caad7f60d095b730fff417e2ac461254600"}], "stats": {"total": 141, "additions": 117, "deletions": 24}, "files": [{"sha": "91ce4511a31cb3fe386a403ac4096db1ac56f9b5", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df095cefe28f9fc781e8da02f655903600343506/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df095cefe28f9fc781e8da02f655903600343506/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=df095cefe28f9fc781e8da02f655903600343506", "patch": "@@ -271,6 +271,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                             fn_sig.output(),\n                                             fn_sig.inputs());\n         self.check_argument_types(call_expr.span,\n+                                  call_expr.span,\n                                   fn_sig.inputs(),\n                                   &expected_arg_tys[..],\n                                   arg_exprs,\n@@ -298,6 +299,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                                fn_sig.inputs());\n \n         self.check_argument_types(call_expr.span,\n+                                  call_expr.span,\n                                   fn_sig.inputs(),\n                                   &expected_arg_tys,\n                                   arg_exprs,\n@@ -315,6 +317,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                method_callee: MethodCallee<'tcx>)\n                                -> Ty<'tcx> {\n         let output_type = self.check_method_argument_types(call_expr.span,\n+                                                           call_expr.span,\n                                                            Ok(method_callee),\n                                                            arg_exprs,\n                                                            TupleArgumentsFlag::TupleArguments,"}, {"sha": "3506fc071127e4338c8a05fca4f73c897490bba7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df095cefe28f9fc781e8da02f655903600343506/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df095cefe28f9fc781e8da02f655903600343506/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=df095cefe28f9fc781e8da02f655903600343506", "patch": "@@ -2352,6 +2352,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     fn check_method_argument_types(&self,\n                                    sp: Span,\n+                                   expr_sp: Span,\n                                    method: Result<MethodCallee<'tcx>, ()>,\n                                    args_no_rcvr: &'gcx [hir::Expr],\n                                    tuple_arguments: TupleArgumentsFlag,\n@@ -2371,7 +2372,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 TupleArguments => vec![self.tcx.intern_tup(&err_inputs[..], false)],\n             };\n \n-            self.check_argument_types(sp, &err_inputs[..], &[], args_no_rcvr,\n+            self.check_argument_types(sp, expr_sp, &err_inputs[..], &[], args_no_rcvr,\n                                       false, tuple_arguments, None);\n             return self.tcx.types.err;\n         }\n@@ -2384,7 +2385,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             method.sig.output(),\n             &method.sig.inputs()[1..]\n         );\n-        self.check_argument_types(sp, &method.sig.inputs()[1..], &expected_arg_tys[..],\n+        self.check_argument_types(sp, expr_sp, &method.sig.inputs()[1..], &expected_arg_tys[..],\n                                   args_no_rcvr, method.sig.variadic, tuple_arguments,\n                                   self.tcx.hir.span_if_local(method.def_id));\n         method.sig.output()\n@@ -2394,6 +2395,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// method calls and overloaded operators.\n     fn check_argument_types(&self,\n                             sp: Span,\n+                            expr_sp: Span,\n                             fn_inputs: &[Ty<'tcx>],\n                             expected_arg_tys: &[Ty<'tcx>],\n                             args: &'gcx [hir::Expr],\n@@ -2434,9 +2436,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             sp\n         };\n \n-        fn parameter_count_error<'tcx>(sess: &Session, sp: Span, expected_count: usize,\n-                                       arg_count: usize, error_code: &str, variadic: bool,\n-                                       def_span: Option<Span>, sugg_unit: bool) {\n+        fn parameter_count_error<'tcx>(sess: &Session,\n+                                       sp: Span,\n+                                       expr_sp: Span,\n+                                       expected_count: usize,\n+                                       arg_count: usize,\n+                                       error_code: &str,\n+                                       variadic: bool,\n+                                       def_span: Option<Span>,\n+                                       sugg_unit: bool) {\n             let mut err = sess.struct_span_err_with_code(sp,\n                 &format!(\"this function takes {}{} parameter{} but {} parameter{} supplied\",\n                     if variadic {\"at least \"} else {\"\"},\n@@ -2450,12 +2458,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 err.span_label(def_s, \"defined here\");\n             }\n             if sugg_unit {\n-                let sugg_span = sp.end_point();\n+                let sugg_span = expr_sp.end_point();\n                 // remove closing `)` from the span\n                 let sugg_span = sugg_span.with_hi(sugg_span.lo());\n                 err.span_suggestion(\n                     sugg_span,\n-                    \"expected the unit value `()`. You can create one with a pair of parenthesis\",\n+                    \"expected the unit value `()`; create it with empty parentheses\",\n                     String::from(\"()\"));\n             } else {\n                 err.span_label(sp, format!(\"expected {}{} parameter{}\",\n@@ -2470,7 +2478,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let tuple_type = self.structurally_resolved_type(sp, fn_inputs[0]);\n             match tuple_type.sty {\n                 ty::TyTuple(arg_types, _) if arg_types.len() != args.len() => {\n-                    parameter_count_error(tcx.sess, sp_args, arg_types.len(), args.len(),\n+                    parameter_count_error(tcx.sess, sp_args, expr_sp, arg_types.len(), args.len(),\n                                           \"E0057\", false, def_span, false);\n                     expected_arg_tys = &[];\n                     self.err_args(args.len())\n@@ -2499,7 +2507,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if supplied_arg_count >= expected_arg_count {\n                 fn_inputs.to_vec()\n             } else {\n-                parameter_count_error(tcx.sess, sp_args, expected_arg_count,\n+                parameter_count_error(tcx.sess, sp_args, expr_sp, expected_arg_count,\n                                       supplied_arg_count, \"E0060\", true, def_span, false);\n                 expected_arg_tys = &[];\n                 self.err_args(supplied_arg_count)\n@@ -2513,7 +2521,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             } else {\n                 false\n             };\n-            parameter_count_error(tcx.sess, sp_args, expected_arg_count,\n+            parameter_count_error(tcx.sess, sp_args, expr_sp, expected_arg_count,\n                                   supplied_arg_count, \"E0061\", false, def_span, sugg_unit);\n             expected_arg_tys = &[];\n             self.err_args(supplied_arg_count)\n@@ -2866,7 +2874,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         // Call the generic checker.\n-        self.check_method_argument_types(span, method,\n+        self.check_method_argument_types(span,\n+                                         expr.span,\n+                                         method,\n                                          &args[1..],\n                                          DontTupleArguments,\n                                          expected)"}, {"sha": "14fa74d1f32e55b33b22a3632194aca8d40ed982", "filename": "src/test/ui/method-call-err-msg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/df095cefe28f9fc781e8da02f655903600343506/src%2Ftest%2Fui%2Fmethod-call-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df095cefe28f9fc781e8da02f655903600343506/src%2Ftest%2Fui%2Fmethod-call-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethod-call-err-msg.rs?ref=df095cefe28f9fc781e8da02f655903600343506", "previous_filename": "src/test/compile-fail/method-call-err-msg.rs"}, {"sha": "c39c62daf9efe9b2ae5941758bd013b35bc0a209", "filename": "src/test/ui/method-call-err-msg.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/df095cefe28f9fc781e8da02f655903600343506/src%2Ftest%2Fui%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df095cefe28f9fc781e8da02f655903600343506/src%2Ftest%2Fui%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethod-call-err-msg.stderr?ref=df095cefe28f9fc781e8da02f655903600343506", "patch": "@@ -0,0 +1,44 @@\n+error[E0061]: this function takes 0 parameters but 1 parameter was supplied\n+  --> $DIR/method-call-err-msg.rs:25:12\n+   |\n+15 |     fn zero(self) -> Foo { self }\n+   |     ----------------------------- defined here\n+...\n+25 |     x.zero(0)   //~ ERROR this function takes 0 parameters but 1 parameter was supplied\n+   |            ^ expected 0 parameters\n+\n+error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+  --> $DIR/method-call-err-msg.rs:27:7\n+   |\n+17 |     fn one(self, _: isize) -> Foo { self }\n+   |     -------------------------------------- defined here\n+...\n+27 |      .one()     //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n+   |       ^^^ expected 1 parameter\n+\n+error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n+  --> $DIR/method-call-err-msg.rs:29:11\n+   |\n+19 |     fn two(self, _: isize, _: isize) -> Foo { self }\n+   |     ------------------------------------------------ defined here\n+...\n+29 |      .two(0);   //~ ERROR this function takes 2 parameters but 1 parameter was supplied\n+   |           ^ expected 2 parameters\n+\n+error[E0599]: no method named `take` found for type `Foo` in the current scope\n+  --> $DIR/method-call-err-msg.rs:34:7\n+   |\n+34 |      .take()    //~ ERROR no method named `take` found for type `Foo` in the current scope\n+   |       ^^^^\n+   |\n+   = note: the method `take` exists but the following trait bounds were not satisfied:\n+           `&mut Foo : std::iter::Iterator`\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following traits define an item `take`, perhaps you need to implement one of them:\n+           candidate #1: `std::collections::hash::Recover`\n+           candidate #2: `std::io::Read`\n+           candidate #3: `std::iter::Iterator`\n+           candidate #4: `alloc::btree::Recover`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "ba1a999121cc57cae44b3bbe61cac232284de43e", "filename": "src/test/ui/span/missing-unit-argument.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df095cefe28f9fc781e8da02f655903600343506/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df095cefe28f9fc781e8da02f655903600343506/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.rs?ref=df095cefe28f9fc781e8da02f655903600343506", "patch": "@@ -11,9 +11,17 @@\n fn foo(():(), ():()) {}\n fn bar(():()) {}\n \n+struct S;\n+impl S {\n+    fn baz(self, (): ()) { }\n+    fn generic<T>(self, _: T) { }\n+}\n+\n fn main() {\n     let _: Result<(), String> = Ok();\n     foo();\n     foo(());\n     bar();\n+    S.baz();\n+    S.generic::<()>();\n }"}, {"sha": "af558d0ab8335913a77cb936de546e2cb67dfe28", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/df095cefe28f9fc781e8da02f655903600343506/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df095cefe28f9fc781e8da02f655903600343506/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=df095cefe28f9fc781e8da02f655903600343506", "patch": "@@ -1,45 +1,73 @@\n error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n-  --> $DIR/missing-unit-argument.rs:15:33\n+  --> $DIR/missing-unit-argument.rs:21:33\n    |\n-15 |     let _: Result<(), String> = Ok();\n+21 |     let _: Result<(), String> = Ok();\n    |                                 ^^^^\n    |\n-help: expected the unit value `()`. You can create one with a pair of parenthesis\n+help: expected the unit value `()`; create it with empty parentheses\n    |\n-15 |     let _: Result<(), String> = Ok(());\n+21 |     let _: Result<(), String> = Ok(());\n    |                                    ^^\n \n error[E0061]: this function takes 2 parameters but 0 parameters were supplied\n-  --> $DIR/missing-unit-argument.rs:16:5\n+  --> $DIR/missing-unit-argument.rs:22:5\n    |\n 11 | fn foo(():(), ():()) {}\n    | ----------------------- defined here\n ...\n-16 |     foo();\n+22 |     foo();\n    |     ^^^^^ expected 2 parameters\n \n error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n-  --> $DIR/missing-unit-argument.rs:17:9\n+  --> $DIR/missing-unit-argument.rs:23:9\n    |\n 11 | fn foo(():(), ():()) {}\n    | ----------------------- defined here\n ...\n-17 |     foo(());\n+23 |     foo(());\n    |         ^^ expected 2 parameters\n \n error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n-  --> $DIR/missing-unit-argument.rs:18:5\n+  --> $DIR/missing-unit-argument.rs:24:5\n    |\n 12 | fn bar(():()) {}\n    | ---------------- defined here\n ...\n-18 |     bar();\n+24 |     bar();\n    |     ^^^^^\n    |\n-help: expected the unit value `()`. You can create one with a pair of parenthesis\n+help: expected the unit value `()`; create it with empty parentheses\n    |\n-18 |     bar(());\n+24 |     bar(());\n    |         ^^\n \n-error: aborting due to 4 previous errors\n+error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+  --> $DIR/missing-unit-argument.rs:25:7\n+   |\n+16 |     fn baz(self, (): ()) { }\n+   |     ------------------------ defined here\n+...\n+25 |     S.baz();\n+   |       ^^^\n+   |\n+help: expected the unit value `()`; create it with empty parentheses\n+   |\n+25 |     S.baz(());\n+   |           ^^\n+\n+error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+  --> $DIR/missing-unit-argument.rs:26:7\n+   |\n+17 |     fn generic<T>(self, _: T) { }\n+   |     ----------------------------- defined here\n+...\n+26 |     S.generic::<()>();\n+   |       ^^^^^^^\n+   |\n+help: expected the unit value `()`; create it with empty parentheses\n+   |\n+26 |     S.generic::<()>(());\n+   |                     ^^\n+\n+error: aborting due to 6 previous errors\n "}]}