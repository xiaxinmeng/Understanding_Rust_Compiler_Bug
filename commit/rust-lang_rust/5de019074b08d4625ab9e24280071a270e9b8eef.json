{"sha": "5de019074b08d4625ab9e24280071a270e9b8eef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZTAxOTA3NGIwOGQ0NjI1YWI5ZTI0MjgwMDcxYTI3MGU5YjhlZWY=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-03-31T13:14:29Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-03-31T15:24:09Z"}, "message": "Move update_lints logic to its own module", "tree": {"sha": "2a645c7b8577ef357338365d036688ac0c8f783c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a645c7b8577ef357338365d036688ac0c8f783c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5de019074b08d4625ab9e24280071a270e9b8eef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl6DYJkACgkQLO/Nsn7Q\nvnn2LQ//YN+wbWFZHOb5QHnmVY914ayylhTMwjxvOW1iaoVCjZn5ynIWlaleIT9f\nkr2wtkzvjTZ8+A4dLTOGPYbwFnPOtCg5AOyl/31OG8um1rGYz36lHbV3DRQn1EZc\n+6UP2cbc7ktBMa6izH18Kihemix/mugxkoIBgrIsetQSNqkmip8QOBoJqzE6pExX\nC2P7W7n/QE2JJNkYvzL3lLlxYoArR1x644BoRbFfZDwBUBoeBQdotQpIZFObrran\n0Xel5QsohZApW/P9bNcsBr/4J99bUfbH9grBYoDSY3k/5NOR3I9fPc2zPnOA3ZWI\nBShFBmhcmpmgzGDgrSo0/YySjtN2cHGyr7DtaRHu7bQOiGFTAP6nb0r1n7R51Ibh\n6QZV2MYIdktnWSwmmwZiuozIhyrVE4dmvvlOF0p2wdJ0/2qEL4uwuwC1AWV84UOv\nXjCcKmTNbMwde27BC95eYMFrhMHOsp8QVdxpoQRKmg9goaZyKhSmwSH9df4AqYF0\nd65U34h64REuYrk25BhPF3ZAbJ+Z9pV1hh+k12KOROIhyR7QXM3kwH9O1WGjcbLT\nIdL0jLPwwCQl+uQ3+FBrnSRa0KZD2nY9MkAWaF07I1Gp0DhpyVLrFhJDB+l1rFVh\nrMkiCwqLdheW+2cY4KHtvggxhKgzHTe3HZ7DnjlLv6GP8tnJ2pI=\n=/8u/\n-----END PGP SIGNATURE-----", "payload": "tree 2a645c7b8577ef357338365d036688ac0c8f783c\nparent deb1979b8e36dfc8c651638816ae061144fe58af\nauthor flip1995 <hello@philkrones.com> 1585660469 +0200\ncommitter flip1995 <hello@philkrones.com> 1585668249 +0200\n\nMove update_lints logic to its own module\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5de019074b08d4625ab9e24280071a270e9b8eef", "html_url": "https://github.com/rust-lang/rust/commit/5de019074b08d4625ab9e24280071a270e9b8eef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5de019074b08d4625ab9e24280071a270e9b8eef/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "deb1979b8e36dfc8c651638816ae061144fe58af", "url": "https://api.github.com/repos/rust-lang/rust/commits/deb1979b8e36dfc8c651638816ae061144fe58af", "html_url": "https://github.com/rust-lang/rust/commit/deb1979b8e36dfc8c651638816ae061144fe58af"}], "stats": {"total": 343, "additions": 168, "deletions": 175}, "files": [{"sha": "d99235f7c07a7cf649498f5266468fdd89b49cfb", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 5, "deletions": 175, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/5de019074b08d4625ab9e24280071a270e9b8eef/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de019074b08d4625ab9e24280071a270e9b8eef/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=5de019074b08d4625ab9e24280071a270e9b8eef", "patch": "@@ -1,19 +1,7 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n \n use clap::{App, Arg, SubCommand};\n-use clippy_dev::{\n-    gather_all, gen_changelog_lint_list, gen_deprecated, gen_lint_group_list, gen_modules_list, gen_register_lint_list,\n-    replace_region_in_file, Lint, DOCS_LINK,\n-};\n-use std::path::Path;\n-\n-use clippy_dev::{fmt, new_lint, stderr_length_check};\n-\n-#[derive(Clone, Copy, PartialEq)]\n-enum UpdateMode {\n-    Check,\n-    Change,\n-}\n+use clippy_dev::{fmt, new_lint, stderr_length_check, update_lints};\n \n fn main() {\n     let matches = App::new(\"Clippy developer tooling\")\n@@ -107,11 +95,11 @@ fn main() {\n         },\n         (\"update_lints\", Some(matches)) => {\n             if matches.is_present(\"print-only\") {\n-                print_lints();\n+                update_lints::print_lints();\n             } else if matches.is_present(\"check\") {\n-                update_lints(UpdateMode::Check);\n+                update_lints::run(update_lints::UpdateMode::Check);\n             } else {\n-                update_lints(UpdateMode::Change);\n+                update_lints::run(update_lints::UpdateMode::Change);\n             }\n         },\n         (\"new_lint\", Some(matches)) => {\n@@ -120,7 +108,7 @@ fn main() {\n                 matches.value_of(\"name\"),\n                 matches.value_of(\"category\"),\n             ) {\n-                Ok(_) => update_lints(UpdateMode::Change),\n+                Ok(_) => update_lints::run(update_lints::UpdateMode::Change),\n                 Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n             }\n         },\n@@ -130,161 +118,3 @@ fn main() {\n         _ => {},\n     }\n }\n-\n-fn print_lints() {\n-    let lint_list = gather_all();\n-    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list).collect();\n-    let usable_lint_count = usable_lints.len();\n-    let grouped_by_lint_group = Lint::by_lint_group(usable_lints.into_iter());\n-\n-    for (lint_group, mut lints) in grouped_by_lint_group {\n-        if lint_group == \"Deprecated\" {\n-            continue;\n-        }\n-        println!(\"\\n## {}\", lint_group);\n-\n-        lints.sort_by_key(|l| l.name.clone());\n-\n-        for lint in lints {\n-            println!(\n-                \"* [{}]({}#{}) ({})\",\n-                lint.name,\n-                clippy_dev::DOCS_LINK,\n-                lint.name,\n-                lint.desc\n-            );\n-        }\n-    }\n-\n-    println!(\"there are {} lints\", usable_lint_count);\n-}\n-\n-#[allow(clippy::too_many_lines)]\n-fn update_lints(update_mode: UpdateMode) {\n-    let lint_list: Vec<Lint> = gather_all().collect();\n-\n-    let internal_lints = Lint::internal_lints(lint_list.clone().into_iter());\n-\n-    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list.clone().into_iter()).collect();\n-    let usable_lint_count = usable_lints.len();\n-\n-    let mut sorted_usable_lints = usable_lints.clone();\n-    sorted_usable_lints.sort_by_key(|lint| lint.name.clone());\n-\n-    let mut file_change = replace_region_in_file(\n-        Path::new(\"src/lintlist/mod.rs\"),\n-        \"begin lint list\",\n-        \"end lint list\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || {\n-            format!(\n-                \"pub const ALL_LINTS: [Lint; {}] = {:#?};\",\n-                sorted_usable_lints.len(),\n-                sorted_usable_lints\n-            )\n-            .lines()\n-            .map(ToString::to_string)\n-            .collect::<Vec<_>>()\n-        },\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"README.md\"),\n-        &format!(r#\"\\[There are \\d+ lints included in this crate!\\]\\({}\\)\"#, DOCS_LINK),\n-        \"\",\n-        true,\n-        update_mode == UpdateMode::Change,\n-        || {\n-            vec![format!(\n-                \"[There are {} lints included in this crate!]({})\",\n-                usable_lint_count, DOCS_LINK\n-            )]\n-        },\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"CHANGELOG.md\"),\n-        \"<!-- begin autogenerated links to lint list -->\",\n-        \"<!-- end autogenerated links to lint list -->\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_changelog_lint_list(lint_list.clone()),\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        \"begin deprecated lints\",\n-        \"end deprecated lints\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_deprecated(&lint_list),\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        \"begin register lints\",\n-        \"end register lints\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_register_lint_list(&lint_list),\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        \"begin lints modules\",\n-        \"end lints modules\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_modules_list(lint_list.clone()),\n-    )\n-    .changed;\n-\n-    // Generate lists of lints in the clippy::all lint group\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        r#\"store.register_group\\(true, \"clippy::all\"\"#,\n-        r#\"\\]\\);\"#,\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || {\n-            // clippy::all should only include the following lint groups:\n-            let all_group_lints = usable_lints\n-                .clone()\n-                .into_iter()\n-                .filter(|l| {\n-                    l.group == \"correctness\" || l.group == \"style\" || l.group == \"complexity\" || l.group == \"perf\"\n-                })\n-                .collect();\n-\n-            gen_lint_group_list(all_group_lints)\n-        },\n-    )\n-    .changed;\n-\n-    // Generate the list of lints for all other lint groups\n-    for (lint_group, lints) in Lint::by_lint_group(usable_lints.into_iter().chain(internal_lints)) {\n-        file_change |= replace_region_in_file(\n-            Path::new(\"clippy_lints/src/lib.rs\"),\n-            &format!(\"store.register_group\\\\(true, \\\"clippy::{}\\\"\", lint_group),\n-            r#\"\\]\\);\"#,\n-            false,\n-            update_mode == UpdateMode::Change,\n-            || gen_lint_group_list(lints.clone()),\n-        )\n-        .changed;\n-    }\n-\n-    if update_mode == UpdateMode::Check && file_change {\n-        println!(\n-            \"Not all lints defined properly. \\\n-             Please run `cargo dev update_lints` to make sure all lints are defined properly.\"\n-        );\n-        std::process::exit(1);\n-    }\n-}"}, {"sha": "f6fc322431c6455cc3331bbb0762b386010e2394", "filename": "clippy_dev/src/update_lints.rs", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/5de019074b08d4625ab9e24280071a270e9b8eef/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de019074b08d4625ab9e24280071a270e9b8eef/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=5de019074b08d4625ab9e24280071a270e9b8eef", "patch": "@@ -0,0 +1,163 @@\n+use crate::{\n+    gather_all, gen_changelog_lint_list, gen_deprecated, gen_lint_group_list, gen_modules_list, gen_register_lint_list,\n+    replace_region_in_file, Lint, DOCS_LINK,\n+};\n+use std::path::Path;\n+\n+#[derive(Clone, Copy, PartialEq)]\n+pub enum UpdateMode {\n+    Check,\n+    Change,\n+}\n+\n+#[allow(clippy::too_many_lines)]\n+pub fn run(update_mode: UpdateMode) {\n+    let lint_list: Vec<Lint> = gather_all().collect();\n+\n+    let internal_lints = Lint::internal_lints(lint_list.clone().into_iter());\n+\n+    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list.clone().into_iter()).collect();\n+    let usable_lint_count = usable_lints.len();\n+\n+    let mut sorted_usable_lints = usable_lints.clone();\n+    sorted_usable_lints.sort_by_key(|lint| lint.name.clone());\n+\n+    let mut file_change = replace_region_in_file(\n+        Path::new(\"src/lintlist/mod.rs\"),\n+        \"begin lint list\",\n+        \"end lint list\",\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || {\n+            format!(\n+                \"pub const ALL_LINTS: [Lint; {}] = {:#?};\",\n+                sorted_usable_lints.len(),\n+                sorted_usable_lints\n+            )\n+            .lines()\n+            .map(ToString::to_string)\n+            .collect::<Vec<_>>()\n+        },\n+    )\n+    .changed;\n+\n+    file_change |= replace_region_in_file(\n+        Path::new(\"README.md\"),\n+        &format!(r#\"\\[There are \\d+ lints included in this crate!\\]\\({}\\)\"#, DOCS_LINK),\n+        \"\",\n+        true,\n+        update_mode == UpdateMode::Change,\n+        || {\n+            vec![format!(\n+                \"[There are {} lints included in this crate!]({})\",\n+                usable_lint_count, DOCS_LINK\n+            )]\n+        },\n+    )\n+    .changed;\n+\n+    file_change |= replace_region_in_file(\n+        Path::new(\"CHANGELOG.md\"),\n+        \"<!-- begin autogenerated links to lint list -->\",\n+        \"<!-- end autogenerated links to lint list -->\",\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || gen_changelog_lint_list(lint_list.clone()),\n+    )\n+    .changed;\n+\n+    file_change |= replace_region_in_file(\n+        Path::new(\"clippy_lints/src/lib.rs\"),\n+        \"begin deprecated lints\",\n+        \"end deprecated lints\",\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || gen_deprecated(&lint_list),\n+    )\n+    .changed;\n+\n+    file_change |= replace_region_in_file(\n+        Path::new(\"clippy_lints/src/lib.rs\"),\n+        \"begin register lints\",\n+        \"end register lints\",\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || gen_register_lint_list(&lint_list),\n+    )\n+    .changed;\n+\n+    file_change |= replace_region_in_file(\n+        Path::new(\"clippy_lints/src/lib.rs\"),\n+        \"begin lints modules\",\n+        \"end lints modules\",\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || gen_modules_list(lint_list.clone()),\n+    )\n+    .changed;\n+\n+    // Generate lists of lints in the clippy::all lint group\n+    file_change |= replace_region_in_file(\n+        Path::new(\"clippy_lints/src/lib.rs\"),\n+        r#\"store.register_group\\(true, \"clippy::all\"\"#,\n+        r#\"\\]\\);\"#,\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || {\n+            // clippy::all should only include the following lint groups:\n+            let all_group_lints = usable_lints\n+                .clone()\n+                .into_iter()\n+                .filter(|l| {\n+                    l.group == \"correctness\" || l.group == \"style\" || l.group == \"complexity\" || l.group == \"perf\"\n+                })\n+                .collect();\n+\n+            gen_lint_group_list(all_group_lints)\n+        },\n+    )\n+    .changed;\n+\n+    // Generate the list of lints for all other lint groups\n+    for (lint_group, lints) in Lint::by_lint_group(usable_lints.into_iter().chain(internal_lints)) {\n+        file_change |= replace_region_in_file(\n+            Path::new(\"clippy_lints/src/lib.rs\"),\n+            &format!(\"store.register_group\\\\(true, \\\"clippy::{}\\\"\", lint_group),\n+            r#\"\\]\\);\"#,\n+            false,\n+            update_mode == UpdateMode::Change,\n+            || gen_lint_group_list(lints.clone()),\n+        )\n+        .changed;\n+    }\n+\n+    if update_mode == UpdateMode::Check && file_change {\n+        println!(\n+            \"Not all lints defined properly. \\\n+             Please run `cargo dev update_lints` to make sure all lints are defined properly.\"\n+        );\n+        std::process::exit(1);\n+    }\n+}\n+\n+pub fn print_lints() {\n+    let lint_list = gather_all();\n+    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list).collect();\n+    let usable_lint_count = usable_lints.len();\n+    let grouped_by_lint_group = Lint::by_lint_group(usable_lints.into_iter());\n+\n+    for (lint_group, mut lints) in grouped_by_lint_group {\n+        if lint_group == \"Deprecated\" {\n+            continue;\n+        }\n+        println!(\"\\n## {}\", lint_group);\n+\n+        lints.sort_by_key(|l| l.name.clone());\n+\n+        for lint in lints {\n+            println!(\"* [{}]({}#{}) ({})\", lint.name, DOCS_LINK, lint.name, lint.desc);\n+        }\n+    }\n+\n+    println!(\"there are {} lints\", usable_lint_count);\n+}"}]}