{"sha": "e23dd6687f7677a715765bff1fe5e63b906cb96b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyM2RkNjY4N2Y3Njc3YTcxNTc2NWJmZjFmZTVlNjNiOTA2Y2I5NmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-23T00:04:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-23T00:04:33Z"}, "message": "Auto merge of #68474 - tmandry:rollup-6gmbet6, r=tmandry\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #67195 ([experiment] Add `-Z no-link` flag)\n - #68253 (add bare metal ARM Cortex-A targets to rustc)\n - #68361 (Unbreak linking with lld 9 on FreeBSD 13.0-CURRENT i386)\n - #68388 (Make `TooGeneric` error in WF checking a proper error)\n - #68409 (Micro-optimize OutputFilenames)\n - #68410 (Export weak symbols used by MemorySanitizer)\n - #68425 (Fix try-op diagnostic in E0277 for methods)\n - #68440 (bootstrap: update clippy subcmd decription)\n - #68441 (pprust: use as_deref)\n - #68462 (librustc_mir: don't allocate vectors where slices will do.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "7bbb599260f76a958a7365f8e535bd418020253c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bbb599260f76a958a7365f8e535bd418020253c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e23dd6687f7677a715765bff1fe5e63b906cb96b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e23dd6687f7677a715765bff1fe5e63b906cb96b", "html_url": "https://github.com/rust-lang/rust/commit/e23dd6687f7677a715765bff1fe5e63b906cb96b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e23dd6687f7677a715765bff1fe5e63b906cb96b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e594f4029c6ac8feb7c2acf9f9e04c1b9c493c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e594f4029c6ac8feb7c2acf9f9e04c1b9c493c", "html_url": "https://github.com/rust-lang/rust/commit/d1e594f4029c6ac8feb7c2acf9f9e04c1b9c493c"}, {"sha": "bfac73c0a6786644d0a58a12347839d442be26ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfac73c0a6786644d0a58a12347839d442be26ac", "html_url": "https://github.com/rust-lang/rust/commit/bfac73c0a6786644d0a58a12347839d442be26ac"}], "stats": {"total": 497, "additions": 388, "deletions": 109}, "files": [{"sha": "237b3dda670dfb34dbb61b0109c5a8ec3817f1c8", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -3428,6 +3428,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n+ \"serialize\",\n  \"smallvec 1.0.0\",\n  \"syntax\",\n ]"}, {"sha": "2101ef27f9d42c874c0ac770138cedba521bdd39", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -104,7 +104,7 @@ Usage: x.py <subcommand> [options] [<paths>...]\n Subcommands:\n     build       Compile either the compiler or libraries\n     check       Compile either the compiler or libraries, using cargo check\n-    clippy      Run clippy\n+    clippy      Run clippy (uses rustup/cargo-installed clippy binary)\n     fix         Run cargo fix\n     fmt         Run rustfmt\n     test        Build and run some test suites"}, {"sha": "2a68a25be21b3342642d51b6ee7f8494dfbedd6f", "filename": "src/ci/docker/dist-various-1/Dockerfile", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -160,6 +160,7 @@ ENV TARGETS=$TARGETS,armebv7r-none-eabihf\n ENV TARGETS=$TARGETS,armv7r-none-eabi\n ENV TARGETS=$TARGETS,armv7r-none-eabihf\n ENV TARGETS=$TARGETS,thumbv7neon-unknown-linux-gnueabihf\n+ENV TARGETS=$TARGETS,armv7a-none-eabi\n \n # riscv targets currently do not need a C compiler, as compiler_builtins\n # doesn't currently have it enabled, and the riscv gcc compiler is not\n@@ -173,6 +174,10 @@ ENV CC_mipsel_unknown_linux_musl=mipsel-openwrt-linux-gcc \\\n     CC_thumbv7neon_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc \\\n     AR_thumbv7neon_unknown_linux_gnueabihf=arm-linux-gnueabihf-ar \\\n     CXX_thumbv7neon_unknown_linux_gnueabihf=arm-linux-gnueabihf-g++ \\\n+    CC_armv7a_none_eabi=arm-none-eabi-gcc \\\n+    CC_armv7a_none_eabihf=arm-none-eabi-gcc \\\n+    CFLAGS_armv7a_none_eabi=-march=armv7-a \\\n+    CFLAGS_armv7a_none_eabihf=-march=armv7-a+vfpv3 \\\n     CC_riscv64gc_unknown_linux_gnu=riscv64-unknown-linux-gnu-gcc \\\n     AR_riscv64gc_unknown_linux_gnu=riscv64-unknown-linux-gnu-ar \\\n     CXX_riscv64gc_unknown_linux_gnu=riscv64-unknown-linux-gnu-g++ \\"}, {"sha": "0e7ff3a3393efcb35cdfce6488a1ff8f744f79be", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -27,7 +27,7 @@ pub use rustc_session::utils::NativeLibraryKind;\n \n /// Where a crate came from on the local filesystem. One of these three options\n /// must be non-None.\n-#[derive(PartialEq, Clone, Debug, HashStable)]\n+#[derive(PartialEq, Clone, Debug, HashStable, RustcEncodable, RustcDecodable)]\n pub struct CrateSource {\n     pub dylib: Option<(PathBuf, PathKind)>,\n     pub rlib: Option<(PathBuf, PathKind)>,\n@@ -75,7 +75,7 @@ impl DepKind {\n     }\n }\n \n-#[derive(PartialEq, Clone, Debug)]\n+#[derive(PartialEq, Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum LibSource {\n     Some(PathBuf),\n     MetadataOnly,\n@@ -160,6 +160,7 @@ pub enum ExternCrateSource {\n     Path,\n }\n \n+#[derive(RustcEncodable, RustcDecodable)]\n pub struct EncodedMetadata {\n     pub raw_data: Vec<u8>,\n }"}, {"sha": "6ece51fe866745d449ad8af4468ac601c2496483", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -19,7 +19,7 @@ pub type DependencyList = Vec<Linkage>;\n /// This is local to the tcx, and is generally relevant to one session.\n pub type Dependencies = Vec<(config::CrateType, DependencyList)>;\n \n-#[derive(Copy, Clone, PartialEq, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Debug, HashStable, RustcEncodable, RustcDecodable)]\n pub enum Linkage {\n     NotLinked,\n     IncludedFromDylib,"}, {"sha": "cdb50779e00cc5eb92035873cb42b190f8735883", "filename": "src/librustc/traits/error_reporting/mod.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -919,17 +919,29 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 report_object_safety_error(self.tcx, span, did, violations)\n             }\n \n-            // already reported in the query\n-            ConstEvalFailure(err) => {\n-                if let ErrorHandled::TooGeneric = err {\n-                    // Silence this error, as it can be produced during intermediate steps\n-                    // when a constant is not yet able to be evaluated (but will be later).\n-                    return;\n-                }\n-                self.tcx.sess.delay_span_bug(\n-                    span,\n-                    &format!(\"constant in type had an ignored error: {:?}\", err),\n-                );\n+            ConstEvalFailure(ErrorHandled::TooGeneric) => {\n+                // In this instance, we have a const expression containing an unevaluated\n+                // generic parameter. We have no idea whether this expression is valid or\n+                // not (e.g. it might result in an error), but we don't want to just assume\n+                // that it's okay, because that might result in post-monomorphisation time\n+                // errors. The onus is really on the caller to provide values that it can\n+                // prove are well-formed.\n+                let mut err = self\n+                    .tcx\n+                    .sess\n+                    .struct_span_err(span, \"constant expression depends on a generic parameter\");\n+                // FIXME(const_generics): we should suggest to the user how they can resolve this\n+                // issue. However, this is currently not actually possible\n+                // (see https://github.com/rust-lang/rust/issues/66962#issuecomment-575907083).\n+                err.note(\"this may fail depending on what value the parameter takes\");\n+                err\n+            }\n+\n+            // Already reported in the query.\n+            ConstEvalFailure(ErrorHandled::Reported) => {\n+                self.tcx\n+                    .sess\n+                    .delay_span_bug(span, &format!(\"constant in type had an ignored error\"));\n                 return;\n             }\n "}, {"sha": "2ba12baaf6d6e5aac290edba6b61c44ac574b915", "filename": "src/librustc/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -59,31 +59,45 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     fn describe_enclosure(&self, hir_id: hir::HirId) -> Option<&'static str> {\n         let hir = &self.tcx.hir();\n         let node = hir.find(hir_id)?;\n-        if let hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, _, body_id), .. }) = &node {\n-            self.describe_generator(*body_id).or_else(|| {\n+        match &node {\n+            hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, _, body_id), .. }) => {\n+                self.describe_generator(*body_id).or_else(|| {\n+                    Some(if let hir::FnHeader { asyncness: hir::IsAsync::Async, .. } = sig.header {\n+                        \"an async function\"\n+                    } else {\n+                        \"a function\"\n+                    })\n+                })\n+            }\n+            hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body_id)),\n+                ..\n+            }) => self.describe_generator(*body_id).or_else(|| Some(\"a trait method\")),\n+            hir::Node::ImplItem(hir::ImplItem {\n+                kind: hir::ImplItemKind::Method(sig, body_id),\n+                ..\n+            }) => self.describe_generator(*body_id).or_else(|| {\n                 Some(if let hir::FnHeader { asyncness: hir::IsAsync::Async, .. } = sig.header {\n-                    \"an async function\"\n+                    \"an async method\"\n                 } else {\n-                    \"a function\"\n+                    \"a method\"\n                 })\n-            })\n-        } else if let hir::Node::Expr(hir::Expr {\n-            kind: hir::ExprKind::Closure(_is_move, _, body_id, _, gen_movability),\n-            ..\n-        }) = &node\n-        {\n-            self.describe_generator(*body_id).or_else(|| {\n+            }),\n+            hir::Node::Expr(hir::Expr {\n+                kind: hir::ExprKind::Closure(_is_move, _, body_id, _, gen_movability),\n+                ..\n+            }) => self.describe_generator(*body_id).or_else(|| {\n                 Some(if gen_movability.is_some() { \"an async closure\" } else { \"a closure\" })\n-            })\n-        } else if let hir::Node::Expr(hir::Expr { .. }) = &node {\n-            let parent_hid = hir.get_parent_node(hir_id);\n-            if parent_hid != hir_id {\n-                return self.describe_enclosure(parent_hid);\n-            } else {\n-                None\n+            }),\n+            hir::Node::Expr(hir::Expr { .. }) => {\n+                let parent_hid = hir.get_parent_node(hir_id);\n+                if parent_hid != hir_id {\n+                    return self.describe_enclosure(parent_hid);\n+                } else {\n+                    None\n+                }\n             }\n-        } else {\n-            None\n+            _ => None,\n         }\n     }\n "}, {"sha": "dd9eadde098ec8a01b433ed8898b9f8781c69f50", "filename": "src/librustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FCargo.toml?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -28,6 +28,7 @@ rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n rustc_session = { path = \"../librustc_session\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "70e3874035b601953e9ca926736599c29dec39ba", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -33,6 +33,7 @@ use rustc_codegen_ssa::CompiledModule;\n use rustc_errors::{FatalError, Handler};\n use std::any::Any;\n use std::ffi::CStr;\n+use std::fs;\n use std::sync::Arc;\n use syntax::expand::allocator::AllocatorKind;\n \n@@ -44,6 +45,7 @@ use rustc::ty::{self, TyCtxt};\n use rustc::util::common::ErrorReported;\n use rustc_codegen_ssa::ModuleCodegen;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_serialize::json;\n \n mod back {\n     pub mod archive;\n@@ -298,6 +300,18 @@ impl CodegenBackend for LlvmCodegenBackend {\n             return Ok(());\n         }\n \n+        if sess.opts.debugging_opts.no_link {\n+            // FIXME: use a binary format to encode the `.rlink` file\n+            let rlink_data = json::encode(&codegen_results).map_err(|err| {\n+                sess.fatal(&format!(\"failed to encode rlink: {}\", err));\n+            })?;\n+            let rlink_file = outputs.with_extension(\"rlink\");\n+            fs::write(&rlink_file, rlink_data).map_err(|err| {\n+                sess.fatal(&format!(\"failed to write file {}: {}\", rlink_file.display(), err));\n+            })?;\n+            return Ok(());\n+        }\n+\n         // Run the linker on any artifacts that resulted from the LLVM run.\n         // This should produce either a finished executable or library.\n         sess.time(\"link_crate\", || {"}, {"sha": "695f171dfb49cc574b611ae982a206a9fe26c325", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -20,6 +20,7 @@ use rustc_target::spec::{LinkerFlavor, LldFlavor};\n \n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it.\n+#[derive(RustcEncodable, RustcDecodable)]\n pub struct LinkerInfo {\n     exports: FxHashMap<CrateType, Vec<String>>,\n }"}, {"sha": "d680e14bbbd5b9d884d7aa4bf6df547b8bb7d6f3", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n \n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::exported_symbols::{metadata_symbol_name, ExportedSymbol, SymbolExportLevel};\n-use rustc::session::config;\n+use rustc::session::config::{self, Sanitizer};\n use rustc::ty::query::Providers;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::Instance;\n@@ -206,6 +206,16 @@ fn exported_symbols_provider_local(\n         }));\n     }\n \n+    if let Some(Sanitizer::Memory) = tcx.sess.opts.debugging_opts.sanitizer {\n+        // Similar to profiling, preserve weak msan symbol during LTO.\n+        const MSAN_WEAK_SYMBOLS: [&str; 2] = [\"__msan_track_origins\", \"__msan_keep_going\"];\n+\n+        symbols.extend(MSAN_WEAK_SYMBOLS.iter().map(|sym| {\n+            let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(sym));\n+            (exported_symbol, SymbolExportLevel::C)\n+        }));\n+    }\n+\n     if tcx.sess.crate_types.borrow().contains(&config::CrateType::Dylib) {\n         let symbol_name = metadata_symbol_name(tcx);\n         let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(&symbol_name));"}, {"sha": "b69def5428ccf760fab9ed00df66218c260deae8", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -87,7 +87,7 @@ impl<M> ModuleCodegen<M> {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable, RustcDecodable)]\n pub struct CompiledModule {\n     pub name: String,\n     pub kind: ModuleKind,\n@@ -101,7 +101,7 @@ pub struct CachedModuleCodegen {\n     pub source: WorkProduct,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum ModuleKind {\n     Regular,\n     Metadata,\n@@ -117,7 +117,14 @@ bitflags::bitflags! {\n }\n \n /// Misc info we load from metadata to persist beyond the tcx.\n-#[derive(Debug)]\n+///\n+/// Note: though `CrateNum` is only meaningful within the same tcx, information within `CrateInfo`\n+/// is self-contained. `CrateNum` can be viewed as a unique identifier within a `CrateInfo`, where\n+/// `used_crate_source` contains all `CrateSource` of the dependents, and maintains a mapping from\n+/// identifiers (`CrateNum`) to `CrateSource`. The other fields map `CrateNum` to the crate's own\n+/// additional properties, so that effectively we can retrieve each dependent crate's `CrateSource`\n+/// and the corresponding properties without referencing information outside of a `CrateInfo`.\n+#[derive(Debug, RustcEncodable, RustcDecodable)]\n pub struct CrateInfo {\n     pub panic_runtime: Option<CrateNum>,\n     pub compiler_builtins: Option<CrateNum>,\n@@ -135,6 +142,7 @@ pub struct CrateInfo {\n     pub dependency_formats: Lrc<Dependencies>,\n }\n \n+#[derive(RustcEncodable, RustcDecodable)]\n pub struct CodegenResults {\n     pub crate_name: Symbol,\n     pub modules: Vec<CompiledModule>,"}, {"sha": "7ee778ddd8ec79bd9f320df16c37c60601055f6d", "filename": "src/librustc_hir/def_id.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_hir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_hir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdef_id.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -1,7 +1,8 @@\n use rustc_data_structures::AtomicRef;\n use rustc_index::vec::Idx;\n+use rustc_serialize::{Decoder, Encoder};\n use std::fmt;\n-use std::u32;\n+use std::{u32, u64};\n \n rustc_index::newtype_index! {\n     pub struct CrateId {\n@@ -86,8 +87,18 @@ impl fmt::Display for CrateNum {\n     }\n }\n \n-impl rustc_serialize::UseSpecializedEncodable for CrateNum {}\n-impl rustc_serialize::UseSpecializedDecodable for CrateNum {}\n+/// As a local identifier, a `CrateNum` is only meaningful within its context, e.g. within a tcx.\n+/// Therefore, make sure to include the context when encode a `CrateNum`.\n+impl rustc_serialize::UseSpecializedEncodable for CrateNum {\n+    fn default_encode<E: Encoder>(&self, e: &mut E) -> Result<(), E::Error> {\n+        e.emit_u32(self.as_u32())\n+    }\n+}\n+impl rustc_serialize::UseSpecializedDecodable for CrateNum {\n+    fn default_decode<D: Decoder>(d: &mut D) -> Result<CrateNum, D::Error> {\n+        Ok(CrateNum::from_u32(d.read_u32()?))\n+    }\n+}\n \n rustc_index::newtype_index! {\n     /// A DefIndex is an index into the hir-map for a crate, identifying a\n@@ -135,8 +146,21 @@ impl DefId {\n     }\n }\n \n-impl rustc_serialize::UseSpecializedEncodable for DefId {}\n-impl rustc_serialize::UseSpecializedDecodable for DefId {}\n+impl rustc_serialize::UseSpecializedEncodable for DefId {\n+    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        let krate = u64::from(self.krate.as_u32());\n+        let index = u64::from(self.index.as_u32());\n+        s.emit_u64((krate << 32) | index)\n+    }\n+}\n+impl rustc_serialize::UseSpecializedDecodable for DefId {\n+    fn default_decode<D: Decoder>(d: &mut D) -> Result<DefId, D::Error> {\n+        let def_id = d.read_u64()?;\n+        let krate = CrateNum::from_u32((def_id >> 32) as u32);\n+        let index = DefIndex::from_u32((def_id & 0xffffffff) as u32);\n+        Ok(DefId { krate, index })\n+    }\n+}\n \n pub fn default_def_id_debug(def_id: DefId, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     f.debug_struct(\"DefId\").field(\"krate\", &def_id.krate).field(\"index\", &def_id.index).finish()"}, {"sha": "3e65da9c47b7e8c6454984434bc4aa36b922e296", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -550,13 +550,13 @@ pub fn build_output_filenames(\n                 .or_else(|| attr::find_crate_name(attrs).map(|n| n.to_string()))\n                 .unwrap_or_else(|| input.filestem().to_owned());\n \n-            OutputFilenames {\n-                out_directory: dirpath,\n-                out_filestem: stem,\n-                single_output_file: None,\n-                extra: sess.opts.cg.extra_filename.clone(),\n-                outputs: sess.opts.output_types.clone(),\n-            }\n+            OutputFilenames::new(\n+                dirpath,\n+                stem,\n+                None,\n+                sess.opts.cg.extra_filename.clone(),\n+                sess.opts.output_types.clone(),\n+            )\n         }\n \n         Some(ref out_file) => {\n@@ -578,18 +578,13 @@ pub fn build_output_filenames(\n                 sess.warn(\"ignoring --out-dir flag due to -o flag\");\n             }\n \n-            OutputFilenames {\n-                out_directory: out_file.parent().unwrap_or_else(|| Path::new(\"\")).to_path_buf(),\n-                out_filestem: out_file\n-                    .file_stem()\n-                    .unwrap_or_default()\n-                    .to_str()\n-                    .unwrap()\n-                    .to_string(),\n-                single_output_file: ofile,\n-                extra: sess.opts.cg.extra_filename.clone(),\n-                outputs: sess.opts.output_types.clone(),\n-            }\n+            OutputFilenames::new(\n+                out_file.parent().unwrap_or_else(|| Path::new(\"\")).to_path_buf(),\n+                out_file.file_stem().unwrap_or_default().to_str().unwrap().to_string(),\n+                ofile,\n+                sess.opts.cg.extra_filename.clone(),\n+                sess.opts.output_types.clone(),\n+            )\n         }\n     }\n }"}, {"sha": "8ac7772ea481813526a50aa947be7f28fca49b55", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -117,7 +117,7 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor<'tcx> {\n                 place,\n                 Place {\n                     local: self_arg(),\n-                    projection: self.tcx().intern_place_elems(&vec![ProjectionElem::Deref]),\n+                    projection: self.tcx().intern_place_elems(&[ProjectionElem::Deref]),\n                 },\n                 self.tcx,\n             );\n@@ -153,7 +153,7 @@ impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n                 place,\n                 Place {\n                     local: self_arg(),\n-                    projection: self.tcx().intern_place_elems(&vec![ProjectionElem::Field(\n+                    projection: self.tcx().intern_place_elems(&[ProjectionElem::Field(\n                         Field::new(0),\n                         self.ref_gen_ty,\n                     )]),"}, {"sha": "afe42e6357128d27d4a9ec972d220b4a51a47ea6", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -51,7 +51,7 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n             let new_place = match rvalue {\n                 Rvalue::Ref(_, _, place) => {\n                     if let &[ref proj_l @ .., proj_r] = place.projection.as_ref() {\n-                        place.projection = self.tcx().intern_place_elems(&vec![proj_r.clone()]);\n+                        place.projection = self.tcx().intern_place_elems(&[proj_r.clone()]);\n \n                         Place {\n                             // Replace with dummy"}, {"sha": "aa492b566e59e2e2ee82fa9f003fe5b8e4275f6c", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -447,9 +447,8 @@ impl Input {\n #[derive(Clone, Hash)]\n pub struct OutputFilenames {\n     pub out_directory: PathBuf,\n-    pub out_filestem: String,\n+    filestem: String,\n     pub single_output_file: Option<PathBuf>,\n-    pub extra: String,\n     pub outputs: OutputTypes,\n }\n \n@@ -458,6 +457,21 @@ impl_stable_hash_via_hash!(OutputFilenames);\n pub const RUST_CGU_EXT: &str = \"rcgu\";\n \n impl OutputFilenames {\n+    pub fn new(\n+        out_directory: PathBuf,\n+        out_filestem: String,\n+        single_output_file: Option<PathBuf>,\n+        extra: String,\n+        outputs: OutputTypes,\n+    ) -> Self {\n+        OutputFilenames {\n+            out_directory,\n+            single_output_file,\n+            outputs,\n+            filestem: format!(\"{}{}\", out_filestem, extra),\n+        }\n+    }\n+\n     pub fn path(&self, flavor: OutputType) -> PathBuf {\n         self.outputs\n             .get(&flavor)\n@@ -477,8 +491,6 @@ impl OutputFilenames {\n     /// Like temp_path, but also supports things where there is no corresponding\n     /// OutputType, like noopt-bitcode or lto-bitcode.\n     pub fn temp_path_ext(&self, ext: &str, codegen_unit_name: Option<&str>) -> PathBuf {\n-        let base = self.out_directory.join(&self.filestem());\n-\n         let mut extension = String::new();\n \n         if let Some(codegen_unit_name) = codegen_unit_name {\n@@ -495,16 +507,13 @@ impl OutputFilenames {\n             extension.push_str(ext);\n         }\n \n-        let path = base.with_extension(&extension[..]);\n-        path\n+        self.with_extension(&extension)\n     }\n \n     pub fn with_extension(&self, extension: &str) -> PathBuf {\n-        self.out_directory.join(&self.filestem()).with_extension(extension)\n-    }\n-\n-    pub fn filestem(&self) -> String {\n-        format!(\"{}{}\", self.out_filestem, self.extra)\n+        let mut path = self.out_directory.join(&self.filestem);\n+        path.set_extension(extension);\n+        path\n     }\n }\n \n@@ -619,7 +628,7 @@ pub enum EntryFnType {\n \n impl_stable_hash_via_hash!(EntryFnType);\n \n-#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug)]\n+#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum CrateType {\n     Executable,\n     Dylib,"}, {"sha": "34da2188a51d2cbf366359d21e69d2c29ffc5f6b", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -950,4 +950,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n          (such as entering an empty infinite loop) by inserting llvm.sideeffect\"),\n     deduplicate_diagnostics: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n         \"deduplicate identical diagnostics\"),\n+    no_link: bool = (false, parse_bool, [TRACKED],\n+        \"compile without linking\"),\n }"}, {"sha": "06f408b4a8d64f8def249268172040bd2565e087", "filename": "src/librustc_session/search_paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_session%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_session%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsearch_paths.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -9,7 +9,7 @@ pub struct SearchPath {\n     pub files: Vec<PathBuf>,\n }\n \n-#[derive(PartialEq, Clone, Copy, Debug, Hash, Eq)]\n+#[derive(PartialEq, Clone, Copy, Debug, Hash, Eq, RustcEncodable, RustcDecodable)]\n pub enum PathKind {\n     Native,\n     Crate,"}, {"sha": "2fbef154f814c19046a8999be1bd6a33dde6ce63", "filename": "src/librustc_target/spec/armv7a_none_eabi.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabi.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -0,0 +1,48 @@\n+// Generic ARMv7-A target for bare-metal code - floating point disabled\n+//\n+// This is basically the `armv7-unknown-linux-gnueabi` target with some changes\n+// (listed below) to bring it closer to the bare-metal `thumb` & `aarch64`\n+// targets:\n+//\n+// - `TargetOptions.features`: added `+strict-align`. rationale: unaligned\n+// memory access is disabled on boot on these cores\n+// - linker changed to LLD. rationale: C is not strictly needed to build\n+// bare-metal binaries (the `gcc` linker has the advantage that it knows where C\n+// libraries and crt*.o are but it's not much of an advantage here); LLD is also\n+// faster\n+// - `target_os` set to `none`. rationale: matches `thumb` targets\n+// - `target_{env,vendor}` set to an empty string. rationale: matches `thumb`\n+// targets\n+// - `panic_strategy` set to `abort`. rationale: matches `thumb` targets\n+// - `relocation-model` set to `static`; also no PIE, no relro and no dynamic\n+// linking. rationale: matches `thumb` targets\n+\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n+\n+pub fn target() -> Result<Target, String> {\n+    let opts = TargetOptions {\n+        linker: Some(\"rust-lld\".to_owned()),\n+        features: \"+v7,+thumb2,+soft-float,-neon,+strict-align\".to_string(),\n+        executables: true,\n+        relocation_model: \"static\".to_string(),\n+        disable_redzone: true,\n+        max_atomic_width: Some(64),\n+        panic_strategy: PanicStrategy::Abort,\n+        abi_blacklist: super::arm_base::abi_blacklist(),\n+        emit_debug_gdb_scripts: false,\n+        ..Default::default()\n+    };\n+    Ok(Target {\n+        llvm_target: \"armv7a-none-eabi\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+        options: opts,\n+    })\n+}"}, {"sha": "f31e68c5bd12a51f05e173ead51c590706df5d0b", "filename": "src/librustc_target/spec/armv7a_none_eabihf.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabihf.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -0,0 +1,36 @@\n+// Generic ARMv7-A target for bare-metal code - floating point enabled (assumes\n+// FPU is present and emits FPU instructions)\n+//\n+// This is basically the `armv7-unknown-linux-gnueabihf` target with some\n+// changes (list in `armv7a_none_eabi.rs`) to bring it closer to the bare-metal\n+// `thumb` & `aarch64` targets.\n+\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n+\n+pub fn target() -> Result<Target, String> {\n+    let opts = TargetOptions {\n+        linker: Some(\"rust-lld\".to_owned()),\n+        features: \"+v7,+vfp3,-d32,+thumb2,-neon,+strict-align\".to_string(),\n+        executables: true,\n+        relocation_model: \"static\".to_string(),\n+        disable_redzone: true,\n+        max_atomic_width: Some(64),\n+        panic_strategy: PanicStrategy::Abort,\n+        abi_blacklist: super::arm_base::abi_blacklist(),\n+        emit_debug_gdb_scripts: false,\n+        ..Default::default()\n+    };\n+    Ok(Target {\n+        llvm_target: \"armv7a-none-eabihf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+        options: opts,\n+    })\n+}"}, {"sha": "60f2188514e1b8bb32c18594a85d0c785aa40957", "filename": "src/librustc_target/spec/i686_unknown_freebsd.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_target%2Fspec%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_target%2Fspec%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_freebsd.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -4,7 +4,9 @@ pub fn target() -> TargetResult {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    let pre_link_args = base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n+    pre_link_args.push(\"-m32\".to_string());\n+    pre_link_args.push(\"-Wl,-znotext\".to_string());\n     base.stack_probes = true;\n \n     Ok(Target {"}, {"sha": "67f45d3d230ef481c6d5ffa795a6673209833560", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -472,6 +472,9 @@ supported_targets! {\n     (\"thumbv8m.main-none-eabi\", thumbv8m_main_none_eabi),\n     (\"thumbv8m.main-none-eabihf\", thumbv8m_main_none_eabihf),\n \n+    (\"armv7a-none-eabi\", armv7a_none_eabi),\n+    (\"armv7a-none-eabihf\", armv7a_none_eabihf),\n+\n     (\"msp430-none-elf\", msp430_none_elf),\n \n     (\"aarch64-unknown-cloudabi\", aarch64_unknown_cloudabi),"}, {"sha": "f0ef33e2f622d0f96ee7e5807ebe07f80490d441", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -1645,7 +1645,7 @@ impl<'a> State<'a> {\n                     self.print_expr_as_cond(i);\n                     self.s.space();\n                     self.print_block(then);\n-                    self.print_else(e.as_ref().map(|e| &**e))\n+                    self.print_else(e.as_deref())\n                 }\n                 // Final `else` block.\n                 ast::ExprKind::Block(ref b, _) => {\n@@ -1949,7 +1949,7 @@ impl<'a> State<'a> {\n                 self.print_let(pat, scrutinee);\n             }\n             ast::ExprKind::If(ref test, ref blk, ref elseopt) => {\n-                self.print_if(test, blk, elseopt.as_ref().map(|e| &**e));\n+                self.print_if(test, blk, elseopt.as_deref())\n             }\n             ast::ExprKind::While(ref test, ref blk, opt_label) => {\n                 if let Some(label) = opt_label {"}, {"sha": "1fd496b35dfcce3d651e6a01ec3c6ab3472ae0a2", "filename": "src/test/codegen/sanitizer-memory-track-orgins.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Ftest%2Fcodegen%2Fsanitizer-memory-track-orgins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Ftest%2Fcodegen%2Fsanitizer-memory-track-orgins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-memory-track-orgins.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -4,17 +4,21 @@\n // needs-sanitizer-support\n // only-linux\n // only-x86_64\n-// revisions:MSAN-0 MSAN-1 MSAN-2\n+// revisions:MSAN-0 MSAN-1 MSAN-2 MSAN-1-LTO MSAN-2-LTO\n //\n //[MSAN-0] compile-flags: -Zsanitizer=memory\n //[MSAN-1] compile-flags: -Zsanitizer=memory -Zsanitizer-memory-track-origins=1\n //[MSAN-2] compile-flags: -Zsanitizer=memory -Zsanitizer-memory-track-origins\n+//[MSAN-1-LTO] compile-flags: -Zsanitizer=memory -Zsanitizer-memory-track-origins=1 -C lto=fat\n+//[MSAN-2-LTO] compile-flags: -Zsanitizer=memory -Zsanitizer-memory-track-origins -C lto=fat\n \n #![crate_type=\"lib\"]\n \n // MSAN-0-NOT: @__msan_track_origins\n // MSAN-1:     @__msan_track_origins = weak_odr local_unnamed_addr constant i32 1\n // MSAN-2:     @__msan_track_origins = weak_odr local_unnamed_addr constant i32 2\n+// MSAN-1-LTO: @__msan_track_origins = weak_odr local_unnamed_addr constant i32 1\n+// MSAN-2-LTO: @__msan_track_origins = weak_odr local_unnamed_addr constant i32 2\n //\n // MSAN-0-LABEL: define void @copy(\n // MSAN-1-LABEL: define void @copy("}, {"sha": "9a583725b0bf0c42d81e353341a964cacfbcd101", "filename": "src/test/codegen/sanitizer-recover.rs", "status": "modified", "additions": 36, "deletions": 20, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -4,31 +4,47 @@\n // needs-sanitizer-support\n // only-linux\n // only-x86_64\n-// revisions:ASAN ASAN-RECOVER MSAN MSAN-RECOVER\n+// revisions:ASAN ASAN-RECOVER MSAN MSAN-RECOVER MSAN-RECOVER-LTO\n+// no-prefer-dynamic\n //\n-//[ASAN]         compile-flags: -Zsanitizer=address\n-//[ASAN-RECOVER] compile-flags: -Zsanitizer=address -Zsanitizer-recover=address\n-//[MSAN]         compile-flags: -Zsanitizer=memory\n-//[MSAN-RECOVER] compile-flags: -Zsanitizer=memory  -Zsanitizer-recover=memory\n-\n-#![crate_type=\"lib\"]\n+//[ASAN]             compile-flags: -Zsanitizer=address\n+//[ASAN-RECOVER]     compile-flags: -Zsanitizer=address -Zsanitizer-recover=address\n+//[MSAN]             compile-flags: -Zsanitizer=memory\n+//[MSAN-RECOVER]     compile-flags: -Zsanitizer=memory  -Zsanitizer-recover=memory\n+//[MSAN-RECOVER-LTO] compile-flags: -Zsanitizer=memory  -Zsanitizer-recover=memory -C lto=fat\n+//\n+// MSAN-NOT:         @__msan_keep_going\n+// MSAN-RECOVER:     @__msan_keep_going = weak_odr {{.*}} constant i32 1\n+// MSAN-RECOVER-LTO: @__msan_keep_going = weak_odr {{.*}} constant i32 1\n \n-// ASAN-LABEL:         define i32 @penguin(\n+// ASAN-LABEL: define i32 @penguin(\n+// ASAN:         call void @__asan_report_load4(i64 %0)\n+// ASAN:         unreachable\n+// ASAN:       }\n+//\n // ASAN-RECOVER-LABEL: define i32 @penguin(\n-// MSAN-LABEL:         define i32 @penguin(\n+// ASAN-RECOVER:         call void @__asan_report_load4_noabort(\n+// ASAN-RECOVER-NOT:     unreachable\n+// ASAN:               }\n+//\n+// MSAN-LABEL: define i32 @penguin(\n+// MSAN:         call void @__msan_warning_noreturn()\n+// MSAN:         unreachable\n+// MSAN:       }\n+//\n // MSAN-RECOVER-LABEL: define i32 @penguin(\n+// MSAN-RECOVER:         call void @__msan_warning()\n+// MSAN-RECOVER-NOT:     unreachable\n+// MSAN-RECOVER:       }\n+//\n+// MSAN-RECOVER-LTO-LABEL: define i32 @penguin(\n+// MSAN-RECOVER-LTO:          call void @__msan_warning()\n+// MSAN-RECOVER-LTO-NOT:      unreachable\n+// MSAN-RECOVER-LTO:       }\n+//\n #[no_mangle]\n pub fn penguin(p: &mut i32) -> i32 {\n-    // ASAN:             call void @__asan_report_load4(i64 %0)\n-    // ASAN:             unreachable\n-    //\n-    // ASAN-RECOVER:     call void @__asan_report_load4_noabort(\n-    // ASAN-RECOVER-NOT: unreachable\n-    //\n-    // MSAN:             call void @__msan_warning_noreturn()\n-    // MSAN:             unreachable\n-    //\n-    // MSAN-RECOVER:     call void @__msan_warning()\n-    // MSAN-RECOVER-NOT: unreachable\n     *p\n }\n+\n+fn main() {}"}, {"sha": "d996bf56fcc10c443cc524cbe24d8598b672cec8", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -1,18 +1,17 @@\n-// run-pass\n-\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n #[allow(dead_code)]\n-struct ArithArrayLen<const N: usize>([u32; 0 + N]); // ok\n+struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n+//~^ ERROR constant expression depends on a generic parameter\n \n #[derive(PartialEq, Eq)]\n struct Config {\n     arr_size: usize,\n }\n \n struct B<const CFG: Config> {\n-    arr: [u8; CFG.arr_size], // ok\n+    arr: [u8; CFG.arr_size], //~ ERROR constant expression depends on a generic parameter\n }\n \n const C: Config = Config { arr_size: 5 };"}, {"sha": "6ae70c493b1dd3afc4c76c09d783170e234d867f", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -1,8 +1,26 @@\n warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n-  --> $DIR/array-size-in-generic-struct-param.rs:3:12\n+  --> $DIR/array-size-in-generic-struct-param.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n+error: constant expression depends on a generic parameter\n+  --> $DIR/array-size-in-generic-struct-param.rs:5:38\n+   |\n+LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n+   |                                      ^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/array-size-in-generic-struct-param.rs:14:5\n+   |\n+LL |     arr: [u8; CFG.arr_size],\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "63d17414c313bab96f509f4f12ed99b2dbf61a54", "filename": "src/test/ui/try-on-option-diagnostics.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -16,3 +16,32 @@ fn a_closure() -> u32 {\n     };\n     a_closure()\n }\n+\n+fn a_method() -> u32 {\n+    struct S;\n+\n+    impl S {\n+        fn a_method() {\n+            let x: Option<u32> = None;\n+            x?; //~ ERROR the `?` operator\n+        }\n+    }\n+\n+    S::a_method();\n+    22\n+}\n+\n+fn a_trait_method() -> u32 {\n+    struct S;\n+    trait T {\n+        fn a_trait_method() {\n+            let x: Option<u32> = None;\n+            x?; //~ ERROR the `?` operator\n+        }\n+    }\n+\n+    impl T for S { }\n+\n+    S::a_trait_method();\n+    22\n+}"}, {"sha": "c9dc3f1b87969841b90c14d9a5c348fe8f0f7e91", "filename": "src/test/ui/try-on-option-diagnostics.stderr", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.stderr?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -27,6 +27,32 @@ LL | |     };\n    = help: the trait `std::ops::Try` is not implemented for `{integer}`\n    = note: required by `std::ops::Try::from_error`\n \n-error: aborting due to 2 previous errors\n+error[E0277]: the `?` operator can only be used in a method that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n+  --> $DIR/try-on-option-diagnostics.rs:26:13\n+   |\n+LL | /         fn a_method() {\n+LL | |             let x: Option<u32> = None;\n+LL | |             x?;\n+   | |             ^^ cannot use the `?` operator in a method that returns `()`\n+LL | |         }\n+   | |_________- this function should return `Result` or `Option` to accept `?`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `()`\n+   = note: required by `std::ops::Try::from_error`\n+\n+error[E0277]: the `?` operator can only be used in a trait method that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n+  --> $DIR/try-on-option-diagnostics.rs:39:13\n+   |\n+LL | /         fn a_trait_method() {\n+LL | |             let x: Option<u32> = None;\n+LL | |             x?;\n+   | |             ^^ cannot use the `?` operator in a trait method that returns `()`\n+LL | |         }\n+   | |_________- this function should return `Result` or `Option` to accept `?`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `()`\n+   = note: required by `std::ops::Try::from_error`\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "98e9fe7a8b221b47ce53a163f41bcfdc097518db", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23dd6687f7677a715765bff1fe5e63b906cb96b/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=e23dd6687f7677a715765bff1fe5e63b906cb96b", "patch": "@@ -69,6 +69,7 @@ static TARGETS: &[&str] = &[\n     \"thumbv7neon-linux-androideabi\",\n     \"armv7-unknown-linux-gnueabi\",\n     \"armv7-unknown-linux-gnueabihf\",\n+    \"armv7a-none-eabi\",\n     \"thumbv7neon-unknown-linux-gnueabihf\",\n     \"armv7-unknown-linux-musleabi\",\n     \"armv7-unknown-linux-musleabihf\","}]}