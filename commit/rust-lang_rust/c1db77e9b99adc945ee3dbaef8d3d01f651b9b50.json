{"sha": "c1db77e9b99adc945ee3dbaef8d3d01f651b9b50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZGI3N2U5Yjk5YWRjOTQ1ZWUzZGJhZWY4ZDNkMDFmNjUxYjliNTA=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-11-23T22:02:30Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-11-24T15:55:46Z"}, "message": "core: Convert utility macros for the slice iterator into a trait\n\nUse an extension trait for the slice iterator's pointer manipulations.", "tree": {"sha": "71f67fa76d7071c8a69eca5642be3320976d017d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71f67fa76d7071c8a69eca5642be3320976d017d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1db77e9b99adc945ee3dbaef8d3d01f651b9b50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1db77e9b99adc945ee3dbaef8d3d01f651b9b50", "html_url": "https://github.com/rust-lang/rust/commit/c1db77e9b99adc945ee3dbaef8d3d01f651b9b50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1db77e9b99adc945ee3dbaef8d3d01f651b9b50/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "127a83df6615d09cda6ed9b53f7daba2d78c925d", "url": "https://api.github.com/repos/rust-lang/rust/commits/127a83df6615d09cda6ed9b53f7daba2d78c925d", "html_url": "https://github.com/rust-lang/rust/commit/127a83df6615d09cda6ed9b53f7daba2d78c925d"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "fca4583f049dd08c23ab667a4be8791c5f0f1f0f", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 57, "deletions": 11, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c1db77e9b99adc945ee3dbaef8d3d01f651b9b50/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1db77e9b99adc945ee3dbaef8d3d01f651b9b50/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=c1db77e9b99adc945ee3dbaef8d3d01f651b9b50", "patch": "@@ -161,21 +161,35 @@ macro_rules! slice_offset {\n     ($ptr:expr, $by:expr) => {{\n         let ptr = $ptr;\n         if size_from_ptr(ptr) == 0 {\n-            ::intrinsics::arith_offset(ptr as *mut i8, $by) as *mut _\n+            (ptr as *mut i8).wrapping_offset($by) as _\n         } else {\n             ptr.offset($by)\n         }\n     }};\n }\n \n-macro_rules! slice_ref {\n+// make a &T from a *const T\n+macro_rules! make_ref {\n+    ($ptr:expr) => {{\n+        let ptr = $ptr;\n+        if size_from_ptr(ptr) == 0 {\n+            // Use a non-null pointer value\n+            &*(1 as *mut _)\n+        } else {\n+            &*ptr\n+        }\n+    }};\n+}\n+\n+// make a &mut T from a *mut T\n+macro_rules! make_ref_mut {\n     ($ptr:expr) => {{\n         let ptr = $ptr;\n         if size_from_ptr(ptr) == 0 {\n             // Use a non-null pointer value\n             &mut *(1 as *mut _)\n         } else {\n-            mem::transmute(ptr)\n+            &mut *ptr\n         }\n     }};\n }\n@@ -796,7 +810,7 @@ fn size_from_ptr<T>(_: *const T) -> usize {\n \n // The shared definition of the `Iter` and `IterMut` iterators\n macro_rules! iterator {\n-    (struct $name:ident -> $ptr:ty, $elem:ty) => {\n+    (struct $name:ident -> $ptr:ty, $elem:ty, $mkref:ident) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<'a, T> Iterator for $name<'a, T> {\n             type Item = $elem;\n@@ -812,9 +826,7 @@ macro_rules! iterator {\n                     if self.ptr == self.end {\n                         None\n                     } else {\n-                        let old = self.ptr;\n-                        self.ptr = slice_offset!(self.ptr, 1);\n-                        Some(slice_ref!(old))\n+                        Some($mkref!(self.ptr.post_inc()))\n                     }\n                 }\n             }\n@@ -857,8 +869,7 @@ macro_rules! iterator {\n                     if self.end == self.ptr {\n                         None\n                     } else {\n-                        self.end = slice_offset!(self.end, -1);\n-                        Some(slice_ref!(self.end))\n+                        Some($mkref!(self.end.pre_dec()))\n                     }\n                 }\n             }\n@@ -980,7 +991,7 @@ impl<'a, T> Iter<'a, T> {\n     }\n }\n \n-iterator!{struct Iter -> *const T, &'a T}\n+iterator!{struct Iter -> *const T, &'a T, make_ref}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n@@ -1104,7 +1115,7 @@ impl<'a, T> IterMut<'a, T> {\n     }\n }\n \n-iterator!{struct IterMut -> *mut T, &'a mut T}\n+iterator!{struct IterMut -> *mut T, &'a mut T, make_ref_mut}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n@@ -1115,6 +1126,41 @@ impl<'a, T> FusedIterator for IterMut<'a, T> {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<'a, T> TrustedLen for IterMut<'a, T> {}\n \n+\n+// Extension methods for raw pointers, used by the iterators\n+trait PointerExt : Copy {\n+    unsafe fn slice_offset(self, i: isize) -> Self;\n+\n+    /// Increment self by 1, but return the old value\n+    #[inline(always)]\n+    unsafe fn post_inc(&mut self) -> Self {\n+        let current = *self;\n+        *self = self.slice_offset(1);\n+        current\n+    }\n+\n+    /// Decrement self by 1, and return the new value\n+    #[inline(always)]\n+    unsafe fn pre_dec(&mut self) -> Self {\n+        *self = self.slice_offset(-1);\n+        *self\n+    }\n+}\n+\n+impl<T> PointerExt for *const T {\n+    #[inline(always)]\n+    unsafe fn slice_offset(self, i: isize) -> Self {\n+        slice_offset!(self, i)\n+    }\n+}\n+\n+impl<T> PointerExt for *mut T {\n+    #[inline(always)]\n+    unsafe fn slice_offset(self, i: isize) -> Self {\n+        slice_offset!(self, i)\n+    }\n+}\n+\n /// An internal abstraction over the splitting iterators, so that\n /// splitn, splitn_mut etc can be implemented once.\n #[doc(hidden)]"}]}