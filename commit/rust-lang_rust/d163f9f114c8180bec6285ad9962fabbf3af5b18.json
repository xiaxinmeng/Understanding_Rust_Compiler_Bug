{"sha": "d163f9f114c8180bec6285ad9962fabbf3af5b18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNjNmOWYxMTRjODE4MGJlYzYyODVhZDk5NjJmYWJiZjNhZjViMTg=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-04T10:33:07Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-09T22:42:20Z"}, "message": "Small refactoring", "tree": {"sha": "b88940186b9539465a70ea20503cf969b645cc04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b88940186b9539465a70ea20503cf969b645cc04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d163f9f114c8180bec6285ad9962fabbf3af5b18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d163f9f114c8180bec6285ad9962fabbf3af5b18", "html_url": "https://github.com/rust-lang/rust/commit/d163f9f114c8180bec6285ad9962fabbf3af5b18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d163f9f114c8180bec6285ad9962fabbf3af5b18/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aa740dab46f138cacdf6391d46c87d6df810161", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa740dab46f138cacdf6391d46c87d6df810161", "html_url": "https://github.com/rust-lang/rust/commit/8aa740dab46f138cacdf6391d46c87d6df810161"}], "stats": {"total": 58, "additions": 26, "deletions": 32}, "files": [{"sha": "55ef9fc24d3d303414974c3461c1f0d6a3aeb700", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d163f9f114c8180bec6285ad9962fabbf3af5b18/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d163f9f114c8180bec6285ad9962fabbf3af5b18/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=d163f9f114c8180bec6285ad9962fabbf3af5b18", "patch": "@@ -167,29 +167,23 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n     }\n \n     fn possible_sudmobule_names(&self, module_file: FileId) -> Vec<String> {\n-        fn possible_sudmobules_opt(\n-            module_files: &FileSet,\n-            module_file: FileId,\n-        ) -> Option<Vec<FileId>> {\n-            match module_files.file_name_and_extension(module_file)? {\n-                (\"mod\", Some(\"rs\")) | (\"lib\", Some(\"rs\")) => {\n-                    module_files.list_files(module_file, None)\n-                }\n-                (directory_with_module_name, Some(\"rs\")) => module_files\n-                    .list_files(module_file, Some(&format!(\"../{}/\", directory_with_module_name))),\n-                _ => None,\n-            }\n-        }\n-\n         let module_files = &self.source_root(module_file).file_set;\n-        possible_sudmobules_opt(module_files, module_file)\n-            .unwrap_or_default()\n+        let possible_submodule_files = match module_files.file_name_and_extension(module_file) {\n+            Some((\"mod\", Some(\"rs\"))) | Some((\"lib\", Some(\"rs\"))) => {\n+                module_files.list_files_with_extensions(module_file, None)\n+            }\n+            Some((directory_with_module_name, Some(\"rs\"))) => module_files\n+                .list_files_with_extensions(\n+                    module_file,\n+                    Some(&format!(\"../{}/\", directory_with_module_name)),\n+                ),\n+            _ => Vec::new(),\n+        };\n+\n+        possible_submodule_files\n             .into_iter()\n-            .filter_map(|submodule_file| module_files.file_name_and_extension(submodule_file))\n-            .map(|(file_name, extension)| match extension {\n-                Some(extension) => format!(\"{}.{}\", file_name, extension),\n-                None => file_name.to_owned(),\n-            })\n+            .filter(|(_, extension)| extension == &Some(\"rs\"))\n+            .map(|(file_name, _)| file_name.to_owned())\n             .collect()\n     }\n }"}, {"sha": "3085fd8189622c1a5f63d236d52affd9d7580fab", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d163f9f114c8180bec6285ad9962fabbf3af5b18/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d163f9f114c8180bec6285ad9962fabbf3af5b18/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=d163f9f114c8180bec6285ad9962fabbf3af5b18", "patch": "@@ -30,33 +30,33 @@ impl FileSet {\n         self.paths[&file].file_name_and_extension()\n     }\n \n-    pub fn list_files(\n+    pub fn list_files_with_extensions(\n         &self,\n         anchor: FileId,\n         anchor_relative_path: Option<&str>,\n-    ) -> Option<Vec<FileId>> {\n+    ) -> Vec<(&str, Option<&str>)> {\n         let anchor_directory = {\n             let path = self.paths[&anchor].clone();\n             match anchor_relative_path {\n                 Some(anchor_relative_path) => path.join(anchor_relative_path),\n                 None => path.parent(),\n             }\n-        }?;\n+        };\n \n-        Some(\n+        if let Some(anchor_directory) = anchor_directory {\n             self.paths\n                 .iter()\n-                .filter_map(|(&file_id, path)| {\n-                    if path.parent()? == anchor_directory\n-                        && matches!(path.file_name_and_extension(), Some((_, Some(\"rs\"))))\n-                    {\n-                        Some(file_id)\n+                .filter_map(|(_, path)| {\n+                    if path.parent()? == anchor_directory {\n+                        path.file_name_and_extension()\n                     } else {\n                         None\n                     }\n                 })\n-                .collect(),\n-        )\n+                .collect()\n+        } else {\n+            Vec::new()\n+        }\n     }\n     pub fn insert(&mut self, file_id: FileId, path: VfsPath) {\n         self.files.insert(path.clone(), file_id);"}]}