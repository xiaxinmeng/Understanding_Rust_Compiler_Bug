{"sha": "6241cf9a598b19cbd6c8c41c3743f8d56adafd2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNDFjZjlhNTk4YjE5Y2JkNmM4YzQxYzM3NDNmOGQ1NmFkYWZkMmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T18:55:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T19:22:32Z"}, "message": "Add HasResolver trait", "tree": {"sha": "632e060e2db216d2e9bed0414a37578a35ee4a61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/632e060e2db216d2e9bed0414a37578a35ee4a61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b", "html_url": "https://github.com/rust-lang/rust/commit/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3", "html_url": "https://github.com/rust-lang/rust/commit/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3"}], "stats": {"total": 279, "additions": 145, "deletions": 134}, "files": [{"sha": "c5539e0764ad9fbc97c55db52886dd6f0ea702a5", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 104, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=6241cf9a598b19cbd6c8c41c3743f8d56adafd2b", "patch": "@@ -30,7 +30,7 @@ use crate::{\n         AstItemDef, ConstId, EnumId, FunctionId, MacroDefId, StaticId, StructId, TraitId,\n         TypeAliasId,\n     },\n-    resolve::{Resolver, Scope, TypeNs},\n+    resolve::{HasResolver, TypeNs},\n     ty::{InferenceResult, Namespace, TraitRef},\n     Either, HasSource, ImportId, Name, ScopeDef, Source, Ty,\n };\n@@ -223,11 +223,6 @@ impl Module {\n         }\n     }\n \n-    pub(crate) fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        let def_map = db.crate_def_map(self.id.krate);\n-        Resolver::default().push_module_scope(def_map, self.id.module_id)\n-    }\n-\n     pub fn declarations(self, db: &impl DefDatabase) -> Vec<ModuleDef> {\n         let def_map = db.crate_def_map(self.id.krate);\n         def_map[self.id.module_id].scope.declarations().map(ModuleDef::from).collect()\n@@ -315,15 +310,6 @@ impl Struct {\n         db.type_for_def(self.into(), Namespace::Values)\n     }\n \n-    // FIXME move to a more general type\n-    /// Builds a resolver for type references inside this struct.\n-    pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n-        // take the outer scope...\n-        let r = self.module(db).resolver(db);\n-        // ...and add generic params, if present\n-        r.push_generic_params_scope(db, self.into())\n-    }\n-\n     fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n         db.struct_data(self.id.into()).variant_data.clone()\n     }\n@@ -339,22 +325,13 @@ impl Union {\n         db.struct_data(self.id.into()).name.clone()\n     }\n \n-    pub fn module(self, db: &impl HirDatabase) -> Module {\n+    pub fn module(self, db: &impl DefDatabase) -> Module {\n         Module { id: self.id.0.module(db) }\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Ty {\n         db.type_for_def(self.into(), Namespace::Types)\n     }\n-\n-    // FIXME move to a more general type\n-    /// Builds a resolver for type references inside this union.\n-    pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n-        // take the outer scope...\n-        let r = self.module(db).resolver(db);\n-        // ...and add generic params, if present\n-        r.push_generic_params_scope(db, self.into())\n-    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -394,16 +371,6 @@ impl Enum {\n     pub fn ty(self, db: &impl HirDatabase) -> Ty {\n         db.type_for_def(self.into(), Namespace::Types)\n     }\n-\n-    // FIXME: move to a more general type\n-    /// Builds a resolver for type references inside this struct.\n-    pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n-        // take the outer scope...\n-        let r = self.module(db).resolver(db);\n-        // ...and add generic params, if present\n-        let r = r.push_generic_params_scope(db, self.into());\n-        r.push_scope(Scope::AdtScope(self.into()))\n-    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -475,14 +442,6 @@ impl Adt {\n             .krate(),\n         )\n     }\n-\n-    pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n-        match self {\n-            Adt::Struct(it) => it.resolver(db),\n-            Adt::Union(it) => it.resolver(db),\n-            Adt::Enum(it) => it.resolver(db),\n-        }\n-    }\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n@@ -533,15 +492,6 @@ pub enum DefWithBody {\n impl_froms!(DefWithBody: Function, Const, Static);\n \n impl DefWithBody {\n-    /// Builds a resolver for code inside this item.\n-    pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n-        match self {\n-            DefWithBody::Const(c) => c.resolver(db),\n-            DefWithBody::Function(f) => f.resolver(db),\n-            DefWithBody::Static(s) => s.resolver(db),\n-        }\n-    }\n-\n     pub(crate) fn krate(self, db: &impl HirDatabase) -> Option<Crate> {\n         match self {\n             DefWithBody::Const(c) => c.krate(db),\n@@ -738,15 +688,6 @@ impl Function {\n         }\n     }\n \n-    // FIXME: move to a more general type for 'body-having' items\n-    /// Builds a resolver for code inside this item.\n-    pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n-        // take the outer scope...\n-        let r = self.container(db).map_or_else(|| self.module(db).resolver(db), |c| c.resolver(db));\n-        // ...and add generic params, if present\n-        r.push_generic_params_scope(db, self.into())\n-    }\n-\n     pub fn diagnostics(self, db: &impl HirDatabase, sink: &mut DiagnosticSink) {\n         let infer = self.infer(db);\n         infer.add_diagnostics(db, self, sink);\n@@ -804,17 +745,6 @@ impl Const {\n             ContainerId::ModuleId(_) => None,\n         }\n     }\n-\n-    // FIXME: move to a more general type for 'body-having' items\n-    /// Builds a resolver for code inside this item.\n-    pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n-        // take the outer scope...\n-        let r = self\n-            .impl_block(db)\n-            .map(|ib| ib.resolver(db))\n-            .unwrap_or_else(|| self.module(db).resolver(db));\n-        r\n-    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -874,12 +804,6 @@ impl Static {\n         db.static_data(self)\n     }\n \n-    /// Builds a resolver for code inside this item.\n-    pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n-        // take the outer scope...\n-        self.module(db).resolver(db)\n-    }\n-\n     pub fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n         db.infer(self.into())\n     }\n@@ -975,12 +899,6 @@ impl Trait {\n     pub fn is_auto(self, db: &impl DefDatabase) -> bool {\n         self.trait_data(db).auto\n     }\n-\n-    pub(crate) fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        let r = self.module(db).resolver(db);\n-        // add generic params, if present\n-        r.push_generic_params_scope(db, self.into())\n-    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -1032,17 +950,6 @@ impl TypeAlias {\n     pub fn name(self, db: &impl DefDatabase) -> Name {\n         db.type_alias_data(self).name.clone()\n     }\n-\n-    /// Builds a resolver for the type references in this type alias.\n-    pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n-        // take the outer scope...\n-        let r = self\n-            .impl_block(db)\n-            .map(|ib| ib.resolver(db))\n-            .unwrap_or_else(|| self.module(db).resolver(db));\n-        // ...and add generic params, if present\n-        r.push_generic_params_scope(db, self.into())\n-    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -1058,15 +965,6 @@ pub enum Container {\n }\n impl_froms!(Container: Trait, ImplBlock);\n \n-impl Container {\n-    pub(crate) fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        match self {\n-            Container::Trait(trait_) => trait_.resolver(db),\n-            Container::ImplBlock(impl_block) => impl_block.resolver(db),\n-        }\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub enum AssocItem {\n     Function(Function),"}, {"sha": "869879bdfa44e052858635883a35e01422feb95a", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=6241cf9a598b19cbd6c8c41c3743f8d56adafd2b", "patch": "@@ -11,6 +11,7 @@ use rustc_hash::FxHashSet;\n use crate::{\n     db::HirDatabase,\n     diagnostics::{MissingFields, MissingOkInTailExpr},\n+    resolve::HasResolver,\n     ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n     Adt, DefWithBody, Function, HasBody, Name, Path, Resolver,\n };"}, {"sha": "f1bf2ee9d19b823ad677142e48366324e5bc6599", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=6241cf9a598b19cbd6c8c41c3743f8d56adafd2b", "patch": "@@ -2,8 +2,8 @@\n use std::sync::Arc;\n \n use crate::{\n-    db::{DefDatabase, HirDatabase},\n-    Adt, Const, Container, Enum, EnumVariant, Function, ImplBlock, Struct, Trait, TypeAlias, Union,\n+    db::DefDatabase, Adt, Const, Container, Enum, EnumVariant, Function, ImplBlock, Struct, Trait,\n+    TypeAlias, Union,\n };\n \n pub use hir_def::generics::{GenericParam, GenericParams, WherePredicate};\n@@ -31,20 +31,6 @@ impl_froms!(\n     Const\n );\n \n-impl GenericDef {\n-    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> crate::Resolver {\n-        match self {\n-            GenericDef::Function(inner) => inner.resolver(db),\n-            GenericDef::Adt(adt) => adt.resolver(db),\n-            GenericDef::Trait(inner) => inner.resolver(db),\n-            GenericDef::TypeAlias(inner) => inner.resolver(db),\n-            GenericDef::ImplBlock(inner) => inner.resolver(db),\n-            GenericDef::EnumVariant(inner) => inner.parent_enum(db).resolver(db),\n-            GenericDef::Const(inner) => inner.resolver(db),\n-        }\n-    }\n-}\n-\n impl From<Container> for GenericDef {\n     fn from(c: Container) -> Self {\n         match c {"}, {"sha": "964a3da8c0810ccd30e18bd6c03fed563f81c205", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=6241cf9a598b19cbd6c8c41c3743f8d56adafd2b", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::ast::{self};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    resolve::Resolver,\n+    resolve::HasResolver,\n     ty::Ty,\n     AssocItem, Crate, HasSource, ImplBlock, Module, Source, TraitRef,\n };\n@@ -50,12 +50,4 @@ impl ImplBlock {\n     pub fn krate(&self, db: &impl DefDatabase) -> Crate {\n         Crate { crate_id: self.module(db).id.krate }\n     }\n-\n-    pub(crate) fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        let r = self.module(db).resolver(db);\n-        // add generic params, if present\n-        let r = r.push_generic_params_scope(db, self.into());\n-        let r = r.push_impl_block_scope(self);\n-        r\n-    }\n }"}, {"sha": "b8e1b4dad737d399716af93c2d4500fe23c6d5e5", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 129, "deletions": 2, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=6241cf9a598b19cbd6c8c41c3743f8d56adafd2b", "patch": "@@ -15,8 +15,8 @@ use crate::{\n     db::{DefDatabase, HirDatabase},\n     expr::{ExprScopes, PatId, ScopeId},\n     generics::{GenericParams, HasGenericParams},\n-    Adt, Const, DefWithBody, Enum, EnumVariant, Function, GenericDef, ImplBlock, Local, MacroDef,\n-    ModuleDef, PerNs, Static, Struct, Trait, TypeAlias,\n+    Adt, Const, Container, DefWithBody, Enum, EnumVariant, Function, GenericDef, ImplBlock, Local,\n+    MacroDef, Module, ModuleDef, PerNs, Static, Struct, Trait, TypeAlias, Union,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -486,3 +486,130 @@ impl Scope {\n         }\n     }\n }\n+\n+pub(crate) trait HasResolver {\n+    /// Builds a resolver for type references inside this def.\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver;\n+}\n+\n+impl HasResolver for Module {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+        let def_map = db.crate_def_map(self.id.krate);\n+        Resolver::default().push_module_scope(def_map, self.id.module_id)\n+    }\n+}\n+\n+impl HasResolver for Trait {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+        self.module(db).resolver(db).push_generic_params_scope(db, self.into())\n+    }\n+}\n+\n+impl HasResolver for Struct {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+        self.module(db)\n+            .resolver(db)\n+            .push_generic_params_scope(db, self.into())\n+            .push_scope(Scope::AdtScope(self.into()))\n+    }\n+}\n+\n+impl HasResolver for Union {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+        self.module(db)\n+            .resolver(db)\n+            .push_generic_params_scope(db, self.into())\n+            .push_scope(Scope::AdtScope(self.into()))\n+    }\n+}\n+\n+impl HasResolver for Enum {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+        self.module(db)\n+            .resolver(db)\n+            .push_generic_params_scope(db, self.into())\n+            .push_scope(Scope::AdtScope(self.into()))\n+    }\n+}\n+\n+impl HasResolver for Adt {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+        match self {\n+            Adt::Struct(it) => it.resolver(db),\n+            Adt::Union(it) => it.resolver(db),\n+            Adt::Enum(it) => it.resolver(db),\n+        }\n+    }\n+}\n+\n+impl HasResolver for Function {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+        self.container(db)\n+            .map(|c| c.resolver(db))\n+            .unwrap_or_else(|| self.module(db).resolver(db))\n+            .push_generic_params_scope(db, self.into())\n+    }\n+}\n+\n+impl HasResolver for DefWithBody {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+        match self {\n+            DefWithBody::Const(c) => c.resolver(db),\n+            DefWithBody::Function(f) => f.resolver(db),\n+            DefWithBody::Static(s) => s.resolver(db),\n+        }\n+    }\n+}\n+\n+impl HasResolver for Const {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+        self.container(db).map(|c| c.resolver(db)).unwrap_or_else(|| self.module(db).resolver(db))\n+    }\n+}\n+\n+impl HasResolver for Static {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+        self.module(db).resolver(db)\n+    }\n+}\n+\n+impl HasResolver for TypeAlias {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+        self.container(db)\n+            .map(|ib| ib.resolver(db))\n+            .unwrap_or_else(|| self.module(db).resolver(db))\n+            .push_generic_params_scope(db, self.into())\n+    }\n+}\n+\n+impl HasResolver for Container {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+        match self {\n+            Container::Trait(trait_) => trait_.resolver(db),\n+            Container::ImplBlock(impl_block) => impl_block.resolver(db),\n+        }\n+    }\n+}\n+\n+impl HasResolver for GenericDef {\n+    fn resolver(self, db: &impl DefDatabase) -> crate::Resolver {\n+        match self {\n+            GenericDef::Function(inner) => inner.resolver(db),\n+            GenericDef::Adt(adt) => adt.resolver(db),\n+            GenericDef::Trait(inner) => inner.resolver(db),\n+            GenericDef::TypeAlias(inner) => inner.resolver(db),\n+            GenericDef::ImplBlock(inner) => inner.resolver(db),\n+            GenericDef::EnumVariant(inner) => inner.parent_enum(db).resolver(db),\n+            GenericDef::Const(inner) => inner.resolver(db),\n+        }\n+    }\n+}\n+\n+impl HasResolver for ImplBlock {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+        self.module(db)\n+            .resolver(db)\n+            .push_generic_params_scope(db, self.into())\n+            .push_impl_block_scope(self)\n+    }\n+}"}, {"sha": "727310f0662ce57fc4597d3c72765ac4cbe191da", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=6241cf9a598b19cbd6c8c41c3743f8d56adafd2b", "patch": "@@ -23,7 +23,7 @@ use crate::{\n     db::HirDatabase,\n     expr::{self, BodySourceMap, ExprScopes, ScopeId},\n     ids::LocationCtx,\n-    resolve::{ScopeDef, TypeNs, ValueNs},\n+    resolve::{HasResolver, ScopeDef, TypeNs, ValueNs},\n     ty::method_resolution::{self, implements_trait},\n     AssocItem, Const, DefWithBody, Either, Enum, FromSource, Function, GenericParam, HasBody,\n     HirFileId, Local, MacroDef, Module, Name, Path, Resolver, Static, Struct, Ty,"}, {"sha": "7f9e81d6492b203f781fb66f135876c8be779827", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=6241cf9a598b19cbd6c8c41c3743f8d56adafd2b", "patch": "@@ -40,7 +40,7 @@ use crate::{\n     code_model::TypeAlias,\n     db::HirDatabase,\n     expr::{BindingAnnotation, Body, ExprId, PatId},\n-    resolve::{Resolver, TypeNs},\n+    resolve::{HasResolver, Resolver, TypeNs},\n     ty::infer::diagnostics::InferenceDiagnostic,\n     Adt, AssocItem, ConstData, DefWithBody, FloatTy, FnData, Function, HasBody, IntTy, Path,\n     StructField, VariantDef,"}, {"sha": "397ee7d5fc365b1fab35d121d5e8e1eb18a31c7f", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=6241cf9a598b19cbd6c8c41c3743f8d56adafd2b", "patch": "@@ -22,7 +22,7 @@ use crate::{\n     db::HirDatabase,\n     generics::HasGenericParams,\n     generics::{GenericDef, WherePredicate},\n-    resolve::{Resolver, TypeNs},\n+    resolve::{HasResolver, Resolver, TypeNs},\n     ty::{\n         primitive::{FloatTy, IntTy, Uncertain},\n         Adt,"}, {"sha": "d5739b58a6d759741360c196397b18821c332fc5", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=6241cf9a598b19cbd6c8c41c3743f8d56adafd2b", "patch": "@@ -304,6 +304,13 @@ mod tests {\n             ),\n             @r###\"\n         [\n+            CompletionItem {\n+                label: \"Self\",\n+                source_range: [54; 54),\n+                delete: [54; 54),\n+                insert: \"Self\",\n+                kind: TypeParam,\n+            },\n             CompletionItem {\n                 label: \"T\",\n                 source_range: [54; 54),"}]}