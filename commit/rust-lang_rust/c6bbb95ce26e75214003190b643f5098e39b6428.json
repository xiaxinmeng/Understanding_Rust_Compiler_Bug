{"sha": "c6bbb95ce26e75214003190b643f5098e39b6428", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YmJiOTVjZTI2ZTc1MjE0MDAzMTkwYjY0M2Y1MDk4ZTM5YjY0Mjg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-26T23:14:07Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-28T23:37:45Z"}, "message": "syntax: Accept meta matchers in macros\n\nThis removes the `attr` matcher and adds a `meta` matcher. The previous `attr`\nmatcher is now ambiguous because it doesn't disambiguate whether it means inner\nattribute or outer attribute.\n\nThe new behavior can still be achieved by taking an argument of the form\n`#[$foo:meta]` (the brackets are part of the macro pattern).\n\nCloses #13067", "tree": {"sha": "ddeebe963d1c6ded3112ddbb6625ed02eb28e884", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddeebe963d1c6ded3112ddbb6625ed02eb28e884"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6bbb95ce26e75214003190b643f5098e39b6428", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6bbb95ce26e75214003190b643f5098e39b6428", "html_url": "https://github.com/rust-lang/rust/commit/c6bbb95ce26e75214003190b643f5098e39b6428", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6bbb95ce26e75214003190b643f5098e39b6428/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbfc0a5e33eb3d97a2995d120536b8dadc0cc0a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbfc0a5e33eb3d97a2995d120536b8dadc0cc0a2", "html_url": "https://github.com/rust-lang/rust/commit/cbfc0a5e33eb3d97a2995d120536b8dadc0cc0a2"}], "stats": {"total": 96, "additions": 68, "deletions": 28}, "files": [{"sha": "ef8894a258cdceccc6494d1fe41465c08538516c", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=c6bbb95ce26e75214003190b643f5098e39b6428", "patch": "@@ -252,7 +252,7 @@ use sync::arc::UnsafeArc;\n pub use comm::select::{Select, Handle};\n \n macro_rules! test (\n-    { fn $name:ident() $b:block $($a:attr)*} => (\n+    { fn $name:ident() $b:block $(#[$a:meta])*} => (\n         mod $name {\n             #[allow(unused_imports)];\n \n@@ -265,8 +265,8 @@ macro_rules! test (\n \n             fn f() $b\n \n-            $($a)* #[test] fn uv() { f() }\n-            $($a)* #[test] fn native() {\n+            $(#[$a])* #[test] fn uv() { f() }\n+            $(#[$a])* #[test] fn native() {\n                 use native;\n                 let (tx, rx) = channel();\n                 native::task::spawn(proc() { tx.send(f()) });"}, {"sha": "6e987869238296487d964e84a4d2d9382a0abcf3", "filename": "src/libstd/io/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Flibstd%2Fio%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Flibstd%2Fio%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftest.rs?ref=c6bbb95ce26e75214003190b643f5098e39b6428", "patch": "@@ -19,7 +19,7 @@ use std::io::net::ip::*;\n use sync::atomics::{AtomicUint, INIT_ATOMIC_UINT, Relaxed};\n \n macro_rules! iotest (\n-    { fn $name:ident() $b:block $($a:attr)* } => (\n+    { fn $name:ident() $b:block $(#[$a:meta])* } => (\n         mod $name {\n             #[allow(unused_imports)];\n \n@@ -43,8 +43,8 @@ macro_rules! iotest (\n \n             fn f() $b\n \n-            $($a)* #[test] fn green() { f() }\n-            $($a)* #[test] fn native() {\n+            $(#[$a])* #[test] fn green() { f() }\n+            $(#[$a])* #[test] fn native() {\n                 use native;\n                 let (tx, rx) = channel();\n                 native::task::spawn(proc() { tx.send(f()) });"}, {"sha": "0d90093a40f3f8aa6518312151dd16c1459bef71", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=c6bbb95ce26e75214003190b643f5098e39b6428", "patch": "@@ -441,7 +441,7 @@ pub fn parse_nt(p: &mut Parser, name: &str) -> Nonterminal {\n       \"path\" => {\n         token::NtPath(~p.parse_path(LifetimeAndTypesWithoutColons).path)\n       }\n-      \"attr\" => token::NtAttr(@p.parse_attribute(false)),\n+      \"meta\" => token::NtMeta(p.parse_meta_item()),\n       \"tt\" => {\n         p.quote_depth += 1u; //but in theory, non-quoted tts might be useful\n         let res = token::NtTT(@p.parse_token_tree());"}, {"sha": "b569bb28a7dc577d275d1127c234988d921284bc", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=c6bbb95ce26e75214003190b643f5098e39b6428", "patch": "@@ -34,9 +34,6 @@ impl<'a> ParserAttr for Parser<'a> {\n             debug!(\"parse_outer_attributes: self.token={:?}\",\n                    self.token);\n             match self.token {\n-              token::INTERPOLATED(token::NtAttr(..)) => {\n-                attrs.push(self.parse_attribute(false));\n-              }\n               token::POUND => {\n                 attrs.push(self.parse_attribute(false));\n               }\n@@ -66,11 +63,6 @@ impl<'a> ParserAttr for Parser<'a> {\n         debug!(\"parse_attributes: permit_inner={:?} self.token={:?}\",\n                permit_inner, self.token);\n         let (span, value, mut style) = match self.token {\n-            INTERPOLATED(token::NtAttr(attr)) => {\n-                assert!(attr.node.style == ast::AttrOuter);\n-                self.bump();\n-                (attr.span, attr.node.value, ast::AttrOuter)\n-            }\n             token::POUND => {\n                 let lo = self.span.lo;\n                 self.bump();\n@@ -133,9 +125,6 @@ impl<'a> ParserAttr for Parser<'a> {\n         let mut next_outer_attrs: Vec<ast::Attribute> = Vec::new();\n         loop {\n             let attr = match self.token {\n-                token::INTERPOLATED(token::NtAttr(..)) => {\n-                    self.parse_attribute(true)\n-                }\n                 token::POUND => {\n                     self.parse_attribute(true)\n                 }\n@@ -163,6 +152,14 @@ impl<'a> ParserAttr for Parser<'a> {\n     // | IDENT = lit\n     // | IDENT meta_seq\n     fn parse_meta_item(&mut self) -> @ast::MetaItem {\n+        match self.token {\n+            token::INTERPOLATED(token::NtMeta(e)) => {\n+                self.bump();\n+                return e\n+            }\n+            _ => {}\n+        }\n+\n         let lo = self.span.lo;\n         let ident = self.parse_ident();\n         let name = self.id_to_interned_str(ident);"}, {"sha": "e3eb1f1f7116eb8465af6bce45f7bd4d8867f0c9", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=c6bbb95ce26e75214003190b643f5098e39b6428", "patch": "@@ -113,7 +113,7 @@ pub enum Nonterminal {\n     NtExpr(@ast::Expr),\n     NtTy(  P<ast::Ty>),\n     NtIdent(~ast::Ident, bool),\n-    NtAttr(@ast::Attribute), // #[foo]\n+    NtMeta(@ast::MetaItem), // stuff inside brackets for attributes\n     NtPath(~ast::Path),\n     NtTT(  @ast::TokenTree), // needs @ed to break a circularity\n     NtMatchers(Vec<ast::Matcher> )\n@@ -129,7 +129,7 @@ impl fmt::Show for Nonterminal {\n             NtExpr(..) => f.pad(\"NtExpr(..)\"),\n             NtTy(..) => f.pad(\"NtTy(..)\"),\n             NtIdent(..) => f.pad(\"NtIdent(..)\"),\n-            NtAttr(..) => f.pad(\"NtAttr(..)\"),\n+            NtMeta(..) => f.pad(\"NtMeta(..)\"),\n             NtPath(..) => f.pad(\"NtPath(..)\"),\n             NtTT(..) => f.pad(\"NtTT(..)\"),\n             NtMatchers(..) => f.pad(\"NtMatchers(..)\"),\n@@ -241,15 +241,15 @@ pub fn to_str(t: &Token) -> ~str {\n       INTERPOLATED(ref nt) => {\n         match nt {\n             &NtExpr(e) => ::print::pprust::expr_to_str(e),\n-            &NtAttr(e) => ::print::pprust::attribute_to_str(e),\n+            &NtMeta(e) => ::print::pprust::meta_item_to_str(e),\n             _ => {\n                 ~\"an interpolated \" +\n                     match *nt {\n                         NtItem(..) => ~\"item\",\n                         NtBlock(..) => ~\"block\",\n                         NtStmt(..) => ~\"statement\",\n                         NtPat(..) => ~\"pattern\",\n-                        NtAttr(..) => fail!(\"should have been handled\"),\n+                        NtMeta(..) => fail!(\"should have been handled\"),\n                         NtExpr(..) => fail!(\"should have been handled above\"),\n                         NtTy(..) => ~\"type\",\n                         NtIdent(..) => ~\"identifier\","}, {"sha": "753ab3d036810b4aa1e83144a0e07e40a12f8130", "filename": "src/test/compile-fail/macro-inner-attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Ftest%2Fcompile-fail%2Fmacro-inner-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Ftest%2Fcompile-fail%2Fmacro-inner-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-inner-attributes.rs?ref=c6bbb95ce26e75214003190b643f5098e39b6428", "patch": "@@ -11,8 +11,8 @@\n #[feature(macro_rules)];\n \n macro_rules! test ( ($nm:ident,\n-                     $a:attr,\n-                     $i:item) => (mod $nm { $a; $i }); )\n+                     #[$a:meta],\n+                     $i:item) => (mod $nm { #![$a] $i }); )\n \n test!(a,\n       #[cfg(qux)],"}, {"sha": "a4ded8e20b91c56dfddb36638393210321f0f345", "filename": "src/test/compile-fail/macro-outer-attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Ftest%2Fcompile-fail%2Fmacro-outer-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Ftest%2Fcompile-fail%2Fmacro-outer-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-outer-attributes.rs?ref=c6bbb95ce26e75214003190b643f5098e39b6428", "patch": "@@ -11,8 +11,8 @@\n #[feature(macro_rules)];\n \n macro_rules! test ( ($nm:ident,\n-                     $a:attr,\n-                     $i:item) => (mod $nm { $a $i }); )\n+                     #[$a:meta],\n+                     $i:item) => (mod $nm { #[$a] $i }); )\n \n test!(a,\n       #[cfg(qux)],"}, {"sha": "076305002e4ec58073b8be913f05d65a4d64f48b", "filename": "src/test/run-pass/macro-attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Ftest%2Frun-pass%2Fmacro-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Ftest%2Frun-pass%2Fmacro-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-attributes.rs?ref=c6bbb95ce26e75214003190b643f5098e39b6428", "patch": "@@ -13,11 +13,11 @@\n #[feature(macro_rules)];\n \n macro_rules! compiles_fine {\n-    ($at:attr) => {\n+    (#[$at:meta]) => {\n         // test that the different types of attributes work\n         #[attribute]\n         /// Documentation!\n-        $at\n+        #[$at]\n \n         // check that the attributes are recognised by requiring this\n         // to be removed to avoid a compile error"}, {"sha": "e92685f3e58abb06e340edbad6212c176e10b9d6", "filename": "src/test/run-pass/macro-meta-items.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Ftest%2Frun-pass%2Fmacro-meta-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bbb95ce26e75214003190b643f5098e39b6428/src%2Ftest%2Frun-pass%2Fmacro-meta-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-meta-items.rs?ref=c6bbb95ce26e75214003190b643f5098e39b6428", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-pretty - token trees can't pretty print\n+// compile-flags: --cfg foo\n+\n+#[feature(macro_rules)];\n+\n+macro_rules! compiles_fine {\n+    ($at:meta) => {\n+        #[cfg($at)]\n+        static MISTYPED: () = \"foo\";\n+    }\n+}\n+macro_rules! emit {\n+    ($at:meta) => {\n+        #[cfg($at)]\n+        static MISTYPED: &'static str = \"foo\";\n+    }\n+}\n+\n+// item\n+compiles_fine!(bar)\n+emit!(foo)\n+\n+fn foo() {\n+    println!(\"{}\", MISTYPED);\n+}\n+\n+pub fn main() {\n+    // statement\n+    compiles_fine!(baz);\n+    emit!(baz);\n+    println!(\"{}\", MISTYPED);\n+}\n+"}]}