{"sha": "03ec8e5cc91b3b6b6ab98ef70aa63a0965c5f6c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZWM4ZTVjYzkxYjNiNmI2YWI5OGVmNzBhYTYzYTA5NjVjNWY2YzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-11T17:24:04Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-13T20:53:34Z"}, "message": "std: Rebase better errors on master", "tree": {"sha": "0627baf65866febcabf306e1e8d181ff40f45e44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0627baf65866febcabf306e1e8d181ff40f45e44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03ec8e5cc91b3b6b6ab98ef70aa63a0965c5f6c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03ec8e5cc91b3b6b6ab98ef70aa63a0965c5f6c1", "html_url": "https://github.com/rust-lang/rust/commit/03ec8e5cc91b3b6b6ab98ef70aa63a0965c5f6c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03ec8e5cc91b3b6b6ab98ef70aa63a0965c5f6c1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "298412a6e87be2213bbfc5e6fada9795c405ea13", "url": "https://api.github.com/repos/rust-lang/rust/commits/298412a6e87be2213bbfc5e6fada9795c405ea13", "html_url": "https://github.com/rust-lang/rust/commit/298412a6e87be2213bbfc5e6fada9795c405ea13"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "008be8ffaaef3a2797e692aa1f33e0be6ad72a33", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/03ec8e5cc91b3b6b6ab98ef70aa63a0965c5f6c1/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ec8e5cc91b3b6b6ab98ef70aa63a0965c5f6c1/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=03ec8e5cc91b3b6b6ab98ef70aa63a0965c5f6c1", "patch": "@@ -52,13 +52,15 @@ fs::unlink(&path);\n use c_str::ToCStr;\n use clone::Clone;\n use collections::Collection;\n+use io::standard_error;\n use io::{FilePermission, Write, UnstableFileStat, Open, FileAccess, FileMode};\n use io::{IoResult, IoError, FileStat, SeekStyle, Seek, Writer, Reader};\n use io::{Read, Truncate, SeekCur, SeekSet, ReadWrite, SeekEnd, Append};\n-use io;\n+use io::UpdateIoError;\n use io;\n use iter::Iterator;\n use kinds::Send;\n+use libc;\n use option::{Some, None, Option};\n use owned::Box;\n use path::{Path, GenericPath};\n@@ -67,6 +69,7 @@ use result::{Err, Ok};\n use rt::rtio::LocalIo;\n use rt::rtio;\n use slice::ImmutableVector;\n+use string::String;\n use vec::Vec;\n \n /// Unconstrained file access type that exposes read and write operations\n@@ -128,18 +131,18 @@ impl File {\n     pub fn open_mode(path: &Path,\n                      mode: FileMode,\n                      access: FileAccess) -> IoResult<File> {\n-        let mode = match mode {\n+        let rtio_mode = match mode {\n             Open => rtio::Open,\n             Append => rtio::Append,\n             Truncate => rtio::Truncate,\n         };\n-        let access = match access {\n+        let rtio_access = match access {\n             Read => rtio::Read,\n             Write => rtio::Write,\n             ReadWrite => rtio::ReadWrite,\n         };\n         let err = LocalIo::maybe_raise(|io| {\n-            io.fs_open(&path.to_c_str(), mode, access).map(|fd| {\n+            io.fs_open(&path.to_c_str(), rtio_mode, rtio_access).map(|fd| {\n                 File {\n                     path: path.clone(),\n                     fd: fd,\n@@ -775,7 +778,8 @@ impl Reader for File {\n                                           e, file.path.display()))\n         }\n \n-        let result: IoResult<int> = update_err(self.fd.read(buf), self);\n+        let result = update_err(self.fd.read(buf)\n+                                    .map_err(IoError::from_rtio_error), self);\n \n         match result {\n             Ok(read) => {\n@@ -785,14 +789,14 @@ impl Reader for File {\n                     _ => Ok(read as uint)\n                 }\n             },\n-            Err(e) => Err(IoError::from_rtio_error(e)),\n+            Err(e) => Err(e)\n         }\n     }\n }\n \n impl Writer for File {\n     fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n-        let err = self.fd.write(buf).map_err(IoError::from_rtio_error)\n+        let err = self.fd.write(buf).map_err(IoError::from_rtio_error);\n         err.update_err(\"couldn't write to file\",\n                        |e| format!(\"{}; path={}\", e, self.path.display()))\n     }"}]}