{"sha": "404d4e0528eaf9cc057e6357c7caae132a87be15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNGQ0ZTA1MjhlYWY5Y2MwNTdlNjM1N2M3Y2FhZTEzMmE4N2JlMTU=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-12T21:19:38Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-23T01:45:34Z"}, "message": "Adding test case dealing with communication and hashmaps.", "tree": {"sha": "cdab871ac80ad141e63b3d88d694e3dd6960a1de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdab871ac80ad141e63b3d88d694e3dd6960a1de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/404d4e0528eaf9cc057e6357c7caae132a87be15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/404d4e0528eaf9cc057e6357c7caae132a87be15", "html_url": "https://github.com/rust-lang/rust/commit/404d4e0528eaf9cc057e6357c7caae132a87be15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/404d4e0528eaf9cc057e6357c7caae132a87be15/comments", "author": null, "committer": null, "parents": [{"sha": "c7e967148c0de44efe325a9ab8c25b990da53acb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e967148c0de44efe325a9ab8c25b990da53acb", "html_url": "https://github.com/rust-lang/rust/commit/c7e967148c0de44efe325a9ab8c25b990da53acb"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "a9be99cbf44b56f48a31a99478f0a96580d34a3a", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/404d4e0528eaf9cc057e6357c7caae132a87be15/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/404d4e0528eaf9cc057e6357c7caae132a87be15/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=404d4e0528eaf9cc057e6357c7caae132a87be15", "patch": "@@ -0,0 +1,108 @@\n+/**\n+   A somewhat reduced test case to expose some Valgrind issues.\n+\n+   This originally came from the word-count benchmark.\n+*/\n+\n+use std;\n+\n+import std::io;\n+import option = std::option::t;\n+import std::option::some;\n+import std::option::none;\n+import std::str;\n+import std::vec;\n+import std::map;\n+\n+fn map(str filename, map_reduce::putter emit) {\n+    emit(filename, \"1\");\n+}\n+\n+mod map_reduce {\n+    export putter;\n+    export mapper;\n+    export map_reduce;\n+\n+    type putter = fn(str, str) -> ();\n+\n+    type mapper = fn(str, putter);\n+\n+    tag ctrl_proto {\n+        find_reducer(str, chan[int]);\n+        mapper_done;\n+    }\n+\n+    fn start_mappers(chan[ctrl_proto] ctrl,\n+                     vec[str] inputs) {\n+        for(str i in inputs) {\n+            spawn map_task(ctrl, i);\n+        }\n+    }\n+\n+    fn map_task(chan[ctrl_proto] ctrl,\n+                str input) {\n+        \n+        auto intermediates = map::new_str_hash();\n+\n+        fn emit(&map::hashmap[str, int] im,\n+                chan[ctrl_proto] ctrl,\n+                str key, str val) {\n+            auto c;\n+            alt(im.find(key)) {\n+                case(some(?_c)) {\n+                    c = _c\n+                }\n+                case(none) {\n+                    auto p = port();\n+                    log_err \"sending find_reducer\";\n+                    ctrl <| find_reducer(key, chan(p));\n+                    log_err \"receiving\";\n+                    p |> c;\n+                    log_err c;\n+                    im.insert(key, c);\n+                }\n+            }\n+        }\n+\n+        map(input, bind emit(intermediates, ctrl, _, _));\n+        ctrl <| mapper_done;\n+    }\n+\n+    fn map_reduce (vec[str] inputs) {\n+        auto ctrl = port[ctrl_proto]();\n+\n+        // This task becomes the master control task. It spawns others\n+        // to do the rest.\n+\n+        let map::hashmap[str, int] reducers;\n+\n+        reducers = map::new_str_hash();\n+\n+        start_mappers(chan(ctrl), inputs);\n+\n+        auto num_mappers = vec::len(inputs) as int;\n+\n+        while(num_mappers > 0) {\n+            auto m;\n+            ctrl |> m;\n+            \n+            alt(m) {\n+                case(mapper_done) { num_mappers -= 1; }\n+                case(find_reducer(?k, ?cc)) {\n+                    auto c;\n+                    alt(reducers.find(k)) {\n+                        case(some(?_c)) { c = _c; }\n+                        case(none) {\n+                            c = 0;\n+                        }\n+                    }\n+                    cc <| c;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn main(vec[str] argv) {\n+    map_reduce::map_reduce([\"../src/test/run-pass/hashmap-memory.rs\"]);\n+}"}]}