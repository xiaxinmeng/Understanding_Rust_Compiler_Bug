{"sha": "89ace470dcc0d4e08c1fd530e938893f87dcd436", "node_id": "C_kwDOAAsO6NoAKDg5YWNlNDcwZGNjMGQ0ZTA4YzFmZDUzMGU5Mzg4OTNmODdkY2Q0MzY", "commit": {"author": {"name": "Bruce A. MacNaughton", "email": "bruce.macnaughton@contrastsecurity.com", "date": "2022-07-20T01:03:18Z"}, "committer": {"name": "Bruce A. MacNaughton", "email": "bruce.macnaughton@contrastsecurity.com", "date": "2022-07-20T01:03:18Z"}, "message": "formatted", "tree": {"sha": "b2ca4972e955614ad9280d2deb4d50e4c22d0fb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2ca4972e955614ad9280d2deb4d50e4c22d0fb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89ace470dcc0d4e08c1fd530e938893f87dcd436", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89ace470dcc0d4e08c1fd530e938893f87dcd436", "html_url": "https://github.com/rust-lang/rust/commit/89ace470dcc0d4e08c1fd530e938893f87dcd436", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89ace470dcc0d4e08c1fd530e938893f87dcd436/comments", "author": {"login": "bmacnaughton", "id": 4171707, "node_id": "MDQ6VXNlcjQxNzE3MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4171707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmacnaughton", "html_url": "https://github.com/bmacnaughton", "followers_url": "https://api.github.com/users/bmacnaughton/followers", "following_url": "https://api.github.com/users/bmacnaughton/following{/other_user}", "gists_url": "https://api.github.com/users/bmacnaughton/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmacnaughton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmacnaughton/subscriptions", "organizations_url": "https://api.github.com/users/bmacnaughton/orgs", "repos_url": "https://api.github.com/users/bmacnaughton/repos", "events_url": "https://api.github.com/users/bmacnaughton/events{/privacy}", "received_events_url": "https://api.github.com/users/bmacnaughton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bmacnaughton", "id": 4171707, "node_id": "MDQ6VXNlcjQxNzE3MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4171707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmacnaughton", "html_url": "https://github.com/bmacnaughton", "followers_url": "https://api.github.com/users/bmacnaughton/followers", "following_url": "https://api.github.com/users/bmacnaughton/following{/other_user}", "gists_url": "https://api.github.com/users/bmacnaughton/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmacnaughton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmacnaughton/subscriptions", "organizations_url": "https://api.github.com/users/bmacnaughton/orgs", "repos_url": "https://api.github.com/users/bmacnaughton/repos", "events_url": "https://api.github.com/users/bmacnaughton/events{/privacy}", "received_events_url": "https://api.github.com/users/bmacnaughton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4819632e2d0e135cff3e1987b77ca584e22a41a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4819632e2d0e135cff3e1987b77ca584e22a41a", "html_url": "https://github.com/rust-lang/rust/commit/d4819632e2d0e135cff3e1987b77ca584e22a41a"}], "stats": {"total": 54, "additions": 20, "deletions": 34}, "files": [{"sha": "d4efdef2e806c8830c690f566bfee6304bdb2f14", "filename": "src/tools/unicode-table-generator/src/cascading_map.rs", "status": "modified", "additions": 19, "deletions": 32, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/89ace470dcc0d4e08c1fd530e938893f87dcd436/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fcascading_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ace470dcc0d4e08c1fd530e938893f87dcd436/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fcascading_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fcascading_map.rs?ref=89ace470dcc0d4e08c1fd530e938893f87dcd436", "patch": "@@ -4,32 +4,24 @@ use std::collections::HashMap;\n use std::fmt::Write as _;\n use std::ops::Range;\n \n-\n impl RawEmitter {\n     pub fn emit_cascading_map(&mut self, ranges: &[Range<u32>]) -> bool {\n-\n         let mut map: [u8; 256] = [\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         ];\n \n-        let points = ranges.iter().flat_map(\n-            |r| (r.start..r.end).into_iter().collect::<Vec<u32>>()\n-        ).collect::<Vec<u32>>();\n+        let points = ranges\n+            .iter()\n+            .flat_map(|r| (r.start..r.end).into_iter().collect::<Vec<u32>>())\n+            .collect::<Vec<u32>>();\n \n         println!(\"there are {} points\", points.len());\n \n@@ -46,7 +38,8 @@ impl RawEmitter {\n         let mut bit_for_high_byte = 1u8;\n         let mut arms = Vec::<String>::new();\n \n-        let mut high_bytes: Vec<usize> = codepoints_by_high_bytes.keys().map(|k| k.clone()).collect();\n+        let mut high_bytes: Vec<usize> =\n+            codepoints_by_high_bytes.keys().map(|k| k.clone()).collect();\n         high_bytes.sort();\n         for high_byte in high_bytes {\n             let codepoints = codepoints_by_high_bytes.get_mut(&high_byte).unwrap();\n@@ -61,21 +54,15 @@ impl RawEmitter {\n             }\n             arms.push(format!(\n                 \"{} => WHITESPACE_MAP[c as usize & 0xff] & {} != 0\",\n-                high_byte,\n-                bit_for_high_byte)\n-            );\n+                high_byte, bit_for_high_byte\n+            ));\n             bit_for_high_byte <<= 1;\n         }\n \n-        writeln!(\n-            &mut self.file,\n-            \"static WHITESPACE_MAP: [u8; 256] = [{}];\",\n-            fmt_list(map.iter())\n-        )\n-        .unwrap();\n+        writeln!(&mut self.file, \"static WHITESPACE_MAP: [u8; 256] = [{}];\", fmt_list(map.iter()))\n+            .unwrap();\n         self.bytes_used += 256;\n \n-\n         writeln!(&mut self.file, \"pub fn lookup(c: char) -> bool {{\").unwrap();\n         writeln!(&mut self.file, \"    match c as u32 >> 8 {{\").unwrap();\n         for arm in arms {"}, {"sha": "a3327a3c2ffd93c5b7d2eadc2cf989192f9bdb8b", "filename": "src/tools/unicode-table-generator/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89ace470dcc0d4e08c1fd530e938893f87dcd436/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ace470dcc0d4e08c1fd530e938893f87dcd436/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs?ref=89ace470dcc0d4e08c1fd530e938893f87dcd436", "patch": "@@ -75,10 +75,10 @@ use std::collections::{BTreeMap, HashMap};\n use std::ops::Range;\n use ucd_parse::Codepoints;\n \n+mod cascading_map;\n mod case_mapping;\n mod raw_emitter;\n mod skiplist;\n-mod cascading_map;\n mod unicode_download;\n \n use raw_emitter::{emit_codepoints, emit_whitespace, RawEmitter};"}, {"sha": "5aca86ba089d68fe58ef5c5f32eee1ba7ccefc6c", "filename": "src/tools/unicode-table-generator/src/raw_emitter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89ace470dcc0d4e08c1fd530e938893f87dcd436/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ace470dcc0d4e08c1fd530e938893f87dcd436/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs?ref=89ace470dcc0d4e08c1fd530e938893f87dcd436", "patch": "@@ -177,7 +177,6 @@ pub fn emit_whitespace(emitter: &mut RawEmitter, ranges: &[Range<u32>]) {\n     cascading.emit_cascading_map(&ranges);\n     *emitter = cascading;\n     emitter.desc = String::from(\"cascading\");\n-\n }\n \n struct Canonicalized {"}]}