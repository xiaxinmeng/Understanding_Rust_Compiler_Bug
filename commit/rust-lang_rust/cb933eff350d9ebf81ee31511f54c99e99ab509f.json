{"sha": "cb933eff350d9ebf81ee31511f54c99e99ab509f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiOTMzZWZmMzUwZDllYmY4MWVlMzE1MTFmNTRjOTllOTlhYjUwOWY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-15T10:29:52Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-01T19:05:02Z"}, "message": "rebase fallout", "tree": {"sha": "cc70007130609d22fe598153af9f0c353f39f6f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc70007130609d22fe598153af9f0c353f39f6f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb933eff350d9ebf81ee31511f54c99e99ab509f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb933eff350d9ebf81ee31511f54c99e99ab509f", "html_url": "https://github.com/rust-lang/rust/commit/cb933eff350d9ebf81ee31511f54c99e99ab509f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb933eff350d9ebf81ee31511f54c99e99ab509f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "089c4039c62caecf0bc58ef0672ab85de26e6186", "url": "https://api.github.com/repos/rust-lang/rust/commits/089c4039c62caecf0bc58ef0672ab85de26e6186", "html_url": "https://github.com/rust-lang/rust/commit/089c4039c62caecf0bc58ef0672ab85de26e6186"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "dfeab9715cc01dfa5281c7426554297328295d61", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb933eff350d9ebf81ee31511f54c99e99ab509f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb933eff350d9ebf81ee31511f54c99e99ab509f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=cb933eff350d9ebf81ee31511f54c99e99ab509f", "patch": "@@ -1745,12 +1745,7 @@ impl<'a, 'tcx> Lift<'tcx> for Goal<'a> {\n         if tcx.interners.arena.in_arena(*self as *const _) {\n             return Some(unsafe { mem::transmute(*self) });\n         }\n-        // Also try in the global tcx if we're not that.\n-        if !tcx.is_global() {\n-            self.lift_to_tcx(tcx.global_tcx())\n-        } else {\n-            None\n-        }\n+        Some(tcx.intern_const_alloc(mir::interpret::Allocation::clone(self)))\n     }\n }\n "}, {"sha": "aae3de68aaae08996e1c853bd2532b5291374d66", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb933eff350d9ebf81ee31511f54c99e99ab509f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb933eff350d9ebf81ee31511f54c99e99ab509f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=cb933eff350d9ebf81ee31511f54c99e99ab509f", "patch": "@@ -658,7 +658,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            (&TestKind::Range(range), &PatternKind::Constant { ref value }) => {\n+            (&TestKind::Range(range), &PatternKind::Constant { value }) => {\n                 if self.const_range_contains(range, value) == Some(false) {\n                     // `value` is not contained in the testing range,\n                     // so `value` can be matched only if this test fails.\n@@ -787,7 +787,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     fn const_range_contains(\n         &self,\n         range: PatternRange<'tcx>,\n-        value: &'tcx ty::Const<'tcx>,\n+        value: ty::Const<'tcx>,\n     ) -> Option<bool> {\n         use std::cmp::Ordering::*;\n \n@@ -807,9 +807,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     fn values_not_contained_in_range(\n         &self,\n         range: PatternRange<'tcx>,\n-        indices: &FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n+        indices: &FxHashMap<ty::Const<'tcx>, usize>,\n     ) -> Option<bool> {\n-        for val in indices.keys() {\n+        for &val in indices.keys() {\n             if self.const_range_contains(range, val)? {\n                 return Some(false);\n             }"}, {"sha": "b25d47b390175ba7790049a1cef72ecf1803234a", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cb933eff350d9ebf81ee31511f54c99e99ab509f/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb933eff350d9ebf81ee31511f54c99e99ab509f/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=cb933eff350d9ebf81ee31511f54c99e99ab509f", "patch": "@@ -223,7 +223,7 @@ impl<'a, 'tcx> LiteralExpander<'a, 'tcx> {\n                 assert_eq!(t, u);\n                 ConstValue::ScalarPair(\n                     Scalar::Ptr(p),\n-                    n.val.try_to_scalar().unwrap(),\n+                    n.map_evaluated(|val| val.val.try_to_scalar()).unwrap(),\n                 )\n             },\n             // fat pointers stay the same\n@@ -251,11 +251,10 @@ impl<'a, 'tcx> PatternFolder<'tcx> for LiteralExpander<'a, 'tcx> {\n                         subpattern: Pattern {\n                             ty: rty,\n                             span: pat.span,\n-                            kind: box PatternKind::Constant { value: Const::from_const_value(\n-                                self.tcx,\n-                                self.fold_const_value_deref(*val, rty, crty),\n-                                rty,\n-                            ) },\n+                            kind: box PatternKind::Constant { value: Const {\n+                                val: self.fold_const_value_deref(val, rty, crty),\n+                                ty: rty,\n+                            } },\n                         }\n                     }\n                 }\n@@ -1396,7 +1395,7 @@ fn constructor_sub_pattern_tys<'a, 'tcx: 'a>(cx: &MatchCheckCtxt<'a, 'tcx>,\n fn slice_pat_covered_by_const<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, '_>,\n     _span: Span,\n-    const_val: &ty::Const<'tcx>,\n+    const_val: ty::Const<'tcx>,\n     prefix: &[Pattern<'tcx>],\n     slice: &Option<Pattern<'tcx>>,\n     suffix: &[Pattern<'tcx>]\n@@ -1751,12 +1750,27 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                     // necessarily point to memory, they are usually just integers. The only time\n                     // they should be pointing to memory is when they are subslices of nonzero\n                     // slices\n-                    let (opt_ptr, n, ty) = match value.ty.builtin_deref(false).unwrap().ty.sty {\n-                        ty::TyKind::Array(t, n) => (value.to_ptr(), n.unwrap_usize(cx.tcx), t),\n+                    let (opt_ptr, n, ty) = match value.ty.sty {\n+                        ty::TyKind::Array(t, n) => {\n+                            match value.val {\n+                                ConstValue::ByRef(id, alloc, offset) => (\n+                                    Some((Pointer::new(id, offset), alloc)),\n+                                    n.unwrap_usize(cx.tcx),\n+                                    t,\n+                                ),\n+                                _ => span_bug!(\n+                                    pat.span,\n+                                    \"array pattern is {:?}\", value,\n+                                ),\n+                            }\n+                        },\n                         ty::TyKind::Slice(t) => {\n                             match value.val {\n                                 ConstValue::ScalarPair(ptr, n) => (\n-                                    ptr.to_ptr().ok(),\n+                                    ptr.to_ptr().ok().map(|ptr| (\n+                                        ptr,\n+                                        cx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id),\n+                                    )),\n                                     n.to_bits(cx.tcx.data_layout.pointer_size).unwrap() as u64,\n                                     t,\n                                 ),"}]}