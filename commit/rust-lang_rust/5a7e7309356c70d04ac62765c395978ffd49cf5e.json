{"sha": "5a7e7309356c70d04ac62765c395978ffd49cf5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhN2U3MzA5MzU2YzcwZDA0YWM2Mjc2NWMzOTU5NzhmZmQ0OWNmNWU=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-07-11T19:05:14Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-07-11T19:05:14Z"}, "message": "Add Option::expect_none(msg) and unwrap_none()\n\nThese are `Option` analogues to `Result::expect_err` and `unwrap_err`.", "tree": {"sha": "ae350c5f791f3b4a46aeed303bd82cb41f00a25e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae350c5f791f3b4a46aeed303bd82cb41f00a25e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a7e7309356c70d04ac62765c395978ffd49cf5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7e7309356c70d04ac62765c395978ffd49cf5e", "html_url": "https://github.com/rust-lang/rust/commit/5a7e7309356c70d04ac62765c395978ffd49cf5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a7e7309356c70d04ac62765c395978ffd49cf5e/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3", "html_url": "https://github.com/rust-lang/rust/commit/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3"}], "stats": {"total": 95, "additions": 94, "deletions": 1}, "files": [{"sha": "6156b4cd3931681e02d1383693274bafb4e025be", "filename": "src/libcore/option.rs", "status": "modified", "additions": 94, "deletions": 1, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/5a7e7309356c70d04ac62765c395978ffd49cf5e/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7e7309356c70d04ac62765c395978ffd49cf5e/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=5a7e7309356c70d04ac62765c395978ffd49cf5e", "patch": "@@ -136,7 +136,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::iter::{FromIterator, FusedIterator, TrustedLen};\n-use crate::{convert, hint, mem, ops::{self, Deref}};\n+use crate::{convert, fmt, hint, mem, ops::{self, Deref}};\n use crate::pin::Pin;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n@@ -972,6 +972,92 @@ impl<T: Clone> Option<&mut T> {\n     }\n }\n \n+impl<T: fmt::Debug> Option<T> {\n+    /// Unwraps an option, expecting [`None`] and returning nothing.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the value is a [`Some`], with a panic message including the\n+    /// passed message, and the content of the [`Some`].\n+    ///\n+    /// [`Some`]: #variant.Some\n+    /// [`None`]: #variant.None\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_expect_none)]\n+    ///\n+    /// use std::collections::HashMap;\n+    /// let mut squares = HashMap::new();\n+    /// for i in -10..=10 {\n+    ///     // This will not panic, since all keys are unique.\n+    ///     squares.insert(i, i * i).expect_none(\"duplicate key\");\n+    /// }\n+    /// ```\n+    ///\n+    /// ```{.should_panic}\n+    /// #![feature(option_expect_none)]\n+    ///\n+    /// use std::collections::HashMap;\n+    /// let mut sqrts = HashMap::new();\n+    /// for i in -10..=10 {\n+    ///     // This will panic, since both negative and positive `i` will\n+    ///     // insert the same `i * i` key, returning the old `Some(i)`.\n+    ///     sqrts.insert(i * i, i).expect_none(\"duplicate key\");\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_expect_none\", reason = \"newly added\", issue = \"0\")]\n+    pub fn expect_none(self, msg: &str) {\n+        if let Some(val) = self {\n+            expect_none_failed(msg, val);\n+        }\n+    }\n+\n+    /// Unwraps an option, expecting [`None`] and returning nothing.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the value is a [`Some`], with a custom panic message provided\n+    /// by the [`Some`]'s value.\n+    ///\n+    /// [`Some(v)`]: #variant.Some\n+    /// [`None`]: #variant.None\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_unwrap_none)]\n+    ///\n+    /// use std::collections::HashMap;\n+    /// let mut squares = HashMap::new();\n+    /// for i in -10..=10 {\n+    ///     // This will not panic, since all keys are unique.\n+    ///     squares.insert(i, i * i).unwrap_none();\n+    /// }\n+    /// ```\n+    ///\n+    /// ```{.should_panic}\n+    /// #![feature(option_unwrap_none)]\n+    ///\n+    /// use std::collections::HashMap;\n+    /// let mut sqrts = HashMap::new();\n+    /// for i in -10..=10 {\n+    ///     // This will panic, since both negative and positive `i` will\n+    ///     // insert the same `i * i` key, returning the old `Some(i)`.\n+    ///     sqrts.insert(i * i, i).unwrap_none();\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_unwrap_none\", reason = \"newly added\", issue = \"0\")]\n+    pub fn unwrap_none(self) {\n+        if let Some(val) = self {\n+            expect_none_failed(\"called `Option::unwrap_none()` on a `Some` value\", val);\n+        }\n+    }\n+}\n+\n impl<T: Default> Option<T> {\n     /// Returns the contained value or a default\n     ///\n@@ -1064,6 +1150,13 @@ fn expect_failed(msg: &str) -> ! {\n     panic!(\"{}\", msg)\n }\n \n+// This is a separate function to reduce the code size of .expect_none() itself.\n+#[inline(never)]\n+#[cold]\n+fn expect_none_failed<T: fmt::Debug>(msg: &str, value: T) -> ! {\n+    panic!(\"{}: {:?}\", msg, value)\n+}\n+\n /////////////////////////////////////////////////////////////////////////////\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////"}]}