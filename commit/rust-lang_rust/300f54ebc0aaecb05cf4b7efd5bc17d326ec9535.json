{"sha": "300f54ebc0aaecb05cf4b7efd5bc17d326ec9535", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMGY1NGViYzBhYWVjYjA1Y2Y0YjdlZmQ1YmMxN2QzMjZlYzk1MzU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-27T20:13:03Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-27T20:14:03Z"}, "message": "Make alts on uninhabited enum types typecheck and translate properly\n\nPossibly one of the silliest Rust commits ever.\n\nCloses #3037", "tree": {"sha": "a34ff08b483ba26369df7b7dbe83f7c17e0387a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a34ff08b483ba26369df7b7dbe83f7c17e0387a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/300f54ebc0aaecb05cf4b7efd5bc17d326ec9535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/300f54ebc0aaecb05cf4b7efd5bc17d326ec9535", "html_url": "https://github.com/rust-lang/rust/commit/300f54ebc0aaecb05cf4b7efd5bc17d326ec9535", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/300f54ebc0aaecb05cf4b7efd5bc17d326ec9535/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fdf77a20daba89f117521b471ef77b087c94c4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fdf77a20daba89f117521b471ef77b087c94c4b", "html_url": "https://github.com/rust-lang/rust/commit/8fdf77a20daba89f117521b471ef77b087c94c4b"}], "stats": {"total": 76, "additions": 66, "deletions": 10}, "files": [{"sha": "2b6e09a2ad50a3d3c50fd1015028e2c675a8fd3b", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/300f54ebc0aaecb05cf4b7efd5bc17d326ec9535/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/300f54ebc0aaecb05cf4b7efd5bc17d326ec9535/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=300f54ebc0aaecb05cf4b7efd5bc17d326ec9535", "patch": "@@ -26,6 +26,23 @@ fn check_expr(tcx: ty::ctxt, ex: @expr, &&s: (), v: visit::vt<()>) {\n       expr_alt(scrut, arms, mode) {\n         check_arms(tcx, arms);\n         /* Check for exhaustiveness */\n+         // Check for empty enum, because is_useful only works on inhabited\n+         // types.\n+       let pat_ty = node_id_to_type(tcx, scrut.id);\n+       if type_is_empty(tcx, pat_ty) && arms.is_empty() {\n+               // Vacuously exhaustive\n+               ret;\n+           }\n+       alt ty::get(pat_ty).struct {\n+          ty_enum(did, _) {\n+              if (*enum_variants(tcx, did)).is_empty() && arms.is_empty() {\n+\n+               ret;\n+            }\n+          }\n+          _ { /* We assume only enum types can be uninhabited */ }\n+       }\n+\n         if mode == alt_exhaustive {\n             let arms = vec::concat(vec::filter_map(arms, unguarded_pat));\n             check_exhaustive(tcx, ex.span, arms);\n@@ -60,6 +77,7 @@ fn raw_pat(p: @pat) -> @pat {\n }\n \n fn check_exhaustive(tcx: ty::ctxt, sp: span, pats: ~[@pat]) {\n+    assert(pats.is_not_empty());\n     let ext = alt is_useful(tcx, vec::map(pats, |p| ~[p]), ~[wild()]) {\n       not_useful { ret; } // This is good, wildcard pattern isn't reachable\n       useful_ { none }\n@@ -111,6 +129,8 @@ enum ctor {\n // checking (if a wildcard pattern is useful in relation to a matrix, the\n // matrix isn't exhaustive).\n \n+// Note: is_useful doesn't work on empty types, as the paper notes.\n+// So it assumes that v is non-empty.\n fn is_useful(tcx: ty::ctxt, m: matrix, v: ~[@pat]) -> useful {\n     if m.len() == 0u { ret useful_; }\n     if m[0].len() == 0u { ret not_useful; }"}, {"sha": "c652facd30eb607164f594d9bdbb1bdd1b2b1c5b", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/300f54ebc0aaecb05cf4b7efd5bc17d326ec9535/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/300f54ebc0aaecb05cf4b7efd5bc17d326ec9535/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=300f54ebc0aaecb05cf4b7efd5bc17d326ec9535", "patch": "@@ -385,6 +385,10 @@ fn pick_col(m: match) -> uint {\n \n fn compile_submatch(bcx: block, m: match, vals: ~[ValueRef],\n                     chk: option<mk_fail>, &exits: ~[exit_node]) {\n+    /*\n+      For an empty match, a fall-through case must exist\n+     */\n+    assert(m.len() > 0u || is_some(chk));\n     let _icx = bcx.insn_ctxt(~\"alt::compile_submatch\");\n     let mut bcx = bcx;\n     let tcx = bcx.tcx(), dm = tcx.def_map;\n@@ -664,24 +668,35 @@ fn trans_alt_inner(scope_cx: block, expr: @ast::expr, arms: ~[ast::arm],\n         }\n     }\n \n-    let mk_fail = alt mode {\n-      ast::alt_check {\n-        // Cached fail-on-fallthrough block\n-        let fail_cx = @mut none;\n-        fn mk_fail(bcx: block, sp: span,\n+    fn mk_fail(bcx: block, sp: span, msg: ~str,\n                    done: @mut option<BasicBlockRef>) -> BasicBlockRef {\n             alt *done { some(bb) { ret bb; } _ { } }\n             let fail_cx = sub_block(bcx, ~\"case_fallthrough\");\n-            trans_fail(fail_cx, some(sp), ~\"non-exhaustive match failure\");;\n+            trans_fail(fail_cx, some(sp), msg);\n             *done = some(fail_cx.llbb);\n             ret fail_cx.llbb;\n-        }\n-        some(|| mk_fail(scope_cx, expr.span, fail_cx))\n+    }\n+    let t = node_id_type(bcx, expr.id);\n+    let mk_fail = alt mode {\n+      ast::alt_check {\n+        let fail_cx = @mut none;\n+        // Cached fail-on-fallthrough block\n+        some(|| mk_fail(scope_cx, expr.span, ~\"non-exhaustive match failure\",\n+                        fail_cx))\n+      }\n+      ast::alt_exhaustive {\n+          let fail_cx = @mut none;\n+          // special case for uninhabited type\n+          if ty::type_is_empty(tcx, t) {\n+                  some(|| mk_fail(scope_cx, expr.span,\n+                            ~\"scrutinizing value that can't exist\", fail_cx))\n+          }\n+          else {\n+              none\n+          }\n       }\n-      ast::alt_exhaustive { none }\n     };\n     let mut exit_map = ~[];\n-    let t = node_id_type(bcx, expr.id);\n     let spilled = spill_if_immediate(bcx, val, t);\n     compile_submatch(bcx, match, ~[spilled], mk_fail, exit_map);\n "}, {"sha": "d99e35ce4183a8a3e30db2c0f947583c75c68ef5", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/300f54ebc0aaecb05cf4b7efd5bc17d326ec9535/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/300f54ebc0aaecb05cf4b7efd5bc17d326ec9535/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=300f54ebc0aaecb05cf4b7efd5bc17d326ec9535", "patch": "@@ -117,6 +117,7 @@ export operators;\n export type_err, terr_vstore_kind;\n export type_err_to_str;\n export type_needs_drop;\n+export type_is_empty;\n export type_is_integral;\n export type_is_numeric;\n export type_is_pod;\n@@ -2748,6 +2749,15 @@ fn enum_is_univariant(cx: ctxt, id: ast::def_id) -> bool {\n     vec::len(*enum_variants(cx, id)) == 1u\n }\n \n+fn type_is_empty(cx: ctxt, t: t) -> bool {\n+    alt ty::get(t).struct {\n+       ty_enum(did, _) {\n+           (*enum_variants(cx, did)).is_empty()\n+        }\n+       _ { false }\n+     }\n+}\n+\n fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[variant_info] {\n     alt cx.enum_var_cache.find(id) {\n       some(variants) { ret variants; }"}, {"sha": "92e18bde0122b96740a300cfe11e1ce8f91df54a", "filename": "src/test/run-pass/issue-3037.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/300f54ebc0aaecb05cf4b7efd5bc17d326ec9535/src%2Ftest%2Frun-pass%2Fissue-3037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/300f54ebc0aaecb05cf4b7efd5bc17d326ec9535/src%2Ftest%2Frun-pass%2Fissue-3037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3037.rs?ref=300f54ebc0aaecb05cf4b7efd5bc17d326ec9535", "patch": "@@ -0,0 +1,11 @@\n+enum what { }\n+\n+fn what_to_str(x: what) -> ~str\n+{\n+    alt x {\n+    }\n+}\n+\n+fn main()\n+{\n+}"}]}