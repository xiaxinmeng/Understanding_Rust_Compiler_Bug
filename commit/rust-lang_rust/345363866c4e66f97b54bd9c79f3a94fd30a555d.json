{"sha": "345363866c4e66f97b54bd9c79f3a94fd30a555d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NTM2Mzg2NmM0ZTY2Zjk3YjU0YmQ5Yzc5ZjNhOTRmZDMwYTU1NWQ=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-23T00:44:14Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-23T18:14:14Z"}, "message": "Update macro invocation syntax in documentation.", "tree": {"sha": "1c11f8aee788aa7f81be2cb78579d648c71e4400", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c11f8aee788aa7f81be2cb78579d648c71e4400"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/345363866c4e66f97b54bd9c79f3a94fd30a555d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/345363866c4e66f97b54bd9c79f3a94fd30a555d", "html_url": "https://github.com/rust-lang/rust/commit/345363866c4e66f97b54bd9c79f3a94fd30a555d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/345363866c4e66f97b54bd9c79f3a94fd30a555d/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29f32b4a7298b0807408658bc8add1de8a06ab12", "url": "https://api.github.com/repos/rust-lang/rust/commits/29f32b4a7298b0807408658bc8add1de8a06ab12", "html_url": "https://github.com/rust-lang/rust/commit/29f32b4a7298b0807408658bc8add1de8a06ab12"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "ee47fd033c4bc7f9c81cb82c78b262b5f9cfdf7a", "filename": "doc/rust.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/345363866c4e66f97b54bd9c79f3a94fd30a555d/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/345363866c4e66f97b54bd9c79f3a94fd30a555d/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=345363866c4e66f97b54bd9c79f3a94fd30a555d", "patch": "@@ -2254,10 +2254,10 @@ log(core::error, ~\"file not found: \" + filename);\n log(error, ~\"file not found: \" + filename);\n \n // Formatting the message using a format-string and #fmt\n-log(error, #fmt(\"file not found: %s\", filename));\n+log(error, fmt!(\"file not found: %s\", filename));\n \n // Using the #error macro, that expands to the previous call.\n-#error(\"file not found: %s\", filename);\n+error!(\"file not found: %s\", filename);\n ~~~~\n \n A `log` expression is *not evaluated* when logging at the specified\n@@ -2328,7 +2328,7 @@ and the syntax to expand into. An example:\n #macro([#apply[fn, [args, ...]], fn(args, ...)]);\n ~~~~~~~~\n \n-In this case, the invocation `#apply[sum, 5, 8, 6]` expands to\n+In this case, the invocation `apply!(sum, 5, 8, 6)` expands to\n `sum(5,8,6)`. If `...` follows an expression (which need not be as\n simple as a single identifier) in the input syntax, the matcher will expect an\n arbitrary number of occurrences of the thing preceding it, and bind syntax to\n@@ -2348,12 +2348,12 @@ sophisticated example:\n #macro([#unzip_literals[[x, y], ...], [[x, ...], [y, ...]]]);\n ~~~~~~~~\n \n-In this case, `#zip_literals[[1,2,3], [1,2,3]]` expands to\n-`[[1,1],[2,2],[3,3]]`, and `#unzip_literals[[1,1], [2,2], [3,3]]`\n+In this case, `zip_literals!([1,2,3], [1,2,3])` expands to\n+`[[1,1],[2,2],[3,3]]`, and `unzip_literals!([1,1], [2,2], [3,3])`\n expands to `[[1,2,3],[1,2,3]]`.\n \n Macro expansion takes place outside-in: that is,\n-`#unzip_literals[#zip_literals[[1,2,3],[1,2,3]]]` will fail because\n+`unzip_literals!(zip_literals!([1,2,3],[1,2,3]))` will fail because\n `unzip_literals` expects a list, not a macro invocation, as an argument.\n \n The macro system currently has some limitations. It's not possible to"}, {"sha": "0ce0f4b9c4d97a558f1a5259372daf35503685da", "filename": "doc/tutorial.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/345363866c4e66f97b54bd9c79f3a94fd30a555d/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/345363866c4e66f97b54bd9c79f3a94fd30a555d/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=345363866c4e66f97b54bd9c79f3a94fd30a555d", "patch": "@@ -100,7 +100,7 @@ fn main() {\n     // Report the results as the games complete\n     for range(0, times) |round| {\n         let winner = result_from_game.recv();\n-        println(#fmt(\"%s wins round #%u\", winner, round));\n+        println(fmt!(\"%s wins round #%u\", winner, round));\n     }\n \n     fn play_game(player1: ~str, player2: ~str) -> ~str {\n@@ -650,7 +650,7 @@ one is `#fmt`, a printf-style text formatting macro that is expanded\n at compile time.\n \n ~~~~\n-io::println(#fmt(\"%s is %d\", ~\"the answer\", 42));\n+io::println(fmt!(\"%s is %d\", ~\"the answer\", 42));\n ~~~~\n \n `#fmt` supports most of the directives that [printf][pf] supports, but\n@@ -664,7 +664,7 @@ All syntax extensions look like `#word`. Another built-in one is\n compile-time.\n \n ~~~~\n-io::println(#env(\"PATH\"));\n+io::println(env!(\"PATH\"));\n ~~~~\n \n # Control structures\n@@ -908,8 +908,8 @@ and will log the formatted string:\n \n ~~~~\n # fn get_error_string() -> ~str { ~\"boo\" }\n-#warn(\"only %d seconds remaining\", 10);\n-#error(\"fatal: %s\", get_error_string());\n+warn!(\"only %d seconds remaining\", 10);\n+error!(\"fatal: %s\", get_error_string());\n ~~~~\n \n Because the macros `#debug`, `#warn`, and `#error` expand to calls to `log`,\n@@ -1578,7 +1578,7 @@ the enclosing scope.\n fn call_closure_with_ten(b: fn(int)) { b(10); }\n \n let captured_var = 20;\n-let closure = |arg| println(#fmt(\"captured_var=%d, arg=%d\", captured_var, arg));\n+let closure = |arg| println(fmt!(\"captured_var=%d, arg=%d\", captured_var, arg));\n \n call_closure_with_ten(closure);\n ~~~~\n@@ -1706,7 +1706,7 @@ structure.\n # fn each(v: ~[int], op: fn(int)) {}\n # fn do_some_work(i: int) { }\n each(~[1, 2, 3], |n| {\n-    #debug(\"%i\", n);\n+    debug!(\"%i\", n);\n     do_some_work(n);\n });\n ~~~~\n@@ -1718,7 +1718,7 @@ call that can be written more like a built-in control structure:\n # fn each(v: ~[int], op: fn(int)) {}\n # fn do_some_work(i: int) { }\n do each(~[1, 2, 3]) |n| {\n-    #debug(\"%i\", n);\n+    debug!(\"%i\", n);\n     do_some_work(n);\n }\n ~~~~\n@@ -1735,7 +1735,7 @@ takes a final closure argument.\n import task::spawn;\n \n do spawn() || {\n-    #debug(\"I'm a task, whatever\");\n+    debug!(\"I'm a task, whatever\");\n }\n ~~~~\n \n@@ -1746,7 +1746,7 @@ there?\n ~~~~\n # import task::spawn;\n do spawn {\n-   #debug(\"Kablam!\");\n+   debug!(\"Kablam!\");\n }\n ~~~~\n \n@@ -2558,7 +2558,7 @@ extern mod crypto {\n \n fn as_hex(data: ~[u8]) -> ~str {\n     let mut acc = ~\"\";\n-    for data.each |byte| { acc += #fmt(\"%02x\", byte as uint); }\n+    for data.each |byte| { acc += fmt!(\"%02x\", byte as uint); }\n     return acc;\n }\n \n@@ -2759,7 +2759,7 @@ fn unix_time_in_microseconds() -> u64 unsafe {\n     return (x.tv_sec as u64) * 1000_000_u64 + (x.tv_usec as u64);\n }\n \n-# fn main() { assert #fmt(\"%?\", unix_time_in_microseconds()) != ~\"\"; }\n+# fn main() { assert fmt!(\"%?\", unix_time_in_microseconds()) != ~\"\"; }\n ~~~~\n \n The `#[nolink]` attribute indicates that there's no foreign library to\n@@ -2799,7 +2799,7 @@ let some_value = 22;\n \n do spawn {\n     println(~\"This executes in the child task.\");\n-    println(#fmt(\"%d\", some_value));\n+    println(fmt!(\"%d\", some_value));\n }\n ~~~~\n "}]}