{"sha": "f97e896fd669b61051027d76d6dccb89c72c4c52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5N2U4OTZmZDY2OWI2MTA1MTAyN2Q3NmQ2ZGNjYjg5YzcyYzRjNTI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-05T04:11:27Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-05T04:11:27Z"}, "message": "Simplify `fold_attribute`.\n\nIt doesn't need to return an `Option`.", "tree": {"sha": "8c2b3559423d67572625270d54e7f0a3ee9d7407", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c2b3559423d67572625270d54e7f0a3ee9d7407"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f97e896fd669b61051027d76d6dccb89c72c4c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f97e896fd669b61051027d76d6dccb89c72c4c52", "html_url": "https://github.com/rust-lang/rust/commit/f97e896fd669b61051027d76d6dccb89c72c4c52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f97e896fd669b61051027d76d6dccb89c72c4c52/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eea2dfe76f7afea0df3ae99fcdd30f1afbf4402d", "url": "https://api.github.com/repos/rust-lang/rust/commits/eea2dfe76f7afea0df3ae99fcdd30f1afbf4402d", "html_url": "https://github.com/rust-lang/rust/commit/eea2dfe76f7afea0df3ae99fcdd30f1afbf4402d"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "72e0a86bf59093295c5bdce552c837dea889da0f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f97e896fd669b61051027d76d6dccb89c72c4c52/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97e896fd669b61051027d76d6dccb89c72c4c52/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f97e896fd669b61051027d76d6dccb89c72c4c52", "patch": "@@ -1465,7 +1465,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         noop_fold_generic_param(param, self)\n     }\n \n-    fn fold_attribute(&mut self, at: ast::Attribute) -> Option<ast::Attribute> {\n+    fn fold_attribute(&mut self, at: ast::Attribute) -> ast::Attribute {\n         // turn `#[doc(include=\"filename\")]` attributes into `#[doc(include(file=\"filename\",\n         // contents=\"file contents\")]` attributes\n         if !at.check_name(\"doc\") {\n@@ -1585,10 +1585,8 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n \n             let meta = attr::mk_list_item(DUMMY_SP, Ident::from_str(\"doc\"), items);\n             match at.style {\n-                ast::AttrStyle::Inner =>\n-                    Some(attr::mk_spanned_attr_inner(at.span, at.id, meta)),\n-                ast::AttrStyle::Outer =>\n-                    Some(attr::mk_spanned_attr_outer(at.span, at.id, meta)),\n+                ast::AttrStyle::Inner => attr::mk_spanned_attr_inner(at.span, at.id, meta),\n+                ast::AttrStyle::Outer => attr::mk_spanned_attr_outer(at.span, at.id, meta),\n             }\n         } else {\n             noop_fold_attribute(at, self)"}, {"sha": "1ab1de1ba5c33cfcd93fa222a645475a2da87a99", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f97e896fd669b61051027d76d6dccb89c72c4c52/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97e896fd669b61051027d76d6dccb89c72c4c52/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=f97e896fd669b61051027d76d6dccb89c72c4c52", "patch": "@@ -209,7 +209,7 @@ pub trait Folder : Sized {\n         noop_fold_label(label, self)\n     }\n \n-    fn fold_attribute(&mut self, at: Attribute) -> Option<Attribute> {\n+    fn fold_attribute(&mut self, at: Attribute) -> Attribute {\n         noop_fold_attribute(at, self)\n     }\n \n@@ -313,7 +313,7 @@ pub fn noop_fold_use_tree<T: Folder>(use_tree: UseTree, fld: &mut T) -> UseTree\n }\n \n pub fn fold_attrs<T: Folder>(attrs: Vec<Attribute>, fld: &mut T) -> Vec<Attribute> {\n-    attrs.move_flat_map(|x| fld.fold_attribute(x))\n+    attrs.move_map(|x| fld.fold_attribute(x))\n }\n \n pub fn fold_thin_attrs<T: Folder>(attrs: ThinVec<Attribute>, fld: &mut T) -> ThinVec<Attribute> {\n@@ -485,15 +485,15 @@ pub fn noop_fold_local<T: Folder>(l: P<Local>, fld: &mut T) -> P<Local> {\n     })\n }\n \n-pub fn noop_fold_attribute<T: Folder>(attr: Attribute, fld: &mut T) -> Option<Attribute> {\n-    Some(Attribute {\n+pub fn noop_fold_attribute<T: Folder>(attr: Attribute, fld: &mut T) -> Attribute {\n+    Attribute {\n         id: attr.id,\n         style: attr.style,\n         path: fld.fold_path(attr.path),\n         tokens: fld.fold_tts(attr.tokens),\n         is_sugared_doc: attr.is_sugared_doc,\n         span: fld.new_span(attr.span),\n-    })\n+    }\n }\n \n pub fn noop_fold_mac<T: Folder>(Spanned {node, span}: Mac, fld: &mut T) -> Mac {\n@@ -678,14 +678,10 @@ pub fn noop_fold_param_bound<T>(pb: GenericBound, fld: &mut T) -> GenericBound w\n }\n \n pub fn noop_fold_generic_param<T: Folder>(param: GenericParam, fld: &mut T) -> GenericParam {\n-    let attrs: Vec<_> = param.attrs.into();\n     GenericParam {\n         ident: fld.fold_ident(param.ident),\n         id: fld.new_id(param.id),\n-        attrs: attrs.into_iter()\n-                    .flat_map(|x| fld.fold_attribute(x).into_iter())\n-                    .collect::<Vec<_>>()\n-                    .into(),\n+        attrs: fold_thin_attrs(param.attrs, fld),\n         bounds: param.bounds.move_map(|l| noop_fold_param_bound(l, fld)),\n         kind: match param.kind {\n             GenericParamKind::Lifetime => GenericParamKind::Lifetime,"}]}