{"sha": "aebea522632af459763c9aa75358906199066a6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYmVhNTIyNjMyYWY0NTk3NjNjOWFhNzUzNTg5MDYxOTkwNjZhNmQ=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-21T16:25:28Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-11-26T22:14:38Z"}, "message": "Skip most of create_substs_for_ast_path if type is not generic\n\nCo-authored-by: varkor <github@varkor.com>", "tree": {"sha": "2b3846346da7bfbcaa6e457d3d06fda3f29f1ee4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b3846346da7bfbcaa6e457d3d06fda3f29f1ee4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aebea522632af459763c9aa75358906199066a6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aebea522632af459763c9aa75358906199066a6d", "html_url": "https://github.com/rust-lang/rust/commit/aebea522632af459763c9aa75358906199066a6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aebea522632af459763c9aa75358906199066a6d/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72da5a9d85a522b11e80d0fdd1fd95247d442604", "url": "https://api.github.com/repos/rust-lang/rust/commits/72da5a9d85a522b11e80d0fdd1fd95247d442604", "html_url": "https://github.com/rust-lang/rust/commit/72da5a9d85a522b11e80d0fdd1fd95247d442604"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "2f64597a510f090367505aa9303db3a47a3673d4", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aebea522632af459763c9aa75358906199066a6d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebea522632af459763c9aa75358906199066a6d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=aebea522632af459763c9aa75358906199066a6d", "patch": "@@ -337,6 +337,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             infer_args,\n         );\n \n+        // Skip processing if type has no generic parameters.\n+        // Traits always have `Self` as a generic parameter, which means they will not return early\n+        // here and so associated type bindings will be handled regardless of whether there are any\n+        // non-`Self` generic parameters.\n+        if generic_params.params.len() == 0 {\n+            return (tcx.intern_substs(&[]), vec![], arg_count);\n+        }\n+\n         let is_object = self_ty.map_or(false, |ty| ty == self.tcx().types.trait_object_dummy_self);\n \n         struct SubstsForAstPathCtxt<'a, 'tcx> {"}]}