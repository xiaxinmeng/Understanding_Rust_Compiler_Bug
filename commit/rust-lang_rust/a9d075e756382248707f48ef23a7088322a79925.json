{"sha": "a9d075e756382248707f48ef23a7088322a79925", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZDA3NWU3NTYzODIyNDg3MDdmNDhlZjIzYTcwODgzMjJhNzk5MjU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-25T23:20:24Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-27T20:46:23Z"}, "message": "Revert crate root changes", "tree": {"sha": "7c3498cde1ccff62d1aa11a417011da24494f7dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c3498cde1ccff62d1aa11a417011da24494f7dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9d075e756382248707f48ef23a7088322a79925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d075e756382248707f48ef23a7088322a79925", "html_url": "https://github.com/rust-lang/rust/commit/a9d075e756382248707f48ef23a7088322a79925", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9d075e756382248707f48ef23a7088322a79925/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6642462ef67c4ff4fbf55dce852f1b01ca3f9edf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6642462ef67c4ff4fbf55dce852f1b01ca3f9edf", "html_url": "https://github.com/rust-lang/rust/commit/6642462ef67c4ff4fbf55dce852f1b01ca3f9edf"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "6fffde7cab50cdc578839693e0cde37c8b8028c6", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9d075e756382248707f48ef23a7088322a79925/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d075e756382248707f48ef23a7088322a79925/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=a9d075e756382248707f48ef23a7088322a79925", "patch": "@@ -561,7 +561,13 @@ impl<'hir> Map<'hir> {\n     /// Retrieve the Node corresponding to `id`, returning None if\n     /// cannot be found.\n     pub fn find(&self, id: NodeId) -> Option<Node<'hir>> {\n-        let result = self.find_entry(id).map(|x| x.node);\n+        let result = self.find_entry(id).and_then(|entry| {\n+            if let Node::Crate = entry.node {\n+                None\n+            } else {\n+                Some(entry.node)\n+            }\n+        });\n         if result.is_some() {\n             self.read(id);\n         }\n@@ -632,6 +638,9 @@ impl<'hir> Map<'hir> {\n             }\n \n             if let Some(entry) = self.find_entry(parent_node) {\n+                if let Node::Crate = entry.node {\n+                    return Err(id);\n+                }\n                 if found(&entry.node) {\n                     return Ok(parent_node);\n                 } else if bail_early(&entry.node) {"}]}