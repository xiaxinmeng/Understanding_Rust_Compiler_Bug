{"sha": "dfbb6b246da3758911d5625a3b6ec4ecec9a01ab", "node_id": "C_kwDOAAsO6NoAKGRmYmI2YjI0NmRhMzc1ODkxMWQ1NjI1YTNiNmVjNGVjZWM5YTAxYWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-19T18:19:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-19T18:19:47Z"}, "message": "Rollup merge of #92630 - steffahn:lift_bounds_on_BuildHasherDefault, r=yaahc\n\nChange PhantomData type for `BuildHasherDefault` (and more)\n\nChanges `PhantomData<H>` to `PhantomData<fn() -> H>` for `BuildHasherDefault`. This preserves the covariance of `H`, while it lifts the currently inferred unnecessary bounds like [`H: Send` for `BuildHasherDefault<H>: Send`](https://doc.rust-lang.org/1.57.0/std/hash/struct.BuildHasherDefault.html#impl-Send), etc.\n\n_Edit:_ Also does a similar change for `iter::Empty` and `future::Pending`.", "tree": {"sha": "727466e77c6132880b74be0980c0bb76685c4d3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/727466e77c6132880b74be0980c0bb76685c4d3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfbb6b246da3758911d5625a3b6ec4ecec9a01ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh6FZDCRBK7hj4Ov3rIwAAXeQIAANZAKvEmg7Xtu4tz7PgFUdc\n9vSSd8QjzJUSPYPrCyHP1+0gGDQcwcaw1kZ6ubBZ4ICVu3qUUmM4b3VgWrkbVveP\naamDLcCY5kK1FfW7d2b0Nbjym/Vcmk6nidp/indmn1SJCmiLdVq9Sac7+im17xz9\n7jE3X255r8LzzLWQkVbQzE53qSaIJFkb/JhbZe4Ne1NiqPlHL3rlrSCCrCOTYQ9G\najIhKOWdTcGZ6YYCVczhh+pvZAzeYWexss+E39MHW83ZyH+Fm6k2PrRxbfbIEq3U\nzJbuDgmwCu5fe/rIvFKh7IQ7SPPtnmJcidPE645ZU7JwQSzAWWRvXaNUcGg6CmE=\n=4hv8\n-----END PGP SIGNATURE-----\n", "payload": "tree 727466e77c6132880b74be0980c0bb76685c4d3d\nparent 715cda2e81c769277e63c08a3a9966f8cdb6b3c5\nparent 731bbae816e49cb404f402e8a5d392059e417ee5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642616387 +0100\ncommitter GitHub <noreply@github.com> 1642616387 +0100\n\nRollup merge of #92630 - steffahn:lift_bounds_on_BuildHasherDefault, r=yaahc\n\nChange PhantomData type for `BuildHasherDefault` (and more)\n\nChanges `PhantomData<H>` to `PhantomData<fn() -> H>` for `BuildHasherDefault`. This preserves the covariance of `H`, while it lifts the currently inferred unnecessary bounds like [`H: Send` for `BuildHasherDefault<H>: Send`](https://doc.rust-lang.org/1.57.0/std/hash/struct.BuildHasherDefault.html#impl-Send), etc.\n\n_Edit:_ Also does a similar change for `iter::Empty` and `future::Pending`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbb6b246da3758911d5625a3b6ec4ecec9a01ab", "html_url": "https://github.com/rust-lang/rust/commit/dfbb6b246da3758911d5625a3b6ec4ecec9a01ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfbb6b246da3758911d5625a3b6ec4ecec9a01ab/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "715cda2e81c769277e63c08a3a9966f8cdb6b3c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/715cda2e81c769277e63c08a3a9966f8cdb6b3c5", "html_url": "https://github.com/rust-lang/rust/commit/715cda2e81c769277e63c08a3a9966f8cdb6b3c5"}, {"sha": "731bbae816e49cb404f402e8a5d392059e417ee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/731bbae816e49cb404f402e8a5d392059e417ee5", "html_url": "https://github.com/rust-lang/rust/commit/731bbae816e49cb404f402e8a5d392059e417ee5"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "2877e66eca8850949df0f832ac8873dc2c4b2ad2", "filename": "library/core/src/future/pending.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dfbb6b246da3758911d5625a3b6ec4ecec9a01ab/library%2Fcore%2Fsrc%2Ffuture%2Fpending.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbb6b246da3758911d5625a3b6ec4ecec9a01ab/library%2Fcore%2Fsrc%2Ffuture%2Fpending.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fpending.rs?ref=dfbb6b246da3758911d5625a3b6ec4ecec9a01ab", "patch": "@@ -12,7 +12,7 @@ use crate::task::{Context, Poll};\n #[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n pub struct Pending<T> {\n-    _data: marker::PhantomData<T>,\n+    _data: marker::PhantomData<fn() -> T>,\n }\n \n /// Creates a future which never resolves, representing a computation that never\n@@ -43,9 +43,6 @@ impl<T> Future for Pending<T> {\n     }\n }\n \n-#[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n-impl<T> Unpin for Pending<T> {}\n-\n #[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n impl<T> Debug for Pending<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "53de8b42c059f219b586be1a9a6daf0a906db6c5", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbb6b246da3758911d5625a3b6ec4ecec9a01ab/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbb6b246da3758911d5625a3b6ec4ecec9a01ab/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=dfbb6b246da3758911d5625a3b6ec4ecec9a01ab", "patch": "@@ -602,7 +602,7 @@ pub trait BuildHasher {\n /// [`HashSet`]: ../../std/collections/struct.HashSet.html\n /// [zero-sized]: https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts\n #[stable(since = \"1.7.0\", feature = \"build_hasher\")]\n-pub struct BuildHasherDefault<H>(marker::PhantomData<H>);\n+pub struct BuildHasherDefault<H>(marker::PhantomData<fn() -> H>);\n \n #[stable(since = \"1.9.0\", feature = \"core_impl_debug\")]\n impl<H> fmt::Debug for BuildHasherDefault<H> {"}, {"sha": "98734c527f2b9c35874027386cb9c1008276a7e3", "filename": "library/core/src/iter/sources/empty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfbb6b246da3758911d5625a3b6ec4ecec9a01ab/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbb6b246da3758911d5625a3b6ec4ecec9a01ab/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs?ref=dfbb6b246da3758911d5625a3b6ec4ecec9a01ab", "patch": "@@ -22,17 +22,17 @@ pub const fn empty<T>() -> Empty<T> {\n     Empty(marker::PhantomData)\n }\n \n+// Newtype for use in `PhantomData` to avoid\n+// > error: const-stable function cannot use `#[feature(const_fn_fn_ptr_basics)]`\n+// in `const fn empty<T>()` above.\n+struct FnReturning<T>(fn() -> T);\n+\n /// An iterator that yields nothing.\n ///\n /// This `struct` is created by the [`empty()`] function. See its documentation for more.\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n-pub struct Empty<T>(marker::PhantomData<T>);\n-\n-#[stable(feature = \"iter_empty_send_sync\", since = \"1.42.0\")]\n-unsafe impl<T> Send for Empty<T> {}\n-#[stable(feature = \"iter_empty_send_sync\", since = \"1.42.0\")]\n-unsafe impl<T> Sync for Empty<T> {}\n+pub struct Empty<T>(marker::PhantomData<FnReturning<T>>);\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T> fmt::Debug for Empty<T> {"}]}