{"sha": "8d879aa0f24ad8c673eef4354364cba300d108ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkODc5YWEwZjI0YWQ4YzY3M2VlZjQzNTQzNjRjYmEzMDBkMTA4ZWU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-09-03T15:21:52Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-09-13T19:00:28Z"}, "message": "Simplify std::os module reexports to fix rustdoc linking issues", "tree": {"sha": "23f2e8474de8f389ff2bef8b12a31bfef73da0fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23f2e8474de8f389ff2bef8b12a31bfef73da0fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d879aa0f24ad8c673eef4354364cba300d108ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d879aa0f24ad8c673eef4354364cba300d108ee", "html_url": "https://github.com/rust-lang/rust/commit/8d879aa0f24ad8c673eef4354364cba300d108ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d879aa0f24ad8c673eef4354364cba300d108ee/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cd17addad57e2aaf5dc6d3febe042ebb733bee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd17addad57e2aaf5dc6d3febe042ebb733bee3", "html_url": "https://github.com/rust-lang/rust/commit/1cd17addad57e2aaf5dc6d3febe042ebb733bee3"}], "stats": {"total": 183, "additions": 74, "deletions": 109}, "files": [{"sha": "1a4d77e00bf07210bbe3c41dd05fb234d4f3b0df", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 74, "deletions": 109, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/8d879aa0f24ad8c673eef4354364cba300d108ee/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d879aa0f24ad8c673eef4354364cba300d108ee/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=8d879aa0f24ad8c673eef4354364cba300d108ee", "patch": "@@ -10,117 +10,82 @@ pub mod raw;\n // of a macro that is not vendored by Rust and included in the toolchain.\n // See https://github.com/rust-analyzer/rust-analyzer/issues/6038.\n \n-#[cfg(all(\n-    doc,\n-    not(any(\n-        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n-        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n-    ))\n-))]\n-#[path = \".\"]\n-mod doc {\n-    // When documenting std we want to show the `unix`, `windows`, `linux` and `wasi`\n-    // modules as these are the \"main modules\" that are used across platforms,\n-    // so these modules are enabled when `cfg(doc)` is set.\n-    // This should help show platform-specific functionality in a hopefully cross-platform\n-    // way in the documentation.\n-\n-    pub mod unix;\n-\n-    pub mod linux;\n-\n-    pub mod wasi;\n-\n-    pub mod windows;\n-}\n-#[cfg(all(\n-    doc,\n-    any(\n-        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n-        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n-    )\n-))]\n-mod doc {\n-    // On certain platforms right now the \"main modules\" modules that are\n-    // documented don't compile (missing things in `libc` which is empty),\n-    // so just omit them with an empty module.\n-\n-    #[unstable(issue = \"none\", feature = \"std_internals\")]\n-    pub mod unix {}\n-\n-    #[unstable(issue = \"none\", feature = \"std_internals\")]\n-    pub mod linux {}\n-\n-    #[unstable(issue = \"none\", feature = \"std_internals\")]\n-    pub mod wasi {}\n-\n-    #[unstable(issue = \"none\", feature = \"std_internals\")]\n-    pub mod windows {}\n+// On certain platforms right now the \"main modules\" modules that are\n+// documented don't compile (missing things in `libc` which is empty),\n+// so just omit them with an empty module and add the \"unstable\" attribute.\n+\n+#[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))]\n+pub mod fortanix_sgx;\n+\n+// Unix, linux, wasi and windows are handled a bit differently.\n+cfg_if::cfg_if! {\n+    if #[cfg(all(\n+            doc,\n+            any(\n+                all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+                all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+            )\n+        ))]\n+    {\n+        #[unstable(issue = \"none\", feature = \"std_internals\")]\n+        pub mod unix {}\n+        #[unstable(issue = \"none\", feature = \"std_internals\")]\n+        pub mod linux {}\n+        #[unstable(issue = \"none\", feature = \"std_internals\")]\n+        pub mod wasi {}\n+        #[unstable(issue = \"none\", feature = \"std_internals\")]\n+        pub mod windows {}\n+    } else {\n+        #[cfg(target_os = \"hermit\")]\n+        #[path = \"hermit/mod.rs\"]\n+        pub mod unix;\n+\n+        #[cfg(any(unix, doc))]\n+        pub mod unix;\n+\n+        #[cfg(any(target_os = \"linux\", target_os = \"l4re\", doc))]\n+        pub mod linux;\n+\n+        #[cfg(any(target_os = \"wasi\", doc))]\n+        pub mod wasi;\n+\n+        #[cfg(any(windows, doc))]\n+        pub mod windows;\n+    }\n }\n-#[cfg(doc)]\n-#[stable(feature = \"os\", since = \"1.0.0\")]\n-pub use doc::*;\n-\n-#[cfg(not(doc))]\n-#[path = \".\"]\n-mod imp {\n-    // If we're not documenting std then we only expose modules appropriate for the\n-    // current platform.\n-\n-    #[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))]\n-    pub mod fortanix_sgx;\n-\n-    #[cfg(target_os = \"hermit\")]\n-    #[path = \"hermit/mod.rs\"]\n-    pub mod unix;\n \n-    #[cfg(target_os = \"android\")]\n-    pub mod android;\n-    #[cfg(target_os = \"dragonfly\")]\n-    pub mod dragonfly;\n-    #[cfg(target_os = \"emscripten\")]\n-    pub mod emscripten;\n-    #[cfg(target_os = \"espidf\")]\n-    pub mod espidf;\n-    #[cfg(target_os = \"freebsd\")]\n-    pub mod freebsd;\n-    #[cfg(target_os = \"fuchsia\")]\n-    pub mod fuchsia;\n-    #[cfg(target_os = \"haiku\")]\n-    pub mod haiku;\n-    #[cfg(target_os = \"illumos\")]\n-    pub mod illumos;\n-    #[cfg(target_os = \"ios\")]\n-    pub mod ios;\n-    #[cfg(target_os = \"l4re\")]\n-    pub mod linux;\n-    #[cfg(target_os = \"linux\")]\n-    pub mod linux;\n-    #[cfg(target_os = \"macos\")]\n-    pub mod macos;\n-    #[cfg(target_os = \"netbsd\")]\n-    pub mod netbsd;\n-    #[cfg(target_os = \"openbsd\")]\n-    pub mod openbsd;\n-    #[cfg(target_os = \"redox\")]\n-    pub mod redox;\n-    #[cfg(target_os = \"solaris\")]\n-    pub mod solaris;\n-    #[cfg(unix)]\n-    pub mod unix;\n-\n-    #[cfg(target_os = \"vxworks\")]\n-    pub mod vxworks;\n-\n-    #[cfg(target_os = \"wasi\")]\n-    pub mod wasi;\n-\n-    #[cfg(windows)]\n-    pub mod windows;\n-}\n-#[cfg(not(doc))]\n-#[stable(feature = \"os\", since = \"1.0.0\")]\n-pub use imp::*;\n+// Others.\n+#[cfg(target_os = \"android\")]\n+pub mod android;\n+#[cfg(target_os = \"dragonfly\")]\n+pub mod dragonfly;\n+#[cfg(target_os = \"emscripten\")]\n+pub mod emscripten;\n+#[cfg(target_os = \"espidf\")]\n+pub mod espidf;\n+#[cfg(target_os = \"freebsd\")]\n+pub mod freebsd;\n+#[cfg(target_os = \"fuchsia\")]\n+pub mod fuchsia;\n+#[cfg(target_os = \"haiku\")]\n+pub mod haiku;\n+#[cfg(target_os = \"illumos\")]\n+pub mod illumos;\n+#[cfg(target_os = \"ios\")]\n+pub mod ios;\n+#[cfg(target_os = \"macos\")]\n+pub mod macos;\n+#[cfg(target_os = \"netbsd\")]\n+pub mod netbsd;\n+#[cfg(target_os = \"openbsd\")]\n+pub mod openbsd;\n+#[cfg(target_os = \"redox\")]\n+pub mod redox;\n+#[cfg(target_os = \"solaris\")]\n+pub mod solaris;\n+\n+#[cfg(target_os = \"vxworks\")]\n+pub mod vxworks;\n \n #[cfg(any(unix, target_os = \"wasi\", doc))]\n mod fd;"}]}