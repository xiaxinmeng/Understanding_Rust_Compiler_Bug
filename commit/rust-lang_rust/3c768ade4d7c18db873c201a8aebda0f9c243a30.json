{"sha": "3c768ade4d7c18db873c201a8aebda0f9c243a30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNzY4YWRlNGQ3YzE4ZGI4NzNjMjAxYThhZWJkYTBmOWMyNDNhMzA=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-27T19:11:15Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-06-03T17:19:29Z"}, "message": "Fix issue with recursively encountering uninhabited type", "tree": {"sha": "0698f59c338effc3ce747a5a539b66b9c6975510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0698f59c338effc3ce747a5a539b66b9c6975510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c768ade4d7c18db873c201a8aebda0f9c243a30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c768ade4d7c18db873c201a8aebda0f9c243a30", "html_url": "https://github.com/rust-lang/rust/commit/3c768ade4d7c18db873c201a8aebda0f9c243a30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c768ade4d7c18db873c201a8aebda0f9c243a30/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e121d9671afe4eae1f418db14a6fdae07652c51c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e121d9671afe4eae1f418db14a6fdae07652c51c", "html_url": "https://github.com/rust-lang/rust/commit/e121d9671afe4eae1f418db14a6fdae07652c51c"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "bbec42b238f46be2becaf107ef46a24ce61d6a30", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3c768ade4d7c18db873c201a8aebda0f9c243a30/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c768ade4d7c18db873c201a8aebda0f9c243a30/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=3c768ade4d7c18db873c201a8aebda0f9c243a30", "patch": "@@ -48,14 +48,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         }\n \n         let ty = cx.tables.expr_ty(&expr);\n-        let type_permits_lack_of_use = if ty.is_unit()\n-            || cx.tcx.is_ty_uninhabited_from(\n-                cx.tcx.hir().get_module_parent_by_hir_id(expr.hir_id), ty)\n-        {\n-            true\n-        } else {\n-            check_must_use_ty(cx, ty, &expr, s.span)\n-        };\n+        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span);\n \n         let mut fn_warned = false;\n         let mut op_warned = false;\n@@ -135,12 +128,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         }\n \n         // Returns whether an error has been emitted (and thus another does not need to be later).\n-        fn check_must_use_ty(\n-            cx: &LateContext<'_, '_>,\n-            ty: Ty<'_>,\n+        fn check_must_use_ty<'tcx>(\n+            cx: &LateContext<'_, 'tcx>,\n+            ty: Ty<'tcx>,\n             expr: &hir::Expr,\n             span: Span,\n         ) -> bool {\n+            if ty.is_unit() || cx.tcx.is_ty_uninhabited_from(\n+                cx.tcx.hir().get_module_parent_by_hir_id(expr.hir_id), ty)\n+            {\n+                return true;\n+            }\n+\n             match ty.sty {\n                 ty::Adt(def, _) => check_must_use_def(cx, def.did, span, \"\", \"\"),\n                 ty::Opaque(def, _) => {"}]}