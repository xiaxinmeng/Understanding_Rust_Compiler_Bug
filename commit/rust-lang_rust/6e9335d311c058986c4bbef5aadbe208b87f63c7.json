{"sha": "6e9335d311c058986c4bbef5aadbe208b87f63c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlOTMzNWQzMTFjMDU4OTg2YzRiYmVmNWFhZGJlMjA4Yjg3ZjYzYzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-20T10:56:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-20T10:56:59Z"}, "message": "Merge #2607\n\n2607: More ground work for local defs r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "00ecd85453675103fe415a7b28c565a2a9e94853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00ecd85453675103fe415a7b28c565a2a9e94853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e9335d311c058986c4bbef5aadbe208b87f63c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/Kj7CRBK7hj4Ov3rIwAAdHIIAIvVrQajpHZqILY3JkrVcNCI\n0FzRYQmOY3AD/xuKmWi5qb+x65ujevmOQpMtdAIZgEZyvfUE5CKCAjlGzOVP7phQ\noyanE3yrtnMAdStJ+7FwbVKJs/mWCDZ23ydW1sCjmzsqSa73H13pvmgGrdCvKu6W\n4QKc60EAKdSxzQTjiONg1hCW3KYkSEiLwI0XTubEZ8PrnZso2zAzlmb7JIoBAqpQ\nPDLneW8A02KMHe+oZM978iCBVYhyek1teGuIL1VEgTqMSYvFjxZ2MlyJxg0+cZVg\ngzb9vIt0yeDtffNuy0omJsr7ovpzQkjFeDgCjhhO4P4QLsQN7Xmz1BGTNlzMjWw=\n=Ispa\n-----END PGP SIGNATURE-----\n", "payload": "tree 00ecd85453675103fe415a7b28c565a2a9e94853\nparent 08c6933104baca84fd4135a76cdc7daf60a0c631\nparent 67c2aea182c375108ebb8b923f5679e4f7fef1df\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576839419 +0000\ncommitter GitHub <noreply@github.com> 1576839419 +0000\n\nMerge #2607\n\n2607: More ground work for local defs r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9335d311c058986c4bbef5aadbe208b87f63c7", "html_url": "https://github.com/rust-lang/rust/commit/6e9335d311c058986c4bbef5aadbe208b87f63c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e9335d311c058986c4bbef5aadbe208b87f63c7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08c6933104baca84fd4135a76cdc7daf60a0c631", "url": "https://api.github.com/repos/rust-lang/rust/commits/08c6933104baca84fd4135a76cdc7daf60a0c631", "html_url": "https://github.com/rust-lang/rust/commit/08c6933104baca84fd4135a76cdc7daf60a0c631"}, {"sha": "67c2aea182c375108ebb8b923f5679e4f7fef1df", "url": "https://api.github.com/repos/rust-lang/rust/commits/67c2aea182c375108ebb8b923f5679e4f7fef1df", "html_url": "https://github.com/rust-lang/rust/commit/67c2aea182c375108ebb8b923f5679e4f7fef1df"}], "stats": {"total": 150, "additions": 107, "deletions": 43}, "files": [{"sha": "3f2cbc8ab0b5d915cdb013de617754677e943b4d", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e9335d311c058986c4bbef5aadbe208b87f63c7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6e9335d311c058986c4bbef5aadbe208b87f63c7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6e9335d311c058986c4bbef5aadbe208b87f63c7", "patch": "@@ -957,6 +957,7 @@ name = \"ra_hir_def\"\n version = \"0.1.0\"\n dependencies = [\n  \"anymap 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"drop_bomb 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"insta 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "3b6454a1d83edcc50b87e75da071b967e297c444", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6e9335d311c058986c4bbef5aadbe208b87f63c7/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9335d311c058986c4bbef5aadbe208b87f63c7/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=6e9335d311c058986c4bbef5aadbe208b87f63c7", "patch": "@@ -1,8 +1,8 @@\n //! FIXME: write short doc here\n use hir_def::{\n     child_by_source::ChildBySource, dyn_map::DynMap, keys, keys::Key, nameres::ModuleSource,\n-    ConstId, EnumId, EnumVariantId, FunctionId, GenericDefId, ImplId, ModuleId, StaticId, StructId,\n-    TraitId, TypeAliasId, UnionId, VariantId,\n+    ConstId, DefWithBodyId, EnumId, EnumVariantId, FunctionId, GenericDefId, ImplId, ModuleId,\n+    StaticId, StructId, TraitId, TypeAliasId, UnionId, VariantId,\n };\n use hir_expand::{name::AsName, AstId, MacroDefId, MacroDefKind};\n use ra_syntax::{\n@@ -212,29 +212,43 @@ impl Module {\n }\n \n fn analyze_container(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> DynMap {\n-    _analyze_container(db, src).unwrap_or_default()\n-}\n+    return child_by_source(db, src).unwrap_or_default();\n \n-fn _analyze_container(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> Option<DynMap> {\n-    // FIXME: this doesn't try to handle nested declarations\n-    for container in src.value.ancestors().skip(1) {\n-        let res = match_ast! {\n-            match container {\n-                ast::TraitDef(it) => {\n-                    let c = Trait::from_source(db, src.with_value(it))?;\n-                    c.id.child_by_source(db)\n-                },\n-                ast::ImplBlock(it) => {\n-                    let c = ImplBlock::from_source(db, src.with_value(it))?;\n-                    c.id.child_by_source(db)\n-                 },\n-                _ => { continue },\n-            }\n-        };\n-        return Some(res);\n-    }\n+    fn child_by_source(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> Option<DynMap> {\n+        for container in src.value.ancestors().skip(1) {\n+            let res = match_ast! {\n+                match container {\n+                    ast::TraitDef(it) => {\n+                        let def = Trait::from_source(db, src.with_value(it))?;\n+                        def.id.child_by_source(db)\n+                    },\n+                    ast::ImplBlock(it) => {\n+                        let def = ImplBlock::from_source(db, src.with_value(it))?;\n+                        def.id.child_by_source(db)\n+                    },\n+                    ast::FnDef(it) => {\n+                        let def = Function::from_source(db, src.with_value(it))?;\n+                        DefWithBodyId::from(def.id)\n+                            .child_by_source(db)\n+                    },\n+                    ast::StaticDef(it) => {\n+                        let def = Static::from_source(db, src.with_value(it))?;\n+                        DefWithBodyId::from(def.id)\n+                            .child_by_source(db)\n+                    },\n+                    ast::ConstDef(it) => {\n+                        let def = Const::from_source(db, src.with_value(it))?;\n+                        DefWithBodyId::from(def.id)\n+                            .child_by_source(db)\n+                    },\n+                    _ => { continue },\n+                }\n+            };\n+            return Some(res);\n+        }\n \n-    let module_source = ModuleSource::from_child_node(db, src);\n-    let c = Module::from_definition(db, src.with_value(module_source))?;\n-    Some(c.id.child_by_source(db))\n+        let module_source = ModuleSource::from_child_node(db, src);\n+        let c = Module::from_definition(db, src.with_value(module_source))?;\n+        Some(c.id.child_by_source(db))\n+    }\n }"}, {"sha": "2c368f690b1bd0d71c5d433d81425121165ccab7", "filename": "crates/ra_hir_def/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e9335d311c058986c4bbef5aadbe208b87f63c7/crates%2Fra_hir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6e9335d311c058986c4bbef5aadbe208b87f63c7/crates%2Fra_hir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2FCargo.toml?ref=6e9335d311c058986c4bbef5aadbe208b87f63c7", "patch": "@@ -13,6 +13,7 @@ once_cell = \"1.0.1\"\n rustc-hash = \"1.0\"\n either = \"1.5\"\n anymap = \"0.12\"\n+drop_bomb = \"0.1.4\"\n \n ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }"}, {"sha": "92c32b080c092c058ef8909da406ed6ce6327da7", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6e9335d311c058986c4bbef5aadbe208b87f63c7/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9335d311c058986c4bbef5aadbe208b87f63c7/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=6e9335d311c058986c4bbef5aadbe208b87f63c7", "patch": "@@ -3,10 +3,13 @@\n mod lower;\n pub mod scope;\n \n-use std::{ops::Index, sync::Arc};\n+use std::{mem, ops::Index, sync::Arc};\n \n+use drop_bomb::DropBomb;\n use either::Either;\n-use hir_expand::{hygiene::Hygiene, AstId, HirFileId, InFile, MacroCallKind, MacroDefId};\n+use hir_expand::{\n+    ast_id_map::AstIdMap, hygiene::Hygiene, AstId, HirFileId, InFile, MacroCallKind, MacroDefId,\n+};\n use ra_arena::{map::ArenaMap, Arena};\n use ra_syntax::{ast, AstNode, AstPtr};\n use rustc_hash::FxHashMap;\n@@ -24,14 +27,16 @@ struct Expander {\n     crate_def_map: Arc<CrateDefMap>,\n     current_file_id: HirFileId,\n     hygiene: Hygiene,\n+    ast_id_map: Arc<AstIdMap>,\n     module: ModuleId,\n }\n \n impl Expander {\n     fn new(db: &impl DefDatabase, current_file_id: HirFileId, module: ModuleId) -> Expander {\n         let crate_def_map = db.crate_def_map(module.krate);\n         let hygiene = Hygiene::new(db, current_file_id);\n-        Expander { crate_def_map, current_file_id, hygiene, module }\n+        let ast_id_map = db.ast_id_map(current_file_id);\n+        Expander { crate_def_map, current_file_id, hygiene, ast_id_map, module }\n     }\n \n     fn enter_expand(\n@@ -52,9 +57,14 @@ impl Expander {\n                     if let Some(expr) = ast::Expr::cast(node) {\n                         log::debug!(\"macro expansion {:#?}\", expr.syntax());\n \n-                        let mark = Mark { file_id: self.current_file_id };\n+                        let mark = Mark {\n+                            file_id: self.current_file_id,\n+                            ast_id_map: mem::take(&mut self.ast_id_map),\n+                            bomb: DropBomb::new(\"expansion mark dropped\"),\n+                        };\n                         self.hygiene = Hygiene::new(db, file_id);\n                         self.current_file_id = file_id;\n+                        self.ast_id_map = db.ast_id_map(file_id);\n \n                         return Some((mark, expr));\n                     }\n@@ -67,10 +77,11 @@ impl Expander {\n         None\n     }\n \n-    fn exit(&mut self, db: &impl DefDatabase, mark: Mark) {\n+    fn exit(&mut self, db: &impl DefDatabase, mut mark: Mark) {\n         self.hygiene = Hygiene::new(db, mark.file_id);\n         self.current_file_id = mark.file_id;\n-        std::mem::forget(mark);\n+        self.ast_id_map = mem::take(&mut mark.ast_id_map);\n+        mark.bomb.defuse();\n     }\n \n     fn to_source<T>(&self, value: T) -> InFile<T> {\n@@ -91,18 +102,17 @@ impl Expander {\n             .0\n             .take_macros()\n     }\n+\n+    fn ast_id<N: AstNode>(&self, item: &N) -> AstId<N> {\n+        let file_local_id = self.ast_id_map.ast_id(item);\n+        AstId::new(self.current_file_id, file_local_id)\n+    }\n }\n \n struct Mark {\n     file_id: HirFileId,\n-}\n-\n-impl Drop for Mark {\n-    fn drop(&mut self) {\n-        if !std::thread::panicking() {\n-            panic!(\"dropped mark\")\n-        }\n-    }\n+    ast_id_map: Arc<AstIdMap>,\n+    bomb: DropBomb,\n }\n \n /// The body of an item (function, const etc.).\n@@ -174,7 +184,7 @@ impl Body {\n             }\n         };\n         let expander = Expander::new(db, file_id, module);\n-        let (body, source_map) = Body::new(db, expander, params, body);\n+        let (body, source_map) = Body::new(db, def, expander, params, body);\n         (Arc::new(body), Arc::new(source_map))\n     }\n \n@@ -184,11 +194,12 @@ impl Body {\n \n     fn new(\n         db: &impl DefDatabase,\n+        def: DefWithBodyId,\n         expander: Expander,\n         params: Option<ast::ParamList>,\n         body: Option<ast::Expr>,\n     ) -> (Body, BodySourceMap) {\n-        lower::lower(db, expander, params, body)\n+        lower::lower(db, def, expander, params, body)\n     }\n }\n "}, {"sha": "17efa10e2919b0283c9557535bd25bbae91e8a51", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6e9335d311c058986c4bbef5aadbe208b87f63c7/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9335d311c058986c4bbef5aadbe208b87f63c7/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=6e9335d311c058986c4bbef5aadbe208b87f63c7", "patch": "@@ -2,11 +2,12 @@\n //! representation.\n \n use either::Either;\n+\n use hir_expand::name::{name, AsName, Name};\n use ra_arena::Arena;\n use ra_syntax::{\n     ast::{\n-        self, ArgListOwner, ArrayExprKind, LiteralKind, LoopBodyOwner, NameOwner,\n+        self, ArgListOwner, ArrayExprKind, LiteralKind, LoopBodyOwner, ModuleItemOwner, NameOwner,\n         TypeAscriptionOwner,\n     },\n     AstNode, AstPtr,\n@@ -24,17 +25,20 @@ use crate::{\n     path::GenericArgs,\n     path::Path,\n     type_ref::{Mutability, TypeRef},\n+    ContainerId, DefWithBodyId, FunctionLoc, Intern,\n };\n \n pub(super) fn lower(\n     db: &impl DefDatabase,\n+    def: DefWithBodyId,\n     expander: Expander,\n     params: Option<ast::ParamList>,\n     body: Option<ast::Expr>,\n ) -> (Body, BodySourceMap) {\n     ExprCollector {\n-        expander,\n         db,\n+        def,\n+        expander,\n         source_map: BodySourceMap::default(),\n         body: Body {\n             exprs: Arena::default(),\n@@ -49,6 +53,7 @@ pub(super) fn lower(\n \n struct ExprCollector<DB> {\n     db: DB,\n+    def: DefWithBodyId,\n     expander: Expander,\n \n     body: Body,\n@@ -467,6 +472,7 @@ where\n             Some(block) => block,\n             None => return self.alloc_expr(Expr::Missing, syntax_node_ptr),\n         };\n+        self.collect_block_items(&block);\n         let statements = block\n             .statements()\n             .map(|s| match s {\n@@ -483,6 +489,20 @@ where\n         self.alloc_expr(Expr::Block { statements, tail }, syntax_node_ptr)\n     }\n \n+    fn collect_block_items(&mut self, block: &ast::Block) {\n+        let container = ContainerId::DefWithBodyId(self.def);\n+        for item in block.items() {\n+            match item {\n+                ast::ModuleItem::FnDef(def) => {\n+                    let ast_id = self.expander.ast_id(&def);\n+                    self.body.defs.push(FunctionLoc { container, ast_id }.intern(self.db).into())\n+                }\n+                // FIXME: handle other items\n+                _ => (),\n+            }\n+        }\n+    }\n+\n     fn collect_block_opt(&mut self, expr: Option<ast::BlockExpr>) -> ExprId {\n         if let Some(block) = expr {\n             self.collect_block(block)"}, {"sha": "ee4ae3e03707f1830d7c2cb5c6d75fa3b25269f6", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6e9335d311c058986c4bbef5aadbe208b87f63c7/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9335d311c058986c4bbef5aadbe208b87f63c7/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=6e9335d311c058986c4bbef5aadbe208b87f63c7", "patch": "@@ -858,4 +858,21 @@ mod tests {\n             \"y\",\n         );\n     }\n+\n+    #[test]\n+    fn goto_def_in_local_fn() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            fn main() {\n+                fn foo() {\n+                    let x = 92;\n+                    <|>x;\n+                }\n+            }\n+            \",\n+            \"x BIND_PAT FileId(1) [39; 40)\",\n+            \"x\",\n+        );\n+    }\n }"}]}