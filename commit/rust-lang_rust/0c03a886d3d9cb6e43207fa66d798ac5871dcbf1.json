{"sha": "0c03a886d3d9cb6e43207fa66d798ac5871dcbf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMDNhODg2ZDNkOWNiNmU0MzIwN2ZhNjZkNzk4YWM1ODcxZGNiZjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-10-13T16:31:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-01T18:08:56Z"}, "message": "run compare method in old-broken-way and new-good-way", "tree": {"sha": "68b25835cccf5726c62fca783fe2b18caa2ff1eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68b25835cccf5726c62fca783fe2b18caa2ff1eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c03a886d3d9cb6e43207fa66d798ac5871dcbf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c03a886d3d9cb6e43207fa66d798ac5871dcbf1", "html_url": "https://github.com/rust-lang/rust/commit/0c03a886d3d9cb6e43207fa66d798ac5871dcbf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c03a886d3d9cb6e43207fa66d798ac5871dcbf1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84ac618e8b02fc2e8c44c5aa7d225344e09e495b", "url": "https://api.github.com/repos/rust-lang/rust/commits/84ac618e8b02fc2e8c44c5aa7d225344e09e495b", "html_url": "https://github.com/rust-lang/rust/commit/84ac618e8b02fc2e8c44c5aa7d225344e09e495b"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "19966d3ee868e117e72a84078520364151b0a647", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0c03a886d3d9cb6e43207fa66d798ac5871dcbf1/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c03a886d3d9cb6e43207fa66d798ac5871dcbf1/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=0c03a886d3d9cb6e43207fa66d798ac5871dcbf1", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use rustc::infer::{self, InferOk, TypeOrigin};\n+use rustc::middle::free_region::FreeRegionMap;\n use rustc::ty;\n use rustc::traits::{self, Reveal};\n use rustc::ty::error::{ExpectedFound, TypeError};\n@@ -39,8 +40,10 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                      impl_m_body_id: ast::NodeId,\n                                      trait_m: &ty::Method<'tcx>,\n                                      impl_trait_ref: &ty::TraitRef<'tcx>,\n-                                     trait_item_span: Option<Span>) {\n-    debug!(\"compare_impl_method(impl_trait_ref={:?})\", impl_trait_ref);\n+                                     trait_item_span: Option<Span>,\n+                                     old_broken_mode: bool) {\n+    debug!(\"compare_impl_method(impl_trait_ref={:?})\",\n+           impl_trait_ref);\n \n     debug!(\"compare_impl_method: impl_trait_ref (liberated) = {:?}\",\n            impl_trait_ref);\n@@ -367,7 +370,7 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                     item_name: impl_m.name,\n                     impl_item_def_id: impl_m.def_id,\n                     trait_item_def_id: trait_m.def_id,\n-                    lint_id: Some(impl_m_body_id),\n+                    lint_id: if !old_broken_mode { Some(impl_m_body_id) } else { None },\n                 },\n             };\n \n@@ -473,8 +476,20 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n         // Finally, resolve all regions. This catches wily misuses of\n         // lifetime parameters.\n-        let fcx = FnCtxt::new(&inh, tcx.types.err, impl_m_body_id);\n-        fcx.regionck_item(impl_m_body_id, impl_m_span, &[]);\n+        if old_broken_mode {\n+            // FIXME(#18937) -- this is how the code used to\n+            // work. This is buggy because the fulfillment cx creates\n+            // region obligations that get overlooked.  The right\n+            // thing to do is the code below. But we keep this old\n+            // pass around temporarily.\n+            let mut free_regions = FreeRegionMap::new();\n+            free_regions.relate_free_regions_from_predicates(\n+                &infcx.parameter_environment.caller_bounds);\n+            infcx.resolve_regions_and_report_errors(&free_regions, impl_m_body_id);\n+        } else {\n+            let fcx = FnCtxt::new(&inh, tcx.types.err, impl_m_body_id);\n+            fcx.regionck_item(impl_m_body_id, impl_m_span, &[]);\n+        }\n     });\n \n     fn check_region_bounds_on_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,"}, {"sha": "4e0f455e362389b4b049c87870fad1ebea19eeab", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0c03a886d3d9cb6e43207fa66d798ac5871dcbf1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c03a886d3d9cb6e43207fa66d798ac5871dcbf1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0c03a886d3d9cb6e43207fa66d798ac5871dcbf1", "patch": "@@ -1028,13 +1028,26 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n                     let trait_span = tcx.map.span_if_local(ty_trait_item.def_id());\n                     if let &ty::MethodTraitItem(ref trait_method) = ty_trait_item {\n+                        let err_count = tcx.sess.err_count();\n                         compare_impl_method(ccx,\n                                             &impl_method,\n                                             impl_item.span,\n                                             body.id,\n                                             &trait_method,\n                                             &impl_trait_ref,\n-                                            trait_span);\n+                                            trait_span,\n+                                            true); // start with old-broken-mode\n+                        if err_count == tcx.sess.err_count() {\n+                            // old broken mode did not report an error. Try with the new mode.\n+                            compare_impl_method(ccx,\n+                                                &impl_method,\n+                                                impl_item.span,\n+                                                body.id,\n+                                                &trait_method,\n+                                                &impl_trait_ref,\n+                                                trait_span,\n+                                                false); // use the new mode\n+                        }\n                     } else {\n                         let mut err = struct_span_err!(tcx.sess, impl_item.span, E0324,\n                                   \"item `{}` is an associated method, \\"}]}