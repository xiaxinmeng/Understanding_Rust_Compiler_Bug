{"sha": "30348f46757ad0e68f69eccd31e5de345a010ac0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMzQ4ZjQ2NzU3YWQwZTY4ZjY5ZWNjZDMxZTVkZTM0NWEwMTBhYzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-20T23:26:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-20T23:26:26Z"}, "message": "auto merge of #13647 : alexcrichton/rust/issue-13641, r=pcwalton\n\nThis gives a better NOTE error message when a privacy error is encountered with\r\na static method. Previously no note was emitted (due to lack of support), but\r\nnow a note is emitted indicating that the struct/enum itself is private.\r\n\r\nCloses #13641", "tree": {"sha": "0d1161336d780696be75017fcd8bb52bec154a50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d1161336d780696be75017fcd8bb52bec154a50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30348f46757ad0e68f69eccd31e5de345a010ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30348f46757ad0e68f69eccd31e5de345a010ac0", "html_url": "https://github.com/rust-lang/rust/commit/30348f46757ad0e68f69eccd31e5de345a010ac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30348f46757ad0e68f69eccd31e5de345a010ac0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97dd72620002ff8476ff62d425eb730fdef513a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/97dd72620002ff8476ff62d425eb730fdef513a1", "html_url": "https://github.com/rust-lang/rust/commit/97dd72620002ff8476ff62d425eb730fdef513a1"}, {"sha": "c33cedf35918dd1da0a6e41ea7bac8f43f90c484", "url": "https://api.github.com/repos/rust-lang/rust/commits/c33cedf35918dd1da0a6e41ea7bac8f43f90c484", "html_url": "https://github.com/rust-lang/rust/commit/c33cedf35918dd1da0a6e41ea7bac8f43f90c484"}], "stats": {"total": 109, "additions": 80, "deletions": 29}, "files": [{"sha": "20b17cce12e27456b14ee6fc03ca65db84d40018", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 55, "deletions": 29, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/30348f46757ad0e68f69eccd31e5de345a010ac0/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30348f46757ad0e68f69eccd31e5de345a010ac0/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=30348f46757ad0e68f69eccd31e5de345a010ac0", "patch": "@@ -405,7 +405,8 @@ impl<'a> PrivacyVisitor<'a> {\n             };\n         }\n \n-        debug!(\"privacy - local {:?} not public all the way down\", did);\n+        debug!(\"privacy - local {} not public all the way down\",\n+               self.tcx.map.node_to_str(did.node));\n         // return quickly for things in the same module\n         if self.parents.find(&did.node) == self.parents.find(&self.curitem) {\n             debug!(\"privacy - same parent, we're done here\");\n@@ -526,31 +527,60 @@ impl<'a> PrivacyVisitor<'a> {\n     /// If the result is `None`, no errors were found.\n     fn ensure_public(&self, span: Span, to_check: ast::DefId,\n                      source_did: Option<ast::DefId>, msg: &str) -> CheckResult {\n-        match self.def_privacy(to_check) {\n-            ExternallyDenied => Some((span, format!(\"{} is private\", msg), None)),\n-            DisallowedBy(id) => {\n-                let (err_span, err_msg) = if id == source_did.unwrap_or(to_check).node {\n-                    return Some((span, format!(\"{} is private\", msg), None));\n-                } else {\n-                    (span, format!(\"{} is inaccessible\", msg))\n-                };\n-                match self.tcx.map.find(id) {\n-                    Some(ast_map::NodeItem(item)) => {\n-                        let desc = match item.node {\n-                            ast::ItemMod(..) => \"module\",\n-                            ast::ItemTrait(..) => \"trait\",\n+        let id = match self.def_privacy(to_check) {\n+            ExternallyDenied => {\n+                return Some((span, format!(\"{} is private\", msg), None))\n+            }\n+            Allowable => return None,\n+            DisallowedBy(id) => id,\n+        };\n+\n+        // If we're disallowed by a particular id, then we attempt to give a\n+        // nice error message to say why it was disallowed. It was either\n+        // because the item itself is private or because its parent is private\n+        // and its parent isn't in our ancestry.\n+        let (err_span, err_msg) = if id == source_did.unwrap_or(to_check).node {\n+            return Some((span, format!(\"{} is private\", msg), None));\n+        } else {\n+            (span, format!(\"{} is inaccessible\", msg))\n+        };\n+        let item = match self.tcx.map.find(id) {\n+            Some(ast_map::NodeItem(item)) => {\n+                match item.node {\n+                    // If an impl disallowed this item, then this is resolve's\n+                    // way of saying that a struct/enum's static method was\n+                    // invoked, and the struct/enum itself is private. Crawl\n+                    // back up the chains to find the relevant struct/enum that\n+                    // was private.\n+                    ast::ItemImpl(_, _, ref ty, _) => {\n+                        let id = match ty.node {\n+                            ast::TyPath(_, _, id) => id,\n                             _ => return Some((err_span, err_msg, None)),\n                         };\n-                        let msg = format!(\"{} `{}` is private\",\n-                                          desc,\n-                                          token::get_ident(item.ident));\n-                        Some((err_span, err_msg, Some((span, msg))))\n-                    },\n-                    _ => Some((err_span, err_msg, None)),\n+                        let def = self.tcx.def_map.borrow().get_copy(&id);\n+                        let did = def_id_of_def(def);\n+                        assert!(is_local(did));\n+                        match self.tcx.map.get(did.node) {\n+                            ast_map::NodeItem(item) => item,\n+                            _ => self.tcx.sess.span_bug(item.span,\n+                                                        \"path is not an item\")\n+                        }\n+                    }\n+                    _ => item\n                 }\n-            },\n-            Allowable => None,\n-        }\n+            }\n+            Some(..) | None => return Some((err_span, err_msg, None)),\n+        };\n+        let desc = match item.node {\n+            ast::ItemMod(..) => \"module\",\n+            ast::ItemTrait(..) => \"trait\",\n+            ast::ItemStruct(..) => \"struct\",\n+            ast::ItemEnum(..) => \"enum\",\n+            _ => return Some((err_span, err_msg, None))\n+        };\n+        let msg = format!(\"{} `{}` is private\", desc,\n+                          token::get_ident(item.ident));\n+        Some((err_span, err_msg, Some((span, msg))))\n     }\n \n     // Checks that a field is in scope.\n@@ -625,12 +655,8 @@ impl<'a> PrivacyVisitor<'a> {\n                                                 .unwrap()\n                                                 .identifier);\n                 let origdid = def_id_of_def(orig_def);\n-                self.ensure_public(span,\n-                                   def,\n-                                   Some(origdid),\n-                                   format!(\"{} `{}`\",\n-                                           tyname,\n-                                           name))\n+                self.ensure_public(span, def, Some(origdid),\n+                                   format!(\"{} `{}`\", tyname, name))\n             };\n \n             match *self.last_private_map.get(&path_id) {"}, {"sha": "3f5d29a82175805b40221dac4818821908952190", "filename": "src/test/compile-fail/issue-13641.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/30348f46757ad0e68f69eccd31e5de345a010ac0/src%2Ftest%2Fcompile-fail%2Fissue-13641.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30348f46757ad0e68f69eccd31e5de345a010ac0/src%2Ftest%2Fcompile-fail%2Fissue-13641.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13641.rs?ref=30348f46757ad0e68f69eccd31e5de345a010ac0", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod a {\n+    struct Foo;\n+    impl Foo { pub fn new() {} }\n+    enum Bar {}\n+    impl Bar { pub fn new() {} }\n+}\n+\n+fn main() {\n+    a::Foo::new();\n+    //~^ ERROR: static method `new` is inaccessible\n+    //~^^ NOTE: struct `Foo` is private\n+    a::Bar::new();\n+    //~^ ERROR: static method `new` is inaccessible\n+    //~^^ NOTE: enum `Bar` is private\n+}"}]}