{"sha": "0618a6f1841fccf5d63ddd349540a92eb24c87f8", "node_id": "C_kwDOAAsO6NoAKDA2MThhNmYxODQxZmNjZjVkNjNkZGQzNDk1NDBhOTJlYjI0Yzg3Zjg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-03T10:07:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-03T10:07:58Z"}, "message": "Merge #10436\n\n10436: fix: await insertion with try_expr during extract_function r=Veykril a=feniljain\n\nFixing  #10333\n\nCo-authored-by: vi_mi <fenil.jain2018@vitstudent.ac.in>", "tree": {"sha": "517230f9edbb31636380daf973ce71a342636a18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/517230f9edbb31636380daf973ce71a342636a18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0618a6f1841fccf5d63ddd349540a92eb24c87f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhWYD+CRBK7hj4Ov3rIwAAYRQIAGIBFmZrPBqug45GwC5rzK3x\nUO9Q5SZIPvocJDixV7aP93qxcv0EqEmqRD1MFkZDw3WXxa3xutJHg0Snv/ZUg9W0\nkKNnyANa/39+ci9VGiB/GoKNPyTyq3A4rvlkzZ9i+nb5++iJMlG9LSwViNDlqG+5\nnr5uPlWOTf3wTUtg+G3rMTR6MWXuvWey0VQxuFthYxn6gd7rQJvuPHVvYfYXR+eY\ny5uS5+SDsvBmB9t1GAu+0h5R1W/JMCWLe5yL9z8+0luWdQgdlHGkp/QzW9omkT+H\nkRwOgfDJLnSVKwd5y4S1242vWUZ25JjbI1pGx4s6lsmI5cvIecU/E/e2qpADOzc=\n=yp1E\n-----END PGP SIGNATURE-----\n", "payload": "tree 517230f9edbb31636380daf973ce71a342636a18\nparent 13ec077b915c40265c9a3acb6aab09d94556a5f9\nparent 61643513b620ea6758d45665db26344d9a9b01b7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633255678 +0000\ncommitter GitHub <noreply@github.com> 1633255678 +0000\n\nMerge #10436\n\n10436: fix: await insertion with try_expr during extract_function r=Veykril a=feniljain\n\nFixing  #10333\n\nCo-authored-by: vi_mi <fenil.jain2018@vitstudent.ac.in>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0618a6f1841fccf5d63ddd349540a92eb24c87f8", "html_url": "https://github.com/rust-lang/rust/commit/0618a6f1841fccf5d63ddd349540a92eb24c87f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0618a6f1841fccf5d63ddd349540a92eb24c87f8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13ec077b915c40265c9a3acb6aab09d94556a5f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/13ec077b915c40265c9a3acb6aab09d94556a5f9", "html_url": "https://github.com/rust-lang/rust/commit/13ec077b915c40265c9a3acb6aab09d94556a5f9"}, {"sha": "61643513b620ea6758d45665db26344d9a9b01b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/61643513b620ea6758d45665db26344d9a9b01b7", "html_url": "https://github.com/rust-lang/rust/commit/61643513b620ea6758d45665db26344d9a9b01b7"}], "stats": {"total": 76, "additions": 72, "deletions": 4}, "files": [{"sha": "2e91f8d4ab4021b1e477394a7df4194b0c970f1c", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 69, "deletions": 4, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0618a6f1841fccf5d63ddd349540a92eb24c87f8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0618a6f1841fccf5d63ddd349540a92eb24c87f8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=0618a6f1841fccf5d63ddd349540a92eb24c87f8", "patch": "@@ -1090,7 +1090,7 @@ fn make_call(ctx: &AssistContext, fun: &Function, indent: IndentLevel) -> String\n \n     let args = make::arg_list(fun.params.iter().map(|param| param.to_arg(ctx)));\n     let name = fun.name.clone();\n-    let call_expr = if fun.self_param.is_some() {\n+    let mut call_expr = if fun.self_param.is_some() {\n         let self_arg = make::expr_path(make::ext::ident_path(\"self\"));\n         make::expr_method_call(self_arg, name, args)\n     } else {\n@@ -1100,6 +1100,9 @@ fn make_call(ctx: &AssistContext, fun: &Function, indent: IndentLevel) -> String\n \n     let handler = FlowHandler::from_ret_ty(fun, &ret_ty);\n \n+    if fun.control_flow.is_async {\n+        call_expr = make::expr_await(call_expr);\n+    }\n     let expr = handler.make_call_expr(call_expr).indent(indent);\n \n     let mut_modifier = |var: &OutlivedLocal| if var.mut_usage_outside_body { \"mut \" } else { \"\" };\n@@ -1119,10 +1122,8 @@ fn make_call(ctx: &AssistContext, fun: &Function, indent: IndentLevel) -> String\n             buf.push_str(\") = \");\n         }\n     }\n+\n     format_to!(buf, \"{}\", expr);\n-    if fun.control_flow.is_async {\n-        buf.push_str(\".await\");\n-    }\n     let insert_comma = fun\n         .body\n         .parent()\n@@ -3870,6 +3871,70 @@ async fn $0fun_name() {\n \n async fn some_function() {\n \n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn extract_with_await_and_result_not_producing_match_expr() {\n+        check_assist(\n+            extract_function,\n+            r#\"\n+async fn foo() -> Result<(), ()> {\n+    $0async {}.await;\n+    Err(())?$0\n+}\n+\"#,\n+            r#\"\n+async fn foo() -> Result<(), ()> {\n+    fun_name().await?\n+}\n+\n+async fn $0fun_name() -> _ {\n+    async {}.await;\n+    Err(())?\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn extract_with_await_and_result_producing_match_expr() {\n+        check_assist(\n+            extract_function,\n+            r#\"\n+async fn foo() -> i32 {\n+    loop {\n+        let n = 1;$0\n+        let k = async { 1 }.await;\n+        if k == 42 {\n+            break 3;\n+        }\n+        let m = k + 1;$0\n+        let h = 1 + m;\n+    }\n+}\n+\"#,\n+            r#\"\n+async fn foo() -> i32 {\n+    loop {\n+        let n = 1;\n+        let m = match fun_name().await {\n+            Ok(value) => value,\n+            Err(value) => break value,\n+        };\n+        let h = 1 + m;\n+    }\n+}\n+\n+async fn $0fun_name() -> Result<i32, i32> {\n+    let k = async { 1 }.await;\n+    if k == 42 {\n+        return Err(3);\n+    }\n+    let m = k + 1;\n+    Ok(m)\n }\n \"#,\n         );"}, {"sha": "40c0cd7a37725390caa57f1ede7f4141b76dc747", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0618a6f1841fccf5d63ddd349540a92eb24c87f8/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0618a6f1841fccf5d63ddd349540a92eb24c87f8/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=0618a6f1841fccf5d63ddd349540a92eb24c87f8", "patch": "@@ -299,6 +299,9 @@ pub fn expr_return(expr: Option<ast::Expr>) -> ast::Expr {\n pub fn expr_try(expr: ast::Expr) -> ast::Expr {\n     expr_from_text(&format!(\"{}?\", expr))\n }\n+pub fn expr_await(expr: ast::Expr) -> ast::Expr {\n+    expr_from_text(&format!(\"{}.await\", expr))\n+}\n pub fn expr_match(expr: ast::Expr, match_arm_list: ast::MatchArmList) -> ast::Expr {\n     expr_from_text(&format!(\"match {} {}\", expr, match_arm_list))\n }"}]}