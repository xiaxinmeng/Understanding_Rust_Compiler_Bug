{"sha": "01859bb1602c486a1df1eec9e6884d4bdae60fed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxODU5YmIxNjAyYzQ4NmExZGYxZWVjOWU2ODg0ZDRiZGFlNjBmZWQ=", "commit": {"author": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-07-26T05:21:54Z"}, "committer": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-07-29T08:03:54Z"}, "message": "grouping the variants of InterpError", "tree": {"sha": "f73776e90d37f41a7e5e0648ef178a0041ed7e90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f73776e90d37f41a7e5e0648ef178a0041ed7e90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01859bb1602c486a1df1eec9e6884d4bdae60fed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01859bb1602c486a1df1eec9e6884d4bdae60fed", "html_url": "https://github.com/rust-lang/rust/commit/01859bb1602c486a1df1eec9e6884d4bdae60fed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01859bb1602c486a1df1eec9e6884d4bdae60fed/comments", "author": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aa9658f5d29340e630d3bfcffd41abe16a96b34", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa9658f5d29340e630d3bfcffd41abe16a96b34", "html_url": "https://github.com/rust-lang/rust/commit/0aa9658f5d29340e630d3bfcffd41abe16a96b34"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "b17d3244bc354ee3b4b504cb8695620a0553f6fb", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/01859bb1602c486a1df1eec9e6884d4bdae60fed/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01859bb1602c486a1df1eec9e6884d4bdae60fed/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=01859bb1602c486a1df1eec9e6884d4bdae60fed", "patch": "@@ -139,9 +139,11 @@ impl<'tcx> ConstEvalErr<'tcx> {\n     ) -> Result<DiagnosticBuilder<'tcx>, ErrorHandled> {\n         match self.error {\n             InterpError::Layout(LayoutError::Unknown(_)) |\n-            InterpError::TooGeneric => return Err(ErrorHandled::TooGeneric),\n+            InterpError::InvalidProgram(InvalidProgramMessage::TooGeneric) =>\n+                return Err(ErrorHandled::TooGeneric),\n             InterpError::Layout(LayoutError::SizeOverflow(_)) |\n-            InterpError::TypeckError => return Err(ErrorHandled::Reported),\n+            InterpError::InvalidProgram(InvalidProgramMessage::TypeckError) =>\n+                return Err(ErrorHandled::Reported),\n             _ => {},\n         }\n         trace!(\"reporting const eval failure at {:?}\", self.span);\n@@ -310,7 +312,7 @@ impl<O: fmt::Debug> fmt::Debug for PanicMessage<O> {\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum InvalidProgramMessage<'tcx> {\n+pub enum InvalidProgramMessage {\n     /// Resolution can fail if we are in a too generic context\n     TooGeneric,\n     /// Cannot compute this constant because it depends on another one\n@@ -320,19 +322,35 @@ pub enum InvalidProgramMessage<'tcx> {\n     TypeckError,\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n+pub enum UndefinedBehaviourMessage {\n+}\n+\n+#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n+pub enum UnsupportedMessage {\n+}\n+\n+#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n+pub enum ResourceExhaustionMessage {\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum InterpError<'tcx> {\n+    /// The program panicked.\n+    Panic(PanicMessage<u64>),\n     /// The program caused undefined behavior.\n-    UndefinedBehaviour(UndefinedBehaviourMessage<'tcx>),\n+    UndefinedBehaviour(UndefinedBehaviourMessage),\n     /// The program did something the interpreter does not support (some of these *might* be UB\n     /// but the interpreter is not sure).\n-    Unsupported(UnsupportedMessage<'tcx>),\n+    Unsupported(UnsupportedMessage),\n     /// The program was invalid (ill-typed, not sufficiently monomorphized, ...).\n-    InvalidProgram(InvalidProgramMessage<'tcx>),\n+    InvalidProgram(InvalidProgramMessage),\n     /// The program exhausted the interpreter's resources (stack/heap too big,\n     /// execution takes too long, ..).\n-    ResourceExhaustion(ResourceExhaustionMessage<'tcx>),\n-    \n+    ResourceExhaustion(ResourceExhaustionMessage),\n+\n+    /// THe above 5 variants are what we want to group all the remaining InterpError variants into\n+\n     /// This variant is used by machines to signal their own errors that do not\n     /// match an existing variant.\n     MachineError(String),\n@@ -396,8 +414,6 @@ pub enum InterpError<'tcx> {\n     HeapAllocZeroBytes,\n     HeapAllocNonPowerOfTwoAlignment(u64),\n     Unreachable,\n-    /// The program panicked.\n-    Panic(PanicMessage<u64>),\n     ReadFromReturnPointer,\n     PathNotFound(Vec<String>),\n     UnimplementedTraitSelection,"}]}