{"sha": "c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZTQzYjFiYTc5NzRiYTIxYjgyYjNjMDJkOWE2MjIxYTdjZDk2Yjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-18T11:29:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-18T11:29:43Z"}, "message": "Auto merge of #3954 - andrehjr:add-lint-path-buf-overwrite, r=flip1995\n\nAdd Lint PathBufPushOverwrite\n\nCloses #3923\n\nThis is a very simple Lint that checks if push is being called with a Root Path. Because that can make it overwrite the previous path.\n\nI used std::path::Path to check if it's root, in order to keep it working across windows/linux environments instead of checking for '/'. Is that alright?\n\nOn the `if_chain!` block, Is there a way to make it short while getting the value of the first argument? I got the example from other lints.\n\nNote that this is first Lint, I hope I got everything covered  \ud83d\ude80", "tree": {"sha": "632eec8f689b801d4d19a668d4b5a2d110948774", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/632eec8f689b801d4d19a668d4b5a2d110948774"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9", "html_url": "https://github.com/rust-lang/rust/commit/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6feed2713c7740eb5868eba43745bc508b8b77aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6feed2713c7740eb5868eba43745bc508b8b77aa", "html_url": "https://github.com/rust-lang/rust/commit/6feed2713c7740eb5868eba43745bc508b8b77aa"}, {"sha": "7e9cb5b84a42419bad8eccf7434480f4108c2341", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9cb5b84a42419bad8eccf7434480f4108c2341", "html_url": "https://github.com/rust-lang/rust/commit/7e9cb5b84a42419bad8eccf7434480f4108c2341"}], "stats": {"total": 102, "additions": 101, "deletions": 1}, "files": [{"sha": "7188e6f93241aae95ff77feb826e106766cace2e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9", "patch": "@@ -1015,6 +1015,7 @@ All notable changes to this project will be documented in this file.\n [`panic_params`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_params\n [`panicking_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#panicking_unwrap\n [`partialeq_ne_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#partialeq_ne_impl\n+[`path_buf_push_overwrite`]: https://rust-lang.github.io/rust-clippy/master/index.html#path_buf_push_overwrite\n [`possible_missing_comma`]: https://rust-lang.github.io/rust-clippy/master/index.html#possible_missing_comma\n [`precedence`]: https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n [`print_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_literal"}, {"sha": "9ca5761a2ba406d941b671626d5b2efdff416728", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 298 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 299 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "27066167003db78d45bb70ce6dbd9d56e8710000", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9", "patch": "@@ -236,6 +236,7 @@ pub mod open_options;\n pub mod overflow_check_conditional;\n pub mod panic_unimplemented;\n pub mod partialeq_ne_impl;\n+pub mod path_buf_push_overwrite;\n pub mod precedence;\n pub mod ptr;\n pub mod ptr_offset_with_cast;\n@@ -572,6 +573,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box assertions_on_constants::AssertionsOnConstants);\n     reg.register_late_lint_pass(box missing_const_for_fn::MissingConstForFn);\n     reg.register_late_lint_pass(box transmuting_null::TransmutingNull);\n+    reg.register_late_lint_pass(box path_buf_push_overwrite::PathBufPushOverwrite);\n \n     reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -805,6 +807,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n         panic_unimplemented::PANIC_PARAMS,\n         partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n+        path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE,\n         precedence::PRECEDENCE,\n         ptr::CMP_NULL,\n         ptr::MUT_FROM_REF,\n@@ -1072,6 +1075,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         non_copy_const::BORROW_INTERIOR_MUTABLE_CONST,\n         non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST,\n         open_options::NONSENSICAL_OPEN_OPTIONS,\n+        path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE,\n         ptr::MUT_FROM_REF,\n         ranges::ITERATOR_STEP_BY_ZERO,\n         regex::INVALID_REGEX,"}, {"sha": "10ca3d523abde049fd4e527c4f6a494a750ffe36", "filename": "clippy_lints/src/path_buf_push_overwrite.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9", "patch": "@@ -0,0 +1,71 @@\n+use crate::utils::{match_type, paths, span_lint_and_sugg, walk_ptrs_ty};\n+use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n+use rustc_errors::Applicability;\n+use std::path::{Component, Path};\n+use syntax::ast::LitKind;\n+\n+declare_clippy_lint! {\n+    /// **What it does:*** Checks for [push](https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.push)\n+    /// calls on `PathBuf` that can cause overwrites.\n+    ///\n+    /// **Why is this bad?** Calling `push` with a root path at the start can overwrite the\n+    /// previous defined path.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// use std::path::PathBuf;\n+    ///\n+    /// let mut x = PathBuf::from(\"/foo\");\n+    /// x.push(\"/bar\");\n+    /// assert_eq!(x, PathBuf::from(\"/bar\"));\n+    /// ```\n+    /// Could be written:\n+    ///\n+    /// ```rust\n+    /// use std::path::PathBuf;\n+    ///\n+    /// let mut x = PathBuf::from(\"/foo\");\n+    /// x.push(\"bar\");\n+    /// assert_eq!(x, PathBuf::from(\"/foo/bar\"));\n+    /// ```\n+    pub PATH_BUF_PUSH_OVERWRITE,\n+    correctness,\n+    \"calling `push` with file system root on `PathBuf` can overwrite it\"\n+}\n+\n+declare_lint_pass!(PathBufPushOverwrite => [PATH_BUF_PUSH_OVERWRITE]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PathBufPushOverwrite {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_chain! {\n+            if let ExprKind::MethodCall(ref path, _, ref args) = expr.node;\n+            if path.ident.name == \"push\";\n+            if args.len() == 2;\n+            if match_type(cx, walk_ptrs_ty(cx.tables.expr_ty(&args[0])), &paths::PATH_BUF);\n+            if let Some(get_index_arg) = args.get(1);\n+            if let ExprKind::Lit(ref lit) = get_index_arg.node;\n+            if let LitKind::Str(ref path_lit, _) = lit.node;\n+            if let pushed_path = Path::new(&path_lit.as_str());\n+            if let Some(pushed_path_lit) = pushed_path.to_str();\n+            if pushed_path.has_root();\n+            if let Some(root) = pushed_path.components().next();\n+            if root == Component::RootDir;\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    PATH_BUF_PUSH_OVERWRITE,\n+                    lit.span,\n+                    \"Calling `push` with '/' or '\\\\' (file system root) will overwrite the previous path definition\",\n+                    \"try\",\n+                    format!(\"\\\"{}\\\"\", pushed_path_lit.trim_start_matches(|c| c == '/' || c == '\\\\')),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "c7b10a2d6b471c3b3022c824b0a31341c1599dcc", "filename": "tests/ui/path_buf_push_overwrite.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9/tests%2Fui%2Fpath_buf_push_overwrite.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9/tests%2Fui%2Fpath_buf_push_overwrite.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpath_buf_push_overwrite.fixed?ref=c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+use std::path::PathBuf;\n+\n+fn main() {\n+    let mut x = PathBuf::from(\"/foo\");\n+    x.push(\"bar\");\n+}"}, {"sha": "d255e0f2d0961b25a1787de1f762b10350636254", "filename": "tests/ui/path_buf_push_overwrite.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9/tests%2Fui%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9/tests%2Fui%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpath_buf_push_overwrite.rs?ref=c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+use std::path::PathBuf;\n+\n+fn main() {\n+    let mut x = PathBuf::from(\"/foo\");\n+    x.push(\"/bar\");\n+}"}, {"sha": "35572d792498c28f32672db9372b272cdf2a2210", "filename": "tests/ui/path_buf_push_overwrite.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9/tests%2Fui%2Fpath_buf_push_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9/tests%2Fui%2Fpath_buf_push_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpath_buf_push_overwrite.stderr?ref=c6e43b1ba7974ba21b82b3c02d9a6221a7cd96b9", "patch": "@@ -0,0 +1,10 @@\n+error: Calling `push` with '/' or '/' (file system root) will overwrite the previous path definition\n+  --> $DIR/path_buf_push_overwrite.rs:6:12\n+   |\n+LL |     x.push(\"/bar\");\n+   |            ^^^^^^ help: try: `\"bar\"`\n+   |\n+   = note: #[deny(clippy::path_buf_push_overwrite)] on by default\n+\n+error: aborting due to previous error\n+"}]}