{"sha": "f5d240b432b0f1a157a66249b296e0a246525688", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZDI0MGI0MzJiMGYxYTE1N2E2NjI0OWIyOTZlMGEyNDY1MjU2ODg=", "commit": {"author": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-02-08T20:14:24Z"}, "committer": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-05-02T14:36:07Z"}, "message": "Wrap `InferCtxt::universe` in a cell\n\nWe'll need this in order to start tracking skolemizatoins here, and it's\neasier to update all the field accesses now rather than later.", "tree": {"sha": "fd2d10517c837e344b7783e8f2350a82aa22ae03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd2d10517c837e344b7783e8f2350a82aa22ae03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5d240b432b0f1a157a66249b296e0a246525688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5d240b432b0f1a157a66249b296e0a246525688", "html_url": "https://github.com/rust-lang/rust/commit/f5d240b432b0f1a157a66249b296e0a246525688", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5d240b432b0f1a157a66249b296e0a246525688/comments", "author": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce64f9d823bf5bbaff899227b4c776abd84c395b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce64f9d823bf5bbaff899227b4c776abd84c395b", "html_url": "https://github.com/rust-lang/rust/commit/ce64f9d823bf5bbaff899227b4c776abd84c395b"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "e5311ccfb7d63f96d72ed82e8b8b2b69b94f6777", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f5d240b432b0f1a157a66249b296e0a246525688/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5d240b432b0f1a157a66249b296e0a246525688/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=f5d240b432b0f1a157a66249b296e0a246525688", "patch": "@@ -193,7 +193,7 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     /// part of the root universe. So this would only get incremented\n     /// when we enter into a higher-ranked (`for<..>`) type or trait\n     /// bound.\n-    pub universe: ty::UniverseIndex,\n+    universe: Cell<ty::UniverseIndex>,\n }\n \n /// A map returned by `skolemize_late_bound_regions()` indicating the skolemized\n@@ -466,7 +466,7 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n             err_count_on_creation: tcx.sess.err_count(),\n             in_snapshot: Cell::new(false),\n             region_obligations: RefCell::new(vec![]),\n-            universe: ty::UniverseIndex::ROOT,\n+            universe: Cell::new(ty::UniverseIndex::ROOT),\n         }))\n     }\n }\n@@ -853,7 +853,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn next_ty_var_id(&self, diverging: bool, origin: TypeVariableOrigin) -> TyVid {\n         self.type_variables\n             .borrow_mut()\n-            .new_var(self.universe, diverging, origin)\n+            .new_var(self.universe(), diverging, origin)\n     }\n \n     pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {\n@@ -885,7 +885,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn next_region_var(&self, origin: RegionVariableOrigin)\n                            -> ty::Region<'tcx> {\n         let region_var = self.borrow_region_constraints()\n-            .new_region_var(self.universe, origin);\n+            .new_region_var(self.universe(), origin);\n         self.tcx.mk_region(ty::ReVar(region_var))\n     }\n \n@@ -923,7 +923,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             -> Ty<'tcx> {\n         let ty_var_id = self.type_variables\n                             .borrow_mut()\n-                            .new_var(self.universe,\n+                            .new_var(self.universe(),\n                                      false,\n                                      TypeVariableOrigin::TypeParameterDefinition(span, def.name));\n \n@@ -1371,6 +1371,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.evaluation_cache.clear();\n         self.projection_cache.borrow_mut().clear();\n     }\n+\n+    fn universe(&self) -> ty::UniverseIndex {\n+        self.universe.get()\n+    }\n }\n \n impl<'a, 'gcx, 'tcx> TypeTrace<'tcx> {"}]}