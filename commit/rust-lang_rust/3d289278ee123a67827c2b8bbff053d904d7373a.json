{"sha": "3d289278ee123a67827c2b8bbff053d904d7373a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMjg5Mjc4ZWUxMjNhNjc4MjdjMmI4YmJmZjA1M2Q5MDRkNzM3M2E=", "commit": {"author": {"name": "ggomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-09-09T14:07:31Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-09-11T09:58:17Z"}, "message": "Improve Clone doc", "tree": {"sha": "4744199eb80a99316092da723b6c91bc5d0bc666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4744199eb80a99316092da723b6c91bc5d0bc666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d289278ee123a67827c2b8bbff053d904d7373a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d289278ee123a67827c2b8bbff053d904d7373a", "html_url": "https://github.com/rust-lang/rust/commit/3d289278ee123a67827c2b8bbff053d904d7373a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d289278ee123a67827c2b8bbff053d904d7373a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3344f893a8d6ae4e18fa060bf67e4db1691363bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/3344f893a8d6ae4e18fa060bf67e4db1691363bf", "html_url": "https://github.com/rust-lang/rust/commit/3344f893a8d6ae4e18fa060bf67e4db1691363bf"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "69355c6c6cc0bcdf6be87c0ef9b33c1f239f6ba6", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3d289278ee123a67827c2b8bbff053d904d7373a/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d289278ee123a67827c2b8bbff053d904d7373a/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=3d289278ee123a67827c2b8bbff053d904d7373a", "patch": "@@ -14,10 +14,14 @@\n //! assign them or pass them as arguments, the receiver will get a copy,\n //! leaving the original value in place. These types do not require\n //! allocation to copy and do not have finalizers (i.e. they do not\n-//! contain owned boxes or implement `Drop`), so the compiler considers\n+//! contain owned boxes or implement [`Drop`]), so the compiler considers\n //! them cheap and safe to copy. For other types copies must be made\n-//! explicitly, by convention implementing the `Clone` trait and calling\n-//! the `clone` method.\n+//! explicitly, by convention implementing the [`Clone`] trait and calling\n+//! the [`clone`][clone] method.\n+//!\n+//! [`Clone`]: trait.Clone.html\n+//! [clone]: trait.Clone.html#tymethod.clone\n+//! [`Drop`]: ../../std/ops/trait.Drop.html\n //!\n //! Basic usage example:\n //!\n@@ -46,22 +50,22 @@\n \n /// A common trait for the ability to explicitly duplicate an object.\n ///\n-/// Differs from `Copy` in that `Copy` is implicit and extremely inexpensive, while\n+/// Differs from [`Copy`] in that [`Copy`] is implicit and extremely inexpensive, while\n /// `Clone` is always explicit and may or may not be expensive. In order to enforce\n-/// these characteristics, Rust does not allow you to reimplement `Copy`, but you\n+/// these characteristics, Rust does not allow you to reimplement [`Copy`], but you\n /// may reimplement `Clone` and run arbitrary code.\n ///\n-/// Since `Clone` is more general than `Copy`, you can automatically make anything\n-/// `Copy` be `Clone` as well.\n+/// Since `Clone` is more general than [`Copy`], you can automatically make anything\n+/// [`Copy`] be `Clone` as well.\n ///\n /// ## Derivable\n ///\n /// This trait can be used with `#[derive]` if all fields are `Clone`. The `derive`d\n-/// implementation of `clone()` calls `clone()` on each field.\n+/// implementation of [`clone()`] calls [`clone()`] on each field.\n ///\n /// ## How can I implement `Clone`?\n ///\n-/// Types that are `Copy` should have a trivial implementation of `Clone`. More formally:\n+/// Types that are [`Copy`] should have a trivial implementation of `Clone`. More formally:\n /// if `T: Copy`, `x: T`, and `y: &T`, then `let x = y.clone();` is equivalent to `let x = *y;`.\n /// Manual implementations should be careful to uphold this invariant; however, unsafe code\n /// must not rely on it to ensure memory safety.\n@@ -70,6 +74,9 @@\n /// library only implements `Clone` up until arrays of size 32. In this case, the implementation of\n /// `Clone` cannot be `derive`d, but can be implemented as:\n ///\n+/// [`Copy`]: ../../std/marker/trait.Copy.html\n+/// [`clone()`]: trait.Clone.html#tymethod.clone\n+///\n /// ```\n /// #[derive(Copy)]\n /// struct Stats {"}]}