{"sha": "ed156772bd95b8d621d50102922e5f5ac886d4a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMTU2NzcyYmQ5NWI4ZDYyMWQ1MDEwMjkyMmU1ZjVhYzg4NmQ0YTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-19T13:11:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-19T13:11:33Z"}, "message": "auto merge of #14251 : alexcrichton/rust/hierarchy, r=huonw\n\nThis is an implementation of RFC 16. A module can now only be loaded if the\r\nmodule declaring `mod name;` \"owns\" the current directory. A module is\r\nconsidered as owning its directory if it meets one of the following criteria:\r\n\r\n* It is the top-level crate file\r\n* It is a `mod.rs` file\r\n* It was loaded via `#[path]`\r\n* It was loaded via `include!`\r\n* The module was declared via an inline `mod foo { ... }` statement\r\n\r\nFor example, this directory structure is now invalid\r\n\r\n    // lib.rs\r\n    mod foo;\r\n\r\n    // foo.rs\r\n    mod bar;\r\n\r\n    // bar.rs;\r\n    fn bar() {}\r\n\r\nWith this change `foo.rs` must be renamed to `foo/mod.rs`, and `bar.rs` must be\r\nrenamed to `foo/bar.rs`. This makes it clear that `bar` is a submodule of `foo`,\r\nand can only be accessed through `foo`.\r\n\r\nRFC: 0016-module-file-system-hierarchy\r\nCloses #14180\r\n\r\n[breaking-change]", "tree": {"sha": "117279b581c3b49419866e5916d94ec26de9a0f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/117279b581c3b49419866e5916d94ec26de9a0f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed156772bd95b8d621d50102922e5f5ac886d4a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed156772bd95b8d621d50102922e5f5ac886d4a1", "html_url": "https://github.com/rust-lang/rust/commit/ed156772bd95b8d621d50102922e5f5ac886d4a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed156772bd95b8d621d50102922e5f5ac886d4a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d2edddc304a7cd8c95ba8b0beb06f0b4ebaca37", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2edddc304a7cd8c95ba8b0beb06f0b4ebaca37", "html_url": "https://github.com/rust-lang/rust/commit/5d2edddc304a7cd8c95ba8b0beb06f0b4ebaca37"}, {"sha": "4e9e091e91ea2ad8a6f45a9b20ff331d4bca7a23", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e9e091e91ea2ad8a6f45a9b20ff331d4bca7a23", "html_url": "https://github.com/rust-lang/rust/commit/4e9e091e91ea2ad8a6f45a9b20ff331d4bca7a23"}], "stats": {"total": 101, "additions": 93, "deletions": 8}, "files": [{"sha": "a695da9fa163e6cc592c585672eaf0f605beffde", "filename": "src/libregex/parse/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Flibregex%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Flibregex%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse%2Fmod.rs?ref=ed156772bd95b8d621d50102922e5f5ac886d4a1", "previous_filename": "src/libregex/parse.rs"}, {"sha": "c263827dab847ae305adbeed4e97adef1b9c1eba", "filename": "src/libregex/parse/unicode.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Flibregex%2Fparse%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Flibregex%2Fparse%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse%2Funicode.rs?ref=ed156772bd95b8d621d50102922e5f5ac886d4a1", "previous_filename": "src/libregex/unicode.rs"}, {"sha": "6df4da89402199b3f50864a2a12b2faa21ca93ba", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=ed156772bd95b8d621d50102922e5f5ac886d4a1", "previous_filename": "src/libsyntax/ext/deriving/generic.rs"}, {"sha": "602245b4c470fc3c2eaf7e9ad5fd9c26c359df4a", "filename": "src/libsyntax/ext/deriving/generic/ty.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs?ref=ed156772bd95b8d621d50102922e5f5ac886d4a1", "previous_filename": "src/libsyntax/ext/deriving/ty.rs"}, {"sha": "6bc08741c079a5c4a4c64e7c388b8fa51fc918c1", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=ed156772bd95b8d621d50102922e5f5ac886d4a1", "patch": "@@ -95,6 +95,8 @@ pub fn expand_include(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                                         &res_rel_file(cx,\n                                                       sp,\n                                                       &Path::new(file)),\n+                                        true,\n+                                        None,\n                                         sp);\n     base::MacExpr::new(p.parse_expr())\n }"}, {"sha": "8e139b049c590f26cd2a6eeda0f3cbcea7aa1e3e", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=ed156772bd95b8d621d50102922e5f5ac886d4a1", "patch": "@@ -184,8 +184,13 @@ pub fn new_parser_from_file<'a>(sess: &'a ParseSess,\n pub fn new_sub_parser_from_file<'a>(sess: &'a ParseSess,\n                                     cfg: ast::CrateConfig,\n                                     path: &Path,\n+                                    owns_directory: bool,\n+                                    module_name: Option<StrBuf>,\n                                     sp: Span) -> Parser<'a> {\n-    filemap_to_parser(sess, file_to_filemap(sess, path, Some(sp)), cfg)\n+    let mut p = filemap_to_parser(sess, file_to_filemap(sess, path, Some(sp)), cfg);\n+    p.owns_directory = owns_directory;\n+    p.root_module_name = module_name;\n+    p\n }\n \n /// Given a filemap and config, return a parser"}, {"sha": "c42febcd607a109cb06254ff83d8fff6567aad9a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ed156772bd95b8d621d50102922e5f5ac886d4a1", "patch": "@@ -313,6 +313,8 @@ pub fn Parser<'a>(\n         obsolete_set: HashSet::new(),\n         mod_path_stack: Vec::new(),\n         open_braces: Vec::new(),\n+        owns_directory: true,\n+        root_module_name: None,\n     }\n }\n \n@@ -342,6 +344,13 @@ pub struct Parser<'a> {\n     pub mod_path_stack: Vec<InternedString>,\n     /// Stack of spans of open delimiters. Used for error message.\n     pub open_braces: Vec<Span>,\n+    /// Flag if this parser \"owns\" the directory that it is currently parsing\n+    /// in. This will affect how nested files are looked up.\n+    pub owns_directory: bool,\n+    /// Name of the root module this parser originated from. If `None`, then the\n+    /// name is not known. This does not change while the parser is descending\n+    /// into modules, and sub-parsers have new values for this name.\n+    pub root_module_name: Option<StrBuf>,\n }\n \n fn is_plain_ident_or_underscore(t: &token::Token) -> bool {\n@@ -4179,9 +4188,12 @@ impl<'a> Parser<'a> {\n             self.push_mod_path(id, outer_attrs);\n             self.expect(&token::LBRACE);\n             let mod_inner_lo = self.span.lo;\n+            let old_owns_directory = self.owns_directory;\n+            self.owns_directory = true;\n             let (inner, next) = self.parse_inner_attrs_and_next();\n             let m = self.parse_mod_items(token::RBRACE, next, mod_inner_lo);\n             self.expect(&token::RBRACE);\n+            self.owns_directory = old_owns_directory;\n             self.pop_mod_path();\n             (id, ItemMod(m), Some(inner))\n         }\n@@ -4211,21 +4223,42 @@ impl<'a> Parser<'a> {\n         prefix.pop();\n         let mod_path = Path::new(\".\").join_many(self.mod_path_stack.as_slice());\n         let dir_path = prefix.join(&mod_path);\n-        let file_path = match ::attr::first_attr_value_str_by_name(\n+        let mod_string = token::get_ident(id);\n+        let (file_path, owns_directory) = match ::attr::first_attr_value_str_by_name(\n                 outer_attrs, \"path\") {\n-            Some(d) => dir_path.join(d),\n+            Some(d) => (dir_path.join(d), true),\n             None => {\n-                let mod_string = token::get_ident(id);\n                 let mod_name = mod_string.get().to_owned();\n                 let default_path_str = mod_name + \".rs\";\n                 let secondary_path_str = mod_name + \"/mod.rs\";\n                 let default_path = dir_path.join(default_path_str.as_slice());\n                 let secondary_path = dir_path.join(secondary_path_str.as_slice());\n                 let default_exists = default_path.exists();\n                 let secondary_exists = secondary_path.exists();\n+\n+                if !self.owns_directory {\n+                    self.span_err(id_sp,\n+                                  \"cannot declare a new module at this location\");\n+                    let this_module = match self.mod_path_stack.last() {\n+                        Some(name) => name.get().to_strbuf(),\n+                        None => self.root_module_name.get_ref().clone(),\n+                    };\n+                    self.span_note(id_sp,\n+                                   format!(\"maybe move this module `{0}` \\\n+                                            to its own directory via \\\n+                                            `{0}/mod.rs`\", this_module));\n+                    if default_exists || secondary_exists {\n+                        self.span_note(id_sp,\n+                                       format!(\"... or maybe `use` the module \\\n+                                                `{}` instead of possibly \\\n+                                                redeclaring it\", mod_name));\n+                    }\n+                    self.abort_if_errors();\n+                }\n+\n                 match (default_exists, secondary_exists) {\n-                    (true, false) => default_path,\n-                    (false, true) => secondary_path,\n+                    (true, false) => (default_path, false),\n+                    (false, true) => (secondary_path, true),\n                     (false, false) => {\n                         self.span_fatal(id_sp, format!(\"file not found for module `{}`\", mod_name));\n                     }\n@@ -4238,11 +4271,14 @@ impl<'a> Parser<'a> {\n             }\n         };\n \n-        self.eval_src_mod_from_path(file_path, id_sp)\n+        self.eval_src_mod_from_path(file_path, owns_directory,\n+                                    mod_string.get().to_strbuf(), id_sp)\n     }\n \n     fn eval_src_mod_from_path(&mut self,\n                               path: Path,\n+                              owns_directory: bool,\n+                              name: StrBuf,\n                               id_sp: Span) -> (ast::Item_, Vec<ast::Attribute> ) {\n         let mut included_mod_stack = self.sess.included_mod_stack.borrow_mut();\n         match included_mod_stack.iter().position(|p| *p == path) {\n@@ -4265,6 +4301,8 @@ impl<'a> Parser<'a> {\n             new_sub_parser_from_file(self.sess,\n                                      self.cfg.clone(),\n                                      &path,\n+                                     owns_directory,\n+                                     Some(name),\n                                      id_sp);\n         let mod_inner_lo = p0.span.lo;\n         let (mod_attrs, next) = p0.parse_inner_attrs_and_next();"}, {"sha": "7296ea655c2ca5192c0481c370eba1c81bcd426b", "filename": "src/test/compile-fail/circular_modules_main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Ftest%2Fcompile-fail%2Fcircular_modules_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Ftest%2Fcompile-fail%2Fcircular_modules_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcircular_modules_main.rs?ref=ed156772bd95b8d621d50102922e5f5ac886d4a1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+#[path = \"circular_modules_hello.rs\"]\n mod circular_modules_hello; //~ERROR: circular modules\n \n pub fn hi_str() -> StrBuf {"}, {"sha": "adbcedd91f205ffe69d7f57099540a4a76cadb8a", "filename": "src/test/compile-fail/mod_file_not_owning.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Ftest%2Fcompile-fail%2Fmod_file_not_owning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Ftest%2Fcompile-fail%2Fmod_file_not_owning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmod_file_not_owning.rs?ref=ed156772bd95b8d621d50102922e5f5ac886d4a1", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: cannot declare a new module at this location\n+\n+mod mod_file_not_owning_aux1;\n+\n+fn main() {}"}, {"sha": "2d522be6dc5dc75badc8e079f4951bfe83f68932", "filename": "src/test/compile-fail/mod_file_not_owning_aux1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Ftest%2Fcompile-fail%2Fmod_file_not_owning_aux1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Ftest%2Fcompile-fail%2Fmod_file_not_owning_aux1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmod_file_not_owning_aux1.rs?ref=ed156772bd95b8d621d50102922e5f5ac886d4a1", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-test this is not a test\n+\n+mod mod_file_not_owning_aux2;"}, {"sha": "41401d640f6242aa2ae5dd985a3d2a5236b79774", "filename": "src/test/compile-fail/mod_file_not_owning_aux2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Ftest%2Fcompile-fail%2Fmod_file_not_owning_aux2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Ftest%2Fcompile-fail%2Fmod_file_not_owning_aux2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmod_file_not_owning_aux2.rs?ref=ed156772bd95b8d621d50102922e5f5ac886d4a1", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-test this is not a test"}, {"sha": "ca45864a5a154e4889c03d6640ffd848a0f2e165", "filename": "src/test/run-pass/mod_dir_simple/load_another_mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Ftest%2Frun-pass%2Fmod_dir_simple%2Fload_another_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed156772bd95b8d621d50102922e5f5ac886d4a1/src%2Ftest%2Frun-pass%2Fmod_dir_simple%2Fload_another_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod_dir_simple%2Fload_another_mod.rs?ref=ed156772bd95b8d621d50102922e5f5ac886d4a1", "patch": "@@ -8,4 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[path = \"test.rs\"]\n pub mod test;"}]}