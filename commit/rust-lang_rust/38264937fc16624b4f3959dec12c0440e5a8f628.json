{"sha": "38264937fc16624b4f3959dec12c0440e5a8f628", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MjY0OTM3ZmMxNjYyNGI0ZjM5NTlkZWMxMmMwNDQwZTVhOGY2Mjg=", "commit": {"author": {"name": "Anders Kaseorg", "email": "andersk@mit.edu", "date": "2019-04-10T04:43:41Z"}, "committer": {"name": "Anders Kaseorg", "email": "andersk@mit.edu", "date": "2019-04-10T04:43:41Z"}, "message": "std::ops::Div examples: correct nominator to numerator\n\nSigned-off-by: Anders Kaseorg <andersk@mit.edu>", "tree": {"sha": "d0f3df128b1b451c1ec8bfffbc043c4d5df1d38b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0f3df128b1b451c1ec8bfffbc043c4d5df1d38b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38264937fc16624b4f3959dec12c0440e5a8f628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38264937fc16624b4f3959dec12c0440e5a8f628", "html_url": "https://github.com/rust-lang/rust/commit/38264937fc16624b4f3959dec12c0440e5a8f628", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38264937fc16624b4f3959dec12c0440e5a8f628/comments", "author": {"login": "andersk", "id": 26471, "node_id": "MDQ6VXNlcjI2NDcx", "avatar_url": "https://avatars.githubusercontent.com/u/26471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andersk", "html_url": "https://github.com/andersk", "followers_url": "https://api.github.com/users/andersk/followers", "following_url": "https://api.github.com/users/andersk/following{/other_user}", "gists_url": "https://api.github.com/users/andersk/gists{/gist_id}", "starred_url": "https://api.github.com/users/andersk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andersk/subscriptions", "organizations_url": "https://api.github.com/users/andersk/orgs", "repos_url": "https://api.github.com/users/andersk/repos", "events_url": "https://api.github.com/users/andersk/events{/privacy}", "received_events_url": "https://api.github.com/users/andersk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andersk", "id": 26471, "node_id": "MDQ6VXNlcjI2NDcx", "avatar_url": "https://avatars.githubusercontent.com/u/26471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andersk", "html_url": "https://github.com/andersk", "followers_url": "https://api.github.com/users/andersk/followers", "following_url": "https://api.github.com/users/andersk/following{/other_user}", "gists_url": "https://api.github.com/users/andersk/gists{/gist_id}", "starred_url": "https://api.github.com/users/andersk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andersk/subscriptions", "organizations_url": "https://api.github.com/users/andersk/orgs", "repos_url": "https://api.github.com/users/andersk/repos", "events_url": "https://api.github.com/users/andersk/events{/privacy}", "received_events_url": "https://api.github.com/users/andersk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3750348daff89741e3153e0e120aa70a45ff5b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/3750348daff89741e3153e0e120aa70a45ff5b68", "html_url": "https://github.com/rust-lang/rust/commit/3750348daff89741e3153e0e120aa70a45ff5b68"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "8139305f5302dd3b750368111fc01391121b9585", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/38264937fc16624b4f3959dec12c0440e5a8f628/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38264937fc16624b4f3959dec12c0440e5a8f628/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=38264937fc16624b4f3959dec12c0440e5a8f628", "patch": "@@ -220,21 +220,21 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// // derive `Eq` and `PartialEq`.\n /// #[derive(Debug, Eq, PartialEq)]\n /// struct Rational {\n-///     nominator: usize,\n+///     numerator: usize,\n ///     denominator: usize,\n /// }\n ///\n /// impl Rational {\n-///     fn new(nominator: usize, denominator: usize) -> Self {\n+///     fn new(numerator: usize, denominator: usize) -> Self {\n ///         if denominator == 0 {\n ///             panic!(\"Zero is an invalid denominator!\");\n ///         }\n ///\n ///         // Reduce to lowest terms by dividing by the greatest common\n ///         // divisor.\n-///         let gcd = gcd(nominator, denominator);\n+///         let gcd = gcd(numerator, denominator);\n ///         Rational {\n-///             nominator: nominator / gcd,\n+///             numerator: numerator / gcd,\n ///             denominator: denominator / gcd,\n ///         }\n ///     }\n@@ -245,9 +245,9 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n ///     type Output = Self;\n ///\n ///     fn mul(self, rhs: Self) -> Self {\n-///         let nominator = self.nominator * rhs.nominator;\n+///         let numerator = self.numerator * rhs.numerator;\n ///         let denominator = self.denominator * rhs.denominator;\n-///         Rational::new(nominator, denominator)\n+///         Rational::new(numerator, denominator)\n ///     }\n /// }\n ///\n@@ -340,21 +340,21 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// // derive `Eq` and `PartialEq`.\n /// #[derive(Debug, Eq, PartialEq)]\n /// struct Rational {\n-///     nominator: usize,\n+///     numerator: usize,\n ///     denominator: usize,\n /// }\n ///\n /// impl Rational {\n-///     fn new(nominator: usize, denominator: usize) -> Self {\n+///     fn new(numerator: usize, denominator: usize) -> Self {\n ///         if denominator == 0 {\n ///             panic!(\"Zero is an invalid denominator!\");\n ///         }\n ///\n ///         // Reduce to lowest terms by dividing by the greatest common\n ///         // divisor.\n-///         let gcd = gcd(nominator, denominator);\n+///         let gcd = gcd(numerator, denominator);\n ///         Rational {\n-///             nominator: nominator / gcd,\n+///             numerator: numerator / gcd,\n ///             denominator: denominator / gcd,\n ///         }\n ///     }\n@@ -365,13 +365,13 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n ///     type Output = Self;\n ///\n ///     fn div(self, rhs: Self) -> Self::Output {\n-///         if rhs.nominator == 0 {\n+///         if rhs.numerator == 0 {\n ///             panic!(\"Cannot divide by zero-valued `Rational`!\");\n ///         }\n ///\n-///         let nominator = self.nominator * rhs.denominator;\n-///         let denominator = self.denominator * rhs.nominator;\n-///         Rational::new(nominator, denominator)\n+///         let numerator = self.numerator * rhs.denominator;\n+///         let denominator = self.denominator * rhs.numerator;\n+///         Rational::new(numerator, denominator)\n ///     }\n /// }\n ///"}]}