{"sha": "d72bcdb42cc10a20c2eef49e5f8cd2782f44b922", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MmJjZGI0MmNjMTBhMjBjMmVlZjQ5ZTVmOGNkMjc4MmY0NGI5MjI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-20T01:27:37Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T19:52:34Z"}, "message": "When object unsafe trait uses itself in associated item suggest using `Self`", "tree": {"sha": "9342efd73bc0a1d7a35281d8e3258bfbceed6b8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9342efd73bc0a1d7a35281d8e3258bfbceed6b8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d72bcdb42cc10a20c2eef49e5f8cd2782f44b922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d72bcdb42cc10a20c2eef49e5f8cd2782f44b922", "html_url": "https://github.com/rust-lang/rust/commit/d72bcdb42cc10a20c2eef49e5f8cd2782f44b922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d72bcdb42cc10a20c2eef49e5f8cd2782f44b922/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c9242f83fdea3e4c7a452d1453370ee81a900af", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c9242f83fdea3e4c7a452d1453370ee81a900af", "html_url": "https://github.com/rust-lang/rust/commit/1c9242f83fdea3e4c7a452d1453370ee81a900af"}], "stats": {"total": 132, "additions": 130, "deletions": 2}, "files": [{"sha": "faeaedce8d00d211b11b8a4f876a7079291c34af", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 67, "deletions": 2, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d72bcdb42cc10a20c2eef49e5f8cd2782f44b922/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72bcdb42cc10a20c2eef49e5f8cd2782f44b922/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d72bcdb42cc10a20c2eef49e5f8cd2782f44b922", "patch": "@@ -10,10 +10,10 @@ use rustc::ty::{\n     self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir::def_id::DefId;\n use rustc_hir::ItemKind;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use syntax::ast;\n \n@@ -176,9 +176,74 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: DefId) {\n         hir::TraitItemKind::Method(ref sig, _) => Some(sig),\n         _ => None,\n     };\n+    check_bare_self_trait_by_name(tcx, &trait_item);\n     check_associated_item(tcx, trait_item.hir_id, trait_item.span, method_sig);\n }\n \n+fn could_be_self(trait_name: Ident, ty: &hir::Ty<'_>) -> bool {\n+    match ty.kind {\n+        hir::TyKind::TraitObject([trait_ref], ..) => {\n+            let mut p = trait_ref.trait_ref.path.segments.iter().map(|s| s.ident);\n+            match (p.next(), p.next()) {\n+                (Some(ident), None) => ident == trait_name,\n+                _ => false,\n+            }\n+        }\n+        _ => false,\n+    }\n+}\n+\n+/// Detect when an object unsafe trait is referring to itself in one of its associated items.\n+/// When this is done, suggest using `Self` instead.\n+fn check_bare_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem<'_>) {\n+    let (trait_name, trait_def_id) = match tcx.hir().get(tcx.hir().get_parent_item(item.hir_id)) {\n+        hir::Node::Item(item) => match item.kind {\n+            hir::ItemKind::Trait(..) => (item.ident, tcx.hir().local_def_id(item.hir_id)),\n+            _ => return,\n+        },\n+        _ => return,\n+    };\n+    let mut trait_should_be_self = vec![];\n+    match &item.kind {\n+        hir::TraitItemKind::Const(ty, _) | hir::TraitItemKind::Type(_, Some(ty))\n+            if could_be_self(trait_name, ty) =>\n+        {\n+            trait_should_be_self.push(ty.span)\n+        }\n+        hir::TraitItemKind::Method(sig, _) => {\n+            for ty in sig.decl.inputs {\n+                if could_be_self(trait_name, ty) {\n+                    trait_should_be_self.push(ty.span);\n+                }\n+            }\n+            match sig.decl.output {\n+                hir::FunctionRetTy::Return(ty) if could_be_self(trait_name, ty) => {\n+                    trait_should_be_self.push(ty.span);\n+                }\n+                _ => {}\n+            }\n+        }\n+        _ => {}\n+    }\n+    if !trait_should_be_self.is_empty() {\n+        if rustc::traits::object_safety_violations(tcx, trait_def_id).is_empty() {\n+            return;\n+        }\n+        let sugg = trait_should_be_self.iter().map(|span| (*span, \"Self\".to_string())).collect();\n+        let mut err = tcx.sess.struct_span_err(\n+            trait_should_be_self,\n+            \"associated item referring to unboxed trait object for its own trait\",\n+        );\n+        err.span_label(trait_name.span, \"in this trait\");\n+        err.multipart_suggestion(\n+            \"you might have meant to use `Self` to refer to the materialized type\",\n+            sugg,\n+            Applicability::MachineApplicable,\n+        );\n+        err.emit();\n+    }\n+}\n+\n pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let impl_item = tcx.hir().expect_impl_item(hir_id);"}, {"sha": "75f99075eb18f9fe44abc3052e68920bfdc8503a", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-self.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d72bcdb42cc10a20c2eef49e5f8cd2782f44b922/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72bcdb42cc10a20c2eef49e5f8cd2782f44b922/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.rs?ref=d72bcdb42cc10a20c2eef49e5f8cd2782f44b922", "patch": "@@ -0,0 +1,16 @@\n+#![allow(bare_trait_objects)]\n+trait A: Sized {\n+    fn f(a: A) -> A;\n+    //~^ ERROR associated item referring to unboxed trait object for its own trait\n+    //~| ERROR the trait `A` cannot be made into an object\n+}\n+trait B {\n+    fn f(a: B) -> B;\n+    //~^ ERROR associated item referring to unboxed trait object for its own trait\n+    //~| ERROR the trait `B` cannot be made into an object\n+}\n+trait C {\n+    fn f(&self, a: C) -> C;\n+}\n+\n+fn main() {}"}, {"sha": "70d069d2aa29b66b6968d7a7bdf7b91c41c7955f", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-self.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d72bcdb42cc10a20c2eef49e5f8cd2782f44b922/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72bcdb42cc10a20c2eef49e5f8cd2782f44b922/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr?ref=d72bcdb42cc10a20c2eef49e5f8cd2782f44b922", "patch": "@@ -0,0 +1,47 @@\n+error: associated item referring to unboxed trait object for its own trait\n+  --> $DIR/object-unsafe-trait-should-use-self.rs:3:13\n+   |\n+LL | trait A: Sized {\n+   |       - in this trait\n+LL |     fn f(a: A) -> A;\n+   |             ^     ^\n+   |\n+help: you might have meant to use `Self` to refer to the materialized type\n+   |\n+LL |     fn f(a: Self) -> Self;\n+   |             ^^^^     ^^^^\n+\n+error[E0038]: the trait `A` cannot be made into an object\n+  --> $DIR/object-unsafe-trait-should-use-self.rs:3:13\n+   |\n+LL | trait A: Sized {\n+   |          ----- the trait cannot require that `Self : Sized`\n+LL |     fn f(a: A) -> A;\n+   |             ^ the trait `A` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+\n+error: associated item referring to unboxed trait object for its own trait\n+  --> $DIR/object-unsafe-trait-should-use-self.rs:8:13\n+   |\n+LL | trait B {\n+   |       - in this trait\n+LL |     fn f(a: B) -> B;\n+   |             ^     ^\n+   |\n+help: you might have meant to use `Self` to refer to the materialized type\n+   |\n+LL |     fn f(a: Self) -> Self;\n+   |             ^^^^     ^^^^\n+\n+error[E0038]: the trait `B` cannot be made into an object\n+  --> $DIR/object-unsafe-trait-should-use-self.rs:8:13\n+   |\n+LL |     fn f(a: B) -> B;\n+   |        -    ^ the trait `B` cannot be made into an object\n+   |        |\n+   |        associated function `f` has no `self` parameter\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}]}