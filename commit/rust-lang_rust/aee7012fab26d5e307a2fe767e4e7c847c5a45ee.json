{"sha": "aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZTcwMTJmYWIyNmQ1ZTMwN2EyZmU3NjdlNGU3Yzg0N2M1YTQ1ZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-30T11:56:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-30T11:56:32Z"}, "message": "Auto merge of #61343 - Centril:rollup-dzsuo01, r=Centril\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #60802 (upgrade rustdoc's `pulldown-cmark` to 0.5.2)\n - #60839 (Fix ICE with struct ctors and const generics.)\n - #60850 (Stabilize RefCell::try_borrow_unguarded)\n - #61231 (Fix linkage diagnostic so it doesn't ICE for external crates)\n - #61244 (Box::into_vec: use Box::into_raw instead of mem::forget)\n - #61279 (implicit `Option`-returning doctests)\n - #61280 (Revert \"Disable solaris target since toolchain no longer builds\")\n - #61284 (Update all s3 URLs used on CI with subdomains)\n - #61321 (libsyntax: introduce 'fn is_keyword_ahead(dist, keywords)'.)\n - #61322 (ci: display more debug information in the init_repo script)\n - #61333 (Fix ICE with APIT in a function with a const parameter)\n\nFailed merges:\n\n - #61304 (Speed up Azure CI installing Windows dependencies)\n\nr? @ghost", "tree": {"sha": "c960557e317e8e2d73db61fd13894d62884b2a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c960557e317e8e2d73db61fd13894d62884b2a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "html_url": "https://github.com/rust-lang/rust/commit/aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c28084ac16af4ab594b6860958df140e7c876a13", "url": "https://api.github.com/repos/rust-lang/rust/commits/c28084ac16af4ab594b6860958df140e7c876a13", "html_url": "https://github.com/rust-lang/rust/commit/c28084ac16af4ab594b6860958df140e7c876a13"}, {"sha": "528972a28aa9e7e303e2283a31469c12c3d87e23", "url": "https://api.github.com/repos/rust-lang/rust/commits/528972a28aa9e7e303e2283a31469c12c3d87e23", "html_url": "https://github.com/rust-lang/rust/commit/528972a28aa9e7e303e2283a31469c12c3d87e23"}], "stats": {"total": 536, "additions": 335, "deletions": 201}, "files": [{"sha": "c824c918280377aab0742a2627c6cb362b4f12e8", "filename": ".azure-pipelines/auto.yml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/.azure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/.azure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fauto.yml?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -274,7 +274,7 @@ jobs:\n         MSYS_BITS: 32\n         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n         SCRIPT: make ci-subset-1\n-        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n         MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n         MINGW_DIR: mingw32\n         # FIXME(#59637)\n@@ -284,14 +284,14 @@ jobs:\n         MSYS_BITS: 32\n         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n         SCRIPT: make ci-subset-2\n-        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n         MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n         MINGW_DIR: mingw32\n       x86_64-mingw-1:\n         MSYS_BITS: 64\n         SCRIPT: make ci-subset-1\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n-        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n         MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n         MINGW_DIR: mingw64\n         # FIXME(#59637)\n@@ -301,7 +301,7 @@ jobs:\n         MSYS_BITS: 64\n         SCRIPT: make ci-subset-2\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n-        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n         MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n         MINGW_DIR: mingw64\n \n@@ -328,7 +328,7 @@ jobs:\n         MSYS_BITS: 32\n         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-full-tools\n         SCRIPT: python x.py dist\n-        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n         MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n         MINGW_DIR: mingw32\n         DIST_REQUIRE_ALL_TOOLS: 1\n@@ -337,7 +337,7 @@ jobs:\n         MSYS_BITS: 64\n         SCRIPT: python x.py dist\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-full-tools\n-        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n         MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n         MINGW_DIR: mingw64\n         DIST_REQUIRE_ALL_TOOLS: 1"}, {"sha": "e1a6ea510d087550d787a6c3bdd96bb3d6f2c482", "filename": ".azure-pipelines/steps/install-clang.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/.azure-pipelines%2Fsteps%2Finstall-clang.yml", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/.azure-pipelines%2Fsteps%2Finstall-clang.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Finstall-clang.yml?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -27,7 +27,7 @@ steps:\n # Original downloaded here came from\n # http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe\n - script: |\n-    powershell -Command \"iwr -outf %TEMP%\\LLVM-7.0.0-win64.exe https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/LLVM-7.0.0-win64.exe\"\n+    powershell -Command \"iwr -outf %TEMP%\\LLVM-7.0.0-win64.exe https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/LLVM-7.0.0-win64.exe\"\n     set CLANG_DIR=%CD%\\citools\\clang-rust\n     %TEMP%\\LLVM-7.0.0-win64.exe /S /NCRC /D=%CLANG_DIR%\n     set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --set llvm.clang-cl=%CLANG_DIR%\\bin\\clang-cl.exe"}, {"sha": "7622f716cc801e6c6dc8042b0c66d576f6c469f8", "filename": ".azure-pipelines/steps/install-sccache.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/.azure-pipelines%2Fsteps%2Finstall-sccache.yml", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/.azure-pipelines%2Fsteps%2Finstall-sccache.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Finstall-sccache.yml?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -2,14 +2,14 @@ steps:\n \n - bash: |\n     set -e\n-    curl -fo /usr/local/bin/sccache https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-02-sccache-x86_64-apple-darwin\n+    curl -fo /usr/local/bin/sccache https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2018-04-02-sccache-x86_64-apple-darwin\n     chmod +x /usr/local/bin/sccache\n   displayName: Install sccache (OSX)\n   condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))\n \n - script: |\n     md sccache\n-    powershell -Command \"iwr -outf sccache\\sccache.exe https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-26-sccache-x86_64-pc-windows-msvc\"\n+    powershell -Command \"iwr -outf sccache\\sccache.exe https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2018-04-26-sccache-x86_64-pc-windows-msvc\"\n     echo ##vso[task.prependpath]%CD%\\sccache\n   displayName: Install sccache (Windows)\n   condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))"}, {"sha": "d79ebe973bafbd623791ac22a0cd74797e211fd3", "filename": ".azure-pipelines/steps/install-windows-build-deps.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/.azure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/.azure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -81,7 +81,7 @@ steps:\n # Note that this is originally from the github releases patch of Ninja\n - script: |\n     md ninja\n-    powershell -Command \"iwr -outf 2017-03-15-ninja-win.zip https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-15-ninja-win.zip\"\n+    powershell -Command \"iwr -outf 2017-03-15-ninja-win.zip https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2017-03-15-ninja-win.zip\"\n     7z x -oninja 2017-03-15-ninja-win.zip\n     del 2017-03-15-ninja-win.zip\n     set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --enable-ninja"}, {"sha": "4bee0e0e2ad2f31d25d73115ff04efe537c7dc9e", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -421,7 +421,7 @@ dependencies = [\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pulldown-cmark 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pulldown-cmark 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex-syntax 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2014,23 +2014,13 @@ dependencies = [\n \n [[package]]\n name = \"pulldown-cmark\"\n-version = \"0.4.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicase 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"pulldown-cmark\"\n-version = \"0.5.0\"\n+version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicase 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicase 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -3077,7 +3067,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"minifier 0.0.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pulldown-cmark 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pulldown-cmark 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -3854,7 +3844,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"unicase\"\n-version = \"2.3.0\"\n+version = \"2.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -4285,8 +4275,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum proc-macro2 0.4.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"77619697826f31a02ae974457af0b29b723e5619e113e9397b8b82c6bd253f09\"\n \"checksum proptest 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"24f5844db2f839e97e3021980975f6ebf8691d9b9b2ca67ed3feb38dc3edb52c\"\n \"checksum pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6fdf85cda6cadfae5428a54661d431330b312bc767ddbc57adbedc24da66e32\"\n-\"checksum pulldown-cmark 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d1b74cc784b038a9921fd1a48310cc2e238101aa8ae0b94201e2d85121dd68b5\"\n-\"checksum pulldown-cmark 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"157737d41407de9c5e0563a991d085117d60ae729af2cc1bf28d6dfbc97bcc1f\"\n+\"checksum pulldown-cmark 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"051e60ace841b3bfecd402fe5051c06cb3bec4a6e6fdd060a37aa8eb829a1db3\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n \"checksum quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07589615d719a60c8dd8a4622e7946465dfef20d1a428f969e3443e7386d5f45\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n@@ -4400,7 +4389,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"612d636f949607bdf9b123b4a6f6d966dedf3ff669f7f045890d3a4a73948169\"\n \"checksum ucd-trie 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"71a9c5b1fe77426cf144cc30e49e955270f5086e31a6441dfa8b32efc09b9d77\"\n \"checksum ucd-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"535c204ee4d8434478593480b8f86ab45ec9aae0e83c568ca81abf0fd0e88f86\"\n-\"checksum unicase 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"41d17211f887da8e4a70a45b9536f26fc5de166b81e2d5d80de4a17fd22553bd\"\n+\"checksum unicase 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a84e5511b2a947f3ae965dcb29b13b7b1691b6e7332cf5dbc1744138d5acb7f6\"\n \"checksum unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\n \"checksum unicode-normalization 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a0180bc61fc5a987082bfa111f4cc95c4caff7f9799f3e46df09163a937aa25\"\n \"checksum unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa6024fc12ddfd1c6dbc14a80fa2324d4568849869b779f6bd37e5e4c03344d1\""}, {"sha": "cd9011730aafb679f9b07b5ef390919fd15f9b0f", "filename": "appveyor.yml", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -59,7 +59,7 @@ environment:\n     MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n     SCRIPT: make ci-subset-1\n-    MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+    MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n     MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32\n     # FIXME(#59637)\n@@ -69,14 +69,14 @@ environment:\n     MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n     SCRIPT: make ci-subset-2\n-    MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+    MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n     MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32\n   - CI_JOB_NAME: x86_64-mingw\n     MSYS_BITS: 64\n     SCRIPT: python x.py test\n     RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n-    MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+    MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n     MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n     MINGW_DIR: mingw64\n     # FIXME(#59637)\n@@ -106,7 +106,7 @@ environment:\n     MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-full-tools --enable-profiler\n     SCRIPT: python x.py dist\n-    MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+    MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n     MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32\n     DIST_REQUIRE_ALL_TOOLS: 1\n@@ -115,7 +115,7 @@ environment:\n     MSYS_BITS: 64\n     SCRIPT: python x.py dist\n     RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-full-tools --enable-profiler\n-    MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+    MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n     MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n     MINGW_DIR: mingw64\n     DIST_REQUIRE_ALL_TOOLS: 1\n@@ -159,7 +159,7 @@ install:\n   #\n   # Original downloaded here came from\n   # http://releases.llvm.org/8.0.0/LLVM-8.0.0-win64.exe\n-  - if NOT defined MINGW_URL appveyor-retry appveyor DownloadFile https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/LLVM-8.0.0-win64.exe\n+  - if NOT defined MINGW_URL appveyor-retry appveyor DownloadFile https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/LLVM-8.0.0-win64.exe\n   - if NOT defined MINGW_URL .\\LLVM-8.0.0-win64.exe /S /NCRC /D=C:\\clang-rust\n   - if NOT defined MINGW_URL set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --set llvm.clang-cl=C:\\clang-rust\\bin\\clang-cl.exe\n \n@@ -191,25 +191,25 @@ install:\n   - set PATH=C:\\Python27;%PATH%\n \n   # Download and install sccache\n-  - appveyor-retry appveyor DownloadFile https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-26-sccache-x86_64-pc-windows-msvc\n+  - appveyor-retry appveyor DownloadFile https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2018-04-26-sccache-x86_64-pc-windows-msvc\n   - mv 2018-04-26-sccache-x86_64-pc-windows-msvc sccache.exe\n   - set PATH=%PATH%;%CD%\n \n   # Download and install ninja\n   #\n   # Note that this is originally from the github releases patch of Ninja\n-  - appveyor-retry appveyor DownloadFile https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-15-ninja-win.zip\n+  - appveyor-retry appveyor DownloadFile https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2017-03-15-ninja-win.zip\n   - 7z x 2017-03-15-ninja-win.zip\n   - set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --enable-ninja\n   # - set PATH=%PATH%;%CD% -- this already happens above for sccache\n \n   # Install InnoSetup to get `iscc` used to produce installers\n-  - appveyor-retry appveyor DownloadFile https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-08-22-is.exe\n+  - appveyor-retry appveyor DownloadFile https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2017-08-22-is.exe\n   - 2017-08-22-is.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-\n   - set PATH=\"C:\\Program Files (x86)\\Inno Setup 5\";%PATH%\n \n   # Help debug some handle issues on AppVeyor\n-  - appveyor-retry appveyor DownloadFile https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-05-15-Handle.zip\n+  - appveyor-retry appveyor DownloadFile https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2017-05-15-Handle.zip\n   - mkdir handle\n   - 7z x -ohandle 2017-05-15-Handle.zip\n   - set PATH=%PATH%;%CD%\\handle"}, {"sha": "235920833f83980cf89acdbe1e6fcc1969cfebd0", "filename": "src/ci/docker/armhf-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -72,7 +72,7 @@ RUN arm-linux-gnueabihf-gcc addentropy.c -o rootfs/addentropy -static\n \n # TODO: What is this?!\n # Source of the file: https://github.com/vfdev-5/qemu-rpi2-vexpress/raw/master/vexpress-v2p-ca15-tc1.dtb\n-RUN curl -O https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/vexpress-v2p-ca15-tc1.dtb\n+RUN curl -O https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/vexpress-v2p-ca15-tc1.dtb\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "60a96e3b8e9524e5d951249ae58649ae4b23cea6", "filename": "src/ci/docker/dist-various-1/install-mips-musl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mips-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mips-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mips-musl.sh?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -5,7 +5,7 @@ mkdir /usr/local/mips-linux-musl\n # originally from\n # https://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/\n # OpenWrt-Toolchain-ar71xx-generic_gcc-5.3.0_musl-1.1.16.Linux-x86_64.tar.bz2\n-URL=\"https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\"\n+URL=\"https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\"\n FILE=\"OpenWrt-Toolchain-ar71xx-generic_gcc-5.3.0_musl-1.1.16.Linux-x86_64.tar.bz2\"\n curl -L \"$URL/$FILE\" | tar xjf - -C /usr/local/mips-linux-musl --strip-components=2\n "}, {"sha": "9ae41218ee4fbf2f429510d50fb7f8b475aa4c07", "filename": "src/ci/docker/dist-various-1/install-mipsel-musl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mipsel-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mipsel-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mipsel-musl.sh?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -5,7 +5,7 @@ mkdir /usr/local/mipsel-linux-musl\n # Note that this originally came from:\n # https://downloads.openwrt.org/snapshots/trunk/malta/generic/\n # OpenWrt-Toolchain-malta-le_gcc-5.3.0_musl-1.1.15.Linux-x86_64.tar.bz2\n-URL=\"https://s3-us-west-1.amazonaws.com/rust-lang-ci2/libc\"\n+URL=\"https://rust-lang-ci2.s3.amazonaws.com/libc\"\n FILE=\"OpenWrt-Toolchain-malta-le_gcc-5.3.0_musl-1.1.15.Linux-x86_64.tar.bz2\"\n curl -L \"$URL/$FILE\" | tar xjf - -C /usr/local/mipsel-linux-musl --strip-components=2\n "}, {"sha": "53523d41a55804510cfd2933d79a06048442c1cb", "filename": "src/ci/docker/dist-various-2/Dockerfile", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -32,10 +32,9 @@ COPY dist-various-2/build-cloudabi-toolchain.sh /tmp/\n RUN /tmp/build-cloudabi-toolchain.sh x86_64-unknown-cloudabi\n COPY dist-various-2/build-fuchsia-toolchain.sh /tmp/\n RUN /tmp/build-fuchsia-toolchain.sh\n-# FIXME(#61022) - reenable solaris\n-# COPY dist-various-2/build-solaris-toolchain.sh /tmp/\n-# RUN /tmp/build-solaris-toolchain.sh x86_64  amd64   solaris-i386\n-# RUN /tmp/build-solaris-toolchain.sh sparcv9 sparcv9 solaris-sparc\n+COPY dist-various-2/build-solaris-toolchain.sh /tmp/\n+RUN /tmp/build-solaris-toolchain.sh x86_64  amd64   solaris-i386\n+RUN /tmp/build-solaris-toolchain.sh sparcv9 sparcv9 solaris-sparc\n COPY dist-various-2/build-x86_64-fortanix-unknown-sgx-toolchain.sh /tmp/\n # We pass the commit id of the port of LLVM's libunwind to the build script.\n # Any update to the commit id here, should cause the container image to be re-built from this point on.\n@@ -76,9 +75,8 @@ ENV TARGETS=x86_64-fuchsia\n ENV TARGETS=$TARGETS,aarch64-fuchsia\n ENV TARGETS=$TARGETS,wasm32-unknown-unknown\n ENV TARGETS=$TARGETS,wasm32-wasi\n-# FIXME(#61022) - reenable solaris\n-# ENV TARGETS=$TARGETS,sparcv9-sun-solaris\n-# ENV TARGETS=$TARGETS,x86_64-sun-solaris\n+ENV TARGETS=$TARGETS,sparcv9-sun-solaris\n+ENV TARGETS=$TARGETS,x86_64-sun-solaris\n ENV TARGETS=$TARGETS,x86_64-unknown-linux-gnux32\n ENV TARGETS=$TARGETS,x86_64-unknown-cloudabi\n ENV TARGETS=$TARGETS,x86_64-fortanix-unknown-sgx"}, {"sha": "7bf8946c4f136a4d3b7b09206bd3b3404701232c", "filename": "src/ci/docker/dist-various-2/build-wasi-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -5,7 +5,7 @@\n set -ex\n \n # Originally from https://releases.llvm.org/8.0.0/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n-curl https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/clang%2Bllvm-8.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz | \\\n+curl https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/clang%2Bllvm-8.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz | \\\n   tar xJf -\n export PATH=`pwd`/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-14.04/bin:$PATH\n "}, {"sha": "13dae6169053a09a3eedd892180c11da48d8aba5", "filename": "src/ci/docker/dist-x86_64-linux/build-openssl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -4,7 +4,7 @@ set -ex\n source shared.sh\n \n VERSION=1.0.2k\n-URL=https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/openssl-$VERSION.tar.gz\n+URL=https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/openssl-$VERSION.tar.gz\n \n curl $URL | tar xzf -\n "}, {"sha": "2e9b9dcc2344ed2d1c38f30c53bf18f5e348381e", "filename": "src/ci/docker/dist-x86_64-netbsd/build-netbsd-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -25,7 +25,7 @@ cd netbsd\n \n mkdir -p /x-tools/x86_64-unknown-netbsd/sysroot\n \n-URL=https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+URL=https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n \n # Originally from ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-$BSD/source/sets/*.tgz\n curl $URL/2018-03-01-netbsd-src.tgz | tar xzf -"}, {"sha": "47196e8939626a69bc82255bac116f0a68981459", "filename": "src/ci/docker/scripts/emscripten.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -18,7 +18,7 @@ exit 1\n }\n \n cd /\n-curl -fL https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz | \\\n+curl -fL https://mozilla-games.s3.amazonaws.com/emscripten/releases/emsdk-portable.tar.gz | \\\n     tar -xz\n \n cd /emsdk-portable"}, {"sha": "8cef69d9c26bb5b34c4f726d541ffe5985cb9a5f", "filename": "src/ci/docker/scripts/freebsd-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -59,7 +59,7 @@ done\n \n # Originally downloaded from:\n # https://download.freebsd.org/ftp/releases/${freebsd_arch}/${freebsd_version}-RELEASE/base.txz\n-URL=https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2019-04-04-freebsd-${freebsd_arch}-${freebsd_version}-RELEASE-base.txz\n+URL=https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2019-04-04-freebsd-${freebsd_arch}-${freebsd_version}-RELEASE-base.txz\n curl \"$URL\" | tar xJf - -C \"$sysroot\" --wildcards \"${files_to_extract[@]}\"\n \n # Fix up absolute symlinks from the system image.  This can be removed"}, {"sha": "194de3c339f8c4ef22ef574214237e1013ac1a2b", "filename": "src/ci/docker/scripts/sccache.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -1,6 +1,6 @@\n set -ex\n \n curl -fo /usr/local/bin/sccache \\\n-  https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-02-sccache-x86_64-unknown-linux-musl\n+  https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2018-04-02-sccache-x86_64-unknown-linux-musl\n \n chmod +x /usr/local/bin/sccache"}, {"sha": "8b635810825f176d18cb5853c649556ea41e0cdc", "filename": "src/ci/init_repo.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -1,5 +1,9 @@\n #!/usr/bin/env bash\n \n+# FIXME(61301): we need to debug spurious failures with this on Windows on\n+# Azure, so let's print more information in the logs.\n+set -x\n+\n set -o errexit\n set -o pipefail\n set -o nounset"}, {"sha": "a896ce819aeb7e389c03d6aa7987e18940727435", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -253,6 +253,19 @@ conversion, so type inference fails because the type is not unique. Please note\n that you must write the `(())` in one sequence without intermediate whitespace\n so that rustdoc understands you want an implicit `Result`-returning function.\n \n+As of version 1.37.0, this simplification also works with `Option`s, which can\n+be handy to test e.g. iterators or checked arithmetic, for example:\n+\n+```ignore\n+/// ```\n+/// let _ = &[].iter().next()?;\n+///# Some(())\n+/// ```\n+```\n+\n+Note that the result must be a `Some(())` and this has to be written in one go.\n+In this case disambiguating the result isn't required.\n+\n ## Documenting macros\n \n Here\u2019s an example of documenting a macro:"}, {"sha": "304b8dffe98679c9f6fea3e7d2558757c1797563", "filename": "src/doc/unstable-book/src/library-features/borrow-state.md", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c28084ac16af4ab594b6860958df140e7c876a13/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fborrow-state.md", "raw_url": "https://github.com/rust-lang/rust/raw/c28084ac16af4ab594b6860958df140e7c876a13/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fborrow-state.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fborrow-state.md?ref=c28084ac16af4ab594b6860958df140e7c876a13", "patch": "@@ -1,7 +0,0 @@\n-# `borrow_state`\n-\n-The tracking issue for this feature is: [#27733]\n-\n-[#27733]: https://github.com/rust-lang/rust/issues/27733\n-\n-------------------------"}, {"sha": "aeb7f90d3e60e946d0d0e8efc19948bb8b2ef6a0", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -137,17 +137,16 @@ pub use hack::to_vec;\n // `core::slice::SliceExt` - we need to supply these functions for the\n // `test_permutations` test\n mod hack {\n-    use core::mem;\n-\n     use crate::boxed::Box;\n     use crate::vec::Vec;\n     #[cfg(test)]\n     use crate::string::ToString;\n \n-    pub fn into_vec<T>(mut b: Box<[T]>) -> Vec<T> {\n+    pub fn into_vec<T>(b: Box<[T]>) -> Vec<T> {\n         unsafe {\n-            let xs = Vec::from_raw_parts(b.as_mut_ptr(), b.len(), b.len());\n-            mem::forget(b);\n+            let len = b.len();\n+            let b = Box::into_raw(b);\n+            let xs = Vec::from_raw_parts(b as *mut T, len, len);\n             xs\n         }\n     }"}, {"sha": "9d26ecbacdcbbad1802e727b706cd2a5821450ad", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -967,7 +967,6 @@ impl<T: ?Sized> RefCell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(borrow_state)]\n     /// use std::cell::RefCell;\n     ///\n     /// let c = RefCell::new(5);\n@@ -982,7 +981,7 @@ impl<T: ?Sized> RefCell<T> {\n     ///     assert!(unsafe { c.try_borrow_unguarded() }.is_ok());\n     /// }\n     /// ```\n-    #[unstable(feature = \"borrow_state\", issue = \"27733\")]\n+    #[stable(feature = \"borrow_state\", since = \"1.37.0\")]\n     #[inline]\n     pub unsafe fn try_borrow_unguarded(&self) -> Result<&T, BorrowError> {\n         if !is_writing(self.borrow.get()) {"}, {"sha": "08fbd0d20d74dac3a23818ad7ee4cf5e4fc187aa", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -1083,6 +1083,18 @@ impl<'a> LoweringContext<'a> {\n             .chain(in_band_defs)\n             .collect();\n \n+        // FIXME(const_generics): the compiler doesn't always cope with\n+        // unsorted generic parameters at the moment, so we make sure\n+        // that they're ordered correctly here for now. (When we chain\n+        // the `in_band_defs`, we might make the order unsorted.)\n+        lowered_generics.params.sort_by_key(|param| {\n+            match param.kind {\n+                hir::GenericParamKind::Lifetime { .. } => ParamKindOrd::Lifetime,\n+                hir::GenericParamKind::Type { .. } => ParamKindOrd::Type,\n+                hir::GenericParamKind::Const { .. } => ParamKindOrd::Const,\n+            }\n+        });\n+\n         (lowered_generics, res)\n     }\n "}, {"sha": "f03a8ddc90825a7a23086878d2150da9d2bb744d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -425,6 +425,13 @@ impl GenericArg {\n             GenericArg::Const(c) => c.value.hir_id,\n         }\n     }\n+\n+    pub fn is_const(&self) -> bool {\n+        match self {\n+            GenericArg::Const(_) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]"}, {"sha": "99b5cf42551faff6d56c991e7174c3180c905d7d", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -102,7 +102,7 @@ fn check_and_apply_linkage(\n     attrs: &CodegenFnAttrs,\n     ty: Ty<'tcx>,\n     sym: LocalInternedString,\n-    span: Option<Span>\n+    span: Span\n ) -> &'ll Value {\n     let llty = cx.layout_of(ty).llvm_type(cx);\n     if let Some(linkage) = attrs.linkage {\n@@ -116,11 +116,8 @@ fn check_and_apply_linkage(\n         let llty2 = if let ty::RawPtr(ref mt) = ty.sty {\n             cx.layout_of(mt.ty).llvm_type(cx)\n         } else {\n-            if let Some(span) = span {\n-                cx.sess().span_fatal(span, \"must have type `*const T` or `*mut T`\")\n-            } else {\n-                bug!(\"must have type `*const T` or `*mut T`\")\n-            }\n+            cx.sess().span_fatal(\n+                span, \"must have type `*const T` or `*mut T` due to `#[linkage]` attribute\")\n         };\n         unsafe {\n             // Declare a symbol `foo` with the desired linkage.\n@@ -136,14 +133,7 @@ fn check_and_apply_linkage(\n             let mut real_name = \"_rust_extern_with_linkage_\".to_string();\n             real_name.push_str(&sym);\n             let g2 = cx.define_global(&real_name, llty).unwrap_or_else(||{\n-                if let Some(span) = span {\n-                    cx.sess().span_fatal(\n-                        span,\n-                        &format!(\"symbol `{}` is already defined\", &sym)\n-                    )\n-                } else {\n-                    bug!(\"symbol `{}` is already defined\", &sym)\n-                }\n+                cx.sess().span_fatal(span, &format!(\"symbol `{}` is already defined\", &sym))\n             });\n             llvm::LLVMRustSetLinkage(g2, llvm::Linkage::InternalLinkage);\n             llvm::LLVMSetInitializer(g2, g1);\n@@ -240,7 +230,7 @@ impl CodegenCx<'ll, 'tcx> {\n                     ref attrs, span, node: hir::ForeignItemKind::Static(..), ..\n                 }) => {\n                     let fn_attrs = self.tcx.codegen_fn_attrs(def_id);\n-                    (check_and_apply_linkage(&self, &fn_attrs, ty, sym, Some(span)), attrs)\n+                    (check_and_apply_linkage(&self, &fn_attrs, ty, sym, span), attrs)\n                 }\n \n                 item => bug!(\"get_static: expected static, found {:?}\", item)\n@@ -260,7 +250,8 @@ impl CodegenCx<'ll, 'tcx> {\n             debug!(\"get_static: sym={} item_attr={:?}\", sym, self.tcx.item_attrs(def_id));\n \n             let attrs = self.tcx.codegen_fn_attrs(def_id);\n-            let g = check_and_apply_linkage(&self, &attrs, ty, sym, None);\n+            let span = self.tcx.def_span(def_id);\n+            let g = check_and_apply_linkage(&self, &attrs, ty, sym, span);\n \n             // Thread-local statics in some other crate need to *always* be linked\n             // against in a thread-local fashion, so we need to be sure to apply the"}, {"sha": "3806fd0998b5e8785c16f3b1c77d44a61d4c14f4", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 47, "deletions": 51, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -27,7 +27,7 @@ use rustc::ty::subst::{Subst, InternalSubsts};\n use rustc::ty::util::Discr;\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::subst::UnpackedKind;\n-use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n+use rustc::ty::{self, AdtKind, DefIdTree, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::{ReprOptions, ToPredicate};\n use rustc::util::captures::Captures;\n use rustc::util::nodemap::FxHashMap;\n@@ -1349,65 +1349,61 @@ pub fn checked_type_of<'a, 'tcx>(\n \n                     match path {\n                         QPath::Resolved(_, ref path) => {\n-                            let mut arg_index = 0;\n-                            let mut found_const = false;\n-                            for seg in &path.segments {\n-                                if let Some(generic_args) = &seg.args {\n-                                    let args = &generic_args.args;\n-                                    for arg in args {\n-                                        if let GenericArg::Const(ct) = arg {\n-                                            if ct.value.hir_id == hir_id {\n-                                                found_const = true;\n-                                                break;\n-                                            }\n-                                            arg_index += 1;\n-                                        }\n-                                    }\n-                                }\n-                            }\n-                            // Sanity check to make sure everything is as expected.\n-                            if !found_const {\n-                                if !fail {\n-                                    return None;\n-                                }\n-                                bug!(\"no arg matching AnonConst in path\")\n-                            }\n-                            match path.res {\n-                                // We've encountered an `AnonConst` in some path, so we need to\n-                                // figure out which generic parameter it corresponds to and return\n-                                // the relevant type.\n-                                Res::Def(DefKind::Struct, def_id)\n-                                | Res::Def(DefKind::Union, def_id)\n-                                | Res::Def(DefKind::Enum, def_id)\n-                                | Res::Def(DefKind::Fn, def_id) => {\n-                                    let generics = tcx.generics_of(def_id);\n-                                    let mut param_index = 0;\n-                                    for param in &generics.params {\n-                                        if let ty::GenericParamDefKind::Const = param.kind {\n-                                            if param_index == arg_index {\n-                                                return Some(tcx.type_of(param.def_id));\n-                                            }\n-                                            param_index += 1;\n-                                        }\n-                                    }\n-                                    // This is no generic parameter associated with the arg. This is\n-                                    // probably from an extra arg where one is not needed.\n-                                    return Some(tcx.types.err);\n-                                }\n-                                Res::Err => tcx.types.err,\n-                                x => {\n+                            let arg_index = path.segments.iter()\n+                                .filter_map(|seg| seg.args.as_ref())\n+                                .map(|generic_args| generic_args.args.as_ref())\n+                                .find_map(|args| {\n+                                    args.iter()\n+                                        .filter(|arg| arg.is_const())\n+                                        .enumerate()\n+                                        .filter(|(_, arg)| arg.id() == hir_id)\n+                                        .map(|(index, _)| index)\n+                                        .next()\n+                                })\n+                                .or_else(|| {\n                                     if !fail {\n-                                        return None;\n+                                        None\n+                                    } else {\n+                                        bug!(\"no arg matching AnonConst in path\")\n                                     }\n+                                })?;\n+\n+                            // We've encountered an `AnonConst` in some path, so we need to\n+                            // figure out which generic parameter it corresponds to and return\n+                            // the relevant type.\n+                            let generics = match path.res {\n+                                Res::Def(DefKind::Ctor(..), def_id) =>\n+                                    tcx.generics_of(tcx.parent(def_id).unwrap()),\n+                                Res::Def(_, def_id) =>\n+                                    tcx.generics_of(def_id),\n+                                Res::Err =>\n+                                    return Some(tcx.types.err),\n+                                _ if !fail =>\n+                                    return None,\n+                                x => {\n                                     tcx.sess.delay_span_bug(\n                                         DUMMY_SP,\n                                         &format!(\n                                             \"unexpected const parent path def {:?}\", x\n                                         ),\n                                     );\n-                                    tcx.types.err\n+                                    return Some(tcx.types.err);\n                                 }\n-                            }\n+                            };\n+\n+                            generics.params.iter()\n+                                .filter(|param| {\n+                                    if let ty::GenericParamDefKind::Const = param.kind {\n+                                        true\n+                                    } else {\n+                                        false\n+                                    }\n+                                })\n+                                .nth(arg_index)\n+                                .map(|param| tcx.type_of(param.def_id))\n+                                // This is no generic parameter associated with the arg. This is\n+                                // probably from an extra arg where one is not needed.\n+                                .unwrap_or(tcx.types.err)\n                         }\n                         x => {\n                             if !fail {"}, {"sha": "b75212d606fa5a63894b23c5d542dea00fe2e0c5", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -9,7 +9,7 @@ name = \"rustdoc\"\n path = \"lib.rs\"\n \n [dependencies]\n-pulldown-cmark = { version = \"0.4.1\", default-features = false }\n+pulldown-cmark = { version = \"0.5.2\", default-features = false }\n minifier = \"0.0.30\"\n tempfile = \"3\"\n parking_lot = \"0.7\""}, {"sha": "334b83156507654dc638765b652ff1d942cb3a42", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -351,9 +351,11 @@ impl<'a, 'b, 'ids, I: Iterator<Item = Event<'a>>> Iterator for HeadingLinks<'a,\n         if let Some(Event::Start(Tag::Header(level))) = event {\n             let mut id = String::new();\n             for event in &mut self.inner {\n-                match event {\n+                match &event {\n                     Event::End(Tag::Header(..)) => break,\n-                    Event::Text(ref text) => id.extend(text.chars().filter_map(slugify)),\n+                    Event::Text(text) | Event::Code(text) => {\n+                        id.extend(text.chars().filter_map(slugify));\n+                    }\n                     _ => {},\n                 }\n                 self.buf.push_back(event);\n@@ -402,7 +404,6 @@ fn check_if_allowed_tag(t: &Tag<'_>) -> bool {\n         | Tag::Item\n         | Tag::Emphasis\n         | Tag::Strong\n-        | Tag::Code\n         | Tag::Link(..)\n         | Tag::BlockQuote => true,\n         _ => false,\n@@ -790,9 +791,8 @@ pub fn plain_summary_line_full(md: &str, limit_length: bool) -> String {\n             let next_event = next_event.unwrap();\n             let (ret, is_in) = match next_event {\n                 Event::Start(Tag::Paragraph) => (None, 1),\n-                Event::Start(Tag::Code) => (Some(\"`\".to_owned()), 1),\n-                Event::End(Tag::Code) => (Some(\"`\".to_owned()), -1),\n                 Event::Start(Tag::Header(_)) => (None, 1),\n+                Event::Code(code) => (Some(format!(\"`{}`\", code)), 0),\n                 Event::Text(ref s) if self.is_in > 0 => (Some(s.as_ref().to_owned()), 0),\n                 Event::End(Tag::Paragraph) | Event::End(Tag::Header(_)) => (None, -1),\n                 _ => (None, 0),"}, {"sha": "5bce5d6ba5de1b264289dda9f60fa77cc50d22fb", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -530,8 +530,13 @@ pub fn make_test(s: &str,\n         prog.push_str(everything_else);\n     } else {\n         let returns_result = everything_else.trim_end().ends_with(\"(())\");\n+        let returns_option = everything_else.trim_end().ends_with(\"Some(())\");\n         let (main_pre, main_post) = if returns_result {\n-            (\"fn main() { fn _inner() -> Result<(), impl core::fmt::Debug> {\",\n+            (if returns_option {\n+                \"fn main() { fn _inner() -> Option<()> {\"\n+            } else {\n+                \"fn main() { fn _inner() -> Result<(), impl core::fmt::Debug> {\"\n+            },\n              \"}\\n_inner().unwrap() }\")\n         } else {\n             (\"fn main() {\\n\", \"\\n}\")"}, {"sha": "746e9cad4962ca4057e9214ef433aedaedade7f2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 38, "deletions": 35, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -1087,6 +1087,11 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.\n+    fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {\n+        self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))\n+    }\n+\n     /// Is the current token one of the keywords that signals a bare function type?\n     fn token_is_bare_fn_keyword(&mut self) -> bool {\n         self.check_keyword(kw::Fn) ||\n@@ -4270,7 +4275,7 @@ impl<'a> Parser<'a> {\n         self.token.is_keyword(kw::Async) &&\n         (\n             ( // `async move {`\n-                self.look_ahead(1, |t| t.is_keyword(kw::Move)) &&\n+                self.is_keyword_ahead(1, &[kw::Move]) &&\n                 self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace))\n             ) || ( // `async {`\n                 self.look_ahead(1, |t| *t == token::OpenDelim(token::Brace))\n@@ -4280,12 +4285,12 @@ impl<'a> Parser<'a> {\n \n     fn is_async_fn(&self) -> bool {\n         self.token.is_keyword(kw::Async) &&\n-            self.look_ahead(1, |t| t.is_keyword(kw::Fn))\n+            self.is_keyword_ahead(1, &[kw::Fn])\n     }\n \n     fn is_do_catch_block(&self) -> bool {\n         self.token.is_keyword(kw::Do) &&\n-        self.look_ahead(1, |t| t.is_keyword(kw::Catch)) &&\n+        self.is_keyword_ahead(1, &[kw::Catch]) &&\n         self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace)) &&\n         !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL)\n     }\n@@ -4309,17 +4314,17 @@ impl<'a> Parser<'a> {\n \n     fn is_existential_type_decl(&self) -> bool {\n         self.token.is_keyword(kw::Existential) &&\n-        self.look_ahead(1, |t| t.is_keyword(kw::Type))\n+        self.is_keyword_ahead(1, &[kw::Type])\n     }\n \n     fn is_auto_trait_item(&self) -> bool {\n         // auto trait\n-        (self.token.is_keyword(kw::Auto)\n-            && self.look_ahead(1, |t| t.is_keyword(kw::Trait)))\n+        (self.token.is_keyword(kw::Auto) &&\n+            self.is_keyword_ahead(1, &[kw::Trait]))\n         || // unsafe auto trait\n         (self.token.is_keyword(kw::Unsafe) &&\n-         self.look_ahead(1, |t| t.is_keyword(kw::Auto)) &&\n-         self.look_ahead(2, |t| t.is_keyword(kw::Trait)))\n+         self.is_keyword_ahead(1, &[kw::Auto]) &&\n+         self.is_keyword_ahead(2, &[kw::Trait]))\n     }\n \n     fn eat_macro_def(&mut self, attrs: &[Attribute], vis: &Visibility, lo: Span)\n@@ -5486,7 +5491,7 @@ impl<'a> Parser<'a> {\n                 (if isolated_self(self, 1) {\n                     self.bump();\n                     SelfKind::Region(None, Mutability::Immutable)\n-                } else if self.look_ahead(1, |t| t.is_keyword(kw::Mut)) &&\n+                } else if self.is_keyword_ahead(1, &[kw::Mut]) &&\n                           isolated_self(self, 2) {\n                     self.bump();\n                     self.bump();\n@@ -5497,7 +5502,7 @@ impl<'a> Parser<'a> {\n                     let lt = self.expect_lifetime();\n                     SelfKind::Region(Some(lt), Mutability::Immutable)\n                 } else if self.look_ahead(1, |t| t.is_lifetime()) &&\n-                          self.look_ahead(2, |t| t.is_keyword(kw::Mut)) &&\n+                          self.is_keyword_ahead(2, &[kw::Mut]) &&\n                           isolated_self(self, 3) {\n                     self.bump();\n                     let lt = self.expect_lifetime();\n@@ -5676,8 +5681,7 @@ impl<'a> Parser<'a> {\n     /// (returns `false` for things like `const fn`, etc.).\n     fn is_const_item(&self) -> bool {\n         self.token.is_keyword(kw::Const) &&\n-            !self.look_ahead(1, |t| t.is_keyword(kw::Fn)) &&\n-            !self.look_ahead(1, |t| t.is_keyword(kw::Unsafe))\n+            !self.is_keyword_ahead(1, &[kw::Fn, kw::Unsafe])\n     }\n \n     /// Parses all the \"front matter\" for a `fn` declaration, up to\n@@ -5955,7 +5959,7 @@ impl<'a> Parser<'a> {\n              self.look_ahead(1, |t| t.is_lifetime() || t.is_ident()) &&\n                 self.look_ahead(2, |t| t == &token::Gt || t == &token::Comma ||\n                                        t == &token::Colon || t == &token::Eq) ||\n-             self.look_ahead(1, |t| t.is_keyword(kw::Const)))\n+            self.is_keyword_ahead(1, &[kw::Const]))\n     }\n \n     fn parse_impl_body(&mut self) -> PResult<'a, (Vec<ImplItem>, Vec<Attribute>)> {\n@@ -6316,7 +6320,7 @@ impl<'a> Parser<'a> {\n             // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.\n             // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so\n             // by the following tokens.\n-            if self.look_ahead(1, |t| t.is_keyword(kw::Crate)) &&\n+            if self.is_keyword_ahead(1, &[kw::Crate]) &&\n                 self.look_ahead(2, |t| t != &token::ModSep) // account for `pub(crate::foo)`\n             {\n                 // `pub(crate)`\n@@ -6328,7 +6332,7 @@ impl<'a> Parser<'a> {\n                     VisibilityKind::Crate(CrateSugar::PubCrate),\n                 );\n                 return Ok(vis)\n-            } else if self.look_ahead(1, |t| t.is_keyword(kw::In)) {\n+            } else if self.is_keyword_ahead(1, &[kw::In]) {\n                 // `pub(in path)`\n                 self.bump(); // `(`\n                 self.bump(); // `in`\n@@ -6340,8 +6344,7 @@ impl<'a> Parser<'a> {\n                 });\n                 return Ok(vis)\n             } else if self.look_ahead(2, |t| t == &token::CloseDelim(token::Paren)) &&\n-                      self.look_ahead(1, |t| t.is_keyword(kw::Super) ||\n-                                             t.is_keyword(kw::SelfLower))\n+                      self.is_keyword_ahead(1, &[kw::Super, kw::SelfLower])\n             {\n                 // `pub(self)` or `pub(super)`\n                 self.bump(); // `(`\n@@ -6380,13 +6383,16 @@ impl<'a> Parser<'a> {\n     fn parse_defaultness(&mut self) -> Defaultness {\n         // `pub` is included for better error messages\n         if self.check_keyword(kw::Default) &&\n-           self.look_ahead(1, |t| t.is_keyword(kw::Impl) ||\n-                                  t.is_keyword(kw::Const) ||\n-                                  t.is_keyword(kw::Fn) ||\n-                                  t.is_keyword(kw::Unsafe) ||\n-                                  t.is_keyword(kw::Extern) ||\n-                                  t.is_keyword(kw::Type) ||\n-                                  t.is_keyword(kw::Pub)) {\n+            self.is_keyword_ahead(1, &[\n+                kw::Impl,\n+                kw::Const,\n+                kw::Fn,\n+                kw::Unsafe,\n+                kw::Extern,\n+                kw::Type,\n+                kw::Pub,\n+            ])\n+        {\n             self.bump(); // `default`\n             Defaultness::Default\n         } else {\n@@ -6880,7 +6886,7 @@ impl<'a> Parser<'a> {\n         //     Ident [\"<\"...\">\"] [\"where\" ...] (\"=\" | \":\") Ty \";\"\n         if self.check_keyword(kw::Type) ||\n            self.check_keyword(kw::Existential) &&\n-                self.look_ahead(1, |t| t.is_keyword(kw::Type)) {\n+                self.is_keyword_ahead(1, &[kw::Type]) {\n             let existential = self.eat_keyword(kw::Existential);\n             assert!(self.eat_keyword(kw::Type));\n             Some(self.parse_existential_or_alias(existential))\n@@ -7157,7 +7163,7 @@ impl<'a> Parser<'a> {\n             let const_span = self.prev_span;\n             if self.check_keyword(kw::Fn)\n                 || (self.check_keyword(kw::Unsafe)\n-                    && self.look_ahead(1, |t| t.is_keyword(kw::Fn))) {\n+                    && self.is_keyword_ahead(1, &[kw::Fn])) {\n                 // CONST FUNCTION ITEM\n                 let unsafety = self.parse_unsafety();\n                 self.bump();\n@@ -7202,10 +7208,10 @@ impl<'a> Parser<'a> {\n         // `unsafe async fn` or `async fn`\n         if (\n             self.check_keyword(kw::Unsafe) &&\n-            self.look_ahead(1, |t| t.is_keyword(kw::Async))\n+            self.is_keyword_ahead(1, &[kw::Async])\n         ) || (\n             self.check_keyword(kw::Async) &&\n-            self.look_ahead(1, |t| t.is_keyword(kw::Fn))\n+            self.is_keyword_ahead(1, &[kw::Fn])\n         )\n         {\n             // ASYNC FUNCTION ITEM\n@@ -7239,8 +7245,7 @@ impl<'a> Parser<'a> {\n             return Ok(Some(item));\n         }\n         if self.check_keyword(kw::Unsafe) &&\n-            (self.look_ahead(1, |t| t.is_keyword(kw::Trait)) ||\n-            self.look_ahead(1, |t| t.is_keyword(kw::Auto)))\n+            self.is_keyword_ahead(1, &[kw::Trait, kw::Auto])\n         {\n             // UNSAFE TRAIT ITEM\n             self.bump(); // `unsafe`\n@@ -7263,11 +7268,9 @@ impl<'a> Parser<'a> {\n         }\n         if self.check_keyword(kw::Impl) ||\n            self.check_keyword(kw::Unsafe) &&\n-                self.look_ahead(1, |t| t.is_keyword(kw::Impl)) ||\n-           self.check_keyword(kw::Default) &&\n-                self.look_ahead(1, |t| t.is_keyword(kw::Impl)) ||\n+                self.is_keyword_ahead(1, &[kw::Impl]) ||\n            self.check_keyword(kw::Default) &&\n-                self.look_ahead(1, |t| t.is_keyword(kw::Unsafe)) {\n+                self.is_keyword_ahead(1, &[kw::Impl, kw::Unsafe]) {\n             // IMPL ITEM\n             let defaultness = self.parse_defaultness();\n             let unsafety = self.parse_unsafety();\n@@ -7360,7 +7363,7 @@ impl<'a> Parser<'a> {\n         }\n         if self.check_keyword(kw::Trait)\n             || (self.check_keyword(kw::Auto)\n-                && self.look_ahead(1, |t| t.is_keyword(kw::Trait)))\n+                && self.is_keyword_ahead(1, &[kw::Trait]))\n         {\n             let is_auto = if self.eat_keyword(kw::Trait) {\n                 IsAuto::No"}, {"sha": "0fd1daa746d41b7cf158e77605530857d3e83016", "filename": "src/test/rustdoc/issue-60482.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Frustdoc%2Fissue-60482.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Frustdoc%2Fissue-60482.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-60482.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -0,0 +1,9 @@\n+// This code caused a panic in `pulldown-cmark` 0.4.1.\n+\n+pub const BASIC_UNICODE: bool = true;\n+\n+\n+/// # `BASIC_UNICODE`: `A` `|`\n+/// ```text\n+/// ```\n+pub const BASIC_FONTS: bool = true;"}, {"sha": "31ae0143d4771aee9492a0333a3ad102f2bc6568", "filename": "src/test/rustdoc/process-termination.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Frustdoc%2Fprocess-termination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Frustdoc%2Fprocess-termination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprocess-termination.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -21,4 +21,16 @@\n /// Err(\"This is returned from `main`, leading to panic\")?;\n /// Ok::<(), &'static str>(())\n /// ```\n+///\n+/// This also works with `Option<()>`s now:\n+///\n+/// ```rust\n+/// Some(())\n+/// ```\n+///\n+/// ```rust,should_panic\n+/// let x: &[u32] = &[];\n+/// let _ = x.iter().next()?;\n+/// Some(())\n+/// ```\n pub fn check_process_termination() {}"}, {"sha": "70e718d889029fa2130bebdad4127e32b2a6f7f9", "filename": "src/test/ui/const-generics/apit-with-const-param.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -0,0 +1,10 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+trait Trait {}\n+\n+fn f<const N: usize>(_: impl Trait) {}\n+\n+fn main() {}"}, {"sha": "b3038ee64885130b974eddc787c02943a231953f", "filename": "src/test/ui/const-generics/apit-with-const-param.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.stderr?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/apit-with-const-param.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+"}, {"sha": "f592e486be951fdc6c25b9f8fab427780426fad8", "filename": "src/test/ui/const-generics/cannot-infer-type-for-const-param.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -1,8 +1,9 @@\n+// compile-pass\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n-// We should probably be able to infer the types here. However, this test is checking that we don't\n-// get an ICE in this case. It may be modified later to not be an error.\n+// This test confirms that the types can be inferred correctly for this example with const\n+// generics. Previously this would ICE, and more recently error.\n \n struct Foo<const NUM_BYTES: usize>(pub [u8; NUM_BYTES]);\n "}, {"sha": "52907bbb67720c919d8115145e31c3d83530206b", "filename": "src/test/ui/const-generics/cannot-infer-type-for-const-param.stderr", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -1,25 +1,6 @@\n warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n-  --> $DIR/cannot-infer-type-for-const-param.rs:1:12\n+  --> $DIR/cannot-infer-type-for-const-param.rs:2:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n \n-error[E0282]: type annotations needed\n-  --> $DIR/cannot-infer-type-for-const-param.rs:10:19\n-   |\n-LL |     let _ = Foo::<3>([1, 2, 3]);\n-   |                   ^ cannot infer type for `{integer}`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/cannot-infer-type-for-const-param.rs:10:22\n-   |\n-LL |     let _ = Foo::<3>([1, 2, 3]);\n-   |                      ^^^^^^^^^ expected `3`, found `3usize`\n-   |\n-   = note: expected type `[u8; _]`\n-              found type `[u8; 3]`\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0282, E0308.\n-For more information about an error, try `rustc --explain E0282`."}, {"sha": "0b4aeae7a4a390ea5ea8f8b771fb53d88f368963", "filename": "src/test/ui/const-generics/issue-60818-struct-constructors.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Fconst-generics%2Fissue-60818-struct-constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Fconst-generics%2Fissue-60818-struct-constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-60818-struct-constructors.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -0,0 +1,10 @@\n+// compile-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct Generic<const V: usize>;\n+\n+fn main() {\n+    let _ = Generic::<0>;\n+}"}, {"sha": "4b8f50b9b021977444ff1cb1d2fd3899981682ac", "filename": "src/test/ui/const-generics/issue-60818-struct-constructors.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Fconst-generics%2Fissue-60818-struct-constructors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Fconst-generics%2Fissue-60818-struct-constructors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-60818-struct-constructors.stderr?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-60818-struct-constructors.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+"}, {"sha": "bbbfc4857918df61e6904e2777584cce50f85f26", "filename": "src/test/ui/linkage-attr/auxiliary/def_colliding_external.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Fdef_colliding_external.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Fdef_colliding_external.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Fdef_colliding_external.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -0,0 +1,7 @@\n+#![feature(linkage)]\n+#![crate_type = \"lib\"]\n+\n+extern {\n+    #[linkage=\"external\"]\n+    pub static collision: *const i32;\n+}"}, {"sha": "2300930e513afb95497a6c244db6baa60e1c4102", "filename": "src/test/ui/linkage-attr/auxiliary/def_illtyped_external.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Fdef_illtyped_external.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Fdef_illtyped_external.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Fdef_illtyped_external.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -0,0 +1,5 @@\n+#![feature(linkage)]\n+#![crate_type = \"lib\"]\n+\n+#[linkage=\"external\"]\n+pub static EXTERN: u32 = 0;"}, {"sha": "85a9a336b0d643f5cb6ad97ef838c9145c54ff57", "filename": "src/test/ui/linkage-attr/linkage-detect-extern-generated-name-collision.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-extern-generated-name-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-extern-generated-name-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-extern-generated-name-collision.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -0,0 +1,21 @@\n+// rust-lang/rust#61232: We used to ICE when trying to detect a\n+// collision on the symbol generated for the external linkage item in\n+// an extern crate.\n+\n+// aux-build:def_colliding_external.rs\n+\n+extern crate def_colliding_external as dep1;\n+\n+#[no_mangle]\n+pub static _rust_extern_with_linkage_collision: i32 = 0;\n+\n+mod dep2 {\n+    #[no_mangle]\n+    pub static collision: usize = 0;\n+}\n+\n+fn main() {\n+    unsafe {\n+       println!(\"{:p}\", &dep1::collision);\n+    }\n+}"}, {"sha": "dcb954a4bc0c15afc8d8002358f11da2812665ee", "filename": "src/test/ui/linkage-attr/linkage-detect-extern-generated-name-collision.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-extern-generated-name-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-extern-generated-name-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-extern-generated-name-collision.stderr?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -0,0 +1,8 @@\n+error: symbol `collision` is already defined\n+  --> $DIR/auxiliary/def_colliding_external.rs:6:5\n+   |\n+LL |     pub static collision: *const i32;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "dc15798e16a6acaaae4fdb6a66bb4508bf830927", "filename": "src/test/ui/linkage-attr/linkage-detect-local-generated-name-collision.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -0,0 +1,23 @@\n+#![feature(linkage)]\n+\n+mod dep1 {\n+    extern {\n+        #[linkage=\"external\"]\n+        #[no_mangle]\n+        pub static collision: *const i32; //~ ERROR symbol `collision` is already defined\n+    }\n+}\n+\n+#[no_mangle]\n+pub static _rust_extern_with_linkage_collision: i32 = 0;\n+\n+mod dep2 {\n+    #[no_mangle]\n+    pub static collision: usize = 0;\n+}\n+\n+fn main() {\n+    unsafe {\n+       println!(\"{:p}\", &dep1::collision);\n+    }\n+}"}, {"sha": "117c76f7f26c7a886145f69b7faa145aa22a7385", "filename": "src/test/ui/linkage-attr/linkage-detect-local-generated-name-collision.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.stderr?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -0,0 +1,8 @@\n+error: symbol `collision` is already defined\n+  --> $DIR/linkage-detect-local-generated-name-collision.rs:7:9\n+   |\n+LL |         pub static collision: *const i32;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "014c715be0d3b1d21c1a401f4e76677e5fbdf59b", "filename": "src/test/ui/linkage-attr/linkage-requires-raw-ptr.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -0,0 +1,10 @@\n+// rust-lang/rust#59548: We used to ICE when trying to use a static\n+// with a type that violated its own `#[linkage]`.\n+\n+// aux-build:def_illtyped_external.rs\n+\n+extern crate def_illtyped_external as dep;\n+\n+fn main() {\n+    println!(\"{:p}\", &dep::EXTERN);\n+}"}, {"sha": "a80b495f97fa33c378d168308ac6376ee15fffb6", "filename": "src/test/ui/linkage-attr/linkage-requires-raw-ptr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.stderr?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -0,0 +1,8 @@\n+error: must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n+  --> $DIR/auxiliary/def_illtyped_external.rs:5:1\n+   |\n+LL | pub static EXTERN: u32 = 0;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c8af1a69979a089451fc329067c89ecee5a695c6", "filename": "src/test/ui/linkage-attr/linkage2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -7,7 +7,7 @@\n \n extern {\n     #[linkage = \"extern_weak\"] static foo: i32;\n-    //~^ ERROR: must have type `*const T` or `*mut T`\n+    //~^ ERROR: must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n }\n \n fn main() {", "previous_filename": "src/test/ui/linkage2.rs"}, {"sha": "2654ffd67b67860771b4664dfaadde861b899c1d", "filename": "src/test/ui/linkage-attr/linkage2.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "patch": "@@ -1,4 +1,4 @@\n-error: must have type `*const T` or `*mut T`\n+error: must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n   --> $DIR/linkage2.rs:9:32\n    |\n LL |     #[linkage = \"extern_weak\"] static foo: i32;", "previous_filename": "src/test/ui/linkage2.stderr"}, {"sha": "1462079acf7e73dc79eda280c1e37c4630100787", "filename": "src/test/ui/linkage-attr/linkage3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "previous_filename": "src/test/ui/linkage3.rs"}, {"sha": "b74fdc91429e28e755ae3fff36b0b9971c90b958", "filename": "src/test/ui/linkage-attr/linkage3.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.stderr?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "previous_filename": "src/test/ui/linkage3.stderr"}, {"sha": "3b935f9723dc18000173bd523c45adcb945a8034", "filename": "src/test/ui/linkage-attr/linkage4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage4.rs?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "previous_filename": "src/test/ui/linkage4.rs"}, {"sha": "f2aab164bd7fa3fe23ef80114a8efc6054640a15", "filename": "src/test/ui/linkage-attr/linkage4.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aee7012fab26d5e307a2fe767e4e7c847c5a45ee/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage4.stderr?ref=aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "previous_filename": "src/test/ui/linkage4.stderr"}]}