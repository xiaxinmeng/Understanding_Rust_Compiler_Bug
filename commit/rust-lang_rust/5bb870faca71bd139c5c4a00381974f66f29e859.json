{"sha": "5bb870faca71bd139c5c4a00381974f66f29e859", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYjg3MGZhY2E3MWJkMTM5YzVjNGEwMDM4MTk3NGY2NmYyOWU4NTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-09-06T10:25:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-06T10:25:46Z"}, "message": "Reintroduce the early returns", "tree": {"sha": "c69ba3fd25db7fcfdff8ae9067dc5bd40c3ee845", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c69ba3fd25db7fcfdff8ae9067dc5bd40c3ee845"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bb870faca71bd139c5c4a00381974f66f29e859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb870faca71bd139c5c4a00381974f66f29e859", "html_url": "https://github.com/rust-lang/rust/commit/5bb870faca71bd139c5c4a00381974f66f29e859", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bb870faca71bd139c5c4a00381974f66f29e859/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02fb1b0b724abef67591b3ff2ff966e6b031cdab", "url": "https://api.github.com/repos/rust-lang/rust/commits/02fb1b0b724abef67591b3ff2ff966e6b031cdab", "html_url": "https://github.com/rust-lang/rust/commit/02fb1b0b724abef67591b3ff2ff966e6b031cdab"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "b2572b2d0aba690a83f197005ab92673a1c63d1b", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bb870faca71bd139c5c4a00381974f66f29e859/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb870faca71bd139c5c4a00381974f66f29e859/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=5bb870faca71bd139c5c4a00381974f66f29e859", "patch": "@@ -606,19 +606,24 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                    _location: Location) {\n         if *local == RETURN_POINTER {\n             match self.destination {\n-                Lvalue::Local(l) => *local = l,\n+                Lvalue::Local(l) => {\n+                    *local = l;\n+                    return;\n+                },\n                 ref lval => bug!(\"Return lvalue is {:?}, not local\", lval)\n             }\n         }\n         let idx = local.index() - 1;\n         if idx < self.args.len() {\n             match self.args[idx] {\n-                Operand::Consume(Lvalue::Local(l)) => *local = l,\n+                Operand::Consume(Lvalue::Local(l)) => {\n+                    *local = l;\n+                    return;\n+                },\n                 ref op => bug!(\"Arg operand `{:?}` is {:?}, not local\", idx, op)\n             }\n-        } else {\n-            *local = self.local_map[Local::new(idx - self.args.len())];\n         }\n+        *local = self.local_map[Local::new(idx - self.args.len())];\n     }\n \n     fn visit_lvalue(&mut self,"}]}