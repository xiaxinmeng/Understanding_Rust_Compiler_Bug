{"sha": "672bfa5773913ce99524703e943729e3e50953b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MmJmYTU3NzM5MTNjZTk5NTI0NzAzZTk0MzcyOWUzZTUwOTUzYjg=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-07T17:14:35Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-07T18:47:12Z"}, "message": "Working on a macro for selecting from many pipes.", "tree": {"sha": "1b40bf8a3b47a461ac68da1b030e1ec32924a149", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b40bf8a3b47a461ac68da1b030e1ec32924a149"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/672bfa5773913ce99524703e943729e3e50953b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/672bfa5773913ce99524703e943729e3e50953b8", "html_url": "https://github.com/rust-lang/rust/commit/672bfa5773913ce99524703e943729e3e50953b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/672bfa5773913ce99524703e943729e3e50953b8/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d1922d4c80335d7c850e5856ae0ec549b8a0481", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1922d4c80335d7c850e5856ae0ec549b8a0481", "html_url": "https://github.com/rust-lang/rust/commit/8d1922d4c80335d7c850e5856ae0ec549b8a0481"}], "stats": {"total": 112, "additions": 112, "deletions": 0}, "files": [{"sha": "0a50e9ef89913befa18ce58d02fc110284d439c1", "filename": "src/test/run-pass/pipe-select-macro.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/672bfa5773913ce99524703e943729e3e50953b8/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672bfa5773913ce99524703e943729e3e50953b8/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs?ref=672bfa5773913ce99524703e943729e3e50953b8", "patch": "@@ -0,0 +1,112 @@\n+// xfail-test\n+\n+// Protocols\n+proto! foo {\n+    foo:recv {\n+        do_foo -> foo\n+    }\n+}\n+\n+proto! bar {\n+    bar:recv {\n+        do_bar(int) -> barbar,\n+        do_baz(bool) -> bazbar,\n+    }\n+\n+    barbar:send {\n+        rebarbar -> bar,\n+    }\n+\n+    bazbar:send {\n+        rebazbar -> bar\n+    }\n+}\n+\n+\n+// select!\n+macro_rules! select_if {\n+    {\n+        $index:expr,\n+        $count:expr,\n+        $port:path => [\n+            $($message:path$(($($x: ident),+))dont_type_this*\n+              -> $next:ident $e:expr),+\n+        ],\n+        $( $ports:path => [\n+            $($messages:path$(($($xs: ident),+))dont_type_this*\n+              -> $nexts:ident $es:expr),+\n+        ], )*\n+    } => {\n+        log_syntax!{select_if1};\n+        if $index == $count {\n+            alt move pipes::try_recv($port) {\n+              $(some($message($($($x,)+)* next)) => {\n+                // FIXME (#2329) we really want move out of enum here.\n+                let $next = unsafe { let x <- *ptr::addr_of(next); x };\n+                $e\n+              })+\n+              _ => fail\n+            }\n+        } else {\n+            select_if!{\n+                $index,\n+                $count + 1,\n+                $( $ports => [\n+                    $($messages$(($($xs),+))dont_type_this*\n+                      -> $nexts $es),+\n+                ], )*\n+            }\n+        }\n+    };\n+\n+    {\n+        $index:expr,\n+        $count:expr,\n+    } => {\n+        log_syntax!{select_if2};\n+        fail\n+    }\n+}\n+\n+macro_rules! select {\n+    {\n+        $( $port:path => {\n+            $($message:path$(($($x: ident),+))dont_type_this*\n+              -> $next:ident $e:expr),+\n+        } )+\n+    } => {\n+        let index = pipes::selecti([$(($port).header()),+]/_);\n+        log_syntax!{select};\n+        log_syntax!{\n+        select_if!{index, 0, $( $port => [\n+            $($message$(($($x),+))dont_type_this* -> $next $e),+\n+        ], )+}\n+        };\n+        select_if!{index, 0, $( $port => [\n+            $($message$(($($x),+))dont_type_this* -> $next $e),+\n+        ], )+}\n+    }\n+}\n+\n+// Code\n+fn test(+foo: foo::client::foo, +bar: bar::client::bar) {\n+    select! {\n+        foo => {\n+            foo::do_foo -> _next {\n+            }\n+        }\n+\n+        bar => {\n+            bar::do_bar(x) -> _next {\n+                //debug!(\"%?\", x)\n+            },\n+\n+            do_baz(b) -> _next {\n+                //if b { debug!(\"true\") } else { debug!(\"false\") }\n+            }\n+        }\n+    }\n+}\n+\n+fn main() {\n+}"}]}