{"sha": "fa4fbd51f6f8248e4308e079cbf2fc5588e08955", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNGZiZDUxZjZmODI0OGU0MzA4ZTA3OWNiZjJmYzU1ODhlMDg5NTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-12T00:51:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-13T23:52:50Z"}, "message": "Update docs for kind name changes", "tree": {"sha": "ee579be09cb9c4d4a492dafaee064a37049bf82f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee579be09cb9c4d4a492dafaee064a37049bf82f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa4fbd51f6f8248e4308e079cbf2fc5588e08955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4fbd51f6f8248e4308e079cbf2fc5588e08955", "html_url": "https://github.com/rust-lang/rust/commit/fa4fbd51f6f8248e4308e079cbf2fc5588e08955", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa4fbd51f6f8248e4308e079cbf2fc5588e08955/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed4fac01b5e207df0f0c7e0ea964bd3088826d27", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed4fac01b5e207df0f0c7e0ea964bd3088826d27", "html_url": "https://github.com/rust-lang/rust/commit/ed4fac01b5e207df0f0c7e0ea964bd3088826d27"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "39ad1c29cb189947103e6b7c3f2c434648c5dfa3", "filename": "doc/rust.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa4fbd51f6f8248e4308e079cbf2fc5588e08955/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/fa4fbd51f6f8248e4308e079cbf2fc5588e08955/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=fa4fbd51f6f8248e4308e079cbf2fc5588e08955", "patch": "@@ -2740,11 +2740,11 @@ The kinds are:\n `Const`\n   : Types of this kind are deeply immutable;\n     they contain no mutable memory locations directly or indirectly via pointers.\n-`Send`\n+`Owned`\n   : Types of this kind can be safely sent between tasks.\n     This kind includes scalars, owning pointers, owned closures, and\n-    structural types containing only other sendable types.\n-`Owned`\n+    structural types containing only other owned types. All `Owned` types are `Static`.\n+`Static`\n   : Types of this kind do not contain any borrowed pointers;\n     this can be a useful guarantee for code that breaks borrowing assumptions using [`unsafe` operations](#unsafe-functions).\n `Copy`\n@@ -2833,10 +2833,10 @@ frame they are allocated within.\n A task owns all memory it can *safely* reach through local variables,\n as well as managed, owning and borrowed pointers.\n \n-When a task sends a value that has the `Send` trait to another task,\n+When a task sends a value that has the `Owned` trait to another task,\n it loses ownership of the value sent and can no longer refer to it.\n This is statically guaranteed by the combined use of \"move semantics\",\n-and the compiler-checked _meaning_ of the `Send` trait:\n+and the compiler-checked _meaning_ of the `Owned` trait:\n it is only instantiated for (transitively) sendable kinds of data constructor and pointers,\n never including managed or borrowed pointers.\n \n@@ -2971,7 +2971,7 @@ These include:\n   - read-only and read-write shared variables with various safe mutual exclusion patterns\n   - simple locks and semaphores\n \n-When such facilities carry values, the values are restricted to the [`Send` type-kind](#type-kinds).\n+When such facilities carry values, the values are restricted to the [`Owned` type-kind](#type-kinds).\n Restricting communication interfaces to this kind ensures that no borrowed or managed pointers move between tasks.\n Thus access to an entire data structure can be mediated through its owning \"root\" value;\n no further locking or copying is required to avoid data races within the substructure of such a value."}, {"sha": "4b443b0da4daaa323ce43c80856568be3b575b83", "filename": "doc/tutorial.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa4fbd51f6f8248e4308e079cbf2fc5588e08955/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/fa4fbd51f6f8248e4308e079cbf2fc5588e08955/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=fa4fbd51f6f8248e4308e079cbf2fc5588e08955", "patch": "@@ -1914,9 +1914,9 @@ types by the compiler, and may not be overridden:\n   `copy` operator. All types are copyable unless they have destructors or\n   contain types with destructors.\n \n-* `Send` - Sendable (owned) types. All types are sendable unless they\n-  contain managed boxes, managed closures, or otherwise managed\n-  types. Sendable types may or may not be copyable.\n+* `Owned` - Owned types. Types are owned unless they contain managed\n+  boxes, managed closures, or borrowed pointers.  Owned types may or\n+  may not be copyable.\n \n * `Const` - Constant (immutable) types. These are types that do not contain\n   mutable fields.\n@@ -1949,7 +1949,7 @@ may call it.\n ## Declaring and implementing traits\n \n A trait consists of a set of methods, without bodies, or may be empty,\n-as is the case with `Copy`, `Send`, and `Const`. For example, we could\n+as is the case with `Copy`, `Owned`, and `Const`. For example, we could\n declare the trait `Printable` for things that can be printed to the\n console, with a single method:\n "}]}