{"sha": "19dae7b4539a58e4d2fe6429a77852665f399150", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZGFlN2I0NTM5YTU4ZTRkMmZlNjQyOWE3Nzg1MjY2NWYzOTkxNTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-09T11:17:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-09T11:17:17Z"}, "message": "Auto merge of #85093 - camelid:remove-fake-expect_local, r=GuillaumeGomez\n\nRemove `FakeDefId::expect_local()`\n\nThis function returned a fake `DefIndex`, with no indication that it was\nfake, when it was provided with a `FakeDefId::Fake`. Every use of the\nfunction uses the returned `DefIndex` in a call to\n`tcx.local_def_id_to_hir_id()`, which I'm pretty sure would panic if it\nwere given a fake `DefIndex`.\n\nI removed the function and replaced all calls to it with a call to\n`expect_real()` followed by `DefId::expect_local()` (that's a function\non the *real* `DefId`).", "tree": {"sha": "fcae5a7c632ad90e997a14cb83bdd4da4e420e64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcae5a7c632ad90e997a14cb83bdd4da4e420e64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19dae7b4539a58e4d2fe6429a77852665f399150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19dae7b4539a58e4d2fe6429a77852665f399150", "html_url": "https://github.com/rust-lang/rust/commit/19dae7b4539a58e4d2fe6429a77852665f399150", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19dae7b4539a58e4d2fe6429a77852665f399150/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6d028369be9eb02d219506c0dd662a2f863fc18", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d028369be9eb02d219506c0dd662a2f863fc18", "html_url": "https://github.com/rust-lang/rust/commit/d6d028369be9eb02d219506c0dd662a2f863fc18"}, {"sha": "4b7c8b0b53c2bea54e9cd029c68ebdc6f668b1b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b7c8b0b53c2bea54e9cd029c68ebdc6f668b1b8", "html_url": "https://github.com/rust-lang/rust/commit/4b7c8b0b53c2bea54e9cd029c68ebdc6f668b1b8"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "33aa42b137a23bdeaa025502285ca26f3fdebb28", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/19dae7b4539a58e4d2fe6429a77852665f399150/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19dae7b4539a58e4d2fe6429a77852665f399150/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=19dae7b4539a58e4d2fe6429a77852665f399150", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{BodyId, Mutability};\n use rustc_index::vec::IndexVec;\n@@ -86,22 +86,7 @@ impl FakeDefId {\n     }\n \n     #[inline]\n-    crate fn as_local(self) -> Option<LocalDefId> {\n-        match self {\n-            FakeDefId::Real(id) => id.as_local(),\n-            FakeDefId::Fake(idx, krate) => {\n-                (krate == LOCAL_CRATE).then(|| LocalDefId { local_def_index: idx })\n-            }\n-        }\n-    }\n-\n-    #[inline]\n-    crate fn expect_local(self) -> LocalDefId {\n-        self.as_local()\n-            .unwrap_or_else(|| panic!(\"FakeDefId::expect_local: `{:?}` isn't local\", self))\n-    }\n-\n-    #[inline]\n+    #[track_caller]\n     crate fn expect_real(self) -> rustc_hir::def_id::DefId {\n         self.as_real().unwrap_or_else(|| panic!(\"FakeDefId::expect_real: `{:?}` isn't real\", self))\n     }"}, {"sha": "e65fcf057f15c1605bd09865c214a90f604e1b8a", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19dae7b4539a58e4d2fe6429a77852665f399150/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19dae7b4539a58e4d2fe6429a77852665f399150/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=19dae7b4539a58e4d2fe6429a77852665f399150", "patch": "@@ -213,7 +213,13 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n \n                 let filename = i.span(self.ctx.tcx).filename(self.ctx.sess());\n                 let has_doc_example = tests.found_tests != 0;\n-                let hir_id = self.ctx.tcx.hir().local_def_id_to_hir_id(i.def_id.expect_local());\n+                // The `expect_real()` should be okay because `local_def_id_to_hir_id`\n+                // would presumably panic if a fake `DefIndex` were passed.\n+                let hir_id = self\n+                    .ctx\n+                    .tcx\n+                    .hir()\n+                    .local_def_id_to_hir_id(i.def_id.expect_real().expect_local());\n                 let (level, source) = self.ctx.tcx.lint_level_at_node(MISSING_DOCS, hir_id);\n                 // `missing_docs` is allow-by-default, so don't treat this as ignoring the item\n                 // unless the user had an explicit `allow`"}, {"sha": "8838dc57d5a059f96bcdf1a0af5e4b5b8aefcb21", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19dae7b4539a58e4d2fe6429a77852665f399150/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19dae7b4539a58e4d2fe6429a77852665f399150/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=19dae7b4539a58e4d2fe6429a77852665f399150", "patch": "@@ -1207,7 +1207,11 @@ impl LinkCollector<'_, '_> {\n             // item can be non-local e.g. when using #[doc(primitive = \"pointer\")]\n             if let Some((src_id, dst_id)) = id\n                 .as_local()\n-                .and_then(|dst_id| item.def_id.as_local().map(|src_id| (src_id, dst_id)))\n+                // The `expect_real()` should be okay because `local_def_id_to_hir_id`\n+                // would presumably panic if a fake `DefIndex` were passed.\n+                .and_then(|dst_id| {\n+                    item.def_id.expect_real().as_local().map(|src_id| (src_id, dst_id))\n+                })\n             {\n                 use rustc_hir::def_id::LOCAL_CRATE;\n "}, {"sha": "ba698474f16298386a2596b1890ffc90d65e3e44", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19dae7b4539a58e4d2fe6429a77852665f399150/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19dae7b4539a58e4d2fe6429a77852665f399150/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=19dae7b4539a58e4d2fe6429a77852665f399150", "patch": "@@ -71,7 +71,9 @@ crate fn should_have_doc_example(cx: &DocContext<'_>, item: &clean::Item) -> boo\n     {\n         return false;\n     }\n-    let hir_id = cx.tcx.hir().local_def_id_to_hir_id(item.def_id.expect_local());\n+    // The `expect_real()` should be okay because `local_def_id_to_hir_id`\n+    // would presumably panic if a fake `DefIndex` were passed.\n+    let hir_id = cx.tcx.hir().local_def_id_to_hir_id(item.def_id.expect_real().expect_local());\n     if cx.tcx.hir().attrs(hir_id).lists(sym::doc).has_word(sym::hidden)\n         || inherits_doc_hidden(cx.tcx, hir_id)\n     {"}]}