{"sha": "6846f22a13c7c896e86714736d597128fdfea94d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NDZmMjJhMTNjN2M4OTZlODY3MTQ3MzZkNTk3MTI4ZmRmZWE5NGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-26T15:40:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-26T15:40:37Z"}, "message": "Auto merge of #51946 - japaric:emit-stack-sizes, r=nikomatsakis\n\n[eRFC] add -Z emit-stack-sizes\n\n# What\n\nThis PR exposes LLVM's ability to report the stack usage of each function through the unstable /\nexperimental `-Z emit-stack-sizes` flag.\n\n# Motivation\n\nThe end goal is to enable whole program analysis of stack usage to prove absence of stack overflows\nat compile time. Such property is important in systems that lack a MMU / MPU and where stack\noverflows can corrupt memory. And in systems that have protection against stack overflows such proof\ncan be used to opt out of runtime checks (e.g. stack probes or the MPU).\n\nSuch analysis requires the call graph of the program, which can be obtained from MIR, and the stack\nusage of each function in the program. Precise information about the later later can only be\nobtained from LLVM as it depends on the optimization level and optimization options like LTO.\n\nThis PR does **not** attempt to add the ability to perform such whole program analysis to rustc;\nit simply does the minimal amount of work to enable such analysis to be implemented out of tree.\n\n# Implementation\n\nThis PR exposes a way to set LLVM's `EmitStackSizeSection` option from the command line. The option\nis documented [here]; the documentation is copied below for convenience and posteriority:\n\n[here]: https://llvm.org/docs/CodeGenerator.html#emitting-function-stack-size-information\n\n> A section containing metadata on function stack sizes will be emitted when\n> TargetLoweringObjectFile::StackSizesSection is not null, and TargetOptions::EmitStackSizeSection\n> is set (-stack-size-section). The section will contain an array of pairs of function symbol values\n> (pointer size) and stack sizes (unsigned LEB128). The stack size values only include the space\n> allocated in the function prologue. Functions with dynamic stack allocations are not included.\n\nWhere the LLVM feature is not available (e.g. LLVM version < 6.0) or can't be applied (e.g. the\noutput format doesn't support sections e.g. .wasm files) the flag does nothing -- i.e. no error or\nwarning is emitted.\n\n# Example usage\n\n``` console\n$ cargo new --bin hello && cd $_\n\n$ cat >src/main.rs <<'EOF'\nuse std::{mem, ptr};\n\nfn main() {\n    registers();\n    stack();\n}\n\n#[inline(never)]\nfn registers() {\n    unsafe {\n        // values loaded into registers\n        ptr::read_volatile(&(0u64, 1u64));\n    }\n}\n\n#[inline(never)]\nfn stack() {\n    unsafe {\n        // array allocated on the stack\n        let array: [i32; 4] = mem::uninitialized();\n        for elem in &array {\n            ptr::read_volatile(&elem);\n        }\n    }\n}\nEOF\n\n$ # we need a custom linking step to preserve the .stack_sizes section\n$ # (see unresolved questions for a solution that doesn't require custom linking)\n$ cat > keep-stack-sizes.x <<'EOF'\nSECTIONS\n{\n  .stack_sizes :\n  {\n    KEEP(*(.stack_sizes));\n  }\n}\nEOF\n\n$ cargo rustc --release -- \\\n    -Z emit-stack-sizes \\\n    -C link-arg=-Wl,-Tkeep-stack-sizes.x \\\n    -C link-arg=-N\n\n$ size -A target/release/hello | grep stack_sizes\n.stack_sizes    117   185136\n```\n\nThen a tool like [`stack-sizes`] can be used to print the information in human readable format\n\n[`stack-sizes`]: https://github.com/japaric/stack-sizes/#stack-sizes\n\n``` console\n$ stack-sizes target/release/hello\naddress                 size    name\n0x000000000004b0        0       core::array::<impl core::iter::traits::IntoIterator for &'a [T; _]>::into_iter::ha50e6661c0ec84aa\n0x000000000004c0        8       std::rt::lang_start::ha02aea783e0e1b3e\n0x000000000004f0        8       std::rt::lang_start::{{closure}}::h5115b527d5244952\n0x00000000000500        8       core::ops::function::FnOnce::call_once::h6bfa1076da82b0fb\n0x00000000000510        0       core::ptr::drop_in_place::hb4de82e57787bc70\n0x00000000000520        8       hello::main::h08bb6cec0556bd66\n0x00000000000530        0       hello::registers::h9d058a5d765ec1d2\n0x00000000000540        24      hello::stack::h88c8cb66adfdc6f3\n0x00000000000580        8       main\n0x000000000005b0        0       __rust_alloc\n0x000000000005c0        0       __rust_dealloc\n0x000000000005d0        0       __rust_realloc\n0x000000000005e0        0       __rust_alloc_zeroed\n```\n\n# Stability\n\nLike `-Z sanitize` this is a re-export of an LLVM feature. To me knowledge, we don't have a policy\nabout stabilization of such features as they are incompatible with, or demand extra implementation\neffort from, alternative backends (e.g. cranelift). As such this feature will remain experimental /\nunstable for the foreseeable future.\n\n# Unresolved questions\n\n## Section name\n\nShould we rename the `.stack_sizes` section to `.debug_stacksizes`?\n\nWith the former name linkers will strip the section unless told otherwise using a linker script,\nwhich means getting this information requires both knowledge about linker scripts and a custom\nlinker invocation (see example above).\n\nIf we use the `.debug_stacksizes` name (I believe) linkers will always keep the section, which means\n`-Z emit-stack-sizes` is the only thing required to get the stack usage information.\n\n# ~TODOs~\n\n~Investigate why this doesn't work with the `thumb` targets. I get the LLVM error shown below:~\n\n``` console\n$ cargo new --lib foo && cd $_\n\n$ echo '#![no_std] pub fn foo() {}' > src/lib.rs\n\n$ cargo rustc --target thumbv7m-none-eabi -- -Z emit-stack-sizes\nLLVM ERROR: unsupported relocation on symbol\n```\n\n~which sounds like it might be related to the `relocation-model` option. Maybe `relocation-model =\nstatic` is not supported for some reason?~\n\nThis fixed itself after the LLVM upgrade.\n\n---\n\nr? @nikomatsakis\ncc @rust-lang/compiler @perlindgren @whitequark", "tree": {"sha": "c1c12b4943e4d04f5054b0a331e9298e1afe6b78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1c12b4943e4d04f5054b0a331e9298e1afe6b78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6846f22a13c7c896e86714736d597128fdfea94d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6846f22a13c7c896e86714736d597128fdfea94d", "html_url": "https://github.com/rust-lang/rust/commit/6846f22a13c7c896e86714736d597128fdfea94d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6846f22a13c7c896e86714736d597128fdfea94d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e783d2be405353b2ea99b77e107beb2970096b90", "url": "https://api.github.com/repos/rust-lang/rust/commits/e783d2be405353b2ea99b77e107beb2970096b90", "html_url": "https://github.com/rust-lang/rust/commit/e783d2be405353b2ea99b77e107beb2970096b90"}, {"sha": "531e3566504f2bab929eaf57c4ba84838857933f", "url": "https://api.github.com/repos/rust-lang/rust/commits/531e3566504f2bab929eaf57c4ba84838857933f", "html_url": "https://github.com/rust-lang/rust/commit/531e3566504f2bab929eaf57c4ba84838857933f"}], "stats": {"total": 223, "additions": 221, "deletions": 2}, "files": [{"sha": "47f45a0b91f8572ff12eab0ece815c8ff5fdd798", "filename": "src/doc/unstable-book/src/compiler-flags/emit-stack-sizes.md", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/6846f22a13c7c896e86714736d597128fdfea94d/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Femit-stack-sizes.md", "raw_url": "https://github.com/rust-lang/rust/raw/6846f22a13c7c896e86714736d597128fdfea94d/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Femit-stack-sizes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Femit-stack-sizes.md?ref=6846f22a13c7c896e86714736d597128fdfea94d", "patch": "@@ -0,0 +1,167 @@\n+# `emit-stack-sizes`\n+\n+The tracking issue for this feature is: [#54192]\n+\n+[#54192]: https://github.com/rust-lang/rust/issues/54192\n+\n+------------------------\n+\n+The rustc flag `-Z emit-stack-sizes` makes LLVM emit stack size metadata.\n+\n+> **NOTE**: This LLVM feature only supports the ELF object format as of LLVM\n+> 8.0. Using this flag with targets that use other object formats (e.g. macOS\n+> and Windows) will result in it being ignored.\n+\n+Consider this crate:\n+\n+```\n+#![crate_type = \"lib\"]\n+\n+use std::ptr;\n+\n+pub fn foo() {\n+    // this function doesn't use the stack\n+}\n+\n+pub fn bar() {\n+    let xs = [0u32; 2];\n+\n+    // force LLVM to allocate `xs` on the stack\n+    unsafe { ptr::read_volatile(&xs.as_ptr()); }\n+}\n+```\n+\n+Using the `-Z emit-stack-sizes` flag produces extra linker sections in the\n+output *object file*.\n+\n+``` console\n+$ rustc -C opt-level=3 --emit=obj foo.rs\n+\n+$ size -A foo.o\n+foo.o  :\n+section                                 size   addr\n+.text                                      0      0\n+.text._ZN3foo3foo17he211d7b4a3a0c16eE      1      0\n+.text._ZN3foo3bar17h1acb594305f70c2eE     22      0\n+.note.GNU-stack                            0      0\n+.eh_frame                                 72      0\n+Total                                     95\n+\n+$ rustc -C opt-level=3 --emit=obj -Z emit-stack-sizes foo.rs\n+\n+$ size -A foo.o\n+foo.o  :\n+section                                 size   addr\n+.text                                      0      0\n+.text._ZN3foo3foo17he211d7b4a3a0c16eE      1      0\n+.stack_sizes                               9      0\n+.text._ZN3foo3bar17h1acb594305f70c2eE     22      0\n+.stack_sizes                               9      0\n+.note.GNU-stack                            0      0\n+.eh_frame                                 72      0\n+Total                                    113\n+```\n+\n+As of LLVM 7.0 the data will be written into a section named `.stack_sizes` and\n+the format is \"an array of pairs of function symbol values (pointer size) and\n+stack sizes (unsigned LEB128)\".\n+\n+``` console\n+$ objdump -d foo.o\n+\n+foo.o:     file format elf64-x86-64\n+\n+Disassembly of section .text._ZN3foo3foo17he211d7b4a3a0c16eE:\n+\n+0000000000000000 <_ZN3foo3foo17he211d7b4a3a0c16eE>:\n+   0:   c3                      retq\n+\n+Disassembly of section .text._ZN3foo3bar17h1acb594305f70c2eE:\n+\n+0000000000000000 <_ZN3foo3bar17h1acb594305f70c2eE>:\n+   0:   48 83 ec 10             sub    $0x10,%rsp\n+   4:   48 8d 44 24 08          lea    0x8(%rsp),%rax\n+   9:   48 89 04 24             mov    %rax,(%rsp)\n+   d:   48 8b 04 24             mov    (%rsp),%rax\n+  11:   48 83 c4 10             add    $0x10,%rsp\n+  15:   c3                      retq\n+\n+$ objdump -s -j .stack_sizes foo.o\n+\n+foo.o:     file format elf64-x86-64\n+\n+Contents of section .stack_sizes:\n+ 0000 00000000 00000000 00                 .........\n+Contents of section .stack_sizes:\n+ 0000 00000000 00000000 10                 .........\n+```\n+\n+It's important to note that linkers will discard this linker section by default.\n+To preserve the section you can use a linker script like the one shown below.\n+\n+``` text\n+/* file: keep-stack-sizes.x */\n+SECTIONS\n+{\n+  /* `INFO` makes the section not allocatable so it won't be loaded into memory */\n+  .stack_sizes (INFO) :\n+  {\n+    KEEP(*(.stack_sizes));\n+  }\n+}\n+```\n+\n+The linker script must be passed to the linker using a rustc flag like `-C\n+link-arg`.\n+\n+```\n+// file: src/main.rs\n+use std::ptr;\n+\n+#[inline(never)]\n+fn main() {\n+    let xs = [0u32; 2];\n+\n+    // force LLVM to allocate `xs` on the stack\n+    unsafe { ptr::read_volatile(&xs.as_ptr()); }\n+}\n+```\n+\n+``` console\n+$ RUSTFLAGS=\"-Z emit-stack-sizes\" cargo build --release\n+\n+$ size -A target/release/hello | grep stack_sizes || echo section was not found\n+section was not found\n+\n+$ RUSTFLAGS=\"-Z emit-stack-sizes\" cargo rustc --release -- \\\n+    -C link-arg=-Wl,-Tkeep-stack-sizes.x \\\n+    -C link-arg=-N\n+\n+$ size -A target/release/hello | grep stack_sizes\n+.stack_sizes                               90   176272\n+\n+$ # non-allocatable section (flags don't contain the \"A\" (alloc) flag)\n+$ readelf -S target/release/hello\n+Section Headers:\n+  [Nr]   Name              Type             Address           Offset\n+       Size              EntSize            Flags  Link  Info  Align\n+(..)\n+  [1031] .stack_sizes      PROGBITS         000000000002b090  0002b0f0\n+       000000000000005a  0000000000000000   L       5     0     1\n+\n+$ objdump -s -j .stack_sizes target/release/hello\n+\n+target/release/hello:     file format elf64-x86-64\n+\n+Contents of section .stack_sizes:\n+ 2b090 c0040000 00000000 08f00400 00000000  ................\n+ 2b0a0 00080005 00000000 00000810 05000000  ................\n+ 2b0b0 00000000 20050000 00000000 10400500  .... ........@..\n+ 2b0c0 00000000 00087005 00000000 00000080  ......p.........\n+ 2b0d0 05000000 00000000 90050000 00000000  ................\n+ 2b0e0 00a00500 00000000 0000               ..........\n+```\n+\n+> Author note: I'm not entirely sure why, in *this* case, `-N` is required in\n+> addition to `-Tkeep-stack-sizes.x`. For example, it's not required when\n+> producing statically linked files for the ARM Cortex-M architecture."}, {"sha": "eb779e6382f4bebb5e7418f7645329cea222cc66", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6846f22a13c7c896e86714736d597128fdfea94d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6846f22a13c7c896e86714736d597128fdfea94d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=6846f22a13c7c896e86714736d597128fdfea94d", "patch": "@@ -1385,6 +1385,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"run the self profiler\"),\n     profile_json: bool = (false, parse_bool, [UNTRACKED],\n           \"output a json file with profiler results\"),\n+    emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n+          \"emits a section containing stack size metadata\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "02ef690b942333c8f44ed8576fd863eeceba265e", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6846f22a13c7c896e86714736d597128fdfea94d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6846f22a13c7c896e86714736d597128fdfea94d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=6846f22a13c7c896e86714736d597128fdfea94d", "patch": "@@ -196,6 +196,7 @@ pub fn target_machine_factory(sess: &Session, find_features: bool)\n     let features = CString::new(features).unwrap();\n     let is_pie_binary = !find_features && is_pie_binary(sess);\n     let trap_unreachable = sess.target.target.options.trap_unreachable;\n+    let emit_stack_size_section = sess.opts.debugging_opts.emit_stack_sizes;\n \n     let asm_comments = sess.asm_comments();\n \n@@ -213,6 +214,7 @@ pub fn target_machine_factory(sess: &Session, find_features: bool)\n                 trap_unreachable,\n                 singlethread,\n                 asm_comments,\n+                emit_stack_size_section,\n             )\n         };\n "}, {"sha": "845f2fa9f45a6a90207ca4f688f9fc59c20ebb1b", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6846f22a13c7c896e86714736d597128fdfea94d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6846f22a13c7c896e86714736d597128fdfea94d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=6846f22a13c7c896e86714736d597128fdfea94d", "patch": "@@ -1460,7 +1460,8 @@ extern \"C\" {\n                                        DataSections: bool,\n                                        TrapUnreachable: bool,\n                                        Singlethread: bool,\n-                                       AsmComments: bool)\n+                                       AsmComments: bool,\n+                                       EmitStackSizeSection: bool)\n                                        -> Option<&'static mut TargetMachine>;\n     pub fn LLVMRustDisposeTargetMachine(T: &'static mut TargetMachine);\n     pub fn LLVMRustAddAnalysisPasses(T: &'a TargetMachine, PM: &PassManager<'a>, M: &'a Module);"}, {"sha": "06f75d981e3d6c8405503942e9da1734636acfce", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6846f22a13c7c896e86714736d597128fdfea94d/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6846f22a13c7c896e86714736d597128fdfea94d/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=6846f22a13c7c896e86714736d597128fdfea94d", "patch": "@@ -373,7 +373,8 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     bool DataSections,\n     bool TrapUnreachable,\n     bool Singlethread,\n-    bool AsmComments) {\n+    bool AsmComments,\n+    bool EmitStackSizeSection) {\n \n   auto OptLevel = fromRust(RustOptLevel);\n   auto RM = fromRust(RustReloc);\n@@ -411,6 +412,8 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n   }\n \n #if LLVM_VERSION_GE(6, 0)\n+  Options.EmitStackSizeSection = EmitStackSizeSection;\n+\n   Optional<CodeModel::Model> CM;\n #else\n   CodeModel::Model CM = CodeModel::Model::Default;"}, {"sha": "c2f643ce24c41df18ef382784634ec0d5a68ac9c", "filename": "src/test/run-make-fulldeps/emit-stack-sizes/Makefile", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6846f22a13c7c896e86714736d597128fdfea94d/src%2Ftest%2Frun-make-fulldeps%2Femit-stack-sizes%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6846f22a13c7c896e86714736d597128fdfea94d/src%2Ftest%2Frun-make-fulldeps%2Femit-stack-sizes%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Femit-stack-sizes%2FMakefile?ref=6846f22a13c7c896e86714736d597128fdfea94d", "patch": "@@ -0,0 +1,31 @@\n+-include ../tools.mk\n+\n+# This feature only works when the output object format is ELF so we ignore\n+# macOS and Windows\n+ifdef IS_WINDOWS\n+# Do nothing on Windows.\n+all:\n+\texit 0\n+else ifneq (,$(filter $(TARGET),i686-apple-darwin x86_64-apple-darwin))\n+# Do nothing on macOS.\n+all:\n+\texit 0\n+else\n+# check that the .stack_sizes section is generated\n+# this test requires LLVM >= 6.0.0\n+vers = $(shell $(RUSTC) -Vv)\n+ifneq (,$(findstring LLVM version: 3,$(vers)))\n+all:\n+\texit 0\n+else ifneq (,$(findstring LLVM version: 4,$(vers)))\n+all:\n+\texit 0\n+else ifneq (,$(findstring LLVM version: 5,$(vers)))\n+all:\n+\texit 0\n+else\n+all:\n+\t$(RUSTC) -C opt-level=3 -Z emit-stack-sizes --emit=obj foo.rs\n+\tsize -A $(TMPDIR)/foo.o | $(CGREP) .stack_sizes\n+endif\n+endif"}, {"sha": "6c81b63963a1c22c7388a0bc8007e7121d9d469b", "filename": "src/test/run-make-fulldeps/emit-stack-sizes/foo.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6846f22a13c7c896e86714736d597128fdfea94d/src%2Ftest%2Frun-make-fulldeps%2Femit-stack-sizes%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6846f22a13c7c896e86714736d597128fdfea94d/src%2Ftest%2Frun-make-fulldeps%2Femit-stack-sizes%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Femit-stack-sizes%2Ffoo.rs?ref=6846f22a13c7c896e86714736d597128fdfea94d", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+\n+pub fn foo() {}"}]}