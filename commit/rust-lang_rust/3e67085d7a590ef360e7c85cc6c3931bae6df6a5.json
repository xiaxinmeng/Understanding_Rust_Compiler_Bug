{"sha": "3e67085d7a590ef360e7c85cc6c3931bae6df6a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNjcwODVkN2E1OTBlZjM2MGU3Yzg1Y2M2YzM5MzFiYWU2ZGY2YTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-04-09T17:16:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-04-09T17:48:44Z"}, "message": "Allow lint modes to be used on unused variables and dead assignments", "tree": {"sha": "0c70af514d73c4763f8549f77e14a3434397cfbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c70af514d73c4763f8549f77e14a3434397cfbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e67085d7a590ef360e7c85cc6c3931bae6df6a5", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e67085d7a590ef360e7c85cc6c3931bae6df6a5", "html_url": "https://github.com/rust-lang/rust/commit/3e67085d7a590ef360e7c85cc6c3931bae6df6a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e67085d7a590ef360e7c85cc6c3931bae6df6a5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5641777318239926363207f690bf265f7514a63c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5641777318239926363207f690bf265f7514a63c", "html_url": "https://github.com/rust-lang/rust/commit/5641777318239926363207f690bf265f7514a63c"}], "stats": {"total": 142, "additions": 82, "deletions": 60}, "files": [{"sha": "0adf4b87f3a8e4cd339ca0e3a1bc15463e7dc670", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3e67085d7a590ef360e7c85cc6c3931bae6df6a5/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e67085d7a590ef360e7c85cc6c3931bae6df6a5/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=3e67085d7a590ef360e7c85cc6c3931bae6df6a5", "patch": "@@ -83,9 +83,8 @@ pub enum lint {\n \n     legacy_modes,\n \n-    // FIXME(#3266)--make liveness warnings lintable\n-    // unused_variable,\n-    // dead_assignment\n+    unused_variable,\n+    dead_assignment,\n }\n \n pub fn level_to_str(lv: level) -> &'static str {\n@@ -257,21 +256,19 @@ pub fn get_lint_dict() -> LintDict {\n             default: deny\n         }),\n \n-        /* FIXME(#3266)--make liveness warnings lintable\n-        (@~\"unused_variable\",\n-         @LintSpec {\n+        (~\"unused_variable\",\n+         LintSpec {\n             lint: unused_variable,\n             desc: \"detect variables which are not used in any way\",\n             default: warn\n-         }),\n+        }),\n \n-        (@~\"dead_assignment\",\n-         @LintSpec {\n+        (~\"dead_assignment\",\n+         LintSpec {\n             lint: dead_assignment,\n             desc: \"detect assignments that will never be read\",\n             default: warn\n-         }),\n-        */\n+        }),\n     ];\n     let mut map = HashMap::new();\n     do vec::consume(v) |_, (k, v)| {"}, {"sha": "3a649e7cc3b2b54511454bc319ecae0d5ddc3a97", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 48, "deletions": 31, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/3e67085d7a590ef360e7c85cc6c3931bae6df6a5/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e67085d7a590ef360e7c85cc6c3931bae6df6a5/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=3e67085d7a590ef360e7c85cc6c3931bae6df6a5", "patch": "@@ -105,6 +105,7 @@\n \n use core::prelude::*;\n \n+use middle::lint::{unused_variable, dead_assignment};\n use middle::pat_util;\n use middle::ty;\n use middle::typeck;\n@@ -118,6 +119,7 @@ use core::ptr;\n use core::to_str;\n use core::uint;\n use core::vec;\n+use core::util::with;\n use syntax::ast::*;\n use syntax::codemap::span;\n use syntax::parse::token::special_idents;\n@@ -169,6 +171,7 @@ pub fn check_crate(tcx: ty::ctxt,\n         visit_local: visit_local,\n         visit_expr: visit_expr,\n         visit_arm: visit_arm,\n+        visit_item: visit_item,\n         .. *visit::default_visitor()\n     });\n \n@@ -177,7 +180,8 @@ pub fn check_crate(tcx: ty::ctxt,\n                                    method_map,\n                                    variable_moves_map,\n                                    capture_map,\n-                                   last_use_map);\n+                                   last_use_map,\n+                                   0);\n     visit::visit_crate(*crate, initial_maps, visitor);\n     tcx.sess.abort_if_errors();\n     return last_use_map;\n@@ -269,13 +273,16 @@ struct IrMaps {\n     capture_info_map: HashMap<node_id, @~[CaptureInfo]>,\n     var_kinds: ~[VarKind],\n     lnks: ~[LiveNodeKind],\n+\n+    cur_item: node_id,\n }\n \n fn IrMaps(tcx: ty::ctxt,\n           method_map: typeck::method_map,\n           variable_moves_map: moves::VariableMovesMap,\n           capture_map: moves::CaptureMap,\n-          last_use_map: last_use_map)\n+          last_use_map: last_use_map,\n+          cur_item: node_id)\n        -> IrMaps {\n     IrMaps {\n         tcx: tcx,\n@@ -289,7 +296,8 @@ fn IrMaps(tcx: ty::ctxt,\n         variable_map: HashMap::new(),\n         capture_info_map: HashMap::new(),\n         var_kinds: ~[],\n-        lnks: ~[]\n+        lnks: ~[],\n+        cur_item: cur_item,\n     }\n }\n \n@@ -394,6 +402,12 @@ pub impl IrMaps {\n     }\n }\n \n+fn visit_item(item: @item, &&self: @mut IrMaps, v: vt<@mut IrMaps>) {\n+    do with(&mut self.cur_item, item.id) {\n+        visit::visit_item(item, self, v)\n+    }\n+}\n+\n fn visit_fn(fk: &visit::fn_kind,\n             decl: &fn_decl,\n             body: &blk,\n@@ -409,7 +423,8 @@ fn visit_fn(fk: &visit::fn_kind,\n                               self.method_map,\n                               self.variable_moves_map,\n                               self.capture_map,\n-                              self.last_use_map);\n+                              self.last_use_map,\n+                              self.cur_item);\n \n     debug!(\"creating fn_maps: %x\", ptr::addr_of(&(*fn_maps)) as uint);\n \n@@ -692,17 +707,19 @@ pub impl Liveness {\n         }\n     }\n \n-    fn pat_bindings(&self, pat: @pat, f: &fn(LiveNode, Variable, span)) {\n+    fn pat_bindings(&self, pat: @pat,\n+                    f: &fn(LiveNode, Variable, span, node_id)) {\n         let def_map = self.tcx.def_map;\n         do pat_util::pat_bindings(def_map, pat) |_bm, p_id, sp, _n| {\n             let ln = self.live_node(p_id, sp);\n             let var = self.variable(p_id, sp);\n-            f(ln, var, sp);\n+            f(ln, var, sp, p_id);\n         }\n     }\n \n     fn arm_pats_bindings(&self,\n-                         pats: &[@pat], f: &fn(LiveNode, Variable, span)) {\n+                         pats: &[@pat],\n+                         f: &fn(LiveNode, Variable, span, node_id)) {\n         // only consider the first pattern; any later patterns must have\n         // the same bindings, and we also consider the first pattern to be\n         // the \"authoratative\" set of ids\n@@ -718,7 +735,7 @@ pub impl Liveness {\n     fn define_bindings_in_arm_pats(&self, pats: &[@pat],\n                                    succ: LiveNode) -> LiveNode {\n         let mut succ = succ;\n-        do self.arm_pats_bindings(pats) |ln, var, _sp| {\n+        do self.arm_pats_bindings(pats) |ln, var, _sp, _id| {\n             self.init_from_succ(ln, succ);\n             self.define(ln, var);\n             succ = ln;\n@@ -1509,8 +1526,8 @@ fn check_local(local: @local, &&self: @Liveness, vt: vt<@Liveness>) {\n         // should not be live at this point.\n \n         debug!(\"check_local() with no initializer\");\n-        do self.pat_bindings(local.node.pat) |ln, var, sp| {\n-            if !self.warn_about_unused(sp, ln, var) {\n+        do self.pat_bindings(local.node.pat) |ln, var, sp, id| {\n+            if !self.warn_about_unused(sp, id, ln, var) {\n                 match self.live_on_exit(ln, var) {\n                   None => { /* not live: good */ }\n                   Some(lnk) => {\n@@ -1528,8 +1545,8 @@ fn check_local(local: @local, &&self: @Liveness, vt: vt<@Liveness>) {\n }\n \n fn check_arm(arm: &arm, &&self: @Liveness, vt: vt<@Liveness>) {\n-    do self.arm_pats_bindings(arm.pats) |ln, var, sp| {\n-        self.warn_about_unused(sp, ln, var);\n+    do self.arm_pats_bindings(arm.pats) |ln, var, sp, id| {\n+        self.warn_about_unused(sp, id, ln, var);\n     }\n     visit::visit_arm(arm, self, vt);\n }\n@@ -1691,14 +1708,14 @@ pub impl Liveness {\n                 let ln = self.live_node(expr.id, expr.span);\n                 let var = self.variable(nid, expr.span);\n                 self.check_for_reassignment(ln, var, expr.span);\n-                self.warn_about_dead_assign(expr.span, ln, var);\n+                self.warn_about_dead_assign(expr.span, expr.id, ln, var);\n               }\n               def => {\n                 match relevant_def(def) {\n                   Some(nid) => {\n                     let ln = self.live_node(expr.id, expr.span);\n                     let var = self.variable(nid, expr.span);\n-                    self.warn_about_dead_assign(expr.span, ln, var);\n+                    self.warn_about_dead_assign(expr.span, expr.id, ln, var);\n                   }\n                   None => {}\n                 }\n@@ -1715,7 +1732,7 @@ pub impl Liveness {\n     }\n \n     fn check_for_reassignments_in_pat(@self, pat: @pat) {\n-        do self.pat_bindings(pat) |ln, var, sp| {\n+        do self.pat_bindings(pat) |ln, var, sp, _id| {\n             self.check_for_reassignment(ln, var, sp);\n         }\n     }\n@@ -1861,21 +1878,21 @@ pub impl Liveness {\n             do pat_util::pat_bindings(self.tcx.def_map, arg.pat)\n                     |_bm, p_id, sp, _n| {\n                 let var = self.variable(p_id, sp);\n-                self.warn_about_unused(sp, entry_ln, var);\n+                self.warn_about_unused(sp, p_id, entry_ln, var);\n             }\n         }\n     }\n \n     fn warn_about_unused_or_dead_vars_in_pat(@self, pat: @pat) {\n-        do self.pat_bindings(pat) |ln, var, sp| {\n-            if !self.warn_about_unused(sp, ln, var) {\n-                self.warn_about_dead_assign(sp, ln, var);\n+        do self.pat_bindings(pat) |ln, var, sp, id| {\n+            if !self.warn_about_unused(sp, id, ln, var) {\n+                self.warn_about_dead_assign(sp, id, ln, var);\n             }\n         }\n     }\n \n-    fn warn_about_unused(@self, sp: span, ln: LiveNode, var: Variable)\n-                        -> bool {\n+    fn warn_about_unused(@self, sp: span, id: node_id,\n+                         ln: LiveNode, var: Variable) -> bool {\n         if !self.used_on_entry(ln, var) {\n             for self.should_warn(var).each |name| {\n \n@@ -1889,27 +1906,27 @@ pub impl Liveness {\n                 };\n \n                 if is_assigned {\n-                    // FIXME(#3266)--make liveness warnings lintable\n-                    self.tcx.sess.span_warn(\n-                        sp, fmt!(\"variable `%s` is assigned to, \\\n+                    self.tcx.sess.span_lint(unused_variable, id,\n+                        self.ir.cur_item, sp,\n+                        fmt!(\"variable `%s` is assigned to, \\\n                                   but never used\", **name));\n                 } else {\n-                    // FIXME(#3266)--make liveness warnings lintable\n-                    self.tcx.sess.span_warn(\n-                        sp, fmt!(\"unused variable: `%s`\", **name));\n+                    self.tcx.sess.span_lint(unused_variable, id,\n+                        self.ir.cur_item, sp,\n+                        fmt!(\"unused variable: `%s`\", **name));\n                 }\n             }\n             return true;\n         }\n         return false;\n     }\n \n-    fn warn_about_dead_assign(@self, sp: span, ln: LiveNode, var: Variable) {\n+    fn warn_about_dead_assign(@self, sp: span, id: node_id,\n+                              ln: LiveNode, var: Variable) {\n         if self.live_on_exit(ln, var).is_none() {\n             for self.should_warn(var).each |name| {\n-                // FIXME(#3266)--make liveness warnings lintable\n-                self.tcx.sess.span_warn(\n-                    sp,\n+                self.tcx.sess.span_lint(dead_assignment, id,\n+                    self.ir.cur_item, sp,\n                     fmt!(\"value assigned to `%s` is never read\", **name));\n             }\n         }"}, {"sha": "27db4ff5aaae27dbf678f9ab50413b724cbcd20c", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3e67085d7a590ef360e7c85cc6c3931bae6df6a5/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e67085d7a590ef360e7c85cc6c3931bae6df6a5/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=3e67085d7a590ef360e7c85cc6c3931bae6df6a5", "patch": "@@ -8,38 +8,57 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[deny(unused_variable)];\n+#[deny(dead_assignment)];\n+\n fn f1(x: int) {\n-    //~^ WARNING unused variable: `x`\n+    //~^ ERROR unused variable: `x`\n }\n \n fn f1b(x: &mut int) {\n-    //~^ WARNING unused variable: `x`\n+    //~^ ERROR unused variable: `x`\n }\n \n+#[allow(unused_variable)]\n+fn f1c(x: int) {}\n+\n fn f2() {\n     let x = 3;\n-    //~^ WARNING unused variable: `x`\n+    //~^ ERROR unused variable: `x`\n }\n \n fn f3() {\n     let mut x = 3;\n-    //~^ WARNING variable `x` is assigned to, but never used\n+    //~^ ERROR variable `x` is assigned to, but never used\n     x += 4;\n-    //~^ WARNING value assigned to `x` is never read\n+    //~^ ERROR value assigned to `x` is never read\n }\n \n fn f3b() {\n     let mut z = 3;\n-    //~^ WARNING variable `z` is assigned to, but never used\n+    //~^ ERROR variable `z` is assigned to, but never used\n     loop {\n         z += 4;\n     }\n }\n \n+#[allow(unused_variable)]\n+fn f3c() {\n+    let mut z = 3;\n+    loop { z += 4; }\n+}\n+\n+#[allow(unused_variable)]\n+#[allow(dead_assignment)]\n+fn f3d() {\n+    let mut x = 3;\n+    x += 4;\n+}\n+\n fn f4() {\n     match Some(3) {\n       Some(i) => {\n-        //~^ WARNING unused variable: `i`\n+        //~^ ERROR unused variable: `i`\n       }\n       None => {}\n     }\n@@ -57,16 +76,5 @@ fn f4b() -> int {\n     }\n }\n \n-// leave this in here just to trigger compile-fail:\n-struct r {\n-    x: (),\n-}\n-\n-impl Drop for r {\n-    fn finalize(&self) {}\n-}\n-\n fn main() {\n-    let x = r { x: () };\n-    || { copy x; }; //~ ERROR copying a value of non-copyable type\n }"}]}