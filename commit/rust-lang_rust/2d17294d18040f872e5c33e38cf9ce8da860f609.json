{"sha": "2d17294d18040f872e5c33e38cf9ce8da860f609", "node_id": "C_kwDOAAsO6NoAKDJkMTcyOTRkMTgwNDBmODcyZTVjMzNlMzhjZjljZThkYTg2MGY2MDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-19T07:15:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-19T07:15:38Z"}, "message": "Auto merge of #111590 - dtolnay:panictemporaries, r=bjorn3\n\nShorten even more panic temporary lifetimes\n\nFollowup to #104134. As pointed out by `@bjorn3` in https://github.com/rust-lang/rust/pull/104134#pullrequestreview-1425585948, there are other cases in the panic macros which would also benefit from dropping their non-Send temporaries as soon as possible, avoiding pointlessly holding them across an await point.\n\nFor the tests added in this PR, here are the failures you get today on master without the macro changes in this PR:\n\n<details>\n<summary>tests/ui/macros/panic-temporaries-2018.rs</summary>\n\n```console\nerror: future cannot be sent between threads safely\n  --> tests/ui/macros/panic-temporaries-2018.rs:52:18\n   |\nLL |     require_send(panic_display());\n   |                  ^^^^^^^^^^^^^^^ future returned by `panic_display` is not `Send`\n   |\n   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*const u8`\nnote: future is not `Send` as this value is used across an await\n  --> tests/ui/macros/panic-temporaries-2018.rs:35:31\n   |\nLL |     f(panic!(\"{}\", NOT_SEND)).await;\n   |                    --------   ^^^^^- `NOT_SEND` is later dropped here\n   |                    |          |\n   |                    |          await occurs here, with `NOT_SEND` maybe used later\n   |                    has type `NotSend` which is not `Send`\nnote: required by a bound in `require_send`\n  --> tests/ui/macros/panic-temporaries-2018.rs:48:25\n   |\nLL | fn require_send(_: impl Send) {}\n   |                         ^^^^ required by this bound in `require_send`\n\nerror: future cannot be sent between threads safely\n  --> tests/ui/macros/panic-temporaries-2018.rs:52:18\n   |\nLL |     require_send(panic_display());\n   |                  ^^^^^^^^^^^^^^^ future returned by `panic_display` is not `Send`\n   |\n   = help: within `NotSend`, the trait `Sync` is not implemented for `*const u8`\nnote: future is not `Send` as this value is used across an await\n  --> tests/ui/macros/panic-temporaries-2018.rs:35:31\n   |\nLL |     f(panic!(\"{}\", NOT_SEND)).await;\n   |       ----------------------  ^^^^^- the value is later dropped here\n   |       |                       |\n   |       |                       await occurs here, with the value maybe used later\n   |       has type `&NotSend` which is not `Send`\nnote: required by a bound in `require_send`\n  --> tests/ui/macros/panic-temporaries-2018.rs:48:25\n   |\nLL | fn require_send(_: impl Send) {}\n   |                         ^^^^ required by this bound in `require_send`\n\nerror: future cannot be sent between threads safely\n  --> tests/ui/macros/panic-temporaries-2018.rs:53:18\n   |\nLL |     require_send(panic_str());\n   |                  ^^^^^^^^^^^ future returned by `panic_str` is not `Send`\n   |\n   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*const u8`\nnote: future is not `Send` as this value is used across an await\n  --> tests/ui/macros/panic-temporaries-2018.rs:40:36\n   |\nLL |     f(panic!((NOT_SEND, \"...\").1)).await;\n   |               --------             ^^^^^- `NOT_SEND` is later dropped here\n   |               |                    |\n   |               |                    await occurs here, with `NOT_SEND` maybe used later\n   |               has type `NotSend` which is not `Send`\nnote: required by a bound in `require_send`\n  --> tests/ui/macros/panic-temporaries-2018.rs:48:25\n   |\nLL | fn require_send(_: impl Send) {}\n   |                         ^^^^ required by this bound in `require_send`\n\nerror: future cannot be sent between threads safely\n  --> tests/ui/macros/panic-temporaries-2018.rs:54:18\n   |\nLL |     require_send(unreachable_display());\n   |                  ^^^^^^^^^^^^^^^^^^^^^ future returned by `unreachable_display` is not `Send`\n   |\n   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*const u8`\nnote: future is not `Send` as this value is used across an await\n  --> tests/ui/macros/panic-temporaries-2018.rs:45:31\n   |\nLL |     f(unreachable!(NOT_SEND)).await;\n   |                    --------   ^^^^^- `NOT_SEND` is later dropped here\n   |                    |          |\n   |                    |          await occurs here, with `NOT_SEND` maybe used later\n   |                    has type `NotSend` which is not `Send`\nnote: required by a bound in `require_send`\n  --> tests/ui/macros/panic-temporaries-2018.rs:48:25\n   |\nLL | fn require_send(_: impl Send) {}\n   |                         ^^^^ required by this bound in `require_send`\n\nerror: future cannot be sent between threads safely\n  --> tests/ui/macros/panic-temporaries-2018.rs:54:18\n   |\nLL |     require_send(unreachable_display());\n   |                  ^^^^^^^^^^^^^^^^^^^^^ future returned by `unreachable_display` is not `Send`\n   |\n   = help: within `NotSend`, the trait `Sync` is not implemented for `*const u8`\nnote: future is not `Send` as this value is used across an await\n  --> tests/ui/macros/panic-temporaries-2018.rs:45:31\n   |\nLL |     f(unreachable!(NOT_SEND)).await;\n   |       ----------------------  ^^^^^- the value is later dropped here\n   |       |                       |\n   |       |                       await occurs here, with the value maybe used later\n   |       has type `&NotSend` which is not `Send`\nnote: required by a bound in `require_send`\n  --> tests/ui/macros/panic-temporaries-2018.rs:48:25\n   |\nLL | fn require_send(_: impl Send) {}\n   |                         ^^^^ required by this bound in `require_send`\n\nerror: aborting due to 5 previous errors\n```\n</details>\n\n<details>\n<summary>tests/ui/macros/panic-temporaries.rs</summary>\n\n```console\nerror: future cannot be sent between threads safely\n  --> tests/ui/macros/panic-temporaries.rs:42:18\n   |\nLL |     require_send(panic_display());\n   |                  ^^^^^^^^^^^^^^^ future returned by `panic_display` is not `Send`\n   |\n   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*const u8`\nnote: future is not `Send` as this value is used across an await\n  --> tests/ui/macros/panic-temporaries.rs:35:31\n   |\nLL |     f(panic!(\"{}\", NOT_SEND)).await;\n   |                    --------   ^^^^^- `NOT_SEND` is later dropped here\n   |                    |          |\n   |                    |          await occurs here, with `NOT_SEND` maybe used later\n   |                    has type `NotSend` which is not `Send`\nnote: required by a bound in `require_send`\n  --> tests/ui/macros/panic-temporaries.rs:38:25\n   |\nLL | fn require_send(_: impl Send) {}\n   |                         ^^^^ required by this bound in `require_send`\n\nerror: future cannot be sent between threads safely\n  --> tests/ui/macros/panic-temporaries.rs:42:18\n   |\nLL |     require_send(panic_display());\n   |                  ^^^^^^^^^^^^^^^ future returned by `panic_display` is not `Send`\n   |\n   = help: within `NotSend`, the trait `Sync` is not implemented for `*const u8`\nnote: future is not `Send` as this value is used across an await\n  --> tests/ui/macros/panic-temporaries.rs:35:31\n   |\nLL |     f(panic!(\"{}\", NOT_SEND)).await;\n   |       ----------------------  ^^^^^- the value is later dropped here\n   |       |                       |\n   |       |                       await occurs here, with the value maybe used later\n   |       has type `&NotSend` which is not `Send`\nnote: required by a bound in `require_send`\n  --> tests/ui/macros/panic-temporaries.rs:38:25\n   |\nLL | fn require_send(_: impl Send) {}\n   |                         ^^^^ required by this bound in `require_send`\n\nerror: aborting due to 2 previous errors\n```\n</details>\n\nr? bjorn3", "tree": {"sha": "fae1ac6520ccc6635fe87f20615c373a2543f721", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fae1ac6520ccc6635fe87f20615c373a2543f721"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d17294d18040f872e5c33e38cf9ce8da860f609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d17294d18040f872e5c33e38cf9ce8da860f609", "html_url": "https://github.com/rust-lang/rust/commit/2d17294d18040f872e5c33e38cf9ce8da860f609", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d17294d18040f872e5c33e38cf9ce8da860f609/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19ca5692f69d20643656bf501fd171f1907ef875", "url": "https://api.github.com/repos/rust-lang/rust/commits/19ca5692f69d20643656bf501fd171f1907ef875", "html_url": "https://github.com/rust-lang/rust/commit/19ca5692f69d20643656bf501fd171f1907ef875"}, {"sha": "2f5d99394511b0b6f90182e34ce38001aa02f5aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5d99394511b0b6f90182e34ce38001aa02f5aa", "html_url": "https://github.com/rust-lang/rust/commit/2f5d99394511b0b6f90182e34ce38001aa02f5aa"}], "stats": {"total": 115, "additions": 97, "deletions": 18}, "files": [{"sha": "20be60d35353e747ad1f2f3ee1475980e9cfcb73", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2d17294d18040f872e5c33e38cf9ce8da860f609/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d17294d18040f872e5c33e38cf9ce8da860f609/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=2d17294d18040f872e5c33e38cf9ce8da860f609", "patch": "@@ -28,13 +28,13 @@ pub macro panic_2015 {\n         $crate::panicking::panic($msg)\n     ),\n     // Use `panic_str` instead of `panic_display::<&str>` for non_fmt_panic lint.\n-    ($msg:expr $(,)?) => (\n-        $crate::panicking::panic_str($msg)\n-    ),\n+    ($msg:expr $(,)?) => ({\n+        $crate::panicking::panic_str($msg);\n+    }),\n     // Special-case the single-argument case for const_panic.\n-    (\"{}\", $arg:expr $(,)?) => (\n-        $crate::panicking::panic_display(&$arg)\n-    ),\n+    (\"{}\", $arg:expr $(,)?) => ({\n+        $crate::panicking::panic_display(&$arg);\n+    }),\n     ($fmt:expr, $($arg:tt)+) => ({\n         // Semicolon to prevent temporaries inside the formatting machinery from\n         // being considered alive in the caller after the panic_fmt call.\n@@ -52,9 +52,9 @@ pub macro panic_2021 {\n         $crate::panicking::panic(\"explicit panic\")\n     ),\n     // Special-case the single-argument case for const_panic.\n-    (\"{}\", $arg:expr $(,)?) => (\n-        $crate::panicking::panic_display(&$arg)\n-    ),\n+    (\"{}\", $arg:expr $(,)?) => ({\n+        $crate::panicking::panic_display(&$arg);\n+    }),\n     ($($t:tt)+) => ({\n         // Semicolon to prevent temporaries inside the formatting machinery from\n         // being considered alive in the caller after the panic_fmt call.\n@@ -73,9 +73,9 @@ pub macro unreachable_2015 {\n     ),\n     // Use of `unreachable_display` for non_fmt_panic lint.\n     // NOTE: the message (\"internal error ...\") is embedded directly in unreachable_display\n-    ($msg:expr $(,)?) => (\n-        $crate::panicking::unreachable_display(&$msg)\n-    ),\n+    ($msg:expr $(,)?) => ({\n+        $crate::panicking::unreachable_display(&$msg);\n+    }),\n     ($fmt:expr, $($arg:tt)*) => (\n         $crate::panic!($crate::concat!(\"internal error: entered unreachable code: \", $fmt), $($arg)*)\n     ),"}, {"sha": "69a6f3e6d5ac43a83cb9369bb1b5d38bf0aa92d3", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d17294d18040f872e5c33e38cf9ce8da860f609/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d17294d18040f872e5c33e38cf9ce8da860f609/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=2d17294d18040f872e5c33e38cf9ce8da860f609", "patch": "@@ -19,11 +19,11 @@ pub macro panic_2015 {\n         $crate::rt::begin_panic(\"explicit panic\")\n     }),\n     ($msg:expr $(,)?) => ({\n-        $crate::rt::begin_panic($msg)\n+        $crate::rt::begin_panic($msg);\n     }),\n     // Special-case the single-argument case for const_panic.\n     (\"{}\", $arg:expr $(,)?) => ({\n-        $crate::rt::panic_display(&$arg)\n+        $crate::rt::panic_display(&$arg);\n     }),\n     ($fmt:expr, $($arg:tt)+) => ({\n         // Semicolon to prevent temporaries inside the formatting machinery from"}, {"sha": "d914df380629941c3f93731c07a394d4b944accc", "filename": "tests/ui/macros/panic-temporaries-2018.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2d17294d18040f872e5c33e38cf9ce8da860f609/tests%2Fui%2Fmacros%2Fpanic-temporaries-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d17294d18040f872e5c33e38cf9ce8da860f609/tests%2Fui%2Fmacros%2Fpanic-temporaries-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fpanic-temporaries-2018.rs?ref=2d17294d18040f872e5c33e38cf9ce8da860f609", "patch": "@@ -0,0 +1,55 @@\n+// check-pass\n+// edition:2018\n+\n+#![allow(non_fmt_panics, unreachable_code)]\n+\n+use std::fmt::{self, Display};\n+use std::marker::PhantomData;\n+\n+struct NotSend {\n+    marker: PhantomData<*const u8>,\n+}\n+\n+const NOT_SEND: NotSend = NotSend { marker: PhantomData };\n+\n+impl Display for NotSend {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        formatter.write_str(\"this value does not implement Send\")\n+    }\n+}\n+\n+async fn f(_: u8) {}\n+\n+// Exercises this matcher in panic_2015:\n+// ($fmt:expr, $($arg:tt)+) => $crate::panicking::panic_fmt(...)\n+async fn panic_fmt() {\n+    // Panic returns `!`, so the await is never reached, and in particular the\n+    // temporaries inside the formatting machinery are not still alive at the\n+    // await point.\n+    let todo = \"...\";\n+    f(panic!(\"not yet implemented: {}\", todo)).await;\n+}\n+\n+// Exercises (\"{}\", $arg:expr) => $crate::panicking::panic_display(&$arg)\n+async fn panic_display() {\n+    f(panic!(\"{}\", NOT_SEND)).await;\n+}\n+\n+// Exercises ($msg:expr) => $crate::panicking::panic_str($msg)\n+async fn panic_str() {\n+    f(panic!((NOT_SEND, \"...\").1)).await;\n+}\n+\n+// Exercises ($msg:expr) => $crate::panicking::unreachable_display(&$msg)\n+async fn unreachable_display() {\n+    f(unreachable!(NOT_SEND)).await;\n+}\n+\n+fn require_send(_: impl Send) {}\n+\n+fn main() {\n+    require_send(panic_fmt());\n+    require_send(panic_display());\n+    require_send(panic_str());\n+    require_send(unreachable_display());\n+}"}, {"sha": "db65601fb73eef5147de874e9112d6f567990303", "filename": "tests/ui/macros/panic-temporaries.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2d17294d18040f872e5c33e38cf9ce8da860f609/tests%2Fui%2Fmacros%2Fpanic-temporaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d17294d18040f872e5c33e38cf9ce8da860f609/tests%2Fui%2Fmacros%2Fpanic-temporaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fpanic-temporaries.rs?ref=2d17294d18040f872e5c33e38cf9ce8da860f609", "patch": "@@ -3,17 +3,41 @@\n \n #![allow(unreachable_code)]\n \n+use std::fmt::{self, Display};\n+use std::marker::PhantomData;\n+\n+struct NotSend {\n+    marker: PhantomData<*const u8>,\n+}\n+\n+const NOT_SEND: NotSend = NotSend { marker: PhantomData };\n+\n+impl Display for NotSend {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        formatter.write_str(\"this value does not implement Send\")\n+    }\n+}\n+\n async fn f(_: u8) {}\n \n-async fn g() {\n-    // Todo returns `!`, so the await is never reached, and in particular the\n+// Exercises this matcher in panic_2021:\n+// ($($t:tt)+) => $crate::panicking::panic_fmt(...)\n+async fn panic_fmt() {\n+    // Panic returns `!`, so the await is never reached, and in particular the\n     // temporaries inside the formatting machinery are not still alive at the\n     // await point.\n-    f(todo!(\"...\")).await;\n+    let todo = \"...\";\n+    f(panic!(\"not yet implemented: {}\", todo)).await;\n+}\n+\n+// Exercises (\"{}\", $arg:expr) => $crate::panicking::panic_display(&$arg)\n+async fn panic_display() {\n+    f(panic!(\"{}\", NOT_SEND)).await;\n }\n \n fn require_send(_: impl Send) {}\n \n fn main() {\n-    require_send(g());\n+    require_send(panic_fmt());\n+    require_send(panic_display());\n }"}]}