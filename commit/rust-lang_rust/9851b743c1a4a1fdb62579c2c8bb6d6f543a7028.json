{"sha": "9851b743c1a4a1fdb62579c2c8bb6d6f543a7028", "node_id": "C_kwDOAAsO6NoAKDk4NTFiNzQzYzFhNGExZmRiNjI1NzljMmM4YmI2ZDZmNTQzYTcwMjg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-06T19:31:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-07T14:40:23Z"}, "message": "implement simd_reduce_min/max", "tree": {"sha": "5f010158ad0dbfce3b314c6fa65e6ffc0b83b065", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f010158ad0dbfce3b314c6fa65e6ffc0b83b065"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9851b743c1a4a1fdb62579c2c8bb6d6f543a7028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9851b743c1a4a1fdb62579c2c8bb6d6f543a7028", "html_url": "https://github.com/rust-lang/rust/commit/9851b743c1a4a1fdb62579c2c8bb6d6f543a7028", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9851b743c1a4a1fdb62579c2c8bb6d6f543a7028/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db06d4998fa8e64c290a7ae439fb2f8aefb2223e", "url": "https://api.github.com/repos/rust-lang/rust/commits/db06d4998fa8e64c290a7ae439fb2f8aefb2223e", "html_url": "https://github.com/rust-lang/rust/commit/db06d4998fa8e64c290a7ae439fb2f8aefb2223e"}], "stats": {"total": 62, "additions": 52, "deletions": 10}, "files": [{"sha": "6f16853698035c917804f8d4f63381471cd74787", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9851b743c1a4a1fdb62579c2c8bb6d6f543a7028/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9851b743c1a4a1fdb62579c2c8bb6d6f543a7028/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=9851b743c1a4a1fdb62579c2c8bb6d6f543a7028", "patch": "@@ -433,7 +433,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"simd_reduce_or\"\n             | \"simd_reduce_xor\"\n             | \"simd_reduce_any\"\n-            | \"simd_reduce_all\" => {\n+            | \"simd_reduce_all\"\n+            | \"simd_reduce_max\"\n+            | \"simd_reduce_min\" => {\n                 use mir::BinOp;\n \n                 let &[ref op] = check_arg_count(args)?;\n@@ -445,19 +447,27 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 enum Op {\n                     MirOp(BinOp),\n                     MirOpBool(BinOp),\n+                    Max,\n+                    Min,\n                 }\n-                // The initial value is the neutral element.\n-                let (which, init) = match intrinsic_name {\n-                    \"simd_reduce_and\" => (Op::MirOp(BinOp::BitAnd), ImmTy::from_int(-1, dest.layout)),\n-                    \"simd_reduce_or\" => (Op::MirOp(BinOp::BitOr), ImmTy::from_int(0, dest.layout)),\n-                    \"simd_reduce_xor\" => (Op::MirOp(BinOp::BitXor), ImmTy::from_int(0, dest.layout)),\n-                    \"simd_reduce_any\" => (Op::MirOpBool(BinOp::BitOr), imm_from_bool(false)),\n-                    \"simd_reduce_all\" => (Op::MirOpBool(BinOp::BitAnd), imm_from_bool(true)),\n+                let which = match intrinsic_name {\n+                    \"simd_reduce_and\" => Op::MirOp(BinOp::BitAnd),\n+                    \"simd_reduce_or\" => Op::MirOp(BinOp::BitOr),\n+                    \"simd_reduce_xor\" => Op::MirOp(BinOp::BitXor),\n+                    \"simd_reduce_any\" => Op::MirOpBool(BinOp::BitOr),\n+                    \"simd_reduce_all\" => Op::MirOpBool(BinOp::BitAnd),\n+                    \"simd_reduce_max\" => Op::Max,\n+                    \"simd_reduce_min\" => Op::Min,\n                     _ => unreachable!(),\n                 };\n \n-                let mut res = init;\n-                for i in 0..op_len {\n+                // Initialize with first lane, then proceed with the rest.\n+                let mut res = this.read_immediate(&this.mplace_index(&op, 0)?.into())?;\n+                if matches!(which, Op::MirOpBool(_)) {\n+                    // Convert to `bool` scalar.\n+                    res = imm_from_bool(simd_element_to_bool(res)?);\n+                }\n+                for i in 1..op_len {\n                     let op = this.read_immediate(&this.mplace_index(&op, i)?.into())?;\n                     res = match which {\n                         Op::MirOp(mir_op) => {\n@@ -467,6 +477,26 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                             let op = imm_from_bool(simd_element_to_bool(op)?);\n                             this.binary_op(mir_op, &res, &op)?\n                         }\n+                        Op::Max => {\n+                            // if `op > res`...\n+                            if this.binary_op(BinOp::Gt, &op, &res)?.to_scalar()?.to_bool()? {\n+                                // update accumulator\n+                                op\n+                            } else {\n+                                // no change\n+                                res\n+                            }\n+                        }\n+                        Op::Min => {\n+                            // if `op < res`...\n+                            if this.binary_op(BinOp::Lt, &op, &res)?.to_scalar()?.to_bool()? {\n+                                // update accumulator\n+                                op\n+                            } else {\n+                                // no change\n+                                res\n+                            }\n+                        }\n                     };\n                 }\n                 this.write_immediate(*res, dest)?;"}, {"sha": "ccedf61a38109ddf30b3f70e75cc478aae4224c0", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9851b743c1a4a1fdb62579c2c8bb6d6f543a7028/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9851b743c1a4a1fdb62579c2c8bb6d6f543a7028/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=9851b743c1a4a1fdb62579c2c8bb6d6f543a7028", "patch": "@@ -24,6 +24,10 @@ fn simd_ops_f32() {\n     assert_eq!(b.horizontal_sum(), 2.0);\n     assert_eq!(a.horizontal_product(), 100.0 * 100.0);\n     assert_eq!(b.horizontal_product(), -24.0);\n+    assert_eq!(a.horizontal_max(), 10.0);\n+    assert_eq!(b.horizontal_max(), 3.0);\n+    assert_eq!(a.horizontal_min(), 10.0);\n+    assert_eq!(b.horizontal_min(), -4.0);\n }\n \n fn simd_ops_f64() {\n@@ -49,6 +53,10 @@ fn simd_ops_f64() {\n     assert_eq!(b.horizontal_sum(), 2.0);\n     assert_eq!(a.horizontal_product(), 100.0 * 100.0);\n     assert_eq!(b.horizontal_product(), -24.0);\n+    assert_eq!(a.horizontal_max(), 10.0);\n+    assert_eq!(b.horizontal_max(), 3.0);\n+    assert_eq!(a.horizontal_min(), 10.0);\n+    assert_eq!(b.horizontal_min(), -4.0);\n }\n \n fn simd_ops_i32() {\n@@ -86,6 +94,10 @@ fn simd_ops_i32() {\n     assert_eq!(b.horizontal_sum(), 2);\n     assert_eq!(a.horizontal_product(), 100 * 100);\n     assert_eq!(b.horizontal_product(), -24);\n+    assert_eq!(a.horizontal_max(), 10);\n+    assert_eq!(b.horizontal_max(), 3);\n+    assert_eq!(a.horizontal_min(), 10);\n+    assert_eq!(b.horizontal_min(), -4);\n }\n \n fn simd_mask() {"}]}