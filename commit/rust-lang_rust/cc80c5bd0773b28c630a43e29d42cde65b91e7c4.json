{"sha": "cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "node_id": "C_kwDOAAsO6NoAKGNjODBjNWJkMDc3M2IyOGM2MzBhNDNlMjlkNDJjZGU2NWI5MWU3YzQ", "commit": {"author": {"name": "Daniel Eades", "email": "danieleades@hotmail.com", "date": "2022-12-30T08:30:23Z"}, "committer": {"name": "Daniel Eades", "email": "danieleades@hotmail.com", "date": "2023-01-02T15:02:54Z"}, "message": "remove unnecessary lazy evaluations", "tree": {"sha": "30175f703bb90596e3810d15237e8f96efb15e0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30175f703bb90596e3810d15237e8f96efb15e0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "html_url": "https://github.com/rust-lang/rust/commit/cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/comments", "author": {"login": "danieleades", "id": 33452915, "node_id": "MDQ6VXNlcjMzNDUyOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/33452915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieleades", "html_url": "https://github.com/danieleades", "followers_url": "https://api.github.com/users/danieleades/followers", "following_url": "https://api.github.com/users/danieleades/following{/other_user}", "gists_url": "https://api.github.com/users/danieleades/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieleades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieleades/subscriptions", "organizations_url": "https://api.github.com/users/danieleades/orgs", "repos_url": "https://api.github.com/users/danieleades/repos", "events_url": "https://api.github.com/users/danieleades/events{/privacy}", "received_events_url": "https://api.github.com/users/danieleades/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danieleades", "id": 33452915, "node_id": "MDQ6VXNlcjMzNDUyOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/33452915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieleades", "html_url": "https://github.com/danieleades", "followers_url": "https://api.github.com/users/danieleades/followers", "following_url": "https://api.github.com/users/danieleades/following{/other_user}", "gists_url": "https://api.github.com/users/danieleades/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieleades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieleades/subscriptions", "organizations_url": "https://api.github.com/users/danieleades/orgs", "repos_url": "https://api.github.com/users/danieleades/repos", "events_url": "https://api.github.com/users/danieleades/events{/privacy}", "received_events_url": "https://api.github.com/users/danieleades/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7530d76f003efa7eab20abe794a9008bc2c65784", "url": "https://api.github.com/repos/rust-lang/rust/commits/7530d76f003efa7eab20abe794a9008bc2c65784", "html_url": "https://github.com/rust-lang/rust/commit/7530d76f003efa7eab20abe794a9008bc2c65784"}], "stats": {"total": 101, "additions": 50, "deletions": 51}, "files": [{"sha": "6753d61ef810963ac92d761f1dec9e88ad5c8fb1", "filename": "crates/hir-def/src/item_scope.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -159,15 +159,14 @@ impl ItemScope {\n     pub(crate) fn name_of(&self, item: ItemInNs) -> Option<(&Name, Visibility)> {\n         let (def, mut iter) = match item {\n             ItemInNs::Macros(def) => {\n-                return self\n-                    .macros\n-                    .iter()\n-                    .find_map(|(name, &(other_def, vis))| (other_def == def).then(|| (name, vis)));\n+                return self.macros.iter().find_map(|(name, &(other_def, vis))| {\n+                    (other_def == def).then_some((name, vis))\n+                });\n             }\n             ItemInNs::Types(def) => (def, self.types.iter()),\n             ItemInNs::Values(def) => (def, self.values.iter()),\n         };\n-        iter.find_map(|(name, &(other_def, vis))| (other_def == def).then(|| (name, vis)))\n+        iter.find_map(|(name, &(other_def, vis))| (other_def == def).then_some((name, vis)))\n     }\n \n     pub(crate) fn traits<'a>(&'a self) -> impl Iterator<Item = TraitId> + 'a {"}, {"sha": "79c85d118316a9d03108cd3ac010e5fe36d51aca", "filename": "crates/hir-def/src/macro_expansion_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -170,7 +170,7 @@ pub fn identity_when_valid(_attr: TokenStream, item: TokenStream) -> TokenStream\n             }\n             let pp = pretty_print_macro_expansion(\n                 parse.syntax_node(),\n-                show_token_ids.then(|| &*token_map),\n+                show_token_ids.then_some(&*token_map),\n             );\n             let indent = IndentLevel::from_node(call.syntax());\n             let pp = reindent(indent, pp);"}, {"sha": "a1474c44e6c6f27bec6e7e0f1f9937f0d7e642ee", "filename": "crates/hir-expand/src/eager.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir-expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir-expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Feager.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -208,7 +208,7 @@ fn eager_macro_recur(\n     // Collect replacement\n     for child in children {\n         let def = match child.path().and_then(|path| ModPath::from_src(db, path, hygiene)) {\n-            Some(path) => macro_resolver(path.clone()).ok_or_else(|| UnresolvedMacro { path })?,\n+            Some(path) => macro_resolver(path.clone()).ok_or(UnresolvedMacro { path })?,\n             None => {\n                 diagnostic_sink(ExpandError::Other(\"malformed macro invocation\".into()));\n                 continue;"}, {"sha": "72af80fbc19e45ce58c69632620ecb4b5f364702", "filename": "crates/hir-ty/src/layout/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -37,7 +37,7 @@ fn eval_goal(ra_fixture: &str, minicore: &str) -> Result<Layout, LayoutError> {\n                     hir_def::AdtId::UnionId(x) => db.union_data(x).name.to_smol_str(),\n                     hir_def::AdtId::EnumId(x) => db.enum_data(x).name.to_smol_str(),\n                 };\n-                (name == \"Goal\").then(|| x)\n+                (name == \"Goal\").then_some(x)\n             }\n             _ => None,\n         })"}, {"sha": "2328dceb83901899ca67e1a999dc27e037d6420a", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -714,7 +714,7 @@ fn lookup_impl_assoc_item_for_trait_ref(\n     let impl_data = find_matching_impl(impls, table, trait_ref)?;\n     impl_data.items.iter().find_map(|it| match it {\n         AssocItemId::FunctionId(f) => {\n-            (db.function_data(*f).name == *name).then(|| AssocItemId::FunctionId(*f))\n+            (db.function_data(*f).name == *name).then_some(AssocItemId::FunctionId(*f))\n         }\n         AssocItemId::ConstId(c) => db\n             .const_data(*c)"}, {"sha": "2d3a93392b31e4c33e05aefec8686032bdede7dc", "filename": "crates/hir-ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftraits.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -61,7 +61,7 @@ impl TraitEnvironment {\n     ) -> impl Iterator<Item = TraitId> + 'a {\n         self.traits_from_clauses\n             .iter()\n-            .filter_map(move |(self_ty, trait_id)| (*self_ty == ty).then(|| *trait_id))\n+            .filter_map(move |(self_ty, trait_id)| (*self_ty == ty).then_some(*trait_id))\n     }\n }\n "}, {"sha": "840d146980810bcb300a312dddf290526f06573e", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -1559,7 +1559,7 @@ impl Function {\n     }\n \n     pub fn self_param(self, db: &dyn HirDatabase) -> Option<SelfParam> {\n-        self.has_self_param(db).then(|| SelfParam { func: self.id })\n+        self.has_self_param(db).then_some(SelfParam { func: self.id })\n     }\n \n     pub fn assoc_fn_params(self, db: &dyn HirDatabase) -> Vec<Param> {"}, {"sha": "e0d26103915c0881f51a1a4cbea2f5757fedc258", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -795,7 +795,7 @@ impl<'db> SemanticsImpl<'db> {\n                 // requeue the tokens we got from mapping our current token down\n                 stack.extend(mapped_tokens);\n                 // if the length changed we have found a mapping for the token\n-                (stack.len() != len).then(|| ())\n+                (stack.len() != len).then_some(())\n             };\n \n         // Remap the next token in the queue into a macro call its in, if it is not being remapped\n@@ -1221,7 +1221,7 @@ impl<'db> SemanticsImpl<'db> {\n         krate\n             .dependencies(self.db)\n             .into_iter()\n-            .find_map(|dep| (dep.name == name).then(|| dep.krate))\n+            .find_map(|dep| (dep.name == name).then_some(dep.krate))\n     }\n \n     fn resolve_variant(&self, record_lit: ast::RecordExpr) -> Option<VariantId> {"}, {"sha": "7a591a54106d4204bf502bfba794739c754b6eee", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -987,7 +987,7 @@ fn resolve_hir_path_(\n                         db,\n                         def,\n                         res.in_type_ns()?,\n-                        |name, id| (name == unresolved.name).then(|| id),\n+                        |name, id| (name == unresolved.name).then_some(id),\n                     )\n                 })\n                 .map(TypeAlias::from)"}, {"sha": "8e4ac69ae6f630c5da076ca0652e312c601d06f5", "filename": "crates/ide-assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -326,7 +326,7 @@ impl ExtendedEnum {\n fn resolve_enum_def(sema: &Semantics<'_, RootDatabase>, expr: &ast::Expr) -> Option<ExtendedEnum> {\n     sema.type_of_expr(expr)?.adjusted().autoderef(sema.db).find_map(|ty| match ty.as_adt() {\n         Some(Adt::Enum(e)) => Some(ExtendedEnum::Enum(e)),\n-        _ => ty.is_bool().then(|| ExtendedEnum::Bool),\n+        _ => ty.is_bool().then_some(ExtendedEnum::Bool),\n     })\n }\n \n@@ -344,7 +344,7 @@ fn resolve_tuple_of_enum_def(\n                 // For now we only handle expansion for a tuple of enums. Here\n                 // we map non-enum items to None and rely on `collect` to\n                 // convert Vec<Option<hir::Enum>> into Option<Vec<hir::Enum>>.\n-                _ => ty.is_bool().then(|| ExtendedEnum::Bool),\n+                _ => ty.is_bool().then_some(ExtendedEnum::Bool),\n             })\n         })\n         .collect()"}, {"sha": "f32ef2d59d8917937063e2781b952f98bcf2cf91", "filename": "crates/ide-assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -216,7 +216,7 @@ fn validate_method_call_expr(\n     let krate = module.krate();\n \n     let iter_trait = FamousDefs(sema, krate).core_iter_Iterator()?;\n-    it_type.impls_trait(sema.db, iter_trait, &[]).then(|| (expr, receiver))\n+    it_type.impls_trait(sema.db, iter_trait, &[]).then_some((expr, receiver))\n }\n \n #[cfg(test)]"}, {"sha": "74f74b793a44c3fb47223e67e68c1acff0f6aa00", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -588,7 +588,7 @@ impl FunctionBody {\n             FunctionBody::Expr(expr) => Some(expr.clone()),\n             FunctionBody::Span { parent, text_range } => {\n                 let tail_expr = parent.tail_expr()?;\n-                text_range.contains_range(tail_expr.syntax().text_range()).then(|| tail_expr)\n+                text_range.contains_range(tail_expr.syntax().text_range()).then_some(tail_expr)\n             }\n         }\n     }"}, {"sha": "49debafe1a0ad7810bdf2a29b3612fb26aa487bd", "filename": "crates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -178,7 +178,7 @@ fn extract_generic_params(\n             .fold(false, |tagged, ty| tag_generics_in_variant(&ty, &mut generics) || tagged),\n     };\n \n-    let generics = generics.into_iter().filter_map(|(param, tag)| tag.then(|| param));\n+    let generics = generics.into_iter().filter_map(|(param, tag)| tag.then_some(param));\n     tagged_one.then(|| make::generic_param_list(generics))\n }\n "}, {"sha": "15641b448d001c6fa18b0b44914e856e6c7a4824", "filename": "crates/ide-assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -271,7 +271,7 @@ fn generate_getter_from_info(\n     }}\",\n         vis,\n         record_field_info.fn_name,\n-        info.mutable.then(|| \"mut \").unwrap_or_default(),\n+        info.mutable.then_some(\"mut \").unwrap_or_default(),\n         ty,\n         body,\n     );"}, {"sha": "52dd670ec2a469a1c11b9cc535dd87887f972ca9", "filename": "crates/ide-assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -64,7 +64,7 @@ fn compute_dbg_replacement(macro_call: ast::MacroCall) -> Option<(TextRange, Str\n     let input_expressions = mac_input.group_by(|tok| tok.kind() == T![,]);\n     let input_expressions = input_expressions\n         .into_iter()\n-        .filter_map(|(is_sep, group)| (!is_sep).then(|| group))\n+        .filter_map(|(is_sep, group)| (!is_sep).then_some(group))\n         .map(|mut tokens| syntax::hacks::parse_expr_from_str(&tokens.join(\"\")))\n         .collect::<Option<Vec<ast::Expr>>>()?;\n "}, {"sha": "57c37e5b8386d6b73f2065e7df2b80652b78f14a", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -613,7 +613,7 @@ pub(crate) fn convert_reference_type(\n }\n \n fn handle_copy(ty: &hir::Type, db: &dyn HirDatabase) -> Option<ReferenceConversionType> {\n-    ty.is_copy(db).then(|| ReferenceConversionType::Copy)\n+    ty.is_copy(db).then_some(ReferenceConversionType::Copy)\n }\n \n fn handle_as_ref_str(\n@@ -624,7 +624,7 @@ fn handle_as_ref_str(\n     let str_type = hir::BuiltinType::str().ty(db);\n \n     ty.impls_trait(db, famous_defs.core_convert_AsRef()?, &[str_type])\n-        .then(|| ReferenceConversionType::AsRefStr)\n+        .then_some(ReferenceConversionType::AsRefStr)\n }\n \n fn handle_as_ref_slice(\n@@ -636,7 +636,7 @@ fn handle_as_ref_slice(\n     let slice_type = hir::Type::new_slice(type_argument);\n \n     ty.impls_trait(db, famous_defs.core_convert_AsRef()?, &[slice_type])\n-        .then(|| ReferenceConversionType::AsRefSlice)\n+        .then_some(ReferenceConversionType::AsRefSlice)\n }\n \n fn handle_dereferenced(\n@@ -647,7 +647,7 @@ fn handle_dereferenced(\n     let type_argument = ty.type_arguments().next()?;\n \n     ty.impls_trait(db, famous_defs.core_convert_AsRef()?, &[type_argument])\n-        .then(|| ReferenceConversionType::Dereferenced)\n+        .then_some(ReferenceConversionType::Dereferenced)\n }\n \n fn handle_option_as_ref("}, {"sha": "bb950c76f88310db010df2b55a4e741408e92b62", "filename": "crates/ide-completion/src/completions/attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -357,7 +357,7 @@ fn parse_comma_sep_expr(input: ast::TokenTree) -> Option<Vec<ast::Expr>> {\n     Some(\n         input_expressions\n             .into_iter()\n-            .filter_map(|(is_sep, group)| (!is_sep).then(|| group))\n+            .filter_map(|(is_sep, group)| (!is_sep).then_some(group))\n             .filter_map(|mut tokens| syntax::hacks::parse_expr_from_str(&tokens.join(\"\")))\n             .collect::<Vec<ast::Expr>>(),\n     )"}, {"sha": "27b6321f3a7a534deaddb5ac36f582c925e6bbfe", "filename": "crates/ide-db/src/imports/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -91,7 +91,7 @@ fn recursive_merge(lhs: &ast::UseTree, rhs: &ast::UseTree, merge: MergeBehavior)\n         .flat_map(|list| list.use_trees())\n         // We use Option here to early return from this function(this is not the\n         // same as a `filter` op).\n-        .map(|tree| merge.is_tree_allowed(&tree).then(|| tree))\n+        .map(|tree| merge.is_tree_allowed(&tree).then_some(tree))\n         .collect::<Option<_>>()?;\n     use_trees.sort_unstable_by(|a, b| path_cmp_for_sort(a.path(), b.path()));\n     for rhs_t in rhs.use_tree_list().into_iter().flat_map(|list| list.use_trees()) {"}, {"sha": "b2b0e49085c8c66cf39b378e6725afd298027682", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -608,7 +608,7 @@ impl<'a> FindUsages<'a> {\n                 let reference = FileReference {\n                     range,\n                     name: ast::NameLike::NameRef(name_ref.clone()),\n-                    category: is_name_ref_in_import(name_ref).then(|| ReferenceCategory::Import),\n+                    category: is_name_ref_in_import(name_ref).then_some(ReferenceCategory::Import),\n                 };\n                 sink(file_id, reference)\n             }\n@@ -787,7 +787,7 @@ impl ReferenceCategory {\n     fn new(def: &Definition, r: &ast::NameRef) -> Option<ReferenceCategory> {\n         // Only Locals and Fields have accesses for now.\n         if !matches!(def, Definition::Local(_) | Definition::Field(_)) {\n-            return is_name_ref_in_import(r).then(|| ReferenceCategory::Import);\n+            return is_name_ref_in_import(r).then_some(ReferenceCategory::Import);\n         }\n \n         let mode = r.syntax().ancestors().find_map(|node| {"}, {"sha": "d7e7d59e15e6e56cc0cd19b66d5318ab4b787031", "filename": "crates/ide-db/src/syntax_helpers/node_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -449,7 +449,7 @@ pub fn parse_tt_as_comma_sep_paths(input: ast::TokenTree) -> Option<Vec<ast::Pat\n     let input_expressions = tokens.group_by(|tok| tok.kind() == T![,]);\n     let paths = input_expressions\n         .into_iter()\n-        .filter_map(|(is_sep, group)| (!is_sep).then(|| group))\n+        .filter_map(|(is_sep, group)| (!is_sep).then_some(group))\n         .filter_map(|mut tokens| {\n             syntax::hacks::parse_expr_from_str(&tokens.join(\"\")).and_then(|expr| match expr {\n                 ast::Expr::PathExpr(it) => it.path(),"}, {"sha": "f937175deaeb6bbe640d942083a1bc9b9b1fec26", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -273,7 +273,7 @@ impl DocCommentToken {\n             let (in_expansion_range, link, ns) =\n                 extract_definitions_from_docs(&docs).into_iter().find_map(|(range, link, ns)| {\n                     let mapped = doc_mapping.map(range)?;\n-                    (mapped.value.contains(abs_in_expansion_offset)).then(|| (mapped.value, link, ns))\n+                    (mapped.value.contains(abs_in_expansion_offset)).then_some((mapped.value, link, ns))\n                 })?;\n             // get the relative range to the doc/attribute in the expansion\n             let in_expansion_relative_range = in_expansion_range - descended_prefix_len - token_start;"}, {"sha": "9f78c75e90aa21d1696fed76073f087c93a156ef", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -205,7 +205,7 @@ fn extend_single_word_in_comment_or_string(\n     }\n \n     let start_idx = before.rfind(non_word_char)? as u32;\n-    let end_idx = after.find(non_word_char).unwrap_or_else(|| after.len()) as u32;\n+    let end_idx = after.find(non_word_char).unwrap_or(after.len()) as u32;\n \n     let from: TextSize = (start_idx + 1).into();\n     let to: TextSize = (cursor_position + end_idx).into();"}, {"sha": "190ab80ba0ff36db74bfd27a194aef9d0322b7ce", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -110,7 +110,7 @@ fn impls_for_trait_item(\n         .filter_map(|imp| {\n             let item = imp.items(sema.db).iter().find_map(|itm| {\n                 let itm_name = itm.name(sema.db)?;\n-                (itm_name == fun_name).then(|| *itm)\n+                (itm_name == fun_name).then_some(*itm)\n             })?;\n             item.try_to_nav(sema.db)\n         })"}, {"sha": "55f8779eed7d01b08b24705e7d20614a6c7e106d", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -110,7 +110,7 @@ fn highlight_references(\n         .and_then(|decl| decl.focus_range)\n         .map(|range| {\n             let category =\n-                references::decl_mutability(&def, node, range).then(|| ReferenceCategory::Write);\n+                references::decl_mutability(&def, node, range).then_some(ReferenceCategory::Write);\n             HighlightedRange { range, category }\n         });\n         if let Some(hl_range) = hl_range {\n@@ -365,7 +365,7 @@ mod tests {\n \n         let mut expected = annotations\n             .into_iter()\n-            .map(|(r, access)| (r.range, (!access.is_empty()).then(|| access)))\n+            .map(|(r, access)| (r.range, (!access.is_empty()).then_some(access)))\n             .collect::<Vec<_>>();\n \n         let mut actual = hls"}, {"sha": "adec19c765a14292dad7fdb8d489baafa75f0216", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -167,7 +167,7 @@ fn is_named_constructor(\n         ast::PathSegmentKind::Type { type_ref: Some(ty), trait_ref: None } => ty.to_string(),\n         _ => return None,\n     };\n-    (ctor_name == ty_name).then(|| ())\n+    (ctor_name == ty_name).then_some(())\n }\n \n fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &hir::Type) -> bool {"}, {"sha": "892e6a9bb0ab8c77c046940ffadf693ce3125b22", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -111,7 +111,7 @@ fn punctuation(\n             let is_raw_ptr = (|| {\n                 let prefix_expr = parent.and_then(ast::PrefixExpr::cast)?;\n                 let expr = prefix_expr.expr()?;\n-                sema.type_of_expr(&expr)?.original.is_raw_ptr().then(|| ())\n+                sema.type_of_expr(&expr)?.original.is_raw_ptr().then_some(())\n             })();\n             if let Some(()) = is_raw_ptr {\n                 HlTag::Operator(HlOperator::Other) | HlMod::Unsafe"}, {"sha": "2373db97a3e414ef4fc2e0b3c78a2661835c8bfa", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -140,7 +140,7 @@ impl Shift {\n                     | tt::Leaf::Punct(tt::Punct { id, .. })\n                     | tt::Leaf::Literal(tt::Literal { id, .. })) = leaf;\n \n-                    (id != tt::TokenId::unspecified()).then(|| id.0)\n+                    (id != tt::TokenId::unspecified()).then_some(id.0)\n                 }\n             };\n             subtree.token_trees.iter().filter_map(filter).max()"}, {"sha": "d4345ba4780097f6c327e0d3c2ed37ee24accd27", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -273,7 +273,7 @@ fn parse_repeat(src: &mut TtIter<'_>) -> Result<(Option<Separator>, RepeatKind),\n                         _ => return Err(ParseError::InvalidRepeat),\n                     },\n                 };\n-                return Ok((has_sep.then(|| separator), repeat_kind));\n+                return Ok((has_sep.then_some(separator), repeat_kind));\n             }\n         }\n     }"}, {"sha": "a12bd3952cc1cb0c12ffb515666575c4b75dbd00", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -228,7 +228,7 @@ fn completion_item(\n     max_relevance: u32,\n     item: CompletionItem,\n ) {\n-    let insert_replace_support = config.insert_replace_support().then(|| tdpp.position);\n+    let insert_replace_support = config.insert_replace_support().then_some(tdpp.position);\n     let mut additional_text_edits = Vec::new();\n \n     // LSP does not allow arbitrary edits in completion, so we have to do a\n@@ -258,7 +258,7 @@ fn completion_item(\n         text_edit.unwrap()\n     };\n \n-    let insert_text_format = item.is_snippet().then(|| lsp_types::InsertTextFormat::SNIPPET);\n+    let insert_text_format = item.is_snippet().then_some(lsp_types::InsertTextFormat::SNIPPET);\n     let tags = item.deprecated().then(|| vec![lsp_types::CompletionItemTag::DEPRECATED]);\n     let command = if item.trigger_call_info() && config.client_commands().trigger_parameter_hints {\n         Some(command::trigger_parameter_hints())"}, {"sha": "a214a5e4462cf9a51712a7fb72738d0b2ae0d931", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -3921,7 +3921,7 @@ impl AnyHasArgList {\n impl AstNode for AnyHasArgList {\n     fn can_cast(kind: SyntaxKind) -> bool { matches!(kind, CALL_EXPR | METHOD_CALL_EXPR) }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasArgList { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasArgList { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -4006,7 +4006,7 @@ impl AstNode for AnyHasAttrs {\n         )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasAttrs { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasAttrs { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -4043,7 +4043,7 @@ impl AstNode for AnyHasDocComments {\n         )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasDocComments { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasDocComments { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -4058,7 +4058,7 @@ impl AstNode for AnyHasGenericParams {\n         matches!(kind, ENUM | FN | IMPL | STRUCT | TRAIT | TYPE_ALIAS | UNION)\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasGenericParams { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasGenericParams { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -4071,7 +4071,7 @@ impl AnyHasLoopBody {\n impl AstNode for AnyHasLoopBody {\n     fn can_cast(kind: SyntaxKind) -> bool { matches!(kind, FOR_EXPR | LOOP_EXPR | WHILE_EXPR) }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasLoopBody { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasLoopBody { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -4084,7 +4084,7 @@ impl AnyHasModuleItem {\n impl AstNode for AnyHasModuleItem {\n     fn can_cast(kind: SyntaxKind) -> bool { matches!(kind, MACRO_ITEMS | SOURCE_FILE | ITEM_LIST) }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasModuleItem { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasModuleItem { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -4119,7 +4119,7 @@ impl AstNode for AnyHasName {\n         )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasName { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasName { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -4137,7 +4137,7 @@ impl AstNode for AnyHasTypeBounds {\n         )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasTypeBounds { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasTypeBounds { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -4171,7 +4171,7 @@ impl AstNode for AnyHasVisibility {\n         )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasVisibility { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasVisibility { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }"}, {"sha": "03aa2c451e84803a655b032a94aeb6676ba3c216", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc80c5bd0773b28c630a43e29d42cde65b91e7c4/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "patch": "@@ -253,7 +253,7 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n                             matches!(kind, #(#kinds)|*)\n                         }\n                         fn cast(syntax: SyntaxNode) -> Option<Self> {\n-                            Self::can_cast(syntax.kind()).then(|| #name { syntax })\n+                            Self::can_cast(syntax.kind()).then_some(#name { syntax })\n                         }\n                         fn syntax(&self) -> &SyntaxNode {\n                             &self.syntax"}]}