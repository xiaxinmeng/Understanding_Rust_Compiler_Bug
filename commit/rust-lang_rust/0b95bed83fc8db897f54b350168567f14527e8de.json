{"sha": "0b95bed83fc8db897f54b350168567f14527e8de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOTViZWQ4M2ZjOGRiODk3ZjU0YjM1MDE2ODU2N2YxNDUyN2U4ZGU=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-05-23T21:49:53Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-27T14:08:14Z"}, "message": "Add unsafe diagnostics and unsafe highlighting", "tree": {"sha": "94fc33b8e7f160ae2b45e38b32a70856006c93a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94fc33b8e7f160ae2b45e38b32a70856006c93a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b95bed83fc8db897f54b350168567f14527e8de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b95bed83fc8db897f54b350168567f14527e8de", "html_url": "https://github.com/rust-lang/rust/commit/0b95bed83fc8db897f54b350168567f14527e8de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b95bed83fc8db897f54b350168567f14527e8de/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d1e2c4d9dc6c7f5fbaee5d9907d135f618d7ac6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d1e2c4d9dc6c7f5fbaee5d9907d135f618d7ac6", "html_url": "https://github.com/rust-lang/rust/commit/9d1e2c4d9dc6c7f5fbaee5d9907d135f618d7ac6"}], "stats": {"total": 165, "additions": 163, "deletions": 2}, "files": [{"sha": "131180a6383ab78ac15078440cc982db1bc98f5f", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b95bed83fc8db897f54b350168567f14527e8de/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b95bed83fc8db897f54b350168567f14527e8de/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=0b95bed83fc8db897f54b350168567f14527e8de", "patch": "@@ -36,6 +36,7 @@ use rustc_hash::FxHashSet;\n \n use crate::{\n     db::{DefDatabase, HirDatabase},\n+    diagnostics::UnsafeValidator,\n     has_source::HasSource,\n     CallableDef, HirDisplay, InFile, Name,\n };\n@@ -677,7 +678,9 @@ impl Function {\n         let _p = profile(\"Function::diagnostics\");\n         let infer = db.infer(self.id.into());\n         infer.add_diagnostics(db, self.id, sink);\n-        let mut validator = ExprValidator::new(self.id, infer, sink);\n+        let mut validator = ExprValidator::new(self.id, infer.clone(), sink);\n+        validator.validate_body(db);\n+        let mut validator = UnsafeValidator::new(&self, infer, sink);\n         validator.validate_body(db);\n     }\n }"}, {"sha": "562f3fe5c48fec1064aa8c10bd3f204f77718162", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0b95bed83fc8db897f54b350168567f14527e8de/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b95bed83fc8db897f54b350168567f14527e8de/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=0b95bed83fc8db897f54b350168567f14527e8de", "patch": "@@ -2,3 +2,53 @@\n pub use hir_def::diagnostics::UnresolvedModule;\n pub use hir_expand::diagnostics::{AstDiagnostic, Diagnostic, DiagnosticSink};\n pub use hir_ty::diagnostics::{MissingFields, MissingMatchArms, MissingOkInTailExpr, NoSuchField};\n+\n+use std::sync::Arc;\n+\n+use crate::code_model::Function;\n+use crate::db::HirDatabase;\n+use crate::has_source::HasSource;\n+use hir_ty::{\n+    diagnostics::{MissingUnsafe, UnnecessaryUnsafe},\n+    expr::unsafe_expressions,\n+    InferenceResult,\n+};\n+use ra_syntax::AstPtr;\n+\n+pub struct UnsafeValidator<'a, 'b: 'a> {\n+    func: &'a Function,\n+    infer: Arc<InferenceResult>,\n+    sink: &'a mut DiagnosticSink<'b>,\n+}\n+\n+impl<'a, 'b> UnsafeValidator<'a, 'b> {\n+    pub fn new(\n+        func: &'a Function,\n+        infer: Arc<InferenceResult>,\n+        sink: &'a mut DiagnosticSink<'b>,\n+    ) -> UnsafeValidator<'a, 'b> {\n+        UnsafeValidator { func, infer, sink }\n+    }\n+\n+    pub fn validate_body(&mut self, db: &dyn HirDatabase) {\n+        let def = self.func.id.into();\n+        let unsafe_expressions = unsafe_expressions(db, self.infer.as_ref(), def);\n+        let func_data = db.function_data(self.func.id);\n+        let unnecessary = func_data.is_unsafe && unsafe_expressions.len() == 0;\n+        let missing = !func_data.is_unsafe && unsafe_expressions.len() > 0;\n+        if !(unnecessary || missing) {\n+            return;\n+        }\n+\n+        let in_file = self.func.source(db);\n+        let file = in_file.file_id;\n+        let fn_def = AstPtr::new(&in_file.value);\n+        let fn_name = func_data.name.clone().into();\n+\n+        if unnecessary {\n+            self.sink.push(UnnecessaryUnsafe { file, fn_def, fn_name })\n+        } else {\n+            self.sink.push(MissingUnsafe { file, fn_def, fn_name })\n+        }\n+    }\n+}"}, {"sha": "3469cc6806abfd418067a85226881a6651f29c30", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0b95bed83fc8db897f54b350168567f14527e8de/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b95bed83fc8db897f54b350168567f14527e8de/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=0b95bed83fc8db897f54b350168567f14527e8de", "patch": "@@ -169,3 +169,61 @@ impl AstDiagnostic for BreakOutsideOfLoop {\n         ast::Expr::cast(node).unwrap()\n     }\n }\n+\n+#[derive(Debug)]\n+pub struct MissingUnsafe {\n+    pub file: HirFileId,\n+    pub fn_def: AstPtr<ast::FnDef>,\n+    pub fn_name: Name,\n+}\n+\n+impl Diagnostic for MissingUnsafe {\n+    fn message(&self) -> String {\n+        format!(\"Missing unsafe marker on fn `{}`\", self.fn_name)\n+    }\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile { file_id: self.file, value: self.fn_def.clone().into() }\n+    }\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}\n+\n+impl AstDiagnostic for MissingUnsafe {\n+    type AST = ast::FnDef;\n+\n+    fn ast(&self, db: &impl AstDatabase) -> Self::AST {\n+        let root = db.parse_or_expand(self.source().file_id).unwrap();\n+        let node = self.source().value.to_node(&root);\n+        ast::FnDef::cast(node).unwrap()\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct UnnecessaryUnsafe {\n+    pub file: HirFileId,\n+    pub fn_def: AstPtr<ast::FnDef>,\n+    pub fn_name: Name,\n+}\n+\n+impl Diagnostic for UnnecessaryUnsafe {\n+    fn message(&self) -> String {\n+        format!(\"Unnecessary unsafe marker on fn `{}`\", self.fn_name)\n+    }\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile { file_id: self.file, value: self.fn_def.clone().into() }\n+    }\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}\n+\n+impl AstDiagnostic for UnnecessaryUnsafe {\n+    type AST = ast::FnDef;\n+\n+    fn ast(&self, db: &impl AstDatabase) -> Self::AST {\n+        let root = db.parse_or_expand(self.source().file_id).unwrap();\n+        let node = self.source().value.to_node(&root);\n+        ast::FnDef::cast(node).unwrap()\n+    }\n+}"}, {"sha": "795f1762c5f50d476129fb7a51793f0f5d4aedb4", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0b95bed83fc8db897f54b350168567f14527e8de/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b95bed83fc8db897f54b350168567f14527e8de/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=0b95bed83fc8db897f54b350168567f14527e8de", "patch": "@@ -2,7 +2,7 @@\n \n use std::sync::Arc;\n \n-use hir_def::{path::path, resolver::HasResolver, AdtId, FunctionId};\n+use hir_def::{path::path, resolver::HasResolver, AdtId, DefWithBodyId, FunctionId};\n use hir_expand::diagnostics::DiagnosticSink;\n use ra_syntax::{ast, AstPtr};\n use rustc_hash::FxHashSet;\n@@ -312,3 +312,25 @@ pub fn record_pattern_missing_fields(\n     }\n     Some((variant_def, missed_fields, exhaustive))\n }\n+\n+pub fn unsafe_expressions(\n+    db: &dyn HirDatabase,\n+    infer: &InferenceResult,\n+    def: DefWithBodyId,\n+) -> Vec<ExprId> {\n+    let mut unsafe_expr_ids = vec![];\n+    let body = db.body(def);\n+    for (id, expr) in body.exprs.iter() {\n+        if let Expr::Call { callee, .. } = expr {\n+            if infer\n+                .method_resolution(*callee)\n+                .map(|func| db.function_data(func).is_unsafe)\n+                .unwrap_or(false)\n+            {\n+                unsafe_expr_ids.push(id);\n+            }\n+        }\n+    }\n+\n+    unsafe_expr_ids\n+}"}, {"sha": "39cd74ac3a4c3c66c4c4c0c86eb28bd133e9ac21", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0b95bed83fc8db897f54b350168567f14527e8de/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b95bed83fc8db897f54b350168567f14527e8de/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=0b95bed83fc8db897f54b350168567f14527e8de", "patch": "@@ -370,3 +370,31 @@ fn check_highlighting(ra_fixture: &str, snapshot: &str, rainbow: bool) {\n     fs::write(dst_file, &actual_html).unwrap();\n     assert_eq_text!(expected_html, actual_html);\n }\n+\n+#[test]\n+fn test_unsafe_highlighting() {\n+    let (analysis, file_id) = single_file(\n+        r#\"\n+unsafe fn unsafe_fn() {}\n+\n+struct HasUnsafeFn;\n+\n+impl HasUnsafeFn {\n+    unsafe fn unsafe_method(&self) {}\n+}\n+\n+fn main() {\n+    unsafe {\n+        unsafe_fn();\n+        HasUnsafeFn.unsafe_method();\n+    }\n+}\n+\"#\n+        .trim(),\n+    );\n+    let dst_file = project_dir().join(\"crates/ra_ide/src/snapshots/highlight_unsafe.html\");\n+    let actual_html = &analysis.highlight_as_html(file_id, false).unwrap();\n+    let expected_html = &read_text(&dst_file);\n+    fs::write(dst_file, &actual_html).unwrap();\n+    assert_eq_text!(expected_html, actual_html);\n+}"}]}