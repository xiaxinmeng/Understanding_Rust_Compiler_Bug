{"sha": "dc9560cfd2e466ffbaf4615197ed4386ccb90c1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjOTU2MGNmZDJlNDY2ZmZiYWY0NjE1MTk3ZWQ0Mzg2Y2NiOTBjMWQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-24T12:17:54Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:27:50Z"}, "message": "Remove hir::Item::attrs.", "tree": {"sha": "4c4b4842c3af35a36644de40cef834c7f6c5caeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c4b4842c3af35a36644de40cef834c7f6c5caeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d", "html_url": "https://github.com/rust-lang/rust/commit/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49835d8abf93ca0d3249d7f534963fe28313aa18", "url": "https://api.github.com/repos/rust-lang/rust/commits/49835d8abf93ca0d3249d7f534963fe28313aa18", "html_url": "https://github.com/rust-lang/rust/commit/49835d8abf93ca0d3249d7f534963fe28313aa18"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "78f0846e88e7dce83dcd655f9e8103d949943533", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=dc9560cfd2e466ffbaf4615197ed4386ccb90c1d", "patch": "@@ -276,14 +276,15 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n         if is_relevant_item(cx, item) {\n-            check_attrs(cx, item.span, item.ident.name, &item.attrs)\n+            check_attrs(cx, item.span, item.ident.name, attrs)\n         }\n         match item.kind {\n             ItemKind::ExternCrate(..) | ItemKind::Use(..) => {\n-                let skip_unused_imports = item.attrs.iter().any(|attr| attr.has_name(sym::macro_use));\n+                let skip_unused_imports = attrs.iter().any(|attr| attr.has_name(sym::macro_use));\n \n-                for attr in item.attrs {\n+                for attr in attrs {\n                     if in_external_macro(cx.sess(), attr.span) {\n                         return;\n                     }"}, {"sha": "66cf6682f8501008ec0bcbb31e6528a6eb6ffb72", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=dc9560cfd2e466ffbaf4615197ed4386ccb90c1d", "patch": "@@ -170,7 +170,8 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n         }) = item.kind\n         {\n             let ty = cx.tcx.type_of(item.def_id);\n-            let is_automatically_derived = is_automatically_derived(&*item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            let is_automatically_derived = is_automatically_derived(attrs);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n             check_ord_partial_ord(cx, item.span, trait_ref, ty, is_automatically_derived);"}, {"sha": "23c99e45ca7fcd924461ceab2b2322bfb4a1694f", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=dc9560cfd2e466ffbaf4615197ed4386ccb90c1d", "patch": "@@ -214,7 +214,8 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        let headers = check_attrs(cx, &self.valid_idents, attrs);\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, _, body_id) => {\n                 if !(is_entrypoint_fn(cx, item.def_id.to_def_id()) || in_external_macro(cx.tcx.sess, item.span)) {"}, {"sha": "316f7484862803281cdcc2f96e9b3a06d5c87beb", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=dc9560cfd2e466ffbaf4615197ed4386ccb90c1d", "patch": "@@ -73,7 +73,8 @@ impl LateLintPass<'_> for ExhaustiveItems {\n         if_chain! {\n             if let ItemKind::Enum(..) | ItemKind::Struct(..) = item.kind;\n             if cx.access_levels.is_exported(item.hir_id());\n-            if !item.attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            if !attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n             then {\n                 let (lint, msg) = if let ItemKind::Struct(ref v, ..) = item.kind {\n                     if v.fields().iter().any(|f| !f.vis.node.is_pub()) {"}, {"sha": "234cb0f53aa0c26a7b77e5ee3426407d8633c7df", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=dc9560cfd2e466ffbaf4615197ed4386ccb90c1d", "patch": "@@ -280,7 +280,8 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        let attr = must_use_attr(&item.attrs);\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        let attr = must_use_attr(attrs);\n         if let hir::ItemKind::Fn(ref sig, ref _generics, ref body_id) = item.kind {\n             let is_public = cx.access_levels.is_exported(item.hir_id());\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n@@ -291,7 +292,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                 check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n                 return;\n             }\n-            if is_public && !is_proc_macro(cx.sess(), &item.attrs) && attr_by_name(&item.attrs, \"no_mangle\").is_none() {\n+            if is_public && !is_proc_macro(cx.sess(), attrs) && attr_by_name(attrs, \"no_mangle\").is_none() {\n                 check_must_use_candidate(\n                     cx,\n                     &sig.decl,"}, {"sha": "6d9c78393c8c4d2eee97df292a35372f02ee80b1", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=dc9560cfd2e466ffbaf4615197ed4386ccb90c1d", "patch": "@@ -107,8 +107,8 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         if_chain! {\n             if cx.sess().opts.edition >= Edition::Edition2018;\n             if let hir::ItemKind::Use(path, _kind) = &item.kind;\n-            if let Some(mac_attr) = item\n-                .attrs\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            if let Some(mac_attr) = attrs\n                 .iter()\n                 .find(|attr| attr.ident().map(|s| s.to_string()) == Some(\"macro_use\".to_string()));\n             if let Res::Def(DefKind::Mod, id) = path.res;"}, {"sha": "6ec4c38d0f9ccfeac5afc4c86d0a6fc3c46bba37", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=dc9560cfd2e466ffbaf4615197ed4386ccb90c1d", "patch": "@@ -161,7 +161,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n         let (article, desc) = cx.tcx.article_and_description(it.def_id.to_def_id());\n \n-        self.check_missing_docs_attrs(cx, &it.attrs, it.span, article, desc);\n+        let attrs = cx.tcx.hir().attrs(it.hir_id());\n+        self.check_missing_docs_attrs(cx, attrs, it.span, article, desc);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, trait_item: &'tcx hir::TraitItem<'_>) {"}, {"sha": "9b604471573d96852ac5772707d91925def90c11", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=dc9560cfd2e466ffbaf4615197ed4386ccb90c1d", "patch": "@@ -93,7 +93,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         match it.kind {\n             hir::ItemKind::Fn(..) => {\n                 let desc = \"a function\";\n-                check_missing_inline_attrs(cx, &it.attrs, it.span, desc);\n+                let attrs = cx.tcx.hir().attrs(it.hir_id());\n+                check_missing_inline_attrs(cx, attrs, it.span, desc);\n             },\n             hir::ItemKind::Trait(ref _is_auto, ref _unsafe, ref _generics, ref _bounds, trait_items) => {\n                 // note: we need to check if the trait is exported so we can't use"}, {"sha": "1aadcfd87b60f73a1dc44626adc30300cae35d93", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=dc9560cfd2e466ffbaf4615197ed4386ccb90c1d", "patch": "@@ -115,8 +115,9 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBorrow {\n         }\n     }\n \n-    fn check_item(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if is_automatically_derived(item.attrs) {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        if is_automatically_derived(attrs) {\n             debug_assert!(self.derived_item.is_none());\n             self.derived_item = Some(item.def_id);\n         }"}, {"sha": "aca1ed5ca6563144b4e3e9fc3a925f816a05ffd9", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=dc9560cfd2e466ffbaf4615197ed4386ccb90c1d", "patch": "@@ -35,7 +35,8 @@ impl<'tcx> LateLintPass<'tcx> for PartialEqNeImpl {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: Some(ref trait_ref), items: impl_items, .. }) = item.kind;\n-            if !is_automatically_derived(&*item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            if !is_automatically_derived(attrs);\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n             if trait_ref.path.res.def_id() == eq_trait;\n             then {"}, {"sha": "07a79592a4acd749057d75d9f7302abd04771f88", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9560cfd2e466ffbaf4615197ed4386ccb90c1d/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=dc9560cfd2e466ffbaf4615197ed4386ccb90c1d", "patch": "@@ -33,7 +33,7 @@ declare_lint_pass!(DeepCodeInspector => [DEEP_CODE_INSPECTION]);\n \n impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx.sess(), cx.tcx.hir().attrs(item.hir_id())) {\n             return;\n         }\n         print_item(cx, item);"}]}