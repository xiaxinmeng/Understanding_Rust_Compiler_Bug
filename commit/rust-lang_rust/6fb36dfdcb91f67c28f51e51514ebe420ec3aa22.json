{"sha": "6fb36dfdcb91f67c28f51e51514ebe420ec3aa22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYjM2ZGZkY2I5MWY2N2MyOGY1MWU1MTUxNGViZTQyMGVjM2FhMjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-14T20:26:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-14T20:26:08Z"}, "message": "Merge #3145\n\n3145: Make Self implement the trait inside trait default methods r=matklad a=flodiebold\n\n\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>", "tree": {"sha": "59e6238f5ebbaa017fd4d014b4de4f023b67352d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59e6238f5ebbaa017fd4d014b4de4f023b67352d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRwJgCRBK7hj4Ov3rIwAAdHIIAD6LipjAYuiOhdl1l3wHPwTm\nZGUfrypCjArDmeFkrrFajHptZGb21TF3qtRr2JbRMFIZ/9EXtjTtxReuknpCIL9S\nONOQPZtEaY0pcbDnx4P1XeX4WJ/Y8zPZI5PDdmO9uvsD9PAIjRO2kfeHEgjGrKBq\nV2fuBjmXGJK+huc89sjmJA+npmo7DfMEbqIsk9vja+puyKVHJ0rSgIV95tZiczrS\n2H74XBAQVqC9PODzUibNPP5APBohMzCIOzt6A4VSN8VMheMHZmtlAls5UunJm1+y\nOno6FEWzrvDalq7DGUF42DnZpxO4IUgkxp4bOWMROd0zShkenkavZ26LQ53wsGc=\n=g+k1\n-----END PGP SIGNATURE-----\n", "payload": "tree 59e6238f5ebbaa017fd4d014b4de4f023b67352d\nparent 6711335173f138d444049357495fb2785c2bdd0b\nparent 001dd6a2000ce4adada0ab6e4ed8fd67cb8eb569\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581711968 +0000\ncommitter GitHub <noreply@github.com> 1581711968 +0000\n\nMerge #3145\n\n3145: Make Self implement the trait inside trait default methods r=matklad a=flodiebold\n\n\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22", "html_url": "https://github.com/rust-lang/rust/commit/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6711335173f138d444049357495fb2785c2bdd0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6711335173f138d444049357495fb2785c2bdd0b", "html_url": "https://github.com/rust-lang/rust/commit/6711335173f138d444049357495fb2785c2bdd0b"}, {"sha": "001dd6a2000ce4adada0ab6e4ed8fd67cb8eb569", "url": "https://api.github.com/repos/rust-lang/rust/commits/001dd6a2000ce4adada0ab6e4ed8fd67cb8eb569", "html_url": "https://github.com/rust-lang/rust/commit/001dd6a2000ce4adada0ab6e4ed8fd67cb8eb569"}], "stats": {"total": 87, "additions": 78, "deletions": 9}, "files": [{"sha": "e2b228e80d3854280688886cb3ff2301423b3414", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=6fb36dfdcb91f67c28f51e51514ebe420ec3aa22", "patch": "@@ -542,11 +542,7 @@ impl Resolver {\n \n     fn push_generic_params_scope(self, db: &impl DefDatabase, def: GenericDefId) -> Resolver {\n         let params = db.generic_params(def);\n-        if params.types.is_empty() {\n-            self\n-        } else {\n-            self.push_scope(Scope::GenericParams { def, params })\n-        }\n+        self.push_scope(Scope::GenericParams { def, params })\n     }\n \n     fn push_impl_block_scope(self, impl_block: ImplId) -> Resolver {"}, {"sha": "6a2aded021c2952343cf15c759b9f4adb9d0fc9c", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=6fb36dfdcb91f67c28f51e51514ebe420ec3aa22", "patch": "@@ -14,9 +14,9 @@ use hir_def::{\n     path::{GenericArg, Path, PathSegment, PathSegments},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, ConstId, EnumId, EnumVariantId, FunctionId, GenericDefId, HasModule, ImplId,\n-    LocalStructFieldId, Lookup, StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n-    VariantId,\n+    AdtId, AssocContainerId, ConstId, EnumId, EnumVariantId, FunctionId, GenericDefId, HasModule,\n+    ImplId, LocalStructFieldId, Lookup, StaticId, StructId, TraitId, TypeAliasId, TypeParamId,\n+    UnionId, VariantId,\n };\n use ra_arena::map::ArenaMap;\n use ra_db::CrateId;\n@@ -672,11 +672,35 @@ impl TraitEnvironment {\n     pub fn lower(db: &impl HirDatabase, resolver: &Resolver) -> Arc<TraitEnvironment> {\n         let ctx = TyLoweringContext::new(db, &resolver)\n             .with_type_param_mode(TypeParamLoweringMode::Placeholder);\n-        let predicates = resolver\n+        let mut predicates = resolver\n             .where_predicates_in_scope()\n             .flat_map(|pred| GenericPredicate::from_where_predicate(&ctx, pred))\n             .collect::<Vec<_>>();\n \n+        if let Some(def) = resolver.generic_def() {\n+            let container: Option<AssocContainerId> = match def {\n+                // FIXME: is there a function for this?\n+                GenericDefId::FunctionId(f) => Some(f.lookup(db).container),\n+                GenericDefId::AdtId(_) => None,\n+                GenericDefId::TraitId(_) => None,\n+                GenericDefId::TypeAliasId(t) => Some(t.lookup(db).container),\n+                GenericDefId::ImplId(_) => None,\n+                GenericDefId::EnumVariantId(_) => None,\n+                GenericDefId::ConstId(c) => Some(c.lookup(db).container),\n+            };\n+            if let Some(AssocContainerId::TraitId(trait_id)) = container {\n+                // add `Self: Trait<T1, T2, ...>` to the environment in trait\n+                // function default implementations (and hypothetical code\n+                // inside consts or type aliases)\n+                test_utils::tested_by!(trait_self_implements_self);\n+                let substs = Substs::type_params(db, trait_id);\n+                let trait_ref = TraitRef { trait_: trait_id, substs };\n+                let pred = GenericPredicate::Implemented(trait_ref);\n+\n+                predicates.push(pred);\n+            }\n+        }\n+\n         Arc::new(TraitEnvironment { predicates })\n     }\n }"}, {"sha": "ae47855e958501807b712f6e497a9175dc827253", "filename": "crates/ra_hir_ty/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs?ref=6fb36dfdcb91f67c28f51e51514ebe420ec3aa22", "patch": "@@ -6,4 +6,5 @@ test_utils::marks!(\n     type_var_resolves_to_int_var\n     match_ergonomics_ref\n     coerce_merge_fail_fallback\n+    trait_self_implements_self\n );"}, {"sha": "aa2018944cee5ae5aac2153a611e69971416f92b", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=6fb36dfdcb91f67c28f51e51514ebe420ec3aa22", "patch": "@@ -299,6 +299,54 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn trait_default_method_self_bound_implements_trait() {\n+    test_utils::covers!(trait_self_implements_self);\n+    assert_snapshot!(\n+        infer(r#\"\n+trait Trait {\n+    fn foo(&self) -> i64;\n+    fn bar(&self) -> {\n+        let x = self.foo();\n+    }\n+}\n+\"#),\n+        @r###\"\n+    [27; 31) 'self': &Self\n+    [53; 57) 'self': &Self\n+    [62; 97) '{     ...     }': ()\n+    [76; 77) 'x': i64\n+    [80; 84) 'self': &Self\n+    [80; 90) 'self.foo()': i64\n+    \"###\n+    );\n+}\n+\n+#[test]\n+fn trait_default_method_self_bound_implements_super_trait() {\n+    test_utils::covers!(trait_self_implements_self);\n+    assert_snapshot!(\n+        infer(r#\"\n+trait SuperTrait {\n+    fn foo(&self) -> i64;\n+}\n+trait Trait: SuperTrait {\n+    fn bar(&self) -> {\n+        let x = self.foo();\n+    }\n+}\n+\"#),\n+        @r###\"\n+    [32; 36) 'self': &Self\n+    [86; 90) 'self': &Self\n+    [95; 130) '{     ...     }': ()\n+    [109; 110) 'x': i64\n+    [113; 117) 'self': &Self\n+    [113; 123) 'self.foo()': i64\n+    \"###\n+    );\n+}\n+\n #[test]\n fn infer_project_associated_type() {\n     // y, z, a don't yet work because of https://github.com/rust-lang/chalk/issues/234"}]}