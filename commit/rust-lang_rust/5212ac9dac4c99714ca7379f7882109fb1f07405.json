{"sha": "5212ac9dac4c99714ca7379f7882109fb1f07405", "node_id": "C_kwDOAAsO6NoAKDUyMTJhYzlkYWM0Yzk5NzE0Y2E3Mzc5Zjc4ODIxMDlmYjFmMDc0MDU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-18T13:27:08Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-21T02:35:11Z"}, "message": "Make check for overlapping closure span more accurate", "tree": {"sha": "9e3dfbb6d98fffb536621143361312a3961d8c36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e3dfbb6d98fffb536621143361312a3961d8c36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5212ac9dac4c99714ca7379f7882109fb1f07405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5212ac9dac4c99714ca7379f7882109fb1f07405", "html_url": "https://github.com/rust-lang/rust/commit/5212ac9dac4c99714ca7379f7882109fb1f07405", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5212ac9dac4c99714ca7379f7882109fb1f07405/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "html_url": "https://github.com/rust-lang/rust/commit/d2f54b1990c916c1af15124ce45dbdaa9758f7b2"}], "stats": {"total": 102, "additions": 46, "deletions": 56}, "files": [{"sha": "3642b2ab03bfafb732432aeee67adac598f268c8", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5212ac9dac4c99714ca7379f7882109fb1f07405/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5212ac9dac4c99714ca7379f7882109fb1f07405/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=5212ac9dac4c99714ca7379f7882109fb1f07405", "patch": "@@ -1669,6 +1669,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> bool {\n         let (traits::ExprItemObligation(def_id, hir_id, idx) | traits::ExprBindingObligation(def_id, _, hir_id, idx))\n             = *error.obligation.cause.code().peel_derives() else { return false; };\n+        let hir = self.tcx.hir();\n+        let hir::Node::Expr(expr) = hir.get(hir_id) else { return false; };\n \n         // Skip over mentioning async lang item\n         if Some(def_id) == self.tcx.lang_items().from_generator_fn()\n@@ -1677,15 +1679,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             return false;\n         }\n-        // Skip over closure arg mismatch, which has a better heuristic\n-        // to determine what span to point at.\n-        if let traits::FulfillmentErrorCode::CodeSelectionError(\n-            traits::SelectionError::OutputTypeParameterMismatch(_, expected, _),\n-        ) = error.code\n-            && let ty::Closure(..) | ty::Generator(..) = expected.skip_binder().self_ty().kind()\n-        {\n-            return false;\n-        }\n \n         let Some(unsubstituted_pred) =\n             self.tcx.predicates_of(def_id).instantiate_identity(self.tcx).predicates.into_iter().nth(idx)\n@@ -1741,16 +1734,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.find_ambiguous_parameter_in(def_id, error.root_obligation.predicate);\n         }\n \n-        let hir = self.tcx.hir();\n-        match hir.get(hir_id) {\n-            hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Path(qpath), hir_id, .. }) => {\n+        if self.closure_span_overlaps_error(error, expr.span) {\n+            return false;\n+        }\n+\n+        match &expr.kind {\n+            hir::ExprKind::Path(qpath) => {\n                 if let hir::Node::Expr(hir::Expr {\n                     kind: hir::ExprKind::Call(callee, args),\n                     hir_id: call_hir_id,\n+                    span: call_span,\n                     ..\n-                }) = hir.get(hir.get_parent_node(*hir_id))\n-                    && callee.hir_id == *hir_id\n+                }) = hir.get(hir.get_parent_node(expr.hir_id))\n+                    && callee.hir_id == expr.hir_id\n                 {\n+                    if self.closure_span_overlaps_error(error, *call_span) {\n+                        return false;\n+                    }\n+\n                     for param in\n                         [param_to_point_at, fallback_param_to_point_at, self_param_to_point_at]\n                         .into_iter()\n@@ -1780,10 +1781,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n-            hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::MethodCall(segment, args, ..),\n-                ..\n-            }) => {\n+            hir::ExprKind::MethodCall(segment, args, ..) => {\n                 for param in [param_to_point_at, fallback_param_to_point_at, self_param_to_point_at]\n                     .into_iter()\n                     .flatten()\n@@ -1805,9 +1803,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     return true;\n                 }\n             }\n-            hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Struct(qpath, fields, ..), ..\n-            }) => {\n+            hir::ExprKind::Struct(qpath, fields, ..) => {\n                 if let Res::Def(DefKind::Struct | DefKind::Variant, variant_def_id) =\n                     self.typeck_results.borrow().qpath_res(qpath, hir_id)\n                 {\n@@ -1839,6 +1835,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         false\n     }\n \n+    fn closure_span_overlaps_error(\n+        &self,\n+        error: &traits::FulfillmentError<'tcx>,\n+        span: Span,\n+    ) -> bool {\n+        if let traits::FulfillmentErrorCode::CodeSelectionError(\n+            traits::SelectionError::OutputTypeParameterMismatch(_, expected, _),\n+        ) = error.code\n+            && let ty::Closure(def_id, _) | ty::Generator(def_id, ..) = expected.skip_binder().self_ty().kind()\n+            && span.overlaps(self.tcx.def_span(*def_id))\n+        {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n     fn point_at_arg_if_possible(\n         &self,\n         error: &mut traits::FulfillmentError<'tcx>,"}, {"sha": "193de1a35cf1a7e56e84059977202e5b49b98ef4", "filename": "src/test/ui/issues/issue-69683.stderr", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5212ac9dac4c99714ca7379f7882109fb1f07405/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5212ac9dac4c99714ca7379f7882109fb1f07405/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr?ref=5212ac9dac4c99714ca7379f7882109fb1f07405", "patch": "@@ -37,33 +37,7 @@ help: try using a fully qualified path to specify the expected types\n LL |     <u16 as Foo<I>>::foo(0u16, b);\n    |     +++++++++++++++++++++    ~\n \n-error[E0283]: type annotations needed\n-  --> $DIR/issue-69683.rs:30:10\n-   |\n-LL |     0u16.foo(b);\n-   |     ---- ^^^\n-   |     |\n-   |     type must be known at this point\n-   |\n-note: multiple `impl`s satisfying `u8: Element<_>` found\n-  --> $DIR/issue-69683.rs:5:1\n-   |\n-LL | impl<T> Element<()> for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL | impl<T: Element<S>, S> Element<[S; 3]> for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required for `u16` to implement `Foo<_>`\n-  --> $DIR/issue-69683.rs:20:9\n-   |\n-LL | impl<I> Foo<I> for u16\n-   |         ^^^^^^     ^^^\n-help: try using a fully qualified path to specify the expected types\n-   |\n-LL |     <u16 as Foo<I>>::foo(0u16, b);\n-   |     +++++++++++++++++++++    ~\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0283, E0284.\n For more information about an error, try `rustc --explain E0283`."}, {"sha": "a02ec819838833dc2920fdc10ea9e5d380f97ba7", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5212ac9dac4c99714ca7379f7882109fb1f07405/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5212ac9dac4c99714ca7379f7882109fb1f07405/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=5212ac9dac4c99714ca7379f7882109fb1f07405", "patch": "@@ -133,12 +133,14 @@ LL |         F: FnMut(Self::Item) -> B,\n    |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments\n-  --> $DIR/closure-arg-count.rs:27:53\n+  --> $DIR/closure-arg-count.rs:27:57\n    |\n LL |     let bar = |i, x, y| i;\n    |               --------- takes 3 distinct arguments\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(bar);\n-   |                                                     ^^^ expected closure that takes a single 2-tuple as argument\n+   |                                                     --- ^^^ expected closure that takes a single 2-tuple as argument\n+   |                                                     |\n+   |                                                     required by a bound introduced by this call\n    |\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL"}, {"sha": "8dbe3472ea893d9d03b7f783a0001ec8333d120e", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5212ac9dac4c99714ca7379f7882109fb1f07405/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5212ac9dac4c99714ca7379f7882109fb1f07405/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs?ref=5212ac9dac4c99714ca7379f7882109fb1f07405", "patch": "@@ -17,5 +17,6 @@ pub fn main() {\n     //~^ ERROR type mismatch\n     //~| NOTE expected due to this\n     //~| NOTE expected closure signature `fn(isize, _) -> _`\n+    //~| NOTE required by a bound introduced by this call\n     println!(\"{}\", z);\n }"}, {"sha": "54b2200652746fb2d0bc3afe0d5074f01362f3bc", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5212ac9dac4c99714ca7379f7882109fb1f07405/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5212ac9dac4c99714ca7379f7882109fb1f07405/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=5212ac9dac4c99714ca7379f7882109fb1f07405", "patch": "@@ -1,11 +1,13 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/unboxed-closures-vtable-mismatch.rs:16:13\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:16:24\n    |\n LL |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n    |                       ----------------------------- found signature defined here\n LL |\n LL |     let z = call_it(3, f);\n-   |             ^^^^^^^ expected due to this\n+   |             -------    ^ expected due to this\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = note: expected closure signature `fn(isize, _) -> _`\n               found closure signature `fn(usize, _) -> _`"}, {"sha": "9a24fb8c2beec57fcf2f38af5418ecde62272af1", "filename": "src/test/ui/unboxed-closures/non-tupled-arg-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5212ac9dac4c99714ca7379f7882109fb1f07405/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5212ac9dac4c99714ca7379f7882109fb1f07405/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr?ref=5212ac9dac4c99714ca7379f7882109fb1f07405", "patch": "@@ -1,10 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/non-tupled-arg-mismatch.rs:6:7\n+  --> $DIR/non-tupled-arg-mismatch.rs:6:5\n    |\n LL |     a(|_: usize| {});\n-   |     - ^^^^^^^^^^^^^ types differ\n-   |     |\n-   |     required by a bound introduced by this call\n+   |     ^ types differ\n    |\n    = note: expected trait `Fn<usize>`\n               found trait `Fn<(usize,)>`"}]}