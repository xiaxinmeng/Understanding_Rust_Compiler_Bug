{"sha": "a7394b44c870f585eacfeb3036a33471aff49ff8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3Mzk0YjQ0Yzg3MGY1ODVlYWNmZWIzMDM2YTMzNDcxYWZmNDlmZjg=", "commit": {"author": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-11-25T08:17:03Z"}, "committer": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-11-25T08:17:03Z"}, "message": "Merge branch 'master' of https://github.com/rust-analyzer/rust-analyzer into feature/themes", "tree": {"sha": "4f3a3c11645ba1568771b19eaddfad6aba957ab6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f3a3c11645ba1568771b19eaddfad6aba957ab6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7394b44c870f585eacfeb3036a33471aff49ff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7394b44c870f585eacfeb3036a33471aff49ff8", "html_url": "https://github.com/rust-lang/rust/commit/a7394b44c870f585eacfeb3036a33471aff49ff8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7394b44c870f585eacfeb3036a33471aff49ff8/comments", "author": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15ea338ac991707d330288ba4d1bf5daa0fc75d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/15ea338ac991707d330288ba4d1bf5daa0fc75d9", "html_url": "https://github.com/rust-lang/rust/commit/15ea338ac991707d330288ba4d1bf5daa0fc75d9"}, {"sha": "e00e6554ddc13be86733dc8a37a0a229931f378a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e00e6554ddc13be86733dc8a37a0a229931f378a", "html_url": "https://github.com/rust-lang/rust/commit/e00e6554ddc13be86733dc8a37a0a229931f378a"}], "stats": {"total": 60, "additions": 55, "deletions": 5}, "files": [{"sha": "d370dfb34f46877ed55bb544347d1c6911bc413a", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a7394b44c870f585eacfeb3036a33471aff49ff8/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7394b44c870f585eacfeb3036a33471aff49ff8/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=a7394b44c870f585eacfeb3036a33471aff49ff8", "patch": "@@ -46,6 +46,7 @@ macro_rules! register_builtin {\n \n register_builtin! {\n     (COLUMN_MACRO, Column) => column_expand,\n+    (COMPILE_ERROR_MACRO, CompileError) => compile_error_expand,\n     (FILE_MACRO, File) => file_expand,\n     (LINE_MACRO, Line) => line_expand,\n     (STRINGIFY_MACRO, Stringify) => stringify_expand\n@@ -57,16 +58,21 @@ fn to_line_number(db: &dyn AstDatabase, file: HirFileId, pos: TextUnit) -> usize\n     let text = db.file_text(file_id);\n     let mut line_num = 1;\n \n+    let pos = pos.to_usize();\n+    if pos > text.len() {\n+        // FIXME: `pos` at the moment could be an offset inside the \"wrong\" file\n+        // in this case, when we know it's wrong, we return a dummy value\n+        return 0;\n+    }\n     // Count line end\n     for (i, c) in text.chars().enumerate() {\n-        if i == pos.to_usize() {\n+        if i == pos {\n             break;\n         }\n         if c == '\\n' {\n             line_num += 1;\n         }\n     }\n-\n     line_num\n }\n \n@@ -118,15 +124,21 @@ fn to_col_number(db: &dyn AstDatabase, file: HirFileId, pos: TextUnit) -> usize\n     // FIXME: Use expansion info\n     let file_id = file.original_file(db);\n     let text = db.file_text(file_id);\n-    let mut col_num = 1;\n \n-    for c in text[..pos.to_usize()].chars().rev() {\n+    let pos = pos.to_usize();\n+    if pos > text.len() {\n+        // FIXME: `pos` at the moment could be an offset inside the \"wrong\" file\n+        // in this case we return a dummy value so that we don't `panic!`\n+        return 0;\n+    }\n+\n+    let mut col_num = 1;\n+    for c in text[..pos].chars().rev() {\n         if c == '\\n' {\n             break;\n         }\n         col_num = col_num + 1;\n     }\n-\n     col_num\n }\n \n@@ -172,6 +184,26 @@ fn file_expand(\n     Ok(expanded)\n }\n \n+fn compile_error_expand(\n+    _db: &dyn AstDatabase,\n+    _id: MacroCallId,\n+    tt: &tt::Subtree,\n+) -> Result<tt::Subtree, mbe::ExpandError> {\n+    if tt.count() == 1 {\n+        match &tt.token_trees[0] {\n+            tt::TokenTree::Leaf(tt::Leaf::Literal(it)) => {\n+                let s = it.text.as_str();\n+                if s.contains(r#\"\"\"#) {\n+                    return Ok(quote! { loop { #it }});\n+                }\n+            }\n+            _ => {}\n+        };\n+    }\n+\n+    Err(mbe::ExpandError::BindingError(\"Must be a string\".into()))\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -259,4 +291,21 @@ mod tests {\n \n         assert_eq!(expanded, \"\\\"\\\"\");\n     }\n+\n+    #[test]\n+    fn test_compile_error_expand() {\n+        let expanded = expand_builtin_macro(\n+            r#\"\n+        #[rustc_builtin_macro]\n+        macro_rules! compile_error {\n+            ($msg:expr) => ({ /* compiler built-in */ });\n+            ($msg:expr,) => ({ /* compiler built-in */ })\n+        }\n+        compile_error!(\"error!\");\n+\"#,\n+            BuiltinFnLikeExpander::CompileError,\n+        );\n+\n+        assert_eq!(expanded, r#\"loop{\"error!\"}\"#);\n+    }\n }"}, {"sha": "7824489d7f4cd40ae7761a6854539508c82e9b35", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7394b44c870f585eacfeb3036a33471aff49ff8/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7394b44c870f585eacfeb3036a33471aff49ff8/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=a7394b44c870f585eacfeb3036a33471aff49ff8", "patch": "@@ -144,5 +144,6 @@ pub const BOX_TYPE: Name = Name::new_inline_ascii(3, b\"Box\");\n // Builtin Macros\n pub const FILE_MACRO: Name = Name::new_inline_ascii(4, b\"file\");\n pub const COLUMN_MACRO: Name = Name::new_inline_ascii(6, b\"column\");\n+pub const COMPILE_ERROR_MACRO: Name = Name::new_inline_ascii(13, b\"compile_error\");\n pub const LINE_MACRO: Name = Name::new_inline_ascii(4, b\"line\");\n pub const STRINGIFY_MACRO: Name = Name::new_inline_ascii(9, b\"stringify\");"}]}