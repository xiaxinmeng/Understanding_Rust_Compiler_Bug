{"sha": "21386e1355a1aa5b8709d969d7fef878b4602491", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMzg2ZTEzNTVhMWFhNWI4NzA5ZDk2OWQ3ZmVmODc4YjQ2MDI0OTE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-07T10:45:04Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-14T21:52:28Z"}, "message": "Collect the new maps", "tree": {"sha": "fb507e923b1b1b81746e477729198d95c66d60af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb507e923b1b1b81746e477729198d95c66d60af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21386e1355a1aa5b8709d969d7fef878b4602491", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21386e1355a1aa5b8709d969d7fef878b4602491", "html_url": "https://github.com/rust-lang/rust/commit/21386e1355a1aa5b8709d969d7fef878b4602491", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21386e1355a1aa5b8709d969d7fef878b4602491/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13", "html_url": "https://github.com/rust-lang/rust/commit/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13"}], "stats": {"total": 76, "additions": 67, "deletions": 9}, "files": [{"sha": "e379f2aa10b42096dfe4865a68cd9d4bca80595e", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21386e1355a1aa5b8709d969d7fef878b4602491/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21386e1355a1aa5b8709d969d7fef878b4602491/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=21386e1355a1aa5b8709d969d7fef878b4602491", "patch": "@@ -161,6 +161,10 @@ macro_rules! arena_types {\n             [] type_binding: rustc_hir::TypeBinding<$tcx>,\n             [] variant: rustc_hir::Variant<$tcx>,\n             [] where_predicate: rustc_hir::WherePredicate<$tcx>,\n+\n+            // HIR query types\n+            [] hir_owner: rustc::hir::HirOwner<$tcx>,\n+            [] hir_owner_items: rustc::hir::HirOwnerItems<$tcx>,\n         ], $tcx);\n     )\n }"}, {"sha": "a192cf52969fc47d016e8d7b459c15888083990a", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/21386e1355a1aa5b8709d969d7fef878b4602491/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21386e1355a1aa5b8709d969d7fef878b4602491/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=21386e1355a1aa5b8709d969d7fef878b4602491", "patch": "@@ -1,6 +1,8 @@\n+use crate::arena::Arena;\n use crate::dep_graph::{DepGraph, DepKind, DepNode, DepNodeIndex};\n use crate::hir::map::definitions::{self, DefPathHash};\n use crate::hir::map::{Entry, HirEntryMap, Map};\n+use crate::hir::{HirItem, HirOwner, HirOwnerItems};\n use crate::ich::StableHashingContext;\n use crate::middle::cstore::CrateStore;\n use rustc_ast::ast::NodeId;\n@@ -22,12 +24,17 @@ use std::iter::repeat;\n \n /// A visitor that walks over the HIR and collects `Node`s into a HIR map.\n pub(super) struct NodeCollector<'a, 'hir> {\n+    arena: &'hir Arena<'hir>,\n+\n     /// The crate\n     krate: &'hir Crate<'hir>,\n \n     /// Source map\n     source_map: &'a SourceMap,\n \n+    owner_map: FxHashMap<DefIndex, &'hir HirOwner<'hir>>,\n+    owner_items_map: FxHashMap<DefIndex, &'hir mut HirOwnerItems<'hir>>,\n+\n     /// The node map\n     map: HirEntryMap<'hir>,\n     /// The parent of this node\n@@ -112,6 +119,7 @@ fn upstream_crates(cstore: &dyn CrateStore) -> Vec<(Symbol, Fingerprint, Svh)> {\n impl<'a, 'hir> NodeCollector<'a, 'hir> {\n     pub(super) fn root(\n         sess: &'a Session,\n+        arena: &'hir Arena<'hir>,\n         krate: &'hir Crate<'hir>,\n         dep_graph: &'a DepGraph,\n         definitions: &'a definitions::Definitions,\n@@ -161,6 +169,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         }\n \n         let mut collector = NodeCollector {\n+            arena,\n             krate,\n             source_map: sess.source_map(),\n             map: IndexVec::from_elem_n(IndexVec::new(), definitions.def_index_count()),\n@@ -174,6 +183,8 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             hir_to_node_id,\n             hcx,\n             hir_body_nodes,\n+            owner_map: FxHashMap::default(),\n+            owner_items_map: FxHashMap::default(),\n         };\n         collector.insert_entry(\n             hir::CRATE_HIR_ID,\n@@ -192,7 +203,12 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         crate_disambiguator: CrateDisambiguator,\n         cstore: &dyn CrateStore,\n         commandline_args_hash: u64,\n-    ) -> (HirEntryMap<'hir>, Svh) {\n+    ) -> (\n+        HirEntryMap<'hir>,\n+        FxHashMap<DefIndex, &'hir HirOwner<'hir>>,\n+        FxHashMap<DefIndex, &'hir mut HirOwnerItems<'hir>>,\n+        Svh,\n+    ) {\n         self.hir_body_nodes.sort_unstable_by_key(|bn| bn.0);\n \n         let node_hashes = self.hir_body_nodes.iter().fold(\n@@ -229,13 +245,36 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         let crate_hash: Fingerprint = stable_hasher.finish();\n \n         let svh = Svh::new(crate_hash.to_smaller_hash());\n-        (self.map, svh)\n+        (self.map, self.owner_map, self.owner_items_map, svh)\n     }\n \n     fn insert_entry(&mut self, id: HirId, entry: Entry<'hir>) {\n+        let i = id.local_id.as_u32() as usize;\n+\n+        let owner = HirOwner { parent: entry.parent, node: entry.node };\n+\n+        let arena = self.arena;\n+\n+        let items = self.owner_items_map.entry(id.owner).or_insert_with(|| {\n+            arena.alloc(HirOwnerItems { items: IndexVec::new(), bodies: FxHashMap::default() })\n+        });\n+\n+        if i == 0 {\n+            self.owner_map.insert(id.owner, self.arena.alloc(owner));\n+        // FIXME: feature(impl_trait_in_bindings) broken and trigger this assert\n+        //assert!(self.owner_map.insert(id.owner, self.arena.alloc(owner)).is_none());\n+        } else {\n+            let len = items.items.len();\n+            if i >= len {\n+                items.items.extend(repeat(None).take(i - len + 1));\n+            }\n+            assert_eq!(entry.parent.owner, id.owner);\n+            items.items[id.local_id] =\n+                Some(HirItem { parent: entry.parent.local_id, node: entry.node });\n+        }\n+\n         debug!(\"hir_map: {:?} => {:?}\", id, entry);\n         let local_map = &mut self.map[id.owner];\n-        let i = id.local_id.as_u32() as usize;\n         let len = local_map.len();\n         if i >= len {\n             local_map.extend(repeat(None).take(i - len + 1));"}, {"sha": "16b4047bd1520c898ac9512edc17b4805eeafc3c", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/21386e1355a1aa5b8709d969d7fef878b4602491/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21386e1355a1aa5b8709d969d7fef878b4602491/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=21386e1355a1aa5b8709d969d7fef878b4602491", "patch": "@@ -3,7 +3,9 @@ pub use self::definitions::{\n     DefKey, DefPath, DefPathData, DefPathHash, Definitions, DisambiguatedDefPathData,\n };\n \n+use crate::arena::Arena;\n use crate::dep_graph::{DepGraph, DepKind, DepNode, DepNodeIndex};\n+use crate::hir::{HirOwner, HirOwnerItems};\n use crate::middle::cstore::CrateStoreDyn;\n use crate::ty::query::Providers;\n use rustc_ast::ast::{self, Name, NodeId};\n@@ -145,6 +147,9 @@ pub struct Map<'hir> {\n     /// The SVH of the local crate.\n     pub crate_hash: Svh,\n \n+    pub(super) owner_map: FxHashMap<DefIndex, &'hir HirOwner<'hir>>,\n+    pub(super) owner_items_map: FxHashMap<DefIndex, &'hir HirOwnerItems<'hir>>,\n+\n     map: HirEntryMap<'hir>,\n \n     definitions: Definitions,\n@@ -1201,6 +1206,7 @@ impl Named for ImplItem<'_> {\n \n pub fn map_crate<'hir>(\n     sess: &rustc_session::Session,\n+    arena: &'hir Arena<'hir>,\n     cstore: &CrateStoreDyn,\n     krate: &'hir Crate<'hir>,\n     dep_graph: DepGraph,\n@@ -1215,19 +1221,28 @@ pub fn map_crate<'hir>(\n         .map(|(node_id, &hir_id)| (hir_id, node_id))\n         .collect();\n \n-    let (map, crate_hash) = {\n+    let (map, owner_map, owner_items_map, crate_hash) = {\n         let hcx = crate::ich::StableHashingContext::new(sess, krate, &definitions, cstore);\n \n         let mut collector =\n-            NodeCollector::root(sess, krate, &dep_graph, &definitions, &hir_to_node_id, hcx);\n+            NodeCollector::root(sess, arena, krate, &dep_graph, &definitions, &hir_to_node_id, hcx);\n         intravisit::walk_crate(&mut collector, krate);\n \n         let crate_disambiguator = sess.local_crate_disambiguator();\n         let cmdline_args = sess.opts.dep_tracking_hash();\n         collector.finalize_and_compute_crate_hash(crate_disambiguator, cstore, cmdline_args)\n     };\n \n-    let map = Map { krate, dep_graph, crate_hash, map, hir_to_node_id, definitions };\n+    let map = Map {\n+        krate,\n+        dep_graph,\n+        crate_hash,\n+        map,\n+        owner_map,\n+        owner_items_map: owner_items_map.into_iter().map(|(k, v)| (k, &*v)).collect(),\n+        hir_to_node_id,\n+        definitions,\n+    };\n \n     sess.time(\"validate_HIR_map\", || {\n         hir_id_validator::check_crate(&map, sess);"}, {"sha": "57af8d250b310ffec3285b7855c1f6b524fd5eb4", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21386e1355a1aa5b8709d969d7fef878b4602491/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21386e1355a1aa5b8709d969d7fef878b4602491/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=21386e1355a1aa5b8709d969d7fef878b4602491", "patch": "@@ -24,15 +24,15 @@ pub struct HirOwner<'tcx> {\n     node: Node<'tcx>,\n }\n \n-#[derive(HashStable)]\n+#[derive(HashStable, Clone)]\n pub struct HirItem<'tcx> {\n     parent: ItemLocalId,\n     node: Node<'tcx>,\n }\n \n #[derive(HashStable)]\n pub struct HirOwnerItems<'tcx> {\n-    owner: &'tcx HirOwner<'tcx>,\n+    //owner: &'tcx HirOwner<'tcx>,\n     items: IndexVec<ItemLocalId, Option<HirItem<'tcx>>>,\n     bodies: FxHashMap<ItemLocalId, &'tcx Body<'tcx>>,\n }"}, {"sha": "7035b956c9d8544137facbfe62e12dcab5177973", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21386e1355a1aa5b8709d969d7fef878b4602491/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21386e1355a1aa5b8709d969d7fef878b4602491/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=21386e1355a1aa5b8709d969d7fef878b4602491", "patch": "@@ -716,7 +716,7 @@ pub fn create_global_ctxt<'tcx>(\n     let defs = mem::take(&mut resolver_outputs.definitions);\n \n     // Construct the HIR map.\n-    let hir_map = map::map_crate(sess, &*resolver_outputs.cstore, krate, dep_graph, defs);\n+    let hir_map = map::map_crate(sess, &**arena, &*resolver_outputs.cstore, krate, dep_graph, defs);\n \n     let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess);\n "}]}