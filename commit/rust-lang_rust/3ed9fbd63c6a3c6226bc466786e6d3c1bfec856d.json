{"sha": "3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZDlmYmQ2M2M2YTNjNjIyNmJjNDY2Nzg2ZTZkM2MxYmZlYzg1NmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-30T02:37:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-30T06:07:49Z"}, "message": "impls of traits cannot define methods on the anonymous trait", "tree": {"sha": "3552c8b37426ce0763648cb056f37f03a7b777ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3552c8b37426ce0763648cb056f37f03a7b777ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "html_url": "https://github.com/rust-lang/rust/commit/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78ee821154ba6034a86397d8540fec00c94e9282", "url": "https://api.github.com/repos/rust-lang/rust/commits/78ee821154ba6034a86397d8540fec00c94e9282", "html_url": "https://github.com/rust-lang/rust/commit/78ee821154ba6034a86397d8540fec00c94e9282"}], "stats": {"total": 171, "additions": 87, "deletions": 84}, "files": [{"sha": "37491ae0b714d611c91c2bad1bb7b176537db511", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -37,6 +37,7 @@ pub trait Times {\n pub trait CopyableIter<A:Copy> {\n     pure fn filter_to_vec(pred: fn(a: A) -> bool) -> ~[A];\n     pure fn map_to_vec<B>(op: fn(v: A) -> B) -> ~[B];\n+    pure fn flat_map_to_vec<B:Copy,IB: BaseIter<B>>(op: fn(A) -> IB) -> ~[B];\n     pure fn to_vec() -> ~[A];\n     pure fn find(p: fn(a: A) -> bool) -> Option<A>;\n }"}, {"sha": "a9a99565cf13990832ce2a7c9c76f116f60eb074", "filename": "src/libcore/path.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -44,6 +44,9 @@ pub trait GenericPath {\n     pure fn with_filestem((&str)) -> self;\n     pure fn with_filetype((&str)) -> self;\n \n+    pure fn dir_path() -> self;\n+    pure fn file_path() -> self;\n+\n     pure fn push((&str)) -> self;\n     pure fn push_rel((&self)) -> self;\n     pure fn push_many((&[~str])) -> self;"}, {"sha": "a06564a470e67f796586edf64aa6eb3e20c93ce3", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -811,13 +811,22 @@ pub struct RecvPacketBuffered<T: Send, Tbuffer: Send> {\n     }\n }\n \n-impl<T: Send, Tbuffer: Send> RecvPacketBuffered<T, Tbuffer> : Selectable {\n+impl<T: Send, Tbuffer: Send> RecvPacketBuffered<T, Tbuffer> {\n     fn unwrap() -> *Packet<T> {\n         let mut p = None;\n         p <-> self.p;\n         option::unwrap(move p)\n     }\n \n+    fn reuse_buffer() -> BufferResource<Tbuffer> {\n+        //error!(\"recv reuse_buffer\");\n+        let mut tmp = None;\n+        tmp <-> self.buffer;\n+        option::unwrap(move tmp)\n+    }\n+}\n+\n+impl<T: Send, Tbuffer: Send> RecvPacketBuffered<T, Tbuffer> : Selectable {\n     pure fn header() -> *PacketHeader {\n         match self.p {\n           Some(packet) => unsafe {\n@@ -829,13 +838,6 @@ impl<T: Send, Tbuffer: Send> RecvPacketBuffered<T, Tbuffer> : Selectable {\n           None => fail ~\"packet already consumed\"\n         }\n     }\n-\n-    fn reuse_buffer() -> BufferResource<Tbuffer> {\n-        //error!(\"recv reuse_buffer\");\n-        let mut tmp = None;\n-        tmp <-> self.buffer;\n-        option::unwrap(move tmp)\n-    }\n }\n \n pub fn RecvPacketBuffered<T: Send, Tbuffer: Send>(p: *Packet<T>)\n@@ -1046,7 +1048,7 @@ pub fn PortSet<T: Send>() -> PortSet<T>{\n     }\n }\n \n-impl<T: Send> PortSet<T> : Recv<T> {\n+impl<T: Send> PortSet<T> {\n \n     fn add(port: pipes::Port<T>) {\n         self.ports.push(move port)\n@@ -1057,6 +1059,9 @@ impl<T: Send> PortSet<T> : Recv<T> {\n         self.add(move po);\n         move ch\n     }\n+}\n+\n+impl<T: Send> PortSet<T> : Recv<T> {\n \n     fn try_recv() -> Option<T> {\n         let mut result = None;"}, {"sha": "d9b18947779fb367c71fffda6637907d0cfba696", "filename": "src/libcore/reflect.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibcore%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibcore%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Freflect.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -34,9 +34,7 @@ pub fn MovePtrAdaptor<V: TyVisitor MovePtr>(v: V) -> MovePtrAdaptor<V> {\n     MovePtrAdaptor { inner: move v }\n }\n \n-/// Abstract type-directed pointer-movement using the MovePtr trait\n-impl<V: TyVisitor MovePtr> MovePtrAdaptor<V>: TyVisitor {\n-\n+impl<V: TyVisitor MovePtr> MovePtrAdaptor<V> {\n     #[inline(always)]\n     fn bump(sz: uint) {\n       do self.inner.move_ptr() |p| {\n@@ -60,7 +58,10 @@ impl<V: TyVisitor MovePtr> MovePtrAdaptor<V>: TyVisitor {\n     fn bump_past<T>() {\n         self.bump(sys::size_of::<T>());\n     }\n+}\n \n+/// Abstract type-directed pointer-movement using the MovePtr trait\n+impl<V: TyVisitor MovePtr> MovePtrAdaptor<V>: TyVisitor {\n     fn visit_bot() -> bool {\n         self.align_to::<()>();\n         if ! self.inner.visit_bot() { return false; }"}, {"sha": "8ee50986a00dcbc25b922c3d8a6e4c35d0c016c5", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -72,6 +72,10 @@ trait tr {\n     fn tr(xcx: extended_decode_ctxt) -> self;\n }\n \n+trait tr_intern {\n+    fn tr_intern(xcx: extended_decode_ctxt) -> ast::def_id;\n+}\n+\n // ______________________________________________________________________\n // Top-level methods.\n \n@@ -168,13 +172,16 @@ impl extended_decode_ctxt {\n     }\n }\n \n+impl ast::def_id: tr_intern {\n+    fn tr_intern(xcx: extended_decode_ctxt) -> ast::def_id {\n+        xcx.tr_intern_def_id(self)\n+    }\n+}\n+\n impl ast::def_id: tr {\n     fn tr(xcx: extended_decode_ctxt) -> ast::def_id {\n         xcx.tr_def_id(self)\n     }\n-    fn tr_intern(xcx: extended_decode_ctxt) -> ast::def_id {\n-        xcx.tr_intern_def_id(self)\n-    }\n }\n \n impl span: tr {"}, {"sha": "7be2f6bb9d3b4a6998b017eb32688ea9ad6d8358", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -549,7 +549,6 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n }\n \n impl @fn_ctxt: ast_conv {\n-    fn infcx() -> infer::infer_ctxt { self.inh.infcx }\n     fn tcx() -> ty::ctxt { self.ccx.tcx }\n     fn ccx() -> @crate_ctxt { self.ccx }\n \n@@ -563,6 +562,7 @@ impl @fn_ctxt: ast_conv {\n }\n \n impl @fn_ctxt {\n+    fn infcx() -> infer::infer_ctxt { self.inh.infcx }\n     fn search_in_scope_regions(br: ty::bound_region)\n         -> Result<ty::Region, ~str>\n     {"}, {"sha": "9dda2da458a450a522f3774f2056562dd62d7176", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -465,22 +465,27 @@ fn check_methods_against_trait(ccx: @crate_ctxt,\n         }\n     }\n \n-    for vec::each(*ty::trait_methods(tcx, did)) |trait_m| {\n-        match vec::find(impl_ms, |impl_m| trait_m.ident == impl_m.mty.ident) {\n-            Some(ref cm) => {\n+    // Check that each method we impl is a method on the trait\n+    // Trait methods we don't implement must be default methods, but if not\n+    // we'll catch it in coherence\n+    let trait_ms = ty::trait_methods(tcx, did);\n+    for impl_ms.each |impl_m| {\n+        match trait_ms.find(|trait_m| trait_m.ident == impl_m.mty.ident) {\n+            Some(ref trait_m) => {\n                 compare_impl_method(\n-                    ccx.tcx, vec::len(tps), cm, trait_m,\n+                    ccx.tcx, tps.len(), impl_m, trait_m,\n                     &tpt.substs, selfty);\n             }\n             None => {\n-                // If we couldn't find an implementation for trait_m in\n-                // the impl, then either this method has a default\n-                // implementation or we're using the trait-provided\n-                // version. Either way, we handle this later, during the\n-                // coherence phase.\n+                // This method is not part of the trait\n+                tcx.sess.span_err(\n+                    impl_m.span,\n+                    fmt!(\"method `%s` is not a member of trait `%s`\",\n+                         tcx.sess.str_of(impl_m.mty.ident),\n+                         path_to_str(a_trait_ty.path, tcx.sess.intr())));\n             }\n-        } // match\n-    } // |trait_m|\n+        }\n+    }\n } // fn\n \n fn convert_field(ccx: @crate_ctxt,"}, {"sha": "80fcecb5d9e4cac73388cf50047950c8c4bd6d4f", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -7,6 +7,11 @@ fn macros() { include!(\"macros.rs\"); } // FIXME(#3114): Macro import/export.\n \n enum Lub = combine_fields;  // \"subtype\", \"subregion\" etc\n \n+impl Lub {\n+    fn bot_ty(b: ty::t) -> cres<ty::t> { Ok(b) }\n+    fn ty_bot(b: ty::t) -> cres<ty::t> { self.bot_ty(b) } // commutative\n+}\n+\n impl Lub: combine {\n     fn infcx() -> infer_ctxt { self.infcx }\n     fn tag() -> ~str { ~\"lub\" }\n@@ -16,9 +21,6 @@ impl Lub: combine {\n     fn lub() -> Lub { Lub(*self) }\n     fn glb() -> Glb { Glb(*self) }\n \n-    fn bot_ty(b: ty::t) -> cres<ty::t> { Ok(b) }\n-    fn ty_bot(b: ty::t) -> cres<ty::t> { self.bot_ty(b) } // commutative\n-\n     fn mts(a: ty::mt, b: ty::mt) -> cres<ty::mt> {\n         let tcx = self.infcx.tcx;\n "}, {"sha": "b1909bfb067a299380b22f443e54ee788828c638", "filename": "src/libstd/map.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -390,7 +390,7 @@ pub mod chained {\n         }\n     }\n \n-    impl<K:Eq IterBytes Hash Copy ToStr, V: ToStr Copy> T<K, V>: ToStr {\n+    impl<K:Eq IterBytes Hash Copy ToStr, V: ToStr Copy> T<K, V> {\n         fn to_writer(wr: io::Writer) {\n             if self.count == 0u {\n                 wr.write_str(~\"{}\");\n@@ -410,7 +410,9 @@ pub mod chained {\n             };\n             wr.write_str(~\" }\");\n         }\n+    }\n \n+    impl<K:Eq IterBytes Hash Copy ToStr, V: ToStr Copy> T<K, V>: ToStr {\n         pure fn to_str() -> ~str unsafe {\n             // Meh -- this should be safe\n             do io::with_str_writer |wr| { self.to_writer(wr) }"}, {"sha": "966cbbb6c145dc9b6188e09bbafa395a7e2fbbba", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -824,9 +824,6 @@ impl TcpSocketBuf: io::Reader {\n             bytes[0] as int\n         }\n     }\n-    fn unread_byte(amt: int) {\n-        self.data.buf.unshift(amt as u8);\n-    }\n     fn eof() -> bool {\n         self.end_of_stream\n     }"}, {"sha": "dd773d25687e13791be2ab54a30ac49d9eb9e70a", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -101,7 +101,6 @@ impl<V: Copy> SmallIntMap<V>: map::Map<uint, V> {\n     }\n     pure fn get(key: uint) -> V { get(self, key) }\n     pure fn find(key: uint) -> Option<V> { find(self, key) }\n-    fn rehash() { fail }\n \n     fn update_with_key(key: uint, val: V, ff: fn(uint, V, V) -> V) -> bool {\n         match self.find(key) {"}, {"sha": "e9bb42aa2a13b6191df32f34e9ab92993cecbcca", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -79,7 +79,10 @@ trait ext_ctxt_ast_builder {\n     fn stmt_let(ident: ident, e: @ast::expr) -> @ast::stmt;\n     fn stmt_expr(e: @ast::expr) -> @ast::stmt;\n     fn block_expr(b: ast::blk) -> @ast::expr;\n+    fn move_expr(e: @ast::expr) -> @ast::expr;\n     fn ty_option(ty: @ast::Ty) -> @ast::Ty;\n+    fn ty_infer() -> @ast::Ty;\n+    fn ty_nil_ast_builder() -> @ast::Ty;\n }\n \n impl ext_ctxt: ext_ctxt_ast_builder {"}, {"sha": "9f5c722afc3c548256e6cc7bf34ebc3309511d50", "filename": "src/libsyntax/ext/pipes/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -38,7 +38,6 @@ use ext::base::ext_ctxt;\n use ast::tt_delim;\n use parse::lexer::{new_tt_reader, reader};\n use parse::parser::Parser;\n-use parse::common::parser_common;\n \n use pipes::parse_proto::proto_parser;\n "}, {"sha": "9db2c1e6733f7e8cf370db6800907e1fb9785977", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -8,6 +8,7 @@ use pipec::*;\n trait proto_parser {\n     fn parse_proto(id: ~str) -> protocol;\n     fn parse_state(proto: protocol);\n+    fn parse_message(state: state);\n }\n \n impl parser::Parser: proto_parser {"}, {"sha": "558e7d01259e359c7b003742eb105ac9fa84d9ff", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -24,6 +24,7 @@ mod syntax {\n \n trait gen_send {\n     fn gen_send(cx: ext_ctxt, try: bool) -> @ast::item;\n+    fn to_ty(cx: ext_ctxt) -> @ast::Ty;\n }\n \n trait to_type_decls {\n@@ -34,6 +35,10 @@ trait to_type_decls {\n trait gen_init {\n     fn gen_init(cx: ext_ctxt) -> @ast::item;\n     fn compile(cx: ext_ctxt) -> @ast::item;\n+    fn buffer_ty_path(cx: ext_ctxt) -> @ast::Ty;\n+    fn gen_buffer_type(cx: ext_ctxt) -> @ast::item;\n+    fn gen_buffer_init(ext_cx: ext_ctxt) -> @ast::expr;\n+    fn gen_init_bounded(ext_cx: ext_ctxt) -> @ast::expr;\n }\n \n impl message: gen_send {"}, {"sha": "fb0d4bb128eba94ff1d73e15afd6749228babb65", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -3,7 +3,6 @@ use ext::base::ext_ctxt;\n use ast::tt_delim;\n use parse::lexer::{new_tt_reader, reader};\n use parse::parser::Parser;\n-use parse::common::parser_common;\n \n fn expand_trace_macros(cx: ext_ctxt, sp: span,\n                        tt: ~[ast::token_tree]) -> base::mac_result"}, {"sha": "54ac776fb326fe74fe75fea51353a76dee8cdaa2", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -22,41 +22,7 @@ fn token_to_str(reader: reader, ++token: token::Token) -> ~str {\n     token::to_str(reader.interner(), token)\n }\n \n-trait parser_common {\n-    fn unexpected_last(t: token::Token) -> !;\n-    fn unexpected() -> !;\n-    fn expect(t: token::Token);\n-    fn parse_ident() -> ast::ident;\n-    fn parse_path_list_ident() -> ast::path_list_ident;\n-    fn parse_value_ident() -> ast::ident;\n-    fn eat(tok: token::Token) -> bool;\n-    // A sanity check that the word we are asking for is a known keyword\n-    fn require_keyword(word: ~str);\n-    fn token_is_keyword(word: ~str, ++tok: token::Token) -> bool;\n-    fn is_keyword(word: ~str) -> bool;\n-    fn is_any_keyword(tok: token::Token) -> bool;\n-    fn eat_keyword(word: ~str) -> bool;\n-    fn expect_keyword(word: ~str);\n-    fn expect_gt();\n-    fn parse_seq_to_before_gt<T: Copy>(sep: Option<token::Token>,\n-                                       f: fn(Parser) -> T) -> ~[T];\n-    fn parse_seq_to_gt<T: Copy>(sep: Option<token::Token>,\n-                                f: fn(Parser) -> T) -> ~[T];\n-    fn parse_seq_lt_gt<T: Copy>(sep: Option<token::Token>,\n-                                f: fn(Parser) -> T) -> spanned<~[T]>;\n-    fn parse_seq_to_end<T: Copy>(ket: token::Token, sep: seq_sep,\n-                                 f: fn(Parser) -> T) -> ~[T];\n-    fn parse_seq_to_before_end<T: Copy>(ket: token::Token, sep: seq_sep,\n-                                        f: fn(Parser) -> T) -> ~[T];\n-    fn parse_unspanned_seq<T: Copy>(bra: token::Token,\n-                                    ket: token::Token,\n-                                    sep: seq_sep,\n-                                    f: fn(Parser) -> T) -> ~[T];\n-    fn parse_seq<T: Copy>(bra: token::Token, ket: token::Token, sep: seq_sep,\n-                          f: fn(Parser) -> T) -> spanned<~[T]>;\n-}\n-\n-impl Parser: parser_common {\n+impl Parser {\n     fn unexpected_last(t: token::Token) -> ! {\n         self.span_fatal(\n             copy self.last_span,"}, {"sha": "c1afc43205cbe14a906c467be904393c94d1c20c", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -27,7 +27,6 @@ export parse_from_source_str;\n \n use parser::Parser;\n use attr::parser_attr;\n-use common::parser_common;\n use ast::node_id;\n use util::interner;\n use diagnostic::{span_handler, mk_span_handler, mk_handler, emitter};"}, {"sha": "1407b56336c38f646281cbf590be88e95a05a1bd", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -52,12 +52,7 @@ impl ObsoleteSyntax: to_bytes::IterBytes {\n     }\n }\n \n-pub trait ObsoleteReporter {\n-    fn obsolete(sp: span, kind: ObsoleteSyntax);\n-    fn obsolete_expr(sp: span, kind: ObsoleteSyntax) -> @expr;\n-}\n-\n-impl Parser : ObsoleteReporter {\n+impl Parser {\n     /// Reports an obsolete syntax non-fatal error.\n     fn obsolete(sp: span, kind: ObsoleteSyntax) {\n         let (kind_str, desc) = match kind {"}, {"sha": "d8fd58b3d50819984fdeba4169e035f894c3100c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -16,7 +16,7 @@ use common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed,\n use dvec::DVec;\n use vec::{push};\n use obsolete::{\n-    ObsoleteReporter, ObsoleteSyntax,\n+    ObsoleteSyntax,\n     ObsoleteLowerCaseKindBounds, ObsoleteLet,\n     ObsoleteFieldTerminator, ObsoleteStructCtor,\n     ObsoleteWith, ObsoleteClassMethod, ObsoleteClassTraits,"}, {"sha": "551c0bd2e3686acc7dd32a0cd02e8bf0e59ca962", "filename": "src/test/compile-fail/issue-3953.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -9,9 +9,11 @@ trait Hahaha: Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, Eq, //\n \n enum Lol = int;\n \n-pub impl Lol: Hahaha {\n-    pure fn eq(other: &Lol) -> bool { *self != **other }\n-    pure fn ne(other: &Lol) -> bool { *self == **other }\n+pub impl Lol: Hahaha { }\n+\n+impl Lol: Eq {\n+    pure fn eq(&self, other: &Lol) -> bool { **self != **other }\n+    pure fn ne(&self, other: &Lol) -> bool { **self == **other }\n }\n \n fn main() {"}, {"sha": "b65b0d9d4accce8f8de1a0565f416e778d83362a", "filename": "src/test/compile-fail/trait-impl-can-not-have-untraitful-methods.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Ftest%2Fcompile-fail%2Ftrait-impl-can-not-have-untraitful-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Ftest%2Fcompile-fail%2Ftrait-impl-can-not-have-untraitful-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-can-not-have-untraitful-methods.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -0,0 +1,7 @@\n+trait A { }\n+\n+impl int: A {\n+    fn foo() { } //~ ERROR method `foo` is not a member of trait `A`\n+}\n+\n+fn main() { }\n\\ No newline at end of file"}, {"sha": "733679efc61578aefbc1b68f19dd175b57db5d97", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=3ed9fbd63c6a3c6226bc466786e6d3c1bfec856d", "patch": "@@ -21,7 +21,8 @@ fn align(size: uint, align: uint) -> uint {\n enum ptr_visit_adaptor<V: TyVisitor movable_ptr> = {\n     inner: V\n };\n-impl<V: TyVisitor movable_ptr> ptr_visit_adaptor<V>: TyVisitor {\n+\n+impl<V: TyVisitor movable_ptr> ptr_visit_adaptor<V> {\n \n     #[inline(always)]\n     fn bump(sz: uint) {\n@@ -47,6 +48,10 @@ impl<V: TyVisitor movable_ptr> ptr_visit_adaptor<V>: TyVisitor {\n         self.bump(sys::size_of::<T>());\n     }\n \n+}\n+\n+impl<V: TyVisitor movable_ptr> ptr_visit_adaptor<V>: TyVisitor {\n+\n     fn visit_bot() -> bool {\n         self.align_to::<()>();\n         if ! self.inner.visit_bot() { return false; }"}]}