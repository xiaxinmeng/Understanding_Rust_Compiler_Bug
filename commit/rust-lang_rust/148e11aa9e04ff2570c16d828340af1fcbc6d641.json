{"sha": "148e11aa9e04ff2570c16d828340af1fcbc6d641", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0OGUxMWFhOWUwNGZmMjU3MGMxNmQ4MjgzNDBhZjFmY2JjNmQ2NDE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-11T10:34:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-11T10:34:22Z"}, "message": "prepare to move run/debug splitting to handlers", "tree": {"sha": "fe2e4b68cc85b5e6212afb22ed9d886e0581bb08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe2e4b68cc85b5e6212afb22ed9d886e0581bb08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/148e11aa9e04ff2570c16d828340af1fcbc6d641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/148e11aa9e04ff2570c16d828340af1fcbc6d641", "html_url": "https://github.com/rust-lang/rust/commit/148e11aa9e04ff2570c16d828340af1fcbc6d641", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/148e11aa9e04ff2570c16d828340af1fcbc6d641/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "325140a165e1081432cb758fc4114a3eff0af490", "url": "https://api.github.com/repos/rust-lang/rust/commits/325140a165e1081432cb758fc4114a3eff0af490", "html_url": "https://github.com/rust-lang/rust/commit/325140a165e1081432cb758fc4114a3eff0af490"}], "stats": {"total": 82, "additions": 50, "deletions": 32}, "files": [{"sha": "1c0a0b271921b591dc23f90635c59a258fa9922b", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/148e11aa9e04ff2570c16d828340af1fcbc6d641/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148e11aa9e04ff2570c16d828340af1fcbc6d641/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=148e11aa9e04ff2570c16d828340af1fcbc6d641", "patch": "@@ -26,7 +26,7 @@ use lsp_types::{\n };\n use project_model::TargetKind;\n use serde_json::json;\n-use stdx::format_to;\n+use stdx::{format_to, never};\n use syntax::{algo, ast, AstNode, TextRange, TextSize};\n \n use crate::{\n@@ -1133,41 +1133,53 @@ pub(crate) fn handle_code_lens(\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let cargo_target_spec = CargoTargetSpec::for_file(&snap, file_id)?;\n \n-    let lenses = snap\n-        .analysis\n-        .annotations(\n-            &AnnotationConfig {\n-                binary_target: cargo_target_spec\n-                    .map(|spec| {\n-                        matches!(\n-                            spec.target_kind,\n-                            TargetKind::Bin | TargetKind::Example | TargetKind::Test\n-                        )\n-                    })\n-                    .unwrap_or(false),\n-                annotate_runnables: lens_config.runnable(),\n-                annotate_impls: lens_config.implementations,\n-                annotate_references: lens_config.refs,\n-                annotate_method_references: lens_config.method_refs,\n-                run: lens_config.run,\n-                debug: lens_config.debug,\n-            },\n-            file_id,\n-        )?\n-        .into_iter()\n-        .map(|annotation| to_proto::code_lens(&snap, annotation).unwrap())\n-        .collect();\n+    let annotations = snap.analysis.annotations(\n+        &AnnotationConfig {\n+            binary_target: cargo_target_spec\n+                .map(|spec| {\n+                    matches!(\n+                        spec.target_kind,\n+                        TargetKind::Bin | TargetKind::Example | TargetKind::Test\n+                    )\n+                })\n+                .unwrap_or(false),\n+            annotate_runnables: lens_config.runnable(),\n+            annotate_impls: lens_config.implementations,\n+            annotate_references: lens_config.refs,\n+            annotate_method_references: lens_config.method_refs,\n+            run: lens_config.run,\n+            debug: lens_config.debug,\n+        },\n+        file_id,\n+    )?;\n \n-    Ok(Some(lenses))\n+    let mut res = Vec::new();\n+    for a in annotations {\n+        to_proto::code_lens(&mut res, &snap, a)?;\n+    }\n+\n+    Ok(Some(res))\n }\n \n pub(crate) fn handle_code_lens_resolve(\n     snap: GlobalStateSnapshot,\n     code_lens: CodeLens,\n ) -> Result<CodeLens> {\n-    let annotation = from_proto::annotation(&snap, code_lens)?;\n+    let annotation = from_proto::annotation(&snap, code_lens.clone())?;\n+    let annotation = snap.analysis.resolve_annotation(annotation)?;\n+\n+    let mut acc = Vec::new();\n+    to_proto::code_lens(&mut acc, &snap, annotation)?;\n \n-    to_proto::code_lens(&snap, snap.analysis.resolve_annotation(annotation)?)\n+    let res = match acc.pop() {\n+        Some(it) if acc.is_empty() => it,\n+        _ => {\n+            never!();\n+            code_lens\n+        }\n+    };\n+\n+    Ok(res)\n }\n \n pub(crate) fn handle_document_highlight("}, {"sha": "3f565e7cdcf419fcaa6089d60b4a250a168713ea", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/148e11aa9e04ff2570c16d828340af1fcbc6d641/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148e11aa9e04ff2570c16d828340af1fcbc6d641/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=148e11aa9e04ff2570c16d828340af1fcbc6d641", "patch": "@@ -988,9 +988,10 @@ pub(crate) fn runnable(\n }\n \n pub(crate) fn code_lens(\n+    acc: &mut Vec<lsp_types::CodeLens>,\n     snap: &GlobalStateSnapshot,\n     annotation: Annotation,\n-) -> Result<lsp_types::CodeLens> {\n+) -> Result<()> {\n     match annotation.kind {\n         AnnotationKind::Runnable { debug, runnable: run } => {\n             let line_index = snap.file_line_index(run.nav.file_id)?;\n@@ -1002,7 +1003,11 @@ pub(crate) fn code_lens(\n             let command =\n                 if debug { command::debug_single(&r) } else { command::run_single(&r, &title) };\n \n-            Ok(lsp_types::CodeLens { range: annotation_range, command: Some(command), data: None })\n+            acc.push(lsp_types::CodeLens {\n+                range: annotation_range,\n+                command: Some(command),\n+                data: None,\n+            })\n         }\n         AnnotationKind::HasImpls { position: file_position, data } => {\n             let line_index = snap.file_line_index(file_position.file_id)?;\n@@ -1041,7 +1046,7 @@ pub(crate) fn code_lens(\n                 )\n             });\n \n-            Ok(lsp_types::CodeLens {\n+            acc.push(lsp_types::CodeLens {\n                 range: annotation_range,\n                 command,\n                 data: Some(to_value(lsp_ext::CodeLensResolveData::Impls(goto_params)).unwrap()),\n@@ -1070,13 +1075,14 @@ pub(crate) fn code_lens(\n                 )\n             });\n \n-            Ok(lsp_types::CodeLens {\n+            acc.push(lsp_types::CodeLens {\n                 range: annotation_range,\n                 command,\n                 data: Some(to_value(lsp_ext::CodeLensResolveData::References(doc_pos)).unwrap()),\n             })\n         }\n     }\n+    Ok(())\n }\n \n pub(crate) mod command {"}]}