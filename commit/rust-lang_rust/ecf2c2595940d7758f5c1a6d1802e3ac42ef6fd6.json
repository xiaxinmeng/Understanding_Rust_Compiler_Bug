{"sha": "ecf2c2595940d7758f5c1a6d1802e3ac42ef6fd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZjJjMjU5NTk0MGQ3NzU4ZjVjMWE2ZDE4MDJlM2FjNDJlZjZmZDY=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-12-11T08:43:04Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-12-11T08:43:04Z"}, "message": "Do not include generics in suggestion to qualify enum variants", "tree": {"sha": "73f43ec7dbb7fc401263ca5c0131c1e4e773cf88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73f43ec7dbb7fc401263ca5c0131c1e4e773cf88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecf2c2595940d7758f5c1a6d1802e3ac42ef6fd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf2c2595940d7758f5c1a6d1802e3ac42ef6fd6", "html_url": "https://github.com/rust-lang/rust/commit/ecf2c2595940d7758f5c1a6d1802e3ac42ef6fd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecf2c2595940d7758f5c1a6d1802e3ac42ef6fd6/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "672a3d93e34ad52529f3bdedfd26d52d67824ccd", "url": "https://api.github.com/repos/rust-lang/rust/commits/672a3d93e34ad52529f3bdedfd26d52d67824ccd", "html_url": "https://github.com/rust-lang/rust/commit/672a3d93e34ad52529f3bdedfd26d52d67824ccd"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "ba4bdccb20b805583d50c4eaa19adc45fac2067c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecf2c2595940d7758f5c1a6d1802e3ac42ef6fd6/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf2c2595940d7758f5c1a6d1802e3ac42ef6fd6/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=ecf2c2595940d7758f5c1a6d1802e3ac42ef6fd6", "patch": "@@ -250,14 +250,15 @@ fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat)\n                             variant.name == ident.node.unhygienic_name\n                                 && variant.kind() == VariantKind::Unit\n                         ) {\n+                            let ty_path = cx.tcx.item_path_str(edef.did);\n                             span_warn!(cx.tcx.sess, p.span, E0170,\n                                 \"pattern binding `{}` is named the same as one \\\n                                  of the variants of the type `{}`\",\n-                                ident.node, pat_ty);\n+                                ident.node, ty_path);\n                             fileline_help!(cx.tcx.sess, p.span,\n                                 \"if you meant to match on a variant, \\\n                                  consider making the path in the pattern qualified: `{}::{}`\",\n-                                pat_ty, ident.node);\n+                                ty_path, ident.node);\n                         }\n                     }\n                 }"}, {"sha": "26508a47224253462be8ff723601771a5af4383f", "filename": "src/test/compile-fail/issue-30302.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ecf2c2595940d7758f5c1a6d1802e3ac42ef6fd6/src%2Ftest%2Fcompile-fail%2Fissue-30302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf2c2595940d7758f5c1a6d1802e3ac42ef6fd6/src%2Ftest%2Fcompile-fail%2Fissue-30302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30302.rs?ref=ecf2c2595940d7758f5c1a6d1802e3ac42ef6fd6", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Stack<T> {\n+    Nil,\n+    Cons(T, Box<Stack<T>>)\n+}\n+\n+fn is_empty<T>(s: Stack<T>) -> bool {\n+    match s {\n+        Nil => true,\n+//~^ WARN pattern binding `Nil` is named the same as one of the variants of the type `Stack`\n+//~| HELP consider making the path in the pattern qualified: `Stack::Nil`\n+        _ => false\n+//~^ ERROR unreachable pattern\n+    }\n+}\n+\n+fn main() {}"}]}