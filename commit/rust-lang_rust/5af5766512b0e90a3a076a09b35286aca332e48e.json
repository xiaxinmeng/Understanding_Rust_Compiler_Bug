{"sha": "5af5766512b0e90a3a076a09b35286aca332e48e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZjU3NjY1MTJiMGU5MGEzYTA3NmEwOWIzNTI4NmFjYTMzMmU0OGU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-16T01:35:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-19T00:00:35Z"}, "message": "core: Initialize global state lazily in the Scheduler ctor\n\nI don't want any global one-time initalization functions because\nthat will make embedding harder.", "tree": {"sha": "d4fbefe51efa5acb6b27f1060e672706758da3e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4fbefe51efa5acb6b27f1060e672706758da3e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5af5766512b0e90a3a076a09b35286aca332e48e", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5af5766512b0e90a3a076a09b35286aca332e48e", "html_url": "https://github.com/rust-lang/rust/commit/5af5766512b0e90a3a076a09b35286aca332e48e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5af5766512b0e90a3a076a09b35286aca332e48e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "044703435ba7e1338456f7a83393eb2c6fecf238", "url": "https://api.github.com/repos/rust-lang/rust/commits/044703435ba7e1338456f7a83393eb2c6fecf238", "html_url": "https://github.com/rust-lang/rust/commit/044703435ba7e1338456f7a83393eb2c6fecf238"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "04891a1673c0a9a8e158e31eeef04283fad4ed3f", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5af5766512b0e90a3a076a09b35286aca332e48e/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af5766512b0e90a3a076a09b35286aca332e48e/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=5af5766512b0e90a3a076a09b35286aca332e48e", "patch": "@@ -46,20 +46,10 @@ mod context;\n mod thread;\n pub mod env;\n \n-pub fn initialize() {\n-    unsafe { rust_initialize_global_state(); }\n-    extern {\n-        fn rust_initialize_global_state();\n-    }\n-}\n-\n pub fn start(main: *u8, _argc: int, _argv: *c_char, _crate_map: *u8) -> int {\n     use self::sched::{Scheduler, Task};\n     use self::uvio::UvEventLoop;\n \n-    // XXX: Would rather do this lazily in Scheduler\n-    initialize();\n-\n     let loop_ = ~UvEventLoop::new();\n     let mut sched = ~Scheduler::new(loop_);\n     let main_task = ~do Task::new(&mut sched.stack_pool) {"}, {"sha": "312c6655f55f378a5013b9eb6dc397c48a933a86", "filename": "src/libcore/rt/sched.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5af5766512b0e90a3a076a09b35286aca332e48e/src%2Flibcore%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af5766512b0e90a3a076a09b35286aca332e48e/src%2Flibcore%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched.rs?ref=5af5766512b0e90a3a076a09b35286aca332e48e", "patch": "@@ -71,6 +71,13 @@ enum CleanupJob {\n pub impl Scheduler {\n \n     static fn new(event_loop: ~EventLoopObject) -> Scheduler {\n+\n+        // Lazily initialize the global state, currently the scheduler TLS key\n+        unsafe { rust_initialize_global_state(); }\n+        extern {\n+            fn rust_initialize_global_state();\n+        }\n+\n         Scheduler {\n             event_loop: event_loop,\n             task_queue: WorkQueue::new(),"}, {"sha": "f586e05772b76d5598bf7bd272c560002a45280a", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5af5766512b0e90a3a076a09b35286aca332e48e/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5af5766512b0e90a3a076a09b35286aca332e48e/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=5af5766512b0e90a3a076a09b35286aca332e48e", "patch": "@@ -889,7 +889,6 @@ rust_call_nullary_fn(nullary_fn f) {\n     f();\n }\n \n-\n #ifndef _WIN32\n pthread_key_t sched_key;\n #else\n@@ -901,16 +900,26 @@ rust_get_sched_tls_key() {\n     return &sched_key;\n }\n \n+// Initialize the global state required by the new scheduler\n extern \"C\" CDECL void\n rust_initialize_global_state() {\n \n+    static lock_and_signal init_lock;\n+    static bool initialized = false;\n+\n+    scoped_lock with(init_lock);\n+\n+    if (!initialized) {\n+\n #ifndef _WIN32\n-    assert(!pthread_key_create(&sched_key, NULL));\n+        assert(!pthread_key_create(&sched_key, NULL));\n #else\n-    sched_key = TlsAlloc();\n-    assert(sched_key != TLS_OUT_OF_INDEXES);\n+        sched_key = TlsAlloc();\n+        assert(sched_key != TLS_OUT_OF_INDEXES);\n #endif\n \n+        initialized = true;\n+    }\n }\n \n //"}]}