{"sha": "308efafc7782610dfa6eef5b8657a32d67afde5e", "node_id": "C_kwDOAAsO6NoAKDMwOGVmYWZjNzc4MjYxMGRmYTZlZWY1Yjg2NTdhMzJkNjdhZmRlNWU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-04T01:06:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-04T01:06:42Z"}, "message": "Rollup merge of #94572 - sunfishcode:sunfishcode/handle-or, r=joshtriplett\n\nUse `HandleOrNull` and `HandleOrInvalid` in the Windows FFI bindings.\n\nUse the new `HandleOrNull` and `HandleOrInvalid` types that were introduced\nas part of [I/O safety] in a few functions in the Windows FFI bindings.\n\nThis factors out an `unsafe` block and two `unsafe` function calls in the\nWindows implementation code.\n\nAnd, it helps test `HandleOrNull` and `HandleOrInvalid`, and indeed, it\nturned up a bug: `OwnedHandle` also needs to be `#[repr(transparent)]`,\nas it's used inside of `HandleOrNull` and `HandleOrInvalid` which are also\n`#[repr(transparent)]`.\n\nr? ```@joshtriplett```\n\n[I/O safety]: https://github.com/rust-lang/rust/issues/87074", "tree": {"sha": "bfe563b54bac4252403d68d23b2b001139e41b35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfe563b54bac4252403d68d23b2b001139e41b35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/308efafc7782610dfa6eef5b8657a32d67afde5e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIWYiCRBK7hj4Ov3rIwAAxx8IABScjpPHUHYaT97fDqjtPHOV\nZO9GL9wIQHGBhONuGN9qHwA/hN/T+v+h9+LJGIlnbQWA6ThM4RTanY0PL0JUe+ma\nQ1HDbhxMhG0mev+FxlYVuFztVQPCLngcqtCt2sFirK+R4YHJtlXo4LPcsIhK6kDJ\nHfJoi+14NH6DB0GoVCy/bYQvetd/tUsUY2lAR0bLedHbpOoL19EXs4uN7IDIb/kk\nZpDVFScidFpHxlOngRKcxalwYuuH4c8Glzfr4Wt5vprUA7sqd9tgCCMICSRTSmBL\nygejgZjn+peodfz/S3kp2fUjwI0jnw1UFdNuGaq0RHQZl3HM62M2Id8VXC7aInU=\n=qrLl\n-----END PGP SIGNATURE-----\n", "payload": "tree bfe563b54bac4252403d68d23b2b001139e41b35\nparent 958bd0268c307e91ec0fc93c8c4ed8a412008ab4\nparent 35606490abf83f2bd6c4adddc3b3c13a2a8b783b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646356002 +0100\ncommitter GitHub <noreply@github.com> 1646356002 +0100\n\nRollup merge of #94572 - sunfishcode:sunfishcode/handle-or, r=joshtriplett\n\nUse `HandleOrNull` and `HandleOrInvalid` in the Windows FFI bindings.\n\nUse the new `HandleOrNull` and `HandleOrInvalid` types that were introduced\nas part of [I/O safety] in a few functions in the Windows FFI bindings.\n\nThis factors out an `unsafe` block and two `unsafe` function calls in the\nWindows implementation code.\n\nAnd, it helps test `HandleOrNull` and `HandleOrInvalid`, and indeed, it\nturned up a bug: `OwnedHandle` also needs to be `#[repr(transparent)]`,\nas it's used inside of `HandleOrNull` and `HandleOrInvalid` which are also\n`#[repr(transparent)]`.\n\nr? ```@joshtriplett```\n\n[I/O safety]: https://github.com/rust-lang/rust/issues/87074\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/308efafc7782610dfa6eef5b8657a32d67afde5e", "html_url": "https://github.com/rust-lang/rust/commit/308efafc7782610dfa6eef5b8657a32d67afde5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/308efafc7782610dfa6eef5b8657a32d67afde5e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "958bd0268c307e91ec0fc93c8c4ed8a412008ab4", "url": "https://api.github.com/repos/rust-lang/rust/commits/958bd0268c307e91ec0fc93c8c4ed8a412008ab4", "html_url": "https://github.com/rust-lang/rust/commit/958bd0268c307e91ec0fc93c8c4ed8a412008ab4"}, {"sha": "35606490abf83f2bd6c4adddc3b3c13a2a8b783b", "url": "https://api.github.com/repos/rust-lang/rust/commits/35606490abf83f2bd6c4adddc3b3c13a2a8b783b", "html_url": "https://github.com/rust-lang/rust/commit/35606490abf83f2bd6c4adddc3b3c13a2a8b783b"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "14b94d8dcdf92e889d2921362eee551949229365", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/308efafc7782610dfa6eef5b8657a32d67afde5e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308efafc7782610dfa6eef5b8657a32d67afde5e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=308efafc7782610dfa6eef5b8657a32d67afde5e", "patch": "@@ -59,6 +59,7 @@ pub struct BorrowedHandle<'handle> {\n /// [`RegCloseKey`]: https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regclosekey\n ///\n /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n+#[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct OwnedHandle {\n     handle: RawHandle,"}, {"sha": "9b61b2476d5bbdd55c811b00d9493b098215cb5b", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/308efafc7782610dfa6eef5b8657a32d67afde5e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308efafc7782610dfa6eef5b8657a32d67afde5e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=308efafc7782610dfa6eef5b8657a32d67afde5e", "patch": "@@ -6,6 +6,7 @@\n \n use crate::mem;\n use crate::os::raw::{c_char, c_int, c_long, c_longlong, c_uint, c_ulong, c_ushort};\n+use crate::os::windows::io::{BorrowedHandle, HandleOrInvalid, HandleOrNull};\n use crate::ptr;\n use core::ffi::NonZero_c_ulong;\n \n@@ -886,7 +887,7 @@ extern \"system\" {\n         lpParameter: LPVOID,\n         dwCreationFlags: DWORD,\n         lpThreadId: LPDWORD,\n-    ) -> HANDLE;\n+    ) -> HandleOrNull;\n     pub fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) -> DWORD;\n     pub fn SwitchToThread() -> BOOL;\n     pub fn Sleep(dwMilliseconds: DWORD);\n@@ -950,14 +951,14 @@ extern \"system\" {\n         dwOptions: DWORD,\n     ) -> BOOL;\n     pub fn ReadFile(\n-        hFile: HANDLE,\n+        hFile: BorrowedHandle<'_>,\n         lpBuffer: LPVOID,\n         nNumberOfBytesToRead: DWORD,\n         lpNumberOfBytesRead: LPDWORD,\n         lpOverlapped: LPOVERLAPPED,\n     ) -> BOOL;\n     pub fn WriteFile(\n-        hFile: HANDLE,\n+        hFile: BorrowedHandle<'_>,\n         lpBuffer: LPVOID,\n         nNumberOfBytesToWrite: DWORD,\n         lpNumberOfBytesWritten: LPDWORD,\n@@ -981,7 +982,7 @@ extern \"system\" {\n         dwCreationDisposition: DWORD,\n         dwFlagsAndAttributes: DWORD,\n         hTemplateFile: HANDLE,\n-    ) -> HANDLE;\n+    ) -> HandleOrInvalid;\n \n     pub fn FindFirstFileW(fileName: LPCWSTR, findFileData: LPWIN32_FIND_DATAW) -> HANDLE;\n     pub fn FindNextFileW(findFile: HANDLE, findFileData: LPWIN32_FIND_DATAW) -> BOOL;"}, {"sha": "d6c40a15329a96a9091aa9c6936d1fed7e1ad79c", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/308efafc7782610dfa6eef5b8657a32d67afde5e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308efafc7782610dfa6eef5b8657a32d67afde5e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=308efafc7782610dfa6eef5b8657a32d67afde5e", "patch": "@@ -1,5 +1,6 @@\n use crate::os::windows::prelude::*;\n \n+use crate::convert::TryInto;\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::io::{self, Error, IoSlice, IoSliceMut, ReadBuf, SeekFrom};\n@@ -294,10 +295,10 @@ impl File {\n                 ptr::null_mut(),\n             )\n         };\n-        if handle == c::INVALID_HANDLE_VALUE {\n-            Err(Error::last_os_error())\n+        if let Ok(handle) = handle.try_into() {\n+            Ok(File { handle: Handle::from_inner(handle) })\n         } else {\n-            unsafe { Ok(File { handle: Handle::from_raw_handle(handle) }) }\n+            Err(Error::last_os_error())\n         }\n     }\n "}, {"sha": "e5c9567957bc1db5c5e52c9eb0bd5fde8de807aa", "filename": "library/std/src/sys/windows/handle.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/308efafc7782610dfa6eef5b8657a32d67afde5e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308efafc7782610dfa6eef5b8657a32d67afde5e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs?ref=308efafc7782610dfa6eef5b8657a32d67afde5e", "patch": "@@ -78,7 +78,7 @@ impl Handle {\n         let len = cmp::min(buf.len(), <c::DWORD>::MAX as usize) as c::DWORD;\n         let res = cvt(unsafe {\n             c::ReadFile(\n-                self.as_raw_handle(),\n+                self.as_handle(),\n                 buf.as_mut_ptr() as c::LPVOID,\n                 len,\n                 &mut read,\n@@ -116,7 +116,7 @@ impl Handle {\n             overlapped.Offset = offset as u32;\n             overlapped.OffsetHigh = (offset >> 32) as u32;\n             cvt(c::ReadFile(\n-                self.as_raw_handle(),\n+                self.as_handle(),\n                 buf.as_mut_ptr() as c::LPVOID,\n                 len,\n                 &mut read,\n@@ -135,7 +135,7 @@ impl Handle {\n         let len = cmp::min(buf.remaining(), <c::DWORD>::MAX as usize) as c::DWORD;\n         let res = cvt(unsafe {\n             c::ReadFile(\n-                self.as_raw_handle(),\n+                self.as_handle(),\n                 buf.unfilled_mut().as_mut_ptr() as c::LPVOID,\n                 len,\n                 &mut read,\n@@ -171,7 +171,7 @@ impl Handle {\n         let len = cmp::min(buf.len(), <c::DWORD>::MAX as usize) as c::DWORD;\n         let mut amt = 0;\n         let res = cvt(c::ReadFile(\n-            self.as_raw_handle(),\n+            self.as_handle(),\n             buf.as_ptr() as c::LPVOID,\n             len,\n             &mut amt,\n@@ -225,7 +225,7 @@ impl Handle {\n         let len = cmp::min(buf.len(), <c::DWORD>::MAX as usize) as c::DWORD;\n         cvt(unsafe {\n             c::WriteFile(\n-                self.as_raw_handle(),\n+                self.as_handle(),\n                 buf.as_ptr() as c::LPVOID,\n                 len,\n                 &mut amt,\n@@ -252,7 +252,7 @@ impl Handle {\n             overlapped.Offset = offset as u32;\n             overlapped.OffsetHigh = (offset >> 32) as u32;\n             cvt(c::WriteFile(\n-                self.as_raw_handle(),\n+                self.as_handle(),\n                 buf.as_ptr() as c::LPVOID,\n                 len,\n                 &mut written,"}, {"sha": "bd304dc57371dda02bfc4250f71f279e5f7ad318", "filename": "library/std/src/sys/windows/thread.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/308efafc7782610dfa6eef5b8657a32d67afde5e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308efafc7782610dfa6eef5b8657a32d67afde5e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs?ref=308efafc7782610dfa6eef5b8657a32d67afde5e", "patch": "@@ -1,11 +1,13 @@\n+use crate::convert::TryInto;\n use crate::ffi::CStr;\n use crate::io;\n use crate::num::NonZeroUsize;\n-use crate::os::windows::io::{AsRawHandle, FromRawHandle};\n+use crate::os::windows::io::AsRawHandle;\n use crate::ptr;\n use crate::sys::c;\n use crate::sys::handle::Handle;\n use crate::sys::stack_overflow;\n+use crate::sys_common::FromInner;\n use crate::time::Duration;\n \n use libc::c_void;\n@@ -40,13 +42,13 @@ impl Thread {\n             ptr::null_mut(),\n         );\n \n-        return if ret as usize == 0 {\n+        return if let Ok(handle) = ret.try_into() {\n+            Ok(Thread { handle: Handle::from_inner(handle) })\n+        } else {\n             // The thread failed to start and as a result p was not consumed. Therefore, it is\n             // safe to reconstruct the box so that it gets deallocated.\n             drop(Box::from_raw(p));\n             Err(io::Error::last_os_error())\n-        } else {\n-            Ok(Thread { handle: Handle::from_raw_handle(ret) })\n         };\n \n         extern \"system\" fn thread_start(main: *mut c_void) -> c::DWORD {"}]}