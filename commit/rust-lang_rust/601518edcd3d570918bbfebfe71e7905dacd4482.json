{"sha": "601518edcd3d570918bbfebfe71e7905dacd4482", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMTUxOGVkY2QzZDU3MDkxOGJiZmViZmU3MWU3OTA1ZGFjZDQ0ODI=", "commit": {"author": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-07-22T19:10:39Z"}, "committer": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-07-22T22:52:49Z"}, "message": "change returns to RegionNameHighlight", "tree": {"sha": "41f2b146dbdfb24263a13c1d35b93fb404dd4406", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41f2b146dbdfb24263a13c1d35b93fb404dd4406"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/601518edcd3d570918bbfebfe71e7905dacd4482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/601518edcd3d570918bbfebfe71e7905dacd4482", "html_url": "https://github.com/rust-lang/rust/commit/601518edcd3d570918bbfebfe71e7905dacd4482", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/601518edcd3d570918bbfebfe71e7905dacd4482/comments", "author": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51af5af6fde92f6a15314310e756b3b2d19f22fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/51af5af6fde92f6a15314310e756b3b2d19f22fa", "html_url": "https://github.com/rust-lang/rust/commit/51af5af6fde92f6a15314310e756b3b2d19f22fa"}], "stats": {"total": 67, "additions": 29, "deletions": 38}, "files": [{"sha": "0f199de33089793046a87cce9ca299b93cde38ff", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 29, "deletions": 38, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/601518edcd3d570918bbfebfe71e7905dacd4482/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601518edcd3d570918bbfebfe71e7905dacd4482/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=601518edcd3d570918bbfebfe71e7905dacd4482", "patch": "@@ -336,21 +336,35 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         let arg_ty = self.regioncx.universal_regions().unnormalized_input_tys\n             [implicit_inputs + argument_index];\n-        if let Some(region_name) =\n+        if let Some(highlight) =\n             self.give_name_if_we_can_match_hir_ty_from_argument(fr, arg_ty, argument_index)\n         {\n-            return Some(region_name);\n+            return Some(RegionName {\n+                name: self.synthesize_region_name(),\n+                source: RegionNameSource::AnonRegionFromArgument(highlight),\n+            });\n         }\n \n-        self.give_name_if_we_cannot_match_hir_ty(fr, arg_ty)\n+        let counter = *self.next_region_name.try_borrow().unwrap();\n+        if let Some(highlight) = self.give_name_if_we_cannot_match_hir_ty(fr, arg_ty, counter) {\n+            Some(RegionName {\n+                // This counter value will already have been used, so this function will increment\n+                // it so the next value will be used next and return the region name that would\n+                // have been used.\n+                name: self.synthesize_region_name(),\n+                source: RegionNameSource::AnonRegionFromArgument(highlight),\n+            })\n+        } else {\n+            None\n+        }\n     }\n \n     fn give_name_if_we_can_match_hir_ty_from_argument(\n         &self,\n         needle_fr: RegionVid,\n         argument_ty: Ty<'tcx>,\n         argument_index: usize,\n-    ) -> Option<RegionName> {\n+    ) -> Option<RegionNameHighlight> {\n         let mir_hir_id = self.infcx.tcx.hir().as_local_hir_id(self.mir_def_id);\n         let fn_decl = self.infcx.tcx.hir().fn_decl_by_hir_id(mir_hir_id)?;\n         let argument_hir_ty: &hir::Ty<'_> = fn_decl.inputs.get(argument_index)?;\n@@ -381,8 +395,8 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         &self,\n         needle_fr: RegionVid,\n         argument_ty: Ty<'tcx>,\n-    ) -> Option<RegionName> {\n-        let counter = *self.next_region_name.try_borrow().unwrap();\n+        counter: usize,\n+    ) -> Option<RegionNameHighlight> {\n         let mut highlight = RegionHighlightMode::default();\n         highlight.highlighting_region_vid(needle_fr, counter);\n         let type_name = self.infcx.extract_type_name(&argument_ty, Some(highlight)).0;\n@@ -391,7 +405,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             \"give_name_if_we_cannot_match_hir_ty: type_name={:?} needle_fr={:?}\",\n             type_name, needle_fr\n         );\n-        let assigned_region_name = if type_name.find(&format!(\"'{}\", counter)).is_some() {\n+        if type_name.find(&format!(\"'{}\", counter)).is_some() {\n             // Only add a label if we can confirm that a region was labelled.\n             let argument_index =\n                 self.regioncx.get_argument_index_for_region(self.infcx.tcx, needle_fr)?;\n@@ -401,20 +415,10 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                 argument_index,\n             );\n \n-            Some(RegionName {\n-                // This counter value will already have been used, so this function will increment\n-                // it so the next value will be used next and return the region name that would\n-                // have been used.\n-                name: self.synthesize_region_name(),\n-                source: RegionNameSource::AnonRegionFromArgument(\n-                    RegionNameHighlight::CannotMatchHirTy(span, type_name),\n-                ),\n-            })\n+            Some(RegionNameHighlight::CannotMatchHirTy(span, type_name))\n         } else {\n             None\n-        };\n-\n-        assigned_region_name\n+        }\n     }\n \n     /// Attempts to highlight the specific part of a type annotation\n@@ -443,7 +447,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         needle_fr: RegionVid,\n         argument_ty: Ty<'tcx>,\n         argument_hir_ty: &hir::Ty<'_>,\n-    ) -> Option<RegionName> {\n+    ) -> Option<RegionNameHighlight> {\n         let search_stack: &mut Vec<(Ty<'tcx>, &hir::Ty<'_>)> =\n             &mut vec![(argument_ty, argument_hir_ty)];\n \n@@ -460,18 +464,11 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                     hir::TyKind::Rptr(_lifetime, referent_hir_ty),\n                 ) => {\n                     if region.to_region_vid() == needle_fr {\n-                        let region_name = self.synthesize_region_name();\n-\n                         // Just grab the first character, the `&`.\n                         let source_map = self.infcx.tcx.sess.source_map();\n                         let ampersand_span = source_map.start_point(hir_ty.span);\n \n-                        return Some(RegionName {\n-                            name: region_name,\n-                            source: RegionNameSource::AnonRegionFromArgument(\n-                                RegionNameHighlight::MatchedHirTy(ampersand_span),\n-                            ),\n-                        });\n+                        return Some(RegionNameHighlight::MatchedHirTy(ampersand_span));\n                     }\n \n                     // Otherwise, let's descend into the referent types.\n@@ -491,13 +488,13 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                         Res::Def(DefKind::TyAlias, _) => (),\n                         _ => {\n                             if let Some(last_segment) = path.segments.last() {\n-                                if let Some(name) = self.match_adt_and_segment(\n+                                if let Some(highlight) = self.match_adt_and_segment(\n                                     substs,\n                                     needle_fr,\n                                     last_segment,\n                                     search_stack,\n                                 ) {\n-                                    return Some(name);\n+                                    return Some(highlight);\n                                 }\n                             }\n                         }\n@@ -540,7 +537,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         needle_fr: RegionVid,\n         last_segment: &'hir hir::PathSegment<'hir>,\n         search_stack: &mut Vec<(Ty<'tcx>, &'hir hir::Ty<'hir>)>,\n-    ) -> Option<RegionName> {\n+    ) -> Option<RegionNameHighlight> {\n         // Did the user give explicit arguments? (e.g., `Foo<..>`)\n         let args = last_segment.args.as_ref()?;\n         let lifetime =\n@@ -550,14 +547,8 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             | hir::LifetimeName::Error\n             | hir::LifetimeName::Static\n             | hir::LifetimeName::Underscore => {\n-                let region_name = self.synthesize_region_name();\n                 let lifetime_span = lifetime.span;\n-                Some(RegionName {\n-                    name: region_name,\n-                    source: RegionNameSource::AnonRegionFromArgument(\n-                        RegionNameHighlight::MatchedAdtAndSegment(lifetime_span),\n-                    ),\n-                })\n+                Some(RegionNameHighlight::MatchedAdtAndSegment(lifetime_span))\n             }\n \n             hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Implicit => {"}]}