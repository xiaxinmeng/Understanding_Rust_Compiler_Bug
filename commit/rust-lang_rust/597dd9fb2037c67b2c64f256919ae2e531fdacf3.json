{"sha": "597dd9fb2037c67b2c64f256919ae2e531fdacf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5N2RkOWZiMjAzN2M2N2IyYzY0ZjI1NjkxOWFlMmU1MzFmZGFjZjM=", "commit": {"author": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-11-18T22:02:12Z"}, "committer": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-11-18T22:02:12Z"}, "message": "Merge branch 'master' of https://github.com/rust-analyzer/rust-analyzer into feature/themes", "tree": {"sha": "68efb1492a90d7b202d6f3dbd2d8fc6000f95e8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68efb1492a90d7b202d6f3dbd2d8fc6000f95e8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/597dd9fb2037c67b2c64f256919ae2e531fdacf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/597dd9fb2037c67b2c64f256919ae2e531fdacf3", "html_url": "https://github.com/rust-lang/rust/commit/597dd9fb2037c67b2c64f256919ae2e531fdacf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/597dd9fb2037c67b2c64f256919ae2e531fdacf3/comments", "author": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bdb6351ac557851607df9d142c9e573c0fb5e1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bdb6351ac557851607df9d142c9e573c0fb5e1d", "html_url": "https://github.com/rust-lang/rust/commit/4bdb6351ac557851607df9d142c9e573c0fb5e1d"}, {"sha": "c24ee0990486b04723534f072d7a58e829bbd1bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c24ee0990486b04723534f072d7a58e829bbd1bd", "html_url": "https://github.com/rust-lang/rust/commit/c24ee0990486b04723534f072d7a58e829bbd1bd"}], "stats": {"total": 140, "additions": 91, "deletions": 49}, "files": [{"sha": "7d694e1f6e48b98f9861f62179c59cc4cd8ba7db", "filename": "crates/ra_ide_api/src/goto_type_definition.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/597dd9fb2037c67b2c64f256919ae2e531fdacf3/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/597dd9fb2037c67b2c64f256919ae2e531fdacf3/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs?ref=597dd9fb2037c67b2c64f256919ae2e531fdacf3", "patch": "@@ -1,25 +1,28 @@\n //! FIXME: write short doc here\n \n-use ra_db::SourceDatabase;\n+use hir::db::AstDatabase;\n use ra_syntax::{ast, AstNode};\n \n-use crate::{db::RootDatabase, display::ToNav, FilePosition, NavigationTarget, RangeInfo};\n+use crate::{\n+    db::RootDatabase, display::ToNav, expand::descend_into_macros, FilePosition, NavigationTarget,\n+    RangeInfo,\n+};\n \n pub(crate) fn goto_type_definition(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n-    let parse = db.parse(position.file_id);\n+    let file = db.parse_or_expand(position.file_id.into())?;\n+    let token = file.token_at_offset(position.offset).filter(|it| !it.kind().is_trivia()).next()?;\n+    let token = descend_into_macros(db, position.file_id, token);\n \n-    let node = parse.tree().syntax().token_at_offset(position.offset).find_map(|token| {\n+    let node = token.ast.ancestors().find_map(|token| {\n         token\n-            .parent()\n             .ancestors()\n             .find(|n| ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some())\n     })?;\n \n-    let analyzer =\n-        hir::SourceAnalyzer::new(db, hir::Source::new(position.file_id.into(), &node), None);\n+    let analyzer = hir::SourceAnalyzer::new(db, token.with_ast(&node), None);\n \n     let ty: hir::Ty = if let Some(ty) =\n         ast::Expr::cast(node.clone()).and_then(|e| analyzer.type_of(db, &e))\n@@ -80,4 +83,23 @@ mod tests {\n             \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n         );\n     }\n+\n+    #[test]\n+    fn goto_type_definition_works_through_macro() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            macro_rules! id {\n+                ($($tt:tt)*) => { $($tt)* }\n+            }\n+            struct Foo {}\n+            id! {\n+                fn bar() {\n+                    let f<|> = Foo {};\n+                }\n+            }\n+            \",\n+            \"Foo STRUCT_DEF FileId(1) [52; 65) [59; 62)\",\n+        );\n+    }\n }"}, {"sha": "787b714b3ada73b7020907a6cee3ce20ab900784", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 62, "deletions": 42, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/597dd9fb2037c67b2c64f256919ae2e531fdacf3/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/597dd9fb2037c67b2c64f256919ae2e531fdacf3/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=597dd9fb2037c67b2c64f256919ae2e531fdacf3", "patch": "@@ -1,11 +1,11 @@\n //! FIXME: write short doc here\n \n-use hir::{Adt, HasSource, HirDisplay, Source};\n+use hir::{db::AstDatabase, Adt, HasSource, HirDisplay};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    algo::{ancestors_at_offset, find_covering_element, find_node_at_offset},\n+    algo::find_covering_element,\n     ast::{self, DocCommentsOwner},\n-    AstNode,\n+    match_ast, AstNode,\n };\n \n use crate::{\n@@ -14,6 +14,7 @@ use crate::{\n         description_from_symbol, docs_from_symbol, macro_label, rust_code_markup,\n         rust_code_markup_with_doc, ShortLabel,\n     },\n+    expand::descend_into_macros,\n     references::{classify_name, classify_name_ref, NameKind, NameKind::*},\n     FilePosition, FileRange, RangeInfo,\n };\n@@ -162,55 +163,55 @@ fn hover_text_from_name_kind(\n }\n \n pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<HoverResult>> {\n-    let parse = db.parse(position.file_id);\n-    let file = parse.tree();\n+    let file = db.parse_or_expand(position.file_id.into())?;\n+    let token = file.token_at_offset(position.offset).filter(|it| !it.kind().is_trivia()).next()?;\n+    let token = descend_into_macros(db, position.file_id, token);\n \n     let mut res = HoverResult::new();\n \n-    let mut range = if let Some(name_ref) =\n-        find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset)\n-    {\n-        let mut no_fallback = false;\n-        if let Some(name_kind) =\n-            classify_name_ref(db, Source::new(position.file_id.into(), &name_ref)).map(|d| d.kind)\n-        {\n-            res.extend(hover_text_from_name_kind(db, name_kind, &mut no_fallback))\n-        }\n+    let mut range = match_ast! {\n+        match (token.ast.parent()) {\n+            ast::NameRef(name_ref) => {\n+                let mut no_fallback = false;\n+                if let Some(name_kind) =\n+                    classify_name_ref(db, token.with_ast(&name_ref)).map(|d| d.kind)\n+                {\n+                    res.extend(hover_text_from_name_kind(db, name_kind, &mut no_fallback))\n+                }\n \n-        if res.is_empty() && !no_fallback {\n-            // Fallback index based approach:\n-            let symbols = crate::symbol_index::index_resolve(db, &name_ref);\n-            for sym in symbols {\n-                let docs = docs_from_symbol(db, &sym);\n-                let desc = description_from_symbol(db, &sym);\n-                res.extend(hover_text(docs, desc));\n-            }\n-        }\n+                if res.is_empty() && !no_fallback {\n+                    // Fallback index based approach:\n+                    let symbols = crate::symbol_index::index_resolve(db, &name_ref);\n+                    for sym in symbols {\n+                        let docs = docs_from_symbol(db, &sym);\n+                        let desc = description_from_symbol(db, &sym);\n+                        res.extend(hover_text(docs, desc));\n+                    }\n+                }\n \n-        if !res.is_empty() {\n-            Some(name_ref.syntax().text_range())\n-        } else {\n-            None\n-        }\n-    } else if let Some(name) = find_node_at_offset::<ast::Name>(file.syntax(), position.offset) {\n-        if let Some(name_kind) =\n-            classify_name(db, Source::new(position.file_id.into(), &name)).map(|d| d.kind)\n-        {\n-            let mut _b: bool = true;\n-            res.extend(hover_text_from_name_kind(db, name_kind, &mut _b));\n-        }\n+                if !res.is_empty() {\n+                    Some(name_ref.syntax().text_range())\n+                } else {\n+                    None\n+                }\n+            },\n+            ast::Name(name) => {\n+                if let Some(name_kind) = classify_name(db, token.with_ast(&name)).map(|d| d.kind) {\n+                    res.extend(hover_text_from_name_kind(db, name_kind, &mut true));\n+                }\n \n-        if !res.is_empty() {\n-            Some(name.syntax().text_range())\n-        } else {\n-            None\n+                if !res.is_empty() {\n+                    Some(name.syntax().text_range())\n+                } else {\n+                    None\n+                }\n+            },\n+            _ => None,\n         }\n-    } else {\n-        None\n     };\n \n     if range.is_none() {\n-        let node = ancestors_at_offset(file.syntax(), position.offset).find(|n| {\n+        let node = token.ast.ancestors().find(|n| {\n             ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some()\n         })?;\n         let frange = FileRange { file_id: position.file_id, range: node.text_range() };\n@@ -716,4 +717,23 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n         assert_eq!(hover.info.is_exact(), true);\n     }\n+\n+    #[test]\n+    fn test_hover_through_macro() {\n+        check_hover_result(\n+            \"\n+            //- /lib.rs\n+            macro_rules! id {\n+                ($($tt:tt)*) => { $($tt)* }\n+            }\n+            fn foo() {}\n+            id! {\n+                fn bar() {\n+                    fo<|>o();\n+                }\n+            }\n+            \",\n+            &[\"fn foo()\"],\n+        );\n+    }\n }"}]}