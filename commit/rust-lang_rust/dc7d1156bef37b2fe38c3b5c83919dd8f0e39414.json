{"sha": "dc7d1156bef37b2fe38c3b5c83919dd8f0e39414", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjN2QxMTU2YmVmMzdiMmZlMzhjM2I1YzgzOTE5ZGQ4ZjBlMzk0MTQ=", "commit": {"author": {"name": "Steven Malis", "email": "smmalis37@gmail.com", "date": "2020-07-23T05:54:06Z"}, "committer": {"name": "Steven Malis", "email": "smmalis37@gmail.com", "date": "2020-07-23T06:01:15Z"}, "message": "Don't ICE on unconstrained anonymous lifetimes inside associated types.", "tree": {"sha": "6ef18dcdd1b7504852e082c1c7b1ecb8fc4475f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ef18dcdd1b7504852e082c1c7b1ecb8fc4475f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc7d1156bef37b2fe38c3b5c83919dd8f0e39414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc7d1156bef37b2fe38c3b5c83919dd8f0e39414", "html_url": "https://github.com/rust-lang/rust/commit/dc7d1156bef37b2fe38c3b5c83919dd8f0e39414", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc7d1156bef37b2fe38c3b5c83919dd8f0e39414/comments", "author": {"login": "smmalis37", "id": 4054472, "node_id": "MDQ6VXNlcjQwNTQ0NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4054472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smmalis37", "html_url": "https://github.com/smmalis37", "followers_url": "https://api.github.com/users/smmalis37/followers", "following_url": "https://api.github.com/users/smmalis37/following{/other_user}", "gists_url": "https://api.github.com/users/smmalis37/gists{/gist_id}", "starred_url": "https://api.github.com/users/smmalis37/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smmalis37/subscriptions", "organizations_url": "https://api.github.com/users/smmalis37/orgs", "repos_url": "https://api.github.com/users/smmalis37/repos", "events_url": "https://api.github.com/users/smmalis37/events{/privacy}", "received_events_url": "https://api.github.com/users/smmalis37/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smmalis37", "id": 4054472, "node_id": "MDQ6VXNlcjQwNTQ0NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4054472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smmalis37", "html_url": "https://github.com/smmalis37", "followers_url": "https://api.github.com/users/smmalis37/followers", "following_url": "https://api.github.com/users/smmalis37/following{/other_user}", "gists_url": "https://api.github.com/users/smmalis37/gists{/gist_id}", "starred_url": "https://api.github.com/users/smmalis37/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smmalis37/subscriptions", "organizations_url": "https://api.github.com/users/smmalis37/orgs", "repos_url": "https://api.github.com/users/smmalis37/repos", "events_url": "https://api.github.com/users/smmalis37/events{/privacy}", "received_events_url": "https://api.github.com/users/smmalis37/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "734233d29771869f824d8ddbaddabb90b3b68e03", "url": "https://api.github.com/repos/rust-lang/rust/commits/734233d29771869f824d8ddbaddabb90b3b68e03", "html_url": "https://github.com/rust-lang/rust/commit/734233d29771869f824d8ddbaddabb90b3b68e03"}], "stats": {"total": 54, "additions": 42, "deletions": 12}, "files": [{"sha": "e6d59d30e2f585331ba3bff358cf7e50acd16602", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d1156bef37b2fe38c3b5c83919dd8f0e39414/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d1156bef37b2fe38c3b5c83919dd8f0e39414/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=dc7d1156bef37b2fe38c3b5c83919dd8f0e39414", "patch": "@@ -1485,28 +1485,33 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 debug!(\"late_bound_in_ty = {:?}\", late_bound_in_ty);\n                 for br in late_bound_in_ty.difference(&late_bound_in_trait_ref) {\n                     let br_name = match *br {\n-                        ty::BrNamed(_, name) => name,\n-                        _ => {\n-                            span_bug!(\n-                                binding.span,\n-                                \"anonymous bound region {:?} in binding but not trait ref\",\n-                                br\n-                            );\n-                        }\n+                        ty::BrNamed(_, name) => format!(\"lifetime `{}`\", name),\n+                        _ => \"an anonymous lifetime\".to_string(),\n                     };\n                     // FIXME: point at the type params that don't have appropriate lifetimes:\n                     // struct S1<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n                     //                         ----  ----     ^^^^^^^\n-                    struct_span_err!(\n+                    let mut err = struct_span_err!(\n                         tcx.sess,\n                         binding.span,\n                         E0582,\n-                        \"binding for associated type `{}` references lifetime `{}`, \\\n+                        \"binding for associated type `{}` references {}, \\\n                          which does not appear in the trait input types\",\n                         binding.item_name,\n                         br_name\n-                    )\n-                    .emit();\n+                    );\n+\n+                    if let ty::BrAnon(_) = *br {\n+                        // The only way for an anonymous lifetime to wind up\n+                        // in the return type but **also** be unconstrained is\n+                        // if it only appears in \"associated types\" in the\n+                        // input. See #62200 for an example. In this case,\n+                        // though we can easily give a hint that ought to be\n+                        // relevant.\n+                        err.note(\"lifetimes appearing in an associated type are not considered constrained\");\n+                    }\n+\n+                    err.emit();\n                 }\n             }\n         }"}, {"sha": "10f06eb26f8d23308eea253635c04e086f2163cf", "filename": "src/test/ui/associated-types/issue-62200.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d1156bef37b2fe38c3b5c83919dd8f0e39414/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d1156bef37b2fe38c3b5c83919dd8f0e39414/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.rs?ref=dc7d1156bef37b2fe38c3b5c83919dd8f0e39414", "patch": "@@ -0,0 +1,14 @@\n+struct S {}\n+\n+trait T<'a> {\n+    type A;\n+}\n+\n+impl T<'_> for S {\n+    type A = u32;\n+}\n+\n+fn foo(x: impl Fn(<S as T<'_>>::A) -> <S as T<'_>>::A) {}\n+//~^ ERROR binding for associated type `Output` references an anonymous lifetime\n+\n+fn main() {}"}, {"sha": "f14cd81fdfe1f43583bb1b429d07437e93894eff", "filename": "src/test/ui/associated-types/issue-62200.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d1156bef37b2fe38c3b5c83919dd8f0e39414/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d1156bef37b2fe38c3b5c83919dd8f0e39414/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.stderr?ref=dc7d1156bef37b2fe38c3b5c83919dd8f0e39414", "patch": "@@ -0,0 +1,11 @@\n+error[E0582]: binding for associated type `Output` references an anonymous lifetime, which does not appear in the trait input types\n+  --> $DIR/issue-62200.rs:11:39\n+   |\n+LL | fn foo(x: impl Fn(<S as T<'_>>::A) -> <S as T<'_>>::A) {}\n+   |                                       ^^^^^^^^^^^^^^^\n+   |\n+   = note: lifetimes appearing in an associated type are not considered constrained\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0582`."}]}