{"sha": "2cc263988ec6920d0f1182d6667251cac0061855", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYzI2Mzk4OGVjNjkyMGQwZjExODJkNjY2NzI1MWNhYzAwNjE4NTU=", "commit": {"author": {"name": "Timoth\u00e9e Delabrouille", "email": "timothee.delabrouille@musicworldmedia.com", "date": "2021-04-29T17:14:29Z"}, "committer": {"name": "Timoth\u00e9e Delabrouille", "email": "timothee.delabrouille@musicworldmedia.com", "date": "2021-04-29T17:46:29Z"}, "message": "only store locations in extern_locations", "tree": {"sha": "f02db297840650927aafba532b61cce71e6d0520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f02db297840650927aafba532b61cce71e6d0520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cc263988ec6920d0f1182d6667251cac0061855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cc263988ec6920d0f1182d6667251cac0061855", "html_url": "https://github.com/rust-lang/rust/commit/2cc263988ec6920d0f1182d6667251cac0061855", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cc263988ec6920d0f1182d6667251cac0061855/comments", "author": null, "committer": null, "parents": [{"sha": "7d09dba7283f136ab7e4a25b9eb855fc36553a65", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d09dba7283f136ab7e4a25b9eb855fc36553a65", "html_url": "https://github.com/rust-lang/rust/commit/7d09dba7283f136ab7e4a25b9eb855fc36553a65"}], "stats": {"total": 90, "additions": 47, "deletions": 43}, "files": [{"sha": "c6c429a3510e87eea5ddb69eef9648884d5d58c2", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2cc263988ec6920d0f1182d6667251cac0061855/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc263988ec6920d0f1182d6667251cac0061855/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=2cc263988ec6920d0f1182d6667251cac0061855", "patch": "@@ -106,38 +106,39 @@ impl ExternalCrate {\n     crate fn location(\n         &self,\n         extern_url: Option<&str>,\n-        ast_attrs: &[ast::Attribute],\n         dst: &std::path::Path,\n         tcx: TyCtxt<'_>,\n     ) -> ExternalLocation {\n         use ExternalLocation::*;\n+\n+        fn to_remote(url: impl ToString) -> ExternalLocation {\n+            let mut url = url.to_string();\n+            if !url.ends_with('/') {\n+                url.push('/');\n+            }\n+            Remote(url)\n+        }\n+\n         // See if there's documentation generated into the local directory\n+        // WARNING: since rustdoc creates these directories as it generates documentation, this check is only accurate before rendering starts.\n+        // Make sure to call `location()` by that time.\n         let local_location = dst.join(&*self.name(tcx).as_str());\n         if local_location.is_dir() {\n             return Local;\n         }\n \n         if let Some(url) = extern_url {\n-            let mut url = url.to_string();\n-            if !url.ends_with('/') {\n-                url.push('/');\n-            }\n-            return Remote(url);\n+            return to_remote(url);\n         }\n \n         // Failing that, see if there's an attribute specifying where to find this\n         // external crate\n-        ast_attrs\n+        let did = DefId { krate: self.crate_num, index: CRATE_DEF_INDEX };\n+        tcx.get_attrs(did)\n             .lists(sym::doc)\n             .filter(|a| a.has_name(sym::html_root_url))\n             .filter_map(|a| a.value_str())\n-            .map(|url| {\n-                let mut url = url.to_string();\n-                if !url.ends_with('/') {\n-                    url.push('/')\n-                }\n-                Remote(url)\n-            })\n+            .map(to_remote)\n             .next()\n             .unwrap_or(Unknown) // Well, at least we tried.\n     }\n@@ -433,7 +434,7 @@ impl Item {\n                         let relative_to = &cx.current;\n                         if let Some(ref fragment) = *fragment {\n                             let url = match cx.cache().extern_locations.get(&self.def_id.krate) {\n-                                Some(&(_, _, ExternalLocation::Local)) => {\n+                                Some(ExternalLocation::Local) => {\n                                     if relative_to[0] == \"std\" {\n                                         let depth = relative_to.len() - 1;\n                                         \"../\".repeat(depth)\n@@ -442,10 +443,10 @@ impl Item {\n                                         format!(\"{}std/\", \"../\".repeat(depth))\n                                     }\n                                 }\n-                                Some(&(_, _, ExternalLocation::Remote(ref s))) => {\n+                                Some(ExternalLocation::Remote(ref s)) => {\n                                     format!(\"{}/std/\", s.trim_end_matches('/'))\n                                 }\n-                                Some(&(_, _, ExternalLocation::Unknown)) | None => format!(\n+                                Some(ExternalLocation::Unknown) | None => format!(\n                                     \"https://doc.rust-lang.org/{}/std/\",\n                                     crate::doc_rust_lang_org_channel(),\n                                 ),"}, {"sha": "8723e47586ee4600e4ece32f573410dcbf7320c4", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2cc263988ec6920d0f1182d6667251cac0061855/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc263988ec6920d0f1182d6667251cac0061855/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=2cc263988ec6920d0f1182d6667251cac0061855", "patch": "@@ -1,13 +1,12 @@\n use std::collections::BTreeMap;\n use std::mem;\n-use std::path::{Path, PathBuf};\n+use std::path::Path;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n-use rustc_span::Symbol;\n \n use crate::clean::{self, GetDefId};\n use crate::fold::DocFolder;\n@@ -71,7 +70,7 @@ crate struct Cache {\n     crate implementors: FxHashMap<DefId, Vec<Impl>>,\n \n     /// Cache of where external crate documentation can be found.\n-    crate extern_locations: FxHashMap<CrateNum, (Symbol, PathBuf, ExternalLocation)>,\n+    crate extern_locations: FxHashMap<CrateNum, ExternalLocation>,\n \n     /// Cache of where documentation for primitives can be found.\n     crate primitive_locations: FxHashMap<clean::PrimitiveType, DefId>,\n@@ -157,10 +156,7 @@ impl Cache {\n             let name = e.name(tcx);\n             let extern_url = extern_html_root_urls.get(&*name.as_str()).map(|u| &**u);\n             let did = DefId { krate: n, index: CRATE_DEF_INDEX };\n-            self.extern_locations.insert(\n-                n,\n-                (name, e.src_root(tcx), e.location(extern_url, tcx.get_attrs(did), &dst, tcx)),\n-            );\n+            self.extern_locations.insert(n, e.location(extern_url, &dst, tcx));\n             self.external_paths.insert(did, (vec![name.to_string()], ItemType::Module));\n         }\n "}, {"sha": "6f372952095c5bd464ed0840205fc9b5bee960cd", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2cc263988ec6920d0f1182d6667251cac0061855/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc263988ec6920d0f1182d6667251cac0061855/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=2cc263988ec6920d0f1182d6667251cac0061855", "patch": "@@ -16,7 +16,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_target::spec::abi::Abi;\n \n-use crate::clean::{self, utils::find_nearest_parent_module, PrimitiveType};\n+use crate::clean::{self, utils::find_nearest_parent_module, ExternalCrate, PrimitiveType};\n use crate::formats::item_type::ItemType;\n use crate::html::escape::Escape;\n use crate::html::render::cache::ExternalLocation;\n@@ -461,14 +461,14 @@ crate fn href(did: DefId, cx: &Context<'_>) -> Option<(String, ItemType, Vec<Str\n                 fqp,\n                 shortty,\n                 match cache.extern_locations[&did.krate] {\n-                    (.., ExternalLocation::Remote(ref s)) => {\n+                    ExternalLocation::Remote(ref s) => {\n                         let s = s.trim_end_matches('/');\n                         let mut s = vec![&s[..]];\n                         s.extend(module_fqp[..].iter().map(String::as_str));\n                         s\n                     }\n-                    (.., ExternalLocation::Local) => href_relative_parts(module_fqp, relative_to),\n-                    (.., ExternalLocation::Unknown) => return None,\n+                    ExternalLocation::Local => href_relative_parts(module_fqp, relative_to),\n+                    ExternalLocation::Unknown => return None,\n                 },\n             )\n         }\n@@ -574,20 +574,22 @@ fn primitive_link(\n             Some(&def_id) => {\n                 let cname_str;\n                 let loc = match m.extern_locations[&def_id.krate] {\n-                    (ref cname, _, ExternalLocation::Remote(ref s)) => {\n-                        cname_str = cname.as_str();\n+                    ExternalLocation::Remote(ref s) => {\n+                        cname_str =\n+                            ExternalCrate { crate_num: def_id.krate }.name(cx.tcx()).as_str();\n                         Some(vec![s.trim_end_matches('/'), &cname_str[..]])\n                     }\n-                    (ref cname, _, ExternalLocation::Local) => {\n-                        cname_str = cname.as_str();\n+                    ExternalLocation::Local => {\n+                        cname_str =\n+                            ExternalCrate { crate_num: def_id.krate }.name(cx.tcx()).as_str();\n                         Some(if cx.current.first().map(|x| &x[..]) == Some(&cname_str[..]) {\n                             iter::repeat(\"..\").take(cx.current.len() - 1).collect()\n                         } else {\n                             let cname = iter::once(&cname_str[..]);\n                             iter::repeat(\"..\").take(cx.current.len()).chain(cname).collect()\n                         })\n                     }\n-                    (.., ExternalLocation::Unknown) => None,\n+                    ExternalLocation::Unknown => None,\n                 };\n                 if let Some(loc) = loc {\n                     write!("}, {"sha": "293c0a40fa79966712e3563d7f5c216905f14c5b", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2cc263988ec6920d0f1182d6667251cac0061855/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc263988ec6920d0f1182d6667251cac0061855/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=2cc263988ec6920d0f1182d6667251cac0061855", "patch": "@@ -18,7 +18,7 @@ use super::print_item::{full_path, item_path, print_item};\n use super::write_shared::write_shared;\n use super::{print_sidebar, settings, AllTypes, NameDoc, StylePath, BASIC_KEYWORDS};\n \n-use crate::clean;\n+use crate::clean::{self, ExternalCrate};\n use crate::config::RenderOptions;\n use crate::docfs::{DocFS, PathError};\n use crate::error::Error;\n@@ -304,12 +304,16 @@ impl<'tcx> Context<'tcx> {\n             }\n         } else {\n             let (krate, src_root) = match *self.cache.extern_locations.get(&cnum)? {\n-                (name, ref src, ExternalLocation::Local) => (name, src),\n-                (name, ref src, ExternalLocation::Remote(ref s)) => {\n+                ExternalLocation::Local => {\n+                    let e = ExternalCrate { crate_num: cnum };\n+                    (e.name(self.tcx()), e.src_root(self.tcx()))\n+                }\n+                ExternalLocation::Remote(ref s) => {\n                     root = s.to_string();\n-                    (name, src)\n+                    let e = ExternalCrate { crate_num: cnum };\n+                    (e.name(self.tcx()), e.src_root(self.tcx()))\n                 }\n-                (_, _, ExternalLocation::Unknown) => return None,\n+                ExternalLocation::Unknown => return None,\n             };\n \n             sources::clean_path(&src_root, file, false, |component| {"}, {"sha": "ae4d1be3ec2b8a96c16cc97817c2c23f9fe5af06", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2cc263988ec6920d0f1182d6667251cac0061855/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc263988ec6920d0f1182d6667251cac0061855/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=2cc263988ec6920d0f1182d6667251cac0061855", "patch": "@@ -17,7 +17,7 @@ use rustc_session::Session;\n \n use rustdoc_json_types as types;\n \n-use crate::clean;\n+use crate::clean::{self, ExternalCrate};\n use crate::config::RenderOptions;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n@@ -218,12 +218,13 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                 .cache\n                 .extern_locations\n                 .iter()\n-                .map(|(k, v)| {\n+                .map(|(crate_num, external_location)| {\n+                    let e = ExternalCrate { crate_num: *crate_num };\n                     (\n-                        k.as_u32(),\n+                        crate_num.as_u32(),\n                         types::ExternalCrate {\n-                            name: v.0.to_string(),\n-                            html_root_url: match &v.2 {\n+                            name: e.name(self.tcx).to_string(),\n+                            html_root_url: match external_location {\n                                 ExternalLocation::Remote(s) => Some(s.clone()),\n                                 _ => None,\n                             },"}]}