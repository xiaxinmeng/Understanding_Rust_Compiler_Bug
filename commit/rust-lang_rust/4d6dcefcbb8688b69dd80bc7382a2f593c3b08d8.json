{"sha": "4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNmRjZWZjYmI4Njg4YjY5ZGQ4MGJjNzM4MmEyZjU5M2MzYjA4ZDg=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-27T01:46:48Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-27T14:04:13Z"}, "message": "std: Decode::read_enum_variant should pass in the variant names\n\nBecause the json::Decoder uses the string variant name, we need a\nway to correlate the string to the enum index. This passes in a\nstatic &[&str] to read_enum_variant, which allows the json::Decoder\nto know which branch it's trying to process.", "tree": {"sha": "0c688bb5af8a87ec2566e0d88da9b031e539e625", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c688bb5af8a87ec2566e0d88da9b031e539e625"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8", "html_url": "https://github.com/rust-lang/rust/commit/4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478e4498b76178dc0031f88f0d5ee31c5f804d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/478e4498b76178dc0031f88f0d5ee31c5f804d0b", "html_url": "https://github.com/rust-lang/rust/commit/478e4498b76178dc0031f88f0d5ee31c5f804d0b"}], "stats": {"total": 121, "additions": 116, "deletions": 5}, "files": [{"sha": "7b4d1034f74eb040e7a7c4a370d434a8a091dbae", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8", "patch": "@@ -681,6 +681,7 @@ impl vtable_decoder_helpers for reader::Decoder {\n         @self.read_to_vec(|| self.read_vtable_origin(xcx) )\n     }\n \n+    #[cfg(stage0)]\n     fn read_vtable_origin(&self, xcx: @ExtendedDecodeContext)\n         -> typeck::vtable_origin {\n         do self.read_enum(~\"vtable_origin\") {\n@@ -715,6 +716,44 @@ impl vtable_decoder_helpers for reader::Decoder {\n             }\n         }\n     }\n+\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    #[cfg(stage3)]\n+    fn read_vtable_origin(&self, xcx: @ExtendedDecodeContext)\n+        -> typeck::vtable_origin {\n+        do self.read_enum(\"vtable_origin\") {\n+            do self.read_enum_variant([\"vtable_static\", \"vtable_param\"]) |i| {\n+                match i {\n+                  0 => {\n+                    typeck::vtable_static(\n+                        do self.read_enum_variant_arg(0u) {\n+                            self.read_def_id(xcx)\n+                        },\n+                        do self.read_enum_variant_arg(1u) {\n+                            self.read_tys(xcx)\n+                        },\n+                        do self.read_enum_variant_arg(2u) {\n+                            self.read_vtable_res(xcx)\n+                        }\n+                    )\n+                  }\n+                  1 => {\n+                    typeck::vtable_param(\n+                        do self.read_enum_variant_arg(0u) {\n+                            self.read_uint()\n+                        },\n+                        do self.read_enum_variant_arg(1u) {\n+                            self.read_uint()\n+                        }\n+                    )\n+                  }\n+                  // hard to avoid - user input\n+                  _ => fail!(~\"bad enum variant\")\n+                }\n+            }\n+        }\n+    }\n }\n \n // ______________________________________________________________________"}, {"sha": "60a00bee0acba4a9c6ff82b0407017fc9ea90abc", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8", "patch": "@@ -337,6 +337,7 @@ pub mod reader {\n             self.push_doc(self.next_doc(EsEnum), f)\n         }\n \n+        #[cfg(stage0)]\n         fn read_enum_variant<T>(&self, f: &fn(uint) -> T) -> T {\n             debug!(\"read_enum_variant()\");\n             let idx = self._next_uint(EsEnumVid);\n@@ -346,6 +347,18 @@ pub mod reader {\n             }\n         }\n \n+        #[cfg(stage1)]\n+        #[cfg(stage2)]\n+        #[cfg(stage3)]\n+        fn read_enum_variant<T>(&self, _names: &[&str], f: &fn(uint) -> T) -> T {\n+            debug!(\"read_enum_variant()\");\n+            let idx = self._next_uint(EsEnumVid);\n+            debug!(\"  idx=%u\", idx);\n+            do self.push_doc(self.next_doc(EsEnumBody)) {\n+                f(idx)\n+            }\n+        }\n+\n         fn read_enum_variant_arg<T>(&self, idx: uint, f: &fn() -> T) -> T {\n             debug!(\"read_enum_variant_arg(idx=%u)\", idx);\n             f()\n@@ -400,6 +413,7 @@ pub mod reader {\n             f()\n         }\n \n+        #[cfg(stage0)]\n         fn read_option<T>(&self, f: &fn() -> T) -> Option<T> {\n             debug!(\"read_option()\");\n             do self.read_enum(\"Option\") || {\n@@ -412,6 +426,22 @@ pub mod reader {\n                 }\n             }\n         }\n+\n+        #[cfg(stage1)]\n+        #[cfg(stage2)]\n+        #[cfg(stage3)]\n+        fn read_option<T>(&self, f: &fn() -> T) -> Option<T> {\n+            debug!(\"read_option()\");\n+            do self.read_enum(\"Option\") || {\n+                do self.read_enum_variant([\"None\", \"Some\"]) |idx| {\n+                    match idx {\n+                        0 => None,\n+                        1 => Some(f()),\n+                        _ => fail!(),\n+                    }\n+                }\n+            }\n+        }\n     }\n }\n "}, {"sha": "dc9f629d7e231173a4cdf451ffecab5f32916af7", "filename": "src/libstd/json.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8", "patch": "@@ -855,6 +855,7 @@ impl<'self> serialize::Decoder for Decoder<'self> {\n         f()\n     }\n \n+    #[cfg(stage0)]\n     fn read_enum_variant<T>(&self, f: &fn(uint) -> T) -> T {\n         debug!(\"read_enum_variant()\");\n         let idx = match *self.peek() {\n@@ -864,10 +865,32 @@ impl<'self> serialize::Decoder for Decoder<'self> {\n         f(idx)\n     }\n \n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    #[cfg(stage3)]\n+    fn read_enum_variant<T>(&self, names: &[&str], f: &fn(uint) -> T) -> T {\n+        debug!(\"read_enum_variant(names=%?)\", names);\n+        let name = match *self.peek() {\n+            String(ref s) => s,\n+            List([String(ref s), .. _]) => s,\n+            json => fail!(fmt!(\"invalid variant: %?\", json)),\n+        };\n+        let idx = match vec::position(names, |n| str::eq_slice(*n, *name)) {\n+            Some(idx) => idx,\n+            None => fail!(fmt!(\"Unknown variant name: %?\", name)),\n+        };\n+        f(idx)\n+    }\n+\n     fn read_enum_variant_arg<T>(&self, idx: uint, f: &fn() -> T) -> T {\n         debug!(\"read_enum_variant_arg(idx=%u)\", idx);\n-        if idx != 0 { fail!(~\"unknown index\") }\n-        f()\n+        match *self.peek() {\n+            List(ref list) => {\n+                self.stack.push(&list[idx + 1]);\n+                f()\n+            }\n+            ref json => fail!(fmt!(\"not a list: %?\", json)),\n+        }\n     }\n \n     fn read_owned_vec<T>(&self, f: &fn(uint) -> T) -> T {"}, {"sha": "02f4a934874325bc73ab582ecc2e4fdb624a4b53", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8", "patch": "@@ -92,7 +92,15 @@ pub trait Decoder {\n \n     // Compound types:\n     fn read_enum<T>(&self, name: &str, f: &fn() -> T) -> T;\n+\n+    #[cfg(stage0)]\n     fn read_enum_variant<T>(&self, f: &fn(uint) -> T) -> T;\n+\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    #[cfg(stage3)]\n+    fn read_enum_variant<T>(&self, names: &[&str], f: &fn(uint) -> T) -> T;\n+\n     fn read_enum_variant_arg<T>(&self, idx: uint, f: &fn() -> T) -> T;\n \n     fn read_owned<T>(&self, f: &fn() -> T) -> T;"}, {"sha": "2a112f106a850b43f9eb1a46b309b5b4b362ba73", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=4d6dcefcbb8688b69dd80bc7382a2f593c3b08d8", "patch": "@@ -1059,6 +1059,18 @@ fn mk_enum_deser_body(\n     name: ast::ident,\n     variants: ~[ast::variant]\n ) -> @ast::expr {\n+    let expr_arm_names = build::mk_base_vec_e(\n+        ext_cx,\n+        span,\n+         do variants.map |variant| {\n+            build::mk_base_str(\n+                ext_cx,\n+                span,\n+                ext_cx.str_of(variant.node.name)\n+            )\n+        }\n+    );\n+\n     let mut arms = do variants.mapi |v_idx, variant| {\n         let body = match variant.node.kind {\n             ast::tuple_variant_kind(ref args) => {\n@@ -1152,13 +1164,13 @@ fn mk_enum_deser_body(\n         )\n     );\n \n-    // ast for `__d.read_enum_variant($(expr_lambda))`\n+    // ast for `__d.read_enum_variant($expr_arm_names, $(expr_lambda))`\n     let expr_lambda = ext_cx.lambda_expr(\n         ext_cx.expr_method_call(\n             span,\n             ext_cx.expr_var(span, ~\"__d\"),\n             ext_cx.ident_of(~\"read_enum_variant\"),\n-            ~[expr_lambda]\n+            ~[expr_arm_names, expr_lambda]\n         )\n     );\n \n@@ -1174,7 +1186,6 @@ fn mk_enum_deser_body(\n     )\n }\n \n-\n #[cfg(test)]\n mod test {\n     use core::option::{None, Some};"}]}