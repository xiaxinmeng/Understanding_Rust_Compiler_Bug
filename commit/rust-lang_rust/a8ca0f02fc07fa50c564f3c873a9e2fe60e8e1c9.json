{"sha": "a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4Y2EwZjAyZmMwN2ZhNTBjNTY0ZjNjODczYTllMmZlNjBlOGUxYzk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-14T20:01:18Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-14T20:01:18Z"}, "message": "Support emitting object files (fixes #5)", "tree": {"sha": "c669e0243d7619ed6964f540fbe135b7d24b774b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c669e0243d7619ed6964f540fbe135b7d24b774b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9", "html_url": "https://github.com/rust-lang/rust/commit/a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f26781a8611a985eba374b7581a7b439dde760e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f26781a8611a985eba374b7581a7b439dde760e", "html_url": "https://github.com/rust-lang/rust/commit/0f26781a8611a985eba374b7581a7b439dde760e"}], "stats": {"total": 83, "additions": 60, "deletions": 23}, "files": [{"sha": "75bcfff8c53c08216d55248fe36d05d55995f268", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9", "patch": "@@ -1,3 +1,4 @@\n /target\n **/*.rs.bk\n *.rlib\n+*.o"}, {"sha": "69730353d68f8a9bccb4e8ec33aebc09a3966c35", "filename": "build.sh", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9", "patch": "@@ -12,12 +12,28 @@ else\n    exit 1\n fi\n \n+extract_data() {\n+    ar x $1 data.o &&\n+    chmod +rw data.o &&\n+    mv data.o $2\n+}\n+\n RUSTC=\"rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cranelift.$dylib_ext -L crate=.\"\n \n-SHOULD_CODEGEN=1 $RUSTC examples/mini_core.rs --crate-name mini_core --crate-type lib &&\n-$RUSTC examples/example.rs --crate-type lib &&\n-$RUSTC examples/mini_core_hello_world.rs --crate-type bin &&\n+pushd target/libcore\n+\n+SHOULD_CODEGEN=1 $RUSTC ../../examples/mini_core.rs --crate-name mini_core --crate-type lib &&\n+extract_data libmini_core.rlib mini_core.o &&\n+\n+$RUSTC ../../examples/example.rs --crate-type lib &&\n+\n+SHOULD_RUN=1 $RUSTC ../../examples/mini_core_hello_world.rs --crate-type bin &&\n+\n+$RUSTC ../../examples/mini_core_hello_world.rs --crate-type bin &&\n+extract_data mini_core_hello_world mini_core_hello_world.o\n+\n+gcc mini_core.o mini_core_hello_world.o -o mini_core_hello_world &&\n+./mini_core_hello_world &&\n \n-$RUSTC target/libcore/src/libcore/lib.rs --color=always --crate-type lib -Cincremental=target/libcore/incremental 2>&1 | (head -n 20; echo \"====\"; tail -n 1000)\n-cat target/log.txt | sort | uniq -c | grep -v \"rval unsize move\" | grep -v \"rval len\"\n-rm *.rlib target/log.txt\n+$RUSTC src/libcore/lib.rs --color=always --crate-type lib -Cincremental=incremental 2>&1 | (head -n 20; echo \"====\"; tail -n 1000)\n+cat log.txt | sort | uniq -c | grep -v \"rval unsize move\" | grep -v \"rval len\""}, {"sha": "0559484e1b62d4a27699b65aca5610e2718fd21b", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9", "patch": "@@ -101,7 +101,7 @@ fn trans_fn<'a, 'tcx: 'a>(\n \n     // Step 9. Define function\n     // TODO: cranelift doesn't yet support some of the things needed\n-    if should_codegen(tcx) {\n+    if should_codegen(tcx.sess) {\n         context.func = func;\n         module.define_function(func_id, context).unwrap();\n         context.clear();\n@@ -182,7 +182,7 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n             } => {\n                 fx.bcx.ins().trap(TrapCode::User(0));\n                 // TODO: prevent panics on large and negative disciminants\n-                if should_codegen(fx.tcx) {\n+                if should_codegen(fx.tcx.sess) {\n                     let discr = trans_operand(fx, discr).load_value(fx);\n                     let mut jt_data = JumpTableData::new();\n                     for (i, value) in values.iter().enumerate() {"}, {"sha": "2dc70215679b2d2d085b1dd3e306e0a855cbbd18", "filename": "src/lib.rs", "status": "modified", "additions": 35, "deletions": 15, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a8ca0f02fc07fa50c564f3c873a9e2fe60e8e1c9", "patch": "@@ -34,6 +34,7 @@ use rustc::ty::query::Providers;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_codegen_utils::link::{build_link_meta, out_filename};\n use rustc_data_structures::owning_ref::{self, OwningRef};\n+use rustc_data_structures::svh::Svh;\n use syntax::symbol::Symbol;\n \n use cranelift::codegen::settings;\n@@ -99,9 +100,9 @@ mod prelude {\n \n     pub use crate::{CodegenCx, ModuleTup};\n \n-    pub fn should_codegen(tcx: TyCtxt) -> bool {\n+    pub fn should_codegen(sess: &Session) -> bool {\n         ::std::env::var(\"SHOULD_CODEGEN\").is_ok()\n-            || tcx.sess.crate_types.get().contains(&CrateType::Executable)\n+            || sess.crate_types.get().contains(&CrateType::Executable)\n     }\n }\n \n@@ -120,6 +121,7 @@ pub struct CodegenCx<'a, 'tcx: 'a> {\n \n pub struct ModuleTup<T> {\n     jit: Option<T>,\n+    #[allow(dead_code)]\n     faerie: Option<T>,\n }\n \n@@ -135,7 +137,7 @@ impl MetadataLoader for CraneliftMetadataLoader {\n         // Iterate over all entries in the archive:\n         while let Some(entry_result) = archive.next_entry() {\n             let mut entry = entry_result.map_err(|e| format!(\"{:?}\", e))?;\n-            if entry.header().identifier() == b\".rustc.clif_metadata\" {\n+            if entry.header().identifier().starts_with(b\".rustc.clif_metadata\") {\n                 let mut buf = Vec::new();\n                 ::std::io::copy(&mut entry, &mut buf).map_err(|e| format!(\"{:?}\", e))?;\n                 let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n@@ -182,6 +184,7 @@ struct OngoingCodegen {\n     product: cranelift_faerie::FaerieProduct,\n     metadata: Vec<u8>,\n     crate_name: Symbol,\n+    crate_hash: Svh,\n }\n \n impl CodegenBackend for CraneliftCodegenBackend {\n@@ -190,8 +193,8 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             match *cty {\n                 CrateType::Rlib | CrateType::Dylib | CrateType::Executable => {}\n                 _ => {\n-                    sess.parse_sess.span_diagnostic.warn(&format!(\n-                        \"LLVM unsupported, so output type {} is not supported\",\n+                    sess.err(&format!(\n+                        \"Rustc codegen cranelift doesn't support output type {}\",\n                         cty\n                     ));\n                 }\n@@ -255,6 +258,14 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 _ => {}\n             }\n         }\n+\n+        if !tcx.sess.crate_types.get().contains(&CrateType::Executable)\n+            && std::env::var(\"SHOULD_RUN\").is_ok()\n+        {\n+            tcx.sess\n+                .err(\"Can't JIT run non executable (SHOULD_RUN env var is set)\");\n+        }\n+\n         tcx.sess.abort_if_errors();\n \n         let link_meta = ::build_link_meta(tcx.crate_hash(LOCAL_CRATE));\n@@ -287,7 +298,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 context: Context::new(),\n             };\n \n-            let mut log = ::std::fs::File::create(\"target/log.txt\").unwrap();\n+            let mut log = ::std::fs::File::create(\"log.txt\").unwrap();\n \n             let before = ::std::time::Instant::now();\n             let mono_items =\n@@ -338,7 +349,8 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         tcx.sess.warn(\"Compiled everything\");\n \n         // TODO: this doesn't work most of the time\n-        if tcx.sess.crate_types.get().contains(&CrateType::Executable) {\n+        if std::env::var(\"SHOULD_RUN\").is_ok() {\n+            tcx.sess.warn(\"Rustc codegen cranelift will JIT run the executable, because the SHOULD_RUN env var is set\");\n             let start_wrapper = tcx.lang_items().start_fn().expect(\"no start lang item\");\n \n             let (name, sig) =\n@@ -361,7 +373,8 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             tcx.sess.warn(&format!(\"main returned {}\", res));\n \n             jit_module.finish();\n-        } else if should_codegen(tcx) {\n+            ::std::process::exit(0);\n+        } else if should_codegen(tcx.sess) {\n             jit_module.finalize_all();\n             faerie_module.finalize_all();\n \n@@ -372,6 +385,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             product: faerie_module.finish(),\n             metadata: metadata.raw_data,\n             crate_name: tcx.crate_name(LOCAL_CRATE),\n+            crate_hash: tcx.crate_hash(LOCAL_CRATE),\n         })\n     }\n \n@@ -389,9 +403,10 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         let mut artifact = ongoing_codegen.product.artifact;\n         let metadata = ongoing_codegen.metadata;\n \n+        let metadata_name = \".rustc.clif_metadata\".to_string() + &ongoing_codegen.crate_hash.to_string();\n         artifact\n             .declare_with(\n-                \".rustc.clif_metadata\",\n+                &metadata_name,\n                 faerie::artifact::Decl::Data {\n                     global: true,\n                     writeable: false,\n@@ -401,10 +416,8 @@ impl CodegenBackend for CraneliftCodegenBackend {\n \n         for &crate_type in sess.opts.crate_types.iter() {\n             match crate_type {\n-                CrateType::Executable => {\n-                    sess.warn(\"Rustc codegen cranelift doesn't produce executables, but is a JIT for them\");\n-                },\n-                CrateType::Rlib /* | CrateType::Dylib */ => {\n+                // TODO: link executable\n+                CrateType::Executable | CrateType::Rlib => {\n                     let output_name = out_filename(\n                         sess,\n                         crate_type,\n@@ -415,10 +428,17 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                     let mut builder = ar::Builder::new(file);\n                     builder\n                         .append(\n-                            &ar::Header::new(b\".rustc.clif_metadata\".to_vec(), metadata.len() as u64),\n+                            &ar::Header::new(metadata_name.as_bytes().to_vec(), metadata.len() as u64),\n                             ::std::io::Cursor::new(metadata.clone()),\n                         ).unwrap();\n-                    //artifact.write(file).unwrap();\n+                    if should_codegen(sess) {\n+                        let obj = artifact.emit().unwrap();\n+                        builder\n+                            .append(\n+                                &ar::Header::new(b\"data.o\".to_vec(), obj.len() as u64),\n+                                ::std::io::Cursor::new(obj),\n+                            ).unwrap();\n+                    }\n                 }\n                 _ => sess.fatal(&format!(\"Unsupported crate type: {:?}\", crate_type)),\n             }"}]}