{"sha": "2084f2ed77e28d78c8dfbd378251b29068a8c579", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwODRmMmVkNzdlMjhkNzhjOGRmYmQzNzgyNTFiMjkwNjhhOGM1Nzk=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-03-30T23:12:29Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-04-01T22:36:08Z"}, "message": "Implement `values_mut` on `BTreeMap`.\n\nhttps://github.com/rust-lang/rust/issues/32551", "tree": {"sha": "4b658d05bb54edb8a1621669399b78e5912d1645", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b658d05bb54edb8a1621669399b78e5912d1645"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2084f2ed77e28d78c8dfbd378251b29068a8c579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2084f2ed77e28d78c8dfbd378251b29068a8c579", "html_url": "https://github.com/rust-lang/rust/commit/2084f2ed77e28d78c8dfbd378251b29068a8c579", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2084f2ed77e28d78c8dfbd378251b29068a8c579/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5972b22b7cdf2c4de2729ee874c1742a4ae97589", "url": "https://api.github.com/repos/rust-lang/rust/commits/5972b22b7cdf2c4de2729ee874c1742a4ae97589", "html_url": "https://github.com/rust-lang/rust/commit/5972b22b7cdf2c4de2729ee874c1742a4ae97589"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "de40568fd6704d97f0cb4399efca81113993055b", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2084f2ed77e28d78c8dfbd378251b29068a8c579/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2084f2ed77e28d78c8dfbd378251b29068a8c579/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=2084f2ed77e28d78c8dfbd378251b29068a8c579", "patch": "@@ -285,6 +285,12 @@ pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n }\n \n+/// A mutable iterator over a BTreeMap's values.\n+#[unstable(feature = \"map_values_mut\", reason = \"recently added\", issue = \"32551\")]\n+pub struct ValuesMut<'a, K: 'a, V: 'a> {\n+    inner: IterMut<'a, K, V>,\n+}\n+\n /// An iterator over a sub-range of BTreeMap's entries.\n pub struct Range<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n@@ -1006,6 +1012,33 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n     }\n }\n \n+#[unstable(feature = \"map_values_mut\", reason = \"recently added\", issue = \"32551\")]\n+impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {\n+    type Item = &'a mut V;\n+\n+    fn next(&mut self) -> Option<&'a mut V> {\n+        self.inner.next().map(|(_, v)| v)\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.inner.size_hint()\n+    }\n+}\n+\n+#[unstable(feature = \"map_values_mut\", reason = \"recently added\", issue = \"32551\")]\n+impl<'a, K, V> DoubleEndedIterator for ValuesMut<'a, K, V> {\n+    fn next_back(&mut self) -> Option<&'a mut V> {\n+        self.inner.next_back().map(|(_, v)| v)\n+    }\n+}\n+\n+#[unstable(feature = \"map_values_mut\", reason = \"recently added\", issue = \"32551\")]\n+impl<'a, K, V> ExactSizeIterator for ValuesMut<'a, K, V> {\n+    fn len(&self) -> usize {\n+        self.inner.len()\n+    }\n+}\n+\n impl<'a, K, V> Range<'a, K, V> {\n     unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) {\n         let handle = self.front;\n@@ -1403,6 +1436,33 @@ impl<K, V> BTreeMap<K, V> {\n         Values { inner: self.iter() }\n     }\n \n+    /// Gets a mutable iterator over the values of the map, in order by key.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// # #![feature(map_values_mut)]\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut a = BTreeMap::new();\n+    /// a.insert(1, String::from(\"hello\"));\n+    /// a.insert(2, String::from(\"goodbye\"));\n+    ///\n+    /// for value in a.values_mut() {\n+    ///     value.push_str(\"!\");\n+    /// }\n+    ///\n+    /// let values: Vec<String> = a.values().cloned().collect();\n+    /// assert_eq!(values, [String::from(\"hello!\"),\n+    ///                     String::from(\"goodbye!\")]);\n+    /// ```\n+    #[unstable(feature = \"map_values_mut\", reason = \"recently added\", issue = \"32551\")]\n+    pub fn values_mut<'a>(&'a mut self) -> ValuesMut<'a, K, V> {\n+        ValuesMut { inner: self.iter_mut() }\n+    }\n+\n     /// Returns the number of elements in the map.\n     ///\n     /// # Examples"}, {"sha": "619bc189e6c09855d4dd24a7099d889f56a0acb9", "filename": "src/libcollectionstest/btree/map.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2084f2ed77e28d78c8dfbd378251b29068a8c579/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2084f2ed77e28d78c8dfbd378251b29068a8c579/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fmap.rs?ref=2084f2ed77e28d78c8dfbd378251b29068a8c579", "patch": "@@ -114,6 +114,21 @@ fn test_iter_rev() {\n     test(size, map.into_iter().rev());\n }\n \n+#[test]\n+fn test_values_mut() {\n+    let mut a = BTreeMap::new();\n+    a.insert(1, String::from(\"hello\"));\n+    a.insert(2, String::from(\"goodbye\"));\n+\n+    for value in a.values_mut() {\n+        value.push_str(\"!\");\n+    }\n+\n+    let values: Vec<String> = a.values().cloned().collect();\n+    assert_eq!(values, [String::from(\"hello!\"),\n+                        String::from(\"goodbye!\")]);\n+}\n+\n #[test]\n fn test_iter_mixed() {\n     let size = 10000;"}, {"sha": "045ac1ce977fcc9399e5f05b0ffec1b3d5afae3f", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2084f2ed77e28d78c8dfbd378251b29068a8c579/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2084f2ed77e28d78c8dfbd378251b29068a8c579/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=2084f2ed77e28d78c8dfbd378251b29068a8c579", "patch": "@@ -22,6 +22,7 @@\n #![feature(enumset)]\n #![feature(iter_arith)]\n #![feature(map_entry_keys)]\n+#![feature(map_values_mut)]\n #![feature(pattern)]\n #![feature(rand)]\n #![feature(set_recovery)]"}]}