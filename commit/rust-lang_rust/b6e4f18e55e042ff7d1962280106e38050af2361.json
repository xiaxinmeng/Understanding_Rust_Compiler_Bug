{"sha": "b6e4f18e55e042ff7d1962280106e38050af2361", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZTRmMThlNTVlMDQyZmY3ZDE5NjIyODAxMDZlMzgwNTBhZjIzNjE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-27T06:01:01Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-31T19:42:27Z"}, "message": "Replace some aborts with Results\n\nFixes #31207\n\nby removing abort_if_new_errors", "tree": {"sha": "671f6ee5fa2e0ea023b52b8623ac5187136d6150", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/671f6ee5fa2e0ea023b52b8623ac5187136d6150"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6e4f18e55e042ff7d1962280106e38050af2361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e4f18e55e042ff7d1962280106e38050af2361", "html_url": "https://github.com/rust-lang/rust/commit/b6e4f18e55e042ff7d1962280106e38050af2361", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6e4f18e55e042ff7d1962280106e38050af2361/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9041b930585806b948b4cc68933047ffdc96f6f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9041b930585806b948b4cc68933047ffdc96f6f9", "html_url": "https://github.com/rust-lang/rust/commit/9041b930585806b948b4cc68933047ffdc96f6f9"}], "stats": {"total": 162, "additions": 79, "deletions": 83}, "files": [{"sha": "48955bd9a15af5278179897dbbc9fe255f1bb931", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=b6e4f18e55e042ff7d1962280106e38050af2361", "patch": "@@ -93,9 +93,12 @@ type Scope<'a> = &'a ScopeChain<'a>;\n \n static ROOT_SCOPE: ScopeChain<'static> = RootScope;\n \n-pub fn krate(sess: &Session, krate: &hir::Crate, def_map: &DefMap) -> NamedRegionMap {\n+pub fn krate(sess: &Session,\n+             krate: &hir::Crate,\n+             def_map: &DefMap)\n+             -> Result<NamedRegionMap, usize> {\n     let mut named_region_map = NodeMap();\n-    sess.abort_if_new_errors(|| {\n+    try!(sess.track_errors(|| {\n         krate.visit_all_items(&mut LifetimeContext {\n             sess: sess,\n             named_region_map: &mut named_region_map,\n@@ -104,8 +107,8 @@ pub fn krate(sess: &Session, krate: &hir::Crate, def_map: &DefMap) -> NamedRegio\n             trait_ref_hack: false,\n             labels_in_fn: vec![],\n         });\n-    });\n-    named_region_map\n+    }));\n+    Ok(named_region_map)\n }\n \n impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {"}, {"sha": "2185d22d34e43b7c2db184e1ff41fdf534840856", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=b6e4f18e55e042ff7d1962280106e38050af2361", "patch": "@@ -188,17 +188,6 @@ impl Session {\n             Err(count)\n         }\n     }\n-    pub fn abort_if_new_errors<F, T>(&self, f: F) -> T\n-        where F: FnOnce() -> T\n-    {\n-        match self.track_errors(f) {\n-            Ok(result) => result,\n-            Err(_) => {\n-                self.abort_if_errors();\n-                unreachable!();\n-            }\n-        }\n-    }\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.diagnostic().span_warn(sp, msg)\n     }\n@@ -515,3 +504,15 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n     };\n     emitter.emit(None, msg, None, errors::Level::Warning);\n }\n+\n+// Err(0) means compilation was stopped, but no errors were found.\n+// This would be better as a dedicated enum, but using try! is so convenient.\n+pub type CompileResult = Result<(), usize>;\n+\n+pub fn compile_result_from_err_count(err_count: usize) -> CompileResult {\n+    if err_count == 0 {\n+        Ok(())\n+    } else {\n+        Err(err_count)\n+    }\n+}"}, {"sha": "0a5f6d84de16f8cdd52b23fabf6509f2dd3a00db", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=b6e4f18e55e042ff7d1962280106e38050af2361", "patch": "@@ -12,7 +12,7 @@ use rustc::front;\n use rustc::front::map as hir_map;\n use rustc_mir as mir;\n use rustc_mir::mir_map::MirMap;\n-use rustc::session::Session;\n+use rustc::session::{Session, CompileResult, compile_result_from_err_count};\n use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n use rustc::session::search_paths::PathKind;\n use rustc::lint;\n@@ -35,7 +35,7 @@ use rustc_plugin as plugin;\n use rustc_front::hir;\n use rustc_front::lowering::{lower_crate, LoweringContext};\n use rustc_passes::{no_asm, loops, consts, const_fn, rvalues, static_recursion};\n-use super::{Compilation, CompileResult, compile_result_from_err_count};\n+use super::Compilation;\n \n use serialize::json;\n \n@@ -659,9 +659,9 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         })\n     }));\n \n-    time(time_passes,\n-         \"const fn bodies and arguments\",\n-         || const_fn::check_crate(sess, &krate));\n+    try!(time(time_passes,\n+              \"const fn bodies and arguments\",\n+              || const_fn::check_crate(sess, &krate)));\n \n     if sess.opts.debugging_opts.input_stats {\n         println!(\"Post-expansion node count: {}\", count_nodes(&krate));\n@@ -739,9 +739,11 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n              \"resolution\",\n              || resolve::resolve_crate(sess, &hir_map, make_glob_map));\n \n-    let named_region_map = time(time_passes,\n-                                \"lifetime resolution\",\n-                                || middle::resolve_lifetime::krate(sess, krate, &def_map.borrow()));\n+    let named_region_map = try!(time(time_passes,\n+                                     \"lifetime resolution\",\n+                                     || middle::resolve_lifetime::krate(sess,\n+                                                                        krate,\n+                                                                        &def_map.borrow())));\n \n     time(time_passes,\n          \"looking for entry point\",\n@@ -759,9 +761,9 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n          \"loop checking\",\n          || loops::check_crate(sess, krate));\n \n-    time(time_passes,\n-         \"static item recursion checking\",\n-         || static_recursion::check_crate(sess, krate, &def_map.borrow(), &hir_map));\n+    try!(time(time_passes,\n+              \"static item recursion checking\",\n+              || static_recursion::check_crate(sess, krate, &def_map.borrow(), &hir_map)));\n \n     ty::ctxt::create_and_enter(sess,\n                                arenas,\n@@ -774,7 +776,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                                stability::Index::new(krate),\n                                |tcx| {\n         // passes are timed inside typeck\n-        typeck::check_crate(tcx, trait_map);\n+        try!(typeck::check_crate(tcx, trait_map));\n \n         time(time_passes,\n              \"const checking\","}, {"sha": "baeef135d75706c6b00eb109d7b06eb201e60bfa", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=b6e4f18e55e042ff7d1962280106e38050af2361", "patch": "@@ -63,7 +63,7 @@ use pretty::{PpMode, UserIdentifiedItem};\n use rustc_resolve as resolve;\n use rustc_trans::back::link;\n use rustc_trans::save;\n-use rustc::session::{config, Session, build_session};\n+use rustc::session::{config, Session, build_session, CompileResult};\n use rustc::session::config::{Input, PrintRequest, OutputType, ErrorOutputType};\n use rustc::middle::cstore::CrateStore;\n use rustc::lint::Lint;\n@@ -105,18 +105,6 @@ pub mod target_features;\n const BUG_REPORT_URL: &'static str = \"https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.\\\n                                       md#bug-reports\";\n \n-// Err(0) means compilation was stopped, but no errors were found.\n-// This would be better as a dedicated enum, but using try! is so convenient.\n-pub type CompileResult = Result<(), usize>;\n-\n-pub fn compile_result_from_err_count(err_count: usize) -> CompileResult {\n-    if err_count == 0 {\n-        Ok(())\n-    } else {\n-        Err(err_count)\n-    }\n-}\n-\n #[inline]\n fn abort_msg(err_count: usize) -> String {\n     match err_count {"}, {"sha": "f924210da9f460658b479b57bb2b6fd5c0925ce1", "filename": "src/librustc_passes/const_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibrustc_passes%2Fconst_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibrustc_passes%2Fconst_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconst_fn.rs?ref=b6e4f18e55e042ff7d1962280106e38050af2361", "patch": "@@ -11,16 +11,16 @@\n //! Verifies that const fn arguments are immutable by value bindings\n //! and the const fn body doesn't contain any statements\n \n-use rustc::session::Session;\n+use rustc::session::{Session, CompileResult};\n \n use syntax::ast;\n use syntax::visit::{self, Visitor, FnKind};\n use syntax::codemap::Span;\n \n-pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n-    sess.abort_if_new_errors(|| {\n+pub fn check_crate(sess: &Session, krate: &ast::Crate) -> CompileResult {\n+    sess.track_errors(|| {\n         visit::walk_crate(&mut CheckConstFn{ sess: sess }, krate);\n-    });\n+    })\n }\n \n struct CheckConstFn<'a> {"}, {"sha": "2d81354495d54567e57da17466f134a76837ec99", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=b6e4f18e55e042ff7d1962280106e38050af2361", "patch": "@@ -12,7 +12,7 @@\n // recursively.\n \n use rustc::front::map as ast_map;\n-use rustc::session::Session;\n+use rustc::session::{Session, CompileResult};\n use rustc::middle::def::{Def, DefMap};\n use rustc::util::nodemap::NodeMap;\n \n@@ -92,16 +92,16 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckCrateVisitor<'a, 'ast> {\n pub fn check_crate<'ast>(sess: &Session,\n                          krate: &'ast hir::Crate,\n                          def_map: &DefMap,\n-                         ast_map: &ast_map::Map<'ast>) {\n+                         ast_map: &ast_map::Map<'ast>) -> CompileResult {\n     let mut visitor = CheckCrateVisitor {\n         sess: sess,\n         def_map: def_map,\n         ast_map: ast_map,\n         discriminant_map: RefCell::new(NodeMap()),\n     };\n-    sess.abort_if_new_errors(|| {\n+    sess.track_errors(|| {\n         krate.visit_all_items(&mut visitor);\n-    });\n+    })\n }\n \n struct CheckItemRecursionVisitor<'a, 'ast: 'a> {"}, {"sha": "e923eb540ad5fd91906a25194f2c2a4996322509", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b6e4f18e55e042ff7d1962280106e38050af2361", "patch": "@@ -105,7 +105,7 @@ use middle::ty::fold::{TypeFolder, TypeFoldable};\n use middle::ty::util::Representability;\n use require_c_abi_if_variadic;\n use rscope::{ElisionFailureInfo, RegionScope};\n-use session::Session;\n+use session::{Session, CompileResult};\n use {CrateCtxt, lookup_full_def};\n use TypeAndSubsts;\n use lint;\n@@ -383,29 +383,29 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckItemBodiesVisitor<'a, 'tcx> {\n     }\n }\n \n-pub fn check_wf_new(ccx: &CrateCtxt) {\n-    ccx.tcx.sess.abort_if_new_errors(|| {\n+pub fn check_wf_new(ccx: &CrateCtxt) -> CompileResult {\n+    ccx.tcx.sess.track_errors(|| {\n         let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(ccx);\n         ccx.tcx.visit_all_items_in_krate(DepNode::WfCheck, &mut visit);\n-    });\n+    })\n }\n \n-pub fn check_item_types(ccx: &CrateCtxt) {\n-    ccx.tcx.sess.abort_if_new_errors(|| {\n+pub fn check_item_types(ccx: &CrateCtxt) -> CompileResult {\n+    ccx.tcx.sess.track_errors(|| {\n         let mut visit = CheckItemTypesVisitor { ccx: ccx };\n         ccx.tcx.visit_all_items_in_krate(DepNode::TypeckItemType, &mut visit);\n-    });\n+    })\n }\n \n-pub fn check_item_bodies(ccx: &CrateCtxt) {\n-    ccx.tcx.sess.abort_if_new_errors(|| {\n+pub fn check_item_bodies(ccx: &CrateCtxt) -> CompileResult {\n+    ccx.tcx.sess.track_errors(|| {\n         let mut visit = CheckItemBodiesVisitor { ccx: ccx };\n         ccx.tcx.visit_all_items_in_krate(DepNode::TypeckItemBody, &mut visit);\n-    });\n+    })\n }\n \n-pub fn check_drop_impls(ccx: &CrateCtxt) {\n-    ccx.tcx.sess.abort_if_new_errors(|| {\n+pub fn check_drop_impls(ccx: &CrateCtxt) -> CompileResult {\n+    ccx.tcx.sess.track_errors(|| {\n         let _task = ccx.tcx.dep_graph.in_task(DepNode::Dropck);\n         let drop_trait = match ccx.tcx.lang_items.drop_trait() {\n             Some(id) => ccx.tcx.lookup_trait_def(id), None => { return }\n@@ -421,7 +421,7 @@ pub fn check_drop_impls(ccx: &CrateCtxt) {\n                 }\n             }\n         });\n-    });\n+    })\n }\n \n fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,"}, {"sha": "cb0b4d0902c7ce4fc68469cbd04a6865be7ff52f", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=b6e4f18e55e042ff7d1962280106e38050af2361", "patch": "@@ -105,7 +105,7 @@ use middle::def::Def;\n use middle::infer::{self, TypeOrigin};\n use middle::subst;\n use middle::ty::{self, Ty, TypeFoldable};\n-use session::config;\n+use session::{config, CompileResult};\n use util::common::time;\n use rustc_front::hir;\n \n@@ -323,7 +323,7 @@ fn check_for_entry_fn(ccx: &CrateCtxt) {\n     }\n }\n \n-pub fn check_crate(tcx: &ty::ctxt, trait_map: ty::TraitMap) {\n+pub fn check_crate(tcx: &ty::ctxt, trait_map: ty::TraitMap) -> CompileResult {\n     let time_passes = tcx.sess.time_passes();\n     let ccx = CrateCtxt {\n         trait_map: trait_map,\n@@ -333,34 +333,40 @@ pub fn check_crate(tcx: &ty::ctxt, trait_map: ty::TraitMap) {\n \n     // this ensures that later parts of type checking can assume that items\n     // have valid types and not error\n-    tcx.sess.abort_if_new_errors(|| {\n+    try!(tcx.sess.track_errors(|| {\n         time(time_passes, \"type collecting\", ||\n              collect::collect_item_types(tcx));\n \n-    });\n+    }));\n \n     time(time_passes, \"variance inference\", ||\n          variance::infer_variance(tcx));\n \n-    tcx.sess.abort_if_new_errors(|| {\n+    try!(tcx.sess.track_errors(|| {\n       time(time_passes, \"coherence checking\", ||\n           coherence::check_coherence(&ccx));\n-    });\n+    }));\n \n-    time(time_passes, \"wf checking\", ||\n-        check::check_wf_new(&ccx));\n+    try!(time(time_passes, \"wf checking\", ||\n+        check::check_wf_new(&ccx)));\n \n-    time(time_passes, \"item-types checking\", ||\n-        check::check_item_types(&ccx));\n+    try!(time(time_passes, \"item-types checking\", ||\n+        check::check_item_types(&ccx)));\n \n-    time(time_passes, \"item-bodies checking\", ||\n-        check::check_item_bodies(&ccx));\n+    try!(time(time_passes, \"item-bodies checking\", ||\n+        check::check_item_bodies(&ccx)));\n \n-    time(time_passes, \"drop-impl checking\", ||\n-        check::check_drop_impls(&ccx));\n+    try!(time(time_passes, \"drop-impl checking\", ||\n+        check::check_drop_impls(&ccx)));\n \n     check_for_entry_fn(&ccx);\n-    tcx.sess.abort_if_errors();\n+\n+    let err_count = tcx.sess.err_count();\n+    if err_count == 0 {\n+        Ok(())\n+    } else {\n+        Err(err_count)\n+    }\n }\n \n __build_diagnostic_array! { librustc_typeck, DIAGNOSTICS }"}, {"sha": "bff5071b8ec10104bafa1b4dc2026f98db75a8b7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e4f18e55e042ff7d1962280106e38050af2361/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b6e4f18e55e042ff7d1962280106e38050af2361", "patch": "@@ -2483,8 +2483,7 @@ impl<'a> Parser<'a> {\n                                     float.trunc() as usize,\n                                     format!(\".{}\", fstr.splitn(2, \".\").last().unwrap())));\n                     }\n-                    err.emit();\n-                    self.abort_if_errors();\n+                    return Err(err);\n \n                   }\n                   _ => {\n@@ -4117,9 +4116,7 @@ impl<'a> Parser<'a> {\n                               or did you mean the comma-separated arguments \\\n                               'a, Type?\");\n             err.span_note(mk_sp(span_lo, span_hi), &msg);\n-            err.emit();\n-\n-            self.abort_if_errors()\n+            return Err(err);\n         }\n \n         // First parse types.\n@@ -5189,8 +5186,7 @@ impl<'a> Parser<'a> {\n                                         of possibly redeclaring it\",\n                                        paths.name));\n             }\n-            err.emit();\n-            self.abort_if_errors();\n+            return Err(err);\n         }\n \n         match paths.result {"}]}