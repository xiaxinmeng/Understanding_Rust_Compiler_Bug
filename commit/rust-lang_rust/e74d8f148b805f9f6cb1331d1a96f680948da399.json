{"sha": "e74d8f148b805f9f6cb1331d1a96f680948da399", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NGQ4ZjE0OGI4MDVmOWY2Y2IxMzMxZDFhOTZmNjgwOTQ4ZGEzOTk=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-05-19T09:44:29Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-05-19T09:44:29Z"}, "message": "Add default type to GenericParam", "tree": {"sha": "38d94ce707d8cc6248edcf2bf36d4667ea8a4a52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38d94ce707d8cc6248edcf2bf36d4667ea8a4a52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e74d8f148b805f9f6cb1331d1a96f680948da399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e74d8f148b805f9f6cb1331d1a96f680948da399", "html_url": "https://github.com/rust-lang/rust/commit/e74d8f148b805f9f6cb1331d1a96f680948da399", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e74d8f148b805f9f6cb1331d1a96f680948da399/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64ab5ab10d32e7e8ec085af818d3d94211aea39b", "url": "https://api.github.com/repos/rust-lang/rust/commits/64ab5ab10d32e7e8ec085af818d3d94211aea39b", "html_url": "https://github.com/rust-lang/rust/commit/64ab5ab10d32e7e8ec085af818d3d94211aea39b"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "a635c71847d8d64e13f9a70a0c2227089a81af89", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e74d8f148b805f9f6cb1331d1a96f680948da399/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74d8f148b805f9f6cb1331d1a96f680948da399/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=e74d8f148b805f9f6cb1331d1a96f680948da399", "patch": "@@ -5,7 +5,7 @@\n \n use std::sync::Arc;\n \n-use ra_syntax::ast::{self, NameOwner, TypeParamsOwner, TypeBoundsOwner};\n+use ra_syntax::ast::{self, NameOwner, TypeParamsOwner, TypeBoundsOwner, DefaultTypeParamOwner};\n \n use crate::{\n     db::{ HirDatabase, DefDatabase},\n@@ -18,6 +18,7 @@ pub struct GenericParam {\n     // FIXME: give generic params proper IDs\n     pub(crate) idx: u32,\n     pub(crate) name: Name,\n+    pub(crate) default: Option<Path>,\n }\n \n /// Data about the generic parameters of a function, struct, impl, etc.\n@@ -68,7 +69,11 @@ impl GenericParams {\n             GenericDef::Enum(it) => generics.fill(&*it.source(db).1, start),\n             GenericDef::Trait(it) => {\n                 // traits get the Self type as an implicit first type parameter\n-                generics.params.push(GenericParam { idx: start, name: Name::self_type() });\n+                generics.params.push(GenericParam {\n+                    idx: start,\n+                    name: Name::self_type(),\n+                    default: None,\n+                });\n                 generics.fill(&*it.source(db).1, start + 1);\n             }\n             GenericDef::TypeAlias(it) => generics.fill(&*it.source(db).1, start),\n@@ -90,7 +95,9 @@ impl GenericParams {\n     fn fill_params(&mut self, params: &ast::TypeParamList, start: u32) {\n         for (idx, type_param) in params.type_params().enumerate() {\n             let name = type_param.name().map(AsName::as_name).unwrap_or_else(Name::missing);\n-            let param = GenericParam { idx: idx as u32 + start, name: name.clone() };\n+            let default = type_param.default_type().and_then(|t| t.path()).and_then(Path::from_ast);\n+\n+            let param = GenericParam { idx: idx as u32 + start, name: name.clone(), default };\n             self.params.push(param);\n \n             let type_ref = TypeRef::Path(name.into());"}]}