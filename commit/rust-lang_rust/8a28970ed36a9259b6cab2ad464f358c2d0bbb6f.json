{"sha": "8a28970ed36a9259b6cab2ad464f358c2d0bbb6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMjg5NzBlZDM2YTkyNTliNmNhYjJhZDQ2NGYzNThjMmQwYmJiNmY=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-02T02:08:33Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-02T02:10:13Z"}, "message": "libcore: Make `ChainIterator` take two different-typed `Iterator`s.", "tree": {"sha": "9c9ee41c555b8b1b658fc6b999333784721bf01d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c9ee41c555b8b1b658fc6b999333784721bf01d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a28970ed36a9259b6cab2ad464f358c2d0bbb6f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a28970ed36a9259b6cab2ad464f358c2d0bbb6f", "html_url": "https://github.com/rust-lang/rust/commit/8a28970ed36a9259b6cab2ad464f358c2d0bbb6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a28970ed36a9259b6cab2ad464f358c2d0bbb6f/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3e7c746dddf24935bd55330d20b692fb0e691a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e7c746dddf24935bd55330d20b692fb0e691a6", "html_url": "https://github.com/rust-lang/rust/commit/d3e7c746dddf24935bd55330d20b692fb0e691a6"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "5e95485b2736086e8b0ec00a8fd869bc37766930", "filename": "src/libcore/iterator.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8a28970ed36a9259b6cab2ad464f358c2d0bbb6f/src%2Flibcore%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a28970ed36a9259b6cab2ad464f358c2d0bbb6f/src%2Flibcore%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiterator.rs?ref=8a28970ed36a9259b6cab2ad464f358c2d0bbb6f", "patch": "@@ -29,7 +29,7 @@ pub trait Iterator<A> {\n ///\n /// In the future these will be default methods instead of a utility trait.\n pub trait IteratorUtil<A> {\n-    fn chain(self, other: Self) -> ChainIterator<Self>;\n+    fn chain<U: Iterator<A>>(self, other: U) -> ChainIterator<Self, U>;\n     fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<Self, U>;\n     // FIXME: #5898: should be called map\n     fn transform<'r, B>(self, f: &'r fn(A) -> B) -> MapIterator<'r, A, B, Self>;\n@@ -50,7 +50,7 @@ pub trait IteratorUtil<A> {\n /// In the future these will be default methods instead of a utility trait.\n impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     #[inline(always)]\n-    fn chain(self, other: T) -> ChainIterator<T> {\n+    fn chain<U: Iterator<A>>(self, other: U) -> ChainIterator<T, U> {\n         ChainIterator{a: self, b: other, flag: false}\n     }\n \n@@ -115,13 +115,13 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     }\n }\n \n-pub struct ChainIterator<T> {\n+pub struct ChainIterator<T, U> {\n     priv a: T,\n-    priv b: T,\n+    priv b: U,\n     priv flag: bool\n }\n \n-impl<A, T: Iterator<A>> Iterator<A> for ChainIterator<T> {\n+impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for ChainIterator<T, U> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         if self.flag {\n@@ -385,7 +385,7 @@ mod tests {\n     #[test]\n     fn test_iterator_chain() {\n         let xs = [0u, 1, 2, 3, 4, 5];\n-        let ys = [30, 40, 50, 60];\n+        let ys = [30u, 40, 50, 60];\n         let expected = [0, 1, 2, 3, 4, 5, 30, 40, 50, 60];\n         let mut it = xs.iter().chain(ys.iter());\n         let mut i = 0;\n@@ -394,6 +394,15 @@ mod tests {\n             i += 1;\n         }\n         assert_eq!(i, expected.len());\n+\n+        let ys = Counter::new(30u, 10).take(4);\n+        let mut it = xs.iter().transform(|&x| x).chain(ys);\n+        let mut i = 0;\n+        for it.advance |x: uint| {\n+            assert_eq!(x, expected[i]);\n+            i += 1;\n+        }\n+        assert_eq!(i, expected.len());\n     }\n \n     #[test]"}]}