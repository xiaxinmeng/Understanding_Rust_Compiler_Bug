{"sha": "7234141f95579ac84e4bab4f804c25e92b5b22a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMzQxNDFmOTU1NzlhYzg0ZTRiYWI0ZjgwNGMyNWU5MmI1YjIyYTQ=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-05-25T00:55:41Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-05-25T14:42:21Z"}, "message": "Fix documentation style inconsistencies", "tree": {"sha": "90a5dcf22946f07bd2a9a69a967efec5be7252c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90a5dcf22946f07bd2a9a69a967efec5be7252c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7234141f95579ac84e4bab4f804c25e92b5b22a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7234141f95579ac84e4bab4f804c25e92b5b22a4", "html_url": "https://github.com/rust-lang/rust/commit/7234141f95579ac84e4bab4f804c25e92b5b22a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7234141f95579ac84e4bab4f804c25e92b5b22a4/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "126561cb31e8ebe1e2dd9dfd0d3ca621308dc56f", "url": "https://api.github.com/repos/rust-lang/rust/commits/126561cb31e8ebe1e2dd9dfd0d3ca621308dc56f", "html_url": "https://github.com/rust-lang/rust/commit/126561cb31e8ebe1e2dd9dfd0d3ca621308dc56f"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "3296cb4db816d9eef2dc03e5de3d3d40c2c1559e", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7234141f95579ac84e4bab4f804c25e92b5b22a4/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7234141f95579ac84e4bab4f804c25e92b5b22a4/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=7234141f95579ac84e4bab4f804c25e92b5b22a4", "patch": "@@ -319,7 +319,7 @@ impl Ipv4Addr {\n         Ipv4Addr { inner: c::in_addr { s_addr: u32::from_ne_bytes([a, b, c, d]) } }\n     }\n \n-    /// An IPv4 address with the address pointing to localhost: 127.0.0.1.\n+    /// An IPv4 address with the address pointing to localhost: `127.0.0.1`\n     ///\n     /// # Examples\n     ///\n@@ -332,7 +332,7 @@ impl Ipv4Addr {\n     #[stable(feature = \"ip_constructors\", since = \"1.30.0\")]\n     pub const LOCALHOST: Self = Ipv4Addr::new(127, 0, 0, 1);\n \n-    /// An IPv4 address representing an unspecified address: 0.0.0.0\n+    /// An IPv4 address representing an unspecified address: `0.0.0.0`\n     ///\n     /// This corresponds to the constant `INADDR_ANY` in other languages.\n     ///\n@@ -348,7 +348,7 @@ impl Ipv4Addr {\n     #[stable(feature = \"ip_constructors\", since = \"1.30.0\")]\n     pub const UNSPECIFIED: Self = Ipv4Addr::new(0, 0, 0, 0);\n \n-    /// An IPv4 address representing the broadcast address: 255.255.255.255\n+    /// An IPv4 address representing the broadcast address: `255.255.255.255`\n     ///\n     /// # Examples\n     ///\n@@ -379,7 +379,7 @@ impl Ipv4Addr {\n         self.inner.s_addr.to_ne_bytes()\n     }\n \n-    /// Returns [`true`] for the special 'unspecified' address (0.0.0.0).\n+    /// Returns [`true`] for the special 'unspecified' address (`0.0.0.0`).\n     ///\n     /// This property is defined in _UNIX Network Programming, Second Edition_,\n     /// W. Richard Stevens, p. 891; see also [ip7].\n@@ -401,7 +401,7 @@ impl Ipv4Addr {\n         self.inner.s_addr == 0\n     }\n \n-    /// Returns [`true`] if this is a loopback address (127.0.0.0/8).\n+    /// Returns [`true`] if this is a loopback address (`127.0.0.0/8`).\n     ///\n     /// This property is defined by [IETF RFC 1122].\n     ///\n@@ -426,9 +426,9 @@ impl Ipv4Addr {\n     ///\n     /// The private address ranges are defined in [IETF RFC 1918] and include:\n     ///\n-    ///  - 10.0.0.0/8\n-    ///  - 172.16.0.0/12\n-    ///  - 192.168.0.0/16\n+    ///  - `10.0.0.0/8`\n+    ///  - `172.16.0.0/12`\n+    ///  - `192.168.0.0/16`\n     ///\n     /// [IETF RFC 1918]: https://tools.ietf.org/html/rfc1918\n     ///\n@@ -457,7 +457,7 @@ impl Ipv4Addr {\n         }\n     }\n \n-    /// Returns [`true`] if the address is link-local (169.254.0.0/16).\n+    /// Returns [`true`] if the address is link-local (`169.254.0.0/16`).\n     ///\n     /// This property is defined by [IETF RFC 3927].\n     ///\n@@ -490,7 +490,7 @@ impl Ipv4Addr {\n     /// - the broadcast address (see [`Ipv4Addr::is_broadcast()`])\n     /// - addresses used for documentation (see [`Ipv4Addr::is_documentation()`])\n     /// - the unspecified address (see [`Ipv4Addr::is_unspecified()`]), and the whole\n-    ///   0.0.0.0/8 block\n+    ///   `0.0.0.0/8` block\n     /// - addresses reserved for future protocols (see\n     /// [`Ipv4Addr::is_ietf_protocol_assignment()`], except\n     /// `192.0.0.9/32` and `192.0.0.10/32` which are globally routable\n@@ -682,9 +682,9 @@ impl Ipv4Addr {\n         self.octets()[0] & 240 == 240 && !self.is_broadcast()\n     }\n \n-    /// Returns [`true`] if this is a multicast address (224.0.0.0/4).\n+    /// Returns [`true`] if this is a multicast address (`224.0.0.0/4`).\n     ///\n-    /// Multicast addresses have a most significant octet between 224 and 239,\n+    /// Multicast addresses have a most significant octet between `224` and `239`,\n     /// and is defined by [IETF RFC 5771].\n     ///\n     /// [IETF RFC 5771]: https://tools.ietf.org/html/rfc5771\n@@ -705,9 +705,9 @@ impl Ipv4Addr {\n         self.octets()[0] >= 224 && self.octets()[0] <= 239\n     }\n \n-    /// Returns [`true`] if this is a broadcast address (255.255.255.255).\n+    /// Returns [`true`] if this is a broadcast address (`255.255.255.255`).\n     ///\n-    /// A broadcast address has all octets set to 255 as defined in [IETF RFC 919].\n+    /// A broadcast address has all octets set to `255` as defined in [IETF RFC 919].\n     ///\n     /// [IETF RFC 919]: https://tools.ietf.org/html/rfc919\n     ///\n@@ -730,9 +730,9 @@ impl Ipv4Addr {\n     ///\n     /// This is defined in [IETF RFC 5737]:\n     ///\n-    /// - 192.0.2.0/24 (TEST-NET-1)\n-    /// - 198.51.100.0/24 (TEST-NET-2)\n-    /// - 203.0.113.0/24 (TEST-NET-3)\n+    /// - `192.0.2.0/24` (TEST-NET-1)\n+    /// - `198.51.100.0/24` (TEST-NET-2)\n+    /// - `203.0.113.0/24` (TEST-NET-3)\n     ///\n     /// [IETF RFC 5737]: https://tools.ietf.org/html/rfc5737\n     ///\n@@ -760,7 +760,7 @@ impl Ipv4Addr {\n \n     /// Converts this address to an IPv4-compatible [`IPv6` address].\n     ///\n-    /// a.b.c.d becomes ::a.b.c.d\n+    /// `a.b.c.d` becomes `::a.b.c.d`\n     ///\n     /// This isn't typically the method you want; these addresses don't typically\n     /// function on modern systems. Use `to_ipv6_mapped` instead.\n@@ -774,7 +774,7 @@ impl Ipv4Addr {\n     ///\n     /// assert_eq!(\n     ///     Ipv4Addr::new(192, 0, 2, 255).to_ipv6_compatible(),\n-    ///     Ipv6Addr::new(0, 0, 0, 0, 0, 0, 49152, 767)\n+    ///     Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0xc000, 0x2ff)\n     /// );\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n@@ -789,7 +789,7 @@ impl Ipv4Addr {\n \n     /// Converts this address to an IPv4-mapped [`IPv6` address].\n     ///\n-    /// a.b.c.d becomes ::ffff:a.b.c.d\n+    /// `a.b.c.d` becomes `::ffff:a.b.c.d`\n     ///\n     /// [`IPv6` address]: Ipv6Addr\n     ///\n@@ -799,7 +799,7 @@ impl Ipv4Addr {\n     /// use std::net::{Ipv4Addr, Ipv6Addr};\n     ///\n     /// assert_eq!(Ipv4Addr::new(192, 0, 2, 255).to_ipv6_mapped(),\n-    ///            Ipv6Addr::new(0, 0, 0, 0, 0, 65535, 49152, 767));\n+    ///            Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc000, 0x2ff));\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1172,7 +1172,7 @@ impl Ipv6Addr {\n         ]\n     }\n \n-    /// Returns [`true`] for the special 'unspecified' address (::).\n+    /// Returns [`true`] for the special 'unspecified' address (`::`).\n     ///\n     /// This property is defined in [IETF RFC 4291].\n     ///\n@@ -1374,7 +1374,7 @@ impl Ipv6Addr {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n     }\n \n-    /// Returns [`true`] if this is a deprecated unicast site-local address (fec0::/10). The\n+    /// Returns [`true`] if this is a deprecated unicast site-local address (`fec0::/10`). The\n     /// unicast site-local address format is defined in [RFC 4291 section 2.5.7] as:\n     ///\n     /// ```no_rust\n@@ -1403,7 +1403,7 @@ impl Ipv6Addr {\n     ///\n     /// # Warning\n     ///\n-    /// As per [RFC 3879], the whole `FEC0::/10` prefix is\n+    /// As per [RFC 3879], the whole `fec0::/10` prefix is\n     /// deprecated. New software must not support site-local\n     /// addresses.\n     ///\n@@ -1512,7 +1512,7 @@ impl Ipv6Addr {\n         }\n     }\n \n-    /// Returns [`true`] if this is a multicast address (ff00::/8).\n+    /// Returns [`true`] if this is a multicast address (`ff00::/8`).\n     ///\n     /// This property is defined by [IETF RFC 4291].\n     ///\n@@ -1568,7 +1568,7 @@ impl Ipv6Addr {\n     /// Converts this address to an [`IPv4` address]. Returns [`None`] if this address is\n     /// neither IPv4-compatible or IPv4-mapped.\n     ///\n-    /// ::a.b.c.d and ::ffff:a.b.c.d become a.b.c.d\n+    /// `::a.b.c.d` and `::ffff:a.b.c.d` become `a.b.c.d`\n     ///\n     /// [`IPv4` address]: Ipv4Addr\n     ///"}]}