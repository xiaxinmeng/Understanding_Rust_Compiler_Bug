{"sha": "1b2b24a6afbb5ba9eee3f6594eb6926d022704ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMmIyNGE2YWZiYjViYTllZWUzZjY1OTRlYjY5MjZkMDIyNzA0YWQ=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-12-05T18:07:18Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-12-05T18:07:18Z"}, "message": "rollup merge of #19480: cmr/es6-escape\n\nFirst half of bootstrapping https://github.com/rust-lang/rfcs/pull/446", "tree": {"sha": "c110e8738140a670c82a58943d8830d77346b41e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c110e8738140a670c82a58943d8830d77346b41e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad", "html_url": "https://github.com/rust-lang/rust/commit/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7464a29a37e08626c4b9dbb479e4525e108f0ca6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7464a29a37e08626c4b9dbb479e4525e108f0ca6", "html_url": "https://github.com/rust-lang/rust/commit/7464a29a37e08626c4b9dbb479e4525e108f0ca6"}, {"sha": "2e1a50121ef265214c5e2a7d82fe40b4928575ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e1a50121ef265214c5e2a7d82fe40b4928575ab", "html_url": "https://github.com/rust-lang/rust/commit/2e1a50121ef265214c5e2a7d82fe40b4928575ab"}], "stats": {"total": 177, "additions": 169, "deletions": 8}, "files": [{"sha": "27b65e0f52798d8aaa6ab71bb23864658e350034", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 78, "deletions": 3, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=1b2b24a6afbb5ba9eee3f6594eb6926d022704ad", "patch": "@@ -764,6 +764,15 @@ impl<'a> StringReader<'a> {\n         }\n     }\n \n+    // SNAP c9f6d69\n+    #[allow(unused)]\n+    fn old_escape_warning(&mut self, sp: Span) {\n+        self.span_diagnostic\n+            .span_warn(sp, \"\\\\U00ABCD12 and \\\\uABCD escapes are deprecated\");\n+        self.span_diagnostic\n+            .span_help(sp, \"use \\\\u{ABCD12} escapes instead\");\n+    }\n+\n     /// Scan for a single (possibly escaped) byte or char\n     /// in a byte, (non-raw) byte string, char, or (non-raw) string literal.\n     /// `start` is the position of `first_source_char`, which is already consumed.\n@@ -782,12 +791,24 @@ impl<'a> StringReader<'a> {\n                     Some(e) => {\n                         return match e {\n                             'n' | 'r' | 't' | '\\\\' | '\\'' | '\"' | '0' => true,\n-                            'x' => self.scan_hex_digits(2u, delim, !ascii_only),\n+                            'x' => self.scan_byte_escape(delim, !ascii_only),\n                             'u' if !ascii_only => {\n-                                self.scan_hex_digits(4u, delim, false)\n+                                if self.curr == Some('{') {\n+                                    self.scan_unicode_escape(delim)\n+                                } else {\n+                                    let res = self.scan_hex_digits(4u, delim, false);\n+                                    // SNAP c9f6d69\n+                                    //let sp = codemap::mk_sp(escaped_pos, self.last_pos);\n+                                    //self.old_escape_warning(sp);\n+                                    res\n+                                }\n                             }\n                             'U' if !ascii_only => {\n-                                self.scan_hex_digits(8u, delim, false)\n+                                let res = self.scan_hex_digits(8u, delim, false);\n+                                // SNAP c9f6d69\n+                                //let sp = codemap::mk_sp(escaped_pos, self.last_pos);\n+                                //self.old_escape_warning(sp);\n+                                res\n                             }\n                             '\\n' if delim == '\"' => {\n                                 self.consume_whitespace();\n@@ -848,6 +869,56 @@ impl<'a> StringReader<'a> {\n         true\n     }\n \n+    /// Scan over a \\u{...} escape\n+    ///\n+    /// At this point, we have already seen the \\ and the u, the { is the current character. We\n+    /// will read at least one digit, and up to 6, and pass over the }.\n+    fn scan_unicode_escape(&mut self, delim: char) -> bool {\n+        self.bump(); // past the {\n+        let start_bpos = self.last_pos;\n+        let mut count: uint = 0;\n+        let mut accum_int = 0;\n+\n+        while !self.curr_is('}') && count <= 6 {\n+            let c = match self.curr {\n+                Some(c) => c,\n+                None => {\n+                    self.fatal_span_(start_bpos, self.last_pos,\n+                                     \"unterminated unicode escape (found EOF)\");\n+                }\n+            };\n+            accum_int *= 16;\n+            accum_int += c.to_digit(16).unwrap_or_else(|| {\n+                if c == delim {\n+                    self.fatal_span_(self.last_pos, self.pos,\n+                                     \"unterminated unicode escape (needed a `}`)\");\n+                } else {\n+                    self.fatal_span_char(self.last_pos, self.pos,\n+                                   \"illegal character in unicode escape\", c);\n+                }\n+            }) as u32;\n+            self.bump();\n+            count += 1;\n+        }\n+\n+        if count > 6 {\n+            self.fatal_span_(start_bpos, self.last_pos,\n+                          \"overlong unicode escape (can have at most 6 hex digits)\");\n+        }\n+\n+        self.bump(); // past the ending }\n+\n+        let mut valid = count >= 1 && count <= 6;\n+        if char::from_u32(accum_int).is_none() {\n+            valid = false;\n+        }\n+\n+        if !valid {\n+            self.fatal_span_(start_bpos, self.last_pos, \"illegal unicode character escape\");\n+        }\n+        valid\n+    }\n+\n     /// Scan over a float exponent.\n     fn scan_float_exponent(&mut self) {\n         if self.curr_is('e') || self.curr_is('E') {\n@@ -1273,6 +1344,10 @@ impl<'a> StringReader<'a> {\n         return token::Byte(id);\n     }\n \n+    fn scan_byte_escape(&mut self, delim: char, below_0x7f_only: bool) -> bool {\n+        self.scan_hex_digits(2, delim, below_0x7f_only)\n+    }\n+\n     fn scan_byte_string(&mut self) -> token::Lit {\n         self.bump();\n         let start = self.last_pos;"}, {"sha": "8d0c2de048a5676bb2231a054c0c11ea3cf22783", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=1b2b24a6afbb5ba9eee3f6594eb6926d022704ad", "patch": "@@ -393,16 +393,28 @@ pub fn char_lit(lit: &str) -> (char, int) {\n     let msg = format!(\"lexer should have rejected a bad character escape {}\", lit);\n     let msg2 = msg.as_slice();\n \n-    let esc: |uint| -> Option<(char, int)> = |len|\n+    fn esc(len: uint, lit: &str) -> Option<(char, int)> {\n         num::from_str_radix(lit.slice(2, len), 16)\n         .and_then(char::from_u32)\n-        .map(|x| (x, len as int));\n+        .map(|x| (x, len as int))\n+    }\n+\n+    let unicode_escape: || -> Option<(char, int)> = ||\n+        if lit.as_bytes()[2] == b'{' {\n+            let idx = lit.find('}').expect(msg2);\n+            let subslice = lit.slice(3, idx);\n+            num::from_str_radix(subslice, 16)\n+                .and_then(char::from_u32)\n+                .map(|x| (x, subslice.char_len() as int + 4))\n+        } else {\n+            esc(6, lit)\n+        };\n \n     // Unicode escapes\n     return match lit.as_bytes()[1] as char {\n-        'x' | 'X' => esc(4),\n-        'u' => esc(6),\n-        'U' => esc(10),\n+        'x' | 'X' => esc(4, lit),\n+        'u' => unicode_escape(),\n+        'U' => esc(10, lit),\n         _ => None,\n     }.expect(msg2);\n }"}, {"sha": "f2422830a21cc6251329a452af6e8aa611df6fc3", "filename": "src/test/compile-fail/new-unicode-escapes-1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad/src%2Ftest%2Fcompile-fail%2Fnew-unicode-escapes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad/src%2Ftest%2Fcompile-fail%2Fnew-unicode-escapes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnew-unicode-escapes-1.rs?ref=1b2b24a6afbb5ba9eee3f6594eb6926d022704ad", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    let s = \"\\u{2603\"; //~ ERROR unterminated unicode escape (needed a `}`)\n+}"}, {"sha": "5da8674c37ea556ce17e7214cf3f872a50238953", "filename": "src/test/compile-fail/new-unicode-escapes-2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad/src%2Ftest%2Fcompile-fail%2Fnew-unicode-escapes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad/src%2Ftest%2Fcompile-fail%2Fnew-unicode-escapes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnew-unicode-escapes-2.rs?ref=1b2b24a6afbb5ba9eee3f6594eb6926d022704ad", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    let s = \"\\u{260311111111}\"; //~ ERROR overlong unicode escape (can have at most 6 hex digits)\n+}"}, {"sha": "7c64d02efd7465f803b408c76ef655989086a537", "filename": "src/test/compile-fail/new-unicode-escapes-3.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad/src%2Ftest%2Fcompile-fail%2Fnew-unicode-escapes-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad/src%2Ftest%2Fcompile-fail%2Fnew-unicode-escapes-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnew-unicode-escapes-3.rs?ref=1b2b24a6afbb5ba9eee3f6594eb6926d022704ad", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    let s = \"\\u{d805}\"; //~ ERROR illegal unicode character escape\n+}"}, {"sha": "ffc2b11e0c13caba1ff7f9e639349528f706ff23", "filename": "src/test/compile-fail/new-unicode-escapes-4.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad/src%2Ftest%2Fcompile-fail%2Fnew-unicode-escapes-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad/src%2Ftest%2Fcompile-fail%2Fnew-unicode-escapes-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnew-unicode-escapes-4.rs?ref=1b2b24a6afbb5ba9eee3f6594eb6926d022704ad", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    let s = \"\\u{lol}\"; //~ ERROR illegal character in unicode escape\n+}"}, {"sha": "2888389bcceabfb4cce2b5f03b500e0f6baecf95", "filename": "src/test/run-pass/new-unicode-escapes.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad/src%2Ftest%2Frun-pass%2Fnew-unicode-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2b24a6afbb5ba9eee3f6594eb6926d022704ad/src%2Ftest%2Frun-pass%2Fnew-unicode-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-unicode-escapes.rs?ref=1b2b24a6afbb5ba9eee3f6594eb6926d022704ad", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    let s = \"\\u{2603}\";\n+    assert_eq!(s, \"\u2603\");\n+\n+    let s = \"\\u{2a10}\\u{2A01}\\u{2Aa0}\";\n+    assert_eq!(s, \"\u2a10\u2a01\u2aa0\");\n+\n+    let s = \"\\\\{20}\";\n+    let mut correct_s = String::from_str(\"\\\\\");\n+    correct_s.push_str(\"{20}\");\n+    assert_eq!(s, correct_s.as_slice());\n+}"}]}