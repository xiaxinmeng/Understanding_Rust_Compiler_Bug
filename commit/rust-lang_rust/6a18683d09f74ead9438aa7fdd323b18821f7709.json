{"sha": "6a18683d09f74ead9438aa7fdd323b18821f7709", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMTg2ODNkMDlmNzRlYWQ5NDM4YWE3ZmRkMzIzYjE4ODIxZjc3MDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-03T07:34:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-03T07:34:41Z"}, "message": "Auto merge of #1842 - hyd-dev:target-dir, r=RalfJung\n\nUse `miri` inside the target directory used by rustc as Miri's target directory\n\nResolves #1311.\n\nThis PR makes Miri use `miri` inside the rustc target directory as its target directory, by letting `cargo-miri` get the rustc target directory by calling `cargo metadata`, append `miri` to it, and pass it with `--target-dir` to Cargo.\n\nGetting the rustc target directory accurately requires calling `cargo metadata` as far as I know, because the `target-dir` can be set in config files in various places that are hard for `cargo-miri` to find.\n\nI also considered https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#custom-named-profiles, but it looks like that requires adding `cargo-features = [\"named-profiles\"]` to **`Cargo.toml`**, which would be tricky for `cargo-miri`:\n```\n$ cargo +nightly-2021-06-23 test --config 'profile.miri.inherits=\"release\"' --profile=miri -Z named-profiles -Z unstable-options\nerror: config profile `miri` is not valid (defined in `--config cli option`)\n\nCaused by:\n  feature `named-profiles` is required\n\n  consider adding `cargo-features = [\"named-profiles\"]` to the manifest\n```", "tree": {"sha": "b7b1c13ebc6f8a987384ae9f3d7659ec0eb35ea6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7b1c13ebc6f8a987384ae9f3d7659ec0eb35ea6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a18683d09f74ead9438aa7fdd323b18821f7709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a18683d09f74ead9438aa7fdd323b18821f7709", "html_url": "https://github.com/rust-lang/rust/commit/6a18683d09f74ead9438aa7fdd323b18821f7709", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a18683d09f74ead9438aa7fdd323b18821f7709/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05fdec916a3a9755c6ea603bab79cdb2f7c062bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/05fdec916a3a9755c6ea603bab79cdb2f7c062bf", "html_url": "https://github.com/rust-lang/rust/commit/05fdec916a3a9755c6ea603bab79cdb2f7c062bf"}, {"sha": "e3fca9b3f13e14aa25634d7ffb818818e5720401", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3fca9b3f13e14aa25634d7ffb818818e5720401", "html_url": "https://github.com/rust-lang/rust/commit/e3fca9b3f13e14aa25634d7ffb818818e5720401"}], "stats": {"total": 149, "additions": 129, "deletions": 20}, "files": [{"sha": "ce13647fa586a7a5cad2462aff11b891e427b64f", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a18683d09f74ead9438aa7fdd323b18821f7709/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/6a18683d09f74ead9438aa7fdd323b18821f7709/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=6a18683d09f74ead9438aa7fdd323b18821f7709", "patch": "@@ -74,9 +74,11 @@ jobs:\n           else\n             RUSTC_HASH=$(< rust-version)\n           fi\n+          # We need a nightly cargo for parts of the cargo miri test suite.\n           rustup-toolchain-install-master \\\n             -f \\\n             -n master \"$RUSTC_HASH\" \\\n+            -c cargo \\\n             -c rust-src \\\n             -c rustc-dev \\\n             -c llvm-tools \\"}, {"sha": "1a7552c5d9e050c5d50e9ecfb0768f1d19cdd973", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 100, "deletions": 19, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/6a18683d09f74ead9438aa7fdd323b18821f7709/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a18683d09f74ead9438aa7fdd323b18821f7709/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=6a18683d09f74ead9438aa7fdd323b18821f7709", "patch": "@@ -6,7 +6,7 @@ use std::io::{self, BufRead, BufReader, BufWriter, Read, Write};\n use std::iter::TakeWhile;\n use std::ops::Not;\n use std::path::{Path, PathBuf};\n-use std::process::Command;\n+use std::process::{self, Command};\n \n use serde::{Deserialize, Serialize};\n \n@@ -112,40 +112,60 @@ fn has_arg_flag(name: &str) -> bool {\n     args.any(|val| val == name)\n }\n \n-/// Yields all values of command line flag `name`.\n-struct ArgFlagValueIter<'a> {\n-    args: TakeWhile<env::Args, fn(&String) -> bool>,\n+/// Yields all values of command line flag `name` as `Ok(arg)`, and all other arguments except\n+/// the flag as `Err(arg)`. (The flag `name` itself is not yielded at all, only its values are.)\n+struct ArgSplitFlagValue<'a, I> {\n+    args: TakeWhile<I, fn(&String) -> bool>,\n     name: &'a str,\n }\n \n-impl<'a> ArgFlagValueIter<'a> {\n-    fn new(name: &'a str) -> Self {\n+impl<'a, I: Iterator<Item = String>> ArgSplitFlagValue<'a, I> {\n+    fn new(args: I, name: &'a str) -> Self {\n         Self {\n             // Stop searching at `--`.\n-            args: env::args().take_while(|val| val != \"--\"),\n+            args: args.take_while(|val| val != \"--\"),\n             name,\n         }\n     }\n }\n \n-impl Iterator for ArgFlagValueIter<'_> {\n-    type Item = String;\n+impl<I: Iterator<Item = String>> Iterator for ArgSplitFlagValue<'_, I> {\n+    type Item = Result<String, String>;\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        loop {\n-            let arg = self.args.next()?;\n-            if !arg.starts_with(self.name) {\n-                continue;\n-            }\n+        let arg = self.args.next()?;\n+        if arg.starts_with(self.name) {\n             // Strip leading `name`.\n             let suffix = &arg[self.name.len()..];\n             if suffix.is_empty() {\n                 // This argument is exactly `name`; the next one is the value.\n-                return self.args.next();\n+                return self.args.next().map(Ok);\n             } else if suffix.starts_with('=') {\n                 // This argument is `name=value`; get the value.\n                 // Strip leading `=`.\n-                return Some(suffix[1..].to_owned());\n+                return Some(Ok(suffix[1..].to_owned()));\n+            }\n+        }\n+        Some(Err(arg))\n+    }\n+}\n+\n+/// Yields all values of command line flag `name`.\n+struct ArgFlagValueIter<'a>(ArgSplitFlagValue<'a, env::Args>);\n+\n+impl<'a> ArgFlagValueIter<'a> {\n+    fn new(name: &'a str) -> Self {\n+        Self(ArgSplitFlagValue::new(env::args(), name))\n+    }\n+}\n+\n+impl Iterator for ArgFlagValueIter<'_> {\n+    type Item = String;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        loop {\n+            if let Ok(value) = self.0.next()? {\n+                return Some(value);\n             }\n         }\n     }\n@@ -213,7 +233,7 @@ fn exec(mut cmd: Command) {\n /// If it fails, fail this process with the same exit code.\n /// Otherwise, continue.\n fn exec_with_pipe(mut cmd: Command, input: &[u8]) {\n-    cmd.stdin(std::process::Stdio::piped());\n+    cmd.stdin(process::Stdio::piped());\n     let mut child = cmd.spawn().expect(\"failed to spawn process\");\n     {\n         let stdin = child.stdin.as_mut().expect(\"failed to open stdin\");\n@@ -452,6 +472,43 @@ path = \"lib.rs\"\n     }\n }\n \n+/// Detect the target directory by calling `cargo metadata`.\n+fn detect_target_dir() -> PathBuf {\n+    #[derive(Deserialize)]\n+    struct Metadata {\n+        target_directory: PathBuf,\n+    }\n+    let mut cmd = cargo();\n+    // `-Zunstable-options` is required by `--config`.\n+    cmd.args([\"metadata\", \"--no-deps\", \"--format-version=1\", \"-Zunstable-options\"]);\n+    // The `build.target-dir` config can be passed by `--config` flags, so forward them to\n+    // `cargo metadata`.\n+    let config_flag = \"--config\";\n+    for arg in ArgSplitFlagValue::new(\n+        env::args().skip(3), // skip the program name, \"miri\" and \"run\" / \"test\"\n+        config_flag,\n+    ) {\n+        if let Ok(config) = arg {\n+            cmd.arg(config_flag).arg(config);\n+        }\n+    }\n+    let mut child = cmd\n+        .stdin(process::Stdio::null())\n+        .stdout(process::Stdio::piped())\n+        .spawn()\n+        .expect(\"failed ro run `cargo metadata`\");\n+    // Check this `Result` after `status.success()` is checked, so we don't print the error\n+    // to stderr if `cargo metadata` is also printing to stderr.\n+    let metadata: Result<Metadata, _> = serde_json::from_reader(child.stdout.take().unwrap());\n+    let status = child.wait().expect(\"failed to wait for `cargo metadata` to exit\");\n+    if !status.success() {\n+        std::process::exit(status.code().unwrap_or(-1));\n+    }\n+    metadata\n+        .unwrap_or_else(|e| show_error(format!(\"invalid `cargo metadata` output: {}\", e)))\n+        .target_directory\n+}\n+\n fn phase_cargo_miri(mut args: env::Args) {\n     // Check for version and help flags even when invoked as `cargo-miri`.\n     if has_arg_flag(\"--help\") || has_arg_flag(\"-h\") {\n@@ -510,8 +567,32 @@ fn phase_cargo_miri(mut args: env::Args) {\n         &host\n     };\n \n-    // Forward all further arguments to cargo.\n-    cmd.args(args);\n+    let mut target_dir = None;\n+\n+    // Forward all arguments before `--` other than `--target-dir` and its value to Cargo.\n+    for arg in ArgSplitFlagValue::new(&mut args, \"--target-dir\") {\n+        match arg {\n+            Ok(value) => {\n+                if target_dir.is_some() {\n+                    show_error(format!(\"`--target-dir` is provided more than once\"));\n+                }\n+                target_dir = Some(value.into());\n+            }\n+            Err(arg) => {\n+                cmd.arg(arg);\n+            }\n+        }\n+    }\n+\n+    // Detect the target directory if it's not specified via `--target-dir`.\n+    let target_dir = target_dir.get_or_insert_with(detect_target_dir);\n+\n+    // Set `--target-dir` to `miri` inside the original target directory.\n+    target_dir.push(\"miri\");\n+    cmd.arg(\"--target-dir\").arg(target_dir);\n+\n+    // Forward all further arguments after `--` to cargo.\n+    cmd.arg(\"--\").args(args);\n \n     // Set `RUSTC_WRAPPER` to ourselves.  Cargo will prepend that binary to its usual invocation,\n     // i.e., the first argument is `rustc` -- which is what we use in `main` to distinguish"}, {"sha": "5b7e8f7fcd636be0cd7ba4b176a29306e8937990", "filename": "rustup-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a18683d09f74ead9438aa7fdd323b18821f7709/rustup-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/6a18683d09f74ead9438aa7fdd323b18821f7709/rustup-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustup-toolchain?ref=6a18683d09f74ead9438aa7fdd323b18821f7709", "patch": "@@ -39,7 +39,7 @@ fi\n \n # Install and setup new toolchain.\n rustup toolchain uninstall miri\n-rustup-toolchain-install-master -n miri -c rust-src -c rustc-dev -c llvm-tools -- \"$NEW_COMMIT\"\n+rustup-toolchain-install-master -n miri -c cargo -c rust-src -c rustc-dev -c llvm-tools -- \"$NEW_COMMIT\"\n rustup override set miri\n \n # Cleanup."}, {"sha": "af5854e0c3fd91b6c7e4c7ad2b62b03be0bbdecf", "filename": "test-cargo-miri/.gitignore", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a18683d09f74ead9438aa7fdd323b18821f7709/test-cargo-miri%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/6a18683d09f74ead9438aa7fdd323b18821f7709/test-cargo-miri%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2F.gitignore?ref=6a18683d09f74ead9438aa7fdd323b18821f7709", "patch": "@@ -1 +1,4 @@\n *.real\n+custom-run\n+custom-test\n+config-cli"}, {"sha": "51433d98a2ed281aee2195c9bbe1823eb190dd89", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6a18683d09f74ead9438aa7fdd323b18821f7709/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/6a18683d09f74ead9438aa7fdd323b18821f7709/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=6a18683d09f74ead9438aa7fdd323b18821f7709", "patch": "@@ -101,6 +101,11 @@ def test_cargo_miri_run():\n         \"run.subcrate.stdout.ref\", \"run.subcrate.stderr.ref\",\n         env={'MIRIFLAGS': \"-Zmiri-disable-isolation\"},\n     )\n+    test(\"`cargo miri run` (custom target dir)\",\n+        # Attempt to confuse the argument parser.\n+        cargo_miri(\"run\") + [\"--target-dir=custom-run\", \"--\", \"--target-dir=target/custom-run\"],\n+        \"run.args.stdout.ref\", \"run.custom-target-dir.stderr.ref\",\n+    )\n \n def test_cargo_miri_test():\n     # rustdoc is not run on foreign targets\n@@ -144,8 +149,18 @@ def test_cargo_miri_test():\n         cargo_miri(\"test\") + [\"-p\", \"subcrate\", \"--doc\"],\n         \"test.stdout-empty.ref\", \"test.stderr-proc-macro-doctest.ref\",\n     )\n+    test(\"`cargo miri test` (custom target dir)\",\n+        cargo_miri(\"test\") + [\"--target-dir=custom-test\"],\n+        default_ref, \"test.stderr-empty.ref\",\n+    )\n+    del os.environ[\"CARGO_TARGET_DIR\"] # this overrides `build.target-dir` passed by `--config`, so unset it\n+    test(\"`cargo miri test` (config-cli)\",\n+        cargo_miri(\"test\") + [\"--config=build.target-dir=\\\"config-cli\\\"\", \"-Zunstable-options\"],\n+        default_ref, \"test.stderr-empty.ref\",\n+    )\n \n os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+os.environ[\"CARGO_TARGET_DIR\"] = \"target\" # this affects the location of the target directory that we need to check\n os.environ[\"RUST_TEST_NOCAPTURE\"] = \"0\" # this affects test output, so make sure it is not set\n os.environ[\"RUST_TEST_THREADS\"] = \"1\" # avoid non-deterministic output due to concurrent test runs\n \n@@ -158,6 +173,12 @@ def test_cargo_miri_test():\n     subprocess.run(cargo_miri(\"setup\"), check=True)\n test_cargo_miri_run()\n test_cargo_miri_test()\n+# Ensure we did not create anything outside the expected target dir.\n+for target_dir in [\"target\", \"custom-run\", \"custom-test\", \"config-cli\"]:\n+    if os.listdir(target_dir) != [\"miri\"]:\n+        fail(f\"`{target_dir}` contains unexpected files\")\n+    # Ensure something exists inside that target dir.\n+    os.access(os.path.join(target_dir, \"miri\", \"debug\", \"deps\"), os.F_OK)\n \n print(\"\\nTEST SUCCESSFUL!\")\n sys.exit(0)"}, {"sha": "4395ff8879b96386f4b0f3a81348f32b3c0e98ec", "filename": "test-cargo-miri/run.custom-target-dir.stderr.ref", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a18683d09f74ead9438aa7fdd323b18821f7709/test-cargo-miri%2Frun.custom-target-dir.stderr.ref", "raw_url": "https://github.com/rust-lang/rust/raw/6a18683d09f74ead9438aa7fdd323b18821f7709/test-cargo-miri%2Frun.custom-target-dir.stderr.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun.custom-target-dir.stderr.ref?ref=6a18683d09f74ead9438aa7fdd323b18821f7709", "patch": "@@ -0,0 +1,2 @@\n+main\n+--target-dir=target/custom-run"}]}