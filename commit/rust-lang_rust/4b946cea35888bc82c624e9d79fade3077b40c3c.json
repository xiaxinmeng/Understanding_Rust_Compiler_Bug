{"sha": "4b946cea35888bc82c624e9d79fade3077b40c3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiOTQ2Y2VhMzU4ODhiYzgyYzYyNGU5ZDc5ZmFkZTMwNzdiNDBjM2M=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-21T03:18:19Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-21T03:18:19Z"}, "message": "Modify native_item_fn to handle trailing linkage names that differ from the item name (used in win32 build of std.dll)", "tree": {"sha": "f4a618c82541396930cd876ad938f81781f6422f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4a618c82541396930cd876ad938f81781f6422f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b946cea35888bc82c624e9d79fade3077b40c3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b946cea35888bc82c624e9d79fade3077b40c3c", "html_url": "https://github.com/rust-lang/rust/commit/4b946cea35888bc82c624e9d79fade3077b40c3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b946cea35888bc82c624e9d79fade3077b40c3c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c7545c1ceb96dce7e4ace1718dcb3077f877135", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c7545c1ceb96dce7e4ace1718dcb3077f877135", "html_url": "https://github.com/rust-lang/rust/commit/0c7545c1ceb96dce7e4ace1718dcb3077f877135"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "a007e76b058e024c3e6d5ccf7822f0fa00f278fe", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b946cea35888bc82c624e9d79fade3077b40c3c/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b946cea35888bc82c624e9d79fade3077b40c3c/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=4b946cea35888bc82c624e9d79fade3077b40c3c", "patch": "@@ -367,7 +367,8 @@ tag item_ {\n type native_item = spanned[native_item_];\n tag native_item_ {\n     native_item_ty(ident, def_id);\n-    native_item_fn(ident, fn_decl, vec[ty_param], def_id, ann);\n+    native_item_fn(ident, option.t[str],\n+                   fn_decl, vec[ty_param], def_id, ann);\n }\n \n // TODO: Actually store something here.\n@@ -426,7 +427,7 @@ fn index_native_item(native_mod_index index, @native_item it) {\n         case (ast.native_item_ty(?id, _)) {\n             index.insert(id, ast.nmie_item(it));\n         }\n-        case (ast.native_item_fn(?id, _, _, _, _)) {\n+        case (ast.native_item_fn(?id, _, _, _, _, _)) {\n             index.insert(id, ast.nmie_item(it));\n         }\n     }"}, {"sha": "9d3724f9de1f3cdcb8be9a05d8db452a1e89162c", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b946cea35888bc82c624e9d79fade3077b40c3c/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b946cea35888bc82c624e9d79fade3077b40c3c/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=4b946cea35888bc82c624e9d79fade3077b40c3c", "patch": "@@ -1859,9 +1859,15 @@ impure fn parse_item_native_fn(parser p, ast.effect eff) -> @ast.native_item {\n     expect(p, token.FN);\n     auto t = parse_fn_header(p);\n     auto decl = parse_fn_decl(p, eff);\n+    auto link_name = none[str];\n+    if (p.peek() == token.EQ) {\n+        p.bump();\n+        link_name = some[str](parse_str_lit_or_env_ident(p));\n+    }\n     auto hi = p.get_span();\n     expect(p, token.SEMI);\n-    auto item = ast.native_item_fn(t._0, decl, t._1, p.next_def_id(),\n+    auto item = ast.native_item_fn(t._0, link_name, decl,\n+                                   t._1, p.next_def_id(),\n                                    ast.ann_none);\n     ret @spanned(lo, hi, item);\n }"}, {"sha": "5daa7f1da72af3344ec12146e4eaad9d8276c72b", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4b946cea35888bc82c624e9d79fade3077b40c3c/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b946cea35888bc82c624e9d79fade3077b40c3c/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=4b946cea35888bc82c624e9d79fade3077b40c3c", "patch": "@@ -233,6 +233,7 @@ type ast_fold[ENV] =\n          def_id id, ann a) -> @item)              fold_item_fn,\n \n      (fn(&ENV e, &span sp, ident ident,\n+         option.t[str] link_name,\n          &ast.fn_decl decl,\n          vec[ast.ty_param] ty_params,\n          def_id id, ann a) -> @native_item)       fold_native_item_fn,\n@@ -990,9 +991,10 @@ fn fold_native_item[ENV](&ENV env, ast_fold[ENV] fld,\n         case (ast.native_item_ty(?ident, ?id)) {\n             ret fld.fold_native_item_ty(env_, i.span, ident, id);\n         }\n-        case (ast.native_item_fn(?ident, ?fn_decl, ?ty_params, ?id, ?ann)) {\n+        case (ast.native_item_fn(?ident, ?lname, ?fn_decl,\n+                                 ?ty_params, ?id, ?ann)) {\n             auto d = fold_fn_decl[ENV](env_, fld, fn_decl);\n-            ret fld.fold_native_item_fn(env_, i.span, ident, d,\n+            ret fld.fold_native_item_fn(env_, i.span, ident, lname, d,\n                                         ty_params, id, ann);\n         }\n     }\n@@ -1346,10 +1348,11 @@ fn identity_fold_item_fn[ENV](&ENV e, &span sp, ident i,\n }\n \n fn identity_fold_native_item_fn[ENV](&ENV e, &span sp, ident i,\n+                                     option.t[str] link_name,\n                                      &ast.fn_decl decl,\n                                      vec[ast.ty_param] ty_params,\n                                      def_id id, ann a) -> @native_item {\n-    ret @respan(sp, ast.native_item_fn(i, decl, ty_params, id, a));\n+    ret @respan(sp, ast.native_item_fn(i, link_name, decl, ty_params, id, a));\n }\n \n fn identity_fold_item_mod[ENV](&ENV e, &span sp, ident i,\n@@ -1576,7 +1579,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_item_const= bind identity_fold_item_const[ENV](_,_,_,_,_,_,_),\n          fold_item_fn   = bind identity_fold_item_fn[ENV](_,_,_,_,_,_,_),\n          fold_native_item_fn =\n-             bind identity_fold_native_item_fn[ENV](_,_,_,_,_,_,_),\n+             bind identity_fold_native_item_fn[ENV](_,_,_,_,_,_,_,_),\n          fold_item_mod  = bind identity_fold_item_mod[ENV](_,_,_,_,_),\n          fold_item_native_mod =\n              bind identity_fold_item_native_mod[ENV](_,_,_,_,_),"}, {"sha": "23e9a4d60b176034f16127ec9ced23ea5d78e39f", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b946cea35888bc82c624e9d79fade3077b40c3c/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b946cea35888bc82c624e9d79fade3077b40c3c/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=4b946cea35888bc82c624e9d79fade3077b40c3c", "patch": "@@ -240,7 +240,7 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n             case (ast.native_item_ty(_, ?id)) {\n                 ret def_wrap_other(ast.def_native_ty(id));\n             }\n-            case (ast.native_item_fn(_, _, _, ?id, _)) {\n+            case (ast.native_item_fn(_, _, _, _, ?id, _)) {\n                 ret def_wrap_other(ast.def_native_fn(id));\n             }\n         }\n@@ -430,7 +430,7 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n \n             case (scope_native_item(?it)) {\n                 alt (it.node) {\n-                    case (ast.native_item_fn(_, ?decl, ?ty_params, _, _)) {\n+                    case (ast.native_item_fn(_, _, ?decl, ?ty_params, _, _)) {\n                         ret handle_fn_decl(i, decl, ty_params);\n                     }\n                 }"}, {"sha": "16ee9ae3180665d7d72bcfa53c1b2a0176bc43e9", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b946cea35888bc82c624e9d79fade3077b40c3c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b946cea35888bc82c624e9d79fade3077b40c3c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4b946cea35888bc82c624e9d79fade3077b40c3c", "patch": "@@ -5409,7 +5409,7 @@ fn native_fn_ty_param_count(@crate_ctxt cx, &ast.def_id id) -> uint {\n                         \"actually a fn?!\");\n             fail;\n         }\n-        case (ast.native_item_fn(_, _, ?tps, _, _)) {\n+        case (ast.native_item_fn(_, _, _, ?tps, _, _)) {\n             count = _vec.len[ast.ty_param](tps);\n         }\n     }\n@@ -5499,7 +5499,7 @@ fn decl_native_fn_and_pair(@crate_ctxt cx,\n \n fn collect_native_item(&@crate_ctxt cx, @ast.native_item i) -> @crate_ctxt {\n     alt (i.node) {\n-        case (ast.native_item_fn(?name, _, _, ?fid, ?ann)) {\n+        case (ast.native_item_fn(?name, _, _, _, ?fid, ?ann)) {\n             cx.native_items.insert(fid, i);\n             if (! cx.obj_methods.contains_key(fid)) {\n                 decl_native_fn_and_pair(cx, name, ann, fid);"}, {"sha": "c6fbb5bf14db4fe97de763e74ac5fc2c7a7c6e89", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b946cea35888bc82c624e9d79fade3077b40c3c/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b946cea35888bc82c624e9d79fade3077b40c3c/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=4b946cea35888bc82c624e9d79fade3077b40c3c", "patch": "@@ -645,7 +645,7 @@ fn native_item_ty(@ast.native_item it) -> ty_params_and_ty {\n     auto ty_params;\n     auto result_ty;\n     alt (it.node) {\n-        case (ast.native_item_fn(_, _, ?tps, _, ?ann)) {\n+        case (ast.native_item_fn(_, _, _, ?tps, _, ?ann)) {\n             ty_params = tps;\n             result_ty = ann_to_type(ann);\n         }"}, {"sha": "e4eaf2fb97a68852d3b08f7c511bf85a20cedc9b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4b946cea35888bc82c624e9d79fade3077b40c3c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b946cea35888bc82c624e9d79fade3077b40c3c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=4b946cea35888bc82c624e9d79fade3077b40c3c", "patch": "@@ -442,7 +442,7 @@ fn ty_params_of_item(@ast.item item) -> vec[ast.ty_param] {\n \n fn ty_params_of_native_item(@ast.native_item item) -> vec[ast.ty_param] {\n     alt (item.node) {\n-        case (ast.native_item_fn(_, _, ?p, _, _)) {\n+        case (ast.native_item_fn(_, _, _, ?p, _, _)) {\n             ret p;\n         }\n         case (_) {\n@@ -623,7 +623,8 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n                          @ast.native_item it,\n                          ast.native_abi abi) -> @ty.t {\n         alt (it.node) {\n-            case (ast.native_item_fn(?ident, ?fn_decl, ?params, ?def_id, _)) {\n+            case (ast.native_item_fn(?ident, ?lname, ?fn_decl,\n+                                     ?params, ?def_id, _)) {\n                 auto get = bind getter(id_to_ty_item, item_to_ty, _);\n                 auto convert = bind ast_ty_to_ty(get, _);\n                 auto f = bind ty_of_arg(id_to_ty_item, item_to_ty, _);\n@@ -800,14 +801,14 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n         ret @fold.respan[ast.item_](sp, item);\n     }\n \n-    fn fold_native_item_fn(&@env e, &span sp, ast.ident i,\n+    fn fold_native_item_fn(&@env e, &span sp, ast.ident i, option.t[str] ln,\n                            &ast.fn_decl d, vec[ast.ty_param] ty_params,\n                            ast.def_id id, ast.ann a) -> @ast.native_item {\n         collect_ty_params(e, id, ty_params);\n \n         check (e.item_to_ty.contains_key(id));\n         auto typ = e.item_to_ty.get(id);\n-        auto item = ast.native_item_fn(i, d, ty_params, id,\n+        auto item = ast.native_item_fn(i, ln, d, ty_params, id,\n                                        ast.ann_type(typ, none[vec[@ty.t]]));\n         ret @fold.respan[ast.native_item_](sp, item);\n     }\n@@ -912,7 +913,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n              update_env_for_native_item = bind convert_native(_,_),\n              fold_item_const = bind fold_item_const(_,_,_,_,_,_,_),\n              fold_item_fn    = bind fold_item_fn(_,_,_,_,_,_,_),\n-             fold_native_item_fn = bind fold_native_item_fn(_,_,_,_,_,_,_),\n+             fold_native_item_fn = bind fold_native_item_fn(_,_,_,_,_,_,_,_),\n              fold_item_obj   = bind fold_item_obj(_,_,_,_,_,_,_),\n              fold_item_ty    = bind fold_item_ty(_,_,_,_,_,_,_),\n              fold_item_tag   = bind fold_item_tag(_,_,_,_,_,_)"}, {"sha": "7863f3e7b9afeda43fa730f844ba2606034224d7", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b946cea35888bc82c624e9d79fade3077b40c3c/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b946cea35888bc82c624e9d79fade3077b40c3c/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=4b946cea35888bc82c624e9d79fade3077b40c3c", "patch": "@@ -163,8 +163,12 @@ impure fn print_item(ps s, @ast.item item) {\n             wrd1(s, \"type\");\n             wrd(s, id);\n           }\n-          case (ast.native_item_fn(?id,?decl,?typarams,_,_)) {\n+          case (ast.native_item_fn(?id,?lname,?decl,?typarams,_,_)) {\n             print_fn(s, decl, id, typarams);\n+            alt (lname) {\n+              case (option.none[str]) {}\n+              case (option.some[str](?ss)) {print_string(s,ss);}\n+            }\n           }\n         }\n         wrd(s, \";\");"}]}