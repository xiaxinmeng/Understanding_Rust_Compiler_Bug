{"sha": "dac96d45af760dce26ff7cbab09c08411c9a9105", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYzk2ZDQ1YWY3NjBkY2UyNmZmN2NiYWIwOWMwODQxMWM5YTkxMDU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-07T15:47:39Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-17T23:18:58Z"}, "message": "Fix use of bare trait objects everywhere", "tree": {"sha": "bc4f09c5b37b7d42798637494399b43dfb726650", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc4f09c5b37b7d42798637494399b43dfb726650"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dac96d45af760dce26ff7cbab09c08411c9a9105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dac96d45af760dce26ff7cbab09c08411c9a9105", "html_url": "https://github.com/rust-lang/rust/commit/dac96d45af760dce26ff7cbab09c08411c9a9105", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dac96d45af760dce26ff7cbab09c08411c9a9105/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "html_url": "https://github.com/rust-lang/rust/commit/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d"}], "stats": {"total": 162, "additions": 88, "deletions": 74}, "files": [{"sha": "a9ffb5542b6df6aa4c36b31125145542e33a1f64", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> InferCtxtBuilderExt<'tcx> for InferCtxtBuilder<'tcx> {\n             DUMMY_SP,\n             canonical_key,\n             |ref infcx, key, canonical_inference_vars| {\n-                let mut fulfill_cx = TraitEngine::new(infcx.tcx);\n+                let mut fulfill_cx = <dyn TraitEngine<'_>>::new(infcx.tcx);\n                 let value = operation(infcx, &mut *fulfill_cx, key)?;\n                 infcx.make_canonicalized_query_response(\n                     canonical_inference_vars,"}, {"sha": "4f5476ca5d0dc08ee6b54bb2d711f7233d192bb2", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -62,7 +62,7 @@ fn scrape_region_constraints<'tcx, R>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     op: impl FnOnce() -> Fallible<InferOk<'tcx, R>>,\n ) -> Fallible<(R, Option<Rc<QueryRegionConstraints<'tcx>>>)> {\n-    let mut fulfill_cx = TraitEngine::new(infcx.tcx);\n+    let mut fulfill_cx = <dyn TraitEngine<'_>>::new(infcx.tcx);\n     let dummy_body_id = ObligationCause::dummy().body_id;\n \n     // During NLL, we expect that nobody will register region"}, {"sha": "9d5b9d7357fc47e8c56dac714abb1a9754606d0a", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -75,7 +75,7 @@ fn dropck_outlives<'tcx>(\n             // Set used to detect infinite recursion.\n             let mut ty_set = FxHashSet::default();\n \n-            let mut fulfill_cx = TraitEngine::new(infcx.tcx);\n+            let mut fulfill_cx = <dyn TraitEngine<'_>>::new(infcx.tcx);\n \n             let cause = ObligationCause::dummy();\n             let mut constraints = DtorckConstraint::empty();"}, {"sha": "94aee87364a69d16ff79bfeacb379e5a917b2772", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -1554,7 +1554,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         if let hir::FnRetTy::Return(ty) = fn_output {\n             // Get the return type.\n             if let hir::TyKind::OpaqueDef(..) = ty.kind {\n-                let ty = AstConv::ast_ty_to_ty(fcx, ty);\n+                let ty = <dyn AstConv<'_>>::ast_ty_to_ty(fcx, ty);\n                 // Get the `impl Trait`'s `DefId`.\n                 if let ty::Opaque(def_id, _) = ty.kind() {\n                     let hir_id = fcx.tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n@@ -1616,7 +1616,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n     fn is_return_ty_unsized(&self, fcx: &FnCtxt<'a, 'tcx>, blk_id: hir::HirId) -> bool {\n         if let Some((fn_decl, _)) = fcx.get_fn_decl(blk_id) {\n             if let hir::FnRetTy::Return(ty) = fn_decl.output {\n-                let ty = AstConv::ast_ty_to_ty(fcx, ty);\n+                let ty = <dyn AstConv<'_>>::ast_ty_to_ty(fcx, ty);\n                 if let ty::Dynamic(..) = ty.kind() {\n                     return true;\n                 }"}, {"sha": "4d74962d28ed3d0438838ba97733662a53b8dc36", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -77,7 +77,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n     tcx.infer_ctxt().enter(|ref infcx| {\n         let impl_param_env = tcx.param_env(self_type_did);\n         let tcx = infcx.tcx;\n-        let mut fulfillment_cx = TraitEngine::new(tcx);\n+        let mut fulfillment_cx = <dyn TraitEngine<'_>>::new(tcx);\n \n         let named_type = tcx.type_of(self_type_did);\n "}, {"sha": "20fe0c1471c9c8f9e03a01e0accb9fa32a0d1924", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -472,7 +472,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     pub fn to_ty(&self, ast_t: &hir::Ty<'_>) -> Ty<'tcx> {\n-        let t = AstConv::ast_ty_to_ty(self, ast_t);\n+        let t = <dyn AstConv<'_>>::ast_ty_to_ty(self, ast_t);\n         self.register_wf_obligation(t.into(), ast_t.span, traits::MiscObligation);\n         t\n     }\n@@ -854,7 +854,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // out unconstrained or ambiguous, as we're\n                         // just trying to get hints here.\n                         self.save_and_restore_in_snapshot_flag(|_| {\n-                            let mut fulfill = TraitEngine::new(self.tcx);\n+                            let mut fulfill = <dyn TraitEngine<'_>>::new(self.tcx);\n                             for obligation in ok.obligations {\n                                 fulfill.register_predicate_obligation(self, obligation);\n                             }\n@@ -1174,9 +1174,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let path_segs = match res {\n             Res::Local(_) | Res::SelfCtor(_) => vec![],\n-            Res::Def(kind, def_id) => {\n-                AstConv::def_ids_for_value_path_segments(self, segments, self_ty, kind, def_id)\n-            }\n+            Res::Def(kind, def_id) => <dyn AstConv<'_>>::def_ids_for_value_path_segments(\n+                self, segments, self_ty, kind, def_id,\n+            ),\n             _ => bug!(\"instantiate_value_path on {:?}\", res),\n         };\n \n@@ -1219,7 +1219,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // errors if type parameters are provided in an inappropriate place.\n \n         let generic_segs: FxHashSet<_> = path_segs.iter().map(|PathSeg(_, index)| index).collect();\n-        let generics_has_err = AstConv::prohibit_generics(\n+        let generics_has_err = <dyn AstConv<'_>>::prohibit_generics(\n             self,\n             segments.iter().enumerate().filter_map(|(index, seg)| {\n                 if !generic_segs.contains(&index) || is_alias_variant_ctor {\n@@ -1262,7 +1262,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let GenericArgCountResult {\n                 correct: Err(GenericArgCountMismatch { reported: Some(_), .. }),\n                 ..\n-            } = AstConv::check_generic_arg_count_for_call(\n+            } = <dyn AstConv<'_>>::check_generic_arg_count_for_call(\n                 tcx,\n                 span,\n                 def_id,\n@@ -1370,7 +1370,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ) -> subst::GenericArg<'tcx> {\n                 match (&param.kind, arg) {\n                     (GenericParamDefKind::Lifetime, GenericArg::Lifetime(lt)) => {\n-                        AstConv::ast_region_to_region(self.fcx, lt, Some(param)).into()\n+                        <dyn AstConv<'_>>::ast_region_to_region(self.fcx, lt, Some(param)).into()\n                     }\n                     (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n                         self.fcx.to_ty(ty).into()\n@@ -1423,7 +1423,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         let substs = self_ctor_substs.unwrap_or_else(|| {\n-            AstConv::create_substs_for_generic_args(\n+            <dyn AstConv<'_>>::create_substs_for_generic_args(\n                 tcx,\n                 def_id,\n                 &[][..],"}, {"sha": "c92c7f7ad0b9a8d61dc0b3f1fd7d003b626e117e", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -875,7 +875,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match *qpath {\n             QPath::Resolved(ref maybe_qself, ref path) => {\n                 let self_ty = maybe_qself.as_ref().map(|qself| self.to_ty(qself));\n-                let ty = AstConv::res_to_ty(self, self_ty, path, true);\n+                let ty = <dyn AstConv<'_>>::res_to_ty(self, self_ty, path, true);\n                 (path.res, ty)\n             }\n             QPath::TypeRelative(ref qself, ref segment) => {\n@@ -886,8 +886,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 } else {\n                     Res::Err\n                 };\n-                let result =\n-                    AstConv::associated_path_to_ty(self, hir_id, path_span, ty, res, segment, true);\n+                let result = <dyn AstConv<'_>>::associated_path_to_ty(\n+                    self, hir_id, path_span, ty, res, segment, true,\n+                );\n                 let ty = result.map(|(ty, _, _)| ty).unwrap_or_else(|_| self.tcx().ty_error());\n                 let result = result.map(|(_, kind, def_id)| (kind, def_id));\n \n@@ -1000,7 +1001,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         // would trigger in `is_send::<T::AssocType>();`\n                                         // from `typeck-default-trait-impl-assoc-type.rs`.\n                                     } else {\n-                                        let ty = AstConv::ast_ty_to_ty(self, hir_ty);\n+                                        let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, hir_ty);\n                                         let ty = self.resolve_vars_if_possible(ty);\n                                         if ty == predicate.self_ty() {\n                                             error.obligation.cause.make_mut().span = hir_ty.span;"}, {"sha": "f90159efb5cd551d1052e2318d186658f078a480", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -461,7 +461,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // are not, the expectation must have been caused by something else.\n                 debug!(\"suggest_missing_return_type: return type {:?} node {:?}\", ty, ty.kind);\n                 let sp = ty.span;\n-                let ty = AstConv::ast_ty_to_ty(self, ty);\n+                let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, ty);\n                 debug!(\"suggest_missing_return_type: return type {:?}\", ty);\n                 debug!(\"suggest_missing_return_type: expected type {:?}\", ty);\n                 if ty.kind() == expected.kind() {\n@@ -486,7 +486,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         let found = self.resolve_vars_with_obligations(found);\n         if let hir::FnRetTy::Return(ty) = fn_decl.output {\n-            let ty = AstConv::ast_ty_to_ty(self, ty);\n+            let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, ty);\n             let ty = self.tcx.erase_late_bound_regions(Binder::bind(ty));\n             let ty = self.normalize_associated_types_in(expr.span, ty);\n             if self.can_coerce(found, ty) {"}, {"sha": "1dacbade1bd32a0d68eaf322841c2e6e19d5650e", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -117,7 +117,7 @@ impl Inherited<'a, 'tcx> {\n                 maybe_typeck_results: infcx.in_progress_typeck_results,\n             },\n             infcx,\n-            fulfillment_cx: RefCell::new(TraitEngine::new(tcx)),\n+            fulfillment_cx: RefCell::new(<dyn TraitEngine<'_>>::new(tcx)),\n             locals: RefCell::new(Default::default()),\n             deferred_sized_obligations: RefCell::new(Vec::new()),\n             deferred_call_resolutions: RefCell::new(Default::default()),"}, {"sha": "4a2dd6faf0c323e814a066e9fa208095b1506cc2", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -314,7 +314,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // variables.\n         let generics = self.tcx.generics_of(pick.item.def_id);\n \n-        let arg_count_correct = AstConv::check_generic_arg_count_for_call(\n+        let arg_count_correct = <dyn AstConv<'_>>::check_generic_arg_count_for_call(\n             self.tcx,\n             self.span,\n             pick.item.def_id,\n@@ -352,7 +352,8 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n             ) -> subst::GenericArg<'tcx> {\n                 match (&param.kind, arg) {\n                     (GenericParamDefKind::Lifetime, GenericArg::Lifetime(lt)) => {\n-                        AstConv::ast_region_to_region(self.cfcx.fcx, lt, Some(param)).into()\n+                        <dyn AstConv<'_>>::ast_region_to_region(self.cfcx.fcx, lt, Some(param))\n+                            .into()\n                     }\n                     (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n                         self.cfcx.to_ty(ty).into()\n@@ -373,7 +374,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                 self.cfcx.var_for_def(self.cfcx.span, param)\n             }\n         }\n-        AstConv::create_substs_for_generic_args(\n+        <dyn AstConv<'_>>::create_substs_for_generic_args(\n             self.tcx,\n             pick.item.def_id,\n             parent_substs,"}, {"sha": "ad9bb70377968d526d91160a093c9ed887029325", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -495,7 +495,7 @@ fn typeck_with_fallback<'tcx>(\n         let fcx = if let (Some(header), Some(decl)) = (fn_header, fn_decl) {\n             let fn_sig = if crate::collect::get_infer_ret_ty(&decl.output).is_some() {\n                 let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n-                AstConv::ty_of_fn(\n+                <dyn AstConv<'_>>::ty_of_fn(\n                     &fcx,\n                     header.unsafety,\n                     header.abi,\n@@ -527,7 +527,7 @@ fn typeck_with_fallback<'tcx>(\n             let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n             let expected_type = body_ty\n                 .and_then(|ty| match ty.kind {\n-                    hir::TyKind::Infer => Some(AstConv::ast_ty_to_ty(&fcx, ty)),\n+                    hir::TyKind::Infer => Some(<dyn AstConv<'_>>::ast_ty_to_ty(&fcx, ty)),\n                     _ => None,\n                 })\n                 .unwrap_or_else(|| match tcx.hir().get(id) {"}, {"sha": "8cae61e8c22f6ffd3708e706de6fbd333d15f96e", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -246,7 +246,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n                     ))\n                     .emit();\n                 } else {\n-                    let mut fulfill_cx = TraitEngine::new(infcx.tcx);\n+                    let mut fulfill_cx = <dyn TraitEngine<'_>>::new(infcx.tcx);\n \n                     for field in coerced_fields {\n                         let predicate = predicate_for_trait_def(\n@@ -506,7 +506,7 @@ pub fn coerce_unsized_info(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedI\n             }\n         };\n \n-        let mut fulfill_cx = TraitEngine::new(infcx.tcx);\n+        let mut fulfill_cx = <dyn TraitEngine<'_>>::new(infcx.tcx);\n \n         // Register an obligation for `A: Trait<B>`.\n         let cause = traits::ObligationCause::misc(span, impl_hir_id);"}, {"sha": "e5136355ca9822ad553bfd1ad1b3468a39c5acdb", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -310,7 +310,7 @@ impl ItemCtxt<'tcx> {\n     }\n \n     pub fn to_ty(&self, ast_ty: &hir::Ty<'_>) -> Ty<'tcx> {\n-        AstConv::ast_ty_to_ty(self, ast_ty)\n+        <dyn AstConv<'_>>::ast_ty_to_ty(self, ast_ty)\n     }\n \n     pub fn hir_id(&self) -> hir::HirId {\n@@ -1096,7 +1096,7 @@ fn super_predicates_that_define_assoc_type(\n         // Convert the bounds that follow the colon, e.g., `Bar + Zed` in `trait Foo: Bar + Zed`.\n         let self_param_ty = tcx.types.self_param;\n         let superbounds1 = if let Some(assoc_name) = assoc_name {\n-            AstConv::compute_bounds_that_match_assoc_type(\n+            <dyn AstConv<'_>>::compute_bounds_that_match_assoc_type(\n                 &icx,\n                 self_param_ty,\n                 &bounds,\n@@ -1105,7 +1105,13 @@ fn super_predicates_that_define_assoc_type(\n                 assoc_name,\n             )\n         } else {\n-            AstConv::compute_bounds(&icx, self_param_ty, &bounds, SizedByDefault::No, item.span)\n+            <dyn AstConv<'_>>::compute_bounds(\n+                &icx,\n+                self_param_ty,\n+                &bounds,\n+                SizedByDefault::No,\n+                item.span,\n+            )\n         };\n \n         let superbounds1 = superbounds1.predicates(tcx, self_param_ty);\n@@ -1689,7 +1695,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n                     ty::Binder::bind(fn_sig)\n                 }\n-                None => AstConv::ty_of_fn(\n+                None => <dyn AstConv<'_>>::ty_of_fn(\n                     &icx,\n                     sig.header.unsafety,\n                     sig.header.abi,\n@@ -1706,7 +1712,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             ident,\n             generics,\n             ..\n-        }) => AstConv::ty_of_fn(\n+        }) => <dyn AstConv<'_>>::ty_of_fn(\n             &icx,\n             header.unsafety,\n             header.abi,\n@@ -1767,7 +1773,7 @@ fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::TraitRef<'_>> {\n     match tcx.hir().expect_item(hir_id).kind {\n         hir::ItemKind::Impl(ref impl_) => impl_.of_trait.as_ref().map(|ast_trait_ref| {\n             let selfty = tcx.type_of(def_id);\n-            AstConv::instantiate_mono_trait_ref(&icx, ast_trait_ref, selfty)\n+            <dyn AstConv<'_>>::instantiate_mono_trait_ref(&icx, ast_trait_ref, selfty)\n         }),\n         _ => bug!(),\n     }\n@@ -2018,7 +2024,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n             GenericParamKind::Lifetime { .. } => {\n                 param.bounds.iter().for_each(|bound| match bound {\n                     hir::GenericBound::Outlives(lt) => {\n-                        let bound = AstConv::ast_region_to_region(&icx, &lt, None);\n+                        let bound = <dyn AstConv<'_>>::ast_region_to_region(&icx, &lt, None);\n                         let outlives = ty::Binder::bind(ty::OutlivesPredicate(region, bound));\n                         predicates.insert((outlives.to_predicate(tcx), lt.span));\n                     }\n@@ -2041,8 +2047,13 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                 index += 1;\n \n                 let sized = SizedByDefault::Yes;\n-                let bounds =\n-                    AstConv::compute_bounds(&icx, param_ty, &param.bounds, sized, param.span);\n+                let bounds = <dyn AstConv<'_>>::compute_bounds(\n+                    &icx,\n+                    param_ty,\n+                    &param.bounds,\n+                    sized,\n+                    param.span,\n+                );\n                 predicates.extend(bounds.predicates(tcx, param_ty));\n             }\n             GenericParamKind::Const { .. } => {\n@@ -2091,7 +2102,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                             };\n \n                             let mut bounds = Bounds::default();\n-                            let _ = AstConv::instantiate_poly_trait_ref(\n+                            let _ = <dyn AstConv<'_>>::instantiate_poly_trait_ref(\n                                 &icx,\n                                 &poly_trait_ref,\n                                 constness,\n@@ -2103,7 +2114,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n \n                         &hir::GenericBound::LangItemTrait(lang_item, span, hir_id, args) => {\n                             let mut bounds = Bounds::default();\n-                            AstConv::instantiate_lang_item_trait_ref(\n+                            <dyn AstConv<'_>>::instantiate_lang_item_trait_ref(\n                                 &icx,\n                                 lang_item,\n                                 span,\n@@ -2116,7 +2127,8 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                         }\n \n                         hir::GenericBound::Outlives(lifetime) => {\n-                            let region = AstConv::ast_region_to_region(&icx, lifetime, None);\n+                            let region =\n+                                <dyn AstConv<'_>>::ast_region_to_region(&icx, lifetime, None);\n                             predicates.insert((\n                                 ty::Binder::bind(ty::PredicateKind::TypeOutlives(\n                                     ty::OutlivesPredicate(ty, region),\n@@ -2130,11 +2142,11 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n             }\n \n             hir::WherePredicate::RegionPredicate(region_pred) => {\n-                let r1 = AstConv::ast_region_to_region(&icx, &region_pred.lifetime, None);\n+                let r1 = <dyn AstConv<'_>>::ast_region_to_region(&icx, &region_pred.lifetime, None);\n                 predicates.extend(region_pred.bounds.iter().map(|bound| {\n                     let (r2, span) = match bound {\n                         hir::GenericBound::Outlives(lt) => {\n-                            (AstConv::ast_region_to_region(&icx, lt, None), lt.span)\n+                            (<dyn AstConv<'_>>::ast_region_to_region(&icx, lt, None), lt.span)\n                         }\n                         _ => bug!(),\n                     };\n@@ -2377,7 +2389,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     } else {\n         hir::Unsafety::Unsafe\n     };\n-    let fty = AstConv::ty_of_fn(\n+    let fty = <dyn AstConv<'_>>::ty_of_fn(\n         &ItemCtxt::new(tcx, def_id),\n         unsafety,\n         abi,"}, {"sha": "a5b36445aae2e2e31f157bd9f7f9595dbb045142", "filename": "compiler/rustc_typeck/src/collect/item_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -25,7 +25,7 @@ fn associated_type_bounds<'tcx>(\n         InternalSubsts::identity_for_item(tcx, assoc_item_def_id),\n     );\n \n-    let bounds = AstConv::compute_bounds(\n+    let bounds = <dyn AstConv<'_>>::compute_bounds(\n         &ItemCtxt::new(tcx, assoc_item_def_id),\n         item_ty,\n         &bounds,\n@@ -66,7 +66,7 @@ fn opaque_type_bounds<'tcx>(\n         let item_ty =\n             tcx.mk_opaque(opaque_def_id, InternalSubsts::identity_for_item(tcx, opaque_def_id));\n \n-        let bounds = AstConv::compute_bounds(\n+        let bounds = <dyn AstConv<'_>>::compute_bounds(\n             &ItemCtxt::new(tcx, opaque_def_id),\n             item_ty,\n             &bounds,"}, {"sha": "88b47bf5b9cdd68afaea71da39a1520b0fca8737", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -142,7 +142,7 @@ fn require_same_types<'tcx>(\n ) -> bool {\n     tcx.infer_ctxt().enter(|ref infcx| {\n         let param_env = ty::ParamEnv::empty();\n-        let mut fulfill_cx = TraitEngine::new(infcx.tcx);\n+        let mut fulfill_cx = <dyn TraitEngine<'_>>::new(infcx.tcx);\n         match infcx.at(&cause, param_env).eq(expected, actual) {\n             Ok(InferOk { obligations, .. }) => {\n                 fulfill_cx.register_predicate_obligations(infcx, obligations);\n@@ -444,7 +444,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n     let env_def_id = tcx.hir().local_def_id(env_hir_id);\n     let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id.to_def_id());\n     let mut bounds = Bounds::default();\n-    let _ = AstConv::instantiate_poly_trait_ref_inner(\n+    let _ = <dyn AstConv<'_>>::instantiate_poly_trait_ref_inner(\n         &item_cx,\n         hir_trait,\n         DUMMY_SP,"}, {"sha": "98c34f344251e54f8bbd02eccff48ea409e66b0d", "filename": "library/core/src/any.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -285,7 +285,7 @@ impl dyn Any + Send {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is<T: Any>(&self) -> bool {\n-        Any::is::<T>(self)\n+        <dyn Any>::is::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n@@ -309,7 +309,7 @@ impl dyn Any + Send {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n-        Any::downcast_ref::<T>(self)\n+        <dyn Any>::downcast_ref::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n@@ -337,7 +337,7 @@ impl dyn Any + Send {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n-        Any::downcast_mut::<T>(self)\n+        <dyn Any>::downcast_mut::<T>(self)\n     }\n }\n \n@@ -363,7 +363,7 @@ impl dyn Any + Send + Sync {\n     #[stable(feature = \"any_send_sync_methods\", since = \"1.28.0\")]\n     #[inline]\n     pub fn is<T: Any>(&self) -> bool {\n-        Any::is::<T>(self)\n+        <dyn Any>::is::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n@@ -387,7 +387,7 @@ impl dyn Any + Send + Sync {\n     #[stable(feature = \"any_send_sync_methods\", since = \"1.28.0\")]\n     #[inline]\n     pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n-        Any::downcast_ref::<T>(self)\n+        <dyn Any>::downcast_ref::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n@@ -415,7 +415,7 @@ impl dyn Any + Send + Sync {\n     #[stable(feature = \"any_send_sync_methods\", since = \"1.28.0\")]\n     #[inline]\n     pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n-        Any::downcast_mut::<T>(self)\n+        <dyn Any>::downcast_mut::<T>(self)\n     }\n }\n "}, {"sha": "f512d91ebeb4a298dc85eb4a69865dbe1bc83b4f", "filename": "src/test/ui/traits/impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/src%2Ftest%2Fui%2Ftraits%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/src%2Ftest%2Fui%2Ftraits%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -30,8 +30,8 @@ fn main() {\n     let x: &dyn T = &42;\n \n     x.foo();\n-    T::foo(x);\n-    T::bar();\n+    <dyn T>::foo(x);\n+    <dyn T>::bar();\n \n     unsafe { assert_eq!(COUNT, 12); }\n "}, {"sha": "727897d20cb4cfae292a352cd021985092cc8110", "filename": "src/test/ui/traits/inheritance/repeated-supertrait-ambig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -31,7 +31,7 @@ fn with_trait<C:CompareToInts>(c: &C) -> bool {\n }\n \n fn with_ufcs1<C:CompareToInts>(c: &C) -> bool {\n-    CompareToInts::same_as(c, 22) //~ ERROR `dyn CompareToInts: CompareTo<i32>` is not satisfied\n+    <dyn CompareToInts>::same_as(c, 22) //~ ERROR `dyn CompareToInts: CompareTo<i32>` is not satisfi\n }\n \n fn with_ufcs2<C:CompareToInts>(c: &C) -> bool {"}, {"sha": "bb11f18e54505bd8f953ae9599edbb2a8f405847", "filename": "src/test/ui/traits/inheritance/repeated-supertrait-ambig.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -21,8 +21,8 @@ error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfi\n LL |     fn same_as(&self, t: T) -> bool;\n    |     -------------------------------- required by `CompareTo::same_as`\n ...\n-LL |     CompareToInts::same_as(c, 22)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n+LL |     <dyn CompareToInts>::same_as(c, 22)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n   --> $DIR/repeated-supertrait-ambig.rs:38:5"}, {"sha": "cb2581ffa99a5c43bc3210ef81c467032a1fb110", "filename": "src/test/ui/traits/inheritance/repeated-supertrait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -31,7 +31,7 @@ fn with_trait<C:CompareToInts>(c: &C) -> bool {\n }\n \n fn with_ufcs1<C:CompareToInts>(c: &C) -> bool {\n-    CompareToInts::same_as(c, 22_i64) && CompareToInts::same_as(c, 22_u64)\n+    <dyn CompareToInts>::same_as(c, 22_i64) && <dyn CompareToInts>::same_as(c, 22_u64)\n }\n \n fn with_ufcs2<C:CompareToInts>(c: &C) -> bool {"}, {"sha": "38d06b967bc7950f8878f4226f60b710a76a9588", "filename": "src/test/ui/traits/item-privacy.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.rs?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -81,8 +81,8 @@ fn check_method() {\n     //~^ ERROR no function or associated item named `b` found\n     S::c(&S); // OK\n     // a, b, c are resolved as inherent items, their traits don't need to be in scope\n-    C::a(&S); //~ ERROR associated function `a` is private\n-    C::b(&S); // OK\n+    <dyn C>::a(&S); //~ ERROR associated function `a` is private\n+    <dyn C>::b(&S); // OK\n     C::c(&S); // OK\n }\n \n@@ -98,9 +98,9 @@ fn check_assoc_const() {\n     S::B; //~ ERROR no associated item named `B` found\n     S::C; // OK\n     // A, B, C are resolved as inherent items, their traits don't need to be in scope\n-    C::A; //~ ERROR associated constant `A` is private\n-          //~^ ERROR the trait `assoc_const::C` cannot be made into an object\n-    C::B; // ERROR the trait `assoc_const::C` cannot be made into an object\n+    <dyn C>::A; //~ ERROR associated constant `A` is private\n+                //~^ ERROR the trait `assoc_const::C` cannot be made into an object\n+    <dyn C>::B; // ERROR the trait `assoc_const::C` cannot be made into an object\n     C::C; // OK\n }\n "}, {"sha": "68d527dc786aa2cc8406d9cdda218097a0755837", "filename": "src/test/ui/traits/item-privacy.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dac96d45af760dce26ff7cbab09c08411c9a9105/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dac96d45af760dce26ff7cbab09c08411c9a9105/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr?ref=dac96d45af760dce26ff7cbab09c08411c9a9105", "patch": "@@ -67,10 +67,10 @@ LL | use method::B;\n    |\n \n error[E0624]: associated function `a` is private\n-  --> $DIR/item-privacy.rs:84:8\n+  --> $DIR/item-privacy.rs:84:14\n    |\n-LL |     C::a(&S);\n-   |        ^ private associated function\n+LL |     <dyn C>::a(&S);\n+   |              ^ private associated function\n \n error[E0599]: no associated item named `A` found for struct `S` in the current scope\n   --> $DIR/item-privacy.rs:97:8\n@@ -104,16 +104,16 @@ LL | use assoc_const::B;\n    |\n \n error[E0624]: associated constant `A` is private\n-  --> $DIR/item-privacy.rs:101:8\n+  --> $DIR/item-privacy.rs:101:14\n    |\n-LL |     C::A;\n-   |        ^ private associated constant\n+LL |     <dyn C>::A;\n+   |              ^ private associated constant\n \n error[E0038]: the trait `assoc_const::C` cannot be made into an object\n-  --> $DIR/item-privacy.rs:101:5\n+  --> $DIR/item-privacy.rs:101:6\n    |\n-LL |     C::A;\n-   |     ^ `assoc_const::C` cannot be made into an object\n+LL |     <dyn C>::A;\n+   |      ^^^^^ `assoc_const::C` cannot be made into an object\n    |\n    = help: consider moving `C` to another trait\n    = help: consider moving `B` to another trait"}]}