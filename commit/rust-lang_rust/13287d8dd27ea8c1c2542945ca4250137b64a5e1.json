{"sha": "13287d8dd27ea8c1c2542945ca4250137b64a5e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMjg3ZDhkZDI3ZWE4YzFjMjU0Mjk0NWNhNDI1MDEzN2I2NGE1ZTE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-14T18:06:02Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-18T02:14:22Z"}, "message": "Rename OtherOpaqueTy to TypeAliasesOpaqueTy", "tree": {"sha": "de22fa5f058559bf6ef06baca7959c45cb4de01e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de22fa5f058559bf6ef06baca7959c45cb4de01e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13287d8dd27ea8c1c2542945ca4250137b64a5e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmDzjn4ACgkQgTGiTgx5\n76/5hw/9Fen0/1WDSWhfpouE0RokXxMQc5jEeh9FI7j4WurXFGiyXMAQ4apPJRbD\nmt5OmYtWw6ABw9G7DIzgvfRFPxEft2HEeQ3N9TrF9+55QWpL3MYSEx8wKBKzjXih\n28aeC42x8M1spuyLsNqXo6+smhrFZQHwdSVN+0ZjXLLM9iOeViF/RRaKoZyGezhH\n+A6kVS8Cq4cCX3363p8picv+XSFhQmDG90UjO807fDg5iY5u89PoWrShQ8kjydz2\nioEuBXiYKrkw0FL3cD0C4N95C6fI5Eb4Vombz0D+XDjR0M7dheDbG+Scj43azbiG\nBPw5FIR2NsAWoS7PVHItXb+V1PLVtBNX8Od7DQDGWUgxSidlfjgEIuAHj0lB4H0Y\nH2KM42XiwSRwP10v6prs0maW/BNlPTpYbv7amHUw6SiaZMoNORYZ5yTsZ6i4FBFU\nY7wA4G2B+yL/F6UlOWuIz+0H3TsVxyKKoYEzgDF9Z5nH9bSkkuJEfvvSi9iZSQ6j\nAnMk83PEtd9J1lGvNIDWqBKf18TytFlbGbcxvd+3gqgEY1jFLRuvoqfoc7aEd1Xt\n19tMl+p8o43cjtvtetRktlQ7hfg2SZP+BgSz2MUpCgs6mxL4N9ZfQtUGhIcue6oK\nXWlK1UBTF8pQsLEzU4FGfroxfe8Jcdou7nKrUmFaKViW3sTD8Vw=\n=Hrhj\n-----END PGP SIGNATURE-----", "payload": "tree de22fa5f058559bf6ef06baca7959c45cb4de01e\nparent 66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c\nauthor Santiago Pastorino <spastorino@gmail.com> 1626285962 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1626574462 -0300\n\nRename OtherOpaqueTy to TypeAliasesOpaqueTy\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13287d8dd27ea8c1c2542945ca4250137b64a5e1", "html_url": "https://github.com/rust-lang/rust/commit/13287d8dd27ea8c1c2542945ca4250137b64a5e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13287d8dd27ea8c1c2542945ca4250137b64a5e1/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c", "html_url": "https://github.com/rust-lang/rust/commit/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "d8c4fdbb46ad0769ba5b63c0affdd20333748c83", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13287d8dd27ea8c1c2542945ca4250137b64a5e1/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13287d8dd27ea8c1c2542945ca4250137b64a5e1/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=13287d8dd27ea8c1c2542945ca4250137b64a5e1", "patch": "@@ -343,7 +343,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // opaque type Foo1: Trait\n                 let ty = self.lower_ty(\n                     ty,\n-                    ImplTraitContext::OtherOpaqueTy {\n+                    ImplTraitContext::TypeAliasesOpaqueTy {\n                         capturable_lifetimes: &mut FxHashSet::default(),\n                         origin: hir::OpaqueTyOrigin::TyAlias,\n                     },\n@@ -487,7 +487,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let mut capturable_lifetimes;\n         let itctx = if self.sess.features_untracked().impl_trait_in_bindings {\n             capturable_lifetimes = FxHashSet::default();\n-            ImplTraitContext::OtherOpaqueTy {\n+            ImplTraitContext::TypeAliasesOpaqueTy {\n                 capturable_lifetimes: &mut capturable_lifetimes,\n                 origin: hir::OpaqueTyOrigin::Misc,\n             }\n@@ -926,7 +926,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     Some(ty) => {\n                         let ty = self.lower_ty(\n                             ty,\n-                            ImplTraitContext::OtherOpaqueTy {\n+                            ImplTraitContext::TypeAliasesOpaqueTy {\n                                 capturable_lifetimes: &mut FxHashSet::default(),\n                                 origin: hir::OpaqueTyOrigin::TyAlias,\n                             },"}, {"sha": "d5284c1a43d3853a73119485dcbdb325f92a9760", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/13287d8dd27ea8c1c2542945ca4250137b64a5e1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13287d8dd27ea8c1c2542945ca4250137b64a5e1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=13287d8dd27ea8c1c2542945ca4250137b64a5e1", "patch": "@@ -265,7 +265,7 @@ enum ImplTraitContext<'b, 'a> {\n         origin: hir::OpaqueTyOrigin,\n     },\n     /// Impl trait in type aliases.\n-    OtherOpaqueTy {\n+    TypeAliasesOpaqueTy {\n         /// Set of lifetimes that this opaque type can capture, if it uses\n         /// them. This includes lifetimes bound since we entered this context.\n         /// For example:\n@@ -310,8 +310,8 @@ impl<'a> ImplTraitContext<'_, 'a> {\n             ReturnPositionOpaqueTy { fn_def_id, origin } => {\n                 ReturnPositionOpaqueTy { fn_def_id: *fn_def_id, origin: *origin }\n             }\n-            OtherOpaqueTy { capturable_lifetimes, origin } => {\n-                OtherOpaqueTy { capturable_lifetimes, origin: *origin }\n+            TypeAliasesOpaqueTy { capturable_lifetimes, origin } => {\n+                TypeAliasesOpaqueTy { capturable_lifetimes, origin: *origin }\n             }\n             Disallowed(pos) => Disallowed(*pos),\n         }\n@@ -1126,7 +1126,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     //\n                     //     fn foo() -> impl Iterator<Item = impl Debug>\n                     ImplTraitContext::ReturnPositionOpaqueTy { .. }\n-                    | ImplTraitContext::OtherOpaqueTy { .. } => (true, itctx),\n+                    | ImplTraitContext::TypeAliasesOpaqueTy { .. } => (true, itctx),\n \n                     // We are in the argument position, but within a dyn type:\n                     //\n@@ -1150,7 +1150,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         capturable_lifetimes = FxHashSet::default();\n                         (\n                             true,\n-                            ImplTraitContext::OtherOpaqueTy {\n+                            ImplTraitContext::TypeAliasesOpaqueTy {\n                                 capturable_lifetimes: &mut capturable_lifetimes,\n                                 origin: hir::OpaqueTyOrigin::Misc,\n                             },\n@@ -1416,11 +1416,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             None,\n                             |this| this.lower_param_bounds(bounds, itctx),\n                         ),\n-                    ImplTraitContext::OtherOpaqueTy { ref capturable_lifetimes, origin } => {\n+                    ImplTraitContext::TypeAliasesOpaqueTy { ref capturable_lifetimes, origin } => {\n                         // Reset capturable lifetimes, any nested impl trait\n                         // types will inherit lifetimes from this opaque type,\n                         // so don't need to capture them again.\n-                        let nested_itctx = ImplTraitContext::OtherOpaqueTy {\n+                        let nested_itctx = ImplTraitContext::TypeAliasesOpaqueTy {\n                             capturable_lifetimes: &mut FxHashSet::default(),\n                             origin,\n                         };\n@@ -2321,13 +2321,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 )),\n                 _ => None,\n             });\n-            if let ImplTraitContext::OtherOpaqueTy { ref mut capturable_lifetimes, .. } = itctx {\n+            if let ImplTraitContext::TypeAliasesOpaqueTy { ref mut capturable_lifetimes, .. } =\n+                itctx\n+            {\n                 capturable_lifetimes.extend(lt_def_names.clone());\n             }\n \n             let res = this.lower_trait_ref(&p.trait_ref, itctx.reborrow());\n \n-            if let ImplTraitContext::OtherOpaqueTy { ref mut capturable_lifetimes, .. } = itctx {\n+            if let ImplTraitContext::TypeAliasesOpaqueTy { ref mut capturable_lifetimes, .. } =\n+                itctx\n+            {\n                 for param in lt_def_names {\n                     capturable_lifetimes.remove(&param);\n                 }"}]}