{"sha": "be6716f7f9b26bab52bb1879b273df515fe181e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNjcxNmY3ZjliMjZiYWI1MmJiMTg3OWIyNzNkZjUxNWZlMTgxZTk=", "commit": {"author": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-04-11T07:53:10Z"}, "committer": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-04-17T13:30:26Z"}, "message": "Remove unnecessary variable intialization", "tree": {"sha": "a30fb4d1ebe5b27a078115fbda113cd8a7c6a04b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a30fb4d1ebe5b27a078115fbda113cd8a7c6a04b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be6716f7f9b26bab52bb1879b273df515fe181e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be6716f7f9b26bab52bb1879b273df515fe181e9", "html_url": "https://github.com/rust-lang/rust/commit/be6716f7f9b26bab52bb1879b273df515fe181e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be6716f7f9b26bab52bb1879b273df515fe181e9/comments", "author": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "html_url": "https://github.com/rust-lang/rust/commit/b2c1a606feb1fbdb0ac0acba76f881ef172ed474"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "dbda735aa99c85df8a9091158ea7f98a95c27137", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/be6716f7f9b26bab52bb1879b273df515fe181e9/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6716f7f9b26bab52bb1879b273df515fe181e9/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=be6716f7f9b26bab52bb1879b273df515fe181e9", "patch": "@@ -975,18 +975,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Expectation<'tcx>,\n         expr: &'tcx hir::Expr<'tcx>,\n     ) -> Ty<'tcx> {\n-        let uty = expected.to_option(self).and_then(|uty| match uty.kind {\n-            ty::Array(ty, _) | ty::Slice(ty) => Some(ty),\n-            _ => None,\n-        });\n-\n         let element_ty = if !args.is_empty() {\n-            let coerce_to = uty.unwrap_or_else(|| {\n-                self.next_ty_var(TypeVariableOrigin {\n-                    kind: TypeVariableOriginKind::TypeInference,\n-                    span: expr.span,\n+            let coerce_to = expected\n+                .to_option(self)\n+                .and_then(|uty| match uty.kind {\n+                    ty::Array(ty, _) | ty::Slice(ty) => Some(ty),\n+                    _ => None,\n                 })\n-            });\n+                .unwrap_or_else(|| {\n+                    self.next_ty_var(TypeVariableOrigin {\n+                        kind: TypeVariableOriginKind::TypeInference,\n+                        span: expr.span,\n+                    })\n+                });\n             let mut coerce = CoerceMany::with_coercion_sites(coerce_to, args);\n             assert_eq!(self.diverges.get(), Diverges::Maybe);\n             for e in args {"}]}