{"sha": "2658fb7783271fd093017d64b6417868802fec05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NThmYjc3ODMyNzFmZDA5MzAxN2Q2NGI2NDE3ODY4ODAyZmVjMDU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-12-06T20:59:44Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:28:00Z"}, "message": "Alias attributes of hir::Stmt.\n\nThe attributes for statements and those of the statements' content.", "tree": {"sha": "1d852847dc52c8561cf2522fe9685058d369b3aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d852847dc52c8561cf2522fe9685058d369b3aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2658fb7783271fd093017d64b6417868802fec05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2658fb7783271fd093017d64b6417868802fec05", "html_url": "https://github.com/rust-lang/rust/commit/2658fb7783271fd093017d64b6417868802fec05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2658fb7783271fd093017d64b6417868802fec05/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12ce80a9ea9f15b38e37017ee5a944c45681fbe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/12ce80a9ea9f15b38e37017ee5a944c45681fbe9", "html_url": "https://github.com/rust-lang/rust/commit/12ce80a9ea9f15b38e37017ee5a944c45681fbe9"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "52646557fc309891f13c142211b10c8edd2267d6", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2658fb7783271fd093017d64b6417868802fec05/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2658fb7783271fd093017d64b6417868802fec05/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=2658fb7783271fd093017d64b6417868802fec05", "patch": "@@ -2433,7 +2433,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     fn lower_stmt(&mut self, s: &Stmt) -> SmallVec<[hir::Stmt<'hir>; 1]> {\n-        let kind = match s.kind {\n+        let (hir_id, kind) = match s.kind {\n             StmtKind::Local(ref l) => {\n                 let (l, item_ids) = self.lower_local(l);\n                 let mut ids: SmallVec<[hir::Stmt<'hir>; 1]> = item_ids\n@@ -2446,9 +2446,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         self.stmt(s.span, hir::StmtKind::Item(item_id))\n                     })\n                     .collect();\n+                let hir_id = self.lower_node_id(s.id);\n+                self.attrs.push_sparse(hir_id, self.attrs[l.hir_id]);\n                 ids.push({\n                     hir::Stmt {\n-                        hir_id: self.lower_node_id(s.id),\n+                        hir_id,\n                         kind: hir::StmtKind::Local(self.arena.alloc(l)),\n                         span: s.span,\n                     }\n@@ -2471,12 +2473,22 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     })\n                     .collect();\n             }\n-            StmtKind::Expr(ref e) => hir::StmtKind::Expr(self.lower_expr(e)),\n-            StmtKind::Semi(ref e) => hir::StmtKind::Semi(self.lower_expr(e)),\n+            StmtKind::Expr(ref e) => {\n+                let e = self.lower_expr(e);\n+                let hir_id = self.lower_node_id(s.id);\n+                self.attrs.push_sparse(hir_id, self.attrs[e.hir_id]);\n+                (hir_id, hir::StmtKind::Expr(e))\n+            }\n+            StmtKind::Semi(ref e) => {\n+                let e = self.lower_expr(e);\n+                let hir_id = self.lower_node_id(s.id);\n+                self.attrs.push_sparse(hir_id, self.attrs[e.hir_id]);\n+                (hir_id, hir::StmtKind::Semi(e))\n+            }\n             StmtKind::Empty => return smallvec![],\n             StmtKind::MacCall(..) => panic!(\"shouldn't exist here\"),\n         };\n-        smallvec![hir::Stmt { hir_id: self.lower_node_id(s.id), kind, span: s.span }]\n+        smallvec![hir::Stmt { hir_id, kind, span: s.span }]\n     }\n \n     fn lower_block_check_mode(&mut self, b: &BlockCheckMode) -> hir::BlockCheckMode {"}]}