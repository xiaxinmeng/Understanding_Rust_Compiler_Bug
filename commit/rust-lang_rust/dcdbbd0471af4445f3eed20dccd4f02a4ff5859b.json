{"sha": "dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "node_id": "C_kwDOAAsO6NoAKGRjZGJiZDA0NzFhZjQ0NDVmM2VlZDIwZGNjZDRmMDJhNGZmNTg1OWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-13T18:57:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-13T18:57:11Z"}, "message": "Rollup merge of #105476 - estebank:moves-n-borrows, r=compiler-errors\n\nChange pattern borrowing suggestions to be verbose and remove invalid suggestion\n\nSynthesize a more accurate span and use verbose suggestion output to\nmake the message clearer.\n\nDo not suggest borrowing binding in pattern in let else. Fix #104838.", "tree": {"sha": "672829df295b1e6735b96a703e7e439e64479f02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/672829df295b1e6735b96a703e7e439e64479f02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjmMsHCRBK7hj4Ov3rIwAA6egIALKbi9MijJ3e4N6nlbF6d00K\ntInA0DyUAhGa4vN10nHXNChNN8oG3ooSR3H9ftCSQi9zJPae8dRW1rYosd/dcNlJ\n8dtd5U6ExkRd5UUXznrQdbPNLWmACusUGzCE+t51s+40XCrBRknp3K+pCvAuHVtK\n8iQqpdcFnZbGWI8LocyUu+r70a1h4M5nsv3HGdDCGmz21ayHkozNwV4gwRH1cg3S\nAO60FntEHJ36wTfIvtgPvB1bnSuO8a3BkEVmyncJek+66UmAJ2wMYSmfV0Cv/269\nY0aZHK9vWJ9n1DWNbvPoFF1W+K3AaAWqQARGVOKv8sG7/+EqljNDvh4NRbS3CfY=\n=zwg5\n-----END PGP SIGNATURE-----\n", "payload": "tree 672829df295b1e6735b96a703e7e439e64479f02\nparent 5e38e702aac61e1c1a243e6ee09d054bfdd71598\nparent cf0b6b93373509f6aa9f5828f700669653c60425\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670957831 +0100\ncommitter GitHub <noreply@github.com> 1670957831 +0100\n\nRollup merge of #105476 - estebank:moves-n-borrows, r=compiler-errors\n\nChange pattern borrowing suggestions to be verbose and remove invalid suggestion\n\nSynthesize a more accurate span and use verbose suggestion output to\nmake the message clearer.\n\nDo not suggest borrowing binding in pattern in let else. Fix #104838.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "html_url": "https://github.com/rust-lang/rust/commit/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e38e702aac61e1c1a243e6ee09d054bfdd71598", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e38e702aac61e1c1a243e6ee09d054bfdd71598", "html_url": "https://github.com/rust-lang/rust/commit/5e38e702aac61e1c1a243e6ee09d054bfdd71598"}, {"sha": "cf0b6b93373509f6aa9f5828f700669653c60425", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0b6b93373509f6aa9f5828f700669653c60425", "html_url": "https://github.com/rust-lang/rust/commit/cf0b6b93373509f6aa9f5828f700669653c60425"}], "stats": {"total": 2658, "additions": 1842, "deletions": 816}, "files": [{"sha": "6db3c858ae7149b9a138dbd77c7813c3eeea298e", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 64, "deletions": 36, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -4,7 +4,7 @@ use rustc_middle::ty;\n use rustc_mir_dataflow::move_paths::{\n     IllegalMoveOrigin, IllegalMoveOriginKind, LookupResult, MoveError, MovePathIndex,\n };\n-use rustc_span::Span;\n+use rustc_span::{BytePos, Span};\n \n use crate::diagnostics::{DescribePlaceOpt, UseSpans};\n use crate::prefixes::PrefixSet;\n@@ -148,7 +148,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         match_span: Span,\n         statement_span: Span,\n     ) {\n-        debug!(\"append_binding_error(match_place={:?}, match_span={:?})\", match_place, match_span);\n+        debug!(?match_place, ?match_span, \"append_binding_error\");\n \n         let from_simple_let = match_place.is_none();\n         let match_place = match_place.unwrap_or(move_from);\n@@ -160,7 +160,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     if let GroupedMoveError::MovesFromPlace { span, binds_to, .. } = ge\n                         && match_span == *span\n                     {\n-                        debug!(\"appending local({:?}) to list\", bind_to);\n+                        debug!(\"appending local({bind_to:?}) to list\");\n                         if !binds_to.is_empty() {\n                             binds_to.push(bind_to);\n                         }\n@@ -198,7 +198,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     } = ge\n                     {\n                         if match_span == *span && mpi == *other_mpi {\n-                            debug!(\"appending local({:?}) to list\", bind_to);\n+                            debug!(\"appending local({bind_to:?}) to list\");\n                             binds_to.push(bind_to);\n                             return;\n                         }\n@@ -410,15 +410,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     fn add_move_hints(&self, error: GroupedMoveError<'tcx>, err: &mut Diagnostic, span: Span) {\n         match error {\n             GroupedMoveError::MovesFromPlace { mut binds_to, move_from, .. } => {\n-                if let Ok(snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n-                    err.span_suggestion(\n-                        span,\n-                        \"consider borrowing here\",\n-                        format!(\"&{snippet}\"),\n-                        Applicability::Unspecified,\n-                    );\n-                }\n-\n+                self.add_borrow_suggestions(err, span);\n                 if binds_to.is_empty() {\n                     let place_ty = move_from.ty(self.body, self.infcx.tcx).ty;\n                     let place_desc = match self.describe_place(move_from.as_ref()) {\n@@ -461,39 +453,75 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn add_borrow_suggestions(&self, err: &mut Diagnostic, span: Span) {\n+        match self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n+            Ok(snippet) if snippet.starts_with('*') => {\n+                err.span_suggestion_verbose(\n+                    span.with_hi(span.lo() + BytePos(1)),\n+                    \"consider removing the dereference here\",\n+                    String::new(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            _ => {\n+                err.span_suggestion_verbose(\n+                    span.shrink_to_lo(),\n+                    \"consider borrowing here\",\n+                    \"&\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        }\n+    }\n+\n     fn add_move_error_suggestions(&self, err: &mut Diagnostic, binds_to: &[Local]) {\n-        let mut suggestions: Vec<(Span, &str, String)> = Vec::new();\n+        let mut suggestions: Vec<(Span, String, String)> = Vec::new();\n         for local in binds_to {\n             let bind_to = &self.body.local_decls[*local];\n             if let Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n                 VarBindingForm { pat_span, .. },\n             )))) = bind_to.local_info\n             {\n-                if let Ok(pat_snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(pat_span)\n+                let Ok(pat_snippet) =\n+                    self.infcx.tcx.sess.source_map().span_to_snippet(pat_span) else { continue; };\n+                let Some(stripped) = pat_snippet.strip_prefix('&') else {\n+                    suggestions.push((\n+                        bind_to.source_info.span.shrink_to_lo(),\n+                        \"consider borrowing the pattern binding\".to_string(),\n+                        \"ref \".to_string(),\n+                    ));\n+                    continue;\n+                };\n+                let inner_pat_snippet = stripped.trim_start();\n+                let (pat_span, suggestion, to_remove) = if inner_pat_snippet.starts_with(\"mut\")\n+                    && inner_pat_snippet[\"mut\".len()..].starts_with(rustc_lexer::is_whitespace)\n                 {\n-                    if let Some(stripped) = pat_snippet.strip_prefix('&') {\n-                        let pat_snippet = stripped.trim_start();\n-                        let (suggestion, to_remove) = if pat_snippet.starts_with(\"mut\")\n-                            && pat_snippet[\"mut\".len()..].starts_with(rustc_lexer::is_whitespace)\n-                        {\n-                            (pat_snippet[\"mut\".len()..].trim_start(), \"&mut\")\n-                        } else {\n-                            (pat_snippet, \"&\")\n-                        };\n-                        suggestions.push((pat_span, to_remove, suggestion.to_owned()));\n-                    }\n-                }\n+                    let inner_pat_snippet = inner_pat_snippet[\"mut\".len()..].trim_start();\n+                    let pat_span = pat_span.with_hi(\n+                        pat_span.lo()\n+                            + BytePos((pat_snippet.len() - inner_pat_snippet.len()) as u32),\n+                    );\n+                    (pat_span, String::new(), \"mutable borrow\")\n+                } else {\n+                    let pat_span = pat_span.with_hi(\n+                        pat_span.lo()\n+                            + BytePos(\n+                                (pat_snippet.len() - inner_pat_snippet.trim_start().len()) as u32,\n+                            ),\n+                    );\n+                    (pat_span, String::new(), \"borrow\")\n+                };\n+                suggestions.push((\n+                    pat_span,\n+                    format!(\"consider removing the {to_remove}\"),\n+                    suggestion.to_string(),\n+                ));\n             }\n         }\n         suggestions.sort_unstable_by_key(|&(span, _, _)| span);\n         suggestions.dedup_by_key(|&mut (span, _, _)| span);\n-        for (span, to_remove, suggestion) in suggestions {\n-            err.span_suggestion(\n-                span,\n-                &format!(\"consider removing the `{to_remove}`\"),\n-                suggestion,\n-                Applicability::MachineApplicable,\n-            );\n+        for (span, msg, suggestion) in suggestions {\n+            err.span_suggestion_verbose(span, &msg, suggestion, Applicability::MachineApplicable);\n         }\n     }\n \n@@ -521,8 +549,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n         if binds_to.len() > 1 {\n             err.note(\n-                \"move occurs because these variables have types that \\\n-                      don't implement the `Copy` trait\",\n+                \"move occurs because these variables have types that don't implement the `Copy` \\\n+                 trait\",\n             );\n         }\n     }"}, {"sha": "7b19acf70737f66a2451cd75634c54b9de26fb34", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -231,7 +231,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                         remainder_span,\n                                         pattern,\n                                         None,\n-                                        Some((None, initializer_span)),\n+                                        Some((Some(&destination), initializer_span)),\n                                     );\n                                     this.visit_primary_bindings(\n                                         pattern,"}, {"sha": "abee72ba8cf97cb1ed9d5ca73462a894368d393b", "filename": "src/test/ui/borrowck/access-mode-in-closures.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Faccess-mode-in-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Faccess-mode-in-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Faccess-mode-in-closures.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -3,10 +3,15 @@ error[E0507]: cannot move out of `s` which is behind a shared reference\n    |\n LL |         match *s { S(v) => v }\n    |               ^^     -\n-   |               |      |\n-   |               |      data moved here\n-   |               |      move occurs because `v` has type `Vec<isize>`, which does not implement the `Copy` trait\n-   |               help: consider borrowing here: `&*s`\n+   |                      |\n+   |                      data moved here\n+   |                      move occurs because `v` has type `Vec<isize>`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -         match *s { S(v) => v }\n+LL +         match s { S(v) => v }\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "f9ced03e0f038fd86afc5020f3c737349a99727b", "filename": "src/test/ui/borrowck/borrowck-for-loop-correct-cmt-for-pattern.stderr", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,31 +2,46 @@ error[E0507]: cannot move out of a shared reference\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:12:15\n    |\n LL |     for &a in x.iter() {\n-   |         --    ^^^^^^^^\n-   |         ||\n-   |         |data moved here\n-   |         |move occurs because `a` has type `&mut i32`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&`: `a`\n+   |          -    ^^^^^^^^\n+   |          |\n+   |          data moved here\n+   |          move occurs because `a` has type `&mut i32`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     for &a in x.iter() {\n+LL +     for a in x.iter() {\n+   |\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:18:15\n    |\n LL |     for &a in &f.a {\n-   |         --    ^^^^\n-   |         ||\n-   |         |data moved here\n-   |         |move occurs because `a` has type `Box<isize>`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&`: `a`\n+   |          -    ^^^^\n+   |          |\n+   |          data moved here\n+   |          move occurs because `a` has type `Box<isize>`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     for &a in &f.a {\n+LL +     for a in &f.a {\n+   |\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:15\n    |\n LL |     for &a in x.iter() {\n-   |         --    ^^^^^^^^\n-   |         ||\n-   |         |data moved here\n-   |         |move occurs because `a` has type `Box<i32>`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&`: `a`\n+   |          -    ^^^^^^^^\n+   |          |\n+   |          data moved here\n+   |          move occurs because `a` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     for &a in x.iter() {\n+LL +     for a in x.iter() {\n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "625e7c3cad590c668d6bfb80ebbbd4a9eb8b4c95", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.fixed?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+fn main() {\n+\n+    let x: Option<Box<_>> = Some(Box::new(1));\n+\n+    match x {\n+      Some(ref y) => {\n+        let _b = y; //~ ERROR cannot move out\n+      }\n+      _ => {}\n+    }\n+}"}, {"sha": "f79a846e70e7bcc9448267766c5050853ab43e20", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n fn main() {\n \n     let x: Option<Box<_>> = Some(Box::new(1));"}, {"sha": "850bb9ae3930c87c80ed595f8e22ae5789262c9f", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -1,11 +1,14 @@\n error[E0507]: cannot move out of `*y` which is behind a shared reference\n-  --> $DIR/borrowck-issue-2657-2.rs:7:18\n+  --> $DIR/borrowck-issue-2657-2.rs:8:18\n    |\n LL |         let _b = *y;\n-   |                  ^^\n-   |                  |\n-   |                  move occurs because `*y` has type `Box<i32>`, which does not implement the `Copy` trait\n-   |                  help: consider borrowing here: `&*y`\n+   |                  ^^ move occurs because `*y` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -         let _b = *y;\n+LL +         let _b = y;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "cf6c382a692b263c089d6b6c42dcfb8e4518bc5f", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.fixed", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.fixed?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -0,0 +1,56 @@\n+// run-rustfix\n+#![allow(unused)]\n+enum Foo {\n+    Foo1(Box<u32>, Box<u32>),\n+    Foo2(Box<u32>),\n+    Foo3,\n+}\n+\n+\n+\n+fn blah() {\n+    let f = &Foo::Foo1(Box::new(1), Box::new(2));\n+    match f { //~ ERROR cannot move out of\n+        Foo::Foo1(num1,\n+                  num2) => (),\n+        Foo::Foo2(num) => (),\n+        Foo::Foo3 => ()\n+    }\n+}\n+\n+struct S {\n+    f: String,\n+    g: String\n+}\n+impl Drop for S {\n+    fn drop(&mut self) { println!(\"{}\", self.f); }\n+}\n+\n+fn move_in_match() {\n+    match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n+        //~^ ERROR cannot move out of type `S`, which implements the `Drop` trait\n+        S {\n+            f: ref _s,\n+            g: ref _t\n+        } => {}\n+    }\n+}\n+\n+// from issue-8064\n+struct A {\n+    a: Box<isize>,\n+}\n+\n+fn free<T>(_: T) {}\n+\n+fn blah2() {\n+    let a = &A { a: Box::new(1) };\n+    match &a.a { //~ ERROR cannot move out of\n+        n => {\n+            free(n)\n+        }\n+    }\n+    free(a)\n+}\n+\n+fn main() {}"}, {"sha": "f336ac4f994fa6990d648c9a9fa5a8303a020102", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+#![allow(unused)]\n enum Foo {\n     Foo1(Box<u32>, Box<u32>),\n     Foo2(Box<u32>),"}, {"sha": "722c2c1443a7fd6d4a74d04f1920b44f1052c79c", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -1,8 +1,8 @@\n error[E0507]: cannot move out of `f` as enum variant `Foo1` which is behind a shared reference\n-  --> $DIR/borrowck-move-error-with-note.rs:11:11\n+  --> $DIR/borrowck-move-error-with-note.rs:13:11\n    |\n LL |     match *f {\n-   |           ^^ help: consider borrowing here: `&*f`\n+   |           ^^\n LL |         Foo::Foo1(num1,\n    |                   ---- data moved here\n LL |                   num2) => (),\n@@ -11,9 +11,14 @@ LL |         Foo::Foo2(num) => (),\n    |                   --- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the dereference here\n+   |\n+LL -     match *f {\n+LL +     match f {\n+   |\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:28:11\n+  --> $DIR/borrowck-move-error-with-note.rs:30:11\n    |\n LL |     match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n@@ -24,17 +29,30 @@ LL |             g: _t\n    |                -- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider borrowing the pattern binding\n+   |\n+LL |             f: ref _s,\n+   |                +++\n+help: consider borrowing the pattern binding\n+   |\n+LL |             g: ref _t\n+   |                +++\n \n error[E0507]: cannot move out of `a.a` which is behind a shared reference\n-  --> $DIR/borrowck-move-error-with-note.rs:46:11\n+  --> $DIR/borrowck-move-error-with-note.rs:48:11\n    |\n LL |     match a.a {\n-   |           ^^^ help: consider borrowing here: `&a.a`\n+   |           ^^^\n LL |         n => {\n    |         -\n    |         |\n    |         data moved here\n    |         move occurs because `n` has type `Box<isize>`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     match &a.a {\n+   |           +\n \n error: aborting due to 3 previous errors\n "}, {"sha": "43fc102bd6256c90ea6a650670e487b1e0c49b60", "filename": "src/test/ui/borrowck/borrowck-move-from-unsafe-ptr.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,10 +2,13 @@ error[E0507]: cannot move out of `*x` which is behind a raw pointer\n   --> $DIR/borrowck-move-from-unsafe-ptr.rs:2:13\n    |\n LL |     let y = *x;\n-   |             ^^\n-   |             |\n-   |             move occurs because `*x` has type `Box<isize>`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&*x`\n+   |             ^^ move occurs because `*x` has type `Box<isize>`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let y = *x;\n+LL +     let y = x;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "21bd073321b8374dff41d9e842a537a21ec33fbb", "filename": "src/test/ui/borrowck/borrowck-move-in-irrefut-pat.stderr", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -3,30 +3,45 @@ error[E0507]: cannot move out of a shared reference\n    |\n LL | fn arg_item(&_x: &String) {}\n    |             ^--\n-   |             ||\n-   |             |data moved here\n-   |             |move occurs because `_x` has type `String`, which does not implement the `Copy` trait\n-   |             help: consider removing the `&`: `_x`\n+   |              |\n+   |              data moved here\n+   |              move occurs because `_x` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL - fn arg_item(&_x: &String) {}\n+LL + fn arg_item(_x: &String) {}\n+   |\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/borrowck-move-in-irrefut-pat.rs:7:11\n    |\n LL |     with(|&_x| ())\n    |           ^--\n-   |           ||\n-   |           |data moved here\n-   |           |move occurs because `_x` has type `String`, which does not implement the `Copy` trait\n-   |           help: consider removing the `&`: `_x`\n+   |            |\n+   |            data moved here\n+   |            move occurs because `_x` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     with(|&_x| ())\n+LL +     with(|_x| ())\n+   |\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/borrowck-move-in-irrefut-pat.rs:12:15\n    |\n LL |     let &_x = &\"hi\".to_string();\n-   |         ---   ^^^^^^^^^^^^^^^^^\n-   |         ||\n-   |         |data moved here\n-   |         |move occurs because `_x` has type `String`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&`: `_x`\n+   |          --   ^^^^^^^^^^^^^^^^^\n+   |          |\n+   |          data moved here\n+   |          move occurs because `_x` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     let &_x = &\"hi\".to_string();\n+LL +     let _x = &\"hi\".to_string();\n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "599fa1e88dfecdd4dfd882aa6a31f94091c48ed6", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-deref.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,10 +2,13 @@ error[E0507]: cannot move out of an `Rc`\n   --> $DIR/borrowck-move-out-of-overloaded-deref.rs:4:14\n    |\n LL |     let _x = *Rc::new(\"hi\".to_string());\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              move occurs because value has type `String`, which does not implement the `Copy` trait\n-   |              help: consider borrowing here: `&*Rc::new(\"hi\".to_string())`\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ move occurs because value has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let _x = *Rc::new(\"hi\".to_string());\n+LL +     let _x = Rc::new(\"hi\".to_string());\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c463c6559386c45265021279337c4bc644e7104f", "filename": "src/test/ui/borrowck/borrowck-move-out-of-struct-with-dtor.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.fixed?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+#![allow(unused)]\n+struct S {f:String}\n+impl Drop for S {\n+    fn drop(&mut self) { println!(\"{}\", self.f); }\n+}\n+\n+fn move_in_match() {\n+    match (S {f:\"foo\".to_string()}) {\n+        //~^ ERROR [E0509]\n+        S {f:ref _s} => {}\n+    }\n+}\n+\n+fn move_in_let() {\n+    let S {f:ref _s} = S {f:\"foo\".to_string()};\n+    //~^ ERROR [E0509]\n+}\n+\n+fn move_in_fn_arg(S {f:ref _s}: S) {\n+    //~^ ERROR [E0509]\n+}\n+\n+fn main() {}"}, {"sha": "93183062d61b319ac075ee4249d6c8d291f47899", "filename": "src/test/ui/borrowck/borrowck-move-out-of-struct-with-dtor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+#![allow(unused)]\n struct S {f:String}\n impl Drop for S {\n     fn drop(&mut self) { println!(\"{}\", self.f); }"}, {"sha": "58f706c65ff281fc78101fac28e4812d7a084877", "filename": "src/test/ui/borrowck/borrowck-move-out-of-struct-with-dtor.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -1,5 +1,5 @@\n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:7:11\n+  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:9:11\n    |\n LL |     match (S {f:\"foo\".to_string()}) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n@@ -9,25 +9,40 @@ LL |         S {f:_s} => {}\n    |              |\n    |              data moved here\n    |              move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         S {f:ref _s} => {}\n+   |              +++\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:14:20\n+  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:16:20\n    |\n LL |     let S {f:_s} = S {f:\"foo\".to_string()};\n    |              --    ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n    |              |\n    |              data moved here\n    |              move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let S {f:ref _s} = S {f:\"foo\".to_string()};\n+   |              +++\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:18:19\n+  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:20:19\n    |\n LL | fn move_in_fn_arg(S {f:_s}: S) {\n    |                   ^^^^^--^\n    |                   |    |\n    |                   |    data moved here\n    |                   |    move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n    |                   cannot move out of here\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL | fn move_in_fn_arg(S {f:ref _s}: S) {\n+   |                        +++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "bc2ddf85fb4a856d32352fc585c0ab54c45c88ff", "filename": "src/test/ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.fixed?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+#![allow(unused)]\n+struct S(String);\n+impl Drop for S {\n+    fn drop(&mut self) { }\n+}\n+\n+fn move_in_match() {\n+    match S(\"foo\".to_string()) {\n+        //~^ ERROR cannot move out of type `S`, which implements the `Drop` trait\n+        S(ref _s) => {}\n+    }\n+}\n+\n+fn move_in_let() {\n+    let S(ref _s) = S(\"foo\".to_string());\n+    //~^ ERROR cannot move out of type `S`, which implements the `Drop` trait\n+}\n+\n+fn move_in_fn_arg(S(ref _s): S) {\n+    //~^ ERROR cannot move out of type `S`, which implements the `Drop` trait\n+}\n+\n+fn main() {}"}, {"sha": "f050bce87406799608f4e1db27e3c26f845ecc30", "filename": "src/test/ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+#![allow(unused)]\n struct S(String);\n impl Drop for S {\n     fn drop(&mut self) { }"}, {"sha": "160a1f99f63f657c536ed8d63481af37d3246a42", "filename": "src/test/ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -1,5 +1,5 @@\n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:7:11\n+  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:9:11\n    |\n LL |     match S(\"foo\".to_string()) {\n    |           ^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n@@ -9,25 +9,40 @@ LL |         S(_s) => {}\n    |           |\n    |           data moved here\n    |           move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         S(ref _s) => {}\n+   |           +++\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:14:17\n+  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:16:17\n    |\n LL |     let S(_s) = S(\"foo\".to_string());\n    |           --    ^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n    |           |\n    |           data moved here\n    |           move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let S(ref _s) = S(\"foo\".to_string());\n+   |           +++\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:18:19\n+  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:20:19\n    |\n LL | fn move_in_fn_arg(S(_s): S) {\n    |                   ^^--^\n    |                   | |\n    |                   | data moved here\n    |                   | move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n    |                   cannot move out of here\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL | fn move_in_fn_arg(S(ref _s): S) {\n+   |                     +++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9ff20a1f46a127ea3c5c6a970869eb53966d20f1", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -10,10 +10,10 @@ LL |                   Foo { string: b }] => {\n    |                                 - ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n-help: consider removing the `&`\n+help: consider removing the borrow\n    |\n-LL ~                 [Foo { string: a },\n-LL ~                   Foo { string: b }] => {\n+LL -                 &[Foo { string: a },\n+LL +                 [Foo { string: a },\n    |\n \n error: aborting due to previous error"}, {"sha": "f5f4817e9bf3220f9a619064f3c8d75d5c766dc6", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-from-vec.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,10 +2,12 @@ error[E0507]: cannot move out of index of `MyVec<Box<i32>>`\n   --> $DIR/borrowck-overloaded-index-move-from-vec.rs:20:15\n    |\n LL |     let bad = v[0];\n-   |               ^^^^\n-   |               |\n-   |               move occurs because value has type `Box<i32>`, which does not implement the `Copy` trait\n-   |               help: consider borrowing here: `&v[0]`\n+   |               ^^^^ move occurs because value has type `Box<i32>`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let bad = &v[0];\n+   |               +\n \n error: aborting due to previous error\n "}, {"sha": "0e9284a2cadd26cf48564328da88ebe070829077", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -37,7 +37,7 @@ fn c() {\n         &mut [_a,\n         //~^ NOTE data moved here\n         //~| NOTE move occurs because `_a` has type\n-        //~| HELP consider removing the `&mut`\n+        //~| HELP consider removing the mutable borrow\n             ..\n         ] => {\n         }\n@@ -56,7 +56,7 @@ fn d() {\n         //~^ ERROR cannot move out\n         //~| NOTE cannot move out\n         &mut [\n-        //~^ HELP consider removing the `&mut`\n+        //~^ HELP consider removing the mutable borrow\n          _b] => {}\n         //~^ NOTE data moved here\n         //~| NOTE move occurs because `_b` has type\n@@ -79,7 +79,7 @@ fn e() {\n         //~^ NOTE data moved here\n         //~| NOTE and here\n         //~| NOTE and here\n-        //~| HELP consider removing the `&mut`\n+        //~| HELP consider removing the mutable borrow\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out"}, {"sha": "0dc5e64e4ff3022ee92075d07b49bd3c2134729e", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -34,14 +34,10 @@ LL |         &mut [_a,\n    |               data moved here\n    |               move occurs because `_a` has type `Box<isize>`, which does not implement the `Copy` trait\n    |\n-help: consider removing the `&mut`\n+help: consider removing the mutable borrow\n    |\n-LL ~         [_a,\n-LL +\n-LL +\n-LL +\n-LL +             ..\n-LL ~         ] => {\n+LL -         &mut [_a,\n+LL +         [_a,\n    |\n \n error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n@@ -52,7 +48,11 @@ LL |     let a = vec[0];\n    |             |\n    |             cannot move out of here\n    |             move occurs because `vec[_]` has type `Box<isize>`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&vec[0]`\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let a = &vec[0];\n+   |             +\n \n error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:55:11\n@@ -66,11 +66,10 @@ LL |          _b] => {}\n    |          data moved here\n    |          move occurs because `_b` has type `Box<isize>`, which does not implement the `Copy` trait\n    |\n-help: consider removing the `&mut`\n+help: consider removing the mutable borrow\n    |\n-LL ~         [\n-LL +\n-LL ~          _b] => {}\n+LL -         &mut [\n+LL +         [\n    |\n \n error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n@@ -81,7 +80,11 @@ LL |     let a = vec[0];\n    |             |\n    |             cannot move out of here\n    |             move occurs because `vec[_]` has type `Box<isize>`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&vec[0]`\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let a = &vec[0];\n+   |             +\n \n error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:74:11\n@@ -90,14 +93,17 @@ LL |     match vec {\n    |           ^^^ cannot move out of here\n ...\n LL |         &mut [_a, _b, _c] => {}\n-   |         -----------------\n-   |         |     |   |   |\n-   |         |     |   |   ...and here\n-   |         |     |   ...and here\n-   |         |     data moved here\n-   |         help: consider removing the `&mut`: `[_a, _b, _c]`\n+   |               --  --  -- ...and here\n+   |               |   |\n+   |               |   ...and here\n+   |               data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the mutable borrow\n+   |\n+LL -         &mut [_a, _b, _c] => {}\n+LL +         [_a, _b, _c] => {}\n+   |\n \n error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:85:13\n@@ -107,7 +113,11 @@ LL |     let a = vec[0];\n    |             |\n    |             cannot move out of here\n    |             move occurs because `vec[_]` has type `Box<isize>`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&vec[0]`\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let a = &vec[0];\n+   |             +\n \n error: aborting due to 8 previous errors\n "}, {"sha": "65aea5b1834b0dc750be678ea46c8216b05773f7", "filename": "src/test/ui/borrowck/issue-17718-static-move.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-17718-static-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-17718-static-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-17718-static-move.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,10 +2,12 @@ error[E0507]: cannot move out of static item `FOO`\n   --> $DIR/issue-17718-static-move.rs:6:14\n    |\n LL |     let _a = FOO;\n-   |              ^^^\n-   |              |\n-   |              move occurs because `FOO` has type `Foo`, which does not implement the `Copy` trait\n-   |              help: consider borrowing here: `&FOO`\n+   |              ^^^ move occurs because `FOO` has type `Foo`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let _a = &FOO;\n+   |              +\n \n error: aborting due to previous error\n "}, {"sha": "215bf0100636949a6eda04a58eec81bdaab2dd8f", "filename": "src/test/ui/borrowck/issue-20801.stderr", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-20801.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-20801.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-20801.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,37 +2,49 @@ error[E0507]: cannot move out of a mutable reference\n   --> $DIR/issue-20801.rs:26:22\n    |\n LL |     let a = unsafe { *mut_ref() };\n-   |                      ^^^^^^^^^^\n-   |                      |\n-   |                      move occurs because value has type `T`, which does not implement the `Copy` trait\n-   |                      help: consider borrowing here: `&*mut_ref()`\n+   |                      ^^^^^^^^^^ move occurs because value has type `T`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let a = unsafe { *mut_ref() };\n+LL +     let a = unsafe { mut_ref() };\n+   |\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/issue-20801.rs:29:22\n    |\n LL |     let b = unsafe { *imm_ref() };\n-   |                      ^^^^^^^^^^\n-   |                      |\n-   |                      move occurs because value has type `T`, which does not implement the `Copy` trait\n-   |                      help: consider borrowing here: `&*imm_ref()`\n+   |                      ^^^^^^^^^^ move occurs because value has type `T`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let b = unsafe { *imm_ref() };\n+LL +     let b = unsafe { imm_ref() };\n+   |\n \n error[E0507]: cannot move out of a raw pointer\n   --> $DIR/issue-20801.rs:32:22\n    |\n LL |     let c = unsafe { *mut_ptr() };\n-   |                      ^^^^^^^^^^\n-   |                      |\n-   |                      move occurs because value has type `T`, which does not implement the `Copy` trait\n-   |                      help: consider borrowing here: `&*mut_ptr()`\n+   |                      ^^^^^^^^^^ move occurs because value has type `T`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let c = unsafe { *mut_ptr() };\n+LL +     let c = unsafe { mut_ptr() };\n+   |\n \n error[E0507]: cannot move out of a raw pointer\n   --> $DIR/issue-20801.rs:35:22\n    |\n LL |     let d = unsafe { *const_ptr() };\n-   |                      ^^^^^^^^^^^^\n-   |                      |\n-   |                      move occurs because value has type `T`, which does not implement the `Copy` trait\n-   |                      help: consider borrowing here: `&*const_ptr()`\n+   |                      ^^^^^^^^^^^^ move occurs because value has type `T`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let d = unsafe { *const_ptr() };\n+LL +     let d = unsafe { const_ptr() };\n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8d4918867f75ec1d9bf0d1675fe904225b39aa4f", "filename": "src/test/ui/borrowck/issue-47215-ice-from-drop-elab.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,10 +2,12 @@ error[E0507]: cannot move out of static item `X`\n   --> $DIR/issue-47215-ice-from-drop-elab.rs:17:21\n    |\n LL |         let mut x = X;\n-   |                     ^\n-   |                     |\n-   |                     move occurs because `X` has type `AtomicUsize`, which does not implement the `Copy` trait\n-   |                     help: consider borrowing here: `&X`\n+   |                     ^ move occurs because `X` has type `AtomicUsize`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         let mut x = &X;\n+   |                     +\n \n error: aborting due to previous error\n "}, {"sha": "6ec920cb81f3904120aefc21178b4bc5bfe79a52", "filename": "src/test/ui/borrowck/issue-51301.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-51301.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-51301.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51301.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -6,6 +6,11 @@ LL |             .find(|(&event_type, _)| event == event_type)\n    |                      |\n    |                      data moved here\n    |                      move occurs because `event_type` has type `EventType`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |             .find(|(&ref event_type, _)| event == event_type)\n+   |                      +++\n \n error: aborting due to previous error\n "}, {"sha": "92943f6c9ecb2b1e9e69b0c38a2392a85048d9d5", "filename": "src/test/ui/borrowck/issue-51415.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.fixed?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+// Regression test for #51415: match default bindings were failing to\n+// see the \"move out\" implied by `&s` below.\n+\n+fn main() {\n+    let a = vec![String::from(\"a\")];\n+    let opt = a.iter().enumerate().find(|(_, &ref s)| {\n+        //~^ ERROR cannot move out\n+        *s == String::from(\"d\")\n+    }).map(|(i, _)| i);\n+    println!(\"{:?}\", opt);\n+}"}, {"sha": "56ed57a61a0feeb252c3acc6d6bc38491fc78c18", "filename": "src/test/ui/borrowck/issue-51415.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n // Regression test for #51415: match default bindings were failing to\n // see the \"move out\" implied by `&s` below.\n "}, {"sha": "0d486b45592b5d7f792dd3f9779c1afb78cc7c03", "filename": "src/test/ui/borrowck/issue-51415.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -1,11 +1,16 @@\n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/issue-51415.rs:6:42\n+  --> $DIR/issue-51415.rs:7:42\n    |\n LL |     let opt = a.iter().enumerate().find(|(_, &s)| {\n    |                                          ^^^^^-^\n    |                                               |\n    |                                               data moved here\n    |                                               move occurs because `s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let opt = a.iter().enumerate().find(|(_, &ref s)| {\n+   |                                               +++\n \n error: aborting due to previous error\n "}, {"sha": "99c63e4db50d3edbeff290d2a2a503b9b3f80cae", "filename": "src/test/ui/borrowck/issue-54597-reject-move-out-of-borrow-via-pat.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,10 +2,13 @@ error[E0507]: cannot move out of `*array` which is behind a shared reference\n   --> $DIR/issue-54597-reject-move-out-of-borrow-via-pat.rs:14:13\n    |\n LL |             *array\n-   |             ^^^^^^\n-   |             |\n-   |             move occurs because `*array` has type `Vec<Value>`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&*array`\n+   |             ^^^^^^ move occurs because `*array` has type `Vec<Value>`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -             *array\n+LL +             array\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "afd141125ac7c9b3204ab714eab1e35244ef84bc", "filename": "src/test/ui/borrowck/issue-87456-point-to-closure.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -8,10 +8,12 @@ LL |     take_mut(|| {\n    |              -- captured by this `FnMut` closure\n LL |\n LL |         let _foo: String = val;\n-   |                            ^^^\n-   |                            |\n-   |                            move occurs because `val` has type `String`, which does not implement the `Copy` trait\n-   |                            help: consider borrowing here: `&val`\n+   |                            ^^^ move occurs because `val` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         let _foo: String = &val;\n+   |                            +\n \n error: aborting due to previous error\n "}, {"sha": "8ac711e9e59db806a8d128dd54bb999c60be2fe1", "filename": "src/test/ui/borrowck/move-error-snippets.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,17 +2,18 @@ error[E0507]: cannot move out of static item `D`\n   --> $DIR/move-error-snippets-ext.rs:5:17\n    |\n LL |         let a = $c;\n-   |                 ^^\n-   |                 |\n-   |                 move occurs because `D` has type `A`, which does not implement the `Copy` trait\n-   |                 help: consider borrowing here: `&$c`\n+   |                 ^^ move occurs because `D` has type `A`, which does not implement the `Copy` trait\n    |\n   ::: $DIR/move-error-snippets.rs:21:1\n    |\n LL | sss!();\n    | ------ in this macro invocation\n    |\n    = note: this error originates in the macro `aaa` which comes from the expansion of the macro `sss` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider borrowing here\n+   |\n+LL |         let a = &$c;\n+   |                 +\n \n error: aborting due to previous error\n "}, {"sha": "f68d181291dd7f49456e8ae28eeaf9cbf445035b", "filename": "src/test/ui/by-move-pattern-binding.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fby-move-pattern-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fby-move-pattern-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fby-move-pattern-binding.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -19,4 +19,11 @@ fn main() {\n         &E::Foo => {}\n         &E::Bar(ref identifier) => println!(\"{}\", *identifier)\n     };\n+    if let &E::Bar(identifier) = &s.x { //~ ERROR cannot move\n+        f(identifier.clone());\n+    };\n+    let &E::Bar(identifier) = &s.x else { //~ ERROR cannot move\n+        return;\n+    };\n+    f(identifier.clone());\n }"}, {"sha": "203e37dc387c1526798c544ae1dec9e3c36b4963", "filename": "src/test/ui/by-move-pattern-binding.stderr", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fby-move-pattern-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fby-move-pattern-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fby-move-pattern-binding.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -5,12 +5,47 @@ LL |     match &s.x {\n    |           ^^^^\n LL |         &E::Foo => {}\n LL |         &E::Bar(identifier) => f(identifier.clone())\n-   |         -------------------\n-   |         |       |\n-   |         |       data moved here\n-   |         |       move occurs because `identifier` has type `String`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&`: `E::Bar(identifier)`\n+   |                 ----------\n+   |                 |\n+   |                 data moved here\n+   |                 move occurs because `identifier` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -         &E::Bar(identifier) => f(identifier.clone())\n+LL +         E::Bar(identifier) => f(identifier.clone())\n+   |\n+\n+error[E0507]: cannot move out of a shared reference\n+  --> $DIR/by-move-pattern-binding.rs:22:34\n+   |\n+LL |     if let &E::Bar(identifier) = &s.x {\n+   |                    ----------    ^^^^\n+   |                    |\n+   |                    data moved here\n+   |                    move occurs because `identifier` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     if let &E::Bar(identifier) = &s.x {\n+LL +     if let E::Bar(identifier) = &s.x {\n+   |\n+\n+error[E0507]: cannot move out of a shared reference\n+  --> $DIR/by-move-pattern-binding.rs:25:31\n+   |\n+LL |     let &E::Bar(identifier) = &s.x else {\n+   |                 ----------    ^^^^\n+   |                 |\n+   |                 data moved here\n+   |                 move occurs because `identifier` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     let &E::Bar(identifier) = &s.x else {\n+LL +     let E::Bar(identifier) = &s.x else {\n+   |\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "b13700a4ea5ba9fedaee2a266d22dc47b392e564", "filename": "src/test/ui/check-static-values-constraints.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -58,10 +58,12 @@ error[E0507]: cannot move out of static item `x`\n   --> $DIR/check-static-values-constraints.rs:110:45\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n-   |                                             ^\n-   |                                             |\n-   |                                             move occurs because `x` has type `Box<isize>`, which does not implement the `Copy` trait\n-   |                                             help: consider borrowing here: `&x`\n+   |                                             ^ move occurs because `x` has type `Box<isize>`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let y = { static x: Box<isize> = box 3; &x };\n+   |                                             +\n \n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:110:38"}, {"sha": "ae0a84eea4d9a56c62667fa55cc44798c59eed6e", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.fixed?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+struct X {\n+    x: String,\n+}\n+\n+impl Drop for X {\n+    fn drop(&mut self) {\n+        println!(\"value: {}\", self.x);\n+    }\n+}\n+\n+fn unwrap(x: X) -> String {\n+    let X { x: ref y } = x; //~ ERROR cannot move out of type\n+    y.to_string()\n+}\n+\n+fn main() {\n+    let x = X { x: \"hello\".to_string() };\n+    let y = unwrap(x);\n+    println!(\"contents: {}\", y);\n+}"}, {"sha": "c8db78610681336c8f03c060a6f6f3a353d69027", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n struct X {\n     x: String,\n }\n@@ -10,7 +11,7 @@ impl Drop for X {\n \n fn unwrap(x: X) -> String {\n     let X { x: y } = x; //~ ERROR cannot move out of type\n-    y\n+    y.to_string()\n }\n \n fn main() {"}, {"sha": "596ad4bf784bb531187d7b9c159925926fd2ef97", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -1,11 +1,16 @@\n error[E0509]: cannot move out of type `X`, which implements the `Drop` trait\n-  --> $DIR/disallowed-deconstructing-destructing-struct-let.rs:12:22\n+  --> $DIR/disallowed-deconstructing-destructing-struct-let.rs:13:22\n    |\n LL |     let X { x: y } = x;\n    |                -     ^ cannot move out of here\n    |                |\n    |                data moved here\n    |                move occurs because `y` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let X { x: ref y } = x;\n+   |                +++\n \n error: aborting due to previous error\n "}, {"sha": "c8a451efeb28ecdc7775cdc640e8924e209eabf0", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-match.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.fixed?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+struct X {\n+    x: String,\n+}\n+\n+impl Drop for X {\n+    fn drop(&mut self) {\n+        println!(\"value: {}\", self.x);\n+    }\n+}\n+\n+fn main() {\n+    let x = X { x: \"hello\".to_string() };\n+\n+    match x {\n+    //~^ ERROR cannot move out of type `X`, which implements the `Drop` trait\n+        X { x: ref y } => println!(\"contents: {}\", y)\n+    }\n+}"}, {"sha": "815567ffec358cd95fa0a405ce5a224db73a4000", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n struct X {\n     x: String,\n }"}, {"sha": "e32a4dd44114963a94d804bc19bb6f20937675d7", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-match.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -1,5 +1,5 @@\n error[E0509]: cannot move out of type `X`, which implements the `Drop` trait\n-  --> $DIR/disallowed-deconstructing-destructing-struct-match.rs:14:11\n+  --> $DIR/disallowed-deconstructing-destructing-struct-match.rs:15:11\n    |\n LL |     match x {\n    |           ^ cannot move out of here\n@@ -9,6 +9,11 @@ LL |         X { x: y } => println!(\"contents: {}\", y)\n    |                |\n    |                data moved here\n    |                move occurs because `y` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         X { x: ref y } => println!(\"contents: {}\", y)\n+   |                +++\n \n error: aborting due to previous error\n "}, {"sha": "208ba30729f8b31b97c9b2860196801ff6f2c646", "filename": "src/test/ui/error-codes/E0508-fail.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Ferror-codes%2FE0508-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Ferror-codes%2FE0508-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0508-fail.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -6,7 +6,11 @@ LL |     let _value = array[0];\n    |                  |\n    |                  cannot move out of here\n    |                  move occurs because `array[_]` has type `NonCopy`, which does not implement the `Copy` trait\n-   |                  help: consider borrowing here: `&array[0]`\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let _value = &array[0];\n+   |                  +\n \n error: aborting due to previous error\n "}, {"sha": "df2d3b0d311c93652b67f3c9b67418fddc672971", "filename": "src/test/ui/error-codes/E0508.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Ferror-codes%2FE0508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Ferror-codes%2FE0508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0508.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -6,7 +6,11 @@ LL |     let _value = array[0];\n    |                  |\n    |                  cannot move out of here\n    |                  move occurs because `array[_]` has type `NonCopy`, which does not implement the `Copy` trait\n-   |                  help: consider borrowing here: `&array[0]`\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let _value = &array[0];\n+   |                  +\n \n error: aborting due to previous error\n "}, {"sha": "c00d9142e750559552589fb6881319869969c50c", "filename": "src/test/ui/error-codes/E0509.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Ferror-codes%2FE0509.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Ferror-codes%2FE0509.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0509.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -6,7 +6,11 @@ LL |     let fancy_field = drop_struct.fancy;\n    |                       |\n    |                       cannot move out of here\n    |                       move occurs because `drop_struct.fancy` has type `FancyNum`, which does not implement the `Copy` trait\n-   |                       help: consider borrowing here: `&drop_struct.fancy`\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let fancy_field = &drop_struct.fancy;\n+   |                       +\n \n error: aborting due to previous error\n "}, {"sha": "7fa06825f0f00c38bccf22c140a3752649cf5368", "filename": "src/test/ui/issues/issue-12567.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -11,6 +11,14 @@ LL |         (&[hd1, ..], &[hd2, ..])\n    |            --- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (&[], &[ref hd, ..]) | (&[hd, ..], &[])\n+   |                 +++\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (&[ref hd1, ..], &[hd2, ..])\n+   |            +++\n \n error[E0508]: cannot move out of type `[T]`, a non-copy slice\n   --> $DIR/issue-12567.rs:2:11\n@@ -25,6 +33,14 @@ LL |         (&[hd1, ..], &[hd2, ..])\n    |                        --- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (&[], &[ref hd, ..]) | (&[hd, ..], &[])\n+   |                 +++\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (&[hd1, ..], &[ref hd2, ..])\n+   |                        +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e15eed6561234e91db2f6e3ab7133a630db45881", "filename": "src/test/ui/issues/issue-40402-ref-hints/issue-40402-1.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,10 +2,12 @@ error[E0507]: cannot move out of index of `Vec<String>`\n   --> $DIR/issue-40402-1.rs:9:13\n    |\n LL |     let e = f.v[0];\n-   |             ^^^^^^\n-   |             |\n-   |             move occurs because value has type `String`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&f.v[0]`\n+   |             ^^^^^^ move occurs because value has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let e = &f.v[0];\n+   |             +\n \n error: aborting due to previous error\n "}, {"sha": "1bc554efb5c3d5bfacf56e398ee2fc2a072a749d", "filename": "src/test/ui/issues/issue-40402-ref-hints/issue-40402-2.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,12 +2,16 @@ error[E0507]: cannot move out of index of `Vec<(String, String)>`\n   --> $DIR/issue-40402-2.rs:5:18\n    |\n LL |     let (a, b) = x[0];\n-   |          -  -    ^^^^ help: consider borrowing here: `&x[0]`\n+   |          -  -    ^^^^\n    |          |  |\n    |          |  ...and here\n    |          data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider borrowing here\n+   |\n+LL |     let (a, b) = &x[0];\n+   |                  +\n \n error: aborting due to previous error\n "}, {"sha": "c5159471fe3e405bf9775d8ca1eb16f39433840f", "filename": "src/test/ui/moves/issue-99470-move-out-of-some.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fmoves%2Fissue-99470-move-out-of-some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fmoves%2Fissue-99470-move-out-of-some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fissue-99470-move-out-of-some.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -5,11 +5,16 @@ LL |     match x {\n    |           ^\n LL |\n LL |         &Some(_y) => (),\n-   |         ---------\n-   |         |     |\n-   |         |     data moved here\n-   |         |     move occurs because `_y` has type `Box<i32>`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&`: `Some(_y)`\n+   |               --\n+   |               |\n+   |               data moved here\n+   |               move occurs because `_y` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -         &Some(_y) => (),\n+LL +         Some(_y) => (),\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "26d4996d6cb1d7dc18b578eab8071f9fca446abf", "filename": "src/test/ui/moves/move-out-of-array-ref.stderr", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-ref.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,45 +2,61 @@ error[E0508]: cannot move out of type `[D; 4]`, a non-copy array\n   --> $DIR/move-out-of-array-ref.rs:8:24\n    |\n LL |     let [_, e, _, _] = *a;\n-   |             -          ^^\n-   |             |          |\n-   |             |          cannot move out of here\n-   |             |          help: consider borrowing here: `&*a`\n+   |             -          ^^ cannot move out of here\n+   |             |\n    |             data moved here\n    |             move occurs because `e` has type `D`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let [_, e, _, _] = *a;\n+LL +     let [_, e, _, _] = a;\n+   |\n \n error[E0508]: cannot move out of type `[D; 4]`, a non-copy array\n   --> $DIR/move-out-of-array-ref.rs:13:27\n    |\n LL |     let [_, s @ .. , _] = *a;\n-   |             -             ^^\n-   |             |             |\n-   |             |             cannot move out of here\n-   |             |             help: consider borrowing here: `&*a`\n+   |             -             ^^ cannot move out of here\n+   |             |\n    |             data moved here\n    |             move occurs because `s` has type `[D; 2]`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let [_, s @ .. , _] = *a;\n+LL +     let [_, s @ .. , _] = a;\n+   |\n \n error[E0508]: cannot move out of type `[D; 4]`, a non-copy array\n   --> $DIR/move-out-of-array-ref.rs:18:24\n    |\n LL |     let [_, e, _, _] = *a;\n-   |             -          ^^\n-   |             |          |\n-   |             |          cannot move out of here\n-   |             |          help: consider borrowing here: `&*a`\n+   |             -          ^^ cannot move out of here\n+   |             |\n    |             data moved here\n    |             move occurs because `e` has type `D`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let [_, e, _, _] = *a;\n+LL +     let [_, e, _, _] = a;\n+   |\n \n error[E0508]: cannot move out of type `[D; 4]`, a non-copy array\n   --> $DIR/move-out-of-array-ref.rs:23:27\n    |\n LL |     let [_, s @ .. , _] = *a;\n-   |             -             ^^\n-   |             |             |\n-   |             |             cannot move out of here\n-   |             |             help: consider borrowing here: `&*a`\n+   |             -             ^^ cannot move out of here\n+   |             |\n    |             data moved here\n    |             move occurs because `s` has type `[D; 2]`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let [_, s @ .. , _] = *a;\n+LL +     let [_, s @ .. , _] = a;\n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "5a0357cf567da1e86140d5638d5ab64fb410b658", "filename": "src/test/ui/moves/move-out-of-slice-1.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-1.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -8,6 +8,11 @@ LL |         box [a] => {},\n    |              |\n    |              data moved here\n    |              move occurs because `a` has type `A`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         box [ref a] => {},\n+   |              +++\n \n error: aborting due to previous error\n "}, {"sha": "2f7394fbfd36ceba4c381151f17ab6e3460744a4", "filename": "src/test/ui/moves/move-out-of-slice-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -1,5 +1,6 @@\n #![feature(unsized_locals)]\n //~^ WARN the feature `unsized_locals` is incomplete\n+#![allow(unused)]\n \n struct A;\n #[derive(Clone, Copy)]"}, {"sha": "b46854cd6b4584390f90b0be37a6e752a602e575", "filename": "src/test/ui/moves/move-out-of-slice-2.stderr", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -8,7 +8,7 @@ LL | #![feature(unsized_locals)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0508]: cannot move out of type `[A]`, a non-copy slice\n-  --> $DIR/move-out-of-slice-2.rs:10:11\n+  --> $DIR/move-out-of-slice-2.rs:11:11\n    |\n LL |     match *a {\n    |           ^^ cannot move out of here\n@@ -18,9 +18,14 @@ LL |         [a @ ..] => {}\n    |          |\n    |          data moved here\n    |          move occurs because `a` has type `[A]`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         [ref a @ ..] => {}\n+   |          +++\n \n error[E0508]: cannot move out of type `[A]`, a non-copy slice\n-  --> $DIR/move-out-of-slice-2.rs:16:11\n+  --> $DIR/move-out-of-slice-2.rs:17:11\n    |\n LL |     match *b {\n    |           ^^ cannot move out of here\n@@ -30,9 +35,14 @@ LL |         [_, _, b @ .., _] => {}\n    |                |\n    |                data moved here\n    |                move occurs because `b` has type `[A]`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         [_, _, ref b @ .., _] => {}\n+   |                +++\n \n error[E0508]: cannot move out of type `[C]`, a non-copy slice\n-  --> $DIR/move-out-of-slice-2.rs:24:11\n+  --> $DIR/move-out-of-slice-2.rs:25:11\n    |\n LL |     match *c {\n    |           ^^ cannot move out of here\n@@ -42,9 +52,14 @@ LL |         [c @ ..] => {}\n    |          |\n    |          data moved here\n    |          move occurs because `c` has type `[C]`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         [ref c @ ..] => {}\n+   |          +++\n \n error[E0508]: cannot move out of type `[C]`, a non-copy slice\n-  --> $DIR/move-out-of-slice-2.rs:30:11\n+  --> $DIR/move-out-of-slice-2.rs:31:11\n    |\n LL |     match *d {\n    |           ^^ cannot move out of here\n@@ -54,6 +69,11 @@ LL |         [_, _, d @ .., _] => {}\n    |                |\n    |                data moved here\n    |                move occurs because `d` has type `[C]`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         [_, _, ref d @ .., _] => {}\n+   |                +++\n \n error: aborting due to 4 previous errors; 1 warning emitted\n "}, {"sha": "df09ababa5a01f2718d12830aeaa82f944fab49d", "filename": "src/test/ui/moves/moves-based-on-type-block-bad.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,13 +2,18 @@ error[E0507]: cannot move out of `hellothere.x` as enum variant `Bar` which is b\n   --> $DIR/moves-based-on-type-block-bad.rs:22:19\n    |\n LL |             match hellothere.x {\n-   |                   ^^^^^^^^^^^^ help: consider borrowing here: `&hellothere.x`\n+   |                   ^^^^^^^^^^^^\n LL |                 box E::Foo(_) => {}\n LL |                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n    |                            -\n    |                            |\n    |                            data moved here\n    |                            move occurs because `x` has type `Box<isize>`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |             match &hellothere.x {\n+   |                   +\n \n error: aborting due to previous error\n "}, {"sha": "0dc5c08ea5f08d76ffe34d4b550e0075a836e91b", "filename": "src/test/ui/nll/cannot-move-block-spans.stderr", "status": "modified", "additions": 57, "deletions": 27, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,28 +2,37 @@ error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:5:15\n    |\n LL |     let x = { *r };\n-   |               ^^\n-   |               |\n-   |               move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n-   |               help: consider borrowing here: `&*r`\n+   |               ^^ move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let x = { *r };\n+LL +     let x = { r };\n+   |\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:6:22\n    |\n LL |     let y = unsafe { *r };\n-   |                      ^^\n-   |                      |\n-   |                      move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n-   |                      help: consider borrowing here: `&*r`\n+   |                      ^^ move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let y = unsafe { *r };\n+LL +     let y = unsafe { r };\n+   |\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:7:26\n    |\n LL |     let z = loop { break *r; };\n-   |                          ^^\n-   |                          |\n-   |                          move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n-   |                          help: consider borrowing here: `&*r`\n+   |                          ^^ move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let z = loop { break *r; };\n+LL +     let z = loop { break r; };\n+   |\n \n error[E0508]: cannot move out of type `[String; 2]`, a non-copy array\n   --> $DIR/cannot-move-block-spans.rs:11:15\n@@ -33,7 +42,11 @@ LL |     let x = { arr[0] };\n    |               |\n    |               cannot move out of here\n    |               move occurs because `arr[_]` has type `String`, which does not implement the `Copy` trait\n-   |               help: consider borrowing here: `&arr[0]`\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let x = { &arr[0] };\n+   |               +\n \n error[E0508]: cannot move out of type `[String; 2]`, a non-copy array\n   --> $DIR/cannot-move-block-spans.rs:12:22\n@@ -43,7 +56,11 @@ LL |     let y = unsafe { arr[0] };\n    |                      |\n    |                      cannot move out of here\n    |                      move occurs because `arr[_]` has type `String`, which does not implement the `Copy` trait\n-   |                      help: consider borrowing here: `&arr[0]`\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let y = unsafe { &arr[0] };\n+   |                      +\n \n error[E0508]: cannot move out of type `[String; 2]`, a non-copy array\n   --> $DIR/cannot-move-block-spans.rs:13:26\n@@ -53,34 +70,47 @@ LL |     let z = loop { break arr[0]; };\n    |                          |\n    |                          cannot move out of here\n    |                          move occurs because `arr[_]` has type `String`, which does not implement the `Copy` trait\n-   |                          help: consider borrowing here: `&arr[0]`\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let z = loop { break &arr[0]; };\n+   |                          +\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:17:38\n    |\n LL |     let x = { let mut u = 0; u += 1; *r };\n-   |                                      ^^\n-   |                                      |\n-   |                                      move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n-   |                                      help: consider borrowing here: `&*r`\n+   |                                      ^^ move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let x = { let mut u = 0; u += 1; *r };\n+LL +     let x = { let mut u = 0; u += 1; r };\n+   |\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:18:45\n    |\n LL |     let y = unsafe { let mut u = 0; u += 1; *r };\n-   |                                             ^^\n-   |                                             |\n-   |                                             move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n-   |                                             help: consider borrowing here: `&*r`\n+   |                                             ^^ move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let y = unsafe { let mut u = 0; u += 1; *r };\n+LL +     let y = unsafe { let mut u = 0; u += 1; r };\n+   |\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:19:49\n    |\n LL |     let z = loop { let mut u = 0; u += 1; break *r; u += 2; };\n-   |                                                 ^^\n-   |                                                 |\n-   |                                                 move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n-   |                                                 help: consider borrowing here: `&*r`\n+   |                                                 ^^ move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let z = loop { let mut u = 0; u += 1; break *r; u += 2; };\n+LL +     let z = loop { let mut u = 0; u += 1; break r; u += 2; };\n+   |\n \n error: aborting due to 9 previous errors\n "}, {"sha": "7f9cbc3c30a92a9ddabcc689bcbb159685ff5acc", "filename": "src/test/ui/nll/issue-52059-report-when-borrow-and-drop-conflict.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -36,7 +36,11 @@ LL |     let p = s.url; p\n    |             |\n    |             cannot move out of here\n    |             move occurs because `s.url` has type `&mut String`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&s.url`\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let p = &s.url; p\n+   |             +\n \n error: aborting due to 4 previous errors\n "}, {"sha": "58b8aa31d4c2d26c5c140de80b8c1d6ca28fb192", "filename": "src/test/ui/nll/move-errors.stderr", "status": "modified", "additions": 78, "deletions": 20, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,10 +2,13 @@ error[E0507]: cannot move out of `*a` which is behind a shared reference\n   --> $DIR/move-errors.rs:6:13\n    |\n LL |     let b = *a;\n-   |             ^^\n-   |             |\n-   |             move occurs because `*a` has type `A`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&*a`\n+   |             ^^ move occurs because `*a` has type `A`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let b = *a;\n+LL +     let b = a;\n+   |\n \n error[E0508]: cannot move out of type `[A; 1]`, a non-copy array\n   --> $DIR/move-errors.rs:12:13\n@@ -15,25 +18,35 @@ LL |     let b = a[0];\n    |             |\n    |             cannot move out of here\n    |             move occurs because `a[_]` has type `A`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&a[0]`\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let b = &a[0];\n+   |             +\n \n error[E0507]: cannot move out of `**r` which is behind a shared reference\n   --> $DIR/move-errors.rs:19:13\n    |\n LL |     let s = **r;\n-   |             ^^^\n-   |             |\n-   |             move occurs because `**r` has type `A`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&**r`\n+   |             ^^^ move occurs because `**r` has type `A`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let s = **r;\n+LL +     let s = *r;\n+   |\n \n error[E0507]: cannot move out of an `Rc`\n   --> $DIR/move-errors.rs:27:13\n    |\n LL |     let s = *r;\n-   |             ^^\n-   |             |\n-   |             move occurs because value has type `A`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&*r`\n+   |             ^^ move occurs because value has type `A`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let s = *r;\n+LL +     let s = r;\n+   |\n \n error[E0508]: cannot move out of type `[A; 1]`, a non-copy array\n   --> $DIR/move-errors.rs:32:13\n@@ -43,16 +56,26 @@ LL |     let a = [A(\"\".to_string())][0];\n    |             |\n    |             cannot move out of here\n    |             move occurs because value has type `A`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&[A(\"\".to_string())][0]`\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let a = &[A(\"\".to_string())][0];\n+   |             +\n \n error[E0507]: cannot move out of `a` which is behind a shared reference\n   --> $DIR/move-errors.rs:38:16\n    |\n LL |     let A(s) = *a;\n-   |           -    ^^ help: consider borrowing here: `&*a`\n+   |           -    ^^\n    |           |\n    |           data moved here\n    |           move occurs because `s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let A(s) = *a;\n+LL +     let A(s) = a;\n+   |\n \n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:44:19\n@@ -62,6 +85,11 @@ LL |     let C(D(s)) = c;\n    |             |\n    |             data moved here\n    |             move occurs because `s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let C(D(ref s)) = c;\n+   |             +++\n \n error[E0507]: cannot move out of `*a` which is behind a shared reference\n   --> $DIR/move-errors.rs:51:9\n@@ -73,17 +101,18 @@ error[E0508]: cannot move out of type `[B; 1]`, a non-copy array\n   --> $DIR/move-errors.rs:74:11\n    |\n LL |     match x[0] {\n-   |           ^^^^\n-   |           |\n-   |           cannot move out of here\n-   |           help: consider borrowing here: `&x[0]`\n+   |           ^^^^ cannot move out of here\n LL |\n LL |         B::U(d) => (),\n    |              - data moved here\n LL |         B::V(s) => (),\n    |              - ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider borrowing here\n+   |\n+LL |     match &x[0] {\n+   |           +\n \n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:83:11\n@@ -96,6 +125,11 @@ LL |         B::U(D(s)) => (),\n    |                |\n    |                data moved here\n    |                move occurs because `s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         B::U(D(ref s)) => (),\n+   |                +++\n \n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:92:11\n@@ -108,6 +142,11 @@ LL |         (D(s), &t) => (),\n    |            |\n    |            data moved here\n    |            move occurs because `s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (D(ref s), &t) => (),\n+   |            +++\n \n error[E0507]: cannot move out of `*x.1` which is behind a shared reference\n   --> $DIR/move-errors.rs:92:11\n@@ -120,6 +159,11 @@ LL |         (D(s), &t) => (),\n    |                 |\n    |                 data moved here\n    |                 move occurs because `t` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (D(s), &ref t) => (),\n+   |                 +++\n \n error[E0509]: cannot move out of type `F`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:102:11\n@@ -133,18 +177,32 @@ LL |         F(s, mut t) => (),\n    |           data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider borrowing the pattern binding\n+   |\n+LL |         F(ref s, mut t) => (),\n+   |           +++\n+help: consider borrowing the pattern binding\n+   |\n+LL |         F(s, ref mut t) => (),\n+   |              +++\n \n error[E0507]: cannot move out of `x` as enum variant `Err` which is behind a shared reference\n   --> $DIR/move-errors.rs:110:11\n    |\n LL |     match *x {\n-   |           ^^ help: consider borrowing here: `&*x`\n+   |           ^^\n LL |\n LL |         Ok(s) | Err(s) => (),\n    |            -\n    |            |\n    |            data moved here\n    |            move occurs because `s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     match *x {\n+LL +     match x {\n+   |\n \n error: aborting due to 14 previous errors\n "}, {"sha": "5f04fc83d37abdebc9ba6a846b9f625a288b1d16", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-default-binding-modes-fixable.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.fixed?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+fn main() {\n+    struct U;\n+\n+    // A tuple is a \"non-reference pattern\".\n+    // A `mut` binding pattern resets the binding mode to by-value.\n+\n+    let mut p = (U, U);\n+    let (a, ref mut b) = &mut p;\n+    //~^ ERROR cannot move out of a mutable reference\n+}"}, {"sha": "5dc1ae2feb5f06d714778f7a2f591ae1836da11b", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-default-binding-modes-fixable.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+fn main() {\n+    struct U;\n+\n+    // A tuple is a \"non-reference pattern\".\n+    // A `mut` binding pattern resets the binding mode to by-value.\n+\n+    let mut p = (U, U);\n+    let (a, mut b) = &mut p;\n+    //~^ ERROR cannot move out of a mutable reference\n+}"}, {"sha": "d3ab533e35e4ab55f746e6a048f689c7b00c98c3", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-default-binding-modes-fixable.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -0,0 +1,17 @@\n+error[E0507]: cannot move out of a mutable reference\n+  --> $DIR/move-ref-patterns-default-binding-modes-fixable.rs:10:22\n+   |\n+LL |     let (a, mut b) = &mut p;\n+   |             -----    ^^^^^^\n+   |             |\n+   |             data moved here\n+   |             move occurs because `b` has type `U`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let (a, ref mut b) = &mut p;\n+   |             +++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "6c913c245130d7307b7c8361731568bbc76385b1", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-default-binding-modes.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -7,8 +7,4 @@ fn main() {\n     let p = (U, U);\n     let (a, mut b) = &p;\n     //~^ ERROR cannot move out of a shared reference\n-\n-    let mut p = (U, U);\n-    let (a, mut b) = &mut p;\n-    //~^ ERROR cannot move out of a mutable reference\n }"}, {"sha": "65030b62250012729961a9f6938d6d012a4b1dd0", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-default-binding-modes.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -6,16 +6,12 @@ LL |     let (a, mut b) = &p;\n    |             |\n    |             data moved here\n    |             move occurs because `b` has type `U`, which does not implement the `Copy` trait\n-\n-error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/move-ref-patterns-default-binding-modes.rs:12:22\n    |\n-LL |     let (a, mut b) = &mut p;\n-   |             -----    ^^^^^^\n-   |             |\n-   |             data moved here\n-   |             move occurs because `b` has type `U`, which does not implement the `Copy` trait\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let (a, ref mut b) = &p;\n+   |             +++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "07991af6ef97c60bd5314f186fdcee1175de73c6", "filename": "src/test/ui/rfc-2005-default-binding-mode/for.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -6,6 +6,11 @@ LL |     for (n, mut m) in &tups {\n    |             |\n    |             data moved here\n    |             move occurs because `m` has type `Foo`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     for (n, ref mut m) in &tups {\n+   |             +++\n \n error: aborting due to previous error\n "}, {"sha": "8c5d0b9609627f04d183d7223c52d5bb7006d4b0", "filename": "src/test/ui/std-uncopyable-atomics.stderr", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,37 +2,49 @@ error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:9:13\n    |\n LL |     let x = *&x;\n-   |             ^^^\n-   |             |\n-   |             move occurs because value has type `std::sync::atomic::AtomicBool`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&*&x`\n+   |             ^^^ move occurs because value has type `std::sync::atomic::AtomicBool`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let x = *&x;\n+LL +     let x = &x;\n+   |\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:11:13\n    |\n LL |     let x = *&x;\n-   |             ^^^\n-   |             |\n-   |             move occurs because value has type `std::sync::atomic::AtomicIsize`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&*&x`\n+   |             ^^^ move occurs because value has type `std::sync::atomic::AtomicIsize`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let x = *&x;\n+LL +     let x = &x;\n+   |\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:13:13\n    |\n LL |     let x = *&x;\n-   |             ^^^\n-   |             |\n-   |             move occurs because value has type `std::sync::atomic::AtomicUsize`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&*&x`\n+   |             ^^^ move occurs because value has type `std::sync::atomic::AtomicUsize`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let x = *&x;\n+LL +     let x = &x;\n+   |\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:15:13\n    |\n LL |     let x = *&x;\n-   |             ^^^\n-   |             |\n-   |             move occurs because value has type `std::sync::atomic::AtomicPtr<usize>`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&*&x`\n+   |             ^^^ move occurs because value has type `std::sync::atomic::AtomicPtr<usize>`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let x = *&x;\n+LL +     let x = &x;\n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e19d497f21d29f9386a85308ee6c3e027ed5d960", "filename": "src/test/ui/suggestions/dont-suggest-ref/duplicate-suggestions.rs", "status": "modified", "additions": 19, "deletions": 38, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -38,113 +38,94 @@ pub fn main() {\n \n     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&`\n-    //~| SUGGESTION (X(_t), X(_u))\n+    //~| HELP consider removing the borrow\n     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&`\n-    //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+    //~| HELP consider removing the borrow\n     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&`\n-    //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+    //~| HELP consider removing the borrow\n     match &(e.clone(), e.clone()) {\n         //~^ ERROR cannot move\n         &(Either::One(_t), Either::Two(_u)) => (),\n-        //~^ HELP consider removing the `&`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        //~^ HELP consider removing the borrow\n         &(Either::Two(_t), Either::One(_u)) => (),\n-        //~^ HELP consider removing the `&`\n-        //~| SUGGESTION (Either::Two(_t), Either::One(_u))\n+        //~^ HELP consider removing the borrow\n         _ => (),\n     }\n     match &(e.clone(), e.clone()) {\n         //~^ ERROR cannot move\n         &(Either::One(_t), Either::Two(_u))\n-        //~^ HELP consider removing the `&`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        //~^ HELP consider removing the borrow\n         | &(Either::Two(_t), Either::One(_u)) => (),\n         // FIXME: would really like a suggestion here too\n         _ => (),\n     }\n     match &(e.clone(), e.clone()) {\n         //~^ ERROR cannot move\n         &(Either::One(_t), Either::Two(_u)) => (),\n-        //~^ HELP consider removing the `&`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        //~^ HELP consider removing the borrow\n         &(Either::Two(ref _t), Either::One(ref _u)) => (),\n         _ => (),\n     }\n     match &(e.clone(), e.clone()) {\n         //~^ ERROR cannot move\n         &(Either::One(_t), Either::Two(_u)) => (),\n-        //~^ HELP consider removing the `&`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        //~^ HELP consider removing the borrow\n         (Either::Two(_t), Either::One(_u)) => (),\n         _ => (),\n     }\n     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&`\n-    //~| SUGGESTION (X(_t), X(_u))\n+    //~| HELP consider removing the borrow\n \n     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&mut`\n-    //~| SUGGESTION (X(_t), X(_u))\n+    //~| HELP consider removing the mutable borrow\n     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&mut`\n-    //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+    //~| HELP consider removing the mutable borrow\n     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&mut`\n-    //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+    //~| HELP consider removing the mutable borrow\n     match &mut (em.clone(), em.clone()) {\n         //~^ ERROR cannot move\n         &mut (Either::One(_t), Either::Two(_u)) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        //~^ HELP consider removing the mutable borrow\n         &mut (Either::Two(_t), Either::One(_u)) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION (Either::Two(_t), Either::One(_u))\n+        //~^ HELP consider removing the mutable borrow\n         _ => (),\n     }\n     match &mut (em.clone(), em.clone()) {\n         //~^ ERROR cannot move\n         &mut (Either::One(_t), Either::Two(_u))\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        //~^ HELP consider removing the mutable borrow\n         | &mut (Either::Two(_t), Either::One(_u)) => (),\n         // FIXME: would really like a suggestion here too\n         _ => (),\n     }\n     match &mut (em.clone(), em.clone()) {\n         //~^ ERROR cannot move\n         &mut (Either::One(_t), Either::Two(_u)) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        //~^ HELP consider removing the mutable borrow\n         &mut (Either::Two(ref _t), Either::One(ref _u)) => (),\n         _ => (),\n     }\n     match &mut (em.clone(), em.clone()) {\n         //~^ ERROR cannot move\n         &mut (Either::One(_t), Either::Two(_u)) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        //~^ HELP consider removing the mutable borrow\n         &mut (Either::Two(ref mut _t), Either::One(ref mut _u)) => (),\n         _ => (),\n     }\n     match &mut (em.clone(), em.clone()) {\n         //~^ ERROR cannot move\n         &mut (Either::One(_t), Either::Two(_u)) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        //~^ HELP consider removing the mutable borrow\n         (Either::Two(_t), Either::One(_u)) => (),\n         _ => (),\n     }\n     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&mut`\n-    //~| SUGGESTION (X(_t), X(_u))\n+    //~| HELP consider removing the mutable borrow\n }"}, {"sha": "b96b3713f2a7ab74d37d5763832a0d2198a04462", "filename": "src/test/ui/suggestions/dont-suggest-ref/duplicate-suggestions.stderr", "status": "modified", "additions": 150, "deletions": 103, "changes": 253, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,40 +2,52 @@ error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:39:27\n    |\n LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n-   |         ---------------   ^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |   |      |\n-   |         |   |      ...and here\n-   |         |   data moved here\n-   |         help: consider removing the `&`: `(X(_t), X(_u))`\n+   |             --     --     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |             |      |\n+   |             |      ...and here\n+   |             data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the borrow\n+   |\n+LL -     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n+LL +     let (X(_t), X(_u)) = &(x.clone(), x.clone());\n+   |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/duplicate-suggestions.rs:43:50\n+  --> $DIR/duplicate-suggestions.rs:42:50\n    |\n LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-   |            -----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |             |                |\n-   |            |             |                ...and here\n-   |            |             data moved here\n-   |            help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n+   |                          --               --     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                          |                |\n+   |                          |                ...and here\n+   |                          data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the borrow\n+   |\n+LL -     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n+LL +     if let (Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n+   |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/duplicate-suggestions.rs:47:53\n+  --> $DIR/duplicate-suggestions.rs:45:53\n    |\n LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-   |               -----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^\n-   |               |             |                |\n-   |               |             |                ...and here\n-   |               |             data moved here\n-   |               help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n+   |                             --               --     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             |                |\n+   |                             |                ...and here\n+   |                             data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the borrow\n+   |\n+LL -     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n+LL +     while let (Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n+   |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/duplicate-suggestions.rs:51:11\n+  --> $DIR/duplicate-suggestions.rs:48:11\n    |\n LL |     match &(e.clone(), e.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,22 +56,24 @@ LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |                       --               -- ...and here\n    |                       |\n    |                       data moved here\n-...\n+LL |\n LL |         &(Either::Two(_t), Either::One(_u)) => (),\n    |                       -- ...and here   -- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n-help: consider removing the `&`\n+help: consider removing the borrow\n    |\n-LL |         (Either::One(_t), Either::Two(_u)) => (),\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-help: consider removing the `&`\n+LL -         &(Either::One(_t), Either::Two(_u)) => (),\n+LL +         (Either::One(_t), Either::Two(_u)) => (),\n+   |\n+help: consider removing the borrow\n+   |\n+LL -         &(Either::Two(_t), Either::One(_u)) => (),\n+LL +         (Either::Two(_t), Either::One(_u)) => (),\n    |\n-LL |         (Either::Two(_t), Either::One(_u)) => (),\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/duplicate-suggestions.rs:61:11\n+  --> $DIR/duplicate-suggestions.rs:56:11\n    |\n LL |     match &(e.clone(), e.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -70,82 +84,98 @@ LL |         &(Either::One(_t), Either::Two(_u))\n    |                       data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n-help: consider removing the `&`\n+help: consider removing the borrow\n    |\n-LL ~         (Either::One(_t), Either::Two(_u))\n-LL +\n-LL +\n-LL ~         | &(Either::Two(_t), Either::One(_u)) => (),\n+LL -         &(Either::One(_t), Either::Two(_u))\n+LL +         (Either::One(_t), Either::Two(_u))\n    |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/duplicate-suggestions.rs:70:11\n+  --> $DIR/duplicate-suggestions.rs:64:11\n    |\n LL |     match &(e.clone(), e.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |         -----------------------------------\n-   |         |             |                |\n-   |         |             |                ...and here\n-   |         |             data moved here\n-   |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n+   |                       --               -- ...and here\n+   |                       |\n+   |                       data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the borrow\n+   |\n+LL -         &(Either::One(_t), Either::Two(_u)) => (),\n+LL +         (Either::One(_t), Either::Two(_u)) => (),\n+   |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/duplicate-suggestions.rs:78:11\n+  --> $DIR/duplicate-suggestions.rs:71:11\n    |\n LL |     match &(e.clone(), e.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |         -----------------------------------\n-   |         |             |                |\n-   |         |             |                ...and here\n-   |         |             data moved here\n-   |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n+   |                       --               -- ...and here\n+   |                       |\n+   |                       data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the borrow\n+   |\n+LL -         &(Either::One(_t), Either::Two(_u)) => (),\n+LL +         (Either::One(_t), Either::Two(_u)) => (),\n+   |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/duplicate-suggestions.rs:91:31\n+  --> $DIR/duplicate-suggestions.rs:82:31\n    |\n LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n-   |         -------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |       |      |\n-   |         |       |      ...and here\n-   |         |       data moved here\n-   |         help: consider removing the `&mut`: `(X(_t), X(_u))`\n+   |                 --     --     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |      |\n+   |                 |      ...and here\n+   |                 data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the mutable borrow\n+   |\n+LL -     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n+LL +     let (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n+   |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/duplicate-suggestions.rs:95:54\n+  --> $DIR/duplicate-suggestions.rs:85:54\n    |\n LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-   |            ---------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |                 |                |\n-   |            |                 |                ...and here\n-   |            |                 data moved here\n-   |            help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |                              --               --     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                              |                |\n+   |                              |                ...and here\n+   |                              data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the mutable borrow\n+   |\n+LL -     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n+LL +     if let (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n+   |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/duplicate-suggestions.rs:99:57\n+  --> $DIR/duplicate-suggestions.rs:88:57\n    |\n LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-   |               ---------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |               |                 |                |\n-   |               |                 |                ...and here\n-   |               |                 data moved here\n-   |               help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |                                 --               --     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                 |                |\n+   |                                 |                ...and here\n+   |                                 data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the mutable borrow\n+   |\n+LL -     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n+LL +     while let (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n+   |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/duplicate-suggestions.rs:103:11\n+  --> $DIR/duplicate-suggestions.rs:91:11\n    |\n LL |     match &mut (em.clone(), em.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -154,22 +184,24 @@ LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |                           --               -- ...and here\n    |                           |\n    |                           data moved here\n-...\n+LL |\n LL |         &mut (Either::Two(_t), Either::One(_u)) => (),\n    |                           -- ...and here   -- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n-help: consider removing the `&mut`\n+help: consider removing the mutable borrow\n+   |\n+LL -         &mut (Either::One(_t), Either::Two(_u)) => (),\n+LL +         (Either::One(_t), Either::Two(_u)) => (),\n    |\n-LL |         (Either::One(_t), Either::Two(_u)) => (),\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-help: consider removing the `&mut`\n+help: consider removing the mutable borrow\n+   |\n+LL -         &mut (Either::Two(_t), Either::One(_u)) => (),\n+LL +         (Either::Two(_t), Either::One(_u)) => (),\n    |\n-LL |         (Either::Two(_t), Either::One(_u)) => (),\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/duplicate-suggestions.rs:113:11\n+  --> $DIR/duplicate-suggestions.rs:99:11\n    |\n LL |     match &mut (em.clone(), em.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -180,82 +212,97 @@ LL |         &mut (Either::One(_t), Either::Two(_u))\n    |                           data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n-help: consider removing the `&mut`\n+help: consider removing the mutable borrow\n    |\n-LL ~         (Either::One(_t), Either::Two(_u))\n-LL +\n-LL +\n-LL ~         | &mut (Either::Two(_t), Either::One(_u)) => (),\n+LL -         &mut (Either::One(_t), Either::Two(_u))\n+LL +         (Either::One(_t), Either::Two(_u))\n    |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/duplicate-suggestions.rs:122:11\n+  --> $DIR/duplicate-suggestions.rs:107:11\n    |\n LL |     match &mut (em.clone(), em.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |         ---------------------------------------\n-   |         |                 |                |\n-   |         |                 |                ...and here\n-   |         |                 data moved here\n-   |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |                           --               -- ...and here\n+   |                           |\n+   |                           data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the mutable borrow\n+   |\n+LL -         &mut (Either::One(_t), Either::Two(_u)) => (),\n+LL +         (Either::One(_t), Either::Two(_u)) => (),\n+   |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/duplicate-suggestions.rs:130:11\n+  --> $DIR/duplicate-suggestions.rs:114:11\n    |\n LL |     match &mut (em.clone(), em.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |         ---------------------------------------\n-   |         |                 |                |\n-   |         |                 |                ...and here\n-   |         |                 data moved here\n-   |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |                           --               -- ...and here\n+   |                           |\n+   |                           data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the mutable borrow\n+   |\n+LL -         &mut (Either::One(_t), Either::Two(_u)) => (),\n+LL +         (Either::One(_t), Either::Two(_u)) => (),\n+   |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/duplicate-suggestions.rs:138:11\n+  --> $DIR/duplicate-suggestions.rs:121:11\n    |\n LL |     match &mut (em.clone(), em.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |         ---------------------------------------\n-   |         |                 |                |\n-   |         |                 |                ...and here\n-   |         |                 data moved here\n-   |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |                           --               -- ...and here\n+   |                           |\n+   |                           data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the mutable borrow\n+   |\n+LL -         &mut (Either::One(_t), Either::Two(_u)) => (),\n+LL +         (Either::One(_t), Either::Two(_u)) => (),\n+   |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/duplicate-suggestions.rs:86:11\n+  --> $DIR/duplicate-suggestions.rs:78:11\n    |\n LL |     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n    |           ^^^^--^^^^^--^^\n-   |           |   |      |\n-   |           |   |      ...and here\n-   |           |   data moved here\n-   |           help: consider removing the `&`: `(X(_t), X(_u))`\n+   |               |      |\n+   |               |      ...and here\n+   |               data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the borrow\n+   |\n+LL -     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n+LL +     fn f5((X(_t), X(_u)): &(X, X)) { }\n+   |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/duplicate-suggestions.rs:146:11\n+  --> $DIR/duplicate-suggestions.rs:128:11\n    |\n LL |     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n    |           ^^^^^^^^--^^^^^--^^\n-   |           |       |      |\n-   |           |       |      ...and here\n-   |           |       data moved here\n-   |           help: consider removing the `&mut`: `(X(_t), X(_u))`\n+   |                   |      |\n+   |                   |      ...and here\n+   |                   data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the mutable borrow\n+   |\n+LL -     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n+LL +     fn f6((X(_t), X(_u)): &mut (X, X)) { }\n+   |\n \n error: aborting due to 17 previous errors\n "}, {"sha": "44eac3691a3beb89ab81bb4b7f882dc35bd55dd5", "filename": "src/test/ui/suggestions/dont-suggest-ref/move-into-closure.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -28,26 +28,21 @@ fn move_into_fn() {\n         let X(_t) = x;\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &x\n         if let Either::One(_t) = e { }\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &e\n         while let Either::One(_t) = e { }\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &e\n         match e {\n             //~^ ERROR cannot move\n             //~| HELP consider borrowing here\n-            //~| SUGGESTION &e\n             Either::One(_t)\n             | Either::Two(_t) => (),\n         }\n         match e {\n             //~^ ERROR cannot move\n             //~| HELP consider borrowing here\n-            //~| SUGGESTION &e\n             Either::One(_t) => (),\n             Either::Two(ref _t) => (),\n             // FIXME: should suggest removing `ref` too\n@@ -56,26 +51,21 @@ fn move_into_fn() {\n         let X(mut _t) = x;\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &x\n         if let Either::One(mut _t) = em { }\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &em\n         while let Either::One(mut _t) = em { }\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &em\n         match em {\n             //~^ ERROR cannot move\n             //~| HELP consider borrowing here\n-            //~| SUGGESTION &em\n             Either::One(mut _t)\n             | Either::Two(mut _t) => (),\n         }\n         match em {\n             //~^ ERROR cannot move\n             //~| HELP consider borrowing here\n-            //~| SUGGESTION &em\n             Either::One(mut _t) => (),\n             Either::Two(ref _t) => (),\n             // FIXME: should suggest removing `ref` too\n@@ -95,26 +85,21 @@ fn move_into_fnmut() {\n         let X(_t) = x;\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &x\n         if let Either::One(_t) = e { }\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &e\n         while let Either::One(_t) = e { }\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &e\n         match e {\n             //~^ ERROR cannot move\n             //~| HELP consider borrowing here\n-            //~| SUGGESTION &e\n             Either::One(_t)\n             | Either::Two(_t) => (),\n         }\n         match e {\n             //~^ ERROR cannot move\n             //~| HELP consider borrowing here\n-            //~| SUGGESTION &e\n             Either::One(_t) => (),\n             Either::Two(ref _t) => (),\n             // FIXME: should suggest removing `ref` too\n@@ -123,34 +108,28 @@ fn move_into_fnmut() {\n         let X(mut _t) = x;\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &x\n         if let Either::One(mut _t) = em { }\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &em\n         while let Either::One(mut _t) = em { }\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &em\n         match em {\n             //~^ ERROR cannot move\n             //~| HELP consider borrowing here\n-            //~| SUGGESTION &em\n             Either::One(mut _t)\n             | Either::Two(mut _t) => (),\n         }\n         match em {\n             //~^ ERROR cannot move\n             //~| HELP consider borrowing here\n-            //~| SUGGESTION &em\n             Either::One(mut _t) => (),\n             Either::Two(ref _t) => (),\n             // FIXME: should suggest removing `ref` too\n         }\n         match em {\n             //~^ ERROR cannot move\n             //~| HELP consider borrowing here\n-            //~| SUGGESTION &em\n             Either::One(mut _t) => (),\n             Either::Two(ref mut _t) => (),\n             // FIXME: should suggest removing `ref` too"}, {"sha": "edda2cbc735a25dc541d5ff80cbf0642bb634224", "filename": "src/test/ui/suggestions/dont-suggest-ref/move-into-closure.stderr", "status": "modified", "additions": 146, "deletions": 41, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -7,13 +7,18 @@ LL |     let x = X(Y);\n LL |     consume_fn(|| {\n    |                -- captured by this `Fn` closure\n LL |         let X(_t) = x;\n-   |               --    ^ help: consider borrowing here: `&x`\n+   |               --    ^\n    |               |\n    |               data moved here\n    |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         let X(_t) = &x;\n+   |                     +\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:32:34\n+  --> $DIR/move-into-closure.rs:31:34\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -22,13 +27,18 @@ LL |     consume_fn(|| {\n    |                -- captured by this `Fn` closure\n ...\n LL |         if let Either::One(_t) = e { }\n-   |                            --    ^ help: consider borrowing here: `&e`\n+   |                            --    ^\n    |                            |\n    |                            data moved here\n    |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         if let Either::One(_t) = &e { }\n+   |                                  +\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:36:37\n+  --> $DIR/move-into-closure.rs:34:37\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -37,13 +47,18 @@ LL |     consume_fn(|| {\n    |                -- captured by this `Fn` closure\n ...\n LL |         while let Either::One(_t) = e { }\n-   |                               --    ^ help: consider borrowing here: `&e`\n+   |                               --    ^\n    |                               |\n    |                               data moved here\n    |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         while let Either::One(_t) = &e { }\n+   |                                     +\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:40:15\n+  --> $DIR/move-into-closure.rs:37:15\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -52,16 +67,21 @@ LL |     consume_fn(|| {\n    |                -- captured by this `Fn` closure\n ...\n LL |         match e {\n-   |               ^ help: consider borrowing here: `&e`\n+   |               ^\n ...\n LL |             Either::One(_t)\n    |                         --\n    |                         |\n    |                         data moved here\n    |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         match &e {\n+   |               +\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:47:15\n+  --> $DIR/move-into-closure.rs:43:15\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -70,16 +90,21 @@ LL |     consume_fn(|| {\n    |                -- captured by this `Fn` closure\n ...\n LL |         match e {\n-   |               ^ help: consider borrowing here: `&e`\n+   |               ^\n ...\n LL |             Either::One(_t) => (),\n    |                         --\n    |                         |\n    |                         data moved here\n    |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         match &e {\n+   |               +\n \n error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:56:25\n+  --> $DIR/move-into-closure.rs:51:25\n    |\n LL |     let x = X(Y);\n    |         - captured outer variable\n@@ -88,13 +113,18 @@ LL |     consume_fn(|| {\n    |                -- captured by this `Fn` closure\n ...\n LL |         let X(mut _t) = x;\n-   |               ------    ^ help: consider borrowing here: `&x`\n+   |               ------    ^\n    |               |\n    |               data moved here\n    |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         let X(mut _t) = &x;\n+   |                         +\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:60:38\n+  --> $DIR/move-into-closure.rs:54:38\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -103,13 +133,18 @@ LL |     consume_fn(|| {\n    |                -- captured by this `Fn` closure\n ...\n LL |         if let Either::One(mut _t) = em { }\n-   |                            ------    ^^ help: consider borrowing here: `&em`\n+   |                            ------    ^^\n    |                            |\n    |                            data moved here\n    |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         if let Either::One(mut _t) = &em { }\n+   |                                      +\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:64:41\n+  --> $DIR/move-into-closure.rs:57:41\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -118,13 +153,18 @@ LL |     consume_fn(|| {\n    |                -- captured by this `Fn` closure\n ...\n LL |         while let Either::One(mut _t) = em { }\n-   |                               ------    ^^ help: consider borrowing here: `&em`\n+   |                               ------    ^^\n    |                               |\n    |                               data moved here\n    |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         while let Either::One(mut _t) = &em { }\n+   |                                         +\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:68:15\n+  --> $DIR/move-into-closure.rs:60:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -133,16 +173,21 @@ LL |     consume_fn(|| {\n    |                -- captured by this `Fn` closure\n ...\n LL |         match em {\n-   |               ^^ help: consider borrowing here: `&em`\n+   |               ^^\n ...\n LL |             Either::One(mut _t)\n    |                         ------\n    |                         |\n    |                         data moved here\n    |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         match &em {\n+   |               +\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:75:15\n+  --> $DIR/move-into-closure.rs:66:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -151,30 +196,40 @@ LL |     consume_fn(|| {\n    |                -- captured by this `Fn` closure\n ...\n LL |         match em {\n-   |               ^^ help: consider borrowing here: `&em`\n+   |               ^^\n ...\n LL |             Either::One(mut _t) => (),\n    |                         ------\n    |                         |\n    |                         data moved here\n    |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         match &em {\n+   |               +\n \n error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:95:21\n+  --> $DIR/move-into-closure.rs:85:21\n    |\n LL |     let x = X(Y);\n    |         - captured outer variable\n ...\n LL |     consume_fnmut(|| {\n    |                   -- captured by this `FnMut` closure\n LL |         let X(_t) = x;\n-   |               --    ^ help: consider borrowing here: `&x`\n+   |               --    ^\n    |               |\n    |               data moved here\n    |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         let X(_t) = &x;\n+   |                     +\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:99:34\n+  --> $DIR/move-into-closure.rs:88:34\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -183,13 +238,18 @@ LL |     consume_fnmut(|| {\n    |                   -- captured by this `FnMut` closure\n ...\n LL |         if let Either::One(_t) = e { }\n-   |                            --    ^ help: consider borrowing here: `&e`\n+   |                            --    ^\n    |                            |\n    |                            data moved here\n    |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         if let Either::One(_t) = &e { }\n+   |                                  +\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:103:37\n+  --> $DIR/move-into-closure.rs:91:37\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -198,13 +258,18 @@ LL |     consume_fnmut(|| {\n    |                   -- captured by this `FnMut` closure\n ...\n LL |         while let Either::One(_t) = e { }\n-   |                               --    ^ help: consider borrowing here: `&e`\n+   |                               --    ^\n    |                               |\n    |                               data moved here\n    |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         while let Either::One(_t) = &e { }\n+   |                                     +\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:107:15\n+  --> $DIR/move-into-closure.rs:94:15\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -213,16 +278,21 @@ LL |     consume_fnmut(|| {\n    |                   -- captured by this `FnMut` closure\n ...\n LL |         match e {\n-   |               ^ help: consider borrowing here: `&e`\n+   |               ^\n ...\n LL |             Either::One(_t)\n    |                         --\n    |                         |\n    |                         data moved here\n    |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         match &e {\n+   |               +\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:114:15\n+  --> $DIR/move-into-closure.rs:100:15\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -231,16 +301,21 @@ LL |     consume_fnmut(|| {\n    |                   -- captured by this `FnMut` closure\n ...\n LL |         match e {\n-   |               ^ help: consider borrowing here: `&e`\n+   |               ^\n ...\n LL |             Either::One(_t) => (),\n    |                         --\n    |                         |\n    |                         data moved here\n    |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         match &e {\n+   |               +\n \n error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:123:25\n+  --> $DIR/move-into-closure.rs:108:25\n    |\n LL |     let x = X(Y);\n    |         - captured outer variable\n@@ -249,13 +324,18 @@ LL |     consume_fnmut(|| {\n    |                   -- captured by this `FnMut` closure\n ...\n LL |         let X(mut _t) = x;\n-   |               ------    ^ help: consider borrowing here: `&x`\n+   |               ------    ^\n    |               |\n    |               data moved here\n    |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         let X(mut _t) = &x;\n+   |                         +\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:127:38\n+  --> $DIR/move-into-closure.rs:111:38\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -264,13 +344,18 @@ LL |     consume_fnmut(|| {\n    |                   -- captured by this `FnMut` closure\n ...\n LL |         if let Either::One(mut _t) = em { }\n-   |                            ------    ^^ help: consider borrowing here: `&em`\n+   |                            ------    ^^\n    |                            |\n    |                            data moved here\n    |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         if let Either::One(mut _t) = &em { }\n+   |                                      +\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:131:41\n+  --> $DIR/move-into-closure.rs:114:41\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -279,13 +364,18 @@ LL |     consume_fnmut(|| {\n    |                   -- captured by this `FnMut` closure\n ...\n LL |         while let Either::One(mut _t) = em { }\n-   |                               ------    ^^ help: consider borrowing here: `&em`\n+   |                               ------    ^^\n    |                               |\n    |                               data moved here\n    |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         while let Either::One(mut _t) = &em { }\n+   |                                         +\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:135:15\n+  --> $DIR/move-into-closure.rs:117:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -294,16 +384,21 @@ LL |     consume_fnmut(|| {\n    |                   -- captured by this `FnMut` closure\n ...\n LL |         match em {\n-   |               ^^ help: consider borrowing here: `&em`\n+   |               ^^\n ...\n LL |             Either::One(mut _t)\n    |                         ------\n    |                         |\n    |                         data moved here\n    |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         match &em {\n+   |               +\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:142:15\n+  --> $DIR/move-into-closure.rs:123:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -312,16 +407,21 @@ LL |     consume_fnmut(|| {\n    |                   -- captured by this `FnMut` closure\n ...\n LL |         match em {\n-   |               ^^ help: consider borrowing here: `&em`\n+   |               ^^\n ...\n LL |             Either::One(mut _t) => (),\n    |                         ------\n    |                         |\n    |                         data moved here\n    |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         match &em {\n+   |               +\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:150:15\n+  --> $DIR/move-into-closure.rs:130:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -330,13 +430,18 @@ LL |     consume_fnmut(|| {\n    |                   -- captured by this `FnMut` closure\n ...\n LL |         match em {\n-   |               ^^ help: consider borrowing here: `&em`\n+   |               ^^\n ...\n LL |             Either::One(mut _t) => (),\n    |                         ------\n    |                         |\n    |                         data moved here\n    |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |         match &em {\n+   |               +\n \n error: aborting due to 21 previous errors\n "}, {"sha": "1e40e60a1ce12c4785d17e5b7c61ee5dc3fa5b52", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.rs", "status": "modified", "additions": 63, "deletions": 91, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -37,63 +37,52 @@ pub fn main() {\n \n     let X(_t) = *s;\n     //~^ ERROR cannot move\n-    //~| HELP consider borrowing here\n-    //~| SUGGESTION s\n+    //~| HELP consider removing the dereference here\n     if let Either::One(_t) = *r { }\n     //~^ ERROR cannot move\n-    //~| HELP consider borrowing here\n-    //~| SUGGESTION r\n+    //~| HELP consider removing the dereference here\n     while let Either::One(_t) = *r { }\n     //~^ ERROR cannot move\n-    //~| HELP consider borrowing here\n-    //~| SUGGESTION r\n+    //~| HELP consider removing the dereference here\n     match *r {\n         //~^ ERROR cannot move\n-        //~| HELP consider borrowing here\n-        //~| SUGGESTION r\n+        //~| HELP consider removing the dereference here\n         Either::One(_t)\n         | Either::Two(_t) => (),\n     }\n     match *r {\n         //~^ ERROR cannot move\n-        //~| HELP consider borrowing here\n-        //~| SUGGESTION r\n+        //~| HELP consider removing the dereference here\n         Either::One(_t) => (),\n         Either::Two(ref _t) => (),\n         // FIXME: should suggest removing `ref` too\n     }\n \n     let X(_t) = *sm;\n     //~^ ERROR cannot move\n-    //~| HELP consider borrowing here\n-    //~| SUGGESTION sm\n+    //~| HELP consider removing the dereference here\n     if let Either::One(_t) = *rm { }\n     //~^ ERROR cannot move\n-    //~| HELP consider borrowing here\n-    //~| SUGGESTION rm\n+    //~| HELP consider removing the dereference here\n     while let Either::One(_t) = *rm { }\n     //~^ ERROR cannot move\n-    //~| HELP consider borrowing here\n-    //~| SUGGESTION rm\n+    //~| HELP consider removing the dereference here\n     match *rm {\n         //~^ ERROR cannot move\n-        //~| HELP consider borrowing here\n-        //~| SUGGESTION rm\n+        //~| HELP consider removing the dereference here\n         Either::One(_t)\n         | Either::Two(_t) => (),\n     }\n     match *rm {\n         //~^ ERROR cannot move\n-        //~| HELP consider borrowing here\n-        //~| SUGGESTION rm\n+        //~| HELP consider removing the dereference here\n         Either::One(_t) => (),\n         Either::Two(ref _t) => (),\n         // FIXME: should suggest removing `ref` too\n     }\n     match *rm {\n         //~^ ERROR cannot move\n-        //~| HELP consider borrowing here\n-        //~| SUGGESTION rm\n+        //~| HELP consider removing the dereference here\n         Either::One(_t) => (),\n         Either::Two(ref mut _t) => (),\n         // FIXME: should suggest removing `ref` too\n@@ -102,26 +91,21 @@ pub fn main() {\n     let X(_t) = vs[0];\n     //~^ ERROR cannot move\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &vs[0]\n     if let Either::One(_t) = vr[0] { }\n     //~^ ERROR cannot move\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &vr[0]\n     while let Either::One(_t) = vr[0] { }\n     //~^ ERROR cannot move\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &vr[0]\n     match vr[0] {\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &vr[0]\n         Either::One(_t)\n         | Either::Two(_t) => (),\n     }\n     match vr[0] {\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &vr[0]\n         Either::One(_t) => (),\n         Either::Two(ref _t) => (),\n         // FIXME: should suggest removing `ref` too\n@@ -130,34 +114,28 @@ pub fn main() {\n     let X(_t) = vsm[0];\n     //~^ ERROR cannot move\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &vsm[0]\n     if let Either::One(_t) = vrm[0] { }\n     //~^ ERROR cannot move\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &vrm[0]\n     while let Either::One(_t) = vrm[0] { }\n     //~^ ERROR cannot move\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &vrm[0]\n     match vrm[0] {\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &vrm[0]\n         Either::One(_t)\n         | Either::Two(_t) => (),\n     }\n     match vrm[0] {\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &vrm[0]\n         Either::One(_t) => (),\n         Either::Two(ref _t) => (),\n         // FIXME: should suggest removing `ref` too\n     }\n     match vrm[0] {\n         //~^ ERROR cannot move\n         //~| HELP consider borrowing here\n-        //~| SUGGESTION &vrm[0]\n         Either::One(_t) => (),\n         Either::Two(ref mut _t) => (),\n         // FIXME: should suggest removing `ref` too\n@@ -167,198 +145,192 @@ pub fn main() {\n \n     let &X(_t) = s;\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&`\n-    //~| SUGGESTION X(_t)\n+    //~| HELP consider removing\n     if let &Either::One(_t) = r { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&`\n-    //~| SUGGESTION Either::One(_t)\n+    //~| HELP consider removing\n     while let &Either::One(_t) = r { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&`\n-    //~| SUGGESTION Either::One(_t)\n+    //~| HELP consider removing\n     match r {\n         //~^ ERROR cannot move\n         &Either::One(_t)\n-        //~^ HELP consider removing the `&`\n-        //~| SUGGESTION Either::One(_t)\n+        //~^ HELP consider removing\n         | &Either::Two(_t) => (),\n         // FIXME: would really like a suggestion here too\n     }\n     match r {\n         //~^ ERROR cannot move\n         &Either::One(_t) => (),\n-        //~^ HELP consider removing the `&`\n-        //~| SUGGESTION Either::One(_t)\n+        //~^ HELP consider removing\n         &Either::Two(ref _t) => (),\n     }\n     match r {\n         //~^ ERROR cannot move\n         &Either::One(_t) => (),\n-        //~^ HELP consider removing the `&`\n-        //~| SUGGESTION Either::One(_t)\n+        //~^ HELP consider removing\n         Either::Two(_t) => (),\n     }\n     fn f1(&X(_t): &X) { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&`\n-    //~| SUGGESTION X(_t)\n+    //~| HELP consider removing\n \n     let &mut X(_t) = sm;\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&mut`\n-    //~| SUGGESTION X(_t)\n+    //~| HELP consider removing\n     if let &mut Either::One(_t) = rm { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&mut`\n-    //~| SUGGESTION Either::One(_t)\n+    //~| HELP consider removing\n     while let &mut Either::One(_t) = rm { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&mut`\n-    //~| SUGGESTION Either::One(_t)\n+    //~| HELP consider removing\n     match rm {\n         //~^ ERROR cannot move\n         &mut Either::One(_t) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION Either::One(_t)\n+        //~^ HELP consider removing\n         &mut Either::Two(_t) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION Either::Two(_t)\n+        //~^ HELP consider removing\n     }\n     match rm {\n         //~^ ERROR cannot move\n         &mut Either::One(_t) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION Either::One(_t)\n+        //~^ HELP consider removing\n         &mut Either::Two(ref _t) => (),\n     }\n     match rm {\n         //~^ ERROR cannot move\n         &mut Either::One(_t) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION Either::One(_t)\n+        //~^ HELP consider removing\n         &mut Either::Two(ref mut _t) => (),\n     }\n     match rm {\n         //~^ ERROR cannot move\n         &mut Either::One(_t) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION Either::One(_t)\n+        //~^ HELP consider removing\n         Either::Two(_t) => (),\n     }\n     fn f2(&mut X(_t): &mut X) { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&mut`\n-    //~| SUGGESTION X(_t)\n+    //~| HELP consider removing\n \n     // move from tuple of &Either/&X\n \n     // FIXME: These should have suggestions.\n \n     let (&X(_t),) = (&x.clone(),);\n     //~^ ERROR cannot move\n+    //~| HELP consider borrowing the pattern binding\n     if let (&Either::One(_t),) = (&e.clone(),) { }\n     //~^ ERROR cannot move\n+    //~| HELP consider borrowing the pattern binding\n     while let (&Either::One(_t),) = (&e.clone(),) { }\n     //~^ ERROR cannot move\n+    //~| HELP consider borrowing the pattern binding\n     match (&e.clone(),) {\n         //~^ ERROR cannot move\n         (&Either::One(_t),)\n+        //~^ HELP consider borrowing the pattern binding\n         | (&Either::Two(_t),) => (),\n     }\n     fn f3((&X(_t),): (&X,)) { }\n     //~^ ERROR cannot move\n+    //~| HELP consider borrowing the pattern binding\n \n     let (&mut X(_t),) = (&mut xm.clone(),);\n     //~^ ERROR cannot move\n+    //~| HELP consider borrowing the pattern binding\n     if let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n     //~^ ERROR cannot move\n+    //~| HELP consider borrowing the pattern binding\n     while let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n     //~^ ERROR cannot move\n+    //~| HELP consider borrowing the pattern binding\n     match (&mut em.clone(),) {\n         //~^ ERROR cannot move\n         (&mut Either::One(_t),) => (),\n+        //~^ HELP consider borrowing the pattern binding\n         (&mut Either::Two(_t),) => (),\n+        //~^ HELP consider borrowing the pattern binding\n     }\n     fn f4((&mut X(_t),): (&mut X,)) { }\n     //~^ ERROR cannot move\n+    //~| HELP consider borrowing the pattern binding\n \n     // move from &Either/&X value\n \n     let &X(_t) = &x;\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&`\n-    //~| SUGGESTION X(_t)\n+    //~| HELP consider removing\n     if let &Either::One(_t) = &e { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&`\n-    //~| SUGGESTION Either::One(_t)\n+    //~| HELP consider removing\n     while let &Either::One(_t) = &e { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&`\n-    //~| SUGGESTION Either::One(_t)\n+    //~| HELP consider removing\n     match &e {\n         //~^ ERROR cannot move\n         &Either::One(_t)\n-        //~^ HELP consider removing the `&`\n-        //~| SUGGESTION Either::One(_t)\n+        //~^ HELP consider removing\n         | &Either::Two(_t) => (),\n         // FIXME: would really like a suggestion here too\n     }\n     match &e {\n         //~^ ERROR cannot move\n         &Either::One(_t) => (),\n-        //~^ HELP consider removing the `&`\n-        //~| SUGGESTION Either::One(_t)\n+        //~^ HELP consider removing\n         &Either::Two(ref _t) => (),\n     }\n     match &e {\n         //~^ ERROR cannot move\n         &Either::One(_t) => (),\n-        //~^ HELP consider removing the `&`\n-        //~| SUGGESTION Either::One(_t)\n+        //~^ HELP consider removing\n         Either::Two(_t) => (),\n     }\n \n     let &mut X(_t) = &mut xm;\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&mut`\n-    //~| SUGGESTION X(_t)\n+    //~| HELP consider removing\n     if let &mut Either::One(_t) = &mut em { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&mut`\n-    //~| SUGGESTION Either::One(_t)\n+    //~| HELP consider removing\n     while let &mut Either::One(_t) = &mut em { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `&mut`\n-    //~| SUGGESTION Either::One(_t)\n+    //~| HELP consider removing\n     match &mut em {\n         //~^ ERROR cannot move\n         &mut Either::One(_t)\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION Either::One(_t)\n+        //~^ HELP consider removing\n         | &mut Either::Two(_t) => (),\n         // FIXME: would really like a suggestion here too\n     }\n     match &mut em {\n         //~^ ERROR cannot move\n         &mut Either::One(_t) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION Either::One(_t)\n+        //~^ HELP consider removing\n         &mut Either::Two(ref _t) => (),\n     }\n     match &mut em {\n         //~^ ERROR cannot move\n         &mut Either::One(_t) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION Either::One(_t)\n+        //~^ HELP consider removing\n         &mut Either::Two(ref mut _t) => (),\n     }\n     match &mut em {\n         //~^ ERROR cannot move\n         &mut Either::One(_t) => (),\n-        //~^ HELP consider removing the `&mut`\n-        //~| SUGGESTION Either::One(_t)\n+        //~^ HELP consider removing\n         Either::Two(_t) => (),\n     }\n }\n+\n+struct Testing {\n+    a: Option<String>\n+}\n+\n+fn testing(a: &Testing) {\n+    let Some(_s) = a.a else {\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing the pattern binding\n+        return;\n+    };\n+}"}, {"sha": "5263265242318f13d4a9cfe85abda0446f15424b", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.stderr", "status": "modified", "additions": 527, "deletions": 222, "changes": 749, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -2,262 +2,398 @@ error[E0507]: cannot move out of `s` which is behind a shared reference\n   --> $DIR/simple.rs:38:17\n    |\n LL |     let X(_t) = *s;\n-   |           --    ^^ help: consider borrowing here: `&*s`\n+   |           --    ^^\n    |           |\n    |           data moved here\n    |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let X(_t) = *s;\n+LL +     let X(_t) = s;\n+   |\n \n error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n-  --> $DIR/simple.rs:42:30\n+  --> $DIR/simple.rs:41:30\n    |\n LL |     if let Either::One(_t) = *r { }\n-   |                        --    ^^ help: consider borrowing here: `&*r`\n+   |                        --    ^^\n    |                        |\n    |                        data moved here\n    |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     if let Either::One(_t) = *r { }\n+LL +     if let Either::One(_t) = r { }\n+   |\n \n error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n-  --> $DIR/simple.rs:46:33\n+  --> $DIR/simple.rs:44:33\n    |\n LL |     while let Either::One(_t) = *r { }\n-   |                           --    ^^ help: consider borrowing here: `&*r`\n+   |                           --    ^^\n    |                           |\n    |                           data moved here\n    |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     while let Either::One(_t) = *r { }\n+LL +     while let Either::One(_t) = r { }\n+   |\n \n error[E0507]: cannot move out of `r` as enum variant `Two` which is behind a shared reference\n-  --> $DIR/simple.rs:50:11\n+  --> $DIR/simple.rs:47:11\n    |\n LL |     match *r {\n-   |           ^^ help: consider borrowing here: `&*r`\n+   |           ^^\n ...\n LL |         Either::One(_t)\n    |                     --\n    |                     |\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     match *r {\n+LL +     match r {\n+   |\n \n error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n-  --> $DIR/simple.rs:57:11\n+  --> $DIR/simple.rs:53:11\n    |\n LL |     match *r {\n-   |           ^^ help: consider borrowing here: `&*r`\n+   |           ^^\n ...\n LL |         Either::One(_t) => (),\n    |                     --\n    |                     |\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     match *r {\n+LL +     match r {\n+   |\n \n error[E0507]: cannot move out of `sm` which is behind a mutable reference\n-  --> $DIR/simple.rs:66:17\n+  --> $DIR/simple.rs:61:17\n    |\n LL |     let X(_t) = *sm;\n-   |           --    ^^^ help: consider borrowing here: `&*sm`\n+   |           --    ^^^\n    |           |\n    |           data moved here\n    |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     let X(_t) = *sm;\n+LL +     let X(_t) = sm;\n+   |\n \n error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n-  --> $DIR/simple.rs:70:30\n+  --> $DIR/simple.rs:64:30\n    |\n LL |     if let Either::One(_t) = *rm { }\n-   |                        --    ^^^ help: consider borrowing here: `&*rm`\n+   |                        --    ^^^\n    |                        |\n    |                        data moved here\n    |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     if let Either::One(_t) = *rm { }\n+LL +     if let Either::One(_t) = rm { }\n+   |\n \n error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n-  --> $DIR/simple.rs:74:33\n+  --> $DIR/simple.rs:67:33\n    |\n LL |     while let Either::One(_t) = *rm { }\n-   |                           --    ^^^ help: consider borrowing here: `&*rm`\n+   |                           --    ^^^\n    |                           |\n    |                           data moved here\n    |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     while let Either::One(_t) = *rm { }\n+LL +     while let Either::One(_t) = rm { }\n+   |\n \n error[E0507]: cannot move out of `rm` as enum variant `Two` which is behind a mutable reference\n-  --> $DIR/simple.rs:78:11\n+  --> $DIR/simple.rs:70:11\n    |\n LL |     match *rm {\n-   |           ^^^ help: consider borrowing here: `&*rm`\n+   |           ^^^\n ...\n LL |         Either::One(_t)\n    |                     --\n    |                     |\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     match *rm {\n+LL +     match rm {\n+   |\n \n error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n-  --> $DIR/simple.rs:85:11\n+  --> $DIR/simple.rs:76:11\n    |\n LL |     match *rm {\n-   |           ^^^ help: consider borrowing here: `&*rm`\n+   |           ^^^\n ...\n LL |         Either::One(_t) => (),\n    |                     --\n    |                     |\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     match *rm {\n+LL +     match rm {\n+   |\n \n error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n-  --> $DIR/simple.rs:93:11\n+  --> $DIR/simple.rs:83:11\n    |\n LL |     match *rm {\n-   |           ^^^ help: consider borrowing here: `&*rm`\n+   |           ^^^\n ...\n LL |         Either::One(_t) => (),\n    |                     --\n    |                     |\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the dereference here\n+   |\n+LL -     match *rm {\n+LL +     match rm {\n+   |\n \n error[E0507]: cannot move out of index of `Vec<X>`\n-  --> $DIR/simple.rs:102:17\n+  --> $DIR/simple.rs:91:17\n    |\n LL |     let X(_t) = vs[0];\n-   |           --    ^^^^^ help: consider borrowing here: `&vs[0]`\n+   |           --    ^^^^^\n    |           |\n    |           data moved here\n    |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let X(_t) = &vs[0];\n+   |                 +\n \n error[E0507]: cannot move out of index of `Vec<Either>`\n-  --> $DIR/simple.rs:106:30\n+  --> $DIR/simple.rs:94:30\n    |\n LL |     if let Either::One(_t) = vr[0] { }\n-   |                        --    ^^^^^ help: consider borrowing here: `&vr[0]`\n+   |                        --    ^^^^^\n    |                        |\n    |                        data moved here\n    |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     if let Either::One(_t) = &vr[0] { }\n+   |                              +\n \n error[E0507]: cannot move out of index of `Vec<Either>`\n-  --> $DIR/simple.rs:110:33\n+  --> $DIR/simple.rs:97:33\n    |\n LL |     while let Either::One(_t) = vr[0] { }\n-   |                           --    ^^^^^ help: consider borrowing here: `&vr[0]`\n+   |                           --    ^^^^^\n    |                           |\n    |                           data moved here\n    |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     while let Either::One(_t) = &vr[0] { }\n+   |                                 +\n \n error[E0507]: cannot move out of index of `Vec<Either>`\n-  --> $DIR/simple.rs:114:11\n+  --> $DIR/simple.rs:100:11\n    |\n LL |     match vr[0] {\n-   |           ^^^^^ help: consider borrowing here: `&vr[0]`\n+   |           ^^^^^\n ...\n LL |         Either::One(_t)\n    |                     --\n    |                     |\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     match &vr[0] {\n+   |           +\n \n error[E0507]: cannot move out of index of `Vec<Either>`\n-  --> $DIR/simple.rs:121:11\n+  --> $DIR/simple.rs:106:11\n    |\n LL |     match vr[0] {\n-   |           ^^^^^ help: consider borrowing here: `&vr[0]`\n+   |           ^^^^^\n ...\n LL |         Either::One(_t) => (),\n    |                     --\n    |                     |\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     match &vr[0] {\n+   |           +\n \n error[E0507]: cannot move out of index of `Vec<X>`\n-  --> $DIR/simple.rs:130:17\n+  --> $DIR/simple.rs:114:17\n    |\n LL |     let X(_t) = vsm[0];\n-   |           --    ^^^^^^ help: consider borrowing here: `&vsm[0]`\n+   |           --    ^^^^^^\n    |           |\n    |           data moved here\n    |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let X(_t) = &vsm[0];\n+   |                 +\n \n error[E0507]: cannot move out of index of `Vec<Either>`\n-  --> $DIR/simple.rs:134:30\n+  --> $DIR/simple.rs:117:30\n    |\n LL |     if let Either::One(_t) = vrm[0] { }\n-   |                        --    ^^^^^^ help: consider borrowing here: `&vrm[0]`\n+   |                        --    ^^^^^^\n    |                        |\n    |                        data moved here\n    |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     if let Either::One(_t) = &vrm[0] { }\n+   |                              +\n \n error[E0507]: cannot move out of index of `Vec<Either>`\n-  --> $DIR/simple.rs:138:33\n+  --> $DIR/simple.rs:120:33\n    |\n LL |     while let Either::One(_t) = vrm[0] { }\n-   |                           --    ^^^^^^ help: consider borrowing here: `&vrm[0]`\n+   |                           --    ^^^^^^\n    |                           |\n    |                           data moved here\n    |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     while let Either::One(_t) = &vrm[0] { }\n+   |                                 +\n \n error[E0507]: cannot move out of index of `Vec<Either>`\n-  --> $DIR/simple.rs:142:11\n+  --> $DIR/simple.rs:123:11\n    |\n LL |     match vrm[0] {\n-   |           ^^^^^^ help: consider borrowing here: `&vrm[0]`\n+   |           ^^^^^^\n ...\n LL |         Either::One(_t)\n    |                     --\n    |                     |\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     match &vrm[0] {\n+   |           +\n \n error[E0507]: cannot move out of index of `Vec<Either>`\n-  --> $DIR/simple.rs:149:11\n+  --> $DIR/simple.rs:129:11\n    |\n LL |     match vrm[0] {\n-   |           ^^^^^^ help: consider borrowing here: `&vrm[0]`\n+   |           ^^^^^^\n ...\n LL |         Either::One(_t) => (),\n    |                     --\n    |                     |\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     match &vrm[0] {\n+   |           +\n \n error[E0507]: cannot move out of index of `Vec<Either>`\n-  --> $DIR/simple.rs:157:11\n+  --> $DIR/simple.rs:136:11\n    |\n LL |     match vrm[0] {\n-   |           ^^^^^^ help: consider borrowing here: `&vrm[0]`\n+   |           ^^^^^^\n ...\n LL |         Either::One(_t) => (),\n    |                     --\n    |                     |\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     match &vrm[0] {\n+   |           +\n \n error[E0507]: cannot move out of `s` which is behind a shared reference\n-  --> $DIR/simple.rs:168:18\n+  --> $DIR/simple.rs:146:18\n    |\n LL |     let &X(_t) = s;\n-   |         ------   ^\n-   |         |  |\n-   |         |  data moved here\n-   |         |  move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&`: `X(_t)`\n+   |            --    ^\n+   |            |\n+   |            data moved here\n+   |            move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     let &X(_t) = s;\n+LL +     let X(_t) = s;\n+   |\n \n error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n-  --> $DIR/simple.rs:172:31\n+  --> $DIR/simple.rs:149:31\n    |\n LL |     if let &Either::One(_t) = r { }\n-   |            ----------------   ^\n-   |            |            |\n-   |            |            data moved here\n-   |            |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |            help: consider removing the `&`: `Either::One(_t)`\n+   |                         --    ^\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     if let &Either::One(_t) = r { }\n+LL +     if let Either::One(_t) = r { }\n+   |\n \n error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n-  --> $DIR/simple.rs:176:34\n+  --> $DIR/simple.rs:152:34\n    |\n LL |     while let &Either::One(_t) = r { }\n-   |               ----------------   ^\n-   |               |            |\n-   |               |            data moved here\n-   |               |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |               help: consider removing the `&`: `Either::One(_t)`\n+   |                            --    ^\n+   |                            |\n+   |                            data moved here\n+   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     while let &Either::One(_t) = r { }\n+LL +     while let Either::One(_t) = r { }\n+   |\n \n error[E0507]: cannot move out of `r` as enum variant `Two` which is behind a shared reference\n-  --> $DIR/simple.rs:180:11\n+  --> $DIR/simple.rs:155:11\n    |\n LL |     match r {\n    |           ^\n@@ -268,160 +404,215 @@ LL |         &Either::One(_t)\n    |                      data moved here\n    |                      move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |\n-help: consider removing the `&`\n+help: consider removing the borrow\n    |\n-LL ~         Either::One(_t)\n-LL +\n-LL +\n-LL ~         | &Either::Two(_t) => (),\n+LL -         &Either::One(_t)\n+LL +         Either::One(_t)\n    |\n \n error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n-  --> $DIR/simple.rs:188:11\n+  --> $DIR/simple.rs:162:11\n    |\n LL |     match r {\n    |           ^\n LL |\n LL |         &Either::One(_t) => (),\n-   |         ----------------\n-   |         |            |\n-   |         |            data moved here\n-   |         |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&`: `Either::One(_t)`\n+   |                      --\n+   |                      |\n+   |                      data moved here\n+   |                      move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -         &Either::One(_t) => (),\n+LL +         Either::One(_t) => (),\n+   |\n \n error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n-  --> $DIR/simple.rs:195:11\n+  --> $DIR/simple.rs:168:11\n    |\n LL |     match r {\n    |           ^\n LL |\n LL |         &Either::One(_t) => (),\n-   |         ----------------\n-   |         |            |\n-   |         |            data moved here\n-   |         |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&`: `Either::One(_t)`\n+   |                      --\n+   |                      |\n+   |                      data moved here\n+   |                      move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -         &Either::One(_t) => (),\n+LL +         Either::One(_t) => (),\n+   |\n \n error[E0507]: cannot move out of `sm` which is behind a mutable reference\n-  --> $DIR/simple.rs:207:22\n+  --> $DIR/simple.rs:178:22\n    |\n LL |     let &mut X(_t) = sm;\n-   |         ----------   ^^\n-   |         |      |\n-   |         |      data moved here\n-   |         |      move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&mut`: `X(_t)`\n+   |                --    ^^\n+   |                |\n+   |                data moved here\n+   |                move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the mutable borrow\n+   |\n+LL -     let &mut X(_t) = sm;\n+LL +     let X(_t) = sm;\n+   |\n \n error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n-  --> $DIR/simple.rs:211:35\n+  --> $DIR/simple.rs:181:35\n    |\n LL |     if let &mut Either::One(_t) = rm { }\n-   |            --------------------   ^^\n-   |            |                |\n-   |            |                data moved here\n-   |            |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |            help: consider removing the `&mut`: `Either::One(_t)`\n+   |                             --    ^^\n+   |                             |\n+   |                             data moved here\n+   |                             move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the mutable borrow\n+   |\n+LL -     if let &mut Either::One(_t) = rm { }\n+LL +     if let Either::One(_t) = rm { }\n+   |\n \n error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n-  --> $DIR/simple.rs:215:38\n+  --> $DIR/simple.rs:184:38\n    |\n LL |     while let &mut Either::One(_t) = rm { }\n-   |               --------------------   ^^\n-   |               |                |\n-   |               |                data moved here\n-   |               |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |               help: consider removing the `&mut`: `Either::One(_t)`\n+   |                                --    ^^\n+   |                                |\n+   |                                data moved here\n+   |                                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the mutable borrow\n+   |\n+LL -     while let &mut Either::One(_t) = rm { }\n+LL +     while let Either::One(_t) = rm { }\n+   |\n \n error[E0507]: cannot move out of `rm` as enum variant `Two` which is behind a mutable reference\n-  --> $DIR/simple.rs:219:11\n+  --> $DIR/simple.rs:187:11\n    |\n LL |     match rm {\n    |           ^^\n LL |\n LL |         &mut Either::One(_t) => (),\n    |                          -- data moved here\n-...\n+LL |\n LL |         &mut Either::Two(_t) => (),\n    |                          -- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n-help: consider removing the `&mut`\n+help: consider removing the mutable borrow\n    |\n-LL |         Either::One(_t) => (),\n-   |         ~~~~~~~~~~~~~~~\n-help: consider removing the `&mut`\n+LL -         &mut Either::One(_t) => (),\n+LL +         Either::One(_t) => (),\n+   |\n+help: consider removing the mutable borrow\n+   |\n+LL -         &mut Either::Two(_t) => (),\n+LL +         Either::Two(_t) => (),\n    |\n-LL |         Either::Two(_t) => (),\n-   |         ~~~~~~~~~~~~~~~\n \n error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n-  --> $DIR/simple.rs:228:11\n+  --> $DIR/simple.rs:194:11\n    |\n LL |     match rm {\n    |           ^^\n LL |\n LL |         &mut Either::One(_t) => (),\n-   |         --------------------\n-   |         |                |\n-   |         |                data moved here\n-   |         |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&mut`: `Either::One(_t)`\n+   |                          --\n+   |                          |\n+   |                          data moved here\n+   |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the mutable borrow\n+   |\n+LL -         &mut Either::One(_t) => (),\n+LL +         Either::One(_t) => (),\n+   |\n \n error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n-  --> $DIR/simple.rs:235:11\n+  --> $DIR/simple.rs:200:11\n    |\n LL |     match rm {\n    |           ^^\n LL |\n LL |         &mut Either::One(_t) => (),\n-   |         --------------------\n-   |         |                |\n-   |         |                data moved here\n-   |         |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&mut`: `Either::One(_t)`\n+   |                          --\n+   |                          |\n+   |                          data moved here\n+   |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the mutable borrow\n+   |\n+LL -         &mut Either::One(_t) => (),\n+LL +         Either::One(_t) => (),\n+   |\n \n error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n-  --> $DIR/simple.rs:242:11\n+  --> $DIR/simple.rs:206:11\n    |\n LL |     match rm {\n    |           ^^\n LL |\n LL |         &mut Either::One(_t) => (),\n-   |         --------------------\n-   |         |                |\n-   |         |                data moved here\n-   |         |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&mut`: `Either::One(_t)`\n+   |                          --\n+   |                          |\n+   |                          data moved here\n+   |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the mutable borrow\n+   |\n+LL -         &mut Either::One(_t) => (),\n+LL +         Either::One(_t) => (),\n+   |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:258:21\n+  --> $DIR/simple.rs:220:21\n    |\n LL |     let (&X(_t),) = (&x.clone(),);\n    |             --      ^^^^^^^^^^^^^\n    |             |\n    |             data moved here\n    |             move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let (&X(ref _t),) = (&x.clone(),);\n+   |             +++\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:260:34\n+  --> $DIR/simple.rs:223:34\n    |\n LL |     if let (&Either::One(_t),) = (&e.clone(),) { }\n    |                          --      ^^^^^^^^^^^^^\n    |                          |\n    |                          data moved here\n    |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     if let (&Either::One(ref _t),) = (&e.clone(),) { }\n+   |                          +++\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:262:37\n+  --> $DIR/simple.rs:226:37\n    |\n LL |     while let (&Either::One(_t),) = (&e.clone(),) { }\n    |                             --      ^^^^^^^^^^^^^\n    |                             |\n    |                             data moved here\n    |                             move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     while let (&Either::One(ref _t),) = (&e.clone(),) { }\n+   |                             +++\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:264:11\n+  --> $DIR/simple.rs:229:11\n    |\n LL |     match (&e.clone(),) {\n    |           ^^^^^^^^^^^^^\n@@ -431,79 +622,123 @@ LL |         (&Either::One(_t),)\n    |                       |\n    |                       data moved here\n    |                       move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (&Either::One(ref _t),)\n+   |                       +++\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:272:25\n+  --> $DIR/simple.rs:239:25\n    |\n LL |     let (&mut X(_t),) = (&mut xm.clone(),);\n    |                 --      ^^^^^^^^^^^^^^^^^^\n    |                 |\n    |                 data moved here\n    |                 move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let (&mut X(ref _t),) = (&mut xm.clone(),);\n+   |                 +++\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:274:38\n+  --> $DIR/simple.rs:242:38\n    |\n LL |     if let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n    |                              --      ^^^^^^^^^^^^^^^^^^\n    |                              |\n    |                              data moved here\n    |                              move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     if let (&mut Either::One(ref _t),) = (&mut em.clone(),) { }\n+   |                              +++\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:276:41\n+  --> $DIR/simple.rs:245:41\n    |\n LL |     while let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n    |                                 --      ^^^^^^^^^^^^^^^^^^\n    |                                 |\n    |                                 data moved here\n    |                                 move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     while let (&mut Either::One(ref _t),) = (&mut em.clone(),) { }\n+   |                                 +++\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:278:11\n+  --> $DIR/simple.rs:248:11\n    |\n LL |     match (&mut em.clone(),) {\n    |           ^^^^^^^^^^^^^^^^^^\n LL |\n LL |         (&mut Either::One(_t),) => (),\n    |                           -- data moved here\n+LL |\n LL |         (&mut Either::Two(_t),) => (),\n    |                           -- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (&mut Either::One(ref _t),) => (),\n+   |                           +++\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (&mut Either::Two(ref _t),) => (),\n+   |                           +++\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:288:18\n+  --> $DIR/simple.rs:261:18\n    |\n LL |     let &X(_t) = &x;\n-   |         ------   ^^\n-   |         |  |\n-   |         |  data moved here\n-   |         |  move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&`: `X(_t)`\n+   |            --    ^^\n+   |            |\n+   |            data moved here\n+   |            move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     let &X(_t) = &x;\n+LL +     let X(_t) = &x;\n+   |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:292:31\n+  --> $DIR/simple.rs:264:31\n    |\n LL |     if let &Either::One(_t) = &e { }\n-   |            ----------------   ^^\n-   |            |            |\n-   |            |            data moved here\n-   |            |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |            help: consider removing the `&`: `Either::One(_t)`\n+   |                         --    ^^\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     if let &Either::One(_t) = &e { }\n+LL +     if let Either::One(_t) = &e { }\n+   |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:296:34\n+  --> $DIR/simple.rs:267:34\n    |\n LL |     while let &Either::One(_t) = &e { }\n-   |               ----------------   ^^\n-   |               |            |\n-   |               |            data moved here\n-   |               |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |               help: consider removing the `&`: `Either::One(_t)`\n+   |                            --    ^^\n+   |                            |\n+   |                            data moved here\n+   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     while let &Either::One(_t) = &e { }\n+LL +     while let Either::One(_t) = &e { }\n+   |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:300:11\n+  --> $DIR/simple.rs:270:11\n    |\n LL |     match &e {\n    |           ^^\n@@ -514,72 +749,95 @@ LL |         &Either::One(_t)\n    |                      data moved here\n    |                      move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |\n-help: consider removing the `&`\n+help: consider removing the borrow\n    |\n-LL ~         Either::One(_t)\n-LL +\n-LL +\n-LL ~         | &Either::Two(_t) => (),\n+LL -         &Either::One(_t)\n+LL +         Either::One(_t)\n    |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:308:11\n+  --> $DIR/simple.rs:277:11\n    |\n LL |     match &e {\n    |           ^^\n LL |\n LL |         &Either::One(_t) => (),\n-   |         ----------------\n-   |         |            |\n-   |         |            data moved here\n-   |         |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&`: `Either::One(_t)`\n+   |                      --\n+   |                      |\n+   |                      data moved here\n+   |                      move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -         &Either::One(_t) => (),\n+LL +         Either::One(_t) => (),\n+   |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:315:11\n+  --> $DIR/simple.rs:283:11\n    |\n LL |     match &e {\n    |           ^^\n LL |\n LL |         &Either::One(_t) => (),\n-   |         ----------------\n-   |         |            |\n-   |         |            data moved here\n-   |         |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&`: `Either::One(_t)`\n+   |                      --\n+   |                      |\n+   |                      data moved here\n+   |                      move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -         &Either::One(_t) => (),\n+LL +         Either::One(_t) => (),\n+   |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:323:22\n+  --> $DIR/simple.rs:290:22\n    |\n LL |     let &mut X(_t) = &mut xm;\n-   |         ----------   ^^^^^^^\n-   |         |      |\n-   |         |      data moved here\n-   |         |      move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&mut`: `X(_t)`\n+   |                --    ^^^^^^^\n+   |                |\n+   |                data moved here\n+   |                move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the mutable borrow\n+   |\n+LL -     let &mut X(_t) = &mut xm;\n+LL +     let X(_t) = &mut xm;\n+   |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:327:35\n+  --> $DIR/simple.rs:293:35\n    |\n LL |     if let &mut Either::One(_t) = &mut em { }\n-   |            --------------------   ^^^^^^^\n-   |            |                |\n-   |            |                data moved here\n-   |            |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |            help: consider removing the `&mut`: `Either::One(_t)`\n+   |                             --    ^^^^^^^\n+   |                             |\n+   |                             data moved here\n+   |                             move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the mutable borrow\n+   |\n+LL -     if let &mut Either::One(_t) = &mut em { }\n+LL +     if let Either::One(_t) = &mut em { }\n+   |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:331:38\n+  --> $DIR/simple.rs:296:38\n    |\n LL |     while let &mut Either::One(_t) = &mut em { }\n-   |               --------------------   ^^^^^^^\n-   |               |                |\n-   |               |                data moved here\n-   |               |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |               help: consider removing the `&mut`: `Either::One(_t)`\n+   |                                --    ^^^^^^^\n+   |                                |\n+   |                                data moved here\n+   |                                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the mutable borrow\n+   |\n+LL -     while let &mut Either::One(_t) = &mut em { }\n+LL +     while let Either::One(_t) = &mut em { }\n+   |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:335:11\n+  --> $DIR/simple.rs:299:11\n    |\n LL |     match &mut em {\n    |           ^^^^^^^\n@@ -590,91 +848,138 @@ LL |         &mut Either::One(_t)\n    |                          data moved here\n    |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |\n-help: consider removing the `&mut`\n+help: consider removing the mutable borrow\n    |\n-LL ~         Either::One(_t)\n-LL +\n-LL +\n-LL ~         | &mut Either::Two(_t) => (),\n+LL -         &mut Either::One(_t)\n+LL +         Either::One(_t)\n    |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:343:11\n+  --> $DIR/simple.rs:306:11\n    |\n LL |     match &mut em {\n    |           ^^^^^^^\n LL |\n LL |         &mut Either::One(_t) => (),\n-   |         --------------------\n-   |         |                |\n-   |         |                data moved here\n-   |         |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&mut`: `Either::One(_t)`\n+   |                          --\n+   |                          |\n+   |                          data moved here\n+   |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the mutable borrow\n+   |\n+LL -         &mut Either::One(_t) => (),\n+LL +         Either::One(_t) => (),\n+   |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:350:11\n+  --> $DIR/simple.rs:312:11\n    |\n LL |     match &mut em {\n    |           ^^^^^^^\n LL |\n LL |         &mut Either::One(_t) => (),\n-   |         --------------------\n-   |         |                |\n-   |         |                data moved here\n-   |         |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&mut`: `Either::One(_t)`\n+   |                          --\n+   |                          |\n+   |                          data moved here\n+   |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the mutable borrow\n+   |\n+LL -         &mut Either::One(_t) => (),\n+LL +         Either::One(_t) => (),\n+   |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:357:11\n+  --> $DIR/simple.rs:318:11\n    |\n LL |     match &mut em {\n    |           ^^^^^^^\n LL |\n LL |         &mut Either::One(_t) => (),\n-   |         --------------------\n-   |         |                |\n-   |         |                data moved here\n-   |         |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&mut`: `Either::One(_t)`\n+   |                          --\n+   |                          |\n+   |                          data moved here\n+   |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the mutable borrow\n+   |\n+LL -         &mut Either::One(_t) => (),\n+LL +         Either::One(_t) => (),\n+   |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:202:11\n+  --> $DIR/simple.rs:174:11\n    |\n LL |     fn f1(&X(_t): &X) { }\n    |           ^^^--^\n-   |           |  |\n-   |           |  data moved here\n-   |           |  move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-   |           help: consider removing the `&`: `X(_t)`\n+   |              |\n+   |              data moved here\n+   |              move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     fn f1(&X(_t): &X) { }\n+LL +     fn f1(X(_t): &X) { }\n+   |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:249:11\n+  --> $DIR/simple.rs:212:11\n    |\n LL |     fn f2(&mut X(_t): &mut X) { }\n    |           ^^^^^^^--^\n-   |           |      |\n-   |           |      data moved here\n-   |           |      move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-   |           help: consider removing the `&mut`: `X(_t)`\n+   |                  |\n+   |                  data moved here\n+   |                  move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the mutable borrow\n+   |\n+LL -     fn f2(&mut X(_t): &mut X) { }\n+LL +     fn f2(X(_t): &mut X) { }\n+   |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:269:11\n+  --> $DIR/simple.rs:235:11\n    |\n LL |     fn f3((&X(_t),): (&X,)) { }\n    |           ^^^^--^^^\n    |               |\n    |               data moved here\n    |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     fn f3((&X(ref _t),): (&X,)) { }\n+   |               +++\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:283:11\n+  --> $DIR/simple.rs:255:11\n    |\n LL |     fn f4((&mut X(_t),): (&mut X,)) { }\n    |           ^^^^^^^^--^^^\n    |                   |\n    |                   data moved here\n    |                   move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     fn f4((&mut X(ref _t),): (&mut X,)) { }\n+   |                   +++\n+\n+error[E0507]: cannot move out of `a.a` as enum variant `Some` which is behind a shared reference\n+  --> $DIR/simple.rs:331:20\n+   |\n+LL |     let Some(_s) = a.a else {\n+   |              --    ^^^\n+   |              |\n+   |              data moved here\n+   |              move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let Some(ref _s) = a.a else {\n+   |              +++\n \n-error: aborting due to 60 previous errors\n+error: aborting due to 61 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "97d05d9dcffaf840cef3f3640cac2fe823c63a83", "filename": "src/test/ui/suggestions/option-content-move-from-tuple-match.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move-from-tuple-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move-from-tuple-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move-from-tuple-match.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -9,6 +9,11 @@ LL |         (None, &c) => &c.unwrap(),\n    |                 |\n    |                 data moved here\n    |                 move occurs because `c` has type `Option<String>`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (None, &ref c) => &c.unwrap(),\n+   |                 +++\n \n error: aborting due to previous error\n "}, {"sha": "7f931b49a58f5553434b9c525595358e659d9ca3", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.mirunsafeck.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.mirunsafeck.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -14,10 +14,12 @@ error[E0507]: cannot move out of dereference of `ManuallyDrop<((MockVec<u8>, Moc\n   --> $DIR/union-borrow-move-parent-sibling.rs:62:13\n    |\n LL |     let a = u.x.0;\n-   |             ^^^^^\n-   |             |\n-   |             move occurs because value has type `(MockVec<u8>, MockVec<u8>)`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&u.x.0`\n+   |             ^^^^^ move occurs because value has type `(MockVec<u8>, MockVec<u8>)`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let a = &u.x.0;\n+   |             +\n \n error[E0382]: use of moved value: `u`\n   --> $DIR/union-borrow-move-parent-sibling.rs:64:13\n@@ -46,10 +48,12 @@ error[E0507]: cannot move out of dereference of `ManuallyDrop<((MockVec<u8>, Moc\n   --> $DIR/union-borrow-move-parent-sibling.rs:76:13\n    |\n LL |     let a = (u.x.0).0;\n-   |             ^^^^^^^^^\n-   |             |\n-   |             move occurs because value has type `MockVec<u8>`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&(u.x.0).0`\n+   |             ^^^^^^^^^ move occurs because value has type `MockVec<u8>`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let a = &(u.x.0).0;\n+   |             +\n \n error[E0382]: use of moved value: `u`\n   --> $DIR/union-borrow-move-parent-sibling.rs:78:13"}, {"sha": "7f931b49a58f5553434b9c525595358e659d9ca3", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.thirunsafeck.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbd0471af4445f3eed20dccd4f02a4ff5859b/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.thirunsafeck.stderr?ref=dcdbbd0471af4445f3eed20dccd4f02a4ff5859b", "patch": "@@ -14,10 +14,12 @@ error[E0507]: cannot move out of dereference of `ManuallyDrop<((MockVec<u8>, Moc\n   --> $DIR/union-borrow-move-parent-sibling.rs:62:13\n    |\n LL |     let a = u.x.0;\n-   |             ^^^^^\n-   |             |\n-   |             move occurs because value has type `(MockVec<u8>, MockVec<u8>)`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&u.x.0`\n+   |             ^^^^^ move occurs because value has type `(MockVec<u8>, MockVec<u8>)`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let a = &u.x.0;\n+   |             +\n \n error[E0382]: use of moved value: `u`\n   --> $DIR/union-borrow-move-parent-sibling.rs:64:13\n@@ -46,10 +48,12 @@ error[E0507]: cannot move out of dereference of `ManuallyDrop<((MockVec<u8>, Moc\n   --> $DIR/union-borrow-move-parent-sibling.rs:76:13\n    |\n LL |     let a = (u.x.0).0;\n-   |             ^^^^^^^^^\n-   |             |\n-   |             move occurs because value has type `MockVec<u8>`, which does not implement the `Copy` trait\n-   |             help: consider borrowing here: `&(u.x.0).0`\n+   |             ^^^^^^^^^ move occurs because value has type `MockVec<u8>`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing here\n+   |\n+LL |     let a = &(u.x.0).0;\n+   |             +\n \n error[E0382]: use of moved value: `u`\n   --> $DIR/union-borrow-move-parent-sibling.rs:78:13"}]}