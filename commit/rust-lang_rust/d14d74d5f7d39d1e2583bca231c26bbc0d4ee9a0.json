{"sha": "d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNGQ3NGQ1ZjdkMzlkMWUyNTgzYmNhMjMxYzI2YmJjMGQ0ZWU5YTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-04T06:38:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-04T06:38:38Z"}, "message": "Auto merge of #37920 - nikomatsakis:compile-time-regression-37864, r=mw\n\nin region, treat current (and future) item-likes alike\n\nThe `visit_fn` code mutates its surrounding context.  Between *items*,\nthis was saved/restored, but between impl items it was not. This meant\nthat we wound up with `CallSiteScope` entries with two parents (or\nmore!).  As far as I can tell, this is harmless in actual type-checking,\nsince the regions you interact with are always from at most one of those\nbranches. But it can slow things down.\n\nBefore, the effect was limited, since it only applied to impl items\nwithin an impl. After #37660, impl items are visisted all together at\nthe end, and hence this could create a very messed up\nhierarchy. Isolating impl item properly solves both issues.\n\nI cannot come up with a way to unit-test this; for posterity, however,\nyou can observe the messed up hierarchies with a test as simple as the\nfollowing, which would create a callsite scope with two parents both\nbefore and after\n\n```\nstruct Foo {\n}\n\nimpl Foo {\n    fn bar(&self) -> usize {\n        22\n    }\n\n    fn baz(&self) -> usize {\n        22\n    }\n}\n\nfn main() { }\n```\n\nFixes #37864.\n\nr? @michaelwoerister\n\ncc @pnkfelix -- can you think of a way to make a regr test?", "tree": {"sha": "9da857b85ddcf585c9d0fdd089f214ee7c69d9c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9da857b85ddcf585c9d0fdd089f214ee7c69d9c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0", "html_url": "https://github.com/rust-lang/rust/commit/d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "125474de07f5391f017b3470ac96a770e52ad60c", "url": "https://api.github.com/repos/rust-lang/rust/commits/125474de07f5391f017b3470ac96a770e52ad60c", "html_url": "https://github.com/rust-lang/rust/commit/125474de07f5391f017b3470ac96a770e52ad60c"}, {"sha": "f8097066f8d40ef2716b6d679324ef894038b261", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8097066f8d40ef2716b6d679324ef894038b261", "html_url": "https://github.com/rust-lang/rust/commit/f8097066f8d40ef2716b6d679324ef894038b261"}], "stats": {"total": 116, "additions": 108, "deletions": 8}, "files": [{"sha": "b1e35e54eb9bb8c89a8c9a8e6bab0d257f74d0d8", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0", "patch": "@@ -1066,7 +1066,11 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>,\n     }\n }\n \n-fn resolve_item<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>, item: &'tcx hir::Item) {\n+fn resolve_item_like<'a, 'tcx, F>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>,\n+                                  id: ast::NodeId,\n+                                  walk: F)\n+    where F: FnOnce(&mut RegionResolutionVisitor<'tcx, 'a>)\n+{\n     // Items create a new outer block scope as far as we're concerned.\n     let prev_cx = visitor.cx;\n     let prev_ts = mem::replace(&mut visitor.terminating_scopes, NodeSet());\n@@ -1075,8 +1079,8 @@ fn resolve_item<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>, item:\n         var_parent: ROOT_CODE_EXTENT,\n         parent: ROOT_CODE_EXTENT\n     };\n-    intravisit::walk_item(visitor, item);\n-    visitor.create_item_scope_if_needed(item.id);\n+    walk(visitor);\n+    visitor.create_item_scope_if_needed(id);\n     visitor.cx = prev_cx;\n     visitor.terminating_scopes = prev_ts;\n }\n@@ -1179,17 +1183,15 @@ impl<'ast, 'a> Visitor<'ast> for RegionResolutionVisitor<'ast, 'a> {\n     }\n \n     fn visit_item(&mut self, i: &'ast Item) {\n-        resolve_item(self, i);\n+        resolve_item_like(self, i.id, |this| intravisit::walk_item(this, i));\n     }\n \n     fn visit_impl_item(&mut self, ii: &'ast hir::ImplItem) {\n-        intravisit::walk_impl_item(self, ii);\n-        self.create_item_scope_if_needed(ii.id);\n+        resolve_item_like(self, ii.id, |this| intravisit::walk_impl_item(this, ii));\n     }\n \n     fn visit_trait_item(&mut self, ti: &'ast hir::TraitItem) {\n-        intravisit::walk_trait_item(self, ti);\n-        self.create_item_scope_if_needed(ti.id);\n+        resolve_item_like(self, ti.id, |this| intravisit::walk_trait_item(this, ti));\n     }\n \n     fn visit_fn(&mut self, fk: FnKind<'ast>, fd: &'ast FnDecl,"}, {"sha": "33d072eb6a8904f8f5c37a3c1694a60c62315b82", "filename": "src/test/run-pass-fulldeps/issue-37290/auxiliary/lint.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0/src%2Ftest%2Frun-pass-fulldeps%2Fissue-37290%2Fauxiliary%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0/src%2Ftest%2Frun-pass-fulldeps%2Fissue-37290%2Fauxiliary%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-37290%2Fauxiliary%2Flint.rs?ref=d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This flag is needed for plugins to work:\n+// compile-flags: -C prefer-dynamic\n+\n+#![feature(plugin_registrar, rustc_private)]\n+#![crate_type = \"dylib\"]\n+#![deny(region_hierarchy)]\n+\n+extern crate syntax;\n+#[macro_use]\n+extern crate rustc;\n+extern crate rustc_plugin;\n+\n+use rustc::lint::{LateContext, LintPass, LateLintPass, LintArray, LintContext};\n+use rustc::hir;\n+use rustc::hir::intravisit::FnKind;\n+use rustc::middle::region::CodeExtent;\n+use rustc::util::nodemap::FxHashMap;\n+\n+use syntax::ast::{self, NodeId};\n+use syntax::codemap::Span;\n+\n+declare_lint!(REGION_HIERARCHY, Warn, \"warn about bogus region hierarchy\");\n+\n+struct Pass {\n+    map: FxHashMap<CodeExtent, NodeId>\n+}\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray { lint_array!(REGION_HIERARCHY) }\n+}\n+\n+impl LateLintPass for Pass {\n+    fn check_fn(&mut self, cx: &LateContext,\n+                fk: FnKind, _: &hir::FnDecl, expr: &hir::Expr,\n+                span: Span, node: ast::NodeId)\n+    {\n+        if let FnKind::Closure(..) = fk { return }\n+\n+        let mut extent = cx.tcx.region_maps.node_extent(expr.id);\n+        while let Some(parent) = cx.tcx.region_maps.opt_encl_scope(extent) {\n+            extent = parent;\n+        }\n+        if let Some(other) = self.map.insert(extent, node) {\n+            cx.span_lint(REGION_HIERARCHY, span, &format!(\n+                \"different fns {:?}, {:?} with the same root extent {:?}\",\n+                cx.tcx.map.local_def_id(other),\n+                cx.tcx.map.local_def_id(node),\n+                extent));\n+        }\n+    }\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut ::rustc_plugin::Registry) {\n+    reg.register_late_lint_pass(Box::new(\n+        Pass { map: FxHashMap() }\n+    ));\n+}"}, {"sha": "394ad92b1d8c0af38ded8f136b32f1a92441f113", "filename": "src/test/run-pass-fulldeps/issue-37290/main.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0/src%2Ftest%2Frun-pass-fulldeps%2Fissue-37290%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0/src%2Ftest%2Frun-pass-fulldeps%2Fissue-37290%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-37290%2Fmain.rs?ref=d14d74d5f7d39d1e2583bca231c26bbc0d4ee9a0", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:lint.rs\n+\n+#![feature(plugin)]\n+#![plugin(lint)]\n+\n+struct Foo {\n+}\n+\n+impl Foo {\n+    fn bar(&self) -> usize {\n+    22\n+    }\n+\n+    fn baz(&self) -> usize {\n+    22\n+    }\n+}\n+\n+fn main() { }\n+"}]}