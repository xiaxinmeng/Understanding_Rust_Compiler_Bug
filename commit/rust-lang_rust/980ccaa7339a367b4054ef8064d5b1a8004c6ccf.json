{"sha": "980ccaa7339a367b4054ef8064d5b1a8004c6ccf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MGNjYWE3MzM5YTM2N2I0MDU0ZWY4MDY0ZDViMWE4MDA0YzZjY2Y=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-24T02:17:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-24T02:17:02Z"}, "message": "Rollup merge of #66641 - VirrageS:master, r=Centril\n\nparser: recover on nested ADTs as enum variants\n\nCloses: https://github.com/rust-lang/rust/issues/66127", "tree": {"sha": "ca9b6bf3c12cc6384eb356d289f514445df849e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca9b6bf3c12cc6384eb356d289f514445df849e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/980ccaa7339a367b4054ef8064d5b1a8004c6ccf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2egeCRBK7hj4Ov3rIwAAdHIIAIC5r+AEbJtCdpql8iyZE3ef\nLPnxOobC2gRqIDtIZ788T+7yBu0PzKzT4n9zLU5PUq06gDuMDUHIfPwnPVEeaBiK\nq2PxLDubn0F8UpsuWFjuxSVZUr4ke5/9WgStMh8canEe+f8UcxBTMo6T6lfdxRv3\n8K4YjqK8eXZ+bhTJH4+c3XfREz7w/XaY79mucvyMMn1N62u88u3zK+Ruplt8gnmE\n2B+Tz5JEGvlWDOvrHvoJBA1rTgp5zT3NEJ64rLhOrrpLsk8Zshy/fRPaNG6ckiBn\nSXpmoh5x6Orozc83qugvBwW1yAnFLnqYeFczVxzNylxaVneQIylbE/9TrVfRDFM=\n=m+7w\n-----END PGP SIGNATURE-----\n", "payload": "tree ca9b6bf3c12cc6384eb356d289f514445df849e9\nparent a3ff52ce92f1dedea32c69afbbd3dabb6b457731\nparent 9300c3b6ad296bdf08c867be269c0a8959a4cb3d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1574561822 +0100\ncommitter GitHub <noreply@github.com> 1574561822 +0100\n\nRollup merge of #66641 - VirrageS:master, r=Centril\n\nparser: recover on nested ADTs as enum variants\n\nCloses: https://github.com/rust-lang/rust/issues/66127\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/980ccaa7339a367b4054ef8064d5b1a8004c6ccf", "html_url": "https://github.com/rust-lang/rust/commit/980ccaa7339a367b4054ef8064d5b1a8004c6ccf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/980ccaa7339a367b4054ef8064d5b1a8004c6ccf/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3ff52ce92f1dedea32c69afbbd3dabb6b457731", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3ff52ce92f1dedea32c69afbbd3dabb6b457731", "html_url": "https://github.com/rust-lang/rust/commit/a3ff52ce92f1dedea32c69afbbd3dabb6b457731"}, {"sha": "9300c3b6ad296bdf08c867be269c0a8959a4cb3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9300c3b6ad296bdf08c867be269c0a8959a4cb3d", "html_url": "https://github.com/rust-lang/rust/commit/9300c3b6ad296bdf08c867be269c0a8959a4cb3d"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "2c9d4004226c74b5c9a853850db244e2ee128add", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/980ccaa7339a367b4054ef8064d5b1a8004c6ccf/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/980ccaa7339a367b4054ef8064d5b1a8004c6ccf/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=980ccaa7339a367b4054ef8064d5b1a8004c6ccf", "patch": "@@ -9,14 +9,15 @@ use syntax::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness\n use syntax::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n use syntax::ast::{Ty, TyKind, Generics, TraitRef, EnumDef, VariantData, StructField};\n use syntax::ast::{Mac, MacDelimiter, Block, BindingMode, FnDecl, FnSig, SelfKind, Param};\n+use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::ThinVec;\n use syntax::token;\n use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::source_map::{self, respan, Span};\n use syntax::struct_span_err;\n use syntax_pos::BytePos;\n-use syntax_pos::symbol::{kw, sym};\n+use syntax_pos::symbol::{kw, sym, Symbol};\n \n use rustc_error_codes::*;\n \n@@ -1336,11 +1337,17 @@ impl<'a> Parser<'a> {\n     /// Parses the part of an enum declaration following the `{`.\n     fn parse_enum_def(&mut self, _generics: &Generics) -> PResult<'a, EnumDef> {\n         let mut variants = Vec::new();\n+        // FIXME: Consider using `parse_delim_comma_seq`.\n+        // We could then remove eating comma in `recover_nested_adt_item`.\n         while self.token != token::CloseDelim(token::Brace) {\n             let variant_attrs = self.parse_outer_attributes()?;\n             let vlo = self.token.span;\n \n             let vis = self.parse_visibility(FollowedByType::No)?;\n+            if !self.recover_nested_adt_item(kw::Enum)? {\n+                // Item already parsed, we need to skip this variant.\n+                continue\n+            }\n             let ident = self.parse_ident()?;\n \n             let struct_def = if self.check(&token::OpenDelim(token::Brace)) {\n@@ -1742,6 +1749,33 @@ impl<'a> Parser<'a> {\n         ).emit();\n     }\n \n+    /// Checks if current token is one of tokens which cannot be nested like `kw::Enum`. In case\n+    /// it is, we try to parse the item and report error about nested types.\n+    fn recover_nested_adt_item(&mut self, keyword: Symbol) -> PResult<'a, bool> {\n+        if self.token.is_keyword(kw::Enum) ||\n+            self.token.is_keyword(kw::Struct) ||\n+            self.token.is_keyword(kw::Union)\n+        {\n+            let kw_token = self.token.clone();\n+            let kw_str = pprust::token_to_string(&kw_token);\n+            let item = self.parse_item()?;\n+            self.eat(&token::Comma);\n+\n+            self.struct_span_err(\n+                kw_token.span,\n+                &format!(\"`{}` definition cannot be nested inside `{}`\", kw_str, keyword),\n+            ).span_suggestion(\n+                item.unwrap().span,\n+                &format!(\"consider creating a new `{}` definition instead of nesting\", kw_str),\n+                String::new(),\n+                Applicability::MaybeIncorrect,\n+            ).emit();\n+            // We successfully parsed the item but we must inform the caller about nested problem.\n+            return Ok(false)\n+        }\n+        Ok(true)\n+    }\n+\n     fn mk_item(&self, span: Span, ident: Ident, kind: ItemKind, vis: Visibility,\n                attrs: Vec<Attribute>) -> P<Item> {\n         P(Item {"}, {"sha": "80957b8a14c238184184a1c837cca51bd707d54c", "filename": "src/test/ui/enum/nested-enum.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/980ccaa7339a367b4054ef8064d5b1a8004c6ccf/src%2Ftest%2Fui%2Fenum%2Fnested-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/980ccaa7339a367b4054ef8064d5b1a8004c6ccf/src%2Ftest%2Fui%2Fenum%2Fnested-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fnested-enum.rs?ref=980ccaa7339a367b4054ef8064d5b1a8004c6ccf", "patch": "@@ -0,0 +1,8 @@\n+enum Foo {\n+    enum Bar { Baz }, //~ ERROR `enum` definition cannot be nested inside `enum`\n+    struct Quux { field: u8 }, //~ ERROR `struct` definition cannot be nested inside `enum`\n+    union Wibble { field: u8 }, //~ ERROR `union` definition cannot be nested inside `enum`\n+    Bat,\n+}\n+\n+fn main() { }"}, {"sha": "7d6f57e88a8269b08fe008ff1a31d98b1d5f8482", "filename": "src/test/ui/enum/nested-enum.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/980ccaa7339a367b4054ef8064d5b1a8004c6ccf/src%2Ftest%2Fui%2Fenum%2Fnested-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/980ccaa7339a367b4054ef8064d5b1a8004c6ccf/src%2Ftest%2Fui%2Fenum%2Fnested-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fnested-enum.stderr?ref=980ccaa7339a367b4054ef8064d5b1a8004c6ccf", "patch": "@@ -0,0 +1,26 @@\n+error: `enum` definition cannot be nested inside `enum`\n+  --> $DIR/nested-enum.rs:2:5\n+   |\n+LL |     enum Bar { Baz },\n+   |     ^^^^------------\n+   |     |\n+   |     help: consider creating a new `enum` definition instead of nesting\n+\n+error: `struct` definition cannot be nested inside `enum`\n+  --> $DIR/nested-enum.rs:3:5\n+   |\n+LL |     struct Quux { field: u8 },\n+   |     ^^^^^^-------------------\n+   |     |\n+   |     help: consider creating a new `struct` definition instead of nesting\n+\n+error: `union` definition cannot be nested inside `enum`\n+  --> $DIR/nested-enum.rs:4:5\n+   |\n+LL |     union Wibble { field: u8 },\n+   |     ^^^^^---------------------\n+   |     |\n+   |     help: consider creating a new `union` definition instead of nesting\n+\n+error: aborting due to 3 previous errors\n+"}]}