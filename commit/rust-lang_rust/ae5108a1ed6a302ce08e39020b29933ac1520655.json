{"sha": "ae5108a1ed6a302ce08e39020b29933ac1520655", "node_id": "C_kwDOAAsO6NoAKGFlNTEwOGExZWQ2YTMwMmNlMDhlMzkwMjBiMjk5MzNhYzE1MjA2NTU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-09-13T13:29:25Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-10-20T22:44:10Z"}, "message": "Add code comments and documentation", "tree": {"sha": "82c41becdbe2603c853457e0ddc1f966fbebfbcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82c41becdbe2603c853457e0ddc1f966fbebfbcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae5108a1ed6a302ce08e39020b29933ac1520655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae5108a1ed6a302ce08e39020b29933ac1520655", "html_url": "https://github.com/rust-lang/rust/commit/ae5108a1ed6a302ce08e39020b29933ac1520655", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae5108a1ed6a302ce08e39020b29933ac1520655/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72d6fde13080c47bc8bd14c44bc75eaa3409fec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/72d6fde13080c47bc8bd14c44bc75eaa3409fec3", "html_url": "https://github.com/rust-lang/rust/commit/72d6fde13080c47bc8bd14c44bc75eaa3409fec3"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "afa0f6fcb80f569e9b54ebf8f6b94925782baae4", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae5108a1ed6a302ce08e39020b29933ac1520655/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae5108a1ed6a302ce08e39020b29933ac1520655/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=ae5108a1ed6a302ce08e39020b29933ac1520655", "patch": "@@ -837,6 +837,8 @@ pub fn is_builtin_attr_name(name: Symbol) -> bool {\n     BUILTIN_ATTRIBUTE_MAP.get(&name).is_some()\n }\n \n+/// Whether this builtin attribute is only used in the local crate.\n+/// If so, it is not encoded in the crate metadata.\n pub fn is_builtin_only_local(name: Symbol) -> bool {\n     BUILTIN_ATTRIBUTE_MAP.get(&name).map_or(false, |attr| attr.only_local)\n }"}, {"sha": "377e3f013be1f452d28fcb1ddbd9e8c98212350b", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ae5108a1ed6a302ce08e39020b29933ac1520655/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae5108a1ed6a302ce08e39020b29933ac1520655/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ae5108a1ed6a302ce08e39020b29933ac1520655", "patch": "@@ -765,6 +765,15 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n }\n \n+/// Returns whether an attribute needs to be recorded in metadata, that is, if it's usable and\n+/// useful in downstream crates. Local-only attributes are an obvious example, but some\n+/// rustdoc-specific attributes can equally be of use while documenting the current crate only.\n+///\n+/// Removing these superfluous attributes speeds up compilation by making the metadata smaller.\n+///\n+/// Note: the `is_def_id_public` parameter is used to cache whether the given `DefId` has a public\n+/// visibility: this is a piece of data that can be computed once per defid, and not once per\n+/// attribute. Some attributes would only be usable downstream if they are public.\n #[inline]\n fn should_encode_attr(\n     tcx: TyCtxt<'_>,\n@@ -773,12 +782,17 @@ fn should_encode_attr(\n     is_def_id_public: &mut Option<bool>,\n ) -> bool {\n     if rustc_feature::is_builtin_only_local(attr.name_or_empty()) {\n+        // Attributes marked local-only don't need to be encoded for downstream crates.\n         false\n     } else if attr.doc_str().is_some() {\n+        // We keep all public doc comments because they might be \"imported\" into downstream crates\n+        // if they use `#[doc(inline)]` to copy an item's documentation into their own.\n         *is_def_id_public.get_or_insert_with(|| {\n             tcx.privacy_access_levels(()).get_effective_vis(def_id).is_some()\n         })\n     } else if attr.has_name(sym::doc) {\n+        // If this is a `doc` attribute, and it's marked `inline` (as in `#[doc(inline)]`), we can\n+        // remove it. It won't be inlinable in downstream crates.\n         attr.meta_item_list().map(|l| l.iter().any(|l| !l.has_name(sym::inline))).unwrap_or(false)\n     } else {\n         true"}]}