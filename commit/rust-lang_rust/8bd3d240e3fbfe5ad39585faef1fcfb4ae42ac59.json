{"sha": "8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZDNkMjQwZTNmYmZlNWFkMzk1ODVmYWVmMWZjZmI0YWU0MmFjNTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-09T10:18:47Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-10T06:41:30Z"}, "message": "nix syntax::errors & prefer rustc_errors over errors", "tree": {"sha": "0600a52ab918d3b176ece187a3f0b8e3ff68501c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0600a52ab918d3b176ece187a3f0b8e3ff68501c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "html_url": "https://github.com/rust-lang/rust/commit/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d8d559bbecf6272eb41f8a800e319238aa9d621", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8d559bbecf6272eb41f8a800e319238aa9d621", "html_url": "https://github.com/rust-lang/rust/commit/2d8d559bbecf6272eb41f8a800e319238aa9d621"}], "stats": {"total": 518, "additions": 242, "deletions": 276}, "files": [{"sha": "40dad13df6b216e395b4804eba591cb8e665bf60", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -3653,6 +3653,7 @@ dependencies = [\n  \"log\",\n  \"rustc\",\n  \"rustc_data_structures\",\n+ \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_hir\",\n  \"rustc_index\","}, {"sha": "21ab5c75c026d8e62d62242159ddf52dbe745360", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -26,8 +26,8 @@ rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_index = { path = \"../librustc_index\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "78895340b07c3ab8637ce8c96bf415184f534eda", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,10 +1,10 @@\n use crate::ty::{self, TyCtxt};\n-use errors::Diagnostic;\n use parking_lot::{Condvar, Mutex};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sharded::{self, Sharded};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{AtomicU32, AtomicU64, Lock, Lrc, Ordering};\n+use rustc_errors::Diagnostic;\n use rustc_index::vec::{Idx, IndexVec};\n use smallvec::SmallVec;\n use std::collections::hash_map::Entry;"}, {"sha": "c6a996f84f46161b2d145c427cc8af5848341345", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -9,8 +9,8 @@ use crate::lint::builtin::UNUSED_ATTRIBUTES;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n \n-use errors::struct_span_err;\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};"}, {"sha": "c52d4335ea184fed6496b5e1d47dfa4be0bbb5c1", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -64,15 +64,13 @@ use crate::ty::{\n     subst::{Subst, SubstsRef},\n     Region, Ty, TyCtxt, TypeFoldable,\n };\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_error_codes::*;\n+use rustc_errors::{pluralize, struct_span_err};\n+use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::Node;\n-\n-use errors::{\n-    pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticStyledString,\n-};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_error_codes::*;\n use rustc_span::{DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n use std::{cmp, fmt};"}, {"sha": "70f7987faf4ccf83d202b3092143cdec2a1ca443", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -3,7 +3,7 @@ use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::InferCtxt;\n use crate::ty::print::Print;\n use crate::ty::{self, DefIdTree, Infer, Ty, TyVar};\n-use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -151,12 +151,12 @@ pub enum TypeAnnotationNeeded {\n     E0284,\n }\n \n-impl Into<errors::DiagnosticId> for TypeAnnotationNeeded {\n-    fn into(self) -> errors::DiagnosticId {\n+impl Into<rustc_errors::DiagnosticId> for TypeAnnotationNeeded {\n+    fn into(self) -> rustc_errors::DiagnosticId {\n         match self {\n-            Self::E0282 => errors::error_code!(E0282),\n-            Self::E0283 => errors::error_code!(E0283),\n-            Self::E0284 => errors::error_code!(E0284),\n+            Self::E0282 => rustc_errors::error_code!(E0282),\n+            Self::E0283 => rustc_errors::error_code!(E0283),\n+            Self::E0284 => rustc_errors::error_code!(E0284),\n         }\n     }\n }"}, {"sha": "d6e50209f72ddf73471091869bd6d72ea42a31d6", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -5,8 +5,8 @@ use crate::infer::error_reporting::nice_region_error::util::AnonymousParamInfo;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::util::common::ErrorReported;\n \n-use errors::struct_span_err;\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when both the concerned regions are anonymous."}, {"sha": "8749d6cd34bed27cff82613a032fc75c8e18b448", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -3,7 +3,7 @@ use crate::infer::lexical_region_resolve::RegionResolutionError::*;\n use crate::infer::InferCtxt;\n use crate::ty::{self, TyCtxt};\n use crate::util::common::ErrorReported;\n-use errors::DiagnosticBuilder;\n+use rustc_errors::DiagnosticBuilder;\n use rustc_span::source_map::Span;\n \n mod different_lifetimes;"}, {"sha": "2344d408a43a5d39e752f4a72c09b97aeabf985c", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -2,7 +2,7 @@\n //! where one region is named and the other is anonymous.\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::ty;\n-use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir::{FunctionRetTy, TyKind};\n \n use rustc_error_codes::*;"}, {"sha": "7b31fe7cd7e4d208af4f8124867c07e4dc1feeae", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -7,7 +7,7 @@ use crate::ty::error::ExpectedFound;\n use crate::ty::print::{FmtPrinter, Print, RegionHighlightMode};\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, TyCtxt};\n-use errors::DiagnosticBuilder;\n+use rustc_errors::DiagnosticBuilder;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::DefId;\n "}, {"sha": "c6fc4cd3c15f7721301e49c892756df0e19f037a", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -5,7 +5,7 @@ use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::ty::{BoundRegion, FreeRegion, RegionKind};\n use crate::util::common::ErrorReported;\n-use errors::Applicability;\n+use rustc_errors::Applicability;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when the return type is a static impl Trait."}, {"sha": "6303104e39dd317e5d28aa1acf9aba320346b85d", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -3,7 +3,7 @@ use crate::infer::{self, InferCtxt, SubregionOrigin};\n use crate::middle::region;\n use crate::ty::error::TypeError;\n use crate::ty::{self, Region};\n-use errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n \n use rustc_error_codes::*;\n "}, {"sha": "f67669e367f00c9eb5f2224dff04c3968f19beb4", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -21,10 +21,10 @@ use crate::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use crate::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n use crate::ty::{ConstVid, FloatVid, IntVid, TyVid};\n \n-use errors::DiagnosticBuilder;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::unify as ut;\n+use rustc_errors::DiagnosticBuilder;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::Symbol;"}, {"sha": "a1afb1a86be44b563fe1382167d8ca1284267bf4", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -6,10 +6,10 @@ use crate::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::free_region_map::FreeRegionRelations;\n use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n use crate::ty::{self, GenericParamDefKind, Ty, TyCtxt};\n-use errors::{struct_span_err, DiagnosticBuilder};\n use rustc::session::config::nightly_options;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdMap};\n use rustc_hir::Node;"}, {"sha": "f5845dcae1288415b753f5453886bc8e422ec5e6", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -7,7 +7,7 @@\n use crate::lint::{FutureIncompatibleInfo, LateLintPass, LintArray, LintPass};\n use crate::middle::stability;\n use crate::session::Session;\n-use errors::{pluralize, Applicability, DiagnosticBuilder};\n+use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_session::declare_lint;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::Span;"}, {"sha": "bd561b41c57f54122fe27905b7dfcfca60553dc6", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -25,10 +25,10 @@ use crate::middle::privacy::AccessLevels;\n use crate::session::Session;\n use crate::ty::layout::{LayoutError, LayoutOf, TyLayout};\n use crate::ty::{self, print::Printer, subst::GenericArg, Ty, TyCtxt};\n-use errors::{struct_span_err, DiagnosticBuilder};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n use rustc_error_codes::*;\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_span::{symbol::Symbol, MultiSpan, Span, DUMMY_SP};"}, {"sha": "7b99b4af4f9ab0b10b08bd63cfe00a666b6b9657", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -4,8 +4,8 @@\n use crate::lint::{\n     EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintContext, LintPass,\n };\n-use errors::Applicability;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::Applicability;\n use rustc_hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath, Ty, TyKind};\n use rustc_session::declare_tool_lint;\n use rustc_span::symbol::{sym, Symbol};"}, {"sha": "6ca98b44bf80cb2f477ffdc324a21f5f1c334b30", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -5,9 +5,9 @@ use crate::lint::builtin;\n use crate::lint::context::{CheckLintNameResult, LintStore};\n use crate::lint::{self, Level, Lint, LintId, LintSource};\n use crate::session::Session;\n-use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir::HirId;\n use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{sym, Symbol};"}, {"sha": "a8c1f9a664f1838c836d7dceb95dd66dd2333e47", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -23,8 +23,8 @@ pub use self::LintSource::*;\n \n use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::ty::TyCtxt;\n-use errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_data_structures::sync;\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n use rustc_session::node_id::NodeMap;\n use rustc_session::{DiagnosticMessageId, Session};"}, {"sha": "42fc3e030e7bb4f88cb071a633745faf1126074b", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -14,8 +14,8 @@ use crate::middle::cstore::ExternCrate;\n use crate::middle::weak_lang_items;\n use crate::ty::{self, TyCtxt};\n \n-use errors::struct_span_err;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;"}, {"sha": "93c23e40d2e2b4efd9bc120cbbb716ccee80a803", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -7,8 +7,8 @@ use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::{self, in_derive_expansion, Lint};\n use crate::session::{DiagnosticMessageId, Session};\n use crate::ty::{self, TyCtxt};\n-use errors::DiagnosticBuilder;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_feature::GateIssue;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -18,7 +18,6 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span};\n use syntax::ast::CRATE_NODE_ID;\n use syntax::attr::{self, ConstStability, Deprecation, RustcDeprecation, Stability};\n-use syntax::errors::Applicability;\n use syntax::feature_gate::feature_err_issue;\n \n use std::num::NonZeroU32;"}, {"sha": "fdffd1251ce8f747f73ed6bc785b187741b29964", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -5,8 +5,8 @@ use crate::session::config;\n \n use crate::hir::map::Map;\n use crate::ty::TyCtxt;\n-use errors::struct_span_err;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};"}, {"sha": "ed61534d5451999702c6a159a22b4a3b52074c59", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -7,8 +7,8 @@ use crate::ty::query::TyCtxtAt;\n use crate::ty::{self, layout, Ty};\n \n use backtrace::Backtrace;\n-use errors::{struct_span_err, DiagnosticBuilder};\n use hir::GeneratorKind;\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_macros::HashStable;\n use rustc_span::symbol::Symbol;"}, {"sha": "29ea47809a077a8240a1b9113539f35a8f978881", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -38,7 +38,7 @@ pub struct OverlapResult<'tcx> {\n     pub involves_placeholder: bool,\n }\n \n-pub fn add_placeholder_note(err: &mut errors::DiagnosticBuilder<'_>) {\n+pub fn add_placeholder_note(err: &mut rustc_errors::DiagnosticBuilder<'_>) {\n     err.note(&format!(\n         \"this behavior recently changed as a result of a bug fix; \\\n          see rust-lang/rust#56105 for details\""}, {"sha": "0c9a73d78a5ebe184290243e052fa6acb2f87b95", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -21,8 +21,8 @@ use crate::ty::SubtypePredicate;\n use crate::ty::TypeckTables;\n use crate::ty::{self, AdtKind, DefIdTree, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n \n-use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, Style};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, Style};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Node;"}, {"sha": "1afe153bb1361937a7f72c4be81b61df8812bee5", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -3,8 +3,8 @@ use fmt_macros::{Parser, Piece, Position};\n use crate::ty::{self, GenericParamDefKind, TyCtxt};\n use crate::util::common::ErrorReported;\n \n-use errors::struct_span_err;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::struct_span_err;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;"}, {"sha": "34866b684de01a9369ed73182edf3c7093732a3f", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -76,7 +76,7 @@ pub struct DropckOutlivesResult<'tcx> {\n impl<'tcx> DropckOutlivesResult<'tcx> {\n     pub fn report_overflows(&self, tcx: TyCtxt<'tcx>, span: Span, ty: Ty<'tcx>) {\n         if let Some(overflow_ty) = self.overflows.iter().next() {\n-            errors::struct_span_err!(\n+            rustc_errors::struct_span_err!(\n                 tcx.sess,\n                 span,\n                 E0320,"}, {"sha": "8b66f4926e0c88b107a45345482084b8a2d79cad", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -102,7 +102,7 @@ pub enum IntercrateAmbiguityCause {\n impl IntercrateAmbiguityCause {\n     /// Emits notes when the overlap is caused by complex intercrate ambiguities.\n     /// See #23980 for details.\n-    pub fn add_intercrate_ambiguity_hint(&self, err: &mut errors::DiagnosticBuilder<'_>) {\n+    pub fn add_intercrate_ambiguity_hint(&self, err: &mut rustc_errors::DiagnosticBuilder<'_>) {\n         err.note(&self.intercrate_ambiguity_hint());\n     }\n "}, {"sha": "7b66341ef1c9642d8dc32a12b1b0663c09de175d", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -17,8 +17,8 @@ use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use crate::ty::{self, TyCtxt, TypeFoldable};\n-use errors::struct_span_err;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::struct_span_err;\n use rustc_hir::def_id::DefId;\n use rustc_span::DUMMY_SP;\n "}, {"sha": "65fd809657bd08fec282c73130cc6d86e9a017b0", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,4 +1,4 @@\n-use errors::DiagnosticBuilder;\n+use rustc_errors::DiagnosticBuilder;\n use rustc_span::Span;\n use smallvec::SmallVec;\n "}, {"sha": "1b0b5fc4d078d1d40eda532262372690d083b40c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -51,14 +51,14 @@ use rustc_hir::{HirId, Node, TraitCandidate};\n use rustc_hir::{ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet};\n \n use arena::SyncDroplessArena;\n-use errors::DiagnosticBuilder;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::ShardedHashMap;\n use rustc_data_structures::stable_hasher::{\n     hash_stable_hashmap, HashStable, StableHasher, StableVec,\n };\n use rustc_data_structures::sync::{Lock, Lrc, WorkerLocal};\n+use rustc_errors::DiagnosticBuilder;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_session::node_id::NodeMap;\n@@ -1613,10 +1613,10 @@ pub mod tls {\n \n     use crate::dep_graph::TaskDeps;\n     use crate::ty::query;\n-    use errors::Diagnostic;\n     use rustc_data_structures::sync::{self, Lock, Lrc};\n     use rustc_data_structures::thin_vec::ThinVec;\n     use rustc_data_structures::OnDrop;\n+    use rustc_errors::Diagnostic;\n     use std::mem;\n \n     #[cfg(not(parallel_compiler))]"}, {"sha": "f7612874e05b6b9b9ee5a455707eb27447cbf155", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,12 +1,10 @@\n use crate::ty::{self, BoundRegion, Region, Ty, TyCtxt};\n+use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-\n-use errors::{Applicability, DiagnosticBuilder};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n use syntax::ast;\n-use syntax::errors::pluralize;\n \n use std::borrow::Cow;\n use std::fmt;"}, {"sha": "a81fe33831c96bc6d012c1a3a1105f145cb34f04", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -7,10 +7,10 @@ use crate::session::{CrateDisambiguator, Session};\n use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use crate::ty::context::TyCtxt;\n use crate::ty::{self, Ty};\n-use errors::Diagnostic;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{HashMapExt, Lock, Lrc, Once};\n use rustc_data_structures::thin_vec::ThinVec;\n+use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};"}, {"sha": "49028107df758f1700638185252b8cbd178012ec", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -9,13 +9,13 @@ use crate::ty::query::Query;\n use crate::ty::tls;\n use crate::ty::{self, TyCtxt};\n \n-use errors::{struct_span_err, Diagnostic, DiagnosticBuilder, FatalError, Handler, Level};\n #[cfg(not(parallel_compiler))]\n use rustc_data_structures::cold_path;\n use rustc_data_structures::fx::{FxHashMap, FxHasher};\n use rustc_data_structures::sharded::Sharded;\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_data_structures::thin_vec::ThinVec;\n+use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, FatalError, Handler, Level};\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::Span;\n use std::collections::hash_map::Entry;"}, {"sha": "19b43bfd162415089209b4c3a37f5742d021504c", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -8,7 +8,7 @@ use std::time::{Duration, Instant};\n #[cfg(test)]\n mod tests;\n \n-pub use errors::ErrorReported;\n+pub use rustc_errors::ErrorReported;\n \n pub fn to_readable_str(mut val: usize) -> String {\n     let mut groups = vec![];"}, {"sha": "ca57068fb9a335bfe6bacea9447a04cb5625e41c", "filename": "src/librustc_builtin_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2FCargo.toml?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -10,10 +10,10 @@ path = \"lib.rs\"\n doctest = false\n \n [dependencies]\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n fmt_macros = { path = \"../libfmt_macros\" }\n log = \"0.4\"\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "a6b45e0567c72c23516dd6f0f387318a36b909eb", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -2,7 +2,7 @@\n //\n use State::*;\n \n-use errors::{struct_span_err, DiagnosticBuilder, PResult};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder, PResult};\n use rustc_expand::base::*;\n use rustc_parse::parser::Parser;\n use rustc_span::symbol::{kw, sym, Symbol};"}, {"sha": "c96ba516f0ced83a17ad5f7cf5b8aa3f5453bf2c", "filename": "src/librustc_builtin_macros/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fassert.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,4 +1,4 @@\n-use errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n \n use rustc_expand::base::*;\n use rustc_parse::parser::Parser;"}, {"sha": "cee62a54f0088202704eb9c3ae9b1fbbf55b94e1", "filename": "src/librustc_builtin_macros/cfg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fcfg.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,8 +1,8 @@\n-/// The compiler code necessary to support the cfg! extension, which expands to\n-/// a literal `true` or `false` based on whether the given cfg matches the\n-/// current compilation environment.\n-use errors::DiagnosticBuilder;\n+//! The compiler code necessary to support the cfg! extension, which expands to\n+//! a literal `true` or `false` based on whether the given cfg matches the\n+//! current compilation environment.\n \n+use rustc_errors::DiagnosticBuilder;\n use rustc_expand::base::{self, *};\n use rustc_span::Span;\n use syntax::ast;"}, {"sha": "72c41ad9745c1ae505cd78f5cea9155b36135c9f", "filename": "src/librustc_builtin_macros/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -2,7 +2,7 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n-use errors::struct_span_err;\n+use rustc_errors::struct_span_err;\n use rustc_expand::base::{Annotatable, DummyResult, ExtCtxt};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;"}, {"sha": "6fca74e22394465646dd5fda813fd02dbdf633e7", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -3,10 +3,8 @@ use Position::*;\n \n use fmt_macros as parse;\n \n-use errors::pluralize;\n-use errors::Applicability;\n-use errors::DiagnosticBuilder;\n-\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_expand::base::{self, *};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span};\n@@ -15,7 +13,6 @@ use syntax::ptr::P;\n use syntax::token;\n use syntax::tokenstream::TokenStream;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n "}, {"sha": "052e62ee9ffd3da3008a7edb451fcbfd9b056b43", "filename": "src/librustc_builtin_macros/global_asm.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,14 +1,14 @@\n-/// Module-level assembly support.\n-///\n-/// The macro defined here allows you to specify \"top-level\",\n-/// \"file-scoped\", or \"module-level\" assembly. These synonyms\n-/// all correspond to LLVM's module-level inline assembly instruction.\n-///\n-/// For example, `global_asm!(\"some assembly here\")` codegens to\n-/// LLVM's `module asm \"some assembly here\"`. All of LLVM's caveats\n-/// therefore apply.\n-use errors::DiagnosticBuilder;\n+//! Module-level assembly support.\n+//!\n+//! The macro defined here allows you to specify \"top-level\",\n+//! \"file-scoped\", or \"module-level\" assembly. These synonyms\n+//! all correspond to LLVM's module-level inline assembly instruction.\n+//!\n+//! For example, `global_asm!(\"some assembly here\")` codegens to\n+//! LLVM's `module asm \"some assembly here\"`. All of LLVM's caveats\n+//! therefore apply.\n \n+use rustc_errors::DiagnosticBuilder;\n use rustc_expand::base::{self, *};\n use rustc_span::source_map::respan;\n use rustc_span::Span;"}, {"sha": "ae70608505130ad2420c5ad37c16e03e7ee184ee", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -40,7 +40,7 @@ enum ProcMacro {\n struct CollectProcMacros<'a> {\n     macros: Vec<ProcMacro>,\n     in_root: bool,\n-    handler: &'a errors::Handler,\n+    handler: &'a rustc_errors::Handler,\n     is_proc_macro_crate: bool,\n     is_test_crate: bool,\n }\n@@ -53,7 +53,7 @@ pub fn inject(\n     has_proc_macro_decls: bool,\n     is_test_crate: bool,\n     num_crate_types: usize,\n-    handler: &errors::Handler,\n+    handler: &rustc_errors::Handler,\n ) -> ast::Crate {\n     let ecfg = ExpansionConfig::default(\"proc_macro\".to_string());\n     let mut cx = ExtCtxt::new(sess, ecfg, resolver);"}, {"sha": "17d180da6bfda7c1b6587902463412a1326f8b98", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -40,7 +40,7 @@ pub fn inject(\n     resolver: &mut dyn Resolver,\n     should_test: bool,\n     krate: &mut ast::Crate,\n-    span_diagnostic: &errors::Handler,\n+    span_diagnostic: &rustc_errors::Handler,\n     features: &Features,\n     panic_strategy: PanicStrategy,\n     platform_panic_strategy: PanicStrategy,\n@@ -351,7 +351,7 @@ fn is_test_case(i: &ast::Item) -> bool {\n     attr::contains_name(&i.attrs, sym::rustc_test_marker)\n }\n \n-fn get_test_runner(sd: &errors::Handler, krate: &ast::Crate) -> Option<ast::Path> {\n+fn get_test_runner(sd: &rustc_errors::Handler, krate: &ast::Crate) -> Option<ast::Path> {\n     let test_attr = attr::find_by_name(&krate.attrs, sym::test_runner)?;\n     test_attr.meta_item_list().map(|meta_list| {\n         if meta_list.len() != 1 {"}, {"sha": "37449f9402eff6b2d8955f5afa16567248bdef10", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -17,7 +17,7 @@ rustc = { path = \"../librustc\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_metadata = { path = \"../librustc_metadata\" }"}, {"sha": "a1318d3506711a1644c18a5fd569be56146f10cb", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -24,7 +24,6 @@ extern crate lazy_static;\n pub extern crate rustc_plugin_impl as plugin;\n \n //use rustc_resolve as resolve;\n-use errors::{registry::Registry, PResult};\n use rustc::lint;\n use rustc::lint::Lint;\n use rustc::middle::cstore::MetadataLoader;\n@@ -37,6 +36,7 @@ use rustc::util::common::ErrorReported;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::profiling::print_time_passes_entry;\n use rustc_data_structures::sync::SeqCst;\n+use rustc_errors::{registry::Registry, PResult};\n use rustc_feature::{find_gated_cfg, UnstableFeatures};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_interface::util::get_builtin_codegen_backend;\n@@ -1134,7 +1134,7 @@ fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n /// the panic into a `Result` instead.\n pub fn catch_fatal_errors<F: FnOnce() -> R, R>(f: F) -> Result<R, ErrorReported> {\n     catch_unwind(panic::AssertUnwindSafe(f)).map_err(|value| {\n-        if value.is::<errors::FatalErrorMarker>() {\n+        if value.is::<rustc_errors::FatalErrorMarker>() {\n             ErrorReported\n         } else {\n             panic::resume_unwind(value);\n@@ -1163,20 +1163,20 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // Separate the output with an empty line\n     eprintln!();\n \n-    let emitter = Box::new(errors::emitter::EmitterWriter::stderr(\n-        errors::ColorConfig::Auto,\n+    let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n+        rustc_errors::ColorConfig::Auto,\n         None,\n         false,\n         false,\n         None,\n         false,\n     ));\n-    let handler = errors::Handler::with_emitter(true, None, emitter);\n+    let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n \n     // a .span_bug or .bug call has already printed what\n     // it wants to print.\n-    if !info.payload().is::<errors::ExplicitBug>() {\n-        let d = errors::Diagnostic::new(errors::Level::Bug, \"unexpected panic\");\n+    if !info.payload().is::<rustc_errors::ExplicitBug>() {\n+        let d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n         handler.emit_diagnostic(&d);\n     }\n "}, {"sha": "c23846063c1dc0620c226bd68b4fbfd8618e31a6", "filename": "src/librustc_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2FCargo.toml?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -14,8 +14,8 @@ doctest = false\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n log = \"0.4\"\n rustc_span = { path = \"../librustc_span\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_parse = { path = \"../librustc_parse\" }"}, {"sha": "52ba14dbc3df06a7294da48e9252bea4b6223b20", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,9 +1,15 @@\n use crate::expand::{self, AstFragment, Invocation};\n \n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sync::{self, Lrc};\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_parse::{self, parser, DirectoryOwnership, MACRO_ARGUMENTS};\n use rustc_span::edition::Edition;\n+use rustc_span::hygiene::{AstPass, ExpnData, ExpnId, ExpnKind};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n+use rustc_span::{FileName, MultiSpan, Span, DUMMY_SP};\n+use smallvec::{smallvec, SmallVec};\n use syntax::ast::{self, Attribute, Name, NodeId, PatKind};\n use syntax::attr::{self, Deprecation, HasAttrs, Stability};\n use syntax::mut_visit::{self, MutVisitor};\n@@ -13,13 +19,6 @@ use syntax::token;\n use syntax::tokenstream::{self, TokenStream};\n use syntax::visit::Visitor;\n \n-use errors::{DiagnosticBuilder, DiagnosticId};\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::sync::{self, Lrc};\n-use rustc_span::hygiene::{AstPass, ExpnData, ExpnId, ExpnKind};\n-use rustc_span::{FileName, MultiSpan, Span, DUMMY_SP};\n-use smallvec::{smallvec, SmallVec};\n-\n use std::default::Default;\n use std::iter;\n use std::path::PathBuf;"}, {"sha": "8426391a2f389e8d73674762fccad7ee3b3d7b46", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -5,6 +5,8 @@ use crate::mbe::macro_rules::annotate_err_with_kind;\n use crate::placeholders::{placeholder, PlaceholderExpander};\n use crate::proc_macro::collect_derives;\n \n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{Applicability, FatalError, PResult};\n use rustc_feature::Features;\n use rustc_parse::configure;\n use rustc_parse::parser::Parser;\n@@ -26,10 +28,7 @@ use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::util::map_in_place::MapInPlace;\n use syntax::visit::{self, Visitor};\n \n-use errors::{Applicability, FatalError, PResult};\n use smallvec::{smallvec, SmallVec};\n-\n-use rustc_data_structures::sync::Lrc;\n use std::io::ErrorKind;\n use std::ops::DerefMut;\n use std::path::PathBuf;"}, {"sha": "4fe7c268c4f0b47e90fe4e8911b9ec89990d734c", "filename": "src/librustc_expand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Flib.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -13,7 +13,7 @@ extern crate proc_macro as pm;\n #[macro_export]\n macro_rules! panictry {\n     ($e:expr) => {{\n-        use errors::FatalError;\n+        use rustc_errors::FatalError;\n         use std::result::Result::{Err, Ok};\n         match $e {\n             Ok(e) => e,"}, {"sha": "441c1b75a7c73e094c4999054d2dc352eb6d78ae", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -85,7 +85,7 @@ use syntax::sess::ParseSess;\n use syntax::token::{self, DocComment, Nonterminal, Token};\n use syntax::tokenstream::TokenStream;\n \n-use errors::{FatalError, PResult};\n+use rustc_errors::{FatalError, PResult};\n use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};\n "}, {"sha": "d72317af9eb67a956f89bf31f3e35f1fd7df0636", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -8,6 +8,9 @@ use crate::mbe::macro_parser::{Error, Failure, Success};\n use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedParseResult};\n use crate::mbe::transcribe::transcribe;\n \n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{Applicability, DiagnosticBuilder, FatalError};\n use rustc_feature::Features;\n use rustc_parse::parser::Parser;\n use rustc_parse::Directory;\n@@ -22,17 +25,11 @@ use syntax::sess::ParseSess;\n use syntax::token::{self, NtTT, Token, TokenKind::*};\n use syntax::tokenstream::{DelimSpan, TokenStream};\n \n-use errors::{DiagnosticBuilder, FatalError};\n use log::debug;\n-\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::sync::Lrc;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n use std::{mem, slice};\n \n-use errors::Applicability;\n-\n const VALID_FRAGMENT_NAMES_MSG: &str = \"valid fragment specifiers are \\\n                                         `ident`, `block`, `stmt`, `expr`, `pat`, `ty`, `lifetime`, \\\n                                         `literal`, `path`, `meta`, `tt`, `item` and `vis`\";"}, {"sha": "104a5233c9d8c193dee36a7be0d802b837b8ddc1", "filename": "src/librustc_expand/mbe/transcribe.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -2,19 +2,17 @@ use crate::base::ExtCtxt;\n use crate::mbe;\n use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedMatch};\n \n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::pluralize;\n+use rustc_span::hygiene::{ExpnId, Transparency};\n+use rustc_span::Span;\n use syntax::ast::{Ident, Mac};\n use syntax::mut_visit::{self, MutVisitor};\n use syntax::token::{self, NtTT, Token};\n use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n \n use smallvec::{smallvec, SmallVec};\n-\n-use errors::pluralize;\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::sync::Lrc;\n-use rustc_span::hygiene::{ExpnId, Transparency};\n-use rustc_span::Span;\n-\n use std::mem;\n \n // A Marker adds the given mark to the syntax context."}, {"sha": "2ef81d80a1412062b41d95f279327425f571057f", "filename": "src/librustc_expand/parse/lexer/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,4 +1,5 @@\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{emitter::EmitterWriter, Handler};\n use rustc_parse::lexer::StringReader;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::symbol::Symbol;\n@@ -8,7 +9,6 @@ use syntax::token::{self, Token, TokenKind};\n use syntax::util::comments::is_doc_comment;\n use syntax::with_default_globals;\n \n-use errors::{emitter::EmitterWriter, Handler};\n use std::io;\n use std::path::PathBuf;\n "}, {"sha": "b79e2894126dd8d8954403c7713558f5d36270cb", "filename": "src/librustc_expand/parse/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Ftests.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,6 +1,6 @@\n use crate::tests::{matches_codepattern, string_to_stream, with_error_checking_parse};\n \n-use errors::PResult;\n+use rustc_errors::PResult;\n use rustc_parse::new_parser_from_source_str;\n use rustc_span::source_map::FilePathMapping;\n use rustc_span::symbol::{kw, sym, Symbol};"}, {"sha": "cb6249e936976e8ba5399fd256a5ba8c657a22a5", "filename": "src/librustc_expand/proc_macro.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,15 +1,14 @@\n use crate::base::{self, *};\n use crate::proc_macro_server;\n \n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{Applicability, FatalError};\n use rustc_span::symbol::sym;\n+use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::{self, ItemKind, MetaItemKind, NestedMetaItem};\n-use syntax::errors::{Applicability, FatalError};\n use syntax::token;\n use syntax::tokenstream::{self, TokenStream};\n \n-use rustc_data_structures::sync::Lrc;\n-use rustc_span::{Span, DUMMY_SP};\n-\n const EXEC_STRATEGY: pm::bridge::server::SameThread = pm::bridge::server::SameThread;\n \n pub struct BangProcMacro {"}, {"sha": "d441613ac58f4f702ab46bd9b8af281fa053de00", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,5 +1,7 @@\n use crate::base::ExtCtxt;\n \n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::Diagnostic;\n use rustc_parse::lexer::nfc_normalize;\n use rustc_parse::{nt_to_tokenstream, parse_stream_from_source_str};\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -11,9 +13,6 @@ use syntax::token;\n use syntax::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n use syntax::util::comments;\n \n-use errors::Diagnostic;\n-use rustc_data_structures::sync::Lrc;\n-\n use pm::bridge::{server, TokenTree};\n use pm::{Delimiter, Level, LineColumn, Spacing};\n use std::ops::Bound;\n@@ -265,13 +264,13 @@ impl ToInternal<TokenStream> for TokenTree<Group, Punct, Ident, Literal> {\n     }\n }\n \n-impl ToInternal<errors::Level> for Level {\n-    fn to_internal(self) -> errors::Level {\n+impl ToInternal<rustc_errors::Level> for Level {\n+    fn to_internal(self) -> rustc_errors::Level {\n         match self {\n-            Level::Error => errors::Level::Error,\n-            Level::Warning => errors::Level::Warning,\n-            Level::Note => errors::Level::Note,\n-            Level::Help => errors::Level::Help,\n+            Level::Error => rustc_errors::Level::Error,\n+            Level::Warning => rustc_errors::Level::Warning,\n+            Level::Note => rustc_errors::Level::Note,\n+            Level::Help => rustc_errors::Level::Help,\n             _ => unreachable!(\"unknown proc_macro::Level variant: {:?}\", self),\n         }\n     }"}, {"sha": "82ab74ac1500493ee5040cc30d553e08e33e9a3f", "filename": "src/librustc_expand/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_expand%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Ftests.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -6,9 +6,9 @@ use syntax::sess::ParseSess;\n use syntax::tokenstream::TokenStream;\n use syntax::with_default_globals;\n \n-use errors::emitter::EmitterWriter;\n-use errors::{Handler, PResult};\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::emitter::EmitterWriter;\n+use rustc_errors::{Handler, PResult};\n \n use std::io;\n use std::io::prelude::*;"}, {"sha": "7e23e70577975cdb9e3e90ee0625fad8ac2387ed", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -12,6 +12,7 @@ path = \"lib.rs\"\n log = \"0.4\"\n unicode-security = \"0.0.2\"\n rustc = { path = \"../librustc\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "d8ddf7435b458358e49c55b11d9284b1e364e709", "filename": "src/librustc_lint/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_lint%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_lint%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Farray_into_iter.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -2,9 +2,9 @@ use crate::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::lint::FutureIncompatibleInfo;\n use rustc::ty;\n use rustc::ty::adjustment::{Adjust, Adjustment};\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_span::symbol::sym;\n-use syntax::errors::Applicability;\n \n declare_lint! {\n     pub ARRAY_INTO_ITER,"}, {"sha": "b77dea463f96f577a98c2b95a2d01c9b5b4928e9", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -31,6 +31,7 @@ use rustc::lint::FutureIncompatibleInfo;\n use rustc::traits::misc::can_type_implement_copy;\n use rustc::ty::{self, layout::VariantIdx, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_feature::Stability;\n use rustc_feature::{deprecated_attributes, AttributeGate, AttributeTemplate, AttributeType};\n use rustc_hir as hir;\n@@ -44,7 +45,6 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{BytePos, Span};\n use syntax::ast::{self, Expr};\n use syntax::attr::{self, HasAttrs};\n-use syntax::errors::{Applicability, DiagnosticBuilder};\n use syntax::print::pprust::{self, expr_to_string};\n use syntax::ptr::P;\n use syntax::tokenstream::{TokenStream, TokenTree};"}, {"sha": "7e5ad0976989ecd765f3138205586e71867449c1", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -2,6 +2,7 @@ use lint::{EarlyContext, LateContext, LintArray, LintContext};\n use lint::{EarlyLintPass, LateLintPass, LintPass};\n use rustc::lint;\n use rustc::ty;\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::FnKind;\n@@ -11,7 +12,6 @@ use rustc_span::{symbol::Ident, BytePos, Span};\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n-use syntax::errors::Applicability;\n \n #[derive(PartialEq)]\n pub enum MethodLateContext {"}, {"sha": "9fc147f2a0c5afeebd7343f4d223ad5582bd8c49", "filename": "src/librustc_lint/redundant_semicolon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fredundant_semicolon.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,6 +1,6 @@\n use crate::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n+use rustc_errors::Applicability;\n use syntax::ast::{ExprKind, Stmt, StmtKind};\n-use syntax::errors::Applicability;\n \n declare_lint! {\n     pub REDUNDANT_SEMICOLON,"}, {"sha": "f128e25f35bf25adc23d645d944c723e04decd92", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -9,14 +9,14 @@ use rustc::ty::layout::{self, IntegerExt, LayoutOf, SizeSkeleton, VariantIdx};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::{is_range_literal, ExprKind, Node};\n use rustc_index::vec::Idx;\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n-use syntax::errors::Applicability;\n use syntax::{ast, attr};\n \n use log::debug;"}, {"sha": "d57f565d919be9341053e476160a9914359edb04", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -5,17 +5,16 @@ use rustc::lint::builtin::UNUSED_ATTRIBUTES;\n use rustc::ty::adjustment;\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::{pluralize, Applicability};\n use rustc_feature::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n-\n use rustc_span::symbol::Symbol;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{BytePos, Span};\n use syntax::ast;\n use syntax::attr;\n-use syntax::errors::{pluralize, Applicability};\n use syntax::print::pprust;\n use syntax::util::parser;\n "}, {"sha": "48767c377a94c7d40df21dad8e792bd31385504d", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -16,8 +16,8 @@ memmap = \"0.7\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }"}, {"sha": "17c2e3303cb56986bfb5befc70ad9a0785953f43", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -12,25 +12,23 @@ use rustc::session::{CrateDisambiguator, Session};\n use rustc::ty::TyCtxt;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n+use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n+use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_index::vec::IndexVec;\n-use rustc_target::spec::{PanicStrategy, TargetTriple};\n-\n-use std::path::Path;\n-use std::{cmp, fs};\n-\n-use errors::struct_span_err;\n-use log::{debug, info, log_enabled};\n-use proc_macro::bridge::client::ProcMacro;\n-use rustc_expand::base::SyntaxExtension;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::spec::{PanicStrategy, TargetTriple};\n use syntax::ast;\n use syntax::attr;\n use syntax::expand::allocator::{global_allocator_spans, AllocatorKind};\n \n-use rustc_error_codes::*;\n+use log::{debug, info, log_enabled};\n+use proc_macro::bridge::client::ProcMacro;\n+use std::path::Path;\n+use std::{cmp, fs};\n \n #[derive(Clone)]\n pub struct CStore {"}, {"sha": "4745ad02a3aa4adcb10b0db6f3a8d7362e815a93", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -215,14 +215,14 @@\n use crate::creader::Library;\n use crate::rmeta::{rustc_version, MetadataBlob, METADATA_HEADER};\n \n-use errors::{struct_span_err, DiagnosticBuilder};\n use rustc::middle::cstore::{CrateSource, MetadataLoader};\n use rustc::session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n use rustc::session::search_paths::PathKind;\n use rustc::session::{config, CrateDisambiguator, Session};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::{Target, TargetTriple};"}, {"sha": "ae67efb966c960b36250550c9c2a5929646ca361", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,9 +1,9 @@\n-use errors::struct_span_err;\n use rustc::middle::cstore::{self, NativeLibrary};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_span::source_map::Span;"}, {"sha": "dc63fa80275e1994d242d35b121bc562092f9074", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -6,13 +6,12 @@ use rustc::infer::{\n };\n use rustc::mir::{Body, ConstraintCategory, Location};\n use rustc::ty::{self, RegionVid, Ty};\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_span::symbol::kw;\n use rustc_span::Span;\n use std::collections::VecDeque;\n-use syntax::errors::Applicability;\n \n use crate::util::borrowck_errors;\n "}, {"sha": "88762dabd8a290610742fa8f3b0341e4a512f406", "filename": "src/librustc_parse/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_parse%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_parse%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Funescape_error_reporting.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -3,11 +3,10 @@\n use std::iter::once;\n use std::ops::Range;\n \n+use rustc_errors::{Applicability, Handler};\n use rustc_lexer::unescape::{EscapeError, Mode};\n use rustc_span::{BytePos, Span};\n \n-use syntax::errors::{Applicability, Handler};\n-\n pub(crate) fn emit_unescape_error(\n     handler: &Handler,\n     // interior part of the literal, without quotes"}, {"sha": "4adc6dabb9fdbaf7a403452ce0caff637b2ff129", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -12,12 +12,12 @@ path = \"lib.rs\"\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "b68687009da59e31f4fa3edc5555a89cd1f71775", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -6,10 +6,10 @@\n // This pass is supposed to perform only simple checks not requiring name resolution\n // or type checking or some other kind of complex analysis.\n \n-use errors::{struct_span_err, Applicability, FatalError};\n use rustc::lint;\n use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::{struct_span_err, Applicability, FatalError};\n use rustc_parse::validate_attr;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym};\n@@ -158,7 +158,7 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn err_handler(&self) -> &errors::Handler {\n+    fn err_handler(&self) -> &rustc_errors::Handler {\n         &self.session.diagnostic()\n     }\n \n@@ -409,7 +409,7 @@ enum GenericPosition {\n \n fn validate_generics_order<'a>(\n     sess: &Session,\n-    handler: &errors::Handler,\n+    handler: &rustc_errors::Handler,\n     generics: impl Iterator<Item = (ParamKindOrd, Option<&'a [GenericBound]>, Span, Option<String>)>,\n     pos: GenericPosition,\n     span: Span,"}, {"sha": "a2944918a4748fca3e4a696d34b6cd6e672d48f0", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -7,12 +7,12 @@\n //! errors. We still look for those primitives in the MIR const-checker to ensure nothing slips\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n-use errors::struct_span_err;\n use rustc::hir::map::Map;\n use rustc::session::config::nightly_options;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};"}, {"sha": "028d7c662758a4adf87b3dd69c2e94d8851e7fd4", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,9 +1,9 @@\n-use errors::struct_span_err;\n use rustc::hir::map as hir_map;\n use rustc::session::config::EntryFnType;\n use rustc::session::{config, Session};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_errors::struct_span_err;\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ImplItem, Item, ItemKind, TraitItem};"}, {"sha": "2c26707a518508da0e5bee0e374855f9f302f8e8", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,8 +1,8 @@\n-use errors::struct_span_err;\n use rustc::hir::map::Map;\n use rustc::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;"}, {"sha": "8ae729128978655b9268599607bc97a8960b800d", "filename": "src/librustc_passes/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -4,11 +4,11 @@\n // and `#[unstable (..)]`), but are not declared in one single location\n // (unlike lang features), which means we need to collect them instead.\n \n-use errors::struct_span_err;\n use rustc::hir::map::Map;\n use rustc::middle::lib_features::LibFeatures;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_errors::struct_span_err;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::symbol::Symbol;"}, {"sha": "0426f3fbea23600133eac6fa68623a9a4f4cf1b9", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -96,12 +96,12 @@\n use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n-use errors::Applicability;\n use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxIndexMap;\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::*;\n use rustc_hir::def_id::DefId;\n@@ -1064,7 +1064,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                             .sess\n                             .struct_span_err(expr.span, \"`break` to unknown label\")\n                             .emit();\n-                        errors::FatalError.raise()\n+                        rustc_errors::FatalError.raise()\n                     }\n                 }\n             }"}, {"sha": "5ad5795c777d48bee1c011cc0abacfd4d7b9a369", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -2,10 +2,10 @@ use Context::*;\n \n use rustc::session::Session;\n \n-use errors::{struct_span_err, Applicability};\n use rustc::hir::map::Map;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};"}, {"sha": "588386e6f8d6912e4d10e8794c4b08778e42ca04", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,7 +1,6 @@\n //! A pass that annotates every item and method with its stability level,\n //! propagating default levels lexically from parent to children ast nodes.\n \n-use errors::struct_span_err;\n use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::privacy::AccessLevels;\n@@ -11,6 +10,7 @@ use rustc::traits::misc::can_type_implement_copy;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};"}, {"sha": "af37e7b5b76ac5132918f256ba415cc0d2197a42", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -14,16 +14,16 @@ doctest = false\n bitflags = \"1.2.1\"\n log = \"0.4\"\n syntax = { path = \"../libsyntax\" }\n-rustc_expand = { path = \"../librustc_expand\" }\n arena = { path = \"../libarena\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n-rustc_span = { path = \"../librustc_span\" }\n rustc = { path = \"../librustc\" }\n rustc_ast_lowering = { path = \"../librustc_ast_lowering\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n+rustc_expand = { path = \"../librustc_expand\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n rustc_session = { path = \"../librustc_session\" }\n+rustc_span = { path = \"../librustc_span\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "291386413d647e898ac38a7210c63ed67d5486c0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -20,18 +20,14 @@ use rustc::bug;\n use rustc::hir::exports::Export;\n use rustc::middle::cstore::CrateStore;\n use rustc::ty;\n-use rustc_hir::def::{self, *};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc_metadata::creader::LoadedMacro;\n-\n use rustc_data_structures::sync::Lrc;\n-use std::cell::Cell;\n-use std::ptr;\n-\n-use errors::{struct_span_err, Applicability};\n-\n+use rustc_error_codes::*;\n+use rustc_errors::{struct_span_err, Applicability};\n use rustc_expand::base::SyntaxExtension;\n use rustc_expand::expand::AstFragment;\n+use rustc_hir::def::{self, *};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_metadata::creader::LoadedMacro;\n use rustc_span::hygiene::{ExpnId, MacroKind};\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym};\n@@ -44,8 +40,8 @@ use syntax::token::{self, Token};\n use syntax::visit::{self, Visitor};\n \n use log::debug;\n-\n-use rustc_error_codes::*;\n+use std::cell::Cell;\n+use std::ptr;\n \n type Res = def::Res<NodeId>;\n "}, {"sha": "d6f365fce7929339c20715a12ffdd514d973acb4", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -26,9 +26,9 @@\n use crate::imports::ImportDirectiveSubclass;\n use crate::Resolver;\n \n-use errors::pluralize;\n use rustc::{lint, ty};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::pluralize;\n use rustc_session::node_id::NodeMap;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use syntax::ast;"}, {"sha": "994280490938009c65a7ef6799809e2d8a7a903c", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,11 +1,11 @@\n use std::cmp::Reverse;\n \n-use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use log::debug;\n use rustc::bug;\n use rustc::session::Session;\n use rustc::ty::{self, DefIdTree};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, DefKind, NonMacroAttrKind};"}, {"sha": "813e6ac96911e9c6270017ba2b4016dd0f2dba6c", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -11,7 +11,6 @@ use crate::{BindingKey, ModuleKind, ResolutionError, Resolver, Segment};\n use crate::{CrateLint, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet, Weak};\n use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBinding};\n \n-use errors::{pluralize, struct_span_err, Applicability};\n use rustc::hir::exports::Export;\n use rustc::lint::builtin::BuiltinLintDiagnostics;\n use rustc::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n@@ -20,6 +19,7 @@ use rustc::ty;\n use rustc::{bug, span_bug};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n+use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_hir::def::{self, PartialRes};\n use rustc_hir::def_id::DefId;\n use rustc_span::hygiene::ExpnId;"}, {"sha": "defca4944bcd819fac9dbadbf9120b8fbeb36ba9", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -11,10 +11,9 @@ use crate::{path_names_to_string, BindingError, CrateLint, LexicalScopeBinding};\n use crate::{Module, ModuleOrUniformRoot, NameBindingKind, ParentScope, PathResult};\n use crate::{ResolutionError, Resolver, Segment, UseError};\n \n-use errors::DiagnosticId;\n-use log::debug;\n use rustc::{bug, lint, span_bug};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::DiagnosticId;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind, PartialRes, PerNS};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n@@ -28,6 +27,7 @@ use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit::{self, FnKind, Visitor};\n use syntax::{unwrap_or, walk_list};\n \n+use log::debug;\n use std::collections::BTreeSet;\n use std::mem::replace;\n \n@@ -306,7 +306,7 @@ impl<'a> PathSource<'a> {\n     }\n \n     fn error_code(self, has_unexpected_resolution: bool) -> DiagnosticId {\n-        use errors::error_code;\n+        use rustc_errors::error_code;\n         match (self, has_unexpected_resolution) {\n             (PathSource::Trait(_), true) => error_code!(E0404),\n             (PathSource::Trait(_), false) => error_code!(E0405),"}, {"sha": "151f3e834e5de83c59307d6630a0722b9a3db2e8", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -4,10 +4,10 @@ use crate::path_names_to_string;\n use crate::{CrateLint, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{PathResult, PathSource, Segment};\n \n-use errors::{Applicability, DiagnosticBuilder};\n-use log::debug;\n use rustc::session::config::nightly_options;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_error_codes::*;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n@@ -18,7 +18,7 @@ use rustc_span::Span;\n use syntax::ast::{self, Expr, ExprKind, Ident, NodeId, Path, Ty, TyKind};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n-use rustc_error_codes::*;\n+use log::debug;\n \n type Res = def::Res<ast::NodeId>;\n \n@@ -139,7 +139,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n \n         // Emit special messages for unresolved `Self` and `self`.\n         if is_self_type(path, ns) {\n-            err.code(errors::error_code!(E0411));\n+            err.code(rustc_errors::error_code!(E0411));\n             err.span_label(\n                 span,\n                 format!(\"`Self` is only available in impls, traits, and type definitions\"),\n@@ -149,7 +149,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n         if is_self_value(path, ns) {\n             debug!(\"smart_resolve_path_fragment: E0424, source={:?}\", source);\n \n-            err.code(errors::error_code!(E0424));\n+            err.code(rustc_errors::error_code!(E0424));\n             err.span_label(span, match source {\n                 PathSource::Pat => format!(\n                     \"`self` value is a keyword and may not be bound to variables or shadowed\","}, {"sha": "e6be9f6d328c09f93d9a88033d477493b8b80613", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -20,7 +20,6 @@ pub use rustc_hir::def::{Namespace, PerNS};\n \n use Determinacy::*;\n \n-use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc::hir::exports::ExportMap;\n use rustc::hir::map::{DefKey, Definitions};\n use rustc::lint;\n@@ -32,6 +31,7 @@ use rustc::ty::{self, DefIdTree, ResolverOutputs};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind, PartialRes};"}, {"sha": "d6143eec73c00f3e7d22d16c4443fd4754b1a37d", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -5,14 +5,14 @@\n //! used between functions, and they operate in a purely top-down\n //! way. Therefore, we break lifetime name resolution into a separate pass.\n \n-use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::resolve_lifetime::*;\n use rustc::session::Session;\n use rustc::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use rustc::{bug, span_bug};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};"}, {"sha": "84e5f56d9c208456ee22139fc78073a91a8fa71a", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -15,8 +15,8 @@ arena = { path = \"../libarena\" }\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "c6f36c66a3aa4bdff07f1550c0e3839819a6b811", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -9,7 +9,6 @@ use crate::middle::resolve_lifetime as rl;\n use crate::namespace::Namespace;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::ErrorReported;\n-use errors::{struct_span_err, Applicability, DiagnosticId};\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc::traits;\n use rustc::traits::astconv_object_safety_violations;\n@@ -19,6 +18,7 @@ use rustc::ty::subst::{self, InternalSubsts, Subst, SubstsRef};\n use rustc::ty::{self, Const, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -30,7 +30,6 @@ use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use smallvec::SmallVec;\n use syntax::ast;\n-use syntax::errors::pluralize;\n use syntax::feature_gate::feature_err;\n use syntax::util::lev_distance::find_best_match_for_name;\n "}, {"sha": "8d6b74c3015c93772984a84e1e7e0b79d73489db", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,13 +1,13 @@\n use super::method::MethodCallee;\n use super::{FnCtxt, Needs, PlaceOp};\n \n-use errors::struct_span_err;\n use rustc::infer::{InferCtxt, InferOk};\n use rustc::session::DiagnosticMessageId;\n use rustc::traits::{self, TraitEngine};\n use rustc::ty::adjustment::{Adjust, Adjustment, OverloadedDeref};\n use rustc::ty::{self, TraitRef, Ty, TyCtxt};\n use rustc::ty::{ToPredicate, TypeFoldable};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n \n use rustc_span::Span;"}, {"sha": "bff6765314ab83ea4254d6ab0aadeb93a52391be", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -3,22 +3,20 @@ use super::method::MethodCallee;\n use super::{Expectation, FnCtxt, Needs, TupleArgumentsFlag};\n use crate::type_error_struct;\n \n-use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n-use hir::def::Res;\n-use hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::{infer, traits};\n+use rustc_error_codes::*;\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_hir as hir;\n+use rustc_hir::def::Res;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n use syntax::ast::Ident;\n \n-use rustc_hir as hir;\n-\n-use rustc_error_codes::*;\n-\n /// Checks that it is legal to call methods of the trait corresponding\n /// to `trait_id` (this only cares about the trait, not the specific\n /// method that is called)."}, {"sha": "ba5e5fd8ac188dddf73300adb42993d9f649b6d0", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -34,7 +34,6 @@ use crate::hir::def_id::DefId;\n use crate::lint;\n use crate::type_error_struct;\n use crate::util::common::ErrorReported;\n-use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc::middle::lang_items;\n use rustc::session::Session;\n use rustc::traits;\n@@ -45,6 +44,7 @@ use rustc::ty::cast::{CastKind, CastTy};\n use rustc::ty::error::TypeError;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TypeAndMut, TypeFoldable};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_span::Span;\n use syntax::ast;"}, {"sha": "feab31523f2659f0128357a3df9b890dbd9d69c4", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -51,7 +51,6 @@\n //! we may want to adjust precisely when coercions occur.\n \n use crate::check::{FnCtxt, Needs};\n-use errors::{struct_span_err, DiagnosticBuilder};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::infer::{Coercion, InferOk, InferResult};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n@@ -63,6 +62,7 @@ use rustc::ty::fold::TypeFoldable;\n use rustc::ty::relate::RelateResult;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TypeAndMut};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span;"}, {"sha": "c35661ac649fc8e70e2d017c2929fcdf8bb7ac6f", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,4 +1,3 @@\n-use errors::{pluralize, struct_span_err, Applicability, DiagnosticId};\n use rustc::hir::map::Map;\n use rustc::infer::{self, InferOk};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n@@ -7,6 +6,7 @@ use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::util::ExplicitSelf;\n use rustc::ty::{self, GenericParamDefKind, TyCtxt};\n use rustc::util::common::ErrorReported;\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit;"}, {"sha": "e0f9fcc69325c1a91921f69ae40612472ae96e97", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -2,9 +2,9 @@ use crate::check::FnCtxt;\n use rustc::infer::InferOk;\n use rustc::traits::{self, ObligationCause};\n \n-use errors::{Applicability, DiagnosticBuilder};\n use rustc::ty::adjustment::AllowTwoPhase;\n use rustc::ty::{self, AssocItem, Ty};\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::{is_range_literal, print, Node};\n use rustc_span::symbol::sym;"}, {"sha": "88e7a265ebbcf52ce1d8f3db502ed6b1a0ced97a", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -2,7 +2,6 @@ use crate::check::regionck::RegionCtxt;\n use crate::hir;\n use crate::hir::def_id::DefId;\n use crate::util::common::ErrorReported;\n-use errors::struct_span_err;\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::{InferOk, SuppressRegionErrors};\n use rustc::middle::region;\n@@ -11,6 +10,7 @@ use rustc::ty::error::TypeError;\n use rustc::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc::ty::subst::{Subst, SubstsRef};\n use rustc::ty::{self, Predicate, Ty, TyCtxt};\n+use rustc_errors::struct_span_err;\n \n use rustc_span::Span;\n "}, {"sha": "35342de59a08254effd5be747367d83b03c02139", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -17,7 +17,6 @@ use crate::check::TupleArgumentsFlag::DontTupleArguments;\n use crate::type_error_struct;\n use crate::util::common::ErrorReported;\n \n-use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc::infer;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::middle::lang_items;\n@@ -28,6 +27,7 @@ use rustc::ty::Ty;\n use rustc::ty::TypeFoldable;\n use rustc::ty::{AdtKind, Visibility};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;"}, {"sha": "0441514c83c9d05e28fad6112ec13a7040e1fc99", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -3,11 +3,11 @@\n \n use crate::require_same_types;\n \n-use errors::struct_span_err;\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::abi::Abi;"}, {"sha": "711c285d17e88b1f2c6e38f0813bc807169a620d", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -12,14 +12,14 @@ pub use self::MethodError::*;\n \n use crate::check::FnCtxt;\n use crate::namespace::Namespace;\n-use errors::{Applicability, DiagnosticBuilder};\n use rustc::infer::{self, InferOk};\n use rustc::traits;\n use rustc::ty::subst::Subst;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::GenericParamDefKind;\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TypeFoldable};\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::def_id::DefId;"}, {"sha": "b2542cc27a55119831ad054554313e39a0027f3f", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -9,7 +9,6 @@ use crate::hir::def::DefKind;\n use crate::hir::def_id::DefId;\n use crate::namespace::Namespace;\n \n-use errors::struct_span_err;\n use rustc::infer::canonical::OriginalQueryValues;\n use rustc::infer::canonical::{Canonical, QueryResponse};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -29,6 +28,7 @@ use rustc::ty::{\n };\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_span::{symbol::Symbol, Span, DUMMY_SP};\n use std::cmp::max;"}, {"sha": "97f652383fb6e56a6fb68092510e92348b662697", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -4,14 +4,14 @@\n use crate::check::FnCtxt;\n use crate::middle::lang_items::FnOnceTraitLangItem;\n use crate::namespace::Namespace;\n-use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc::hir::map as hir_map;\n use rustc::hir::map::Map;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Obligation;\n use rustc::ty::print::with_crate_prefix;\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};"}, {"sha": "32225cd417f2d2494a2427f84319033b2eaa3fca", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -90,7 +90,6 @@ pub mod writeback;\n use crate::astconv::{AstConv, PathSeg};\n use crate::middle::lang_items;\n use crate::namespace::Namespace;\n-use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc::hir::map::Map;\n use rustc::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n@@ -116,6 +115,7 @@ use rustc::ty::{\n };\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LOCAL_CRATE};\n@@ -164,7 +164,7 @@ macro_rules! type_error_struct {\n         if $typ.references_error() {\n             $session.diagnostic().struct_dummy()\n         } else {\n-            errors::struct_span_err!($session, $span, $code, $($message)*)\n+            rustc_errors::struct_span_err!($session, $span, $code, $($message)*)\n         }\n     })\n }"}, {"sha": "edf9d19dea37785ad58b35e6966d3878d4739dbc", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -2,11 +2,11 @@\n \n use super::method::MethodCallee;\n use super::{FnCtxt, Needs};\n-use errors::{self, struct_span_err, Applicability};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::TyKind::{Adt, Array, Char, FnDef, Never, Ref, Str, Tuple, Uint};\n use rustc::ty::{self, Ty, TypeFoldable};\n+use rustc_errors::{self, struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_span::Span;\n use syntax::ast::Ident;\n@@ -279,7 +279,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                             lhs_expr.span,\n                                             msg,\n                                             format!(\"*{}\", lstring),\n-                                            errors::Applicability::MachineApplicable,\n+                                            rustc_errors::Applicability::MachineApplicable,\n                                         );\n                                         suggested_deref = true;\n                                     }\n@@ -482,7 +482,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// suggest calling the function. Returns wether a suggestion was given.\n     fn add_type_neq_err_label(\n         &self,\n-        err: &mut errors::DiagnosticBuilder<'_>,\n+        err: &mut rustc_errors::DiagnosticBuilder<'_>,\n         span: Span,\n         ty: Ty<'tcx>,\n         other_ty: Ty<'tcx>,\n@@ -565,7 +565,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         rhs_expr: &'tcx hir::Expr<'tcx>,\n         lhs_ty: Ty<'tcx>,\n         rhs_ty: Ty<'tcx>,\n-        err: &mut errors::DiagnosticBuilder<'_>,\n+        err: &mut rustc_errors::DiagnosticBuilder<'_>,\n         is_assign: bool,\n         op: hir::BinOp,\n     ) -> bool {"}, {"sha": "a19caefc107e7d4e1f9d298a1f148daf2108ba43", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,11 +1,11 @@\n use crate::check::FnCtxt;\n-use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc::infer;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Pattern;\n use rustc::ty::subst::GenericArg;\n use rustc::ty::{self, BindingMode, Ty, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::pat_util::EnumerateAndAdjustIterator;"}, {"sha": "df1eecdcfa8c5df8bb47ff025fa082ab16ac11a6", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,13 +1,13 @@\n use crate::check::{FnCtxt, Inherited};\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n \n-use errors::{struct_span_err, DiagnosticBuilder};\n use rustc::infer::opaque_types::may_define_opaque_type;\n use rustc::middle::lang_items;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::{self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir::def_id::DefId;\n use rustc_hir::ItemKind;\n use rustc_span::symbol::sym;"}, {"sha": "ec098c1d89679c9ec1456c359fd6c45f60e140cf", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,15 +1,13 @@\n use crate::lint;\n use rustc::ty::TyCtxt;\n-\n-use errors::Applicability;\n-use rustc_span::Span;\n-use syntax::ast;\n-\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::print::visibility_qualified;\n+use rustc_span::Span;\n+use syntax::ast;\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n     let mut used_trait_imports = DefIdSet::default();"}, {"sha": "8b3db15c02b4ecd18337b651dacb9bacb4ae26b9", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,7 +1,6 @@\n //! Check properties that are required by built-in traits and set\n //! up data structures required by type-checking/codegen.\n \n-use errors::struct_span_err;\n use rustc::infer;\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::SuppressRegionErrors;\n@@ -14,6 +13,7 @@ use rustc::ty::adjustment::CoerceUnsizedInfo;\n use rustc::ty::TypeFoldable;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::ItemKind;"}, {"sha": "673c1bd9fd83103ec99bfa9d65adc420b2eb29ee", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -7,8 +7,8 @@\n //! `tcx.inherent_impls(def_id)`). That value, however,\n //! is computed by selecting an idea from this table.\n \n-use errors::struct_span_err;\n use rustc::ty::{self, CrateInherentImpls, TyCtxt};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;"}, {"sha": "a9228c7f6bb4c86dc655dbbce9e8c2020f44de3e", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,7 +1,7 @@\n use crate::namespace::Namespace;\n-use errors::struct_span_err;\n use rustc::traits::{self, IntercrateMode};\n use rustc::ty::TyCtxt;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;"}, {"sha": "fd685e77b418ccc09543a761f73638c3f7f48b1a", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -5,14 +5,13 @@\n // done by the orphan and overlap modules. Then we build up various\n // mappings. That mapping code resides here.\n \n-use crate::hir::def_id::{DefId, LOCAL_CRATE};\n-use crate::hir::HirId;\n-use errors::struct_span_err;\n use rustc::traits;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n-\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::HirId;\n \n mod builtin;\n mod inherent_impls;"}, {"sha": "1878f9385a891696e2a63d66075f4162585a6b9a", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,9 +1,9 @@\n //! Orphan checker: every impl either implements a trait defined in this\n //! crate or pertains to a type defined in this crate.\n \n-use errors::struct_span_err;\n use rustc::traits;\n use rustc::ty::{self, TyCtxt};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n "}, {"sha": "3f4035b0998d64c4d756cb0b485db4c674859202", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,8 +1,8 @@\n //! Unsafety checker: every impl either implements a trait defined in this\n //! crate or pertains to a type defined in this crate.\n \n-use errors::struct_span_err;\n use rustc::ty::TyCtxt;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::Unsafety;"}, {"sha": "64e71cc42e0ca05bbe360e9c88ffdeca08bdddd4", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -20,7 +20,6 @@ use crate::constrained_generic_params as cgp;\n use crate::lint;\n use crate::middle::resolve_lifetime as rl;\n use crate::middle::weak_lang_items;\n-use errors::{struct_span_err, Applicability, StashKey};\n use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::mono::Linkage;\n@@ -34,6 +33,7 @@ use rustc::ty::{self, AdtKind, Const, DefIdTree, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::{ReprOptions, ToPredicate};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::{struct_span_err, Applicability, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n@@ -255,7 +255,7 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n fn bad_placeholder_type(\n     tcx: TyCtxt<'tcx>,\n     mut spans: Vec<Span>,\n-) -> errors::DiagnosticBuilder<'tcx> {\n+) -> rustc_errors::DiagnosticBuilder<'tcx> {\n     spans.sort();\n     let mut err = struct_span_err!(\n         tcx.sess,"}, {"sha": "fb87b285fa29f56e139ea257cfdcb815ed643c0a", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -9,10 +9,10 @@\n //! fixed, but for the moment it's easier to do these checks early.\n \n use crate::constrained_generic_params as cgp;\n-use errors::struct_span_err;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;"}, {"sha": "b951883ac195a2888c8b9803765d3e823e61e264", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -91,7 +91,6 @@ mod outlives;\n mod structured_errors;\n mod variance;\n \n-use errors::struct_span_err;\n use rustc::infer::InferOk;\n use rustc::lint;\n use rustc::middle;\n@@ -103,6 +102,7 @@ use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util;\n use rustc::util::common::ErrorReported;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Node;"}, {"sha": "908429c8dc48a8b215cde8db0ffd4635c412bac7", "filename": "src/librustc_typeck/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,5 +1,5 @@\n-use errors::struct_span_err;\n use rustc::ty::TyCtxt;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_span::symbol::sym;"}, {"sha": "068814723f52d758e6a578062a5e6887f90c5db1", "filename": "src/librustc_typeck/structured_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fstructured_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fstructured_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fstructured_errors.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,6 +1,6 @@\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc::session::Session;\n use rustc::ty::{Ty, TypeFoldable};\n+use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_span::Span;\n \n use rustc_error_codes::*;\n@@ -50,7 +50,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for VariadicError<'tcx> {\n     }\n \n     fn code(&self) -> DiagnosticId {\n-        errors::error_code!(E0617)\n+        rustc_errors::error_code!(E0617)\n     }\n \n     fn common(&self) -> DiagnosticBuilder<'tcx> {\n@@ -111,7 +111,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for SizedUnsizedCastError<'tcx> {\n     }\n \n     fn code(&self) -> DiagnosticId {\n-        errors::error_code!(E0607)\n+        rustc_errors::error_code!(E0607)\n     }\n \n     fn common(&self) -> DiagnosticBuilder<'tcx> {"}, {"sha": "2f41bee1819cd32dce67b698112d11c556e76aa8", "filename": "src/librustc_typeck/variance/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,5 +1,5 @@\n-use errors::struct_span_err;\n use rustc::ty::TyCtxt;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_span::symbol::sym;"}, {"sha": "5d8e27ecadb828dbe8edbd7db05671ddf777c39c", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -497,7 +497,7 @@ impl Attributes {\n         false\n     }\n \n-    pub fn from_ast(diagnostic: &::errors::Handler, attrs: &[ast::Attribute]) -> Attributes {\n+    pub fn from_ast(diagnostic: &::rustc_errors::Handler, attrs: &[ast::Attribute]) -> Attributes {\n         let mut doc_strings = vec![];\n         let mut sp = None;\n         let mut cfg = Cfg::True;"}, {"sha": "22f5d0dc2c07869c594a1e168abf46594c6dc169", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -3,7 +3,6 @@ use std::ffi::OsStr;\n use std::fmt;\n use std::path::PathBuf;\n \n-use errors;\n use getopts;\n use rustc::lint::Level;\n use rustc::session;\n@@ -566,7 +565,7 @@ impl Options {\n }\n \n /// Prints deprecation warnings for deprecated options\n-fn check_deprecated_options(matches: &getopts::Matches, diag: &errors::Handler) {\n+fn check_deprecated_options(matches: &getopts::Matches, diag: &rustc_errors::Handler) {\n     let deprecated_flags = [\"input-format\", \"output-format\", \"no-defaults\", \"passes\"];\n \n     for flag in deprecated_flags.iter() {"}, {"sha": "3cda1b3be75f1a3f6fffabf69f3c533cfd0c16b2", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -15,8 +15,8 @@ use rustc_interface::interface;\n use rustc_lint;\n use rustc_resolve as resolve;\n \n-use errors::emitter::{Emitter, EmitterWriter};\n-use errors::json::JsonEmitter;\n+use rustc_errors::emitter::{Emitter, EmitterWriter};\n+use rustc_errors::json::JsonEmitter;\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n@@ -171,7 +171,7 @@ pub fn new_handler(\n     error_format: ErrorOutputType,\n     source_map: Option<Lrc<source_map::SourceMap>>,\n     debugging_opts: &DebuggingOptions,\n-) -> errors::Handler {\n+) -> rustc_errors::Handler {\n     let emitter: Box<dyn Emitter + sync::Send> = match error_format {\n         ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n@@ -198,7 +198,10 @@ pub fn new_handler(\n         }\n     };\n \n-    errors::Handler::with_emitter_and_flags(emitter, debugging_opts.diagnostic_handler_flags(true))\n+    rustc_errors::Handler::with_emitter_and_flags(\n+        emitter,\n+        debugging_opts.diagnostic_handler_flags(true),\n+    )\n }\n \n pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOptions) {\n@@ -409,7 +412,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n \n                 let mut krate = clean::krate(&mut ctxt);\n \n-                fn report_deprecated_attr(name: &str, diag: &errors::Handler) {\n+                fn report_deprecated_attr(name: &str, diag: &rustc_errors::Handler) {\n                     let mut msg = diag.struct_warn(&format!(\n                         \"the `#![doc({})]` attribute is \\\n                                                          considered deprecated\","}, {"sha": "ecc394a2bc992082dc558992658a7fa080023bf1", "filename": "src/librustdoc/docfs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fdocfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fdocfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdocfs.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -9,8 +9,6 @@\n //! needs to read-after-write from a file, then it would be added to this\n //! abstraction.\n \n-use errors;\n-\n use std::fs;\n use std::io;\n use std::path::Path;\n@@ -42,7 +40,7 @@ impl ErrorStorage {\n     }\n \n     /// Prints all stored errors. Returns the number of printed errors.\n-    pub fn write_errors(&mut self, diag: &errors::Handler) -> usize {\n+    pub fn write_errors(&mut self, diag: &rustc_errors::Handler) -> usize {\n         let mut printed = 0;\n         // In order to drop the sender part of the channel.\n         self.sender = None;"}, {"sha": "8b5a3a2ba61313cd209faf6862537882358d1bc2", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,6 +1,5 @@\n use crate::html::markdown::{ErrorCodes, IdMap, Markdown, Playground};\n use crate::rustc_span::edition::Edition;\n-use errors;\n use rustc_feature::UnstableFeatures;\n use std::fs;\n use std::path::Path;\n@@ -26,7 +25,7 @@ impl ExternalHtml {\n         after_content: &[String],\n         md_before_content: &[String],\n         md_after_content: &[String],\n-        diag: &errors::Handler,\n+        diag: &rustc_errors::Handler,\n         id_map: &mut IdMap,\n         edition: Edition,\n         playground: &Option<Playground>,\n@@ -58,7 +57,7 @@ pub enum LoadStringError {\n \n pub fn load_string<P: AsRef<Path>>(\n     file_path: P,\n-    diag: &errors::Handler,\n+    diag: &rustc_errors::Handler,\n ) -> Result<String, LoadStringError> {\n     let file_path = file_path.as_ref();\n     let contents = match fs::read(file_path) {\n@@ -77,7 +76,7 @@ pub fn load_string<P: AsRef<Path>>(\n     }\n }\n \n-fn load_external_files(names: &[String], diag: &errors::Handler) -> Option<String> {\n+fn load_external_files(names: &[String], diag: &rustc_errors::Handler) -> Option<String> {\n     let mut out = String::new();\n     for name in names {\n         let s = match load_string(name, diag) {"}, {"sha": "2d932eb7668c41041ee767be827f74d3c91834a0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -42,7 +42,6 @@ use std::rc::Rc;\n use std::str;\n use std::sync::Arc;\n \n-use errors;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n use rustc_data_structures::flock;\n@@ -394,7 +393,7 @@ pub fn run(\n     mut krate: clean::Crate,\n     options: RenderOptions,\n     renderinfo: RenderInfo,\n-    diag: &errors::Handler,\n+    diag: &rustc_errors::Handler,\n     edition: Edition,\n ) -> Result<(), Error> {\n     // need to save a copy of the options for rendering the index page\n@@ -528,7 +527,7 @@ fn write_shared(\n     krate: &clean::Crate,\n     search_index: String,\n     options: &RenderOptions,\n-    diag: &errors::Handler,\n+    diag: &rustc_errors::Handler,\n ) -> Result<(), Error> {\n     // Write out the shared files. Note that these are shared among all rustdoc\n     // docs placed in the output directory, so this needs to be a synchronized"}, {"sha": "b15dae452ff051da09fc75608502aed03c6285aa", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -24,6 +24,7 @@ extern crate rustc;\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_error_codes;\n+extern crate rustc_errors;\n extern crate rustc_expand;\n extern crate rustc_feature;\n extern crate rustc_hir;\n@@ -42,7 +43,6 @@ extern crate syntax;\n extern crate test as testing;\n #[macro_use]\n extern crate log;\n-extern crate rustc_errors as errors;\n \n use std::default::Default;\n use std::env;\n@@ -518,6 +518,6 @@ where\n \n     match result {\n         Ok(output) => output,\n-        Err(_) => panic::resume_unwind(Box::new(errors::FatalErrorMarker)),\n+        Err(_) => panic::resume_unwind(Box::new(rustc_errors::FatalErrorMarker)),\n     }\n }"}, {"sha": "912a40722b8aff133c752ae4737a9a40b516c618", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -2,7 +2,6 @@ use std::fs::File;\n use std::io::prelude::*;\n use std::path::PathBuf;\n \n-use errors;\n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::DUMMY_SP;\n@@ -39,7 +38,7 @@ fn extract_leading_metadata(s: &str) -> (Vec<&str>, &str) {\n pub fn render(\n     input: PathBuf,\n     options: RenderOptions,\n-    diag: &errors::Handler,\n+    diag: &rustc_errors::Handler,\n     edition: Edition,\n ) -> i32 {\n     let mut output = options.output;\n@@ -128,7 +127,7 @@ pub fn render(\n }\n \n /// Runs any tests/code examples in the markdown file `input`.\n-pub fn test(mut options: Options, diag: &errors::Handler) -> i32 {\n+pub fn test(mut options: Options, diag: &rustc_errors::Handler) -> i32 {\n     let input_str = match load_string(&options.input, diag) {\n         Ok(s) => s,\n         Err(LoadStringError::ReadFail) => return 1,"}, {"sha": "0bab4423b3dfdb38449d97465df38b52620a4b07", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,5 +1,5 @@\n-use errors::{emitter::Emitter, Applicability, Diagnostic, Handler};\n use rustc_data_structures::sync::{Lock, Lrc};\n+use rustc_errors::{emitter::Emitter, Applicability, Diagnostic, Handler};\n use rustc_parse::lexer::StringReader as Lexer;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::{FileName, InnerSpan};"}, {"sha": "50d5f70f4889a37eb45960d977d1d543ee924787", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -1,6 +1,6 @@\n-use errors::Applicability;\n use rustc::lint;\n use rustc::ty;\n+use rustc_errors::Applicability;\n use rustc_expand::base::SyntaxExtensionKind;\n use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;"}, {"sha": "cc5359b53d17c9eca0f785b32f5d7f00ec71797f", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -389,8 +389,8 @@ pub fn make_test(\n     // crate already is included.\n     let result = rustc_driver::catch_fatal_errors(|| {\n         with_globals(edition, || {\n-            use errors::emitter::EmitterWriter;\n-            use errors::Handler;\n+            use rustc_errors::emitter::EmitterWriter;\n+            use rustc_errors::Handler;\n             use rustc_parse::maybe_new_parser_from_source_str;\n             use rustc_span::source_map::FilePathMapping;\n             use syntax::sess::ParseSess;"}, {"sha": "af1c50acb0a357bc7939761626ecf057f7bb8643", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -3,7 +3,7 @@ use std::fs;\n use std::hash::{Hash, Hasher};\n use std::path::Path;\n \n-use errors::Handler;\n+use rustc_errors::Handler;\n \n #[cfg(test)]\n mod tests;"}, {"sha": "7d9f715e9feb8c809ead5da130cfa946e95081b4", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -13,8 +13,8 @@ doctest = false\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n log = \"0.4\"\n scoped-tls = \"1.0\"\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_span = { path = \"../librustc_span\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }"}, {"sha": "958e4373cc0ed999dc9ab3a66a68dfa5667d7c4a", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -6,7 +6,7 @@ use crate::feature_gate::feature_err;\n use crate::print::pprust;\n use crate::sess::ParseSess;\n \n-use errors::{struct_span_err, Applicability, Handler};\n+use rustc_errors::{struct_span_err, Applicability, Handler};\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};\n use rustc_macros::HashStable_Generic;\n use rustc_span::hygiene::Transparency;"}, {"sha": "ec05dab451af85c9da71f64c2ee87e1721fe9c71", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -384,7 +384,7 @@ pub fn find_by_name(attrs: &[Attribute], name: Symbol) -> Option<&Attribute> {\n \n pub fn allow_internal_unstable<'a>(\n     attrs: &[Attribute],\n-    span_diagnostic: &'a errors::Handler,\n+    span_diagnostic: &'a rustc_errors::Handler,\n ) -> Option<impl Iterator<Item = Symbol> + 'a> {\n     find_by_name(attrs, sym::allow_internal_unstable).and_then(|attr| {\n         attr.meta_item_list()"}, {"sha": "92fbb865060080ad29a5b295a7d0480978e12c20", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -4,9 +4,9 @@ use crate::attr;\n use crate::sess::ParseSess;\n use crate::visit::{self, FnKind, Visitor};\n \n-use errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder, Handler};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_error_codes::*;\n+use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder, Handler};\n use rustc_feature::{find_feature_issue, GateIssue};\n use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n use rustc_feature::{Feature, Features, State as FeatureState, UnstableFeatures};"}, {"sha": "7ee4ca4603c9c1aba29e036c5c6a5518a85e54b6", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -18,7 +18,6 @@\n #![recursion_limit = \"256\"]\n \n use ast::AttrId;\n-pub use errors;\n use rustc_data_structures::sync::Lock;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_span::edition::{Edition, DEFAULT_EDITION};"}, {"sha": "b70e2ce0d3eb7de4aef9c090e763eea3f85830d3", "filename": "src/libsyntax/show_span.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibsyntax%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59/src%2Flibsyntax%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fshow_span.rs?ref=8bd3d240e3fbfe5ad39585faef1fcfb4ae42ac59", "patch": "@@ -29,7 +29,7 @@ impl FromStr for Mode {\n }\n \n struct ShowSpanVisitor<'a> {\n-    span_diagnostic: &'a errors::Handler,\n+    span_diagnostic: &'a rustc_errors::Handler,\n     mode: Mode,\n }\n \n@@ -60,7 +60,7 @@ impl<'a> Visitor<'a> for ShowSpanVisitor<'a> {\n     }\n }\n \n-pub fn run(span_diagnostic: &errors::Handler, mode: &str, krate: &ast::Crate) {\n+pub fn run(span_diagnostic: &rustc_errors::Handler, mode: &str, krate: &ast::Crate) {\n     let mode = match mode.parse().ok() {\n         Some(mode) => mode,\n         None => return,"}]}