{"sha": "24ef88cee96de837370ec370ed4d1f3aa3530a20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZWY4OGNlZTk2ZGU4MzczNzBlYzM3MGVkNGQxZjNhYTM1MzBhMjA=", "commit": {"author": {"name": "Youngsoo Son", "email": "ysoo.son@samsung.com", "date": "2013-05-10T11:08:56Z"}, "committer": {"name": "Youngsoo Son", "email": "ysoo.son@samsung.com", "date": "2013-05-10T11:08:56Z"}, "message": "renamed str::from_slice to str::to_owned", "tree": {"sha": "931a1c73110fa3316d51f19f618dc07167d67ea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/931a1c73110fa3316d51f19f618dc07167d67ea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24ef88cee96de837370ec370ed4d1f3aa3530a20", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24ef88cee96de837370ec370ed4d1f3aa3530a20", "html_url": "https://github.com/rust-lang/rust/commit/24ef88cee96de837370ec370ed4d1f3aa3530a20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24ef88cee96de837370ec370ed4d1f3aa3530a20/comments", "author": {"login": "sonwow", "id": 2674659, "node_id": "MDQ6VXNlcjI2NzQ2NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2674659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sonwow", "html_url": "https://github.com/sonwow", "followers_url": "https://api.github.com/users/sonwow/followers", "following_url": "https://api.github.com/users/sonwow/following{/other_user}", "gists_url": "https://api.github.com/users/sonwow/gists{/gist_id}", "starred_url": "https://api.github.com/users/sonwow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sonwow/subscriptions", "organizations_url": "https://api.github.com/users/sonwow/orgs", "repos_url": "https://api.github.com/users/sonwow/repos", "events_url": "https://api.github.com/users/sonwow/events{/privacy}", "received_events_url": "https://api.github.com/users/sonwow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sonwow", "id": 2674659, "node_id": "MDQ6VXNlcjI2NzQ2NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2674659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sonwow", "html_url": "https://github.com/sonwow", "followers_url": "https://api.github.com/users/sonwow/followers", "following_url": "https://api.github.com/users/sonwow/following{/other_user}", "gists_url": "https://api.github.com/users/sonwow/gists{/gist_id}", "starred_url": "https://api.github.com/users/sonwow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sonwow/subscriptions", "organizations_url": "https://api.github.com/users/sonwow/orgs", "repos_url": "https://api.github.com/users/sonwow/repos", "events_url": "https://api.github.com/users/sonwow/events{/privacy}", "received_events_url": "https://api.github.com/users/sonwow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7da97504943c79185548881aab88d6a0e2118fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7da97504943c79185548881aab88d6a0e2118fd", "html_url": "https://github.com/rust-lang/rust/commit/b7da97504943c79185548881aab88d6a0e2118fd"}], "stats": {"total": 132, "additions": 66, "deletions": 66}, "files": [{"sha": "7e617aa00064805a3af952dd2d98f56678a2aac9", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -91,7 +91,7 @@ pub fn is_test_ignored(config: config, testfile: &Path) -> bool {\n     return false;\n \n     fn xfail_target() -> ~str {\n-        ~\"xfail-\" + str::from_slice(os::SYSNAME)\n+        ~\"xfail-\" + str::to_owned(os::SYSNAME)\n     }\n }\n "}, {"sha": "62c2612f2dda97a6947b54ed56dbea750c7f8190", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -371,7 +371,7 @@ fn check_expected_errors(expected_errors: ~[errors::ExpectedError],\n             was_expected = true;\n         }\n \n-        if !was_expected && is_compiler_error_or_warning(str::from_slice(line)) {\n+        if !was_expected && is_compiler_error_or_warning(str::to_owned(line)) {\n             fatal_ProcRes(fmt!(\"unexpected compiler error or warning: '%s'\",\n                                line),\n                           ProcRes);\n@@ -596,7 +596,7 @@ fn make_lib_name(config: config, auxfile: &Path, testfile: &Path) -> Path {\n \n fn make_exe_name(config: config, testfile: &Path) -> Path {\n     Path(output_base_name(config, testfile).to_str() +\n-            str::from_slice(os::EXE_SUFFIX))\n+            str::to_owned(os::EXE_SUFFIX))\n }\n \n fn make_run_args(config: config, _props: TestProps, testfile: &Path) ->"}, {"sha": "4ae7d1cdabd1b00b73bef1a6d43e7ff65645fa78", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -711,7 +711,7 @@ impl<T:Reader> ReaderUtil for T {\n     fn read_lines(&self) -> ~[~str] {\n         do vec::build |push| {\n             for self.each_line |line| {\n-                push(str::from_slice(line));\n+                push(str::to_owned(line));\n             }\n         }\n     }"}, {"sha": "3a5b18e3b575396f8e9161a5368507ebf51170dc", "filename": "src/libcore/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -396,8 +396,8 @@ fn dup2(src: c_int, dst: c_int) -> c_int {\n \n \n pub fn dll_filename(base: &str) -> ~str {\n-    return str::from_slice(DLL_PREFIX) + str::from_slice(base) +\n-           str::from_slice(DLL_SUFFIX)\n+    return str::to_owned(DLL_PREFIX) + str::to_owned(base) +\n+           str::to_owned(DLL_SUFFIX)\n }\n \n "}, {"sha": "ba95d1f4b5e4a70bbbda64e9bc47358810eb2d3a", "filename": "src/libcore/path.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -477,7 +477,7 @@ impl GenericPath for PosixPath {\n     fn with_filestem(&self, s: &str) -> PosixPath {\n         match self.filetype() {\n           None => self.with_filename(s),\n-          Some(ref t) => self.with_filename(str::from_slice(s) + *t)\n+          Some(ref t) => self.with_filename(str::to_owned(s) + *t)\n         }\n     }\n \n@@ -488,7 +488,7 @@ impl GenericPath for PosixPath {\n               Some(ref s) => self.with_filename(*s)\n             }\n         } else {\n-            let t = ~\".\" + str::from_slice(t);\n+            let t = ~\".\" + str::to_owned(t);\n             match self.filestem() {\n               None => self.with_filename(t),\n               Some(ref s) => self.with_filename(*s + t)\n@@ -621,7 +621,7 @@ impl GenericPath for WindowsPath {\n               None => {\n                 host = None;\n                 device = None;\n-                rest = str::from_slice(s);\n+                rest = str::to_owned(s);\n               }\n             }\n           }\n@@ -694,7 +694,7 @@ impl GenericPath for WindowsPath {\n     fn with_filestem(&self, s: &str) -> WindowsPath {\n         match self.filetype() {\n           None => self.with_filename(s),\n-          Some(ref t) => self.with_filename(str::from_slice(s) + *t)\n+          Some(ref t) => self.with_filename(str::to_owned(s) + *t)\n         }\n     }\n \n@@ -705,7 +705,7 @@ impl GenericPath for WindowsPath {\n               Some(ref s) => self.with_filename(*s)\n             }\n         } else {\n-            let t = ~\".\" + str::from_slice(t);\n+            let t = ~\".\" + str::to_owned(t);\n             match self.filestem() {\n               None => self.with_filename(t),\n               Some(ref s) =>\n@@ -956,7 +956,7 @@ mod tests {\n     fn test_posix_paths() {\n         fn t(wp: &PosixPath, s: &str) {\n             let ss = wp.to_str();\n-            let sss = str::from_slice(s);\n+            let sss = str::to_owned(s);\n             if (ss != sss) {\n                 debug!(\"got %s\", ss);\n                 debug!(\"expected %s\", sss);\n@@ -1014,7 +1014,7 @@ mod tests {\n     fn test_normalize() {\n         fn t(wp: &PosixPath, s: &str) {\n             let ss = wp.to_str();\n-            let sss = str::from_slice(s);\n+            let sss = str::to_owned(s);\n             if (ss != sss) {\n                 debug!(\"got %s\", ss);\n                 debug!(\"expected %s\", sss);\n@@ -1077,7 +1077,7 @@ mod tests {\n     fn test_windows_paths() {\n         fn t(wp: &WindowsPath, s: &str) {\n             let ss = wp.to_str();\n-            let sss = str::from_slice(s);\n+            let sss = str::to_owned(s);\n             if (ss != sss) {\n                 debug!(\"got %s\", ss);\n                 debug!(\"expected %s\", sss);"}, {"sha": "fc0cc730dea45618cee4397be2ea00e451c0c24e", "filename": "src/libcore/str.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -78,21 +78,21 @@ pub fn from_bytes_slice<'a>(vector: &'a [u8]) -> &'a str {\n \n /// Copy a slice into a new unique str\n #[inline(always)]\n-pub fn from_slice(s: &str) -> ~str {\n+pub fn to_owned(s: &str) -> ~str {\n     unsafe { raw::slice_bytes_owned(s, 0, len(s)) }\n }\n \n impl ToStr for ~str {\n     #[inline(always)]\n-    fn to_str(&self) -> ~str { from_slice(*self) }\n+    fn to_str(&self) -> ~str { to_owned(*self) }\n }\n impl<'self> ToStr for &'self str {\n     #[inline(always)]\n-    fn to_str(&self) -> ~str { from_slice(*self) }\n+    fn to_str(&self) -> ~str { to_owned(*self) }\n }\n impl ToStr for @str {\n     #[inline(always)]\n-    fn to_str(&self) -> ~str { from_slice(*self) }\n+    fn to_str(&self) -> ~str { to_owned(*self) }\n }\n \n /**\n@@ -511,7 +511,7 @@ Section: Transforming strings\n  */\n pub fn to_bytes(s: &str) -> ~[u8] {\n     unsafe {\n-        let mut v: ~[u8] = ::cast::transmute(from_slice(s));\n+        let mut v: ~[u8] = ::cast::transmute(to_owned(s));\n         vec::raw::set_len(&mut v, len(s));\n         v\n     }\n@@ -2141,7 +2141,7 @@ pub fn as_c_str<T>(s: &str, f: &fn(*libc::c_char) -> T) -> T {\n         // NB: len includes the trailing null.\n         assert!(len > 0);\n         if unsafe { *(ptr::offset(buf,len-1)) != 0 } {\n-            as_c_str(from_slice(s), f)\n+            as_c_str(to_owned(s), f)\n         } else {\n             f(buf as *libc::c_char)\n         }\n@@ -2682,7 +2682,7 @@ impl<'self> StrSlice<'self> for &'self str {\n \n \n     #[inline]\n-    fn to_owned(&self) -> ~str { from_slice(*self) }\n+    fn to_owned(&self) -> ~str { to_owned(*self) }\n \n     #[inline]\n     fn to_managed(&self) -> @str {\n@@ -2722,7 +2722,7 @@ impl OwnedStr for ~str {\n impl Clone for ~str {\n     #[inline(always)]\n     fn clone(&self) -> ~str {\n-        from_slice(*self)\n+        to_owned(*self)\n     }\n }\n "}, {"sha": "c75dc2979f1c07a3e32a9a7aadad89192aff4f25", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -316,7 +316,7 @@ pub fn check_variants_T<T:Copy>(crate: @ast::crate,\n     if L < 100 {\n         do under(uint::min(L, 20)) |i| {\n             error!(\"Replacing... #%?\", uint::to_str(i));\n-            let fname = str::from_slice(filename.to_str());\n+            let fname = str::to_owned(filename.to_str());\n             do under(uint::min(L, 30)) |j| {\n                 let fname = fname.to_str();\n                 error!(\"With... %?\", stringifier(things[j], intr));"}, {"sha": "146b688ddc52f50569a7efdecf108d091c59819d", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -747,8 +747,8 @@ pub fn output_dll_filename(os: session::os, lm: LinkMeta) -> ~str {\n         session::os_android => (android::DLL_PREFIX, android::DLL_SUFFIX),\n         session::os_freebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n     };\n-    return str::from_slice(dll_prefix) + libname +\n-           str::from_slice(dll_suffix);\n+    return str::to_owned(dll_prefix) + libname +\n+           str::to_owned(dll_suffix);\n }\n \n // If the user wants an exe generated we need to invoke"}, {"sha": "d93a2ff59c0baae81237a0d11e7514f9cb1416ca", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -91,9 +91,9 @@ pub fn default_configuration(sess: Session, argv0: @~str, input: &input) ->\n     };\n \n     return ~[ // Target bindings.\n-         attr::mk_word_item(@str::from_slice(os::FAMILY)),\n+         attr::mk_word_item(@str::to_owned(os::FAMILY)),\n          mk(@~\"target_os\", @tos),\n-         mk(@~\"target_family\", @str::from_slice(os::FAMILY)),\n+         mk(@~\"target_family\", @str::to_owned(os::FAMILY)),\n          mk(@~\"target_arch\", @arch),\n          mk(@~\"target_endian\", @end),\n          mk(@~\"target_word_size\", @wordsz),\n@@ -648,7 +648,7 @@ pub fn build_session_options(binary: @~str,\n     let linker_args = getopts::opt_strs(matches, ~\"link-args\").flat_map( |a| {\n         let mut args = ~[];\n         for str::each_split_char(*a, ' ') |arg| {\n-            args.push(str::from_slice(arg));\n+            args.push(str::to_owned(arg));\n         }\n         args\n     });"}, {"sha": "6d712881a56529dc836179513a38099873c452eb", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -73,7 +73,7 @@ pub fn mk_filesearch(maybe_sysroot: &Option<@Path>,\n     @FileSearchImpl {\n         sysroot: sysroot,\n         addl_lib_search_paths: addl_lib_search_paths,\n-        target_triple: str::from_slice(target_triple)\n+        target_triple: str::to_owned(target_triple)\n     } as @FileSearch\n }\n \n@@ -99,7 +99,7 @@ pub fn search<T:Copy>(filesearch: @FileSearch, pick: pick<T>) -> Option<T> {\n \n pub fn relative_target_lib_path(target_triple: &str) -> Path {\n     Path(libdir()).push_many([~\"rustc\",\n-                              str::from_slice(target_triple),\n+                              str::to_owned(target_triple),\n                               libdir()])\n }\n "}, {"sha": "6605f17739c0cdd94fc6b4223eaf5bcca255aa22", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -71,7 +71,7 @@ fn libname(cx: &Context) -> (~str, ~str) {\n         os_freebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n     };\n \n-    (str::from_slice(dll_prefix), str::from_slice(dll_suffix))\n+    (str::to_owned(dll_prefix), str::to_owned(dll_suffix))\n }\n \n fn find_library_crate_aux("}, {"sha": "391f68aeedcd2da8ac07f2ff78e78165210dcd4d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -104,7 +104,7 @@ impl get_insn_ctxt for @CrateContext {\n     fn insn_ctxt(&self, s: &str) -> icx_popper {\n         debug!(\"new insn_ctxt: %s\", s);\n         if self.sess.count_llvm_insns() {\n-            self.stats.llvm_insn_ctxt.push(str::from_slice(s));\n+            self.stats.llvm_insn_ctxt.push(str::to_owned(s));\n         }\n         icx_popper(*self)\n     }"}, {"sha": "278f77135f9f52fa0a17969a0278e438908d5b94", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -129,13 +129,13 @@ fn first_sentence_(s: &str) -> ~str {\n     };\n     match idx {\n         Some(idx) if idx > 2u => {\n-            str::from_slice(str::slice(s, 0, idx - 1))\n+            str::to_owned(str::slice(s, 0, idx - 1))\n         }\n         _ => {\n             if str::ends_with(s, ~\".\") {\n-                str::from_slice(s)\n+                str::to_owned(s)\n             } else {\n-                str::from_slice(s)\n+                str::to_owned(s)\n             }\n         }\n     }"}, {"sha": "f66b56381f0f4dbd8cf1720d0b0fbb21a6d98b08", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -106,7 +106,7 @@ pub struct Opt {\n }\n \n fn mkname(nm: &str) -> Name {\n-    let unm = str::from_slice(nm);\n+    let unm = str::to_owned(nm);\n     return if nm.len() == 1u {\n             Short(str::char_at(unm, 0u))\n         } else { Long(unm) };\n@@ -441,7 +441,7 @@ pub fn opt_default(mm: &Matches, nm: &str, def: &str) -> Option<~str> {\n     let vals = opt_vals(mm, nm);\n     if vec::len::<Optval>(vals) == 0u { return None::<~str>; }\n     return match vals[0] { Val(copy s) => Some::<~str>(s),\n-                           _      => Some::<~str>(str::from_slice(def)) }\n+                           _      => Some::<~str>(str::to_owned(def)) }\n }\n \n #[deriving(Eq)]\n@@ -481,10 +481,10 @@ pub mod groups {\n                   desc: &str, hint: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup { short_name: str::from_slice(short_name),\n-                long_name: str::from_slice(long_name),\n-                hint: str::from_slice(hint),\n-                desc: str::from_slice(desc),\n+        return OptGroup { short_name: str::to_owned(short_name),\n+                long_name: str::to_owned(long_name),\n+                hint: str::to_owned(hint),\n+                desc: str::to_owned(desc),\n                 hasarg: Yes,\n                 occur: Req};\n     }\n@@ -494,10 +494,10 @@ pub mod groups {\n                   desc: &str, hint: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup {short_name: str::from_slice(short_name),\n-                long_name: str::from_slice(long_name),\n-                hint: str::from_slice(hint),\n-                desc: str::from_slice(desc),\n+        return OptGroup {short_name: str::to_owned(short_name),\n+                long_name: str::to_owned(long_name),\n+                hint: str::to_owned(hint),\n+                desc: str::to_owned(desc),\n                 hasarg: Yes,\n                 occur: Optional};\n     }\n@@ -507,10 +507,10 @@ pub mod groups {\n                    desc: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup {short_name: str::from_slice(short_name),\n-                long_name: str::from_slice(long_name),\n+        return OptGroup {short_name: str::to_owned(short_name),\n+                long_name: str::to_owned(long_name),\n                 hint: ~\"\",\n-                desc: str::from_slice(desc),\n+                desc: str::to_owned(desc),\n                 hasarg: No,\n                 occur: Optional};\n     }\n@@ -520,10 +520,10 @@ pub mod groups {\n                       desc: &str, hint: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup {short_name: str::from_slice(short_name),\n-                long_name: str::from_slice(long_name),\n-                hint: str::from_slice(hint),\n-                desc: str::from_slice(desc),\n+        return OptGroup {short_name: str::to_owned(short_name),\n+                long_name: str::to_owned(long_name),\n+                hint: str::to_owned(hint),\n+                desc: str::to_owned(desc),\n                 hasarg: Maybe,\n                 occur: Optional};\n     }\n@@ -536,10 +536,10 @@ pub mod groups {\n                     desc: &str, hint: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup {short_name: str::from_slice(short_name),\n-                long_name: str::from_slice(long_name),\n-                hint: str::from_slice(hint),\n-                desc: str::from_slice(desc),\n+        return OptGroup {short_name: str::to_owned(short_name),\n+                long_name: str::to_owned(long_name),\n+                hint: str::to_owned(hint),\n+                desc: str::to_owned(desc),\n                 hasarg: Yes,\n                 occur: Multi};\n     }\n@@ -648,7 +648,7 @@ pub mod groups {\n             row\n         });\n \n-        return str::from_slice(brief)    +\n+        return str::to_owned(brief)    +\n                ~\"\\n\\nOptions:\\n\"         +\n                str::connect(rows, ~\"\\n\") +\n                ~\"\\n\\n\";"}, {"sha": "58775c5f2e48f756fcab9b2eb1a6ddc5b9f19191", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -225,7 +225,7 @@ pub mod v4 {\n             let input_is_inaddr_none =\n                 result::get(&ip_rep_result).as_u32() == INADDR_NONE;\n \n-            let new_addr = uv_ip4_addr(str::from_slice(ip), 22);\n+            let new_addr = uv_ip4_addr(str::to_owned(ip), 22);\n             let reformatted_name = uv_ip4_name(&new_addr);\n             debug!(\"try_parse_addr: input ip: %s reparsed ip: %s\",\n                             ip, reformatted_name);\n@@ -278,7 +278,7 @@ pub mod v6 {\n     pub fn try_parse_addr(ip: &str) -> result::Result<IpAddr,ParseAddrErr> {\n         unsafe {\n             // need to figure out how to establish a parse failure..\n-            let new_addr = uv_ip6_addr(str::from_slice(ip), 22);\n+            let new_addr = uv_ip6_addr(str::to_owned(ip), 22);\n             let reparsed_name = uv_ip6_name(&new_addr);\n             debug!(\"v6::try_parse_addr ip: '%s' reparsed '%s'\",\n                             ip, reparsed_name);"}, {"sha": "e731f679221fdaabc782a4369c079220c8de154e", "filename": "src/libstd/time.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -289,7 +289,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n \n         let mut i = 0u;\n         while i < digits {\n-            let range = str::char_range_at(str::from_slice(ss), pos);\n+            let range = str::char_range_at(str::to_owned(ss), pos);\n             pos = range.next;\n \n             match range.ch {\n@@ -628,7 +628,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n         }\n     }\n \n-    do io::with_str_reader(str::from_slice(format)) |rdr| {\n+    do io::with_str_reader(str::to_owned(format)) |rdr| {\n         let mut tm = Tm {\n             tm_sec: 0_i32,\n             tm_min: 0_i32,\n@@ -840,7 +840,7 @@ priv fn do_strftime(format: &str, tm: &Tm) -> ~str {\n \n     let mut buf = ~\"\";\n \n-    do io::with_str_reader(str::from_slice(format)) |rdr| {\n+    do io::with_str_reader(str::to_owned(format)) |rdr| {\n         while !rdr.eof() {\n             match rdr.read_char() {\n                 '%' => buf += parse_type(rdr.read_char(), tm),\n@@ -1022,7 +1022,7 @@ mod tests {\n \n         fn test(s: &str, format: &str) -> bool {\n             match strptime(s, format) {\n-              Ok(ref tm) => tm.strftime(format) == str::from_slice(s),\n+              Ok(ref tm) => tm.strftime(format) == str::to_owned(s),\n               Err(copy e) => fail!(e)\n             }\n         }"}, {"sha": "b1ec9643f4e0656da374cdfc52f496d2c334af7a", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -123,7 +123,7 @@ pub mod rt {\n \n     impl<'self> ToSource for &'self str {\n         fn to_source(&self, _cx: @ext_ctxt) -> ~str {\n-            let lit = dummy_spanned(ast::lit_str(@str::from_slice(*self)));\n+            let lit = dummy_spanned(ast::lit_str(@str::to_owned(*self)));\n             pprust::lit_to_str(@lit)\n         }\n     }"}, {"sha": "884459cf069f45ae62a52a808fd062c046778973", "filename": "src/test/run-pass/struct-order-of-eval-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-1.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -12,5 +12,5 @@ struct S { f0: ~str, f1: int }\n \n pub fn main() {\n     let s = ~\"Hello, world!\";\n-    let _s = S { f0: str::from_slice(s), ..S { f0: s, f1: 23 } };\n+    let _s = S { f0: str::to_owned(s), ..S { f0: s, f1: 23 } };\n }"}, {"sha": "419c4ac3942f8c49ba670f68e49ceb33fc1a980a", "filename": "src/test/run-pass/struct-order-of-eval-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef88cee96de837370ec370ed4d1f3aa3530a20/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-2.rs?ref=24ef88cee96de837370ec370ed4d1f3aa3530a20", "patch": "@@ -12,5 +12,5 @@ struct S { f0: ~str, f1: ~str }\n \n pub fn main() {\n     let s = ~\"Hello, world!\";\n-    let _s = S { f1: str::from_slice(s), f0: s };\n+    let _s = S { f1: str::to_owned(s), f0: s };\n }"}]}