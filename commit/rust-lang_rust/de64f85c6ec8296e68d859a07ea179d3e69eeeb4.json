{"sha": "de64f85c6ec8296e68d859a07ea179d3e69eeeb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNjRmODVjNmVjODI5NmU2OGQ4NTlhMDdlYTE3OWQzZTY5ZWVlYjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-13T08:22:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-13T08:22:16Z"}, "message": "auto merge of #19671 : tbu-/rust/pr_doc_removetraitrefs, r=Gankro\n\nThis specifically means:\r\n- `Deque`\r\n- `Map`\r\n- `Set`", "tree": {"sha": "be8a6ff874eac2df1f4c86892c6d3c4f2f79f3e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be8a6ff874eac2df1f4c86892c6d3c4f2f79f3e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de64f85c6ec8296e68d859a07ea179d3e69eeeb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de64f85c6ec8296e68d859a07ea179d3e69eeeb4", "html_url": "https://github.com/rust-lang/rust/commit/de64f85c6ec8296e68d859a07ea179d3e69eeeb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de64f85c6ec8296e68d859a07ea179d3e69eeeb4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d90b91b5d2d18cd433a9e6f1944b685f8b4bb04", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d90b91b5d2d18cd433a9e6f1944b685f8b4bb04", "html_url": "https://github.com/rust-lang/rust/commit/2d90b91b5d2d18cd433a9e6f1944b685f8b4bb04"}, {"sha": "4a46f5ebde5ab6a9a219f8b99eafefb61de2286a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a46f5ebde5ab6a9a219f8b99eafefb61de2286a", "html_url": "https://github.com/rust-lang/rust/commit/4a46f5ebde5ab6a9a219f8b99eafefb61de2286a"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "d50b212c7dd9a1ffefe5fd3983b02fd5a836863b", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de64f85c6ec8296e68d859a07ea179d3e69eeeb4/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de64f85c6ec8296e68d859a07ea179d3e69eeeb4/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=de64f85c6ec8296e68d859a07ea179d3e69eeeb4", "patch": "@@ -10,7 +10,8 @@\n \n //! A doubly-linked list with owned nodes.\n //!\n-//! The `DList` allows pushing and popping elements at either end.\n+//! The `DList` allows pushing and popping elements at either end and is thus\n+//! efficiently usable as a double-ended queue.\n \n // DList is constructed like a singly-linked list over the field `next`.\n // including the last link being None; each Node owns its `next` field."}, {"sha": "d8dc1f36e056d6e4ab6d310c1cbae730745c30f3", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de64f85c6ec8296e68d859a07ea179d3e69eeeb4/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de64f85c6ec8296e68d859a07ea179d3e69eeeb4/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=de64f85c6ec8296e68d859a07ea179d3e69eeeb4", "patch": "@@ -20,7 +20,7 @@ use core::num::Int;\n // FIXME(contentions): implement union family of methods? (general design may be wrong here)\n \n #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-/// A specialized `Set` implementation to use enum types.\n+/// A specialized set implementation to use enum types.\n pub struct EnumSet<E> {\n     // We must maintain the invariant that no bits are set\n     // for which no variant exists"}, {"sha": "084b585d7b99db93ffb4a1fe773b765309cd331a", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de64f85c6ec8296e68d859a07ea179d3e69eeeb4/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de64f85c6ec8296e68d859a07ea179d3e69eeeb4/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=de64f85c6ec8296e68d859a07ea179d3e69eeeb4", "patch": "@@ -34,7 +34,7 @@ static MINIMUM_CAPACITY: uint = 2u;\n // FIXME(conventions): implement shrink_to_fit. Awkward with the current design, but it should\n // be scrapped anyway. Defer to rewrite?\n \n-/// `RingBuf` is a circular buffer.\n+/// `RingBuf` is a circular buffer, which can be used as a double-ended queue efficiently.\n pub struct RingBuf<T> {\n     // tail and head are pointers into the buffer. Tail always points\n     // to the first element that could be read, Head always points"}, {"sha": "6b185950308e74bbd21bcf3c62a622fa21d70bc7", "filename": "src/libcollections/tree/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de64f85c6ec8296e68d859a07ea179d3e69eeeb4/src%2Flibcollections%2Ftree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de64f85c6ec8296e68d859a07ea179d3e69eeeb4/src%2Flibcollections%2Ftree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fmod.rs?ref=de64f85c6ec8296e68d859a07ea179d3e69eeeb4", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n //! Maps are collections of unique keys with corresponding values, and sets are\n-//! just unique keys without a corresponding value. The `Map` and `Set` traits in\n-//! `std::container` define the basic interface.\n+//! just unique keys without a corresponding value.\n //!\n //! This crate defines the `TreeMap` and `TreeSet` types. Their keys must implement `Ord`.\n //!"}, {"sha": "3af2f3e0193a5a7251cb43b21b87882d153c9550", "filename": "src/libcollections/tree/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de64f85c6ec8296e68d859a07ea179d3e69eeeb4/src%2Flibcollections%2Ftree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de64f85c6ec8296e68d859a07ea179d3e69eeeb4/src%2Flibcollections%2Ftree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fset.rs?ref=de64f85c6ec8296e68d859a07ea179d3e69eeeb4", "patch": "@@ -23,8 +23,8 @@ use tree_map::{TreeMap, Entries, RevEntries, MoveEntries};\n // FIXME(conventions): implement bounded iterators\n // FIXME(conventions): replace rev_iter(_mut) by making iter(_mut) DoubleEnded\n \n-/// An implementation of the `Set` trait on top of the `TreeMap` container. The\n-/// only requirement is that the type of the elements contained ascribes to the\n+/// An implementation of a set on top of the `TreeMap` container. The only\n+/// requirement is that the type of the elements contained ascribes to the\n /// `Ord` trait.\n ///\n /// ## Examples"}, {"sha": "4d9191a65b695fa80946a2431bf35245462b1240", "filename": "src/libcollections/trie/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de64f85c6ec8296e68d859a07ea179d3e69eeeb4/src%2Flibcollections%2Ftrie%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de64f85c6ec8296e68d859a07ea179d3e69eeeb4/src%2Flibcollections%2Ftrie%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie%2Fmod.rs?ref=de64f85c6ec8296e68d859a07ea179d3e69eeeb4", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n //! Maps are collections of unique keys with corresponding values, and sets are\n-//! just unique keys without a corresponding value. The `Map` and `Set` traits in\n-//! `std::container` define the basic interface.\n+//! just unique keys without a corresponding value.\n //!\n //! This crate defines `TrieMap` and `TrieSet`, which require `uint` keys.\n //!"}]}