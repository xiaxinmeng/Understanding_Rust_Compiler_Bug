{"sha": "f854a29c9adcfeaa7164928ff91daab9ca9a063c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NTRhMjljOWFkY2ZlYWE3MTY0OTI4ZmY5MWRhYWI5Y2E5YTA2M2M=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-07-06T15:43:13Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-07-06T15:43:13Z"}, "message": "Make EnumVariant a GenericDef and simplify some code", "tree": {"sha": "cce758eabcbcfbb1bc1673601477a9c86580cb2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cce758eabcbcfbb1bc1673601477a9c86580cb2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f854a29c9adcfeaa7164928ff91daab9ca9a063c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f854a29c9adcfeaa7164928ff91daab9ca9a063c", "html_url": "https://github.com/rust-lang/rust/commit/f854a29c9adcfeaa7164928ff91daab9ca9a063c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f854a29c9adcfeaa7164928ff91daab9ca9a063c/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "065d3987012b138b123f0544de193f8bb560b1b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/065d3987012b138b123f0544de193f8bb560b1b5", "html_url": "https://github.com/rust-lang/rust/commit/065d3987012b138b123f0544de193f8bb560b1b5"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "521e47090d6b8e5ddd53429656d621dd597fc276", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f854a29c9adcfeaa7164928ff91daab9ca9a063c/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f854a29c9adcfeaa7164928ff91daab9ca9a063c/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=f854a29c9adcfeaa7164928ff91daab9ca9a063c", "patch": "@@ -11,8 +11,8 @@ use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     path::Path,\n     type_ref::TypeRef,\n-    AdtDef, AsName, Container, Enum, Function, HasSource, ImplBlock, Name, Struct, Trait,\n-    TypeAlias, Union,\n+    AdtDef, AsName, Container, Enum, EnumVariant, Function, HasSource, ImplBlock, Name, Struct,\n+    Trait, TypeAlias, Union,\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n@@ -50,8 +50,11 @@ pub enum GenericDef {\n     Trait(Trait),\n     TypeAlias(TypeAlias),\n     ImplBlock(ImplBlock),\n+    // enum variants cannot have generics themselves, but their parent enums\n+    // can, and this makes some code easier to write\n+    EnumVariant(EnumVariant),\n }\n-impl_froms!(GenericDef: Function, Struct, Union, Enum, Trait, TypeAlias, ImplBlock);\n+impl_froms!(GenericDef: Function, Struct, Union, Enum, Trait, TypeAlias, ImplBlock, EnumVariant);\n \n impl GenericParams {\n     pub(crate) fn generic_params_query(\n@@ -62,6 +65,7 @@ impl GenericParams {\n         let parent = match def {\n             GenericDef::Function(it) => it.container(db).map(GenericDef::from),\n             GenericDef::TypeAlias(it) => it.container(db).map(GenericDef::from),\n+            GenericDef::EnumVariant(it) => Some(it.parent_enum(db).into()),\n             GenericDef::Struct(_)\n             | GenericDef::Union(_)\n             | GenericDef::Enum(_)\n@@ -86,6 +90,7 @@ impl GenericParams {\n             }\n             GenericDef::TypeAlias(it) => generics.fill(&*it.source(db).ast, start),\n             GenericDef::ImplBlock(it) => generics.fill(&*it.source(db).ast, start),\n+            GenericDef::EnumVariant(_) => {}\n         }\n \n         Arc::new(generics)\n@@ -184,6 +189,7 @@ impl GenericDef {\n             GenericDef::Trait(inner) => inner.resolver(db),\n             GenericDef::TypeAlias(inner) => inner.resolver(db),\n             GenericDef::ImplBlock(inner) => inner.resolver(db),\n+            GenericDef::EnumVariant(inner) => inner.parent_enum(db).resolver(db),\n         }\n     }\n }"}, {"sha": "e79e5e2239901b7fcb42998f4a5e4ee4f73711c5", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f854a29c9adcfeaa7164928ff91daab9ca9a063c/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f854a29c9adcfeaa7164928ff91daab9ca9a063c/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=f854a29c9adcfeaa7164928ff91daab9ca9a063c", "patch": "@@ -849,12 +849,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn register_obligations_for_call(&mut self, callable_ty: &Ty) {\n         if let Ty::Apply(a_ty) = callable_ty {\n             if let TypeCtor::FnDef(def) = a_ty.ctor {\n-                let generic_predicates = self.db.generic_predicates(match def {\n-                    // TODO add helper function\n-                    CallableDef::Function(f) => f.into(),\n-                    CallableDef::Struct(s) => s.into(),\n-                    CallableDef::EnumVariant(_e) => unimplemented!(),\n-                });\n+                let generic_predicates = self.db.generic_predicates(def.into());\n                 for predicate in generic_predicates.iter() {\n                     let predicate = predicate.clone().subst(&a_ty.parameters);\n                     if let Some(obligation) = Obligation::from_predicate(predicate) {"}, {"sha": "b48ada760f24d8ef7f82855b3d9f9f92b97d1094", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f854a29c9adcfeaa7164928ff91daab9ca9a063c/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f854a29c9adcfeaa7164928ff91daab9ca9a063c/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=f854a29c9adcfeaa7164928ff91daab9ca9a063c", "patch": "@@ -509,3 +509,13 @@ pub enum CallableDef {\n     EnumVariant(EnumVariant),\n }\n impl_froms!(CallableDef: Function, Struct, EnumVariant);\n+\n+impl From<CallableDef> for GenericDef {\n+    fn from(def: CallableDef) -> GenericDef {\n+        match def {\n+            CallableDef::Function(f) => f.into(),\n+            CallableDef::Struct(s) => s.into(),\n+            CallableDef::EnumVariant(e) => e.into(),\n+        }\n+    }\n+}"}, {"sha": "4c3744b442524dbd2ef803db840e8a5e5a79b1f3", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f854a29c9adcfeaa7164928ff91daab9ca9a063c/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f854a29c9adcfeaa7164928ff91daab9ca9a063c/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=f854a29c9adcfeaa7164928ff91daab9ca9a063c", "patch": "@@ -428,11 +428,7 @@ pub(crate) fn struct_datum_query(\n                 CallableDef::Struct(s) => s.module(db).krate(db),\n                 CallableDef::EnumVariant(v) => v.parent_enum(db).module(db).krate(db),\n             } != Some(krate);\n-            let generic_def: GenericDef = match callable {\n-                CallableDef::Function(f) => f.into(),\n-                CallableDef::Struct(s) => s.into(),\n-                CallableDef::EnumVariant(v) => v.parent_enum(db).into(),\n-            };\n+            let generic_def: GenericDef = callable.into();\n             let generic_params = generic_def.generic_params(db);\n             let bound_vars = Substs::bound_vars(&generic_params);\n             let where_clauses = convert_where_clauses(db, generic_def, &bound_vars);"}]}