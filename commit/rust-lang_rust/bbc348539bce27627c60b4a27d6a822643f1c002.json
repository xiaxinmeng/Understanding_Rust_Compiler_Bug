{"sha": "bbc348539bce27627c60b4a27d6a822643f1c002", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYzM0ODUzOWJjZTI3NjI3YzYwYjRhMjdkNmE4MjI2NDNmMWMwMDI=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-03-16T20:21:17Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-03-17T13:20:04Z"}, "message": "Unsupported foreign non-\"C\"/\"system\"-ABI function calls are not UB", "tree": {"sha": "abf416571c7e2c970ea3225b9acc63f98de9ce85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abf416571c7e2c970ea3225b9acc63f98de9ce85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbc348539bce27627c60b4a27d6a822643f1c002", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYFICCBUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLi6oAEAxUsNf1sziHj32KUEyyWB797HBkrU\npKB2DAmQAq4+TrAA/3fGG8Bp+GiY4d9BcLKor7wqPlL7vubGxs8dspY+QooE\n=jANJ\n-----END PGP SIGNATURE-----", "payload": "tree abf416571c7e2c970ea3225b9acc63f98de9ce85\nparent 1c7d7471dae217810f48e594baca2e143a38da10\nauthor hyd-dev <yd-huang@outlook.com> 1615926077 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1615987204 +0800\n\nUnsupported foreign non-\"C\"/\"system\"-ABI function calls are not UB\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc348539bce27627c60b4a27d6a822643f1c002", "html_url": "https://github.com/rust-lang/rust/commit/bbc348539bce27627c60b4a27d6a822643f1c002", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbc348539bce27627c60b4a27d6a822643f1c002/comments", "author": null, "committer": null, "parents": [{"sha": "1c7d7471dae217810f48e594baca2e143a38da10", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7d7471dae217810f48e594baca2e143a38da10", "html_url": "https://github.com/rust-lang/rust/commit/1c7d7471dae217810f48e594baca2e143a38da10"}], "stats": {"total": 105, "additions": 88, "deletions": 17}, "files": [{"sha": "599d7268a30532911e4eae12595edabd9ae27e03", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bbc348539bce27627c60b4a27d6a822643f1c002/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc348539bce27627c60b4a27d6a822643f1c002/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=bbc348539bce27627c60b4a27d6a822643f1c002", "patch": "@@ -13,6 +13,36 @@ use crate::*;\n use super::backtrace::EvalContextExt as _;\n use helpers::{check_abi, check_arg_count};\n \n+/// This macro behaves just like `match $link_name { ... }`, but inserts a\n+/// `$crate::helpers::check_abi($abi, $exp_abi)?` call at each match arm\n+/// except the wildcard one.\n+#[macro_export]\n+macro_rules! match_with_abi_check {\n+    ($link_name:expr, $abi:expr, $exp_abi:expr, {\n+        $(|)? $($pattern:pat)|+ $(if $guard:expr)? => $shim_impl:block\n+        $($remaining:tt)+\n+    }) => {\n+        match ($link_name, $abi, $exp_abi) {\n+            ($($pattern)|+, abi, exp_abi) $(if $guard)? => {\n+                $crate::helpers::check_abi(abi, exp_abi)?;\n+                $shim_impl\n+            }\n+            (link_name, abi, exp_abi) => match_with_abi_check!(\n+                link_name,\n+                abi,\n+                exp_abi,\n+                { $($remaining)* }\n+            ),\n+        }\n+    };\n+    ($link_name:ident, $abi:ident, $exp_abi:ident, {\n+        _ => $fallback:expr $(,)?\n+    }) => ({\n+        let _ = ($link_name, $abi, $exp_abi);\n+        $fallback\n+    });\n+}\n+\n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     /// Returns the minimum alignment for the target architecture for allocations of the given size."}, {"sha": "e773c8bcf360af5bf977ae1dc81b8c06ad560579", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbc348539bce27627c60b4a27d6a822643f1c002/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc348539bce27627c60b4a27d6a822643f1c002/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=bbc348539bce27627c60b4a27d6a822643f1c002", "patch": "@@ -5,7 +5,7 @@ use rustc_target::abi::{Align, LayoutOf, Size};\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n-use helpers::{check_abi, check_arg_count};\n+use helpers::check_arg_count;\n use shims::posix::fs::EvalContextExt as _;\n use shims::posix::sync::EvalContextExt as _;\n use shims::posix::thread::EvalContextExt as _;\n@@ -22,9 +22,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n \n-        check_abi(abi, Abi::C { unwind: false })?;\n-\n-        match link_name {\n+        match_with_abi_check!(link_name, abi, Abi::C { unwind: false }, {\n             // Environment related shims\n             \"getenv\" => {\n                 let &[ref name] = check_arg_count(args)?;\n@@ -458,12 +456,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Platform-specific shims\n             _ => {\n                 match this.tcx.sess.target.os.as_str() {\n-                    \"linux\" => return shims::posix::linux::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n-                    \"macos\" => return shims::posix::macos::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n+                    \"linux\" => return shims::posix::linux::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n+                    \"macos\" => return shims::posix::macos::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n                     _ => unreachable!(),\n                 }\n             }\n-        };\n+        });\n \n         Ok(true)\n     }"}, {"sha": "f61e37284e4114cb7b3b3a64fb8030ba7f1f1fed", "filename": "src/shims/posix/linux/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbc348539bce27627c60b4a27d6a822643f1c002/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc348539bce27627c60b4a27d6a822643f1c002/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs?ref=bbc348539bce27627c60b4a27d6a822643f1c002", "patch": "@@ -1,4 +1,5 @@\n use rustc_middle::mir;\n+use rustc_target::spec::abi::Abi;\n \n use crate::*;\n use crate::helpers::check_arg_count;\n@@ -12,13 +13,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn emulate_foreign_item_by_name(\n         &mut self,\n         link_name: &str,\n+        abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n         _ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n \n-        match link_name {\n+        match_with_abi_check!(link_name, abi, Abi::C { unwind: false }, {\n             // errno\n             \"__errno_location\" => {\n                 let &[] = check_arg_count(args)?;\n@@ -189,7 +191,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n-        };\n+        });\n \n         Ok(true)\n     }"}, {"sha": "cb57c4d2f6a1451e1780f26796c4c6971bf15879", "filename": "src/shims/posix/macos/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbc348539bce27627c60b4a27d6a822643f1c002/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc348539bce27627c60b4a27d6a822643f1c002/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs?ref=bbc348539bce27627c60b4a27d6a822643f1c002", "patch": "@@ -1,4 +1,5 @@\n use rustc_middle::mir;\n+use rustc_target::spec::abi::Abi;\n \n use crate::*;\n use helpers::check_arg_count;\n@@ -10,13 +11,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn emulate_foreign_item_by_name(\n         &mut self,\n         link_name: &str,\n+        abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n         _ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n \n-        match link_name {\n+        match_with_abi_check!(link_name, abi, Abi::C { unwind: false }, {\n             // errno\n             \"__error\" => {\n                 let &[] = check_arg_count(args)?;\n@@ -83,7 +85,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let &[ref info] = check_arg_count(args)?;\n                 let result = this.mach_timebase_info(info)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n-            },\n+            }\n \n             // Access to command-line arguments\n             \"_NSGetArgc\" => {\n@@ -136,7 +138,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n-        };\n+        });\n \n         Ok(true)\n     }"}, {"sha": "9e8e6b58985ee3c9041582264873583fac4d4947", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbc348539bce27627c60b4a27d6a822643f1c002/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc348539bce27627c60b4a27d6a822643f1c002/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=bbc348539bce27627c60b4a27d6a822643f1c002", "patch": "@@ -5,7 +5,7 @@ use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n-use helpers::{check_abi, check_arg_count};\n+use helpers::check_arg_count;\n use shims::windows::sync::EvalContextExt as _;\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n@@ -20,14 +20,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n \n-        check_abi(abi, Abi::System { unwind: false })?;\n-\n         // Windows API stubs.\n         // HANDLE = isize\n         // DWORD = ULONG = u32\n         // BOOL = i32\n         // BOOLEAN = u8\n-        match link_name {\n+        match_with_abi_check!(link_name, abi, Abi::System { unwind: false }, {\n             // Environment related shims\n             \"GetEnvironmentVariableW\" => {\n                 let &[ref name, ref buf, ref size] = check_arg_count(args)?;\n@@ -340,7 +338,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n-        }\n+        });\n \n         Ok(true)\n     }"}, {"sha": "b7f4d9038ec6192699d552b0092c4ef944f70bca", "filename": "tests/compile-fail/unsupported_foreign_function.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbc348539bce27627c60b4a27d6a822643f1c002/tests%2Fcompile-fail%2Funsupported_foreign_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc348539bce27627c60b4a27d6a822643f1c002/tests%2Fcompile-fail%2Funsupported_foreign_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funsupported_foreign_function.rs?ref=bbc348539bce27627c60b4a27d6a822643f1c002", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    extern \"Rust\" {\n+        fn foo();\n+    }\n+\n+    unsafe {\n+        foo(); //~ ERROR unsupported operation: can't call foreign function: foo\n+    }\n+}"}, {"sha": "07859b311811ec71ab4e80a9199d18fae1b967f0", "filename": "tests/compile-fail/unsupported_posix_dlsym.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bbc348539bce27627c60b4a27d6a822643f1c002/tests%2Fcompile-fail%2Funsupported_posix_dlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc348539bce27627c60b4a27d6a822643f1c002/tests%2Fcompile-fail%2Funsupported_posix_dlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funsupported_posix_dlsym.rs?ref=bbc348539bce27627c60b4a27d6a822643f1c002", "patch": "@@ -0,0 +1,14 @@\n+// ignore-windows: No dlsym() on Windows\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+use std::ptr;\n+\n+fn main() {\n+    unsafe {\n+        libc::dlsym(ptr::null_mut(), b\"foo\\0\".as_ptr().cast());\n+        //~^ ERROR unsupported operation: unsupported\n+    }\n+}"}, {"sha": "757eb815920e1f03559ddf2d1f9be22eac8ec70f", "filename": "tests/compile-fail/unsupported_windows_dlsym.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bbc348539bce27627c60b4a27d6a822643f1c002/tests%2Fcompile-fail%2Funsupported_windows_dlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc348539bce27627c60b4a27d6a822643f1c002/tests%2Fcompile-fail%2Funsupported_windows_dlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funsupported_windows_dlsym.rs?ref=bbc348539bce27627c60b4a27d6a822643f1c002", "patch": "@@ -0,0 +1,18 @@\n+// ignore-linux: GetProcAddress() is not available on Linux\n+// ignore-macos: GetProcAddress() is not available on macOS\n+\n+use std::{ffi::c_void, os::raw::c_char, ptr};\n+\n+extern \"system\" {\n+    fn GetProcAddress(\n+        hModule: *mut c_void,\n+        lpProcName: *const c_char,\n+    ) -> extern \"system\" fn() -> isize;\n+}\n+\n+fn main() {\n+    unsafe {\n+        GetProcAddress(ptr::null_mut(), b\"foo\\0\".as_ptr().cast());\n+        //~^ ERROR unsupported operation: unsupported Windows dlsym: foo\n+    }\n+}"}]}