{"sha": "a9a99df0a2976f1fd0dfc146f818778e5fdd635e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YTk5ZGYwYTI5NzZmMWZkMGRmYzE0NmY4MTg3NzhlNWZkZDYzNWU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-25T20:10:48Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-28T19:37:59Z"}, "message": "Do not suggest implementing traits if present in predicates", "tree": {"sha": "3fd4a2fe8b7cc7ecc579b778190f69f9a796556a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fd4a2fe8b7cc7ecc579b778190f69f9a796556a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9a99df0a2976f1fd0dfc146f818778e5fdd635e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a99df0a2976f1fd0dfc146f818778e5fdd635e", "html_url": "https://github.com/rust-lang/rust/commit/a9a99df0a2976f1fd0dfc146f818778e5fdd635e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9a99df0a2976f1fd0dfc146f818778e5fdd635e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61bc7a346217ff7f180662d10dd34605a876901d", "url": "https://api.github.com/repos/rust-lang/rust/commits/61bc7a346217ff7f180662d10dd34605a876901d", "html_url": "https://github.com/rust-lang/rust/commit/61bc7a346217ff7f180662d10dd34605a876901d"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "44f87319ebf4fae5ff4d6d2877d33fde97e93204", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9a99df0a2976f1fd0dfc146f818778e5fdd635e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a99df0a2976f1fd0dfc146f818778e5fdd635e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=a9a99df0a2976f1fd0dfc146f818778e5fdd635e", "patch": "@@ -696,6 +696,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         item_name,\n                         source,\n                         out_of_scope_traits,\n+                        &unsatisfied_predicates,\n                     );\n                 }\n \n@@ -895,6 +896,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         item_name: ast::Ident,\n         source: SelfSource<'b>,\n         valid_out_of_scope_traits: Vec<DefId>,\n+        unsatisfied_predicates: &[(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)],\n     ) {\n         if self.suggest_valid_traits(err, valid_out_of_scope_traits) {\n             return;\n@@ -915,7 +917,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // this isn't perfect (that is, there are cases when\n                 // implementing a trait would be legal but is rejected\n                 // here).\n-                (type_is_local || info.def_id.is_local())\n+                !unsatisfied_predicates.iter().any(|(p, _)| match p {\n+                    // Hide traits if they are present in predicates as they can be fixed without\n+                    // having to implement them.\n+                    ty::Predicate::Trait(t, _) => t.def_id() != info.def_id,\n+                    ty::Predicate::Projection(p) => p.item_def_id() != info.def_id,\n+                    _ => true,\n+                }) && (type_is_local || info.def_id.is_local())\n                     && self\n                         .associated_item(info.def_id, item_name, Namespace::ValueNS)\n                         .filter(|item| {"}, {"sha": "4678642dd6d0cb9bfff87afa1879d6af72ae7b3d", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9a99df0a2976f1fd0dfc146f818778e5fdd635e/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9a99df0a2976f1fd0dfc146f818778e5fdd635e/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=a9a99df0a2976f1fd0dfc146f818778e5fdd635e", "patch": "@@ -47,9 +47,8 @@ LL |      .take()\n            `Foo: std::iter::Iterator`\n            which is required by `&mut Foo: std::iter::Iterator`\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following traits define an item `take`, perhaps you need to implement one of them:\n-           candidate #1: `std::io::Read`\n-           candidate #2: `std::iter::Iterator`\n+   = note: the following trait defines an item `take`, perhaps you need to implement it:\n+           candidate #1: `std::iter::Iterator`\n \n error[E0061]: this function takes 3 arguments but 0 arguments were supplied\n   --> $DIR/method-call-err-msg.rs:21:7"}, {"sha": "01c8e8471aac2b2242f7904646bb3838720c65ea", "filename": "src/test/ui/union/union-derive-clone.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9a99df0a2976f1fd0dfc146f818778e5fdd635e/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9a99df0a2976f1fd0dfc146f818778e5fdd635e/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr?ref=a9a99df0a2976f1fd0dfc146f818778e5fdd635e", "patch": "@@ -25,9 +25,6 @@ LL |     let w = u.clone();\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n            `CloneNoCopy: std::marker::Copy`\n            which is required by `U5<CloneNoCopy>: std::clone::Clone`\n-   = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `clone`, perhaps you need to implement it:\n-           candidate #1: `std::clone::Clone`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "286008188fcebd7538ef20190ae371dbb30c1637", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9a99df0a2976f1fd0dfc146f818778e5fdd635e/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9a99df0a2976f1fd0dfc146f818778e5fdd635e/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=a9a99df0a2976f1fd0dfc146f818778e5fdd635e", "patch": "@@ -20,9 +20,6 @@ LL | pub struct Box<T: ?Sized>(Unique<T>);\n            which is required by `std::boxed::Box<dyn Foo>: std::clone::Clone`\n            `dyn Foo: std::clone::Clone`\n            which is required by `std::boxed::Box<dyn Foo>: std::clone::Clone`\n-   = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `clone`, perhaps you need to implement it:\n-           candidate #1: `std::clone::Clone`\n \n error: aborting due to previous error\n "}]}