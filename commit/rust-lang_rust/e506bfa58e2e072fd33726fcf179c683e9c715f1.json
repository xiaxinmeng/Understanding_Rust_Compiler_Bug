{"sha": "e506bfa58e2e072fd33726fcf179c683e9c715f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MDZiZmE1OGUyZTA3MmZkMzM3MjZmY2YxNzljNjgzZTljNzE1ZjE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-10-01T11:08:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-01T11:08:32Z"}, "message": "Rollup merge of #36873 - GuillaumeGomez:e0035_e0036, r=jonathandturner\n\nUpdate E0035, E0036 and E0370 to new error format\n\nFixes #35634.\nFixes #35206.\nFixes #35207.\n\nr? @jonathandturner", "tree": {"sha": "2a9626a88df6429e7409d04e4a2df5d8707d593f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a9626a88df6429e7409d04e4a2df5d8707d593f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e506bfa58e2e072fd33726fcf179c683e9c715f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e506bfa58e2e072fd33726fcf179c683e9c715f1", "html_url": "https://github.com/rust-lang/rust/commit/e506bfa58e2e072fd33726fcf179c683e9c715f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e506bfa58e2e072fd33726fcf179c683e9c715f1/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e5837a1024fe488ca153a1ea64824250344cf1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e5837a1024fe488ca153a1ea64824250344cf1c", "html_url": "https://github.com/rust-lang/rust/commit/2e5837a1024fe488ca153a1ea64824250344cf1c"}, {"sha": "8ea426a6ceb0bee93799a4ffbec6e03c95d2c670", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea426a6ceb0bee93799a4ffbec6e03c95d2c670", "html_url": "https://github.com/rust-lang/rust/commit/8ea426a6ceb0bee93799a4ffbec6e03c95d2c670"}], "stats": {"total": 96, "additions": 72, "deletions": 24}, "files": [{"sha": "e81bca3c171839b2e67e671abeedb34716d829ab", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e506bfa58e2e072fd33726fcf179c683e9c715f1/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e506bfa58e2e072fd33726fcf179c683e9c715f1/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=e506bfa58e2e072fd33726fcf179c683e9c715f1", "patch": "@@ -312,13 +312,25 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n \n         if num_supplied_types > 0 && num_supplied_types != num_method_types {\n             if num_method_types == 0 {\n-                span_err!(self.tcx.sess, self.span, E0035,\n-                    \"does not take type parameters\");\n+                struct_span_err!(self.tcx.sess, self.span, E0035,\n+                                 \"does not take type parameters\")\n+                    .span_label(self.span, &\"called with unneeded type parameters\")\n+                    .emit();\n             } else {\n-                span_err!(self.tcx.sess, self.span, E0036,\n+                struct_span_err!(self.tcx.sess, self.span, E0036,\n                     \"incorrect number of type parameters given for this method: \\\n                      expected {}, found {}\",\n-                    num_method_types, num_supplied_types);\n+                    num_method_types, num_supplied_types)\n+                    .span_label(self.span,\n+                                &format!(\"Passed {} type argument{}, expected {}\",\n+                                         num_supplied_types,\n+                                         if num_supplied_types != 1 {\n+                                            \"s\"\n+                                         } else {\n+                                            \"\"\n+                                         },\n+                                         num_method_types))\n+                    .emit();\n             }\n             supplied_method_types = vec![self.tcx.types.err; num_method_types];\n         }"}, {"sha": "cdd7bef2c7fb92c6325194f76f297044dee47dea", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e506bfa58e2e072fd33726fcf179c683e9c715f1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e506bfa58e2e072fd33726fcf179c683e9c715f1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e506bfa58e2e072fd33726fcf179c683e9c715f1", "patch": "@@ -1164,10 +1164,12 @@ fn convert_enum_def<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         } else if let Some(disr) = repr_type.disr_incr(tcx, prev_disr) {\n             Some(disr)\n         } else {\n-            span_err!(tcx.sess, v.span, E0370,\n-                      \"enum discriminant overflowed on value after {}; \\\n-                       set explicitly via {} = {} if that is desired outcome\",\n-                      prev_disr.unwrap(), v.node.name, wrapped_disr);\n+            struct_span_err!(tcx.sess, v.span, E0370,\n+                             \"enum discriminant overflowed\")\n+                .span_label(v.span, &format!(\"overflowed on value after {}\", prev_disr.unwrap()))\n+                .note(&format!(\"explicitly set `{} = {}` if that is desired outcome\",\n+                               v.node.name, wrapped_disr))\n+                .emit();\n             None\n         }.unwrap_or(wrapped_disr);\n         prev_disr = Some(disr);"}, {"sha": "9322d21d2a88d325d5913cd989aa93eae3fe4223", "filename": "src/test/compile-fail/E0035.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e506bfa58e2e072fd33726fcf179c683e9c715f1/src%2Ftest%2Fcompile-fail%2FE0035.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e506bfa58e2e072fd33726fcf179c683e9c715f1/src%2Ftest%2Fcompile-fail%2FE0035.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0035.rs?ref=e506bfa58e2e072fd33726fcf179c683e9c715f1", "patch": "@@ -17,4 +17,5 @@ impl Test {\n fn main() {\n     let x = Test;\n     x.method::<i32>(); //~ ERROR E0035\n+                       //~| NOTE called with unneeded type parameters\n }"}, {"sha": "ecb6dac66f218f138ec68d2d1029091438669ffe", "filename": "src/test/compile-fail/E0036.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e506bfa58e2e072fd33726fcf179c683e9c715f1/src%2Ftest%2Fcompile-fail%2FE0036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e506bfa58e2e072fd33726fcf179c683e9c715f1/src%2Ftest%2Fcompile-fail%2FE0036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0036.rs?ref=e506bfa58e2e072fd33726fcf179c683e9c715f1", "patch": "@@ -20,4 +20,5 @@ fn main() {\n     let x = Test;\n     let v = &[0];\n     x.method::<i32, i32>(v); //~ ERROR E0036\n+                             //~| NOTE Passed 2 type arguments, expected 1\n }"}, {"sha": "213683b5808838f2fdd50d497fa0bbd13fbd4a9d", "filename": "src/test/compile-fail/discrim-overflow-2.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e506bfa58e2e072fd33726fcf179c683e9c715f1/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e506bfa58e2e072fd33726fcf179c683e9c715f1/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow-2.rs?ref=e506bfa58e2e072fd33726fcf179c683e9c715f1", "patch": "@@ -24,7 +24,9 @@ fn f_i8() {\n     enum A {\n         Ok = i8::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed on value after 127i8; set explicitly via OhNo = -128i8 if that is desired outcome\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 127i8\n+              //~| NOTE explicitly set `OhNo = -128i8` if that is desired outcome\n     }\n }\n \n@@ -33,7 +35,9 @@ fn f_u8() {\n     enum A {\n         Ok = u8::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed on value after 255u8; set explicitly via OhNo = 0u8 if that is desired outcome\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 255u8\n+              //~| NOTE explicitly set `OhNo = 0u8` if that is desired outcome\n     }\n }\n \n@@ -42,7 +46,9 @@ fn f_i16() {\n     enum A {\n         Ok = i16::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 32767i16\n+              //~| NOTE explicitly set `OhNo = -32768i16` if that is desired outcome\n     }\n }\n \n@@ -51,7 +57,9 @@ fn f_u16() {\n     enum A {\n         Ok = u16::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 65535u16\n+              //~| NOTE explicitly set `OhNo = 0u16` if that is desired outcome\n     }\n }\n \n@@ -60,7 +68,9 @@ fn f_i32() {\n     enum A {\n         Ok = i32::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 2147483647i32\n+              //~| NOTE explicitly set `OhNo = -2147483648i32` if that is desired outcome\n     }\n }\n \n@@ -69,7 +79,9 @@ fn f_u32() {\n     enum A {\n         Ok = u32::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 4294967295u32\n+              //~| NOTE explicitly set `OhNo = 0u32` if that is desired outcome\n     }\n }\n \n@@ -78,7 +90,9 @@ fn f_i64() {\n     enum A {\n         Ok = i64::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 9223372036854775807i64\n+              //~| NOTE explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n     }\n }\n \n@@ -87,7 +101,9 @@ fn f_u64() {\n     enum A {\n         Ok = u64::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 18446744073709551615u64\n+              //~| NOTE explicitly set `OhNo = 0u64` if that is desired outcome\n     }\n }\n "}, {"sha": "a3039b8d9573adafb1093d06efc0fb058e4f308c", "filename": "src/test/compile-fail/discrim-overflow.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e506bfa58e2e072fd33726fcf179c683e9c715f1/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e506bfa58e2e072fd33726fcf179c683e9c715f1/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow.rs?ref=e506bfa58e2e072fd33726fcf179c683e9c715f1", "patch": "@@ -22,7 +22,9 @@ fn f_i8() {\n     enum A {\n         Ok = i8::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed on value after 127i8; set explicitly via OhNo = -128i8 if that is desired outcome\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 127i8\n+              //~| NOTE explicitly set `OhNo = -128i8` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -33,7 +35,9 @@ fn f_u8() {\n     enum A {\n         Ok = u8::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed on value after 255u8; set explicitly via OhNo = 0u8 if that is desired outcome\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 255u8\n+              //~| NOTE explicitly set `OhNo = 0u8` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -44,7 +48,9 @@ fn f_i16() {\n     enum A {\n         Ok = i16::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 32767i16\n+              //~| NOTE explicitly set `OhNo = -32768i16` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -55,7 +61,9 @@ fn f_u16() {\n     enum A {\n         Ok = u16::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| overflowed on value after 65535u16\n+              //~| NOTE explicitly set `OhNo = 0u16` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -66,7 +74,9 @@ fn f_i32() {\n     enum A {\n         Ok = i32::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| overflowed on value after 2147483647i32\n+              //~| NOTE explicitly set `OhNo = -2147483648i32` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -77,7 +87,9 @@ fn f_u32() {\n     enum A {\n         Ok = u32::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| overflowed on value after 4294967295u32\n+              //~| NOTE explicitly set `OhNo = 0u32` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -88,7 +100,9 @@ fn f_i64() {\n     enum A {\n         Ok = i64::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| overflowed on value after 9223372036854775807i64\n+              //~| NOTE explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -99,7 +113,9 @@ fn f_u64() {\n     enum A {\n         Ok = u64::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| overflowed on value after 18446744073709551615u64\n+              //~| NOTE explicitly set `OhNo = 0u64` if that is desired outcome\n     }\n \n     let x = A::Ok;"}]}