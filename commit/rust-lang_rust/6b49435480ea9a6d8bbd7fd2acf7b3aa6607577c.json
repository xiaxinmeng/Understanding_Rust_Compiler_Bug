{"sha": "6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "node_id": "C_kwDOAAsO6NoAKDZiNDk0MzU0ODBlYTlhNmQ4YmJkN2ZkMmFjZjdiM2FhNjYwNzU3N2M", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-17T04:25:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-17T04:25:22Z"}, "message": "Rollup merge of #106829 - compiler-errors:more-alias-combine, r=spastorino\n\nUnify `Opaque`/`Projection` handling in region outlives code\n\nThey share basically identical paths in most places which are even easier to unify now that they're both `ty::Alias`\n\nr? types", "tree": {"sha": "9e80287289ea035cddeb72cbd04c1dbb35c1d912", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e80287289ea035cddeb72cbd04c1dbb35c1d912"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjxiMyCRBK7hj4Ov3rIwAACMsIAEIuI9UU1gARDnXgBy9We9Wj\nLG7ArpKIRpsCwufxmu6g+BMavuuyo4dxydkPDQTgGr5QmGgdz42KjCasT84K4Xj3\nsRLinsXObp1fHbXrUsgIHjTLYCXDYN7HrMU8gE94foF2VIHdbDr80gv3g+8IEytX\n09zuJSBpM4t20oO0Qmpp4HA8gQoPDVX39ikJCAr7Ca5/WJI0mylXeuYLR9+5Wda5\ns7KAlzvPqisiTsCZeEZj/x0DveEVj5vjkTpDdoaiqKwbgJ4D30dGisliIhEZWnTp\nEgfZX3z+MMff5JwjOcriZiX49hl3LWJ3t6ctcAx5dZK25twn+2u7Zl+VMsUxdbM=\n=7/Gh\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e80287289ea035cddeb72cbd04c1dbb35c1d912\nparent 9cda9e0ab62467199e09644258618343bd40d52e\nparent 1ea6862db3830c86355d9179a4cee9410711f68f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673929522 +0100\ncommitter GitHub <noreply@github.com> 1673929522 +0100\n\nRollup merge of #106829 - compiler-errors:more-alias-combine, r=spastorino\n\nUnify `Opaque`/`Projection` handling in region outlives code\n\nThey share basically identical paths in most places which are even easier to unify now that they're both `ty::Alias`\n\nr? types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "html_url": "https://github.com/rust-lang/rust/commit/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cda9e0ab62467199e09644258618343bd40d52e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cda9e0ab62467199e09644258618343bd40d52e", "html_url": "https://github.com/rust-lang/rust/commit/9cda9e0ab62467199e09644258618343bd40d52e"}, {"sha": "1ea6862db3830c86355d9179a4cee9410711f68f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea6862db3830c86355d9179a4cee9410711f68f", "html_url": "https://github.com/rust-lang/rust/commit/1ea6862db3830c86355d9179a4cee9410711f68f"}], "stats": {"total": 168, "additions": 54, "deletions": 114}, "files": [{"sha": "4976456afcb3195b81880eb5005f3dbc674fa590", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "patch": "@@ -359,14 +359,9 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n                         .insert(ty::OutlivesPredicate(GenericKind::Param(param_b), r_a));\n                 }\n \n-                OutlivesBound::RegionSubProjection(r_a, projection_b) => {\n+                OutlivesBound::RegionSubAlias(r_a, kind, alias_b) => {\n                     self.region_bound_pairs\n-                        .insert(ty::OutlivesPredicate(GenericKind::Projection(projection_b), r_a));\n-                }\n-\n-                OutlivesBound::RegionSubOpaque(r_a, def_id, substs) => {\n-                    self.region_bound_pairs\n-                        .insert(ty::OutlivesPredicate(GenericKind::Opaque(def_id, substs), r_a));\n+                        .insert(ty::OutlivesPredicate(GenericKind::Alias(kind, alias_b), r_a));\n                 }\n             }\n         }"}, {"sha": "7d38a6e5f33c1c66dec3d8903121101e644beb04", "filename": "compiler/rustc_hir_analysis/src/outlives/utils.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs?ref=6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "patch": "@@ -80,34 +80,26 @@ pub(crate) fn insert_outlives_predicate<'tcx>(\n                             .or_insert(span);\n                     }\n \n-                    Component::Projection(proj_ty) => {\n-                        // This would arise from something like:\n+                    Component::Alias(kind, alias) => {\n+                        // This would either arise from something like:\n                         //\n                         // ```\n                         // struct Foo<'a, T: Iterator> {\n                         //    x:  &'a <T as Iterator>::Item\n                         // }\n                         // ```\n                         //\n-                        // Here we want to add an explicit `where <T as Iterator>::Item: 'a`.\n-                        let ty: Ty<'tcx> = tcx.mk_projection(proj_ty.def_id, proj_ty.substs);\n-                        required_predicates\n-                            .entry(ty::OutlivesPredicate(ty.into(), outlived_region))\n-                            .or_insert(span);\n-                    }\n-\n-                    Component::Opaque(def_id, substs) => {\n-                        // This would arise from something like:\n+                        // or:\n                         //\n                         // ```rust\n                         // type Opaque<T> = impl Sized;\n                         // fn defining<T>() -> Opaque<T> {}\n                         // struct Ss<'a, T>(&'a Opaque<T>);\n                         // ```\n                         //\n-                        // Here we want to have an implied bound `Opaque<T>: 'a`\n-\n-                        let ty = tcx.mk_opaque(def_id, substs);\n+                        // Here we want to add an explicit `where <T as Iterator>::Item: 'a`\n+                        // or `Opaque<T>: 'a` depending on the alias kind.\n+                        let ty: Ty<'tcx> = tcx.mk_ty(ty::Alias(kind, alias));\n                         required_predicates\n                             .entry(ty::OutlivesPredicate(ty.into(), outlived_region))\n                             .or_insert(span);"}, {"sha": "9c38eb6163f5627043746c3ead3953d998efe121", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "patch": "@@ -2272,9 +2272,12 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n \n         let labeled_user_string = match bound_kind {\n             GenericKind::Param(ref p) => format!(\"the parameter type `{}`\", p),\n-            GenericKind::Projection(ref p) => format!(\"the associated type `{}`\", p),\n-            GenericKind::Opaque(def_id, substs) => {\n-                format!(\"the opaque type `{}`\", self.tcx.def_path_str_with_substs(def_id, substs))\n+            GenericKind::Alias(ty::Projection, ref p) => format!(\"the associated type `{}`\", p),\n+            GenericKind::Alias(ty::Opaque, ref p) => {\n+                format!(\n+                    \"the opaque type `{}`\",\n+                    self.tcx.def_path_str_with_substs(p.def_id, p.substs)\n+                )\n             }\n         };\n "}, {"sha": "31451192bc50e0de68e61b6ed25e545d05f7e15e", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "patch": "@@ -3,9 +3,8 @@\n // RFC for reference.\n \n use rustc_data_structures::sso::SsoHashSet;\n-use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, SubstsRef, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n use smallvec::{smallvec, SmallVec};\n \n #[derive(Debug)]\n@@ -23,7 +22,7 @@ pub enum Component<'tcx> {\n     // is not in a position to judge which is the best technique, so\n     // we just product the projection as a component and leave it to\n     // the consumer to decide (but see `EscapingProjection` below).\n-    Projection(ty::AliasTy<'tcx>),\n+    Alias(ty::AliasKind, ty::AliasTy<'tcx>),\n \n     // In the case where a projection has escaping regions -- meaning\n     // regions bound within the type itself -- we always use\n@@ -46,8 +45,6 @@ pub enum Component<'tcx> {\n     // them. This gives us room to improve the regionck reasoning in\n     // the future without breaking backwards compat.\n     EscapingProjection(Vec<Component<'tcx>>),\n-\n-    Opaque(DefId, SubstsRef<'tcx>),\n }\n \n /// Push onto `out` all the things that must outlive `'a` for the condition\n@@ -130,8 +127,8 @@ fn compute_components<'tcx>(\n             // outlives any other lifetime, which is unsound.\n             // See https://github.com/rust-lang/rust/issues/84305 for\n             // more details.\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n-                out.push(Component::Opaque(def_id, substs));\n+            ty::Alias(ty::Opaque, data) => {\n+                out.push(Component::Alias(ty::Opaque, data));\n             },\n \n             // For projections, we prefer to generate an obligation like\n@@ -142,15 +139,15 @@ fn compute_components<'tcx>(\n             // trait-ref. Therefore, if we see any higher-ranked regions,\n             // we simply fallback to the most restrictive rule, which\n             // requires that `Pi: 'a` for all `i`.\n-            ty::Alias(ty::Projection, ref data) => {\n+            ty::Alias(ty::Projection, data) => {\n                 if !data.has_escaping_bound_vars() {\n                     // best case: no escaping regions, so push the\n                     // projection and skip the subtree (thus generating no\n                     // constraints for Pi). This defers the choice between\n                     // the rules OutlivesProjectionEnv,\n                     // OutlivesProjectionTraitDef, and\n                     // OutlivesProjectionComponents to regionck.\n-                    out.push(Component::Projection(*data));\n+                    out.push(Component::Alias(ty::Projection, data));\n                 } else {\n                     // fallback case: hard code\n                     // OutlivesProjectionComponents.  Continue walking"}, {"sha": "52c3d97f24111c6527f9c74ccc3942d2d9380ac4", "filename": "compiler/rustc_infer/src/infer/outlives/env.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs?ref=6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "patch": "@@ -138,13 +138,9 @@ impl<'tcx> OutlivesEnvironmentBuilder<'tcx> {\n                     self.region_bound_pairs\n                         .insert(ty::OutlivesPredicate(GenericKind::Param(param_b), r_a));\n                 }\n-                OutlivesBound::RegionSubProjection(r_a, projection_b) => {\n+                OutlivesBound::RegionSubAlias(r_a, kind, projection_b) => {\n                     self.region_bound_pairs\n-                        .insert(ty::OutlivesPredicate(GenericKind::Projection(projection_b), r_a));\n-                }\n-                OutlivesBound::RegionSubOpaque(r_a, def_id, substs) => {\n-                    self.region_bound_pairs\n-                        .insert(ty::OutlivesPredicate(GenericKind::Opaque(def_id, substs), r_a));\n+                        .insert(ty::OutlivesPredicate(GenericKind::Alias(kind, projection_b), r_a));\n                 }\n                 OutlivesBound::RegionSubRegion(r_a, r_b) => {\n                     if let (ReEarlyBound(_) | ReFree(_), ReVar(vid_b)) = (r_a.kind(), r_b.kind()) {"}, {"sha": "4a93597a643f83761a5257db32fc92db956bfd5d", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 13, "deletions": 35, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "patch": "@@ -266,11 +266,8 @@ where\n                 Component::Param(param_ty) => {\n                     self.param_ty_must_outlive(origin, region, *param_ty);\n                 }\n-                Component::Opaque(def_id, substs) => {\n-                    self.opaque_must_outlive(*def_id, substs, origin, region)\n-                }\n-                Component::Projection(projection_ty) => {\n-                    self.projection_must_outlive(origin, region, *projection_ty);\n+                Component::Alias(kind, data) => {\n+                    self.alias_must_outlive(*kind, *data, origin, region)\n                 }\n                 Component::EscapingProjection(subcomponents) => {\n                     self.components_must_outlive(origin, &subcomponents, region, category);\n@@ -305,44 +302,25 @@ where\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n-    fn opaque_must_outlive(\n+    fn alias_must_outlive(\n         &mut self,\n-        def_id: DefId,\n-        substs: SubstsRef<'tcx>,\n+        kind: ty::AliasKind,\n+        data: ty::AliasTy<'tcx>,\n         origin: infer::SubregionOrigin<'tcx>,\n         region: ty::Region<'tcx>,\n     ) {\n         self.generic_must_outlive(\n             origin,\n             region,\n-            GenericKind::Opaque(def_id, substs),\n-            def_id,\n-            substs,\n-            true,\n+            GenericKind::Alias(kind, data),\n+            data.def_id,\n+            data.substs,\n+            kind == ty::Opaque,\n             |ty| match *ty.kind() {\n-                ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => (def_id, substs),\n-                _ => bug!(\"expected only projection types from env, not {:?}\", ty),\n-            },\n-        );\n-    }\n-\n-    #[instrument(level = \"debug\", skip(self))]\n-    fn projection_must_outlive(\n-        &mut self,\n-        origin: infer::SubregionOrigin<'tcx>,\n-        region: ty::Region<'tcx>,\n-        projection_ty: ty::AliasTy<'tcx>,\n-    ) {\n-        self.generic_must_outlive(\n-            origin,\n-            region,\n-            GenericKind::Projection(projection_ty),\n-            projection_ty.def_id,\n-            projection_ty.substs,\n-            false,\n-            |ty| match ty.kind() {\n-                ty::Alias(ty::Projection, projection_ty) => {\n-                    (projection_ty.def_id, projection_ty.substs)\n+                ty::Alias(filter_kind, ty::AliasTy { def_id, substs, .. })\n+                    if kind == filter_kind =>\n+                {\n+                    (def_id, substs)\n                 }\n                 _ => bug!(\"expected only projection types from env, not {:?}\", ty),\n             },"}, {"sha": "66bbf47c3b6e6a8ca79b78672de0c656f133cec8", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "patch": "@@ -170,16 +170,10 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         match *component {\n             Component::Region(lt) => VerifyBound::OutlivedBy(lt),\n             Component::Param(param_ty) => self.param_bound(param_ty),\n-            Component::Opaque(did, substs) => self.projection_opaque_bounds(\n-                GenericKind::Opaque(did, substs),\n-                did,\n-                substs,\n-                visited,\n-            ),\n-            Component::Projection(projection_ty) => self.projection_opaque_bounds(\n-                GenericKind::Projection(projection_ty),\n-                projection_ty.def_id,\n-                projection_ty.substs,\n+            Component::Alias(kind, data) => self.projection_opaque_bounds(\n+                GenericKind::Alias(kind, data),\n+                data.def_id,\n+                data.substs,\n                 visited,\n             ),\n             Component::EscapingProjection(ref components) => {"}, {"sha": "fda5ffe78467822c5a4a17e566c888339454bfe6", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "patch": "@@ -12,10 +12,8 @@ use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::UndoLogs;\n use rustc_data_structures::unify as ut;\n-use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_middle::infer::unify_key::{RegionVidKey, UnifiedRegion};\n-use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::ReStatic;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{ReLateBound, ReVar};\n@@ -169,8 +167,7 @@ pub struct Verify<'tcx> {\n #[derive(Copy, Clone, PartialEq, Eq, Hash, TypeFoldable, TypeVisitable)]\n pub enum GenericKind<'tcx> {\n     Param(ty::ParamTy),\n-    Projection(ty::AliasTy<'tcx>),\n-    Opaque(DefId, SubstsRef<'tcx>),\n+    Alias(ty::AliasKind, ty::AliasTy<'tcx>),\n }\n \n /// Describes the things that some `GenericKind` value `G` is known to\n@@ -749,9 +746,9 @@ impl<'tcx> fmt::Debug for GenericKind<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             GenericKind::Param(ref p) => write!(f, \"{:?}\", p),\n-            GenericKind::Projection(ref p) => write!(f, \"{:?}\", p),\n-            GenericKind::Opaque(def_id, substs) => ty::tls::with(|tcx| {\n-                write!(f, \"{}\", tcx.def_path_str_with_substs(def_id, tcx.lift(substs).unwrap()))\n+            GenericKind::Alias(ty::Projection, ref p) => write!(f, \"{:?}\", p),\n+            GenericKind::Alias(ty::Opaque, ref p) => ty::tls::with(|tcx| {\n+                write!(f, \"{}\", tcx.def_path_str_with_substs(p.def_id, tcx.lift(p.substs).unwrap()))\n             }),\n         }\n     }\n@@ -761,9 +758,9 @@ impl<'tcx> fmt::Display for GenericKind<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             GenericKind::Param(ref p) => write!(f, \"{}\", p),\n-            GenericKind::Projection(ref p) => write!(f, \"{}\", p),\n-            GenericKind::Opaque(def_id, substs) => ty::tls::with(|tcx| {\n-                write!(f, \"{}\", tcx.def_path_str_with_substs(def_id, tcx.lift(substs).unwrap()))\n+            GenericKind::Alias(ty::Projection, ref p) => write!(f, \"{}\", p),\n+            GenericKind::Alias(ty::Opaque, ref p) => ty::tls::with(|tcx| {\n+                write!(f, \"{}\", tcx.def_path_str_with_substs(p.def_id, tcx.lift(p.substs).unwrap()))\n             }),\n         }\n     }\n@@ -773,8 +770,7 @@ impl<'tcx> GenericKind<'tcx> {\n     pub fn to_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         match *self {\n             GenericKind::Param(ref p) => p.to_ty(tcx),\n-            GenericKind::Projection(ref p) => tcx.mk_projection(p.def_id, p.substs),\n-            GenericKind::Opaque(def_id, substs) => tcx.mk_opaque(def_id, substs),\n+            GenericKind::Alias(kind, data) => tcx.mk_ty(ty::Alias(kind, data)),\n         }\n     }\n }"}, {"sha": "fb448ec0222d8b3f8df6f97288cee776582b7e13", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "patch": "@@ -261,17 +261,8 @@ impl<'tcx> Elaborator<'tcx> {\n \n                             Component::UnresolvedInferenceVariable(_) => None,\n \n-                            Component::Opaque(def_id, substs) => {\n-                                let ty = tcx.mk_opaque(def_id, substs);\n-                                Some(ty::PredicateKind::Clause(ty::Clause::TypeOutlives(\n-                                    ty::OutlivesPredicate(ty, r_min),\n-                                )))\n-                            }\n-\n-                            Component::Projection(projection) => {\n-                                // We might end up here if we have `Foo<<Bar as Baz>::Assoc>: 'a`.\n-                                // With this, we can deduce that `<Bar as Baz>::Assoc: 'a`.\n-                                let ty = tcx.mk_projection(projection.def_id, projection.substs);\n+                            Component::Alias(kind, data) => {\n+                                let ty = tcx.mk_ty(ty::Alias(kind, data));\n                                 Some(ty::PredicateKind::Clause(ty::Clause::TypeOutlives(\n                                     ty::OutlivesPredicate(ty, r_min),\n                                 )))"}, {"sha": "2a68315fefc56862dfab1304ad9e8e7aedccadc2", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "patch": "@@ -8,9 +8,8 @@\n use crate::error::DropCheckOverflow;\n use crate::infer::canonical::{Canonical, QueryResponse};\n use crate::ty::error::TypeError;\n-use crate::ty::subst::{GenericArg, SubstsRef};\n+use crate::ty::subst::GenericArg;\n use crate::ty::{self, Ty, TyCtxt};\n-use rustc_hir::def_id::DefId;\n use rustc_span::source_map::Span;\n \n pub mod type_op {\n@@ -214,6 +213,5 @@ pub struct NormalizationResult<'tcx> {\n pub enum OutlivesBound<'tcx> {\n     RegionSubRegion(ty::Region<'tcx>, ty::Region<'tcx>),\n     RegionSubParam(ty::Region<'tcx>, ty::ParamTy),\n-    RegionSubProjection(ty::Region<'tcx>, ty::AliasTy<'tcx>),\n-    RegionSubOpaque(ty::Region<'tcx>, DefId, SubstsRef<'tcx>),\n+    RegionSubAlias(ty::Region<'tcx>, ty::AliasKind, ty::AliasTy<'tcx>),\n }"}, {"sha": "8f64eb3e4baf6f7ba4d8a0d4665deff0f6954e2b", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "patch": "@@ -227,6 +227,7 @@ TrivialTypeTraversalAndLiftImpls! {\n     crate::ty::BoundRegionKind,\n     crate::ty::AssocItem,\n     crate::ty::AssocKind,\n+    crate::ty::AliasKind,\n     crate::ty::Placeholder<crate::ty::BoundRegionKind>,\n     crate::ty::ClosureKind,\n     crate::ty::FreeRegion,"}, {"sha": "d457a4a2beaf5c00569ad96931407d841b8ab187", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "patch": "@@ -154,9 +154,8 @@ fn implied_bounds_from_components<'tcx>(\n             match component {\n                 Component::Region(r) => Some(OutlivesBound::RegionSubRegion(sub_region, r)),\n                 Component::Param(p) => Some(OutlivesBound::RegionSubParam(sub_region, p)),\n-                Component::Projection(p) => Some(OutlivesBound::RegionSubProjection(sub_region, p)),\n-                Component::Opaque(def_id, substs) => {\n-                    Some(OutlivesBound::RegionSubOpaque(sub_region, def_id, substs))\n+                Component::Alias(kind, p) => {\n+                    Some(OutlivesBound::RegionSubAlias(sub_region, kind, p))\n                 }\n                 Component::EscapingProjection(_) =>\n                 // If the projection has escaping regions, don't"}]}