{"sha": "9bda699c80a686f9d86a24be5b75d98893e2ca84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZGE2OTljODBhNjg2ZjlkODZhMjRiZTViNzVkOTg4OTNlMmNhODQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-31T07:36:39Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-31T07:36:39Z"}, "message": "improve messages and add suggestions", "tree": {"sha": "8287f886e373b619cc9e5260041f66cf0a6e1d83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8287f886e373b619cc9e5260041f66cf0a6e1d83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bda699c80a686f9d86a24be5b75d98893e2ca84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bda699c80a686f9d86a24be5b75d98893e2ca84", "html_url": "https://github.com/rust-lang/rust/commit/9bda699c80a686f9d86a24be5b75d98893e2ca84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bda699c80a686f9d86a24be5b75d98893e2ca84/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82dd50d0e241935842ffdb508584bd58bb37c8a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/82dd50d0e241935842ffdb508584bd58bb37c8a1", "html_url": "https://github.com/rust-lang/rust/commit/82dd50d0e241935842ffdb508584bd58bb37c8a1"}], "stats": {"total": 57, "additions": 46, "deletions": 11}, "files": [{"sha": "485266429aad5b06badc2d3a7d449fe788b0ff7b", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9bda699c80a686f9d86a24be5b75d98893e2ca84/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bda699c80a686f9d86a24be5b75d98893e2ca84/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=9bda699c80a686f9d86a24be5b75d98893e2ca84", "patch": "@@ -2,12 +2,12 @@\n \n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::span_help_and_lint;\n+use utils::{span_lint_and_then, snippet_opt};\n use rustc::ty::layout::TargetDataLayout;\n use rustc::ty::TypeFoldable;\n use rustc::traits::Reveal;\n \n-/// **What it does:** Checks for large variants on enums.\n+/// **What it does:** Checks for large variants on `enum`s.\n ///\n /// **Why is this bad?** Enum size is bounded by the largest variant. Having a large variant\n /// can penalize the memory layout of that enum.\n@@ -68,11 +68,31 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n                         })\n                         .sum();\n                     if size > self.maximum_variant_size_allowed {\n-                        span_help_and_lint(cx,\n+                        span_lint_and_then(cx,\n                                            LARGE_ENUM_VARIANT,\n                                            def.variants[i].span,\n-                                           &format!(\"large enum variant found on variant `{}`\", variant.name),\n-                                           \"consider boxing the large branches to reduce the total size of the enum\");\n+                                           \"large enum variant found\",\n+                                           |db| {\n+                            if variant.fields.len() == 1 {\n+                                let span = match def.variants[i].node.data {\n+                                    VariantData::Struct(ref fields, _) |\n+                                    VariantData::Tuple(ref fields, _) => fields[0].ty.span,\n+                                    VariantData::Unit(_) => unreachable!(),\n+                                };\n+                                if let Some(snip) = snippet_opt(cx, span) {\n+                                    db.span_suggestion(\n+                                        span,\n+                                        \"consider boxing the large fields to reduce the total size of the enum\",\n+                                        format!(\"Box<{}>\", snip),\n+                                    );\n+                                    return;\n+                                }\n+                            }\n+                            db.span_help(\n+                                def.variants[i].span,\n+                                \"consider boxing the large fields to reduce the total size of the enum\",\n+                            );\n+                        });\n                     }\n                 });\n             }"}, {"sha": "d4ce3229560ef61b0b72a9efd715d87bfd742057", "filename": "tests/compile-fail/large_enum_variant.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9bda699c80a686f9d86a24be5b75d98893e2ca84/tests%2Fcompile-fail%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bda699c80a686f9d86a24be5b75d98893e2ca84/tests%2Fcompile-fail%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flarge_enum_variant.rs?ref=9bda699c80a686f9d86a24be5b75d98893e2ca84", "patch": "@@ -7,14 +7,19 @@\n \n enum LargeEnum {\n     A(i32),\n-    B([i32; 8000]), //~ ERROR large enum variant found on variant `B`\n+    B([i32; 8000]), //~ ERROR large enum variant found\n+    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n+    //~| SUGGESTION Box<[i32; 8000]>\n }\n \n enum GenericEnum<T> {\n     A(i32),\n-    B([i32; 8000]), //~ ERROR large enum variant found on variant `B`\n+    B([i32; 8000]), //~ ERROR large enum variant found\n+    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n+    //~| SUGGESTION Box<[i32; 8000]>\n     C([T; 8000]),\n-    D(T, [i32; 8000]), //~ ERROR large enum variant found on variant `D`\n+    D(T, [i32; 8000]), //~ ERROR large enum variant found\n+    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n }\n \n trait SomeTrait {\n@@ -27,11 +32,21 @@ enum LargeEnumGeneric<A: SomeTrait> {\n \n enum AnotherLargeEnum {\n     VariantOk(i32, u32),\n-    ContainingLargeEnum(LargeEnum), //~ ERROR large enum variant found on variant `ContainingLargeEnum`\n-    ContainingMoreThanOneField(i32, [i32; 8000], [i32; 9500]), //~ ERROR large enum variant found on variant `ContainingMoreThanOneField`\n+    ContainingLargeEnum(LargeEnum), //~ ERROR large enum variant found\n+    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n+    //~| SUGGESTION Box<LargeEnum>\n+    ContainingMoreThanOneField(i32, [i32; 8000], [i32; 9500]), //~ ERROR large enum variant found\n+    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n     VoidVariant,\n     StructLikeLittle { x: i32, y: i32 },\n-    StructLikeLarge { x: [i32; 8000], y: i32 }, //~ ERROR large enum variant found on variant `StructLikeLarge`\n+    StructLikeLarge { x: [i32; 8000], y: i32 }, //~ ERROR large enum variant found\n+    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n+    StructLikeLarge2 {\n+        x:\n+        [i32; 8000] //~ SUGGESTION Box<[i32; 8000]>\n+    },\n+    //~^ ERROR large enum variant found\n+    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n }\n \n fn main() {"}]}