{"sha": "31e7fa54a0e92beef60fcff84128626c4b01ef62", "node_id": "C_kwDOAAsO6NoAKDMxZTdmYTU0YTBlOTJiZWVmNjBmY2ZmODQxMjg2MjZjNGIwMWVmNjI", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-22T03:01:42Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-22T16:28:14Z"}, "message": "Dispatch inline asm to the correct arch", "tree": {"sha": "04deebac3a447769175f2f5684d81456423f810e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04deebac3a447769175f2f5684d81456423f810e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31e7fa54a0e92beef60fcff84128626c4b01ef62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31e7fa54a0e92beef60fcff84128626c4b01ef62", "html_url": "https://github.com/rust-lang/rust/commit/31e7fa54a0e92beef60fcff84128626c4b01ef62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31e7fa54a0e92beef60fcff84128626c4b01ef62/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfdf10b259f20e94f82c39dcb87faaa12f7f8dc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfdf10b259f20e94f82c39dcb87faaa12f7f8dc7", "html_url": "https://github.com/rust-lang/rust/commit/cfdf10b259f20e94f82c39dcb87faaa12f7f8dc7"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "688fda753b68b8d0a9192b67de27d555ab22d174", "filename": "src/inline_asm.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31e7fa54a0e92beef60fcff84128626c4b01ef62/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e7fa54a0e92beef60fcff84128626c4b01ef62/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=31e7fa54a0e92beef60fcff84128626c4b01ef62", "patch": "@@ -108,7 +108,7 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n \n     let mut asm_gen = InlineAssemblyGenerator {\n         tcx: fx.tcx,\n-        arch: InlineAsmArch::X86_64,\n+        arch: fx.tcx.sess.asm_arch.unwrap(),\n         template,\n         operands,\n         options,\n@@ -306,12 +306,8 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n         let mut slots_output = vec![None; self.operands.len()];\n \n         let new_slot_fn = |slot_size: &mut Size, reg_class: InlineAsmRegClass| {\n-            let reg_size = reg_class\n-                .supported_types(InlineAsmArch::X86_64)\n-                .iter()\n-                .map(|(ty, _)| ty.size())\n-                .max()\n-                .unwrap();\n+            let reg_size =\n+                reg_class.supported_types(self.arch).iter().map(|(ty, _)| ty.size()).max().unwrap();\n             let align = rustc_target::abi::Align::from_bytes(reg_size.bytes()).unwrap();\n             let offset = slot_size.align_to(align);\n             *slot_size = offset + reg_size;"}]}