{"sha": "0b6dbbc9cfb747df1db646bba16561c022704056", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNmRiYmM5Y2ZiNzQ3ZGYxZGI2NDZiYmExNjU2MWMwMjI3MDQwNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-07T04:14:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-07T04:14:22Z"}, "message": "Auto merge of #21949 - japaric:index, r=nikomatsakis\n\ncloses #21630\r\n\r\nOverloaded indexing (`&[mut] foo[bar]`) only works when `<Self as Index>::Output` is the same as `<Self as IndexMut>::Output` (see issue above). To restrict implementations of `IndexMut` that doesn't work, this PR makes `IndexMut` a supertrait over `Index`, i.e. `trait IndexMut<I>: Index<I>`, just like in the `trait DerefMut: Deref` case.\r\n\r\nThis breaks all downstream implementations of `IndexMut`, in most cases this simply means removing the `type Output = ..` bit, which is now redundant, from `IndexMut` implementations:\r\n\r\n``` diff\r\n impl Index<Foo> for Bar {\r\n     type Output = Baz;\r\n     ..\r\n }\r\n\r\n impl IndexMut<Foo> for Bar {\r\n-    type Output = Baz;\r\n     ..\r\n }\r\n```\r\n\r\n[breaking-change]\r\n\r\n---\r\n\r\nr? @nikomatsakis", "tree": {"sha": "1b6bf9780361f2cd8bce65f44a1a5727676d1c6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b6bf9780361f2cd8bce65f44a1a5727676d1c6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b6dbbc9cfb747df1db646bba16561c022704056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b6dbbc9cfb747df1db646bba16561c022704056", "html_url": "https://github.com/rust-lang/rust/commit/0b6dbbc9cfb747df1db646bba16561c022704056", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b6dbbc9cfb747df1db646bba16561c022704056/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ebf9bc5c22155d622537ded42b4ebf94238b296", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebf9bc5c22155d622537ded42b4ebf94238b296", "html_url": "https://github.com/rust-lang/rust/commit/7ebf9bc5c22155d622537ded42b4ebf94238b296"}, {"sha": "724bf7bce2b35ac5731cf7e217c0e87916517b69", "url": "https://api.github.com/repos/rust-lang/rust/commits/724bf7bce2b35ac5731cf7e217c0e87916517b69", "html_url": "https://github.com/rust-lang/rust/commit/724bf7bce2b35ac5731cf7e217c0e87916517b69"}], "stats": {"total": 60, "additions": 14, "deletions": 46}, "files": [{"sha": "aec50d5380880e24891e760d5247a3fbaad862f1", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=0b6dbbc9cfb747df1db646bba16561c022704056", "patch": "@@ -910,8 +910,6 @@ impl<K: Ord, Q: ?Sized, V> Index<Q> for BTreeMap<K, V>\n impl<K: Ord, Q: ?Sized, V> IndexMut<Q> for BTreeMap<K, V>\n     where Q: BorrowFrom<K> + Ord\n {\n-    type Output = V;\n-\n     fn index_mut(&mut self, key: &Q) -> &mut V {\n         self.get_mut(key).expect(\"no entry found for key\")\n     }"}, {"sha": "417493038404a11ecb4d59526c1fe308a2cdc12b", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=0b6dbbc9cfb747df1db646bba16561c022704056", "patch": "@@ -1591,8 +1591,6 @@ impl<A> Index<usize> for RingBuf<A> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A> IndexMut<usize> for RingBuf<A> {\n-    type Output = A;\n-\n     #[inline]\n     fn index_mut(&mut self, i: &usize) -> &mut A {\n         self.get_mut(*i).expect(\"Out of bounds access\")"}, {"sha": "4a082c3616cb91bbfe2d5d1e2332f201f5f4ecbb", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=0b6dbbc9cfb747df1db646bba16561c022704056", "patch": "@@ -1286,8 +1286,6 @@ impl<T> Index<usize> for Vec<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> IndexMut<usize> for Vec<T> {\n-    type Output = T;\n-\n     #[inline]\n     fn index_mut(&mut self, index: &usize) -> &mut T {\n         // NB built-in indexing via `&mut [T]`\n@@ -1331,31 +1329,27 @@ impl<T> ops::Index<ops::RangeFull> for Vec<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<ops::Range<usize>> for Vec<T> {\n-    type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::Range<usize>) -> &mut [T] {\n         IndexMut::index_mut(&mut **self, index)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<ops::RangeTo<usize>> for Vec<T> {\n-    type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::RangeTo<usize>) -> &mut [T] {\n         IndexMut::index_mut(&mut **self, index)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<ops::RangeFrom<usize>> for Vec<T> {\n-    type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::RangeFrom<usize>) -> &mut [T] {\n         IndexMut::index_mut(&mut **self, index)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<ops::RangeFull> for Vec<T> {\n-    type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, _index: &ops::RangeFull) -> &mut [T] {\n         self.as_mut_slice()"}, {"sha": "739b8d8ce19c24899abcd9d06f2a25d62d848623", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=0b6dbbc9cfb747df1db646bba16561c022704056", "patch": "@@ -712,8 +712,6 @@ impl<V> Index<usize> for VecMap<V> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<V> IndexMut<usize> for VecMap<V> {\n-    type Output = V;\n-\n     #[inline]\n     fn index_mut<'a>(&'a mut self, i: &usize) -> &'a mut V {\n         self.get_mut(i).expect(\"key not present\")"}, {"sha": "782483a34fc89744465e4f09bd47c08a4c229b49", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=0b6dbbc9cfb747df1db646bba16561c022704056", "patch": "@@ -897,14 +897,14 @@ shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n /// }\n /// ```\n #[lang=\"index\"]\n-#[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Index}`\"]\n+#[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait Index<Index: ?Sized> {\n+pub trait Index<Idx: ?Sized> {\n     type Output: ?Sized;\n \n     /// The method for the indexing (`Foo[Bar]`) operation\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn index<'a>(&'a self, index: &Index) -> &'a Self::Output;\n+    fn index<'a>(&'a self, index: &Idx) -> &'a Self::Output;\n }\n \n /// The `IndexMut` trait is used to specify the functionality of indexing\n@@ -916,15 +916,21 @@ pub trait Index<Index: ?Sized> {\n /// calling `index_mut`, and therefore, `main` prints `Indexing!`.\n ///\n /// ```\n-/// use std::ops::IndexMut;\n+/// use std::ops::{Index, IndexMut};\n ///\n /// #[derive(Copy)]\n /// struct Foo;\n /// struct Bar;\n ///\n-/// impl IndexMut<Bar> for Foo {\n+/// impl Index<Bar> for Foo {\n ///     type Output = Foo;\n ///\n+///     fn index<'a>(&'a self, _index: &Bar) -> &'a Foo {\n+///         self\n+///     }\n+/// }\n+///\n+/// impl IndexMut<Bar> for Foo {\n ///     fn index_mut<'a>(&'a mut self, _index: &Bar) -> &'a mut Foo {\n ///         println!(\"Indexing!\");\n ///         self\n@@ -936,14 +942,12 @@ pub trait Index<Index: ?Sized> {\n /// }\n /// ```\n #[lang=\"index_mut\"]\n-#[rustc_on_unimplemented = \"the type `{Self}` cannot be mutably indexed by `{Index}`\"]\n+#[rustc_on_unimplemented = \"the type `{Self}` cannot be mutably indexed by `{Idx}`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait IndexMut<Index: ?Sized> {\n-    type Output: ?Sized;\n-\n+pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n     /// The method for the indexing (`Foo[Bar]`) operation\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn index_mut<'a>(&'a mut self, index: &Index) -> &'a mut Self::Output;\n+    fn index_mut<'a>(&'a mut self, index: &Idx) -> &'a mut Self::Output;\n }\n \n /// An unbounded range."}, {"sha": "fc51920ec6b82de1941863fbb4a48849f69d709e", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=0b6dbbc9cfb747df1db646bba16561c022704056", "patch": "@@ -502,8 +502,6 @@ impl<T> ops::Index<uint> for [T] {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<uint> for [T] {\n-    type Output = T;\n-\n     fn index_mut(&mut self, &index: &uint) -> &mut T {\n         assert!(index < self.len());\n \n@@ -553,7 +551,6 @@ impl<T> ops::Index<RangeFull> for [T] {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<ops::Range<uint>> for [T] {\n-    type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::Range<uint>) -> &mut [T] {\n         assert!(index.start <= index.end);\n@@ -568,15 +565,13 @@ impl<T> ops::IndexMut<ops::Range<uint>> for [T] {\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<ops::RangeTo<uint>> for [T] {\n-    type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::RangeTo<uint>) -> &mut [T] {\n         self.index_mut(&ops::Range{ start: 0, end: index.end })\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<ops::RangeFrom<uint>> for [T] {\n-    type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::RangeFrom<uint>) -> &mut [T] {\n         let len = self.len();\n@@ -585,7 +580,6 @@ impl<T> ops::IndexMut<ops::RangeFrom<uint>> for [T] {\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<RangeFull> for [T] {\n-    type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, _index: &RangeFull) -> &mut [T] {\n         self\n@@ -865,31 +859,27 @@ impl<'a, T> ops::Index<RangeFull> for IterMut<'a, T> {\n \n #[unstable(feature = \"core\")]\n impl<'a, T> ops::IndexMut<ops::Range<uint>> for IterMut<'a, T> {\n-    type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::Range<uint>) -> &mut [T] {\n         self.index_mut(&RangeFull).index_mut(index)\n     }\n }\n #[unstable(feature = \"core\")]\n impl<'a, T> ops::IndexMut<ops::RangeTo<uint>> for IterMut<'a, T> {\n-    type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::RangeTo<uint>) -> &mut [T] {\n         self.index_mut(&RangeFull).index_mut(index)\n     }\n }\n #[unstable(feature = \"core\")]\n impl<'a, T> ops::IndexMut<ops::RangeFrom<uint>> for IterMut<'a, T> {\n-    type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::RangeFrom<uint>) -> &mut [T] {\n         self.index_mut(&RangeFull).index_mut(index)\n     }\n }\n #[unstable(feature = \"core\")]\n impl<'a, T> ops::IndexMut<RangeFull> for IterMut<'a, T> {\n-    type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, _index: &RangeFull) -> &mut [T] {\n         make_slice!(T => &mut [T]: self.ptr, self.end)"}, {"sha": "710f021d9125e6205e1149d2fe8ccc12da1ff697", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=0b6dbbc9cfb747df1db646bba16561c022704056", "patch": "@@ -1267,8 +1267,6 @@ impl<K, V, S, H, Q: ?Sized> IndexMut<Q> for HashMap<K, V, S>\n           S: HashState<Hasher=H>,\n           H: hash::Hasher<Output=u64>\n {\n-    type Output = V;\n-\n     #[inline]\n     fn index_mut<'a>(&'a mut self, index: &Q) -> &'a mut V {\n         self.get_mut(index).expect(\"no entry found for key\")"}, {"sha": "99f396ef8143213af415dbca2a649d0b4e1cd167", "filename": "src/test/compile-fail/borrowck-overloaded-index-autoderef.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs?ref=0b6dbbc9cfb747df1db646bba16561c022704056", "patch": "@@ -31,8 +31,6 @@ impl Index<String> for Foo {\n }\n \n impl IndexMut<String> for Foo {\n-    type Output = isize;\n-\n     fn index_mut<'a>(&'a mut self, z: &String) -> &'a mut isize {\n         if *z == \"x\" {\n             &mut self.x"}, {"sha": "2d752abe7e3c293a1ccc443bf378581786c635dd", "filename": "src/test/compile-fail/borrowck-overloaded-index.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs?ref=0b6dbbc9cfb747df1db646bba16561c022704056", "patch": "@@ -28,8 +28,6 @@ impl Index<String> for Foo {\n }\n \n impl IndexMut<String> for Foo {\n-    type Output = isize;\n-\n     fn index_mut<'a>(&'a mut self, z: &String) -> &'a mut isize {\n         if *z == \"x\" {\n             &mut self.x"}, {"sha": "d5ccf8cd2befb0f4f18e29fc0021ba49f4d814bf", "filename": "src/test/run-pass/overloaded-index-autoderef.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs?ref=0b6dbbc9cfb747df1db646bba16561c022704056", "patch": "@@ -33,8 +33,6 @@ impl Index<int> for Foo {\n }\n \n impl IndexMut<int> for Foo {\n-    type Output = int;\n-\n     fn index_mut(&mut self, z: &int) -> &mut int {\n         if *z == 0 {\n             &mut self.x"}, {"sha": "10ca3804eaedbc187ab128e619f45d20cd7c41dd", "filename": "src/test/run-pass/overloaded-index.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index.rs?ref=0b6dbbc9cfb747df1db646bba16561c022704056", "patch": "@@ -28,8 +28,6 @@ impl Index<int> for Foo {\n }\n \n impl IndexMut<int> for Foo {\n-    type Output = int;\n-\n     fn index_mut(&mut self, z: &int) -> &mut int {\n         if *z == 0 {\n             &mut self.x"}, {"sha": "30b53dbb0ad5bea0bdf96b7ddb419345e2749ad6", "filename": "src/test/run-pass/slice.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Ftest%2Frun-pass%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6dbbc9cfb747df1db646bba16561c022704056/src%2Ftest%2Frun-pass%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice.rs?ref=0b6dbbc9cfb747df1db646bba16561c022704056", "patch": "@@ -49,28 +49,24 @@ impl Index<RangeFull> for Foo {\n }\n \n impl IndexMut<Range<Foo>> for Foo {\n-    type Output = Foo;\n     fn index_mut(&mut self, index: &Range<Foo>) -> &mut Foo {\n         unsafe { COUNT += 1; }\n         self\n     }\n }\n impl IndexMut<RangeTo<Foo>> for Foo {\n-    type Output = Foo;\n     fn index_mut(&mut self, index: &RangeTo<Foo>) -> &mut Foo {\n         unsafe { COUNT += 1; }\n         self\n     }\n }\n impl IndexMut<RangeFrom<Foo>> for Foo {\n-    type Output = Foo;\n     fn index_mut(&mut self, index: &RangeFrom<Foo>) -> &mut Foo {\n         unsafe { COUNT += 1; }\n         self\n     }\n }\n impl IndexMut<RangeFull> for Foo {\n-    type Output = Foo;\n     fn index_mut(&mut self, _index: &RangeFull) -> &mut Foo {\n         unsafe { COUNT += 1; }\n         self"}]}