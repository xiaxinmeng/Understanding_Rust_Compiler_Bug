{"sha": "d2e1c3738e292c46184e0d64841607bc88dce9d6", "node_id": "C_kwDOAAsO6NoAKGQyZTFjMzczOGUyOTJjNDYxODRlMGQ2NDg0MTYwN2JjODhkY2U5ZDY", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-12-21T03:48:23Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-12-21T03:48:23Z"}, "message": "Fix span management", "tree": {"sha": "048a64da3987c418e7a092f62020fbf818882dd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/048a64da3987c418e7a092f62020fbf818882dd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2e1c3738e292c46184e0d64841607bc88dce9d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e1c3738e292c46184e0d64841607bc88dce9d6", "html_url": "https://github.com/rust-lang/rust/commit/d2e1c3738e292c46184e0d64841607bc88dce9d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2e1c3738e292c46184e0d64841607bc88dce9d6/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1184ae58d8791f424cab2101b1c67f176423e75", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1184ae58d8791f424cab2101b1c67f176423e75", "html_url": "https://github.com/rust-lang/rust/commit/d1184ae58d8791f424cab2101b1c67f176423e75"}], "stats": {"total": 95, "additions": 42, "deletions": 53}, "files": [{"sha": "2d825b369c258e02ee886bcbd97226f8c39b6399", "filename": "src/tools/miri/src/concurrency/data_race.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs?ref=d2e1c3738e292c46184e0d64841607bc88dce9d6", "patch": "@@ -51,7 +51,6 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir;\n use rustc_span::Span;\n-use rustc_span::DUMMY_SP;\n use rustc_target::abi::{Align, Size};\n \n use crate::diagnostics::RacingOp;\n@@ -398,7 +397,10 @@ impl MemoryCellClocks {\n         current_span: Span,\n     ) -> Result<(), DataRace> {\n         log::trace!(\"Unsynchronized read with vectors: {:#?} :: {:#?}\", self, clocks);\n-        let res = if self.write <= clocks.clock[self.write_index] {\n+        if !current_span.is_dummy() {\n+            clocks.clock[index].span = current_span;\n+        }\n+        if self.write <= clocks.clock[self.write_index] {\n             let race_free = if let Some(atomic) = self.atomic() {\n                 atomic.write_vector <= clocks.clock\n             } else {\n@@ -408,11 +410,7 @@ impl MemoryCellClocks {\n             if race_free { Ok(()) } else { Err(DataRace) }\n         } else {\n             Err(DataRace)\n-        };\n-        if res.is_ok() && current_span != DUMMY_SP {\n-            clocks.clock[index].span = current_span;\n         }\n-        res\n     }\n \n     /// Detect races for non-atomic write operations at the current memory cell\n@@ -425,7 +423,7 @@ impl MemoryCellClocks {\n         current_span: Span,\n     ) -> Result<(), DataRace> {\n         log::trace!(\"Unsynchronized write with vectors: {:#?} :: {:#?}\", self, clocks);\n-        if current_span != DUMMY_SP {\n+        if !current_span.is_dummy() {\n             clocks.clock[index].span = current_span;\n         }\n         if self.write <= clocks.clock[self.write_index] && self.read <= clocks.clock {\n@@ -712,9 +710,7 @@ impl VClockAlloc {\n             | MemoryKind::Stack => {\n                 let (alloc_index, clocks) = global.current_thread_state(thread_mgr);\n                 let mut alloc_timestamp = clocks.clock[alloc_index];\n-                if current_span != DUMMY_SP {\n-                    alloc_timestamp.span = current_span;\n-                }\n+                alloc_timestamp.span = current_span;\n                 (alloc_timestamp, alloc_index)\n             }\n             // Other global memory should trace races but be allocated at the 0 timestamp."}, {"sha": "0dcd6830b4e8d8105532e4e2755623f5a7992fac", "filename": "src/tools/miri/src/concurrency/vector_clock.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs?ref=d2e1c3738e292c46184e0d64841607bc88dce9d6", "patch": "@@ -45,8 +45,9 @@ impl From<u32> for VectorIdx {\n /// clock vectors larger than this will be stored on the heap\n const SMALL_VECTOR: usize = 4;\n \n-/// The type of the time-stamps recorded in the data-race detector\n-/// set to a type of unsigned integer\n+/// The time-stamps recorded in the data-race detector consist of both\n+/// a 32-bit unsigned integer which is the actual timestamp, and a `Span`\n+/// so that diagnostics can report what code was responsible for an operation.\n #[derive(Clone, Copy, Debug, Eq)]\n pub struct VTimestamp {\n     time: u32,\n@@ -128,7 +129,7 @@ impl VClock {\n         let mut_slice = self.get_mut_with_min_len(idx + 1);\n         let idx_ref = &mut mut_slice[idx];\n         idx_ref.time = idx_ref.time.checked_add(1).expect(\"Vector clock overflow\");\n-        if current_span != DUMMY_SP {\n+        if !current_span.is_dummy() {\n             idx_ref.span = current_span;\n         }\n     }\n@@ -143,14 +144,7 @@ impl VClock {\n             let l_span = l.span;\n             let r_span = r.span;\n             *l = r.max(*l);\n-            if l.span == DUMMY_SP {\n-                if r_span != DUMMY_SP {\n-                    l.span = r_span;\n-                }\n-                if l_span != DUMMY_SP {\n-                    l.span = l_span;\n-                }\n-            }\n+            l.span = l.span.substitute_dummy(r_span).substitute_dummy(l_span);\n         }\n     }\n \n@@ -162,9 +156,8 @@ impl VClock {\n \n         mut_slice[idx.index()] = other[idx];\n \n-        if other[idx].span == DUMMY_SP {\n-            mut_slice[idx.index()].span = prev_span;\n-        }\n+        let span = &mut mut_slice[idx.index()].span;\n+        *span = span.substitute_dummy(prev_span);\n     }\n \n     /// Set the vector to the all-zero vector"}, {"sha": "510b177fc7ed0567726ced7332387608dca551b6", "filename": "src/tools/miri/tests/fail/data_race/alloc_read_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.stderr?ref=d2e1c3738e292c46184e0d64841607bc88dce9d6", "patch": "@@ -8,7 +8,7 @@ help: The Read on thread `<unnamed>` is here\n   --> $DIR/alloc_read_race.rs:LL:CC\n    |\n LL | ...   *pointer.load(Ordering::Relaxed)\n-   |                                      ^\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: The Allocate on thread `<unnamed>` is here\n   --> $DIR/alloc_read_race.rs:LL:CC\n    |"}, {"sha": "ffc985c04cb36e555ee68e09e4cf7cb18368181c", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_read_race1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr?ref=d2e1c3738e292c46184e0d64841607bc88dce9d6", "patch": "@@ -5,10 +5,10 @@ LL |             *atomic_ref.get_mut()\n    |             ^^^^^^^^^^^^^^^^^^^^^ Data race detected between Read on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC\n    |\n help: The Read on thread `<unnamed>` is here\n-  --> RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+  --> $DIR/atomic_write_na_read_race1.rs:LL:CC\n    |\n-LL | }\n-   | ^\n+LL |             *atomic_ref.get_mut()\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n help: The Atomic Store on thread `<unnamed>` is here\n   --> $DIR/atomic_write_na_read_race1.rs:LL:CC\n    |"}, {"sha": "5b5c8d07f8b4b35c990a7a42e481560884bff048", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_read_race2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr?ref=d2e1c3738e292c46184e0d64841607bc88dce9d6", "patch": "@@ -10,10 +10,10 @@ help: The Atomic Store on thread `<unnamed>` is here\n LL | ...   (&*c.0).store(32, Ordering::SeqCst);\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: The Read on thread `<unnamed>` is here\n-  --> RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+  --> $DIR/atomic_write_na_read_race2.rs:LL:CC\n    |\n-LL | }\n-   | ^\n+LL |             let _val = *(c.0 as *mut usize);\n+   |                        ^^^^^^^^^^^^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:"}, {"sha": "02a9bb63b5dc3fe5af0a3414c9efcece2bcaed42", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr?ref=d2e1c3738e292c46184e0d64841607bc88dce9d6", "patch": "@@ -20,10 +20,10 @@ LL | |                 std::mem::align_of::<usize>(),\n LL | |             );\n    | |_____________^\n help: The Read on thread `<unnamed>` is here\n-  --> RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+  --> $DIR/dealloc_read_race1.rs:LL:CC\n    |\n-LL | }\n-   | ^\n+LL |             let _val = *ptr.0;\n+   |                        ^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:"}, {"sha": "18a30bd5a681373317d776d3504cf7701a55ecf8", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race_stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr?ref=d2e1c3738e292c46184e0d64841607bc88dce9d6", "patch": "@@ -13,7 +13,7 @@ help: The Read on thread `<unnamed>` is here\n   --> $DIR/dealloc_read_race_stack.rs:LL:CC\n    |\n LL |             *pointer.load(Ordering::Acquire)\n-   |                                            ^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:"}, {"sha": "afba81ee8f7aeac483548d8a0e0c3a91bc68c804", "filename": "src/tools/miri/tests/fail/data_race/read_write_race.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.stderr?ref=d2e1c3738e292c46184e0d64841607bc88dce9d6", "patch": "@@ -10,10 +10,10 @@ help: The Write on thread `<unnamed>` is here\n LL |             *c.0 = 64;\n    |             ^^^^^^^^^\n help: The Read on thread `<unnamed>` is here\n-  --> RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+  --> $DIR/read_write_race.rs:LL:CC\n    |\n-LL | }\n-   | ^\n+LL |             let _val = *c.0;\n+   |                        ^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:"}, {"sha": "e1e4604aa6e7f0c4cfb44269c20656a202b7b5b7", "filename": "src/tools/miri/tests/fail/data_race/read_write_race_stack.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr?ref=d2e1c3738e292c46184e0d64841607bc88dce9d6", "patch": "@@ -7,8 +7,8 @@ LL |             stack_var\n help: The Read on thread `<unnamed>` is here\n   --> $DIR/read_write_race_stack.rs:LL:CC\n    |\n-LL |             sleep(Duration::from_millis(200));\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |             stack_var\n+   |             ^^^^^^^^^\n help: The Write on thread `<unnamed>` is here\n   --> $DIR/read_write_race_stack.rs:LL:CC\n    |"}, {"sha": "aae90e0c9e9efc8d47b3adb55a333bbf8fe445f8", "filename": "src/tools/miri/tests/fail/data_race/relax_acquire_race.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr?ref=d2e1c3738e292c46184e0d64841607bc88dce9d6", "patch": "@@ -7,8 +7,8 @@ LL |                 *c.0\n help: The Read on thread `<unnamed>` is here\n   --> $DIR/relax_acquire_race.rs:LL:CC\n    |\n-LL |             if SYNC.load(Ordering::Acquire) == 2 {\n-   |                                           ^\n+LL |                 *c.0\n+   |                 ^^^^\n help: The Write on thread `<unnamed>` is here\n   --> $DIR/relax_acquire_race.rs:LL:CC\n    |"}, {"sha": "02413e6baa255ae4112319ca32cdf65226e6442b", "filename": "src/tools/miri/tests/fail/data_race/release_seq_race.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr?ref=d2e1c3738e292c46184e0d64841607bc88dce9d6", "patch": "@@ -7,8 +7,8 @@ LL |                 *c.0\n help: The Read on thread `<unnamed>` is here\n   --> $DIR/release_seq_race.rs:LL:CC\n    |\n-LL |             if SYNC.load(Ordering::Acquire) == 3 {\n-   |                                           ^\n+LL |                 *c.0\n+   |                 ^^^^\n help: The Write on thread `<unnamed>` is here\n   --> $DIR/release_seq_race.rs:LL:CC\n    |"}, {"sha": "9573ca95867692a1acdec48ec4648262c4c4bcf7", "filename": "src/tools/miri/tests/fail/data_race/release_seq_race_same_thread.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr?ref=d2e1c3738e292c46184e0d64841607bc88dce9d6", "patch": "@@ -7,8 +7,8 @@ LL |                 *c.0\n help: The Read on thread `<unnamed>` is here\n   --> $DIR/release_seq_race_same_thread.rs:LL:CC\n    |\n-LL |             if SYNC.load(Ordering::Acquire) == 2 {\n-   |                                           ^\n+LL |                 *c.0\n+   |                 ^^^^\n help: The Write on thread `<unnamed>` is here\n   --> $DIR/release_seq_race_same_thread.rs:LL:CC\n    |"}, {"sha": "ae53cc0c75f8185afe7498e6073f544c09ce8924", "filename": "src/tools/miri/tests/fail/data_race/rmw_race.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.stderr?ref=d2e1c3738e292c46184e0d64841607bc88dce9d6", "patch": "@@ -7,8 +7,8 @@ LL |                 *c.0\n help: The Read on thread `<unnamed>` is here\n   --> $DIR/rmw_race.rs:LL:CC\n    |\n-LL |             if SYNC.load(Ordering::Acquire) == 3 {\n-   |                                           ^\n+LL |                 *c.0\n+   |                 ^^^^\n help: The Write on thread `<unnamed>` is here\n   --> $DIR/rmw_race.rs:LL:CC\n    |"}, {"sha": "0853e0830c76bad1eb599f55af94f4658fc903a4", "filename": "src/tools/miri/tests/fail/data_race/stack_pop_race.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr?ref=d2e1c3738e292c46184e0d64841607bc88dce9d6", "patch": "@@ -10,10 +10,10 @@ help: The Deallocate on thread `main` is here\n LL | }\n    |  ^\n help: The Read on thread `<unnamed>` is here\n-  --> RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+  --> $DIR/stack_pop_race.rs:LL:CC\n    |\n-LL | }\n-   | ^\n+LL |         let _val = unsafe { *ptr.0 };\n+   |                             ^^^^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:"}, {"sha": "ff874bd9e829cb2e9bbaf08d75d5b37453e94677", "filename": "src/tools/miri/tests/fail/stacked_borrows/retag_data_race_read.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1c3738e292c46184e0d64841607bc88dce9d6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.stderr?ref=d2e1c3738e292c46184e0d64841607bc88dce9d6", "patch": "@@ -12,8 +12,8 @@ LL |         *p = 5;\n help: The Read on thread `<unnamed>` is here\n   --> $DIR/retag_data_race_read.rs:LL:CC\n    |\n-LL |     let t1 = std::thread::spawn(move || thread_1(p));\n-   |                                                  ^\n+LL |         let _r = &*p;\n+   |                  ^^^\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:"}]}