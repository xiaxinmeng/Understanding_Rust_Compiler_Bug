{"sha": "b71c3d250f23eb15829229e69d69fa7df1d0dfe3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MWMzZDI1MGYyM2ViMTU4MjkyMjllNjlkNjlmYTdkZjFkMGRmZTM=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-21T17:31:40Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-21T17:31:40Z"}, "message": "dlist: Add .rotate_to_front(), .rotate_to_back()\n\nAdd methods to move back element to front or front element to back,\nwithout reallocating nodes.", "tree": {"sha": "bd42c4be64ca3d4121a4cd0e38d8ab3ee21043b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd42c4be64ca3d4121a4cd0e38d8ab3ee21043b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b71c3d250f23eb15829229e69d69fa7df1d0dfe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b71c3d250f23eb15829229e69d69fa7df1d0dfe3", "html_url": "https://github.com/rust-lang/rust/commit/b71c3d250f23eb15829229e69d69fa7df1d0dfe3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b71c3d250f23eb15829229e69d69fa7df1d0dfe3/comments", "author": null, "committer": null, "parents": [{"sha": "78d0cf1409a0598a03d1e5474d9f417669e271bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/78d0cf1409a0598a03d1e5474d9f417669e271bd", "html_url": "https://github.com/rust-lang/rust/commit/78d0cf1409a0598a03d1e5474d9f417669e271bd"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "189f20c974011281d8d728933e659860fe65ab17", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b71c3d250f23eb15829229e69d69fa7df1d0dfe3/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71c3d250f23eb15829229e69d69fa7df1d0dfe3/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=b71c3d250f23eb15829229e69d69fa7df1d0dfe3", "patch": "@@ -258,6 +258,26 @@ impl<T> DList<T> {\n         DList{list_head: None, list_tail: Rawlink::none(), length: 0}\n     }\n \n+    /// Move the last element to the front of the list.\n+    ///\n+    /// If the list is empty, do nothing.\n+    #[inline]\n+    pub fn rotate_to_front(&mut self) {\n+        do self.pop_back_node().map_consume |tail| {\n+            self.push_front_node(tail)\n+        };\n+    }\n+\n+    /// Move the first element to the back of the list.\n+    ///\n+    /// If the list is empty, do nothing.\n+    #[inline]\n+    pub fn rotate_to_back(&mut self) {\n+        do self.pop_front_node().map_consume |head| {\n+            self.push_back_node(head)\n+        };\n+    }\n+\n     /// Add all elements from `other` to the end of the list\n     ///\n     /// O(1)\n@@ -688,6 +708,29 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_rotate() {\n+        let mut n = DList::new::<int>();\n+        n.rotate_to_back(); check_links(&n);\n+        assert_eq!(n.len(), 0);\n+        n.rotate_to_front(); check_links(&n);\n+        assert_eq!(n.len(), 0);\n+\n+        let v = ~[1,2,3,4,5];\n+        let mut m = list_from(v);\n+        m.rotate_to_back(); check_links(&m);\n+        m.rotate_to_front(); check_links(&m);\n+        assert_eq!(v.iter().collect::<~[&int]>(), m.iter().collect());\n+        m.rotate_to_front(); check_links(&m);\n+        m.rotate_to_front(); check_links(&m);\n+        m.pop_front(); check_links(&m);\n+        m.rotate_to_front(); check_links(&m);\n+        m.rotate_to_back(); check_links(&m);\n+        m.push_front(9); check_links(&m);\n+        m.rotate_to_front(); check_links(&m);\n+        assert_eq!(~[3,9,5,1,2], m.consume_iter().collect());\n+    }\n+\n     #[test]\n     fn test_iterator() {\n         let m = generate_test();"}]}