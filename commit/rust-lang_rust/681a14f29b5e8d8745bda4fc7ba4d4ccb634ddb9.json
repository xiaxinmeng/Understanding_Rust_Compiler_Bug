{"sha": "681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MWExNGYyOWI1ZThkODc0NWJkYTRmYzdiYTRkNGNjYjYzNGRkYjk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-20T05:23:19Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-01T22:30:27Z"}, "message": "item_like_imports: Allow unused ambiguous glob imports.", "tree": {"sha": "f93812e75fec09c4f247d64b8121feb1a2b853fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f93812e75fec09c4f247d64b8121feb1a2b853fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9", "html_url": "https://github.com/rust-lang/rust/commit/681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f582fa327e210ea5bf91d6b8f174f35fc9006054", "url": "https://api.github.com/repos/rust-lang/rust/commits/f582fa327e210ea5bf91d6b8f174f35fc9006054", "html_url": "https://github.com/rust-lang/rust/commit/f582fa327e210ea5bf91d6b8f174f35fc9006054"}], "stats": {"total": 89, "additions": 79, "deletions": 10}, "files": [{"sha": "d77258f44eb9a6ae31a0e41553b18e4178fc71a0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9", "patch": "@@ -874,6 +874,10 @@ enum NameBindingKind<'a> {\n         binding: &'a NameBinding<'a>,\n         directive: &'a ImportDirective<'a>,\n     },\n+    Ambiguity {\n+        b1: &'a NameBinding<'a>,\n+        b2: &'a NameBinding<'a>,\n+    }\n }\n \n #[derive(Clone, Debug)]\n@@ -885,6 +889,7 @@ impl<'a> NameBinding<'a> {\n             NameBindingKind::Module(module) => Some(module),\n             NameBindingKind::Def(_) => None,\n             NameBindingKind::Import { binding, .. } => binding.module(),\n+            NameBindingKind::Ambiguity { ..  } => None,\n         }\n     }\n \n@@ -893,6 +898,7 @@ impl<'a> NameBinding<'a> {\n             NameBindingKind::Def(def) => def,\n             NameBindingKind::Module(module) => module.def.unwrap(),\n             NameBindingKind::Import { binding, .. } => binding.def(),\n+            NameBindingKind::Ambiguity { .. } => Def::Err,\n         }\n     }\n \n@@ -922,6 +928,7 @@ impl<'a> NameBinding<'a> {\n     fn is_glob_import(&self) -> bool {\n         match self.kind {\n             NameBindingKind::Import { directive, .. } => directive.is_glob(),\n+            NameBindingKind::Ambiguity { .. } => true,\n             _ => false,\n         }\n     }\n@@ -932,6 +939,14 @@ impl<'a> NameBinding<'a> {\n             _ => true,\n         }\n     }\n+\n+    fn ambiguity(&self) -> Option<(&'a NameBinding<'a>, &'a NameBinding<'a>)> {\n+        match self.kind {\n+            NameBindingKind::Ambiguity { b1, b2 } => Some((b1, b2)),\n+            NameBindingKind::Import { binding, .. } => binding.ambiguity(),\n+            _ => None,\n+        }\n+    }\n }\n \n /// Interns the names of the primitive types.\n@@ -1249,7 +1264,8 @@ impl<'a> Resolver<'a> {\n         match ns { ValueNS => &mut self.value_ribs, TypeNS => &mut self.type_ribs }\n     }\n \n-    fn record_use(&mut self, name: Name, ns: Namespace, binding: &'a NameBinding<'a>) {\n+    fn record_use(&mut self, name: Name, ns: Namespace, binding: &'a NameBinding<'a>, span: Span)\n+                  -> bool /* true if an error was reported */ {\n         // track extern crates for unused_extern_crate lint\n         if let Some(DefId { krate, .. }) = binding.module().and_then(ModuleS::def_id) {\n             self.used_crates.insert(krate);\n@@ -1259,6 +1275,19 @@ impl<'a> Resolver<'a> {\n             self.used_imports.insert((directive.id, ns));\n             self.add_to_glob_map(directive.id, name);\n         }\n+\n+        if let Some((b1, b2)) = binding.ambiguity() {\n+            let msg1 = format!(\"`{}` could resolve to the name imported here\", name);\n+            let msg2 = format!(\"`{}` could also resolve to the name imported here\", name);\n+            self.session.struct_span_err(span, &format!(\"`{}` is ambiguous\", name))\n+                .span_note(b1.span, &msg1)\n+                .span_note(b2.span, &msg2)\n+                .note(&format!(\"Consider adding an explicit import of `{}` to disambiguate\", name))\n+                .emit();\n+            return true;\n+        }\n+\n+        false\n     }\n \n     fn add_to_glob_map(&mut self, id: NodeId, name: Name) {\n@@ -2294,7 +2323,8 @@ impl<'a> Resolver<'a> {\n                             Def::Struct(..) | Def::Variant(..) |\n                             Def::Const(..) | Def::AssociatedConst(..) if !always_binding => {\n                                 // A constant, unit variant, etc pattern.\n-                                self.record_use(ident.node.name, ValueNS, binding.unwrap());\n+                                let name = ident.node.name;\n+                                self.record_use(name, ValueNS, binding.unwrap(), ident.span);\n                                 Some(PathResolution::new(def))\n                             }\n                             Def::Struct(..) | Def::Variant(..) |"}, {"sha": "cb89231fc055155aa8bd7a312f225d70dc9d72cb", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9", "patch": "@@ -181,7 +181,9 @@ impl<'a> Resolver<'a> {\n                 if is_disallowed_private_import(binding) {\n                     return Failed(None);\n                 }\n-                self.record_use(name, ns, binding);\n+                if self.record_use(name, ns, binding, span) {\n+                    return Success(self.dummy_binding);\n+                }\n                 if !self.is_accessible(binding.vis) {\n                     self.privacy_errors.push(PrivacyError(span, name, binding));\n                 }\n@@ -323,7 +325,18 @@ impl<'a> Resolver<'a> {\n                     if !this.new_import_semantics || !old_binding.is_glob_import() {\n                         resolution.duplicate_globs.push(binding);\n                     } else if binding.def() != old_binding.def() {\n-                        resolution.duplicate_globs.push(binding);\n+                        resolution.binding = Some(this.arenas.alloc_name_binding(NameBinding {\n+                            kind: NameBindingKind::Ambiguity {\n+                                b1: old_binding,\n+                                b2: binding,\n+                            },\n+                            vis: if old_binding.vis.is_at_least(binding.vis, this) {\n+                                old_binding.vis\n+                            } else {\n+                                binding.vis\n+                            },\n+                            span: old_binding.span,\n+                        }));\n                     } else if !old_binding.vis.is_at_least(binding.vis, this) {\n                         // We are glob-importing the same item but with greater visibility.\n                         resolution.binding = Some(binding);\n@@ -597,7 +610,10 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n \n         for &(ns, result) in &[(ValueNS, value_result), (TypeNS, type_result)] {\n             if let Ok(binding) = result {\n-                self.record_use(name, ns, binding);\n+                if self.record_use(name, ns, binding, directive.span) {\n+                    self.resolution(module, name, ns).borrow_mut().binding =\n+                        Some(self.dummy_binding);\n+                }\n             }\n         }\n \n@@ -759,17 +775,16 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         }\n                     }\n \n-                    self.report_conflict(module, name, ns, duplicate_glob, binding);\n-                }\n-            } else if binding.is_glob_import() {\n-                for duplicate_glob in resolution.duplicate_globs.iter() {\n                     self.report_conflict(module, name, ns, duplicate_glob, binding);\n                 }\n             }\n \n             if binding.vis == ty::Visibility::Public &&\n                (binding.is_import() || binding.is_extern_crate()) {\n-                reexports.push(Export { name: name, def_id: binding.def().def_id() });\n+                let def = binding.def();\n+                if def != Def::Err {\n+                    reexports.push(Export { name: name, def_id: def.def_id() });\n+                }\n             }\n \n             if let NameBindingKind::Import { binding: orig_binding, directive, .. } = binding.kind {"}, {"sha": "05c0d9cd38e8365c8c5e1d6440ed42749299ca61", "filename": "src/test/compile-fail/imports/duplicate.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9/src%2Ftest%2Fcompile-fail%2Fimports%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9/src%2Ftest%2Fcompile-fail%2Fimports%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Fduplicate.rs?ref=681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9", "patch": "@@ -33,6 +33,20 @@ mod e {\n     pub use c::*; // ok\n }\n \n+mod f {\n+    pub use a::*; //~ NOTE `foo` could resolve to the name imported here\n+    pub use b::*; //~ NOTE `foo` could also resolve to the name imported here\n+}\n+\n+mod g {\n+    pub use a::*; //~ NOTE `foo` could resolve to the name imported here\n+    pub use f::*; //~ NOTE `foo` could also resolve to the name imported here\n+}\n+\n fn main() {\n     e::foo();\n+    f::foo(); //~ ERROR `foo` is ambiguous\n+              //~| NOTE Consider adding an explicit import of `foo` to disambiguate\n+    g::foo(); //~ ERROR `foo` is ambiguous\n+              //~| NOTE Consider adding an explicit import of `foo` to disambiguate\n }"}, {"sha": "195b99c9788e893ccdf0ca67649df55ce3c6650b", "filename": "src/test/run-pass/imports.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9/src%2Ftest%2Frun-pass%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9/src%2Ftest%2Frun-pass%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimports.rs?ref=681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9", "patch": "@@ -63,4 +63,14 @@ mod c {\n     }\n }\n \n+// Unused names can be ambiguous.\n+mod d {\n+    pub use foo::*; // This imports `f` in the value namespace.\n+    pub use bar::*; // This also imports `f` in the value namespace.\n+}\n+\n+mod e {\n+    pub use d::*; // n.b. Since `e::f` is not used, this is not considered to be a use of `d::f`.\n+}\n+\n fn main() {}"}]}