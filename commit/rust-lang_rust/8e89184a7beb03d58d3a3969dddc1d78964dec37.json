{"sha": "8e89184a7beb03d58d3a3969dddc1d78964dec37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlODkxODRhN2JlYjAzZDU4ZDNhMzk2OWRkZGMxZDc4OTY0ZGVjMzc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-11-20T16:59:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-02T22:35:06Z"}, "message": "rename `type_moves_by_default` to `type_is_copy_modulo_regions`", "tree": {"sha": "284381ebb0d87d42d785a1d93defc80917234336", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/284381ebb0d87d42d785a1d93defc80917234336"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e89184a7beb03d58d3a3969dddc1d78964dec37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e89184a7beb03d58d3a3969dddc1d78964dec37", "html_url": "https://github.com/rust-lang/rust/commit/8e89184a7beb03d58d3a3969dddc1d78964dec37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e89184a7beb03d58d3a3969dddc1d78964dec37/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c8fd2e80af577b105428ae5403ba13f289a7cf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8fd2e80af577b105428ae5403ba13f289a7cf5", "html_url": "https://github.com/rust-lang/rust/commit/4c8fd2e80af577b105428ae5403ba13f289a7cf5"}], "stats": {"total": 101, "additions": 55, "deletions": 46}, "files": [{"sha": "2d3fb137fafdd0aabbbbcc8942c877a5842098e6", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=8e89184a7beb03d58d3a3969dddc1d78964dec37", "patch": "@@ -1400,18 +1400,19 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             .verify_generic_bound(origin, kind, a, bound);\n     }\n \n-    pub fn type_moves_by_default(\n+    pub fn type_is_copy_modulo_regions(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n         ty: Ty<'tcx>,\n         span: Span,\n     ) -> bool {\n         let ty = self.resolve_type_vars_if_possible(&ty);\n+\n         // Even if the type may have no inference variables, during\n         // type-checking closure types are in local tables only.\n         if !self.in_progress_tables.is_some() || !ty.has_closure_types() {\n             if let Some((param_env, ty)) = self.tcx.lift_to_global(&(param_env, ty)) {\n-                return ty.moves_by_default(self.tcx.global_tcx(), param_env, span);\n+                return ty.is_copy_modulo_regions(self.tcx.global_tcx(), param_env, span);\n             }\n         }\n \n@@ -1421,7 +1422,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // rightly refuses to work with inference variables, but\n         // moves_by_default has a cache, which we want to use in other\n         // cases.\n-        !traits::type_known_to_meet_bound_modulo_regions(self, param_env, ty, copy_def_id, span)\n+        traits::type_known_to_meet_bound_modulo_regions(self, param_env, ty, copy_def_id, span)\n     }\n \n     /// Obtains the latest type of the given closure; this may be a"}, {"sha": "c1aa25b6b75c20f842ed1ed28e0e395ee93e2053", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=8e89184a7beb03d58d3a3969dddc1d78964dec37", "patch": "@@ -976,7 +976,7 @@ fn copy_or_move<'a, 'gcx, 'tcx>(mc: &mc::MemCategorizationContext<'a, 'gcx, 'tcx\n                                 move_reason: MoveReason)\n                                 -> ConsumeMode\n {\n-    if mc.type_moves_by_default(param_env, cmt.ty, cmt.span) {\n+    if !mc.type_is_copy_modulo_regions(param_env, cmt.ty, cmt.span) {\n         Move(move_reason)\n     } else {\n         Copy"}, {"sha": "370f0d1a6c6d7ff5eb5a2e4da5193462c260f67e", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=8e89184a7beb03d58d3a3969dddc1d78964dec37", "patch": "@@ -443,15 +443,16 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn type_moves_by_default(&self,\n-                                 param_env: ty::ParamEnv<'tcx>,\n-                                 ty: Ty<'tcx>,\n-                                 span: Span)\n-                                 -> bool {\n-        self.infcx.map(|infcx| infcx.type_moves_by_default(param_env, ty, span))\n+    pub fn type_is_copy_modulo_regions(\n+        &self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        ty: Ty<'tcx>,\n+        span: Span,\n+    ) -> bool {\n+        self.infcx.map(|infcx| infcx.type_is_copy_modulo_regions(param_env, ty, span))\n             .or_else(|| {\n                 self.tcx.lift_to_global(&(param_env, ty)).map(|(param_env, ty)| {\n-                    ty.moves_by_default(self.tcx.global_tcx(), param_env, span)\n+                    ty.is_copy_modulo_regions(self.tcx.global_tcx(), param_env, span)\n                 })\n             })\n             .unwrap_or(true)"}, {"sha": "4d026b97233ee22d83184f737b971ee17961459b", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=8e89184a7beb03d58d3a3969dddc1d78964dec37", "patch": "@@ -382,7 +382,7 @@ define_queries! { <'tcx>\n         /// might want to use `reveal_all()` method to change modes.\n         [] fn param_env: ParamEnv(DefId) -> ty::ParamEnv<'tcx>,\n \n-        /// Trait selection queries. These are best used by invoking `ty.moves_by_default()`,\n+        /// Trait selection queries. These are best used by invoking `ty.is_copy_modulo_regions()`,\n         /// `ty.is_copy()`, etc, since that will prune the environment where possible.\n         [] fn is_copy_raw: is_copy_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool,\n         [] fn is_sized_raw: is_sized_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool,"}, {"sha": "ac062a23786113a2659c505671d315b8d57a3690", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=8e89184a7beb03d58d3a3969dddc1d78964dec37", "patch": "@@ -203,7 +203,7 @@ impl<'tcx> ty::ParamEnv<'tcx> {\n                     let cause = ObligationCause { span, ..ObligationCause::dummy() };\n                     let ctx = traits::FulfillmentContext::new();\n                     match traits::fully_normalize(&infcx, ctx, cause, self, &ty) {\n-                        Ok(ty) => if infcx.type_moves_by_default(self, ty, span) {\n+                        Ok(ty) => if !infcx.type_is_copy_modulo_regions(self, ty, span) {\n                             infringing.push(field);\n                         }\n                         Err(errors) => {\n@@ -628,12 +628,12 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n     /// does copies even when the type actually doesn't satisfy the\n     /// full requirements for the `Copy` trait (cc #29149) -- this\n     /// winds up being reported as an error during NLL borrow check.\n-    pub fn moves_by_default(&'tcx self,\n-                            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                            param_env: ty::ParamEnv<'tcx>,\n-                            span: Span)\n-                            -> bool {\n-        !tcx.at(span).is_copy_raw(param_env.and(self))\n+    pub fn is_copy_modulo_regions(&'tcx self,\n+                                  tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                  param_env: ty::ParamEnv<'tcx>,\n+                                  span: Span)\n+                                  -> bool {\n+        tcx.at(span).is_copy_raw(param_env.and(self))\n     }\n \n     /// Checks whether values of this type `T` have a size known at\n@@ -947,11 +947,11 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // `ManuallyDrop` doesn't have a destructor regardless of field types.\n         ty::Adt(def, _) if Some(def.did) == tcx.lang_items().manually_drop() => false,\n \n-        // Issue #22536: We first query type_moves_by_default.  It sees a\n+        // Issue #22536: We first query `is_copy_modulo_regions`.  It sees a\n         // normalized version of the type, and therefore will definitely\n         // know whether the type implements Copy (and thus needs no\n         // cleanup/drop/zeroing) ...\n-        _ if !ty.moves_by_default(tcx, param_env, DUMMY_SP) => false,\n+        _ if ty.is_copy_modulo_regions(tcx, param_env, DUMMY_SP) => false,\n \n         // ... (issue #22536 continued) but as an optimization, still use\n         // prior logic of asking for the structural \"may drop\"."}, {"sha": "27b65b4ec48a4f36cb2f6715e43e4c6e680f8247", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8e89184a7beb03d58d3a3969dddc1d78964dec37", "patch": "@@ -540,7 +540,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingCopyImplementations {\n             return;\n         }\n         let param_env = ty::ParamEnv::empty();\n-        if !ty.moves_by_default(cx.tcx, param_env, item.span) {\n+        if ty.is_copy_modulo_regions(cx.tcx, param_env, item.span) {\n             return;\n         }\n         if param_env.can_type_implement_copy(cx.tcx, ty).is_ok() {"}, {"sha": "59e9fa23ece46ebb5562279186d4cf2188c2e72b", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=8e89184a7beb03d58d3a3969dddc1d78964dec37", "patch": "@@ -503,13 +503,17 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                 substs: tcx.mk_substs_trait(place_ty.to_ty(tcx), &[]),\n             };\n \n-            // In order to have a Copy operand, the type T of the value must be Copy. Note that we\n-            // prove that T: Copy, rather than using the type_moves_by_default test. This is\n-            // important because type_moves_by_default ignores the resulting region obligations and\n-            // assumes they pass. This can result in bounds from Copy impls being unsoundly ignored\n-            // (e.g., #29149). Note that we decide to use Copy before knowing whether the bounds\n-            // fully apply: in effect, the rule is that if a value of some type could implement\n-            // Copy, then it must.\n+            // In order to have a Copy operand, the type T of the\n+            // value must be Copy. Note that we prove that T: Copy,\n+            // rather than using the `is_copy_modulo_regions`\n+            // test. This is important because\n+            // `is_copy_modulo_regions` ignores the resulting region\n+            // obligations and assumes they pass. This can result in\n+            // bounds from Copy impls being unsoundly ignored (e.g.,\n+            // #29149). Note that we decide to use Copy before knowing\n+            // whether the bounds fully apply: in effect, the rule is\n+            // that if a value of some type could implement Copy, then\n+            // it must.\n             self.cx.prove_trait_ref(\n                 trait_ref,\n                 location.to_locations(),"}, {"sha": "5b20d412f0dd536dab88c7ce6de03c62e08236e9", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=8e89184a7beb03d58d3a3969dddc1d78964dec37", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub fn consume_by_copy_or_move(&self, place: Place<'tcx>) -> Operand<'tcx> {\n         let tcx = self.hir.tcx();\n         let ty = place.ty(&self.local_decls, tcx).to_ty(tcx);\n-        if self.hir.type_moves_by_default(ty, DUMMY_SP) {\n+        if !self.hir.type_is_copy_modulo_regions(ty, DUMMY_SP) {\n             Operand::Move(place)\n         } else {\n             Operand::Copy(place)"}, {"sha": "07f3c38c62c52365ba90e59f735bc4092f928f7d", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=8e89184a7beb03d58d3a3969dddc1d78964dec37", "patch": "@@ -223,8 +223,8 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         self.check_overflow\n     }\n \n-    pub fn type_moves_by_default(&self, ty: Ty<'tcx>, span: Span) -> bool {\n-        self.infcx.type_moves_by_default(self.param_env, ty, span)\n+    pub fn type_is_copy_modulo_regions(&self, ty: Ty<'tcx>, span: Span) -> bool {\n+        self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span)\n     }\n }\n "}, {"sha": "c104af7a7d81bd6dd177caf68fea14faaa59872d", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=8e89184a7beb03d58d3a3969dddc1d78964dec37", "patch": "@@ -545,7 +545,7 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n                     match bm {\n                         ty::BindByValue(..) => {\n                             let pat_ty = cx.tables.node_id_to_type(p.hir_id);\n-                            if pat_ty.moves_by_default(cx.tcx, cx.param_env, pat.span) {\n+                            if !pat_ty.is_copy_modulo_regions(cx.tcx, cx.param_env, pat.span) {\n                                 check_move(p, sub.as_ref().map(|p| &**p), span_vec);\n                             }\n                         }"}, {"sha": "2aa44cc181a568c893714563a15078a36dc6f2ad", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=8e89184a7beb03d58d3a3969dddc1d78964dec37", "patch": "@@ -310,7 +310,7 @@ fn build_clone_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"build_clone_shim(def_id={:?})\", def_id);\n \n     let mut builder = CloneShimBuilder::new(tcx, def_id, self_ty);\n-    let is_copy = !self_ty.moves_by_default(tcx, tcx.param_env(def_id), builder.span);\n+    let is_copy = self_ty.is_copy_modulo_regions(tcx, tcx.param_env(def_id), builder.span);\n \n     let dest = Place::Local(RETURN_PLACE);\n     let src = Place::Local(Local::new(1+0)).deref();"}, {"sha": "eb151b56bed65f8d63dd585cc842873a5656996f", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=8e89184a7beb03d58d3a3969dddc1d78964dec37", "patch": "@@ -224,8 +224,11 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                                         \"non-field projection {:?} from union?\",\n                                         place)\n                                 };\n-                                if elem_ty.moves_by_default(self.tcx, self.param_env,\n-                                                            self.source_info.span) {\n+                                if !elem_ty.is_copy_modulo_regions(\n+                                    self.tcx,\n+                                    self.param_env,\n+                                    self.source_info.span,\n+                                ) {\n                                     self.require_unsafe(\n                                         \"assignment to non-`Copy` union field\",\n                                         \"the previous content of the field will be dropped, which \\"}, {"sha": "7a788f2de7f2f199936ebf371a3d44bbc07bc25b", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=8e89184a7beb03d58d3a3969dddc1d78964dec37", "patch": "@@ -353,9 +353,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                         // Maybe add `*`? Only if `T: Copy`.\n                         _ => {\n-                            if !self.infcx.type_moves_by_default(self.param_env,\n-                                                                checked,\n-                                                                sp) {\n+                            if self.infcx.type_is_copy_modulo_regions(self.param_env,\n+                                                                      checked,\n+                                                                      sp) {\n                                 // do not suggest if the span comes from a macro (#52783)\n                                 if let (Ok(code),\n                                         true) = (cm.span_to_snippet(sp), sp == expr.span) {"}, {"sha": "7c871601af3088bc29672c15dfec74c865c40735", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=8e89184a7beb03d58d3a3969dddc1d78964dec37", "patch": "@@ -262,9 +262,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             let mut suggested_deref = false;\n                             if let Ref(_, mut rty, _) = lhs_ty.sty {\n                                 if {\n-                                    !self.infcx.type_moves_by_default(self.param_env,\n-                                                                        rty,\n-                                                                        lhs_expr.span) &&\n+                                    self.infcx.type_is_copy_modulo_regions(self.param_env,\n+                                                                           rty,\n+                                                                           lhs_expr.span) &&\n                                         self.lookup_op_method(rty,\n                                                               &[rhs_ty],\n                                                               Op::Binary(op, is_assign))\n@@ -334,9 +334,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             let mut suggested_deref = false;\n                             if let Ref(_, mut rty, _) = lhs_ty.sty {\n                                 if {\n-                                    !self.infcx.type_moves_by_default(self.param_env,\n-                                                                      rty,\n-                                                                      lhs_expr.span) &&\n+                                    self.infcx.type_is_copy_modulo_regions(self.param_env,\n+                                                                           rty,\n+                                                                           lhs_expr.span) &&\n                                         self.lookup_op_method(rty,\n                                                               &[rhs_ty],\n                                                               Op::Binary(op, is_assign))"}, {"sha": "1fc5c39d5c9fd2e37e99a3463824ccf10cb2b953", "filename": "src/test/ui/coherence/coherence-subtyping.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e89184a7beb03d58d3a3969dddc1d78964dec37/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr?ref=8e89184a7beb03d58d3a3969dddc1d78964dec37", "patch": "@@ -7,7 +7,7 @@ LL | impl TheTrait for for<'a,'b> fn(&'a u8, &'b u8) -> &'a u8 {\n LL | impl TheTrait for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n    |\n-   = note: this behavior recently changed as a result of a bug fix; see #XXX for details\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n \n error: aborting due to previous error\n "}]}