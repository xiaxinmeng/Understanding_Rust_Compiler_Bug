{"sha": "a745efd5665b1c9a0d7e6af3f34493093896b701", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NDVlZmQ1NjY1YjFjOWEwZDdlNmFmM2YzNDQ5MzA5Mzg5NmI3MDE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-02T16:11:48Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-02T16:11:53Z"}, "message": "Add smarter macro check for block_in_if (fixes #528)", "tree": {"sha": "cf45d0d39b8eb5f0032aab92199650a96a393602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf45d0d39b8eb5f0032aab92199650a96a393602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a745efd5665b1c9a0d7e6af3f34493093896b701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a745efd5665b1c9a0d7e6af3f34493093896b701", "html_url": "https://github.com/rust-lang/rust/commit/a745efd5665b1c9a0d7e6af3f34493093896b701", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a745efd5665b1c9a0d7e6af3f34493093896b701/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32cf6e32f66980cea7630edacaa66d1bd0497b2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/32cf6e32f66980cea7630edacaa66d1bd0497b2e", "html_url": "https://github.com/rust-lang/rust/commit/32cf6e32f66980cea7630edacaa66d1bd0497b2e"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "ce01f591c59a24a6679170e3c6588f31597718d1", "filename": "src/block_in_if_condition.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a745efd5665b1c9a0d7e6af3f34493093896b701/src%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745efd5665b1c9a0d7e6af3f34493093896b701/src%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fblock_in_if_condition.rs?ref=a745efd5665b1c9a0d7e6af3f34493093896b701", "patch": "@@ -79,13 +79,18 @@ impl LateLintPass for BlockInIfCondition {\n                         if let Some(ref ex) = block.expr {\n                             // don't dig into the expression here, just suggest that they remove\n                             // the block\n-\n+                            if differing_macro_contexts(expr.span, ex.span) {\n+                                return;\n+                            }\n                             span_help_and_lint(cx, BLOCK_IN_IF_CONDITION_EXPR, check.span,\n                                 BRACED_EXPR_MESSAGE,\n                                 &format!(\"try\\nif {} {} ... \", snippet_block(cx, ex.span, \"..\"),\n                                 snippet_block(cx, then.span, \"..\")));\n                         }\n                     } else {\n+                        if differing_macro_contexts(expr.span, block.stmts[0].span) {\n+                            return;\n+                        }\n                         // move block higher\n                         span_help_and_lint(cx, BLOCK_IN_IF_CONDITION_STMT, check.span,\n                             COMPLEX_BLOCK_MESSAGE,"}, {"sha": "90e8e27b4f05540e18bc7ecfecf4ded656d6eea3", "filename": "src/utils.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a745efd5665b1c9a0d7e6af3f34493093896b701/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745efd5665b1c9a0d7e6af3f34493093896b701/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=a745efd5665b1c9a0d7e6af3f34493093896b701", "patch": "@@ -74,6 +74,10 @@ macro_rules! if_let_chain {\n     };\n }\n \n+/// Returns true if the two spans come from differing expansions (i.e. one is from a macro and one isn't)\n+pub fn differing_macro_contexts(sp1: Span, sp2: Span) -> bool {\n+    sp1.expn_id != sp2.expn_id\n+}\n /// returns true if this expn_info was expanded by any macro\n pub fn in_macro<T: LintContext>(cx: &T, span: Span) -> bool {\n     cx.sess().codemap().with_expn_info(span.expn_id,"}, {"sha": "0a68d80c339e2ca1dda4c4ad2390d3266d2551d3", "filename": "tests/compile-fail/block_in_if_condition.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a745efd5665b1c9a0d7e6af3f34493093896b701/tests%2Fcompile-fail%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745efd5665b1c9a0d7e6af3f34493093896b701/tests%2Fcompile-fail%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fblock_in_if_condition.rs?ref=a745efd5665b1c9a0d7e6af3f34493093896b701", "patch": "@@ -5,6 +5,15 @@\n #![deny(block_in_if_condition_stmt)]\n #![allow(unused)]\n \n+\n+macro_rules! blocky {\n+    () => {{true}}\n+}\n+\n+fn macro_if() {\n+    if blocky!() {\n+    }\n+}\n fn condition_has_block() -> i32 {\n \n     if { //~ERROR in an 'if' condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a 'let'"}]}