{"sha": "026089bdb54b8501bf62517bcdc2b8e5bc378c55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNjA4OWJkYjU0Yjg1MDFiZjYyNTE3YmNkYzJiOGU1YmMzNzhjNTU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-08T01:54:27Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-14T22:42:59Z"}, "message": "Rename `sym::nontrapping_fptoint`.", "tree": {"sha": "53e414536b90b2d66a0a6fc7a153fe35064b0a5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53e414536b90b2d66a0a6fc7a153fe35064b0a5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/026089bdb54b8501bf62517bcdc2b8e5bc378c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/026089bdb54b8501bf62517bcdc2b8e5bc378c55", "html_url": "https://github.com/rust-lang/rust/commit/026089bdb54b8501bf62517bcdc2b8e5bc378c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/026089bdb54b8501bf62517bcdc2b8e5bc378c55/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2002ebacfbca288830a3c308ddc8189705c608fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/2002ebacfbca288830a3c308ddc8189705c608fe", "html_url": "https://github.com/rust-lang/rust/commit/2002ebacfbca288830a3c308ddc8189705c608fe"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "6a38323f7ca9ef343748173860ee4049ec4e8b30", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/026089bdb54b8501bf62517bcdc2b8e5bc378c55/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026089bdb54b8501bf62517bcdc2b8e5bc378c55/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=026089bdb54b8501bf62517bcdc2b8e5bc378c55", "patch": "@@ -658,7 +658,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         // `nontrapping-fptoint` target feature is activated. We'll use those if\n         // they are available.\n         if self.sess().target.target.arch == \"wasm32\"\n-            && self.sess().target_features.contains(&sym::nontrapping_fptoint)\n+            && self.sess().target_features.contains(&sym::nontrapping_dash_fptoint)\n         {\n             let src_ty = self.cx.val_ty(val);\n             let float_width = self.cx.float_width(src_ty);\n@@ -683,7 +683,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         // `nontrapping-fptoint` target feature is activated. We'll use those if\n         // they are available.\n         if self.sess().target.target.arch == \"wasm32\"\n-            && self.sess().target_features.contains(&sym::nontrapping_fptoint)\n+            && self.sess().target_features.contains(&sym::nontrapping_dash_fptoint)\n         {\n             let src_ty = self.cx.val_ty(val);\n             let float_width = self.cx.float_width(src_ty);"}, {"sha": "85039f42a10276926bead887edea877a5709b04d", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/026089bdb54b8501bf62517bcdc2b8e5bc378c55/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026089bdb54b8501bf62517bcdc2b8e5bc378c55/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=026089bdb54b8501bf62517bcdc2b8e5bc378c55", "patch": "@@ -102,9 +102,13 @@ symbols! {\n         Union:              \"union\",\n     }\n \n-    // Symbols that can be referred to with rustc_span::sym::*. The symbol is\n-    // the stringified identifier unless otherwise specified (e.g.\n-    // `proc_dash_macro` represents \"proc-macro\").\n+    // Pre-interned symbols that can be referred to with `rustc_span::sym::*`.\n+    //\n+    // The symbol is the stringified identifier unless otherwise specified, in\n+    // which case the name should mention the non-identifier punctuation.\n+    // E.g. `sym::proc_dash_macro` represents \"proc-macro\", and it shouldn't be\n+    // called `sym::proc_macro` because then it's easy to mistakenly think it\n+    // represents \"proc_macro\".\n     //\n     // As well as the symbols listed, there are symbols for the the strings\n     // \"0\", \"1\", ..., \"9\", which are accessible via `sym::integer`.\n@@ -567,7 +571,7 @@ symbols! {\n         non_exhaustive,\n         non_modrs_mods,\n         nontemporal_store,\n-        nontrapping_fptoint: \"nontrapping-fptoint\",\n+        nontrapping_dash_fptoint: \"nontrapping-fptoint\",\n         noreturn,\n         no_niche,\n         no_sanitize,"}]}