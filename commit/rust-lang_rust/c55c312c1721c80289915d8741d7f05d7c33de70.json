{"sha": "c55c312c1721c80289915d8741d7f05d7c33de70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NWMzMTJjMTcyMWM4MDI4OTkxNWQ4NzQxZDdmMDVkN2MzM2RlNzA=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-12-11T19:48:12Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-01-04T02:56:53Z"}, "message": "Fix tidy errors", "tree": {"sha": "4a6f7ca47a2d6fd0b50d54388545af5e7a2af63b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a6f7ca47a2d6fd0b50d54388545af5e7a2af63b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c55c312c1721c80289915d8741d7f05d7c33de70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlwuy3UACgkQtAh+UQ6Y\nsWRBrxAAlKaCQQGlw7fGl6SrfRrHyWstSujukgWrxuYjTtTpLxKmHeYVnLC0/paO\nBTYSsB4ZgGWoDhBHZZAueJG0JFZK6CdOjqMQiNSXmroq7YxslSxYHPdtTWkdBbZl\ngceoVa4mawidXXWcbEyGfIDutF0FvifiT/yJlBTrqfh08M6RAXsnbRj2Iu4Y/tzx\nxKylgPV9WwJCY+/DwTwjmIvPQE8MBNFsXkH3+HXx2QI2Tb0MI2ivCpx5zhaGQTKj\nuKkVcv+6+pBfDNaHUDnRAxqVKYJHxJylWewVTQqg5CR5dSnEfcVLjFGU+PJVibSA\nf0uBzrMNDzo+TKv/I1Qu80ICS0Z0us/81XRZOO+keMTx7kPIsE0WxVlittNXOFgr\nwvb9aVXSDmjAiBM7lK725pjqNTPctUUWnQ5a1v2wmHvOmFrnoLm4Hd5OI1mzbGhC\nxX8MNRlwerZ56b2Lej+8zz0r8SOSdOjk17H6C98wHjQpZqnPZhULijmESHBDjXw2\noLEqyBQUi36vmnbTTHMjWYgBxGdA9uxGMZNiIoUB18XeoAbYMuyouiDW5h1gs+W6\nvpVgoUgaXUyALsuBVNFznPflfaNTSYqy98DKC3uzFU0f1iT4B3d2Jahl/X7Idx+6\n2mA+fXg7TcwudtFHdOkgl6YyYeLgLt5fnSilB7neRpZRsOu6pew=\n=FRCq\n-----END PGP SIGNATURE-----", "payload": "tree 4a6f7ca47a2d6fd0b50d54388545af5e7a2af63b\nparent 6d54672acf431ceae0b057f45e0351e84793d9f2\nauthor Aaron Hill <aa1ronham@gmail.com> 1544557692 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1546570613 -0500\n\nFix tidy errors\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c55c312c1721c80289915d8741d7f05d7c33de70", "html_url": "https://github.com/rust-lang/rust/commit/c55c312c1721c80289915d8741d7f05d7c33de70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c55c312c1721c80289915d8741d7f05d7c33de70/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d54672acf431ceae0b057f45e0351e84793d9f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d54672acf431ceae0b057f45e0351e84793d9f2", "html_url": "https://github.com/rust-lang/rust/commit/6d54672acf431ceae0b057f45e0351e84793d9f2"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "54e015d1b37a5c7f433468fe563c01f3fb6f2fef", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c55c312c1721c80289915d8741d7f05d7c33de70/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55c312c1721c80289915d8741d7f05d7c33de70/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=c55c312c1721c80289915d8741d7f05d7c33de70", "patch": "@@ -657,7 +657,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         &mut self,\n         stack: TraitObligationStackList<'o, 'tcx>,\n         predicates: I,\n-        recursion_depth: usize \n+        recursion_depth: usize\n     ) -> Result<EvaluationResult, OverflowError>\n     where\n         I: IntoIterator<Item = &'a PredicateObligation<'tcx>>,\n@@ -708,7 +708,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::Predicate::Trait(ref t) => {\n                 debug_assert!(!t.has_escaping_bound_vars());\n                 let obligation = obligation.with(t.clone());\n-                self.evaluate_trait_predicate_recursively(previous_stack, obligation, recursion_depth)\n+                self.evaluate_trait_predicate_recursively(previous_stack, obligation,\n+                                                          recursion_depth)\n             }\n \n             ty::Predicate::Subtype(ref p) => {\n@@ -717,7 +718,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     .subtype_predicate(&obligation.cause, obligation.param_env, p)\n                 {\n                     Some(Ok(InferOk { obligations, .. })) => {\n-                        self.evaluate_predicates_recursively(previous_stack, &obligations, recursion_depth)\n+                        self.evaluate_predicates_recursively(previous_stack, &obligations,\n+                                                             recursion_depth)\n                     }\n                     Some(Err(_)) => Ok(EvaluatedToErr),\n                     None => Ok(EvaluatedToAmbig),\n@@ -732,7 +734,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 obligation.cause.span,\n             ) {\n                 Some(obligations) => {\n-                    self.evaluate_predicates_recursively(previous_stack, obligations.iter(), recursion_depth)\n+                    self.evaluate_predicates_recursively(previous_stack, obligations.iter(),\n+                        recursion_depth)\n                 }\n                 None => Ok(EvaluatedToAmbig),\n             },\n@@ -1108,7 +1111,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n     // The weird return type of this function allows it to be used with the 'try' (?)\n     // operator within certain functions\n-    fn check_recursion_limit<T: Display + TypeFoldable<'tcx>>(&self, recursion_depth: usize, obligation: &Obligation<'tcx, T>,\n+    fn check_recursion_limit<T: Display + TypeFoldable<'tcx>>(&self, recursion_depth: usize,\n+                                                              obligation: &Obligation<'tcx, T>,\n     ) -> Result<(), OverflowError>  {\n         let recursion_limit = *self.infcx.tcx.sess.recursion_limit.get();\n         if recursion_depth >= recursion_limit {\n@@ -1813,7 +1817,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         self.evaluation_probe(|this| {\n             match this.match_where_clause_trait_ref(stack.obligation, where_clause_trait_ref) {\n                 Ok(obligations) => {\n-                    this.evaluate_predicates_recursively(stack.list(), obligations.iter(), recursion_depth)\n+                    this.evaluate_predicates_recursively(stack.list(), obligations.iter(),\n+                        recursion_depth)\n                 }\n                 Err(()) => Ok(EvaluatedToErr),\n             }"}]}