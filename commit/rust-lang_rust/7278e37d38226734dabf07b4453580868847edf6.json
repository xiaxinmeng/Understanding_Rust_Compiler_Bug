{"sha": "7278e37d38226734dabf07b4453580868847edf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNzhlMzdkMzgyMjY3MzRkYWJmMDdiNDQ1MzU4MDg2ODg0N2VkZjY=", "commit": {"author": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2017-12-09T20:16:54Z"}, "committer": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-03-17T18:24:27Z"}, "message": "update FIXME(#6393) to point to issue 43234 (tracking issue for non-lexical lifetimes)", "tree": {"sha": "b2053893e7773b9269644e0367048945e818d211", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2053893e7773b9269644e0367048945e818d211"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7278e37d38226734dabf07b4453580868847edf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7278e37d38226734dabf07b4453580868847edf6", "html_url": "https://github.com/rust-lang/rust/commit/7278e37d38226734dabf07b4453580868847edf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7278e37d38226734dabf07b4453580868847edf6/comments", "author": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61b6bf54fdf56195baf9a8ee7383551b0d468c81", "url": "https://api.github.com/repos/rust-lang/rust/commits/61b6bf54fdf56195baf9a8ee7383551b0d468c81", "html_url": "https://github.com/rust-lang/rust/commit/61b6bf54fdf56195baf9a8ee7383551b0d468c81"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "1e8476d3880c8a4fc197c0c95e647ebca69ccf62", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7278e37d38226734dabf07b4453580868847edf6/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7278e37d38226734dabf07b4453580868847edf6/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=7278e37d38226734dabf07b4453580868847edf6", "patch": "@@ -1872,7 +1872,7 @@ impl<I: Iterator> Iterator for Peekable<I> {\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<I::Item> {\n-        // FIXME(#6393): merge these when borrow-checking gets better.\n+        // FIXME(#43234): merge these when borrow-checking gets better.\n         if n == 0 {\n             match self.peeked.take() {\n                 Some(v) => v,"}, {"sha": "19f33ef5d45a83f6a6b4b964c613f6574bfa924b", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7278e37d38226734dabf07b4453580868847edf6/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7278e37d38226734dabf07b4453580868847edf6/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=7278e37d38226734dabf07b4453580868847edf6", "patch": "@@ -177,7 +177,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                 });\n             }\n             DropStyle::Conditional => {\n-                let unwind = self.unwind; // FIXME(#6393)\n+                let unwind = self.unwind; // FIXME(#43234)\n                 let succ = self.succ;\n                 let drop_bb = self.complete_drop(Some(DropFlagMode::Deep), succ, unwind);\n                 self.elaborator.patch().patch_terminator(bb, TerminatorKind::Goto {\n@@ -268,7 +268,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         // Clear the \"master\" drop flag at the end. This is needed\n         // because the \"master\" drop protects the ADT's discriminant,\n         // which is invalidated after the ADT is dropped.\n-        let (succ, unwind) = (self.succ, self.unwind); // FIXME(#6393)\n+        let (succ, unwind) = (self.succ, self.unwind); // FIXME(#43234)\n         (\n             self.drop_flag_reset_block(DropFlagMode::Shallow, succ, unwind),\n             unwind.map(|unwind| {\n@@ -344,7 +344,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         let interior = self.place.clone().deref();\n         let interior_path = self.elaborator.deref_subpath(self.path);\n \n-        let succ = self.succ; // FIXME(#6393)\n+        let succ = self.succ; // FIXME(#43234)\n         let unwind = self.unwind;\n         let succ = self.box_free_block(ty, succ, unwind);\n         let unwind_succ = self.unwind.map(|unwind| {\n@@ -717,7 +717,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                            ptr_based)\n         });\n \n-        let succ = self.succ; // FIXME(#6393)\n+        let succ = self.succ; // FIXME(#43234)\n         let loop_block = self.drop_loop(\n             succ,\n             cur,\n@@ -798,7 +798,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                 self.open_drop_for_adt(def, substs)\n             }\n             ty::TyDynamic(..) => {\n-                let unwind = self.unwind; // FIXME(#6393)\n+                let unwind = self.unwind; // FIXME(#43234)\n                 let succ = self.succ;\n                 self.complete_drop(Some(DropFlagMode::Deep), succ, unwind)\n             }\n@@ -849,7 +849,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n \n     fn elaborated_drop_block<'a>(&mut self) -> BasicBlock {\n         debug!(\"elaborated_drop_block({:?})\", self);\n-        let unwind = self.unwind; // FIXME(#6393)\n+        let unwind = self.unwind; // FIXME(#43234)\n         let succ = self.succ;\n         let blk = self.drop_block(succ, unwind);\n         self.elaborate_drop(blk);\n@@ -882,7 +882,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n             args: vec![Operand::Move(self.place.clone())],\n             destination: Some((unit_temp, target)),\n             cleanup: None\n-        }; // FIXME(#6393)\n+        }; // FIXME(#43234)\n         let free_block = self.new_block(unwind, call);\n \n         let block_start = Location { block: free_block, statement_index: 0 };"}]}