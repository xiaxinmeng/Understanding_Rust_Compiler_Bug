{"sha": "965dbf6c288150e9d3984a49cbf70c8fb358296c", "node_id": "C_kwDOAAsO6NoAKDk2NWRiZjZjMjg4MTUwZTlkMzk4NGE0OWNiZjcwYzhmYjM1ODI5NmM", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-03T23:34:59Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-07T19:19:28Z"}, "message": "First batch of review feedback changes from #102110", "tree": {"sha": "348f1ca531536dba1143414ac7e33031e7033aac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/348f1ca531536dba1143414ac7e33031e7033aac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/965dbf6c288150e9d3984a49cbf70c8fb358296c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/965dbf6c288150e9d3984a49cbf70c8fb358296c", "html_url": "https://github.com/rust-lang/rust/commit/965dbf6c288150e9d3984a49cbf70c8fb358296c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/965dbf6c288150e9d3984a49cbf70c8fb358296c/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "be4059dd3e64a9b83db35dd7e14512e10b6eac82", "url": "https://api.github.com/repos/rust-lang/rust/commits/be4059dd3e64a9b83db35dd7e14512e10b6eac82", "html_url": "https://github.com/rust-lang/rust/commit/be4059dd3e64a9b83db35dd7e14512e10b6eac82"}], "stats": {"total": 65, "additions": 43, "deletions": 22}, "files": [{"sha": "b9e4499d47f362ab5010ced819a5c6f67f8d16d3", "filename": "compiler/rustc_error_messages/locales/en-US/middle.ftl", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/965dbf6c288150e9d3984a49cbf70c8fb358296c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmiddle.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/965dbf6c288150e9d3984a49cbf70c8fb358296c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmiddle.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmiddle.ftl?ref=965dbf6c288150e9d3984a49cbf70c8fb358296c", "patch": "@@ -18,3 +18,12 @@ middle_limit_invalid =\n \n middle_const_eval_non_int =\n     constant evaluation of enum discriminant resulted in non-integer\n+\n+middle_unknown_layout =\n+    the type `{$ty}` has an unknown layout\n+\n+middle_values_too_big =\n+    values of the type `{$ty}` are too big for the current architecture\n+\n+middle_cannot_be_normalized =\n+    unable to determine layout for `{$ty}` because `{$failure_ty}` cannot be normalized"}, {"sha": "00ed6b2150308a1350e81d77f31325e76503444f", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/965dbf6c288150e9d3984a49cbf70c8fb358296c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/965dbf6c288150e9d3984a49cbf70c8fb358296c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=965dbf6c288150e9d3984a49cbf70c8fb358296c", "patch": "@@ -526,7 +526,7 @@ passes_no_main_function =\n     .main_must_be_defined_at_crate = the main function must be defined at the crate level{$has_filename ->\n         [true] {\" \"}(in `{$filename}`)\n         *[false] {\"\"}\n-        }\n+    }\n     .consider_adding_main_to_file = consider adding a `main` function to `{$filename}`\n     .consider_adding_main_at_crate = consider adding a `main` function at the crate level\n     .teach_note = If you don't know the basics of Rust, you can go look to the Rust Book to get started: https://doc.rust-lang.org/book/"}, {"sha": "6045c1acdd0323703b2d923e08940ae28a84c860", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/965dbf6c288150e9d3984a49cbf70c8fb358296c/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965dbf6c288150e9d3984a49cbf70c8fb358296c/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=965dbf6c288150e9d3984a49cbf70c8fb358296c", "patch": "@@ -191,10 +191,29 @@ pub enum LayoutError<'tcx> {\n \n impl<'a> IntoDiagnostic<'a, !> for LayoutError<'a> {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, !> {\n-        handler.struct_fatal(self.to_string())\n+        let mut diag = handler.struct_fatal(\"\");\n+\n+        match self {\n+            LayoutError::Unknown(ty) => {\n+                diag.set_arg(\"ty\", ty);\n+                diag.set_primary_message(rustc_errors::fluent::middle::unknown_layout);\n+            }\n+            LayoutError::SizeOverflow(ty) => {\n+                diag.set_arg(\"ty\", ty);\n+                diag.set_primary_message(rustc_errors::fluent::middle::values_too_big);\n+            }\n+            LayoutError::NormalizationFailure(ty, e) => {\n+                diag.set_arg(\"ty\", ty);\n+                diag.set_arg(\"failure_ty\", e.get_type_for_failure());\n+                diag.set_primary_message(rustc_errors::fluent::middle::cannot_be_normalized);\n+            }\n+        }\n+        diag\n     }\n }\n \n+// FIXME: Once the other errors that embed this error have been converted to translateable\n+// diagnostics, this Display impl should be removed.\n impl<'tcx> fmt::Display for LayoutError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {"}, {"sha": "2070a8457a6a44328753bd9442fcd6c399b40bc6", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/965dbf6c288150e9d3984a49cbf70c8fb358296c/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965dbf6c288150e9d3984a49cbf70c8fb358296c/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=965dbf6c288150e9d3984a49cbf70c8fb358296c", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::diagnostic_items::DiagnosticItems;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{kw::Empty, sym, Symbol};\n \n use crate::errors::{DuplicateDiagnosticItem, DuplicateDiagnosticItemInCrate};\n \n@@ -46,7 +46,7 @@ fn collect_item(tcx: TyCtxt<'_>, items: &mut DiagnosticItems, name: Symbol, item\n                 None => tcx.sess.emit_err(DuplicateDiagnosticItemInCrate {\n                     span: orig_span,\n                     // FIXME: We should not provide `name` to `orig_crate_name`. How do you create a blank/empty symbol?\n-                    orig_crate_name: orig_crate_name.unwrap_or(name),\n+                    orig_crate_name: orig_crate_name.unwrap_or(Empty),\n                     have_orig_crate_name: orig_crate_name.map(|_| ()),\n                     crate_name: tcx.crate_name(item_def_id.krate),\n                     name,"}, {"sha": "e7d652c504874bb42ba4fdcfe9596157b4c0fb3e", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/965dbf6c288150e9d3984a49cbf70c8fb358296c/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965dbf6c288150e9d3984a49cbf70c8fb358296c/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=965dbf6c288150e9d3984a49cbf70c8fb358296c", "patch": "@@ -830,14 +830,6 @@ pub struct UnrecognizedField {\n     pub name: Symbol,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(passes::layout)]\n-pub struct Layout {\n-    #[primary_span]\n-    pub span: Span,\n-    pub layout_error: String,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(passes::feature_stable_twice, code = \"E0711\")]\n pub struct FeatureStableTwice {\n@@ -1259,7 +1251,7 @@ pub struct IncorrectTarget<'a> {\n     pub span: Span,\n     #[label]\n     pub generics_span: Span,\n-    pub name: &'a str,\n+    pub name: &'a str, // cannot be symbol because it renders e.g. `r#fn` instead of `fn`\n     pub kind: &'static str,\n     pub num: usize,\n     pub actual_num: usize,"}, {"sha": "3cfccbba84eaaa0c3a8198cdc5bf0af15e08ae99", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/965dbf6c288150e9d3984a49cbf70c8fb358296c/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965dbf6c288150e9d3984a49cbf70c8fb358296c/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=965dbf6c288150e9d3984a49cbf70c8fb358296c", "patch": "@@ -20,7 +20,7 @@ use rustc_hir::lang_items::{extract, GenericRequirement, ITEM_REFS};\n use rustc_hir::{HirId, LangItem, LanguageItems, Target};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::cstore::ExternCrate;\n-use rustc_span::{Span, Symbol};\n+use rustc_span::{symbol::kw::Empty, Span};\n \n use rustc_middle::ty::query::Providers;\n \n@@ -66,7 +66,7 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n                 let local_span = self.tcx.hir().span_if_local(item_def_id);\n                 let lang_item_name = LangItem::from_u32(item_index as u32).unwrap().name();\n                 let crate_name = self.tcx.crate_name(item_def_id.krate);\n-                let mut dependency_of = Symbol::intern(\"\");\n+                let mut dependency_of = Empty;\n                 let is_local = item_def_id.is_local();\n                 let path = if is_local {\n                     String::new()\n@@ -80,8 +80,8 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n                         .into()\n                 };\n                 let first_defined_span = self.tcx.hir().span_if_local(original_def_id);\n-                let mut orig_crate_name = Symbol::intern(\"\");\n-                let mut orig_dependency_of = Symbol::intern(\"\");\n+                let mut orig_crate_name = Empty;\n+                let mut orig_dependency_of = Empty;\n                 let orig_is_local = original_def_id.is_local();\n                 let orig_path = if orig_is_local {\n                     String::new()"}, {"sha": "c1085094962a741110a9de703057e7c9a6a57b34", "filename": "compiler/rustc_passes/src/layout_test.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/965dbf6c288150e9d3984a49cbf70c8fb358296c/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965dbf6c288150e9d3984a49cbf70c8fb358296c/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs?ref=965dbf6c288150e9d3984a49cbf70c8fb358296c", "patch": "@@ -3,11 +3,12 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::layout::{HasParamEnv, HasTyCtxt, LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n+use rustc_span::source_map::Spanned;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::abi::{HasDataLayout, TargetDataLayout};\n \n-use crate::errors::{Abi, Align, HomogeneousAggregate, Layout, LayoutOf, Size, UnrecognizedField};\n+use crate::errors::{Abi, Align, HomogeneousAggregate, LayoutOf, Size, UnrecognizedField};\n \n pub fn test_layout(tcx: TyCtxt<'_>) {\n     if tcx.features().rustc_attrs {\n@@ -91,9 +92,9 @@ fn dump_layout_of<'tcx>(tcx: TyCtxt<'tcx>, item_def_id: LocalDefId, attr: &Attri\n         }\n \n         Err(layout_error) => {\n-            tcx.sess.emit_err(Layout {\n+            tcx.sess.emit_fatal(Spanned {\n+                node: layout_error,\n                 span: tcx.def_span(item_def_id.to_def_id()),\n-                layout_error: format!(\"{:?}\", layout_error),\n             });\n         }\n     }"}, {"sha": "9c6a419e9f72d85c5969e1a350ca95dae248fa16", "filename": "src/test/ui/associated-types/issue-85103.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/965dbf6c288150e9d3984a49cbf70c8fb358296c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-85103.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965dbf6c288150e9d3984a49cbf70c8fb358296c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-85103.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-85103.rs?ref=965dbf6c288150e9d3984a49cbf70c8fb358296c", "patch": "@@ -4,6 +4,6 @@ use std::borrow::Cow;\n \n #[rustc_layout(debug)]\n type Edges<'a, E> = Cow<'a, [E]>;\n-//~^ ERROR layout error: NormalizationFailure\n+//~^ 6:1: 6:18: unable to determine layout for `<[E] as ToOwned>::Owned` because `<[E] as ToOwned>::Owned` cannot be normalized\n \n fn main() {}"}, {"sha": "17f7148074cf3fc01d757b5c44bfdeabe6eda2fd", "filename": "src/test/ui/associated-types/issue-85103.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/965dbf6c288150e9d3984a49cbf70c8fb358296c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-85103.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/965dbf6c288150e9d3984a49cbf70c8fb358296c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-85103.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-85103.stderr?ref=965dbf6c288150e9d3984a49cbf70c8fb358296c", "patch": "@@ -1,4 +1,4 @@\n-error: layout error: NormalizationFailure(<[E] as std::borrow::ToOwned>::Owned, Type(<[E] as std::borrow::ToOwned>::Owned))\n+error: unable to determine layout for `<[E] as ToOwned>::Owned` because `<[E] as ToOwned>::Owned` cannot be normalized\n   --> $DIR/issue-85103.rs:6:1\n    |\n LL | type Edges<'a, E> = Cow<'a, [E]>;"}]}