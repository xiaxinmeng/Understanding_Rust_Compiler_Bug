{"sha": "0f918ddd8becd9f25d6d0614d5d42cf860a60d5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOTE4ZGRkOGJlY2Q5ZjI1ZDZkMDYxNGQ1ZDQyY2Y4NjBhNjBkNWY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-02T15:06:55Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-02T15:06:55Z"}, "message": "Make import ignore imports coming after them\n\nThis broke no code at all, so I guess people were already writing\nimports in this style.\n\nIssue #1228", "tree": {"sha": "bc50d73fdd968d5f8df5505274a920674c32ecbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc50d73fdd968d5f8df5505274a920674c32ecbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f918ddd8becd9f25d6d0614d5d42cf860a60d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f918ddd8becd9f25d6d0614d5d42cf860a60d5f", "html_url": "https://github.com/rust-lang/rust/commit/0f918ddd8becd9f25d6d0614d5d42cf860a60d5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f918ddd8becd9f25d6d0614d5d42cf860a60d5f/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a1cc738fa9bc4af134da01386414d057cc2e719", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a1cc738fa9bc4af134da01386414d057cc2e719", "html_url": "https://github.com/rust-lang/rust/commit/8a1cc738fa9bc4af134da01386414d057cc2e719"}], "stats": {"total": 74, "additions": 57, "deletions": 17}, "files": [{"sha": "906f88a9a7744e431c31673c845adb9a0b2a58b6", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 54, "deletions": 14, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0f918ddd8becd9f25d6d0614d5d42cf860a60d5f/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f918ddd8becd9f25d6d0614d5d42cf860a60d5f/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=0f918ddd8becd9f25d6d0614d5d42cf860a60d5f", "patch": "@@ -108,7 +108,7 @@ type env =\n      used_imports: {mutable track: bool,\n                     mutable data: [ast::node_id]},\n      mutable reported: [{ident: str, sc: scope}],\n-     mutable currently_resolving: node_id,\n+     mutable ignored_imports: [node_id],\n      sess: session};\n \n \n@@ -131,7 +131,7 @@ fn resolve_crate(sess: session, amap: ast_map::map, crate: @ast::crate) ->\n           ext_cache: new_ext_hash(),\n           used_imports: {mutable track: false, mutable data:  []},\n           mutable reported: [],\n-          mutable currently_resolving: -1,\n+          mutable ignored_imports: [],\n           sess: sess};\n     map_crate(e, crate);\n     resolve_imports(*e);\n@@ -462,11 +462,48 @@ fn resolve_import(e: env, defid: ast::def_id, name: ast::ident,\n             e.imports.insert(id, resolved(val, typ, md, name, sp));\n         }\n     }\n+    // Temporarily disable this import and the imports coming after during\n+    // resolution of this import.\n+    fn find_imports_after(e: env, id: node_id, sc: scopes) -> [node_id] {\n+        fn lst(my_id: node_id, vis: [@view_item]) -> [node_id] {\n+            let imports = [], found = false;\n+            for vi in vis {\n+                alt vi.node {\n+                  view_item_import(_, _, id) | view_item_import_glob(_, id) {\n+                    if id == my_id { found = true; }\n+                    if found { imports += [id]; }\n+                  }\n+                  view_item_import_from(_, ids, _) {\n+                    for id in ids {\n+                        if id.node.id == my_id { found = true; }\n+                        if found { imports += [id.node.id]; }\n+                    }\n+                  }\n+                  _ {}\n+                }\n+            }\n+            imports\n+        }\n+        alt sc {\n+          cons(scope_item(@{node: item_mod(m), _}), _) {\n+            lst(id, m.view_items)\n+          }\n+          cons(scope_item(@{node: item_native_mod(m), _}), _) {\n+            lst(id, m.view_items)\n+          }\n+          cons(scope_block(b, _, _), _) {\n+            lst(id, b.node.view_items)\n+          }\n+          cons(scope_crate., _) {\n+            lst(id, option::get(e.mod_map.get(crate_mod).m).view_items)\n+          }\n+        }\n+    }\n     // This function has cleanup code at the end. Do not return without going\n     // through that.\n     e.imports.insert(defid.node, resolving(sp));\n-    let previously_resolving = e.currently_resolving;\n-    e.currently_resolving = defid.node;\n+    let ignored = find_imports_after(e, defid.node, sc);\n+    e.ignored_imports <-> ignored;\n     let n_idents = vec::len(ids);\n     let end_id = ids[n_idents - 1u];\n     if n_idents == 1u {\n@@ -498,7 +535,7 @@ fn resolve_import(e: env, defid: ast::def_id, name: ast::ident,\n           }\n         }\n     }\n-    e.currently_resolving = previously_resolving;\n+    e.ignored_imports <-> ignored;\n     // If we couldn't resolve the import, don't leave it in a partially\n     // resolved state, to avoid having it reported later as a cyclic\n     // import\n@@ -961,16 +998,15 @@ fn found_view_item(e: env, vi: @ast::view_item) -> option::t<def> {\n }\n \n fn lookup_import(e: env, defid: def_id, ns: namespace) -> option::t<def> {\n+    // Imports are simply ignored when resolving themselves.\n+    if vec::member(defid.node, e.ignored_imports) { ret none; }\n     alt e.imports.get(defid.node) {\n       todo(node_id, name, path, span, scopes) {\n         resolve_import(e, local_def(node_id), name, *path, span, scopes);\n         ret lookup_import(e, defid, ns);\n       }\n       resolving(sp) {\n-        // Imports are simply ignored when resolving themselves.\n-        if e.currently_resolving != defid.node {\n-            e.sess.span_err(sp, \"cyclic import\");\n-        }\n+        e.sess.span_err(sp, \"cyclic import\");\n         ret none;\n       }\n       resolved(val, typ, md, _, _) {\n@@ -1018,14 +1054,18 @@ fn lookup_in_globs(e: env, globs: [glob_imp_def], sp: span, id: ident,\n                    ns: namespace, dr: dir) -> option::t<def> {\n     fn lookup_in_mod_(e: env, def: glob_imp_def, sp: span, name: ident,\n                       ns: namespace, dr: dir) -> option::t<glob_imp_def> {\n+        alt def.item.node {\n+          ast::view_item_import_glob(_, id) {\n+            if vec::member(id, e.ignored_imports) { ret none; }\n+          }\n+        }\n         alt lookup_in_mod(e, def.def, sp, name, ns, dr) {\n-          option::some(d) { option::some({def: d, item: def.item}) }\n-          option::none. { option::none }\n+          some(d) { option::some({def: d, item: def.item}) }\n+          none. { none }\n         }\n     }\n-    let matches =\n-        vec::filter_map(bind lookup_in_mod_(e, _, sp, id, ns, dr),\n-                        { globs });\n+    let matches = vec::filter_map(bind lookup_in_mod_(e, _, sp, id, ns, dr),\n+                                  copy globs);\n     if vec::len(matches) == 0u {\n         ret none;\n     } else if vec::len(matches) == 1u {"}, {"sha": "107125ba3314cf29db43015bc1c01e5b05975dd2", "filename": "src/test/compile-fail/import4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f918ddd8becd9f25d6d0614d5d42cf860a60d5f/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f918ddd8becd9f25d6d0614d5d42cf860a60d5f/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport4.rs?ref=0f918ddd8becd9f25d6d0614d5d42cf860a60d5f", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: cyclic import\n \n-import zed::bar;\n-import bar::zed;\n+mod a { import foo = b::foo; export foo; }\n+mod b { import foo = a::foo; export foo; }\n \n fn main(args: [str]) { log \"loop\"; }"}, {"sha": "9732385d0ad77027da8703bf7b0b7539d49ffe76", "filename": "src/test/run-pass/import3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f918ddd8becd9f25d6d0614d5d42cf860a60d5f/src%2Ftest%2Frun-pass%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f918ddd8becd9f25d6d0614d5d42cf860a60d5f/src%2Ftest%2Frun-pass%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport3.rs?ref=0f918ddd8becd9f25d6d0614d5d42cf860a60d5f", "patch": "@@ -1,6 +1,6 @@\n \n-import zed::bar;\n import baz::zed;\n+import zed::bar;\n \n mod baz {\n     mod zed {"}]}