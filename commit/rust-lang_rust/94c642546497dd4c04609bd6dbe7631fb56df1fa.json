{"sha": "94c642546497dd4c04609bd6dbe7631fb56df1fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YzY0MjU0NjQ5N2RkNGMwNDYwOWJkNmRiZTc2MzFmYjU2ZGYxZmE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-15T07:45:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-18T19:03:03Z"}, "message": "Remove E0308 note when primary label has all info", "tree": {"sha": "deb8c44a34db3e9e6cfd3e421e83c5d7317cacab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deb8c44a34db3e9e6cfd3e421e83c5d7317cacab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94c642546497dd4c04609bd6dbe7631fb56df1fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94c642546497dd4c04609bd6dbe7631fb56df1fa", "html_url": "https://github.com/rust-lang/rust/commit/94c642546497dd4c04609bd6dbe7631fb56df1fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94c642546497dd4c04609bd6dbe7631fb56df1fa/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "html_url": "https://github.com/rust-lang/rust/commit/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6"}], "stats": {"total": 1503, "additions": 225, "deletions": 1278}, "files": [{"sha": "cccdcc68a579328b0528c7a5b150ac7b69b75db2", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -1163,8 +1163,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             Some(values) => {\n                 let (is_simple_error, exp_found) = match values {\n                     ValuePairs::Types(exp_found) => {\n-                        let is_simple_err =\n-                            exp_found.expected.is_primitive() && exp_found.found.is_primitive();\n+                        let is_simple_err = exp_found.expected.is_simple_text()\n+                            && exp_found.found.is_simple_text();\n \n                         (is_simple_err, Some(exp_found))\n                     }\n@@ -1201,8 +1201,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 .unwrap_or(\"type\".into());\n             let found_label = exp_found.map(|ef| ef.found.prefix_string())\n                 .unwrap_or(\"type\".into());\n-            match (terr, is_simple_error, expected == found) {\n-                (&TypeError::Sorts(ref values), false, extra) => {\n+            match (&terr, expected == found) {\n+                (TypeError::Sorts(values), extra) => {\n                     let sort_string = |ty: Ty<'tcx>| match (extra, &ty.kind) {\n                         (true, ty::Opaque(def_id, _)) => format!(\n                             \" (opaque type at {})\",\n@@ -1212,26 +1212,43 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         (true, _) => format!(\" ({})\", ty.sort_string(self.tcx)),\n                         (false, _) => \"\".to_string(),\n                     };\n-                    diag.note_expected_found_extra(\n-                        &expected_label,\n-                        expected,\n-                        &found_label,\n-                        found,\n-                        &sort_string(values.expected),\n-                        &sort_string(values.found),\n-                    );\n+                    if !(values.expected.is_simple_text() && values.found.is_simple_text()) || (\n+                        exp_found.map_or(false, |ef| {\n+                            // This happens when the type error is a subset of the expectation,\n+                            // like when you have two references but one is `usize` and the other\n+                            // is `f32`. In those cases we still want to show the `note`. If the\n+                            // value from `ef` is `Infer(_)`, then we ignore it.\n+                            if !ef.expected.is_ty_infer() {\n+                                ef.expected != values.expected\n+                            } else if !ef.found.is_ty_infer() {\n+                                ef.found != values.found\n+                            } else {\n+                                false\n+                            }\n+                        })\n+                    ) {\n+                        diag.note_expected_found_extra(\n+                            &expected_label,\n+                            expected,\n+                            &found_label,\n+                            found,\n+                            &sort_string(values.expected),\n+                            &sort_string(values.found),\n+                        );\n+                    }\n                 }\n-                (TypeError::ObjectUnsafeCoercion(_), ..) => {\n+                (TypeError::ObjectUnsafeCoercion(_), _) => {\n                     diag.note_unsuccessfull_coercion(found, expected);\n                 }\n-                (_, false, _) => {\n+                (_, _) => {\n                     debug!(\n                         \"note_type_err: exp_found={:?}, expected={:?} found={:?}\",\n                         exp_found, expected, found\n                     );\n-                    diag.note_expected_found(&expected_label, expected, &found_label, found);\n+                    if !is_simple_error || terr.must_include_note() {\n+                        diag.note_expected_found(&expected_label, expected, &found_label, found);\n+                    }\n                 }\n-                _ => (),\n             }\n         }\n         if let Some(exp_found) = exp_found {"}, {"sha": "feb53539a2eda3f9c384af2dbaa90643e614fd3e", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 52, "deletions": 19, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -64,8 +64,11 @@ pub enum UnconstrainedNumeric {\n impl<'tcx> fmt::Display for TypeError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use self::TypeError::*;\n-        fn report_maybe_different(f: &mut fmt::Formatter<'_>,\n-                                  expected: &str, found: &str) -> fmt::Result {\n+        fn report_maybe_different(\n+            f: &mut fmt::Formatter<'_>,\n+            expected: &str,\n+            found: &str,\n+        ) -> fmt::Result {\n             // A naive approach to making sure that we're not reporting silly errors such as:\n             // (expected closure, found closure).\n             if expected == found {\n@@ -183,39 +186,70 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n     }\n }\n \n+impl<'tcx> TypeError<'tcx> {\n+    pub fn must_include_note(&self) -> bool {\n+        use self::TypeError::*;\n+        match self {\n+            CyclicTy(_) |\n+            UnsafetyMismatch(_) |\n+            Mismatch |\n+            AbiMismatch(_) |\n+            FixedArraySize(_) |\n+            Sorts(_) |\n+            IntMismatch(_) |\n+            FloatMismatch(_) |\n+            VariadicMismatch(_) => false,\n+\n+            Mutability |\n+            TupleSize(_) |\n+            ArgCount |\n+            RegionsDoesNotOutlive(..) |\n+            RegionsInsufficientlyPolymorphic(..) |\n+            RegionsOverlyPolymorphic(..) |\n+            RegionsPlaceholderMismatch |\n+            Traits(_) |\n+            ProjectionMismatched(_) |\n+            ProjectionBoundsLength(_) |\n+            ExistentialMismatch(_) |\n+            ConstMismatch(_) |\n+            IntrinsicCast |\n+            ObjectUnsafeCoercion(_) => true,\n+        }\n+    }\n+}\n+\n impl<'tcx> ty::TyS<'tcx> {\n     pub fn sort_string(&self, tcx: TyCtxt<'_>) -> Cow<'static, str> {\n         match self.kind {\n             ty::Bool | ty::Char | ty::Int(_) |\n-            ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => self.to_string().into(),\n-            ty::Tuple(ref tys) if tys.is_empty() => self.to_string().into(),\n+            ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => format!(\"{}\", self).into(),\n+            ty::Tuple(ref tys) if tys.is_empty() => format!(\"{}\", self).into(),\n \n             ty::Adt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.def_path_str(def.did)).into(),\n             ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.def_path_str(def_id)).into(),\n-            ty::Array(_, n) => {\n+            ty::Array(t, n) => {\n                 let n = tcx.lift(&n).unwrap();\n                 match n.try_eval_usize(tcx, ty::ParamEnv::empty()) {\n-                    Some(n) => {\n-                        format!(\"array of {} element{}\", n, pluralize!(n)).into()\n-                    }\n+                    _ if t.is_simple_ty() => format!(\"array `{}`\", self).into(),\n+                    Some(n) => format!(\"array of {} element{} \", n, pluralize!(n)).into(),\n                     None => \"array\".into(),\n                 }\n             }\n+            ty::Slice(ty) if ty.is_simple_ty() => format!(\"slice `{}`\", self).into(),\n             ty::Slice(_) => \"slice\".into(),\n             ty::RawPtr(_) => \"*-ptr\".into(),\n-            ty::Ref(region, ty, mutbl) => {\n+            ty::Ref(_, ty, mutbl) => {\n                 let tymut = ty::TypeAndMut { ty, mutbl };\n                 let tymut_string = tymut.to_string();\n-                if tymut_string == \"_\" ||         //unknown type name,\n-                   tymut_string.len() > 10 ||     //name longer than saying \"reference\",\n-                   region.to_string() != \"'_\"     //... or a complex type\n-                {\n-                    format!(\"{}reference\", match mutbl {\n-                        hir::Mutability::Mutable => \"mutable \",\n-                        _ => \"\"\n-                    }).into()\n-                } else {\n+                if tymut_string != \"_\" && (\n+                    ty.is_simple_text() || tymut_string.len() < \"mutable reference\".len()\n+                ) {\n                     format!(\"&{}\", tymut_string).into()\n+                } else { // Unknown type name, it's long or has type arguments\n+                    match mutbl {\n+                        hir::Mutability::Mutable => \"mutable reference\",\n+                        _ => \"reference\",\n+                    }.into()\n                 }\n             }\n             ty::FnDef(..) => \"fn item\".into(),\n@@ -248,7 +282,6 @@ impl<'tcx> ty::TyS<'tcx> {\n     }\n \n     pub fn prefix_string(&self) -> Cow<'static, str> {\n-        debug!(\"prefix_string {:?} {} {:?}\", self, self, self.kind);\n         match self.kind {\n             ty::Infer(_) | ty::Error | ty::Bool | ty::Char | ty::Int(_) |\n             ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => \"type\".into(),"}, {"sha": "5fc2812fd97db10d8fa1b4abaa93bc55d8b9690b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -555,16 +555,29 @@ impl<'tcx> Hash for TyS<'tcx> {\n impl<'tcx> TyS<'tcx> {\n     pub fn is_primitive_ty(&self) -> bool {\n         match self.kind {\n-            Bool |\n-            Char |\n-            Int(_) |\n-            Uint(_) |\n-            Float(_) |\n-            Infer(InferTy::IntVar(_)) |\n-            Infer(InferTy::FloatVar(_)) |\n-            Infer(InferTy::FreshIntTy(_)) |\n-            Infer(InferTy::FreshFloatTy(_)) => true,\n-            Ref(_, x, _) => x.is_primitive_ty(),\n+            Bool | Char | Str | Int(_) | Uint(_) | Float(_) |\n+            Infer(InferTy::IntVar(_)) | Infer(InferTy::FloatVar(_)) |\n+            Infer(InferTy::FreshIntTy(_)) | Infer(InferTy::FreshFloatTy(_)) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn is_simple_ty(&self) -> bool {\n+        match self.kind {\n+            Bool | Char | Str | Int(_) | Uint(_) | Float(_) |\n+            Infer(InferTy::IntVar(_)) | Infer(InferTy::FloatVar(_)) |\n+            Infer(InferTy::FreshIntTy(_)) | Infer(InferTy::FreshFloatTy(_)) => true,\n+            Ref(_, x, _) | Array(x, _) | Slice(x) => x.peel_refs().is_simple_ty(),\n+            Tuple(tys) if tys.is_empty() => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn is_simple_text(&self) -> bool {\n+        match self.kind {\n+            Adt(_, substs) => substs.types().next().is_none(),\n+            Ref(_, ty, _) => ty.is_simple_text(),\n+            _ if self.is_simple_ty() => true,\n             _ => false,\n         }\n     }"}, {"sha": "42dc56c44ce95cf917951a29c473562d7b8d6e62", "filename": "src/test/rustdoc-ui/failed-doctest-missing-codes.stdout", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -10,9 +10,6 @@ error[E0308]: mismatched types\n    |\n LL | let x: () = 5i32;\n    |             ^^^^ expected (), found i32\n-   |\n-   = note: expected type `()`\n-              found type `i32`\n \n error: aborting due to previous error\n "}, {"sha": "321a07c4a66b2a642d60ac1e17de47b3502c5345", "filename": "src/test/ui/arg-type-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Farg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Farg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-type-mismatch.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL | fn main() { let i: (); i = f(()); }\n    |                              ^^ expected isize, found ()\n-   |\n-   = note:   expected type `isize`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "504874f2ce364cd65b7c4263e19c8681d8518fa4", "filename": "src/test/ui/array-not-vector.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-not-vector.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -1,9 +1,7 @@\n fn main() {\n     let _x: i32 = [1, 2, 3];\n     //~^ ERROR mismatched types\n-    //~| expected type `i32`\n-    //~| found array `[{integer}; 3]`\n-    //~| expected i32, found array of 3 elements\n+    //~| expected i32, found array\n \n     let x: &[i32] = &[1, 2, 3];\n     let _y: &i32 = x;"}, {"sha": "fd02307ffd30e5c45d4e0b99144352dbfdc755f9", "filename": "src/test/ui/array-not-vector.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Farray-not-vector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Farray-not-vector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-not-vector.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,16 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/array-not-vector.rs:2:19\n    |\n LL |     let _x: i32 = [1, 2, 3];\n-   |                   ^^^^^^^^^ expected i32, found array of 3 elements\n-   |\n-   = note: expected type `i32`\n-             found array `[{integer}; 3]`\n+   |                   ^^^^^^^^^ expected i32, found array `[{integer}; 3]`\n \n error[E0308]: mismatched types\n-  --> $DIR/array-not-vector.rs:9:20\n+  --> $DIR/array-not-vector.rs:7:20\n    |\n LL |     let _y: &i32 = x;\n-   |                    ^ expected i32, found slice\n+   |                    ^ expected i32, found slice `[i32]`\n    |\n    = note: expected reference `&i32`\n               found reference `&[i32]`"}, {"sha": "f2312cbaa06229b27b8c8190b531c5b603e10eb2", "filename": "src/test/ui/associated-const/associated-const-generic-obligations.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,7 +5,7 @@ LL |     const FROM: Self::Out;\n    |                 --------- type in trait\n ...\n LL |     const FROM: &'static str = \"foo\";\n-   |                 ^^^^^^^^^^^^ expected associated type, found reference\n+   |                 ^^^^^^^^^^^^ expected associated type, found &str\n    |\n    = note: expected associated type `<T as Foo>::Out`\n                     found reference `&'static str`"}, {"sha": "07f207627f4df2faadd79986c7a2d292c9b03446", "filename": "src/test/ui/associated-type/associated-type-projection-from-supertrait.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,36 +3,24 @@ error[E0308]: mismatched types\n    |\n LL | fn b() { dent(ModelT, Blue); }\n    |                       ^^^^ expected struct `Black`, found struct `Blue`\n-   |\n-   = note: expected struct `Black`\n-              found struct `Blue`\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:28:23\n    |\n LL | fn c() { dent(ModelU, Black); }\n    |                       ^^^^^ expected struct `Blue`, found struct `Black`\n-   |\n-   = note: expected struct `Blue`\n-              found struct `Black`\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:32:28\n    |\n LL | fn f() { ModelT.chip_paint(Blue); }\n    |                            ^^^^ expected struct `Black`, found struct `Blue`\n-   |\n-   = note: expected struct `Black`\n-              found struct `Blue`\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:33:28\n    |\n LL | fn g() { ModelU.chip_paint(Black); }\n    |                            ^^^^^ expected struct `Blue`, found struct `Black`\n-   |\n-   = note: expected struct `Blue`\n-              found struct `Black`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "86e651b53f0b96c4d048e2461e3a2dfaa6743c75", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n ...\n LL | fn b() { blue_car(ModelT); }\n    |          ^^^^^^^^ expected struct `Blue`, found struct `Black`\n-   |\n-   = note: expected struct `Blue`\n-              found struct `Black`\n \n error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:32:10\n@@ -18,9 +15,6 @@ LL | fn black_car<C:Car<Color=Black>>(c: C) {\n ...\n LL | fn c() { black_car(ModelU); }\n    |          ^^^^^^^^^ expected struct `Black`, found struct `Blue`\n-   |\n-   = note: expected struct `Black`\n-              found struct `Blue`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "060e2c8a2ccc1905e20de7763bf2155129974037", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -17,18 +17,13 @@ LL | fn foo1<I: Foo<A=Bar>>(x: I) {\n ...\n LL |     foo1(a);\n    |     ^^^^ expected struct `Bar`, found usize\n-   |\n-   = note: expected struct `Bar`\n-                found type `usize`\n \n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:41:9\n    |\n LL |     baz(&a);\n    |         ^^ expected struct `Bar`, found usize\n    |\n-   = note: expected struct `Bar`\n-                found type `usize`\n    = note: required for the cast to the object type `dyn Foo<A = Bar>`\n \n error: aborting due to 3 previous errors"}, {"sha": "4ec1fd810aa76a7abf37025476fad28baaf40b55", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -4,8 +4,6 @@ error[E0271]: type mismatch resolving `<std::vec::IntoIter<u32> as std::iter::It\n LL |     let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();\n    |                                           ^^^^^^^^^^^^^^^^^^^^^ expected i32, found u32\n    |\n-   = note: expected type `i32`\n-              found type `u32`\n    = note: required for the cast to the object type `dyn std::iter::Iterator<Item = u32, Item = i32>`\n \n error: aborting due to previous error"}, {"sha": "f9b1373820f3a1e8a58808abf8e4d52471134621", "filename": "src/test/ui/associated-types/issue-44153.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -7,8 +7,6 @@ LL |     fn visit() {}\n LL |     <() as Visit>::visit();\n    |     ^^^^^^^^^^^^^^^^^^^^ expected (), found &()\n    |\n-   = note: expected unit type `()`\n-              found reference `&()`\n    = note: required because of the requirements on the impl of `Visit` for `()`\n \n error: aborting due to previous error"}, {"sha": "9b4defaa0bd86ab35b3188ed79a617f6e8c65929", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -8,9 +8,6 @@ LL | impl Bar for Foo {\n    | ---------------- in this `impl` item\n LL |     type Ok = ();\n    |     ^^^^^^^^^^^^^ expected u32, found ()\n-   |\n-   = note:   expected type `u32`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "212558cf9328ed56166aac99593d11086b2b2c39", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -25,18 +25,13 @@ LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    ---------------------------------      ^^ expected u8, found ()\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n-   |\n-   = note:   expected type `u8`\n-           found unit type `()`\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:18:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected (), found u8\n    |\n-   = note: expected unit type `()`\n-                   found type `u8`\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n error[E0308]: mismatched types\n@@ -51,18 +46,13 @@ LL | |         return 0u8;\n LL | |\n LL | | }\n    | |_^ expected u8, found ()\n-   |\n-   = note:   expected type `u8`\n-           found unit type `()`\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:27:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected (), found u8\n    |\n-   = note: expected unit type `()`\n-                   found type `u8`\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n error[E0308]: mismatched types"}, {"sha": "ce9ea7bc9edfc7c5dbc4b77d5b6e39e50d8ef70e", "filename": "src/test/ui/bad/bad-const-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -1,6 +1,4 @@\n static i: String = 10;\n //~^ ERROR mismatched types\n //~| expected struct `std::string::String`, found integer\n-//~| expected struct `std::string::String`\n-//~| found type `{integer}`\n fn main() { println!(\"{}\", i); }"}, {"sha": "f667779fab58f37f5daa7e51e8cd80faa20c4d40", "filename": "src/test/ui/bad/bad-const-type.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL | static i: String = 10;\n    |                    |\n    |                    expected struct `std::string::String`, found integer\n    |                    help: try using a conversion method: `10.to_string()`\n-   |\n-   = note: expected struct `std::string::String`\n-                found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "06b7fcbe9b6b9817aa2f3c339e56025dee05ee97", "filename": "src/test/ui/binop/binop-logic-int.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fbinop%2Fbinop-logic-int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fbinop%2Fbinop-logic-int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-logic-int.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,18 +3,12 @@ error[E0308]: mismatched types\n    |\n LL | fn main() { let x = 1 && 2; }\n    |                     ^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/binop-logic-int.rs:1:26\n    |\n LL | fn main() { let x = 1 && 2; }\n    |                          ^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "264e7fc8e73a212cb17c9943318b97b3afdb074d", "filename": "src/test/ui/blind/blind-item-block-middle.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     let bar = 5;\n    |         ^^^ expected integer, found struct `foo::bar`\n-   |\n-   = note: expected type `{integer}`\n-            found struct `foo::bar`\n \n error: aborting due to previous error\n "}, {"sha": "cc515f4bf456d42afff61e4d350941966d419bb4", "filename": "src/test/ui/block-expression-remove-semicolon.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -8,9 +8,6 @@ LL | |         foo();\n    | |              - help: consider removing this semicolon\n LL | |     };\n    | |_____^ expected i32, found ()\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "a303f5d29d04515e62552a1bedcad2f9c0a7d76a", "filename": "src/test/ui/block-result/block-must-not-have-result-do.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |         true\n    |         ^^^^ expected (), found bool\n-   |\n-   = note: expected unit type `()`\n-                   found type `bool`\n \n error: aborting due to previous error\n "}, {"sha": "aabc7604f90c03de15f10e8cf507eb6000cadb8b", "filename": "src/test/ui/block-result/block-must-not-have-result-res.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,9 +5,6 @@ LL |     fn drop(&mut self) {\n    |                        - expected `()` because of default return type\n LL |         true\n    |         ^^^^ expected (), found bool\n-   |\n-   = note: expected unit type `()`\n-                   found type `bool`\n \n error: aborting due to previous error\n "}, {"sha": "f93725937299a697a1a738f2dff15185e68638ef", "filename": "src/test/ui/block-result/block-must-not-have-result-while.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -1,8 +1,6 @@\n fn main() {\n     while true { //~ WARN denote infinite loops with\n         true //~  ERROR mismatched types\n-             //~| expected unit type `()`\n-             //~| found type `bool`\n              //~| expected (), found bool\n     }\n }"}, {"sha": "72063ad1731df2bcc4fbabeb93565781148a42ed", "filename": "src/test/ui/block-result/block-must-not-have-result-while.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -11,9 +11,6 @@ error[E0308]: mismatched types\n    |\n LL |         true\n    |         ^^^^ expected (), found bool\n-   |\n-   = note: expected unit type `()`\n-                   found type `bool`\n \n error: aborting due to previous error\n "}, {"sha": "fed98f912462b38fe5a1a177dc81be6fda99fe2f", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -8,9 +8,6 @@ LL | fn f() -> String {\n LL |     0u8;\n LL |     \"bla\".to_string();\n    |                      - help: consider removing this semicolon\n-   |\n-   = note: expected struct `std::string::String`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:6:11\n@@ -22,9 +19,6 @@ LL | fn g() -> String {\n LL |     \"this won't work\".to_string();\n LL |     \"removeme\".to_string();\n    |                           - help: consider removing this semicolon\n-   |\n-   = note: expected struct `std::string::String`\n-           found unit type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5cd2726b8ddbc5146c85b83c35678a0d2fe8ffec", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -8,9 +8,6 @@ LL | fn blah() -> i32 {\n ...\n LL |     ;\n    |     - help: consider removing this semicolon\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "24e942619f0d1817c1f21849d86ee0a177580092", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -8,9 +8,6 @@ LL | fn foo() -> String {\n ...\n LL |     ;\n    |     - help: consider removing this semicolon\n-   |\n-   = note: expected struct `std::string::String`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:11:13\n@@ -22,9 +19,6 @@ LL | fn bar() -> String {\n LL |     \"foobar\".to_string()\n LL |     ;\n    |     - help: consider removing this semicolon\n-   |\n-   = note: expected struct `std::string::String`\n-           found unit type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ed0b3021746042b08d7edb79ce14ddc2b8d5b970", "filename": "src/test/ui/block-result/issue-13624.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -7,8 +7,6 @@ mod a {\n     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n     //~^ ERROR mismatched types\n     //~| expected (), found enum `a::Enum`\n-    //~| expected unit type `()`\n-    //~| found enum `a::Enum`\n   }\n }\n \n@@ -22,8 +20,6 @@ mod b {\n         a::Enum::EnumStructVariant { x, y, z } => {\n         //~^ ERROR mismatched types\n         //~| expected (), found enum `a::Enum`\n-        //~| expected unit type `()`\n-        //~| found enum `a::Enum`\n         }\n       }\n     }"}, {"sha": "2404d06ae8665308c052149c81aaac1b9ef50e6f", "filename": "src/test/ui/block-result/issue-13624.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,20 +5,14 @@ LL |   pub fn get_enum_struct_variant() -> () {\n    |                                       -- expected `()` because of return type\n LL |     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `a::Enum`\n-   |\n-   = note: expected unit type `()`\n-                   found enum `a::Enum`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-13624.rs:22:9\n+  --> $DIR/issue-13624.rs:20:9\n    |\n LL |       match enum_struct_variant {\n    |             ------------------- this match expression has type `()`\n LL |         a::Enum::EnumStructVariant { x, y, z } => {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `a::Enum`\n-   |\n-   = note: expected unit type `()`\n-                   found enum `a::Enum`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cc1b4a217ce476dbe6b5c209504813bfeedab2f0", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -16,9 +16,6 @@ LL | fn main() {\n LL |   let b = Bob + 3.5;\n LL |   b + 3\n    |   ^^^^^ expected (), found struct `Bob`\n-   |\n-   = note: expected unit type `()`\n-                 found struct `Bob`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "170d11373ddd0d06ad2bbafd61632d43e48a9920", "filename": "src/test/ui/block-result/unexpected-return-on-unit.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -4,8 +4,6 @@ error[E0308]: mismatched types\n LL |     foo()\n    |     ^^^^^ expected (), found usize\n    |\n-   = note: expected unit type `()`\n-                   found type `usize`\n help: try adding a semicolon\n    |\n LL |     foo();"}, {"sha": "fdc79ec29f378044fdf5f1101ab237acd7ecf70a", "filename": "src/test/ui/chalkify/type_inference.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     only_foo(x);\n    |              ^ expected i32, found floating-point number\n-   |\n-   = note: expected type `i32`\n-              found type `{float}`\n \n error[E0277]: the trait bound `{float}: Bar` is not satisfied\n   --> $DIR/type_inference.rs:25:5"}, {"sha": "3ee10cd4cb8288126d794f7595ad0e6d0bd3300b", "filename": "src/test/ui/codemap_tests/tab.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -10,10 +10,7 @@ error[E0308]: mismatched types\n LL | fn foo() {\n    |          - help: try adding a return type: `-> &'static str`\n LL |     \"bar            boo\"\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected (), found reference\n-   |\n-   = note: expected unit type `()`\n-              found reference `&'static str`\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected (), found &str\n \n error: aborting due to 2 previous errors\n "}, {"sha": "db8ecb818c9bd39d3d1d9ecb022598f361ebf6df", "filename": "src/test/ui/coercion/coerce-expect-unsized-ascribed.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:9:13\n    |\n LL |     let _ = box { [1, 2, 3] }: Box<[i32]>;\n-   |             ^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n+   |             ^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n    = note: expected struct `std::boxed::Box<[i32]>`\n               found struct `std::boxed::Box<[i32; 3]>`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:10:13\n    |\n LL |     let _ = box if true { [1, 2, 3] } else { [1, 3, 4] }: Box<[i32]>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n    = note: expected struct `std::boxed::Box<[i32]>`\n               found struct `std::boxed::Box<[i32; 3]>`\n@@ -20,7 +20,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:11:13\n    |\n LL |     let _ = box match true { true => [1, 2, 3], false => [1, 3, 4] }: Box<[i32]>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n    = note: expected struct `std::boxed::Box<[i32]>`\n               found struct `std::boxed::Box<[i32; 3]>`\n@@ -56,7 +56,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:17:13\n    |\n LL |     let _ = &{ [1, 2, 3] }: &[i32];\n-   |             ^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n+   |             ^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n    = note: expected reference `&[i32]`\n               found reference `&[i32; 3]`\n@@ -65,7 +65,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:18:13\n    |\n LL |     let _ = &if true { [1, 2, 3] } else { [1, 3, 4] }: &[i32];\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n    = note: expected reference `&[i32]`\n               found reference `&[i32; 3]`\n@@ -74,7 +74,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:19:13\n    |\n LL |     let _ = &match true { true => [1, 2, 3], false => [1, 3, 4] }: &[i32];\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n    = note: expected reference `&[i32]`\n               found reference `&[i32; 3]`\n@@ -110,7 +110,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:25:13\n    |\n LL |     let _ = Box::new([1, 2, 3]): Box<[i32]>;\n-   |             ^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n+   |             ^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n    = note: expected struct `std::boxed::Box<[i32]>`\n               found struct `std::boxed::Box<[i32; 3]>`"}, {"sha": "7811df45259835b3bd9717d7e38048cf05ee0e29", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -7,9 +7,6 @@ LL | fn plus_one(x: i32) -> i32 {\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     x + 1;\n    |          - help: consider removing this semicolon\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:7:13"}, {"sha": "1d54d35f649a3d6786b5d7aa91db75df92981fac", "filename": "src/test/ui/coercion/coercion-slice.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,6 +3,5 @@\n fn main() {\n     let _: &[i32] = [0];\n     //~^ ERROR mismatched types\n-    //~| expected reference `&[i32]`\n-    //~| expected &[i32], found array of 1 element\n+    //~| expected &[i32], found array `[{integer}; 1]`\n }"}, {"sha": "34caaed9de4f5bb79a44bc7217acfd60a7166426", "filename": "src/test/ui/coercion/coercion-slice.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -4,11 +4,8 @@ error[E0308]: mismatched types\n LL |     let _: &[i32] = [0];\n    |                     ^^^\n    |                     |\n-   |                     expected &[i32], found array of 1 element\n+   |                     expected &[i32], found array `[{integer}; 1]`\n    |                     help: consider borrowing here: `&[0]`\n-   |\n-   = note: expected reference `&[i32]`\n-                  found array `[{integer}; 1]`\n \n error: aborting due to previous error\n "}, {"sha": "aefd514f7a68ec65bb145a5ab9a33a9428f321f6", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,18 +3,12 @@ error[E0308]: mismatched types\n    |\n LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n    |                                                                   ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n-   |\n-   = note: expected array `[u8; 3]`\n-              found array `[u8; 2]`\n \n error[E0308]: mismatched types\n   --> $DIR/const-argument-cross-crate-mismatch.rs:8:65\n    |\n LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n    |                                                                 ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements\n-   |\n-   = note: expected array `[u8; 2]`\n-              found array `[u8; 3]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eae93b72ddc86e5eeba5babac1fa2613add73fac", "filename": "src/test/ui/consts/const-array-oob-arith.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,18 +3,12 @@ error[E0308]: mismatched types\n    |\n LL | const BLUB: [i32; (ARR[0] - 40) as usize] = [5];\n    |                                             ^^^ expected an array with a fixed size of 2 elements, found one with 1 element\n-   |\n-   = note: expected array `[i32; 2]`\n-              found array `[i32; 1]`\n \n error[E0308]: mismatched types\n   --> $DIR/const-array-oob-arith.rs:10:44\n    |\n LL | const BOO: [i32; (ARR[0] - 41) as usize] = [5, 99];\n    |                                            ^^^^^^^ expected an array with a fixed size of 1 element, found one with 2 elements\n-   |\n-   = note: expected array `[i32; 1]`\n-              found array `[i32; 2]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "682c7a1d65fc9c3e1c40d60f853565fa7ca69ada", "filename": "src/test/ui/consts/const-eval/const-eval-span.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -9,7 +9,6 @@ enum E {\n     V = CONSTANT,\n     //~^ ERROR mismatched types\n     //~| expected isize, found struct `S`\n-    //~|         found struct `S`\n }\n \n fn main() {}"}, {"sha": "3436802f8a95b4126c2b9069dcbd1d01d4ec77a9", "filename": "src/test/ui/consts/const-eval/const-eval-span.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     V = CONSTANT,\n    |         ^^^^^^^^ expected isize, found struct `S`\n-   |\n-   = note: expected type `isize`\n-            found struct `S`\n \n error: aborting due to previous error\n "}, {"sha": "8b5f3440964d5f190aa1f62aecb8eafb29c4fba1", "filename": "src/test/ui/consts/const-integer-bool-ops.stderr", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,18 +3,12 @@ error[E0308]: mismatched types\n    |\n LL | const X: usize = 42 && 39;\n    |                  ^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:1:24\n    |\n LL | const X: usize = 42 && 39;\n    |                        ^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:1:18\n@@ -33,18 +27,12 @@ error[E0308]: mismatched types\n    |\n LL | const X1: usize = 42 || 39;\n    |                   ^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:11:25\n    |\n LL | const X1: usize = 42 || 39;\n    |                         ^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:11:19\n@@ -63,18 +51,12 @@ error[E0308]: mismatched types\n    |\n LL | const X2: usize = -42 || -39;\n    |                   ^^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:21:26\n    |\n LL | const X2: usize = -42 || -39;\n    |                          ^^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:21:19\n@@ -93,18 +75,12 @@ error[E0308]: mismatched types\n    |\n LL | const X3: usize = -42 && -39;\n    |                   ^^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:31:26\n    |\n LL | const X3: usize = -42 && -39;\n    |                          ^^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:31:19"}, {"sha": "ff5529a840852c2c50e1f6a06f5d0295575fff4a", "filename": "src/test/ui/conversion-methods.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fconversion-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fconversion-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconversion-methods.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -4,23 +4,17 @@ error[E0308]: mismatched types\n LL |     let _tis_an_instants_play: String = \"'Tis a fond Ambush\u2014\";\n    |                                         ^^^^^^^^^^^^^^^^^^^^^\n    |                                         |\n-   |                                         expected struct `std::string::String`, found reference\n+   |                                         expected struct `std::string::String`, found &str\n    |                                         help: try using a conversion method: `\"'Tis a fond Ambush\u2014\".to_string()`\n-   |\n-   = note: expected struct `std::string::String`\n-           found reference `&'static str`\n \n error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:6:40\n    |\n LL |     let _just_to_make_bliss: PathBuf = Path::new(\"/ern/her/own/surprise\");\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                                        |\n-   |                                        expected struct `std::path::PathBuf`, found reference\n+   |                                        expected struct `std::path::PathBuf`, found &std::path::Path\n    |                                        help: try using a conversion method: `Path::new(\"/ern/her/own/surprise\").to_path_buf()`\n-   |\n-   = note: expected struct `std::path::PathBuf`\n-           found reference `&std::path::Path`\n \n error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:9:40\n@@ -30,17 +24,14 @@ LL |     let _but_should_the_play: String = 2; // Perhaps surprisingly, we sugge\n    |                                        |\n    |                                        expected struct `std::string::String`, found integer\n    |                                        help: try using a conversion method: `2.to_string()`\n-   |\n-   = note: expected struct `std::string::String`\n-                found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:12:47\n    |\n LL |     let _prove_piercing_earnest: Vec<usize> = &[1, 2, 3];\n    |                                               ^^^^^^^^^^\n    |                                               |\n-   |                                               expected struct `std::vec::Vec`, found reference\n+   |                                               expected struct `std::vec::Vec`, found &[{integer}; 3]\n    |                                               help: try using a conversion method: `(&[1, 2, 3]).to_vec()`\n    |\n    = note: expected struct `std::vec::Vec<usize>`"}, {"sha": "433bab77189174963e519f56b222178d312a1f08", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 3, "deletions": 32, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -4,11 +4,8 @@ error[E0308]: mismatched types\n LL |     foo(s);\n    |         ^\n    |         |\n-   |         expected struct `std::string::String`, found reference\n+   |         expected struct `std::string::String`, found &std::string::String\n    |         help: try using a conversion method: `s.to_string()`\n-   |\n-   = note: expected struct `std::string::String`\n-           found reference `&std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:14:10\n@@ -18,33 +15,24 @@ LL |     foo3(u);\n    |          |\n    |          expected u32, found &u32\n    |          help: consider dereferencing the borrow: `*u`\n-   |\n-   = note:   expected type `u32`\n-           found reference `&u32`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:30:9\n    |\n LL |     foo(&\"aaa\".to_owned());\n    |         ^^^^^^^^^^^^^^^^^\n    |         |\n-   |         expected struct `std::string::String`, found reference\n+   |         expected struct `std::string::String`, found &std::string::String\n    |         help: consider removing the borrow: `\"aaa\".to_owned()`\n-   |\n-   = note: expected struct `std::string::String`\n-           found reference `&std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:32:9\n    |\n LL |     foo(&mut \"aaa\".to_owned());\n    |         ^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         expected struct `std::string::String`, found mutable reference\n+   |         expected struct `std::string::String`, found &mut std::string::String\n    |         help: consider removing the borrow: `\"aaa\".to_owned()`\n-   |\n-   = note:         expected struct `std::string::String`\n-           found mutable reference `&mut std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:2:20\n@@ -54,18 +42,13 @@ LL |     ($x:expr) => { &$x }\n ...\n LL |     foo3(borrow!(0));\n    |          ---------- in this macro invocation\n-   |\n-   = note:   expected type `u32`\n-           found reference `&{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:36:5\n    |\n LL |     assert_eq!(3i32, &3i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected i32, found &i32\n    |\n-   = note:   expected type `i32`\n-           found reference `&i32`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0308]: mismatched types\n@@ -76,9 +59,6 @@ LL |     let s = S { u };\n    |                 |\n    |                 expected &u32, found integer\n    |                 help: consider borrowing here: `u: &u`\n-   |\n-   = note: expected reference `&u32`\n-                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:41:20\n@@ -88,9 +68,6 @@ LL |     let s = S { u: u };\n    |                    |\n    |                    expected &u32, found integer\n    |                    help: consider borrowing here: `&u`\n-   |\n-   = note: expected reference `&u32`\n-                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:44:17\n@@ -100,9 +77,6 @@ LL |     let r = R { i };\n    |                 |\n    |                 expected u32, found &{integer}\n    |                 help: consider dereferencing the borrow: `i: *i`\n-   |\n-   = note:   expected type `u32`\n-           found reference `&{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:46:20\n@@ -112,9 +86,6 @@ LL |     let r = R { i: i };\n    |                    |\n    |                    expected u32, found &{integer}\n    |                    help: consider dereferencing the borrow: `*i`\n-   |\n-   = note:   expected type `u32`\n-           found reference `&{integer}`\n \n error: aborting due to 10 previous errors\n "}, {"sha": "5fd3676d3613f1b75737d8ac6b85f0071902f8a7", "filename": "src/test/ui/did_you_mean/issue-42764.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -18,9 +18,6 @@ error[E0308]: mismatched types\n    |\n LL |     let _c = Context { wrapper: Payload{} };\n    |                                 ^^^^^^^^^ expected struct `Wrapper`, found struct `Payload`\n-   |\n-   = note: expected struct `Wrapper`\n-              found struct `Payload`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "76641b1120a274651ee4ee56e9b6fdeb91d6fc1b", "filename": "src/test/ui/did_you_mean/issue-53280-expected-float-found-integer-literal.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |     let sixteen: f32 = 16;\n    |                        |\n    |                        expected f32, found integer\n    |                        help: use a float literal: `16.0`\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-53280-expected-float-found-integer-literal.rs:5:38\n@@ -18,9 +15,6 @@ LL |     let a_million_and_seventy: f64 = 1_000_070;\n    |                                      |\n    |                                      expected f64, found integer\n    |                                      help: use a float literal: `1_000_070.0`\n-   |\n-   = note: expected type `f64`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-53280-expected-float-found-integer-literal.rs:8:30\n@@ -30,27 +24,18 @@ LL |     let negative_nine: f32 = -9;\n    |                              |\n    |                              expected f32, found integer\n    |                              help: use a float literal: `-9.0`\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-53280-expected-float-found-integer-literal.rs:15:30\n    |\n LL |     let sixteen_again: f64 = 0x10;\n    |                              ^^^^ expected f64, found integer\n-   |\n-   = note: expected type `f64`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-53280-expected-float-found-integer-literal.rs:17:30\n    |\n LL |     let and_once_more: f32 = 0o20;\n    |                              ^^^^ expected f32, found integer\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "3f3ef666f66397245a075ac27240a97e540eed18", "filename": "src/test/ui/diverging-fn-tail-35849.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fdiverging-fn-tail-35849.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fdiverging-fn-tail-35849.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiverging-fn-tail-35849.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,7 +5,7 @@ LL | fn assert_sizeof() -> ! {\n    |                       - expected `!` because of return type\n LL |     unsafe {\n LL |         ::std::mem::transmute::<f64, [u8; 8]>(panic!())\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected !, found array of 8 elements\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected !, found array `[u8; 8]`\n    |\n    = note: expected type `!`\n              found array `[u8; 8]`"}, {"sha": "3eb16663e13e1258dd6579cf475a245c3c69901e", "filename": "src/test/ui/dst/dst-bad-coerce1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce1.rs:16:29\n    |\n LL |     let f3: &Fat<[usize]> = f2;\n-   |                             ^^ expected slice, found array of 3 elements\n+   |                             ^^ expected slice `[usize]`, found array `[isize; 3]`\n    |\n    = note: expected reference `&Fat<[usize]>`\n               found reference `&Fat<[isize; 3]>`\n@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce1.rs:28:27\n    |\n LL |     let f3: &([usize],) = f2;\n-   |                           ^^ expected slice, found array of 3 elements\n+   |                           ^^ expected slice `[usize]`, found array `[isize; 3]`\n    |\n    = note: expected reference `&([usize],)`\n               found reference `&([isize; 3],)`"}, {"sha": "f63da60d281d7069e3fee802bd3cfba3368ae6cc", "filename": "src/test/ui/dst/dst-bad-coerce4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -11,15 +11,15 @@ pub fn main() {\n     let f1: &Fat<[isize]> = &Fat { ptr: [1, 2, 3] };\n     let f2: &Fat<[isize; 3]> = f1;\n     //~^ ERROR mismatched types\n+    //~| expected array `[isize; 3]`, found slice `[isize]`\n     //~| expected reference `&Fat<[isize; 3]>`\n     //~| found reference `&Fat<[isize]>`\n-    //~| expected array of 3 elements, found slice\n \n     // Tuple with a vec of isizes.\n     let f1: &([isize],) = &([1, 2, 3],);\n     let f2: &([isize; 3],) = f1;\n     //~^ ERROR mismatched types\n+    //~| expected array `[isize; 3]`, found slice `[isize]`\n     //~| expected reference `&([isize; 3],)`\n     //~| found reference `&([isize],)`\n-    //~| expected array of 3 elements, found slice\n }"}, {"sha": "e85d354e4680d32468d84004230094ac7f393d88", "filename": "src/test/ui/dst/dst-bad-coerce4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce4.rs:12:32\n    |\n LL |     let f2: &Fat<[isize; 3]> = f1;\n-   |                                ^^ expected array of 3 elements, found slice\n+   |                                ^^ expected array `[isize; 3]`, found slice `[isize]`\n    |\n    = note: expected reference `&Fat<[isize; 3]>`\n               found reference `&Fat<[isize]>`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce4.rs:20:30\n    |\n LL |     let f2: &([isize; 3],) = f1;\n-   |                              ^^ expected array of 3 elements, found slice\n+   |                              ^^ expected array `[isize; 3]`, found slice `[isize]`\n    |\n    = note: expected reference `&([isize; 3],)`\n               found reference `&([isize],)`"}, {"sha": "779b6ea924c721b614b64f2233d29a00297d3bfb", "filename": "src/test/ui/error-codes/E0070.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -15,9 +15,6 @@ error[E0308]: mismatched types\n    |\n LL |     some_other_func() = 4;\n    |                         ^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error[E0070]: invalid left-hand side expression\n   --> $DIR/E0070.rs:8:5"}, {"sha": "3ed2f6f0d235b7437c74e00da9f45f808df4a7f1", "filename": "src/test/ui/error-codes/E0271.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,10 +5,7 @@ LL | fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n    |    ---                         ------------------ required by this bound in `foo`\n ...\n LL |     foo(3_i8);\n-   |     ^^^ expected u32, found reference\n-   |\n-   = note:   expected type `u32`\n-           found reference `&'static str`\n+   |     ^^^ expected u32, found &str\n \n error: aborting due to previous error\n "}, {"sha": "108df4ae1c9d215d380253f08b30eb6f2a4e81f9", "filename": "src/test/ui/estr-subtyping.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Festr-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Festr-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Festr-subtyping.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |    wants_uniq(x);\n    |               |\n    |               expected struct `std::string::String`, found &str\n    |               help: try using a conversion method: `x.to_string()`\n-   |\n-   = note: expected struct `std::string::String`\n-           found reference `&str`\n \n error: aborting due to previous error\n "}, {"sha": "ea4db564829484862d2097a64e5684c2ed9a787d", "filename": "src/test/ui/float-literal-inference-restrictions.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |     let x: f32 = 1;\n    |                  |\n    |                  expected f32, found integer\n    |                  help: use a float literal: `1.0`\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/float-literal-inference-restrictions.rs:3:18"}, {"sha": "94a9f4e5692a3bb8efa1b2922ca63efe8e1e75b9", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -12,8 +12,6 @@ fn bar(x: x::Foo) -> y::Foo {\n     return x;\n     //~^ ERROR mismatched types\n     //~| expected enum `y::Foo`, found enum `x::Foo`\n-    //~| expected enum `y::Foo`\n-    //~| found enum `x::Foo`\n }\n \n fn main() {"}, {"sha": "aed7f72c660df187956c8965c0bc3bb4174bb161", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name2.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,9 +5,6 @@ LL | fn bar(x: x::Foo) -> y::Foo {\n    |                      ------ expected `y::Foo` because of return type\n LL |     return x;\n    |            ^ expected enum `y::Foo`, found enum `x::Foo`\n-   |\n-   = note: expected enum `y::Foo`\n-              found enum `x::Foo`\n \n error: aborting due to previous error\n "}, {"sha": "759c7302d13c6e8ce933454907e49967379b7c0d", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -15,8 +15,6 @@ error[E0271]: type mismatch resolving `<[closure@$DIR/issue-62203-hrtb-ice.rs:42\n LL |     let v = Unit2.m(\n    |                   ^ expected struct `Unit4`, found struct `Unit3`\n    |\n-   = note: expected struct `Unit4`\n-              found struct `Unit3`\n    = note: required because of the requirements on the impl of `for<'r> T0<'r, (<Unit2 as Ty<'r>>::V,)>` for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]>`\n \n error: aborting due to 2 previous errors"}, {"sha": "6d36854545cabe3070611363dcc839971a5d3b6b", "filename": "src/test/ui/if-else-type-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -10,9 +10,6 @@ LL | |         2u32\n    | |         ^^^^ expected i32, found u32\n LL | |     };\n    | |_____- if and else have incompatible types\n-   |\n-   = note: expected type `i32`\n-              found type `u32`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:8:38\n@@ -21,9 +18,6 @@ LL |     let _ = if true { 42i32 } else { 42u32 };\n    |                       -----          ^^^^^ expected i32, found u32\n    |                       |\n    |                       expected because of this\n-   |\n-   = note: expected type `i32`\n-              found type `u32`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:13:9\n@@ -40,9 +34,6 @@ LL | |         4u32\n    | |         ^^^^ expected (), found u32\n LL | |     };\n    | |_____- if and else have incompatible types\n-   |\n-   = note: expected type `()`\n-              found type `u32`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:19:9\n@@ -59,9 +50,6 @@ LL | |         6u32;\n    | |         expected u32, found ()\n LL | |     };\n    | |_____- if and else have incompatible types\n-   |\n-   = note:   expected type `u32`\n-           found unit type `()`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:25:9\n@@ -75,9 +63,6 @@ LL | |         8u32\n    | |         ^^^^ expected (), found u32\n LL | |     };\n    | |_____- if and else have incompatible types\n-   |\n-   = note: expected type `()`\n-              found type `u32`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:31:9\n@@ -91,9 +76,6 @@ LL | |         10u32;\n    | |         ^^^^^^ expected i32, found ()\n LL | |     };\n    | |_____- if and else have incompatible types\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:37:9\n@@ -105,9 +87,6 @@ LL | |     } else {\n    | |_____- expected because of this\n LL |           11u32\n    |           ^^^^^ expected (), found u32\n-   |\n-   = note: expected type `()`\n-              found type `u32`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:42:12\n@@ -121,9 +100,6 @@ LL |       } else {\n LL | |\n LL | |     };\n    | |_____^ expected i32, found ()\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "bfaae2d31a01be6cbe6eeaf0addb24f4a215d5a4", "filename": "src/test/ui/if/if-branch-types.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,9 +5,6 @@ LL |     let x = if true { 10i32 } else { 10u32 };\n    |                       -----          ^^^^^ expected i32, found u32\n    |                       |\n    |                       expected because of this\n-   |\n-   = note: expected type `i32`\n-              found type `u32`\n \n error: aborting due to previous error\n "}, {"sha": "f120b60c611f05685a95e4216c3631c6f0e124f4", "filename": "src/test/ui/if/if-let-arm-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -8,5 +8,4 @@ fn main() {\n     };\n     //~^^ ERROR: if and else have incompatible types\n     //~| NOTE expected (), found integer\n-    //~| NOTE expected type `()`\n }"}, {"sha": "088aa0e8554bb968d2a630ccd5b6bcb874b1f9ba", "filename": "src/test/ui/if/if-let-arm-types.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -11,9 +11,6 @@ LL | |         1\n    | |         ^ expected (), found integer\n LL | |     };\n    | |_____- if and else have incompatible types\n-   |\n-   = note: expected type `()`\n-              found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "add9ee86ac2262ba99c3ab1b8a7334a5d6e39947", "filename": "src/test/ui/if/if-no-match-bindings.stderr", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |     if b_ref() {}\n    |        |\n    |        expected bool, found &bool\n    |        help: consider dereferencing the borrow: `*b_ref()`\n-   |\n-   = note:   expected type `bool`\n-           found reference `&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:19:8\n@@ -18,9 +15,6 @@ LL |     if b_mut_ref() {}\n    |        |\n    |        expected bool, found &mut bool\n    |        help: consider dereferencing the borrow: `*b_mut_ref()`\n-   |\n-   = note:           expected type `bool`\n-           found mutable reference `&mut bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:20:8\n@@ -30,9 +24,6 @@ LL |     if &true {}\n    |        |\n    |        expected bool, found &bool\n    |        help: consider removing the borrow: `true`\n-   |\n-   = note:   expected type `bool`\n-           found reference `&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:21:8\n@@ -42,9 +33,6 @@ LL |     if &mut true {}\n    |        |\n    |        expected bool, found &mut bool\n    |        help: consider removing the borrow: `true`\n-   |\n-   = note:           expected type `bool`\n-           found mutable reference `&mut bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:24:11\n@@ -54,9 +42,6 @@ LL |     while b_ref() {}\n    |           |\n    |           expected bool, found &bool\n    |           help: consider dereferencing the borrow: `*b_ref()`\n-   |\n-   = note:   expected type `bool`\n-           found reference `&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:25:11\n@@ -66,9 +51,6 @@ LL |     while b_mut_ref() {}\n    |           |\n    |           expected bool, found &mut bool\n    |           help: consider dereferencing the borrow: `*b_mut_ref()`\n-   |\n-   = note:           expected type `bool`\n-           found mutable reference `&mut bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:26:11\n@@ -78,9 +60,6 @@ LL |     while &true {}\n    |           |\n    |           expected bool, found &bool\n    |           help: consider removing the borrow: `true`\n-   |\n-   = note:   expected type `bool`\n-           found reference `&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:27:11\n@@ -90,9 +69,6 @@ LL |     while &mut true {}\n    |           |\n    |           expected bool, found &mut bool\n    |           help: consider removing the borrow: `true`\n-   |\n-   = note:           expected type `bool`\n-           found mutable reference `&mut bool`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "472c85d96fbd7abbd47a11292976ac497355857a", "filename": "src/test/ui/if/if-without-else-as-fn-expr.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -8,8 +8,6 @@ LL | |         return 3;\n LL | |     }\n    | |_____^ expected usize, found ()\n    |\n-   = note:   expected type `usize`\n-           found unit type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n@@ -24,8 +22,6 @@ LL | |         return 3;\n LL | |     };\n    | |_____^ expected usize, found ()\n    |\n-   = note:   expected type `usize`\n-           found unit type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n@@ -39,8 +35,6 @@ LL | |         3\n LL | |     }\n    | |_____^ expected usize, found ()\n    |\n-   = note:   expected type `usize`\n-           found unit type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n@@ -54,8 +48,6 @@ LL | |         return 3;\n LL | |     }\n    | |_____^ expected usize, found ()\n    |\n-   = note:   expected type `usize`\n-           found unit type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n@@ -70,8 +62,6 @@ LL | |         return 3;\n LL | |     };\n    | |_____^ expected usize, found ()\n    |\n-   = note:   expected type `usize`\n-           found unit type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n@@ -85,8 +75,6 @@ LL | |         3\n LL | |     }\n    | |_____^ expected usize, found ()\n    |\n-   = note:   expected type `usize`\n-           found unit type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n "}, {"sha": "bd5597334666508028254748cda61c7ce729db90", "filename": "src/test/ui/if/if-without-else-result.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -1,8 +1,6 @@\n fn main() {\n     let a = if true { true };\n     //~^ ERROR if may be missing an else clause [E0317]\n-    //~| expected unit type `()`\n-    //~| found type `bool`\n     //~| expected (), found bool\n     println!(\"{}\", a);\n }"}, {"sha": "b2c700d3c8febd6e96a005e46d7b480006f94e5f", "filename": "src/test/ui/if/if-without-else-result.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -7,8 +7,6 @@ LL |     let a = if true { true };\n    |             |         found here\n    |             expected (), found bool\n    |\n-   = note: expected unit type `()`\n-                   found type `bool`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n "}, {"sha": "7349ab12cda0464ca021f0ba06a675b48db46d5d", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -9,9 +9,6 @@ LL |         return 1_i32;\n LL |     }\n LL |     0_u32\n    |     ^^^^^ expected i32, found u32\n-   |\n-   = note: expected type `i32`\n-              found type `u32`\n \n error[E0277]: cannot add `impl Foo` to `u32`\n   --> $DIR/equality.rs:24:11"}, {"sha": "43d8ba1d7a361f802f0207cc775ff2a9ad9f80e7", "filename": "src/test/ui/include-macros/mismatched-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatched-types.rs:2:20\n    |\n LL |     let b: &[u8] = include_str!(\"file.txt\");\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found str\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[u8]`, found str\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatched-types.rs:3:19\n    |\n LL |     let s: &str = include_bytes!(\"file.txt\");\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected str, found array of 0 elements\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected str, found array `[u8; 0]`\n    |\n    = note: expected reference `&str`\n               found reference `&'static [u8; 0]`"}, {"sha": "5200b4a829db236f4298288cabf0f03bb13ea250", "filename": "src/test/ui/integral-variable-unification-error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fintegral-variable-unification-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fintegral-variable-unification-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintegral-variable-unification-error.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,7 +2,5 @@ fn main() {\n     let mut x = 2;\n     x = 5.0;\n     //~^ ERROR mismatched types\n-    //~| expected type `{integer}`\n-    //~| found type `{float}`\n     //~| expected integer, found floating-point number\n }"}, {"sha": "b49bff1b0d84dc9e076ce9409e0c8a9e3ac8fb53", "filename": "src/test/ui/integral-variable-unification-error.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fintegral-variable-unification-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fintegral-variable-unification-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintegral-variable-unification-error.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     x = 5.0;\n    |         ^^^ expected integer, found floating-point number\n-   |\n-   = note: expected type `{integer}`\n-              found type `{float}`\n \n error: aborting due to previous error\n "}, {"sha": "f40d00051615685678ca03ce04dca6df3ec71862", "filename": "src/test/ui/issues/issue-11319.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -8,7 +8,6 @@ fn main() {\n         None    => (),\n         //~^ ERROR match arms have incompatible types\n         //~| NOTE expected bool, found ()\n-        //~| NOTE expected type `bool`\n         _       => true\n     }\n }"}, {"sha": "2ca49922d06126aa2d8a5b458b6d7d43f87e08b6", "filename": "src/test/ui/issues/issue-11319.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -15,9 +15,6 @@ LL | |         None    => (),\n LL | |         _       => true\n LL | |     }\n    | |_____- `match` arms have incompatible types\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "102405cd0f674be3c479f43f35634d872a1ee430", "filename": "src/test/ui/issues/issue-12997-2.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-12997-2.rs:8:1\n    |\n LL | fn bar(x: isize) { }\n-   | ^^^^^^^^^^^^^^^^^^^^ expected isize, found mutable reference\n-   |\n-   = note:           expected type `isize`\n-           found mutable reference `&mut test::Bencher`\n+   | ^^^^^^^^^^^^^^^^^^^^ expected isize, found &mut test::Bencher\n \n error: aborting due to previous error\n "}, {"sha": "5a465cc533bb7004fdcc2b9f8375412d934443e7", "filename": "src/test/ui/issues/issue-13407.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -9,9 +9,6 @@ error[E0308]: mismatched types\n    |\n LL |     A::C = 1;\n    |            ^ expected struct `A::C`, found integer\n-   |\n-   = note: expected struct `A::C`\n-                found type `{integer}`\n \n error[E0070]: invalid left-hand side expression\n   --> $DIR/issue-13407.rs:6:5"}, {"sha": "13c35dd84f7c51499f4f9a46bc37f59072e4554a", "filename": "src/test/ui/issues/issue-13446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13446.rs:3:26\n    |\n LL | static VEC: [u32; 256] = vec![];\n-   |                          ^^^^^^ expected array of 256 elements, found struct `std::vec::Vec`\n+   |                          ^^^^^^ expected array `[u32; 256]`, found struct `std::vec::Vec`\n    |\n    = note: expected array `[u32; 256]`\n              found struct `std::vec::Vec<_>`"}, {"sha": "bb9f843dadfe38b09d3a12e657d74252f06ab7c7", "filename": "src/test/ui/issues/issue-14091.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-14091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-14091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14091.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     assert!(1,1);\n    |     ^^^^^^^^^^^^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "555ec9f9868c5778cd086ef5bff443551c6776eb", "filename": "src/test/ui/issues/issue-14541.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-14541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-14541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14541.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,8 +5,6 @@ fn make(v: Vec2) {\n     let Vec3 { y: _, z: _ } = v;\n     //~^ ERROR mismatched types\n     //~| expected struct `Vec2`, found struct `Vec3`\n-    //~| expected struct `Vec2`\n-    //~| found struct `Vec3`\n }\n \n fn main() { }"}, {"sha": "c5512e03007dfb5c3c56bd83332cdf71537eb1d0", "filename": "src/test/ui/issues/issue-14541.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-14541.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-14541.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14541.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     let Vec3 { y: _, z: _ } = v;\n    |         ^^^^^^^^^^^^^^^^^^^ expected struct `Vec2`, found struct `Vec3`\n-   |\n-   = note: expected struct `Vec2`\n-              found struct `Vec3`\n \n error: aborting due to previous error\n "}, {"sha": "0c1db02a8e6370f5b58980ee19ead2d30e1a8b03", "filename": "src/test/ui/issues/issue-15783.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-15783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-15783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15783.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -9,6 +9,6 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected enum `std::option::Option<&[&str]>`\n     //~| found enum `std::option::Option<&[&str; 1]>`\n-    //~| expected slice, found array of 1 element\n+    //~| expected slice `[&str]`, found array `[&str; 1]`\n     assert_eq!(msg, 3);\n }"}, {"sha": "74a96df5b1b0fa4e339a1a565d28a31863b30b2c", "filename": "src/test/ui/issues/issue-15783.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-15783.rs:8:19\n    |\n LL |     let msg = foo(x);\n-   |                   ^ expected slice, found array of 1 element\n+   |                   ^ expected slice `[&str]`, found array `[&str; 1]`\n    |\n    = note: expected enum `std::option::Option<&[&str]>`\n               found enum `std::option::Option<&[&str; 1]>`"}, {"sha": "a11c9d07f6fe5a1a236e4fa3e961079d98a66726", "filename": "src/test/ui/issues/issue-15896.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-15896.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-15896.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15896.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -11,8 +11,6 @@ fn main() {\n           Tau{t: x},\n           //~^ ERROR mismatched types\n           //~| expected enum `main::R`, found struct `main::Tau`\n-          //~| expected enum `main::R`\n-          //~| found struct `main::Tau`\n           _) => x,\n     };\n }"}, {"sha": "f553be9df55eb2c38c10a6cfd11796b3fa93464d", "filename": "src/test/ui/issues/issue-15896.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-15896.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-15896.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15896.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |     let u = match e {\n LL |         E::B(\n LL |           Tau{t: x},\n    |           ^^^^^^^^^ expected enum `main::R`, found struct `main::Tau`\n-   |\n-   = note: expected enum `main::R`\n-            found struct `main::Tau`\n \n error: aborting due to previous error\n "}, {"sha": "715892397a479f8cc6cd630ccbb54481d8e2adb3", "filename": "src/test/ui/issues/issue-17033.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-17033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-17033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17033.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -1,7 +1,5 @@\n fn f<'r>(p: &'r mut fn(p: &mut ())) {\n     (*p)(()) //~  ERROR mismatched types\n-             //~| expected mutable reference `&mut ()`\n-             //~| found unit type `()`\n              //~| expected &mut (), found ()\n }\n "}, {"sha": "4bdc806f71763e42efa902916458b583e21f21a0", "filename": "src/test/ui/issues/issue-17033.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |     (*p)(())\n    |          |\n    |          expected &mut (), found ()\n    |          help: consider mutably borrowing here: `&mut ()`\n-   |\n-   = note: expected mutable reference `&mut ()`\n-                      found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "e79a006afd9f754c120a90c5df1e173b89ae7ae8", "filename": "src/test/ui/issues/issue-19991.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,8 +3,6 @@\n \n fn main() {\n     if let Some(homura) = Some(\"madoka\") { //~  ERROR missing an else clause\n-                                           //~| expected unit type `()`\n-                                           //~| found type `{integer}`\n                                            //~| expected (), found integer\n         765\n     };"}, {"sha": "d06c3acfd12c6b9e5e7512a87eaea8890cccb887", "filename": "src/test/ui/issues/issue-19991.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,15 +3,11 @@ error[E0317]: if may be missing an else clause\n    |\n LL | /     if let Some(homura) = Some(\"madoka\") {\n LL | |\n-LL | |\n-LL | |\n LL | |         765\n    | |         --- found here\n LL | |     };\n    | |_____^ expected (), found integer\n    |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n "}, {"sha": "0c8e6e402e2ce008f39d267221c661949a1a1b57", "filename": "src/test/ui/issues/issue-20225.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-20225.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-20225.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,21 +5,18 @@ struct Foo;\n impl<'a, T> Fn<(&'a T,)> for Foo {\n   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n   //~^ ERROR: has an incompatible type for trait\n-  //~| expected reference\n }\n \n impl<'a, T> FnMut<(&'a T,)> for Foo {\n   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n   //~^ ERROR: has an incompatible type for trait\n-  //~| expected reference\n }\n \n impl<'a, T> FnOnce<(&'a T,)> for Foo {\n   type Output = ();\n \n   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n   //~^ ERROR: has an incompatible type for trait\n-  //~| expected reference\n }\n \n fn main() {}"}, {"sha": "baee8b967992f16912f74ce58424bdc50f7960a6", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -4,34 +4,34 @@ error[E0053]: method `call` has an incompatible type for trait\n LL | impl<'a, T> Fn<(&'a T,)> for Foo {\n    |          - this type parameter\n LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter `T`\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected &T, found type parameter `T`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(&Foo, (T,))`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_mut` has an incompatible type for trait\n-  --> $DIR/issue-20225.rs:12:3\n+  --> $DIR/issue-20225.rs:11:3\n    |\n LL | impl<'a, T> FnMut<(&'a T,)> for Foo {\n    |          - this type parameter\n LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter `T`\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected &T, found type parameter `T`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(&mut Foo, (T,))`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_once` has an incompatible type for trait\n-  --> $DIR/issue-20225.rs:20:3\n+  --> $DIR/issue-20225.rs:18:3\n    |\n LL | impl<'a, T> FnOnce<(&'a T,)> for Foo {\n    |          - this type parameter\n ...\n LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter `T`\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected &T, found type parameter `T`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(Foo, (T,))`"}, {"sha": "3c6d3df7faee4c1f9ca80cc7824d080fe41b8637", "filename": "src/test/ui/issues/issue-22684.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-22684.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-22684.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22684.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     let _: () = foo::Foo.bar();\n    |                 ^^^^^^^^^^^^^^ expected (), found bool\n-   |\n-   = note: expected unit type `()`\n-                   found type `bool`\n \n error: aborting due to previous error\n "}, {"sha": "a36b380b9c1f074259fbd0c9fb566dfca0a10e9e", "filename": "src/test/ui/issues/issue-23589.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -12,9 +12,6 @@ error[E0308]: mismatched types\n    |\n LL |     let v: Vec(&str) = vec!['1', '2'];\n    |                             ^^^ expected &str, found char\n-   |\n-   = note: expected reference `&str`\n-                   found type `char`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1a08647358cccd63883d009798e184baac540d3b", "filename": "src/test/ui/issues/issue-27008.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-27008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-27008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27008.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -4,6 +4,4 @@ fn main() {\n     let b = [0; S];\n     //~^ ERROR mismatched types\n     //~| expected usize, found struct `S`\n-    //~| expected type `usize`\n-    //~| found struct `S`\n }"}, {"sha": "2c9eed0b3a54b524ad461488b17aae58a8532f1d", "filename": "src/test/ui/issues/issue-27008.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-27008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-27008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27008.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     let b = [0; S];\n    |                 ^ expected usize, found struct `S`\n-   |\n-   = note: expected type `usize`\n-            found struct `S`\n \n error: aborting due to previous error\n "}, {"sha": "e379b23a5950a006df1a683282de7c372272eece", "filename": "src/test/ui/issues/issue-27042.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -16,9 +16,6 @@ LL |         loop { break };\n    |                |\n    |                expected i32, found ()\n    |                help: give it a value of the expected type: `break 42`\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:8:9\n@@ -27,29 +24,20 @@ LL | /         'b:\n LL | |\n LL | |         while true { break }; // but here we cite the whole loop\n    | |____________________________^ expected i32, found ()\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:12:9\n    |\n LL | /         'c:\n LL | |         for _ in None { break }; // but here we cite the whole loop\n    | |_______________________________^ expected i32, found ()\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:15:9\n    |\n LL | /         'd:\n LL | |         while let Some(_) = None { break };\n    | |__________________________________________^ expected i32, found ()\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c4c6b6f8183b999ea651fa95da4d2865106e4a3f", "filename": "src/test/ui/issues/issue-29084.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-29084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-29084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29084.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -4,8 +4,6 @@ macro_rules! foo {\n         bar(&mut $d);\n         //~^ ERROR mismatched types\n         //~| expected u8, found &mut u8\n-        //~| expected type `u8`\n-        //~| found mutable reference `&mut u8`\n     }}\n }\n "}, {"sha": "a91033e336020f79f6f7cd8e4d43f7b33935595e", "filename": "src/test/ui/issues/issue-29084.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |         bar(&mut $d);\n ...\n LL |     foo!(0u8);\n    |     ---------- in this macro invocation\n-   |\n-   = note:           expected type `u8`\n-           found mutable reference `&mut u8`\n \n error: aborting due to previous error\n "}, {"sha": "ccd05fa6bfb0957ea00688b6a4202ad9e3d2184b", "filename": "src/test/ui/issues/issue-30225.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-30225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-30225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30225.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     u = v; // mark $0 and $1 in a subtype relationship\n    |         ^ expected struct `A`, found struct `B`\n-   |\n-   = note: expected struct `A`\n-              found struct `B`\n \n error: aborting due to previous error\n "}, {"sha": "522df6a07c2c6a521911f0cceb15b89b1b5e6089", "filename": "src/test/ui/issues/issue-33504.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-33504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-33504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33504.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |         let Test = 1;\n    |             ^^^^ expected integer, found struct `Test`\n-   |\n-   = note: expected type `{integer}`\n-            found struct `Test`\n \n error: aborting due to previous error\n "}, {"sha": "5613d3f1766b2d5737061213889124a553b6694e", "filename": "src/test/ui/issues/issue-37026.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,18 +3,12 @@ error[E0308]: mismatched types\n    |\n LL |     let empty_struct::XEmpty2 = ();\n    |         ^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `empty_struct::XEmpty2`\n-   |\n-   = note: expected unit type `()`\n-                 found struct `empty_struct::XEmpty2`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-37026.rs:7:9\n    |\n LL |     let empty_struct::XEmpty6(..) = ();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `empty_struct::XEmpty6`\n-   |\n-   = note: expected unit type `()`\n-                 found struct `empty_struct::XEmpty6`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f872557966bfee3137b324c57236fbfcc4c31eab", "filename": "src/test/ui/issues/issue-37665.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     let x: () = 0;\n    |                 ^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "b758cccd8f7bfa3229ced20b4dde1fef36c930b1", "filename": "src/test/ui/issues/issue-39970.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -7,8 +7,6 @@ LL |     fn visit() {}\n LL |     <() as Visit>::visit();\n    |     ^^^^^^^^^^^^^^^^^^^^ expected &(), found ()\n    |\n-   = note: expected reference `&()`\n-              found unit type `()`\n    = note: required because of the requirements on the impl of `Visit` for `()`\n \n error: aborting due to previous error"}, {"sha": "6d2ef769a162ad9afd715319cdfd35c624c2ee0c", "filename": "src/test/ui/issues/issue-41549.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-41549.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-41549.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41549.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0326]: implemented const `CONST` has an incompatible type for trait\n    |\n LL |     const CONST: () = ();\n    |                  ^^ expected u32, found ()\n-   |\n-   = note:   expected type `u32`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "d6e2146208e3d4ddd98179998a004ffddcd01443", "filename": "src/test/ui/issues/issue-41742.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-41742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-41742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41742.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-41742.rs:24:7\n    |\n LL |     H[\"?\"].f();\n-   |       ^^^ expected u32, found reference\n-   |\n-   = note:   expected type `u32`\n-           found reference `&'static str`\n+   |       ^^^ expected u32, found &str\n \n error: aborting due to previous error\n "}, {"sha": "ba4e9f6fa98923f2148567bb8e7f56e9178a429d", "filename": "src/test/ui/issues/issue-4201.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,8 +3,6 @@ fn main() {\n         0\n     } else if false {\n //~^ ERROR if may be missing an else clause\n-//~| expected unit type `()`\n-//~| found type `{integer}`\n //~| expected (), found integer\n         1\n     };"}, {"sha": "5ea4fdbf7ecc83deb83cecf6e0f1444e5200978a", "filename": "src/test/ui/issues/issue-4201.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,15 +5,11 @@ LL |       } else if false {\n    |  ____________^\n LL | |\n LL | |\n-LL | |\n-LL | |\n LL | |         1\n    | |         - found here\n LL | |     };\n    | |_____^ expected (), found integer\n    |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n "}, {"sha": "76696873f4eefd8f2b1d759a0615ce2cb8a32fbc", "filename": "src/test/ui/issues/issue-43162.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -20,9 +20,6 @@ LL | fn foo() -> bool {\n LL |\n LL |     break true;\n    |               - help: consider removing this semicolon\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "27aebc548e1981a74c3d9fc00bc23ccd7baaf9c0", "filename": "src/test/ui/issues/issue-43420-no-over-suggest.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-43420-no-over-suggest.rs:8:9\n    |\n LL |     foo(&a);\n-   |         ^^ expected slice, found struct `std::vec::Vec`\n+   |         ^^ expected slice `[u16]`, found struct `std::vec::Vec`\n    |\n    = note: expected reference `&[u16]`\n               found reference `&std::vec::Vec<u8>`"}, {"sha": "a55bb22986963622d0d18691a096ebd333ae8afc", "filename": "src/test/ui/issues/issue-44023.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,9 +5,6 @@ LL | fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( )\n    |    ------------------------        ^^^^^ expected isize, found ()\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n-   |\n-   = note:   expected type `isize`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "df3da04f2e835ccc09055c9cff1ae0ff7dc1fbf6", "filename": "src/test/ui/issues/issue-4517.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-4517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-4517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4517.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -4,7 +4,5 @@ fn main() {\n     let foo: [u8; 4] = [1; 4];\n     bar(foo);\n     //~^ ERROR mismatched types\n-    //~| expected type `usize`\n-    //~| found array `[u8; 4]`\n-    //~| expected usize, found array of 4 elements\n+    //~| expected usize, found array `[u8; 4]`\n }"}, {"sha": "6c5495484b33c85f4f3985e022b67def6e098122", "filename": "src/test/ui/issues/issue-4517.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-4517.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-4517.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4517.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-4517.rs:5:9\n    |\n LL |     bar(foo);\n-   |         ^^^ expected usize, found array of 4 elements\n-   |\n-   = note: expected type `usize`\n-             found array `[u8; 4]`\n+   |         ^^^ expected usize, found array `[u8; 4]`\n \n error: aborting due to previous error\n "}, {"sha": "073abdfefdc8199afd186ebe63cc62ab7ae50e4a", "filename": "src/test/ui/issues/issue-46302.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-46302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-46302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46302.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |   let u: &str = if true { s[..2] } else { s };\n    |                           |\n    |                           expected &str, found str\n    |                           help: consider borrowing here: `&s[..2]`\n-   |\n-   = note: expected reference `&str`\n-                   found type `str`\n \n error: aborting due to previous error\n "}, {"sha": "7e356ba1c11643013dfcbe7e2447eff91c5660d5", "filename": "src/test/ui/issues/issue-46756-consider-borrowing-cast-or-binexpr.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |     light_flows_our_war_of_mocking_words(behold as usize);\n    |                                          |\n    |                                          expected &usize, found usize\n    |                                          help: consider borrowing here: `&(behold as usize)`\n-   |\n-   = note: expected reference `&usize`\n-                   found type `usize`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-46756-consider-borrowing-cast-or-binexpr.rs:14:42\n@@ -18,9 +15,6 @@ LL |     light_flows_our_war_of_mocking_words(with_tears + 4);\n    |                                          |\n    |                                          expected &usize, found usize\n    |                                          help: consider borrowing here: `&(with_tears + 4)`\n-   |\n-   = note: expected reference `&usize`\n-                   found type `usize`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9237b93924a8599981b1a917eb764d23a41e9ff5", "filename": "src/test/ui/issues/issue-47486.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     () < std::mem::size_of::<_>();\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found usize\n-   |\n-   = note: expected unit type `()`\n-                   found type `usize`\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-47486.rs:3:11"}, {"sha": "4fc534d59c8997b53eab55409279b2452f0cada0", "filename": "src/test/ui/issues/issue-48364.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-48364.rs:2:21\n    |\n LL |     b\"\".starts_with(stringify!(foo))\n-   |                     ^^^^^^^^^^^^^^^ expected slice, found str\n+   |                     ^^^^^^^^^^^^^^^ expected slice `[u8]`, found str\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`"}, {"sha": "2494bf7471bb9d79584acb54b345e3896af238b9", "filename": "src/test/ui/issues/issue-50577.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -31,8 +31,6 @@ LL |         Drop = assert_eq!(1, 1)\n    |                expected (), found isize\n    |                found here\n    |\n-   = note: expected unit type `()`\n-                   found type `isize`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}, {"sha": "9f60db917316ee6fd838949a5439a8a7163700ea", "filename": "src/test/ui/issues/issue-50585.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -9,9 +9,6 @@ error[E0308]: mismatched types\n    |\n LL |     |y: Vec<[(); for x in 0..2 {}]>| {};\n    |                  ^^^^^^^^^^^^^^^^ expected usize, found ()\n-   |\n-   = note:   expected type `usize`\n-           found unit type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e453b0cfaa83becf4a9d1ff72ebb2e366c7d5b96", "filename": "src/test/ui/issues/issue-53348.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -10,7 +10,6 @@ fn main() {\n         a = *i.to_string();\n         //~^ ERROR mismatched types\n         //~| NOTE expected struct `std::string::String`, found str\n-        //~| NOTE expected struct\n         v2.push(a);\n     }\n }"}, {"sha": "2c117f52a26bf40484e12d6b283a54bb69962f93", "filename": "src/test/ui/issues/issue-53348.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |         a = *i.to_string();\n    |             ^^^^^^^^^^^^^^ expected struct `std::string::String`, found str\n-   |\n-   = note: expected struct `std::string::String`\n-                found type `str`\n \n error: aborting due to previous error\n "}, {"sha": "8dc5c95b9b1e3f7d3d59e51390e816e4f9ba44e1", "filename": "src/test/ui/issues/issue-53692.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -18,9 +18,6 @@ LL |         let string: String = s.clone();\n    |                              |\n    |                              expected struct `std::string::String`, found &str\n    |                              help: try using a conversion method: `s.to_string()`\n-   |\n-   = note: expected struct `std::string::String`\n-           found reference `&str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7fd124046dc618a07c6ee4e2f5ced599648e4c21", "filename": "src/test/ui/issues/issue-56943.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-56943.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-56943.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56943.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     let _: issue_56943::S = issue_56943::S2;\n    |                             ^^^^^^^^^^^^^^^ expected struct `issue_56943::S`, found struct `issue_56943::S2`\n-   |\n-   = note: expected struct `issue_56943::S`\n-              found struct `issue_56943::S2`\n \n error: aborting due to previous error\n "}, {"sha": "c8439ee18f4f3e372695773877cb2edf893f1ed5", "filename": "src/test/ui/issues/issue-61106.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-61106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-61106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61106.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |     foo(x.clone());\n    |         |\n    |         expected &str, found struct `std::string::String`\n    |         help: consider borrowing here: `&x`\n-   |\n-   = note: expected reference `&str`\n-                 found struct `std::string::String`\n \n error: aborting due to previous error\n "}, {"sha": "86cc48aff06e96f6a89c752d1ce05cd5783ab459", "filename": "src/test/ui/issues/issue-61882.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-61882.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-61882.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61882.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     const B: A<u8> = Self(0);\n    |                           ^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-61882.rs:4:22"}, {"sha": "b498ff0b534b4310909edd10184ad309b513936d", "filename": "src/test/ui/issues/issue-7061.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-7061.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fissues%2Fissue-7061.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7061.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-7061.rs:4:46\n    |\n LL |     fn foo(&'a mut self) -> Box<BarStruct> { self }\n-   |                             --------------   ^^^^ expected struct `std::boxed::Box`, found mutable reference\n+   |                             --------------   ^^^^ expected struct `std::boxed::Box`, found &mut BarStruct\n    |                             |\n    |                             expected `std::boxed::Box<BarStruct>` because of return type\n    |"}, {"sha": "c1cc57ab5119ebe84a154c266e6dd43ee2666649", "filename": "src/test/ui/json-bom-plus-crlf-multifile.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -15,8 +15,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n-     found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -35,8 +34,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n-     found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -55,8 +53,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n-     found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -75,8 +72,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found ()\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n-found unit type `()`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found ()\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors\n \"}"}, {"sha": "581605ca5bbfb6bc71658b8711fc052265f22778", "filename": "src/test/ui/json-bom-plus-crlf.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -15,8 +15,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n-     found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:17:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:17:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -35,8 +34,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n-     found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:19:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:19:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -55,8 +53,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n-     found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:23:1: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:23:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -75,8 +72,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found ()\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n-found unit type `()`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:25:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found ()\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors\n \"}"}, {"sha": "7774349b75ae6498a83dc6a74fd26f8ff958dc33", "filename": "src/test/ui/keyword/keyword-false-as-identifier.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-false-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-false-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-false-as-identifier.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     let false = 22;\n    |         ^^^^^ expected integer, found bool\n-   |\n-   = note: expected type `{integer}`\n-              found type `bool`\n \n error: aborting due to previous error\n "}, {"sha": "b2c2fc744c3bbee99110938d6d1c061791b6acbf", "filename": "src/test/ui/keyword/keyword-true-as-identifier.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-true-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-true-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-true-as-identifier.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     let true = 22;\n    |         ^^^^ expected integer, found bool\n-   |\n-   = note: expected type `{integer}`\n-              found type `bool`\n \n error: aborting due to previous error\n "}, {"sha": "db330c2f3540854603ecd56ac9b523ddc119295f", "filename": "src/test/ui/liveness/liveness-closure-require-ret.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fliveness%2Fliveness-closure-require-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fliveness%2Fliveness-closure-require-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-closure-require-ret.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL | fn main() { println!(\"{}\", force(|| {})); }\n    |                                     ^^ expected isize, found ()\n-   |\n-   = note:   expected type `isize`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "6b7bd1acdc7a730dbc600f52dfdff09cfad91f04", "filename": "src/test/ui/liveness/liveness-forgot-ret.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,9 +5,6 @@ LL | fn f(a: isize) -> isize { if god_exists(a) { return 5; }; }\n    |    -              ^^^^^ expected isize, found ()\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n-   |\n-   = note:   expected type `isize`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "7606413f15ef8f96d769f4538b46f0185a5135c2", "filename": "src/test/ui/liveness/liveness-issue-2163.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fliveness%2Fliveness-issue-2163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fliveness%2Fliveness-issue-2163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-issue-2163.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |       a.iter().all(|_| -> bool {\n LL | |\n LL | |     });\n    | |_____^ expected bool, found ()\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "499dbf10ede28ee7bf8b67e3c8fe97a6f070c10f", "filename": "src/test/ui/liveness/liveness-missing-ret2.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,9 +5,6 @@ LL | fn f() -> isize {\n    |    -      ^^^^^ expected isize, found ()\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n-   |\n-   = note:   expected type `isize`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "93249fd5aff571c67fa614bc9f479879fb98b7ff", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -9,9 +9,6 @@ LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n ...\n LL |     test!();\n    |     -------- in this macro invocation\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:7:19\n@@ -20,9 +17,6 @@ LL | fn no_return() -> i32 {}\n    |    ---------      ^^^ expected i32, found ()\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:9:19\n@@ -33,9 +27,6 @@ LL | fn bar(x: u32) -> u32 {\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     x * 2;\n    |          - help: consider removing this semicolon\n-   |\n-   = note:   expected type `u32`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:13:19\n@@ -44,9 +35,6 @@ LL | fn baz(x: u64) -> u32 {\n    |    ---            ^^^ expected u32, found ()\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n-   |\n-   = note:   expected type `u32`\n-           found unit type `()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "4588b7b02bbe0de2afd5092e681ce866968b626c", "filename": "src/test/ui/loops/loop-break-value.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -108,36 +108,24 @@ error[E0308]: mismatched types\n    |\n LL |             break 123;\n    |                   ^^^ expected &str, found integer\n-   |\n-   = note: expected type `&str`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:16:15\n    |\n LL |         break \"asdf\";\n-   |               ^^^^^^ expected i32, found reference\n-   |\n-   = note:   expected type `i32`\n-           found reference `&'static str`\n+   |               ^^^^^^ expected i32, found &str\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:21:31\n    |\n LL |             break 'outer_loop \"nope\";\n-   |                               ^^^^^^ expected i32, found reference\n-   |\n-   = note:   expected type `i32`\n-           found reference `&'static str`\n+   |                               ^^^^^^ expected i32, found &str\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:73:26\n    |\n LL |                 break 'c 123;\n    |                          ^^^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:80:15\n@@ -153,9 +141,6 @@ error[E0308]: mismatched types\n    |\n LL |         break 2;\n    |               ^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:90:9\n@@ -165,9 +150,6 @@ LL |         break;\n    |         |\n    |         expected integer, found ()\n    |         help: give it a value of the expected type: `break value`\n-   |\n-   = note:   expected type `{integer}`\n-           found unit type `()`\n \n error: aborting due to 16 previous errors\n "}, {"sha": "c3d0ae28f74d7360e470d3a6d87852855caeb1e7", "filename": "src/test/ui/loops/loop-labeled-break-value.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Floops%2Floop-labeled-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Floops%2Floop-labeled-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-labeled-break-value.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |         let _: i32 = loop { break };\n    |                             |\n    |                             expected i32, found ()\n    |                             help: give it a value of the expected type: `break 42`\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-labeled-break-value.rs:6:37\n@@ -18,9 +15,6 @@ LL |         let _: i32 = 'inner: loop { break 'inner };\n    |                                     |\n    |                                     expected i32, found ()\n    |                                     help: give it a value of the expected type: `break 'inner 42`\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-labeled-break-value.rs:9:45\n@@ -30,9 +24,6 @@ LL |         let _: i32 = 'inner2: loop { loop { break 'inner2 } };\n    |                                             |\n    |                                             expected i32, found ()\n    |                                             help: give it a value of the expected type: `break 'inner2 42`\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9b4329ded18bd767cd0cc6a6149fdfff98202f66", "filename": "src/test/ui/loops/loop-properly-diverging-2.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Floops%2Floop-properly-diverging-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Floops%2Floop-properly-diverging-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-properly-diverging-2.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |   let x: i32 = loop { break };\n    |                       |\n    |                       expected i32, found ()\n    |                       help: give it a value of the expected type: `break 42`\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "4598b512f1d1f63c82166cca5fe8b6f4b3c01c28", "filename": "src/test/ui/match/match-arm-resolving-to-never.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -9,12 +9,10 @@ LL | |         E::D => 4,\n LL | |         E::E => unimplemented!(\"\"),\n    | |                 ------------------ this and all prior arms are found to be of type `{integer}`\n LL | |         E::F => \"\",\n-   | |                 ^^ expected integer, found reference\n+   | |                 ^^ expected integer, found &str\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note:   expected type `{integer}`\n-           found reference `&'static str`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "c0cdbe342a07d503dfa5f62e19ab321e36997925", "filename": "src/test/ui/match/match-range-fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -19,6 +19,4 @@ fn main() {\n         _ => { }\n     };\n     //~^^^ ERROR mismatched types\n-    //~| expected type `{integer}`\n-    //~| found type `char`\n }"}, {"sha": "8ce2d8853de31f1b4532b5e54208d6303042556b", "filename": "src/test/ui/match/match-range-fail.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -29,9 +29,6 @@ error[E0308]: mismatched types\n    |\n LL |         'c' ..= 100 => { }\n    |         ^^^^^^^^^^^ expected integer, found char\n-   |\n-   = note: expected type `{integer}`\n-              found type `char`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7a54c54b98cb85c2762a4d1402797863db58159c", "filename": "src/test/ui/match/match-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-struct.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,8 +6,6 @@ fn main() {\n         E::C(_) => (),\n         //~^ ERROR mismatched types\n         //~| expected struct `S`, found enum `E`\n-        //~| expected struct `S`\n-        //~| found enum `E`\n         _ => ()\n     }\n }"}, {"sha": "c23451d51ec5a89445b148691f14a20f79f930a0", "filename": "src/test/ui/match/match-struct.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-struct.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,9 +5,6 @@ LL |     match (S { a: 1 }) {\n    |           ------------ this match expression has type `S`\n LL |         E::C(_) => (),\n    |         ^^^^^^^ expected struct `S`, found enum `E`\n-   |\n-   = note: expected struct `S`\n-                found enum `E`\n \n error: aborting due to previous error\n "}, {"sha": "4b6260b2199e1a2e3a161096a377999e6c2171f8", "filename": "src/test/ui/match/match-tag-nullary.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL | fn main() { let x: A = A::A; match x { B::B => { } } }\n    |                                        ^^^^ expected enum `A`, found enum `B`\n-   |\n-   = note: expected enum `A`\n-              found enum `B`\n \n error: aborting due to previous error\n "}, {"sha": "db5dcd2be3b51345438f485b447903373aa2ac0f", "filename": "src/test/ui/match/match-tag-unary.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-unary.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,9 +5,6 @@ LL | fn main() { let x: A = A::A(0); match x { B::B(y) => { } } }\n    |                                       -   ^^^^^^^ expected enum `A`, found enum `B`\n    |                                       |\n    |                                       this match expression has type `A`\n-   |\n-   = note: expected enum `A`\n-              found enum `B`\n \n error: aborting due to previous error\n "}, {"sha": "2a0f01a0b093f35a00affd35fe2800e81db4d07a", "filename": "src/test/ui/match/match-type-err-first-arm.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -18,7 +18,6 @@ fn test_func2(n: i32) -> i32 {\n         _ => 42,\n         //~^ ERROR match arms have incompatible types\n         //~| NOTE expected char, found integer\n-        //~| NOTE expected type `char`\n     };\n     x\n }\n@@ -35,7 +34,6 @@ fn test_func3(n: i32) -> i32 {\n         _ => 42,\n         //~^ ERROR match arms have incompatible types\n         //~| NOTE expected char, found integer\n-        //~| NOTE expected type `char`\n     };\n     x\n }\n@@ -48,6 +46,5 @@ fn test_func4() {\n         None => {}\n         //~^ ERROR match arms have incompatible types\n         //~| NOTE expected u32, found ()\n-        //~| NOTE expected type `u32`\n     };\n }"}, {"sha": "39048e03296a977317b3abb8516491611e16cceb", "filename": "src/test/ui/match/match-type-err-first-arm.stderr", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -18,15 +18,11 @@ LL | |         _ => 42,\n    | |              ^^ expected char, found integer\n LL | |\n LL | |\n-LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n-   |\n-   = note: expected type `char`\n-              found type `{integer}`\n \n error[E0308]: match arms have incompatible types\n-  --> $DIR/match-type-err-first-arm.rs:35:14\n+  --> $DIR/match-type-err-first-arm.rs:34:14\n    |\n LL |       let x = match n {\n    |  _____________-\n@@ -39,16 +35,13 @@ LL | |         6 => 'b',\n LL | |\n LL | |         _ => 42,\n    | |              ^^ expected char, found integer\n-...  |\n+LL | |\n LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n-   |\n-   = note: expected type `char`\n-              found type `{integer}`\n \n error[E0308]: match arms have incompatible types\n-  --> $DIR/match-type-err-first-arm.rs:48:17\n+  --> $DIR/match-type-err-first-arm.rs:46:17\n    |\n LL | /     match Some(0u32) {\n LL | |         Some(x) => {\n@@ -57,13 +50,10 @@ LL | |             x\n LL | |         },\n LL | |         None => {}\n    | |                 ^^ expected u32, found ()\n-...  |\n+LL | |\n LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n-   |\n-   = note:   expected type `u32`\n-           found unit type `()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "12f75d009e2e54a32f9766824e2137878e575608", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,18 +3,12 @@ error[E0308]: mismatched types\n    |\n LL |     let _seetype: () = z;\n    |                        ^ expected (), found u32\n-   |\n-   = note: expected unit type `()`\n-                   found type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:102:24\n    |\n LL |     let _seetype: () = z;\n    |                        ^ expected (), found u64\n-   |\n-   = note: expected unit type `()`\n-                   found type `u64`\n \n error[E0034]: multiple applicable items in scope\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:120:15\n@@ -46,27 +40,18 @@ error[E0308]: mismatched types\n    |\n LL |     let _seetype: () = z;\n    |                        ^ expected (), found u8\n-   |\n-   = note: expected unit type `()`\n-                   found type `u8`\n \n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:155:24\n    |\n LL |     let _seetype: () = z;\n    |                        ^ expected (), found u32\n-   |\n-   = note: expected unit type `()`\n-                   found type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:172:24\n    |\n LL |     let _seetype: () = z;\n    |                        ^ expected (), found u32\n-   |\n-   = note: expected unit type `()`\n-                   found type `u32`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "c58040cdf5fb7075cafe52d2ef2863f52f04e9d6", "filename": "src/test/ui/methods/method-self-arg-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -10,8 +10,6 @@ fn main() {\n     let x = Foo;\n     Foo::bar(x); //~  ERROR mismatched types\n                  //~| expected &Foo, found struct `Foo`\n-                 //~| expected reference `&Foo`\n-                 //~| found struct `Foo`\n     Foo::bar(&42); //~  ERROR mismatched types\n                       //~| expected struct `Foo`, found integer\n                       //~| expected reference `&Foo`"}, {"sha": "a56164db1b6c2a134581db96b04599ee77f4873a", "filename": "src/test/ui/methods/method-self-arg-1.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,12 +6,9 @@ LL |     Foo::bar(x);\n    |              |\n    |              expected &Foo, found struct `Foo`\n    |              help: consider borrowing here: `&x`\n-   |\n-   = note: expected reference `&Foo`\n-                 found struct `Foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/method-self-arg-1.rs:15:14\n+  --> $DIR/method-self-arg-1.rs:13:14\n    |\n LL |     Foo::bar(&42);\n    |              ^^^ expected struct `Foo`, found integer"}, {"sha": "d3e41dabba61d93090af9908a3c72c245c51ddf9", "filename": "src/test/ui/mir-unpretty.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmir-unpretty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmir-unpretty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-unpretty.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     let x: () = 0;\n    |                 ^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "5a961f8948b922e2b561651a18901a65a45e7e03", "filename": "src/test/ui/mismatched_types/E0409.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -11,9 +11,6 @@ error[E0308]: mismatched types\n    |\n LL |         (0, ref y) | (y, 0) => {}\n    |                       ^ expected &{integer}, found integer\n-   |\n-   = note: expected type `&{integer}`\n-              found type `{integer}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c2081878629a6025caddb77de23c7cfb01ea0a07", "filename": "src/test/ui/mismatched_types/abridged.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -76,9 +76,6 @@ LL |     1+2\n    |     |\n    |     expected struct `std::string::String`, found integer\n    |     help: try using a conversion method: `(1+2).to_string()`\n-   |\n-   = note: expected struct `std::string::String`\n-                found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:59:5\n@@ -90,9 +87,6 @@ LL |     -2\n    |     |\n    |     expected struct `std::string::String`, found integer\n    |     help: try using a conversion method: `(-2).to_string()`\n-   |\n-   = note: expected struct `std::string::String`\n-                found type `{integer}`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "97b1139abd5996856d1e14160bad6e860592d4e1", "filename": "src/test/ui/mismatched_types/for-loop-has-unit-body.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmismatched_types%2Ffor-loop-has-unit-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmismatched_types%2Ffor-loop-has-unit-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffor-loop-has-unit-body.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |         x\n    |         ^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "de66c504f8cce2d51a84db6c386fe004cd4860f4", "filename": "src/test/ui/mismatched_types/main.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,9 +5,6 @@ LL |       let x: u32 = (\n    |  __________________^\n LL | |     );\n    | |_____^ expected u32, found ()\n-   |\n-   = note:   expected type `u32`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "b57ceb08b172555ebed76bd9e372bd9cbf2f50e3", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/overloaded-calls-bad.rs:28:17\n    |\n LL |     let ans = s(\"what\");\n-   |                 ^^^^^^ expected isize, found reference\n-   |\n-   = note:   expected type `isize`\n-           found reference `&'static str`\n+   |                 ^^^^^^ expected isize, found &str\n \n error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n   --> $DIR/overloaded-calls-bad.rs:29:15"}, {"sha": "441551486a40cdf5a0fea62e69e42fea1759c7dd", "filename": "src/test/ui/missing/missing-return.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,9 +5,6 @@ LL | fn f() -> isize { }\n    |    -      ^^^^^ expected isize, found ()\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n-   |\n-   = note:   expected type `isize`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "d7013bf3c0fb0b4c8e7aae75f4f67255e0b55834", "filename": "src/test/ui/never_type/call-fn-never-arg-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/call-fn-never-arg-wrong-type.rs:10:9\n    |\n LL |     foo(\"wow\");\n-   |         ^^^^^ expected !, found reference\n+   |         ^^^^^ expected !, found &str\n    |\n    = note:   expected type `!`\n            found reference `&'static str`"}, {"sha": "3f72b6914ca38c2fc88fe27cd4c6ef706eab723d", "filename": "src/test/ui/never_type/never-assign-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/never-assign-wrong-type.rs:7:16\n    |\n LL |     let x: ! = \"hello\";\n-   |                ^^^^^^^ expected !, found reference\n+   |                ^^^^^^^ expected !, found &str\n    |\n    = note:   expected type `!`\n            found reference `&'static str`"}, {"sha": "d787cae4343620fab47362dd49f3ec04583d61bd", "filename": "src/test/ui/or-patterns/consistent-bindings.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -11,9 +11,6 @@ error[E0308]: mismatched types\n    |\n LL |     let () = 0;\n    |         ^^ expected integer, found ()\n-   |\n-   = note:   expected type `{integer}`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "4502ae0c0cc3e8d24579c5a5ebdf45c86e63b482", "filename": "src/test/ui/or-patterns/issue-64879-trailing-before-guard.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2For-patterns%2Fissue-64879-trailing-before-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2For-patterns%2Fissue-64879-trailing-before-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-64879-trailing-before-guard.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -11,9 +11,6 @@ error[E0308]: mismatched types\n    |\n LL |             let recovery_witness: bool = 0;\n    |                                          ^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "be06f3666cb3e803496525ad31bb73235806aff9", "filename": "src/test/ui/or-patterns/or-pattern-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL | fn main() { match Blah::A(1, 1, 2) { Blah::A(_, x, y) | Blah::B(x, y) => { } } }\n    |                                                                    ^ expected usize, found isize\n-   |\n-   = note: expected type `usize`\n-              found type `isize`\n \n error: aborting due to previous error\n "}, {"sha": "7e4cf0d14e1f8fa42c3277272e0f32022fe24759", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -122,9 +122,6 @@ LL |     let recovery_witness: String = 0;\n    |                                    |\n    |                                    expected struct `std::string::String`, found integer\n    |                                    help: try using a conversion method: `0.to_string()`\n-   |\n-   = note: expected struct `std::string::String`\n-                found type `{integer}`\n \n error: aborting due to 16 previous errors\n "}, {"sha": "91ee46c55a7866fa99e0db42aa000386903cf695", "filename": "src/test/ui/output-type-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Foutput-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Foutput-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foutput-type-mismatch.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL | fn main() { let i: isize; i = f(); }\n    |                               ^^^ expected isize, found ()\n-   |\n-   = note:   expected type `isize`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "2a751e9d43a37a2265ebb5685ba2daed4380d5a3", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -48,36 +48,24 @@ error[E0308]: mismatched types\n    |\n LL |     {2} + {2}\n    |      ^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:12:6\n    |\n LL |     {2} + 2\n    |      ^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:18:7\n    |\n LL |     { 42 } + foo;\n    |       ^^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:24:7\n    |\n LL |     { 3 } * 3\n    |       ^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error[E0614]: type `{integer}` cannot be dereferenced\n   --> $DIR/expr-as-stmt.rs:24:11"}, {"sha": "ad28c9d3dce34f0740c51adde856474c9f6a5dbf", "filename": "src/test/ui/parser/fn-arg-doc-comment.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -17,13 +17,10 @@ fn main() {\n     // verify that the parser recovered and properly typechecked the args\n     f(\"\", \"\");\n     //~^ ERROR mismatched types\n-    //~| NOTE expected u8, found reference\n-    //~| NOTE expected\n+    //~| NOTE expected u8, found &str\n     //~| ERROR mismatched types\n-    //~| NOTE expected u8, found reference\n-    //~| NOTE expected\n+    //~| NOTE expected u8, found &str\n     bar(\"\");\n     //~^ ERROR mismatched types\n-    //~| NOTE expected i32, found reference\n-    //~| NOTE expected\n+    //~| NOTE expected i32, found &str\n }"}, {"sha": "5ea1eef0e4f0d7aa351f1e45bb7e3650d2848bbc", "filename": "src/test/ui/parser/fn-arg-doc-comment.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -20,28 +20,19 @@ error[E0308]: mismatched types\n   --> $DIR/fn-arg-doc-comment.rs:18:7\n    |\n LL |     f(\"\", \"\");\n-   |       ^^ expected u8, found reference\n-   |\n-   = note:   expected type `u8`\n-           found reference `&'static str`\n+   |       ^^ expected u8, found &str\n \n error[E0308]: mismatched types\n   --> $DIR/fn-arg-doc-comment.rs:18:11\n    |\n LL |     f(\"\", \"\");\n-   |           ^^ expected u8, found reference\n-   |\n-   = note:   expected type `u8`\n-           found reference `&'static str`\n+   |           ^^ expected u8, found &str\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-arg-doc-comment.rs:25:9\n+  --> $DIR/fn-arg-doc-comment.rs:23:9\n    |\n LL |     bar(\"\");\n-   |         ^^ expected i32, found reference\n-   |\n-   = note:   expected type `i32`\n-           found reference `&'static str`\n+   |         ^^ expected i32, found &str\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b0d41a27dc909538323c5ea02d391106656d1624", "filename": "src/test/ui/parser/issue-33413.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -11,9 +11,6 @@ LL |     fn f(*, a: u8) -> u8 {}\n    |        -              ^^ expected u8, found ()\n    |        |\n    |        implicitly returns `()` as its body has no tail or `return` expression\n-   |\n-   = note:   expected type `u8`\n-           found unit type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ddb97b40e95902fdd64a7144e2b345389ed6ad55", "filename": "src/test/ui/parser/issue-62881.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fissue-62881.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fissue-62881.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62881.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -20,9 +20,6 @@ LL | fn f() -> isize { fn f() -> isize {} pub f<\n    |                      -      ^^^^^ expected isize, found ()\n    |                      |\n    |                      implicitly returns `()` as its body has no tail or `return` expression\n-   |\n-   = note:   expected type `isize`\n-           found unit type `()`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e46152fad0e5e0bb11d1eb02d60000b2669779f8", "filename": "src/test/ui/parser/issue-62895.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -40,9 +40,6 @@ LL | fn v() -> isize {\n    |    -      ^^^^^ expected isize, found ()\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n-   |\n-   = note:   expected type `isize`\n-           found unit type `()`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "db2b9c70a03a70e2d2b85ab24f0c2af590099518", "filename": "src/test/ui/parser/lex-bad-char-literals-6.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -43,10 +43,7 @@ error[E0308]: mismatched types\n   --> $DIR/lex-bad-char-literals-6.rs:15:20\n    |\n LL |     let a: usize = \"\";\n-   |                    ^^ expected usize, found reference\n-   |\n-   = note:   expected type `usize`\n-           found reference `&'static str`\n+   |                    ^^ expected usize, found &str\n \n error[E0277]: can't compare `&str` with `char`\n   --> $DIR/lex-bad-char-literals-6.rs:12:10"}, {"sha": "b9d0f13c0651f2e00b4bd8bdcd15643a59b9334c", "filename": "src/test/ui/parser/match-vec-invalid.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fmatch-vec-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fmatch-vec-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-vec-invalid.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -35,9 +35,6 @@ error[E0308]: mismatched types\n    |\n LL | const RECOVERY_WITNESS: () = 0;\n    |                              ^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "2ef6aa6f113c503dc84a6a5085d67b9786c29f11", "filename": "src/test/ui/parser/numeric-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -14,10 +14,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-lifetime.rs:6:20\n    |\n LL |     let x: usize = \"\";\n-   |                    ^^ expected usize, found reference\n-   |\n-   = note:   expected type `usize`\n-           found reference `&'static str`\n+   |                    ^^ expected usize, found &str\n \n error: aborting due to 3 previous errors\n "}, {"sha": "bfb8866437bcdc5aff15088a8ce9e2dd454a7330", "filename": "src/test/ui/parser/pat-lt-bracket-6.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -18,9 +18,6 @@ error[E0308]: mismatched types\n    |\n LL | const RECOVERY_WITNESS: () = 0;\n    |                              ^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d30a3bc0b1499391a64966f1f7fe25472e2c9c56", "filename": "src/test/ui/parser/pat-lt-bracket-7.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -9,9 +9,6 @@ error[E0308]: mismatched types\n    |\n LL | const RECOVERY_WITNESS: () = 0;\n    |                              ^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9472237a22ef483ebb0baae7f427df0123c7ba9f", "filename": "src/test/ui/parser/pat-tuple-4.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -18,9 +18,6 @@ error[E0308]: mismatched types\n    |\n LL | const RECOVERY_WITNESS: () = 0;\n    |                              ^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "74ac926cb028395d6dc70fe697303b5228e603ad", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -18,9 +18,6 @@ error[E0308]: mismatched types\n    |\n LL |         const RECOVERY_WITNESS: () = 0;\n    |                                      ^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3f5a986f08684bcd1a4230067bfe0e6d8da2ae7c", "filename": "src/test/ui/parser/recover-from-homoglyph.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -14,9 +14,6 @@ error[E0308]: mismatched types\n    |\n LL |     let x: usize = ();\n    |                    ^^ expected usize, found ()\n-   |\n-   = note:   expected type `usize`\n-           found unit type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1ccf8b22c536458570c8916742eeb6337027cc0d", "filename": "src/test/ui/parser/recover-missing-semi.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -21,18 +21,12 @@ error[E0308]: mismatched types\n    |\n LL |     let _: usize = ()\n    |                    ^^ expected usize, found ()\n-   |\n-   = note:   expected type `usize`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/recover-missing-semi.rs:9:20\n    |\n LL |     let _: usize = ()\n    |                    ^^ expected usize, found ()\n-   |\n-   = note:   expected type `usize`\n-           found unit type `()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "af03b577548f7d026858114dce1d7ffdc1a3fee2", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -418,18 +418,12 @@ error[E0308]: mismatched types\n    |\n LL |     if let .0..Y = 0 {}\n    |            ^^^^^ expected integer, found floating-point number\n-   |\n-   = note: expected type `{integer}`\n-              found type `{float}`\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:23:12\n    |\n LL |     if let X.. .0 = 0 {}\n    |            ^^^^^^ expected integer, found floating-point number\n-   |\n-   = note: expected type `u8`\n-              found type `{float}`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:32:12\n@@ -452,18 +446,12 @@ error[E0308]: mismatched types\n    |\n LL |     if let .0..=Y = 0 {}\n    |            ^^^^^^ expected integer, found floating-point number\n-   |\n-   = note: expected type `{integer}`\n-              found type `{float}`\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:36:12\n    |\n LL |     if let X..=.0 = 0 {}\n    |            ^^^^^^ expected integer, found floating-point number\n-   |\n-   = note: expected type `u8`\n-              found type `{float}`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:45:12\n@@ -486,18 +474,12 @@ error[E0308]: mismatched types\n    |\n LL |     if let .0...Y = 0 {}\n    |            ^^^^^^ expected integer, found floating-point number\n-   |\n-   = note: expected type `{integer}`\n-              found type `{float}`\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:52:12\n    |\n LL |     if let X... .0 = 0 {}\n    |            ^^^^^^^ expected integer, found floating-point number\n-   |\n-   = note: expected type `u8`\n-              found type `{float}`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:60:12\n@@ -510,9 +492,6 @@ error[E0308]: mismatched types\n    |\n LL |     if let .0.. = 0 {}\n    |            ^^^^ expected integer, found floating-point number\n-   |\n-   = note: expected type `{integer}`\n-              found type `{float}`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:70:12\n@@ -525,9 +504,6 @@ error[E0308]: mismatched types\n    |\n LL |     if let .0..= = 0 {}\n    |            ^^^^^ expected integer, found floating-point number\n-   |\n-   = note: expected type `{integer}`\n-              found type `{float}`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:82:12\n@@ -540,9 +516,6 @@ error[E0308]: mismatched types\n    |\n LL |     if let .0... = 0 {}\n    |            ^^^^^ expected integer, found floating-point number\n-   |\n-   = note: expected type `{integer}`\n-              found type `{float}`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:94:14\n@@ -555,9 +528,6 @@ error[E0308]: mismatched types\n    |\n LL |     if let .. .0 = 0 {}\n    |            ^^^^^ expected integer, found floating-point number\n-   |\n-   = note: expected type `{integer}`\n-              found type `{float}`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:104:15\n@@ -570,9 +540,6 @@ error[E0308]: mismatched types\n    |\n LL |     if let ..=.0 = 0 {}\n    |            ^^^^^ expected integer, found floating-point number\n-   |\n-   = note: expected type `{integer}`\n-              found type `{float}`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:116:15\n@@ -585,9 +552,6 @@ error[E0308]: mismatched types\n    |\n LL |     if let ....3 = 0 {}\n    |            ^^^^^ expected integer, found floating-point number\n-   |\n-   = note: expected type `{integer}`\n-              found type `{float}`\n \n error: aborting due to 85 previous errors\n "}, {"sha": "1bd2e9867533e151ca348de1e2c2fe3601d2c6cd", "filename": "src/test/ui/parser/recover-tuple.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -8,10 +8,7 @@ error[E0308]: mismatched types\n   --> $DIR/recover-tuple.rs:6:20\n    |\n LL |     let y: usize = \"\";\n-   |                    ^^ expected usize, found reference\n-   |\n-   = note:   expected type `usize`\n-           found reference `&'static str`\n+   |                    ^^ expected usize, found &str\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f57668812490c829cb698dddb3920f83b2e6b26f", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -46,18 +46,12 @@ error[E0308]: mismatched types\n    |\n LL |     false == 0 < 2;\n    |              ^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/require-parens-for-chained-comparison.rs:8:18\n    |\n LL |     false == 0 < 2;\n    |                  ^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "a6224d8989437cf7ba89e67116e934eba0160a81", "filename": "src/test/ui/pattern/pat-tuple-bad-type.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -14,9 +14,6 @@ error[E0308]: mismatched types\n    |\n LL |         (..) => {}\n    |         ^^^^ expected u8, found ()\n-   |\n-   = note:   expected type `u8`\n-           found unit type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eb57210f45474c31d8d2ab4fd4e7d0ff40d2b310", "filename": "src/test/ui/pattern/pattern-error-continue.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -22,8 +22,6 @@ fn main() {\n         S { .. } => (),\n         //~^ ERROR mismatched types\n         //~| expected char, found struct `S`\n-        //~| expected type `char`\n-        //~| found struct `S`\n \n         _ => ()\n     }"}, {"sha": "22da0d5e0db3ab5421e245071b7d04123c54c066", "filename": "src/test/ui/pattern/pattern-error-continue.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -1,5 +1,5 @@\n error[E0433]: failed to resolve: use of undeclared type or module `E`\n-  --> $DIR/pattern-error-continue.rs:35:9\n+  --> $DIR/pattern-error-continue.rs:33:9\n    |\n LL |         E::V => {}\n    |         ^ use of undeclared type or module `E`\n@@ -31,12 +31,9 @@ LL |     match 'c' {\n    |           --- this match expression has type `char`\n LL |         S { .. } => (),\n    |         ^^^^^^^^ expected char, found struct `S`\n-   |\n-   = note: expected type `char`\n-            found struct `S`\n \n error[E0308]: mismatched types\n-  --> $DIR/pattern-error-continue.rs:30:7\n+  --> $DIR/pattern-error-continue.rs:28:7\n    |\n LL |     f(true);\n    |       ^^^^ expected char, found bool"}, {"sha": "b73ab6e5d9f18e8d2a3fa4ba775b2e5b75db9a10", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -9,9 +9,6 @@ LL |         return 0i32;\n LL |     }\n LL |     1u32\n    |     ^^^^ expected i32, found u32\n-   |\n-   = note: expected type `i32`\n-              found type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:13:16\n@@ -24,9 +21,6 @@ LL |         return 0i32;\n LL |     } else {\n LL |         return 1u32;\n    |                ^^^^ expected i32, found u32\n-   |\n-   = note: expected type `i32`\n-              found type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:22:9\n@@ -39,9 +33,6 @@ LL |         return 0i32;\n LL |     } else {\n LL |         1u32\n    |         ^^^^ expected i32, found u32\n-   |\n-   = note: expected type `i32`\n-              found type `u32`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:31:9\n@@ -55,9 +46,6 @@ LL | |         1u32\n LL | |\n LL | |     }\n    | |_____- if and else have incompatible types\n-   |\n-   = note: expected type `i32`\n-              found type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:39:14\n@@ -69,9 +57,6 @@ LL |         0 => return 0i32,\n    |                     ---- ...is found to be `i32` here\n LL |         _ => 1u32,\n    |              ^^^^ expected i32, found u32\n-   |\n-   = note: expected type `i32`\n-              found type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:45:5\n@@ -86,9 +71,6 @@ LL | |         1 => 1u32,\n LL | |         _ => 2u32,\n LL | |     }\n    | |_____^ expected i32, found u32\n-   |\n-   = note: expected type `i32`\n-              found type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:59:13\n@@ -101,9 +83,6 @@ LL |             return 0i32;\n ...\n LL |             1u32\n    |             ^^^^ expected i32, found u32\n-   |\n-   = note: expected type `i32`\n-              found type `u32`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "34a203300949b41123f7b41843452e81cb765147", "filename": "src/test/ui/proc-macro/attribute-spans-preserved.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,19 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/attribute-spans-preserved.rs:7:23\n    |\n LL | #[ foo ( let y: u32 = \"z\"; ) ]\n-   |                       ^^^ expected u32, found reference\n-   |\n-   = note:   expected type `u32`\n-           found reference `&'static str`\n+   |                       ^^^ expected u32, found &str\n \n error[E0308]: mismatched types\n   --> $DIR/attribute-spans-preserved.rs:8:23\n    |\n LL | #[ bar { let x: u32 = \"y\"; } ]\n-   |                       ^^^ expected u32, found reference\n-   |\n-   = note:   expected type `u32`\n-           found reference `&'static str`\n+   |                       ^^^ expected u32, found &str\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e810e9ad658829ff2eefea25644a47e1517c0233", "filename": "src/test/ui/proc-macro/attribute-with-error.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,37 +2,25 @@ error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:10:18\n    |\n LL |     let a: i32 = \"foo\";\n-   |                  ^^^^^ expected i32, found reference\n-   |\n-   = note:   expected type `i32`\n-           found reference `&'static str`\n+   |                  ^^^^^ expected i32, found &str\n \n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:12:18\n    |\n LL |     let b: i32 = \"f'oo\";\n-   |                  ^^^^^^ expected i32, found reference\n-   |\n-   = note:   expected type `i32`\n-           found reference `&'static str`\n+   |                  ^^^^^^ expected i32, found &str\n \n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:25:22\n    |\n LL |         let a: i32 = \"foo\";\n-   |                      ^^^^^ expected i32, found reference\n-   |\n-   = note:   expected type `i32`\n-           found reference `&'static str`\n+   |                      ^^^^^ expected i32, found &str\n \n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:35:22\n    |\n LL |         let a: i32 = \"foo\";\n-   |                      ^^^^^ expected i32, found reference\n-   |\n-   = note:   expected type `i32`\n-           found reference `&'static str`\n+   |                      ^^^^^ expected i32, found &str\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e6d1c9356ea76c63142cafe3810195b7ef12fbdc", "filename": "src/test/ui/proc-macro/nested-item-spans.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,19 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/nested-item-spans.rs:9:22\n    |\n LL |         let x: u32 = \"x\";\n-   |                      ^^^ expected u32, found reference\n-   |\n-   = note:   expected type `u32`\n-           found reference `&'static str`\n+   |                      ^^^ expected u32, found &str\n \n error[E0308]: mismatched types\n   --> $DIR/nested-item-spans.rs:18:22\n    |\n LL |         let x: u32 = \"x\";\n-   |                      ^^^ expected u32, found reference\n-   |\n-   = note:   expected type `u32`\n-           found reference `&'static str`\n+   |                      ^^^ expected u32, found &str\n \n error: aborting due to 2 previous errors\n "}, {"sha": "86d2bee20683bcf3671edfa2a39cc6322cf359e4", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:11:20\n    |\n LL |     let x: usize = \"hello\";\n-   |                    ^^^^^^^ expected usize, found reference\n-   |\n-   = note:   expected type `usize`\n-           found reference `&'static str`\n+   |                    ^^^^^^^ expected usize, found &str\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:17:29\n@@ -48,9 +45,6 @@ LL | extern \"C\" fn baz() {\n    |                     - possibly return type missing here?\n LL |     0\n    |     ^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:49:5"}, {"sha": "7e899ec37d244adfe69fb30efa497767b15ba9ba", "filename": "src/test/ui/repeat_count.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -7,21 +7,15 @@ fn main() {\n     let b = [0; ()];\n     //~^ ERROR mismatched types\n     //~| expected usize, found ()\n-    //~| expected type `usize`\n-    //~| found unit type `()`\n     let c = [0; true];\n     //~^ ERROR mismatched types\n     //~| expected usize, found bool\n     let d = [0; 0.5];\n     //~^ ERROR mismatched types\n     //~| expected usize, found floating-point number\n-    //~| expected type `usize`\n-    //~| found type `{float}`\n     let e = [0; \"foo\"];\n     //~^ ERROR mismatched types\n-    //~| expected usize, found reference\n-    //~| expected type `usize`\n-    //~| found reference `&'static str`\n+    //~| expected usize, found &str\n     let f = [0; -4_isize];\n     //~^ ERROR mismatched types\n     //~| expected usize, found isize\n@@ -34,6 +28,4 @@ fn main() {\n     let g = [0; G { g: () }];\n     //~^ ERROR mismatched types\n     //~| expected usize, found struct `main::G`\n-    //~| expected type `usize`\n-    //~| found struct `main::G`\n }"}, {"sha": "76e90af7557a8f8fa6a0b0b1ee79831feef29987", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -9,36 +9,27 @@ error[E0308]: mismatched types\n    |\n LL |     let b = [0; ()];\n    |                 ^^ expected usize, found ()\n-   |\n-   = note:   expected type `usize`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/repeat_count.rs:12:17\n+  --> $DIR/repeat_count.rs:10:17\n    |\n LL |     let c = [0; true];\n    |                 ^^^^ expected usize, found bool\n \n error[E0308]: mismatched types\n-  --> $DIR/repeat_count.rs:15:17\n+  --> $DIR/repeat_count.rs:13:17\n    |\n LL |     let d = [0; 0.5];\n    |                 ^^^ expected usize, found floating-point number\n-   |\n-   = note: expected type `usize`\n-              found type `{float}`\n \n error[E0308]: mismatched types\n-  --> $DIR/repeat_count.rs:20:17\n+  --> $DIR/repeat_count.rs:16:17\n    |\n LL |     let e = [0; \"foo\"];\n-   |                 ^^^^^ expected usize, found reference\n-   |\n-   = note:   expected type `usize`\n-           found reference `&'static str`\n+   |                 ^^^^^ expected usize, found &str\n \n error[E0308]: mismatched types\n-  --> $DIR/repeat_count.rs:25:17\n+  --> $DIR/repeat_count.rs:19:17\n    |\n LL |     let f = [0; -4_isize];\n    |                 ^^^^^^^^ expected usize, found isize\n@@ -49,7 +40,7 @@ LL |     let f = [0; (-4_isize).try_into().unwrap()];\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/repeat_count.rs:28:23\n+  --> $DIR/repeat_count.rs:22:23\n    |\n LL |     let f = [0_usize; -1_isize];\n    |                       ^^^^^^^^ expected usize, found isize\n@@ -60,13 +51,10 @@ LL |     let f = [0_usize; (-1_isize).try_into().unwrap()];\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/repeat_count.rs:34:17\n+  --> $DIR/repeat_count.rs:28:17\n    |\n LL |     let g = [0; G { g: () }];\n    |                 ^^^^^^^^^^^ expected usize, found struct `main::G`\n-   |\n-   = note: expected type `usize`\n-            found struct `main::G`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "361c79dabd14faa868a0d8d1638e0983e7f3c4cf", "filename": "src/test/ui/resolve/resolve-inconsistent-binding-mode.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -25,18 +25,12 @@ error[E0308]: mismatched types\n    |\n LL |       Opts::A(ref i) | Opts::B(i) => {}\n    |                                ^ expected &isize, found isize\n-   |\n-   = note: expected type `&isize`\n-              found type `isize`\n \n error[E0308]: mismatched types\n   --> $DIR/resolve-inconsistent-binding-mode.rs:16:32\n    |\n LL |       Opts::A(ref i) | Opts::B(i) => {}\n    |                                ^ expected &isize, found isize\n-   |\n-   = note: expected type `&isize`\n-              found type `isize`\n \n error[E0308]: mismatched types\n   --> $DIR/resolve-inconsistent-binding-mode.rs:25:36"}, {"sha": "04edc2da2565151eb0c7d20e97c6795dfd6406f7", "filename": "src/test/ui/resolve/resolve-inconsistent-names.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -88,9 +88,6 @@ error[E0308]: mismatched types\n    |\n LL |         (A, B) | (ref B, c) | (c, A) => ()\n    |                   ^^^^^ expected enum `E`, found &E\n-   |\n-   = note: expected type `E`\n-              found type `&E`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "c1dcc1d5d8fb5d9244a0a8e8d75fa1a980595ec0", "filename": "src/test/ui/return/return-from-diverging.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Freturn%2Freturn-from-diverging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Freturn%2Freturn-from-diverging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-from-diverging.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn fail() -> ! {\n    |              - expected `!` because of return type\n LL |     return \"wow\";\n-   |            ^^^^^ expected !, found reference\n+   |            ^^^^^ expected !, found &str\n    |\n    = note:   expected type `!`\n            found reference `&'static str`"}, {"sha": "8e1873c06593d9111c64528945236b934d0351b5", "filename": "src/test/ui/rfc-2005-default-binding-mode/const.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fconst.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |         FOO => {},\n    |         ^^^ expected &Foo, found struct `Foo`\n-   |\n-   = note: expected type `&Foo`\n-            found struct `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "fd48c56c07b798360cf6d7f11765536afcf0c0df", "filename": "src/test/ui/rfc-2005-default-binding-mode/lit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/lit.rs:16:9\n    |\n LL |         b\"abc\" => true,\n-   |         ^^^^^^ expected &[u8], found array of 3 elements\n+   |         ^^^^^^ expected &[u8], found array `[u8; 3]`\n    |\n    = note:   expected type `&&[u8]`\n            found reference `&'static [u8; 3]`"}, {"sha": "d2d319f50c78dfffc0dfa7d74ec9a4f8a8ecdac0", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/coercions.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,9 +5,6 @@ LL | fn cannot_coerce_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n    |                                                                - expected `A` because of return type\n LL |     x\n    |     ^ expected struct `A`, found enum `uninhabited::UninhabitedEnum`\n-   |\n-   = note: expected struct `A`\n-                found enum `uninhabited::UninhabitedEnum`\n \n error[E0308]: mismatched types\n   --> $DIR/coercions.rs:27:5\n@@ -16,9 +13,6 @@ LL | fn cannot_coerce_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct)\n    |                                                                               - expected `A` because of return type\n LL |     x\n    |     ^ expected struct `A`, found struct `uninhabited::UninhabitedTupleStruct`\n-   |\n-   = note: expected struct `A`\n-              found struct `uninhabited::UninhabitedTupleStruct`\n \n error[E0308]: mismatched types\n   --> $DIR/coercions.rs:31:5\n@@ -27,9 +21,6 @@ LL | fn cannot_coerce_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n    |                                                                    - expected `A` because of return type\n LL |     x\n    |     ^ expected struct `A`, found struct `uninhabited::UninhabitedStruct`\n-   |\n-   = note: expected struct `A`\n-              found struct `uninhabited::UninhabitedStruct`\n \n error[E0308]: mismatched types\n   --> $DIR/coercions.rs:35:5\n@@ -38,9 +29,6 @@ LL | fn cannot_coerce_enum_with_empty_variants_to_anything(x: UninhabitedVariant\n    |                                                                                  - expected `A` because of return type\n LL |     x\n    |     ^ expected struct `A`, found enum `uninhabited::UninhabitedVariants`\n-   |\n-   = note: expected struct `A`\n-                found enum `uninhabited::UninhabitedVariants`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "fd2c56974bd4ac7567262ce420c41e9b72ad5750", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/coercions_same_crate.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,9 +5,6 @@ LL | fn cannot_coerce_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n    |                                                                - expected `A` because of return type\n LL |     x\n    |     ^ expected struct `A`, found enum `UninhabitedEnum`\n-   |\n-   = note: expected struct `A`\n-                found enum `UninhabitedEnum`\n \n error[E0308]: mismatched types\n   --> $DIR/coercions_same_crate.rs:34:5\n@@ -16,9 +13,6 @@ LL | fn cannot_coerce_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct)\n    |                                                                               - expected `A` because of return type\n LL |     x\n    |     ^ expected struct `A`, found struct `UninhabitedTupleStruct`\n-   |\n-   = note: expected struct `A`\n-              found struct `UninhabitedTupleStruct`\n \n error[E0308]: mismatched types\n   --> $DIR/coercions_same_crate.rs:38:5\n@@ -27,9 +21,6 @@ LL | fn cannot_coerce_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n    |                                                                    - expected `A` because of return type\n LL |     x\n    |     ^ expected struct `A`, found struct `UninhabitedStruct`\n-   |\n-   = note: expected struct `A`\n-              found struct `UninhabitedStruct`\n \n error[E0308]: mismatched types\n   --> $DIR/coercions_same_crate.rs:42:5\n@@ -38,9 +29,6 @@ LL | fn cannot_coerce_enum_with_empty_variants_to_anything(x: UninhabitedVariant\n    |                                                                                  - expected `A` because of return type\n LL |     x\n    |     ^ expected struct `A`, found enum `UninhabitedVariants`\n-   |\n-   = note: expected struct `A`\n-                found enum `UninhabitedVariants`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a04b109ba6d3c9e36e7d4f40bc0c66c9e175b511", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -539,9 +539,6 @@ LL |     if &let 0 = 0 {}\n    |        |\n    |        expected bool, found &bool\n    |        help: consider removing the borrow: `let 0 = 0`\n-   |\n-   = note:   expected type `bool`\n-           found reference `&bool`\n \n error[E0614]: type `bool` cannot be dereferenced\n   --> $DIR/disallowed-positions.rs:36:8\n@@ -583,9 +580,6 @@ LL |     if x = let 0 = 0 {}\n    |        |\n    |        expected bool, found ()\n    |        help: try comparing for equality: `x == let 0 = 0`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:59:8\n@@ -697,9 +691,6 @@ error[E0308]: mismatched types\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |                                            ^^^^^^^ expected bool, found &&bool\n-   |\n-   = note:   expected type `bool`\n-           found reference `&&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:86:8\n@@ -727,9 +718,6 @@ LL |     while &let 0 = 0 {}\n    |           |\n    |           expected bool, found &bool\n    |           help: consider removing the borrow: `let 0 = 0`\n-   |\n-   = note:   expected type `bool`\n-           found reference `&bool`\n \n error[E0614]: type `bool` cannot be dereferenced\n   --> $DIR/disallowed-positions.rs:100:11\n@@ -771,9 +759,6 @@ LL |     while x = let 0 = 0 {}\n    |           |\n    |           expected bool, found ()\n    |           help: try comparing for equality: `x == let 0 = 0`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:123:11\n@@ -885,9 +870,6 @@ error[E0308]: mismatched types\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |                                               ^^^^^^^ expected bool, found &&bool\n-   |\n-   = note:   expected type `bool`\n-           found reference `&&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:150:11\n@@ -958,9 +940,6 @@ LL | fn outside_if_and_while_expr() {\n ...\n LL |     &let 0 = 0\n    |     ^^^^^^^^^^ expected (), found &bool\n-   |\n-   = note: expected unit type `()`\n-              found reference `&bool`\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n   --> $DIR/disallowed-positions.rs:179:17"}, {"sha": "da9ac04e34883474ce0b38673999c5111e38d840", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     let x: usize = String::new();\n    |                    ^^^^^^^^^^^^^ expected usize, found struct `std::string::String`\n-   |\n-   = note: expected type `usize`\n-            found struct `std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:9:19\n@@ -15,9 +12,6 @@ LL |     let x: &str = String::new();\n    |                   |\n    |                   expected &str, found struct `std::string::String`\n    |                   help: consider borrowing here: `&String::new()`\n-   |\n-   = note: expected reference `&str`\n-                 found struct `std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:12:10\n@@ -50,10 +44,8 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:21:9\n    |\n LL |     s = format!(\"foo\");\n-   |         ^^^^^^^^^^^^^^ expected mutable reference, found struct `std::string::String`\n+   |         ^^^^^^^^^^^^^^ expected &mut std::string::String, found struct `std::string::String`\n    |\n-   = note: expected mutable reference `&mut std::string::String`\n-                         found struct `std::string::String`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 6 previous errors"}, {"sha": "4f46c4c73943682e33ee94ea67ba26602a70d098", "filename": "src/test/ui/span/issue-33884.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -4,8 +4,6 @@ error[E0308]: mismatched types\n LL |     stream.write_fmt(format!(\"message received\"))\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::fmt::Arguments`, found struct `std::string::String`\n    |\n-   = note: expected struct `std::fmt::Arguments<'_>`\n-              found struct `std::string::String`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "c0e9d6cfab8cfc3474a63c82954955a4799c44fb", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -55,10 +55,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-34264.rs:8:13\n    |\n LL |     bar(\"\", \"\");\n-   |             ^^ expected usize, found reference\n-   |\n-   = note:   expected type `usize`\n-           found reference `&'static str`\n+   |             ^^ expected usize, found &str\n \n error[E0061]: this function takes 2 parameters but 3 parameters were supplied\n   --> $DIR/issue-34264.rs:10:5"}, {"sha": "e2ba768d7a3e810b1086e29ef547f125a469f544", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -72,9 +72,6 @@ LL |     let _ = a + b;\n    |                 |\n    |                 expected &str, found struct `std::string::String`\n    |                 help: consider borrowing here: `&b`\n-   |\n-   = note: expected reference `&str`\n-                 found struct `std::string::String`\n \n error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n   --> $DIR/issue-39018.rs:30:15"}, {"sha": "e8678b439d4a041066e17c6e5c255e4d00cf8947", "filename": "src/test/ui/str/str-array-assignment.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,9 +5,6 @@ LL |   let t = if true { s[..2] } else { s };\n    |                     ------          ^ expected str, found &str\n    |                     |\n    |                     expected because of this\n-   |\n-   = note:   expected type `str`\n-           found reference `&str`\n \n error[E0308]: mismatched types\n   --> $DIR/str-array-assignment.rs:5:27\n@@ -17,9 +14,6 @@ LL |   let u: &str = if true { s[..2] } else { s };\n    |                           |\n    |                           expected &str, found str\n    |                           help: consider borrowing here: `&s[..2]`\n-   |\n-   = note: expected reference `&str`\n-                   found type `str`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/str-array-assignment.rs:7:7\n@@ -42,9 +36,6 @@ LL |   let w: &str = s[..2];\n    |                 |\n    |                 expected &str, found str\n    |                 help: consider borrowing here: `&s[..2]`\n-   |\n-   = note: expected reference `&str`\n-                   found type `str`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "af66fe8b88049c6271f4bf1bb479fbeed45c07ad", "filename": "src/test/ui/str/str-lit-type-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let x: &[u8] = \"foo\";\n    |                    ^^^^^\n    |                    |\n-   |                    expected slice, found str\n+   |                    expected slice `[u8]`, found str\n    |                    help: consider adding a leading `b`: `b\"foo\"`\n    |\n    = note: expected reference `&[u8]`\n@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n LL |     let y: &[u8; 4] = \"baaa\";\n    |                       ^^^^^^\n    |                       |\n-   |                       expected array of 4 elements, found str\n+   |                       expected array `[u8; 4]`, found str\n    |                       help: consider adding a leading `b`: `b\"baaa\"`\n    |\n    = note: expected reference `&[u8; 4]`\n@@ -28,7 +28,7 @@ error[E0308]: mismatched types\n LL |     let z: &str = b\"foo\";\n    |                   ^^^^^^\n    |                   |\n-   |                   expected str, found array of 3 elements\n+   |                   expected str, found array `[u8; 3]`\n    |                   help: consider removing the leading `b`: `\"foo\"`\n    |\n    = note: expected reference `&str`"}, {"sha": "e89111ca2c8a8899c1083c736f00867ebf68bc39", "filename": "src/test/ui/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -58,18 +58,12 @@ LL |     if x == E::V { field } {}\n    |     |              |\n    |     |              expected (), found bool\n    |     expected this to be `()`\n-   |\n-   = note: expected unit type `()`\n-                   found type `bool`\n \n error[E0308]: mismatched types\n   --> $DIR/struct-literal-variant-in-if.rs:21:20\n    |\n LL |     let y: usize = ();\n    |                    ^^ expected usize, found ()\n-   |\n-   = note:   expected type `usize`\n-           found unit type `()`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "b039ce2cc9209fc81f5e967dd762c032c5ec57c3", "filename": "src/test/ui/structs/struct-base-wrong-type.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fstructs%2Fstruct-base-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fstructs%2Fstruct-base-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-base-wrong-type.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,36 +3,24 @@ error[E0308]: mismatched types\n    |\n LL | static foo: Foo = Foo { a: 2, ..bar };\n    |                                 ^^^ expected struct `Foo`, found struct `Bar`\n-   |\n-   = note: expected struct `Foo`\n-              found struct `Bar`\n \n error[E0308]: mismatched types\n   --> $DIR/struct-base-wrong-type.rs:8:35\n    |\n LL | static foo_i: Foo = Foo { a: 2, ..4 };\n    |                                   ^ expected struct `Foo`, found integer\n-   |\n-   = note: expected struct `Foo`\n-                found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/struct-base-wrong-type.rs:12:27\n    |\n LL |     let f = Foo { a: 2, ..b };\n    |                           ^ expected struct `Foo`, found struct `Bar`\n-   |\n-   = note: expected struct `Foo`\n-              found struct `Bar`\n \n error[E0308]: mismatched types\n   --> $DIR/struct-base-wrong-type.rs:13:34\n    |\n LL |     let f__isize = Foo { a: 2, ..4 };\n    |                                  ^ expected struct `Foo`, found integer\n-   |\n-   = note: expected struct `Foo`\n-                found type `{integer}`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f184f81647d13743180189a41285ca3eef50f537", "filename": "src/test/ui/structs/structure-constructor-type-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |         x: 1,\n    |            |\n    |            expected f32, found integer\n    |            help: use a float literal: `1.0`\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:20:12\n@@ -18,9 +15,6 @@ LL |         y: 2,\n    |            |\n    |            expected f32, found integer\n    |            help: use a float literal: `2.0`\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:26:12\n@@ -30,9 +24,6 @@ LL |         x: 3,\n    |            |\n    |            expected f32, found integer\n    |            help: use a float literal: `3.0`\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:29:12\n@@ -42,9 +33,6 @@ LL |         y: 4,\n    |            |\n    |            expected f32, found integer\n    |            help: use a float literal: `4.0`\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:35:12\n@@ -54,9 +42,6 @@ LL |         x: 5,\n    |            |\n    |            expected f32, found integer\n    |            help: use a float literal: `5.0`\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:42:12\n@@ -66,9 +51,6 @@ LL |         x: 7,\n    |            |\n    |            expected f32, found integer\n    |            help: use a float literal: `7.0`\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n   --> $DIR/structure-constructor-type-mismatch.rs:48:24\n@@ -84,9 +66,6 @@ LL |         x: 9,\n    |            |\n    |            expected f32, found integer\n    |            help: use a float literal: `9.0`\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:50:12\n@@ -96,9 +75,6 @@ LL |         y: 10,\n    |            |\n    |            expected f32, found integer\n    |            help: use a float literal: `10.0`\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n   --> $DIR/structure-constructor-type-mismatch.rs:54:18"}, {"sha": "5379f77ae5c31e9731dfa563c4edbfedb7d9ba1c", "filename": "src/test/ui/suggestions/as-ref.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,9 +5,6 @@ LL |   opt.map(|arg| takes_ref(arg));\n    |       ---                 ^^^ expected &Foo, found struct `Foo`\n    |       |\n    |       help: consider using `as_ref` instead: `as_ref().map`\n-   |\n-   = note: expected reference `&Foo`\n-                 found struct `Foo`\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:8:37\n@@ -16,9 +13,6 @@ LL |   opt.and_then(|arg| Some(takes_ref(arg)));\n    |       --------                      ^^^ expected &Foo, found struct `Foo`\n    |       |\n    |       help: consider using `as_ref` instead: `as_ref().and_then`\n-   |\n-   = note: expected reference `&Foo`\n-                 found struct `Foo`\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:11:27\n@@ -27,9 +21,6 @@ LL |   opt.map(|arg| takes_ref(arg));\n    |       ---                 ^^^ expected &Foo, found struct `Foo`\n    |       |\n    |       help: consider using `as_ref` instead: `as_ref().map`\n-   |\n-   = note: expected reference `&Foo`\n-                 found struct `Foo`\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:13:35\n@@ -38,9 +29,6 @@ LL |   opt.and_then(|arg| Ok(takes_ref(arg)));\n    |       --------                    ^^^ expected &Foo, found struct `Foo`\n    |       |\n    |       help: consider using `as_ref` instead: `as_ref().and_then`\n-   |\n-   = note: expected reference `&Foo`\n-                 found struct `Foo`\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:16:27"}, {"sha": "7ec1daacb6142758da47bc7e3395eb65b2c628f6", "filename": "src/test/ui/suggestions/dont-suggest-deref-inside-macro-issue-58298.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -9,8 +9,6 @@ LL | |     };\n    | |______expected &str, found struct `std::string::String`\n    |        in this macro invocation\n    |\n-   = note: expected reference `&str`\n-                 found struct `std::string::String`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "d43a249d9cc966ec33a7d8ef47b9aa7c53d3a82c", "filename": "src/test/ui/suggestions/format-borrow.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -4,23 +4,17 @@ error[E0308]: mismatched types\n LL |     let a: String = &String::from(\"a\");\n    |                     ^^^^^^^^^^^^^^^^^^\n    |                     |\n-   |                     expected struct `std::string::String`, found reference\n+   |                     expected struct `std::string::String`, found &std::string::String\n    |                     help: consider removing the borrow: `String::from(\"a\")`\n-   |\n-   = note: expected struct `std::string::String`\n-           found reference `&std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/format-borrow.rs:4:21\n    |\n LL |     let b: String = &format!(\"b\");\n    |                     ^^^^^^^^^^^^^\n    |                     |\n-   |                     expected struct `std::string::String`, found reference\n+   |                     expected struct `std::string::String`, found &std::string::String\n    |                     help: consider removing the borrow: `format!(\"b\")`\n-   |\n-   = note: expected struct `std::string::String`\n-           found reference `&std::string::String`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ba7457df0693e9accf6387dcd48562e40821a2a2", "filename": "src/test/ui/suggestions/issue-52820.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |         guts,\n    |         |\n    |         expected struct `std::string::String`, found &str\n    |         help: try using a conversion method: `guts: guts.to_string()`\n-   |\n-   = note: expected struct `std::string::String`\n-           found reference `&str`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-52820.rs:10:17\n@@ -18,9 +15,6 @@ LL |         brains: guts.clone(),\n    |                 |\n    |                 expected struct `std::string::String`, found &str\n    |                 help: try using a conversion method: `guts.to_string()`\n-   |\n-   = note: expected struct `std::string::String`\n-           found reference `&str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "331a6a53b123934b00d9fb2d3a18d92b45d2a44d", "filename": "src/test/ui/suggestions/issue-59819.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fsuggestions%2Fissue-59819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fsuggestions%2Fissue-59819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-59819.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |     let y: i32 = x;\n    |                  |\n    |                  expected i32, found struct `Foo`\n    |                  help: consider dereferencing the type: `*x`\n-   |\n-   = note: expected type `i32`\n-            found struct `Foo`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-59819.rs:30:18\n@@ -18,9 +15,6 @@ LL |     let b: i32 = a;\n    |                  |\n    |                  expected i32, found &{integer}\n    |                  help: consider dereferencing the borrow: `*a`\n-   |\n-   = note:   expected type `i32`\n-           found reference `&{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-59819.rs:34:21\n@@ -30,9 +24,6 @@ LL |     let g: String = f;\n    |                     |\n    |                     expected struct `std::string::String`, found struct `Bar`\n    |                     help: try using a conversion method: `f.to_string()`\n-   |\n-   = note: expected struct `std::string::String`\n-              found struct `Bar`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c9e263d0db8428b9a5e6d8f4326f50e62eac67ba", "filename": "src/test/ui/suggestions/match-needing-semi.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -12,9 +12,6 @@ LL | |     }\n    | |     -- help: consider using a semicolon here\n    | |_____|\n    |       expected this to be `()`\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/match-needing-semi.rs:12:5\n@@ -27,9 +24,6 @@ LL | |     }\n    | |     ^- help: consider using a semicolon here\n    | |_____|\n    |       expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "44c07a7c83a8bc424b7f81928a2882a42aba9c0d", "filename": "src/test/ui/suggestions/recover-from-semicolon-trailing-item.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -23,27 +23,18 @@ error[E0308]: mismatched types\n    |\n LL |     let _: usize = S {};\n    |                    ^^^^ expected usize, found struct `S`\n-   |\n-   = note: expected type `usize`\n-            found struct `S`\n \n error[E0308]: mismatched types\n   --> $DIR/recover-from-semicolon-trailing-item.rs:12:20\n    |\n LL |     let _: usize = X {};\n    |                    ^^^^ expected usize, found struct `main::X`\n-   |\n-   = note: expected type `usize`\n-            found struct `main::X`\n \n error[E0308]: mismatched types\n   --> $DIR/recover-from-semicolon-trailing-item.rs:14:9\n    |\n LL |     foo(\"\");\n-   |         ^^ expected usize, found reference\n-   |\n-   = note:   expected type `usize`\n-           found reference `&'static str`\n+   |         ^^ expected usize, found &str\n \n error: aborting due to 6 previous errors\n "}, {"sha": "d65adea1ed426d23403b1dca354298758954aa2a", "filename": "src/test/ui/switched-expectations.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fswitched-expectations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fswitched-expectations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fswitched-expectations.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     let ref string: String = var;\n    |                              ^^^ expected struct `std::string::String`, found i32\n-   |\n-   = note: expected struct `std::string::String`\n-                found type `i32`\n \n error: aborting due to previous error\n "}, {"sha": "5e49fcdf95a878ee82f0bacd013286b1cb789a34", "filename": "src/test/ui/terminal-width/non-whitespace-trimming-2.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL | ...; let _: usize = 14; let _: usize = 15; let _: () = 42; let _: usize = 0; let _: usize = 1; let _: usize = 2; let _: usize = 3; let _:...\n    |                                                        ^^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "cea937ca8b1557850259013283465bb3963ca234", "filename": "src/test/ui/terminal-width/non-whitespace-trimming-unicode.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL | ...\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\"; let _: () = 42;  let _: &str = \"\ud83e\udd80\u2600\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613  \u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646...\n    |                                               ^^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "b024d2ace37afd2da48f2af841198943b8a66be1", "filename": "src/test/ui/terminal-width/non-whitespace-trimming.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL | ...) = (); let _: () = (); let _: () = (); let _: () = 42; let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = ()...\n    |                                                        ^^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "3013019df269ffa65a4fe0edd2d164631c82ef70", "filename": "src/test/ui/terminal-width/whitespace-trimming-2.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -5,9 +5,6 @@ LL | ...-> usize {\n    |       ----- expected `usize` because of return type\n LL | ...                                                                                                                                                                                 ()\n    |                                                                                                                                                                                     ^^ expected usize, found ()\n-   |\n-   = note:   expected type `usize`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "d3064d8bfb9765d63a09c16b91b8bcc94d6c20b6", "filename": "src/test/ui/terminal-width/whitespace-trimming.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL | ...                   let _: () = 42;\n    |                                   ^^ expected (), found integer\n-   |\n-   = note: expected unit type `()`\n-                   found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "aa801fd0a6c64b15b86dccdefbd057cf3ee98865", "filename": "src/test/ui/terr-in-field.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fterr-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fterr-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterr-in-field.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -12,8 +12,6 @@ fn want_foo(f: Foo) {}\n fn have_bar(b: Bar) {\n     want_foo(b); //~  ERROR mismatched types\n                  //~| expected struct `Foo`, found struct `Bar`\n-                 //~| expected struct `Foo`\n-                 //~| found struct `Bar`\n }\n \n fn main() {}"}, {"sha": "5c6859a0efe98a353db191d68ea39f93010dd1b4", "filename": "src/test/ui/terr-in-field.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fterr-in-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fterr-in-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterr-in-field.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     want_foo(b);\n    |              ^ expected struct `Foo`, found struct `Bar`\n-   |\n-   = note: expected struct `Foo`\n-              found struct `Bar`\n \n error: aborting due to previous error\n "}, {"sha": "19374ba49c5c7efd34db130ccef92dc9e8b67353", "filename": "src/test/ui/traits/traits-assoc-type-in-supertrait-bad.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0271]: type mismatch resolving `<std::vec::IntoIter<i32> as std::iter::It\n    |\n LL | impl Foo for IntoIter<i32> {\n    |      ^^^ expected i32, found u32\n-   |\n-   = note: expected type `i32`\n-              found type `u32`\n \n error: aborting due to previous error\n "}, {"sha": "75ff998d3bf079fc57d4e9e18ff1d522b8ae37e0", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -18,18 +18,12 @@ error[E0271]: type mismatch resolving `<std::result::Result<i32, i32> as std::op\n    |\n LL |         \"\"\n    |         ^^ expected i32, found &str\n-   |\n-   = note:   expected type `i32`\n-           found reference `&str`\n \n error[E0271]: type mismatch resolving `<std::result::Result<i32, i32> as std::ops::Try>::Ok == ()`\n   --> $DIR/try-block-bad-type.rs:15:39\n    |\n LL |     let res: Result<i32, i32> = try { };\n    |                                       ^ expected i32, found ()\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n   --> $DIR/try-block-bad-type.rs:17:23"}, {"sha": "63f2c02bc71029b76d97b15ad98c5622e726f891", "filename": "src/test/ui/try-block/try-block-type-error.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,18 +6,12 @@ LL |         42\n    |         |\n    |         expected f32, found integer\n    |         help: use a float literal: `42.0`\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n \n error[E0271]: type mismatch resolving `<std::option::Option<i32> as std::ops::Try>::Ok == ()`\n   --> $DIR/try-block-type-error.rs:16:5\n    |\n LL |     };\n    |     ^ expected i32, found ()\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a1afd5e9a0e255c1bd616a33e54eb3161e2d73f7", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-higher-than-other-inherent.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -12,9 +12,6 @@ error[E0308]: mismatched types\n    |\n LL |     let _: u8 = <E2>::V;\n    |                 ^^^^^^^ expected u8, found enum `E2`\n-   |\n-   = note: expected type `u8`\n-              found enum `E2`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5411456b34b9851c21b7b6a6b4e54edcb124061a", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/never_reveal_concrete_type.rs:13:27\n    |\n LL |     let _: &'static str = x;\n-   |                           ^ expected reference, found opaque type\n+   |                           ^ expected &str, found opaque type\n    |\n    = note: expected reference `&'static str`\n             found opaque type `NoReveal`"}, {"sha": "aaf5e286643f96ef436a081d3ae60dff26980037", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL | fn bomp() -> boo::Boo {\n    |              -------- expected `Boo` because of return type\n LL |     \"\"\n-   |     ^^ expected opaque type, found reference\n+   |     ^^ expected opaque type, found &str\n    |\n    = note: expected opaque type `Boo`\n                 found reference `&'static str`"}, {"sha": "5f42ed228dd0e220b87ab13e894853d1d0d7f9a0", "filename": "src/test/ui/type/type-ascription-precedence.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-precedence.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,18 +3,12 @@ error[E0308]: mismatched types\n    |\n LL |     &(S: &S);\n    |       ^ expected &S, found struct `S`\n-   |\n-   = note: expected reference `&S`\n-                 found struct `S`\n \n error[E0308]: mismatched types\n   --> $DIR/type-ascription-precedence.rs:35:7\n    |\n LL |     *(S: Z);\n    |       ^ expected struct `Z`, found struct `S`\n-   |\n-   = note: expected struct `Z`\n-              found struct `S`\n \n error[E0614]: type `Z` cannot be dereferenced\n   --> $DIR/type-ascription-precedence.rs:35:5\n@@ -27,9 +21,6 @@ error[E0308]: mismatched types\n    |\n LL |     -(S: Z);\n    |       ^ expected struct `Z`, found struct `S`\n-   |\n-   = note: expected struct `Z`\n-              found struct `S`\n \n error[E0600]: cannot apply unary operator `-` to type `Z`\n   --> $DIR/type-ascription-precedence.rs:40:5\n@@ -44,18 +35,12 @@ error[E0308]: mismatched types\n    |\n LL |     (S + Z): Z;\n    |     ^^^^^^^ expected struct `Z`, found struct `S`\n-   |\n-   = note: expected struct `Z`\n-              found struct `S`\n \n error[E0308]: mismatched types\n   --> $DIR/type-ascription-precedence.rs:49:5\n    |\n LL |     (S * Z): Z;\n    |     ^^^^^^^ expected struct `Z`, found struct `S`\n-   |\n-   = note: expected struct `Z`\n-              found struct `S`\n \n error[E0308]: mismatched types\n   --> $DIR/type-ascription-precedence.rs:53:5"}, {"sha": "6ed940823af1af43d00654b28fde7ac3dc7e1c5b", "filename": "src/test/ui/type/type-ascription-soundness.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-soundness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-soundness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-soundness.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/type-ascription-soundness.rs:7:17\n    |\n LL |     let ref x = arr: &[u8];\n-   |                 ^^^ expected slice, found array of 3 elements\n+   |                 ^^^ expected slice `[u8]`, found array `[u8; 3]`\n    |\n    = note: expected reference `&[u8]`\n               found reference `&[u8; 3]`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/type-ascription-soundness.rs:8:21\n    |\n LL |     let ref mut x = arr: &[u8];\n-   |                     ^^^ expected slice, found array of 3 elements\n+   |                     ^^^ expected slice `[u8]`, found array `[u8; 3]`\n    |\n    = note: expected reference `&[u8]`\n               found reference `&[u8; 3]`\n@@ -20,7 +20,7 @@ error[E0308]: mismatched types\n   --> $DIR/type-ascription-soundness.rs:9:11\n    |\n LL |     match arr: &[u8] {\n-   |           ^^^ expected slice, found array of 3 elements\n+   |           ^^^ expected slice `[u8]`, found array `[u8; 3]`\n    |\n    = note: expected reference `&[u8]`\n               found reference `&[u8; 3]`\n@@ -29,7 +29,7 @@ error[E0308]: mismatched types\n   --> $DIR/type-ascription-soundness.rs:12:17\n    |\n LL |     let _len = (arr: &[u8]).len();\n-   |                 ^^^ expected slice, found array of 3 elements\n+   |                 ^^^ expected slice `[u8]`, found array `[u8; 3]`\n    |\n    = note: expected reference `&[u8]`\n               found reference `&[u8; 3]`"}, {"sha": "f210fd62d7dc7c7dab7e5537614926aa4d12942d", "filename": "src/test/ui/type/type-check/assignment-expected-bool.stderr", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |     let _: bool = 0 = 0;\n    |                   |\n    |                   expected bool, found ()\n    |                   help: try comparing for equality: `0 == 0`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:9:14\n@@ -18,9 +15,6 @@ LL |         0 => 0 = 0,\n    |              |\n    |              expected bool, found ()\n    |              help: try comparing for equality: `0 == 0`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:10:14\n@@ -30,9 +24,6 @@ LL |         _ => 0 = 0,\n    |              |\n    |              expected bool, found ()\n    |              help: try comparing for equality: `0 == 0`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:14:17\n@@ -42,9 +33,6 @@ LL |         true => 0 = 0,\n    |                 |\n    |                 expected bool, found ()\n    |                 help: try comparing for equality: `0 == 0`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:18:8\n@@ -54,9 +42,6 @@ LL |     if 0 = 0 {}\n    |        |\n    |        expected bool, found ()\n    |        help: try comparing for equality: `0 == 0`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:20:24\n@@ -66,9 +51,6 @@ LL |     let _: bool = if { 0 = 0 } {\n    |                        |\n    |                        expected bool, found ()\n    |                        help: try comparing for equality: `0 == 0`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:21:9\n@@ -78,9 +60,6 @@ LL |         0 = 0\n    |         |\n    |         expected bool, found ()\n    |         help: try comparing for equality: `0 == 0`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:23:9\n@@ -90,9 +69,6 @@ LL |         0 = 0\n    |         |\n    |         expected bool, found ()\n    |         help: try comparing for equality: `0 == 0`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:26:13\n@@ -102,9 +78,6 @@ LL |     let _ = (0 = 0)\n    |             |\n    |             expected bool, found ()\n    |             help: try comparing for equality: `0 == 0`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:27:14\n@@ -114,9 +87,6 @@ LL |         && { 0 = 0 }\n    |              |\n    |              expected bool, found ()\n    |              help: try comparing for equality: `0 == 0`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:28:12\n@@ -126,9 +96,6 @@ LL |         || (0 = 0);\n    |            |\n    |            expected bool, found ()\n    |            help: try comparing for equality: `0 == 0`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0070]: invalid left-hand side expression\n   --> $DIR/assignment-expected-bool.rs:31:20\n@@ -141,9 +108,6 @@ error[E0308]: mismatched types\n    |\n LL |     let _: usize = 0 = 0;\n    |                    ^^^^^ expected usize, found ()\n-   |\n-   = note:   expected type `usize`\n-           found unit type `()`\n \n error: aborting due to 13 previous errors\n "}, {"sha": "789902bbb94559e6f4dcf98aeac82102d3b8df3e", "filename": "src/test/ui/type/type-check/assignment-in-if.stderr", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -6,9 +6,6 @@ LL |     if x = x {\n    |        |\n    |        expected bool, found ()\n    |        help: try comparing for equality: `x == x`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:20:8\n@@ -18,9 +15,6 @@ LL |     if (x = x) {\n    |        |\n    |        expected bool, found ()\n    |        help: try comparing for equality: `x == x`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:25:8\n@@ -30,9 +24,6 @@ LL |     if y = (Foo { foo: x }) {\n    |        |\n    |        expected bool, found ()\n    |        help: try comparing for equality: `y == (Foo { foo: x })`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:30:8\n@@ -42,9 +33,6 @@ LL |     if 3 = x {\n    |        |\n    |        expected bool, found ()\n    |        help: try comparing for equality: `3 == x`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:36:13\n@@ -54,9 +42,6 @@ LL |             x = 4\n    |             |\n    |             expected bool, found ()\n    |             help: try comparing for equality: `x == 4`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:38:13\n@@ -66,9 +51,6 @@ LL |             x = 5\n    |             |\n    |             expected bool, found ()\n    |             help: try comparing for equality: `x == 5`\n-   |\n-   = note:   expected type `bool`\n-           found unit type `()`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "720bde9371132e8bce180d47453f03c38ab5163f", "filename": "src/test/ui/type/type-error-break-tail.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-error-break-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-error-break-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-error-break-tail.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -9,9 +9,6 @@ LL |         if false { break; }\n    |                    |\n    |                    expected i32, found ()\n    |                    help: give it a value of the expected type: `break 42`\n-   |\n-   = note:   expected type `i32`\n-           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "6270ee6471301f9eb03955d1333184f21436e489", "filename": "src/test/ui/type/type-mismatch-multiple.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-multiple.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,8 +2,6 @@\n \n fn main() { let a: bool = 1; let b: i32 = true; }\n //~^ ERROR mismatched types\n-//~| expected type `bool`\n-//~| found type `{integer}`\n //~| expected bool, found integer\n //~| ERROR mismatched types\n //~| expected i32, found bool"}, {"sha": "6de8a056978cbe4be1d0441e85b7dae54a744837", "filename": "src/test/ui/type/type-mismatch-multiple.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-multiple.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL | fn main() { let a: bool = 1; let b: i32 = true; }\n    |                           ^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch-multiple.rs:3:43"}, {"sha": "b1f9a28e16d5610f8accc06f1b05d4ae5b0a943e", "filename": "src/test/ui/type/type-mismatch-same-crate-name.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.rs?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -17,8 +17,6 @@ fn main() {\n         //~^ ERROR mismatched types\n         //~| Perhaps two different versions of crate `crate_a1`\n         //~| expected struct `main::a::Foo`\n-        //~| expected struct `main::a::Foo`\n-        //~| found struct `main::a::Foo`\n         a::try_bar(bar2);\n         //~^ ERROR mismatched types\n         //~| Perhaps two different versions of crate `crate_a1`"}, {"sha": "91bbe9c1fbe2a2c6cb69261f2f898582c7ef337d", "filename": "src/test/ui/type/type-mismatch-same-crate-name.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -4,24 +4,22 @@ error[E0308]: mismatched types\n LL |         a::try_foo(foo2);\n    |                    ^^^^ expected struct `main::a::Foo`, found a different struct `main::a::Foo`\n    |\n-   = note: expected struct `main::a::Foo` (struct `main::a::Foo`)\n-              found struct `main::a::Foo` (struct `main::a::Foo`)\n note: Perhaps two different versions of crate `crate_a1` are being used?\n   --> $DIR/type-mismatch-same-crate-name.rs:16:20\n    |\n LL |         a::try_foo(foo2);\n    |                    ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch-same-crate-name.rs:22:20\n+  --> $DIR/type-mismatch-same-crate-name.rs:20:20\n    |\n LL |         a::try_bar(bar2);\n    |                    ^^^^ expected trait `main::a::Bar`, found a different trait `main::a::Bar`\n    |\n    = note: expected struct `std::boxed::Box<(dyn main::a::Bar + 'static)>`\n               found struct `std::boxed::Box<dyn main::a::Bar>`\n note: Perhaps two different versions of crate `crate_a1` are being used?\n-  --> $DIR/type-mismatch-same-crate-name.rs:22:20\n+  --> $DIR/type-mismatch-same-crate-name.rs:20:20\n    |\n LL |         a::try_bar(bar2);\n    |                    ^^^^"}, {"sha": "e6016bdef18ed8c5b8cb5e6d7463057d35335962", "filename": "src/test/ui/type/type-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -3,18 +3,12 @@ error[E0308]: mismatched types\n    |\n LL |     want::<foo>(f);\n    |                 ^ expected struct `foo`, found usize\n-   |\n-   = note: expected struct `foo`\n-                found type `usize`\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:18:17\n    |\n LL |     want::<bar>(f);\n    |                 ^ expected struct `bar`, found usize\n-   |\n-   = note: expected struct `bar`\n-                found type `usize`\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:19:24\n@@ -75,18 +69,12 @@ error[E0308]: mismatched types\n    |\n LL |     want::<usize>(f);\n    |                   ^ expected usize, found struct `foo`\n-   |\n-   = note: expected type `usize`\n-            found struct `foo`\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:29:17\n    |\n LL |     want::<bar>(f);\n    |                 ^ expected struct `bar`, found struct `foo`\n-   |\n-   = note: expected struct `bar`\n-              found struct `foo`\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:30:24\n@@ -230,7 +218,7 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:48:26\n    |\n LL |     want::<&Foo<foo, B>>(f);\n-   |                          ^ expected reference, found struct `Foo`\n+   |                          ^ expected &Foo<foo, B>, found struct `Foo`\n    |\n    = note: expected reference `&Foo<foo, B>`\n                  found struct `Foo<foo>`\n@@ -322,7 +310,7 @@ error[E0308]: mismatched types\n LL |     want::<&Foo<foo, B>>(f);\n    |                          ^\n    |                          |\n-   |                          expected reference, found struct `Foo`\n+   |                          expected &Foo<foo, B>, found struct `Foo`\n    |                          help: consider borrowing here: `&f`\n    |\n    = note: expected reference `&Foo<foo, B>`\n@@ -422,7 +410,7 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch.rs:75:26\n    |\n LL |     want::<&Foo<foo, B>>(f);\n-   |                          ^ expected reference, found struct `Foo`\n+   |                          ^ expected &Foo<foo, B>, found struct `Foo`\n    |\n    = note: expected reference `&Foo<foo, B>`\n                  found struct `Foo<foo, B, A>`"}, {"sha": "70be30ed53e8339940131bbac612f9c1a37b68e2", "filename": "src/test/ui/type/type-shadow.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Ftype%2Ftype-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-shadow.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/type-shadow.rs:6:20\n    |\n LL |         let y: Y = \"hello\";\n-   |                    ^^^^^^^ expected isize, found reference\n-   |\n-   = note:   expected type `isize`\n-           found reference `&'static str`\n+   |                    ^^^^^^^ expected isize, found &str\n \n error: aborting due to previous error\n "}, {"sha": "fb21980805fa8b2114ff0e72f391276bf59f93e2", "filename": "src/test/ui/wrong-mul-method-signature.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c642546497dd4c04609bd6dbe7631fb56df1fa/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr?ref=94c642546497dd4c04609bd6dbe7631fb56df1fa", "patch": "@@ -30,18 +30,12 @@ error[E0308]: mismatched types\n    |\n LL |     let x: Vec2 = Vec2 { x: 1.0, y: 2.0 } * 2.0; // trait had reversed order\n    |                                             ^^^ expected struct `Vec2`, found floating-point number\n-   |\n-   = note: expected struct `Vec2`\n-                found type `{float}`\n \n error[E0308]: mismatched types\n   --> $DIR/wrong-mul-method-signature.rs:63:19\n    |\n LL |     let x: Vec2 = Vec2 { x: 1.0, y: 2.0 } * 2.0; // trait had reversed order\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec2`, found f64\n-   |\n-   = note: expected struct `Vec2`\n-                found type `f64`\n \n error: aborting due to 5 previous errors\n "}]}