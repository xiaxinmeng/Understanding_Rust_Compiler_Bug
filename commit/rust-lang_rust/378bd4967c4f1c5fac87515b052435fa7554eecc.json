{"sha": "378bd4967c4f1c5fac87515b052435fa7554eecc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OGJkNDk2N2M0ZjFjNWZhYzg3NTE1YjA1MjQzNWZhNzU1NGVlY2M=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-04-10T02:04:32Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-04-10T02:05:14Z"}, "message": "Disallow `impl Trait` in unsupported position", "tree": {"sha": "a0f7fc3a84d112211e2b851c638672863d4f229d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0f7fc3a84d112211e2b851c638672863d4f229d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/378bd4967c4f1c5fac87515b052435fa7554eecc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/378bd4967c4f1c5fac87515b052435fa7554eecc", "html_url": "https://github.com/rust-lang/rust/commit/378bd4967c4f1c5fac87515b052435fa7554eecc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/378bd4967c4f1c5fac87515b052435fa7554eecc/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b9b70c394e7f341b4016fce4cbf763d404b26f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9b70c394e7f341b4016fce4cbf763d404b26f9", "html_url": "https://github.com/rust-lang/rust/commit/4b9b70c394e7f341b4016fce4cbf763d404b26f9"}], "stats": {"total": 91, "additions": 74, "deletions": 17}, "files": [{"sha": "a0931dcad786e5f126cfd6bba55578999aa27afd", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/378bd4967c4f1c5fac87515b052435fa7554eecc/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378bd4967c4f1c5fac87515b052435fa7554eecc/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=378bd4967c4f1c5fac87515b052435fa7554eecc", "patch": "@@ -780,8 +780,9 @@ impl<'a> LoweringContext<'a> {\n                 _ => None,\n             }),\n             |this| {\n+                let itctx = ImplTraitContext::Universal(parent_id);\n                 this.collect_in_band_defs(parent_id, anonymous_lifetime_mode, |this| {\n-                    (this.lower_generics(generics), f(this))\n+                    (this.lower_generics(generics, itctx), f(this))\n                 })\n             },\n         );\n@@ -1043,7 +1044,11 @@ impl<'a> LoweringContext<'a> {\n                 }),\n                 |this| {\n                     hir::TyBareFn(P(hir::BareFnTy {\n-                        generic_params: this.lower_generic_params(&f.generic_params, &NodeMap()),\n+                        generic_params: this.lower_generic_params(\n+                            &f.generic_params,\n+                            &NodeMap(),\n+                            ImplTraitContext::Disallowed,\n+                        ),\n                         unsafety: this.lower_unsafety(f.unsafety),\n                         abi: f.abi,\n                         decl: this.lower_fn_decl(&f.decl, None, false),\n@@ -1784,7 +1789,12 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_ty_param(&mut self, tp: &TyParam, add_bounds: &[TyParamBound]) -> hir::TyParam {\n+    fn lower_ty_param(\n+        &mut self,\n+        tp: &TyParam,\n+        add_bounds: &[TyParamBound],\n+        itctx: ImplTraitContext,\n+    ) -> hir::TyParam {\n         let mut name = self.lower_ident(tp.ident);\n \n         // Don't expose `Self` (recovered \"keyword used as ident\" parse error).\n@@ -1794,7 +1804,6 @@ impl<'a> LoweringContext<'a> {\n             name = Symbol::gensym(\"Self\");\n         }\n \n-        let itctx = ImplTraitContext::Universal(self.resolver.definitions().local_def_id(tp.id));\n         let mut bounds = self.lower_bounds(&tp.bounds, itctx);\n         if !add_bounds.is_empty() {\n             bounds = bounds\n@@ -1879,6 +1888,7 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         params: &Vec<GenericParam>,\n         add_bounds: &NodeMap<Vec<TyParamBound>>,\n+        itctx: ImplTraitContext,\n     ) -> hir::HirVec<hir::GenericParam> {\n         params\n             .iter()\n@@ -1889,12 +1899,13 @@ impl<'a> LoweringContext<'a> {\n                 GenericParam::Type(ref ty_param) => hir::GenericParam::Type(self.lower_ty_param(\n                     ty_param,\n                     add_bounds.get(&ty_param.id).map_or(&[][..], |x| &x),\n+                    itctx,\n                 )),\n             })\n             .collect()\n     }\n \n-    fn lower_generics(&mut self, g: &Generics) -> hir::Generics {\n+    fn lower_generics(&mut self, g: &Generics, itctx: ImplTraitContext) -> hir::Generics {\n         // Collect `?Trait` bounds in where clause and move them to parameter definitions.\n         // FIXME: This could probably be done with less rightward drift. Also looks like two control\n         //        paths where report_error is called are also the only paths that advance to after\n@@ -1947,7 +1958,7 @@ impl<'a> LoweringContext<'a> {\n         }\n \n         hir::Generics {\n-            params: self.lower_generic_params(&g.params, &add_bounds),\n+            params: self.lower_generic_params(&g.params, &add_bounds, itctx),\n             where_clause: self.lower_where_clause(&g.where_clause),\n             span: g.span,\n         }\n@@ -1981,6 +1992,7 @@ impl<'a> LoweringContext<'a> {\n                             bound_generic_params: this.lower_generic_params(\n                                 bound_generic_params,\n                                 &NodeMap(),\n+                                ImplTraitContext::Disallowed,\n                             ),\n                             bounded_ty: this.lower_ty(bounded_ty, ImplTraitContext::Disallowed),\n                             bounds: bounds\n@@ -2064,7 +2076,8 @@ impl<'a> LoweringContext<'a> {\n         p: &PolyTraitRef,\n         itctx: ImplTraitContext,\n     ) -> hir::PolyTraitRef {\n-        let bound_generic_params = self.lower_generic_params(&p.bound_generic_params, &NodeMap());\n+        let bound_generic_params =\n+            self.lower_generic_params(&p.bound_generic_params, &NodeMap(), itctx);\n         let trait_ref = self.with_parent_impl_lifetime_defs(\n             &bound_generic_params\n                 .iter()\n@@ -2216,7 +2229,7 @@ impl<'a> LoweringContext<'a> {\n             ItemKind::GlobalAsm(ref ga) => hir::ItemGlobalAsm(self.lower_global_asm(ga)),\n             ItemKind::Ty(ref t, ref generics) => hir::ItemTy(\n                 self.lower_ty(t, ImplTraitContext::Disallowed),\n-                self.lower_generics(generics),\n+                self.lower_generics(generics, ImplTraitContext::Disallowed),\n             ),\n             ItemKind::Enum(ref enum_definition, ref generics) => hir::ItemEnum(\n                 hir::EnumDef {\n@@ -2226,15 +2239,21 @@ impl<'a> LoweringContext<'a> {\n                         .map(|x| self.lower_variant(x))\n                         .collect(),\n                 },\n-                self.lower_generics(generics),\n+                self.lower_generics(generics, ImplTraitContext::Disallowed),\n             ),\n             ItemKind::Struct(ref struct_def, ref generics) => {\n                 let struct_def = self.lower_variant_data(struct_def);\n-                hir::ItemStruct(struct_def, self.lower_generics(generics))\n+                hir::ItemStruct(\n+                    struct_def,\n+                    self.lower_generics(generics, ImplTraitContext::Disallowed),\n+                )\n             }\n             ItemKind::Union(ref vdata, ref generics) => {\n                 let vdata = self.lower_variant_data(vdata);\n-                hir::ItemUnion(vdata, self.lower_generics(generics))\n+                hir::ItemUnion(\n+                    vdata,\n+                    self.lower_generics(generics, ImplTraitContext::Disallowed),\n+                )\n             }\n             ItemKind::Impl(\n                 unsafety,\n@@ -2313,13 +2332,13 @@ impl<'a> LoweringContext<'a> {\n                 hir::ItemTrait(\n                     self.lower_is_auto(is_auto),\n                     self.lower_unsafety(unsafety),\n-                    self.lower_generics(generics),\n+                    self.lower_generics(generics, ImplTraitContext::Disallowed),\n                     bounds,\n                     items,\n                 )\n             }\n             ItemKind::TraitAlias(ref generics, ref bounds) => hir::ItemTraitAlias(\n-                self.lower_generics(generics),\n+                self.lower_generics(generics, ImplTraitContext::Disallowed),\n                 self.lower_bounds(bounds, ImplTraitContext::Disallowed),\n             ),\n             ItemKind::MacroDef(..) | ItemKind::Mac(..) => panic!(\"Shouldn't still be around\"),\n@@ -2454,7 +2473,7 @@ impl<'a> LoweringContext<'a> {\n \n             let (generics, node) = match i.node {\n                 TraitItemKind::Const(ref ty, ref default) => (\n-                    this.lower_generics(&i.generics),\n+                    this.lower_generics(&i.generics, ImplTraitContext::Disallowed),\n                     hir::TraitItemKind::Const(\n                         this.lower_ty(ty, ImplTraitContext::Disallowed),\n                         default\n@@ -2495,7 +2514,7 @@ impl<'a> LoweringContext<'a> {\n                     )\n                 }\n                 TraitItemKind::Type(ref bounds, ref default) => (\n-                    this.lower_generics(&i.generics),\n+                    this.lower_generics(&i.generics, ImplTraitContext::Disallowed),\n                     hir::TraitItemKind::Type(\n                         this.lower_bounds(bounds, ImplTraitContext::Disallowed),\n                         default\n@@ -2552,7 +2571,7 @@ impl<'a> LoweringContext<'a> {\n                 ImplItemKind::Const(ref ty, ref expr) => {\n                     let body_id = this.lower_body(None, |this| this.lower_expr(expr));\n                     (\n-                        this.lower_generics(&i.generics),\n+                        this.lower_generics(&i.generics, ImplTraitContext::Disallowed),\n                         hir::ImplItemKind::Const(\n                             this.lower_ty(ty, ImplTraitContext::Disallowed),\n                             body_id,\n@@ -2583,7 +2602,7 @@ impl<'a> LoweringContext<'a> {\n                     )\n                 }\n                 ImplItemKind::Type(ref ty) => (\n-                    this.lower_generics(&i.generics),\n+                    this.lower_generics(&i.generics, ImplTraitContext::Disallowed),\n                     hir::ImplItemKind::Type(this.lower_ty(ty, ImplTraitContext::Disallowed)),\n                 ),\n                 ImplItemKind::Macro(..) => panic!(\"Shouldn't exist any more\"),"}, {"sha": "b6b720f088aee360a09f50d5d3d1a8d0e0ee2dfd", "filename": "src/test/compile-fail/issue-47715.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/378bd4967c4f1c5fac87515b052435fa7554eecc/src%2Ftest%2Fcompile-fail%2Fissue-47715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378bd4967c4f1c5fac87515b052435fa7554eecc/src%2Ftest%2Fcompile-fail%2Fissue-47715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-47715.rs?ref=378bd4967c4f1c5fac87515b052435fa7554eecc", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {}\n+\n+trait Bar<T> {}\n+\n+trait Iterable {\n+    type Item;\n+}\n+\n+struct Container<T: Iterable<Item = impl Foo>> {\n+    //~^ ERROR `impl Trait` not allowed\n+    field: T\n+}\n+\n+enum Enum<T: Iterable<Item = impl Foo>> {\n+    //~^ ERROR `impl Trait` not allowed\n+    A(T),\n+}\n+\n+union Union<T: Iterable<Item = impl Foo> + Copy> {\n+    //~^ ERROR `impl Trait` not allowed\n+    x: T,\n+}\n+\n+type Type<T: Iterable<Item = impl Foo>> = T;\n+//~^ ERROR `impl Trait` not allowed\n+\n+fn main() {\n+}"}]}