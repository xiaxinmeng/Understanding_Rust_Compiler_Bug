{"sha": "880ddddfe6937c11059e9673050ea8c4ed40ff5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MGRkZGRmZTY5MzdjMTEwNTllOTY3MzA1MGVhOGM0ZWQ0MGZmNWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-08T16:54:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-08T17:02:48Z"}, "message": "dead code", "tree": {"sha": "5842da856c8935e42c6a78a1d1e95864e94bf928", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5842da856c8935e42c6a78a1d1e95864e94bf928"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/880ddddfe6937c11059e9673050ea8c4ed40ff5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/880ddddfe6937c11059e9673050ea8c4ed40ff5b", "html_url": "https://github.com/rust-lang/rust/commit/880ddddfe6937c11059e9673050ea8c4ed40ff5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/880ddddfe6937c11059e9673050ea8c4ed40ff5b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a4819ca195a85bf4b388c423f262ae6ff8d0418", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a4819ca195a85bf4b388c423f262ae6ff8d0418", "html_url": "https://github.com/rust-lang/rust/commit/2a4819ca195a85bf4b388c423f262ae6ff8d0418"}], "stats": {"total": 122, "additions": 1, "deletions": 121}, "files": [{"sha": "3f9b84ab90f85f03daef85fe5f7997cc0f23c1fa", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 1, "deletions": 121, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/880ddddfe6937c11059e9673050ea8c4ed40ff5b/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880ddddfe6937c11059e9673050ea8c4ed40ff5b/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=880ddddfe6937c11059e9673050ea8c4ed40ff5b", "patch": "@@ -1,10 +1,6 @@\n //! FIXME: write short doc here\n \n-use std::{\n-    fmt,\n-    hash::BuildHasherDefault,\n-    ops::{self, RangeInclusive},\n-};\n+use std::{fmt, hash::BuildHasherDefault, ops::RangeInclusive};\n \n use indexmap::IndexMap;\n use itertools::Itertools;\n@@ -358,107 +354,11 @@ impl fmt::Debug for SyntaxRewriter<'_> {\n }\n \n impl SyntaxRewriter<'_> {\n-    pub fn delete<T: Clone + Into<SyntaxElement>>(&mut self, what: &T) {\n-        let what = what.clone().into();\n-        let replacement = Replacement::Delete;\n-        self.replacements.insert(what, replacement);\n-    }\n-    pub fn insert_before<T: Clone + Into<SyntaxElement>, U: Clone + Into<SyntaxElement>>(\n-        &mut self,\n-        before: &T,\n-        what: &U,\n-    ) {\n-        let before = before.clone().into();\n-        let pos = match before.prev_sibling_or_token() {\n-            Some(sibling) => InsertPos::After(sibling),\n-            None => match before.parent() {\n-                Some(parent) => InsertPos::FirstChildOf(parent),\n-                None => return,\n-            },\n-        };\n-        self.insertions.entry(pos).or_insert_with(Vec::new).push(what.clone().into());\n-    }\n-    pub fn insert_after<T: Clone + Into<SyntaxElement>, U: Clone + Into<SyntaxElement>>(\n-        &mut self,\n-        after: &T,\n-        what: &U,\n-    ) {\n-        self.insertions\n-            .entry(InsertPos::After(after.clone().into()))\n-            .or_insert_with(Vec::new)\n-            .push(what.clone().into());\n-    }\n-    pub fn insert_as_first_child<T: Clone + Into<SyntaxNode>, U: Clone + Into<SyntaxElement>>(\n-        &mut self,\n-        parent: &T,\n-        what: &U,\n-    ) {\n-        self.insertions\n-            .entry(InsertPos::FirstChildOf(parent.clone().into()))\n-            .or_insert_with(Vec::new)\n-            .push(what.clone().into());\n-    }\n-    pub fn insert_many_before<\n-        T: Clone + Into<SyntaxElement>,\n-        U: IntoIterator<Item = SyntaxElement>,\n-    >(\n-        &mut self,\n-        before: &T,\n-        what: U,\n-    ) {\n-        let before = before.clone().into();\n-        let pos = match before.prev_sibling_or_token() {\n-            Some(sibling) => InsertPos::After(sibling),\n-            None => match before.parent() {\n-                Some(parent) => InsertPos::FirstChildOf(parent),\n-                None => return,\n-            },\n-        };\n-        self.insertions.entry(pos).or_insert_with(Vec::new).extend(what);\n-    }\n-    pub fn insert_many_after<\n-        T: Clone + Into<SyntaxElement>,\n-        U: IntoIterator<Item = SyntaxElement>,\n-    >(\n-        &mut self,\n-        after: &T,\n-        what: U,\n-    ) {\n-        self.insertions\n-            .entry(InsertPos::After(after.clone().into()))\n-            .or_insert_with(Vec::new)\n-            .extend(what);\n-    }\n-    pub fn insert_many_as_first_children<\n-        T: Clone + Into<SyntaxNode>,\n-        U: IntoIterator<Item = SyntaxElement>,\n-    >(\n-        &mut self,\n-        parent: &T,\n-        what: U,\n-    ) {\n-        self.insertions\n-            .entry(InsertPos::FirstChildOf(parent.clone().into()))\n-            .or_insert_with(Vec::new)\n-            .extend(what)\n-    }\n     pub fn replace<T: Clone + Into<SyntaxElement>>(&mut self, what: &T, with: &T) {\n         let what = what.clone().into();\n         let replacement = Replacement::Single(with.clone().into());\n         self.replacements.insert(what, replacement);\n     }\n-    pub fn replace_with_many<T: Clone + Into<SyntaxElement>>(\n-        &mut self,\n-        what: &T,\n-        with: Vec<SyntaxElement>,\n-    ) {\n-        let what = what.clone().into();\n-        let replacement = Replacement::Many(with);\n-        self.replacements.insert(what, replacement);\n-    }\n-    pub fn replace_ast<T: AstNode>(&mut self, what: &T, with: &T) {\n-        self.replace(what.syntax(), with.syntax())\n-    }\n \n     pub fn rewrite(&self, node: &SyntaxNode) -> SyntaxNode {\n         let _p = profile::span(\"rewrite\");\n@@ -534,10 +434,6 @@ impl SyntaxRewriter<'_> {\n         if let Some(replacement) = self.replacement(&element) {\n             match replacement {\n                 Replacement::Single(element) => acc.push(element_to_green(element)),\n-                Replacement::Many(replacements) => {\n-                    acc.extend(replacements.into_iter().map(element_to_green))\n-                }\n-                Replacement::Delete => (),\n             };\n         } else {\n             match element {\n@@ -560,25 +456,9 @@ fn element_to_green(element: SyntaxElement) -> NodeOrToken<rowan::GreenNode, row\n     }\n }\n \n-impl ops::AddAssign for SyntaxRewriter<'_> {\n-    fn add_assign(&mut self, rhs: SyntaxRewriter) {\n-        self.replacements.extend(rhs.replacements);\n-        for (pos, insertions) in rhs.insertions.into_iter() {\n-            match self.insertions.entry(pos) {\n-                indexmap::map::Entry::Occupied(mut occupied) => {\n-                    occupied.get_mut().extend(insertions)\n-                }\n-                indexmap::map::Entry::Vacant(vacant) => drop(vacant.insert(insertions)),\n-            }\n-        }\n-    }\n-}\n-\n #[derive(Clone, Debug)]\n enum Replacement {\n-    Delete,\n     Single(SyntaxElement),\n-    Many(Vec<SyntaxElement>),\n }\n \n fn with_children("}]}