{"sha": "1708ad65a45fa39aa177c5f015415a9440c18912", "node_id": "C_kwDOAAsO6NoAKDE3MDhhZDY1YTQ1ZmEzOWFhMTc3YzVmMDE1NDE1YTk0NDBjMTg5MTI", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-05-19T08:32:35Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-05-19T08:33:13Z"}, "message": "update recursion depth in `confirm_candidate`", "tree": {"sha": "e80fec5ea3cdb008ea8dd7020afba83aae5a4398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e80fec5ea3cdb008ea8dd7020afba83aae5a4398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1708ad65a45fa39aa177c5f015415a9440c18912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1708ad65a45fa39aa177c5f015415a9440c18912", "html_url": "https://github.com/rust-lang/rust/commit/1708ad65a45fa39aa177c5f015415a9440c18912", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1708ad65a45fa39aa177c5f015415a9440c18912/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19ca5692f69d20643656bf501fd171f1907ef875", "url": "https://api.github.com/repos/rust-lang/rust/commits/19ca5692f69d20643656bf501fd171f1907ef875", "html_url": "https://github.com/rust-lang/rust/commit/19ca5692f69d20643656bf501fd171f1907ef875"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "5b0b40cbfd9bc04e68116671dfc204030364b3f1", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1708ad65a45fa39aa177c5f015415a9440c18912/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1708ad65a45fa39aa177c5f015415a9440c18912/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=1708ad65a45fa39aa177c5f015415a9440c18912", "patch": "@@ -701,9 +701,9 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n     }\n \n     pub fn borrow_nested_obligations(&self) -> &[N] {\n-        match &self {\n-            ImplSource::UserDefined(i) => &i.nested[..],\n-            ImplSource::Param(n, _) => &n,\n+        match self {\n+            ImplSource::UserDefined(i) => &i.nested,\n+            ImplSource::Param(n, _) => n,\n             ImplSource::Builtin(i) => &i.nested,\n             ImplSource::AutoImpl(d) => &d.nested,\n             ImplSource::Closure(c) => &c.nested,\n@@ -717,6 +717,23 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n         }\n     }\n \n+    pub fn borrow_nested_obligations_mut(&mut self) -> &mut [N] {\n+        match self {\n+            ImplSource::UserDefined(i) => &mut i.nested,\n+            ImplSource::Param(n, _) => n,\n+            ImplSource::Builtin(i) => &mut i.nested,\n+            ImplSource::AutoImpl(d) => &mut d.nested,\n+            ImplSource::Closure(c) => &mut c.nested,\n+            ImplSource::Generator(c) => &mut c.nested,\n+            ImplSource::Future(c) => &mut c.nested,\n+            ImplSource::Object(d) => &mut d.nested,\n+            ImplSource::FnPointer(d) => &mut d.nested,\n+            ImplSource::TraitAlias(d) => &mut d.nested,\n+            ImplSource::TraitUpcasting(d) => &mut d.nested,\n+            ImplSource::ConstDestruct(i) => &mut i.nested,\n+        }\n+    }\n+\n     pub fn map<M, F>(self, f: F) -> ImplSource<'tcx, M>\n     where\n         F: FnMut(N) -> M,"}, {"sha": "0d9f55d4c2edff766c9467fce640e90d63045557", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1708ad65a45fa39aa177c5f015415a9440c18912/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1708ad65a45fa39aa177c5f015415a9440c18912/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=1708ad65a45fa39aa177c5f015415a9440c18912", "patch": "@@ -132,6 +132,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n         };\n \n+        // The obligations returned by confirmation are recursively evaluated\n+        // so we need to make sure they have the correct depth.\n+        for subobligation in impl_src.borrow_nested_obligations_mut() {\n+            subobligation.set_depth_from_parent(obligation.recursion_depth);\n+        }\n+\n         if !obligation.predicate.is_const_if_const() {\n             // normalize nested predicates according to parent predicate's constness.\n             impl_src = impl_src.map(|mut o| {"}]}