{"sha": "48bda31ab92e25924449e6bebfed441f9a116e5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YmRhMzFhYjkyZTI1OTI0NDQ5ZTZiZWJmZWQ0NDFmOWExMTZlNWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-12-12T17:27:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-12-12T17:27:14Z"}, "message": "rustbuild: Update gcc-rs to 0.3.40\n\nThis commit updates the gcc-rs dependency to 0.3.40 to pick up a fix for i686\nmusl where we needed to pass an extra linker flag to get autoconf's detection of\nexecutables working correctly.", "tree": {"sha": "4624ca67a2e53ffea69c935a43721d476c7601f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4624ca67a2e53ffea69c935a43721d476c7601f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48bda31ab92e25924449e6bebfed441f9a116e5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48bda31ab92e25924449e6bebfed441f9a116e5b", "html_url": "https://github.com/rust-lang/rust/commit/48bda31ab92e25924449e6bebfed441f9a116e5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48bda31ab92e25924449e6bebfed441f9a116e5b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f62fae92679fdcaad5909b15513df1a963b29ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f62fae92679fdcaad5909b15513df1a963b29ac", "html_url": "https://github.com/rust-lang/rust/commit/6f62fae92679fdcaad5909b15513df1a963b29ac"}], "stats": {"total": 96, "additions": 77, "deletions": 19}, "files": [{"sha": "9cd77e71b82dde04638ee53c04353b5ced783024", "filename": "src/Cargo.lock", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/48bda31ab92e25924449e6bebfed441f9a116e5b/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/48bda31ab92e25924449e6bebfed441f9a116e5b/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=48bda31ab92e25924449e6bebfed441f9a116e5b", "patch": "@@ -19,7 +19,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n ]\n \n@@ -42,7 +42,7 @@ dependencies = [\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -63,7 +63,7 @@ name = \"cmake\"\n version = \"0.1.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -80,7 +80,7 @@ name = \"compiler_builtins\"\n version = \"0.0.0\"\n dependencies = [\n  \"core 0.0.0\",\n- \"gcc 0.3.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -121,7 +121,7 @@ name = \"flate\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -130,7 +130,7 @@ version = \"0.0.0\"\n \n [[package]]\n name = \"gcc\"\n-version = \"0.3.38\"\n+version = \"0.3.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -402,7 +402,7 @@ name = \"rustc_llvm\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_bitflags 0.0.0\",\n ]\n \n@@ -551,7 +551,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -587,7 +587,7 @@ dependencies = [\n  \"collections 0.0.0\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n@@ -677,7 +677,7 @@ dependencies = [\n \"checksum cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e5bcf27e097a184c1df4437654ed98df3d7a516e8508a6ba45d8b092bbdf283\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5363ab8e4139b8568a6237db5248646e5a8a2f89bd5ccb02092182b11fd3e922\"\n-\"checksum gcc 0.3.38 (registry+https://github.com/rust-lang/crates.io-index)\" = \"553f11439bdefe755bf366b264820f1da70f3aaf3924e594b886beb9c831bcf5\"\n+\"checksum gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"872db9e59486ef2b14f8e8c10e9ef02de2bccef6363d7f34835dedb386b3d950\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n \"checksum libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"044d1360593a78f5c8e5e710beccdc24ab71d1f01bc19a29bcacdba22e8475d8\"\n \"checksum log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab83497bf8bf4ed2a74259c1c802351fcd67a65baa86394b6ba73c36f4838054\""}, {"sha": "e85f4b2181357350e038b5142d739f400349c923", "filename": "src/vendor/gcc/.cargo-checksum.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48bda31ab92e25924449e6bebfed441f9a116e5b/src%2Fvendor%2Fgcc%2F.cargo-checksum.json", "raw_url": "https://github.com/rust-lang/rust/raw/48bda31ab92e25924449e6bebfed441f9a116e5b/src%2Fvendor%2Fgcc%2F.cargo-checksum.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fgcc%2F.cargo-checksum.json?ref=48bda31ab92e25924449e6bebfed441f9a116e5b", "patch": "@@ -1 +1 @@\n-{\"files\":{\".cargo-ok\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\".gitignore\":\"f9b1ca6ae27d1c18215265024629a8960c31379f206d9ed20f64e0b2dcf79805\",\".travis.yml\":\"5cee7774cf6d876246a0ae0f8362cceeecec5924b751049c945faac9342565ff\",\"Cargo.toml\":\"2634dedd87889b33a794e31b41a8d8d4713ef40382be3d464229707679bd83da\",\"LICENSE-APACHE\":\"a60eea817514531668d7e00765731449fe14d059d3249e0bc93b36de45f759f2\",\"LICENSE-MIT\":\"378f5840b258e2779c39418f3f2d7b2ba96f1c7917dd6be0713f88305dbda397\",\"README.md\":\"ecb2d93f4c81edbd48d8742ff7887dc0a4530a5890967839090bbc972d49bebe\",\"appveyor.yml\":\"46c77d913eaa45871296942c2cd96ef092c9dcaf19201cb5c500a5107faeb06f\",\"src/bin/gcc-shim.rs\":\"11edfe1fc6f932bd42ffffda5145833302bc163e0b87dc0d54f4bd0997ad4708\",\"src/lib.rs\":\"5eb0e311367226ed0420f5e2dac10cc35fc0a3be639a612b6e8ea6d24f646634\",\"src/registry.rs\":\"3e2a42581ebb82e325dd5600c6571cef937b35003b2927dc618967f5238a2058\",\"src/windows_registry.rs\":\"906653c020ffe9d572e435f3fc3a8892d9e0a13240ba297db01ce0a288e08cdb\",\"tests/cc_env.rs\":\"d92c5e3d3d43ac244e63b2cd2c93a521fcf124bf1ccf8d4c6bfa7f8333d88976\",\"tests/support/mod.rs\":\"d11ed0db4dda5ecf5fb970c9b0c56428cd47421a2742f07032e2cc6b0a0f07e2\",\"tests/test.rs\":\"164220f11be2eebc20315826513999970660a82feff8cc4b15b4e9d73d98324e\"},\"package\":\"553f11439bdefe755bf366b264820f1da70f3aaf3924e594b886beb9c831bcf5\"}\n\\ No newline at end of file\n+{\"files\":{\".cargo-ok\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\".gitignore\":\"f9b1ca6ae27d1c18215265024629a8960c31379f206d9ed20f64e0b2dcf79805\",\".travis.yml\":\"675ffe583db77282d010306f29e6d81e5070ab081deddd0300137dfbd2cb83de\",\"Cargo.toml\":\"19bb617b74de761515ef5d087fd0e30912fda1d7c22fd04fa211236dab99a509\",\"LICENSE-APACHE\":\"a60eea817514531668d7e00765731449fe14d059d3249e0bc93b36de45f759f2\",\"LICENSE-MIT\":\"378f5840b258e2779c39418f3f2d7b2ba96f1c7917dd6be0713f88305dbda397\",\"README.md\":\"ecb2d93f4c81edbd48d8742ff7887dc0a4530a5890967839090bbc972d49bebe\",\"appveyor.yml\":\"46c77d913eaa45871296942c2cd96ef092c9dcaf19201cb5c500a5107faeb06f\",\"src/bin/gcc-shim.rs\":\"11edfe1fc6f932bd42ffffda5145833302bc163e0b87dc0d54f4bd0997ad4708\",\"src/lib.rs\":\"7e7c60beccfdd145e876da81bb07dd09c5248dab0b26d93190bab4242799d51a\",\"src/registry.rs\":\"3e2a42581ebb82e325dd5600c6571cef937b35003b2927dc618967f5238a2058\",\"src/windows_registry.rs\":\"1f4211caec5a192b5f05c8a47efb27aa6a0ab976c659b9318a0cf603a28d6746\",\"tests/cc_env.rs\":\"d92c5e3d3d43ac244e63b2cd2c93a521fcf124bf1ccf8d4c6bfa7f8333d88976\",\"tests/support/mod.rs\":\"f4dad5a8133c3dd6678d9a3de057b82e624ef547b9b3e4ac9508a48962fc387b\",\"tests/test.rs\":\"164220f11be2eebc20315826513999970660a82feff8cc4b15b4e9d73d98324e\"},\"package\":\"872db9e59486ef2b14f8e8c10e9ef02de2bccef6363d7f34835dedb386b3d950\"}\n\\ No newline at end of file"}, {"sha": "bf55f49173dcc894eae82fa48fc7f4ade5a2f513", "filename": "src/vendor/gcc/.travis.yml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48bda31ab92e25924449e6bebfed441f9a116e5b/src%2Fvendor%2Fgcc%2F.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/48bda31ab92e25924449e6bebfed441f9a116e5b/src%2Fvendor%2Fgcc%2F.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fgcc%2F.travis.yml?ref=48bda31ab92e25924449e6bebfed441f9a116e5b", "patch": "@@ -19,12 +19,14 @@ script:\n   - cargo test --manifest-path gcc-test/Cargo.toml --target $TARGET --features parallel\n   - cargo test --manifest-path gcc-test/Cargo.toml --target $TARGET --release\n   - cargo doc\n+  - cargo clean && cargo build\n   - rustdoc --test README.md -L target/debug -L target/debug/deps\n after_success:\n   - travis-cargo --only nightly doc-upload\n env:\n   global:\n-    secure: ilbcq9zX+UaiBcwqkBGldeanbEQus9npLsi0/nF1PUxKbQsoWSVtVOehAD8Hy92D3hX2npIRyNL8GxBn85XEcBYc1h7DiWUhLcXfZie79v8Ly/qboHCfZLXlB1ofbypbyQfouEdOE9zHf0ZILYVpAgUkliv6KuVShsrKNlbn4QE=\n+    secure: \"CBtqrudgE0PS8x3kTr44jKbC2D4nfnmdYVecooNm0qnER4B4TSvZpZSQoCgKK6k4BYQuOSyFTOwYx6M79w39ZMOgyCP9ytB+tyMWL0/+ZuUQL04yVg4M5vd3oJMkOaXbvG56ncgPyFrseY+FPDg+mXAzvJk/nily37YXjkQj2D0=\"\n+\n   matrix:\n     - ARCH=x86_64\n     - ARCH=i686"}, {"sha": "7efdbf9b4b3808ef6ce3593deced1e07e7cdf22e", "filename": "src/vendor/gcc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48bda31ab92e25924449e6bebfed441f9a116e5b/src%2Fvendor%2Fgcc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/48bda31ab92e25924449e6bebfed441f9a116e5b/src%2Fvendor%2Fgcc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fgcc%2FCargo.toml?ref=48bda31ab92e25924449e6bebfed441f9a116e5b", "patch": "@@ -1,7 +1,7 @@\n [package]\n \n name = \"gcc\"\n-version = \"0.3.38\"\n+version = \"0.3.40\"\n authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n license = \"MIT/Apache-2.0\"\n repository = \"https://github.com/alexcrichton/gcc-rs\""}, {"sha": "43cc371117f018564c6d124564156d5e3feed388", "filename": "src/vendor/gcc/src/lib.rs", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/48bda31ab92e25924449e6bebfed441f9a116e5b/src%2Fvendor%2Fgcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48bda31ab92e25924449e6bebfed441f9a116e5b/src%2Fvendor%2Fgcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fgcc%2Fsrc%2Flib.rs?ref=48bda31ab92e25924449e6bebfed441f9a116e5b", "patch": "@@ -353,6 +353,23 @@ impl Config {\n         self.compile_objects(&src_dst);\n         self.assemble(lib_name, &dst.join(output), &objects);\n \n+        if self.get_target().contains(\"msvc\") {\n+            let compiler = self.get_base_compiler();\n+            let atlmfc_lib = compiler.env().iter().find(|&&(ref var, _)| {\n+                var == OsStr::new(\"LIB\")\n+            }).and_then(|&(_, ref lib_paths)| {\n+                env::split_paths(lib_paths).find(|path| {\n+                    let sub = Path::new(\"atlmfc/lib\");\n+                    path.ends_with(sub) || path.parent().map_or(false, |p| p.ends_with(sub))\n+                })\n+            });\n+\n+            if let Some(atlmfc_lib) = atlmfc_lib {\n+                self.print(&format!(\"cargo:rustc-link-search=native={}\",\n+                                    atlmfc_lib.display()));\n+            }\n+        }\n+\n         self.print(&format!(\"cargo:rustc-link-lib=static={}\",\n                             &output[3..output.len() - 2]));\n         self.print(&format!(\"cargo:rustc-link-search=native={}\", dst.display()));\n@@ -446,17 +463,20 @@ impl Config {\n \n         if msvc {\n             cmd.args.push(\"/nologo\".into());\n-            cmd.args.push(\"/MD\".into()); // link against msvcrt.dll for now\n+            let features = env::var(\"CARGO_CFG_TARGET_FEATURE\")\n+                              .unwrap_or(String::new());\n+            if features.contains(\"crt-static\") {\n+                cmd.args.push(\"/MT\".into());\n+            } else {\n+                cmd.args.push(\"/MD\".into());\n+            }\n             match &opt_level[..] {\n                 \"z\" | \"s\" => cmd.args.push(\"/Os\".into()),\n                 \"2\" => cmd.args.push(\"/O2\".into()),\n                 \"1\" => cmd.args.push(\"/O1\".into()),\n                 _ => {}\n             }\n-            if target.contains(\"i686\") {\n-                cmd.args.push(\"/SAFESEH\".into());\n-            } else if target.contains(\"i586\") {\n-                cmd.args.push(\"/SAFESEH\".into());\n+            if target.contains(\"i586\") {\n                 cmd.args.push(\"/ARCH:IA32\".into());\n             }\n         } else if nvcc {\n@@ -489,27 +509,48 @@ impl Config {\n                 cmd.args.push(\"-Xcompiler\".into());\n                 cmd.args.push(\"\\'-fPIC\\'\".into());\n             }\n+\n             if target.contains(\"musl\") {\n                 cmd.args.push(\"-static\".into());\n             }\n \n+            // armv7 targets get to use armv7 instructions\n             if target.starts_with(\"armv7-unknown-linux-\") {\n                 cmd.args.push(\"-march=armv7-a\".into());\n             }\n+\n+            // On android we can guarantee some extra float instructions\n+            // (specified in the android spec online)\n             if target.starts_with(\"armv7-linux-androideabi\") {\n                 cmd.args.push(\"-march=armv7-a\".into());\n                 cmd.args.push(\"-mfpu=vfpv3-d16\".into());\n             }\n+\n+            // For us arm == armv6 by default\n             if target.starts_with(\"arm-unknown-linux-\") {\n                 cmd.args.push(\"-march=armv6\".into());\n                 cmd.args.push(\"-marm\".into());\n             }\n+\n+            // Turn codegen down on i586 to avoid some instructions.\n             if target.starts_with(\"i586-unknown-linux-\") {\n                 cmd.args.push(\"-march=pentium\".into());\n             }\n+\n+            // Set codegen level for i686 correctly\n             if target.starts_with(\"i686-unknown-linux-\") {\n                 cmd.args.push(\"-march=i686\".into());\n             }\n+\n+            // Looks like `musl-gcc` makes is hard for `-m32` to make its way\n+            // all the way to the linker, so we need to actually instruct the\n+            // linker that we're generating 32-bit executables as well. This'll\n+            // typically only be used for build scripts which transitively use\n+            // these flags that try to compile executables.\n+            if target == \"i686-unknown-linux-musl\" {\n+                cmd.args.push(\"-Wl,-melf_i386\".into());\n+            }\n+\n             if target.starts_with(\"thumb\") {\n                 cmd.args.push(\"-mthumb\".into());\n \n@@ -518,10 +559,14 @@ impl Config {\n                 }\n             }\n             if target.starts_with(\"thumbv6m\") {\n-                cmd.args.push(\"-march=armv6-m\".into());\n+                cmd.args.push(\"-march=armv6s-m\".into());\n             }\n             if target.starts_with(\"thumbv7em\") {\n                 cmd.args.push(\"-march=armv7e-m\".into());\n+\n+                if target.ends_with(\"eabihf\") {\n+                    cmd.args.push(\"-mfpu=fpv4-sp-d16\".into())\n+                }\n             }\n             if target.starts_with(\"thumbv7m\") {\n                 cmd.args.push(\"-march=armv7-m\".into());\n@@ -739,6 +784,7 @@ impl Config {\n                     \"powerpc64-unknown-linux-gnu\" => Some(\"powerpc-linux-gnu\"),\n                     \"powerpc64le-unknown-linux-gnu\" => Some(\"powerpc64le-linux-gnu\"),\n                     \"s390x-unknown-linux-gnu\" => Some(\"s390x-linux-gnu\"),\n+                    \"sparc64-unknown-netbsd\" => Some(\"sparc64--netbsd\"),\n                     \"thumbv6m-none-eabi\" => Some(\"arm-none-eabi\"),\n                     \"thumbv7em-none-eabi\" => Some(\"arm-none-eabi\"),\n                     \"thumbv7em-none-eabihf\" => Some(\"arm-none-eabi\"),\n@@ -805,6 +851,8 @@ impl Config {\n                 None\n             } else if target.contains(\"darwin\") {\n                 Some(\"c++\".to_string())\n+            } else if target.contains(\"freebsd\") {\n+                Some(\"c++\".to_string())\n             } else {\n                 Some(\"stdc++\".to_string())\n             }"}, {"sha": "e16a33f24647884b6559990a1ab73d4fc7328b87", "filename": "src/vendor/gcc/src/windows_registry.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48bda31ab92e25924449e6bebfed441f9a116e5b/src%2Fvendor%2Fgcc%2Fsrc%2Fwindows_registry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48bda31ab92e25924449e6bebfed441f9a116e5b/src%2Fvendor%2Fgcc%2Fsrc%2Fwindows_registry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fgcc%2Fsrc%2Fwindows_registry.rs?ref=48bda31ab92e25924449e6bebfed441f9a116e5b", "patch": "@@ -211,6 +211,11 @@ pub fn find_tool(target: &str, tool: &str) -> Option<Tool> {\n             let sub = otry!(vc_lib_subdir(target));\n             tool.libs.push(path.join(\"lib\").join(sub));\n             tool.include.push(path.join(\"include\"));\n+            let atlmfc_path = path.join(\"atlmfc\");\n+            if atlmfc_path.exists() {\n+                tool.libs.push(atlmfc_path.join(\"lib\").join(sub));\n+                tool.include.push(atlmfc_path.join(\"include\"));\n+            }\n             Some(tool)\n         }).next()\n     }"}, {"sha": "5c40984eb6a0999f27ba3195f7827324620957b4", "filename": "src/vendor/gcc/tests/support/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48bda31ab92e25924449e6bebfed441f9a116e5b/src%2Fvendor%2Fgcc%2Ftests%2Fsupport%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48bda31ab92e25924449e6bebfed441f9a116e5b/src%2Fvendor%2Fgcc%2Ftests%2Fsupport%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fgcc%2Ftests%2Fsupport%2Fmod.rs?ref=48bda31ab92e25924449e6bebfed441f9a116e5b", "patch": "@@ -23,6 +23,9 @@ impl Test {\n     pub fn new() -> Test {\n         let mut gcc = PathBuf::from(env::current_exe().unwrap());\n         gcc.pop();\n+        if gcc.ends_with(\"deps\") {\n+            gcc.pop();\n+        }\n         gcc.push(format!(\"gcc-shim{}\", env::consts::EXE_SUFFIX));\n         Test {\n             td: TempDir::new(\"gcc-test\").unwrap(),"}]}