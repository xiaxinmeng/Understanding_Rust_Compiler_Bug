{"sha": "dbeda5ee29ddfd9195f540860020afd1a628bde2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZWRhNWVlMjlkZGZkOTE5NWY1NDA4NjAwMjBhZmQxYTYyOGJkZTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-04T13:29:36Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-01T14:27:10Z"}, "message": "remove the `at_location` from Locations\n\nWe are not currently using it for anything; even polonius just uses\nthe `from_location`.", "tree": {"sha": "10cfb580dcfb6b5b32a6de1ed6dad8da656cb764", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10cfb580dcfb6b5b32a6de1ed6dad8da656cb764"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbeda5ee29ddfd9195f540860020afd1a628bde2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAls45L8ACgkQAXYLT59T\n8VQjqhAAoSlfQYjNcXfFBmm4oA/pIVcuEBaHLfl5k4j2OM+UBgfoKMB8NNWnps9w\nVs1AM7uERRQ+8kxiFT6sJdOC4cJNVsO+b9g+NM7F5saqUHFri+68m0lM54XikC8S\nGVIh5py9jfm98uxUFHbwLtRSe3PJU5ojstlavXmf/e74+PzSpzED204IZFZyqH6r\nbhTnL7PWaIyZ9FBLS4M2m0tJR/KhmSw2tvhSZo/i0g7ktEFDtqQYoD5p5lCTnDWu\nRN5LcbSck3qCwS9Lax9sgMl/zeggx0V3u+LgFMRi8+WUCP2edH0vL0xm7C4FcFGt\nTa47wQmquilF5HqwWx3x22qlxFSFq8hOrksO65GRUmW3LafQursU1dEDePR2dqVO\nrI/D63UuTKOAbo+y4RyvHAm2HhiPhRs6x735rQwgW68M3hU/b+gkIm43I8TYslHT\ncuCvMbcB5tyrPDp3VW6ITmCfFaf1vpn664/MhddaRmI12KrYj/lQkKXJREuWyqv3\n7ZcwiQtah/DdDphTevkFyYgZ6wF/cH0pXOuwuA4oJAYSYMc/Z95Kvazm/Av7WZuw\nX8Gst4jQVxrtSiCzi/l7k2XIBf5aOaeZCwFusDfOAzczgOxUJQGZUxX8uVwAnBcd\nWkb6UPfiqVOfKL/hIh1HpaZ2WBjg2DmNtL77jY4RTVdvsRDQvIw=\n=nxt2\n-----END PGP SIGNATURE-----", "payload": "tree 10cfb580dcfb6b5b32a6de1ed6dad8da656cb764\nparent 5ddda3f19551ce299af426756661f8dcdf3ccde6\nauthor Niko Matsakis <niko@alum.mit.edu> 1528118976 -0400\ncommitter David Wood <david@davidtw.co> 1530455230 +0100\n\nremove the `at_location` from Locations\n\nWe are not currently using it for anything; even polonius just uses\nthe `from_location`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbeda5ee29ddfd9195f540860020afd1a628bde2", "html_url": "https://github.com/rust-lang/rust/commit/dbeda5ee29ddfd9195f540860020afd1a628bde2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbeda5ee29ddfd9195f540860020afd1a628bde2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ddda3f19551ce299af426756661f8dcdf3ccde6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ddda3f19551ce299af426756661f8dcdf3ccde6", "html_url": "https://github.com/rust-lang/rust/commit/5ddda3f19551ce299af426756661f8dcdf3ccde6"}], "stats": {"total": 106, "additions": 20, "deletions": 86}, "files": [{"sha": "6e9574e2d5b73b8ed91aeabf6a3e6a19979e302f", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbeda5ee29ddfd9195f540860020afd1a628bde2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbeda5ee29ddfd9195f540860020afd1a628bde2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=dbeda5ee29ddfd9195f540860020afd1a628bde2", "patch": "@@ -315,7 +315,6 @@ impl<'cx, 'cg, 'gcx, 'tcx> ConstraintGeneration<'cx, 'cg, 'gcx, 'tcx> {\n                                 span,\n                                 ref_region.to_region_vid(),\n                                 borrow_region.to_region_vid(),\n-                                location.successor_within_block(),\n                             );\n \n                             if let Some(all_facts) = self.all_facts {"}, {"sha": "ac3ab961d0a15c25e62c87fba609dacefb498e61", "filename": "src/librustc_mir/borrow_check/nll/constraint_set.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbeda5ee29ddfd9195f540860020afd1a628bde2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbeda5ee29ddfd9195f540860020afd1a628bde2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs?ref=dbeda5ee29ddfd9195f540860020afd1a628bde2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::mir::Location;\n use rustc::ty::RegionVid;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n \n@@ -24,8 +23,8 @@ crate struct ConstraintSet {\n impl ConstraintSet {\n     pub fn push(&mut self, constraint: OutlivesConstraint) {\n         debug!(\n-            \"add_outlives({:?}: {:?} @ {:?}\",\n-            constraint.sup, constraint.sub, constraint.point\n+            \"add_outlives({:?}: {:?})\",\n+            constraint.sup, constraint.sub\n         );\n         if constraint.sup == constraint.sub {\n             // 'a: 'a is pretty uninteresting\n@@ -86,9 +85,6 @@ pub struct OutlivesConstraint {\n     /// Region that must be outlived.\n     pub sub: RegionVid,\n \n-    /// At this location.\n-    pub point: Location,\n-\n     /// Later on, we thread the constraints onto a linked list\n     /// grouped by their `sub` field. So if you had:\n     ///\n@@ -107,8 +103,8 @@ impl fmt::Debug for OutlivesConstraint {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         write!(\n             formatter,\n-            \"({:?}: {:?} @ {:?}) due to {:?}\",\n-            self.sup, self.sub, self.point, self.span\n+            \"({:?}: {:?}) due to {:?}\",\n+            self.sup, self.sub, self.span\n         )\n     }\n }"}, {"sha": "c68bb15552fc79e7f0f7b330fb332fcac3a2529c", "filename": "src/librustc_mir/borrow_check/nll/region_infer/dump_mir.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbeda5ee29ddfd9195f540860020afd1a628bde2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbeda5ee29ddfd9195f540860020afd1a628bde2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs?ref=dbeda5ee29ddfd9195f540860020afd1a628bde2", "patch": "@@ -82,15 +82,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             let OutlivesConstraint {\n                 sup,\n                 sub,\n-                point,\n                 span,\n                 next: _,\n             } = constraint;\n             with_msg(&format!(\n-                \"{:?}: {:?} @ {:?} due to {:?}\",\n+                \"{:?}: {:?} due to {:?}\",\n                 sup,\n                 sub,\n-                point,\n                 span\n             ))?;\n         }"}, {"sha": "15896413af99151d2b244476dd5b80b45d7f20c7", "filename": "src/librustc_mir/borrow_check/nll/region_infer/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbeda5ee29ddfd9195f540860020afd1a628bde2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbeda5ee29ddfd9195f540860020afd1a628bde2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs?ref=dbeda5ee29ddfd9195f540860020afd1a628bde2", "patch": "@@ -44,7 +44,7 @@ impl<'this, 'tcx> dot::Labeller<'this> for RegionInferenceContext<'tcx> {\n         dot::LabelText::LabelStr(format!(\"{:?}\", n).into_cow())\n     }\n     fn edge_label(&'this self, e: &OutlivesConstraint) -> dot::LabelText<'this> {\n-        dot::LabelText::LabelStr(format!(\"{:?}\", e.point).into_cow())\n+        dot::LabelText::LabelStr(format!(\"{:?}\", e.span).into_cow())\n     }\n }\n "}, {"sha": "fd8a62b4deb33a0991da5994cfae2c6308d5044b", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dbeda5ee29ddfd9195f540860020afd1a628bde2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbeda5ee29ddfd9195f540860020afd1a628bde2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=dbeda5ee29ddfd9195f540860020afd1a628bde2", "patch": "@@ -359,14 +359,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         span: Span,\n         sup: RegionVid,\n         sub: RegionVid,\n-        point: Location,\n     ) {\n         assert!(self.inferred_values.is_none(), \"values already inferred\");\n         self.constraints.push(OutlivesConstraint {\n             span,\n             sup,\n             sub,\n-            point,\n             next: None,\n         })\n     }\n@@ -503,7 +501,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         for type_test in &self.type_tests {\n             debug!(\"check_type_test: {:?}\", type_test);\n \n-            if self.eval_region_test(mir, type_test.point, type_test.lower_bound, &type_test.test) {\n+            if self.eval_region_test(mir, type_test.lower_bound, &type_test.test) {\n                 continue;\n             }\n \n@@ -765,31 +763,30 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn eval_region_test(\n         &self,\n         mir: &Mir<'tcx>,\n-        point: Location,\n         lower_bound: RegionVid,\n         test: &RegionTest,\n     ) -> bool {\n         debug!(\n-            \"eval_region_test(point={:?}, lower_bound={:?}, test={:?})\",\n-            point, lower_bound, test\n+            \"eval_region_test(lower_bound={:?}, test={:?})\",\n+            lower_bound, test\n         );\n \n         match test {\n             RegionTest::IsOutlivedByAllRegionsIn(regions) => regions\n                 .iter()\n-                .all(|&r| self.eval_outlives(mir, r, lower_bound, point)),\n+                .all(|&r| self.eval_outlives(mir, r, lower_bound)),\n \n             RegionTest::IsOutlivedByAnyRegionIn(regions) => regions\n                 .iter()\n-                .any(|&r| self.eval_outlives(mir, r, lower_bound, point)),\n+                .any(|&r| self.eval_outlives(mir, r, lower_bound)),\n \n             RegionTest::Any(tests) => tests\n                 .iter()\n-                .any(|test| self.eval_region_test(mir, point, lower_bound, test)),\n+                .any(|test| self.eval_region_test(mir, lower_bound, test)),\n \n             RegionTest::All(tests) => tests\n                 .iter()\n-                .all(|test| self.eval_region_test(mir, point, lower_bound, test)),\n+                .all(|test| self.eval_region_test(mir, lower_bound, test)),\n         }\n     }\n \n@@ -799,11 +796,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         _mir: &Mir<'tcx>,\n         sup_region: RegionVid,\n         sub_region: RegionVid,\n-        point: Location,\n     ) -> bool {\n         debug!(\n-            \"eval_outlives({:?}: {:?} @ {:?})\",\n-            sup_region, sub_region, point\n+            \"eval_outlives({:?}: {:?})\",\n+            sup_region, sub_region\n         );\n \n         let inferred_values = self"}, {"sha": "2ee74dc6095fa133307c94ee710b08a099fdf571", "filename": "src/librustc_mir/borrow_check/nll/type_check/constraint_conversion.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbeda5ee29ddfd9195f540860020afd1a628bde2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbeda5ee29ddfd9195f540860020afd1a628bde2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs?ref=dbeda5ee29ddfd9195f540860020afd1a628bde2", "patch": "@@ -146,7 +146,7 @@ impl<'a, 'gcx, 'tcx> ConstraintConversion<'a, 'gcx, 'tcx> {\n     ) -> TypeTest<'tcx> {\n         let lower_bound = self.to_region_vid(region);\n \n-        let point = self.locations.at_location().unwrap_or(Location::START);\n+        let point = self.locations.from_location().unwrap_or(Location::START);\n \n         let test = self.verify_bound_to_region_test(&bound);\n \n@@ -197,13 +197,11 @@ impl<'a, 'gcx, 'tcx> ConstraintConversion<'a, 'gcx, 'tcx> {\n \n     fn add_outlives(&mut self, sup: ty::RegionVid, sub: ty::RegionVid) {\n         let span = self.span();\n-        let point = self.locations.at_location().unwrap_or(Location::START);\n \n         self.outlives_constraints.push(OutlivesConstraint {\n             span,\n             sub,\n             sup,\n-            point,\n             next: None,\n         });\n     }"}, {"sha": "da12ce89f9d68cb76b28d6f7d63c9b83402f4c48", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 57, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/dbeda5ee29ddfd9195f540860020afd1a628bde2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbeda5ee29ddfd9195f540860020afd1a628bde2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=dbeda5ee29ddfd9195f540860020afd1a628bde2", "patch": "@@ -671,11 +671,6 @@ pub enum Locations {\n         /// This is intended for error reporting and diagnosis; the\n         /// constraints may *take effect* at a distinct spot.\n         from_location: Location,\n-\n-        /// The constraints must be met at this location. In terms of the\n-        /// NLL RFC, when you have a constraint `R1: R2 @ P`, this field\n-        /// is the `P` value.\n-        at_location: Location,\n     },\n }\n \n@@ -686,13 +681,6 @@ impl Locations {\n             Locations::Pair { from_location, .. } => Some(*from_location),\n         }\n     }\n-\n-    pub fn at_location(&self) -> Option<Location> {\n-        match self {\n-            Locations::All => None,\n-            Locations::Pair { at_location, .. } => Some(*at_location),\n-        }\n-    }\n }\n \n impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n@@ -799,9 +787,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             StatementKind::Assign(ref place, ref rv) => {\n                 let place_ty = place.ty(mir, tcx).to_ty(tcx);\n                 let rv_ty = rv.ty(mir, tcx);\n-                if let Err(terr) =\n-                    self.sub_types(rv_ty, place_ty, location.at_successor_within_block())\n-                {\n+                if let Err(terr) = self.sub_types(rv_ty, place_ty, location.at_self()) {\n                     span_mirbug!(\n                         self,\n                         stmt,\n@@ -897,15 +883,14 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             TerminatorKind::DropAndReplace {\n                 ref location,\n                 ref value,\n-                target,\n-                unwind,\n+                target: _,\n+                unwind: _,\n             } => {\n                 let place_ty = location.ty(mir, tcx).to_ty(tcx);\n                 let rv_ty = value.ty(mir, tcx);\n \n                 let locations = Locations::Pair {\n                     from_location: term_location,\n-                    at_location: target.start_location(),\n                 };\n                 if let Err(terr) = self.sub_types(rv_ty, place_ty, locations) {\n                     span_mirbug!(\n@@ -917,26 +902,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         terr\n                     );\n                 }\n-\n-                // Subtle: this assignment occurs at the start of\n-                // *both* blocks, so we need to ensure that it holds\n-                // at both locations.\n-                if let Some(unwind) = unwind {\n-                    let locations = Locations::Pair {\n-                        from_location: term_location,\n-                        at_location: unwind.start_location(),\n-                    };\n-                    if let Err(terr) = self.sub_types(rv_ty, place_ty, locations) {\n-                        span_mirbug!(\n-                            self,\n-                            term,\n-                            \"bad DropAndReplace ({:?} = {:?}): {:?}\",\n-                            place_ty,\n-                            rv_ty,\n-                            terr\n-                        );\n-                    }\n-                }\n             }\n             TerminatorKind::SwitchInt {\n                 ref discr,\n@@ -1052,11 +1017,10 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     ) {\n         let tcx = self.tcx();\n         match *destination {\n-            Some((ref dest, target_block)) => {\n+            Some((ref dest, _target_block)) => {\n                 let dest_ty = dest.ty(mir, tcx).to_ty(tcx);\n                 let locations = Locations::Pair {\n                     from_location: term_location,\n-                    at_location: target_block.start_location(),\n                 };\n                 if let Err(terr) = self.sub_types(sig.output(), dest_ty, locations) {\n                     span_mirbug!(\n@@ -1674,29 +1638,12 @@ trait AtLocation {\n     /// indicated by `self`. This is typically used when processing\n     /// \"inputs\" to the given location.\n     fn at_self(self) -> Locations;\n-\n-    /// Creates a `Locations` where `self` is the from-location and\n-    /// its successor within the block is the at-location. This means\n-    /// that any required region relationships must hold only upon\n-    /// **exiting** the statement/terminator indicated by `self`. This\n-    /// is for example used when you have a `place = rv` statement: it\n-    /// indicates that the `typeof(rv) <: typeof(place)` as of the\n-    /// **next** statement.\n-    fn at_successor_within_block(self) -> Locations;\n }\n \n impl AtLocation for Location {\n     fn at_self(self) -> Locations {\n         Locations::Pair {\n             from_location: self,\n-            at_location: self,\n-        }\n-    }\n-\n-    fn at_successor_within_block(self) -> Locations {\n-        Locations::Pair {\n-            from_location: self,\n-            at_location: self.successor_within_block(),\n         }\n     }\n }"}]}