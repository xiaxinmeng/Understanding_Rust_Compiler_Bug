{"sha": "93e3552d040edfa67cdedfe2fe4a44fe0c4ead59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZTM1NTJkMDQwZWRmYTY3Y2RlZGZlMmZlNGE0NGZlMGM0ZWFkNTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-31T13:02:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-22T07:19:08Z"}, "message": "also normalize constants when comparing types", "tree": {"sha": "b3a3b7bbc7e42c73a915832e644f14d87359a95d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3a3b7bbc7e42c73a915832e644f14d87359a95d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93e3552d040edfa67cdedfe2fe4a44fe0c4ead59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93e3552d040edfa67cdedfe2fe4a44fe0c4ead59", "html_url": "https://github.com/rust-lang/rust/commit/93e3552d040edfa67cdedfe2fe4a44fe0c4ead59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93e3552d040edfa67cdedfe2fe4a44fe0c4ead59/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50d7deac4de3bfde44a634ff4dabf3115f694c79", "url": "https://api.github.com/repos/rust-lang/rust/commits/50d7deac4de3bfde44a634ff4dabf3115f694c79", "html_url": "https://github.com/rust-lang/rust/commit/50d7deac4de3bfde44a634ff4dabf3115f694c79"}], "stats": {"total": 69, "additions": 36, "deletions": 33}, "files": [{"sha": "1a6ed41ba47e5cbec9eeb8e35c87193365309c92", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93e3552d040edfa67cdedfe2fe4a44fe0c4ead59/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e3552d040edfa67cdedfe2fe4a44fe0c4ead59/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=93e3552d040edfa67cdedfe2fe4a44fe0c4ead59", "patch": "@@ -239,6 +239,7 @@ pub(super) fn mir_assign_valid_types<'tcx>(\n     // 2. Subtyping is used. While all normal lifetimes are erased, higher-ranked types\n     //    with their late-bound lifetimes are still around and can lead to type differences.\n     // Normalize both of them away.\n+    // Also see the related but slightly different pre-monomorphization method in `transform/validate.rs`.\n     let normalize = |ty: Ty<'tcx>| {\n         ty.fold_with(&mut BottomUpFolder {\n             tcx,"}, {"sha": "14c67c2372c9f3edca2d1e008a2cde4da6de7cfd", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/93e3552d040edfa67cdedfe2fe4a44fe0c4ead59/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e3552d040edfa67cdedfe2fe4a44fe0c4ead59/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=93e3552d040edfa67cdedfe2fe4a44fe0c4ead59", "patch": "@@ -81,40 +81,42 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             self.fail(location, format!(\"encountered jump to invalid basic block {:?}\", bb))\n         }\n     }\n-}\n \n-/// Check if src can be assigned into dest.\n-/// This is not precise, it will accept some incorrect assignments.\n-fn mir_assign_valid_types<'tcx>(tcx: TyCtxt<'tcx>, src: Ty<'tcx>, dest: Ty<'tcx>) -> bool {\n-    if src == dest {\n-        // Equal types, all is good.\n-        return true;\n-    }\n+    /// Check if src can be assigned into dest.\n+    /// This is not precise, it will accept some incorrect assignments.\n+    fn mir_assign_valid_types(&self, src: Ty<'tcx>, dest: Ty<'tcx>) -> bool {\n+        if src == dest {\n+            // Equal types, all is good.\n+            return true;\n+        }\n \n-    // Type-changing assignments can happen for (at least) two reasons:\n-    // 1. `&mut T` -> `&T` gets optimized from a reborrow to a mere assignment.\n-    // 2. Subtyping is used. While all normal lifetimes are erased, higher-ranked types\n-    //    with their late-bound lifetimes are still around and can lead to type differences.\n-    // Normalize both of them away.\n-    // FIXME: Share this code with `interpret/eval_context.rs`.\n-    let normalize = |ty: Ty<'tcx>| {\n-        ty.fold_with(&mut BottomUpFolder {\n-            tcx,\n-            // Normalize all references to immutable.\n-            ty_op: |ty| match ty.kind {\n-                ty::Ref(_, pointee, _) => tcx.mk_imm_ref(tcx.lifetimes.re_erased, pointee),\n-                _ => ty,\n-            },\n-            // We just erase all late-bound lifetimes, but this is not fully correct (FIXME):\n-            // lifetimes in invariant positions could matter (e.g. through associated types).\n-            // But that just means we miss some potential incompatible types, it will not\n-            // lead to wrong errors.\n-            lt_op: |_| tcx.lifetimes.re_erased,\n-            // Leave consts unchanged.\n-            ct_op: |ct| ct,\n-        })\n-    };\n-    normalize(src) == normalize(dest)\n+        // Type-changing assignments can happen for (at least) two reasons:\n+        // 1. `&mut T` -> `&T` gets optimized from a reborrow to a mere assignment.\n+        // 2. Subtyping is used. While all normal lifetimes are erased, higher-ranked types\n+        //    with their late-bound lifetimes are still around and can lead to type differences.\n+        // Normalize both of them away.\n+        // Also see the related but slightly different post-monomorphization method in `interpret/eval_context.rs`.\n+        let normalize = |ty: Ty<'tcx>| {\n+            ty.fold_with(&mut BottomUpFolder {\n+                tcx: self.tcx,\n+                // Normalize all references to immutable.\n+                ty_op: |ty| match ty.kind {\n+                    ty::Ref(_, pointee, _) => {\n+                        self.tcx.mk_imm_ref(self.tcx.lifetimes.re_erased, pointee)\n+                    }\n+                    _ => ty,\n+                },\n+                // We just erase all late-bound lifetimes, but this is not fully correct (FIXME):\n+                // lifetimes in invariant positions could matter (e.g. through associated types).\n+                // But that just means we miss some potential incompatible types, it will not\n+                // lead to wrong errors.\n+                lt_op: |_| self.tcx.lifetimes.re_erased,\n+                // Evaluate consts.\n+                ct_op: |ct| ct.eval(self.tcx, self.param_env),\n+            })\n+        };\n+        normalize(src) == normalize(dest)\n+    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n@@ -138,7 +140,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                 // LHS and RHS of the assignment must have the same type.\n                 let left_ty = dest.ty(&self.body.local_decls, self.tcx).ty;\n                 let right_ty = rvalue.ty(&self.body.local_decls, self.tcx);\n-                if !mir_assign_valid_types(self.tcx, right_ty, left_ty) {\n+                if !self.mir_assign_valid_types(right_ty, left_ty) {\n                     self.fail(\n                         location,\n                         format!("}]}