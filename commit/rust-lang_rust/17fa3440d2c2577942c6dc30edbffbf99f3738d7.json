{"sha": "17fa3440d2c2577942c6dc30edbffbf99f3738d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZmEzNDQwZDJjMjU3Nzk0MmM2ZGMzMGVkYmZmYmY5OWYzNzM4ZDc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-06T02:24:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-06T02:24:20Z"}, "message": "Rollup merge of #70739 - Centril:fix-70736, r=petrochenkov\n\ndef_collector, visit_fn: account for no body\n\nFixes #70736\n\nr? @petrochenkov", "tree": {"sha": "30555936b2fd1f87610ebc42cb0572ad78f51890", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30555936b2fd1f87610ebc42cb0572ad78f51890"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17fa3440d2c2577942c6dc30edbffbf99f3738d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeipLUCRBK7hj4Ov3rIwAAdHIIAHggQp3PtcJ/LmBVBsdzU01E\ndzn4oLNTYh+BcR2pP3TAryAfIlF10gQbPcaYxMQ2ZIzjZri9yqSOvP4iV/NLSUCC\n7e4dPCf+Q6zHYzN5Wf47hgwK2iRE1ttG3qjtlKVkG9Pj73mTq/p6JOjUjPIUy9Ml\ngUlVR+5PCJpLTrGE+tm2FlOANF8JiIREB60kGhLqu6by13ZuoMsSTInwXKaNgP0u\nMN3e8oTiXg8v1VymWu1BEykWhTP6ykrsXy0c/S1ap49nPXlPNFfM3bj4BrUyJ5VC\n25oG/R/Y2OrUxP/ZDF196L4zsRV4Fz3n4YDidIX1mwW6lsMfv/T62vtyyRbEbRA=\n=jj5z\n-----END PGP SIGNATURE-----\n", "payload": "tree 30555936b2fd1f87610ebc42cb0572ad78f51890\nparent 4911d168d887f56b33414a8f3cd4d2384047dcaa\nparent 5a7ad49620a87213c003989e6b95c6c1d1991a49\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1586139860 +0200\ncommitter GitHub <noreply@github.com> 1586139860 +0200\n\nRollup merge of #70739 - Centril:fix-70736, r=petrochenkov\n\ndef_collector, visit_fn: account for no body\n\nFixes #70736\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17fa3440d2c2577942c6dc30edbffbf99f3738d7", "html_url": "https://github.com/rust-lang/rust/commit/17fa3440d2c2577942c6dc30edbffbf99f3738d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17fa3440d2c2577942c6dc30edbffbf99f3738d7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4911d168d887f56b33414a8f3cd4d2384047dcaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/4911d168d887f56b33414a8f3cd4d2384047dcaa", "html_url": "https://github.com/rust-lang/rust/commit/4911d168d887f56b33414a8f3cd4d2384047dcaa"}, {"sha": "5a7ad49620a87213c003989e6b95c6c1d1991a49", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7ad49620a87213c003989e6b95c6c1d1991a49", "html_url": "https://github.com/rust-lang/rust/commit/5a7ad49620a87213c003989e6b95c6c1d1991a49"}], "stats": {"total": 92, "additions": 88, "deletions": 4}, "files": [{"sha": "71cedb208fcf283edd49328fb6be8016c891bf54", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/17fa3440d2c2577942c6dc30edbffbf99f3738d7/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17fa3440d2c2577942c6dc30edbffbf99f3738d7/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=17fa3440d2c2577942c6dc30edbffbf99f3738d7", "patch": "@@ -2,6 +2,7 @@ use log::debug;\n use rustc_ast::ast::*;\n use rustc_ast::token::{self, Token};\n use rustc_ast::visit::{self, FnKind};\n+use rustc_ast::walk_list;\n use rustc_expand::expand::AstFragment;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::definitions::*;\n@@ -117,10 +118,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 // we must mirror everything that `visit::walk_fn` below does.\n                 self.visit_fn_header(&sig.header);\n                 visit::walk_fn_decl(self, &sig.decl);\n-                if let Some(body) = body {\n-                    let closure_def = self.create_def(closure_id, DefPathData::ClosureExpr, span);\n-                    self.with_parent(closure_def, |this| this.visit_block(body));\n-                }\n+                let closure_def = self.create_def(closure_id, DefPathData::ClosureExpr, span);\n+                self.with_parent(closure_def, |this| walk_list!(this, visit_block, body));\n                 return;\n             }\n         }"}, {"sha": "cc36f054bc3a0c3ca9b2a4f170d708537d9c8e0d", "filename": "src/test/ui/resolve/issue-70736-async-fn-no-body-def-collector.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/17fa3440d2c2577942c6dc30edbffbf99f3738d7/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17fa3440d2c2577942c6dc30edbffbf99f3738d7/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.rs?ref=17fa3440d2c2577942c6dc30edbffbf99f3738d7", "patch": "@@ -0,0 +1,20 @@\n+// edition:2018\n+\n+async fn free(); //~ ERROR without a body\n+\n+struct A;\n+impl A {\n+    async fn inherent(); //~ ERROR without body\n+}\n+\n+trait B {\n+    async fn associated();\n+    //~^ ERROR cannot be declared `async`\n+}\n+impl B for A {\n+    async fn associated(); //~ ERROR without body\n+    //~^ ERROR cannot be declared `async`\n+    //~| ERROR incompatible type for trait\n+}\n+\n+fn main() {}"}, {"sha": "a324d04d394cfe708dbc03876d3465a77325ef74", "filename": "src/test/ui/resolve/issue-70736-async-fn-no-body-def-collector.stderr", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/17fa3440d2c2577942c6dc30edbffbf99f3738d7/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17fa3440d2c2577942c6dc30edbffbf99f3738d7/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr?ref=17fa3440d2c2577942c6dc30edbffbf99f3738d7", "patch": "@@ -0,0 +1,65 @@\n+error: free function without a body\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:3:1\n+   |\n+LL | async fn free();\n+   | ^^^^^^^^^^^^^^^-\n+   |                |\n+   |                help: provide a definition for the function: `{ <body> }`\n+\n+error: associated function in `impl` without body\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:7:5\n+   |\n+LL |     async fn inherent();\n+   |     ^^^^^^^^^^^^^^^^^^^-\n+   |                        |\n+   |                        help: provide a definition for the function: `{ <body> }`\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:11:5\n+   |\n+LL |     async fn associated();\n+   |     -----^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+\n+error: associated function in `impl` without body\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:5\n+   |\n+LL |     async fn associated();\n+   |     ^^^^^^^^^^^^^^^^^^^^^-\n+   |                          |\n+   |                          help: provide a definition for the function: `{ <body> }`\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:5\n+   |\n+LL |     async fn associated();\n+   |     -----^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+\n+error[E0053]: method `associated` has an incompatible type for trait\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:26\n+   |\n+LL |     async fn associated();\n+   |                          - type in trait\n+...\n+LL |     async fn associated();\n+   |                          ^\n+   |                          |\n+   |                          the `Output` of this `async fn`'s found opaque type\n+   |                          expected `()`, found opaque type\n+   |\n+   = note: expected fn pointer `fn()`\n+              found fn pointer `fn() -> impl std::future::Future`\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0053, E0706.\n+For more information about an error, try `rustc --explain E0053`."}]}