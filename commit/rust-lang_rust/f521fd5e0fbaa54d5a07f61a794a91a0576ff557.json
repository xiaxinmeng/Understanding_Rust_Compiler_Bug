{"sha": "f521fd5e0fbaa54d5a07f61a794a91a0576ff557", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MjFmZDVlMGZiYWE1NGQ1YTA3ZjYxYTc5NGE5MWEwNTc2ZmY1NTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-13T13:49:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-15T20:22:05Z"}, "message": "let's call this a redundant reborrow", "tree": {"sha": "501bb62ac7b313ced722178f706f4a69cbf21ed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/501bb62ac7b313ced722178f706f4a69cbf21ed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f521fd5e0fbaa54d5a07f61a794a91a0576ff557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f521fd5e0fbaa54d5a07f61a794a91a0576ff557", "html_url": "https://github.com/rust-lang/rust/commit/f521fd5e0fbaa54d5a07f61a794a91a0576ff557", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f521fd5e0fbaa54d5a07f61a794a91a0576ff557/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c234009fddf3a58c486a06f1c40980149df114f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c234009fddf3a58c486a06f1c40980149df114f7", "html_url": "https://github.com/rust-lang/rust/commit/c234009fddf3a58c486a06f1c40980149df114f7"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "8c409030164d30d98a69fc1b540d351b94cbe091", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f521fd5e0fbaa54d5a07f61a794a91a0576ff557/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f521fd5e0fbaa54d5a07f61a794a91a0576ff557/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=f521fd5e0fbaa54d5a07f61a794a91a0576ff557", "patch": "@@ -337,17 +337,17 @@ impl<'tcx> Stacks {\n             // the stack than the one we come from, just use that.\n             // IOW, we check if `new_bor` *already* is \"derived from\" `ptr.tag`.\n             // This also checks frozenness, if required.\n-            let bor_already_happened = match (ptr_idx, stack.deref(new_bor, new_kind)) {\n+            let bor_redundant = match (ptr_idx, stack.deref(new_bor, new_kind)) {\n                 // If the new borrow works with the frozen item, or else if it lives\n                 // above the old one in the stack, our job here is done.\n                 (_, Ok(None)) => true,\n                 (Some(ptr_idx), Ok(Some(new_idx))) if new_idx >= ptr_idx => true,\n                 // Otherwise we need to create a new borrow.\n                 _ => false,\n             };\n-            if bor_already_happened {\n+            if bor_redundant {\n                 assert!(new_bor.is_shared(), \"A unique reborrow can never be redundant\");\n-                trace!(\"Reborrow is a NOP\");\n+                trace!(\"reborrow is redundant\");\n                 continue;\n             }\n             // We need to do some actual work."}]}