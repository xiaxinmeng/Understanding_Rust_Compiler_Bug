{"sha": "8d77c7c03770ffa142a91a67a9fd89f76a837f13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNzdjN2MwMzc3MGZmYTE0MmE5MWE2N2E5ZmQ4OWY3NmE4MzdmMTM=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2018-12-27T09:23:15Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2018-12-27T09:25:45Z"}, "message": "retrieve ty info from place_ty\ndescribe index with _", "tree": {"sha": "3b9dbf07c7ba7d8d5d303fab253a5d9462557841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b9dbf07c7ba7d8d5d303fab253a5d9462557841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d77c7c03770ffa142a91a67a9fd89f76a837f13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d77c7c03770ffa142a91a67a9fd89f76a837f13", "html_url": "https://github.com/rust-lang/rust/commit/8d77c7c03770ffa142a91a67a9fd89f76a837f13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d77c7c03770ffa142a91a67a9fd89f76a837f13/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39bc8f5899d1106a785a62a1fcc103e999edf046", "url": "https://api.github.com/repos/rust-lang/rust/commits/39bc8f5899d1106a785a62a1fcc103e999edf046", "html_url": "https://github.com/rust-lang/rust/commit/39bc8f5899d1106a785a62a1fcc103e999edf046"}], "stats": {"total": 86, "additions": 34, "deletions": 52}, "files": [{"sha": "6a5b5d172bbe42d994f01efc79070c4bea7ff3c1", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 29, "deletions": 47, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8d77c7c03770ffa142a91a67a9fd89f76a837f13/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d77c7c03770ffa142a91a67a9fd89f76a837f13/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=8d77c7c03770ffa142a91a67a9fd89f76a837f13", "patch": "@@ -181,38 +181,36 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 );\n             }\n \n-            if let Some(ty) = self.retrieve_type_for_place(used_place) {\n-                let needs_note = match ty.sty {\n-                    ty::Closure(id, _) => {\n-                        let tables = self.infcx.tcx.typeck_tables_of(id);\n-                        let node_id = self.infcx.tcx.hir().as_local_node_id(id).unwrap();\n-                        let hir_id = self.infcx.tcx.hir().node_to_hir_id(node_id);\n-\n-                        tables.closure_kind_origins().get(hir_id).is_none()\n-                    }\n-                    _ => true,\n-                };\n+            let ty = used_place.ty(self.mir, self.infcx.tcx).to_ty(self.infcx.tcx);\n+            let needs_note = match ty.sty {\n+                ty::Closure(id, _) => {\n+                    let tables = self.infcx.tcx.typeck_tables_of(id);\n+                    let node_id = self.infcx.tcx.hir().as_local_node_id(id).unwrap();\n+                    let hir_id = self.infcx.tcx.hir().node_to_hir_id(node_id);\n \n-                if needs_note {\n-                    let mpi = self.move_data.moves[move_out_indices[0]].path;\n-                    let place = &self.move_data.move_paths[mpi].place;\n-\n-                    if let Some(ty) = self.retrieve_type_for_place(place) {\n-                        let note_msg = match self.describe_place_with_options(\n-                            place,\n-                            IncludingDowncast(true),\n-                        ) {\n-                            Some(name) => format!(\"`{}`\", name),\n-                            None => \"value\".to_owned(),\n-                        };\n-\n-                        err.note(&format!(\n-                            \"move occurs because {} has type `{}`, \\\n-                             which does not implement the `Copy` trait\",\n-                            note_msg, ty\n-                        ));\n-                    }\n+                    tables.closure_kind_origins().get(hir_id).is_none()\n                 }\n+                _ => true,\n+            };\n+\n+            if needs_note {\n+                let mpi = self.move_data.moves[move_out_indices[0]].path;\n+                let place = &self.move_data.move_paths[mpi].place;\n+\n+                let ty = place.ty(self.mir, self.infcx.tcx).to_ty(self.infcx.tcx);\n+                let note_msg = match self.describe_place_with_options(\n+                    place,\n+                    IncludingDowncast(true),\n+                ) {\n+                    Some(name) => format!(\"`{}`\", name),\n+                    None => \"value\".to_owned(),\n+                };\n+\n+                err.note(&format!(\n+                    \"move occurs because {} has type `{}`, \\\n+                     which does not implement the `Copy` trait\",\n+                    note_msg, ty\n+                ));\n             }\n \n             if let Some((_, mut old_err)) = self.move_error_reported\n@@ -1558,7 +1556,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         )?;\n                         buf.push_str(\"[\");\n                         if self.append_local_to_string(index, buf).is_err() {\n-                            buf.push_str(\"..\");\n+                            buf.push_str(\"_\");\n                         }\n                         buf.push_str(\"]\");\n                     }\n@@ -1663,22 +1661,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Retrieve type of a place for the current MIR representation\n-    fn retrieve_type_for_place(&self, place: &Place<'tcx>) -> Option<ty::Ty> {\n-        match place {\n-            Place::Local(local) => {\n-                let local = &self.mir.local_decls[*local];\n-                Some(local.ty)\n-            }\n-            Place::Promoted(ref prom) => Some(prom.1),\n-            Place::Static(ref st) => Some(st.ty),\n-            Place::Projection(ref proj) => match proj.elem {\n-                ProjectionElem::Field(_, ty) => Some(ty),\n-                _ => None,\n-            },\n-        }\n-    }\n-\n     /// Check if a place is a thread-local static.\n     pub fn is_place_thread_local(&self, place: &Place<'tcx>) -> bool {\n         if let Place::Static(statik) = place {"}, {"sha": "eb622ac10addf0abfccd917b86463b5b0af4ca9a", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d77c7c03770ffa142a91a67a9fd89f76a837f13/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d77c7c03770ffa142a91a67a9fd89f76a837f13/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs?ref=8d77c7c03770ffa142a91a67a9fd89f76a837f13", "patch": "@@ -260,7 +260,7 @@ fn main() {\n         let x = &mut v;\n         v[0].y;\n         //[ast]~^ ERROR cannot use `v[..].y` because it was mutably borrowed\n-        //[mir]~^^ ERROR cannot use `v[..].y` because it was mutably borrowed\n+        //[mir]~^^ ERROR cannot use `v[_].y` because it was mutably borrowed\n         //[mir]~| ERROR cannot use `*v` because it was mutably borrowed\n         drop(x);\n     }"}, {"sha": "e14ecd90d56fb52e66ac31869739c026925704e9", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d77c7c03770ffa142a91a67a9fd89f76a837f13/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d77c7c03770ffa142a91a67a9fd89f76a837f13/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs?ref=8d77c7c03770ffa142a91a67a9fd89f76a837f13", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     println!(\"t[0]: {}\", t[0]);\n     a[2] = 0; //[ast]~ ERROR cannot assign to `a[..]` because it is borrowed\n               //[cmp]~^ ERROR cannot assign to `a[..]` because it is borrowed (Ast)\n-              //[cmp]~| ERROR cannot assign to `a[..]` because it is borrowed (Mir)\n+              //[cmp]~| ERROR cannot assign to `a[_]` because it is borrowed (Mir)\n     println!(\"t[0]: {}\", t[0]);\n     t[0];\n }"}, {"sha": "23f7f6c265e2f19d176987887d3bd4692fcea37d", "filename": "src/test/ui/nll/drop-no-may-dangle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d77c7c03770ffa142a91a67a9fd89f76a837f13/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d77c7c03770ffa142a91a67a9fd89f76a837f13/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.rs?ref=8d77c7c03770ffa142a91a67a9fd89f76a837f13", "patch": "@@ -17,10 +17,10 @@ fn main() {\n         use_x(*p.value);\n     } else {\n         use_x(22);\n-        v[0] += 1; //~ ERROR cannot assign to `v[..]` because it is borrowed\n+        v[0] += 1; //~ ERROR cannot assign to `v[_]` because it is borrowed\n     }\n \n-    v[0] += 1; //~ ERROR cannot assign to `v[..]` because it is borrowed\n+    v[0] += 1; //~ ERROR cannot assign to `v[_]` because it is borrowed\n }\n \n struct WrapMayNotDangle<T> {"}, {"sha": "a6f6c45573d0ac80c83875887118535275bfc077", "filename": "src/test/ui/use/use-after-move-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d77c7c03770ffa142a91a67a9fd89f76a837f13/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d77c7c03770ffa142a91a67a9fd89f76a837f13/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.rs?ref=8d77c7c03770ffa142a91a67a9fd89f76a837f13", "patch": "@@ -7,7 +7,7 @@ struct S {\n impl S {\n     pub fn foo(self) -> isize {\n         self.bar();\n-        return *self.x;  //~ ERROR use of moved value: `*self.x`\n+        return *self.x;  //~ ERROR use of moved value: `self`\n     }\n \n     pub fn bar(self) {}"}]}