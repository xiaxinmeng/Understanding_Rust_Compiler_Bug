{"sha": "9285a61413c8872e912ad7fbb147db0d098afc0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyODVhNjE0MTNjODg3MmU5MTJhZDdmYmIxNDdkYjBkMDk4YWZjMGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-07-28T20:09:33Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-07-28T20:24:28Z"}, "message": "Remove `IsGenerator` in favor of a boolean\n\nNo need to be mixed!", "tree": {"sha": "54767b2e93a46be23f5ea1c6413cfb57e0205bd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54767b2e93a46be23f5ea1c6413cfb57e0205bd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9285a61413c8872e912ad7fbb147db0d098afc0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9285a61413c8872e912ad7fbb147db0d098afc0b", "html_url": "https://github.com/rust-lang/rust/commit/9285a61413c8872e912ad7fbb147db0d098afc0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9285a61413c8872e912ad7fbb147db0d098afc0b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06ce77cb39318936dd625c99a41ad03f99bae51c", "url": "https://api.github.com/repos/rust-lang/rust/commits/06ce77cb39318936dd625c99a41ad03f99bae51c", "html_url": "https://github.com/rust-lang/rust/commit/06ce77cb39318936dd625c99a41ad03f99bae51c"}], "stats": {"total": 48, "additions": 19, "deletions": 29}, "files": [{"sha": "cd2bb32bbf866514d6264ffae96afdb4a2c4c693", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9285a61413c8872e912ad7fbb147db0d098afc0b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285a61413c8872e912ad7fbb147db0d098afc0b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9285a61413c8872e912ad7fbb147db0d098afc0b", "patch": "@@ -92,7 +92,7 @@ pub struct LoweringContext<'a> {\n     trait_impls: BTreeMap<DefId, Vec<NodeId>>,\n     trait_default_impl: BTreeMap<DefId, NodeId>,\n \n-    is_generator: hir::IsGenerator,\n+    is_generator: bool,\n \n     catch_scopes: Vec<NodeId>,\n     loop_scopes: Vec<NodeId>,\n@@ -146,7 +146,7 @@ pub fn lower_crate(sess: &Session,\n         current_hir_id_owner: vec![(CRATE_DEF_INDEX, 0)],\n         item_local_id_counters: NodeMap(),\n         node_id_to_hir_id: IndexVec::new(),\n-        is_generator: hir::IsGenerator::No,\n+        is_generator: false,\n     }.lower_crate(krate)\n }\n \n@@ -371,7 +371,7 @@ impl<'a> LoweringContext<'a> {\n             arguments: decl.map_or(hir_vec![], |decl| {\n                 decl.inputs.iter().map(|x| self.lower_arg(x)).collect()\n             }),\n-            is_generator: self.is_generator == hir::IsGenerator::Yes,\n+            is_generator: self.is_generator,\n             value,\n         };\n         let id = body.id();\n@@ -432,7 +432,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_body<F>(&mut self, decl: Option<&FnDecl>, f: F) -> hir::BodyId\n         where F: FnOnce(&mut LoweringContext) -> hir::Expr\n     {\n-        let prev = mem::replace(&mut self.is_generator, hir::IsGenerator::No);\n+        let prev = mem::replace(&mut self.is_generator, false);\n         let result = f(self);\n         let r = self.record_body(result, decl);\n         self.is_generator = prev;\n@@ -1940,13 +1940,13 @@ impl<'a> LoweringContext<'a> {\n             ExprKind::Closure(capture_clause, ref decl, ref body, fn_decl_span) => {\n                 self.with_new_scopes(|this| {\n                     this.with_parent_def(e.id, |this| {\n-                        let mut gen = hir::IsGenerator::No;\n+                        let mut is_generator = false;\n                         let body_id = this.lower_body(Some(decl), |this| {\n                             let e = this.lower_expr(body);\n-                            gen = this.is_generator;\n+                            is_generator = this.is_generator;\n                             e\n                         });\n-                        if gen == hir::IsGenerator::Yes && !decl.inputs.is_empty() {\n+                        if is_generator && !decl.inputs.is_empty() {\n                             span_err!(this.sess, fn_decl_span, E0625,\n                                       \"generators cannot have explicit arguments\");\n                             this.sess.abort_if_errors();\n@@ -1955,7 +1955,7 @@ impl<'a> LoweringContext<'a> {\n                                          this.lower_fn_decl(decl),\n                                          body_id,\n                                          fn_decl_span,\n-                                         gen)\n+                                         is_generator)\n                     })\n                 })\n             }\n@@ -2092,7 +2092,7 @@ impl<'a> LoweringContext<'a> {\n             }\n \n             ExprKind::Yield(ref opt_expr) => {\n-                self.is_generator = hir::IsGenerator::Yes;\n+                self.is_generator = true;\n                 let expr = opt_expr.as_ref().map(|x| self.lower_expr(x)).unwrap_or_else(|| {\n                     self.expr(e.span, hir::ExprTup(hir_vec![]), ThinVec::new())\n                 });"}, {"sha": "d1cc6b5d3e4a6672d93d2aea176aa32f4525cc19", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9285a61413c8872e912ad7fbb147db0d098afc0b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285a61413c8872e912ad7fbb147db0d098afc0b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=9285a61413c8872e912ad7fbb147db0d098afc0b", "patch": "@@ -1013,8 +1013,9 @@ pub enum Expr_ {\n     ///\n     /// The final span is the span of the argument block `|...|`\n     ///\n-    /// This may also be a generator literal, in that case there is an GeneratorClause.\n-    ExprClosure(CaptureClause, P<FnDecl>, BodyId, Span, IsGenerator),\n+    /// This may also be a generator literal, indicated by the final boolean,\n+    /// in that case there is an GeneratorClause.\n+    ExprClosure(CaptureClause, P<FnDecl>, BodyId, Span, bool),\n     /// A block (`{ ... }`)\n     ExprBlock(P<Block>),\n \n@@ -1190,12 +1191,6 @@ pub struct Destination {\n     pub target_id: ScopeTarget,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum IsGenerator {\n-    Yes,\n-    No,\n-}\n-\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum CaptureClause {\n     CaptureByValue,"}, {"sha": "140c9c6ae9a1b02947ab7de1299d8704b7d321ce", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9285a61413c8872e912ad7fbb147db0d098afc0b/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285a61413c8872e912ad7fbb147db0d098afc0b/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=9285a61413c8872e912ad7fbb147db0d098afc0b", "patch": "@@ -688,11 +688,6 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for hir::M\n     }\n }\n \n-impl_stable_hash_for!(enum hir::IsGenerator {\n-    Yes,\n-    No\n-});\n-\n impl_stable_hash_for!(enum hir::CaptureClause {\n     CaptureByValue,\n     CaptureByRef"}, {"sha": "903d70add6ffdc3f346657127be7821a0df0d6b2", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285a61413c8872e912ad7fbb147db0d098afc0b/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285a61413c8872e912ad7fbb147db0d098afc0b/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=9285a61413c8872e912ad7fbb147db0d098afc0b", "patch": "@@ -560,7 +560,7 @@ macro_rules! make_mir_visitor {\n                             AggregateKind::Generator(ref $($mutability)* def_id,\n                                                    ref $($mutability)* closure_substs) => {\n                                 self.visit_def_id(def_id, location);\n-                                self.visit_closure_substs(closure_substs);\n+                                self.visit_closure_substs(closure_substs, location);\n                             }\n                         }\n "}, {"sha": "9b3585fff58b399d1ede5ff1fec720f99f4e8f6a", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9285a61413c8872e912ad7fbb147db0d098afc0b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285a61413c8872e912ad7fbb147db0d098afc0b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=9285a61413c8872e912ad7fbb147db0d098afc0b", "patch": "@@ -428,7 +428,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             }\n         }\n \n-        hir::ExprClosure(.., gen) => {\n+        hir::ExprClosure(.., is_generator) => {\n             let closure_ty = cx.tables().expr_ty(expr);\n             let (def_id, substs) = match closure_ty.sty {\n                 ty::TyClosure(def_id, substs) |\n@@ -447,7 +447,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 closure_id: def_id,\n                 substs: substs,\n                 upvars: upvars,\n-                generator: gen == hir::IsGenerator::Yes,\n+                generator: is_generator,\n             }\n         }\n "}, {"sha": "70325ee3a933346893bd285c6dcb2fac7f196338", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9285a61413c8872e912ad7fbb147db0d098afc0b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285a61413c8872e912ad7fbb147db0d098afc0b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=9285a61413c8872e912ad7fbb147db0d098afc0b", "patch": "@@ -75,11 +75,11 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for InferBorrowKindVisitor<'a, 'gcx, 'tcx> {\n \n     fn visit_expr(&mut self, expr: &'gcx hir::Expr) {\n         match expr.node {\n-            hir::ExprClosure(cc, _, body_id, _, gen) => {\n+            hir::ExprClosure(cc, _, body_id, _, is_generator) => {\n                 let body = self.fcx.tcx.hir.body(body_id);\n                 self.visit_body(body);\n                 self.fcx.analyze_closure(expr.id, expr.span, body, cc,\n-                                         gen == hir::IsGenerator::Yes);\n+                                         is_generator);\n             }\n \n             _ => { }"}, {"sha": "d1ba9fd091827c84266aa790dee61cbd69587349", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9285a61413c8872e912ad7fbb147db0d098afc0b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285a61413c8872e912ad7fbb147db0d098afc0b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9285a61413c8872e912ad7fbb147db0d098afc0b", "patch": "@@ -1155,8 +1155,8 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         NodeField(field) => icx.to_ty(&field.ty),\n \n-        NodeExpr(&hir::Expr { node: hir::ExprClosure(.., gen), .. }) => {\n-            if gen == hir::IsGenerator::Yes {\n+        NodeExpr(&hir::Expr { node: hir::ExprClosure(.., is_generator), .. }) => {\n+            if is_generator {\n                 return tcx.typeck_tables_of(def_id).node_id_to_type(node_id);\n             }\n "}]}