{"sha": "5a16ef4936d7174df232c7b17fc92b3060e22c3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMTZlZjQ5MzZkNzE3NGRmMjMyYzdiMTdmYzkyYjMwNjBlMjJjM2E=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-10-04T10:34:35Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-10-04T10:48:36Z"}, "message": "Made `move_paths::MoveError` take span param in `cannot_move_out_of` ctor.\n\nImplicitly threaded `Location` through MoveData construction via a\n`Gatherer` struct (so that we could look up the span corresponding to\nthe location when we need to signal an error).", "tree": {"sha": "d3bf057fbcfb0041087757585c4e5544ea923c2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3bf057fbcfb0041087757585c4e5544ea923c2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a16ef4936d7174df232c7b17fc92b3060e22c3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a16ef4936d7174df232c7b17fc92b3060e22c3a", "html_url": "https://github.com/rust-lang/rust/commit/5a16ef4936d7174df232c7b17fc92b3060e22c3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a16ef4936d7174df232c7b17fc92b3060e22c3a/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "117586e6e9c7d31a3857800742728dac91b7c4fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/117586e6e9c7d31a3857800742728dac91b7c4fe", "html_url": "https://github.com/rust-lang/rust/commit/117586e6e9c7d31a3857800742728dac91b7c4fe"}], "stats": {"total": 127, "additions": 79, "deletions": 48}, "files": [{"sha": "0790d937cebf014df686036a22f07ea2c78658e4", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 76, "deletions": 45, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/5a16ef4936d7174df232c7b17fc92b3060e22c3a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a16ef4936d7174df232c7b17fc92b3060e22c3a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=5a16ef4936d7174df232c7b17fc92b3060e22c3a", "patch": "@@ -84,7 +84,9 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n         assert_eq!(path_map_ent, move_path);\n         move_path\n     }\n+}\n \n+impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n     /// This creates a MovePath for a given lvalue, returning an `MovePathError`\n     /// if that lvalue can't be moved from.\n     ///\n@@ -97,8 +99,11 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n     {\n         debug!(\"lookup({:?})\", lval);\n         match *lval {\n-            Lvalue::Local(local) => Ok(self.data.rev_lookup.locals[local]),\n-            Lvalue::Static(..) => Err(MoveError::cannot_move_out_of(Static)),\n+            Lvalue::Local(local) => Ok(self.builder.data.rev_lookup.locals[local]),\n+            Lvalue::Static(..) => {\n+                let span = self.builder.mir.source_info(self.loc).span;\n+                Err(MoveError::cannot_move_out_of(span, Static))\n+            }\n             Lvalue::Projection(ref proj) => {\n                 self.move_path_for_projection(lval, proj)\n             }\n@@ -117,41 +122,49 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n                                 -> Result<MovePathIndex, MoveError<'tcx>>\n     {\n         let base = try!(self.move_path_for(&proj.base));\n-        let lv_ty = proj.base.ty(self.mir, self.tcx).to_ty(self.tcx);\n+        let mir = self.builder.mir;\n+        let tcx = self.builder.tcx;\n+        let lv_ty = proj.base.ty(mir, tcx).to_ty(tcx);\n         match lv_ty.sty {\n             ty::TyRef(..) | ty::TyRawPtr(..) =>\n-                return Err(MoveError::cannot_move_out_of(BorrowedContent)),\n-            ty::TyAdt(adt, _) if adt.has_dtor(self.tcx) && !adt.is_box() =>\n-                return Err(MoveError::cannot_move_out_of(InteriorOfTypeWithDestructor {\n+                return Err(MoveError::cannot_move_out_of(mir.source_info(self.loc).span,\n+                                                         BorrowedContent)),\n+            ty::TyAdt(adt, _) if adt.has_dtor(tcx) && !adt.is_box() =>\n+                return Err(MoveError::cannot_move_out_of(mir.source_info(self.loc).span,\n+                                                         InteriorOfTypeWithDestructor {\n                     container_ty: lv_ty\n                 })),\n             // move out of union - always move the entire union\n             ty::TyAdt(adt, _) if adt.is_union() =>\n                 return Err(MoveError::UnionMove { path: base }),\n             ty::TySlice(elem_ty) =>\n-                return Err(MoveError::cannot_move_out_of(InteriorOfSlice {\n-                    elem_ty, is_index: match proj.elem {\n-                        ProjectionElem::Index(..) => true,\n-                        _ => false\n-                    },\n-                })),\n+                return Err(MoveError::cannot_move_out_of(\n+                    mir.source_info(self.loc).span,\n+                    InteriorOfSlice {\n+                        elem_ty, is_index: match proj.elem {\n+                            ProjectionElem::Index(..) => true,\n+                            _ => false\n+                        },\n+                    })),\n             ty::TyArray(elem_ty, _num_elems) => match proj.elem {\n                 ProjectionElem::Index(..) =>\n-                    return Err(MoveError::cannot_move_out_of(InteriorOfArray {\n-                        elem_ty, is_index: true\n-                    })),\n+                    return Err(MoveError::cannot_move_out_of(\n+                        mir.source_info(self.loc).span,\n+                        InteriorOfArray {\n+                            elem_ty, is_index: true\n+                        })),\n                 _ => {\n                     // FIXME: still badly broken\n                 }\n             },\n             _ => {}\n         };\n-        match self.data.rev_lookup.projections.entry((base, proj.elem.lift())) {\n+        match self.builder.data.rev_lookup.projections.entry((base, proj.elem.lift())) {\n             Entry::Occupied(ent) => Ok(*ent.get()),\n             Entry::Vacant(ent) => {\n-                let path = Self::new_move_path(\n-                    &mut self.data.move_paths,\n-                    &mut self.data.path_map,\n+                let path = MoveDataBuilder::new_move_path(\n+                    &mut self.builder.data.move_paths,\n+                    &mut self.builder.data.path_map,\n                     Some(base),\n                     lval.clone()\n                 );\n@@ -160,7 +173,9 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n             }\n         }\n     }\n+}\n \n+impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n     fn finalize(self) -> Result<MoveData<'tcx>, (MoveData<'tcx>, Vec<MoveError<'tcx>>)> {\n         debug!(\"{}\", {\n             debug!(\"moves for {:?}:\", self.mir.span);\n@@ -208,6 +223,22 @@ pub(super) fn gather_moves<'a, 'tcx>(mir: &Mir<'tcx>,\n impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n     fn gather_statement(&mut self, loc: Location, stmt: &Statement<'tcx>) {\n         debug!(\"gather_statement({:?}, {:?})\", loc, stmt);\n+        (Gatherer { builder: self, loc }).gather_statement(stmt);\n+    }\n+\n+    fn gather_terminator(&mut self, loc: Location, term: &Terminator<'tcx>) {\n+        debug!(\"gather_terminator({:?}, {:?})\", loc, term);\n+        (Gatherer { builder: self, loc }).gather_terminator(term);\n+    }\n+}\n+\n+struct Gatherer<'b, 'a: 'b, 'tcx: 'a> {\n+    builder: &'b mut MoveDataBuilder<'a, 'tcx>,\n+    loc: Location,\n+}\n+\n+impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n+    fn gather_statement(&mut self, stmt: &Statement<'tcx>) {\n         match stmt.kind {\n             StatementKind::Assign(ref lval, ref rval) => {\n                 self.create_move_path(lval);\n@@ -217,7 +248,7 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n                     // the exterior.\n                     self.create_move_path(&lval.clone().deref());\n                 }\n-                self.gather_rvalue(loc, rval);\n+                self.gather_rvalue(rval);\n             }\n             StatementKind::StorageLive(_) |\n             StatementKind::StorageDead(_) => {}\n@@ -232,22 +263,22 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n         }\n     }\n \n-    fn gather_rvalue(&mut self, loc: Location, rvalue: &Rvalue<'tcx>) {\n+    fn gather_rvalue(&mut self, rvalue: &Rvalue<'tcx>) {\n         match *rvalue {\n             Rvalue::Use(ref operand) |\n             Rvalue::Repeat(ref operand, _) |\n             Rvalue::Cast(_, ref operand, _) |\n             Rvalue::UnaryOp(_, ref operand) => {\n-                self.gather_operand(loc, operand)\n+                self.gather_operand(operand)\n             }\n             Rvalue::BinaryOp(ref _binop, ref lhs, ref rhs) |\n             Rvalue::CheckedBinaryOp(ref _binop, ref lhs, ref rhs) => {\n-                self.gather_operand(loc, lhs);\n-                self.gather_operand(loc, rhs);\n+                self.gather_operand(lhs);\n+                self.gather_operand(rhs);\n             }\n             Rvalue::Aggregate(ref _kind, ref operands) => {\n                 for operand in operands {\n-                    self.gather_operand(loc, operand);\n+                    self.gather_operand(operand);\n                 }\n             }\n             Rvalue::Ref(..) |\n@@ -269,16 +300,15 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n         }\n     }\n \n-    fn gather_terminator(&mut self, loc: Location, term: &Terminator<'tcx>) {\n-        debug!(\"gather_terminator({:?}, {:?})\", loc, term);\n+    fn gather_terminator(&mut self, term: &Terminator<'tcx>) {\n         match term.kind {\n             TerminatorKind::Goto { target: _ } |\n             TerminatorKind::Resume |\n             TerminatorKind::GeneratorDrop |\n             TerminatorKind::Unreachable => { }\n \n             TerminatorKind::Return => {\n-                self.gather_move(loc, &Lvalue::Local(RETURN_POINTER));\n+                self.gather_move(&Lvalue::Local(RETURN_POINTER));\n             }\n \n             TerminatorKind::Assert { .. } |\n@@ -287,20 +317,20 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n             }\n \n             TerminatorKind::Yield { ref value, .. } => {\n-                self.gather_operand(loc, value);\n+                self.gather_operand(value);\n             }\n \n             TerminatorKind::Drop { ref location, target: _, unwind: _ } => {\n-                self.gather_move(loc, location);\n+                self.gather_move(location);\n             }\n             TerminatorKind::DropAndReplace { ref location, ref value, .. } => {\n                 self.create_move_path(location);\n-                self.gather_operand(loc, value);\n+                self.gather_operand(value);\n             }\n             TerminatorKind::Call { ref func, ref args, ref destination, cleanup: _ } => {\n-                self.gather_operand(loc, func);\n+                self.gather_operand(func);\n                 for arg in args {\n-                    self.gather_operand(loc, arg);\n+                    self.gather_operand(arg);\n                 }\n                 if let Some((ref destination, _bb)) = *destination {\n                     self.create_move_path(destination);\n@@ -309,37 +339,38 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n         }\n     }\n \n-    fn gather_operand(&mut self, loc: Location, operand: &Operand<'tcx>) {\n+    fn gather_operand(&mut self, operand: &Operand<'tcx>) {\n         match *operand {\n             Operand::Constant(..) => {} // not-a-move\n             Operand::Consume(ref lval) => { // a move\n-                self.gather_move(loc, lval);\n+                self.gather_move(lval);\n             }\n         }\n     }\n \n-    fn gather_move(&mut self, loc: Location, lval: &Lvalue<'tcx>) {\n-        debug!(\"gather_move({:?}, {:?})\", loc, lval);\n+    fn gather_move(&mut self, lval: &Lvalue<'tcx>) {\n+        debug!(\"gather_move({:?}, {:?})\", self.loc, lval);\n \n-        let lv_ty = lval.ty(self.mir, self.tcx).to_ty(self.tcx);\n-        if !lv_ty.moves_by_default(self.tcx, self.param_env, DUMMY_SP) {\n-            debug!(\"gather_move({:?}, {:?}) - {:?} is Copy. skipping\", loc, lval, lv_ty);\n+        let tcx = self.builder.tcx;\n+        let lv_ty = lval.ty(self.builder.mir, tcx).to_ty(tcx);\n+        if !lv_ty.moves_by_default(tcx, self.builder.param_env, DUMMY_SP) {\n+            debug!(\"gather_move({:?}, {:?}) - {:?} is Copy. skipping\", self.loc, lval, lv_ty);\n             return\n         }\n \n         let path = match self.move_path_for(lval) {\n             Ok(path) | Err(MoveError::UnionMove { path }) => path,\n             Err(error @ MoveError::IllegalMove { .. }) => {\n-                self.errors.push(error);\n+                self.builder.errors.push(error);\n                 return;\n             }\n         };\n-        let move_out = self.data.moves.push(MoveOut { path: path, source: loc });\n+        let move_out = self.builder.data.moves.push(MoveOut { path: path, source: self.loc });\n \n         debug!(\"gather_move({:?}, {:?}): adding move {:?} of {:?}\",\n-               loc, lval, move_out, path);\n+               self.loc, lval, move_out, path);\n \n-        self.data.path_map[path].push(move_out);\n-        self.data.loc_map[loc].push(move_out);\n+        self.builder.data.path_map[path].push(move_out);\n+        self.builder.data.loc_map[self.loc].push(move_out);\n     }\n }"}, {"sha": "9369156a223c87e7f6f113ea20a16f72ff847371", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a16ef4936d7174df232c7b17fc92b3060e22c3a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a16ef4936d7174df232c7b17fc92b3060e22c3a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=5a16ef4936d7174df232c7b17fc92b3060e22c3a", "patch": "@@ -13,7 +13,7 @@ use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::{IndexVec};\n-use syntax_pos::{DUMMY_SP, Span};\n+use syntax_pos::{Span};\n \n use std::fmt;\n use std::ops::{Index, IndexMut};\n@@ -250,8 +250,8 @@ pub enum MoveError<'tcx> {\n }\n \n impl<'tcx> MoveError<'tcx> {\n-    fn cannot_move_out_of(kind: IllegalMoveOriginKind<'tcx>) -> Self {\n-        let origin = IllegalMoveOrigin { span: DUMMY_SP, kind: kind, };\n+    fn cannot_move_out_of(span: Span, kind: IllegalMoveOriginKind<'tcx>) -> Self {\n+        let origin = IllegalMoveOrigin { span, kind };\n         MoveError::IllegalMove { cannot_move_out_of: origin }\n     }\n }"}]}