{"sha": "addbc5b9df3fca76e7c271a78a0568144b9634f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZGJjNWI5ZGYzZmNhNzZlN2MyNzFhNzhhMDU2ODE0NGI5NjM0Zjk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-05T10:42:56Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-10T07:35:23Z"}, "message": "unify/improve/simplify attribute parsing", "tree": {"sha": "37cdc0d9a0c2335decc19820245ed2769592bea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37cdc0d9a0c2335decc19820245ed2769592bea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/addbc5b9df3fca76e7c271a78a0568144b9634f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/addbc5b9df3fca76e7c271a78a0568144b9634f9", "html_url": "https://github.com/rust-lang/rust/commit/addbc5b9df3fca76e7c271a78a0568144b9634f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/addbc5b9df3fca76e7c271a78a0568144b9634f9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be86b2d37be1631798688afbd45aa0d517135ad1", "url": "https://api.github.com/repos/rust-lang/rust/commits/be86b2d37be1631798688afbd45aa0d517135ad1", "html_url": "https://github.com/rust-lang/rust/commit/be86b2d37be1631798688afbd45aa0d517135ad1"}], "stats": {"total": 313, "additions": 140, "deletions": 173}, "files": [{"sha": "b5af124fd42981fa730f9da20558f9ebf31dad06", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 97, "deletions": 126, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -1,4 +1,4 @@\n-use super::{Parser, PathStyle, TokenType};\n+use super::{Parser, PathStyle};\n use rustc_ast::ast;\n use rustc_ast::attr;\n use rustc_ast::token::{self, Nonterminal};\n@@ -10,63 +10,65 @@ use rustc_span::{Span, Symbol};\n use log::debug;\n \n #[derive(Debug)]\n-enum InnerAttributeParsePolicy<'a> {\n+pub(super) enum InnerAttrPolicy<'a> {\n     Permitted,\n-    NotPermitted { reason: &'a str, saw_doc_comment: bool, prev_attr_sp: Option<Span> },\n+    Forbidden { reason: &'a str, saw_doc_comment: bool, prev_attr_sp: Option<Span> },\n }\n \n const DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG: &str = \"an inner attribute is not \\\n                                                      permitted in this context\";\n \n+pub(super) const DEFAULT_INNER_ATTR_FORBIDDEN: InnerAttrPolicy<'_> = InnerAttrPolicy::Forbidden {\n+    reason: DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG,\n+    saw_doc_comment: false,\n+    prev_attr_sp: None,\n+};\n+\n impl<'a> Parser<'a> {\n     /// Parses attributes that appear before an item.\n     pub(super) fn parse_outer_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n         let mut attrs: Vec<ast::Attribute> = Vec::new();\n         let mut just_parsed_doc_comment = false;\n         loop {\n             debug!(\"parse_outer_attributes: self.token={:?}\", self.token);\n-            match self.token.kind {\n-                token::Pound => {\n-                    let inner_error_reason = if just_parsed_doc_comment {\n-                        \"an inner attribute is not permitted following an outer doc comment\"\n-                    } else if !attrs.is_empty() {\n-                        \"an inner attribute is not permitted following an outer attribute\"\n-                    } else {\n-                        DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG\n-                    };\n-                    let inner_parse_policy = InnerAttributeParsePolicy::NotPermitted {\n-                        reason: inner_error_reason,\n-                        saw_doc_comment: just_parsed_doc_comment,\n-                        prev_attr_sp: attrs.last().map(|a| a.span),\n-                    };\n-                    let attr = self.parse_attribute_with_inner_parse_policy(inner_parse_policy)?;\n-                    attrs.push(attr);\n-                    just_parsed_doc_comment = false;\n-                }\n-                token::DocComment(s) => {\n-                    let attr = self.mk_doc_comment(s);\n-                    if attr.style != ast::AttrStyle::Outer {\n-                        let span = self.token.span;\n-                        let mut err = self.struct_span_err(span, \"expected outer doc comment\");\n-                        err.note(\n+            if self.check(&token::Pound) {\n+                let inner_error_reason = if just_parsed_doc_comment {\n+                    \"an inner attribute is not permitted following an outer doc comment\"\n+                } else if !attrs.is_empty() {\n+                    \"an inner attribute is not permitted following an outer attribute\"\n+                } else {\n+                    DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG\n+                };\n+                let inner_parse_policy = InnerAttrPolicy::Forbidden {\n+                    reason: inner_error_reason,\n+                    saw_doc_comment: just_parsed_doc_comment,\n+                    prev_attr_sp: attrs.last().map(|a| a.span),\n+                };\n+                let attr = self.parse_attribute_with_inner_parse_policy(inner_parse_policy)?;\n+                attrs.push(attr);\n+                just_parsed_doc_comment = false;\n+            } else if let token::DocComment(s) = self.token.kind {\n+                let attr = self.mk_doc_comment(s);\n+                if attr.style != ast::AttrStyle::Outer {\n+                    self.struct_span_err(self.token.span, \"expected outer doc comment\")\n+                        .note(\n                             \"inner doc comments like this (starting with \\\n-                                  `//!` or `/*!`) can only appear before items\",\n-                        );\n-                        return Err(err);\n-                    }\n-                    attrs.push(attr);\n-                    self.bump();\n-                    just_parsed_doc_comment = true;\n+                              `//!` or `/*!`) can only appear before items\",\n+                        )\n+                        .emit();\n                 }\n-                _ => break,\n+                attrs.push(attr);\n+                self.bump();\n+                just_parsed_doc_comment = true;\n+            } else {\n+                break;\n             }\n         }\n         Ok(attrs)\n     }\n \n     fn mk_doc_comment(&self, s: Symbol) -> ast::Attribute {\n-        let style = comments::doc_comment_style(&s.as_str());\n-        attr::mk_doc_comment(style, s, self.token.span)\n+        attr::mk_doc_comment(comments::doc_comment_style(&s.as_str()), s, self.token.span)\n     }\n \n     /// Matches `attribute = # ! [ meta_item ]`.\n@@ -75,96 +77,68 @@ impl<'a> Parser<'a> {\n     /// attribute.\n     pub fn parse_attribute(&mut self, permit_inner: bool) -> PResult<'a, ast::Attribute> {\n         debug!(\"parse_attribute: permit_inner={:?} self.token={:?}\", permit_inner, self.token);\n-        let inner_parse_policy = if permit_inner {\n-            InnerAttributeParsePolicy::Permitted\n-        } else {\n-            InnerAttributeParsePolicy::NotPermitted {\n-                reason: DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG,\n-                saw_doc_comment: false,\n-                prev_attr_sp: None,\n-            }\n-        };\n+        let inner_parse_policy =\n+            if permit_inner { InnerAttrPolicy::Permitted } else { DEFAULT_INNER_ATTR_FORBIDDEN };\n         self.parse_attribute_with_inner_parse_policy(inner_parse_policy)\n     }\n \n-    /// The same as `parse_attribute`, except it takes in an `InnerAttributeParsePolicy`\n+    /// The same as `parse_attribute`, except it takes in an `InnerAttrPolicy`\n     /// that prescribes how to handle inner attributes.\n     fn parse_attribute_with_inner_parse_policy(\n         &mut self,\n-        inner_parse_policy: InnerAttributeParsePolicy<'_>,\n+        inner_parse_policy: InnerAttrPolicy<'_>,\n     ) -> PResult<'a, ast::Attribute> {\n         debug!(\n             \"parse_attribute_with_inner_parse_policy: inner_parse_policy={:?} self.token={:?}\",\n             inner_parse_policy, self.token\n         );\n-        let (span, item, style) = match self.token.kind {\n-            token::Pound => {\n-                let lo = self.token.span;\n-                self.bump();\n-\n-                if let InnerAttributeParsePolicy::Permitted = inner_parse_policy {\n-                    self.expected_tokens.push(TokenType::Token(token::Not));\n-                }\n-\n-                let style = if self.token == token::Not {\n-                    self.bump();\n-                    ast::AttrStyle::Inner\n-                } else {\n-                    ast::AttrStyle::Outer\n-                };\n+        let lo = self.token.span;\n+        let (span, item, style) = if self.eat(&token::Pound) {\n+            let style =\n+                if self.eat(&token::Not) { ast::AttrStyle::Inner } else { ast::AttrStyle::Outer };\n \n-                self.expect(&token::OpenDelim(token::Bracket))?;\n-                let item = self.parse_attr_item()?;\n-                self.expect(&token::CloseDelim(token::Bracket))?;\n-                let hi = self.prev_token.span;\n-\n-                let attr_sp = lo.to(hi);\n-\n-                // Emit error if inner attribute is encountered and not permitted\n-                if style == ast::AttrStyle::Inner {\n-                    if let InnerAttributeParsePolicy::NotPermitted {\n-                        reason,\n-                        saw_doc_comment,\n-                        prev_attr_sp,\n-                    } = inner_parse_policy\n-                    {\n-                        let prev_attr_note = if saw_doc_comment {\n-                            \"previous doc comment\"\n-                        } else {\n-                            \"previous outer attribute\"\n-                        };\n-\n-                        let mut diagnostic = self.struct_span_err(attr_sp, reason);\n-\n-                        if let Some(prev_attr_sp) = prev_attr_sp {\n-                            diagnostic\n-                                .span_label(attr_sp, \"not permitted following an outer attribute\")\n-                                .span_label(prev_attr_sp, prev_attr_note);\n-                        }\n-\n-                        diagnostic\n-                            .note(\n-                                \"inner attributes, like `#![no_std]`, annotate the item \\\n-                                   enclosing them, and are usually found at the beginning of \\\n-                                   source files. Outer attributes, like `#[test]`, annotate the \\\n-                                   item following them.\",\n-                            )\n-                            .emit();\n-                    }\n-                }\n+            self.expect(&token::OpenDelim(token::Bracket))?;\n+            let item = self.parse_attr_item()?;\n+            self.expect(&token::CloseDelim(token::Bracket))?;\n+            let attr_sp = lo.to(self.prev_token.span);\n \n-                (attr_sp, item, style)\n-            }\n-            _ => {\n-                let token_str = pprust::token_to_string(&self.token);\n-                let msg = &format!(\"expected `#`, found `{}`\", token_str);\n-                return Err(self.struct_span_err(self.token.span, msg));\n+            // Emit error if inner attribute is encountered and forbidden.\n+            if style == ast::AttrStyle::Inner {\n+                self.error_on_forbidden_inner_attr(attr_sp, inner_parse_policy);\n             }\n+\n+            (attr_sp, item, style)\n+        } else {\n+            let token_str = pprust::token_to_string(&self.token);\n+            let msg = &format!(\"expected `#`, found `{}`\", token_str);\n+            return Err(self.struct_span_err(self.token.span, msg));\n         };\n \n         Ok(attr::mk_attr_from_item(style, item, span))\n     }\n \n+    pub(super) fn error_on_forbidden_inner_attr(&self, attr_sp: Span, policy: InnerAttrPolicy<'_>) {\n+        if let InnerAttrPolicy::Forbidden { reason, saw_doc_comment, prev_attr_sp } = policy {\n+            let prev_attr_note =\n+                if saw_doc_comment { \"previous doc comment\" } else { \"previous outer attribute\" };\n+\n+            let mut diag = self.struct_span_err(attr_sp, reason);\n+\n+            if let Some(prev_attr_sp) = prev_attr_sp {\n+                diag.span_label(attr_sp, \"not permitted following an outer attribute\")\n+                    .span_label(prev_attr_sp, prev_attr_note);\n+            }\n+\n+            diag.note(\n+                \"inner attributes, like `#![no_std]`, annotate the item \\\n+                       enclosing them, and are usually found at the beginning of \\\n+                       source files. Outer attributes, like `#[test]`, annotate the \\\n+                       item following them.\",\n+            )\n+            .emit();\n+        }\n+    }\n+\n     /// Parses an inner part of an attribute (the path and following tokens).\n     /// The tokens must be either a delimited token stream, or empty token stream,\n     /// or the \"legacy\" key-value form.\n@@ -200,24 +174,22 @@ impl<'a> Parser<'a> {\n     crate fn parse_inner_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n         let mut attrs: Vec<ast::Attribute> = vec![];\n         loop {\n-            match self.token.kind {\n-                // Only try to parse if it is an inner attribute (has `!`).\n-                token::Pound if self.look_ahead(1, |t| t == &token::Not) => {\n-                    let attr = self.parse_attribute(true)?;\n-                    assert_eq!(attr.style, ast::AttrStyle::Inner);\n+            // Only try to parse if it is an inner attribute (has `!`).\n+            if self.check(&token::Pound) && self.look_ahead(1, |t| t == &token::Not) {\n+                let attr = self.parse_attribute(true)?;\n+                assert_eq!(attr.style, ast::AttrStyle::Inner);\n+                attrs.push(attr);\n+            } else if let token::DocComment(s) = self.token.kind {\n+                // We need to get the position of this token before we bump.\n+                let attr = self.mk_doc_comment(s);\n+                if attr.style == ast::AttrStyle::Inner {\n                     attrs.push(attr);\n+                    self.bump();\n+                } else {\n+                    break;\n                 }\n-                token::DocComment(s) => {\n-                    // We need to get the position of this token before we bump.\n-                    let attr = self.mk_doc_comment(s);\n-                    if attr.style == ast::AttrStyle::Inner {\n-                        attrs.push(attr);\n-                        self.bump();\n-                    } else {\n-                        break;\n-                    }\n-                }\n-                _ => break,\n+            } else {\n+                break;\n             }\n         }\n         Ok(attrs)\n@@ -228,8 +200,7 @@ impl<'a> Parser<'a> {\n         debug!(\"checking if {:?} is unusuffixed\", lit);\n \n         if !lit.kind.is_unsuffixed() {\n-            let msg = \"suffixed literals are not allowed in attributes\";\n-            self.struct_span_err(lit.span, msg)\n+            self.struct_span_err(lit.span, \"suffixed literals are not allowed in attributes\")\n                 .help(\n                     \"instead of using a suffixed literal \\\n                                     (`1u8`, `1.0f32`, etc.), use an unsuffixed version \\"}, {"sha": "036e8a5d25859dedb3f8c997e1823e5a72ee0bc9", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -1,3 +1,4 @@\n+use super::attr::DEFAULT_INNER_ATTR_FORBIDDEN;\n use super::diagnostics::Error;\n use super::expr::LhsExpr;\n use super::pat::GateOr;\n@@ -238,13 +239,11 @@ impl<'a> Parser<'a> {\n \n     /// Parses a block. No inner attributes are allowed.\n     pub fn parse_block(&mut self) -> PResult<'a, P<Block>> {\n-        maybe_whole!(self, NtBlock, |x| x);\n-\n-        if !self.eat(&token::OpenDelim(token::Brace)) {\n-            return self.error_block_no_opening_brace();\n+        let (attrs, block) = self.parse_inner_attrs_and_block()?;\n+        if let [.., last] = &*attrs {\n+            self.error_on_forbidden_inner_attr(last.span, DEFAULT_INNER_ATTR_FORBIDDEN);\n         }\n-\n-        self.parse_block_tail(self.prev_token.span, BlockCheckMode::Default)\n+        Ok(block)\n     }\n \n     fn error_block_no_opening_brace<T>(&mut self) -> PResult<'a, T> {"}, {"sha": "76e87a3749c33a5b8f2849c41707741b14b78dc6", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -32,11 +32,11 @@ LL |     X() {}\n LL | }\n    | - the item list ends here\n \n-error: expected `[`, found `#`\n+error: expected one of `!` or `[`, found `#`\n   --> $DIR/issue-40006.rs:19:17\n    |\n LL |     fn xxx() { ### }\n-   |                 ^ expected `[`\n+   |                 ^ expected one of `!` or `[`\n \n error: expected one of `!` or `::`, found `=`\n   --> $DIR/issue-40006.rs:22:7"}, {"sha": "6eb25a92f34133587558e8196be83835d03d9a88", "filename": "src/test/ui/generic-associated-types/empty_generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.rs?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -3,7 +3,7 @@\n \n trait Foo {\n     type Bar<,>;\n-    //~^ ERROR expected one of `>`, `const`, identifier, or lifetime, found `,`\n+    //~^ ERROR expected one of `#`, `>`, `const`, identifier, or lifetime, found `,`\n }\n \n fn main() {}"}, {"sha": "1599d683ad6dd7dc078b9e9b01d0c80a446cd9c8", "filename": "src/test/ui/generic-associated-types/empty_generics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -1,10 +1,10 @@\n-error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n+error: expected one of `#`, `>`, `const`, identifier, or lifetime, found `,`\n   --> $DIR/empty_generics.rs:5:14\n    |\n LL | trait Foo {\n    |           - while parsing this item list starting here\n LL |     type Bar<,>;\n-   |              ^ expected one of `>`, `const`, identifier, or lifetime\n+   |              ^ expected one of `#`, `>`, `const`, identifier, or lifetime\n LL |\n LL | }\n    | - the item list ends here"}, {"sha": "3ceb58d1252d315c67e63d44b318aace5d719b31", "filename": "src/test/ui/issues/issue-20616-8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.rs?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -29,7 +29,7 @@ type Type_5_<'a> = Type_1_<'a, ()>;\n \n \n type Type_8<'a,,> = &'a ();\n-//~^ error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n+//~^ error: expected one of `#`, `>`, `const`, identifier, or lifetime, found `,`\n \n \n //type Type_9<T,,> = Box<T>; // error: expected identifier, found `,`"}, {"sha": "e9f37e50fffec7e02ce674346c82b42f5f932c45", "filename": "src/test/ui/issues/issue-20616-8.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.stderr?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n+error: expected one of `#`, `>`, `const`, identifier, or lifetime, found `,`\n   --> $DIR/issue-20616-8.rs:31:16\n    |\n LL | type Type_8<'a,,> = &'a ();\n-   |                ^ expected one of `>`, `const`, identifier, or lifetime\n+   |                ^ expected one of `#`, `>`, `const`, identifier, or lifetime\n \n error: aborting due to previous error\n "}, {"sha": "7f84284481e2f02e07fc82788163d6e01bf1d98d", "filename": "src/test/ui/issues/issue-20616-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.rs?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -32,4 +32,4 @@ type Type_5_<'a> = Type_1_<'a, ()>;\n \n \n type Type_9<T,,> = Box<T>;\n-//~^ error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n+//~^ error: expected one of `#`, `>`, `const`, identifier, or lifetime, found `,`"}, {"sha": "dc309d1bce1586c12e35eb3fae926ca6a246edf8", "filename": "src/test/ui/issues/issue-20616-9.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.stderr?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n+error: expected one of `#`, `>`, `const`, identifier, or lifetime, found `,`\n   --> $DIR/issue-20616-9.rs:34:15\n    |\n LL | type Type_9<T,,> = Box<T>;\n-   |               ^ expected one of `>`, `const`, identifier, or lifetime\n+   |               ^ expected one of `#`, `>`, `const`, identifier, or lifetime\n \n error: aborting due to previous error\n "}, {"sha": "9db4521bb423926b5dba771279e0e245581d51be", "filename": "src/test/ui/issues/issue-66473.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fissues%2Fissue-66473.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fissues%2Fissue-66473.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66473.rs?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9"}, {"sha": "b370b125cfefda4f82cbb4866fec528b1465a2ef", "filename": "src/test/ui/issues/issue-66473.stderr", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fissues%2Fissue-66473.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fissues%2Fissue-66473.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66473.stderr?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9"}, {"sha": "c9251ac5321851c786cc06862790481505887481", "filename": "src/test/ui/parser/bounds-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime.rs?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -6,6 +6,6 @@ type A = for<'a: 'b + 'c> fn(); // OK (rejected later by ast_validation)\n type A = for<'a: 'b,> fn(); // OK(rejected later by ast_validation)\n type A = for<'a: 'b +> fn(); // OK (rejected later by ast_validation)\n type A = for<'a, T> fn(); // OK (rejected later by ast_validation)\n-type A = for<,> fn(); //~ ERROR expected one of `>`, `const`, identifier, or lifetime, found `,`\n+type A = for<,> fn(); //~ ERROR expected one of `#`, `>`, `const`, identifier, or lifetime\n \n fn main() {}"}, {"sha": "e47a21d892b2f745a68e92e7bb3982409d9a1d6f", "filename": "src/test/ui/parser/bounds-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime.stderr?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n+error: expected one of `#`, `>`, `const`, identifier, or lifetime, found `,`\n   --> $DIR/bounds-lifetime.rs:9:14\n    |\n LL | type A = for<,> fn();\n-   |              ^ expected one of `>`, `const`, identifier, or lifetime\n+   |              ^ expected one of `#`, `>`, `const`, identifier, or lifetime\n \n error: aborting due to previous error\n "}, {"sha": "0c24478c25c8b62af03ed797833d1a9c9902f0c5", "filename": "src/test/ui/parser/column-offset-1-based.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fcolumn-offset-1-based.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fcolumn-offset-1-based.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fcolumn-offset-1-based.rs?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -1 +1 @@\n-# //~ ERROR expected `[`, found `<eof>`\n+# //~ ERROR expected one of `!` or `[`, found `<eof>`"}, {"sha": "766d72a0a5a93b9cef808048fdad8c6fb3753225", "filename": "src/test/ui/parser/column-offset-1-based.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fcolumn-offset-1-based.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fcolumn-offset-1-based.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fcolumn-offset-1-based.stderr?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -1,8 +1,8 @@\n-error: expected `[`, found `<eof>`\n+error: expected one of `!` or `[`, found `<eof>`\n   --> $DIR/column-offset-1-based.rs:1:1\n    |\n LL | #\n-   | ^ expected `[`\n+   | ^ expected one of `!` or `[`\n \n error: aborting due to previous error\n "}, {"sha": "69b174b4cb3c7a948ac108bafba1de40ad6dab37", "filename": "src/test/ui/parser/doc-comment-in-if-statement.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.rs?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n     if true /*!*/ {}\n     //~^ ERROR expected `{`, found doc comment `/*!*/`\n+    //~| ERROR expected outer doc comment\n }"}, {"sha": "1fe3735daf09b408454d18a1b46a4b7190bdf698", "filename": "src/test/ui/parser/doc-comment-in-if-statement.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -1,10 +1,19 @@\n+error: expected outer doc comment\n+  --> $DIR/doc-comment-in-if-statement.rs:2:13\n+   |\n+LL |     if true /*!*/ {}\n+   |             ^^^^^\n+   |\n+   = note: inner doc comments like this (starting with `//!` or `/*!`) can only appear before items\n+\n error: expected `{`, found doc comment `/*!*/`\n   --> $DIR/doc-comment-in-if-statement.rs:2:13\n    |\n LL |     if true /*!*/ {}\n-   |     --      ^^^^^ expected `{`\n-   |     |\n+   |     --      ^^^^^ -- help: try placing this code inside a block: `{ {} }`\n+   |     |       |\n+   |     |       expected `{`\n    |     this `if` expression has a condition, but no block\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "e9fc6f15346f24ec13200f98b6a053665397cd90", "filename": "src/test/ui/parser/issue-1655.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fissue-1655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fissue-1655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-1655.rs?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -1,6 +1,5 @@\n-// error-pattern:expected `[`, found `vec`\n mod blade_runner {\n-    #vec[doc(\n+    #vec[doc( //~ ERROR expected one of `!` or `[`, found `vec`\n         brief = \"Blade Runner is probably the best movie ever\",\n         desc = \"I like that in the world of Blade Runner it is always\n                 raining, and that it's always night time. And Aliens"}, {"sha": "0c390a0ec563c95c78e25b7fcf996520a33f0bd0", "filename": "src/test/ui/parser/issue-1655.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fissue-1655.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fissue-1655.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-1655.stderr?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -1,8 +1,8 @@\n-error: expected `[`, found `vec`\n-  --> $DIR/issue-1655.rs:3:6\n+error: expected one of `!` or `[`, found `vec`\n+  --> $DIR/issue-1655.rs:2:6\n    |\n LL |     #vec[doc(\n-   |      ^^^ expected `[`\n+   |      ^^^ expected one of `!` or `[`\n \n error: aborting due to previous error\n "}, {"sha": "a5a8de85466bbccf5c549f3d538f82bf69ccc854", "filename": "src/test/ui/parser/issue-63135.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fissue-63135.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fissue-63135.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63135.rs?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern: aborting due to 7 previous errors\n+// error-pattern: aborting due to 5 previous errors\n \n fn i(n{...,f #"}, {"sha": "396aec8335dbf162fa2c574bd3b78a328aa7cc6c", "filename": "src/test/ui/parser/issue-63135.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9", "patch": "@@ -31,23 +31,11 @@ LL | fn i(n{...,f #\n    |        |  expected `}`\n    |        `..` must be at the end and cannot have a trailing comma\n \n-error: expected `[`, found `}`\n+error: expected one of `!` or `[`, found `}`\n   --> $DIR/issue-63135.rs:3:16\n    |\n LL | fn i(n{...,f #\n-   |                ^ expected `[`\n+   |                ^ expected one of `!` or `[`\n \n-error: expected one of `:` or `|`, found `)`\n-  --> $DIR/issue-63135.rs:3:16\n-   |\n-LL | fn i(n{...,f #\n-   |                ^ expected one of `:` or `|`\n-\n-error: expected `;` or `{`, found `<eof>`\n-  --> $DIR/issue-63135.rs:3:16\n-   |\n-LL | fn i(n{...,f #\n-   |                ^ expected `;` or `{`\n-\n-error: aborting due to 7 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "20e18b4bcbb323d50ecfe254f9800cd5aa0a4a40", "filename": "src/test/ui/parser/issue-68730.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fissue-68730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fissue-68730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68730.rs?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9"}, {"sha": "9f8833e17fe25afc9f10b08683294ecd7e9efe32", "filename": "src/test/ui/parser/issue-68730.stderr", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fissue-68730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/addbc5b9df3fca76e7c271a78a0568144b9634f9/src%2Ftest%2Fui%2Fparser%2Fissue-68730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68730.stderr?ref=addbc5b9df3fca76e7c271a78a0568144b9634f9"}]}