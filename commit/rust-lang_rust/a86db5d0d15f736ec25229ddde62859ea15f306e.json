{"sha": "a86db5d0d15f736ec25229ddde62859ea15f306e", "node_id": "C_kwDOAAsO6NoAKGE4NmRiNWQwZDE1ZjczNmVjMjUyMjlkZGRlNjI4NTllYTE1ZjMwNmU", "commit": {"author": {"name": "Andrei Listochkin", "email": "andrei.listochkin@ferrous-systems.com", "date": "2022-05-11T12:22:58Z"}, "committer": {"name": "Andrei Listochkin", "email": "andrei.listochkin@ferrous-systems.com", "date": "2022-05-11T14:05:41Z"}, "message": "iterative dependency solver\n\nFirst, we go through every environment variable key and record all cases\nwhere there are reference to other variables / dependencies.\n\nWe track two sets of variables - resolved and yet-to-be-resolved.\nWe pass over a list of variables over and over again and when all\nvariable's dependencies were resolved during previous passes we perform\na replacement for that variable, too.\n\nOver time the size of `toResolve` set should go down to zero, however\ncircular dependencies may prevent that. We track the size of `toResolve`\nbetween iterations to avoid infinite looping.\n\nAt the end we produce an object of the same size and shape as\nthe original, but with the values replace with resolved versions.", "tree": {"sha": "8109f08a6c00a39d09f87a3f497781346a673210", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8109f08a6c00a39d09f87a3f497781346a673210"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a86db5d0d15f736ec25229ddde62859ea15f306e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a86db5d0d15f736ec25229ddde62859ea15f306e", "html_url": "https://github.com/rust-lang/rust/commit/a86db5d0d15f736ec25229ddde62859ea15f306e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a86db5d0d15f736ec25229ddde62859ea15f306e/comments", "author": {"login": "listochkin", "id": 405222, "node_id": "MDQ6VXNlcjQwNTIyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/405222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/listochkin", "html_url": "https://github.com/listochkin", "followers_url": "https://api.github.com/users/listochkin/followers", "following_url": "https://api.github.com/users/listochkin/following{/other_user}", "gists_url": "https://api.github.com/users/listochkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/listochkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/listochkin/subscriptions", "organizations_url": "https://api.github.com/users/listochkin/orgs", "repos_url": "https://api.github.com/users/listochkin/repos", "events_url": "https://api.github.com/users/listochkin/events{/privacy}", "received_events_url": "https://api.github.com/users/listochkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "listochkin", "id": 405222, "node_id": "MDQ6VXNlcjQwNTIyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/405222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/listochkin", "html_url": "https://github.com/listochkin", "followers_url": "https://api.github.com/users/listochkin/followers", "following_url": "https://api.github.com/users/listochkin/following{/other_user}", "gists_url": "https://api.github.com/users/listochkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/listochkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/listochkin/subscriptions", "organizations_url": "https://api.github.com/users/listochkin/orgs", "repos_url": "https://api.github.com/users/listochkin/repos", "events_url": "https://api.github.com/users/listochkin/events{/privacy}", "received_events_url": "https://api.github.com/users/listochkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18d2fb81a78eb7ec75a5850f5c0c3d42a9bd01ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/18d2fb81a78eb7ec75a5850f5c0c3d42a9bd01ec", "html_url": "https://github.com/rust-lang/rust/commit/18d2fb81a78eb7ec75a5850f5c0c3d42a9bd01ec"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "87cc2a395ba7ea24712577f1fcb41ace5551821f", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a86db5d0d15f736ec25229ddde62859ea15f306e/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a86db5d0d15f736ec25229ddde62859ea15f306e/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=a86db5d0d15f736ec25229ddde62859ea15f306e", "patch": "@@ -209,3 +209,50 @@ export async function updateConfig(config: vscode.WorkspaceConfiguration) {\n         }\n     }\n }\n+\n+export function substituteVariablesInEnv(env: Env): Env {\n+    const missingDeps = new Set<string>();\n+    // vscode uses `env:ENV_NAME` for env vars resolution, and it's easier\n+    // to follow the same convention for our dependency tracking\n+    const definedEnvKeys = new Set(Object.keys(env).map(key => `env:${key}`));\n+    const envWithDeps = Object.fromEntries(Object.entries(env).map(([key, value]) => {\n+        const deps = new Set<string>();\n+        const depRe = new RegExp(/\\${(?<depName>.+?)}/g);\n+        let match = undefined;\n+        while ((match = depRe.exec(value))) {\n+            const depName = match.groups!.depName;\n+            deps.add(depName);\n+            // `depName` at this point can have a form of `expression` or\n+            // `prefix:expression`\n+            if (!definedEnvKeys.has(depName)) {\n+                missingDeps.add(depName);\n+            }\n+        }\n+        return [`env:${key}`, { deps: [...deps], value }];\n+    }));\n+\n+    const resolved = new Set<string>();\n+    // TODO: handle missing dependencies\n+    const toResolve = new Set(Object.keys(envWithDeps));\n+\n+    let leftToResolveSize;\n+    do {\n+        leftToResolveSize = toResolve.size;\n+        for (const key of toResolve) {\n+            if (envWithDeps[key].deps.every(dep => resolved.has(dep))) {\n+                envWithDeps[key].value = envWithDeps[key].value.replace(\n+                    /\\${(?<depName>.+?)}/g, (_wholeMatch, depName) => {\n+                        return envWithDeps[depName].value;\n+                    });\n+                resolved.add(key);\n+                toResolve.delete(key);\n+            }\n+        }\n+    } while (toResolve.size > 0 && toResolve.size < leftToResolveSize);\n+\n+    const resolvedEnv: Env = {};\n+    for (const key of Object.keys(env)) {\n+        resolvedEnv[key] = envWithDeps[`env:${key}`].value;\n+    }\n+    return resolvedEnv;\n+}"}, {"sha": "12734d15667902cc14e5d00f270080864c1cf541", "filename": "editors/code/tests/unit/settings.test.ts", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a86db5d0d15f736ec25229ddde62859ea15f306e/editors%2Fcode%2Ftests%2Funit%2Fsettings.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a86db5d0d15f736ec25229ddde62859ea15f306e/editors%2Fcode%2Ftests%2Funit%2Fsettings.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2Funit%2Fsettings.test.ts?ref=a86db5d0d15f736ec25229ddde62859ea15f306e", "patch": "@@ -0,0 +1,41 @@\n+import * as assert from 'assert';\n+import { Context } from '.';\n+import { substituteVariablesInEnv } from '../../src/config';\n+\n+export async function getTests(ctx: Context) {\n+    await ctx.suite('Server Env Settings', suite => {\n+        suite.addTest('Replacing Env Variables', async () => {\n+            const envJson = {\n+                USING_MY_VAR: \"${env:MY_VAR} test ${env:MY_VAR}\",\n+                MY_VAR: \"test\"\n+            };\n+            const expectedEnv = {\n+                USING_MY_VAR: \"test test test\",\n+                MY_VAR: \"test\"\n+            };\n+            const actualEnv = await substituteVariablesInEnv(envJson);\n+            assert.deepStrictEqual(actualEnv, expectedEnv);\n+        });\n+\n+        suite.addTest('Circular dependencies remain as is', async () => {\n+            const envJson = {\n+                A_USES_B: \"${env:B_USES_A}\",\n+                B_USES_A: \"${env:A_USES_B}\",\n+                C_USES_ITSELF: \"${env:C_USES_ITSELF}\",\n+                D_USES_C: \"${env:C_USES_ITSELF}\",\n+                E_IS_ISOLATED: \"test\",\n+                F_USES_E: \"${env:E_IS_ISOLATED}\"\n+            };\n+            const expectedEnv = {\n+                A_USES_B: \"${env:B_USES_A}\",\n+                B_USES_A: \"${env:A_USES_B}\",\n+                C_USES_ITSELF: \"${env:C_USES_ITSELF}\",\n+                D_USES_C: \"${env:C_USES_ITSELF}\",\n+                E_IS_ISOLATED: \"test\",\n+                F_USES_E: \"test\"\n+            };\n+            const actualEnv = await substituteVariablesInEnv(envJson);\n+            assert.deepStrictEqual(actualEnv, expectedEnv);\n+        });\n+    });\n+}"}]}