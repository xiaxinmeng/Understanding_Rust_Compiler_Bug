{"sha": "abe551ecb7f0f6223f3d343a591eb34d0b332708", "node_id": "C_kwDOAAsO6NoAKGFiZTU1MWVjYjdmMGY2MjIzZjNkMzQzYTU5MWViMzRkMGIzMzI3MDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-04T19:38:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-04T19:38:04Z"}, "message": "Auto merge of #7762 - HKalbasi:master, r=Manishearth\n\nAdd lint `equatable_if_let`\n\nThis is my attempt for #1716. There is a major false positive, which is people may implement `PartialEq` in a different way. It is unactionable at the moment so I put it into `nursery`.\n\nThere is a trait `StructuralPartialEq` for solving this problem which is promising but it has several problems currently:\n* Integers and tuples doesn't implement it.\n* Some types wrongly implement it, like `Option<T>` when `T` doesn't implement it.\n\nI consider them bugs and against the propose of `StructuralPartialEq`. When they become fixed, this lint can become a useful lint with a single line change.\n\nchangelog: New lint: [`equatable_if_let`]", "tree": {"sha": "6b69b79f7c3c371dda4a7a4860d4913298a7cda3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b69b79f7c3c371dda4a7a4860d4913298a7cda3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abe551ecb7f0f6223f3d343a591eb34d0b332708", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abe551ecb7f0f6223f3d343a591eb34d0b332708", "html_url": "https://github.com/rust-lang/rust/commit/abe551ecb7f0f6223f3d343a591eb34d0b332708", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abe551ecb7f0f6223f3d343a591eb34d0b332708/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3311b366e96b38f151a986f18ee0ede093fd04ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/3311b366e96b38f151a986f18ee0ede093fd04ad", "html_url": "https://github.com/rust-lang/rust/commit/3311b366e96b38f151a986f18ee0ede093fd04ad"}, {"sha": "388a3d098358edd1f7b83f1f47f1e1e157bad067", "url": "https://api.github.com/repos/rust-lang/rust/commits/388a3d098358edd1f7b83f1f47f1e1e157bad067", "html_url": "https://github.com/rust-lang/rust/commit/388a3d098358edd1f7b83f1f47f1e1e157bad067"}], "stats": {"total": 825, "additions": 572, "deletions": 253}, "files": [{"sha": "7fdb300c9774194d48605468f63eb8018fe12dbe", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -2695,6 +2695,7 @@ Released 2018-09-13\n [`enum_glob_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#enum_glob_use\n [`enum_variant_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names\n [`eq_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#eq_op\n+[`equatable_if_let`]: https://rust-lang.github.io/rust-clippy/master/index.html#equatable_if_let\n [`erasing_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#erasing_op\n [`eval_order_dependence`]: https://rust-lang.github.io/rust-clippy/master/index.html#eval_order_dependence\n [`excessive_precision`]: https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision"}, {"sha": "6f8b645dd70d1f7981633f304b2139dbfc4ac15b", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -563,7 +563,7 @@ fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute) {\n             skip_item.path.segments.last().expect(\"empty path in attribute\").ident.name == sym::skip;\n         // Only lint outer attributes, because custom inner attributes are unstable\n         // Tracking issue: https://github.com/rust-lang/rust/issues/54726\n-        if let AttrStyle::Outer = attr.style;\n+        if attr.style == AttrStyle::Outer;\n         then {\n             span_lint_and_sugg(\n                 cx,"}, {"sha": "334e1646cd4fc964b256c55d920e4dd1323b590f", "filename": "clippy_lints/src/casts/cast_precision_loss.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fcasts%2Fcast_precision_loss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fcasts%2Fcast_precision_loss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_precision_loss.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -12,7 +12,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, ca\n     }\n \n     let from_nbits = utils::int_ty_to_nbits(cast_from, cx.tcx);\n-    let to_nbits = if let ty::Float(FloatTy::F32) = cast_to.kind() {\n+    let to_nbits = if cast_to.kind() == &ty::Float(FloatTy::F32) {\n         32\n     } else {\n         64"}, {"sha": "24ac5917dcb0521350e0072234bee02982e58f7a", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -393,7 +393,7 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n \n         if_chain! {\n             if let Some(header) = kind.header();\n-            if let Unsafety::Unsafe = header.unsafety;\n+            if header.unsafety == Unsafety::Unsafe;\n             then {\n                 self.has_unsafe = true;\n             }\n@@ -408,7 +408,7 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n         }\n \n         if let ExprKind::Block(block, _) = expr.kind {\n-            if let BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) = block.rules {\n+            if block.rules == BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) {\n                 self.has_unsafe = true;\n             }\n         }"}, {"sha": "0c6ba91c9430b9db1024c62276d96dab17b4a3d9", "filename": "clippy_lints/src/equatable_if_let.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fequatable_if_let.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -0,0 +1,100 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::implements_trait;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, Pat, PatKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::Ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for pattern matchings that can be expressed using equality.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// * It reads better and has less cognitive load because equality won't cause binding.\n+    /// * It is a [Yoda condition](https://en.wikipedia.org/wiki/Yoda_conditions). Yoda conditions are widely\n+    /// criticized for increasing the cognitive load of reading the code.\n+    /// * Equality is a simple bool expression and can be merged with `&&` and `||` and\n+    /// reuse if blocks\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// if let Some(2) = x {\n+    ///     do_thing();\n+    /// }\n+    /// ```\n+    /// Should be written\n+    /// ```rust,ignore\n+    /// if x == Some(2) {\n+    ///     do_thing();\n+    /// }\n+    /// ```\n+    pub EQUATABLE_IF_LET,\n+    nursery,\n+    \"using pattern matching instead of equality\"\n+}\n+\n+declare_lint_pass!(PatternEquality => [EQUATABLE_IF_LET]);\n+\n+/// detects if pattern matches just one thing\n+fn unary_pattern(pat: &Pat<'_>) -> bool {\n+    fn array_rec(pats: &[Pat<'_>]) -> bool {\n+        pats.iter().all(unary_pattern)\n+    }\n+    match &pat.kind {\n+        PatKind::Slice(_, _, _) | PatKind::Range(_, _, _) | PatKind::Binding(..) | PatKind::Wild | PatKind::Or(_) => {\n+            false\n+        },\n+        PatKind::Struct(_, a, etc) => !etc && a.iter().all(|x| unary_pattern(x.pat)),\n+        PatKind::Tuple(a, etc) | PatKind::TupleStruct(_, a, etc) => !etc.is_some() && array_rec(a),\n+        PatKind::Ref(x, _) | PatKind::Box(x) => unary_pattern(x),\n+        PatKind::Path(_) | PatKind::Lit(_) => true,\n+    }\n+}\n+\n+fn is_structural_partial_eq(cx: &LateContext<'tcx>, ty: Ty<'tcx>, other: Ty<'tcx>) -> bool {\n+    if let Some(def_id) = cx.tcx.lang_items().eq_trait() {\n+        implements_trait(cx, ty, def_id, &[other.into()])\n+    } else {\n+        false\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for PatternEquality {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if_chain! {\n+            if let ExprKind::Let(pat, exp, _) = expr.kind;\n+            if unary_pattern(pat);\n+            let exp_ty = cx.typeck_results().expr_ty(exp);\n+            let pat_ty = cx.typeck_results().pat_ty(pat);\n+            if is_structural_partial_eq(cx, exp_ty, pat_ty);\n+            then {\n+\n+                let mut applicability = Applicability::MachineApplicable;\n+                let pat_str = match pat.kind {\n+                    PatKind::Struct(..) => format!(\n+                        \"({})\",\n+                        snippet_with_applicability(cx, pat.span, \"..\", &mut applicability),\n+                    ),\n+                    _ => snippet_with_applicability(cx, pat.span, \"..\", &mut applicability).to_string(),\n+                };\n+                span_lint_and_sugg(\n+                    cx,\n+                    EQUATABLE_IF_LET,\n+                    expr.span,\n+                    \"this pattern matching can be expressed using equality\",\n+                    \"try\",\n+                    format!(\n+                        \"{} == {}\",\n+                        snippet_with_applicability(cx, exp.span, \"..\", &mut applicability),\n+                        pat_str,\n+                    ),\n+                    applicability,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "d0944c37cf5f76b42948e55fe2e18070fc6681c4", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -47,7 +47,7 @@ impl<'tcx> LateLintPass<'tcx> for ErasingOp {\n }\n \n fn check(cx: &LateContext<'_>, e: &Expr<'_>, span: Span) {\n-    if let Some(Constant::Int(0)) = constant_simple(cx, cx.typeck_results(), e) {\n+    if constant_simple(cx, cx.typeck_results(), e) == Some(Constant::Int(0)) {\n         span_lint(\n             cx,\n             ERASING_OP,"}, {"sha": "75b1c882c233628ca4e4fd89f769dc1fc25b6e81", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -90,7 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n                 for trait_item in items {\n                     if trait_item.id.hir_id() == hir_id {\n                         // be sure we have `self` parameter in this function\n-                        if let AssocItemKind::Fn { has_self: true } = trait_item.kind {\n+                        if trait_item.kind == (AssocItemKind::Fn { has_self: true }) {\n                             trait_self_ty = Some(\n                                 TraitRef::identity(cx.tcx, trait_item.id.def_id.to_def_id())\n                                     .self_ty()"}, {"sha": "765a6c7585a20a6ee3b5f4d09bd6f5b0319396ab", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -116,7 +116,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n                     if let Some(mut snippet) = snippet_opt(cx, callee.span) {\n                         if_chain! {\n                             if let ty::Closure(_, substs) = callee_ty.peel_refs().kind();\n-                            if let ClosureKind::FnMut = substs.as_closure().kind();\n+                            if substs.as_closure().kind() == ClosureKind::FnMut;\n                             if get_enclosing_loop_or_closure(cx.tcx, expr).is_some()\n                                 || UsedAfterExprVisitor::is_found(cx, callee);\n "}, {"sha": "1b56dd4b081775c685de8a295d1ce6c715f02ed3", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -141,7 +141,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n                 match typ.kind() {\n                     ty::FnDef(..) | ty::FnPtr(_) => {\n                         let sig = typ.fn_sig(self.cx.tcx);\n-                        if let ty::Never = self.cx.tcx.erase_late_bound_regions(sig).output().kind() {\n+                        if self.cx.tcx.erase_late_bound_regions(sig).output().kind() == &ty::Never {\n                             self.report_diverging_sub_expr(e);\n                         }\n                     },"}, {"sha": "73bdd67ff5d25a864b88c23055d7e8cec1b63c18", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::source::snippet;\n-use if_chain::if_chain;\n use rustc_hir::{BinOp, BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n@@ -62,16 +61,9 @@ impl<'tcx> LateLintPass<'tcx> for IdentityOp {\n \n fn is_allowed(cx: &LateContext<'_>, cmp: BinOp, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n     // `1 << 0` is a common pattern in bit manipulation code\n-    if_chain! {\n-        if let BinOpKind::Shl = cmp.node;\n-        if let Some(Constant::Int(0)) = constant_simple(cx, cx.typeck_results(), right);\n-        if let Some(Constant::Int(1)) = constant_simple(cx, cx.typeck_results(), left);\n-        then {\n-            return true;\n-        }\n-    }\n-\n-    false\n+    cmp.node == BinOpKind::Shl\n+        && constant_simple(cx, cx.typeck_results(), right) == Some(Constant::Int(0))\n+        && constant_simple(cx, cx.typeck_results(), left) == Some(Constant::Int(1))\n }\n \n #[allow(clippy::cast_possible_wrap)]"}, {"sha": "c962e814fa5c2eb33af2e3d110857afe409f3bea", "filename": "clippy_lints/src/integer_division.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Finteger_division.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Finteger_division.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finteger_division.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for IntegerDivision {\n fn is_integer_division<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) -> bool {\n     if_chain! {\n         if let hir::ExprKind::Binary(binop, left, right) = &expr.kind;\n-        if let hir::BinOpKind::Div = &binop.node;\n+        if binop.node == hir::BinOpKind::Div;\n         then {\n             let (left_ty, right_ty) = (cx.typeck_results().expr_ty(left), cx.typeck_results().expr_ty(right));\n             return left_ty.is_integral() && right_ty.is_integral();"}, {"sha": "1811f7394218f803740b72decd98398a4bc3a787", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -455,14 +455,10 @@ fn is_empty_array(expr: &Expr<'_>) -> bool {\n fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     /// Gets an `AssocItem` and return true if it matches `is_empty(self)`.\n     fn is_is_empty(cx: &LateContext<'_>, item: &ty::AssocItem) -> bool {\n-        if let ty::AssocKind::Fn = item.kind {\n-            if item.ident.name.as_str() == \"is_empty\" {\n-                let sig = cx.tcx.fn_sig(item.def_id);\n-                let ty = sig.skip_binder();\n-                ty.inputs().len() == 1\n-            } else {\n-                false\n-            }\n+        if item.kind == ty::AssocKind::Fn && item.ident.name.as_str() == \"is_empty\" {\n+            let sig = cx.tcx.fn_sig(item.def_id);\n+            let ty = sig.skip_binder();\n+            ty.inputs().len() == 1\n         } else {\n             false\n         }"}, {"sha": "8e899553e69ca6f81486e0ba162efa8e0cd7c860", "filename": "clippy_lints/src/lib.mods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Flib.mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Flib.mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.mods.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -49,6 +49,7 @@ mod entry;\n mod enum_clike;\n mod enum_variants;\n mod eq_op;\n+mod equatable_if_let;\n mod erasing_op;\n mod escape;\n mod eta_reduction;"}, {"sha": "2ba2b3da55cd1725c25822865525a7199aac83f7", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -116,6 +116,7 @@ store.register_lints(&[\n     enum_variants::MODULE_NAME_REPETITIONS,\n     eq_op::EQ_OP,\n     eq_op::OP_REF,\n+    equatable_if_let::EQUATABLE_IF_LET,\n     erasing_op::ERASING_OP,\n     escape::BOXED_LOCAL,\n     eta_reduction::REDUNDANT_CLOSURE,"}, {"sha": "96e0b421094d622f4495a3a9be49085127a5841a", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -8,6 +8,7 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(copies::BRANCHES_SHARING_CODE),\n     LintId::of(disallowed_method::DISALLOWED_METHOD),\n     LintId::of(disallowed_type::DISALLOWED_TYPE),\n+    LintId::of(equatable_if_let::EQUATABLE_IF_LET),\n     LintId::of(fallible_impl_from::FALLIBLE_IMPL_FROM),\n     LintId::of(floating_point_arithmetic::IMPRECISE_FLOPS),\n     LintId::of(floating_point_arithmetic::SUBOPTIMAL_FLOPS),"}, {"sha": "04128c8a0ccdf4fbaee8781af30077c586576307", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -485,6 +485,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(option_if_let_else::OptionIfLetElse));\n     store.register_late_pass(|| Box::new(future_not_send::FutureNotSend));\n     store.register_late_pass(|| Box::new(if_let_mutex::IfLetMutex));\n+    store.register_late_pass(|| Box::new(equatable_if_let::PatternEquality));\n     store.register_late_pass(|| Box::new(mut_mutex_lock::MutMutexLock));\n     store.register_late_pass(|| Box::new(match_on_vec_items::MatchOnVecItems));\n     store.register_late_pass(|| Box::new(manual_async_fn::ManualAsyncFn));"}, {"sha": "aedf0844937d1a2327cbf3a96307cbe4c931a01b", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -92,7 +92,7 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n     fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId, bk: ty::BorrowKind) {\n-        if let ty::BorrowKind::MutBorrow = bk {\n+        if bk == ty::BorrowKind::MutBorrow {\n             if let PlaceBase::Local(id) = cmt.place.base {\n                 if Some(id) == self.hir_id_low && !BreakAfterExprVisitor::is_found(self.cx, diag_expr_id) {\n                     self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id));"}, {"sha": "172d9fc39a29fb8975254f0e266a7fdf59ae663a", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -95,7 +95,7 @@ pub(super) fn check<'tcx>(\n                     let mut take_expr = end;\n \n                     if let ExprKind::Binary(ref op, left, right) = end.kind {\n-                        if let BinOpKind::Add = op.node {\n+                        if op.node == BinOpKind::Add {\n                             let start_equal_left = SpanlessEq::new(cx).eq_expr(start, left);\n                             let start_equal_right = SpanlessEq::new(cx).eq_expr(start, right);\n "}, {"sha": "c0fde5e51663e63a4609c8fafb6b3f04a1742f8a", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -14,7 +14,7 @@ pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n             NeverLoopResult::AlwaysBreak => {\n                 span_lint_and_then(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\", |diag| {\n                     if_chain! {\n-                        if let LoopSource::ForLoop = source;\n+                        if source == LoopSource::ForLoop;\n                         if let Some((_, Node::Expr(parent_match))) = cx.tcx.hir().parent_iter(expr.hir_id).nth(1);\n                         if let Some(ForLoop { arg: iterator, pat, span: for_span, .. }) = ForLoop::hir(parent_match);\n                         then {"}, {"sha": "b632af455f85545cae35806400df06686c9c9ba9", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n     ) {\n         if_chain! {\n             if let Some(header) = kind.header();\n-            if let IsAsync::NotAsync = header.asyncness;\n+            if header.asyncness == IsAsync::NotAsync;\n             // Check that this function returns `impl Future`\n             if let FnRetTy::Return(ret_ty) = decl.output;\n             if let Some((trait_ref, output_lifetimes)) = future_trait_ref(cx, ret_ty);\n@@ -178,7 +178,7 @@ fn desugared_async_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>)\n         if args.len() == 1;\n         if let Expr{kind: ExprKind::Closure(_, _, body_id, ..), ..} = args[0];\n         let closure_body = cx.tcx.hir().body(body_id);\n-        if let Some(GeneratorKind::Async(AsyncGeneratorKind::Block)) = closure_body.generator_kind;\n+        if closure_body.generator_kind == Some(GeneratorKind::Async(AsyncGeneratorKind::Block));\n         then {\n             return Some(closure_body);\n         }"}, {"sha": "a4d3f0bfb6c1b21504854980c66574e6538e399e", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -178,15 +178,15 @@ pub(super) fn check<'tcx>(\n             hir::ExprKind::Index(..) | hir::ExprKind::MethodCall(..) => {\n                 check_general_case(cx, name, method_span, &args[0], &args[1], expr.span, None);\n             },\n-            hir::ExprKind::Block(block, _) => {\n-                if let BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) = block.rules {\n-                    if let Some(block_expr) = block.expr {\n-                        if let hir::ExprKind::MethodCall(..) = block_expr.kind {\n-                            check_general_case(cx, name, method_span, &args[0], &args[1], expr.span, None);\n-                        }\n+            hir::ExprKind::Block(block, _)\n+                if block.rules == BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) =>\n+            {\n+                if let Some(block_expr) = block.expr {\n+                    if let hir::ExprKind::MethodCall(..) = block_expr.kind {\n+                        check_general_case(cx, name, method_span, &args[0], &args[1], expr.span, None);\n                     }\n                 }\n-            },\n+            }\n             _ => (),\n         }\n     }"}, {"sha": "f45e68233a1777f5c0052e7b0a0758b024a1c306", "filename": "clippy_lints/src/modulo_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> LateLintPass<'tcx> for ModuloArithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         match &expr.kind {\n             ExprKind::Binary(op, lhs, rhs) | ExprKind::AssignOp(op, lhs, rhs) => {\n-                if let BinOpKind::Rem = op.node {\n+                if op.node == BinOpKind::Rem {\n                     let lhs_operand = analyze_operand(lhs, cx, expr);\n                     let rhs_operand = analyze_operand(rhs, cx, expr);\n                     if_chain! {"}, {"sha": "91944653500bbde663f4e14c9226279eca4fcacc", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -248,7 +248,7 @@ fn check_comparison<'a, 'tcx>(\n         if l_ty.is_bool() && r_ty.is_bool() {\n             let mut applicability = Applicability::MachineApplicable;\n \n-            if let BinOpKind::Eq = op.node {\n+            if op.node == BinOpKind::Eq {\n                 let expression_info = one_side_is_unary_not(left_side, right_side);\n                 if expression_info.one_side_is_unary_not {\n                     span_lint_and_sugg("}, {"sha": "1b15d29439f780cdee65e26b1dcf002c12aea846", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -46,7 +46,7 @@ impl<'tcx> LateLintPass<'tcx> for NegMultiply {\n fn check_mul(cx: &LateContext<'_>, span: Span, lit: &Expr<'_>, exp: &Expr<'_>) {\n     if_chain! {\n         if let ExprKind::Lit(ref l) = lit.kind;\n-        if let Constant::Int(1) = consts::lit_to_constant(&l.node, cx.typeck_results().expr_ty_opt(lit));\n+        if consts::lit_to_constant(&l.node, cx.typeck_results().expr_ty_opt(lit)) == Constant::Int(1);\n         if cx.typeck_results().expr_ty(exp).is_integral();\n         then {\n             span_lint(cx, NEG_MULTIPLY, span, \"negation by multiplying with `-1`\");"}, {"sha": "0ac27f1cba2262ce1a8c1423678ac787b67d966e", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -69,7 +69,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n         }) = item.kind\n         {\n             for assoc_item in items {\n-                if let hir::AssocItemKind::Fn { has_self: false } = assoc_item.kind {\n+                if assoc_item.kind == (hir::AssocItemKind::Fn { has_self: false }) {\n                     let impl_item = cx.tcx.hir().impl_item(assoc_item.id);\n                     if in_external_macro(cx.sess(), impl_item.span) {\n                         return;"}, {"sha": "0973e3a1768237bd1c0ed9b8d161d63234102a91", "filename": "clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -81,7 +81,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n             if let Some(trait_ref) = &hir_impl.of_trait;\n             if let Some(trait_id) = trait_ref.trait_def_id();\n             if send_trait == trait_id;\n-            if let ImplPolarity::Positive = hir_impl.polarity;\n+            if hir_impl.polarity == ImplPolarity::Positive;\n             if let Some(ty_trait_ref) = cx.tcx.impl_trait_ref(item.def_id);\n             if let self_ty = ty_trait_ref.self_ty();\n             if let ty::Adt(adt_def, impl_trait_substs) = self_ty.kind();"}, {"sha": "0f9e5ada3a8a4e1186a5f5471e9c270272ac440f", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -26,6 +26,9 @@ declare_clippy_lint! {\n \n declare_lint_pass!(OverflowCheckConditional => [OVERFLOW_CHECK_CONDITIONAL]);\n \n+const OVERFLOW_MSG: &str = \"you are trying to use classic C overflow conditions that will fail in Rust\";\n+const UNDERFLOW_MSG: &str = \"you are trying to use classic C underflow conditions that will fail in Rust\";\n+\n impl<'tcx> LateLintPass<'tcx> for OverflowCheckConditional {\n     // a + b < a, a > a + b, a < a - b, a - b > a\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n@@ -40,17 +43,11 @@ impl<'tcx> LateLintPass<'tcx> for OverflowCheckConditional {\n             if cx.typeck_results().expr_ty(ident1).is_integral();\n             if cx.typeck_results().expr_ty(ident2).is_integral();\n             then {\n-                if let BinOpKind::Lt = op.node {\n-                    if let BinOpKind::Add = op2.node {\n-                        span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n-                            \"you are trying to use classic C overflow conditions that will fail in Rust\");\n-                    }\n+                if op.node == BinOpKind::Lt && op2.node == BinOpKind::Add {\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, OVERFLOW_MSG);\n                 }\n-                if let BinOpKind::Gt = op.node {\n-                    if let BinOpKind::Sub = op2.node {\n-                        span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n-                            \"you are trying to use classic C underflow conditions that will fail in Rust\");\n-                    }\n+                if op.node == BinOpKind::Gt && op2.node == BinOpKind::Sub {\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, UNDERFLOW_MSG);\n                 }\n             }\n         }\n@@ -65,17 +62,11 @@ impl<'tcx> LateLintPass<'tcx> for OverflowCheckConditional {\n             if cx.typeck_results().expr_ty(ident1).is_integral();\n             if cx.typeck_results().expr_ty(ident2).is_integral();\n             then {\n-                if let BinOpKind::Gt = op.node {\n-                    if let BinOpKind::Add = op2.node {\n-                        span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n-                            \"you are trying to use classic C overflow conditions that will fail in Rust\");\n-                    }\n+                if op.node == BinOpKind::Gt && op2.node == BinOpKind::Add {\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, OVERFLOW_MSG);\n                 }\n-                if let BinOpKind::Lt = op.node {\n-                    if let BinOpKind::Sub = op2.node {\n-                        span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n-                            \"you are trying to use classic C underflow conditions that will fail in Rust\");\n-                    }\n+                if op.node == BinOpKind::Lt && op2.node == BinOpKind::Sub {\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, UNDERFLOW_MSG);\n                 }\n             }\n         }"}, {"sha": "919d4e11e5a060637fb35ab2012a802f80f47aa6", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -41,25 +41,23 @@ impl_lint_pass!(RedundantPubCrate => [REDUNDANT_PUB_CRATE]);\n impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if let VisibilityKind::Crate { .. } = item.vis.node {\n-            if !cx.access_levels.is_exported(item.def_id) {\n-                if let Some(false) = self.is_exported.last() {\n-                    let span = item.span.with_hi(item.ident.span.hi());\n-                    let descr = cx.tcx.def_kind(item.def_id).descr(item.def_id.to_def_id());\n-                    span_lint_and_then(\n-                        cx,\n-                        REDUNDANT_PUB_CRATE,\n-                        span,\n-                        &format!(\"pub(crate) {} inside private module\", descr),\n-                        |diag| {\n-                            diag.span_suggestion(\n-                                item.vis.span,\n-                                \"consider using\",\n-                                \"pub\".to_string(),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        },\n-                    );\n-                }\n+            if !cx.access_levels.is_exported(item.def_id) && self.is_exported.last() == Some(&false) {\n+                let span = item.span.with_hi(item.ident.span.hi());\n+                let descr = cx.tcx.def_kind(item.def_id).descr(item.def_id.to_def_id());\n+                span_lint_and_then(\n+                    cx,\n+                    REDUNDANT_PUB_CRATE,\n+                    span,\n+                    &format!(\"pub(crate) {} inside private module\", descr),\n+                    |diag| {\n+                        diag.span_suggestion(\n+                            item.vis.span,\n+                            \"consider using\",\n+                            \"pub\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    },\n+                );\n             }\n         }\n "}, {"sha": "710de773e9c4678ae8ed329b00f8227230641392", "filename": "clippy_lints/src/repeat_once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frepeat_once.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for RepeatOnce {\n         if_chain! {\n             if let ExprKind::MethodCall(path, _, [receiver, count], _) = &expr.kind;\n             if path.ident.name == sym!(repeat);\n-            if let Some(Constant::Int(1)) = constant_context(cx, cx.typeck_results()).expr(count);\n+            if constant_context(cx, cx.typeck_results()).expr(count) == Some(Constant::Int(1));\n             if !in_macro(receiver.span);\n             then {\n                 let ty = cx.typeck_results().expr_ty(receiver).peel_refs();"}, {"sha": "ef80663d1da41ecdce20d5b885be1482f14b437f", "filename": "clippy_lints/src/transmuting_null.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -49,8 +49,8 @@ impl<'tcx> LateLintPass<'tcx> for TransmutingNull {\n                 let mut const_eval_context = constant_context(cx, cx.typeck_results());\n                 if_chain! {\n                     if let ExprKind::Path(ref _qpath) = arg.kind;\n-                    let x = const_eval_context.expr(arg);\n-                    if let Some(Constant::RawPtr(0)) = x;\n+                    if let Some(Constant::RawPtr(x)) = const_eval_context.expr(arg);\n+                    if x == 0;\n                     then {\n                         span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG)\n                     }"}, {"sha": "e0746ce4d8121b115f1da360d5b2e9756aaa3c06", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -32,7 +32,7 @@ impl<'tcx> LateLintPass<'tcx> for ZeroDiv {\n         // check for instances of 0.0/0.0\n         if_chain! {\n             if let ExprKind::Binary(ref op, left, right) = expr.kind;\n-            if let BinOpKind::Div = op.node;\n+            if op.node == BinOpKind::Div;\n             // TODO - constant_simple does not fold many operations involving floats.\n             // That's probably fine for this lint - it's pretty unlikely that someone would\n             // do something like 0.0/(2.0 - 2.0), but it would be nice to warn on that case too."}, {"sha": "00cf8a4d077f615310d2aec672d1ab9d9f76f095", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1508,7 +1508,7 @@ pub fn is_try<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'tcx>) -> Option<&'tc\n \n     if let ExprKind::Match(_, arms, ref source) = expr.kind {\n         // desugared from a `?` operator\n-        if let MatchSource::TryDesugar = *source {\n+        if *source == MatchSource::TryDesugar {\n             return Some(expr);\n         }\n "}, {"sha": "7ad21044d7d03919c970047ebfe5db7a20b0b61b", "filename": "clippy_utils/src/numeric_literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fnumeric_literal.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -74,7 +74,7 @@ impl<'a> NumericLiteral<'a> {\n         };\n \n         // Grab part of the literal after prefix, if present.\n-        let (prefix, mut sans_prefix) = if let Radix::Decimal = radix {\n+        let (prefix, mut sans_prefix) = if radix == Radix::Decimal {\n             (None, lit)\n         } else {\n             let (p, s) = lit.split_at(2);\n@@ -179,7 +179,7 @@ impl<'a> NumericLiteral<'a> {\n \n         // The exponent may have a sign, output it early, otherwise it will be\n         // treated as a digit\n-        if let Some('-') = digits.clone().next() {\n+        if digits.clone().next() == Some('-') {\n             let _ = digits.next();\n             output.push('-');\n         }"}, {"sha": "5b0efb1fd7132811c449eb408729f4ea08f40870", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -311,7 +311,7 @@ impl<'a> Sugg<'a> {\n /// Return `true` if `sugg` is enclosed in parenthesis.\n fn has_enclosing_paren(sugg: impl AsRef<str>) -> bool {\n     let mut chars = sugg.as_ref().chars();\n-    if let Some('(') = chars.next() {\n+    if chars.next() == Some('(') {\n         let mut depth = 1;\n         for c in &mut chars {\n             if c == '(' {"}, {"sha": "34206b5ae2b21a14291aa6c3c7c2af0f9b579d11", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -65,7 +65,7 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n     fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, bk: ty::BorrowKind) {\n-        if let ty::BorrowKind::MutBorrow = bk {\n+        if bk == ty::BorrowKind::MutBorrow {\n             self.update(cmt);\n         }\n     }"}, {"sha": "12f550d9c9a805ad8023cb11ea8223529c53ff92", "filename": "tests/ui/branches_sharing_code/shared_at_bottom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,4 +1,4 @@\n-#![allow(dead_code)]\n+#![allow(dead_code, clippy::equatable_if_let)]\n #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n \n // This tests the branches_sharing_code lint at the end of blocks"}, {"sha": "bb6c4c0703d5168579216e7b37fd571e94570d52", "filename": "tests/ui/collapsible_else_if.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fcollapsible_else_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fcollapsible_else_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_else_if.fixed?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(clippy::assertions_on_constants)]\n+#![allow(clippy::assertions_on_constants, clippy::equatable_if_let)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "6d4f688db8c0a7a80114ea1e2842f914fc94881c", "filename": "tests/ui/collapsible_else_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fcollapsible_else_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fcollapsible_else_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_else_if.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(clippy::assertions_on_constants)]\n+#![allow(clippy::assertions_on_constants, clippy::equatable_if_let)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "5b0e4a473c4ad708d167625ed559ec49c1cb6b35", "filename": "tests/ui/collapsible_if.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fcollapsible_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fcollapsible_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.fixed?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(clippy::assertions_on_constants)]\n+#![allow(clippy::assertions_on_constants, clippy::equatable_if_let)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "cd231a5d7abb0852161d0dab921956d654ae73b4", "filename": "tests/ui/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(clippy::assertions_on_constants)]\n+#![allow(clippy::assertions_on_constants, clippy::equatable_if_let)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "603ae7dc9eb117308cdfa37116187803750c4927", "filename": "tests/ui/collapsible_match.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,5 +1,10 @@\n #![warn(clippy::collapsible_match)]\n-#![allow(clippy::needless_return, clippy::no_effect, clippy::single_match)]\n+#![allow(\n+    clippy::needless_return,\n+    clippy::no_effect,\n+    clippy::single_match,\n+    clippy::equatable_if_let\n+)]\n \n fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>) {\n     // match without block"}, {"sha": "5f18b693502953a09d94d5cdcc10eb09a0bef905", "filename": "tests/ui/collapsible_match.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fcollapsible_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fcollapsible_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match.stderr?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,5 +1,5 @@\n error: this `match` can be collapsed into the outer `match`\n-  --> $DIR/collapsible_match.rs:7:20\n+  --> $DIR/collapsible_match.rs:12:20\n    |\n LL |           Ok(val) => match val {\n    |  ____________________^\n@@ -10,15 +10,15 @@ LL | |         },\n    |\n    = note: `-D clippy::collapsible-match` implied by `-D warnings`\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:7:12\n+  --> $DIR/collapsible_match.rs:12:12\n    |\n LL |         Ok(val) => match val {\n    |            ^^^ replace this binding\n LL |             Some(n) => foo(n),\n    |             ^^^^^^^ with this pattern\n \n error: this `match` can be collapsed into the outer `match`\n-  --> $DIR/collapsible_match.rs:16:20\n+  --> $DIR/collapsible_match.rs:21:20\n    |\n LL |           Ok(val) => match val {\n    |  ____________________^\n@@ -28,31 +28,31 @@ LL | |         },\n    | |_________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:16:12\n+  --> $DIR/collapsible_match.rs:21:12\n    |\n LL |         Ok(val) => match val {\n    |            ^^^ replace this binding\n LL |             Some(n) => foo(n),\n    |             ^^^^^^^ with this pattern\n \n error: this `if let` can be collapsed into the outer `if let`\n-  --> $DIR/collapsible_match.rs:25:9\n+  --> $DIR/collapsible_match.rs:30:9\n    |\n LL | /         if let Some(n) = val {\n LL | |             take(n);\n LL | |         }\n    | |_________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:24:15\n+  --> $DIR/collapsible_match.rs:29:15\n    |\n LL |     if let Ok(val) = res_opt {\n    |               ^^^ replace this binding\n LL |         if let Some(n) = val {\n    |                ^^^^^^^ with this pattern\n \n error: this `if let` can be collapsed into the outer `if let`\n-  --> $DIR/collapsible_match.rs:32:9\n+  --> $DIR/collapsible_match.rs:37:9\n    |\n LL | /         if let Some(n) = val {\n LL | |             take(n);\n@@ -62,15 +62,15 @@ LL | |         }\n    | |_________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:31:15\n+  --> $DIR/collapsible_match.rs:36:15\n    |\n LL |     if let Ok(val) = res_opt {\n    |               ^^^ replace this binding\n LL |         if let Some(n) = val {\n    |                ^^^^^^^ with this pattern\n \n error: this `match` can be collapsed into the outer `if let`\n-  --> $DIR/collapsible_match.rs:43:9\n+  --> $DIR/collapsible_match.rs:48:9\n    |\n LL | /         match val {\n LL | |             Some(n) => foo(n),\n@@ -79,7 +79,7 @@ LL | |         }\n    | |_________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:42:15\n+  --> $DIR/collapsible_match.rs:47:15\n    |\n LL |     if let Ok(val) = res_opt {\n    |               ^^^ replace this binding\n@@ -88,23 +88,23 @@ LL |             Some(n) => foo(n),\n    |             ^^^^^^^ with this pattern\n \n error: this `if let` can be collapsed into the outer `match`\n-  --> $DIR/collapsible_match.rs:52:13\n+  --> $DIR/collapsible_match.rs:57:13\n    |\n LL | /             if let Some(n) = val {\n LL | |                 take(n);\n LL | |             }\n    | |_____________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:51:12\n+  --> $DIR/collapsible_match.rs:56:12\n    |\n LL |         Ok(val) => {\n    |            ^^^ replace this binding\n LL |             if let Some(n) = val {\n    |                    ^^^^^^^ with this pattern\n \n error: this `match` can be collapsed into the outer `if let`\n-  --> $DIR/collapsible_match.rs:61:9\n+  --> $DIR/collapsible_match.rs:66:9\n    |\n LL | /         match val {\n LL | |             Some(n) => foo(n),\n@@ -113,7 +113,7 @@ LL | |         }\n    | |_________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:60:15\n+  --> $DIR/collapsible_match.rs:65:15\n    |\n LL |     if let Ok(val) = res_opt {\n    |               ^^^ replace this binding\n@@ -122,7 +122,7 @@ LL |             Some(n) => foo(n),\n    |             ^^^^^^^ with this pattern\n \n error: this `if let` can be collapsed into the outer `match`\n-  --> $DIR/collapsible_match.rs:72:13\n+  --> $DIR/collapsible_match.rs:77:13\n    |\n LL | /             if let Some(n) = val {\n LL | |                 take(n);\n@@ -132,15 +132,15 @@ LL | |             }\n    | |_____________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:71:12\n+  --> $DIR/collapsible_match.rs:76:12\n    |\n LL |         Ok(val) => {\n    |            ^^^ replace this binding\n LL |             if let Some(n) = val {\n    |                    ^^^^^^^ with this pattern\n \n error: this `match` can be collapsed into the outer `match`\n-  --> $DIR/collapsible_match.rs:83:20\n+  --> $DIR/collapsible_match.rs:88:20\n    |\n LL |           Ok(val) => match val {\n    |  ____________________^\n@@ -150,15 +150,15 @@ LL | |         },\n    | |_________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:83:12\n+  --> $DIR/collapsible_match.rs:88:12\n    |\n LL |         Ok(val) => match val {\n    |            ^^^ replace this binding\n LL |             Some(n) => foo(n),\n    |             ^^^^^^^ with this pattern\n \n error: this `match` can be collapsed into the outer `match`\n-  --> $DIR/collapsible_match.rs:92:22\n+  --> $DIR/collapsible_match.rs:97:22\n    |\n LL |           Some(val) => match val {\n    |  ______________________^\n@@ -168,7 +168,7 @@ LL | |         },\n    | |_________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:92:14\n+  --> $DIR/collapsible_match.rs:97:14\n    |\n LL |         Some(val) => match val {\n    |              ^^^ replace this binding"}, {"sha": "02c49aa0d7c1f4a0e9e8d2dd22c49cedbd9b2c88", "filename": "tests/ui/crashes/ice-3462.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fcrashes%2Fice-3462.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fcrashes%2Fice-3462.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3462.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::all)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(clippy::blacklisted_name, clippy::equatable_if_let)]\n #![allow(unused)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/3462"}, {"sha": "ba72cc237b4a58e1b0c51f5470f88273e6f87292", "filename": "tests/ui/equatable_if_let.fixed", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fequatable_if_let.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fequatable_if_let.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.fixed?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -0,0 +1,69 @@\n+// run-rustfix\n+\n+#![allow(unused_variables, dead_code)]\n+#![warn(clippy::equatable_if_let)]\n+\n+use std::cmp::Ordering;\n+\n+#[derive(PartialEq)]\n+enum Enum {\n+    TupleVariant(i32, u64),\n+    RecordVariant { a: i64, b: u32 },\n+    UnitVariant,\n+    Recursive(Struct),\n+}\n+\n+#[derive(PartialEq)]\n+struct Struct {\n+    a: i32,\n+    b: bool,\n+}\n+\n+enum NotPartialEq {\n+    A,\n+    B,\n+}\n+\n+enum NotStructuralEq {\n+    A,\n+    B,\n+}\n+\n+impl PartialEq for NotStructuralEq {\n+    fn eq(&self, _: &NotStructuralEq) -> bool {\n+        false\n+    }\n+}\n+\n+fn main() {\n+    let a = 2;\n+    let b = 3;\n+    let c = Some(2);\n+    let d = Struct { a: 2, b: false };\n+    let e = Enum::UnitVariant;\n+    let f = NotPartialEq::A;\n+    let g = NotStructuralEq::A;\n+\n+    // true\n+\n+    if a == 2 {}\n+    if a.cmp(&b) == Ordering::Greater {}\n+    if c == Some(2) {}\n+    if d == (Struct { a: 2, b: false }) {}\n+    if e == Enum::TupleVariant(32, 64) {}\n+    if e == (Enum::RecordVariant { a: 64, b: 32 }) {}\n+    if e == Enum::UnitVariant {}\n+    if (e, &d) == (Enum::UnitVariant, &Struct { a: 2, b: false }) {}\n+\n+    // false\n+\n+    if let 2 | 3 = a {}\n+    if let x @ 2 = a {}\n+    if let Some(3 | 4) = c {}\n+    if let Struct { a, b: false } = d {}\n+    if let Struct { a: 2, b: x } = d {}\n+    if let NotPartialEq::A = f {}\n+    if g == NotStructuralEq::A {}\n+    if let Some(NotPartialEq::A) = Some(f) {}\n+    if Some(g) == Some(NotStructuralEq::A) {}\n+}"}, {"sha": "12526ca193db6b6fd6b1ca3244070a7faa5c9a20", "filename": "tests/ui/equatable_if_let.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -0,0 +1,69 @@\n+// run-rustfix\n+\n+#![allow(unused_variables, dead_code)]\n+#![warn(clippy::equatable_if_let)]\n+\n+use std::cmp::Ordering;\n+\n+#[derive(PartialEq)]\n+enum Enum {\n+    TupleVariant(i32, u64),\n+    RecordVariant { a: i64, b: u32 },\n+    UnitVariant,\n+    Recursive(Struct),\n+}\n+\n+#[derive(PartialEq)]\n+struct Struct {\n+    a: i32,\n+    b: bool,\n+}\n+\n+enum NotPartialEq {\n+    A,\n+    B,\n+}\n+\n+enum NotStructuralEq {\n+    A,\n+    B,\n+}\n+\n+impl PartialEq for NotStructuralEq {\n+    fn eq(&self, _: &NotStructuralEq) -> bool {\n+        false\n+    }\n+}\n+\n+fn main() {\n+    let a = 2;\n+    let b = 3;\n+    let c = Some(2);\n+    let d = Struct { a: 2, b: false };\n+    let e = Enum::UnitVariant;\n+    let f = NotPartialEq::A;\n+    let g = NotStructuralEq::A;\n+\n+    // true\n+\n+    if let 2 = a {}\n+    if let Ordering::Greater = a.cmp(&b) {}\n+    if let Some(2) = c {}\n+    if let Struct { a: 2, b: false } = d {}\n+    if let Enum::TupleVariant(32, 64) = e {}\n+    if let Enum::RecordVariant { a: 64, b: 32 } = e {}\n+    if let Enum::UnitVariant = e {}\n+    if let (Enum::UnitVariant, &Struct { a: 2, b: false }) = (e, &d) {}\n+\n+    // false\n+\n+    if let 2 | 3 = a {}\n+    if let x @ 2 = a {}\n+    if let Some(3 | 4) = c {}\n+    if let Struct { a, b: false } = d {}\n+    if let Struct { a: 2, b: x } = d {}\n+    if let NotPartialEq::A = f {}\n+    if let NotStructuralEq::A = g {}\n+    if let Some(NotPartialEq::A) = Some(f) {}\n+    if let Some(NotStructuralEq::A) = Some(g) {}\n+}"}, {"sha": "79ef919384df28abc1032e096565ade0147f3d79", "filename": "tests/ui/equatable_if_let.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fequatable_if_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fequatable_if_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.stderr?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -0,0 +1,64 @@\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:49:8\n+   |\n+LL |     if let 2 = a {}\n+   |        ^^^^^^^^^ help: try: `a == 2`\n+   |\n+   = note: `-D clippy::equatable-if-let` implied by `-D warnings`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:50:8\n+   |\n+LL |     if let Ordering::Greater = a.cmp(&b) {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `a.cmp(&b) == Ordering::Greater`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:51:8\n+   |\n+LL |     if let Some(2) = c {}\n+   |        ^^^^^^^^^^^^^^^ help: try: `c == Some(2)`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:52:8\n+   |\n+LL |     if let Struct { a: 2, b: false } = d {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `d == (Struct { a: 2, b: false })`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:53:8\n+   |\n+LL |     if let Enum::TupleVariant(32, 64) = e {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == Enum::TupleVariant(32, 64)`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:54:8\n+   |\n+LL |     if let Enum::RecordVariant { a: 64, b: 32 } = e {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == (Enum::RecordVariant { a: 64, b: 32 })`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:55:8\n+   |\n+LL |     if let Enum::UnitVariant = e {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == Enum::UnitVariant`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:56:8\n+   |\n+LL |     if let (Enum::UnitVariant, &Struct { a: 2, b: false }) = (e, &d) {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(e, &d) == (Enum::UnitVariant, &Struct { a: 2, b: false })`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:66:8\n+   |\n+LL |     if let NotStructuralEq::A = g {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `g == NotStructuralEq::A`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:68:8\n+   |\n+LL |     if let Some(NotStructuralEq::A) = Some(g) {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(g) == Some(NotStructuralEq::A)`\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "69189d9e0c00d911637b320ba9e48b83e3716124", "filename": "tests/ui/if_same_then_else2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fif_same_then_else2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fif_same_then_else2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else2.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -2,6 +2,7 @@\n #![allow(\n     clippy::blacklisted_name,\n     clippy::collapsible_else_if,\n+    clippy::equatable_if_let,\n     clippy::collapsible_if,\n     clippy::ifs_same_cond,\n     clippy::needless_return,"}, {"sha": "cac788f859d1e0817dcf231b4fe0ead07896054f", "filename": "tests/ui/if_same_then_else2.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fif_same_then_else2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fif_same_then_else2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else2.stderr?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,5 +1,5 @@\n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:13:13\n+  --> $DIR/if_same_then_else2.rs:14:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -13,7 +13,7 @@ LL | |     } else {\n    |\n    = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:22:12\n+  --> $DIR/if_same_then_else2.rs:23:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -26,7 +26,7 @@ LL | |     }\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:34:13\n+  --> $DIR/if_same_then_else2.rs:35:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -35,7 +35,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:36:12\n+  --> $DIR/if_same_then_else2.rs:37:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -45,7 +45,7 @@ LL | |     }\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:41:13\n+  --> $DIR/if_same_then_else2.rs:42:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -54,7 +54,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:43:12\n+  --> $DIR/if_same_then_else2.rs:44:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -64,7 +64,7 @@ LL | |     }\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:91:21\n+  --> $DIR/if_same_then_else2.rs:92:21\n    |\n LL |       let _ = if true {\n    |  _____________________^\n@@ -73,7 +73,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:93:12\n+  --> $DIR/if_same_then_else2.rs:94:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -83,7 +83,7 @@ LL | |     };\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:98:13\n+  --> $DIR/if_same_then_else2.rs:99:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -92,7 +92,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:100:12\n+  --> $DIR/if_same_then_else2.rs:101:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -102,7 +102,7 @@ LL | |     }\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:122:20\n+  --> $DIR/if_same_then_else2.rs:123:20\n    |\n LL |       } else if true {\n    |  ____________________^\n@@ -112,7 +112,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:125:12\n+  --> $DIR/if_same_then_else2.rs:126:12\n    |\n LL |       } else {\n    |  ____________^"}, {"sha": "c611f76bf96055704ebb37927cf3ec16ae2765d4", "filename": "tests/ui/match_expr_like_matches_macro.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::match_like_matches_macro)]\n-#![allow(unreachable_patterns, dead_code)]\n+#![allow(unreachable_patterns, dead_code, clippy::equatable_if_let)]\n \n fn main() {\n     let x = Some(5);"}, {"sha": "2deeb84e74138151920ca91279cef789ebad2e79", "filename": "tests/ui/match_expr_like_matches_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::match_like_matches_macro)]\n-#![allow(unreachable_patterns, dead_code)]\n+#![allow(unreachable_patterns, dead_code, clippy::equatable_if_let)]\n \n fn main() {\n     let x = Some(5);"}, {"sha": "846d665d1d864d86dd9396dc23a379271252cb8e", "filename": "tests/ui/match_overlapping_arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fmatch_overlapping_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fmatch_overlapping_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_overlapping_arm.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -2,7 +2,7 @@\n #![feature(half_open_range_patterns)]\n #![warn(clippy::match_overlapping_arm)]\n #![allow(clippy::redundant_pattern_matching)]\n-#![allow(clippy::if_same_then_else)]\n+#![allow(clippy::if_same_then_else, clippy::equatable_if_let)]\n \n /// Tests for match_overlapping_arm\n "}, {"sha": "6cbb4d32b0d71287c8e35a8e648d9436cbb0aef5", "filename": "tests/ui/match_ref_pats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fmatch_ref_pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fmatch_ref_pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_ref_pats.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::match_ref_pats)]\n+#![allow(clippy::equatable_if_let)]\n \n fn ref_pats() {\n     {"}, {"sha": "072aff445e97f2b330a4fdc56e58bff33fa5a1b1", "filename": "tests/ui/match_ref_pats.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fmatch_ref_pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fmatch_ref_pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_ref_pats.stderr?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,5 +1,5 @@\n error: you don't need to add `&` to all patterns\n-  --> $DIR/match_ref_pats.rs:6:9\n+  --> $DIR/match_ref_pats.rs:7:9\n    |\n LL | /         match v {\n LL | |             &Some(v) => println!(\"{:?}\", v),\n@@ -16,7 +16,7 @@ LL ~             None => println!(\"none\"),\n    |\n \n error: you don't need to add `&` to all patterns\n-  --> $DIR/match_ref_pats.rs:17:5\n+  --> $DIR/match_ref_pats.rs:18:5\n    |\n LL | /     match tup {\n LL | |         &(v, 1) => println!(\"{}\", v),\n@@ -31,7 +31,7 @@ LL ~         (v, 1) => println!(\"{}\", v),\n    |\n \n error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/match_ref_pats.rs:23:5\n+  --> $DIR/match_ref_pats.rs:24:5\n    |\n LL | /     match &w {\n LL | |         &Some(v) => println!(\"{:?}\", v),\n@@ -47,15 +47,15 @@ LL ~         None => println!(\"none\"),\n    |\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/match_ref_pats.rs:35:12\n+  --> $DIR/match_ref_pats.rs:36:12\n    |\n LL |     if let &None = a {\n    |     -------^^^^^---- help: try this: `if a.is_none()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: you don't need to add `&` to all patterns\n-  --> $DIR/match_ref_pats.rs:35:5\n+  --> $DIR/match_ref_pats.rs:36:5\n    |\n LL | /     if let &None = a {\n LL | |         println!(\"none\");\n@@ -68,13 +68,13 @@ LL |     if let None = *a {\n    |            ~~~~   ~~\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/match_ref_pats.rs:40:12\n+  --> $DIR/match_ref_pats.rs:41:12\n    |\n LL |     if let &None = &b {\n    |     -------^^^^^----- help: try this: `if b.is_none()`\n \n error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/match_ref_pats.rs:40:5\n+  --> $DIR/match_ref_pats.rs:41:5\n    |\n LL | /     if let &None = &b {\n LL | |         println!(\"none\");\n@@ -87,7 +87,7 @@ LL |     if let None = b {\n    |            ~~~~   ~\n \n error: you don't need to add `&` to all patterns\n-  --> $DIR/match_ref_pats.rs:67:9\n+  --> $DIR/match_ref_pats.rs:68:9\n    |\n LL | /         match foo_variant!(0) {\n LL | |             &Foo::A => println!(\"A\"),"}, {"sha": "a2e3988daff1bdc41d38db637a331abf9721c987", "filename": "tests/ui/needless_bool/fixable.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fneedless_bool%2Ffixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fneedless_bool%2Ffixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Ffixable.fixed?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -6,6 +6,7 @@\n     dead_code,\n     clippy::no_effect,\n     clippy::if_same_then_else,\n+    clippy::equatable_if_let,\n     clippy::needless_return,\n     clippy::self_named_constructors\n )]"}, {"sha": "75805e85789194dbde588fb70e85d7f487d4d16b", "filename": "tests/ui/needless_bool/fixable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fneedless_bool%2Ffixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fneedless_bool%2Ffixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Ffixable.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -6,6 +6,7 @@\n     dead_code,\n     clippy::no_effect,\n     clippy::if_same_then_else,\n+    clippy::equatable_if_let,\n     clippy::needless_return,\n     clippy::self_named_constructors\n )]"}, {"sha": "1fa12add16739df015d536a9a49c242450473809", "filename": "tests/ui/needless_bool/fixable.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fneedless_bool%2Ffixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fneedless_bool%2Ffixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Ffixable.stderr?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,5 +1,5 @@\n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:40:5\n+  --> $DIR/fixable.rs:41:5\n    |\n LL | /     if x {\n LL | |         true\n@@ -11,7 +11,7 @@ LL | |     };\n    = note: `-D clippy::needless-bool` implied by `-D warnings`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:45:5\n+  --> $DIR/fixable.rs:46:5\n    |\n LL | /     if x {\n LL | |         false\n@@ -21,7 +21,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `!x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:50:5\n+  --> $DIR/fixable.rs:51:5\n    |\n LL | /     if x && y {\n LL | |         false\n@@ -31,7 +31,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `!(x && y)`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:70:5\n+  --> $DIR/fixable.rs:71:5\n    |\n LL | /     if x {\n LL | |         return true;\n@@ -41,7 +41,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:78:5\n+  --> $DIR/fixable.rs:79:5\n    |\n LL | /     if x {\n LL | |         return false;\n@@ -51,7 +51,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return !x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:86:5\n+  --> $DIR/fixable.rs:87:5\n    |\n LL | /     if x && y {\n LL | |         return true;\n@@ -61,7 +61,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return x && y`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:94:5\n+  --> $DIR/fixable.rs:95:5\n    |\n LL | /     if x && y {\n LL | |         return false;\n@@ -71,33 +71,33 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return !(x && y)`\n \n error: equality checks against true are unnecessary\n-  --> $DIR/fixable.rs:102:8\n+  --> $DIR/fixable.rs:103:8\n    |\n LL |     if x == true {};\n    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n    |\n    = note: `-D clippy::bool-comparison` implied by `-D warnings`\n \n error: equality checks against false can be replaced by a negation\n-  --> $DIR/fixable.rs:106:8\n+  --> $DIR/fixable.rs:107:8\n    |\n LL |     if x == false {};\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n error: equality checks against true are unnecessary\n-  --> $DIR/fixable.rs:116:8\n+  --> $DIR/fixable.rs:117:8\n    |\n LL |     if x == true {};\n    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n \n error: equality checks against false can be replaced by a negation\n-  --> $DIR/fixable.rs:117:8\n+  --> $DIR/fixable.rs:118:8\n    |\n LL |     if x == false {};\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:126:12\n+  --> $DIR/fixable.rs:127:12\n    |\n LL |       } else if returns_bool() {\n    |  ____________^"}, {"sha": "9c999e12b4cbc4c6d5a3afed29e97cffa3638623", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -3,7 +3,12 @@\n \n #![feature(let_else)]\n #![allow(unused)]\n-#![allow(clippy::if_same_then_else, clippy::single_match, clippy::needless_bool)]\n+#![allow(\n+    clippy::if_same_then_else,\n+    clippy::single_match,\n+    clippy::needless_bool,\n+    clippy::equatable_if_let\n+)]\n #![warn(clippy::needless_return)]\n \n macro_rules! the_answer {"}, {"sha": "da7dcf4f0a9ea377596a830996947f6d5afa60fb", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -3,7 +3,12 @@\n \n #![feature(let_else)]\n #![allow(unused)]\n-#![allow(clippy::if_same_then_else, clippy::single_match, clippy::needless_bool)]\n+#![allow(\n+    clippy::if_same_then_else,\n+    clippy::single_match,\n+    clippy::needless_bool,\n+    clippy::equatable_if_let\n+)]\n #![warn(clippy::needless_return)]\n \n macro_rules! the_answer {"}, {"sha": "2e802cff1e686917ddef5a3c5e1ba7421c617ec4", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,193 +1,193 @@\n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:20:5\n+  --> $DIR/needless_return.rs:25:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n    |\n    = note: `-D clippy::needless-return` implied by `-D warnings`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:24:5\n+  --> $DIR/needless_return.rs:29:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:29:9\n+  --> $DIR/needless_return.rs:34:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:31:9\n+  --> $DIR/needless_return.rs:36:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:37:17\n+  --> $DIR/needless_return.rs:42:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:39:13\n+  --> $DIR/needless_return.rs:44:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:46:9\n+  --> $DIR/needless_return.rs:51:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:48:16\n+  --> $DIR/needless_return.rs:53:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:56:5\n+  --> $DIR/needless_return.rs:61:5\n    |\n LL |     return;\n    |     ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:61:9\n+  --> $DIR/needless_return.rs:66:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:63:9\n+  --> $DIR/needless_return.rs:68:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:70:14\n+  --> $DIR/needless_return.rs:75:14\n    |\n LL |         _ => return,\n    |              ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:85:9\n+  --> $DIR/needless_return.rs:90:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:87:9\n+  --> $DIR/needless_return.rs:92:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:108:32\n+  --> $DIR/needless_return.rs:113:32\n    |\n LL |         bar.unwrap_or_else(|_| return)\n    |                                ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:113:13\n+  --> $DIR/needless_return.rs:118:13\n    |\n LL |             return;\n    |             ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:115:20\n+  --> $DIR/needless_return.rs:120:20\n    |\n LL |         let _ = || return;\n    |                    ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:121:32\n+  --> $DIR/needless_return.rs:126:32\n    |\n LL |         res.unwrap_or_else(|_| return Foo)\n    |                                ^^^^^^^^^^ help: remove `return`: `Foo`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:130:5\n+  --> $DIR/needless_return.rs:135:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:134:5\n+  --> $DIR/needless_return.rs:139:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:139:9\n+  --> $DIR/needless_return.rs:144:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:141:9\n+  --> $DIR/needless_return.rs:146:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:147:17\n+  --> $DIR/needless_return.rs:152:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:149:13\n+  --> $DIR/needless_return.rs:154:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:156:9\n+  --> $DIR/needless_return.rs:161:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:158:16\n+  --> $DIR/needless_return.rs:163:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:166:5\n+  --> $DIR/needless_return.rs:171:5\n    |\n LL |     return;\n    |     ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:171:9\n+  --> $DIR/needless_return.rs:176:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:173:9\n+  --> $DIR/needless_return.rs:178:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:180:14\n+  --> $DIR/needless_return.rs:185:14\n    |\n LL |         _ => return,\n    |              ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:195:9\n+  --> $DIR/needless_return.rs:200:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:197:9\n+  --> $DIR/needless_return.rs:202:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`"}, {"sha": "a3ebe5d0703846bd09a131d94a0008700eba1b9c", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -2,7 +2,7 @@\n // run-rustfix\n #![warn(clippy::option_if_let_else)]\n #![allow(clippy::redundant_closure)]\n-#![allow(clippy::ref_option_ref)]\n+#![allow(clippy::ref_option_ref, clippy::equatable_if_let)]\n \n fn bad1(string: Option<&str>) -> (bool, &str) {\n     string.map_or((false, \"hello\"), |x| (true, x))"}, {"sha": "b11df3db60f57edfa56913f4af239b343259ecfa", "filename": "tests/ui/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -2,7 +2,7 @@\n // run-rustfix\n #![warn(clippy::option_if_let_else)]\n #![allow(clippy::redundant_closure)]\n-#![allow(clippy::ref_option_ref)]\n+#![allow(clippy::ref_option_ref, clippy::equatable_if_let)]\n \n fn bad1(string: Option<&str>) -> (bool, &str) {\n     if let Some(x) = string {"}, {"sha": "ce3229f17591e472251795bd1cd24646ead95a5b", "filename": "tests/ui/redundant_pattern_matching_drop_order.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fredundant_pattern_matching_drop_order.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fredundant_pattern_matching_drop_order.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_drop_order.fixed?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -2,7 +2,7 @@\n \n // Issue #5746\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::if_same_then_else)]\n+#![allow(clippy::if_same_then_else, clippy::equatable_if_let)]\n use std::task::Poll::{Pending, Ready};\n \n fn main() {"}, {"sha": "29b8543cf473a92241c7db8a2586922f966452a6", "filename": "tests/ui/redundant_pattern_matching_drop_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fredundant_pattern_matching_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fredundant_pattern_matching_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_drop_order.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -2,7 +2,7 @@\n \n // Issue #5746\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::if_same_then_else)]\n+#![allow(clippy::if_same_then_else, clippy::equatable_if_let)]\n use std::task::Poll::{Pending, Ready};\n \n fn main() {"}, {"sha": "813e268a60c3debe1b49c4a4b4e81bad6f5b4f7d", "filename": "tests/ui/redundant_pattern_matching_option.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.fixed?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -6,6 +6,7 @@\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,\n+    clippy::equatable_if_let,\n     clippy::if_same_then_else\n )]\n "}, {"sha": "82a98468943dfcffc67a064be39a1a3dd4ba6f6f", "filename": "tests/ui/redundant_pattern_matching_option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fredundant_pattern_matching_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fredundant_pattern_matching_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -6,6 +6,7 @@\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,\n+    clippy::equatable_if_let,\n     clippy::if_same_then_else\n )]\n "}, {"sha": "3a58e5ad7bee96ff94202e42dc5cf99ec17928fb", "filename": "tests/ui/redundant_pattern_matching_option.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.stderr?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,49 +1,49 @@\n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:13:12\n+  --> $DIR/redundant_pattern_matching_option.rs:14:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:15:12\n+  --> $DIR/redundant_pattern_matching_option.rs:16:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:17:12\n+  --> $DIR/redundant_pattern_matching_option.rs:18:12\n    |\n LL |     if let Some(_) = Some(42) {\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:23:15\n+  --> $DIR/redundant_pattern_matching_option.rs:24:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:25:15\n+  --> $DIR/redundant_pattern_matching_option.rs:26:15\n    |\n LL |     while let None = Some(42) {}\n    |     ----------^^^^----------- help: try this: `while Some(42).is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:27:15\n+  --> $DIR/redundant_pattern_matching_option.rs:28:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:30:15\n+  --> $DIR/redundant_pattern_matching_option.rs:31:15\n    |\n LL |     while let Some(_) = v.pop() {\n    |     ----------^^^^^^^---------- help: try this: `while v.pop().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:38:5\n+  --> $DIR/redundant_pattern_matching_option.rs:39:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -52,7 +52,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:43:5\n+  --> $DIR/redundant_pattern_matching_option.rs:44:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -61,7 +61,7 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:48:13\n+  --> $DIR/redundant_pattern_matching_option.rs:49:13\n    |\n LL |       let _ = match None::<()> {\n    |  _____________^\n@@ -71,49 +71,49 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:54:20\n+  --> $DIR/redundant_pattern_matching_option.rs:55:20\n    |\n LL |     let _ = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:58:20\n+  --> $DIR/redundant_pattern_matching_option.rs:59:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:60:19\n+  --> $DIR/redundant_pattern_matching_option.rs:61:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:79:12\n+  --> $DIR/redundant_pattern_matching_option.rs:80:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:81:12\n+  --> $DIR/redundant_pattern_matching_option.rs:82:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:83:15\n+  --> $DIR/redundant_pattern_matching_option.rs:84:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:85:15\n+  --> $DIR/redundant_pattern_matching_option.rs:86:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:87:5\n+  --> $DIR/redundant_pattern_matching_option.rs:88:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -122,7 +122,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:92:5\n+  --> $DIR/redundant_pattern_matching_option.rs:93:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,"}, {"sha": "3645f2c4bfdd2602ce3875322b49dc8924b9635f", "filename": "tests/ui/redundant_pattern_matching_poll.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fredundant_pattern_matching_poll.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fredundant_pattern_matching_poll.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_poll.fixed?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -6,6 +6,7 @@\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,\n+    clippy::equatable_if_let,\n     clippy::if_same_then_else\n )]\n "}, {"sha": "866c71b7cfa8034aa6fd1409fad780d8910d4e50", "filename": "tests/ui/redundant_pattern_matching_poll.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fredundant_pattern_matching_poll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fredundant_pattern_matching_poll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_poll.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -6,6 +6,7 @@\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,\n+    clippy::equatable_if_let,\n     clippy::if_same_then_else\n )]\n "}, {"sha": "1b480f3157f7072dd9be64e1059a22c4f80d1e5f", "filename": "tests/ui/redundant_pattern_matching_poll.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fredundant_pattern_matching_poll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fredundant_pattern_matching_poll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_poll.stderr?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,43 +1,43 @@\n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:15:12\n+  --> $DIR/redundant_pattern_matching_poll.rs:16:12\n    |\n LL |     if let Pending = Pending::<()> {}\n    |     -------^^^^^^^---------------- help: try this: `if Pending::<()>.is_pending()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:17:12\n+  --> $DIR/redundant_pattern_matching_poll.rs:18:12\n    |\n LL |     if let Ready(_) = Ready(42) {}\n    |     -------^^^^^^^^------------ help: try this: `if Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:19:12\n+  --> $DIR/redundant_pattern_matching_poll.rs:20:12\n    |\n LL |     if let Ready(_) = Ready(42) {\n    |     -------^^^^^^^^------------ help: try this: `if Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:25:15\n+  --> $DIR/redundant_pattern_matching_poll.rs:26:15\n    |\n LL |     while let Ready(_) = Ready(42) {}\n    |     ----------^^^^^^^^------------ help: try this: `while Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:27:15\n+  --> $DIR/redundant_pattern_matching_poll.rs:28:15\n    |\n LL |     while let Pending = Ready(42) {}\n    |     ----------^^^^^^^------------ help: try this: `while Ready(42).is_pending()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:29:15\n+  --> $DIR/redundant_pattern_matching_poll.rs:30:15\n    |\n LL |     while let Pending = Pending::<()> {}\n    |     ----------^^^^^^^---------------- help: try this: `while Pending::<()>.is_pending()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:35:5\n+  --> $DIR/redundant_pattern_matching_poll.rs:36:5\n    |\n LL | /     match Ready(42) {\n LL | |         Ready(_) => true,\n@@ -46,7 +46,7 @@ LL | |     };\n    | |_____^ help: try this: `Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:40:5\n+  --> $DIR/redundant_pattern_matching_poll.rs:41:5\n    |\n LL | /     match Pending::<()> {\n LL | |         Ready(_) => false,\n@@ -55,7 +55,7 @@ LL | |     };\n    | |_____^ help: try this: `Pending::<()>.is_pending()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:45:13\n+  --> $DIR/redundant_pattern_matching_poll.rs:46:13\n    |\n LL |       let _ = match Pending::<()> {\n    |  _____________^\n@@ -65,49 +65,49 @@ LL | |     };\n    | |_____^ help: try this: `Pending::<()>.is_pending()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:51:20\n+  --> $DIR/redundant_pattern_matching_poll.rs:52:20\n    |\n LL |     let _ = if let Ready(_) = poll { true } else { false };\n    |             -------^^^^^^^^------- help: try this: `if poll.is_ready()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:55:20\n+  --> $DIR/redundant_pattern_matching_poll.rs:56:20\n    |\n LL |     let _ = if let Ready(_) = gen_poll() {\n    |             -------^^^^^^^^------------- help: try this: `if gen_poll().is_ready()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:57:19\n+  --> $DIR/redundant_pattern_matching_poll.rs:58:19\n    |\n LL |     } else if let Pending = gen_poll() {\n    |            -------^^^^^^^------------- help: try this: `if gen_poll().is_pending()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:73:12\n+  --> $DIR/redundant_pattern_matching_poll.rs:74:12\n    |\n LL |     if let Ready(_) = Ready(42) {}\n    |     -------^^^^^^^^------------ help: try this: `if Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:75:12\n+  --> $DIR/redundant_pattern_matching_poll.rs:76:12\n    |\n LL |     if let Pending = Pending::<()> {}\n    |     -------^^^^^^^---------------- help: try this: `if Pending::<()>.is_pending()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:77:15\n+  --> $DIR/redundant_pattern_matching_poll.rs:78:15\n    |\n LL |     while let Ready(_) = Ready(42) {}\n    |     ----------^^^^^^^^------------ help: try this: `while Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:79:15\n+  --> $DIR/redundant_pattern_matching_poll.rs:80:15\n    |\n LL |     while let Pending = Pending::<()> {}\n    |     ----------^^^^^^^---------------- help: try this: `while Pending::<()>.is_pending()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:81:5\n+  --> $DIR/redundant_pattern_matching_poll.rs:82:5\n    |\n LL | /     match Ready(42) {\n LL | |         Ready(_) => true,\n@@ -116,7 +116,7 @@ LL | |     };\n    | |_____^ help: try this: `Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:86:5\n+  --> $DIR/redundant_pattern_matching_poll.rs:87:5\n    |\n LL | /     match Pending::<()> {\n LL | |         Ready(_) => false,"}, {"sha": "1e74ad2de655aa53c624c6c98bcf1be915f269dc", "filename": "tests/ui/while_let_on_iterator.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fwhile_let_on_iterator.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fwhile_let_on_iterator.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.fixed?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,7 +1,13 @@\n // run-rustfix\n \n #![warn(clippy::while_let_on_iterator)]\n-#![allow(clippy::never_loop, unreachable_code, unused_mut, dead_code)]\n+#![allow(\n+    clippy::never_loop,\n+    unreachable_code,\n+    unused_mut,\n+    dead_code,\n+    clippy::equatable_if_let\n+)]\n \n fn base() {\n     let mut iter = 1..20;"}, {"sha": "69cb636cee8260bb31ce151a97f2ea9a11118955", "filename": "tests/ui/while_let_on_iterator.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.rs?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,7 +1,13 @@\n // run-rustfix\n \n #![warn(clippy::while_let_on_iterator)]\n-#![allow(clippy::never_loop, unreachable_code, unused_mut, dead_code)]\n+#![allow(\n+    clippy::never_loop,\n+    unreachable_code,\n+    unused_mut,\n+    dead_code,\n+    clippy::equatable_if_let\n+)]\n \n fn base() {\n     let mut iter = 1..20;"}, {"sha": "1a11ba26eef0ffdc7c5c4d9bf75432ca9ad7aff4", "filename": "tests/ui/while_let_on_iterator.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fwhile_let_on_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abe551ecb7f0f6223f3d343a591eb34d0b332708/tests%2Fui%2Fwhile_let_on_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.stderr?ref=abe551ecb7f0f6223f3d343a591eb34d0b332708", "patch": "@@ -1,129 +1,129 @@\n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:8:5\n+  --> $DIR/while_let_on_iterator.rs:14:5\n    |\n LL |     while let Option::Some(x) = iter.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n    |\n    = note: `-D clippy::while-let-on-iterator` implied by `-D warnings`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:13:5\n+  --> $DIR/while_let_on_iterator.rs:19:5\n    |\n LL |     while let Some(x) = iter.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:18:5\n+  --> $DIR/while_let_on_iterator.rs:24:5\n    |\n LL |     while let Some(_) = iter.next() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:94:9\n+  --> $DIR/while_let_on_iterator.rs:100:9\n    |\n LL |         while let Some([..]) = it.next() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for [..] in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:101:9\n+  --> $DIR/while_let_on_iterator.rs:107:9\n    |\n LL |         while let Some([_x]) = it.next() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for [_x] in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:114:9\n+  --> $DIR/while_let_on_iterator.rs:120:9\n    |\n LL |         while let Some(x @ [_]) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x @ [_] in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:134:9\n+  --> $DIR/while_let_on_iterator.rs:140:9\n    |\n LL |         while let Some(_) = y.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in y`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:191:9\n+  --> $DIR/while_let_on_iterator.rs:197:9\n    |\n LL |         while let Some(m) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:202:5\n+  --> $DIR/while_let_on_iterator.rs:208:5\n    |\n LL |     while let Some(n) = it.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for n in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:204:9\n+  --> $DIR/while_let_on_iterator.rs:210:9\n    |\n LL |         while let Some(m) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:213:9\n+  --> $DIR/while_let_on_iterator.rs:219:9\n    |\n LL |         while let Some(m) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:222:9\n+  --> $DIR/while_let_on_iterator.rs:228:9\n    |\n LL |         while let Some(m) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:239:9\n+  --> $DIR/while_let_on_iterator.rs:245:9\n    |\n LL |         while let Some(m) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:254:13\n+  --> $DIR/while_let_on_iterator.rs:260:13\n    |\n LL |             while let Some(i) = self.0.next() {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for i in self.0.by_ref()`\n \n error: manual `!RangeInclusive::contains` implementation\n-  --> $DIR/while_let_on_iterator.rs:255:20\n+  --> $DIR/while_let_on_iterator.rs:261:20\n    |\n LL |                 if i < 3 || i > 7 {\n    |                    ^^^^^^^^^^^^^^ help: use: `!(3..=7).contains(&i)`\n    |\n    = note: `-D clippy::manual-range-contains` implied by `-D warnings`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:286:13\n+  --> $DIR/while_let_on_iterator.rs:292:13\n    |\n LL |             while let Some(i) = self.0.0.0.next() {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for i in self.0.0.0.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:315:5\n+  --> $DIR/while_let_on_iterator.rs:321:5\n    |\n LL |     while let Some(n) = it.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for n in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:327:9\n+  --> $DIR/while_let_on_iterator.rs:333:9\n    |\n LL |         while let Some(x) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:341:5\n+  --> $DIR/while_let_on_iterator.rs:347:5\n    |\n LL |     while let Some(x) = it.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:352:5\n+  --> $DIR/while_let_on_iterator.rs:358:5\n    |\n LL |     while let Some(x) = it.0.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in it.0.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:371:5\n+  --> $DIR/while_let_on_iterator.rs:377:5\n    |\n LL |     while let Some(..) = it.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in it`"}]}