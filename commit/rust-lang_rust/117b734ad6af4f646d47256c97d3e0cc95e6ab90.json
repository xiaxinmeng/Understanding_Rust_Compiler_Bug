{"sha": "117b734ad6af4f646d47256c97d3e0cc95e6ab90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExN2I3MzRhZDZhZjRmNjQ2ZDQ3MjU2Yzk3ZDNlMGNjOTVlNmFiOTA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-28T15:30:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-28T15:30:36Z"}, "message": "Rollup merge of #73833 - bjorn3:remove_gcx_enter_local, r=matthewjasper\n\nRemove GlobalCtxt::enter_local", "tree": {"sha": "32d461aeb5d988a76a319c6cec6c1d663c282446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32d461aeb5d988a76a319c6cec6c1d663c282446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/117b734ad6af4f646d47256c97d3e0cc95e6ab90", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe+LecCRBK7hj4Ov3rIwAAdHIIADisyIXhLTlHX45JwKgpIYGr\nq9kaaG3Uv3ORGLAC9UOoil+EDJqHL9gYNUd4c1hGTDXoVr3rh7oI0WiGUF/4v1cL\nD9OJPvSEDYb6vFhmygOd4H8v2mLaR8JEqjSLL6Khq3zn4gdAjRp/ikvPKZNrtvDv\nZdS8wZJ0y4/vt129/w50g7r3xLnhZE8yKeuV7oyqgY30rfHcmii3+9kaY0XkAta/\nr7C5u5mdh/va/rxJmuj7uZRlGRoFQDC1cjL+QninUt+HddCFv8CpIYJqOiz4o2q0\n6j2pwqTPnMObKPtUy8HZB1H7NMrjBxSlEIAogfje757wZLgYR2FOL/XTwW4T4m0=\n=ot+f\n-----END PGP SIGNATURE-----\n", "payload": "tree 32d461aeb5d988a76a319c6cec6c1d663c282446\nparent 5304511fbc1f9a0c7340f7f0d037aa4dd13a588f\nparent 4d978af297504c5122f56322dfd9859871363ff4\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593358236 -0700\ncommitter GitHub <noreply@github.com> 1593358236 -0700\n\nRollup merge of #73833 - bjorn3:remove_gcx_enter_local, r=matthewjasper\n\nRemove GlobalCtxt::enter_local\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/117b734ad6af4f646d47256c97d3e0cc95e6ab90", "html_url": "https://github.com/rust-lang/rust/commit/117b734ad6af4f646d47256c97d3e0cc95e6ab90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/117b734ad6af4f646d47256c97d3e0cc95e6ab90/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5304511fbc1f9a0c7340f7f0d037aa4dd13a588f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5304511fbc1f9a0c7340f7f0d037aa4dd13a588f", "html_url": "https://github.com/rust-lang/rust/commit/5304511fbc1f9a0c7340f7f0d037aa4dd13a588f"}, {"sha": "4d978af297504c5122f56322dfd9859871363ff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d978af297504c5122f56322dfd9859871363ff4", "html_url": "https://github.com/rust-lang/rust/commit/4d978af297504c5122f56322dfd9859871363ff4"}], "stats": {"total": 68, "additions": 22, "deletions": 46}, "files": [{"sha": "76ac61c067280a901b03133513c871ab57f063f5", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/117b734ad6af4f646d47256c97d3e0cc95e6ab90/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117b734ad6af4f646d47256c97d3e0cc95e6ab90/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=117b734ad6af4f646d47256c97d3e0cc95e6ab90", "patch": "@@ -570,7 +570,7 @@ impl<'tcx> fmt::Display for FixupError<'tcx> {\n /// Necessary because we can't write the following bound:\n /// `F: for<'b, 'tcx> where 'tcx FnOnce(InferCtxt<'b, 'tcx>)`.\n pub struct InferCtxtBuilder<'tcx> {\n-    global_tcx: TyCtxt<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     fresh_tables: Option<RefCell<ty::TypeckTables<'tcx>>>,\n }\n \n@@ -580,7 +580,7 @@ pub trait TyCtxtInferExt<'tcx> {\n \n impl TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {\n     fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {\n-        InferCtxtBuilder { global_tcx: self, fresh_tables: None }\n+        InferCtxtBuilder { tcx: self, fresh_tables: None }\n     }\n }\n \n@@ -616,24 +616,22 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n     }\n \n     pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {\n-        let InferCtxtBuilder { global_tcx, ref fresh_tables } = *self;\n+        let InferCtxtBuilder { tcx, ref fresh_tables } = *self;\n         let in_progress_tables = fresh_tables.as_ref();\n-        global_tcx.enter_local(|tcx| {\n-            f(InferCtxt {\n-                tcx,\n-                in_progress_tables,\n-                inner: RefCell::new(InferCtxtInner::new()),\n-                lexical_region_resolutions: RefCell::new(None),\n-                selection_cache: Default::default(),\n-                evaluation_cache: Default::default(),\n-                reported_trait_errors: Default::default(),\n-                reported_closure_mismatch: Default::default(),\n-                tainted_by_errors_flag: Cell::new(false),\n-                err_count_on_creation: tcx.sess.err_count(),\n-                in_snapshot: Cell::new(false),\n-                skip_leak_check: Cell::new(false),\n-                universe: Cell::new(ty::UniverseIndex::ROOT),\n-            })\n+        f(InferCtxt {\n+            tcx,\n+            in_progress_tables,\n+            inner: RefCell::new(InferCtxtInner::new()),\n+            lexical_region_resolutions: RefCell::new(None),\n+            selection_cache: Default::default(),\n+            evaluation_cache: Default::default(),\n+            reported_trait_errors: Default::default(),\n+            reported_closure_mismatch: Default::default(),\n+            tainted_by_errors_flag: Cell::new(false),\n+            err_count_on_creation: tcx.sess.err_count(),\n+            in_snapshot: Cell::new(false),\n+            skip_leak_check: Cell::new(false),\n+            universe: Cell::new(ty::UniverseIndex::ROOT),\n         })\n     }\n }"}, {"sha": "e2f601371b1eeab9a07941bab20fe4ea72ffe076", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/117b734ad6af4f646d47256c97d3e0cc95e6ab90/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117b734ad6af4f646d47256c97d3e0cc95e6ab90/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=117b734ad6af4f646d47256c97d3e0cc95e6ab90", "patch": "@@ -1560,28 +1560,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-impl<'tcx> GlobalCtxt<'tcx> {\n-    /// Calls the closure with a local `TyCtxt` using the given arena.\n-    /// `interners` is a slot passed so we can create a CtxtInterners\n-    /// with the same lifetime as `arena`.\n-    pub fn enter_local<F, R>(&'tcx self, f: F) -> R\n-    where\n-        F: FnOnce(TyCtxt<'tcx>) -> R,\n-    {\n-        let tcx = TyCtxt { gcx: self };\n-        ty::tls::with_related_context(tcx, |icx| {\n-            let new_icx = ty::tls::ImplicitCtxt {\n-                tcx,\n-                query: icx.query,\n-                diagnostics: icx.diagnostics,\n-                layout_depth: icx.layout_depth,\n-                task_deps: icx.task_deps,\n-            };\n-            ty::tls::enter_context(&new_icx, |_| f(tcx))\n-        })\n-    }\n-}\n-\n /// A trait implemented for all `X<'a>` types that can be safely and\n /// efficiently converted to `X<'tcx>` as long as they are part of the\n /// provided `TyCtxt<'tcx>`.\n@@ -1818,11 +1796,11 @@ pub mod tls {\n         with_context_opt(|opt_context| f(opt_context.expect(\"no ImplicitCtxt stored in tls\")))\n     }\n \n-    /// Allows access to the current `ImplicitCtxt` whose tcx field has the same global\n-    /// interner as the tcx argument passed in. This means the closure is given an `ImplicitCtxt`\n-    /// with the same `'tcx` lifetime as the `TyCtxt` passed in.\n-    /// This will panic if you pass it a `TyCtxt` which has a different global interner from\n-    /// the current `ImplicitCtxt`'s `tcx` field.\n+    /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument\n+    /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime\n+    /// as the `TyCtxt` passed in.\n+    /// This will panic if you pass it a `TyCtxt` which is different from the current\n+    /// `ImplicitCtxt`'s `tcx` field.\n     #[inline]\n     pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R\n     where"}]}