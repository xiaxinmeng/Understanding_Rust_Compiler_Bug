{"sha": "799d9fa32b0f7c0598e5a0da477b7a817cfc203f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5OWQ5ZmEzMmIwZjdjMDU5OGU1YTBkYTQ3N2I3YTgxN2NmYzIwM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-18T02:58:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-18T02:58:24Z"}, "message": "auto merge of #6560 : gifnksm/rust/iterator-utils, r=thestinger\n\nThis pull request adds following methods and traits.\r\n```rust\r\npub trait IteratorUtil {\r\n(snip)\r\n    fn filter_map<'r,  B>(self, f: &'r fn(A) -> Option<B>) -> FilterMapIterator<'r, A, B, Self>;\r\n(snip)\r\n    fn to_vec(self) -> ~[A];\r\n    fn nth(&mut self, n: uint) -> A;\r\n    fn first(&mut self) -> A;\r\n    fn last(&mut self) -> A;\r\n    fn fold<B>(&mut self, start: B, f: &fn(B, A) -> B) -> B;\r\n    fn count(&mut self) -> uint;\r\n    fn all(&mut self, f: &fn(&A) -> bool) -> bool;\r\n    fn any(&mut self, f: &fn(&A) -> bool) -> bool;\r\n}\r\n\r\npub trait AdditiveIterator<A> {\r\n    fn sum(&mut self) -> A;\r\n}\r\n\r\npub trait MultiplicativeIterator<A> {\r\n    fn product(&mut self) -> A;\r\n}\r\n\r\npub trait OrdIterator<A> {\r\n    fn max(&mut self) -> Option<A>;\r\n    fn min(&mut self) -> Option<A>;\r\n}\r\n```", "tree": {"sha": "f7a77f9decf24e328658e23efc4051b629d39113", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7a77f9decf24e328658e23efc4051b629d39113"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/799d9fa32b0f7c0598e5a0da477b7a817cfc203f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/799d9fa32b0f7c0598e5a0da477b7a817cfc203f", "html_url": "https://github.com/rust-lang/rust/commit/799d9fa32b0f7c0598e5a0da477b7a817cfc203f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/799d9fa32b0f7c0598e5a0da477b7a817cfc203f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d68c0279eadc8544a1e3c1d9077185500a36ae66", "url": "https://api.github.com/repos/rust-lang/rust/commits/d68c0279eadc8544a1e3c1d9077185500a36ae66", "html_url": "https://github.com/rust-lang/rust/commit/d68c0279eadc8544a1e3c1d9077185500a36ae66"}, {"sha": "3122d8027bfb38b76a916ef0e7be850da62f6e0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3122d8027bfb38b76a916ef0e7be850da62f6e0b", "html_url": "https://github.com/rust-lang/rust/commit/3122d8027bfb38b76a916ef0e7be850da62f6e0b"}], "stats": {"total": 262, "additions": 262, "deletions": 0}, "files": [{"sha": "588bd0bde5343295f6e27a85395dd2400c2d96af", "filename": "src/libcore/iterator.rs", "status": "modified", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/rust-lang/rust/blob/799d9fa32b0f7c0598e5a0da477b7a817cfc203f/src%2Flibcore%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799d9fa32b0f7c0598e5a0da477b7a817cfc203f/src%2Flibcore%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiterator.rs?ref=799d9fa32b0f7c0598e5a0da477b7a817cfc203f", "patch": "@@ -18,6 +18,7 @@ implementing the `Iterator` trait.\n */\n \n use prelude::*;\n+use num::{Zero, One};\n \n pub trait Iterator<A> {\n     /// Advance the iterator and return the next value. Return `None` when the end is reached.\n@@ -34,6 +35,7 @@ pub trait IteratorUtil<A> {\n     // FIXME: #5898: should be called map\n     fn transform<'r, B>(self, f: &'r fn(A) -> B) -> MapIterator<'r, A, B, Self>;\n     fn filter<'r>(self, predicate: &'r fn(&A) -> bool) -> FilterIterator<'r, A, Self>;\n+    fn filter_map<'r,  B>(self, f: &'r fn(A) -> Option<B>) -> FilterMapIterator<'r, A, B, Self>;\n     fn enumerate(self) -> EnumerateIterator<Self>;\n     fn skip_while<'r>(self, predicate: &'r fn(&A) -> bool) -> SkipWhileIterator<'r, A, Self>;\n     fn take_while<'r>(self, predicate: &'r fn(&A) -> bool) -> TakeWhileIterator<'r, A, Self>;\n@@ -45,6 +47,14 @@ pub trait IteratorUtil<A> {\n     fn advance(&mut self, f: &fn(A) -> bool);\n     #[cfg(not(stage0))]\n     fn advance(&mut self, f: &fn(A) -> bool) -> bool;\n+    fn to_vec(self) -> ~[A];\n+    fn nth(&mut self, n: uint) -> A;\n+    fn first(&mut self) -> A;\n+    fn last(&mut self) -> A;\n+    fn fold<B>(&mut self, start: B, f: &fn(B, A) -> B) -> B;\n+    fn count(&mut self) -> uint;\n+    fn all(&mut self, f: &fn(&A) -> bool) -> bool;\n+    fn any(&mut self, f: &fn(&A) -> bool) -> bool;\n }\n \n /// Iterator adaptors provided for every `Iterator` implementation. The adaptor objects are also\n@@ -73,6 +83,11 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n         FilterIterator{iter: self, predicate: predicate}\n     }\n \n+    #[inline(always)]\n+    fn filter_map<'r, B>(self, f: &'r fn(A) -> Option<B>) -> FilterMapIterator<'r, A, B, T> {\n+        FilterMapIterator { iter: self, f: f }\n+    }\n+\n     #[inline(always)]\n     fn enumerate(self) -> EnumerateIterator<T> {\n         EnumerateIterator{iter: self, count: 0}\n@@ -131,6 +146,123 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n             }\n         }\n     }\n+\n+    #[inline(always)]\n+    fn to_vec(self) -> ~[A] {\n+        let mut v = ~[];\n+        let mut it = self;\n+        for it.advance() |x| { v.push(x); }\n+        return v;\n+    }\n+\n+    /// Get `n`th element of an iterator.\n+    #[inline(always)]\n+    fn nth(&mut self, n: uint) -> A {\n+        let mut i = n;\n+        loop {\n+            match self.next() {\n+                Some(x) => { if i == 0 { return x; }}\n+                None => { fail!(\"cannot get %uth element\", n) }\n+            }\n+            i -= 1;\n+        }\n+    }\n+\n+    // Get first elemet of an iterator.\n+    #[inline(always)]\n+    fn first(&mut self) -> A {\n+        match self.next() {\n+            Some(x) => x ,\n+            None => fail!(\"cannot get first element\")\n+        }\n+    }\n+\n+    // Get last element of an iterator.\n+    //\n+    // If the iterator have an infinite length, this method won't return.\n+    #[inline(always)]\n+    fn last(&mut self) -> A {\n+        let mut elm = match self.next() {\n+            Some(x) => x,\n+            None    => fail!(\"cannot get last element\")\n+        };\n+        for self.advance |e| { elm = e; }\n+        return elm;\n+    }\n+\n+    /// Reduce an iterator to an accumulated value\n+    #[inline]\n+    fn fold<B>(&mut self, init: B, f: &fn(B, A) -> B) -> B {\n+        let mut accum = init;\n+        loop {\n+            match self.next() {\n+                Some(x) => { accum = f(accum, x); }\n+                None    => { break; }\n+            }\n+        }\n+        return accum;\n+    }\n+\n+    /// Count the number of an iterator elemenrs\n+    #[inline(always)]\n+    fn count(&mut self) -> uint { self.fold(0, |cnt, _x| cnt + 1) }\n+\n+    #[inline(always)]\n+    fn all(&mut self, f: &fn(&A) -> bool) -> bool {\n+        for self.advance |x| { if !f(&x) { return false; } }\n+        return true;\n+    }\n+\n+    #[inline(always)]\n+    fn any(&mut self, f: &fn(&A) -> bool) -> bool {\n+        for self.advance |x| { if f(&x) { return true; } }\n+        return false;\n+    }\n+}\n+\n+pub trait AdditiveIterator<A> {\n+    fn sum(&mut self) -> A;\n+}\n+\n+impl<A: Add<A, A> + Zero, T: Iterator<A>> AdditiveIterator<A> for T {\n+    #[inline(always)]\n+    fn sum(&mut self) -> A { self.fold(Zero::zero::<A>(), |s, x| s + x) }\n+}\n+\n+pub trait MultiplicativeIterator<A> {\n+    fn product(&mut self) -> A;\n+}\n+\n+impl<A: Mul<A, A> + One, T: Iterator<A>> MultiplicativeIterator<A> for T {\n+    #[inline(always)]\n+    fn product(&mut self) -> A { self.fold(One::one::<A>(), |p, x| p * x) }\n+}\n+\n+pub trait OrdIterator<A> {\n+    fn max(&mut self) -> Option<A>;\n+    fn min(&mut self) -> Option<A>;\n+}\n+\n+impl<A: Ord, T: Iterator<A>> OrdIterator<A> for T {\n+    #[inline(always)]\n+    fn max(&mut self) -> Option<A> {\n+        self.fold(None, |max, x| {\n+            match max {\n+                None    => Some(x),\n+                Some(y) => Some(cmp::max(x, y))\n+            }\n+        })\n+    }\n+\n+    #[inline(always)]\n+    fn min(&mut self) -> Option<A> {\n+        self.fold(None, |min, x| {\n+            match min {\n+                None    => Some(x),\n+                Some(y) => Some(cmp::min(x, y))\n+            }\n+        })\n+    }\n }\n \n pub struct ChainIterator<T, U> {\n@@ -204,6 +336,28 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for FilterIterator<'self, A, T> {\n     }\n }\n \n+pub struct FilterMapIterator<'self, A, B, T> {\n+    priv iter: T,\n+    priv f: &'self fn(A) -> Option<B>\n+}\n+\n+impl<'self, A, B, T: Iterator<A>> Iterator<B> for FilterMapIterator<'self, A, B, T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<B> {\n+        loop {\n+            match self.iter.next() {\n+                None    => { return None; }\n+                Some(a) => {\n+                    match (self.f)(a) {\n+                        Some(b) => { return Some(b); }\n+                        None    => { loop; }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n pub struct EnumerateIterator<T> {\n     priv iter: T,\n     priv count: uint\n@@ -423,6 +577,13 @@ mod tests {\n         assert_eq!(i, expected.len());\n     }\n \n+    #[test]\n+    fn test_filter_map() {\n+        let it  = Counter::new(0u, 1u).take(10)\n+            .filter_map(|x: uint| if x.is_even() { Some(x*x) } else { None });\n+        assert_eq!(it.to_vec(), ~[0*0, 2*2, 4*4, 6*6, 8*8]);\n+    }\n+\n     #[test]\n     fn test_iterator_enumerate() {\n         let xs = [0u, 1, 2, 3, 4, 5];\n@@ -523,4 +684,105 @@ mod tests {\n         }\n         assert_eq!(i, 10);\n     }\n+\n+    #[test]\n+    fn test_iterator_nth() {\n+        let v = &[0, 1, 2, 3, 4];\n+        for uint::range(0, v.len()) |i| {\n+            assert_eq!(v.iter().nth(i), &v[i]);\n+        }\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_iterator_nth_fail() {\n+        let v = &[0, 1, 2, 3, 4];\n+        v.iter().nth(5);\n+    }\n+\n+    #[test]\n+    fn test_iterator_first() {\n+        let v = &[0, 1, 2, 3, 4];\n+        assert_eq!(v.iter().first(), &0);\n+        assert_eq!(v.slice(2, 5).iter().first(), &2);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_iterator_first_fail() {\n+        let v: &[uint] = &[];\n+        v.iter().first();\n+    }\n+\n+    #[test]\n+    fn test_iterator_last() {\n+        let v = &[0, 1, 2, 3, 4];\n+        assert_eq!(v.iter().last(), &4);\n+        assert_eq!(v.slice(0, 1).iter().last(), &0);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_iterator_last_fail() {\n+        let v: &[uint] = &[];\n+        v.iter().last();\n+    }\n+\n+    #[test]\n+    fn test_iterator_count() {\n+        let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+        assert_eq!(v.slice(0, 4).iter().count(), 4);\n+        assert_eq!(v.slice(0, 10).iter().count(), 10);\n+        assert_eq!(v.slice(0, 0).iter().count(), 0);\n+    }\n+\n+    #[test]\n+    fn test_iterator_sum() {\n+        let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+        assert_eq!(v.slice(0, 4).iter().transform(|&x| x).sum(), 6);\n+        assert_eq!(v.iter().transform(|&x| x).sum(), 55);\n+        assert_eq!(v.slice(0, 0).iter().transform(|&x| x).sum(), 0);\n+    }\n+\n+    #[test]\n+    fn test_iterator_product() {\n+        let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+        assert_eq!(v.slice(0, 4).iter().transform(|&x| x).product(), 0);\n+        assert_eq!(v.slice(1, 5).iter().transform(|&x| x).product(), 24);\n+        assert_eq!(v.slice(0, 0).iter().transform(|&x| x).product(), 1);\n+    }\n+\n+    #[test]\n+    fn test_iterator_max() {\n+        let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+        assert_eq!(v.slice(0, 4).iter().transform(|&x| x).max(), Some(3));\n+        assert_eq!(v.iter().transform(|&x| x).max(), Some(10));\n+        assert_eq!(v.slice(0, 0).iter().transform(|&x| x).max(), None);\n+    }\n+\n+    #[test]\n+    fn test_iterator_min() {\n+        let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+        assert_eq!(v.slice(0, 4).iter().transform(|&x| x).min(), Some(0));\n+        assert_eq!(v.iter().transform(|&x| x).min(), Some(0));\n+        assert_eq!(v.slice(0, 0).iter().transform(|&x| x).min(), None);\n+    }\n+\n+    #[test]\n+    fn test_all() {\n+        let v = ~&[1, 2, 3, 4, 5];\n+        assert!(v.iter().all(|&x| *x < 10));\n+        assert!(!v.iter().all(|&x| x.is_even()));\n+        assert!(!v.iter().all(|&x| *x > 100));\n+        assert!(v.slice(0, 0).iter().all(|_| fail!()));\n+    }\n+\n+    #[test]\n+    fn test_any() {\n+        let v = ~&[1, 2, 3, 4, 5];\n+        assert!(v.iter().any(|&x| *x < 10));\n+        assert!(v.iter().any(|&x| x.is_even()));\n+        assert!(!v.iter().any(|&x| *x > 100));\n+        assert!(!v.slice(0, 0).iter().any(|_| fail!()));\n+    }\n }"}]}