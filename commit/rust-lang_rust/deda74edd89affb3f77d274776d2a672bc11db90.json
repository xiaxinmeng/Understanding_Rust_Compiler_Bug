{"sha": "deda74edd89affb3f77d274776d2a672bc11db90", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZGE3NGVkZDg5YWZmYjNmNzdkMjc0Nzc2ZDJhNjcyYmMxMWRiOTA=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-04T14:03:22Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-07T21:41:08Z"}, "message": "Use stateless completion resolve", "tree": {"sha": "e9c7dac6df4fd06012ca6b6e628223e925998f1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9c7dac6df4fd06012ca6b6e628223e925998f1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deda74edd89affb3f77d274776d2a672bc11db90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deda74edd89affb3f77d274776d2a672bc11db90", "html_url": "https://github.com/rust-lang/rust/commit/deda74edd89affb3f77d274776d2a672bc11db90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deda74edd89affb3f77d274776d2a672bc11db90/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93bc009a5968c964693299263689b50b2efe9abc", "url": "https://api.github.com/repos/rust-lang/rust/commits/93bc009a5968c964693299263689b50b2efe9abc", "html_url": "https://github.com/rust-lang/rust/commit/93bc009a5968c964693299263689b50b2efe9abc"}], "stats": {"total": 195, "additions": 124, "deletions": 71}, "files": [{"sha": "26a2b7a1bd0282c9b653d7cdf8084478a36d6f8f", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/deda74edd89affb3f77d274776d2a672bc11db90/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deda74edd89affb3f77d274776d2a672bc11db90/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=deda74edd89affb3f77d274776d2a672bc11db90", "patch": "@@ -9,7 +9,7 @@ use test_utils::mark;\n \n use crate::{\n     render::{render_resolution_with_import, RenderContext},\n-    CompletionContext, Completions,\n+    CompletionContext, Completions, ImportEdit,\n };\n \n pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -103,9 +103,11 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n     .filter_map(|(import_path, definition)| {\n         render_resolution_with_import(\n             RenderContext::new(ctx),\n-            import_path.clone(),\n-            import_scope.clone(),\n-            ctx.config.merge,\n+            ImportEdit {\n+                import_path: import_path.clone(),\n+                import_scope: import_scope.clone(),\n+                merge_behaviour: ctx.config.merge,\n+            },\n             &definition,\n         )\n     });"}, {"sha": "4e56f28f3cc4accf0d38378cd49e1c901ca6df91", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/deda74edd89affb3f77d274776d2a672bc11db90/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deda74edd89affb3f77d274776d2a672bc11db90/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=deda74edd89affb3f77d274776d2a672bc11db90", "patch": "@@ -276,7 +276,6 @@ pub struct ImportEdit {\n }\n \n impl ImportEdit {\n-    // TODO kb remove this at all now, since it's used only once?\n     /// Attempts to insert the import to the given scope, producing a text edit.\n     /// May return no edit in edge cases, such as scope already containing the import.\n     pub fn to_text_edit(&self) -> Option<TextEdit> {"}, {"sha": "938c92dbb0760181a031d1f5af8d3b06fc053811", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/deda74edd89affb3f77d274776d2a672bc11db90/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deda74edd89affb3f77d274776d2a672bc11db90/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=deda74edd89affb3f77d274776d2a672bc11db90", "patch": "@@ -11,8 +11,11 @@ mod render;\n \n mod completions;\n \n-use ide_db::base_db::FilePosition;\n-use ide_db::RootDatabase;\n+use ide_db::{\n+    base_db::FilePosition, helpers::insert_use::ImportScope, imports_locator, RootDatabase,\n+};\n+use syntax::AstNode;\n+use text_edit::TextEdit;\n \n use crate::{completions::Completions, context::CompletionContext, item::CompletionKind};\n \n@@ -131,6 +134,31 @@ pub fn completions(\n     Some(acc)\n }\n \n+/// Resolves additional completion data at the position given.\n+pub fn resolve_completion_edits(\n+    db: &RootDatabase,\n+    config: &CompletionConfig,\n+    position: FilePosition,\n+    full_import_path: &str,\n+    imported_name: &str,\n+) -> Option<TextEdit> {\n+    let ctx = CompletionContext::new(db, position, config)?;\n+    let anchor = ctx.name_ref_syntax.as_ref()?;\n+    let import_scope = ImportScope::find_insert_use_container(anchor.syntax(), &ctx.sema)?;\n+\n+    let current_module = ctx.sema.scope(anchor.syntax()).module()?;\n+    let current_crate = current_module.krate();\n+\n+    let import_path = imports_locator::find_exact_imports(&ctx.sema, current_crate, imported_name)\n+        .filter_map(|candidate| {\n+            let item: hir::ItemInNs = candidate.either(Into::into, Into::into);\n+            current_module.find_use_path(db, item)\n+        })\n+        .find(|mod_path| mod_path.to_string() == full_import_path)?;\n+\n+    ImportEdit { import_path, import_scope, merge_behaviour: config.merge }.to_text_edit()\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::config::CompletionConfig;"}, {"sha": "9a43480e1a2c44c6c3f96ffa4ea0bafff9bffaad", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/deda74edd89affb3f77d274776d2a672bc11db90/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deda74edd89affb3f77d274776d2a672bc11db90/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=deda74edd89affb3f77d274776d2a672bc11db90", "patch": "@@ -9,8 +9,7 @@ pub(crate) mod type_alias;\n \n mod builder_ext;\n \n-use hir::{Documentation, HasAttrs, HirDisplay, ModPath, Mutability, ScopeDef, Type};\n-use ide_db::helpers::insert_use::{ImportScope, MergeBehaviour};\n+use hir::{Documentation, HasAttrs, HirDisplay, Mutability, ScopeDef, Type};\n use ide_db::RootDatabase;\n use syntax::TextRange;\n use test_utils::mark;\n@@ -48,15 +47,12 @@ pub(crate) fn render_resolution<'a>(\n \n pub(crate) fn render_resolution_with_import<'a>(\n     ctx: RenderContext<'a>,\n-    import_path: ModPath,\n-    import_scope: ImportScope,\n-    merge_behaviour: Option<MergeBehaviour>,\n+    import_edit: ImportEdit,\n     resolution: &ScopeDef,\n ) -> Option<CompletionItem> {\n-    let local_name = import_path.segments.last()?.to_string();\n     Render::new(ctx).render_resolution(\n-        local_name,\n-        Some(ImportEdit { import_path, import_scope, merge_behaviour }),\n+        import_edit.import_path.segments.last()?.to_string(),\n+        Some(import_edit),\n         resolution,\n     )\n }"}, {"sha": "4a274f5bac2c9986a42d879748f63ea3bda8f043", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/deda74edd89affb3f77d274776d2a672bc11db90/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deda74edd89affb3f77d274776d2a672bc11db90/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=deda74edd89affb3f77d274776d2a672bc11db90", "patch": "@@ -469,6 +469,28 @@ impl Analysis {\n         self.with_db(|db| completion::completions(db, config, position).map(Into::into))\n     }\n \n+    /// Resolves additional completion data at the position given.\n+    pub fn resolve_completion_edits(\n+        &self,\n+        config: &CompletionConfig,\n+        position: FilePosition,\n+        full_import_path: &str,\n+        imported_name: &str,\n+    ) -> Cancelable<Vec<TextEdit>> {\n+        Ok(self\n+            .with_db(|db| {\n+                completion::resolve_completion_edits(\n+                    db,\n+                    config,\n+                    position,\n+                    full_import_path,\n+                    imported_name,\n+                )\n+            })?\n+            .map(|edit| vec![edit])\n+            .unwrap_or_default())\n+    }\n+\n     /// Computes resolved assists with source changes for the given position.\n     pub fn resolved_assists(\n         &self,"}, {"sha": "f92280524dc0778e15150b344e941a1b0e534fd5", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 62, "deletions": 56, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/deda74edd89affb3f77d274776d2a672bc11db90/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deda74edd89affb3f77d274776d2a672bc11db90/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=deda74edd89affb3f77d274776d2a672bc11db90", "patch": "@@ -8,8 +8,8 @@ use std::{\n };\n \n use ide::{\n-    CompletionResolveCapability, FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData,\n-    ImportEdit, LineIndex, NavigationTarget, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n+    CompletionConfig, CompletionResolveCapability, FileId, FilePosition, FileRange, HoverAction,\n+    HoverGotoTypeData, NavigationTarget, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n     TextEdit,\n };\n use itertools::Itertools;\n@@ -22,7 +22,7 @@ use lsp_types::{\n     HoverContents, Location, NumberOrString, Position, PrepareRenameResponse, Range, RenameParams,\n     SemanticTokensDeltaParams, SemanticTokensFullDeltaResult, SemanticTokensParams,\n     SemanticTokensRangeParams, SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation,\n-    SymbolTag, TextDocumentIdentifier, Url, WorkspaceEdit,\n+    SymbolTag, TextDocumentIdentifier, TextDocumentPositionParams, Url, WorkspaceEdit,\n };\n use project_model::TargetKind;\n use serde::{Deserialize, Serialize};\n@@ -35,7 +35,6 @@ use crate::{\n     config::RustfmtConfig,\n     from_json, from_proto,\n     global_state::{GlobalState, GlobalStateSnapshot},\n-    line_endings::LineEndings,\n     lsp_ext::{self, InlayHint, InlayHintsParams},\n     to_proto, LspError, Result,\n };\n@@ -541,7 +540,7 @@ pub(crate) fn handle_completion(\n     params: lsp_types::CompletionParams,\n ) -> Result<Option<lsp_types::CompletionResponse>> {\n     let _p = profile::span(\"handle_completion\");\n-    let text_document_url = params.text_document_position.text_document.uri.clone();\n+    let text_document_position = params.text_document_position.clone();\n     let position = from_proto::file_position(&snap, params.text_document_position)?;\n     let completion_triggered_after_single_colon = {\n         let mut res = false;\n@@ -574,23 +573,18 @@ pub(crate) fn handle_completion(\n \n     let items: Vec<CompletionItem> = items\n         .into_iter()\n-        .enumerate()\n-        .flat_map(|(item_index, item)| {\n+        .flat_map(|item| {\n             let mut new_completion_items =\n                 to_proto::completion_item(&line_index, line_endings, item.clone());\n \n-            if snap.config.completion.resolve_additional_edits_lazily() {\n-                // TODO kb add resolve data somehow here\n-                if let Some(import_edit) = item.import_to_add() {\n-                    //     let data = serde_json::to_value(&CompletionData {\n-                    //         document_url: text_document_url.clone(),\n-                    //         import_id: item_index,\n-                    //     })\n-                    //     .expect(&format!(\"Should be able to serialize usize value {}\", item_index));\n-                    for new_item in &mut new_completion_items {\n-                        // new_item.data = Some(data.clone());\n-                    }\n-                }\n+            for new_item in &mut new_completion_items {\n+                let _ = fill_resolve_data(\n+                    &mut new_item.data,\n+                    &item,\n+                    &snap.config.completion,\n+                    &text_document_position,\n+                )\n+                .take();\n             }\n \n             new_completion_items\n@@ -603,8 +597,8 @@ pub(crate) fn handle_completion(\n \n pub(crate) fn handle_completion_resolve(\n     snap: GlobalStateSnapshot,\n-    mut original_completion: lsp_types::CompletionItem,\n-) -> Result<lsp_types::CompletionItem> {\n+    mut original_completion: CompletionItem,\n+) -> Result<CompletionItem> {\n     let _p = profile::span(\"handle_resolve_completion\");\n \n     // FIXME resolve the other capabilities also?\n@@ -627,21 +621,30 @@ pub(crate) fn handle_completion_resolve(\n         None => return Ok(original_completion),\n     };\n \n-    // TODO kb get the resolve data and somehow reparse the whole ast again?\n-    // let file_id = from_proto::file_id(&snap, &document_url)?;\n-    // let root = snap.analysis.parse(file_id)?;\n-\n-    // if let Some(import_to_add) =\n-    //     import_edit_ptr.and_then(|import_edit| import_edit.into_import_edit(root.syntax()))\n-    // {\n-    //     // FIXME actually add all additional edits here? see `to_proto::completion_item` for more\n-    //     append_import_edits(\n-    //         &mut original_completion,\n-    //         &import_to_add,\n-    //         snap.analysis.file_line_index(file_id)?.as_ref(),\n-    //         snap.file_line_endings(file_id),\n-    //     );\n-    // }\n+    let file_id = from_proto::file_id(&snap, &resolve_data.position.text_document.uri)?;\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n+    let line_endings = snap.file_line_endings(file_id);\n+    let offset = from_proto::offset(&line_index, resolve_data.position.position);\n+\n+    let mut additional_edits = snap\n+        .analysis\n+        .resolve_completion_edits(\n+            &snap.config.completion,\n+            FilePosition { file_id, offset },\n+            &resolve_data.full_import_path,\n+            &resolve_data.imported_name,\n+        )?\n+        .into_iter()\n+        .flat_map(|edit| {\n+            edit.into_iter().map(|indel| to_proto::text_edit(&line_index, line_endings, indel))\n+        })\n+        .collect_vec();\n+\n+    if let Some(original_additional_edits) = original_completion.additional_text_edits.as_mut() {\n+        original_additional_edits.extend(additional_edits.drain(..))\n+    } else {\n+        original_completion.additional_text_edits = Some(additional_edits);\n+    }\n \n     Ok(original_completion)\n }\n@@ -1606,27 +1609,30 @@ fn should_skip_target(runnable: &Runnable, cargo_spec: Option<&CargoTargetSpec>)\n \n #[derive(Debug, Serialize, Deserialize)]\n struct CompletionResolveData {\n-    document_url: Url,\n-    import_id: usize,\n+    position: lsp_types::TextDocumentPositionParams,\n+    full_import_path: String,\n+    imported_name: String,\n }\n \n-fn append_import_edits(\n-    completion: &mut lsp_types::CompletionItem,\n-    import_to_add: &ImportEdit,\n-    line_index: &LineIndex,\n-    line_endings: LineEndings,\n-) {\n-    let import_edits = import_to_add.to_text_edit().map(|import_edit| {\n-        import_edit\n-            .into_iter()\n-            .map(|indel| to_proto::text_edit(line_index, line_endings, indel))\n-            .collect_vec()\n-    });\n-    if let Some(original_additional_edits) = completion.additional_text_edits.as_mut() {\n-        if let Some(mut new_edits) = import_edits {\n-            original_additional_edits.extend(new_edits.drain(..))\n-        }\n-    } else {\n-        completion.additional_text_edits = import_edits;\n+fn fill_resolve_data(\n+    resolve_data: &mut Option<serde_json::Value>,\n+    item: &ide::CompletionItem,\n+    completion_config: &CompletionConfig,\n+    position: &TextDocumentPositionParams,\n+) -> Option<()> {\n+    if completion_config.resolve_additional_edits_lazily() {\n+        let import_edit = item.import_to_add()?;\n+        let full_import_path = import_edit.import_path.to_string();\n+        let imported_name = import_edit.import_path.segments.clone().pop()?.to_string();\n+\n+        *resolve_data = Some(\n+            serde_json::to_value(CompletionResolveData {\n+                position: position.to_owned(),\n+                full_import_path,\n+                imported_name,\n+            })\n+            .expect(\"Failed to serialize a regular struct with derives\"),\n+        )\n     }\n+    Some(())\n }"}]}