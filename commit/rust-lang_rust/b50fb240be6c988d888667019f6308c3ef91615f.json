{"sha": "b50fb240be6c988d888667019f6308c3ef91615f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MGZiMjQwYmU2Yzk4OGQ4ODg2NjcwMTlmNjMwOGMzZWY5MTYxNWY=", "commit": {"author": {"name": "Ivan Stankovic", "email": "istankovic@users.noreply.github.com", "date": "2017-01-16T20:24:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-16T20:24:18Z"}, "message": "libcollections: btree/map: fix typos", "tree": {"sha": "98e6808c5e2d5c7696106dbe73c4da9333207d0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98e6808c5e2d5c7696106dbe73c4da9333207d0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b50fb240be6c988d888667019f6308c3ef91615f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b50fb240be6c988d888667019f6308c3ef91615f", "html_url": "https://github.com/rust-lang/rust/commit/b50fb240be6c988d888667019f6308c3ef91615f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b50fb240be6c988d888667019f6308c3ef91615f/comments", "author": {"login": "istankovic", "id": 1312091, "node_id": "MDQ6VXNlcjEzMTIwOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1312091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/istankovic", "html_url": "https://github.com/istankovic", "followers_url": "https://api.github.com/users/istankovic/followers", "following_url": "https://api.github.com/users/istankovic/following{/other_user}", "gists_url": "https://api.github.com/users/istankovic/gists{/gist_id}", "starred_url": "https://api.github.com/users/istankovic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/istankovic/subscriptions", "organizations_url": "https://api.github.com/users/istankovic/orgs", "repos_url": "https://api.github.com/users/istankovic/repos", "events_url": "https://api.github.com/users/istankovic/events{/privacy}", "received_events_url": "https://api.github.com/users/istankovic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d0baa71b94e15ac43532987777959edbaee098d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d0baa71b94e15ac43532987777959edbaee098d", "html_url": "https://github.com/rust-lang/rust/commit/2d0baa71b94e15ac43532987777959edbaee098d"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "4755f8a4c55a43b3095acde1749916fc56215ccb", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b50fb240be6c988d888667019f6308c3ef91615f/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50fb240be6c988d888667019f6308c3ef91615f/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=b50fb240be6c988d888667019f6308c3ef91615f", "patch": "@@ -656,7 +656,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     }\n \n     /// Constructs a double-ended iterator over a sub-range of elements in the map.\n-    /// The simplest way is to use the range synax `min..max`, thus `range(min..max)` will\n+    /// The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\n     /// yield elements from min (inclusive) to max (exclusive).\n     /// The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n     /// `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\n@@ -748,7 +748,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     }\n \n     /// Constructs a mutable double-ended iterator over a sub-range of elements in the map.\n-    /// The simplest way is to use the range synax `min..max`, thus `range(min..max)` will\n+    /// The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\n     /// yield elements from min (inclusive) to max (exclusive).\n     /// The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n     /// `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive"}]}