{"sha": "6d4845668f1755bb92c3053419cb182a4599f1d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNDg0NTY2OGYxNzU1YmI5MmMzMDUzNDE5Y2IxODJhNDU5OWYxZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-20T22:49:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-20T22:49:45Z"}, "message": "auto merge of #6372 : brson/rust/intrinsics, r=catamorphism\n\n...s", "tree": {"sha": "afc2c937dc8c9712e2f221de3173880a149a5478", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afc2c937dc8c9712e2f221de3173880a149a5478"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d4845668f1755bb92c3053419cb182a4599f1d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4845668f1755bb92c3053419cb182a4599f1d5", "html_url": "https://github.com/rust-lang/rust/commit/6d4845668f1755bb92c3053419cb182a4599f1d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d4845668f1755bb92c3053419cb182a4599f1d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54eafc009d1595a04862b242fb6825f9e7b51799", "url": "https://api.github.com/repos/rust-lang/rust/commits/54eafc009d1595a04862b242fb6825f9e7b51799", "html_url": "https://github.com/rust-lang/rust/commit/54eafc009d1595a04862b242fb6825f9e7b51799"}, {"sha": "7bd421776681285bf4dfba09fe7a6dae4c8eecd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd421776681285bf4dfba09fe7a6dae4c8eecd5", "html_url": "https://github.com/rust-lang/rust/commit/7bd421776681285bf4dfba09fe7a6dae4c8eecd5"}], "stats": {"total": 79, "additions": 25, "deletions": 54}, "files": [{"sha": "e3336e24a6e1a7c4f5f32b59d9297525fad991b2", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6d4845668f1755bb92c3053419cb182a4599f1d5/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4845668f1755bb92c3053419cb182a4599f1d5/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=6d4845668f1755bb92c3053419cb182a4599f1d5", "patch": "@@ -12,26 +12,17 @@\n \n use sys;\n use unstable;\n-\n-pub mod rusti {\n-    #[abi = \"rust-intrinsic\"]\n-    #[link_name = \"rusti\"]\n-    pub extern \"rust-intrinsic\" {\n-        fn forget<T>(x: T);\n-\n-        fn transmute<T,U>(e: T) -> U;\n-    }\n-}\n+use unstable::intrinsics;\n \n /// Casts the value at `src` to U. The two types must have the same length.\n pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n-    let mut dest: U = unstable::intrinsics::init();\n+    let mut dest: U = intrinsics::init();\n     {\n-        let dest_ptr: *mut u8 = rusti::transmute(&mut dest);\n-        let src_ptr: *u8 = rusti::transmute(src);\n-        unstable::intrinsics::memmove64(dest_ptr,\n-                                        src_ptr,\n-                                        sys::size_of::<U>() as u64);\n+        let dest_ptr: *mut u8 = transmute(&mut dest);\n+        let src_ptr: *u8 = transmute(src);\n+        intrinsics::memmove64(dest_ptr,\n+                              src_ptr,\n+                              sys::size_of::<U>() as u64);\n     }\n     dest\n }\n@@ -45,7 +36,7 @@ pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n  * reinterpret_cast on pointer types.\n  */\n #[inline(always)]\n-pub unsafe fn forget<T>(thing: T) { rusti::forget(thing); }\n+pub unsafe fn forget<T>(thing: T) { intrinsics::forget(thing); }\n \n /**\n  * Force-increment the reference count on a shared box. If used\n@@ -65,7 +56,7 @@ pub unsafe fn bump_box_refcount<T>(t: @T) { forget(t); }\n  */\n #[inline(always)]\n pub unsafe fn transmute<L, G>(thing: L) -> G {\n-    rusti::transmute(thing)\n+    intrinsics::transmute(thing)\n }\n \n /// Coerce an immutable reference to be mutable."}, {"sha": "784656718d0d228ef48e8cc1216619b9219a072b", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d4845668f1755bb92c3053419cb182a4599f1d5/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4845668f1755bb92c3053419cb182a4599f1d5/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=6d4845668f1755bb92c3053419cb182a4599f1d5", "patch": "@@ -11,6 +11,7 @@\n #[doc(hidden)]; // FIXME #3538\n \n use cast::transmute;\n+use unstable::intrinsics;\n \n pub type Word = uint;\n \n@@ -75,13 +76,6 @@ fn test_simple_deep() {\n \n fn frame_address(f: &fn(x: *u8)) {\n     unsafe {\n-        rusti::frame_address(f)\n-    }\n-}\n-\n-pub mod rusti {\n-    #[abi = \"rust-intrinsic\"]\n-    pub extern \"rust-intrinsic\" {\n-        pub fn frame_address(f: &once fn(x: *u8));\n+        intrinsics::frame_address(f)\n     }\n }"}, {"sha": "962295e0b8a4bc663fa807ec15e8e288c0dffaa3", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6d4845668f1755bb92c3053419cb182a4599f1d5/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4845668f1755bb92c3053419cb182a4599f1d5/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=6d4845668f1755bb92c3053419cb182a4599f1d5", "patch": "@@ -19,6 +19,7 @@ use libc;\n use libc::{c_void, c_char, size_t};\n use repr;\n use str;\n+use unstable::intrinsics;\n \n pub type FreeGlue<'self> = &'self fn(*TypeDesc, *c_void);\n \n@@ -38,16 +39,6 @@ pub struct Closure {\n     env: *(),\n }\n \n-pub mod rusti {\n-    #[abi = \"rust-intrinsic\"]\n-    pub extern \"rust-intrinsic\" {\n-        fn get_tydesc<T>() -> *();\n-        fn size_of<T>() -> uint;\n-        fn pref_align_of<T>() -> uint;\n-        fn min_align_of<T>() -> uint;\n-    }\n-}\n-\n pub mod rustrt {\n     use libc::{c_char, size_t};\n \n@@ -81,7 +72,7 @@ pub fn shape_le<T:Ord>(x1: &T, x2: &T) -> bool {\n  */\n #[inline(always)]\n pub fn get_type_desc<T>() -> *TypeDesc {\n-    unsafe { rusti::get_tydesc::<T>() as *TypeDesc }\n+    unsafe { intrinsics::get_tydesc::<T>() as *TypeDesc }\n }\n \n /// Returns a pointer to a type descriptor.\n@@ -93,7 +84,7 @@ pub fn get_type_desc_val<T>(_val: &T) -> *TypeDesc {\n /// Returns the size of a type\n #[inline(always)]\n pub fn size_of<T>() -> uint {\n-    unsafe { rusti::size_of::<T>() }\n+    unsafe { intrinsics::size_of::<T>() }\n }\n \n /// Returns the size of the type that `_val` points to\n@@ -128,7 +119,7 @@ pub fn nonzero_size_of_val<T>(_val: &T) -> uint {\n  */\n #[inline(always)]\n pub fn min_align_of<T>() -> uint {\n-    unsafe { rusti::min_align_of::<T>() }\n+    unsafe { intrinsics::min_align_of::<T>() }\n }\n \n /// Returns the ABI-required minimum alignment of the type of the value that\n@@ -141,7 +132,7 @@ pub fn min_align_of_val<T>(_val: &T) -> uint {\n /// Returns the preferred alignment of a type\n #[inline(always)]\n pub fn pref_align_of<T>() -> uint {\n-    unsafe { rusti::pref_align_of::<T>() }\n+    unsafe { intrinsics::pref_align_of::<T>() }\n }\n \n /// Returns the preferred alignment of the type of the value that"}, {"sha": "d476822819eb9e0744aeeef58f2ba8d51883f1fe", "filename": "src/libcore/unstable/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d4845668f1755bb92c3053419cb182a4599f1d5/src%2Flibcore%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4845668f1755bb92c3053419cb182a4599f1d5/src%2Flibcore%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fintrinsics.rs?ref=6d4845668f1755bb92c3053419cb182a4599f1d5", "patch": "@@ -114,15 +114,16 @@ pub extern \"rust-intrinsic\" {\n     /// `forget` is unsafe because the caller is responsible for\n     /// ensuring the argument is deallocated already.\n     pub unsafe fn forget<T>(_: T) -> ();\n+    pub fn transmute<T,U>(e: T) -> U;\n \n     /// Returns `true` if a type requires drop glue.\n     pub fn needs_drop<T>() -> bool;\n \n     // XXX: intrinsic uses legacy modes and has reference to TyDesc\n     // and TyVisitor which are in librustc\n     //fn visit_tydesc(++td: *TyDesc, &&tv: TyVisitor) -> ();\n-    // XXX: intrinsic uses legacy modes\n-    //fn frame_address(f: &once fn(*u8));\n+\n+    pub fn frame_address(f: &once fn(*u8));\n \n     /// Get the address of the `__morestack` stack growth function.\n     pub fn morestack_addr() -> *();"}, {"sha": "a087a16caa245340e4e75c55c4b1409210c40c1c", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d4845668f1755bb92c3053419cb182a4599f1d5/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4845668f1755bb92c3053419cb182a4599f1d5/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=6d4845668f1755bb92c3053419cb182a4599f1d5", "patch": "@@ -43,14 +43,7 @@ use core::sys::TypeDesc;\n use core::sys;\n use core::uint;\n use core::vec;\n-\n-pub mod rusti {\n-    #[abi = \"rust-intrinsic\"]\n-    pub extern \"rust-intrinsic\" {\n-        fn move_val_init<T>(dst: &mut T, src: T);\n-        fn needs_drop<T>() -> bool;\n-    }\n-}\n+use core::unstable::intrinsics;\n \n pub mod rustrt {\n     use core::libc::size_t;\n@@ -208,7 +201,7 @@ pub impl Arena {\n             let tydesc = sys::get_type_desc::<T>();\n             let ptr = self.alloc_pod_inner((*tydesc).size, (*tydesc).align);\n             let ptr: *mut T = transmute(ptr);\n-            rusti::move_val_init(&mut (*ptr), op());\n+            intrinsics::move_val_init(&mut (*ptr), op());\n             return transmute(ptr);\n         }\n     }\n@@ -261,7 +254,7 @@ pub impl Arena {\n             // has *not* been initialized yet.\n             *ty_ptr = transmute(tydesc);\n             // Actually initialize it\n-            rusti::move_val_init(&mut(*ptr), op());\n+            intrinsics::move_val_init(&mut(*ptr), op());\n             // Now that we are done, update the tydesc to indicate that\n             // the object is there.\n             *ty_ptr = bitpack_tydesc_ptr(tydesc, true);\n@@ -276,7 +269,7 @@ pub impl Arena {\n         unsafe {\n             // XXX: Borrow check\n             let this = transmute_mut_region(self);\n-            if !rusti::needs_drop::<T>() {\n+            if !intrinsics::needs_drop::<T>() {\n                 return this.alloc_pod(op);\n             }\n             // XXX: Borrow check"}, {"sha": "f1e0027146c9e5ce16ea3b85d736141f2a9a1382", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d4845668f1755bb92c3053419cb182a4599f1d5/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4845668f1755bb92c3053419cb182a4599f1d5/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=6d4845668f1755bb92c3053419cb182a4599f1d5", "patch": "@@ -11,8 +11,9 @@\n //! A priority queue implemented with a binary heap\n \n use core::old_iter::BaseIter;\n+use core::unstable::intrinsics::{move_val_init, init};\n+use core::unstable::intrinsics::uninit;\n use core::util::{replace, swap};\n-use core::unstable::intrinsics::{init, move_val_init};\n \n pub struct PriorityQueue<T> {\n     priv data: ~[T],"}]}