{"sha": "2a95958248b243a14844cf2172edf2c3ad305670", "node_id": "C_kwDOAAsO6NoAKDJhOTU5NTgyNDhiMjQzYTE0ODQ0Y2YyMTcyZWRmMmMzYWQzMDU2NzA", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-12-05T21:38:37Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-12-05T21:38:37Z"}, "message": "Evaluate inline const pat early and report error if too generic", "tree": {"sha": "064b033c5cf7db75679f34d27503f28ab2eb7f56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/064b033c5cf7db75679f34d27503f28ab2eb7f56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a95958248b243a14844cf2172edf2c3ad305670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a95958248b243a14844cf2172edf2c3ad305670", "html_url": "https://github.com/rust-lang/rust/commit/2a95958248b243a14844cf2172edf2c3ad305670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a95958248b243a14844cf2172edf2c3ad305670/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1597728ef5820d3ffcb9d3f0c890ef7802398751", "url": "https://api.github.com/repos/rust-lang/rust/commits/1597728ef5820d3ffcb9d3f0c890ef7802398751", "html_url": "https://github.com/rust-lang/rust/commit/1597728ef5820d3ffcb9d3f0c890ef7802398751"}], "stats": {"total": 128, "additions": 88, "deletions": 40}, "files": [{"sha": "55cf807172e02fc0b390ccd8653e4abe615a3a33", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 52, "deletions": 31, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/2a95958248b243a14844cf2172edf2c3ad305670/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a95958248b243a14844cf2172edf2c3ad305670/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=2a95958248b243a14844cf2172edf2c3ad305670", "patch": "@@ -533,43 +533,64 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Converts inline const patterns.\n+    fn lower_inline_const(\n+        &mut self,\n+        anon_const: &'tcx hir::AnonConst,\n+        id: hir::HirId,\n+        span: Span,\n+    ) -> PatKind<'tcx> {\n+        let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n+        let value = ty::Const::from_inline_const(self.tcx, anon_const_def_id);\n+\n+        // Evaluate early like we do in `lower_path`.\n+        let value = value.eval(self.tcx, self.param_env);\n+\n+        match value.val {\n+            ConstKind::Param(_) => {\n+                self.errors.push(PatternError::ConstParamInPattern(span));\n+                return PatKind::Wild;\n+            }\n+            ConstKind::Unevaluated(_) => {\n+                // If we land here it means the const can't be evaluated because it's `TooGeneric`.\n+                self.tcx.sess.span_err(span, \"constant pattern depends on a generic parameter\");\n+                return PatKind::Wild;\n+            }\n+            _ => (),\n+        }\n+\n+        *self.const_to_pat(value, id, span, false).kind\n+    }\n+\n     /// Converts literals, paths and negation of literals to patterns.\n     /// The special case for negation exists to allow things like `-128_i8`\n     /// which would overflow if we tried to evaluate `128_i8` and then negate\n     /// afterwards.\n     fn lower_lit(&mut self, expr: &'tcx hir::Expr<'tcx>) -> PatKind<'tcx> {\n-        if let hir::ExprKind::Path(ref qpath) = expr.kind {\n-            *self.lower_path(qpath, expr.hir_id, expr.span).kind\n-        } else {\n-            let (lit, neg) = match expr.kind {\n-                hir::ExprKind::ConstBlock(ref anon_const) => {\n-                    let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n-                    let value = ty::Const::from_inline_const(self.tcx, anon_const_def_id);\n-                    if matches!(value.val, ConstKind::Param(_)) {\n-                        let span = self.tcx.hir().span(anon_const.hir_id);\n-                        self.errors.push(PatternError::ConstParamInPattern(span));\n-                        return PatKind::Wild;\n-                    }\n-                    return *self.const_to_pat(value, expr.hir_id, expr.span, false).kind;\n-                }\n-                hir::ExprKind::Lit(ref lit) => (lit, false),\n-                hir::ExprKind::Unary(hir::UnOp::Neg, ref expr) => {\n-                    let lit = match expr.kind {\n-                        hir::ExprKind::Lit(ref lit) => lit,\n-                        _ => span_bug!(expr.span, \"not a literal: {:?}\", expr),\n-                    };\n-                    (lit, true)\n-                }\n-                _ => span_bug!(expr.span, \"not a literal: {:?}\", expr),\n-            };\n-\n-            let lit_input =\n-                LitToConstInput { lit: &lit.node, ty: self.typeck_results.expr_ty(expr), neg };\n-            match self.tcx.at(expr.span).lit_to_const(lit_input) {\n-                Ok(val) => *self.const_to_pat(val, expr.hir_id, lit.span, false).kind,\n-                Err(LitToConstError::Reported) => PatKind::Wild,\n-                Err(LitToConstError::TypeError) => bug!(\"lower_lit: had type error\"),\n+        let (lit, neg) = match expr.kind {\n+            hir::ExprKind::Path(ref qpath) => {\n+                return *self.lower_path(qpath, expr.hir_id, expr.span).kind;\n+            }\n+            hir::ExprKind::ConstBlock(ref anon_const) => {\n+                return self.lower_inline_const(anon_const, expr.hir_id, expr.span);\n+            }\n+            hir::ExprKind::Lit(ref lit) => (lit, false),\n+            hir::ExprKind::Unary(hir::UnOp::Neg, ref expr) => {\n+                let lit = match expr.kind {\n+                    hir::ExprKind::Lit(ref lit) => lit,\n+                    _ => span_bug!(expr.span, \"not a literal: {:?}\", expr),\n+                };\n+                (lit, true)\n             }\n+            _ => span_bug!(expr.span, \"not a literal: {:?}\", expr),\n+        };\n+\n+        let lit_input =\n+            LitToConstInput { lit: &lit.node, ty: self.typeck_results.expr_ty(expr), neg };\n+        match self.tcx.at(expr.span).lit_to_const(lit_input) {\n+            Ok(val) => *self.const_to_pat(val, expr.hir_id, lit.span, false).kind,\n+            Err(LitToConstError::Reported) => PatKind::Wild,\n+            Err(LitToConstError::TypeError) => bug!(\"lower_lit: had type error\"),\n         }\n     }\n }"}, {"sha": "be7e1d8d44984c7676aaa1c80a07569d9feb8cdb", "filename": "src/test/ui/inline-const/const-match-pat-generic.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2a95958248b243a14844cf2172edf2c3ad305670/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a95958248b243a14844cf2172edf2c3ad305670/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.rs?ref=2a95958248b243a14844cf2172edf2c3ad305670", "patch": "@@ -1,16 +1,31 @@\n #![allow(incomplete_features)]\n #![feature(inline_const_pat)]\n+#![feature(generic_const_exprs)]\n \n // rust-lang/rust#82518: ICE with inline-const in match referencing const-generic parameter\n \n fn foo<const V: usize>() {\n-  match 0 {\n-    const { V } => {},\n-    //~^ ERROR const parameters cannot be referenced in patterns [E0158]\n-    _ => {},\n-  }\n+    match 0 {\n+        const { V } => {},\n+        //~^ ERROR const parameters cannot be referenced in patterns [E0158]\n+        _ => {},\n+    }\n+}\n+\n+const fn f(x: usize) -> usize {\n+    x + 1\n+}\n+\n+fn bar<const V: usize>() where [(); f(V)]: {\n+    match 0 {\n+        const { f(V) } => {},\n+        //~^ ERROR constant pattern depends on a generic parameter\n+        //~| ERROR constant pattern depends on a generic parameter\n+        _ => {},\n+    }\n }\n \n fn main() {\n     foo::<1>();\n+    bar::<1>();\n }"}, {"sha": "5fe5a7a6dad412b4eb97c6efc8f33939dd7e3b24", "filename": "src/test/ui/inline-const/const-match-pat-generic.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a95958248b243a14844cf2172edf2c3ad305670/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a95958248b243a14844cf2172edf2c3ad305670/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.stderr?ref=2a95958248b243a14844cf2172edf2c3ad305670", "patch": "@@ -1,9 +1,21 @@\n error[E0158]: const parameters cannot be referenced in patterns\n-  --> $DIR/const-match-pat-generic.rs:8:11\n+  --> $DIR/const-match-pat-generic.rs:9:9\n    |\n-LL |     const { V } => {},\n-   |           ^^^^^\n+LL |         const { V } => {},\n+   |         ^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: constant pattern depends on a generic parameter\n+  --> $DIR/const-match-pat-generic.rs:21:9\n+   |\n+LL |         const { f(V) } => {},\n+   |         ^^^^^^^^^^^^^^\n+\n+error: constant pattern depends on a generic parameter\n+  --> $DIR/const-match-pat-generic.rs:21:9\n+   |\n+LL |         const { f(V) } => {},\n+   |         ^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0158`."}]}