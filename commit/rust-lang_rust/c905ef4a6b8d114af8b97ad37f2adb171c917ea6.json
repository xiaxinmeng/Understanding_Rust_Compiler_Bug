{"sha": "c905ef4a6b8d114af8b97ad37f2adb171c917ea6", "node_id": "C_kwDOAAsO6NoAKGM5MDVlZjRhNmI4ZDExNGFmOGI5N2FkMzdmMmFkYjE3MWM5MTdlYTY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-12T06:57:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-12T07:26:56Z"}, "message": "make flag checks reobust against multi-bit flags", "tree": {"sha": "e89f95d7289af84afe42712bbc4c2cf5aad64eb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e89f95d7289af84afe42712bbc4c2cf5aad64eb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c905ef4a6b8d114af8b97ad37f2adb171c917ea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c905ef4a6b8d114af8b97ad37f2adb171c917ea6", "html_url": "https://github.com/rust-lang/rust/commit/c905ef4a6b8d114af8b97ad37f2adb171c917ea6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c905ef4a6b8d114af8b97ad37f2adb171c917ea6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0876519fe31f0780c382dcc50d6624333d109b58", "url": "https://api.github.com/repos/rust-lang/rust/commits/0876519fe31f0780c382dcc50d6624333d109b58", "html_url": "https://github.com/rust-lang/rust/commit/0876519fe31f0780c382dcc50d6624333d109b58"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "0a26657f57c85cc921db96efbedecdf1fe03842f", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c905ef4a6b8d114af8b97ad37f2adb171c917ea6/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c905ef4a6b8d114af8b97ad37f2adb171c917ea6/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=c905ef4a6b8d114af8b97ad37f2adb171c917ea6", "patch": "@@ -562,17 +562,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let mut mirror = access_mode;\n \n         let o_append = this.eval_libc_i32(\"O_APPEND\")?;\n-        if flag & o_append != 0 {\n+        if flag & o_append == o_append {\n             options.append(true);\n             mirror |= o_append;\n         }\n         let o_trunc = this.eval_libc_i32(\"O_TRUNC\")?;\n-        if flag & o_trunc != 0 {\n+        if flag & o_trunc == o_trunc {\n             options.truncate(true);\n             mirror |= o_trunc;\n         }\n         let o_creat = this.eval_libc_i32(\"O_CREAT\")?;\n-        if flag & o_creat != 0 {\n+        if flag & o_creat == o_creat {\n             // Get the mode.  On macOS, the argument type `mode_t` is actually `u16`, but\n             // C integer promotion rules mean that on the ABI level, it gets passed as `u32`\n             // (see https://github.com/rust-lang/rust/issues/71915).\n@@ -592,22 +592,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             mirror |= o_creat;\n \n             let o_excl = this.eval_libc_i32(\"O_EXCL\")?;\n-            if flag & o_excl != 0 {\n+            if flag & o_excl == o_excl {\n                 mirror |= o_excl;\n                 options.create_new(true);\n             } else {\n                 options.create(true);\n             }\n         }\n         let o_cloexec = this.eval_libc_i32(\"O_CLOEXEC\")?;\n-        if flag & o_cloexec != 0 {\n+        if flag & o_cloexec == o_cloexec {\n             // We do not need to do anything for this flag because `std` already sets it.\n             // (Technically we do not support *not* setting this flag, but we ignore that.)\n             mirror |= o_cloexec;\n         }\n         if this.tcx.sess.target.os == \"linux\" {\n             let o_tmpfile = this.eval_libc_i32(\"O_TMPFILE\")?;\n-            if flag & o_tmpfile != 0 {\n+            if flag & o_tmpfile == o_tmpfile {\n                 // if the flag contains `O_TMPFILE` then we return a graceful error\n                 let eopnotsupp = this.eval_libc(\"EOPNOTSUPP\")?;\n                 this.set_last_error(eopnotsupp)?;\n@@ -1020,7 +1020,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let path = this.read_path_from_c_str(pathname_ptr)?.into_owned();\n         // See <https://github.com/rust-lang/rust/pull/79196> for a discussion of argument sizes.\n-        let empty_path_flag = flags & this.eval_libc(\"AT_EMPTY_PATH\")?.to_i32()? != 0;\n+        let at_ampty_path = this.eval_libc_i32(\"AT_EMPTY_PATH\")?;\n+        let empty_path_flag = flags & at_ampty_path == at_ampty_path;\n         // We only support:\n         // * interpreting `path` as an absolute directory,\n         // * interpreting `path` as a path relative to `dirfd` when the latter is `AT_FDCWD`, or"}, {"sha": "31461e4c9fd384d23e2efd761a993108f665a1c4", "filename": "src/tools/miri/src/shims/unix/linux/sync.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c905ef4a6b8d114af8b97ad37f2adb171c917ea6/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c905ef4a6b8d114af8b97ad37f2adb171c917ea6/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs?ref=c905ef4a6b8d114af8b97ad37f2adb171c917ea6", "patch": "@@ -90,7 +90,8 @@ pub fn futex<'tcx>(\n             let timeout_time = if this.ptr_is_null(timeout.ptr)? {\n                 None\n             } else {\n-                if op & futex_realtime != 0 {\n+                let realtime = op & futex_realtime == futex_realtime;\n+                if realtime {\n                     this.check_no_isolation(\n                         \"`futex` syscall with `op=FUTEX_WAIT` and non-null timeout with `FUTEX_CLOCK_REALTIME`\",\n                     )?;\n@@ -106,14 +107,14 @@ pub fn futex<'tcx>(\n                 };\n                 Some(if wait_bitset {\n                     // FUTEX_WAIT_BITSET uses an absolute timestamp.\n-                    if op & futex_realtime != 0 {\n+                    if realtime {\n                         Time::RealTime(SystemTime::UNIX_EPOCH.checked_add(duration).unwrap())\n                     } else {\n                         Time::Monotonic(this.machine.clock.anchor().checked_add(duration).unwrap())\n                     }\n                 } else {\n                     // FUTEX_WAIT uses a relative timestamp.\n-                    if op & futex_realtime != 0 {\n+                    if realtime {\n                         Time::RealTime(SystemTime::now().checked_add(duration).unwrap())\n                     } else {\n                         Time::Monotonic(this.machine.clock.now().checked_add(duration).unwrap())"}, {"sha": "81af325968866148545a6d4a91c4ab2e22116846", "filename": "src/tools/miri/src/shims/windows/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c905ef4a6b8d114af8b97ad37f2adb171c917ea6/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c905ef4a6b8d114af8b97ad37f2adb171c917ea6/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs?ref=c905ef4a6b8d114af8b97ad37f2adb171c917ea6", "patch": "@@ -76,7 +76,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 this.read_scalar(handle)?.to_machine_isize(this)?;\n                 let flags = this.read_scalar(flags)?.to_u32()?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n-                let zero_init = (flags & 0x00000008) != 0; // HEAP_ZERO_MEMORY\n+                let heap_zero_memory = 0x00000008; // HEAP_ZERO_MEMORY\n+                let zero_init = (flags & heap_zero_memory) == heap_zero_memory;\n                 let res = this.malloc(size, zero_init, MiriMemoryKind::WinHeap)?;\n                 this.write_pointer(res, dest)?;\n             }"}]}