{"sha": "d68be89e6912a394beb12c2731bdc6240a81655b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OGJlODllNjkxMmEzOTRiZWIxMmMyNzMxYmRjNjI0MGE4MTY1NWI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-13T01:56:16Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-15T03:15:42Z"}, "message": "rm MutableIter\n\nreplaced with mutable implementations of Iterator", "tree": {"sha": "8b700635e6a7578df372f0600264e1777e21ba91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b700635e6a7578df372f0600264e1777e21ba91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d68be89e6912a394beb12c2731bdc6240a81655b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d68be89e6912a394beb12c2731bdc6240a81655b", "html_url": "https://github.com/rust-lang/rust/commit/d68be89e6912a394beb12c2731bdc6240a81655b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d68be89e6912a394beb12c2731bdc6240a81655b/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8111701604976d3b0e9e70db621784aefda456b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8111701604976d3b0e9e70db621784aefda456b0", "html_url": "https://github.com/rust-lang/rust/commit/8111701604976d3b0e9e70db621784aefda456b0"}], "stats": {"total": 39, "additions": 6, "deletions": 33}, "files": [{"sha": "b00cd665271f63cd959c8ae40c8a2bafad5631ea", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d68be89e6912a394beb12c2731bdc6240a81655b/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/d68be89e6912a394beb12c2731bdc6240a81655b/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=d68be89e6912a394beb12c2731bdc6240a81655b", "patch": "@@ -327,7 +327,7 @@ fn main() {\n     let mut futures = vec::from_fn(1000, |ind| do extra::future::spawn { partial_sum(ind) });\n \n     let mut final_res = 0f64;\n-    for futures.each_mut |ft|  {\n+    for futures.mut_iter().advance |ft|  {\n         final_res += ft.get();\n     }\n     println(fmt!(\"\u03c0^2/6 is not far from : %?\", final_res));"}, {"sha": "89e23a3a77ffb95eb4fdc8ee61cbb747debe41e5", "filename": "src/libextra/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d68be89e6912a394beb12c2731bdc6240a81655b/src%2Flibextra%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68be89e6912a394beb12c2731bdc6240a81655b/src%2Flibextra%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdeque.rs?ref=d68be89e6912a394beb12c2731bdc6240a81655b", "patch": "@@ -37,7 +37,7 @@ impl<T> Container for Deque<T> {\n impl<T> Mutable for Deque<T> {\n     /// Clear the deque, removing all values.\n     fn clear(&mut self) {\n-        for self.elts.each_mut |x| { *x = None }\n+        for self.elts.mut_iter().advance |x| { *x = None }\n         self.nelts = 0;\n         self.lo = 0;\n         self.hi = 0;"}, {"sha": "e0a01a41f0a3f77541f1dc777cdb52b4496ad6e7", "filename": "src/libstd/old_iter.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d68be89e6912a394beb12c2731bdc6240a81655b/src%2Flibstd%2Fold_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68be89e6912a394beb12c2731bdc6240a81655b/src%2Flibstd%2Fold_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_iter.rs?ref=d68be89e6912a394beb12c2731bdc6240a81655b", "patch": "@@ -33,10 +33,6 @@ pub trait ReverseIter<A>: BaseIter<A> {\n     fn each_reverse(&self, blk: &fn(&A) -> bool) -> bool;\n }\n \n-pub trait MutableIter<A>: BaseIter<A> {\n-    fn each_mut(&mut self, blk: &fn(&mut A) -> bool) -> bool;\n-}\n-\n pub trait ExtendedIter<A> {\n     fn eachi(&self, blk: &fn(uint, v: &A) -> bool) -> bool;\n     fn all(&self, blk: &fn(&A) -> bool) -> bool;"}, {"sha": "c61995619a46398c6319096994c100a3282ef25b", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d68be89e6912a394beb12c2731bdc6240a81655b/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68be89e6912a394beb12c2731bdc6240a81655b/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=d68be89e6912a394beb12c2731bdc6240a81655b", "patch": "@@ -46,7 +46,7 @@ pub use cmp::{Eq, ApproxEq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Great\n pub use char::Char;\n pub use container::{Container, Mutable, Map, Set};\n pub use hash::Hash;\n-pub use old_iter::{BaseIter, ReverseIter, MutableIter, ExtendedIter, EqIter};\n+pub use old_iter::{BaseIter, ReverseIter, ExtendedIter, EqIter};\n pub use old_iter::{CopyableIter, CopyableOrderedIter, CopyableNonstrictIter};\n pub use iter::{Times, FromIter};\n pub use iterator::{Iterator, IteratorUtil};"}, {"sha": "b5ae605e03cd10ef4cb867f9aff0738e78391664", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d68be89e6912a394beb12c2731bdc6240a81655b/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68be89e6912a394beb12c2731bdc6240a81655b/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=d68be89e6912a394beb12c2731bdc6240a81655b", "patch": "@@ -2487,29 +2487,6 @@ impl<A> old_iter::BaseIter<A> for @[A] {\n     fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n }\n \n-impl<'self,A> old_iter::MutableIter<A> for &'self mut [A] {\n-    #[inline(always)]\n-    fn each_mut<'a>(&'a mut self, blk: &fn(v: &'a mut A) -> bool) -> bool {\n-        self.mut_iter().advance(blk)\n-    }\n-}\n-\n-// FIXME(#4148): This should be redundant\n-impl<A> old_iter::MutableIter<A> for ~[A] {\n-    #[inline(always)]\n-    fn each_mut<'a>(&'a mut self, blk: &fn(v: &'a mut A) -> bool) -> bool {\n-        self.mut_iter().advance(blk)\n-    }\n-}\n-\n-// FIXME(#4148): This should be redundant\n-impl<A> old_iter::MutableIter<A> for @mut [A] {\n-    #[inline(always)]\n-    fn each_mut(&mut self, blk: &fn(v: &mut A) -> bool) -> bool {\n-        self.mut_iter().advance(blk)\n-    }\n-}\n-\n impl<'self,A> old_iter::ExtendedIter<A> for &'self [A] {\n     pub fn eachi(&self, blk: &fn(uint, v: &A) -> bool) -> bool {\n         old_iter::eachi(self, blk)"}, {"sha": "2bd53f81b0581cf74b5d80aeb632decca277a872", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d68be89e6912a394beb12c2731bdc6240a81655b/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68be89e6912a394beb12c2731bdc6240a81655b/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=d68be89e6912a394beb12c2731bdc6240a81655b", "patch": "@@ -109,7 +109,7 @@ fn main() {\n     thread_ring(0, msg_per_task, num_chan.take(), num_port);\n \n     // synchronize\n-    for futures.each_mut |f| {\n+    for futures.mut_iter().advance |f| {\n         f.get()\n     }\n "}, {"sha": "f2bb77b26ef55b9cf660354de7d061f44a137ee9", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d68be89e6912a394beb12c2731bdc6240a81655b/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68be89e6912a394beb12c2731bdc6240a81655b/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=d68be89e6912a394beb12c2731bdc6240a81655b", "patch": "@@ -99,7 +99,7 @@ fn main() {\n     thread_ring(0, msg_per_task, num_chan.take(), num_port);\n \n     // synchronize\n-    for futures.each_mut |f| {\n+    for futures.mut_iter().advance |f| {\n         let _ = f.get();\n     }\n "}, {"sha": "b5b5b685d87c48939ed3ec42fb082551323811dc", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d68be89e6912a394beb12c2731bdc6240a81655b/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68be89e6912a394beb12c2731bdc6240a81655b/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=d68be89e6912a394beb12c2731bdc6240a81655b", "patch": "@@ -105,7 +105,7 @@ fn main() {\n     thread_ring(0, msg_per_task, num_chan.take(), num_port);\n \n     // synchronize\n-    for futures.each_mut |f| {\n+    for futures.mut_iter().advance |f| {\n         let _ = f.get();\n     }\n "}]}