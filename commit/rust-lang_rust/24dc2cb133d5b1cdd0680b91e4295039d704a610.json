{"sha": "24dc2cb133d5b1cdd0680b91e4295039d704a610", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZGMyY2IxMzNkNWIxY2RkMDY4MGI5MWU0Mjk1MDM5ZDcwNGE2MTA=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-03-11T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-03-11T22:56:41Z"}, "message": "librustc_codegen_llvm: Replace deprecated API usage", "tree": {"sha": "7bb4f6a2fe1e7aed3bf09f9958f260ddd49c5d9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bb4f6a2fe1e7aed3bf09f9958f260ddd49c5d9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24dc2cb133d5b1cdd0680b91e4295039d704a610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24dc2cb133d5b1cdd0680b91e4295039d704a610", "html_url": "https://github.com/rust-lang/rust/commit/24dc2cb133d5b1cdd0680b91e4295039d704a610", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24dc2cb133d5b1cdd0680b91e4295039d704a610/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be", "url": "https://api.github.com/repos/rust-lang/rust/commits/c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be", "html_url": "https://github.com/rust-lang/rust/commit/c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "115de2a851d6bd340b8b6e1a12fd1209a1e15142", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24dc2cb133d5b1cdd0680b91e4295039d704a610/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dc2cb133d5b1cdd0680b91e4295039d704a610/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=24dc2cb133d5b1cdd0680b91e4295039d704a610", "patch": "@@ -71,8 +71,7 @@ pub fn write_compressed_metadata<'tcx>(\n         // flags, at least for ELF outputs, so that the\n         // metadata doesn't get loaded into memory.\n         let directive = format!(\".section {}\", section_name);\n-        let directive = CString::new(directive).unwrap();\n-        llvm::LLVMSetModuleInlineAsm(metadata_llmod, directive.as_ptr())\n+        llvm::LLVMSetModuleInlineAsm2(metadata_llmod, directive.as_ptr().cast(), directive.len())\n     }\n }\n "}, {"sha": "619dee2909281015b2e9af96dfb6c10585031b7b", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24dc2cb133d5b1cdd0680b91e4295039d704a610/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dc2cb133d5b1cdd0680b91e4295039d704a610/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=24dc2cb133d5b1cdd0680b91e4295039d704a610", "patch": "@@ -1,7 +1,7 @@\n use crate::base;\n use crate::common::CodegenCx;\n use crate::debuginfo;\n-use crate::llvm::{self, SetUnnamedAddr, True};\n+use crate::llvm::{self, True};\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n@@ -183,7 +183,7 @@ impl CodegenCx<'ll, 'tcx> {\n             };\n             llvm::LLVMSetInitializer(gv, cv);\n             set_global_alignment(&self, gv, align);\n-            SetUnnamedAddr(gv, true);\n+            llvm::SetUnnamedAddress(gv, llvm::UnnamedAddr::Global);\n             gv\n         }\n     }"}, {"sha": "3f856c479c5a9acd715ab1f9713425a527c464ca", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24dc2cb133d5b1cdd0680b91e4295039d704a610/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dc2cb133d5b1cdd0680b91e4295039d704a610/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=24dc2cb133d5b1cdd0680b91e4295039d704a610", "patch": "@@ -172,7 +172,7 @@ pub unsafe fn create_module(\n         llvm::LLVMRustSetDataLayoutFromTargetMachine(llmod, tm);\n         llvm::LLVMRustDisposeTargetMachine(tm);\n \n-        let llvm_data_layout = llvm::LLVMGetDataLayout(llmod);\n+        let llvm_data_layout = llvm::LLVMGetDataLayoutStr(llmod);\n         let llvm_data_layout = str::from_utf8(CStr::from_ptr(llvm_data_layout).to_bytes())\n             .expect(\"got a non-UTF8 data-layout from LLVM\");\n \n@@ -504,7 +504,7 @@ impl CodegenCx<'b, 'tcx> {\n             self.type_variadic_func(&[], ret)\n         };\n         let f = self.declare_cfn(name, fn_ty);\n-        llvm::SetUnnamedAddr(f, false);\n+        llvm::SetUnnamedAddress(f, llvm::UnnamedAddr::No);\n         self.intrinsics.borrow_mut().insert(name, f);\n         f\n     }"}, {"sha": "d6fbc53fd3776b2aace48dc036ae9b017e445016", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24dc2cb133d5b1cdd0680b91e4295039d704a610/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dc2cb133d5b1cdd0680b91e4295039d704a610/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=24dc2cb133d5b1cdd0680b91e4295039d704a610", "patch": "@@ -50,7 +50,7 @@ pub fn get_or_insert_gdb_debug_scripts_section_global(cx: &CodegenCx<'ll, '_>) -\n             llvm::LLVMSetSection(section_var, section_name.as_ptr().cast());\n             llvm::LLVMSetInitializer(section_var, cx.const_bytes(section_contents));\n             llvm::LLVMSetGlobalConstant(section_var, llvm::True);\n-            llvm::LLVMSetUnnamedAddr(section_var, llvm::True);\n+            llvm::LLVMSetUnnamedAddress(section_var, llvm::UnnamedAddr::Global);\n             llvm::LLVMRustSetLinkage(section_var, llvm::Linkage::LinkOnceODRLinkage);\n             // This should make sure that the whole section is not larger than\n             // the string it contains. Otherwise we get a warning from GDB."}, {"sha": "236f5bb1bfdfb2871e0428f891b4f90f630ca3d6", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24dc2cb133d5b1cdd0680b91e4295039d704a610/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dc2cb133d5b1cdd0680b91e4295039d704a610/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=24dc2cb133d5b1cdd0680b91e4295039d704a610", "patch": "@@ -40,7 +40,7 @@ fn declare_raw_fn(\n     llvm::SetFunctionCallConv(llfn, callconv);\n     // Function addresses in Rust are never significant, allowing functions to\n     // be merged.\n-    llvm::SetUnnamedAddr(llfn, true);\n+    llvm::SetUnnamedAddress(llfn, llvm::UnnamedAddr::Global);\n \n     if cx.tcx.sess.opts.cg.no_redzone.unwrap_or(cx.tcx.sess.target.target.options.disable_redzone) {\n         llvm::Attribute::NoRedZone.apply_llfn(Function, llfn);"}, {"sha": "69af175bc54decf4ea39bad0851145ca5ffbb2fc", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24dc2cb133d5b1cdd0680b91e4295039d704a610/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dc2cb133d5b1cdd0680b91e4295039d704a610/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=24dc2cb133d5b1cdd0680b91e4295039d704a610", "patch": "@@ -1664,7 +1664,7 @@ fn generic_simd_intrinsic(\n                 llvm_elem_vec_ty,\n             ),\n         );\n-        llvm::SetUnnamedAddr(f, false);\n+        llvm::SetUnnamedAddress(f, llvm::UnnamedAddr::No);\n         let v = bx.call(f, &[args[1].immediate(), alignment, mask, args[0].immediate()], None);\n         return Ok(v);\n     }\n@@ -1786,7 +1786,7 @@ fn generic_simd_intrinsic(\n             &llvm_intrinsic,\n             bx.type_func(&[llvm_elem_vec_ty, llvm_pointer_vec_ty, alignment_ty, mask_ty], ret_t),\n         );\n-        llvm::SetUnnamedAddr(f, false);\n+        llvm::SetUnnamedAddress(f, llvm::UnnamedAddr::No);\n         let v = bx.call(f, &[args[0].immediate(), args[1].immediate(), alignment, mask], None);\n         return Ok(v);\n     }\n@@ -2085,7 +2085,7 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n         let vec_ty = bx.cx.type_vector(elem_ty, in_len as u64);\n \n         let f = bx.declare_cfn(&llvm_intrinsic, bx.type_func(&[vec_ty, vec_ty], vec_ty));\n-        llvm::SetUnnamedAddr(f, false);\n+        llvm::SetUnnamedAddress(f, llvm::UnnamedAddr::No);\n         let v = bx.call(f, &[lhs, rhs], None);\n         return Ok(v);\n     }"}, {"sha": "d4fc546b8e657822d9fc76d07e79cf901b4643e0", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/24dc2cb133d5b1cdd0680b91e4295039d704a610/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dc2cb133d5b1cdd0680b91e4295039d704a610/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=24dc2cb133d5b1cdd0680b91e4295039d704a610", "patch": "@@ -73,6 +73,14 @@ pub enum Visibility {\n     Protected = 2,\n }\n \n+/// LLVMUnnamedAddr\n+#[repr(C)]\n+pub enum UnnamedAddr {\n+    No,\n+    Local,\n+    Global,\n+}\n+\n /// LLVMDLLStorageClass\n #[derive(Copy, Clone)]\n #[repr(C)]\n@@ -727,11 +735,11 @@ extern \"C\" {\n     pub fn LLVMCloneModule(M: &Module) -> &Module;\n \n     /// Data layout. See Module::getDataLayout.\n-    pub fn LLVMGetDataLayout(M: &Module) -> *const c_char;\n+    pub fn LLVMGetDataLayoutStr(M: &Module) -> *const c_char;\n     pub fn LLVMSetDataLayout(M: &Module, Triple: *const c_char);\n \n     /// See Module::setModuleInlineAsm.\n-    pub fn LLVMSetModuleInlineAsm(M: &Module, Asm: *const c_char);\n+    pub fn LLVMSetModuleInlineAsm2(M: &Module, Asm: *const c_char, AsmLen: size_t);\n     pub fn LLVMRustAppendModuleInlineAsm(M: &Module, Asm: *const c_char, AsmLen: size_t);\n \n     /// See llvm::LLVMTypeKind::getTypeID.\n@@ -1853,7 +1861,7 @@ extern \"C\" {\n         UniqueIdLen: size_t,\n     ) -> &'a DIDerivedType;\n \n-    pub fn LLVMSetUnnamedAddr(GlobalVar: &Value, UnnamedAddr: Bool);\n+    pub fn LLVMSetUnnamedAddress(Global: &Value, UnnamedAddr: UnnamedAddr);\n \n     pub fn LLVMRustDIBuilderCreateTemplateTypeParameter(\n         Builder: &DIBuilder<'a>,"}, {"sha": "a6a3e178c6f025a973c4401e772a55d5bc134ad9", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24dc2cb133d5b1cdd0680b91e4295039d704a610/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dc2cb133d5b1cdd0680b91e4295039d704a610/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=24dc2cb133d5b1cdd0680b91e4295039d704a610", "patch": "@@ -106,9 +106,9 @@ pub fn UnsetComdat(val: &'a Value) {\n     }\n }\n \n-pub fn SetUnnamedAddr(global: &'a Value, unnamed: bool) {\n+pub fn SetUnnamedAddress(global: &'a Value, unnamed: UnnamedAddr) {\n     unsafe {\n-        LLVMSetUnnamedAddr(global, unnamed as Bool);\n+        LLVMSetUnnamedAddress(global, unnamed);\n     }\n }\n "}]}