{"sha": "89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "node_id": "C_kwDOAAsO6NoAKDg5YTA3ODNmMWM4ZmVmNDZiMWM4ZGU1N2RjNjExYTFkNzUzYmYwZDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-22T08:07:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-22T08:07:46Z"}, "message": "Auto merge of #98375 - JohnTitor:rollup-e5c6rgo, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #95446 (update CPU usage script)\n - #96768 (Use futex based thread parker on Fuchsia.)\n - #97454 (Add release notes for 1.62)\n - #97516 (clarify how Rust atomics correspond to C++ atomics)\n - #97818 (Point at return expression for RPIT-related error)\n - #97895 (Simplify `likely!` and `unlikely!` macro)\n - #98005 (Add some tests for impossible bounds)\n - #98226 (Document unstable `--extern` options)\n - #98356 (Add missing period)\n - #98363 (remove use of &Alloc in btree tests)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b5bc0da449b017293c90ec93cd34fcf7cd5470b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5bc0da449b017293c90ec93cd34fcf7cd5470b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "html_url": "https://github.com/rust-lang/rust/commit/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d829a0922d865d7a77fb284424fd8ba6afaea3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d829a0922d865d7a77fb284424fd8ba6afaea3b", "html_url": "https://github.com/rust-lang/rust/commit/3d829a0922d865d7a77fb284424fd8ba6afaea3b"}, {"sha": "db64923b800686132139168124891d58b66a2a98", "url": "https://api.github.com/repos/rust-lang/rust/commits/db64923b800686132139168124891d58b66a2a98", "html_url": "https://github.com/rust-lang/rust/commit/db64923b800686132139168124891d58b66a2a98"}], "stats": {"total": 555, "additions": 489, "deletions": 66}, "files": [{"sha": "26613314a15bc2be0a74c6970ac582193fc70b1c", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -83,7 +83,7 @@ by running it with the `--help` flag or reading the [rustc dev guide][rustcguide\n     If you plan to use `x.py install` to create an installation, it is recommended\n     that you set the `prefix` value in the `[install]` section to a directory.\n \n-    Create install directory if you are not installing in default directory\n+    Create install directory if you are not installing in default directory.\n \n 4. Build and install:\n "}, {"sha": "3d88891ad215c22dc6972d906149be8e7e381204", "filename": "RELEASES.md", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -1,3 +1,128 @@\n+Version 1.62.0 (2022-06-30)\n+==========================\n+\n+Language\n+--------\n+\n+- [Stabilize `#[derive(Default)]` on enums with a `#[default]` variant][94457]\n+- [Stop validating some checks in dead code after functions with uninhabited return types][93313]\n+- [Fix constants not getting dropped if part of a diverging expression][94775]\n+- [Support unit struct/enum variant in destructuring assignment][95380]\n+- [Remove mutable_borrow_reservation_conflict lint and allow the code pattern][96268]\n+\n+Compiler\n+--------\n+\n+- [linker: Stop using whole-archive on dependencies of dylibs][96436]\n+- [Make `unaligned_references` lint deny-by-default][95372]\n+  This lint is also a future compatibility lint, and is expected to eventually\n+  become a hard error.\n+- [Only add codegen backend to dep info if -Zbinary-dep-depinfo is used][93969]\n+- [Reject `#[thread_local]` attribute on non-static items][95006]\n+- [Add tier 3 `aarch64-pc-windows-gnullvm` and `x86_64-pc-windows-gnullvm` targets\\*][94872]\n+- [Implement a lint to warn about unused macro rules][96150]\n+- [Promote `x86_64-unknown-none` target to Tier 2\\*][95705]\n+\n+\\* Refer to Rust's [platform support page][platform-support-doc] for more\n+   information on Rust's tiered platform support.\n+\n+Libraries\n+---------\n+\n+- [Move `CStr` to libcore, and `CString` to liballoc][94079]\n+- [Windows: Use a pipe relay for chaining pipes][95841]\n+- [Replace Linux Mutex and Condvar with futex based ones.][95035]\n+- [Replace RwLock by a futex based one on Linux][95801]\n+- [std: directly use pthread in UNIX parker implementation][96393]\n+\n+Stabilized APIs\n+---------------\n+\n+- [`bool::then_some`]\n+- [`f32::total_cmp`]\n+- [`f64::total_cmp`]\n+- [`Stdin::lines`]\n+- [`windows::CommandExt::raw_arg`]\n+- [`impl<T: Default> Default for AssertUnwindSafe<T>`]\n+- [`From<Rc<str>> for Rc<[u8]>`][rc-u8-from-str]\n+- [`From<Arc<str>> for Arc<[u8]>`][arc-u8-from-str]\n+- [`FusedIterator for EncodeWide`]\n+- [RDM intrinsics on aarch64][stdarch/1285]\n+\n+Clippy\n+------\n+\n+- [Create clippy lint against unexpectedly late drop for temporaries in match scrutinee expressions][94206]\n+\n+Cargo\n+-----\n+\n+- Added the `cargo add` command for adding dependencies to `Cargo.toml` from\n+  the command-line.\n+  [docs](https://doc.rust-lang.org/nightly/cargo/commands/cargo-add.html)\n+- Package ID specs now support `name@version` syntax in addition to the\n+  previous `name:version` to align with the behavior in `cargo add` and other\n+  tools. `cargo install` and `cargo yank` also now support this syntax so the\n+  version does not need to passed as a separate flag.\n+- The `git` and `registry` directories in Cargo's home directory (usually\n+  `~/.cargo`) are now marked as cache directories so that they are not\n+  included in backups or content indexing (on Windows).\n+- Added automatic `@` argfile support, which will use \"response files\" if the\n+  command-line to `rustc` exceeds the operating system's limit.\n+\n+Compatibility Notes\n+-------------------\n+\n+- `cargo test` now passes `--target` to `rustdoc` if the specified target is\n+  the same as the host target.\n+  [#10594](https://github.com/rust-lang/cargo/pull/10594)\n+- [rustdoc: Remove .woff font files][96279]\n+- [Enforce Copy bounds for repeat elements while considering lifetimes][95819]\n+\n+Internal Changes\n+----------------\n+\n+- [Unify ReentrantMutex implementations across all platforms][96042]\n+\n+These changes provide no direct user facing benefits, but represent significant\n+improvements to the internals and overall performance of rustc\n+and related tools.\n+\n+[93313]: https://github.com/rust-lang/rust/pull/93313/\n+[93969]: https://github.com/rust-lang/rust/pull/93969/\n+[94079]: https://github.com/rust-lang/rust/pull/94079/\n+[94206]: https://github.com/rust-lang/rust/pull/94206/\n+[94457]: https://github.com/rust-lang/rust/pull/94457/\n+[94775]: https://github.com/rust-lang/rust/pull/94775/\n+[94872]: https://github.com/rust-lang/rust/pull/94872/\n+[95006]: https://github.com/rust-lang/rust/pull/95006/\n+[95035]: https://github.com/rust-lang/rust/pull/95035/\n+[95372]: https://github.com/rust-lang/rust/pull/95372/\n+[95380]: https://github.com/rust-lang/rust/pull/95380/\n+[95431]: https://github.com/rust-lang/rust/pull/95431/\n+[95705]: https://github.com/rust-lang/rust/pull/95705/\n+[95801]: https://github.com/rust-lang/rust/pull/95801/\n+[95819]: https://github.com/rust-lang/rust/pull/95819/\n+[95841]: https://github.com/rust-lang/rust/pull/95841/\n+[96042]: https://github.com/rust-lang/rust/pull/96042/\n+[96150]: https://github.com/rust-lang/rust/pull/96150/\n+[96268]: https://github.com/rust-lang/rust/pull/96268/\n+[96279]: https://github.com/rust-lang/rust/pull/96279/\n+[96393]: https://github.com/rust-lang/rust/pull/96393/\n+[96436]: https://github.com/rust-lang/rust/pull/96436/\n+[96557]: https://github.com/rust-lang/rust/pull/96557/\n+\n+[`bool::then_some`]: https://doc.rust-lang.org/stable/std/primitive.bool.html#method.then_some\n+[`f32::total_cmp`]: https://doc.rust-lang.org/stable/std/primitive.f32.html#method.total_cmp\n+[`f64::total_cmp`]: https://doc.rust-lang.org/stable/std/primitive.f64.html#method.total_cmp\n+[`Stdin::lines`]: https://doc.rust-lang.org/stable/std/io/struct.Stdin.html#method.lines\n+[`impl<T: Default> Default for AssertUnwindSafe<T>`]: https://doc.rust-lang.org/stable/std/panic/struct.AssertUnwindSafe.html#impl-Default\n+[rc-u8-from-str]: https://doc.rust-lang.org/stable/std/rc/struct.Rc.html#impl-From%3CRc%3Cstr%3E%3E\n+[arc-u8-from-str]: https://doc.rust-lang.org/stable/std/sync/struct.Arc.html#impl-From%3CArc%3Cstr%3E%3E\n+[stdarch/1285]: https://github.com/rust-lang/stdarch/pull/1285\n+[`windows::CommandExt::raw_arg`]: https://doc.rust-lang.org/stable/std/os/windows/process/trait.CommandExt.html#tymethod.raw_arg\n+[`FusedIterator for EncodeWide`]: https://doc.rust-lang.org/stable/std/os/windows/ffi/struct.EncodeWide.html#impl-FusedIterator\n+\n Version 1.61.0 (2022-05-19)\n ==========================\n "}, {"sha": "390a44d3f337dee7549d6162f7e1d38b0339455a", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -11,7 +11,6 @@\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]\n #![feature(control_flow_enum)]\n-#![feature(core_intrinsics)]\n #![feature(extend_one)]\n #![feature(let_else)]\n #![feature(hash_raw_entry)]\n@@ -44,26 +43,6 @@ pub fn cold_path<F: FnOnce() -> R, R>(f: F) -> R {\n     f()\n }\n \n-#[macro_export]\n-macro_rules! likely {\n-    ($e:expr) => {\n-        match $e {\n-            #[allow(unused_unsafe)]\n-            e => unsafe { std::intrinsics::likely(e) },\n-        }\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! unlikely {\n-    ($e:expr) => {\n-        match $e {\n-            #[allow(unused_unsafe)]\n-            e => unsafe { std::intrinsics::unlikely(e) },\n-        }\n-    };\n-}\n-\n pub mod base_n;\n pub mod binary_search_util;\n pub mod captures;"}, {"sha": "88ff33b4d09a15989eeab46ab316431a238149f9", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -195,6 +195,7 @@ impl SelfProfilerRef {\n         F: for<'a> FnOnce(&'a SelfProfiler) -> TimingGuard<'a>,\n     {\n         #[inline(never)]\n+        #[cold]\n         fn cold_call<F>(profiler_ref: &SelfProfilerRef, f: F) -> TimingGuard<'_>\n         where\n             F: for<'a> FnOnce(&'a SelfProfiler) -> TimingGuard<'a>,\n@@ -203,7 +204,7 @@ impl SelfProfilerRef {\n             f(&**profiler)\n         }\n \n-        if unlikely!(self.event_filter_mask.contains(event_filter)) {\n+        if self.event_filter_mask.contains(event_filter) {\n             cold_call(self, f)\n         } else {\n             TimingGuard::none()"}, {"sha": "7684d861f3c9394595c9ab3ec0a167fd67116686", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -5,7 +5,7 @@ use hir::{HirId, OpaqueTyOrigin};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_hir as hir;\n-use rustc_middle::traits::ObligationCause;\n+use rustc_middle::traits::{ObligationCause, ObligationCauseCode};\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n use rustc_middle::ty::{\n@@ -46,6 +46,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         value: T,\n         body_id: HirId,\n         span: Span,\n+        code: ObligationCauseCode<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> InferOk<'tcx, T> {\n         if !value.has_opaque_types() {\n@@ -68,10 +69,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     ) =>\n                 {\n                     let span = if span.is_dummy() { self.tcx.def_span(def_id) } else { span };\n-                    let cause = ObligationCause::misc(span, body_id);\n+                    let cause = ObligationCause::new(span, body_id, code.clone());\n+                    // FIXME(compiler-errors): We probably should add a new TypeVariableOriginKind\n+                    // for opaque types, and then use that kind to fix the spans for type errors\n+                    // that we see later on.\n                     let ty_var = self.next_ty_var(TypeVariableOrigin {\n                         kind: TypeVariableOriginKind::TypeInference,\n-                        span: cause.span,\n+                        span,\n                     });\n                     obligations.extend(\n                         self.handle_opaque_type(ty, ty_var, true, &cause, param_env)"}, {"sha": "5258d37a14c91df20cf6aea15ce367482f5f7f93", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -387,6 +387,9 @@ pub enum ObligationCauseCode<'tcx> {\n     /// Return type of this function\n     ReturnType,\n \n+    /// Opaque return type of this function\n+    OpaqueReturnType(Option<(Ty<'tcx>, Span)>),\n+\n     /// Block implicit return\n     BlockTailExpression(hir::HirId),\n "}, {"sha": "00403ff044c40b07c5f13f1617d68dd748f4a93b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -804,7 +804,7 @@ pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;\n \n impl<'tcx> TraitPredicate<'tcx> {\n     pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {\n-        if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {\n+        if std::intrinsics::unlikely(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {\n             // remap without changing constness of this predicate.\n             // this is because `T: ~const Drop` has a different meaning to `T: Drop`\n             // FIXME(fee1-dead): remove this logic after beta bump"}, {"sha": "341cf8f827bc9b892287edc86668562973d7971e", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -750,7 +750,7 @@ impl<K: DepKind> DepGraph<K> {\n             dep_node\n         );\n \n-        if unlikely!(!side_effects.is_empty()) {\n+        if !side_effects.is_empty() {\n             self.emit_side_effects(tcx, data, dep_node_index, side_effects);\n         }\n "}, {"sha": "3e4c7ad9f8f41a2b66a75bc924f6d9702fc9091e", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -316,7 +316,7 @@ where\n     OnHit: FnOnce(&C::Stored) -> R,\n {\n     cache.lookup(&key, |value, index| {\n-        if unlikely!(tcx.profiler().enabled()) {\n+        if std::intrinsics::unlikely(tcx.profiler().enabled()) {\n             tcx.profiler().query_cache_hit(index.into());\n         }\n         tcx.dep_graph().read_index(index);\n@@ -354,7 +354,7 @@ where\n                 .lookup(&key, |value, index| (value.clone(), index))\n                 .unwrap_or_else(|_| panic!(\"value must be in cache after waiting\"));\n \n-            if unlikely!(tcx.dep_context().profiler().enabled()) {\n+            if std::intrinsics::unlikely(tcx.dep_context().profiler().enabled()) {\n                 tcx.dep_context().profiler().query_cache_hit(index.into());\n             }\n             query_blocked_prof_timer.finish_with_query_invocation_id(index.into());\n@@ -422,7 +422,7 @@ where\n     let diagnostics = diagnostics.into_inner();\n     let side_effects = QuerySideEffects { diagnostics };\n \n-    if unlikely!(!side_effects.is_empty()) {\n+    if std::intrinsics::unlikely(!side_effects.is_empty()) {\n         if query.anon {\n             tcx.store_side_effects_for_anon_node(dep_node_index, side_effects);\n         } else {\n@@ -466,7 +466,9 @@ where\n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n \n         if let Some(result) = result {\n-            if unlikely!(tcx.dep_context().sess().opts.debugging_opts.query_dep_graph) {\n+            if std::intrinsics::unlikely(\n+                tcx.dep_context().sess().opts.debugging_opts.query_dep_graph,\n+            ) {\n                 dep_graph.mark_debug_loaded_from_disk(*dep_node)\n             }\n \n@@ -483,8 +485,8 @@ where\n             // currently afford to verify every hash. This subset should still\n             // give us some coverage of potential bugs though.\n             let try_verify = prev_fingerprint.as_value().1 % 32 == 0;\n-            if unlikely!(\n-                try_verify || tcx.dep_context().sess().opts.debugging_opts.incremental_verify_ich\n+            if std::intrinsics::unlikely(\n+                try_verify || tcx.dep_context().sess().opts.debugging_opts.incremental_verify_ich,\n             ) {\n                 incremental_verify_ich(*tcx.dep_context(), &result, dep_node, query);\n             }\n@@ -723,7 +725,7 @@ where\n     // Ensure that only one of them runs the query.\n     let cache = Q::query_cache(tcx);\n     let cached = cache.lookup(&key, |_, index| {\n-        if unlikely!(tcx.dep_context().profiler().enabled()) {\n+        if std::intrinsics::unlikely(tcx.dep_context().profiler().enabled()) {\n             tcx.dep_context().profiler().query_cache_hit(index.into());\n         }\n     });"}, {"sha": "0485cac9e9f746da2459e7072cad9f285e30d13a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -2661,6 +2661,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     err.help(\"add `#![feature(trivial_bounds)]` to the crate attributes to enable\");\n                 }\n             }\n+            ObligationCauseCode::OpaqueReturnType(expr_info) => {\n+                if let Some((expr_ty, expr_span)) = expr_info {\n+                    let expr_ty = self.resolve_vars_if_possible(expr_ty);\n+                    err.span_label(\n+                        expr_span,\n+                        format!(\"return type was inferred to be `{expr_ty}` here\"),\n+                    );\n+                }\n+            }\n         }\n     }\n "}, {"sha": "82c54291a5d5ef6a3055e39a5d1ed125a2e8a388", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -28,6 +28,7 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n+use rustc_infer::traits::ObligationCauseCode;\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::fold::{MaxUniverse, TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::subst::Subst;\n@@ -261,6 +262,7 @@ fn project_and_unify_type<'cx, 'tcx>(\n             actual,\n             obligation.cause.body_id,\n             obligation.cause.span,\n+            ObligationCauseCode::MiscObligation,\n             obligation.param_env,\n         );\n     obligations.extend(new);"}, {"sha": "45c011b78e38830d2f1fc5e623e88f2c6b1cd94e", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -101,8 +101,13 @@ pub(super) fn check_fn<'a, 'tcx>(\n             declared_ret_ty,\n             body.value.hir_id,\n             DUMMY_SP,\n+            traits::ObligationCauseCode::OpaqueReturnType(None),\n             param_env,\n         ));\n+    // If we replaced declared_ret_ty with infer vars, then we must be infering\n+    // an opaque type, so set a flag so we can improve diagnostics.\n+    fcx.return_type_has_opaque = ret_ty != declared_ret_ty;\n+\n     fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(ret_ty)));\n     fcx.ret_type_span = Some(decl.output.span());\n "}, {"sha": "cce11305119447fa80007006fc9f1dfa7a78dcbb", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_infer::infer::{InferOk, InferResult};\n+use rustc_infer::traits::ObligationCauseCode;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, Ty};\n@@ -645,8 +646,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     fn hide_parent_opaque_types(&self, ty: Ty<'tcx>, span: Span, body_id: hir::HirId) -> Ty<'tcx> {\n-        let InferOk { value, obligations } =\n-            self.replace_opaque_types_with_inference_vars(ty, body_id, span, self.param_env);\n+        let InferOk { value, obligations } = self.replace_opaque_types_with_inference_vars(\n+            ty,\n+            body_id,\n+            span,\n+            ObligationCauseCode::MiscObligation,\n+            self.param_env,\n+        );\n         self.register_predicates(obligations);\n         value\n     }"}, {"sha": "77d6495f38c2f148f59c8408b855022ab22a4379", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -39,6 +39,7 @@ use rustc_hir::{ExprKind, HirId, QPath};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::InferOk;\n+use rustc_infer::traits::ObligationCause;\n use rustc_middle::middle::stability;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase};\n use rustc_middle::ty::error::TypeError::FieldMisMatch;\n@@ -839,6 +840,37 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return_expr,\n             return_expr_ty,\n         );\n+\n+        if self.return_type_has_opaque {\n+            // Point any obligations that were registered due to opaque type\n+            // inference at the return expression.\n+            self.select_obligations_where_possible(false, |errors| {\n+                self.point_at_return_for_opaque_ty_error(errors, span, return_expr_ty);\n+            });\n+        }\n+    }\n+\n+    fn point_at_return_for_opaque_ty_error(\n+        &self,\n+        errors: &mut Vec<traits::FulfillmentError<'tcx>>,\n+        span: Span,\n+        return_expr_ty: Ty<'tcx>,\n+    ) {\n+        // Don't point at the whole block if it's empty\n+        if span == self.tcx.hir().span(self.body_id) {\n+            return;\n+        }\n+        for err in errors {\n+            let cause = &mut err.obligation.cause;\n+            if let ObligationCauseCode::OpaqueReturnType(None) = cause.code() {\n+                let new_cause = ObligationCause::new(\n+                    cause.span,\n+                    cause.body_id,\n+                    ObligationCauseCode::OpaqueReturnType(Some((return_expr_ty, span))),\n+                );\n+                *cause = new_cause;\n+            }\n+        }\n     }\n \n     pub(crate) fn check_lhs_assignable("}, {"sha": "8b680a3d042da52c12b83032e3d5fd42ff6fca9b", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -115,6 +115,9 @@ pub struct FnCtxt<'a, 'tcx> {\n     /// either given explicitly or inferred from, say, an `Fn*` trait\n     /// bound. Used for diagnostic purposes only.\n     pub(super) return_type_pre_known: bool,\n+\n+    /// True if the return type has an Opaque type\n+    pub(super) return_type_has_opaque: bool,\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -141,6 +144,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }),\n             inh,\n             return_type_pre_known: true,\n+            return_type_has_opaque: false,\n         }\n     }\n "}, {"sha": "aadb0dc9c40d9304a68176eaea9d60f9a12bf433", "filename": "library/alloc/src/collections/btree/node/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -68,10 +68,10 @@ fn test_splitpoint() {\n \n #[test]\n fn test_partial_eq() {\n-    let mut root1 = NodeRef::new_leaf(&Global);\n+    let mut root1 = NodeRef::new_leaf(Global);\n     root1.borrow_mut().push(1, ());\n-    let mut root1 = NodeRef::new_internal(root1.forget_type(), &Global).forget_type();\n-    let root2 = Root::new(&Global);\n+    let mut root1 = NodeRef::new_internal(root1.forget_type(), Global).forget_type();\n+    let root2 = Root::new(Global);\n     root1.reborrow().assert_back_pointers();\n     root2.reborrow().assert_back_pointers();\n \n@@ -87,9 +87,9 @@ fn test_partial_eq() {\n     assert!(top_edge_1 == top_edge_1);\n     assert!(top_edge_1 != top_edge_2);\n \n-    root1.pop_internal_level(&Global);\n-    unsafe { root1.into_dying().deallocate_and_ascend(&Global) };\n-    unsafe { root2.into_dying().deallocate_and_ascend(&Global) };\n+    root1.pop_internal_level(Global);\n+    unsafe { root1.into_dying().deallocate_and_ascend(Global) };\n+    unsafe { root2.into_dying().deallocate_and_ascend(Global) };\n }\n \n #[test]"}, {"sha": "a66ecc35bbdb105290b517430b7840056eeb1ac2", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -4,6 +4,12 @@\n //! threads, and are the building blocks of other concurrent\n //! types.\n //!\n+//! Rust atomics currently follow the same rules as [C++20 atomics][cpp], specifically `atomic_ref`.\n+//! Basically, creating a *shared reference* to one of the Rust atomic types corresponds to creating\n+//! an `atomic_ref` in C++; the `atomic_ref` is destroyed when the lifetime of the shared reference\n+//! ends. (A Rust atomic type that is exclusively owned or behind a mutable reference does *not*\n+//! correspond to an \"atomic object\" in C++, since it can be accessed via non-atomic operations.)\n+//!\n //! This module defines atomic versions of a select number of primitive\n //! types, including [`AtomicBool`], [`AtomicIsize`], [`AtomicUsize`],\n //! [`AtomicI8`], [`AtomicU16`], etc.\n@@ -14,6 +20,7 @@\n //! the memory barrier for that operation. These orderings are the\n //! same as the [C++20 atomic orderings][1]. For more information see the [nomicon][2].\n //!\n+//! [cpp]: https://en.cppreference.com/w/cpp/atomic\n //! [1]: https://en.cppreference.com/w/cpp/atomic/memory_order\n //! [2]: ../../../nomicon/atomics.html\n //!"}, {"sha": "ab516a7f76dd027824be9068ec1edbcae9b935a0", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -5,6 +5,7 @@\n     target_os = \"freebsd\",\n     target_os = \"openbsd\",\n     target_os = \"dragonfly\",\n+    target_os = \"fuchsia\",\n ))]\n \n use crate::sync::atomic::AtomicU32;\n@@ -237,3 +238,52 @@ pub fn futex_wake(futex: &AtomicU32) -> bool {\n pub fn futex_wake_all(futex: &AtomicU32) {\n     unsafe { emscripten_futex_wake(futex, i32::MAX) };\n }\n+\n+#[cfg(target_os = \"fuchsia\")]\n+mod zircon {\n+    type zx_time_t = i64;\n+    type zx_futex_t = crate::sync::atomic::AtomicU32;\n+    type zx_handle_t = u32;\n+    type zx_status_t = i32;\n+\n+    pub const ZX_HANDLE_INVALID: zx_handle_t = 0;\n+    pub const ZX_ERR_TIMED_OUT: zx_status_t = -21;\n+    pub const ZX_TIME_INFINITE: zx_time_t = zx_time_t::MAX;\n+\n+    extern \"C\" {\n+        pub fn zx_futex_wait(\n+            value_ptr: *const zx_futex_t,\n+            current_value: zx_futex_t,\n+            new_futex_owner: zx_handle_t,\n+            deadline: zx_time_t,\n+        ) -> zx_status_t;\n+        pub fn zx_futex_wake(value_ptr: *const zx_futex_t, wake_count: u32) -> zx_status_t;\n+        pub fn zx_clock_get_monotonic() -> zx_time_t;\n+    }\n+}\n+\n+#[cfg(target_os = \"fuchsia\")]\n+pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n+    use crate::convert::TryFrom;\n+\n+    // Sleep forever if the timeout is longer than fits in a i64.\n+    let deadline = timeout\n+        .and_then(|d| {\n+            i64::try_from(d.as_nanos())\n+                .ok()?\n+                .checked_add(unsafe { zircon::zx_clock_get_monotonic() })\n+        })\n+        .unwrap_or(zircon::ZX_TIME_INFINITE);\n+\n+    unsafe {\n+        zircon::zx_futex_wait(futex, AtomicU32::new(expected), zircon::ZX_HANDLE_INVALID, deadline)\n+            != zircon::ZX_ERR_TIMED_OUT\n+    }\n+}\n+\n+// Fuchsia doesn't tell us how many threads are woken up, so this always returns false.\n+#[cfg(target_os = \"fuchsia\")]\n+pub fn futex_wake(futex: &AtomicU32) -> bool {\n+    unsafe { zircon::zx_futex_wake(futex, 1) };\n+    false\n+}"}, {"sha": "9f4d4f7e736e8af5712a689035c2fdeae427edbf", "filename": "library/std/src/sys/unix/thread_parker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -7,6 +7,7 @@\n     target_os = \"freebsd\",\n     target_os = \"openbsd\",\n     target_os = \"dragonfly\",\n+    target_os = \"fuchsia\",\n )))]\n \n use crate::cell::UnsafeCell;"}, {"sha": "7e8bfb2565e454ca27b748e069ad51f3381e6f5d", "filename": "library/std/src/sys_common/thread_parker/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -6,6 +6,7 @@ cfg_if::cfg_if! {\n         target_os = \"freebsd\",\n         target_os = \"openbsd\",\n         target_os = \"dragonfly\",\n+        target_os = \"fuchsia\",\n     ))] {\n         mod futex;\n         pub use futex::Parker;"}, {"sha": "858eee5d2c283bdc0865e460ce4241a66ae50f30", "filename": "src/doc/unstable-book/src/compiler-flags/extern-options.md", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-options.md", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-options.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-options.md?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -0,0 +1,22 @@\n+# `--extern` Options\n+\n+The behavior of the `--extern` flag can be modified with `noprelude`, `priv` or `nounused` options.\n+\n+This is unstable feature, so you have to provide `-Zunstable-options` to enable it.\n+\n+## Examples\n+\n+Use your own build of the `core` crate.\n+\n+`rustc main.rs -Z unstable-options --extern noprelude:core=libcore.rlib`\n+\n+To use multiple options, separate them with a comma:\n+\n+`rustc main.rs -Z unstable-options --extern noprelude,priv,nounused:mydep=mydep.rlib`\n+\n+## Options\n+\n+* `noprelude`: Do not add the crate to the external prelude. If used, it will need to be imported using `extern crate`.\n+  This is used by the [build-std project](https://github.com/rust-lang/wg-cargo-std-aware/) to simulate compatibility with sysroot-only crates.\n+* `priv`: Mark the crate as a private dependency for the [`exported_private_dependencies`](../../rustc/lints/listing/warn-by-default.html#exported-private-dependencies) lint.\n+* `nounused`: Suppress [`unused-crate-dependencies`](../../rustc/lints/listing/allowed-by-default.html#unused-crate-dependencies) warnings for the crate."}, {"sha": "1c34255919434528778692442631789887f6ba58", "filename": "src/etc/cpu-usage-over-time-plot.sh", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Fetc%2Fcpu-usage-over-time-plot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Fetc%2Fcpu-usage-over-time-plot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcpu-usage-over-time-plot.sh?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -7,13 +7,21 @@\n # commit SHA of the build you're interested in, and the second is the name of\n # the builder. For example:\n #\n-#  ./src/etc/cpu-usage-over-time-plot.sh e699ea096fcc2fc9ce8e8bcf884e11496a31cc9f i686-mingw-1\n+#  ./src/etc/cpu-usage-over-time-plot.sh 7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c x86_64-gnu\n #\n # That will generate `$builder.png` in the current directory which you can open\n # up to see a hopefully pretty graph.\n #\n # Improvements to this script are greatly appreciated!\n \n+if [[ $# != 2 ]]; then\n+    echo \"expected 2 arguments, recieved $#\"\n+    echo \"example usage: './src/etc/cpu-usage-over-time-plot.sh \\\n+7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c \\\n+x86_64-gnu'\"\n+    exit 1\n+fi\n+\n set -ex\n \n bucket=rust-lang-ci2\n@@ -30,7 +38,7 @@ set ylabel \"CPU Usage %\"\n set xlabel \"Time\"\n set datafile sep ','\n set term png size 3000,1000\n-set output \"$builder.png\"\n+set output \"$builder-$commit-cpu-usage-plot.png\"\n set grid\n \n f(x) = mean_y\n@@ -43,7 +51,9 @@ set ytics 10\n set boxwidth 0.5\n \n plot \\\\\n-   mean_y with lines linetype 1 linecolor rgb \"#ff0000\" title \"average\", \\\\\n-   \"cpu-$builder.csv\" using 1:(100-\\$2) with points pointtype 7 pointsize 0.4 title \"$builder\", \\\\\n-   \"\" using 1:(100-\\$2) smooth bezier linewidth 3 title \"bezier\"\n+    mean_y with lines linetype 1 linecolor rgb \"#ff0000\" title \"average\", \"cpu-$builder.csv\" \\\\\n+    using 1:(100-\\$2) with points pointtype 7 pointsize 0.4 title \"$builder\", \"\" \\\\\n+    using 1:(100-\\$2) smooth bezier linewidth 3 title \"bezier\"\n EOF\n+\n+rm \"cpu-$builder.csv\""}, {"sha": "fbd76a64c1e9273b9a7eeae22331e4b08048f978", "filename": "src/test/ui/associated-types/impl-trait-return-missing-constraint.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -6,6 +6,9 @@ LL | fn bar() -> impl Bar {\n ...\n LL | fn baz() -> impl Bar<Item = i32> {\n    |             ^^^^^^^^^^^^^^^^^^^^ expected associated type, found `i32`\n+LL |\n+LL |     bar()\n+   |     ----- return type was inferred to be `impl Bar` here\n    |\n    = note: expected associated type `<impl Bar as Foo>::Item`\n                          found type `i32`"}, {"sha": "cbc7b93f3a925328e24b5d99666eb5924671d974", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -3,6 +3,9 @@ error[E0277]: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n    |\n LL | fn rawr() -> impl Trait {\n    |              ^^^^^^^^^^ the trait `Trait` is not implemented for `Uwu<10_u32, 12_u32>`\n+LL |\n+LL |     Uwu::<10, 12>\n+   |     ------------- return type was inferred to be `Uwu<10_u32, 12_u32>` here\n    |\n    = help: the trait `Trait` is implemented for `Uwu<N>`\n \n@@ -11,6 +14,9 @@ error[E0277]: the trait bound `u32: Traitor<N>` is not satisfied\n    |\n LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n    |                          ^^^^^^^^^^^^^^^ the trait `Traitor<N>` is not implemented for `u32`\n+LL |\n+LL |     1_u32\n+   |     ----- return type was inferred to be `u32` here\n    |\n    = help: the following other types implement trait `Traitor<N, M>`:\n              <u32 as Traitor<N, 2_u8>>\n@@ -21,6 +27,9 @@ error[E0277]: the trait bound `u64: Traitor` is not satisfied\n    |\n LL | fn owo() -> impl Traitor {\n    |             ^^^^^^^^^^^^ the trait `Traitor` is not implemented for `u64`\n+LL |\n+LL |     1_u64\n+   |     ----- return type was inferred to be `u64` here\n    |\n    = help: the following other types implement trait `Traitor<N, M>`:\n              <u32 as Traitor<N, 2_u8>>"}, {"sha": "bd8d3d3d24ece77d6e3b82e4909973adad6a6379", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -3,6 +3,9 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as imp\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n+LL |\n+LL |         Foo(())\n+   |         ------- return type was inferred to be `Foo<()>` here\n    |\n note: expected this to be `()`\n   --> $DIR/bound-normalization-fail.rs:14:19\n@@ -27,6 +30,9 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lif\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n+...\n+LL |         Foo(())\n+   |         ------- return type was inferred to be `Foo<()>` here\n    |\n note: expected this to be `()`\n   --> $DIR/bound-normalization-fail.rs:14:19"}, {"sha": "829d0a02ec90b24ae8f8fbfe42c756ee608c7968", "filename": "src/test/ui/issues-71798.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Fissues-71798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Fissues-71798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues-71798.stderr?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -9,6 +9,9 @@ error[E0277]: `u32` is not a future\n    |\n LL | fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `u32` is not a future\n+LL |\n+LL |     *x\n+   |     -- return type was inferred to be `u32` here\n    |\n    = help: the trait `Future` is not implemented for `u32`\n    = note: u32 must be a future or must implement `IntoFuture` to be awaited"}, {"sha": "f4d21a160b695399672a77bf24816df512f2d858", "filename": "src/test/ui/trait-bounds/issue-93008.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -1,10 +1,15 @@\n-// compile-flags: -Zmir-opt-level=4\n+// build-pass\n+// compile-flags: -Zmir-opt-level=3 --crate-type=lib\n \n-pub fn bar<T>(s: &'static mut ())\n+#![feature(trivial_bounds)]\n+#![allow(trivial_bounds)]\n+\n+trait Foo {\n+    fn test(self);\n+}\n+fn baz<T>()\n where\n-    &'static mut (): Clone, //~ ERROR the trait bound\n+    &'static str: Foo,\n {\n-    <&'static mut () as Clone>::clone(&s);\n+    \"Foo\".test()\n }\n-\n-fn main() {}"}, {"sha": "10f80f8de0c9b8267a8f8c6466cba7048bae10f7", "filename": "src/test/ui/trait-bounds/issue-93008.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d829a0922d865d7a77fb284424fd8ba6afaea3b/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d829a0922d865d7a77fb284424fd8ba6afaea3b/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.stderr?ref=3d829a0922d865d7a77fb284424fd8ba6afaea3b", "patch": "@@ -1,12 +0,0 @@\n-error[E0277]: the trait bound `&'static mut (): Clone` is not satisfied\n-  --> $DIR/issue-93008.rs:5:5\n-   |\n-LL |     &'static mut (): Clone,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `&'static mut ()`\n-   |\n-   = help: see issue #48214\n-   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "58e892079e65fda938ec3e7405d665e6cee9e92f", "filename": "src/test/ui/trait-bounds/issue-94680.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-94680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-94680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-94680.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+fn main() {\n+    println!(\"{:?}\", {\n+        type T = ();\n+\n+        pub fn cloneit(it: &'_ mut T) -> (&'_ mut T, &'_ mut T)\n+        where\n+            for<'any> &'any mut T: Clone,\n+        {\n+            (it.clone(), it)\n+        }\n+    });\n+}"}, {"sha": "e131902346f1b2c3d73211ecff205ec40b7b07f1", "filename": "src/test/ui/trait-bounds/issue-94999.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-94999.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-94999.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-94999.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -0,0 +1,34 @@\n+// check-pass\n+\n+trait Identity<Q> {\n+    type T;\n+}\n+\n+impl<Q, T> Identity<Q> for T {\n+    type T = T;\n+}\n+\n+trait Holds {\n+    type Q;\n+}\n+\n+struct S;\n+struct X(S);\n+\n+struct XHelper;\n+\n+impl Holds for X {\n+    type Q = XHelper;\n+}\n+\n+impl<Q> Clone for X\n+where\n+    <S as Identity<Q>>::T: Clone,\n+    X: Holds<Q = Q>,\n+{\n+    fn clone(&self) -> Self {\n+        Self(self.0.clone())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e4e998b5d0bb8a86f4bdf82516e0174221e6d74d", "filename": "src/test/ui/trait-bounds/issue-95640.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-95640.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-95640.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-95640.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -0,0 +1,31 @@\n+// build-pass\n+// compile-flags:-Zmir-opt-level=3\n+\n+struct D;\n+\n+trait Tr {\n+    type It;\n+    fn foo(self) -> Option<Self::It>;\n+}\n+\n+impl<'a> Tr for &'a D {\n+    type It = ();\n+    fn foo(self) -> Option<()> {\n+        None\n+    }\n+}\n+\n+fn run<F>(f: F)\n+where\n+    for<'a> &'a D: Tr,\n+    F: Fn(<&D as Tr>::It),\n+{\n+    let d = &D;\n+    while let Some(i) = d.foo() {\n+        f(i);\n+    }\n+}\n+\n+fn main() {\n+    run(|_| {});\n+}"}, {"sha": "288b2098b4c026cf37fe87842c781d8e9ba12796", "filename": "src/test/ui/trait-bounds/select-param-env-instead-of-blanket.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.rs?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -0,0 +1,43 @@\n+// known-bug\n+// build-fail\n+// failure-status: 101\n+// compile-flags:--crate-type=lib -Zmir-opt-level=3\n+// rustc-env:RUST_BACKTRACE=0\n+\n+// normalize-stderr-test \"thread 'rustc' panicked.*\" -> \"thread 'rustc' panicked\"\n+// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n+// normalize-stderr-test \"error: internal compiler error.*\" -> \"error: internal compiler error\"\n+// normalize-stderr-test \"encountered.*with incompatible types:\" \"encountered ... with incompatible types:\"\n+// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"query stack during panic:\\n\" -> \"\"\n+// normalize-stderr-test \"we're just showing a limited slice of the query stack\\n\" -> \"\"\n+// normalize-stderr-test \"end of query stack\\n\" -> \"\"\n+// normalize-stderr-test \"#.*\\n\" -> \"\"\n+\n+// This is a known bug that @compiler-errors tried to fix in #94238,\n+// but the solution was probably not correct.\n+\n+pub trait Factory<T> {\n+    type Item;\n+}\n+\n+pub struct IntFactory;\n+\n+impl<T> Factory<T> for IntFactory {\n+    type Item = usize;\n+}\n+\n+pub fn foo<T>()\n+where\n+    IntFactory: Factory<T>,\n+{\n+    let mut x: <IntFactory as Factory<T>>::Item = bar::<T>();\n+}\n+\n+#[inline]\n+pub fn bar<T>() -> <IntFactory as Factory<T>>::Item {\n+    0usize\n+}"}, {"sha": "56cc5c93c96f23ba33aa66a2d7d28a2cb9d3dfa0", "filename": "src/test/ui/trait-bounds/select-param-env-instead-of-blanket.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.stderr?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -0,0 +1,18 @@\n+error: internal compiler error\n+\n+error: internal compiler error\n+                                encountered ... with incompatible types:\n+                                left-hand side has type: <IntFactory as Factory<T>>::Item\n+                                right-hand side has type: usize\n+  --> $DIR/select-param-env-instead-of-blanket.rs:42:5\n+   |\n+LL |     let mut x: <IntFactory as Factory<T>>::Item = bar::<T>();\n+   |                                                   ---------- in this inlined function call\n+...\n+LL |     0usize\n+   |     ^^^^^^\n+   |\n+   = note: delayed at compiler/rustc_const_eval/src/transform/validate.rs:128:36\n+\n+thread 'rustc' panicked\n+"}, {"sha": "62db019ed6a911be95e49656292845be614d9206", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -3,6 +3,9 @@ error[E0277]: the trait bound `(): Foo<FooX>` is not satisfied\n    |\n LL | fn foo() -> impl Foo<FooX> {\n    |             ^^^^^^^^^^^^^^ the trait `Foo<FooX>` is not implemented for `()`\n+...\n+LL |     ()\n+   |     -- return type was inferred to be `()` here\n    |\n    = help: the trait `Foo<()>` is implemented for `()`\n "}, {"sha": "f4d96038d9109419de8ee8b8e88459300e4f315c", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89a0783f1c8fef46b1c8de57dc611a1d753bf0d5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr?ref=89a0783f1c8fef46b1c8de57dc611a1d753bf0d5", "patch": "@@ -3,6 +3,9 @@ error[E0277]: the trait bound `(): Foo<FooX>` is not satisfied\n    |\n LL | fn foo() -> impl Foo<FooX> {\n    |             ^^^^^^^^^^^^^^ the trait `Foo<FooX>` is not implemented for `()`\n+LL |\n+LL |     ()\n+   |     -- return type was inferred to be `()` here\n    |\n    = help: the following other types implement trait `Foo<A>`:\n              <() as Foo<()>>"}]}