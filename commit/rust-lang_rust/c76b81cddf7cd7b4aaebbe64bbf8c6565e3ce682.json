{"sha": "c76b81cddf7cd7b4aaebbe64bbf8c6565e3ce682", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NmI4MWNkZGY3Y2Q3YjRhYWViYmU2NGJiZjhjNjU2NWUzY2U2ODI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-05T07:42:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-08T23:33:40Z"}, "message": "rt: Delete schedulers immediately upon release\n\nThis will be needed once we support dynamically changing schedulers.", "tree": {"sha": "1d2635bcf60d3b6ce6025079503ca463dbb18295", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d2635bcf60d3b6ce6025079503ca463dbb18295"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c76b81cddf7cd7b4aaebbe64bbf8c6565e3ce682", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c76b81cddf7cd7b4aaebbe64bbf8c6565e3ce682", "html_url": "https://github.com/rust-lang/rust/commit/c76b81cddf7cd7b4aaebbe64bbf8c6565e3ce682", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c76b81cddf7cd7b4aaebbe64bbf8c6565e3ce682/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f39e64d56ab4929be5985d4a64020d2223706d96", "url": "https://api.github.com/repos/rust-lang/rust/commits/f39e64d56ab4929be5985d4a64020d2223706d96", "html_url": "https://github.com/rust-lang/rust/commit/f39e64d56ab4929be5985d4a64020d2223706d96"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "8f41182d7910e6cfc4e327f1f1b943e60f700040", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c76b81cddf7cd7b4aaebbe64bbf8c6565e3ce682/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c76b81cddf7cd7b4aaebbe64bbf8c6565e3ce682/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=c76b81cddf7cd7b4aaebbe64bbf8c6565e3ce682", "patch": "@@ -21,10 +21,6 @@ rust_kernel::rust_kernel(rust_srv *srv, size_t num_threads) :\n     live_schedulers = 1;\n }\n \n-rust_kernel::~rust_kernel() {\n-    delete sched;\n-}\n-\n void\n rust_kernel::log(uint32_t level, char const *fmt, ...) {\n     char buf[BUF_BYTES];\n@@ -83,6 +79,7 @@ void\n rust_kernel::release_scheduler() {\n     I(this, !sched_lock.lock_held_by_current_thread());\n     scoped_lock with(sched_lock);\n+    delete sched;\n     --live_schedulers;\n     if (live_schedulers == 0) {\n         // We're all done. Tell the main thread to continue"}, {"sha": "fdf9f5eb0f7e01b455e98d99635cf19f85866d52", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c76b81cddf7cd7b4aaebbe64bbf8c6565e3ce682/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/c76b81cddf7cd7b4aaebbe64bbf8c6565e3ce682/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=c76b81cddf7cd7b4aaebbe64bbf8c6565e3ce682", "patch": "@@ -47,7 +47,6 @@ class rust_kernel {\n     struct rust_env *env;\n \n     rust_kernel(rust_srv *srv, size_t num_threads);\n-    ~rust_kernel();\n \n     void log(uint32_t level, char const *fmt, ...);\n     void fatal(char const *fmt, ...);"}, {"sha": "666733a431807132e6e17b4b534f9f904f648573", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c76b81cddf7cd7b4aaebbe64bbf8c6565e3ce682/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c76b81cddf7cd7b4aaebbe64bbf8c6565e3ce682/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=c76b81cddf7cd7b4aaebbe64bbf8c6565e3ce682", "patch": "@@ -56,6 +56,11 @@ rust_scheduler::destroy_task_threads() {\n void\n rust_scheduler::start_task_threads()\n {\n+    // Copy num_threads because it's possible for the last thread\n+    // to terminate and have the kernel delete us before we\n+    // hit the last check against num_threads, in which case\n+    // we would be accessing invalid memory.\n+    uintptr_t num_threads = this->num_threads;\n     for(size_t i = 0; i < num_threads; ++i) {\n         rust_task_thread *thread = threads[i];\n         thread->start();"}]}