{"sha": "f32f64bffcbde9d8656c1c221547052f0da4f2e8", "node_id": "C_kwDOAAsO6NoAKGYzMmY2NGJmZmNiZGU5ZDg2NTZjMWMyMjE1NDcwNTJmMGRhNGYyZTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-11T09:38:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-11T09:38:34Z"}, "message": "Auto merge of #13929 - danieleades:simplify, r=lnicola\n\ninternal: a number of code simplifications", "tree": {"sha": "0194ce5ac357b183cb6d0b43be80a9d48660a9af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0194ce5ac357b183cb6d0b43be80a9d48660a9af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f32f64bffcbde9d8656c1c221547052f0da4f2e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f32f64bffcbde9d8656c1c221547052f0da4f2e8", "html_url": "https://github.com/rust-lang/rust/commit/f32f64bffcbde9d8656c1c221547052f0da4f2e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f32f64bffcbde9d8656c1c221547052f0da4f2e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75877d78d9b16db7bf96bced2c853173f25a5ff8", "url": "https://api.github.com/repos/rust-lang/rust/commits/75877d78d9b16db7bf96bced2c853173f25a5ff8", "html_url": "https://github.com/rust-lang/rust/commit/75877d78d9b16db7bf96bced2c853173f25a5ff8"}, {"sha": "d218b237fd8e5495c5399f0c1651c7dbf3b3daaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf", "html_url": "https://github.com/rust-lang/rust/commit/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf"}], "stats": {"total": 365, "additions": 162, "deletions": 203}, "files": [{"sha": "4b4664a1cf4a6d54b4f03f7ab2ec49d695f4ec54", "filename": "crates/hir-def/src/body/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -80,7 +80,7 @@ impl<'a> Write for Printer<'a> {\n     fn write_str(&mut self, s: &str) -> fmt::Result {\n         for line in s.split_inclusive('\\n') {\n             if self.needs_indent {\n-                match self.buf.chars().rev().skip_while(|ch| *ch == ' ').next() {\n+                match self.buf.chars().rev().find(|ch| *ch != ' ') {\n                     Some('\\n') | None => {}\n                     _ => self.buf.push('\\n'),\n                 }\n@@ -113,7 +113,7 @@ impl<'a> Printer<'a> {\n     }\n \n     fn newline(&mut self) {\n-        match self.buf.chars().rev().skip_while(|ch| *ch == ' ').next() {\n+        match self.buf.chars().rev().find(|ch| *ch != ' ') {\n             Some('\\n') | None => {}\n             _ => writeln!(self).unwrap(),\n         }"}, {"sha": "c69599079b5e3a4a800cdc0e269c1f8e40415ebf", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -1600,17 +1600,15 @@ impl ModCollector<'_, '_> {\n                         FunctionLoc { container, id: ItemTreeId::new(self.tree_id, id) }.intern(db);\n \n                     let vis = resolve_vis(def_map, &self.item_tree[it.visibility]);\n-                    if self.def_collector.is_proc_macro {\n-                        if self.module_id == def_map.root {\n-                            if let Some(proc_macro) = attrs.parse_proc_macro_decl(&it.name) {\n-                                let crate_root = def_map.module_id(def_map.root);\n-                                self.def_collector.export_proc_macro(\n-                                    proc_macro,\n-                                    ItemTreeId::new(self.tree_id, id),\n-                                    fn_id,\n-                                    crate_root,\n-                                );\n-                            }\n+                    if self.def_collector.is_proc_macro && self.module_id == def_map.root {\n+                        if let Some(proc_macro) = attrs.parse_proc_macro_decl(&it.name) {\n+                            let crate_root = def_map.module_id(def_map.root);\n+                            self.def_collector.export_proc_macro(\n+                                proc_macro,\n+                                ItemTreeId::new(self.tree_id, id),\n+                                fn_id,\n+                                crate_root,\n+                            );\n                         }\n                     }\n "}, {"sha": "ea04a3d17b1338b257c6fef29ea70af9679c51ef", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -1136,18 +1136,16 @@ impl<'a> InferenceContext<'a> {\n             if self.diverges.is_always() {\n                 // we don't even make an attempt at coercion\n                 self.table.new_maybe_never_var()\n-            } else {\n-                if let Some(t) = expected.only_has_type(&mut self.table) {\n-                    if self.coerce(Some(expr), &TyBuilder::unit(), &t).is_err() {\n-                        self.result.type_mismatches.insert(\n-                            expr.into(),\n-                            TypeMismatch { expected: t.clone(), actual: TyBuilder::unit() },\n-                        );\n-                    }\n-                    t\n-                } else {\n-                    TyBuilder::unit()\n+            } else if let Some(t) = expected.only_has_type(&mut self.table) {\n+                if self.coerce(Some(expr), &TyBuilder::unit(), &t).is_err() {\n+                    self.result.type_mismatches.insert(\n+                        expr.into(),\n+                        TypeMismatch { expected: t.clone(), actual: TyBuilder::unit() },\n+                    );\n                 }\n+                t\n+            } else {\n+                TyBuilder::unit()\n             }\n         }\n     }\n@@ -1314,13 +1312,13 @@ impl<'a> InferenceContext<'a> {\n                 } else {\n                     param_ty\n                 };\n-                if !coercion_target.is_unknown() {\n-                    if self.coerce(Some(arg), &ty, &coercion_target).is_err() {\n-                        self.result.type_mismatches.insert(\n-                            arg.into(),\n-                            TypeMismatch { expected: coercion_target, actual: ty.clone() },\n-                        );\n-                    }\n+                if !coercion_target.is_unknown()\n+                    && self.coerce(Some(arg), &ty, &coercion_target).is_err()\n+                {\n+                    self.result.type_mismatches.insert(\n+                        arg.into(),\n+                        TypeMismatch { expected: coercion_target, actual: ty.clone() },\n+                    );\n                 }\n             }\n         }"}, {"sha": "958d3dabe0ed1009255ae3a99800cfd4c98adc93", "filename": "crates/hir-ty/src/layout.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -251,17 +251,14 @@ fn layout_of_unit(cx: &LayoutCx<'_>, dl: &TargetDataLayout) -> Result<Layout, La\n \n fn struct_tail_erasing_lifetimes(db: &dyn HirDatabase, pointee: Ty) -> Ty {\n     match pointee.kind(Interner) {\n-        TyKind::Adt(AdtId(adt), subst) => match adt {\n-            &hir_def::AdtId::StructId(i) => {\n-                let data = db.struct_data(i);\n-                let mut it = data.variant_data.fields().iter().rev();\n-                match it.next() {\n-                    Some((f, _)) => field_ty(db, i.into(), f, subst),\n-                    None => pointee,\n-                }\n+        TyKind::Adt(AdtId(hir_def::AdtId::StructId(i)), subst) => {\n+            let data = db.struct_data(*i);\n+            let mut it = data.variant_data.fields().iter().rev();\n+            match it.next() {\n+                Some((f, _)) => field_ty(db, (*i).into(), f, subst),\n+                None => pointee,\n             }\n-            _ => pointee,\n-        },\n+        }\n         _ => pointee,\n     }\n }"}, {"sha": "a1d2ec02f23bff626eb48862b8a360e99ab46b85", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -472,8 +472,8 @@ impl Module {\n         let def_map = self.id.def_map(db.upcast());\n         let children = def_map[self.id.local_id]\n             .children\n-            .iter()\n-            .map(|(_, module_id)| Module { id: def_map.module_id(*module_id) })\n+            .values()\n+            .map(|module_id| Module { id: def_map.module_id(*module_id) })\n             .collect::<Vec<_>>();\n         children.into_iter()\n     }"}, {"sha": "6c0238f35d0f1de5a362464e0dee083624de02cb", "filename": "crates/ide-assists/src/handlers/extract_type_alias.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -161,19 +161,17 @@ fn collect_used_generics<'gp>(\n                     .and_then(|lt| known_generics.iter().find(find_lifetime(&lt.text()))),\n             ),\n             ast::Type::ArrayType(ar) => {\n-                if let Some(expr) = ar.expr() {\n-                    if let ast::Expr::PathExpr(p) = expr {\n-                        if let Some(path) = p.path() {\n-                            if let Some(name_ref) = path.as_single_name_ref() {\n-                                if let Some(param) = known_generics.iter().find(|gp| {\n-                                    if let ast::GenericParam::ConstParam(cp) = gp {\n-                                        cp.name().map_or(false, |n| n.text() == name_ref.text())\n-                                    } else {\n-                                        false\n-                                    }\n-                                }) {\n-                                    generics.push(param);\n+                if let Some(ast::Expr::PathExpr(p)) = ar.expr() {\n+                    if let Some(path) = p.path() {\n+                        if let Some(name_ref) = path.as_single_name_ref() {\n+                            if let Some(param) = known_generics.iter().find(|gp| {\n+                                if let ast::GenericParam::ConstParam(cp) = gp {\n+                                    cp.name().map_or(false, |n| n.text() == name_ref.text())\n+                                } else {\n+                                    false\n                                 }\n+                            }) {\n+                                generics.push(param);\n                             }\n                         }\n                     }"}, {"sha": "860372941f7948d2709ca0cd78591ac54c86fae9", "filename": "crates/ide-assists/src/handlers/generate_default_from_new.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -82,18 +82,18 @@ fn generate_trait_impl_text_from_impl(impl_: &ast::Impl, trait_text: &str, code:\n     let generic_params = impl_.generic_param_list().map(|generic_params| {\n         let lifetime_params =\n             generic_params.lifetime_params().map(ast::GenericParam::LifetimeParam);\n-        let ty_or_const_params = generic_params.type_or_const_params().filter_map(|param| {\n+        let ty_or_const_params = generic_params.type_or_const_params().map(|param| {\n             // remove defaults since they can't be specified in impls\n             match param {\n                 ast::TypeOrConstParam::Type(param) => {\n                     let param = param.clone_for_update();\n                     param.remove_default();\n-                    Some(ast::GenericParam::TypeParam(param))\n+                    ast::GenericParam::TypeParam(param)\n                 }\n                 ast::TypeOrConstParam::Const(param) => {\n                     let param = param.clone_for_update();\n                     param.remove_default();\n-                    Some(ast::GenericParam::ConstParam(param))\n+                    ast::GenericParam::ConstParam(param)\n                 }\n             }\n         });"}, {"sha": "d7ddc5f23f5dc5b3a743ad112482193d8e8954fd", "filename": "crates/ide-assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -92,7 +92,7 @@ trait Merge: AstNode + Clone {\n     fn try_merge_from(self, items: &mut dyn Iterator<Item = Self>) -> Option<Vec<Edit>> {\n         let mut edits = Vec::new();\n         let mut merged = self.clone();\n-        while let Some(item) = items.next() {\n+        for item in items {\n             merged = merged.try_merge(&item)?;\n             edits.push(Edit::Remove(item.into_either()));\n         }"}, {"sha": "db789cfa334289421d7c3f118c4a969c5398a791", "filename": "crates/ide-assists/src/handlers/unmerge_match_arm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funmerge_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funmerge_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funmerge_match_arm.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -86,8 +86,7 @@ pub(crate) fn unmerge_match_arm(acc: &mut Assists, ctx: &AssistContext<'_>) -> O\n                     it.prev_sibling_or_token()\n                 })\n                 .map(|it| it.kind())\n-                .skip_while(|it| it.is_trivia())\n-                .next()\n+                .find(|it| !it.is_trivia())\n                     == Some(T![,]);\n             let has_arms_after = neighbor(&match_arm, Direction::Next).is_some();\n             if !has_comma_after && !has_arms_after {"}, {"sha": "0e5906097c3d4009bf259884ded3e5f44707f3dc", "filename": "crates/ide-db/src/rename.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Frename.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -334,11 +334,9 @@ pub fn source_edit_from_references(\n             }\n             _ => false,\n         };\n-        if !has_emitted_edit {\n-            if !edited_ranges.contains(&range.start()) {\n-                edit.replace(range, new_name.to_string());\n-                edited_ranges.push(range.start());\n-            }\n+        if !has_emitted_edit && !edited_ranges.contains(&range.start()) {\n+            edit.replace(range, new_name.to_string());\n+            edited_ranges.push(range.start());\n         }\n     }\n \n@@ -391,19 +389,17 @@ fn source_edit_from_name_ref(\n                         edit.delete(TextRange::new(s, e));\n                         return true;\n                     }\n-                } else if init == name_ref {\n-                    if field_name.text() == new_name {\n-                        cov_mark::hit!(test_rename_local_put_init_shorthand);\n-                        // Foo { field: local } -> Foo { field }\n-                        //            ^^^^^^^ delete this\n-\n-                        // same names, we can use a shorthand here instead.\n-                        // we do not want to erase attributes hence this range start\n-                        let s = field_name.syntax().text_range().end();\n-                        let e = init.syntax().text_range().end();\n-                        edit.delete(TextRange::new(s, e));\n-                        return true;\n-                    }\n+                } else if init == name_ref && field_name.text() == new_name {\n+                    cov_mark::hit!(test_rename_local_put_init_shorthand);\n+                    // Foo { field: local } -> Foo { field }\n+                    //            ^^^^^^^ delete this\n+\n+                    // same names, we can use a shorthand here instead.\n+                    // we do not want to erase attributes hence this range start\n+                    let s = field_name.syntax().text_range().end();\n+                    let e = init.syntax().text_range().end();\n+                    edit.delete(TextRange::new(s, e));\n+                    return true;\n                 }\n             }\n             // init shorthand"}, {"sha": "f6d4ccc3ce5af247b3200c7b2e3d7faa962499e5", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -494,41 +494,37 @@ impl<'a> FindUsages<'a> {\n         }\n \n         // Search for `super` and `crate` resolving to our module\n-        match self.def {\n-            Definition::Module(module) => {\n-                let scope = search_scope\n-                    .intersection(&SearchScope::module_and_children(self.sema.db, module));\n+        if let Definition::Module(module) = self.def {\n+            let scope =\n+                search_scope.intersection(&SearchScope::module_and_children(self.sema.db, module));\n \n-                let is_crate_root =\n-                    module.is_crate_root(self.sema.db).then(|| Finder::new(\"crate\"));\n-                let finder = &Finder::new(\"super\");\n+            let is_crate_root = module.is_crate_root(self.sema.db).then(|| Finder::new(\"crate\"));\n+            let finder = &Finder::new(\"super\");\n \n-                for (text, file_id, search_range) in scope_files(sema, &scope) {\n-                    let tree = Lazy::new(move || sema.parse(file_id).syntax().clone());\n+            for (text, file_id, search_range) in scope_files(sema, &scope) {\n+                let tree = Lazy::new(move || sema.parse(file_id).syntax().clone());\n \n+                for offset in match_indices(&text, finder, search_range) {\n+                    if let Some(iter) = find_nodes(\"super\", &tree, offset) {\n+                        for name_ref in iter.filter_map(ast::NameRef::cast) {\n+                            if self.found_name_ref(&name_ref, sink) {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                }\n+                if let Some(finder) = &is_crate_root {\n                     for offset in match_indices(&text, finder, search_range) {\n-                        if let Some(iter) = find_nodes(\"super\", &tree, offset) {\n+                        if let Some(iter) = find_nodes(\"crate\", &tree, offset) {\n                             for name_ref in iter.filter_map(ast::NameRef::cast) {\n                                 if self.found_name_ref(&name_ref, sink) {\n                                     return;\n                                 }\n                             }\n                         }\n                     }\n-                    if let Some(finder) = &is_crate_root {\n-                        for offset in match_indices(&text, finder, search_range) {\n-                            if let Some(iter) = find_nodes(\"crate\", &tree, offset) {\n-                                for name_ref in iter.filter_map(ast::NameRef::cast) {\n-                                    if self.found_name_ref(&name_ref, sink) {\n-                                        return;\n-                                    }\n-                                }\n-                            }\n-                        }\n-                    }\n                 }\n             }\n-            _ => (),\n         }\n \n         // search for module `self` references in our module's definition source"}, {"sha": "a91ffd1ec4fd17fc9293775f4bc4b253ab6f46a4", "filename": "crates/ide-db/src/symbol_index.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -323,10 +323,10 @@ impl Query {\n                         if symbol.name != self.query {\n                             continue;\n                         }\n-                    } else if self.case_sensitive {\n-                        if self.query.chars().any(|c| !symbol.name.contains(c)) {\n-                            continue;\n-                        }\n+                    } else if self.case_sensitive\n+                        && self.query.chars().any(|c| !symbol.name.contains(c))\n+                    {\n+                        continue;\n                     }\n \n                     res.push(symbol.clone());"}, {"sha": "04ce1e0feeed4f300f27807d19c3e5bf97cf1738", "filename": "crates/ide-diagnostics/src/handlers/json_is_not_rust.rs", "status": "modified", "additions": 56, "deletions": 66, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fjson_is_not_rust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fjson_is_not_rust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fjson_is_not_rust.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -99,76 +99,66 @@ pub(crate) fn json_in_items(\n             && node.last_token().map(|x| x.kind()) == Some(SyntaxKind::R_CURLY)\n         {\n             let node_string = node.to_string();\n-            if let Ok(it) = serde_json::from_str(&node_string) {\n-                if let serde_json::Value::Object(it) = it {\n-                    let import_scope = ImportScope::find_insert_use_container(node, sema)?;\n-                    let range = node.text_range();\n-                    let mut edit = TextEdit::builder();\n-                    edit.delete(range);\n-                    let mut state = State::default();\n-                    let semantics_scope = sema.scope(node)?;\n-                    let scope_resolve =\n-                        |it| semantics_scope.speculative_resolve(&make::path_from_text(it));\n-                    let scope_has = |it| scope_resolve(it).is_some();\n-                    let deserialize_resolved = scope_resolve(\"::serde::Deserialize\");\n-                    let serialize_resolved = scope_resolve(\"::serde::Serialize\");\n-                    state.has_deserialize = deserialize_resolved.is_some();\n-                    state.has_serialize = serialize_resolved.is_some();\n-                    state.build_struct(&it);\n-                    edit.insert(range.start(), state.result);\n-                    acc.push(\n-                        Diagnostic::new(\n-                            \"json-is-not-rust\",\n-                            \"JSON syntax is not valid as a Rust item\",\n-                            range,\n-                        )\n-                        .severity(Severity::WeakWarning)\n-                        .with_fixes(Some(vec![{\n-                            let mut scb = SourceChangeBuilder::new(file_id);\n-                            let scope = match import_scope {\n-                                ImportScope::File(it) => ImportScope::File(scb.make_mut(it)),\n-                                ImportScope::Module(it) => ImportScope::Module(scb.make_mut(it)),\n-                                ImportScope::Block(it) => ImportScope::Block(scb.make_mut(it)),\n-                            };\n-                            let current_module = semantics_scope.module();\n-                            if !scope_has(\"Serialize\") {\n-                                if let Some(PathResolution::Def(it)) = serialize_resolved {\n-                                    if let Some(it) = current_module.find_use_path_prefixed(\n-                                        sema.db,\n-                                        it,\n-                                        config.insert_use.prefix_kind,\n-                                        config.prefer_no_std,\n-                                    ) {\n-                                        insert_use(\n-                                            &scope,\n-                                            mod_path_to_ast(&it),\n-                                            &config.insert_use,\n-                                        );\n-                                    }\n+            if let Ok(serde_json::Value::Object(it)) = serde_json::from_str(&node_string) {\n+                let import_scope = ImportScope::find_insert_use_container(node, sema)?;\n+                let range = node.text_range();\n+                let mut edit = TextEdit::builder();\n+                edit.delete(range);\n+                let mut state = State::default();\n+                let semantics_scope = sema.scope(node)?;\n+                let scope_resolve =\n+                    |it| semantics_scope.speculative_resolve(&make::path_from_text(it));\n+                let scope_has = |it| scope_resolve(it).is_some();\n+                let deserialize_resolved = scope_resolve(\"::serde::Deserialize\");\n+                let serialize_resolved = scope_resolve(\"::serde::Serialize\");\n+                state.has_deserialize = deserialize_resolved.is_some();\n+                state.has_serialize = serialize_resolved.is_some();\n+                state.build_struct(&it);\n+                edit.insert(range.start(), state.result);\n+                acc.push(\n+                    Diagnostic::new(\n+                        \"json-is-not-rust\",\n+                        \"JSON syntax is not valid as a Rust item\",\n+                        range,\n+                    )\n+                    .severity(Severity::WeakWarning)\n+                    .with_fixes(Some(vec![{\n+                        let mut scb = SourceChangeBuilder::new(file_id);\n+                        let scope = match import_scope {\n+                            ImportScope::File(it) => ImportScope::File(scb.make_mut(it)),\n+                            ImportScope::Module(it) => ImportScope::Module(scb.make_mut(it)),\n+                            ImportScope::Block(it) => ImportScope::Block(scb.make_mut(it)),\n+                        };\n+                        let current_module = semantics_scope.module();\n+                        if !scope_has(\"Serialize\") {\n+                            if let Some(PathResolution::Def(it)) = serialize_resolved {\n+                                if let Some(it) = current_module.find_use_path_prefixed(\n+                                    sema.db,\n+                                    it,\n+                                    config.insert_use.prefix_kind,\n+                                    config.prefer_no_std,\n+                                ) {\n+                                    insert_use(&scope, mod_path_to_ast(&it), &config.insert_use);\n                                 }\n                             }\n-                            if !scope_has(\"Deserialize\") {\n-                                if let Some(PathResolution::Def(it)) = deserialize_resolved {\n-                                    if let Some(it) = current_module.find_use_path_prefixed(\n-                                        sema.db,\n-                                        it,\n-                                        config.insert_use.prefix_kind,\n-                                        config.prefer_no_std,\n-                                    ) {\n-                                        insert_use(\n-                                            &scope,\n-                                            mod_path_to_ast(&it),\n-                                            &config.insert_use,\n-                                        );\n-                                    }\n+                        }\n+                        if !scope_has(\"Deserialize\") {\n+                            if let Some(PathResolution::Def(it)) = deserialize_resolved {\n+                                if let Some(it) = current_module.find_use_path_prefixed(\n+                                    sema.db,\n+                                    it,\n+                                    config.insert_use.prefix_kind,\n+                                    config.prefer_no_std,\n+                                ) {\n+                                    insert_use(&scope, mod_path_to_ast(&it), &config.insert_use);\n                                 }\n                             }\n-                            let mut sc = scb.finish();\n-                            sc.insert_source_edit(file_id, edit.finish());\n-                            fix(\"convert_json_to_struct\", \"Convert JSON to struct\", sc, range)\n-                        }])),\n-                    );\n-                }\n+                        }\n+                        let mut sc = scb.finish();\n+                        sc.insert_source_edit(file_id, edit.finish());\n+                        fix(\"convert_json_to_struct\", \"Convert JSON to struct\", sc, range)\n+                    }])),\n+                );\n             }\n         }\n         Some(())"}, {"sha": "0b3121c765d8d2448f283a21d7d10259623c44e8", "filename": "crates/ide-diagnostics/src/handlers/private_assoc_item.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fprivate_assoc_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fprivate_assoc_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fprivate_assoc_item.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -11,10 +11,7 @@ pub(crate) fn private_assoc_item(\n     d: &hir::PrivateAssocItem,\n ) -> Diagnostic {\n     // FIXME: add quickfix\n-    let name = match d.item.name(ctx.sema.db) {\n-        Some(name) => format!(\"`{}` \", name),\n-        None => String::new(),\n-    };\n+    let name = d.item.name(ctx.sema.db).map(|name| format!(\"`{name}` \")).unwrap_or_default();\n     Diagnostic::new(\n         \"private-assoc-item\",\n         format!("}, {"sha": "9a984ba6bf07afadbe83427aa6e7aa0591664e78", "filename": "crates/ide-diagnostics/src/handlers/unresolved_proc_macro.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -34,10 +34,7 @@ pub(crate) fn unresolved_proc_macro(\n     let message = format!(\n         \"{message}: {}\",\n         if config_enabled {\n-            match def_map.proc_macro_loading_error() {\n-                Some(e) => e,\n-                None => \"proc macro not found in the built dylib\",\n-            }\n+            def_map.proc_macro_loading_error().unwrap_or(\"proc macro not found in the built dylib\")\n         } else {\n             match d.kind {\n                 hir::MacroKind::Attr if proc_macros_enabled => {"}, {"sha": "cb537d7ef79d722948de5edcc95c64ca77c7c82c", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -64,12 +64,10 @@ pub(super) fn type_info(\n             bt_end = if config.markdown() { \"```\\n\" } else { \"\" }\n         )\n         .into()\n+    } else if config.markdown() {\n+        Markup::fenced_block(&original.display(sema.db))\n     } else {\n-        if config.markdown() {\n-            Markup::fenced_block(&original.display(sema.db))\n-        } else {\n-            original.display(sema.db).to_string().into()\n-        }\n+        original.display(sema.db).to_string().into()\n     };\n     res.actions.push(HoverAction::goto_type_from_targets(sema.db, targets));\n     Some(res)"}, {"sha": "1cfde2362455868eb4e1f82dc35971b59640778f", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -161,10 +161,8 @@ fn remove_newline(\n         }\n     }\n \n-    if config.join_assignments {\n-        if join_assignments(edit, &prev, &next).is_some() {\n-            return;\n-        }\n+    if config.join_assignments && join_assignments(edit, &prev, &next).is_some() {\n+        return;\n     }\n \n     if config.unwrap_trivial_blocks {"}, {"sha": "454a250f3ded4c046b5ceaf17f65f7133c54052c", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -413,11 +413,10 @@ fn traverse(\n                 let string = ast::String::cast(token);\n                 let string_to_highlight = ast::String::cast(descended_token.clone());\n                 if let Some((string, expanded_string)) = string.zip(string_to_highlight) {\n-                    if string.is_raw() {\n-                        if inject::ra_fixture(hl, sema, config, &string, &expanded_string).is_some()\n-                        {\n-                            continue;\n-                        }\n+                    if string.is_raw()\n+                        && inject::ra_fixture(hl, sema, config, &string, &expanded_string).is_some()\n+                    {\n+                        continue;\n                     }\n                     highlight_format_string(hl, &string, &expanded_string, range);\n                     highlight_escape_string(hl, &string, range.start());"}, {"sha": "c2654875625080dde6ed46818b9487a5fac35533", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -205,10 +205,8 @@ fn on_eq_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n             if expr_stmt.semicolon_token().is_some() {\n                 return None;\n             }\n-        } else {\n-            if !ast::StmtList::can_cast(binop.syntax().parent()?.kind()) {\n-                return None;\n-            }\n+        } else if !ast::StmtList::can_cast(binop.syntax().parent()?.kind()) {\n+            return None;\n         }\n \n         let expr = binop.rhs()?;"}, {"sha": "c95677089626029c66677d05e0b17d2a647b3d46", "filename": "crates/mbe/src/expander/transcriber.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -212,7 +212,7 @@ fn expand_var(ctx: &mut ExpandCtx<'_>, v: &SmolStr, id: tt::TokenId) -> ExpandRe\n     } else {\n         ctx.bindings.get(v, &mut ctx.nesting).map_or_else(\n             |e| ExpandResult { value: Fragment::Tokens(tt::TokenTree::empty()), err: Some(e) },\n-            |it| ExpandResult::ok(it),\n+            ExpandResult::ok,\n         )\n     }\n }"}, {"sha": "d562066533eeeb61f446eb3427bbdb2d8dcb1ba6", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -366,7 +366,7 @@ impl ProjectWorkspace {\n                 _ => None,\n             })\n             .collect();\n-        let ref mut outputs = match WorkspaceBuildScripts::run_once(config, &cargo_ws, progress) {\n+        let outputs = &mut match WorkspaceBuildScripts::run_once(config, &cargo_ws, progress) {\n             Ok(it) => Ok(it.into_iter()),\n             // io::Error is not Clone?\n             Err(e) => Err(Arc::new(e)),"}, {"sha": "a270049019f3209dc7fee513c0d82f0ead4bc2f4", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f64bffcbde9d8656c1c221547052f0da4f2e8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=f32f64bffcbde9d8656c1c221547052f0da4f2e8", "patch": "@@ -307,10 +307,10 @@ impl GlobalState {\n                 }\n             }\n \n-            if !was_quiescent || state_changed || memdocs_added_or_removed {\n-                if self.config.publish_diagnostics() {\n-                    self.update_diagnostics()\n-                }\n+            if (!was_quiescent || state_changed || memdocs_added_or_removed)\n+                && self.config.publish_diagnostics()\n+            {\n+                self.update_diagnostics()\n             }\n         }\n "}]}