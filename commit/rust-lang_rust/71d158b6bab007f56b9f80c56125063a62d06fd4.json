{"sha": "71d158b6bab007f56b9f80c56125063a62d06fd4", "node_id": "C_kwDOAAsO6NoAKDcxZDE1OGI2YmFiMDA3ZjU2YjlmODBjNTYxMjUwNjNhNjJkMDZmZDQ", "commit": {"author": {"name": "Moritz Vetter", "email": "mv@3yourmind.com", "date": "2022-02-24T20:29:26Z"}, "committer": {"name": "Moritz Vetter", "email": "mv@3yourmind.com", "date": "2022-02-24T20:29:45Z"}, "message": "refactor(11422): make number unsigned, nest enums into each other", "tree": {"sha": "02fb8068534878848e494366548b921dff1335a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02fb8068534878848e494366548b921dff1335a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71d158b6bab007f56b9f80c56125063a62d06fd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71d158b6bab007f56b9f80c56125063a62d06fd4", "html_url": "https://github.com/rust-lang/rust/commit/71d158b6bab007f56b9f80c56125063a62d06fd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71d158b6bab007f56b9f80c56125063a62d06fd4/comments", "author": null, "committer": null, "parents": [{"sha": "8848186213bb7f54f034c2f6f5fab724bfc3b451", "url": "https://api.github.com/repos/rust-lang/rust/commits/8848186213bb7f54f034c2f6f5fab724bfc3b451", "html_url": "https://github.com/rust-lang/rust/commit/8848186213bb7f54f034c2f6f5fab724bfc3b451"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "fcad172984831ed1145dd5ffb75f839cbb173132", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/71d158b6bab007f56b9f80c56125063a62d06fd4/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d158b6bab007f56b9f80c56125063a62d06fd4/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=71d158b6bab007f56b9f80c56125063a62d06fd4", "patch": "@@ -247,7 +247,7 @@ fn eq_label_lt(lt1: &Option<ast::Lifetime>, lt2: &Option<ast::Lifetime>) -> bool\n \n struct TreeWithDepthIterator {\n     preorder: Preorder<RustLanguage>,\n-    depth: i32,\n+    depth: u32,\n }\n \n impl TreeWithDepthIterator {\n@@ -258,33 +258,31 @@ impl TreeWithDepthIterator {\n }\n \n impl<'a> Iterator for TreeWithDepthIterator {\n-    type Item = (ast::Expr, i32);\n+    type Item = (ast::Expr, u32);\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        while let Some((event, expr)) = self.preorder.find_map(|ev| match ev {\n-            WalkEvent::Enter(it) => Some(WalkEvent::Enter(())).zip(ast::Expr::cast(it)),\n-            WalkEvent::Leave(it) => Some(WalkEvent::Leave(())).zip(ast::Expr::cast(it)),\n+        while let Some(event) = self.preorder.find_map(|ev| match ev {\n+            WalkEvent::Enter(it) => ast::Expr::cast(it).map(WalkEvent::Enter),\n+            WalkEvent::Leave(it) => ast::Expr::cast(it).map(WalkEvent::Leave),\n         }) {\n-            match (event, expr) {\n-                (\n-                    WalkEvent::Enter(_),\n+            match event {\n+                WalkEvent::Enter(\n                     ast::Expr::LoopExpr(_) | ast::Expr::WhileExpr(_) | ast::Expr::ForExpr(_),\n                 ) => {\n                     self.depth += 1;\n                 }\n-                (\n-                    WalkEvent::Leave(_),\n+                WalkEvent::Leave(\n                     ast::Expr::LoopExpr(_) | ast::Expr::WhileExpr(_) | ast::Expr::ForExpr(_),\n                 ) => {\n                     self.depth -= 1;\n                 }\n-                (WalkEvent::Enter(_), ast::Expr::BlockExpr(e)) if e.label().is_some() => {\n+                WalkEvent::Enter(ast::Expr::BlockExpr(e)) if e.label().is_some() => {\n                     self.depth += 1;\n                 }\n-                (WalkEvent::Leave(_), ast::Expr::BlockExpr(e)) if e.label().is_some() => {\n+                WalkEvent::Leave(ast::Expr::BlockExpr(e)) if e.label().is_some() => {\n                     self.depth -= 1;\n                 }\n-                (WalkEvent::Enter(_), expr) => return Some((expr, self.depth)),\n+                WalkEvent::Enter(expr) => return Some((expr, self.depth)),\n                 _ => (),\n             }\n         }"}]}