{"sha": "4912428cb5c5b4bf9e575673e5480b5f269353db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MTI0MjhjYjVjNWI0YmY5ZTU3NTY3M2U1NDgwYjVmMjY5MzUzZGI=", "commit": {"author": {"name": "Zack Corr", "email": "zack@z0w0.me", "date": "2012-10-03T01:15:02Z"}, "committer": {"name": "Zack Corr", "email": "zack@z0w0.me", "date": "2012-10-27T08:03:15Z"}, "message": "rusti: Add linenoise, wrap into core::rl and add rusti REPL tool\n\nAdd Brian Leibig to AUTHORS.txt for REPL contributions", "tree": {"sha": "66bc8d1474df1297d8d19bea5b4908d9a207272e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66bc8d1474df1297d8d19bea5b4908d9a207272e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4912428cb5c5b4bf9e575673e5480b5f269353db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4912428cb5c5b4bf9e575673e5480b5f269353db", "html_url": "https://github.com/rust-lang/rust/commit/4912428cb5c5b4bf9e575673e5480b5f269353db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4912428cb5c5b4bf9e575673e5480b5f269353db/comments", "author": {"login": "z0w0", "id": 676417, "node_id": "MDQ6VXNlcjY3NjQxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/676417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0w0", "html_url": "https://github.com/z0w0", "followers_url": "https://api.github.com/users/z0w0/followers", "following_url": "https://api.github.com/users/z0w0/following{/other_user}", "gists_url": "https://api.github.com/users/z0w0/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0w0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0w0/subscriptions", "organizations_url": "https://api.github.com/users/z0w0/orgs", "repos_url": "https://api.github.com/users/z0w0/repos", "events_url": "https://api.github.com/users/z0w0/events{/privacy}", "received_events_url": "https://api.github.com/users/z0w0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "z0w0", "id": 676417, "node_id": "MDQ6VXNlcjY3NjQxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/676417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0w0", "html_url": "https://github.com/z0w0", "followers_url": "https://api.github.com/users/z0w0/followers", "following_url": "https://api.github.com/users/z0w0/following{/other_user}", "gists_url": "https://api.github.com/users/z0w0/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0w0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0w0/subscriptions", "organizations_url": "https://api.github.com/users/z0w0/orgs", "repos_url": "https://api.github.com/users/z0w0/repos", "events_url": "https://api.github.com/users/z0w0/events{/privacy}", "received_events_url": "https://api.github.com/users/z0w0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39c0d3591e0326874b7263a621ce09ecd64f0eb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/39c0d3591e0326874b7263a621ce09ecd64f0eb2", "html_url": "https://github.com/rust-lang/rust/commit/39c0d3591e0326874b7263a621ce09ecd64f0eb2"}], "stats": {"total": 604, "additions": 591, "deletions": 13}, "files": [{"sha": "f78aed6261a6404fb9f061848d13d8766bceab61", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -4,3 +4,6 @@\n [submodule \"src/libuv\"]\n \tpath = src/libuv\n \turl = git://github.com/graydon/libuv.git\n+[submodule \"src/linenoise\"]\n+\tpath = src/linenoise\n+\turl = git://github.com/antirez/linenoise.git"}, {"sha": "cc9c1a460a2f11fff424fe21ec74ddcbc6c605e8", "filename": "AUTHORS.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/AUTHORS.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/AUTHORS.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/AUTHORS.txt?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -23,6 +23,7 @@ Benjamin Peterson <benjamin@python.org>\n Brendan Eich <brendan@mozilla.org>\n Brian Anderson <banderson@mozilla.com>\n Brian J. Burg <burg@cs.washington.edu>\n+Brian Leibig <brian.leibig@gmail.com>\n Chris Double <chris.double@double.co.nz>\n Chris Peterson <cpeterson@mozilla.com>\n Damian Gryski <damian@gryski.com>"}, {"sha": "26365917a3d4ff6f7cb28ae32bac60863417563d", "filename": "Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -74,6 +74,7 @@ endif\n \n CFG_RUSTC_FLAGS := $(RUSTFLAGS)\n CFG_GCCISH_CFLAGS :=\n+CFG_GCCISH_CXXFLAGS :=\n CFG_GCCISH_LINK_FLAGS :=\n \n ifdef CFG_DISABLE_OPTIMIZE\n@@ -449,9 +450,10 @@ TSREQS :=\t\t\t\t\t\t\t\t\t\t\t\\\n \t\t$(SREQ3_T_$(target)_H_$(CFG_HOST_TRIPLE)))\n FUZZ := $(HBIN2_H_$(CFG_HOST_TRIPLE))/fuzzer$(X)\n CARGO := $(HBIN2_H_$(CFG_HOST_TRIPLE))/cargo$(X)\n+RUSTI := $(HBIN2_H_$(CFG_HOST_TRIPLE))/rusti$(X)\n RUSTDOC := $(HBIN2_H_$(CFG_HOST_TRIPLE))/rustdoc$(X)\n \n-all: rustc $(GENERATED) docs $(FUZZ) $(CARGO) $(RUSTDOC)\n+all: rustc $(GENERATED) docs $(FUZZ) $(CARGO) $(RUSTDOC) $(RUSTI)\n \n endif\n "}, {"sha": "9c30bc2af14d82458c96fe1b185098bd57b82ee8", "filename": "configure", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/configure", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -508,6 +508,12 @@ do\n     make_dir rustllvm/$t\n done\n \n+make_dir linenoise\n+for t in $CFG_TARGET_TRIPLES\n+do\n+    make_dir linenoise/$t\n+done\n+\n make_dir rt\n for t in $CFG_TARGET_TRIPLES\n do"}, {"sha": "9b606a845a5821c94da0efbadb54229ac964fcd5", "filename": "mk/clean.mk", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -23,19 +23,20 @@ clean: clean-misc $(CLEAN_STAGE_RULES)\n \n clean-misc:\n \t@$(call E, cleaning)\n-\t$(Q)find rustllvm rt $(CFG_HOST_TRIPLE)/test \\\n+\t$(Q)find linenoise rustllvm rt $(CFG_HOST_TRIPLE)/test \\\n          -name '*.[odasS]' -o \\\n          -name '*.so' -o      \\\n          -name '*.dylib' -o   \\\n          -name '*.dll' -o     \\\n          -name '*.def' -o     \\\n          -name '*.bc'         \\\n          | xargs rm -f\n-\t$(Q)find rustllvm rt $(CFG_HOST_TRIPLE)\\\n+\t$(Q)find linenoise rustllvm rt $(CFG_HOST_TRIPLE)\\\n          -name '*.dSYM'       \\\n          | xargs rm -Rf\n \t$(Q)rm -f $(RUNTIME_OBJS) $(RUNTIME_DEF)\n \t$(Q)rm -f $(RUSTLLVM_LIB_OBJS) $(RUSTLLVM_OBJS_OBJS) $(RUSTLLVM_DEF)\n+\t$(Q)rm -f $(LINENOISE_OBJS)\n \t$(Q)rm -Rf $(DOCS)\n \t$(Q)rm -Rf $(GENERATED)\n \t$(Q)rm -f tmp/*.log tmp/*.rc tmp/*.rs\n@@ -55,6 +56,7 @@ clean$(1)_H_$(2):\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rustc$(X)\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/fuzzer$(X)\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/cargo$(X)\n+\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rusti$(X)\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/serializer$(X)\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rustdoc$(X)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUNTIME)\n@@ -81,6 +83,7 @@ clean$(1)_T_$(2)_H_$(3):\n \t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustc$(X)\n \t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/fuzzer$(X)\n \t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/cargo$(X)\n+\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rusti$(X)\n \t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/serializer$(X)\n \t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustdoc$(X)\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME)\n@@ -95,6 +98,7 @@ clean$(1)_T_$(2)_H_$(3):\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM)\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libstd.rlib\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/liblinenoise.a\n endef\n \n $(foreach host, $(CFG_TARGET_TRIPLES), \\"}, {"sha": "af4c6d8741bcbe9d58ef97a5d0df035501657a4d", "filename": "mk/dist.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -22,13 +22,15 @@ PKG_FILES := \\\n     $(addprefix $(S)src/,                      \\\n       README.txt                               \\\n       cargo                                    \\\n+      rusti                                    \\\n       rustc                                    \\\n       compiletest                              \\\n       etc                                      \\\n       fuzzer                                   \\\n       libcore                                  \\\n       libsyntax                                \\\n       libstd                                   \\\n+      linenoise                                \\\n       rt                                       \\\n       rustdoc                                  \\\n       rustllvm                                 \\"}, {"sha": "8bc691e813e0b45d7a13b3d50457691dcdcd9d35", "filename": "mk/install.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -72,6 +72,7 @@ install-host: $(SREQ$(ISTAGE)_T_$(CFG_HOST_TRIPLE)_H_$(CFG_HOST_TRIPLE))\n \t$(Q)mkdir -p $(PREFIX_ROOT)/share/man/man1\n \t$(Q)$(call INSTALL,$(HB2),$(PHB),rustc$(X))\n \t$(Q)$(call INSTALL,$(HB2),$(PHB),cargo$(X))\n+\t$(Q)$(call INSTALL,$(HB2),$(PHB),rusti$(X))\n \t$(Q)$(call INSTALL,$(HB2),$(PHB),rustdoc$(X))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUNTIME))\n \t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(CORELIB_GLOB))\n@@ -91,6 +92,7 @@ HOST_LIB_FROM_HL_GLOB = \\\n uninstall:\n \t$(Q)rm -f $(PHB)/rustc$(X)\n \t$(Q)rm -f $(PHB)/cargo$(X)\n+\t$(Q)rm -f $(PHB)/rusti$(X)\n \t$(Q)rm -f $(PHB)/rustdoc$(X)\n \t$(Q)rm -f $(PHL)/$(CFG_RUSTLLVM)\n \t$(Q)rm -f $(PHL)/$(CFG_RUNTIME)"}, {"sha": "010ddecb131c3c1d8fc1344208c4aa46a2ae5963", "filename": "mk/platform.mk", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -212,20 +212,33 @@ ifeq ($(CFG_C_COMPILER),clang)\n   ifeq ($(origin CPP),default)\n     CPP=clang -E\n   endif\n-  CFG_GCCISH_CFLAGS += -Wall -Werror -fno-rtti -g\n+  CFG_GCCISH_CFLAGS += -Wall -Werror -g\n+  CFG_GCCISH_CXXFLAGS += -fno-rtti\n   CFG_GCCISH_LINK_FLAGS += -g\n   # These flags will cause the compiler to produce a .d file\n   # next to the .o file that lists header deps.\n   CFG_DEPEND_FLAGS = -MMD -MP -MT $(1) -MF $(1:%.o=%.d)\n \n   define CFG_MAKE_CC\n-\tCFG_COMPILE_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)\t\\\n+  CFG_COMPILE_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CC)  \\\n+    $$(CFG_GCCISH_CFLAGS) $$(CFG_CLANG_CFLAGS)    \\\n+    $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))       \\\n+      $$(CFG_CLANG_CFLAGS_$$(HOST_$(1)))        \\\n+        $$(CFG_DEPEND_FLAGS)                            \\\n+    -c -o $$(1) $$(2)\n+    CFG_LINK_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CC) \\\n+    $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)      \\\n+    $$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))   \\\n+        $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)      \\\n+      $$(call CFG_INSTALL_NAME,$$(4))\n+\tCFG_COMPILE_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)\t\\\n \t\t$$(CFG_GCCISH_CFLAGS) $$(CFG_CLANG_CFLAGS)\t\t\\\n+    $$(CFG_GCCISH_CXXFLAGS)                       \\\n \t\t$$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))\t\t\t\t\\\n \t    $$(CFG_CLANG_CFLAGS_$$(HOST_$(1)))\t\t\t\t\\\n         $$(CFG_DEPEND_FLAGS)                            \\\n \t\t-c -o $$(1) $$(2)\n-    CFG_LINK_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)\t\\\n+    CFG_LINK_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)\t\\\n \t\t$$(CFG_GCCISH_LINK_FLAGS) -o $$(1)\t\t\t\\\n \t\t$$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))\t\t\\\n         $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)\t\t\t\\\n@@ -245,21 +258,35 @@ ifeq ($(CFG_C_COMPILER),gcc)\n   ifeq ($(origin CPP),default)\n     CPP=gcc -E\n   endif\n-  CFG_GCCISH_CFLAGS += -Wall -Werror -fno-rtti -g\n+  CFG_GCCISH_CFLAGS += -Wall -Werror -g\n+  CFG_GCCISH_CXXFLAGS += -fno-rtti\n   CFG_GCCISH_LINK_FLAGS += -g\n   # These flags will cause the compiler to produce a .d file\n   # next to the .o file that lists header deps.\n   CFG_DEPEND_FLAGS = -MMD -MP -MT $(1) -MF $(1:%.o=%.d)\n \n   define CFG_MAKE_CC\n-\tCFG_COMPILE_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)\t\\\n+  CFG_COMPILE_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CC)  \\\n+        $$(CFG_GCCISH_CFLAGS)             \\\n+      $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))       \\\n+        $$(CFG_GCC_CFLAGS)                \\\n+        $$(CFG_GCC_CFLAGS_$$(HOST_$(1)))        \\\n+        $$(CFG_DEPEND_FLAGS)                            \\\n+        -c -o $$(1) $$(2)\n+    CFG_LINK_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CC) \\\n+        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)      \\\n+    $$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))   \\\n+        $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)      \\\n+        $$(call CFG_INSTALL_NAME,$$(4))\n+\tCFG_COMPILE_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)\t\\\n         $$(CFG_GCCISH_CFLAGS)\t\t\t\t\t\t\t\\\n+        $$(CFG_GCCISH_CXXFLAGS)           \\\n \t    $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))\t\t\t\t\\\n         $$(CFG_GCC_CFLAGS)\t\t\t\t\t\t\t\t\\\n         $$(CFG_GCC_CFLAGS_$$(HOST_$(1)))\t\t\t\t\\\n         $$(CFG_DEPEND_FLAGS)                            \\\n         -c -o $$(1) $$(2)\n-    CFG_LINK_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)\t\\\n+    CFG_LINK_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)\t\\\n         $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)\t\t\t\\\n \t\t$$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))\t\t\\\n         $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)\t\t\t\\"}, {"sha": "bf2a64f9b62afa89f85ec3e6c5dd052634e24555", "filename": "mk/pp.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Fpp.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Fpp.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fpp.mk?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -9,6 +9,7 @@ else\n                          $(S)src/test/*/*/*.rs) \\\n               $(wildcard $(S)src/fuzzer/*.rs)   \\\n               $(wildcard $(S)src/cargo/*.rs)\n+              $(wildcard $(S)src/rusti/*.rs)\n \n   PP_INPUTS_FILTERED = $(shell echo $(PP_INPUTS) | xargs grep -L \\\n                        \"no-reformat\\|xfail-pretty\\|xfail-test\")"}, {"sha": "573aad99cd0840215d8fb6f9e45bece61e7f072e", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -117,7 +117,7 @@ RUNTIME_LIBS_$(1) := $$(LIBUV_LIB_$(1))\n \n rt/$(1)/%.o: rt/%.cpp $$(MKFILE_DEPS)\n \t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_COMPILE_C_$(1), $$@, $$(RUNTIME_INCS_$(1)) \\\n+\t$$(Q)$$(call CFG_COMPILE_CXX_$(1), $$@, $$(RUNTIME_INCS_$(1)) \\\n                  $$(SNAP_DEFINES)) $$<\n \n rt/$(1)/%.o: rt/%.S  $$(MKFILE_DEPS) \\\n@@ -133,7 +133,7 @@ rt/$(1)/$(CFG_RUNTIME): $$(RUNTIME_OBJS_$(1)) $$(MKFILE_DEPS) \\\n                         $$(RUNTIME_DEF_$(1)) \\\n                         $$(RUNTIME_LIBS_$(1))\n \t@$$(call E, link: $$@)\n-\t$$(Q)$$(call CFG_LINK_C_$(1),$$@, $$(RUNTIME_OBJS_$(1)) \\\n+\t$$(Q)$$(call CFG_LINK_CXX_$(1),$$@, $$(RUNTIME_OBJS_$(1)) \\\n \t  $$(CFG_GCCISH_POST_LIB_FLAGS) $$(RUNTIME_LIBS_$(1)) \\\n \t  $$(CFG_LIBUV_LINK_FLAGS),$$(RUNTIME_DEF_$(1)),$$(CFG_RUNTIME))\n "}, {"sha": "c56220af05eeaa8021176f0e12c76cf94cd60146", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -25,14 +25,14 @@ ALL_OBJ_FILES += $$(RUSTLLVM_OBJS_OBJS_$(1))\n rustllvm/$(1)/$(CFG_RUSTLLVM): $$(RUSTLLVM_OBJS_OBJS_$(1)) \\\n                           $$(MKFILE_DEPS) $$(RUSTLLVM_DEF_$(1))\n \t@$$(call E, link: $$@)\n-\t$$(Q)$$(call CFG_LINK_C_$(1),$$@,$$(RUSTLLVM_OBJS_OBJS_$(1)) \\\n+\t$$(Q)$$(call CFG_LINK_CXX_$(1),$$@,$$(RUSTLLVM_OBJS_OBJS_$(1)) \\\n \t  $$(CFG_GCCISH_PRE_LIB_FLAGS) $$(LLVM_LIBS_$(1)) \\\n           $$(CFG_GCCISH_POST_LIB_FLAGS) \\\n           $$(LLVM_LDFLAGS_$(1)),$$(RUSTLLVM_DEF_$(1)),$$(CFG_RUSTLLVM))\n \n rustllvm/$(1)/%.o: rustllvm/%.cpp $$(MKFILE_DEPS) $$(LLVM_CONFIG_$(1))\n \t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_COMPILE_C_$(1), $$@, $$(LLVM_CXXFLAGS_$(1)) $$(RUSTLLVM_INCS_$(1))) $$<\n+\t$$(Q)$$(call CFG_COMPILE_CXX_$(1), $$@, $$(LLVM_CXXFLAGS_$(1)) $$(RUSTLLVM_INCS_$(1))) $$<\n endef\n \n # Instantiate template for all stages"}, {"sha": "51c89597ca6978142812905fac439cf059eea7ae", "filename": "mk/target.mk", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -12,13 +12,29 @@ USE_SNAPSHOT_RUNTIME=0\n USE_SNAPSHOT_CORELIB=0\n USE_SNAPSHOT_STDLIB=0\n \n+LINENOISE_OBJS_$(2) := linenoise/$(2)/linenoise.o\n+ALL_OBJ_FILES += $$(LINENOISE_OBJS_$(2))\n+\n+linenoise/$(2)/linenoise.o: linenoise/linenoise.c $$(MKFILE_DEPS)\n+\t@$$(call E, compile: $$@)\n+\t$$(Q)$$(call CFG_COMPILE_C_$(2), $$@,) $$<\n+\n+linenoise/$(2)/liblinenoise.a: $$(LINENOISE_OBJS_$(2))\n+\t@$$(call E, link: $$@)\n+\t$$(Q)ar rcs $$@ $$<\n+\n define TARGET_STAGE_N\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a: \\\n \t\trt/$(2)/arch/$$(HOST_$(2))/libmorestack.a\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n+$$(TLIB$(1)_T_$(2)_H_$(3))/liblinenoise.a: \\\n+\t\tlinenoise/$(2)/liblinenoise.a\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM): \\\n \t\trustllvm/$(2)/$$(CFG_RUSTLLVM)\n \t@$$(call E, cp: $$@)"}, {"sha": "7c6b9795c51bc7360530ef88dc7a3c15fcf380a2", "filename": "mk/tests.mk", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -229,6 +229,7 @@ check-stage$(1)-T-$(2)-H-$(3):     \t\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-bench\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-pretty        \\\n     check-stage$(1)-T-$(2)-H-$(3)-rustdoc       \\\n+    check-stage$(1)-T-$(2)-H-$(3)-rusti         \\\n     check-stage$(1)-T-$(2)-H-$(3)-cargo       \\\n     check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial  \\\n     check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-ffi  \\\n@@ -289,6 +290,9 @@ check-stage$(1)-T-$(2)-H-$(3)-pretty-pretty:\t\t\t\t\\\n check-stage$(1)-T-$(2)-H-$(3)-rustdoc:\t\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-rustdoc-dummy\n \n+check-stage$(1)-T-$(2)-H-$(3)-rusti:\t\t\t\t\\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-rusti-dummy\n+\n check-stage$(1)-T-$(2)-H-$(3)-cargo:\t\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-cargo-dummy\n \n@@ -371,6 +375,23 @@ check-stage$(1)-T-$(2)-H-$(3)-rustdoc-dummy:\t\t\\\n \t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\t\\\n \t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-rustdoc.log\n \n+# Rules for the rusti test runner\n+\n+$(3)/test/rustitest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n+\t\t$$(RUSTI_CRATE) $$(RUSTI_INPUTS)\t\t\\\n+\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB)  \\\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)   \\\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n+\n+check-stage$(1)-T-$(2)-H-$(3)-rusti-dummy:\t\t\\\n+\t\t$(3)/test/rustitest.stage$(1)-$(2)$$(X)\n+\t@$$(call E, run: $$<)\n+\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\t\\\n+\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-rusti.log\n+\n # Rules for the cargo test runner\n \n $(3)/test/cargotest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n@@ -756,6 +777,9 @@ check-stage$(1)-H-$(2)-pretty-pretty:\t\t\t\t\\\n check-stage$(1)-H-$(2)-rustdoc:\t\t\t\t\t\\\n \t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n \t check-stage$(1)-T-$$(target)-H-$(2)-rustdoc)\n+check-stage$(1)-H-$(2)-rusti:\t\t\t\t\t\\\n+\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n+\t check-stage$(1)-T-$$(target)-H-$(2)-rusti)\n check-stage$(1)-H-$(2)-cargo:\t\t\t\t\t\\\n \t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n \t check-stage$(1)-T-$$(target)-H-$(2)-cargo)\n@@ -846,6 +870,9 @@ check-stage$(1)-H-all-pretty-pretty: \\\n check-stage$(1)-H-all-rustdoc: \\\n \t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n \t check-stage$(1)-H-$$(target)-rustdoc)\n+check-stage$(1)-H-all-rusti: \\\n+\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n+\t check-stage$(1)-H-$$(target)-rusti)\n check-stage$(1)-H-all-cargo: \\\n \t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n \t check-stage$(1)-H-$$(target)-cargo)\n@@ -880,6 +907,7 @@ check-stage$(1)-pretty-rfail: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-pretty-rfail\n check-stage$(1)-pretty-bench: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-pretty-bench\n check-stage$(1)-pretty-pretty: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-pretty-pretty\n check-stage$(1)-rustdoc: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-rustdoc\n+check-stage$(1)-rusti: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-rusti\n check-stage$(1)-cargo: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-cargo\n check-stage$(1)-doc-tutorial: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-doc-tutorial\n check-stage$(1)-doc-tutorial-ffi: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-doc-tutorial-ffi"}, {"sha": "a17305081db63beffa09737fdaf9a0f0450a7d0c", "filename": "mk/tools.mk", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/mk%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftools.mk?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -12,6 +12,10 @@ COMPILETEST_INPUTS := $(wildcard $(S)src/compiletest/*rs)\n CARGO_CRATE := $(S)src/cargo/cargo.rc\n CARGO_INPUTS := $(wildcard $(S)src/cargo/*rs)\n \n+# Rusti, the JIT REPL\n+RUSTI_CRATE := $(S)src/rusti/rusti.rc\n+RUSTI_INPUTS := $(wildcard $(S)src/rusti/*rs)\n+\n # Rustdoc, the documentation tool\n RUSTDOC_CRATE := $(S)src/rustdoc/rustdoc.rc\n RUSTDOC_INPUTS := $(wildcard $(S)src/rustdoc/*.rs)\n@@ -62,12 +66,27 @@ $$(TBIN$(1)_T_$(4)_H_$(3))/cargo$$(X):\t\t\t\t\\\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$<\n \n+$$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X):\t\t\t\t\\\n+\t\t$$(RUSTI_CRATE) $$(RUSTI_INPUTS)\t\t\t\\\n+\t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)  \\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)   \\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$<\n+\n $$(HBIN$(2)_H_$(4))/cargo$$(X):\t\t\t\t\t\\\n \t\t$$(TBIN$(1)_T_$(4)_H_$(3))/cargo$$(X)\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n+$$(HBIN$(2)_H_$(4))/rusti$$(X):\t\t\t\t\t\\\n+\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X)\t\\\n+\t\t$$(HSREQ$(2)_H_$(4))\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n $$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X):\t\t\t\\\n \t\t$$(RUSTDOC_CRATE) $$(RUSTDOC_INPUTS)\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\"}, {"sha": "e435d51463e8c1d056c3b5537e55d0a25097cbc7", "filename": "src/README.txt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/src%2FREADME.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/src%2FREADME.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME.txt?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -30,6 +30,8 @@ compiletest/       The test runner\n \n cargo/             The package manager\n \n+rusti/\t\t\t   The JIT REPL\n+\n rustdoc/           The Rust API documentation tool\n \n llvm/              The LLVM submodule\n@@ -38,6 +40,8 @@ libuv/             The libuv submodule\n \n rustllvm/          LLVM support code\n \n+linenoise\\\t\t   Minimalistic libreadline alternative\n+\n fuzzer/            A collection of fuzz testers\n \n etc/               Scripts, editor support, misc"}, {"sha": "742385241b5ab0ae140b2b80ceff21ba164c4226", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -152,6 +152,7 @@ pub mod option_iter {\n     pub mod inst;\n }\n pub mod result;\n+pub mod rl;\n pub mod to_str;\n pub mod to_bytes;\n pub mod from_str;"}, {"sha": "5230b0596cafdbd9eb384c4ab8717a37c20aeeb8", "filename": "src/libcore/rl.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/src%2Flibcore%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/src%2Flibcore%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frl.rs?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -0,0 +1,78 @@\n+use libc::{c_char, c_int};\n+\n+#[link_args = \"-Llinenoise\"]\n+#[link_name = \"linenoise\"]\n+#[abi = \"cdecl\"]\n+extern mod linenoise {\n+    #[legacy_exports];\n+    fn linenoise(prompt: *c_char) -> *c_char;\n+    fn linenoiseHistoryAdd(line: *c_char) -> c_int;\n+    fn linenoiseHistorySetMaxLen(len: c_int) -> c_int;\n+    fn linenoiseHistorySave(file: *c_char) -> c_int;\n+    fn linenoiseHistoryLoad(file: *c_char) -> c_int;\n+    fn linenoiseSetCompletionCallback(callback: *u8);\n+    fn linenoiseAddCompletion(completions: *(), line: *c_char);\n+    fn linenoiseClearScreen();\n+}\n+\n+/// Add a line to history\n+pub fn add_history(line: ~str) -> bool {\n+\tdo str::as_c_str(line) |buf| {\n+\t\tlinenoise::linenoiseHistoryAdd(buf) == 1 as c_int\n+\t}\n+}\n+\n+/// Set the maximum amount of lines stored\n+pub fn set_history_max_len(len: int) -> bool {\n+\tlinenoise::linenoiseHistorySetMaxLen(len as c_int) == 1 as c_int\n+}\n+\n+/// Save line history to a file\n+pub fn save_history(file: ~str) -> bool {\n+\tdo str::as_c_str(file) |buf| {\n+\t\tlinenoise::linenoiseHistorySave(buf) == 1 as c_int\n+\t}\n+}\n+\n+/// Load line history from a file\n+pub fn load_history(file: ~str) -> bool {\n+\tdo str::as_c_str(file) |buf| {\n+\t\tlinenoise::linenoiseHistoryLoad(buf) == 1 as c_int\n+\t}\n+}\n+\n+/// Print out a prompt and then wait for input and return it\n+pub fn read(prompt: ~str) -> Option<~str> {\n+\tdo str::as_c_str(prompt) |buf| unsafe {\n+\t\tlet line = linenoise::linenoise(buf);\n+\n+\t\tif line.is_null() { None }\n+\t\telse { Some(str::raw::from_c_str(line)) }\n+\t}\n+}\n+\n+/// Clear the screen\n+pub fn clear() {\n+\tlinenoise::linenoiseClearScreen();\n+}\n+\n+pub type CompletionCb = fn~(~str, fn(~str));\n+\n+fn complete_key(_v: @CompletionCb) {}\n+\n+/// Bind to the main completion callback\n+pub fn complete(cb: CompletionCb) unsafe {\n+\ttask::local_data::local_data_set(complete_key, @(move cb));\n+\n+\textern fn callback(line: *c_char, completions: *()) unsafe {\n+\t\tlet cb: CompletionCb = copy *task::local_data::local_data_get(complete_key).get();\n+\n+\t\tdo cb(str::raw::from_c_str(line)) |suggestion| {\n+\t\t\tdo str::as_c_str(suggestion) |buf| {\n+\t\t\t\tlinenoise::linenoiseAddCompletion(completions, buf);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tlinenoise::linenoiseSetCompletionCallback(callback);\n+}"}, {"sha": "8c9b481281ba401f6baf45bc9ca9fc940b59405f", "filename": "src/linenoise", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flinenoise?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -0,0 +1 @@\n+Subproject commit 8c9b481281ba401f6baf45bc9ca9fc940b59405f"}, {"sha": "612c57add81290d196524d099d6220d859cb007a", "filename": "src/rusti/rusti.rc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/src%2Frusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/src%2Frusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frusti%2Frusti.rc?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -0,0 +1,36 @@\n+// rusti - REPL using the JIT backend\n+\n+#[link(name = \"rusti\",\n+       vers = \"0.4\",\n+       uuid = \"7fb5bf52-7d45-4fee-8325-5ad3311149fc\",\n+       url = \"https://github.com/mozilla/rust/tree/master/src/rusti\")];\n+\n+#[crate_type = \"bin\"];\n+\n+#[no_core];\n+\n+#[allow(vecs_implicitly_copyable,\n+        non_implicitly_copyable_typarams)];\n+#[allow(non_camel_case_types)];\n+#[allow(deprecated_mode)];\n+#[allow(deprecated_pattern)];\n+\n+extern mod core(vers = \"0.4\");\n+extern mod std(vers = \"0.4\");\n+extern mod rustc(vers = \"0.4\");\n+extern mod syntax(vers = \"0.4\");\n+\n+use core::*;\n+use io::{ReaderUtil, WriterUtil};\n+use std::c_vec;\n+use rustc::back;\n+use rustc::driver::{driver, session};\n+use rustc::front;\n+use rustc::lib::llvm::llvm;\n+use rustc::metadata::{creader, filesearch};\n+use rustc::middle::{freevars, kind, lint, trans, ty, typeck};\n+use rustc::middle;\n+use syntax::{ast, ast_util, codemap, diagnostic, fold, parse, print, visit};\n+use syntax::ast_util::*;\n+use parse::token;\n+use print::{pp, pprust};"}, {"sha": "d12172ac69d134a44b31e3e53803734c6376148f", "filename": "src/rusti/rusti.rs", "status": "added", "additions": 323, "deletions": 0, "changes": 323, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/src%2Frusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/src%2Frusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frusti%2Frusti.rs?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -0,0 +1,323 @@\n+/**\n+ * A structure shared across REPL instances for storing history\n+ * such as statements and view items. I wish the AST was sendable.\n+ */\n+struct Repl {\n+    prompt: ~str,\n+    binary: ~str,\n+    running: bool,\n+    view_items: ~str,\n+    stmts: ~str\n+}\n+\n+/// A utility function that hands off a pretty printer to a callback.\n+fn with_pp(intr: @token::ident_interner,\n+           cb: fn(pprust::ps, io::Writer)) -> ~str {\n+    do io::with_str_writer |writer| {\n+        let pp = pprust::rust_printer(writer, intr);\n+\n+        cb(pp, writer);\n+        pp::eof(pp.s);\n+    }\n+}\n+\n+/**\n+ * The AST (or the rest of rustc) are not sendable yet,\n+ * so recorded things are printed to strings. A terrible hack that\n+ * needs changes to rustc in order to be outed. This is unfortunately\n+ * going to cause the REPL to regress in parser performance,\n+ * because it has to parse the statements and view_items on each\n+ * input.\n+ */\n+fn record(repl: Repl, blk: @ast::blk, intr: @token::ident_interner) -> Repl {\n+    let view_items = if blk.node.view_items.len() > 0 {\n+        let new_view_items = do with_pp(intr) |pp, writer| {\n+            for blk.node.view_items.each |view_item| {\n+                pprust::print_view_item(pp, *view_item);\n+                writer.write_line(~\"\");\n+            }\n+        };\n+\n+        debug!(\"new view items %s\", new_view_items);\n+\n+        repl.view_items + \"\\n\" + new_view_items\n+    } else { repl.view_items };\n+    let stmts = if blk.node.stmts.len() > 0 {\n+        let new_stmts = do with_pp(intr) |pp, writer| {\n+            for blk.node.stmts.each |stmt| {\n+                match stmt.node {\n+                    ast::stmt_decl(*) => {\n+                        pprust::print_stmt(pp, **stmt);\n+                        writer.write_line(~\"\");\n+                    }\n+                    ast::stmt_expr(expr, _) | ast::stmt_semi(expr, _) => {\n+                        match expr.node {\n+                            ast::expr_assign(*) |\n+                            ast::expr_assign_op(*) |\n+                            ast::expr_swap(*) => {\n+                                pprust::print_stmt(pp, **stmt);\n+                                writer.write_line(~\"\");\n+                            }\n+                            _ => {}\n+                        }\n+                    }\n+                }\n+            }\n+        };\n+\n+        debug!(\"new stmts %s\", new_stmts);\n+\n+        repl.stmts + \"\\n\" + new_stmts\n+    } else { repl.stmts };\n+\n+    Repl{\n+        view_items: view_items,\n+        stmts: stmts,\n+        .. repl\n+    }\n+}\n+\n+/// Run an input string in a Repl, returning the new Repl.\n+fn run(repl: Repl, input: ~str) -> Repl {\n+    let options: @session::options = @{\n+        crate_type: session::unknown_crate,\n+        binary: repl.binary,\n+        .. *session::basic_options()\n+    };\n+\n+    debug!(\"building driver input\");\n+    let head = include_str!(\"wrapper.rs\");\n+    let foot = fmt!(\"%s\\nfn main() {\\n%s\\n\\nprint({\\n%s\\n})\\n}\",\n+                    repl.view_items, repl.stmts, input);\n+    let wrapped = driver::str_input(head + foot);\n+\n+    debug!(\"inputting %s\", head + foot);\n+\n+    debug!(\"building a driver session\");\n+    let sess = driver::build_session(options, diagnostic::emit);\n+\n+    debug!(\"building driver configuration\");\n+    let cfg = driver::build_configuration(sess,\n+                                          repl.binary,\n+                                          wrapped);\n+\n+    debug!(\"parsing\");\n+    let mut crate = driver::parse_input(sess, cfg, wrapped);\n+    let mut opt = None;\n+\n+    for crate.node.module.items.each |item| {\n+        match item.node {\n+            ast::item_fn(_, _, _, blk) => {\n+                if item.ident == sess.ident_of(~\"main\") {\n+                    opt = blk.node.expr;\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    let blk = match opt.get().node {\n+        ast::expr_call(_, exprs, _) => {\n+            match exprs[0].node {\n+                ast::expr_block(blk) => @blk,\n+                _ => fail\n+            }\n+        }\n+        _ => fail\n+    };\n+\n+    debug!(\"configuration\");\n+    crate = front::config::strip_unconfigured_items(crate);\n+\n+    debug!(\"maybe building test harness\");\n+    crate = front::test::modify_for_testing(sess, crate);\n+\n+    debug!(\"expansion\");\n+    crate = syntax::ext::expand::expand_crate(sess.parse_sess,\n+                                              sess.opts.cfg,\n+                                              crate);\n+\n+    debug!(\"intrinsic injection\");\n+    crate = front::intrinsic_inject::inject_intrinsic(sess, crate);\n+\n+    debug!(\"core injection\");\n+    crate = front::core_inject::maybe_inject_libcore_ref(sess, crate);\n+\n+    debug!(\"building lint settings table\");\n+    lint::build_settings_crate(sess, crate);\n+\n+    debug!(\"ast indexing\");\n+    let ast_map = syntax::ast_map::map_crate(sess.diagnostic(), *crate);\n+\n+    debug!(\"external crate/lib resolution\");\n+    creader::read_crates(sess.diagnostic(), *crate, sess.cstore,\n+                         sess.filesearch,\n+                         session::sess_os_to_meta_os(sess.targ_cfg.os),\n+                         sess.opts.static, sess.parse_sess.interner);\n+\n+    debug!(\"language item collection\");\n+    let lang_items = middle::lang_items::collect_language_items(crate, sess);\n+\n+    debug!(\"resolution\");\n+    let {def_map: def_map,\n+         exp_map2: exp_map2,\n+         trait_map: trait_map} = middle::resolve::resolve_crate(sess,\n+                                                                lang_items,\n+                                                                crate);\n+\n+    debug!(\"freevar finding\");\n+    let freevars = freevars::annotate_freevars(def_map, crate);\n+\n+    debug!(\"region_resolution\");\n+    let region_map = middle::region::resolve_crate(sess, def_map, crate);\n+\n+    debug!(\"region paramaterization inference\");\n+    let rp_set = middle::region::determine_rp_in_crate(sess, ast_map,\n+                                                       def_map, crate);\n+\n+    debug!(\"typechecking\");\n+    let ty_cx = ty::mk_ctxt(sess, def_map, ast_map, freevars,\n+                            region_map, rp_set, move lang_items, crate);\n+    let (method_map, vtable_map) = typeck::check_crate(ty_cx, trait_map,\n+                                                       crate);\n+\n+    debug!(\"const marking\");\n+    middle::const_eval::process_crate(crate, def_map, ty_cx);\n+\n+    debug!(\"const checking\");\n+    middle::check_const::check_crate(sess, crate, ast_map, def_map,\n+                                     method_map, ty_cx);\n+\n+    debug!(\"privacy checking\");\n+    middle::privacy::check_crate(ty_cx, &method_map, crate);\n+\n+    debug!(\"loop checking\");\n+    middle::check_loop::check_crate(ty_cx, crate);\n+\n+    debug!(\"alt checking\");\n+    middle::check_alt::check_crate(ty_cx, crate);\n+\n+    debug!(\"liveness checking\");\n+    let last_use_map = middle::liveness::check_crate(ty_cx,\n+                                                     method_map, crate);\n+\n+    debug!(\"borrow checking\");\n+    let (root_map, mutbl_map) = middle::borrowck::check_crate(ty_cx,\n+                                                              method_map,\n+                                                              last_use_map,\n+                                                              crate);\n+\n+    debug!(\"kind checking\");\n+    kind::check_crate(ty_cx, method_map, last_use_map, crate);\n+\n+    debug!(\"lint checking\");\n+    lint::check_crate(ty_cx, crate);\n+\n+    let maps = {mutbl_map: mutbl_map,\n+                root_map: root_map,\n+                last_use_map: last_use_map,\n+                method_map: method_map,\n+                vtable_map: vtable_map};\n+\n+    debug!(\"translation\");\n+    let (llmod, _) = trans::base::trans_crate(sess, crate, ty_cx,\n+                                              ~path::from_str(\"<repl>\"),\n+                                              exp_map2, maps);\n+    let pm = llvm::LLVMCreatePassManager();\n+\n+    debug!(\"executing jit\");\n+    back::link::jit::exec(sess, pm, llmod, 0, false);\n+    llvm::LLVMDisposePassManager(pm);\n+\n+    debug!(\"recording input into repl history\");\n+    record(repl, blk, sess.parse_sess.interner)\n+}\n+\n+/// Run a command, e.g. :clear, :exit, etc.\n+fn run_cmd(repl: &mut Repl, _in: io::Reader, _out: io::Writer,\n+           cmd: ~str, _args: ~[~str]) {\n+    match cmd {\n+        ~\"exit\" => repl.running = false,\n+        ~\"clear\" => {\n+            repl.view_items = ~\"\";\n+            repl.stmts = ~\"\";\n+\n+            rl::clear();\n+        }\n+        ~\"help\" => {\n+            io::println(~\":clear - clear the screen\\n\" + \n+                        ~\":exit - exit from the repl\\n\" +\n+                        ~\":help - show this message\");\n+        }\n+        _ => io::println(~\"unknown cmd: \" + cmd)\n+    }\n+}\n+\n+fn main() {\n+    let args = os::args();\n+    let in = io::stdin();\n+    let out = io::stdout();\n+    let mut repl = Repl {\n+        prompt: ~\"rusti> \",\n+        binary: args[0],\n+        running: true,\n+        view_items: ~\"\",\n+        stmts: ~\"\"\n+    };\n+\n+    do rl::complete |line, suggest| {\n+        if line.starts_with(\":\") {\n+            suggest(~\":clear\");\n+            suggest(~\":exit\");\n+            suggest(~\":help\");\n+        }\n+    }\n+\n+    while repl.running {\n+        let result = rl::read(repl.prompt);\n+\n+        if result.is_none() {\n+            break;\n+        }\n+\n+        let line = result.get();\n+\n+        if line.is_empty() {\n+            io::println(~\"()\");\n+\n+            loop;\n+        }\n+\n+        rl::add_history(line);\n+\n+        if line.starts_with(~\":\") {\n+            let full = line.substr(1, line.len() - 1);\n+            let split = full.split_char(' ');\n+            let len = split.len(); \n+\n+            if len > 0 {\n+                let cmd = split[0];\n+\n+                if !cmd.is_empty() {\n+                    let args = if len > 1 {\n+                        do vec::view(split, 1, len - 1).map |arg| {\n+                            *arg\n+                        }\n+                    } else { ~[] };\n+\n+                    run_cmd(&mut repl, in, out, cmd, args);\n+\n+                    loop;\n+                }\n+            }\n+        }\n+\n+        let result = do task::try |copy repl| {\n+            run(copy repl, line)\n+        };\n+\n+        if result.is_ok() {\n+            repl = result.get();\n+        }\n+    }\n+}"}, {"sha": "0e6510c88df31de3f45d72b071f667911e6ede62", "filename": "src/rusti/wrapper.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4912428cb5c5b4bf9e575673e5480b5f269353db/src%2Frusti%2Fwrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4912428cb5c5b4bf9e575673e5480b5f269353db/src%2Frusti%2Fwrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frusti%2Fwrapper.rs?ref=4912428cb5c5b4bf9e575673e5480b5f269353db", "patch": "@@ -0,0 +1,24 @@\n+#[legacy_modes];\n+#[legacy_exports];\n+\n+#[allow(ctypes)];\n+#[allow(deprecated_mode)];\n+#[allow(deprecated_pattern)];\n+#[allow(heap_memory)];\n+#[allow(implicit_copies)];\n+#[allow(managed_heap_memory)];\n+#[allow(non_camel_case_types)];\n+#[allow(non_implicitly_copyable_typarams)];\n+#[allow(owned_heap_memory)];\n+#[allow(path_statement)];\n+#[allow(structural_records)];\n+#[allow(unrecognized_lint)];\n+#[allow(unused_imports)];\n+#[allow(vecs_implicitly_copyable)];\n+#[allow(while_true)];\n+\n+extern mod std;\n+\n+fn print<T>(result: T) {\n+    io::println(fmt!(\"%?\", result));\n+}"}]}