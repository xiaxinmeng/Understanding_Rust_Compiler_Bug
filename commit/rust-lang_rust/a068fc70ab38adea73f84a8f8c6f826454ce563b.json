{"sha": "a068fc70ab38adea73f84a8f8c6f826454ce563b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNjhmYzcwYWIzOGFkZWE3M2Y4NGE4ZjhjNmY4MjY0NTRjZTU2M2I=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-08-06T10:49:17Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-08-27T17:53:02Z"}, "message": "Doc: explain why Box/Rc/Arc methods do not take self\n\nThis can be confusing for newcomers, especially due to the argument\nname \"this\".", "tree": {"sha": "4b06603291a049b8bb73c5a0cf717c74bc573fb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b06603291a049b8bb73c5a0cf717c74bc573fb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a068fc70ab38adea73f84a8f8c6f826454ce563b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a068fc70ab38adea73f84a8f8c6f826454ce563b", "html_url": "https://github.com/rust-lang/rust/commit/a068fc70ab38adea73f84a8f8c6f826454ce563b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a068fc70ab38adea73f84a8f8c6f826454ce563b/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11946956a6352f49c6aadc1c13c39757a046e0c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/11946956a6352f49c6aadc1c13c39757a046e0c2", "html_url": "https://github.com/rust-lang/rust/commit/11946956a6352f49c6aadc1c13c39757a046e0c2"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "b54b71cabd1e9cdaa21ee7a4b752733c52e09ac4", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a068fc70ab38adea73f84a8f8c6f826454ce563b/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a068fc70ab38adea73f84a8f8c6f826454ce563b/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=a068fc70ab38adea73f84a8f8c6f826454ce563b", "patch": "@@ -71,6 +71,12 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// does not use atomics, making it both thread-unsafe as well as significantly\n /// faster when updating the reference count.\n ///\n+/// Note: the inherent methods defined on `Arc<T>` are all associated functions,\n+/// which means that you have to call them as e.g.  `Arc::get_mut(&value)`\n+/// instead of `value.get_mut()`.  This is so that there are no conflicts with\n+/// methods on the inner type `T`, which are what you want to call in the\n+/// majority of cases.\n+///\n /// # Examples\n ///\n /// In this example, a large vector of data will be shared by several threads. First we"}, {"sha": "70c429cc3600a4f94809ee41470575e02b3f5a1c", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a068fc70ab38adea73f84a8f8c6f826454ce563b/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a068fc70ab38adea73f84a8f8c6f826454ce563b/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=a068fc70ab38adea73f84a8f8c6f826454ce563b", "patch": "@@ -271,6 +271,10 @@ impl<T: ?Sized> Box<T> {\n     /// proper way to do so is to convert the raw pointer back into a\n     /// `Box` with the `Box::from_raw` function.\n     ///\n+    /// Note: this is an associated function, which means that you have\n+    /// to call it as `Box::into_raw(b)` instead of `b.into_raw()`. This\n+    /// is so that there is no conflict with a method on the inner type.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "c24c7ca47ad053ff6ae38be2947d5c3e20556f44", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a068fc70ab38adea73f84a8f8c6f826454ce563b/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a068fc70ab38adea73f84a8f8c6f826454ce563b/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=a068fc70ab38adea73f84a8f8c6f826454ce563b", "patch": "@@ -182,6 +182,12 @@ struct RcBox<T: ?Sized> {\n /// A reference-counted pointer type over an immutable value.\n ///\n /// See the [module level documentation](./index.html) for more details.\n+///\n+/// Note: the inherent methods defined on `Rc<T>` are all associated functions,\n+/// which means that you have to call them as e.g. `Rc::get_mut(&value)` instead\n+/// of `value.get_mut()`.  This is so that there are no conflicts with methods\n+/// on the inner type `T`, which are what you want to call in the majority of\n+/// cases.\n #[cfg_attr(stage0, unsafe_no_drop_flag)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Rc<T: ?Sized> {"}]}