{"sha": "23be63fbbadb372f1d2306991ae63b77a7314ddd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYmU2M2ZiYmFkYjM3MmYxZDIzMDY5OTFhZTYzYjc3YTczMTRkZGQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-10-13T14:06:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-13T14:06:15Z"}, "message": "Merge pull request #2047 from japaric/dump-default-config-2\n\noutput --dump-default-config to stdout if no path is given", "tree": {"sha": "37c9be0ef2b0a310e836ba20061f3bba3ae88df8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37c9be0ef2b0a310e836ba20061f3bba3ae88df8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23be63fbbadb372f1d2306991ae63b77a7314ddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23be63fbbadb372f1d2306991ae63b77a7314ddd", "html_url": "https://github.com/rust-lang/rust/commit/23be63fbbadb372f1d2306991ae63b77a7314ddd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23be63fbbadb372f1d2306991ae63b77a7314ddd/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc15e9f8382353176f53d9837f3d619474759ee1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc15e9f8382353176f53d9837f3d619474759ee1", "html_url": "https://github.com/rust-lang/rust/commit/fc15e9f8382353176f53d9837f3d619474759ee1"}, {"sha": "a1cfacdb12a475d05004249a1d00c612b0e27e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1cfacdb12a475d05004249a1d00c612b0e27e5b", "html_url": "https://github.com/rust-lang/rust/commit/a1cfacdb12a475d05004249a1d00c612b0e27e5b"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "d1c04de832389313a232f731599d6f91aeb1cb24", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/23be63fbbadb372f1d2306991ae63b77a7314ddd/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23be63fbbadb372f1d2306991ae63b77a7314ddd/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=23be63fbbadb372f1d2306991ae63b77a7314ddd", "patch": "@@ -21,7 +21,7 @@ use std::io::{self, Read, Write};\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n \n-use getopts::{Matches, Options};\n+use getopts::{HasArg, Matches, Occur, Options};\n \n use rustfmt::{run, Input, Summary};\n use rustfmt::file_lines::FileLines;\n@@ -44,8 +44,8 @@ enum Operation {\n     Version,\n     /// Print detailed configuration help.\n     ConfigHelp,\n-    /// Output default config to a file\n-    ConfigOutputDefault { path: String },\n+    /// Output default config to a file, or stdout if None\n+    ConfigOutputDefault { path: Option<String> },\n     /// No file specified, read from stdin\n     Stdin {\n         input: String,\n@@ -125,11 +125,14 @@ fn make_opts() -> Options {\n         \"config-help\",\n         \"show details of rustfmt configuration options\",\n     );\n-    opts.optopt(\n+    opts.opt(\n         \"\",\n         \"dump-default-config\",\n-        \"Dumps the default configuration to a file and exits.\",\n+        \"Dumps the default configuration to a file and exits. PATH defaults to rustfmt.toml if \\\n+         omitted.\",\n         \"PATH\",\n+        HasArg::Maybe,\n+        Occur::Optional,\n     );\n     opts.optopt(\n         \"\",\n@@ -172,9 +175,13 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n             Ok(Summary::default())\n         }\n         Operation::ConfigOutputDefault { path } => {\n-            let mut file = File::create(path)?;\n             let toml = Config::default().all_options().to_toml()?;\n-            file.write_all(toml.as_bytes())?;\n+            if let Some(path) = path {\n+                let mut file = File::create(path)?;\n+                file.write_all(toml.as_bytes())?;\n+            } else {\n+                io::stdout().write_all(toml.as_bytes())?;\n+            }\n             Ok(Summary::default())\n         }\n         Operation::Stdin { input, config_path } => {\n@@ -327,8 +334,20 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n         return Ok(Operation::ConfigHelp);\n     }\n \n-    if let Some(path) = matches.opt_str(\"dump-default-config\") {\n-        return Ok(Operation::ConfigOutputDefault { path });\n+    if matches.opt_present(\"dump-default-config\") {\n+        // NOTE for some reason when configured with HasArg::Maybe + Occur::Optional opt_default\n+        // doesn't recognize `--foo bar` as a long flag with an argument but as a long flag with no\n+        // argument *plus* a free argument. Thus we check for that case in this branch -- this is\n+        // required for backward compatibility.\n+        if let Some(path) = matches.free.get(0) {\n+            return Ok(Operation::ConfigOutputDefault {\n+                path: Some(path.clone()),\n+            });\n+        } else {\n+            return Ok(Operation::ConfigOutputDefault {\n+                path: matches.opt_str(\"dump-default-config\"),\n+            });\n+        }\n     }\n \n     if matches.opt_present(\"version\") {"}]}