{"sha": "daeec7e22de6a99a5440ddf401f3fc16756cd64a", "node_id": "C_kwDOAAsO6NoAKGRhZWVjN2UyMmRlNmE5OWE1NDQwZGRmNDAxZjNmYzE2NzU2Y2Q2NGE", "commit": {"author": {"name": "Takayuki Maeda", "email": "41065217+TaKO8Ki@users.noreply.github.com", "date": "2022-05-11T10:18:02Z"}, "committer": {"name": "Takayuki Maeda", "email": "41065217+TaKO8Ki@users.noreply.github.com", "date": "2022-05-11T10:18:02Z"}, "message": "stop suggesting non-existing fully qualified paths", "tree": {"sha": "f2bc4c636631782bf0b1cc9488d8328f34d6eb13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2bc4c636631782bf0b1cc9488d8328f34d6eb13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daeec7e22de6a99a5440ddf401f3fc16756cd64a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daeec7e22de6a99a5440ddf401f3fc16756cd64a", "html_url": "https://github.com/rust-lang/rust/commit/daeec7e22de6a99a5440ddf401f3fc16756cd64a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daeec7e22de6a99a5440ddf401f3fc16756cd64a/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb121987158d69bb894ba1bcc21dc45d1e0a488f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb121987158d69bb894ba1bcc21dc45d1e0a488f", "html_url": "https://github.com/rust-lang/rust/commit/cb121987158d69bb894ba1bcc21dc45d1e0a488f"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "62edfc6495cf655d3facdb2fbeaa81d3b28f46c6", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/daeec7e22de6a99a5440ddf401f3fc16756cd64a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeec7e22de6a99a5440ddf401f3fc16756cd64a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=daeec7e22de6a99a5440ddf401f3fc16756cd64a", "patch": "@@ -739,7 +739,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 {\n                     let mut eraser = TypeParamEraser(self.tcx);\n                     let candidate_len = impl_candidates.len();\n-                    let mut suggestions: Vec<_> = impl_candidates.iter().map(|candidate| {\n+                    let mut suggestions: Vec<_> = impl_candidates.iter().filter_map(|candidate| {\n                         let trait_item = self.tcx\n                             .associated_items(candidate.def_id)\n                             .find_by_name_and_kind(\n@@ -748,6 +748,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                 ty::AssocKind::Fn,\n                                 candidate.def_id\n                             );\n+                        if trait_item.is_none() {\n+                            return None;\n+                        }\n                         let prefix = if let Some(trait_item) = trait_item\n                             && let Some(trait_m) = trait_item.def_id.as_local()\n                             && let hir::TraitItemKind::Fn(fn_, _) = &self.tcx.hir().trait_item(hir::TraitItemId { def_id: trait_m }).kind\n@@ -761,24 +764,26 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             \"\"\n                         };\n                         let candidate = candidate.super_fold_with(&mut eraser);\n-                        vec![\n+                        Some(vec![\n                             (expr.span.shrink_to_lo(), format!(\"{}::{}({}\", candidate, segment.ident, prefix)),\n                             if exprs.len() == 1 {\n                                 (expr.span.shrink_to_hi().with_hi(e.span.hi()), \")\".to_string())\n                             } else {\n                                 (expr.span.shrink_to_hi().with_hi(exprs[1].span.lo()), \", \".to_string())\n                             },\n-                        ]\n+                        ])\n                     }).collect();\n                     suggestions.sort_by(|a, b| a[0].1.cmp(&b[0].1));\n-                    err.multipart_suggestions(\n-                        &format!(\n-                            \"use the fully qualified path for the potential candidate{}\",\n-                            pluralize!(candidate_len),\n-                        ),\n-                        suggestions.into_iter(),\n-                        Applicability::MaybeIncorrect,\n-                    );\n+                    if !suggestions.is_empty() {\n+                        err.multipart_suggestions(\n+                            &format!(\n+                                \"use the fully qualified path for the potential candidate{}\",\n+                                pluralize!(candidate_len),\n+                            ),\n+                            suggestions.into_iter(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n                 }\n                 // Suggest specifying type params or point out the return type of the call:\n                 //"}, {"sha": "538e74ee1b00f20587147e093997dd7ab1fe27e5", "filename": "src/test/ui/traits/not-suggest-non-existing-fully-qualified-path.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/daeec7e22de6a99a5440ddf401f3fc16756cd64a/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeec7e22de6a99a5440ddf401f3fc16756cd64a/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.rs?ref=daeec7e22de6a99a5440ddf401f3fc16756cd64a", "patch": "@@ -0,0 +1,24 @@\n+struct A<T>(T);\n+struct B;\n+\n+trait I<T> {}\n+impl I<i32> for B {}\n+impl I<u32> for B {}\n+\n+trait V<U> {\n+    fn method(self) -> U;\n+}\n+\n+impl<T, U> V<U> for A<T>\n+where\n+    T: I<U>,\n+{\n+    fn method(self) -> U { unimplemented!() }\n+}\n+\n+fn main() {\n+    let a = A(B);\n+    a.method();\n+    //~^ ERROR type annotations needed\n+    //~| ERROR type annotations needed\n+}"}, {"sha": "65f2d99417f2fa901402285ff7ce109608828e38", "filename": "src/test/ui/traits/not-suggest-non-existing-fully-qualified-path.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/daeec7e22de6a99a5440ddf401f3fc16756cd64a/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daeec7e22de6a99a5440ddf401f3fc16756cd64a/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr?ref=daeec7e22de6a99a5440ddf401f3fc16756cd64a", "patch": "@@ -0,0 +1,35 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/not-suggest-non-existing-fully-qualified-path.rs:21:7\n+   |\n+LL |     a.method();\n+   |     --^^^^^^--\n+   |     | |\n+   |     | cannot infer type for type parameter `U` declared on the trait `V`\n+   |     this method call resolves to `U`\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/not-suggest-non-existing-fully-qualified-path.rs:21:7\n+   |\n+LL |     a.method();\n+   |     --^^^^^^--\n+   |     | |\n+   |     | cannot infer type for type parameter `U`\n+   |     this method call resolves to `U`\n+   |\n+note: multiple `impl`s satisfying `B: I<_>` found\n+  --> $DIR/not-suggest-non-existing-fully-qualified-path.rs:5:1\n+   |\n+LL | impl I<i32> for B {}\n+   | ^^^^^^^^^^^^^^^^^\n+LL | impl I<u32> for B {}\n+   | ^^^^^^^^^^^^^^^^^\n+note: required because of the requirements on the impl of `V<_>` for `A<B>`\n+  --> $DIR/not-suggest-non-existing-fully-qualified-path.rs:12:12\n+   |\n+LL | impl<T, U> V<U> for A<T>\n+   |            ^^^^     ^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0282, E0283.\n+For more information about an error, try `rustc --explain E0282`."}]}