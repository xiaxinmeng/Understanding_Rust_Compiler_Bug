{"sha": "36e3fc9d5413f7e6e17e82867aae1318645880a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZTNmYzlkNTQxM2Y3ZTZlMTdlODI4NjdhYWUxMzE4NjQ1ODgwYTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T06:40:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T06:42:30Z"}, "message": "Rename Source::ast -> Source::value", "tree": {"sha": "166ee3c45f99611f7c20740c2a246f5b3bed41a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/166ee3c45f99611f7c20740c2a246f5b3bed41a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36e3fc9d5413f7e6e17e82867aae1318645880a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36e3fc9d5413f7e6e17e82867aae1318645880a3", "html_url": "https://github.com/rust-lang/rust/commit/36e3fc9d5413f7e6e17e82867aae1318645880a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36e3fc9d5413f7e6e17e82867aae1318645880a3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e975f6364cb3caf50467835afb0dafce887f51f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e975f6364cb3caf50467835afb0dafce887f51f0", "html_url": "https://github.com/rust-lang/rust/commit/e975f6364cb3caf50467835afb0dafce887f51f0"}], "stats": {"total": 440, "additions": 226, "deletions": 214}, "files": [{"sha": "cef669cb5ca0192f625f72d4aac7ee9d13cd396d", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -174,7 +174,7 @@ fn resolve_target_trait_def(\n         .path()?;\n \n     match analyzer.resolve_path(db, &ast_path) {\n-        Some(hir::PathResolution::Def(hir::ModuleDef::Trait(def))) => Some(def.source(db).ast),\n+        Some(hir::PathResolution::Def(hir::ModuleDef::Trait(def))) => Some(def.source(db).value),\n         _ => None,\n     }\n }"}, {"sha": "b5f8afb4e77070331e826f3f34b29a260a0231f3", "filename": "crates/ra_assists/src/assists/add_new.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -141,7 +141,7 @@ fn find_struct_impl(\n     })?;\n \n     let struct_ty = {\n-        let src = hir::Source { file_id: ctx.frange.file_id.into(), ast: strukt.clone() };\n+        let src = hir::Source { file_id: ctx.frange.file_id.into(), value: strukt.clone() };\n         hir::Struct::from_source(db, src).unwrap().ty(db)\n     };\n \n@@ -152,7 +152,7 @@ fn find_struct_impl(\n             return false;\n         }\n \n-        let src = hir::Source { file_id: ctx.frange.file_id.into(), ast: impl_blk.clone() };\n+        let src = hir::Source { file_id: ctx.frange.file_id.into(), value: impl_blk.clone() };\n         let blk = hir::ImplBlock::from_source(db, src).unwrap();\n \n         let same_ty = blk.target_ty(db) == struct_ty;"}, {"sha": "9354466d9640ea3f766148eb9d827885a2e95310", "filename": "crates/ra_assists/src/assists/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -84,7 +84,7 @@ fn resolve_enum_def(\n     let expr_ty = analyzer.type_of(db, &expr)?;\n \n     analyzer.autoderef(db, expr_ty).find_map(|ty| match ty.as_adt() {\n-        Some((Adt::Enum(e), _)) => Some(e.source(db).ast),\n+        Some((Adt::Enum(e), _)) => Some(e.source(db).value),\n         _ => None,\n     })\n }"}, {"sha": "9cd21e4b6ef5eb019daa391aed91e389b58062dd", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -98,7 +98,7 @@ pub fn run(\n             let src = f.source(db);\n             let original_file = src.file_id.original_file(db);\n             let path = db.file_relative_path(original_file);\n-            let syntax_range = src.ast.syntax().text_range();\n+            let syntax_range = src.value.syntax().text_range();\n             write!(msg, \" ({:?} {})\", path, syntax_range).unwrap();\n         }\n         bar.set_message(&msg);\n@@ -135,7 +135,7 @@ pub fn run(\n                         let path = db.file_relative_path(original_file);\n                         let line_index = host.analysis().file_line_index(original_file).unwrap();\n                         let text_range = src\n-                            .ast\n+                            .value\n                             .either(|it| it.syntax().text_range(), |it| it.syntax().text_range());\n                         let (start, end) = (\n                             line_index.line_col(text_range.start()),"}, {"sha": "cb990f4e2361330c557b608f901d24e83bf67b73", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -139,7 +139,7 @@ impl Module {\n     ) -> Either<ast::UseTree, ast::ExternCrateItem> {\n         let src = self.definition_source(db);\n         let (_, source_map) = db.raw_items_with_source_map(src.file_id);\n-        source_map.get(&src.ast, import)\n+        source_map.get(&src.value, import)\n     }\n \n     /// Returns the crate this module is part of.\n@@ -206,7 +206,7 @@ impl Module {\n                 crate::ModuleDef::Function(f) => f.diagnostics(db, sink),\n                 crate::ModuleDef::Module(m) => {\n                     // Only add diagnostics from inline modules\n-                    if let ModuleSource::Module(_) = m.definition_source(db).ast {\n+                    if let ModuleSource::Module(_) = m.definition_source(db).value {\n                         m.diagnostics(db, sink)\n                     }\n                 }\n@@ -598,10 +598,10 @@ impl FnData {\n         func: Function,\n     ) -> Arc<FnData> {\n         let src = func.source(db);\n-        let name = src.ast.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\n+        let name = src.value.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\n         let mut params = Vec::new();\n         let mut has_self_param = false;\n-        if let Some(param_list) = src.ast.param_list() {\n+        if let Some(param_list) = src.value.param_list() {\n             if let Some(self_param) = param_list.self_param() {\n                 let self_type = if let Some(type_ref) = self_param.ascribed_type() {\n                     TypeRef::from_ast(type_ref)\n@@ -625,7 +625,7 @@ impl FnData {\n                 params.push(type_ref);\n             }\n         }\n-        let ret_type = if let Some(type_ref) = src.ast.ret_type().and_then(|rt| rt.type_ref()) {\n+        let ret_type = if let Some(type_ref) = src.value.ret_type().and_then(|rt| rt.type_ref()) {\n             TypeRef::from_ast(type_ref)\n         } else {\n             TypeRef::unit()\n@@ -801,15 +801,15 @@ impl ConstData {\n         db: &(impl DefDatabase + AstDatabase),\n         konst: Const,\n     ) -> Arc<ConstData> {\n-        let node = konst.source(db).ast;\n+        let node = konst.source(db).value;\n         const_data_for(&node)\n     }\n \n     pub(crate) fn static_data_query(\n         db: &(impl DefDatabase + AstDatabase),\n         konst: Static,\n     ) -> Arc<ConstData> {\n-        let node = konst.source(db).ast;\n+        let node = konst.source(db).value;\n         const_data_for(&node)\n     }\n }"}, {"sha": "9e304217c53d36082843e87401e6ffc7fc1f87c4", "filename": "crates/ra_hir/src/code_model/attrs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -49,9 +49,9 @@ pub(crate) fn attributes_query(\n         AttrDef::Module(it) => {\n             let src = it.declaration_source(db)?;\n             let hygiene = Hygiene::new(db, src.file_id);\n-            Attr::from_attrs_owner(&src.ast, &hygiene)\n+            Attr::from_attrs_owner(&src.value, &hygiene)\n         }\n-        AttrDef::StructField(it) => match it.source(db).ast {\n+        AttrDef::StructField(it) => match it.source(db).value {\n             FieldSource::Named(named) => {\n                 let src = it.source(db);\n                 let hygiene = Hygiene::new(db, src.file_id);\n@@ -82,7 +82,7 @@ where\n {\n     let src = node.source(db);\n     let hygiene = Hygiene::new(db, src.file_id);\n-    Attr::from_attrs_owner(&src.ast, &hygiene)\n+    Attr::from_attrs_owner(&src.value, &hygiene)\n }\n \n impl<T: Into<AttrDef> + Copy> Attrs for T {"}, {"sha": "e40efef34aeb55fef5bd03fc82b3e77a0251068c", "filename": "crates/ra_hir/src/code_model/docs.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -70,23 +70,23 @@ pub(crate) fn documentation_query(\n     def: DocDef,\n ) -> Option<Documentation> {\n     match def {\n-        DocDef::Module(it) => docs_from_ast(&it.declaration_source(db)?.ast),\n-        DocDef::StructField(it) => match it.source(db).ast {\n+        DocDef::Module(it) => docs_from_ast(&it.declaration_source(db)?.value),\n+        DocDef::StructField(it) => match it.source(db).value {\n             FieldSource::Named(named) => docs_from_ast(&named),\n             FieldSource::Pos(..) => None,\n         },\n         DocDef::Adt(it) => match it {\n-            Adt::Struct(it) => docs_from_ast(&it.source(db).ast),\n-            Adt::Enum(it) => docs_from_ast(&it.source(db).ast),\n-            Adt::Union(it) => docs_from_ast(&it.source(db).ast),\n+            Adt::Struct(it) => docs_from_ast(&it.source(db).value),\n+            Adt::Enum(it) => docs_from_ast(&it.source(db).value),\n+            Adt::Union(it) => docs_from_ast(&it.source(db).value),\n         },\n-        DocDef::EnumVariant(it) => docs_from_ast(&it.source(db).ast),\n-        DocDef::Static(it) => docs_from_ast(&it.source(db).ast),\n-        DocDef::Const(it) => docs_from_ast(&it.source(db).ast),\n-        DocDef::Function(it) => docs_from_ast(&it.source(db).ast),\n-        DocDef::Trait(it) => docs_from_ast(&it.source(db).ast),\n-        DocDef::TypeAlias(it) => docs_from_ast(&it.source(db).ast),\n-        DocDef::MacroDef(it) => docs_from_ast(&it.source(db).ast),\n+        DocDef::EnumVariant(it) => docs_from_ast(&it.source(db).value),\n+        DocDef::Static(it) => docs_from_ast(&it.source(db).value),\n+        DocDef::Const(it) => docs_from_ast(&it.source(db).value),\n+        DocDef::Function(it) => docs_from_ast(&it.source(db).value),\n+        DocDef::Trait(it) => docs_from_ast(&it.source(db).value),\n+        DocDef::TypeAlias(it) => docs_from_ast(&it.source(db).value),\n+        DocDef::MacroDef(it) => docs_from_ast(&it.source(db).value),\n     }\n }\n "}, {"sha": "556417b0f229eb695446305658388428fdfcce9f", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -25,9 +25,9 @@ impl Module {\n         let def_map = db.crate_def_map(self.id.krate);\n         let decl_id = def_map[self.id.module_id].declaration;\n         let file_id = def_map[self.id.module_id].definition;\n-        let ast = ModuleSource::new(db, file_id, decl_id);\n+        let value = ModuleSource::new(db, file_id, decl_id);\n         let file_id = file_id.map(HirFileId::from).unwrap_or_else(|| decl_id.unwrap().file_id());\n-        Source { file_id, ast }\n+        Source { file_id, value }\n     }\n \n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`.\n@@ -38,8 +38,8 @@ impl Module {\n     ) -> Option<Source<ast::Module>> {\n         let def_map = db.crate_def_map(self.id.krate);\n         let decl = def_map[self.id.module_id].declaration?;\n-        let ast = decl.to_node(db);\n-        Some(Source { file_id: decl.file_id(), ast })\n+        let value = decl.to_node(db);\n+        Some(Source { file_id: decl.file_id(), value })\n     }\n }\n \n@@ -53,11 +53,11 @@ impl HasSource for StructField {\n         let (file_id, struct_kind) = match self.parent {\n             VariantDef::Struct(s) => {\n                 ss = s.source(db);\n-                (ss.file_id, ss.ast.kind())\n+                (ss.file_id, ss.value.kind())\n             }\n             VariantDef::EnumVariant(e) => {\n                 es = e.source(db);\n-                (es.file_id, es.ast.kind())\n+                (es.file_id, es.value.kind())\n             }\n         };\n \n@@ -66,13 +66,13 @@ impl HasSource for StructField {\n             ast::StructKind::Named(fl) => fl.fields().map(|it| FieldSource::Named(it)).collect(),\n             ast::StructKind::Unit => Vec::new(),\n         };\n-        let ast = field_sources\n+        let value = field_sources\n             .into_iter()\n             .zip(fields.iter())\n             .find(|(_syntax, (id, _))| *id == self.id)\n             .unwrap()\n             .0;\n-        Source { file_id, ast }\n+        Source { file_id, value }\n     }\n }\n impl HasSource for Struct {\n@@ -98,16 +98,16 @@ impl HasSource for EnumVariant {\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::EnumVariant> {\n         let enum_data = db.enum_data(self.parent.id);\n         let src = self.parent.id.source(db);\n-        let ast = src\n-            .ast\n+        let value = src\n+            .value\n             .variant_list()\n             .into_iter()\n             .flat_map(|it| it.variants())\n             .zip(enum_data.variants.iter())\n             .find(|(_syntax, (id, _))| *id == self.id)\n             .unwrap()\n             .0;\n-        Source { file_id: src.file_id, ast }\n+        Source { file_id: src.file_id, value }\n     }\n }\n impl HasSource for Function {\n@@ -143,7 +143,7 @@ impl HasSource for TypeAlias {\n impl HasSource for MacroDef {\n     type Ast = ast::MacroCall;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::MacroCall> {\n-        Source { file_id: self.id.ast_id.file_id(), ast: self.id.ast_id.to_node(db) }\n+        Source { file_id: self.id.ast_id.file_id(), value: self.id.ast_id.to_node(db) }\n     }\n }\n "}, {"sha": "7d1b648589efba85ce73c886a9af3af137756baa", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -21,7 +21,7 @@ impl Diagnostic for NoSuchField {\n     }\n \n     fn source(&self) -> Source<SyntaxNodePtr> {\n-        Source { file_id: self.file, ast: self.field.into() }\n+        Source { file_id: self.file, value: self.field.into() }\n     }\n \n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -41,7 +41,7 @@ impl Diagnostic for MissingFields {\n         \"fill structure fields\".to_string()\n     }\n     fn source(&self) -> Source<SyntaxNodePtr> {\n-        Source { file_id: self.file, ast: self.field_list.into() }\n+        Source { file_id: self.file, value: self.field_list.into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n@@ -53,7 +53,7 @@ impl AstDiagnostic for MissingFields {\n \n     fn ast(&self, db: &impl AstDatabase) -> Self::AST {\n         let root = db.parse_or_expand(self.source().file_id).unwrap();\n-        let node = self.source().ast.to_node(&root);\n+        let node = self.source().value.to_node(&root);\n         ast::RecordFieldList::cast(node).unwrap()\n     }\n }\n@@ -69,7 +69,7 @@ impl Diagnostic for MissingOkInTailExpr {\n         \"wrap return expression in Ok\".to_string()\n     }\n     fn source(&self) -> Source<SyntaxNodePtr> {\n-        Source { file_id: self.file, ast: self.expr.into() }\n+        Source { file_id: self.file, value: self.expr.into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n@@ -81,7 +81,7 @@ impl AstDiagnostic for MissingOkInTailExpr {\n \n     fn ast(&self, db: &impl AstDatabase) -> Self::AST {\n         let root = db.parse_or_expand(self.file).unwrap();\n-        let node = self.source().ast.to_node(&root);\n+        let node = self.source().value.to_node(&root);\n         ast::Expr::cast(node).unwrap()\n     }\n }"}, {"sha": "8bfdda45e12604f101a96a6d81c00bec63911ac4", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -116,7 +116,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         let source_map = self.func.body_source_map(db);\n \n         if let Some(source_ptr) = source_map.expr_syntax(id) {\n-            if let Some(expr) = source_ptr.ast.a() {\n+            if let Some(expr) = source_ptr.value.a() {\n                 let root = source_ptr.file_syntax(db);\n                 if let ast::Expr::RecordLit(record_lit) = expr.to_node(&root) {\n                     if let Some(field_list) = record_lit.record_field_list() {\n@@ -161,7 +161,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             let source_map = self.func.body_source_map(db);\n \n             if let Some(source_ptr) = source_map.expr_syntax(id) {\n-                if let Some(expr) = source_ptr.ast.a() {\n+                if let Some(expr) = source_ptr.value.a() {\n                     self.sink.push(MissingOkInTailExpr { file: source_ptr.file_id, expr });\n                 }\n             }"}, {"sha": "f4dca25cb6f3d90148a000357eeb0df67d033261", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -87,7 +87,7 @@ impl FromSource for MacroDef {\n         let module = Module::from_definition(db, Source::new(src.file_id, module_src))?;\n         let krate = module.krate().crate_id();\n \n-        let ast_id = AstId::new(src.file_id, db.ast_id_map(src.file_id).ast_id(&src.ast));\n+        let ast_id = AstId::new(src.file_id, db.ast_id_map(src.file_id).ast_id(&src.value));\n \n         let id: MacroDefId = MacroDefId { krate, ast_id, kind };\n         Some(MacroDef { id })\n@@ -105,8 +105,8 @@ impl FromSource for ImplBlock {\n impl FromSource for EnumVariant {\n     type Ast = ast::EnumVariant;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n-        let parent_enum = src.ast.parent_enum();\n-        let src_enum = Source { file_id: src.file_id, ast: parent_enum };\n+        let parent_enum = src.value.parent_enum();\n+        let src_enum = Source { file_id: src.file_id, value: parent_enum };\n         let variants = Enum::from_source(db, src_enum)?.variants(db);\n         variants.into_iter().find(|v| v.source(db) == src)\n     }\n@@ -115,16 +115,16 @@ impl FromSource for EnumVariant {\n impl FromSource for StructField {\n     type Ast = FieldSource;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n-        let variant_def: VariantDef = match src.ast {\n+        let variant_def: VariantDef = match src.value {\n             FieldSource::Named(ref field) => {\n-                let ast = field.syntax().ancestors().find_map(ast::StructDef::cast)?;\n-                let src = Source { file_id: src.file_id, ast };\n+                let value = field.syntax().ancestors().find_map(ast::StructDef::cast)?;\n+                let src = Source { file_id: src.file_id, value };\n                 let def = Struct::from_source(db, src)?;\n                 VariantDef::from(def)\n             }\n             FieldSource::Pos(ref field) => {\n-                let ast = field.syntax().ancestors().find_map(ast::EnumVariant::cast)?;\n-                let src = Source { file_id: src.file_id, ast };\n+                let value = field.syntax().ancestors().find_map(ast::EnumVariant::cast)?;\n+                let src = Source { file_id: src.file_id, value };\n                 let def = EnumVariant::from_source(db, src)?;\n                 VariantDef::from(def)\n             }\n@@ -142,12 +142,12 @@ impl FromSource for StructField {\n impl Local {\n     pub fn from_source(db: &impl HirDatabase, src: Source<ast::BindPat>) -> Option<Self> {\n         let file_id = src.file_id;\n-        let parent: DefWithBody = src.ast.syntax().ancestors().find_map(|it| {\n+        let parent: DefWithBody = src.value.syntax().ancestors().find_map(|it| {\n             let res = match_ast! {\n                 match it {\n-                    ast::ConstDef(ast) => { Const::from_source(db, Source { ast, file_id})?.into() },\n-                    ast::StaticDef(ast) => { Static::from_source(db, Source { ast, file_id})?.into() },\n-                    ast::FnDef(ast) => { Function::from_source(db, Source { ast, file_id})?.into() },\n+                    ast::ConstDef(value) => { Const::from_source(db, Source { value, file_id})?.into() },\n+                    ast::StaticDef(value) => { Static::from_source(db, Source { value, file_id})?.into() },\n+                    ast::FnDef(value) => { Function::from_source(db, Source { value, file_id})?.into() },\n                     _ => return None,\n                 }\n             };\n@@ -162,33 +162,33 @@ impl Local {\n \n impl Module {\n     pub fn from_declaration(db: &impl DefDatabase, src: Source<ast::Module>) -> Option<Self> {\n-        let parent_declaration = src.ast.syntax().ancestors().skip(1).find_map(ast::Module::cast);\n+        let parent_declaration = src.value.syntax().ancestors().skip(1).find_map(ast::Module::cast);\n \n         let parent_module = match parent_declaration {\n             Some(parent_declaration) => {\n-                let src_parent = Source { file_id: src.file_id, ast: parent_declaration };\n+                let src_parent = Source { file_id: src.file_id, value: parent_declaration };\n                 Module::from_declaration(db, src_parent)\n             }\n             _ => {\n                 let src_parent = Source {\n                     file_id: src.file_id,\n-                    ast: ModuleSource::new(db, Some(src.file_id.original_file(db)), None),\n+                    value: ModuleSource::new(db, Some(src.file_id.original_file(db)), None),\n                 };\n                 Module::from_definition(db, src_parent)\n             }\n         }?;\n \n-        let child_name = src.ast.name()?;\n+        let child_name = src.value.name()?;\n         parent_module.child(db, &child_name.as_name())\n     }\n \n     pub fn from_definition(db: &impl DefDatabase, src: Source<ModuleSource>) -> Option<Self> {\n-        match src.ast {\n+        match src.value {\n             ModuleSource::Module(ref module) => {\n                 assert!(!module.has_semi());\n                 return Module::from_declaration(\n                     db,\n-                    Source { file_id: src.file_id, ast: module.clone() },\n+                    Source { file_id: src.file_id, value: module.clone() },\n                 );\n             }\n             ModuleSource::SourceFile(_) => (),\n@@ -214,5 +214,5 @@ where\n     let module_src = ModuleSource::from_child_node(db, src.as_ref().map(|it| it.syntax()));\n     let module = Module::from_definition(db, Source::new(src.file_id, module_src))?;\n     let ctx = LocationCtx::new(db, module.id, src.file_id);\n-    Some(DEF::from_ast(ctx, &src.ast))\n+    Some(DEF::from_ast(ctx, &src.value))\n }"}, {"sha": "8925ba3a9fc94a200fc732ac5c67ec1a2bb7828a", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -91,28 +91,28 @@ impl GenericParams {\n         let start = generics.parent_params.as_ref().map(|p| p.params.len()).unwrap_or(0) as u32;\n         // FIXME: add `: Sized` bound for everything except for `Self` in traits\n         match def {\n-            GenericDef::Function(it) => generics.fill(&it.source(db).ast, start),\n-            GenericDef::Adt(Adt::Struct(it)) => generics.fill(&it.source(db).ast, start),\n-            GenericDef::Adt(Adt::Union(it)) => generics.fill(&it.source(db).ast, start),\n-            GenericDef::Adt(Adt::Enum(it)) => generics.fill(&it.source(db).ast, start),\n+            GenericDef::Function(it) => generics.fill(&it.source(db).value, start),\n+            GenericDef::Adt(Adt::Struct(it)) => generics.fill(&it.source(db).value, start),\n+            GenericDef::Adt(Adt::Union(it)) => generics.fill(&it.source(db).value, start),\n+            GenericDef::Adt(Adt::Enum(it)) => generics.fill(&it.source(db).value, start),\n             GenericDef::Trait(it) => {\n                 // traits get the Self type as an implicit first type parameter\n                 generics.params.push(GenericParam {\n                     idx: start,\n                     name: name::SELF_TYPE,\n                     default: None,\n                 });\n-                generics.fill(&it.source(db).ast, start + 1);\n+                generics.fill(&it.source(db).value, start + 1);\n                 // add super traits as bounds on Self\n                 // i.e., trait Foo: Bar is equivalent to trait Foo where Self: Bar\n                 let self_param = TypeRef::Path(name::SELF_TYPE.into());\n-                generics.fill_bounds(&it.source(db).ast, self_param);\n+                generics.fill_bounds(&it.source(db).value, self_param);\n             }\n-            GenericDef::TypeAlias(it) => generics.fill(&it.source(db).ast, start),\n+            GenericDef::TypeAlias(it) => generics.fill(&it.source(db).value, start),\n             // Note that we don't add `Self` here: in `impl`s, `Self` is not a\n             // type-parameter, but rather is a type-alias for impl's target\n             // type, so this is handled by the resolver.\n-            GenericDef::ImplBlock(it) => generics.fill(&it.source(db).ast, start),\n+            GenericDef::ImplBlock(it) => generics.fill(&it.source(db).value, start),\n             GenericDef::EnumVariant(_) | GenericDef::Const(_) => {}\n         }\n "}, {"sha": "89fd85f59f959d0931a1f82c0d402de65a5e66eb", "filename": "crates/ra_hir/src/lang_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -97,7 +97,7 @@ impl LangItems {\n         // Look for impl targets\n         for impl_block in module.impl_blocks(db) {\n             let src = impl_block.source(db);\n-            if let Some(lang_item_name) = lang_item_name(&src.ast) {\n+            if let Some(lang_item_name) = lang_item_name(&src.value) {\n                 self.items\n                     .entry(lang_item_name)\n                     .or_insert_with(|| LangItemTarget::ImplBlock(impl_block));\n@@ -144,7 +144,7 @@ impl LangItems {\n         T: Copy + HasSource<Ast = N>,\n         N: AttrsOwner,\n     {\n-        let node = item.source(db).ast;\n+        let node = item.source(db).value;\n         if let Some(lang_item_name) = lang_item_name(&node) {\n             self.items.entry(lang_item_name).or_insert_with(|| constructor(item));\n         }"}, {"sha": "471b0b08914b31fccc51c90025bf949227cf8cd0", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -31,7 +31,7 @@ use crate::{\n \n fn try_get_resolver_for_node(db: &impl HirDatabase, node: Source<&SyntaxNode>) -> Option<Resolver> {\n     match_ast! {\n-        match (node.ast) {\n+        match (node.value) {\n             ast::Module(it) => {\n                 let src = node.with_ast(it);\n                 Some(crate::Module::from_declaration(db, src)?.resolver(db))\n@@ -48,7 +48,7 @@ fn try_get_resolver_for_node(db: &impl HirDatabase, node: Source<&SyntaxNode>) -\n                 let src = node.with_ast(it);\n                 Some(Enum::from_source(db, src)?.resolver(db))\n             },\n-            _ => match node.ast.kind() {\n+            _ => match node.value.kind() {\n                 FN_DEF | CONST_DEF | STATIC_DEF => {\n                     Some(def_with_body_from_child_node(db, node)?.resolver(db))\n                 }\n@@ -67,7 +67,7 @@ fn def_with_body_from_child_node(\n     let module = Module::from_definition(db, Source::new(child.file_id, module_source))?;\n     let ctx = LocationCtx::new(db, module.id, child.file_id);\n \n-    child.ast.ancestors().find_map(|node| {\n+    child.value.ancestors().find_map(|node| {\n         match_ast! {\n             match node {\n                 ast::FnDef(def)  => { Some(Function {id: ctx.to_def(&def) }.into()) },\n@@ -171,7 +171,7 @@ impl SourceAnalyzer {\n         } else {\n             SourceAnalyzer {\n                 resolver: node\n-                    .ast\n+                    .value\n                     .ancestors()\n                     .find_map(|it| try_get_resolver_for_node(db, node.with_ast(&it)))\n                     .unwrap_or_default(),\n@@ -185,12 +185,12 @@ impl SourceAnalyzer {\n     }\n \n     fn expr_id(&self, expr: &ast::Expr) -> Option<ExprId> {\n-        let src = Source { file_id: self.file_id, ast: expr };\n+        let src = Source { file_id: self.file_id, value: expr };\n         self.body_source_map.as_ref()?.node_expr(src)\n     }\n \n     fn pat_id(&self, pat: &ast::Pat) -> Option<PatId> {\n-        let src = Source { file_id: self.file_id, ast: pat };\n+        let src = Source { file_id: self.file_id, value: pat };\n         self.body_source_map.as_ref()?.node_pat(src)\n     }\n \n@@ -302,7 +302,7 @@ impl SourceAnalyzer {\n         let entry = scopes.resolve_name_in_scope(scope, &name)?;\n         Some(ScopeEntryWithSyntax {\n             name: entry.name().clone(),\n-            ptr: source_map.pat_syntax(entry.pat())?.ast,\n+            ptr: source_map.pat_syntax(entry.pat())?.value,\n         })\n     }\n \n@@ -428,7 +428,7 @@ fn scope_for(\n     source_map: &BodySourceMap,\n     node: Source<&SyntaxNode>,\n ) -> Option<ScopeId> {\n-    node.ast\n+    node.value\n         .ancestors()\n         .filter_map(ast::Expr::cast)\n         .filter_map(|it| source_map.node_expr(Source::new(node.file_id, &it)))\n@@ -450,18 +450,18 @@ fn scope_for_offset(\n                 return None;\n             }\n             let syntax_node_ptr =\n-                source.ast.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr());\n+                source.value.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr());\n             Some((syntax_node_ptr, scope))\n         })\n         // find containing scope\n         .min_by_key(|(ptr, _scope)| {\n             (\n-                !(ptr.range().start() <= offset.ast && offset.ast <= ptr.range().end()),\n+                !(ptr.range().start() <= offset.value && offset.value <= ptr.range().end()),\n                 ptr.range().len(),\n             )\n         })\n         .map(|(ptr, scope)| {\n-            adjust(scopes, source_map, ptr, offset.file_id, offset.ast).unwrap_or(*scope)\n+            adjust(scopes, source_map, ptr, offset.file_id, offset.value).unwrap_or(*scope)\n         })\n }\n \n@@ -485,7 +485,7 @@ fn adjust(\n                 return None;\n             }\n             let syntax_node_ptr =\n-                source.ast.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr());\n+                source.value.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr());\n             Some((syntax_node_ptr, scope))\n         })\n         .map(|(ptr, scope)| (ptr.range(), scope))"}, {"sha": "858972c6fea94ef250239a607a06feb707b1334e", "filename": "crates/ra_hir/src/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftraits.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -26,11 +26,11 @@ impl TraitData {\n         tr: Trait,\n     ) -> Arc<TraitData> {\n         let src = tr.source(db);\n-        let name = src.ast.name().map(|n| n.as_name());\n+        let name = src.value.name().map(|n| n.as_name());\n         let module = tr.module(db);\n         let ctx = LocationCtx::new(db, module.id, src.file_id);\n-        let auto = src.ast.is_auto();\n-        let items = if let Some(item_list) = src.ast.item_list() {\n+        let auto = src.value.is_auto();\n+        let items = if let Some(item_list) = src.value.item_list() {\n             item_list\n                 .impl_items()\n                 .map(|item_node| match item_node {"}, {"sha": "c1024d03c77561be9696f0aa8e309db6b13f6563", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -4694,14 +4694,16 @@ fn infer(content: &str) -> String {\n         }\n \n         // sort ranges for consistency\n-        types.sort_by_key(|(src_ptr, _)| (src_ptr.ast.range().start(), src_ptr.ast.range().end()));\n+        types.sort_by_key(|(src_ptr, _)| {\n+            (src_ptr.value.range().start(), src_ptr.value.range().end())\n+        });\n         for (src_ptr, ty) in &types {\n-            let node = src_ptr.ast.to_node(&src_ptr.file_syntax(&db));\n+            let node = src_ptr.value.to_node(&src_ptr.file_syntax(&db));\n \n             let (range, text) = if let Some(self_param) = ast::SelfParam::cast(node.clone()) {\n                 (self_param.self_kw_token().text_range(), \"self\".to_string())\n             } else {\n-                (src_ptr.ast.range(), node.text().to_string().replace(\"\\n\", \" \"))\n+                (src_ptr.value.range(), node.text().to_string().replace(\"\\n\", \" \"))\n             };\n             let macro_prefix = if src_ptr.file_id != file_id.into() { \"!\" } else { \"\" };\n             write!("}, {"sha": "392f244cf17d872cc4bddff3e44c666cd4230afd", "filename": "crates/ra_hir/src/type_alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -23,7 +23,7 @@ impl TypeAliasData {\n         db: &(impl DefDatabase + AstDatabase),\n         typ: TypeAlias,\n     ) -> Arc<TypeAliasData> {\n-        let node = typ.source(db).ast;\n+        let node = typ.source(db).value;\n         let name = node.name().map_or_else(Name::missing, |n| n.as_name());\n         let type_ref = node.type_ref().map(TypeRef::from_ast);\n         Arc::new(TypeAliasData { name, type_ref })"}, {"sha": "d04f54e15a4ad67163fb3032d5c32e4f44060018", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -54,8 +54,8 @@ impl StructData {\n         id: StructOrUnionId,\n     ) -> Arc<StructData> {\n         let src = id.source(db);\n-        let name = src.ast.name().map(|n| n.as_name());\n-        let variant_data = VariantData::new(src.ast.kind());\n+        let name = src.value.name().map(|n| n.as_name());\n+        let variant_data = VariantData::new(src.value.kind());\n         let variant_data = Arc::new(variant_data);\n         Arc::new(StructData { name, variant_data })\n     }\n@@ -64,9 +64,9 @@ impl StructData {\n impl EnumData {\n     pub(crate) fn enum_data_query(db: &impl DefDatabase2, e: EnumId) -> Arc<EnumData> {\n         let src = e.source(db);\n-        let name = src.ast.name().map(|n| n.as_name());\n+        let name = src.value.name().map(|n| n.as_name());\n         let variants = src\n-            .ast\n+            .value\n             .variant_list()\n             .into_iter()\n             .flat_map(|it| it.variants())"}, {"sha": "3804b65c7ec0ae11ab76671cc654425ed9a9f08a", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -73,8 +73,8 @@ impl Expander {\n         std::mem::forget(mark);\n     }\n \n-    fn to_source<T>(&self, ast: T) -> Source<T> {\n-        Source { file_id: self.current_file_id, ast }\n+    fn to_source<T>(&self, value: T) -> Source<T> {\n+        Source { file_id: self.current_file_id, value }\n     }\n \n     fn parse_path(&mut self, path: ast::Path) -> Option<Path> {\n@@ -150,16 +150,16 @@ impl Body {\n         let (file_id, module, body) = match def {\n             DefWithBodyId::FunctionId(f) => {\n                 let src = f.source(db);\n-                params = src.ast.param_list();\n-                (src.file_id, f.module(db), src.ast.body().map(ast::Expr::from))\n+                params = src.value.param_list();\n+                (src.file_id, f.module(db), src.value.body().map(ast::Expr::from))\n             }\n             DefWithBodyId::ConstId(c) => {\n                 let src = c.source(db);\n-                (src.file_id, c.module(db), src.ast.body())\n+                (src.file_id, c.module(db), src.value.body())\n             }\n             DefWithBodyId::StaticId(s) => {\n                 let src = s.source(db);\n-                (src.file_id, s.module(db), src.ast.body())\n+                (src.file_id, s.module(db), src.value.body())\n             }\n         };\n         let expander = Expander::new(db, file_id, module);"}, {"sha": "aeb71ff229ff9aa7a85a46f06aac6143e623c024", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -210,8 +210,9 @@ mod tests {\n         let scopes = db.expr_scopes(function.into());\n         let (_body, source_map) = db.body_with_source_map(function.into());\n \n-        let expr_id =\n-            source_map.node_expr(Source { file_id: file_id.into(), ast: &marker.into() }).unwrap();\n+        let expr_id = source_map\n+            .node_expr(Source { file_id: file_id.into(), value: &marker.into() })\n+            .unwrap();\n         let scope = scopes.scope_for(expr_id);\n \n         let actual = scopes\n@@ -317,14 +318,14 @@ mod tests {\n         let expr_scope = {\n             let expr_ast = name_ref.syntax().ancestors().find_map(ast::Expr::cast).unwrap();\n             let expr_id =\n-                source_map.node_expr(Source { file_id: file_id.into(), ast: &expr_ast }).unwrap();\n+                source_map.node_expr(Source { file_id: file_id.into(), value: &expr_ast }).unwrap();\n             scopes.scope_for(expr_id).unwrap()\n         };\n \n         let resolved = scopes.resolve_name_in_scope(expr_scope, &name_ref.as_name()).unwrap();\n         let pat_src = source_map.pat_syntax(resolved.pat()).unwrap();\n \n-        let local_name = pat_src.ast.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr());\n+        let local_name = pat_src.value.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr());\n         assert_eq!(local_name.range(), expected_name.syntax().text_range());\n     }\n "}, {"sha": "eda9b2269a45a4b83a51dcba8e13edc25a7645ad", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -20,7 +20,7 @@ impl Diagnostic for UnresolvedModule {\n         \"unresolved module\".to_string()\n     }\n     fn source(&self) -> Source<SyntaxNodePtr> {\n-        Source { file_id: self.file, ast: self.decl.into() }\n+        Source { file_id: self.file, value: self.decl.into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self"}, {"sha": "4323dfcb69025719320fea284442844877e78633", "filename": "crates/ra_hir_def/src/imp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_def%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_def%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fimp.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -25,11 +25,11 @@ impl ImplData {\n         let src = id.source(db);\n         let items = db.ast_id_map(src.file_id);\n \n-        let target_trait = src.ast.target_trait().map(TypeRef::from_ast);\n-        let target_type = TypeRef::from_ast_opt(src.ast.target_type());\n-        let negative = src.ast.is_negative();\n+        let target_trait = src.value.target_trait().map(TypeRef::from_ast);\n+        let target_type = TypeRef::from_ast_opt(src.value.target_type());\n+        let negative = src.value.is_negative();\n \n-        let items = if let Some(item_list) = src.ast.item_list() {\n+        let items = if let Some(item_list) = src.value.item_list() {\n             let ctx = LocationCtx::new(db, id.module(db), src.file_id);\n             item_list\n                 .impl_items()"}, {"sha": "50caf4f836d4f1c86344f127e6b624fddb44d16b", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -80,7 +80,7 @@ impl ModuleSource {\n \n     pub fn from_child_node(db: &impl db::DefDatabase2, child: Source<&SyntaxNode>) -> ModuleSource {\n         if let Some(m) =\n-            child.ast.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi())\n+            child.value.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi())\n         {\n             ModuleSource::Module(m)\n         } else {\n@@ -184,8 +184,8 @@ pub trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n     }\n     fn source(self, db: &(impl AstDatabase + InternDatabase)) -> Source<N> {\n         let loc = self.lookup_intern(db);\n-        let ast = loc.ast_id.to_node(db);\n-        Source { file_id: loc.ast_id.file_id(), ast }\n+        let value = loc.ast_id.to_node(db);\n+        Source { file_id: loc.ast_id.file_id(), value }\n     }\n     fn module(self, db: &impl InternDatabase) -> ModuleId {\n         let loc = self.lookup_intern(db);"}, {"sha": "7c68fd63803dd79ade2ac14d12427c3d25087a4b", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -327,7 +327,7 @@ impl RawItemsCollector {\n \n         let mut buf = Vec::new();\n         Path::expand_use_item(\n-            Source { ast: use_item, file_id: self.file_id },\n+            Source { value: use_item, file_id: self.file_id },\n             &self.hygiene,\n             |path, use_tree, is_glob, alias| {\n                 let import_data = ImportData {"}, {"sha": "626ebffdc8989f4339a299ff3c3c230cf64bbf59", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -71,7 +71,7 @@ impl Path {\n         hygiene: &Hygiene,\n         mut cb: impl FnMut(Path, &ast::UseTree, bool, Option<Name>),\n     ) {\n-        if let Some(tree) = item_src.ast.use_tree() {\n+        if let Some(tree) = item_src.value.use_tree() {\n             expand_use_tree(None, tree, hygiene, &mut cb);\n         }\n     }"}, {"sha": "3d37e933583fa5188c82c966bad3875cb30a9f47", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -24,7 +24,7 @@ pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn message(&self) -> String;\n     fn source(&self) -> Source<SyntaxNodePtr>;\n     fn highlight_range(&self) -> TextRange {\n-        self.source().ast.range()\n+        self.source().value.range()\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static);\n }\n@@ -37,7 +37,7 @@ pub trait AstDiagnostic {\n impl dyn Diagnostic {\n     pub fn syntax_node(&self, db: &impl AstDatabase) -> SyntaxNode {\n         let node = db.parse_or_expand(self.source().file_id).unwrap();\n-        self.source().ast.to_node(&node)\n+        self.source().value.to_node(&node)\n     }\n \n     pub fn downcast_ref<D: Diagnostic>(&self) -> Option<&D> {"}, {"sha": "6ca4bc7a3913c929739230908ad7709739ba2b34", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -166,19 +166,19 @@ impl ExpansionInfo {\n     pub fn map_token_down(&self, token: Source<&SyntaxToken>) -> Option<Source<SyntaxToken>> {\n         assert_eq!(token.file_id, self.arg.file_id);\n         let range =\n-            token.ast.text_range().checked_sub(self.arg.ast.syntax().text_range().start())?;\n+            token.value.text_range().checked_sub(self.arg.value.syntax().text_range().start())?;\n         let token_id = self.macro_arg.1.token_by_range(range)?;\n         let token_id = self.macro_def.0.map_id_down(token_id);\n \n         let range = self.exp_map.range_by_token(token_id)?;\n \n-        let token = algo::find_covering_element(&self.expanded.ast, range).into_token()?;\n+        let token = algo::find_covering_element(&self.expanded.value, range).into_token()?;\n \n         Some(self.expanded.with_ast(token))\n     }\n \n     pub fn map_token_up(&self, token: Source<&SyntaxToken>) -> Option<Source<SyntaxToken>> {\n-        let token_id = self.exp_map.token_by_range(token.ast.text_range())?;\n+        let token_id = self.exp_map.token_by_range(token.value.text_range())?;\n \n         let (token_id, origin) = self.macro_def.0.map_id_up(token_id);\n         let (token_map, tt) = match origin {\n@@ -188,8 +188,8 @@ impl ExpansionInfo {\n \n         let range = token_map.range_by_token(token_id)?;\n         let token = algo::find_covering_element(\n-            tt.ast.syntax(),\n-            range + tt.ast.syntax().text_range().start(),\n+            tt.value.syntax(),\n+            range + tt.value.syntax().text_range().start(),\n         )\n         .into_token()?;\n         Some(tt.with_ast(token))\n@@ -240,30 +240,34 @@ impl<N: AstNode> AstId<N> {\n     }\n }\n \n-/// FIXME: https://github.com/matklad/with ?\n+/// `Source<T>` stores a value of `T` inside a particular file/syntax tree.\n+///\n+/// Typical usages are:\n+///\n+/// * `Source<SyntaxNode>` -- syntax node in a file\n+/// * `Source<ast::FnDef>` -- ast node in a file\n+/// * `Source<TextUnit>` -- offset in a file\n #[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]\n pub struct Source<T> {\n     pub file_id: HirFileId,\n-    // FIXME: this stores all kind of things, not only `ast`.\n-    // There should be a better name...\n-    pub ast: T,\n+    pub value: T,\n }\n \n impl<T> Source<T> {\n-    pub fn new(file_id: HirFileId, ast: T) -> Source<T> {\n-        Source { file_id, ast }\n+    pub fn new(file_id: HirFileId, value: T) -> Source<T> {\n+        Source { file_id, value }\n     }\n \n     // Similarly, naming here is stupid...\n-    pub fn with_ast<U>(&self, ast: U) -> Source<U> {\n-        Source::new(self.file_id, ast)\n+    pub fn with_ast<U>(&self, value: U) -> Source<U> {\n+        Source::new(self.file_id, value)\n     }\n \n     pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n-        Source::new(self.file_id, f(self.ast))\n+        Source::new(self.file_id, f(self.value))\n     }\n     pub fn as_ref(&self) -> Source<&T> {\n-        self.with_ast(&self.ast)\n+        self.with_ast(&self.value)\n     }\n     pub fn file_syntax(&self, db: &impl db::AstDatabase) -> SyntaxNode {\n         db.parse_or_expand(self.file_id).expect(\"source created from invalid file\")"}, {"sha": "b8345c91d521b7d45cbbacf96fcd6caae4b37b88", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -54,7 +54,7 @@ impl<'a> CompletionContext<'a> {\n         let src = hir::ModuleSource::from_position(db, position);\n         let module = hir::Module::from_definition(\n             db,\n-            hir::Source { file_id: position.file_id.into(), ast: src },\n+            hir::Source { file_id: position.file_id.into(), value: src },\n         );\n         let token =\n             original_parse.tree().syntax().token_at_offset(position.offset).left_biased()?;"}, {"sha": "b20329459c8f36cd2c0af8ffebf7275e5c8e5541", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -169,7 +169,7 @@ impl Completions {\n             None => return,\n         };\n \n-        let ast_node = macro_.source(ctx.db).ast;\n+        let ast_node = macro_.source(ctx.db).value;\n         let detail = macro_label(&ast_node);\n \n         let docs = macro_.docs(ctx.db);\n@@ -201,7 +201,7 @@ impl Completions {\n     ) {\n         let data = func.data(ctx.db);\n         let name = name.unwrap_or_else(|| data.name().to_string());\n-        let ast_node = func.source(ctx.db).ast;\n+        let ast_node = func.source(ctx.db).value;\n         let detail = function_label(&ast_node);\n \n         let mut builder =\n@@ -234,7 +234,7 @@ impl Completions {\n     }\n \n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n-        let ast_node = constant.source(ctx.db).ast;\n+        let ast_node = constant.source(ctx.db).value;\n         let name = match ast_node.name() {\n             Some(name) => name,\n             _ => return,\n@@ -250,7 +250,7 @@ impl Completions {\n     }\n \n     pub(crate) fn add_type_alias(&mut self, ctx: &CompletionContext, type_alias: hir::TypeAlias) {\n-        let type_def = type_alias.source(ctx.db).ast;\n+        let type_def = type_alias.source(ctx.db).value;\n         let name = match type_def.name() {\n             Some(name) => name,\n             _ => return,"}, {"sha": "cc1ccab4b5fa39325f02117ef83130eee3783f63", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -96,7 +96,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n     });\n     let source_file = db.parse(file_id).tree();\n     let src =\n-        hir::Source { file_id: file_id.into(), ast: hir::ModuleSource::SourceFile(source_file) };\n+        hir::Source { file_id: file_id.into(), value: hir::ModuleSource::SourceFile(source_file) };\n     if let Some(m) = hir::Module::from_definition(db, src) {\n         m.diagnostics(db, &mut sink);\n     };"}, {"sha": "f42dffc876d4fd5ac3a0ab3c52ef272fa3d91476", "filename": "crates/ra_ide_api/src/display/function_signature.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -48,12 +48,12 @@ impl FunctionSignature {\n \n     pub(crate) fn from_hir(db: &db::RootDatabase, function: hir::Function) -> Self {\n         let doc = function.docs(db);\n-        let ast_node = function.source(db).ast;\n+        let ast_node = function.source(db).value;\n         FunctionSignature::from(&ast_node).with_doc_opt(doc)\n     }\n \n     pub(crate) fn from_struct(db: &db::RootDatabase, st: hir::Struct) -> Option<Self> {\n-        let node: ast::StructDef = st.source(db).ast;\n+        let node: ast::StructDef = st.source(db).value;\n         match node.kind() {\n             ast::StructKind::Named(_) => return None,\n             _ => (),\n@@ -87,7 +87,7 @@ impl FunctionSignature {\n         db: &db::RootDatabase,\n         variant: hir::EnumVariant,\n     ) -> Option<Self> {\n-        let node: ast::EnumVariant = variant.source(db).ast;\n+        let node: ast::EnumVariant = variant.source(db).value;\n         match node.kind() {\n             ast::StructKind::Named(_) | ast::StructKind::Unit => return None,\n             _ => (),\n@@ -126,7 +126,7 @@ impl FunctionSignature {\n     }\n \n     pub(crate) fn from_macro(db: &db::RootDatabase, macro_def: hir::MacroDef) -> Option<Self> {\n-        let node: ast::MacroCall = macro_def.source(db).ast;\n+        let node: ast::MacroCall = macro_def.source(db).value;\n \n         let params = vec![];\n "}, {"sha": "50accafd033821ad4fd41b3ca1d9c4416e56f4ed", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -86,9 +86,9 @@ impl NavigationTarget {\n                 name,\n                 None,\n                 frange.range,\n-                src.ast.syntax().kind(),\n-                src.ast.doc_comment_text(),\n-                src.ast.short_label(),\n+                src.value.syntax().kind(),\n+                src.value.doc_comment_text(),\n+                src.value.short_label(),\n             );\n         }\n         module.to_nav(db)\n@@ -146,17 +146,17 @@ impl NavigationTarget {\n         description: Option<String>,\n     ) -> NavigationTarget {\n         //FIXME: use `_` instead of empty string\n-        let name = node.ast.name().map(|it| it.text().clone()).unwrap_or_default();\n+        let name = node.value.name().map(|it| it.text().clone()).unwrap_or_default();\n         let focus_range =\n-            node.ast.name().map(|it| original_range(db, node.with_ast(it.syntax())).range);\n+            node.value.name().map(|it| original_range(db, node.with_ast(it.syntax())).range);\n         let frange = original_range(db, node.map(|it| it.syntax()));\n \n         NavigationTarget::from_syntax(\n             frange.file_id,\n             name,\n             focus_range,\n             frange.range,\n-            node.ast.syntax().kind(),\n+            node.value.syntax().kind(),\n             docs,\n             description,\n         )\n@@ -220,8 +220,8 @@ where\n         NavigationTarget::from_named(\n             db,\n             src.as_ref().map(|it| it as &dyn ast::NameOwner),\n-            src.ast.doc_comment_text(),\n-            src.ast.short_label(),\n+            src.value.doc_comment_text(),\n+            src.value.short_label(),\n         )\n     }\n }\n@@ -230,7 +230,7 @@ impl ToNav for hir::Module {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.definition_source(db);\n         let name = self.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n-        match &src.ast {\n+        match &src.value {\n             ModuleSource::SourceFile(node) => {\n                 let frange = original_range(db, src.with_ast(node.syntax()));\n \n@@ -271,7 +271,7 @@ impl ToNav for hir::ImplBlock {\n             \"impl\".into(),\n             None,\n             frange.range,\n-            src.ast.syntax().kind(),\n+            src.value.syntax().kind(),\n             None,\n             None,\n         )\n@@ -282,7 +282,7 @@ impl ToNav for hir::StructField {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n \n-        match &src.ast {\n+        match &src.value {\n             FieldSource::Named(it) => NavigationTarget::from_named(\n                 db,\n                 src.with_ast(it),\n@@ -308,11 +308,11 @@ impl ToNav for hir::StructField {\n impl ToNav for hir::MacroDef {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n-        log::debug!(\"nav target {:#?}\", src.ast.syntax());\n+        log::debug!(\"nav target {:#?}\", src.value.syntax());\n         NavigationTarget::from_named(\n             db,\n             src.as_ref().map(|it| it as &dyn ast::NameOwner),\n-            src.ast.doc_comment_text(),\n+            src.value.doc_comment_text(),\n             None,\n         )\n     }\n@@ -341,7 +341,7 @@ impl ToNav for hir::AssocItem {\n impl ToNav for hir::Local {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n-        let (full_range, focus_range) = match src.ast {\n+        let (full_range, focus_range) = match src.value {\n             Either::A(it) => {\n                 (it.syntax().text_range(), it.name().map(|it| it.syntax().text_range()))\n             }"}, {"sha": "0228bced9098c8854ba9ea5ae4b127f9c034944d", "filename": "crates/ra_ide_api/src/expand.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fexpand.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -12,7 +12,7 @@ pub(crate) fn original_range(db: &RootDatabase, node: Source<&SyntaxNode>) -> Fi\n         None => {\n             return FileRange {\n                 file_id: node.file_id.original_file(db),\n-                range: node.ast.text_range(),\n+                range: node.value.text_range(),\n             }\n         }\n         Some(it) => it,\n@@ -25,14 +25,18 @@ pub(crate) fn original_range(db: &RootDatabase, node: Source<&SyntaxNode>) -> Fi\n     // *Second*, we should handle recurside macro expansions\n \n     let token = node\n-        .ast\n+        .value\n         .descendants_with_tokens()\n         .filter_map(|it| it.into_token())\n         .find_map(|it| expansion.map_token_up(node.with_ast(&it)));\n \n     match token {\n-        Some(it) => FileRange { file_id: it.file_id.original_file(db), range: it.ast.text_range() },\n-        None => FileRange { file_id: node.file_id.original_file(db), range: node.ast.text_range() },\n+        Some(it) => {\n+            FileRange { file_id: it.file_id.original_file(db), range: it.value.text_range() }\n+        }\n+        None => {\n+            FileRange { file_id: node.file_id.original_file(db), range: node.value.text_range() }\n+        }\n     }\n }\n \n@@ -44,13 +48,13 @@ pub(crate) fn descend_into_macros(\n     let src = Source::new(file_id.into(), token);\n \n     successors(Some(src), |token| {\n-        let macro_call = token.ast.ancestors().find_map(ast::MacroCall::cast)?;\n+        let macro_call = token.value.ancestors().find_map(ast::MacroCall::cast)?;\n         let tt = macro_call.token_tree()?;\n-        if !token.ast.text_range().is_subrange(&tt.syntax().text_range()) {\n+        if !token.value.text_range().is_subrange(&tt.syntax().text_range()) {\n             return None;\n         }\n         let source_analyzer =\n-            hir::SourceAnalyzer::new(db, token.with_ast(token.ast.parent()).as_ref(), None);\n+            hir::SourceAnalyzer::new(db, token.with_ast(token.value.parent()).as_ref(), None);\n         let exp = source_analyzer.expand(db, &macro_call)?;\n         exp.map_token_down(db, token.as_ref())\n     })"}, {"sha": "2d478ec09b8f713170bd40e74d5334a578c26353", "filename": "crates/ra_ide_api/src/expand_macro.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -46,7 +46,7 @@ fn expand_macro_recur(\n     let mut replaces = FxHashMap::default();\n \n     for child in children.into_iter() {\n-        let source = hir::Source::new(macro_file_id, source.ast);\n+        let source = hir::Source::new(macro_file_id, source.value);\n         let new_node = expand_macro_recur(db, source, &child)?;\n \n         replaces.insert(child.syntax().clone().into(), new_node.into());\n@@ -139,7 +139,7 @@ mod tests {\n         }\n         macro_rules! baz {\n             () => { foo!(); }\n-        }        \n+        }\n         f<|>oo!();\n         \"#,\n         );\n@@ -156,7 +156,7 @@ fn b(){}\n             r#\"\n         //- /lib.rs\n         macro_rules! foo {\n-            () => { \n+            () => {\n                 fn some_thing() -> u32 {\n                     let a = 0;\n                     a + 10\n@@ -172,7 +172,7 @@ fn b(){}\n fn some_thing() -> u32 {\n   let a = 0;\n   a+10\n-}        \n+}\n \"###);\n     }\n }"}, {"sha": "ed9d99a7f88615319d2b18332de475236c71d4ff", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn goto_definition(\n     let token = descend_into_macros(db, position.file_id, token);\n \n     let res = match_ast! {\n-        match (token.ast.parent()) {\n+        match (token.value.parent()) {\n             ast::NameRef(name_ref) => {\n                 let navs = reference_definition(db, token.with_ast(&name_ref)).to_vec();\n                 RangeInfo::new(name_ref.syntax().text_range(), navs.to_vec())\n@@ -84,7 +84,7 @@ pub(crate) fn reference_definition(\n     };\n \n     // Fallback index based approach:\n-    let navs = crate::symbol_index::index_resolve(db, name_ref.ast)\n+    let navs = crate::symbol_index::index_resolve(db, name_ref.value)\n         .into_iter()\n         .map(|s| s.to_nav(db))\n         .collect();\n@@ -95,7 +95,7 @@ pub(crate) fn name_definition(\n     db: &RootDatabase,\n     name: Source<&ast::Name>,\n ) -> Option<Vec<NavigationTarget>> {\n-    let parent = name.ast.syntax().parent()?;\n+    let parent = name.value.syntax().parent()?;\n \n     if let Some(module) = ast::Module::cast(parent.clone()) {\n         if module.has_semi() {\n@@ -116,7 +116,7 @@ pub(crate) fn name_definition(\n \n fn named_target(db: &RootDatabase, node: Source<&SyntaxNode>) -> Option<NavigationTarget> {\n     match_ast! {\n-        match (node.ast) {\n+        match (node.value) {\n             ast::StructDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,"}, {"sha": "6aeeefa1f09f9c6b15f1f3b95ac13fff91756354", "filename": "crates/ra_ide_api/src/goto_type_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -16,7 +16,7 @@ pub(crate) fn goto_type_definition(\n     let token = file.token_at_offset(position.offset).filter(|it| !it.kind().is_trivia()).next()?;\n     let token = descend_into_macros(db, position.file_id, token);\n \n-    let node = token.ast.ancestors().find_map(|token| {\n+    let node = token.value.ancestors().find_map(|token| {\n         token\n             .ancestors()\n             .find(|n| ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some())"}, {"sha": "e8a340ba4cbaf62cb6b02a19cbeb6daf9fef4f33", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -101,11 +101,11 @@ fn hover_text_from_name_kind(\n     return match name_kind {\n         Macro(it) => {\n             let src = it.source(db);\n-            hover_text(src.ast.doc_comment_text(), Some(macro_label(&src.ast)))\n+            hover_text(src.value.doc_comment_text(), Some(macro_label(&src.value)))\n         }\n         Field(it) => {\n             let src = it.source(db);\n-            match src.ast {\n+            match src.value {\n                 hir::FieldSource::Named(it) => hover_text(it.doc_comment_text(), it.short_label()),\n                 _ => None,\n             }\n@@ -116,7 +116,7 @@ fn hover_text_from_name_kind(\n             hir::AssocItem::TypeAlias(it) => from_def_source(db, it),\n         },\n         Def(it) => match it {\n-            hir::ModuleDef::Module(it) => match it.definition_source(db).ast {\n+            hir::ModuleDef::Module(it) => match it.definition_source(db).value {\n                 hir::ModuleSource::Module(it) => {\n                     hover_text(it.doc_comment_text(), it.short_label())\n                 }\n@@ -158,7 +158,7 @@ fn hover_text_from_name_kind(\n         A: ast::DocCommentsOwner + ast::NameOwner + ShortLabel,\n     {\n         let src = def.source(db);\n-        hover_text(src.ast.doc_comment_text(), src.ast.short_label())\n+        hover_text(src.value.doc_comment_text(), src.value.short_label())\n     }\n }\n \n@@ -170,7 +170,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     let mut res = HoverResult::new();\n \n     let mut range = match_ast! {\n-        match (token.ast.parent()) {\n+        match (token.value.parent()) {\n             ast::NameRef(name_ref) => {\n                 let mut no_fallback = false;\n                 if let Some(name_kind) =\n@@ -211,7 +211,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     };\n \n     if range.is_none() {\n-        let node = token.ast.ancestors().find(|n| {\n+        let node = token.value.ancestors().find(|n| {\n             ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some()\n         })?;\n         let frange = FileRange { file_id: position.file_id, range: node.text_range() };"}, {"sha": "3e3012559bb5292253c8e01b96be710f73db1776", "filename": "crates/ra_ide_api/src/impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -16,7 +16,7 @@ pub(crate) fn goto_implementation(\n     let src = hir::ModuleSource::from_position(db, position);\n     let module = hir::Module::from_definition(\n         db,\n-        hir::Source { file_id: position.file_id.into(), ast: src },\n+        hir::Source { file_id: position.file_id.into(), value: src },\n     )?;\n \n     if let Some(nominal_def) = find_node_at_offset::<ast::NominalDef>(&syntax, position.offset) {\n@@ -42,11 +42,11 @@ fn impls_for_def(\n ) -> Option<Vec<NavigationTarget>> {\n     let ty = match node {\n         ast::NominalDef::StructDef(def) => {\n-            let src = hir::Source { file_id: position.file_id.into(), ast: def.clone() };\n+            let src = hir::Source { file_id: position.file_id.into(), value: def.clone() };\n             hir::Struct::from_source(db, src)?.ty(db)\n         }\n         ast::NominalDef::EnumDef(def) => {\n-            let src = hir::Source { file_id: position.file_id.into(), ast: def.clone() };\n+            let src = hir::Source { file_id: position.file_id.into(), value: def.clone() };\n             hir::Enum::from_source(db, src)?.ty(db)\n         }\n     };\n@@ -69,7 +69,7 @@ fn impls_for_trait(\n     node: &ast::TraitDef,\n     module: hir::Module,\n ) -> Option<Vec<NavigationTarget>> {\n-    let src = hir::Source { file_id: position.file_id.into(), ast: node.clone() };\n+    let src = hir::Source { file_id: position.file_id.into(), value: node.clone() };\n     let tr = hir::Trait::from_source(db, src)?;\n \n     let krate = module.krate();"}, {"sha": "fa232a379f8aa68a360a1929a5b1020008e77661", "filename": "crates/ra_ide_api/src/parent_module.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -10,7 +10,7 @@ pub(crate) fn parent_module(db: &RootDatabase, position: FilePosition) -> Vec<Na\n     let src = hir::ModuleSource::from_position(db, position);\n     let module = match hir::Module::from_definition(\n         db,\n-        hir::Source { file_id: position.file_id.into(), ast: src },\n+        hir::Source { file_id: position.file_id.into(), value: src },\n     ) {\n         None => return Vec::new(),\n         Some(it) => it,\n@@ -23,7 +23,8 @@ pub(crate) fn parent_module(db: &RootDatabase, position: FilePosition) -> Vec<Na\n pub(crate) fn crate_for(db: &RootDatabase, file_id: FileId) -> Vec<CrateId> {\n     let src = hir::ModuleSource::from_file_id(db, file_id);\n     let module =\n-        match hir::Module::from_definition(db, hir::Source { file_id: file_id.into(), ast: src }) {\n+        match hir::Module::from_definition(db, hir::Source { file_id: file_id.into(), value: src })\n+        {\n             Some(it) => it,\n             None => return Vec::new(),\n         };"}, {"sha": "333264540c67452e477a6dc80f01800b47a870ea", "filename": "crates/ra_ide_api/src/references/classify.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -13,7 +13,7 @@ use crate::db::RootDatabase;\n \n pub(crate) fn classify_name(db: &RootDatabase, name: Source<&ast::Name>) -> Option<NameDefinition> {\n     let _p = profile(\"classify_name\");\n-    let parent = name.ast.syntax().parent()?;\n+    let parent = name.value.syntax().parent()?;\n \n     match_ast! {\n         match parent {\n@@ -121,7 +121,7 @@ pub(crate) fn classify_name_ref(\n ) -> Option<NameDefinition> {\n     let _p = profile(\"classify_name_ref\");\n \n-    let parent = name_ref.ast.syntax().parent()?;\n+    let parent = name_ref.value.syntax().parent()?;\n     let analyzer = SourceAnalyzer::new(db, name_ref.map(|it| it.syntax()), None);\n \n     if let Some(method_call) = ast::MethodCallExpr::cast(parent.clone()) {\n@@ -142,7 +142,7 @@ pub(crate) fn classify_name_ref(\n         tested_by!(goto_definition_works_for_record_fields);\n         if let Some(record_lit) = record_field.syntax().ancestors().find_map(ast::RecordLit::cast) {\n             let variant_def = analyzer.resolve_record_literal(&record_lit)?;\n-            let hir_path = Path::from_name_ref(name_ref.ast);\n+            let hir_path = Path::from_name_ref(name_ref.value);\n             let hir_name = hir_path.as_ident()?;\n             let field = variant_def.field(db, hir_name)?;\n             return Some(from_struct_field(db, field));\n@@ -162,7 +162,7 @@ pub(crate) fn classify_name_ref(\n         }\n     }\n \n-    let path = name_ref.ast.syntax().ancestors().find_map(ast::Path::cast)?;\n+    let path = name_ref.value.syntax().ancestors().find_map(ast::Path::cast)?;\n     let resolved = analyzer.resolve_path(db, &path)?;\n     match resolved {\n         PathResolution::Def(def) => Some(from_module_def(db, def, Some(container))),"}, {"sha": "aca23f79e24b6f5f09c35d34ccca54f8ce285d31", "filename": "crates/ra_ide_api/src/references/name_definition.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -32,9 +32,9 @@ pub(crate) struct NameDefinition {\n pub(super) fn from_assoc_item(db: &RootDatabase, item: AssocItem) -> NameDefinition {\n     let container = item.module(db);\n     let visibility = match item {\n-        AssocItem::Function(f) => f.source(db).ast.visibility(),\n-        AssocItem::Const(c) => c.source(db).ast.visibility(),\n-        AssocItem::TypeAlias(a) => a.source(db).ast.visibility(),\n+        AssocItem::Function(f) => f.source(db).value.visibility(),\n+        AssocItem::Const(c) => c.source(db).value.visibility(),\n+        AssocItem::TypeAlias(a) => a.source(db).value.visibility(),\n     };\n     let kind = NameKind::AssocItem(item);\n     NameDefinition { kind, container, visibility }\n@@ -45,8 +45,8 @@ pub(super) fn from_struct_field(db: &RootDatabase, field: StructField) -> NameDe\n     let parent = field.parent_def(db);\n     let container = parent.module(db);\n     let visibility = match parent {\n-        VariantDef::Struct(s) => s.source(db).ast.visibility(),\n-        VariantDef::EnumVariant(e) => e.source(db).ast.parent_enum().visibility(),\n+        VariantDef::Struct(s) => s.source(db).value.visibility(),\n+        VariantDef::EnumVariant(e) => e.source(db).value.parent_enum().visibility(),\n     };\n     NameDefinition { kind, container, visibility }\n }\n@@ -60,22 +60,22 @@ pub(super) fn from_module_def(\n     let (container, visibility) = match def {\n         ModuleDef::Module(it) => {\n             let container = it.parent(db).or_else(|| Some(it)).unwrap();\n-            let visibility = it.declaration_source(db).and_then(|s| s.ast.visibility());\n+            let visibility = it.declaration_source(db).and_then(|s| s.value.visibility());\n             (container, visibility)\n         }\n         ModuleDef::EnumVariant(it) => {\n             let container = it.module(db);\n-            let visibility = it.source(db).ast.parent_enum().visibility();\n+            let visibility = it.source(db).value.parent_enum().visibility();\n             (container, visibility)\n         }\n-        ModuleDef::Function(it) => (it.module(db), it.source(db).ast.visibility()),\n-        ModuleDef::Const(it) => (it.module(db), it.source(db).ast.visibility()),\n-        ModuleDef::Static(it) => (it.module(db), it.source(db).ast.visibility()),\n-        ModuleDef::Trait(it) => (it.module(db), it.source(db).ast.visibility()),\n-        ModuleDef::TypeAlias(it) => (it.module(db), it.source(db).ast.visibility()),\n-        ModuleDef::Adt(Adt::Struct(it)) => (it.module(db), it.source(db).ast.visibility()),\n-        ModuleDef::Adt(Adt::Union(it)) => (it.module(db), it.source(db).ast.visibility()),\n-        ModuleDef::Adt(Adt::Enum(it)) => (it.module(db), it.source(db).ast.visibility()),\n+        ModuleDef::Function(it) => (it.module(db), it.source(db).value.visibility()),\n+        ModuleDef::Const(it) => (it.module(db), it.source(db).value.visibility()),\n+        ModuleDef::Static(it) => (it.module(db), it.source(db).value.visibility()),\n+        ModuleDef::Trait(it) => (it.module(db), it.source(db).value.visibility()),\n+        ModuleDef::TypeAlias(it) => (it.module(db), it.source(db).value.visibility()),\n+        ModuleDef::Adt(Adt::Struct(it)) => (it.module(db), it.source(db).value.visibility()),\n+        ModuleDef::Adt(Adt::Union(it)) => (it.module(db), it.source(db).value.visibility()),\n+        ModuleDef::Adt(Adt::Enum(it)) => (it.module(db), it.source(db).value.visibility()),\n         ModuleDef::BuiltinType(..) => (module.unwrap(), None),\n     };\n     NameDefinition { kind, container, visibility }"}, {"sha": "4ea372e6f06cef4e423dc78d0b6455b0398327c2", "filename": "crates/ra_ide_api/src/references/rename.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Frename.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -55,11 +55,11 @@ fn rename_mod(\n ) -> Option<SourceChange> {\n     let mut source_file_edits = Vec::new();\n     let mut file_system_edits = Vec::new();\n-    let module_src = hir::Source { file_id: position.file_id.into(), ast: ast_module.clone() };\n+    let module_src = hir::Source { file_id: position.file_id.into(), value: ast_module.clone() };\n     if let Some(module) = hir::Module::from_declaration(db, module_src) {\n         let src = module.definition_source(db);\n         let file_id = src.file_id.original_file(db);\n-        match src.ast {\n+        match src.value {\n             ModuleSource::SourceFile(..) => {\n                 let mod_path: RelativePathBuf = db.file_relative_path(file_id);\n                 // mod is defined in path/to/dir/mod.rs"}, {"sha": "f5c9589f4d17257f17c34caa4c7bc45c51aea20c", "filename": "crates/ra_ide_api/src/references/search_scope.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e3fc9d5413f7e6e17e82867aae1318645880a3/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=36e3fc9d5413f7e6e17e82867aae1318645880a3", "patch": "@@ -73,9 +73,9 @@ impl NameDefinition {\n \n         if let NameKind::Local(var) = self.kind {\n             let range = match var.parent(db) {\n-                DefWithBody::Function(f) => f.source(db).ast.syntax().text_range(),\n-                DefWithBody::Const(c) => c.source(db).ast.syntax().text_range(),\n-                DefWithBody::Static(s) => s.source(db).ast.syntax().text_range(),\n+                DefWithBody::Function(f) => f.source(db).value.syntax().text_range(),\n+                DefWithBody::Const(c) => c.source(db).value.syntax().text_range(),\n+                DefWithBody::Static(s) => s.source(db).value.syntax().text_range(),\n             };\n             let mut res = FxHashMap::default();\n             res.insert(file_id, Some(range));\n@@ -91,7 +91,7 @@ impl NameDefinition {\n                 let parent_src = parent_module.definition_source(db);\n                 let file_id = parent_src.file_id.original_file(db);\n \n-                match parent_src.ast {\n+                match parent_src.value {\n                     ModuleSource::Module(m) => {\n                         let range = Some(m.syntax().text_range());\n                         res.insert(file_id, range);\n@@ -135,7 +135,7 @@ impl NameDefinition {\n         }\n \n         let mut res = FxHashMap::default();\n-        let range = match module_src.ast {\n+        let range = match module_src.value {\n             ModuleSource::Module(m) => Some(m.syntax().text_range()),\n             ModuleSource::SourceFile(_) => None,\n         };"}]}