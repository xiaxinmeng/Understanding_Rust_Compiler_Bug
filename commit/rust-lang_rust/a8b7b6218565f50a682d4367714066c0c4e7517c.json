{"sha": "a8b7b6218565f50a682d4367714066c0c4e7517c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YjdiNjIxODU2NWY1MGE2ODJkNDM2NzcxNDA2NmMwYzRlNzUxN2M=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-03T00:34:29Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-10T17:45:53Z"}, "message": "Revert use of layout code in typeck::collect", "tree": {"sha": "8f9a5e233c7b64f71cc2cd537ea8ab6b28788cee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f9a5e233c7b64f71cc2cd537ea8ab6b28788cee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8b7b6218565f50a682d4367714066c0c4e7517c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b7b6218565f50a682d4367714066c0c4e7517c", "html_url": "https://github.com/rust-lang/rust/commit/a8b7b6218565f50a682d4367714066c0c4e7517c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8b7b6218565f50a682d4367714066c0c4e7517c/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "362eb7ea0705b02164f93b0a90f292b5eee210c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/362eb7ea0705b02164f93b0a90f292b5eee210c5", "html_url": "https://github.com/rust-lang/rust/commit/362eb7ea0705b02164f93b0a90f292b5eee210c5"}], "stats": {"total": 69, "additions": 25, "deletions": 44}, "files": [{"sha": "46161c8838d89752c0fa3fe6ed6f4270dd27de27", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8b7b6218565f50a682d4367714066c0c4e7517c/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b7b6218565f50a682d4367714066c0c4e7517c/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=a8b7b6218565f50a682d4367714066c0c4e7517c", "patch": "@@ -453,7 +453,7 @@ impl Integer {\n     /// signed discriminant range and #[repr] attribute.\n     /// N.B.: u64 values above i64::MAX will be treated as signed, but\n     /// that shouldn't affect anything, other than maybe debuginfo.\n-    fn repr_discr(tcx: TyCtxt, ty: Ty, repr: &ReprOptions, min: i128, max: i128)\n+    pub fn repr_discr(tcx: TyCtxt, ty: Ty, repr: &ReprOptions, min: i128, max: i128)\n                       -> (Integer, bool) {\n         // Theoretically, negative values could be larger in unsigned representation\n         // than the unsigned representation of the signed minimum. However, if there\n@@ -1212,8 +1212,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n \n                     // FIXME: should handle i128? signed-value based impl is weird and hard to\n                     // grok.\n-                    let discr = Integer::from_attr(&tcx.data_layout, def.discr_ty);\n-                    let signed = def.discr_ty.is_signed();\n+                    let (discr, signed) = Integer::repr_discr(tcx, ty, hints, min, max);\n                     return success(CEnum {\n                         discr: discr,\n                         signed: signed,\n@@ -1328,7 +1327,9 @@ impl<'a, 'gcx, 'tcx> Layout {\n                 }\n \n                 // The general case.\n-                let min_ity = Integer::from_attr(&tcx.data_layout, def.discr_ty);\n+                let discr_max = (variants.len() - 1) as i64;\n+                assert!(discr_max >= 0);\n+                let (min_ity, _) = Integer::repr_discr(tcx, ty, &hints[..], 0, discr_max);\n                 let mut align = dl.aggregate_align;\n                 let mut size = Size::from_bytes(0);\n "}, {"sha": "523c61d404f0055ab0c0bd368a882434b8720706", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a8b7b6218565f50a682d4367714066c0c4e7517c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b7b6218565f50a682d4367714066c0c4e7517c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a8b7b6218565f50a682d4367714066c0c4e7517c", "patch": "@@ -1326,7 +1326,12 @@ pub struct FieldDef {\n /// table.\n pub struct AdtDef {\n     pub did: DefId,\n-    pub discr_ty: attr::IntType, // Type of the discriminant\n+    /// Type of the discriminant\n+    ///\n+    /// Note, that this is the type specified in `repr()` or a default type of some sort, and might\n+    /// not match the actual type that layout algorithm decides to use when translating this type\n+    /// into LLVM. That being said, layout algorithm may not use a type larger than specified here.\n+    pub discr_ty: attr::IntType,\n     pub variants: Vec<VariantDef>,\n     destructor: Cell<Option<DefId>>,\n     flags: Cell<AdtFlags>,"}, {"sha": "16492de6c3d27fefb456f787c89a8a876628877e", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a8b7b6218565f50a682d4367714066c0c4e7517c/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b7b6218565f50a682d4367714066c0c4e7517c/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=a8b7b6218565f50a682d4367714066c0c4e7517c", "patch": "@@ -23,7 +23,6 @@ use ty::TypeVariants::*;\n use util::nodemap::FxHashMap;\n use middle::lang_items;\n \n-use rustc_const_math::ConstInt;\n use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult};\n \n use std::cell::RefCell;\n@@ -34,14 +33,10 @@ use syntax::ast::{self, Name};\n use syntax::attr::{self, SignedInt, UnsignedInt};\n use syntax_pos::Span;\n \n-use rustc_i128::i128;\n-\n use hir;\n \n pub trait IntTypeExt {\n     fn to_ty<'a, 'gcx: 'a+'tcx, 'tcx: 'a>(self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx>;\n-    fn disr_incr<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, val: Option<Disr>)\n-                           -> Option<Disr>;\n     fn initial_discriminant<'a, 'tcx>(&self, _: TyCtxt<'a, 'tcx, 'tcx>) -> Disr;\n }\n \n@@ -56,19 +51,6 @@ impl IntTypeExt for attr::IntType {\n     fn initial_discriminant<'a, 'tcx>(&self, _: TyCtxt<'a, 'tcx, 'tcx>) -> Disr {\n         0\n     }\n-\n-    /// None = overflow\n-    fn disr_incr<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, val: Option<Disr>)\n-    -> Option<Disr> {\n-        if let Some(val) = val {\n-            match *self {\n-                SignedInt(it) => ConstInt::new_signed(val as i128, it, tcx.sess.target.int_type),\n-                UnsignedInt(it) => ConstInt::new_unsigned(val, it, tcx.sess.target.uint_type),\n-            }.and_then(|l| (l + ConstInt::Infer(1)).ok()).map(|v| v.to_u128_unchecked())\n-        } else {\n-            Some(self.initial_discriminant(tcx))\n-        }\n-    }\n }\n \n "}, {"sha": "2eb4ea6ceddde522f53cdc8f4a33d7a6f07438c4", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8b7b6218565f50a682d4367714066c0c4e7517c/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b7b6218565f50a682d4367714066c0c4e7517c/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=a8b7b6218565f50a682d4367714066c0c4e7517c", "patch": "@@ -438,12 +438,8 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 let enum_ty = discr_lvalue.ty.to_ty(bcx.tcx());\n                 let discr_ty = rvalue.ty(&*self.mir, bcx.tcx()).unwrap();\n                 let discr_type = type_of::immediate_type_of(bcx.ccx, discr_ty);\n-                let discr = adt::trans_get_discr(&bcx, enum_ty, discr_lvalue.llval, None, true);\n-                let discr = if common::val_ty(discr) == Type::i1(bcx.ccx) {\n-                    bcx.zext(discr, discr_type)\n-                } else {\n-                    bcx.trunc(discr, discr_type)\n-                };\n+                let discr = adt::trans_get_discr(&bcx, enum_ty, discr_lvalue.llval,\n+                                                 Some(discr_type), true);\n                 (bcx, OperandRef {\n                     val: OperandValue::Immediate(discr),\n                     ty: discr_ty"}, {"sha": "217405a81ec2dc7e5b01088fe0592b1aa670cfc6", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8b7b6218565f50a682d4367714066c0c4e7517c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b7b6218565f50a682d4367714066c0c4e7517c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a8b7b6218565f50a682d4367714066c0c4e7517c", "patch": "@@ -66,7 +66,7 @@ use rustc_const_eval::EvalHint::UncheckedExprHint;\n use rustc_const_eval::{ConstContext, report_const_eval_err};\n use rustc::ty::subst::Substs;\n use rustc::ty::{ToPredicate, ImplContainer, AssociatedItemContainer, TraitContainer, ReprOptions};\n-use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt, layout};\n+use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::util::IntTypeExt;\n use rustc::dep_graph::DepNode;\n use util::common::{ErrorReported, MemoizationMap};\n@@ -86,8 +86,6 @@ use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n \n-use rustc_i128::i128;\n-\n ///////////////////////////////////////////////////////////////////////////\n // Main entry point\n \n@@ -1032,7 +1030,7 @@ fn convert_union_def<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n }\n \n fn evaluate_disr_expr(ccx: &CrateCtxt, repr_ty: attr::IntType, body: hir::BodyId)\n-                      -> Option<ty::Disr> {\n+                      -> Option<ConstInt> {\n     let e = &ccx.tcx.hir.body(body).value;\n     debug!(\"disr expr, checking {}\", ccx.tcx.hir.node_to_pretty_string(e.id));\n \n@@ -1062,7 +1060,7 @@ fn evaluate_disr_expr(ccx: &CrateCtxt, repr_ty: attr::IntType, body: hir::BodyId\n                 (attr::UnsignedInt(ast::UintTy::U64), ConstInt::U64(_)) |\n                 (attr::UnsignedInt(ast::UintTy::U128), ConstInt::U128(_)) |\n                 (attr::UnsignedInt(ast::UintTy::Us), ConstInt::Usize(_)) =>\n-                    Some(i.to_u128_unchecked()),\n+                    Some(i),\n                 (_, i) => {\n                     print_err(ConstVal::Integral(i));\n                     None\n@@ -1093,15 +1091,17 @@ fn convert_enum_def<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     let did = tcx.hir.local_def_id(it.id);\n     let repr_hints = tcx.lookup_repr_hints(did);\n     let repr_type = tcx.enum_repr_type(repr_hints.get(0));\n-    let initial = repr_type.initial_discriminant(tcx);\n-    let mut prev_disr = None::<ty::Disr>;\n-    let (mut min, mut max) = (i128::max_value(), i128::min_value());\n+    let initial = ConstInt::new_inttype(repr_type.initial_discriminant(tcx), repr_type,\n+                                        tcx.sess.target.uint_type, tcx.sess.target.int_type)\n+        .unwrap();\n+    let mut prev_disr = None::<ConstInt>;\n     let variants = def.variants.iter().map(|v| {\n-        let wrapped_disr = prev_disr.map_or(initial, |d| d.wrapping_add(1));\n+        let wrapped_disr = prev_disr.map_or(initial, |d| d.wrap_incr());\n         let disr = if let Some(e) = v.node.disr_expr {\n             // FIXME: i128 discriminants\n             evaluate_disr_expr(ccx, repr_type, e)\n-        } else if let Some(disr) = repr_type.disr_incr(tcx, prev_disr) {\n+        } else if let Some(disr) = prev_disr.map_or(Some(initial),\n+                                                    |v| (v + ConstInt::Infer(1)).ok()) {\n             Some(disr)\n         } else {\n             struct_span_err!(tcx.sess, v.span, E0370,\n@@ -1113,13 +1113,10 @@ fn convert_enum_def<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             None\n         }.unwrap_or(wrapped_disr);\n         prev_disr = Some(disr);\n-        if (disr as i128) < min { min = disr as i128; }\n-        if (disr as i128) > max { max = disr as i128; }\n         let did = tcx.hir.local_def_id(v.node.data.id());\n-        convert_struct_variant(ccx, did, v.node.name, disr, &v.node.data)\n+        convert_struct_variant(ccx, did, v.node.name, disr.to_u128_unchecked(), &v.node.data)\n     }).collect();\n-\n-    let adt = tcx.alloc_adt_def(did, AdtKind::Enum, Some(repr_int.to_attr(signed)), variants,\n+    let adt = tcx.alloc_adt_def(did, AdtKind::Enum, Some(repr_type), variants,\n                                 ReprOptions::new(&ccx.tcx, did));\n     tcx.adt_defs.borrow_mut().insert(did, adt);\n     adt"}]}