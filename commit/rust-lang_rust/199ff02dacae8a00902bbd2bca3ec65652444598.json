{"sha": "199ff02dacae8a00902bbd2bca3ec65652444598", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OWZmMDJkYWNhZThhMDA5MDJiYmQyYmNhM2VjNjU2NTI0NDQ1OTg=", "commit": {"author": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-04-24T14:59:46Z"}, "committer": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-05-04T09:47:26Z"}, "message": "resolving conflicts", "tree": {"sha": "167fe3dcc8c3b5f2a3dd91ab86b9d60f5ea82214", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/167fe3dcc8c3b5f2a3dd91ab86b9d60f5ea82214"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/199ff02dacae8a00902bbd2bca3ec65652444598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/199ff02dacae8a00902bbd2bca3ec65652444598", "html_url": "https://github.com/rust-lang/rust/commit/199ff02dacae8a00902bbd2bca3ec65652444598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/199ff02dacae8a00902bbd2bca3ec65652444598/comments", "author": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82410e800f864684ec5009ea0cecd9614155ca06", "url": "https://api.github.com/repos/rust-lang/rust/commits/82410e800f864684ec5009ea0cecd9614155ca06", "html_url": "https://github.com/rust-lang/rust/commit/82410e800f864684ec5009ea0cecd9614155ca06"}], "stats": {"total": 57, "additions": 24, "deletions": 33}, "files": [{"sha": "b063159855412c0fb0da024e6cab8db6376d3ac1", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/199ff02dacae8a00902bbd2bca3ec65652444598/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199ff02dacae8a00902bbd2bca3ec65652444598/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=199ff02dacae8a00902bbd2bca3ec65652444598", "patch": "@@ -12,7 +12,7 @@ use std::iter;\n use std::mem;\n use std::ops::Bound;\n \n-use hir;\n+use crate::hir;\n use crate::ich::StableHashingContext;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n@@ -1892,25 +1892,27 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n \n             _ => {\n                 let mut data_variant = match this.variants {\n-                    Variants::NicheFilling { dataful_variant, .. } => {\n-                        // Only the niche in this is always initialized,\n-                        // so only check for a pointer at its offset.\n-                        //\n-                        // If the niche is a pointer, it's either valid\n-                        // (according to its type), or null (which the\n-                        // niche field's scalar validity range encodes).\n-                        // This allows using `dereferenceable_or_null`\n-                        // for e.g., `Option<&T>`, and this will continue\n-                        // to work as long as we don't start using more\n-                        // niches than just null (e.g., the first page\n-                        // of the address space, or unaligned pointers).\n-                        if this.fields.offset(0) == offset {\n-                            Some(this.for_variant(cx, dataful_variant))\n-                        } else {\n-                            None\n-                        }\n-                    }\n-                    _ => Some(this)\n+                    // Within the discriminant field, only the niche itself is\n+                    // always initialized, so we only check for a pointer at its\n+                    // offset.\n+                    //\n+                    // If the niche is a pointer, it's either valid (according\n+                    // to its type), or null (which the niche field's scalar\n+                    // validity range encodes).  This allows using\n+                    // `dereferenceable_or_null` for e.g., `Option<&T>`, and\n+                    // this will continue to work as long as we don't start\n+                    // using more niches than just null (e.g., the first page of\n+                    // the address space, or unaligned pointers).\n+                    Variants::Multiple {\n+                        discr_kind: DiscriminantKind::Niche {\n+                            dataful_variant,\n+                            ..\n+                        },\n+                        discr_index,\n+                        ..\n+                    } if this.fields.offset(discr_index) == offset =>\n+                        Some(this.for_variant(cx, dataful_variant)),\n+                    _ => Some(this),\n                 };\n \n                 if let Some(variant) = data_variant {\n@@ -1931,9 +1933,8 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                             result = field.ok()\n                                 .and_then(|field| {\n                                     if ptr_end <= field_start + field.size {\n-                                        let off = offset - field_start;\n                                         // We found the right field, look inside it.\n-                                        Self::pointee_info_at(field, cx, off, param_env)\n+                                        field.pointee_info_at(cx, offset - field_start, param_env)\n                                     } else {\n                                         None\n                                     }"}, {"sha": "1be0736791451fd9a9c8e32acd69c4e828007517", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/199ff02dacae8a00902bbd2bca3ec65652444598/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199ff02dacae8a00902bbd2bca3ec65652444598/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=199ff02dacae8a00902bbd2bca3ec65652444598", "patch": "@@ -2,17 +2,11 @@ use crate::llvm::{self, AttributePlace};\n use crate::builder::Builder;\n use crate::context::CodegenCx;\n use crate::type_::Type;\n-use crate::type_of::{LayoutLlvmExt, PointerKind};\n use crate::value::Value;\n+use crate::type_of::{LayoutLlvmExt};\n use rustc_codegen_ssa::MemFlags;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::mir::operand::OperandValue;\n-<<<<<<< HEAD\n-=======\n-use type_::Type;\n-use type_of::{LayoutLlvmExt};\n-use value::Value;\n->>>>>>> Remove old pointee_info_at body.\n use rustc_target::abi::call::ArgType;\n \n use rustc_codegen_ssa::traits::*;"}, {"sha": "7cf78a41feb7202dc56616b2947a6da5d0b26b87", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/199ff02dacae8a00902bbd2bca3ec65652444598/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199ff02dacae8a00902bbd2bca3ec65652444598/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=199ff02dacae8a00902bbd2bca3ec65652444598", "patch": "@@ -8,7 +8,6 @@ use rustc::hir;\n \n use crate::monomorphize::partitioning::CodegenUnit;\n use crate::type_::Type;\n-use crate::type_of::PointeeInfo;\n use rustc_codegen_ssa::traits::*;\n \n use rustc_data_structures::base_n;"}, {"sha": "3f717754e327a65c05d3d0bcff6651b04e899efe", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/199ff02dacae8a00902bbd2bca3ec65652444598/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199ff02dacae8a00902bbd2bca3ec65652444598/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=199ff02dacae8a00902bbd2bca3ec65652444598", "patch": "@@ -1,9 +1,6 @@\n use crate::abi::{FnType, FnTypeExt};\n use crate::common::*;\n use crate::type_::Type;\n-use rustc::hir;\n-use abi::{FnType, FnTypeExt};\n-use common::*;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, Align, LayoutOf, PointeeInfo, Size, TyLayout};\n use rustc_target::abi::{FloatTy, TyLayoutMethods};"}]}