{"sha": "1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOWIzMjI4ODM2OWRiZDEzYTlkNzIxZDY3NjVkZGMzMGQyOWU4YzE=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-02-22T00:24:16Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-02-23T21:32:22Z"}, "message": "Implement non-capturing closure to fn coercion", "tree": {"sha": "ad4a22e642fefca8deaad3f9c95ce2219baf4112", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad4a22e642fefca8deaad3f9c95ce2219baf4112"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "html_url": "https://github.com/rust-lang/rust/commit/1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a1ce4020c480e455ec902e3616843a3dd5fe489", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a1ce4020c480e455ec902e3616843a3dd5fe489", "html_url": "https://github.com/rust-lang/rust/commit/8a1ce4020c480e455ec902e3616843a3dd5fe489"}], "stats": {"total": 208, "additions": 206, "deletions": 2}, "files": [{"sha": "a44679b0b3e0e5cab0389ca356159c4960e46c29", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -715,6 +715,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 adjustment::Adjust::NeverToAny |\n                 adjustment::Adjust::ReifyFnPointer |\n                 adjustment::Adjust::UnsafeFnPointer |\n+                adjustment::Adjust::ClosureFnPointer |\n                 adjustment::Adjust::MutToConstPointer => {\n                     // Creating a closure/fn-pointer or unsizing consumes\n                     // the input and stores it into the resulting rvalue."}, {"sha": "b0c85e2ef4cd48438df7796f250cc04dd45ad477", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -464,6 +464,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                     adjustment::Adjust::NeverToAny |\n                     adjustment::Adjust::ReifyFnPointer |\n                     adjustment::Adjust::UnsafeFnPointer |\n+                    adjustment::Adjust::ClosureFnPointer |\n                     adjustment::Adjust::MutToConstPointer |\n                     adjustment::Adjust::DerefRef {..} => {\n                         debug!(\"cat_expr({:?}): {:?}\","}, {"sha": "d2a657e35b54ad6351cb672c4e16013bb6860b57", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -1022,6 +1022,9 @@ pub enum CastKind {\n     /// Convert unique, zero-sized type for a fn to fn()\n     ReifyFnPointer,\n \n+    /// Convert non capturing closure to fn()\n+    ClosureFnPointer,\n+\n     /// Convert safe fn() to unsafe fn()\n     UnsafeFnPointer,\n "}, {"sha": "34977822bc69d8c8600105e7989ce5eed8e7c01f", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -33,6 +33,9 @@ pub enum Adjust<'tcx> {\n     /// Go from a safe fn pointer to an unsafe fn pointer.\n     UnsafeFnPointer,\n \n+    // Go from a non-capturing closure to an fn pointer.\n+    ClosureFnPointer,\n+\n     /// Go from a mut raw pointer to a const raw pointer.\n     MutToConstPointer,\n \n@@ -120,6 +123,7 @@ impl<'tcx> Adjustment<'tcx> {\n \n             Adjust::ReifyFnPointer |\n             Adjust::UnsafeFnPointer |\n+            Adjust::ClosureFnPointer |\n             Adjust::MutToConstPointer |\n             Adjust::DerefRef {..} => false,\n         }"}, {"sha": "5abfe084f22581b646aaec8cecbdcd2b55d363a9", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -99,6 +99,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Use { .. } |\n             ExprKind::NeverToAny { .. } |\n             ExprKind::ReifyFnPointer { .. } |\n+            ExprKind::ClosureFnPointer { .. } |\n             ExprKind::UnsafeFnPointer { .. } |\n             ExprKind::Unsize { .. } |\n             ExprKind::Repeat { .. } |"}, {"sha": "7f5d9c36ecedf3221c93521987e8cd249dcb1b91", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -112,6 +112,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let source = unpack!(block = this.as_operand(block, source));\n                 block.and(Rvalue::Cast(CastKind::UnsafeFnPointer, source, expr.ty))\n             }\n+            ExprKind::ClosureFnPointer { source } => {\n+                let source = unpack!(block = this.as_operand(block, source));\n+                block.and(Rvalue::Cast(CastKind::ClosureFnPointer, source, expr.ty))\n+            }\n             ExprKind::Unsize { source } => {\n                 let source = unpack!(block = this.as_operand(block, source));\n                 block.and(Rvalue::Cast(CastKind::Unsize, source, expr.ty))"}, {"sha": "35173bb598c7cfc0384a81a487a4c57ab3f13173", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -70,6 +70,7 @@ impl Category {\n             ExprKind::Cast { .. } |\n             ExprKind::Use { .. } |\n             ExprKind::ReifyFnPointer { .. } |\n+            ExprKind::ClosureFnPointer { .. } |\n             ExprKind::UnsafeFnPointer { .. } |\n             ExprKind::Unsize { .. } |\n             ExprKind::Repeat { .. } |"}, {"sha": "d9f71e36e211861592102781070c3f92e0e0f8d2", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -244,6 +244,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Cast { .. } |\n             ExprKind::Use { .. } |\n             ExprKind::ReifyFnPointer { .. } |\n+            ExprKind::ClosureFnPointer { .. } |\n             ExprKind::UnsafeFnPointer { .. } |\n             ExprKind::Unsize { .. } |\n             ExprKind::Repeat { .. } |"}, {"sha": "52e6446376830d3e6a0024057be8b47e26f0e933", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -60,6 +60,15 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                     kind: ExprKind::UnsafeFnPointer { source: expr.to_ref() },\n                 };\n             }\n+            Some((ty::adjustment::Adjust::ClosureFnPointer, adjusted_ty)) => {\n+                expr = Expr {\n+                    temp_lifetime: temp_lifetime,\n+                    temp_lifetime_was_shrunk: was_shrunk,\n+                    ty: adjusted_ty,\n+                    span: self.span,\n+                    kind: ExprKind::ClosureFnPointer { source: expr.to_ref() },\n+                };\n+            }\n             Some((ty::adjustment::Adjust::NeverToAny, adjusted_ty)) => {\n                 expr = Expr {\n                     temp_lifetime: temp_lifetime,"}, {"sha": "4ab45e14c99d5c0fc1f71ad1b0a64eaeff7e0e84", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -152,6 +152,9 @@ pub enum ExprKind<'tcx> {\n     ReifyFnPointer {\n         source: ExprRef<'tcx>,\n     },\n+    ClosureFnPointer {\n+        source: ExprRef<'tcx>,\n+    },\n     UnsafeFnPointer {\n         source: ExprRef<'tcx>,\n     },"}, {"sha": "04e809ef9d839bc3846faba74c8e24c0c08ebcaf", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -619,6 +619,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             Rvalue::CheckedBinaryOp(..) |\n             Rvalue::Cast(CastKind::ReifyFnPointer, ..) |\n             Rvalue::Cast(CastKind::UnsafeFnPointer, ..) |\n+            Rvalue::Cast(CastKind::ClosureFnPointer, ..) |\n             Rvalue::Cast(CastKind::Unsize, ..) => {}\n \n             Rvalue::Len(_) => {"}, {"sha": "e3772a09968ec467bb0b7f38ecd4ea112a9f50a2", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -447,6 +447,7 @@ fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Exp\n         Some(Adjust::NeverToAny) |\n         Some(Adjust::ReifyFnPointer) |\n         Some(Adjust::UnsafeFnPointer) |\n+        Some(Adjust::ClosureFnPointer) |\n         Some(Adjust::MutToConstPointer) => {}\n \n         Some(Adjust::DerefRef { autoderefs, .. }) => {"}, {"sha": "66722f883d7a0bbe5f45a9e3f089bc9c3eb804fa", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -1181,7 +1181,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n \n         assert!(fn_ty.kind() == llvm::TypeKind::Function,\n-                \"builder::{} not passed a function\", typ);\n+                \"builder::{} not passed a function, but {:?}\", typ, fn_ty);\n \n         let param_tys = fn_ty.func_params();\n "}, {"sha": "61b2c108fed7929118bac5c0f7a8dc5214507b84", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -489,6 +489,20 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                                                           self.output);\n                 }\n             }\n+            mir::Rvalue::Cast(mir::CastKind::ClosureFnPointer, ref operand, _) => {\n+                let source_ty = operand.ty(self.mir, self.scx.tcx());\n+                match source_ty.sty {\n+                    ty::TyClosure(def_id, substs) => {\n+                        let closure_trans_item =\n+                            create_fn_trans_item(self.scx,\n+                                                 def_id,\n+                                                 substs.substs,\n+                                                 self.param_substs);\n+                        self.output.push(closure_trans_item);\n+                    }\n+                    _ => bug!(),\n+                }\n+            }\n             mir::Rvalue::Box(..) => {\n                 let exchange_malloc_fn_def_id =\n                     self.scx"}, {"sha": "e7582061b54197553192527c58dced3572462c29", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -578,6 +578,35 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                             }\n                         }\n                     }\n+                    mir::CastKind::ClosureFnPointer => {\n+                        match operand.ty.sty {\n+                            ty::TyClosure(def_id, substs) => {\n+                                // Get the def_id for FnOnce::call_once\n+                                let fn_once = tcx.lang_items.fn_once_trait().unwrap();\n+                                let call_once = tcx\n+                                    .global_tcx().associated_items(fn_once)\n+                                    .find(|it| it.kind == ty::AssociatedKind::Method)\n+                                    .unwrap().def_id;\n+                                // Now create its substs [Closure, Tuple]\n+                                let input = tcx.closure_type(def_id, substs).sig.input(0);\n+                                let substs = Substs::for_item(tcx,\n+                                    call_once,\n+                                    |_, _| {bug!()},\n+                                    |def, _| { match def.index {\n+                                                0 => operand.ty.clone(),\n+                                                1 => input.skip_binder(),\n+                                                _ => bug!(),\n+                                            } }\n+                                );\n+\n+                                Callee::def(self.ccx, call_once, substs)\n+                                    .reify(self.ccx)\n+                            }\n+                            _ => {\n+                                bug!(\"{} cannot be cast to a fn ptr\", operand.ty)\n+                            }\n+                        }\n+                    }\n                     mir::CastKind::UnsafeFnPointer => {\n                         // this is a no-op at the LLVM level\n                         operand.llval"}, {"sha": "95bb1dd7e0f347c5ab1a29fcac4eba49cc1618f6", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -12,6 +12,7 @@ use llvm::{self, ValueRef};\n use rustc::ty::{self, Ty};\n use rustc::ty::cast::{CastTy, IntTy};\n use rustc::ty::layout::Layout;\n+use rustc::ty::subst::Substs;\n use rustc::mir::tcx::LvalueTy;\n use rustc::mir;\n use middle::lang_items::ExchangeMallocFnLangItem;\n@@ -190,6 +191,36 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                             }\n                         }\n                     }\n+                    mir::CastKind::ClosureFnPointer => {\n+                        match operand.ty.sty {\n+                            ty::TyClosure(def_id, substs) => {\n+                                // Get the def_id for FnOnce::call_once\n+                                let fn_once = bcx.tcx().lang_items.fn_once_trait().unwrap();\n+                                let call_once = bcx.tcx()\n+                                    .global_tcx().associated_items(fn_once)\n+                                    .find(|it| it.kind == ty::AssociatedKind::Method)\n+                                    .unwrap().def_id;\n+                                // Now create its substs [Closure, Tuple]\n+                                let input = bcx.tcx().closure_type(def_id, substs).sig.input(0);\n+                                let substs = Substs::for_item(bcx.tcx(),\n+                                    call_once,\n+                                    |_, _| {bug!()},\n+                                    |def, _| { match def.index {\n+                                                0 => operand.ty.clone(),\n+                                                1 => input.skip_binder(),\n+                                                _ => bug!(),\n+                                          } }\n+                                );\n+\n+                                OperandValue::Immediate(\n+                                    Callee::def(bcx.ccx, call_once, substs)\n+                                        .reify(bcx.ccx))\n+                            }\n+                            _ => {\n+                                bug!(\"{} cannot be cast to a fn ptr\", operand.ty)\n+                            }\n+                        }\n+                    }\n                     mir::CastKind::UnsafeFnPointer => {\n                         // this is a no-op at the LLVM level\n                         operand.val"}, {"sha": "e9ac0a58d3644b5ae7ca381db329bf1a652afe6c", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -63,13 +63,17 @@\n use check::FnCtxt;\n \n use rustc::hir;\n+use rustc::hir::def_id::DefId;\n use rustc::infer::{Coercion, InferOk, TypeTrace};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow};\n-use rustc::ty::{self, LvaluePreference, TypeAndMut, Ty};\n+use rustc::ty::{self, LvaluePreference, TypeVariants, TypeAndMut,\n+                Ty, ClosureSubsts};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::error::TypeError;\n use rustc::ty::relate::RelateResult;\n+use syntax::ast::NodeId;\n+use syntax::abi;\n use util::common::indent;\n \n use std::cell::RefCell;\n@@ -196,6 +200,11 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                 // unsafe qualifier.\n                 self.coerce_from_fn_pointer(a, a_f, b)\n             }\n+            ty::TyClosure(def_id_a, substs_a) => {\n+                // Non-capturing closures are coercible to\n+                // function pointers\n+                self.coerce_closure_to_fn(a, def_id_a, substs_a, b)\n+            }\n             _ => {\n                 // Otherwise, just use unification rules.\n                 self.unify_and_identity(a, b)\n@@ -551,6 +560,52 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn coerce_closure_to_fn(&self,\n+                           a: Ty<'tcx>,\n+                           def_id_a: DefId,\n+                           substs_a: ClosureSubsts<'tcx>,\n+                           b: Ty<'tcx>)\n+                           -> CoerceResult<'tcx> {\n+        //! Attempts to coerce from the type of a non-capturing closure\n+        //! into a function pointer.\n+        //!\n+\n+        let b = self.shallow_resolve(b);\n+\n+        let node_id_a :NodeId = self.tcx.hir.as_local_node_id(def_id_a).unwrap();\n+        match b.sty {\n+            ty::TyFnPtr(_) if self.tcx.with_freevars(node_id_a, |v| v.is_empty()) => {\n+                // We coerce the closure, which has fn type\n+                //     `extern \"rust-call\" fn((arg0,arg1,...)) -> _`\n+                // to\n+                //     `fn(arg0,arg1,...) -> _`\n+                let sig = self.closure_type(def_id_a, substs_a).sig;\n+                let converted_sig = sig.input(0).map_bound(|v| {\n+                    let params_iter = match v.sty {\n+                        TypeVariants::TyTuple(params, _) => {\n+                            params.into_iter().cloned()\n+                        }\n+                        _ => bug!(),\n+                    };\n+                    self.tcx.mk_fn_sig(params_iter,\n+                                       sig.output().skip_binder(),\n+                                       sig.variadic())\n+                });\n+                let fn_ty = self.tcx.mk_bare_fn(ty::BareFnTy {\n+                    unsafety: hir::Unsafety::Normal,\n+                    abi: abi::Abi::Rust,\n+                    sig: converted_sig,\n+                });\n+                let pointer_ty = self.tcx.mk_fn_ptr(&fn_ty);\n+                debug!(\"coerce_closure_to_fn(a={:?}, b={:?}, pty={:?})\",\n+                       a, b, pointer_ty);\n+                self.unify_and_identity(pointer_ty, b)\n+                    .map(|(ty, _)| (ty, Adjust::ClosureFnPointer))\n+            }\n+            _ => self.unify_and_identity(a, b),\n+        }\n+    }\n+\n     fn coerce_unsafe_ptr(&self,\n                          a: Ty<'tcx>,\n                          b: Ty<'tcx>,"}, {"sha": "a25e5f3f283dd1520d966b474619e4440f246641", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -412,6 +412,10 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                         adjustment::Adjust::MutToConstPointer\n                     }\n \n+                    adjustment::Adjust::ClosureFnPointer => {\n+                        adjustment::Adjust::ClosureFnPointer\n+                    }\n+\n                     adjustment::Adjust::UnsafeFnPointer => {\n                         adjustment::Adjust::UnsafeFnPointer\n                     }"}, {"sha": "c4d0bbdd0704c598292b4ae5f15d7085ad6d981f", "filename": "src/test/run-pass/closure-to-fn-coercion.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Ftest%2Frun-pass%2Fclosure-to-fn-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b32288369dbd13a9d721d6765ddc30d29e8c1/src%2Ftest%2Frun-pass%2Fclosure-to-fn-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-to-fn-coercion.rs?ref=1b9b32288369dbd13a9d721d6765ddc30d29e8c1", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-stage0: new feature, remove this when SNAP\n+\n+// #![feature(closure_to_fn_coercion)]\n+\n+const FOO :fn(u8) -> u8 = |v: u8| { v };\n+\n+const BAR: [fn(&mut u32); 5] = [\n+    |_: &mut u32| {},\n+    |v: &mut u32| *v += 1,\n+    |v: &mut u32| *v += 2,\n+    |v: &mut u32| *v += 3,\n+    |v: &mut u32| *v += 4,\n+];\n+fn func_specific() -> (fn() -> u32) {\n+    || return 42\n+}\n+\n+fn main() {\n+    // Items\n+    assert_eq!(func_specific()(), 42);\n+    let foo :fn(u8) -> u8 = |v: u8| { v };\n+    assert_eq!(foo(31), 31);\n+    // Constants\n+    assert_eq!(FOO(31), 31);\n+    let mut a :u32 = 0;\n+    assert_eq!({BAR[0](&mut a); a }, 0);\n+    assert_eq!({BAR[1](&mut a); a }, 1);\n+    assert_eq!({BAR[2](&mut a); a }, 3);\n+    assert_eq!({BAR[3](&mut a); a }, 6);\n+    assert_eq!({BAR[4](&mut a); a }, 10);\n+}"}]}