{"sha": "b4802b80540408a97d43e0810f2b4bea60d18612", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ODAyYjgwNTQwNDA4YTk3ZDQzZTA4MTBmMmI0YmVhNjBkMTg2MTI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-04T17:20:00Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-04T17:20:18Z"}, "message": "Fix codegen of unimpl in simd_extract and unimpl simd_insert", "tree": {"sha": "96245c050a801ca9bfda9e202ac0782166bcbe3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96245c050a801ca9bfda9e202ac0782166bcbe3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4802b80540408a97d43e0810f2b4bea60d18612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4802b80540408a97d43e0810f2b4bea60d18612", "html_url": "https://github.com/rust-lang/rust/commit/b4802b80540408a97d43e0810f2b4bea60d18612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4802b80540408a97d43e0810f2b4bea60d18612/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a", "html_url": "https://github.com/rust-lang/rust/commit/1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "cd163aa7ed372cb56b9fdeb02232cda9ab6cc0e6", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b4802b80540408a97d43e0810f2b4bea60d18612/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4802b80540408a97d43e0810f2b4bea60d18612/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=b4802b80540408a97d43e0810f2b4bea60d18612", "patch": "@@ -104,6 +104,32 @@ pub fn codegen_simd_intrinsic_call<'tcx>(\n             }\n         };\n \n+        simd_insert, (c base, o idx, v val) {\n+            let idx_const = if let Some(idx_const) = crate::constant::mir_operand_get_const_val(fx, idx) {\n+                idx_const\n+            } else {\n+                fx.tcx.sess.span_warn(\n+                    fx.mir.span,\n+                    \"`#[rustc_arg_required_const(..)]` is not yet supported. Calling this function will panic.\",\n+                );\n+                crate::trap::trap_unimplemented(fx, \"`#[rustc_arg_required_const(..)]` is not yet supported.\");\n+                return;\n+            };\n+\n+            let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).expect(&format!(\"kind not scalar: {:?}\", idx_const));\n+            let (_lane_type, lane_count) = lane_type_and_count(fx.tcx, base.layout());\n+            if idx >= lane_count.into() {\n+                fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count));\n+            }\n+\n+            // FIXME implement this\n+            fx.tcx.sess.span_warn(\n+                fx.mir.span,\n+                \"`simd_insert` is not yet implemented. Calling this function will panic.\",\n+            );\n+            crate::trap::trap_unimplemented(fx, \"`simd_insert` is not yet implemented\");\n+        };\n+\n         simd_extract, (c v, o idx) {\n             let idx_const = if let Some(idx_const) = crate::constant::mir_operand_get_const_val(fx, idx) {\n                 idx_const\n@@ -112,7 +138,7 @@ pub fn codegen_simd_intrinsic_call<'tcx>(\n                     fx.mir.span,\n                     \"`#[rustc_arg_required_const(..)]` is not yet supported. Calling this function will panic.\",\n                 );\n-                crate::trap::trap_panic(fx, \"`#[rustc_arg_required_const(..)]` is not yet supported.\");\n+                crate::trap::trap_unimplemented(fx, \"`#[rustc_arg_required_const(..)]` is not yet supported.\");\n                 return;\n             };\n "}]}