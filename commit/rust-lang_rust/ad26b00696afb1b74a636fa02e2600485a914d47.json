{"sha": "ad26b00696afb1b74a636fa02e2600485a914d47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMjZiMDA2OTZhZmIxYjc0YTYzNmZhMDJlMjYwMDQ4NWE5MTRkNDc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-26T23:25:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-29T23:43:18Z"}, "message": "rustc: Generate fewer landing pads", "tree": {"sha": "d9978ca27343142bbc4adb52e289e8d6b09234c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9978ca27343142bbc4adb52e289e8d6b09234c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad26b00696afb1b74a636fa02e2600485a914d47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad26b00696afb1b74a636fa02e2600485a914d47", "html_url": "https://github.com/rust-lang/rust/commit/ad26b00696afb1b74a636fa02e2600485a914d47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad26b00696afb1b74a636fa02e2600485a914d47/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15de9b3c957eae9bfcfb8d34fc75377266512acd", "url": "https://api.github.com/repos/rust-lang/rust/commits/15de9b3c957eae9bfcfb8d34fc75377266512acd", "html_url": "https://github.com/rust-lang/rust/commit/15de9b3c957eae9bfcfb8d34fc75377266512acd"}], "stats": {"total": 148, "additions": 143, "deletions": 5}, "files": [{"sha": "50730d0ed869d6f4f9b9fcb1b62932ef337e2511", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=ad26b00696afb1b74a636fa02e2600485a914d47", "patch": "@@ -915,35 +915,64 @@ fn type_needs_unwind_cleanup(cx: ctxt, ty: t) -> bool {\n       none { }\n     }\n \n+    let tycache = new_ty_hash();\n+    let needs_unwind_cleanup =\n+        type_needs_unwind_cleanup_(cx, ty, tycache, false);\n+    cx.needs_unwind_cleanup_cache.insert(ty, needs_unwind_cleanup);\n+    ret needs_unwind_cleanup;\n+}\n+\n+fn type_needs_unwind_cleanup_(cx: ctxt, ty: t,\n+                              tycache: map::hashmap<t, ()>,\n+                              encountered_box: bool) -> bool {\n+\n     // Prevent infinite recursion\n-    cx.needs_unwind_cleanup_cache.insert(ty, false);\n+    alt tycache.find(ty) {\n+      some(_) { ret false; }\n+      none { tycache.insert(ty, ()); }\n+    }\n \n+    let mut encountered_box = encountered_box;\n     let mut needs_unwind_cleanup = false;\n     maybe_walk_ty(ty) {|ty|\n         alt get(ty).struct {\n+          ty_box(_) | ty_opaque_box {\n+            encountered_box = true;\n+            true\n+          }\n           ty_nil | ty_bot | ty_bool |\n           ty_int(_) | ty_uint(_) | ty_float(_) |\n-          ty_box(_) | ty_rec(_) | ty_tup(_) {\n+          ty_rec(_) | ty_tup(_) | ty_ptr(_) {\n             true\n           }\n           ty_enum(did, tps) {\n             for v in *enum_variants(cx, did) {\n                 for aty in v.args {\n                     let t = substitute_type_params(cx, tps, aty);\n-                    needs_unwind_cleanup |= type_needs_unwind_cleanup(cx, t);\n+                    needs_unwind_cleanup |=\n+                        type_needs_unwind_cleanup_(cx, t, tycache,\n+                                                   encountered_box);\n                 }\n             }\n             !needs_unwind_cleanup\n           }\n+          ty_uniq(_) | ty_str | ty_vec(_) | ty_res(_, _, _) {\n+            // Once we're inside a box, the annihilator will find\n+            // it and destroy it.\n+            if !encountered_box {\n+                needs_unwind_cleanup = true;\n+                false\n+            } else {\n+                true\n+            }\n+          }\n           _ {\n             needs_unwind_cleanup = true;\n             false\n           }\n         }\n     }\n \n-    cx.needs_unwind_cleanup_cache.insert(ty, needs_unwind_cleanup);\n-\n     ret needs_unwind_cleanup;\n }\n "}, {"sha": "b164338c63ca015baf2b5f705bb4104a98a243bb", "filename": "src/test/run-fail/unwind-box-fn-unique.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs?ref=ad26b00696afb1b74a636fa02e2600485a914d47", "patch": "@@ -0,0 +1,14 @@\n+// error-pattern:fail\n+\n+fn failfn() {\n+    fail;\n+}\n+\n+fn main() {\n+    let y = ~0;\n+    let x = @fn~() {\n+        log(error, y);\n+    };\n+    failfn();\n+    log(error, x);\n+}\n\\ No newline at end of file"}, {"sha": "645822f292b07415ee95b63394d05ccfd12734b3", "filename": "src/test/run-fail/unwind-box-fn.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs?ref=ad26b00696afb1b74a636fa02e2600485a914d47", "patch": "@@ -0,0 +1,14 @@\n+// error-pattern:fail\n+\n+fn failfn() {\n+    fail;\n+}\n+\n+fn main() {\n+    let y = ~0;\n+    let x = @fn@() {\n+        log(error, y);\n+    };\n+    failfn();\n+    log(error, x);\n+}\n\\ No newline at end of file"}, {"sha": "b9c674bd00813c11b65f57f808a80fe2dd103649", "filename": "src/test/run-fail/unwind-box-iface.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Ftest%2Frun-fail%2Funwind-box-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Ftest%2Frun-fail%2Funwind-box-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-iface.rs?ref=ad26b00696afb1b74a636fa02e2600485a914d47", "patch": "@@ -0,0 +1,19 @@\n+// error-pattern:fail\n+\n+fn failfn() {\n+    fail;\n+}\n+\n+iface i {\n+    fn foo();\n+}\n+\n+impl of i for ~int {\n+    fn foo() { }\n+}\n+\n+fn main() {\n+    let x = ~0 as i;\n+    failfn();\n+    log(error, x);\n+}\n\\ No newline at end of file"}, {"sha": "e076f89103166aa603e7103c07332c809cc8f4d8", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=ad26b00696afb1b74a636fa02e2600485a914d47", "patch": "@@ -0,0 +1,18 @@\n+// error-pattern:fail\n+\n+fn failfn() {\n+    fail;\n+}\n+\n+resource r(v: *int) unsafe {\n+    let v2: ~int = unsafe::reinterpret_cast(v);\n+}\n+\n+fn main() unsafe {\n+    let i1 = ~0;\n+    let i1p = unsafe::reinterpret_cast(i1);\n+    unsafe::forget(i1);\n+    let x = @r(i1p);\n+    failfn();\n+    log(error, x);\n+}\n\\ No newline at end of file"}, {"sha": "e0cd34b784b9574daf4416f379736e1ed6b8080f", "filename": "src/test/run-fail/unwind-box-str.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-str.rs?ref=ad26b00696afb1b74a636fa02e2600485a914d47", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern:fail\n+\n+fn failfn() {\n+    fail;\n+}\n+\n+fn main() {\n+    let x = @\"hi\";\n+    failfn();\n+    log(error, x);\n+}\n\\ No newline at end of file"}, {"sha": "023910eeecdbdeba7e7394faabdb8431a99e1e5d", "filename": "src/test/run-fail/unwind-box-unique-unique.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs?ref=ad26b00696afb1b74a636fa02e2600485a914d47", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern:fail\n+\n+fn failfn() {\n+    fail;\n+}\n+\n+fn main() {\n+    let x = @~~0;\n+    failfn();\n+    log(error, x);\n+}\n\\ No newline at end of file"}, {"sha": "18ed2768fa8c512562d1ad40ab286adc832253cb", "filename": "src/test/run-fail/unwind-box-unique.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs?ref=ad26b00696afb1b74a636fa02e2600485a914d47", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern:fail\n+\n+fn failfn() {\n+    fail;\n+}\n+\n+fn main() {\n+    let x = @~0;\n+    failfn();\n+    log(error, x);\n+}\n\\ No newline at end of file"}, {"sha": "7aa411ab01747c48bf75c19daecb898d00f7c9ff", "filename": "src/test/run-fail/unwind-box-vec.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad26b00696afb1b74a636fa02e2600485a914d47/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs?ref=ad26b00696afb1b74a636fa02e2600485a914d47", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern:fail\n+\n+fn failfn() {\n+    fail;\n+}\n+\n+fn main() {\n+    let x = @[0, 1, 2, 3, 4, 5];\n+    failfn();\n+    log(error, x);\n+}\n\\ No newline at end of file"}]}