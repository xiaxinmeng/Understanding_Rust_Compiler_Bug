{"sha": "72a3667eb30705826a99bfa2b9478c4037589dbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYTM2NjdlYjMwNzA1ODI2YTk5YmZhMmI5NDc4YzQwMzc1ODlkYmM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-29T20:03:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-03T21:13:52Z"}, "message": "Allow tail expressions even in no_value blocks.  Type checker\nwill guarantee they have unit type.", "tree": {"sha": "52621f52c0d4ac8a0400d0e5c20bb52f999acef3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52621f52c0d4ac8a0400d0e5c20bb52f999acef3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72a3667eb30705826a99bfa2b9478c4037589dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72a3667eb30705826a99bfa2b9478c4037589dbc", "html_url": "https://github.com/rust-lang/rust/commit/72a3667eb30705826a99bfa2b9478c4037589dbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72a3667eb30705826a99bfa2b9478c4037589dbc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43a9d50a74096c73f268f0600f6b1287a1cee880", "url": "https://api.github.com/repos/rust-lang/rust/commits/43a9d50a74096c73f268f0600f6b1287a1cee880", "html_url": "https://github.com/rust-lang/rust/commit/43a9d50a74096c73f268f0600f6b1287a1cee880"}], "stats": {"total": 152, "additions": 97, "deletions": 55}, "files": [{"sha": "9c3c206f593693136f928a74475c7bf51d6348cf", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=72a3667eb30705826a99bfa2b9478c4037589dbc", "patch": "@@ -1741,7 +1741,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         let element_ty = demand::simple(fcx, local.span, element_ty,\n                                         ty::mk_var(fcx.ccx.tcx, locid));\n         let bot = check_decl_local(fcx, local);\n-        check_block(fcx, body);\n+        check_block_no_value(fcx, body);\n         // Unify type of decl with element type of the seq\n         demand::simple(fcx, local.span,\n                        ty::node_id_to_type(fcx.ccx.tcx, local.node.id),\n@@ -1756,22 +1756,27 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n     fn check_then_else(fcx: @fn_ctxt, thn: ast::blk,\n                        elsopt: option::t<@ast::expr>, id: ast::node_id,\n                        _sp: span) -> bool {\n-        let then_bot = check_block(fcx, thn);\n-        let els_bot = false;\n-        let if_t =\n+        let (if_t, if_bot) =\n             alt elsopt {\n               some(els) {\n+                let thn_bot = check_block(fcx, thn);\n                 let thn_t = block_ty(fcx.ccx.tcx, thn);\n-                els_bot = check_expr_with(fcx, els, thn_t);\n-                let elsopt_t = expr_ty(fcx.ccx.tcx, els);\n-                if !ty::type_is_bot(fcx.ccx.tcx, elsopt_t) {\n-                    elsopt_t\n-                } else { thn_t }\n+                let els_bot = check_expr_with(fcx, els, thn_t);\n+                let els_t = expr_ty(fcx.ccx.tcx, els);\n+                let if_t = if !ty::type_is_bot(fcx.ccx.tcx, els_t) {\n+                    els_t\n+                } else {\n+                    thn_t\n+                };\n+                (if_t, thn_bot & els_bot)\n+              }\n+              none. {\n+                check_block_no_value(fcx, thn);\n+                (ty::mk_nil(fcx.ccx.tcx), false)\n               }\n-              none. { ty::mk_nil(fcx.ccx.tcx) }\n             };\n         write::ty_only_fixup(fcx, id, if_t);\n-        ret then_bot & els_bot;\n+        ret if_bot;\n     }\n \n     // Checks the compatibility\n@@ -1993,12 +1998,12 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n       }\n       ast::expr_while(cond, body) {\n         bot = check_expr_with(fcx, cond, ty::mk_bool(tcx));\n-        check_block(fcx, body);\n+        check_block_no_value(fcx, body);\n         write::ty_only_fixup(fcx, id, ty::mk_nil(tcx));\n       }\n       ast::expr_do_while(body, cond) {\n         bot = check_expr_with(fcx, cond, ty::mk_bool(tcx)) |\n-              check_block(fcx, body);\n+              check_block_no_value(fcx, body);\n         write::ty_only_fixup(fcx, id, block_ty(tcx, body));\n       }\n       ast::expr_alt(expr, arms) {\n@@ -2490,6 +2495,16 @@ fn check_stmt(fcx: @fn_ctxt, stmt: @ast::stmt) -> bool {\n     ret bot;\n }\n \n+fn check_block_no_value(fcx: @fn_ctxt, blk: ast::blk) -> bool {\n+    let bot = check_block(fcx, blk);\n+    if !bot {\n+        let blkty = ty::node_id_to_monotype(fcx.ccx.tcx, blk.node.id);\n+        let nilty = ty::mk_nil(fcx.ccx.tcx);\n+        demand::simple(fcx, blk.span, nilty, blkty);\n+    }\n+    ret bot;\n+}\n+\n fn check_block(fcx0: @fn_ctxt, blk: ast::blk) -> bool {\n     let fcx = alt blk.node.rules {\n       ast::unchecked_blk. { @{purity: ast::impure_fn with *fcx0} }"}, {"sha": "b13f0cff92ac3f4b5f6bef273d0f4ccfe9d3ceaf", "filename": "src/comp/syntax/parse/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs?ref=72a3667eb30705826a99bfa2b9478c4037589dbc", "patch": "@@ -56,10 +56,10 @@ fn parse_companion_mod(cx: ctx, prefix: str, suffix: option::t<str>)\n     -> ([@ast::view_item], [@ast::item], [ast::attribute]) {\n \n     fn companion_file(prefix: str, suffix: option::t<str>) -> str {\n-        alt suffix {\n+        ret alt suffix {\n           option::some(s) { fs::connect(prefix, s) }\n           option::none. { prefix }\n-        } + \".rs\"\n+        } + \".rs\";\n     }\n \n     fn file_exists(path: str) -> bool {"}, {"sha": "a1e4ddbe50238bacbe65a6b895d127f96e782480", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=72a3667eb30705826a99bfa2b9478c4037589dbc", "patch": "@@ -1232,11 +1232,6 @@ fn parse_if_expr_1(p: parser) ->\n         let elexpr = parse_else_expr(p);\n         els = some(elexpr);\n         hi = elexpr.span.hi;\n-    } else if !option::is_none(thn.node.expr) {\n-        let sp = option::get(thn.node.expr).span;\n-        p.span_fatal(sp, \"`if` without `else` can not produce a result\");\n-        //TODO: If a suggestion mechanism appears, suggest that the\n-        //user may have forgotten a ';'\n     }\n     ret {cond: cond, then: thn, els: els, lo: lo, hi: hi};\n }\n@@ -1596,32 +1591,29 @@ fn parse_stmt(p: parser) -> @ast::stmt {\n }\n \n fn expr_is_complete(p: parser, e: @ast::expr) -> bool {\n+    log(debug, (\"expr_is_complete\", p.get_restriction(),\n+                print::pprust::expr_to_str(e),\n+                expr_requires_semi_to_be_stmt(e)));\n     ret p.get_restriction() == RESTRICT_STMT_EXPR &&\n         !expr_requires_semi_to_be_stmt(e);\n }\n \n fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n     alt e.node {\n-      ast::expr_if(_, th, els) | ast::expr_if_check(_, th, els) {\n-        if option::is_none(els) { false }\n-        else { !option::is_none(th.node.expr) ||\n-                  expr_requires_semi_to_be_stmt(option::get(els)) }\n+      ast::expr_if(_, _, _) | ast::expr_if_check(_, _, _)\n+      | ast::expr_alt(_, _) | ast::expr_block(_)\n+      | ast::expr_do_while(_, _) | ast::expr_while(_, _)\n+      | ast::expr_for(_, _, _)\n+      | ast::expr_call(_, _, true) {\n+        false\n       }\n-      ast::expr_alt(_, arms) {\n-        vec::any(arms, {|arm| !option::is_none(arm.body.node.expr)})\n-      }\n-      ast::expr_block(blk) | ast::expr_while(_, blk) |\n-      ast::expr_for(_, _, blk) | ast::expr_do_while(blk, _) {\n-        !option::is_none(blk.node.expr)\n-      }\n-      ast::expr_call(_, _, true) { false }\n       _ { true }\n     }\n }\n \n fn stmt_to_expr(stmt: @ast::stmt) -> option::t<@ast::expr> {\n     alt stmt.node {\n-      ast::stmt_expr(e, _) when expr_requires_semi_to_be_stmt(e) { some(e) }\n+      ast::stmt_expr(e, _) { some(e) }\n       _ { none }\n     }\n }\n@@ -1655,14 +1647,10 @@ fn parse_block(p: parser) -> ast::blk {\n }\n \n fn parse_block_no_value(p: parser) -> ast::blk {\n-    let blk = parse_block(p);\n-    if !option::is_none(blk.node.expr) {\n-        let sp = option::get(blk.node.expr).span;\n-        p.span_fatal(sp, \"this block must not have a result\");\n-        //TODO: If a suggestion mechanism appears, suggest that the\n-        //user may have forgotten a ';'\n-    }\n-    ret blk;\n+    // We parse blocks that cannot have a value the same as any other block;\n+    // the type checker will make sure that the tail expression (if any) has\n+    // unit type.\n+    ret parse_block(p);\n }\n \n // Precondition: already parsed the '{' or '#{'"}, {"sha": "da592b6d3c10d014f80a66ba4a32133015c763e6", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=72a3667eb30705826a99bfa2b9478c4037589dbc", "patch": "@@ -558,11 +558,39 @@ fn print_attribute(s: ps, attr: ast::attribute) {\n     word(s.s, \"]\");\n }\n \n+// An expression that begins with a dual-form statement/expression like `{\n+// ... }-10` would be parsed as `{ ... };-10` unless parentheses are used (ie,\n+// `({...}-10)`).  These parentheses are not, however, preserved by the\n+// parser. This function specifies whether parentheses must be inserted.\n+fn stmt_expr_requires_parens(ex: @ast::expr) -> bool {\n+    fn helper(ex: @ast::expr, inner: bool) -> bool {\n+        alt ex.node {\n+          ast::expr_call(subex, _, _) | ast::expr_binary(_, subex, _) {\n+            be helper(subex, true);\n+          }\n+          _ when !inner { ret false; }\n+          _ { ret !parse::parser::expr_requires_semi_to_be_stmt(ex); }\n+        }\n+    }\n+    ret helper(ex, false);\n+}\n+\n fn print_stmt(s: ps, st: ast::stmt) {\n     maybe_print_comment(s, st.span.lo);\n     alt st.node {\n-      ast::stmt_decl(decl, _) { print_decl(s, decl); }\n-      ast::stmt_expr(expr, _) { space_if_not_bol(s); print_expr(s, expr); }\n+      ast::stmt_decl(decl, _) {\n+        print_decl(s, decl);\n+      }\n+      ast::stmt_expr(expr, _) {\n+        space_if_not_bol(s);\n+        if stmt_expr_requires_parens(expr) {\n+            popen(s);\n+            print_expr(s, expr);\n+            pclose(s);\n+        } else {\n+            print_expr(s, expr);\n+        }\n+      }\n     }\n     if parse::parser::stmt_ends_with_semi(st) { word(s.s, \";\"); }\n     maybe_print_trailing_comment(s, st.span, none::<uint>);"}, {"sha": "6b821dc6223182ca1ceba616052162ce79743a86", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=72a3667eb30705826a99bfa2b9478c4037589dbc", "patch": "@@ -443,7 +443,7 @@ fn iter_chars(rope: rope, it: block(char)) {\n     loop_chars(rope) {|x|\n         it(x);\n         ret true\n-    }\n+    };\n }\n \n /*"}, {"sha": "f842b0f02b496f19d5822d1ea66c88c85cb643dc", "filename": "src/test/compile-fail/block-must-not-have-result-do.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-do.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-do.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-do.rs?ref=72a3667eb30705826a99bfa2b9478c4037589dbc", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:this block must not have a result\n+// error-pattern:mismatched types: expected `()` but found `bool`\n \n fn main() {\n     do {"}, {"sha": "d2e7edbfc0f19fb98e991f3819cd823475f85aa3", "filename": "src/test/compile-fail/block-must-not-have-result-for.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-for.rs?ref=72a3667eb30705826a99bfa2b9478c4037589dbc", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:this block must not have a result\n+// error-pattern:mismatched types: expected `()` but found `bool`\n \n fn main() {\n     for i in [0] {"}, {"sha": "d617aba2fdec230bb4fd3f9f594243141a795809", "filename": "src/test/compile-fail/block-must-not-have-result-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs?ref=72a3667eb30705826a99bfa2b9478c4037589dbc", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:this block must not have a result\n+// error-pattern:mismatched types: expected `()` but found `bool`\n \n resource r(i: int) {\n     true"}, {"sha": "7f172998c2859391f39ef55c2dad022d72e163ad", "filename": "src/test/compile-fail/block-must-not-have-result-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs?ref=72a3667eb30705826a99bfa2b9478c4037589dbc", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:this block must not have a result\n+// error-pattern:mismatched types: expected `()` but found `bool`\n \n fn main() {\n     while true {"}, {"sha": "4e422c970c6853c08c2eaa4071d6f554318cd303", "filename": "src/test/compile-fail/forgot-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fcompile-fail%2Fforgot-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fcompile-fail%2Fforgot-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforgot-ret.rs?ref=72a3667eb30705826a99bfa2b9478c4037589dbc", "patch": "@@ -3,6 +3,6 @@\n \n fn god_exists(a: int) -> bool { be god_exists(a); }\n \n-fn f(a: int) -> int { if god_exists(a) { ret 5; } }\n+fn f(a: int) -> int { if god_exists(a) { ret 5; }; }\n \n fn main() { f(12); }"}, {"sha": "2454f4f37bf69515cfd870869a77974fdde801ee", "filename": "src/test/compile-fail/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs?ref=72a3667eb30705826a99bfa2b9478c4037589dbc", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:`if` without `else` can not produce a result\n+// error-pattern:mismatched types: expected `()` but found `bool`\n \n fn main() {\n     let a = if true { true };"}, {"sha": "26a9febd3c780c1a2df207f64ed55b150d918f70", "filename": "src/test/compile-fail/missing-return2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fcompile-fail%2Fmissing-return2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fcompile-fail%2Fmissing-return2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-return2.rs?ref=72a3667eb30705826a99bfa2b9478c4037589dbc", "patch": "@@ -3,7 +3,7 @@\n fn f() -> int {\n     // Make sure typestate doesn't interpret this alt expression\n     // as the function result\n-    alt true { true { } }\n+    alt true { true { } };\n }\n \n fn main() { }"}, {"sha": "5f9d57f94a732b693bd50a04b9d82ab8d814fa95", "filename": "src/test/pretty/disamb-stmt-expr.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fpretty%2Fdisamb-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fpretty%2Fdisamb-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdisamb-stmt-expr.rs?ref=72a3667eb30705826a99bfa2b9478c4037589dbc", "patch": "@@ -0,0 +1,8 @@\n+// pp-exact\n+\n+// Here we check that the parentheses around the body of `wsucc()` are\n+// preserved.  They are needed to disambiguate `{ret n+1}; - 0` from\n+// `({ret n+1}-0)`.\n+\n+fn wsucc(n: int) -> int { ({ ret n + 1 } - 0); }\n+fn main() { }"}, {"sha": "21eca8fefacf284ced5ebf4e8898934baa191375", "filename": "src/test/run-pass/early-ret-binop-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs?ref=72a3667eb30705826a99bfa2b9478c4037589dbc", "patch": "@@ -1,2 +1,2 @@\n-fn wsucc(n: int) -> int { { ret n + 1 } + 0; }\n+fn wsucc(n: int) -> int { ({ ret n + 1 } + 0); }\n fn main() { }"}, {"sha": "118bec708b88bc649ec7be552f56c1db9137dc8f", "filename": "src/test/run-pass/early-ret-binop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Frun-pass%2Fearly-ret-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Frun-pass%2Fearly-ret-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fearly-ret-binop.rs?ref=72a3667eb30705826a99bfa2b9478c4037589dbc", "patch": "@@ -1,2 +1,2 @@\n-fn wsucc(n: int) -> int { { ret n + 1 } == 0; }\n+fn wsucc(n: int) -> int { ({ ret n + 1 } == 0); }\n fn main() { }"}, {"sha": "fd773063e8d003d410a38e920d8112b0b57f3656", "filename": "src/test/stdtest/os.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fstdtest%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a3667eb30705826a99bfa2b9478c4037589dbc/src%2Ftest%2Fstdtest%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fos.rs?ref=72a3667eb30705826a99bfa2b9478c4037589dbc", "patch": "@@ -14,6 +14,7 @@ fn test_setenv() {\n }\n \n #[test]\n+#[ignore(reason = \"fails periodically on mac\")]\n fn test_setenv_overwrite() {\n     setenv(\"NAME2\", \"1\");\n     setenv(\"NAME2\", \"2\");\n@@ -23,12 +24,14 @@ fn test_setenv_overwrite() {\n // Windows GetEnvironmentVariable requires some extra work to make sure\n // the buffer the variable is copied into is the right size\n #[test]\n+#[ignore(reason = \"fails periodically on mac\")]\n fn test_getenv_big() {\n     let s = \"\";\n     let i = 0;\n     while i < 100 { s += \"aaaaaaaaaa\"; i += 1; }\n-    setenv(\"NAME3\", s);\n-    assert (getenv(\"NAME3\") == option::some(s));\n+    setenv(\"test_getenv_big\", s);\n+    log(debug, s);\n+    assert (getenv(\"test_getenv_big\") == option::some(s));\n }\n \n #[test]"}]}