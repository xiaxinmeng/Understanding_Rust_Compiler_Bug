{"sha": "3468b8d42c0c5a8510a2810747221354dbbb8eff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NjhiOGQ0MmMwYzVhODUxMGEyODEwNzQ3MjIxMzU0ZGJiYjhlZmY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-31T00:44:43Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-31T00:44:43Z"}, "message": "Remove PatWildMulti", "tree": {"sha": "7f75b4ab42df74256a400cb1904c53a061531a10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f75b4ab42df74256a400cb1904c53a061531a10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3468b8d42c0c5a8510a2810747221354dbbb8eff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3468b8d42c0c5a8510a2810747221354dbbb8eff", "html_url": "https://github.com/rust-lang/rust/commit/3468b8d42c0c5a8510a2810747221354dbbb8eff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3468b8d42c0c5a8510a2810747221354dbbb8eff/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc8d398e28b6b1918ef85479c2d040dfd0fe582d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8d398e28b6b1918ef85479c2d040dfd0fe582d", "html_url": "https://github.com/rust-lang/rust/commit/cc8d398e28b6b1918ef85479c2d040dfd0fe582d"}], "stats": {"total": 136, "additions": 47, "deletions": 89}, "files": [{"sha": "9f83cb9fddea4804bde0d67c61a43d1463c4c559", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             hir::PatQPath(..) |\n             hir::PatLit(..) |\n             hir::PatRange(..) |\n-            hir::PatWild(_) => {\n+            hir::PatWild => {\n                 self.add_ast_node(pat.id, &[pred])\n             }\n "}, {"sha": "2ce57ec862fd6275d2c4ed390cfe0baba27cf172", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -176,7 +176,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n         if mode == Mode::ConstFn {\n             for arg in &fd.inputs {\n                 match arg.pat.node {\n-                    hir::PatWild(_) => {}\n+                    hir::PatWild => {}\n                     hir::PatIdent(hir::BindByValue(hir::MutImmutable), _, None) => {}\n                     _ => {\n                         span_err!(self.tcx.sess, arg.pat.span, E0022,"}, {"sha": "fce96457d174b2dc10d2a072eec7a575a9f716d6", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -47,7 +47,7 @@ use util::nodemap::FnvHashMap;\n \n pub const DUMMY_WILD_PAT: &'static Pat = &Pat {\n     id: DUMMY_NODE_ID,\n-    node: hir::PatWild(hir::PatWildSingle),\n+    node: hir::PatWild,\n     span: DUMMY_SP\n };\n \n@@ -521,7 +521,7 @@ fn construct_witness<'a,'tcx>(cx: &MatchCheckCtxt<'a,'tcx>, ctor: &Constructor,\n             if let VariantKind::Struct = v.kind() {\n                 let field_pats: Vec<_> = v.fields.iter()\n                     .zip(pats)\n-                    .filter(|&(_, ref pat)| pat.node != hir::PatWild(hir::PatWildSingle))\n+                    .filter(|&(_, ref pat)| pat.node != hir::PatWild)\n                     .map(|(field, pat)| Spanned {\n                         span: DUMMY_SP,\n                         node: hir::FieldPat {\n@@ -553,7 +553,7 @@ fn construct_witness<'a,'tcx>(cx: &MatchCheckCtxt<'a,'tcx>, ctor: &Constructor,\n                     },\n                     _ => unreachable!()\n                 },\n-                ty::TyStr => hir::PatWild(hir::PatWildSingle),\n+                ty::TyStr => hir::PatWild,\n \n                 _ => {\n                     assert_eq!(pats_len, 1);\n@@ -570,7 +570,7 @@ fn construct_witness<'a,'tcx>(cx: &MatchCheckCtxt<'a,'tcx>, ctor: &Constructor,\n         _ => {\n             match *ctor {\n                 ConstantValue(ref v) => hir::PatLit(const_val_to_expr(v)),\n-                _ => hir::PatWild(hir::PatWildSingle),\n+                _ => hir::PatWild,\n             }\n         }\n     };\n@@ -799,7 +799,7 @@ fn pat_constructors(cx: &MatchCheckCtxt, p: &Pat,\n             },\n         hir::PatBox(_) | hir::PatTup(_) | hir::PatRegion(..) =>\n             vec!(Single),\n-        hir::PatWild(_) =>\n+        hir::PatWild =>\n             vec!(),\n     }\n }\n@@ -862,7 +862,7 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n         id: pat_id, ref node, span: pat_span\n     } = raw_pat(r[col]);\n     let head: Option<Vec<&Pat>> = match *node {\n-        hir::PatWild(_) =>\n+        hir::PatWild =>\n             Some(vec![DUMMY_WILD_PAT; arity]),\n \n         hir::PatIdent(_, _, _) => {"}, {"sha": "1a1a9d4b1b48ff2b850631d17e55a0e70cb247a6", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -142,7 +142,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             _ => self.tcx.sess.span_bug(lhs.span, \"non-ADT in struct pattern\")\n         };\n         for pat in pats {\n-            if let hir::PatWild(hir::PatWildSingle) = pat.node.pat.node {\n+            if let hir::PatWild = pat.node.pat.node {\n                 continue;\n             }\n             self.insert_def_id(variant.field_named(pat.node.name).did);"}, {"sha": "6e469da33f98e14de55cf2712307621ed5b07943", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -1141,7 +1141,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                     // will visit the substructure recursively.\n                 }\n \n-                hir::PatWild(_) | hir::PatTup(..) | hir::PatBox(..) |\n+                hir::PatWild | hir::PatTup(..) | hir::PatBox(..) |\n                 hir::PatRegion(..) | hir::PatLit(..) | hir::PatRange(..) |\n                 hir::PatVec(..) => {\n                     // Similarly, each of these cases does not"}, {"sha": "0844be376413425ddd68daa0d8af4c8d09c236f9", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -1211,7 +1211,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n         };\n \n         match pat.node {\n-          hir::PatWild(_) => {\n+          hir::PatWild => {\n             // _\n           }\n "}, {"sha": "c3555273850bc4da4a5b022a79ac27147c8d460f", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -101,7 +101,7 @@ pub fn pat_is_binding(dm: &DefMap, pat: &hir::Pat) -> bool {\n pub fn pat_is_binding_or_wild(dm: &DefMap, pat: &hir::Pat) -> bool {\n     match pat.node {\n         hir::PatIdent(..) => pat_is_binding(dm, pat),\n-        hir::PatWild(_) => true,\n+        hir::PatWild => true,\n         _ => false\n     }\n }"}, {"sha": "c8bf2bafd71557ddc8233789314835bd4d3a7765", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -543,11 +543,6 @@ pub fn check_pat(tcx: &ty::ctxt, pat: &hir::Pat,\n         // Foo(a, b, c)\n         hir::PatEnum(_, Some(ref pat_fields)) => {\n             for (field, struct_field) in pat_fields.iter().zip(&v.fields) {\n-                // a .. pattern is fine, but anything positional is\n-                // not.\n-                if let hir::PatWild(hir::PatWildMulti) = field.node {\n-                    continue\n-                }\n                 maybe_do_stability_check(tcx, struct_field.did, field.span, cb)\n             }\n         }"}, {"sha": "f4ea4cb9ea5d6cd139e2590a891c6c97e5da4789", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -1010,7 +1010,7 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n         Pat {\n             id: folder.new_id(id),\n             node: match node {\n-                PatWild(k) => PatWild(k),\n+                PatWild => PatWild,\n                 PatIdent(binding_mode, pth1, sub) => {\n                     PatIdent(binding_mode,\n                              Spanned {"}, {"sha": "e172ca2105f4cd3d6446ba3670c9c17dab6e21aa", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -24,7 +24,6 @@ pub use self::Item_::*;\n pub use self::Mutability::*;\n pub use self::Pat_::*;\n pub use self::PathListItem_::*;\n-pub use self::PatWildKind::*;\n pub use self::PrimTy::*;\n pub use self::Stmt_::*;\n pub use self::StructFieldKind::*;\n@@ -393,19 +392,10 @@ pub enum BindingMode {\n     BindByValue(Mutability),\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum PatWildKind {\n-    /// Represents the wildcard pattern `_`\n-    PatWildSingle,\n-\n-    /// Represents the wildcard pattern `..`\n-    PatWildMulti,\n-}\n-\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Pat_ {\n-    /// Represents a wildcard pattern (either `_` or `..`)\n-    PatWild(PatWildKind),\n+    /// Represents a wildcard pattern (`_`)\n+    PatWild,\n \n     /// A PatIdent may either be a new bound variable,\n     /// or a nullary enum (in which case the third field"}, {"sha": "ee2666601eba862f285520cd770097584df14f52", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -818,7 +818,7 @@ pub fn lower_pat(_lctx: &LoweringContext, p: &Pat) -> P<hir::Pat> {\n     P(hir::Pat {\n         id: p.id,\n         node: match p.node {\n-            PatWild(k) => hir::PatWild(lower_pat_wild_kind(_lctx, k)),\n+            PatWild => hir::PatWild,\n             PatIdent(ref binding_mode, pth1, ref sub) => {\n                 hir::PatIdent(lower_binding_mode(_lctx, binding_mode),\n                               pth1,\n@@ -1482,13 +1482,6 @@ pub fn lower_block_check_mode(_lctx: &LoweringContext, b: &BlockCheckMode) -> hi\n     }\n }\n \n-pub fn lower_pat_wild_kind(_lctx: &LoweringContext, p: PatWildKind) -> hir::PatWildKind {\n-    match p {\n-        PatWildSingle => hir::PatWildSingle,\n-        PatWildMulti => hir::PatWildMulti,\n-    }\n-}\n-\n pub fn lower_binding_mode(_lctx: &LoweringContext, b: &BindingMode) -> hir::BindingMode {\n     match *b {\n         BindByRef(m) => hir::BindByRef(lower_mutability(_lctx, m)),\n@@ -1670,7 +1663,7 @@ fn pat_ident_binding_mode(lctx: &LoweringContext,\n }\n \n fn pat_wild(lctx: &LoweringContext, span: Span) -> P<hir::Pat> {\n-    pat(lctx, span, hir::PatWild(hir::PatWildSingle))\n+    pat(lctx, span, hir::PatWild)\n }\n \n fn pat(lctx: &LoweringContext, span: Span, pat: hir::Pat_) -> P<hir::Pat> {"}, {"sha": "139f863533b3ef87dc95d90387cd620e2767f560", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -1719,8 +1719,7 @@ impl<'a> State<'a> {\n         /* Pat isn't normalized, but the beauty of it\n          is that it doesn't matter */\n         match pat.node {\n-            hir::PatWild(hir::PatWildSingle) => try!(word(&mut self.s, \"_\")),\n-            hir::PatWild(hir::PatWildMulti) => try!(word(&mut self.s, \"..\")),\n+            hir::PatWild => try!(word(&mut self.s, \"_\")),\n             hir::PatIdent(binding_mode, ref path1, ref sub) => {\n                 match binding_mode {\n                     hir::BindByRef(mutbl) => {\n@@ -1815,13 +1814,10 @@ impl<'a> State<'a> {\n                     if !before.is_empty() {\n                         try!(self.word_space(\",\"));\n                     }\n-                    try!(self.print_pat(&**p));\n-                    match **p {\n-                        hir::Pat { node: hir::PatWild(hir::PatWildMulti), .. } => {\n-                            // this case is handled by print_pat\n-                        }\n-                        _ => try!(word(&mut self.s, \"..\")),\n+                    if p.node != hir::PatWild {\n+                        try!(self.print_pat(&**p));\n                     }\n+                    try!(word(&mut self.s, \"..\"));\n                     if !after.is_empty() {\n                         try!(self.word_space(\",\"));\n                     }"}, {"sha": "07044a7bba0efc1ab4a133bb855f86f0252e8830", "filename": "src/librustc_front/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_front%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_front%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Futil.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -44,7 +44,7 @@ pub fn walk_pat<F>(pat: &Pat, mut it: F) -> bool\n                 slice.iter().all(|p| walk_pat_(&**p, it)) &&\n                 after.iter().all(|p| walk_pat_(&**p, it))\n             }\n-            PatWild(_) |\n+            PatWild |\n             PatLit(_) |\n             PatRange(_, _) |\n             PatIdent(_, _, _) |"}, {"sha": "7d8bdec51b58ce210bef3c6f01bdf5ccdb015bd3", "filename": "src/librustc_front/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_front%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_front%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fvisit.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -466,7 +466,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n             visitor.visit_expr(lower_bound);\n             visitor.visit_expr(upper_bound)\n         }\n-        PatWild(_) => (),\n+        PatWild => (),\n         PatVec(ref prepatterns, ref slice_pattern, ref postpatterns) => {\n             walk_list!(visitor, visit_pat, prepatterns);\n             walk_list!(visitor, visit_pat, slice_pattern);"}, {"sha": "db4346364968cfbf92ce090dd960ef0d3f6abde6", "filename": "src/librustc_mir/tcx/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_mir%2Ftcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_mir%2Ftcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftcx%2Fpattern.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -139,7 +139,7 @@ impl<'tcx> Mirror<'tcx> for PatNode<'tcx> {\n \n     fn make_mirror<'a>(self, cx: &mut Cx<'a, 'tcx>) -> Pattern<'tcx> {\n         let kind = match self.pat.node {\n-            hir::PatWild(..) => PatternKind::Wild,\n+            hir::PatWild => PatternKind::Wild,\n \n             hir::PatLit(ref value) => {\n                 let value = const_eval::eval_const_expr(cx.tcx, value);"}, {"sha": "fbcb735a2334191f6abaf2c062721a5c568d298b", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -962,7 +962,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                 match self.tcx.pat_ty(pattern).sty {\n                     ty::TyStruct(def, _) => {\n                         for (i, field) in fields.iter().enumerate() {\n-                            if let hir::PatWild(..) = field.node {\n+                            if let hir::PatWild = field.node {\n                                 continue\n                             }\n                             self.check_field(field.span,"}, {"sha": "ff469e713babcc27f6224b4685d640b5d37617f2", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -866,7 +866,7 @@ fn pick_column_to_specialize(def_map: &DefMap, m: &[Match]) -> Option<usize> {\n \n     let column_contains_any_nonwild_patterns = |&col: &usize| -> bool {\n         m.iter().any(|row| match row.pats[col].node {\n-            hir::PatWild(_) => false,\n+            hir::PatWild => false,\n             _ => true\n         })\n     };\n@@ -1629,7 +1629,7 @@ fn trans_match_inner<'blk, 'tcx>(scope_cx: Block<'blk, 'tcx>,\n     // to the default arm.\n     let has_default = arms.last().map_or(false, |arm| {\n         arm.pats.len() == 1\n-        && arm.pats.last().unwrap().node == hir::PatWild(hir::PatWildSingle)\n+        && arm.pats.last().unwrap().node == hir::PatWild\n     });\n \n     compile_submatch(bcx, &matches[..], &[discr_datum.match_input()], &chk, has_default);\n@@ -1948,7 +1948,7 @@ pub fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                         cleanup_scope)\n                 });\n         }\n-        hir::PatQPath(..) | hir::PatWild(_) | hir::PatLit(_) |\n+        hir::PatQPath(..) | hir::PatWild | hir::PatLit(_) |\n         hir::PatRange(_, _) => ()\n     }\n     return bcx;"}, {"sha": "01f5a32b1a3d48202225756b970048f41fbc365f", "filename": "src/librustc_trans/trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -235,7 +235,7 @@ fn walk_pattern(cx: &CrateContext,\n             }\n         }\n \n-        hir::PatWild(_) => {\n+        hir::PatWild => {\n             scope_map.insert(pat.id, scope_stack.last().unwrap().scope_metadata);\n         }\n \n@@ -485,4 +485,4 @@ fn walk_expr(cx: &CrateContext,\n             }\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "694bb0e15ac79b8f4719090b7659c13f57c1af62", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -44,7 +44,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n            expected);\n \n     match pat.node {\n-        hir::PatWild(_) => {\n+        hir::PatWild => {\n             fcx.write_ty(pat.id, expected);\n         }\n         hir::PatLit(ref lt) => {"}, {"sha": "30eb468d9f805d93606466876c2820987ccb55d6", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -2218,7 +2218,7 @@ fn compute_type_scheme_of_foreign_fn_decl<'a, 'tcx>(\n     for i in &decl.inputs {\n         match (*i).pat.node {\n             hir::PatIdent(_, _, _) => (),\n-            hir::PatWild(hir::PatWildSingle) => (),\n+            hir::PatWild => (),\n             _ => {\n                 span_err!(ccx.tcx.sess, (*i).pat.span, E0130,\n                           \"patterns aren't allowed in foreign function declarations\");"}, {"sha": "dbd1106b6a1387cc2e4205a8ee056a875b895c83", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -2528,8 +2528,7 @@ fn name_from_pat(p: &hir::Pat) -> String {\n     debug!(\"Trying to get a name from pattern: {:?}\", p);\n \n     match p.node {\n-        PatWild(PatWildSingle) => \"_\".to_string(),\n-        PatWild(PatWildMulti) => \"..\".to_string(),\n+        PatWild => \"_\".to_string(),\n         PatIdent(_, ref p, _) => p.node.to_string(),\n         PatEnum(ref p, _) => path_to_string(p),\n         PatQPath(..) => panic!(\"tried to get argument name from PatQPath, \\"}, {"sha": "4e215b32a091b6d711eedb5be8d6ddd5a82689d3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -31,7 +31,6 @@ pub use self::MetaItem_::*;\n pub use self::Mutability::*;\n pub use self::Pat_::*;\n pub use self::PathListItem_::*;\n-pub use self::PatWildKind::*;\n pub use self::PrimTy::*;\n pub use self::Sign::*;\n pub use self::Stmt_::*;\n@@ -569,19 +568,10 @@ pub enum BindingMode {\n     BindByValue(Mutability),\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum PatWildKind {\n-    /// Represents the wildcard pattern `_`\n-    PatWildSingle,\n-\n-    /// Represents the wildcard pattern `..`\n-    PatWildMulti,\n-}\n-\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Pat_ {\n-    /// Represents a wildcard pattern (either `_` or `..`)\n-    PatWild(PatWildKind),\n+    /// Represents a wildcard pattern (`_`)\n+    PatWild,\n \n     /// A PatIdent may either be a new bound variable,\n     /// or a nullary enum (in which case the third field"}, {"sha": "88862099d8145c60d108758b2952c022480590d3", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -356,7 +356,7 @@ impl DummyResult {\n     pub fn raw_pat(sp: Span) -> ast::Pat {\n         ast::Pat {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::PatWild(ast::PatWildSingle),\n+            node: ast::PatWild,\n             span: sp,\n         }\n     }"}, {"sha": "4c10a7496835bfaba720230c9ca2baa259bcbf0a", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -801,7 +801,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         P(ast::Pat { id: ast::DUMMY_NODE_ID, node: pat, span: span })\n     }\n     fn pat_wild(&self, span: Span) -> P<ast::Pat> {\n-        self.pat(span, ast::PatWild(ast::PatWildSingle))\n+        self.pat(span, ast::PatWild)\n     }\n     fn pat_lit(&self, span: Span, expr: P<ast::Expr>) -> P<ast::Pat> {\n         self.pat(span, ast::PatLit(expr))"}, {"sha": "d637343de04e87ee349291d2bc4c9a1a7ae9eaed", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -1125,7 +1125,7 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n     p.map(|Pat {id, node, span}| Pat {\n         id: folder.new_id(id),\n         node: match node {\n-            PatWild(k) => PatWild(k),\n+            PatWild => PatWild,\n             PatIdent(binding_mode, pth1, sub) => {\n                 PatIdent(binding_mode,\n                         Spanned{span: folder.new_span(pth1.span),"}, {"sha": "ba86f85c381bfdfede101b5c84d897879b3a452b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -41,8 +41,7 @@ use ast::{MutImmutable, MutMutable, Mac_};\n use ast::{MutTy, BiMul, Mutability};\n use ast::{MethodImplItem, NamedField, UnNeg, NoReturn, UnNot};\n use ast::{Pat, PatBox, PatEnum, PatIdent, PatLit, PatQPath, PatMac, PatRange};\n-use ast::{PatRegion, PatStruct, PatTup, PatVec, PatWild, PatWildMulti};\n-use ast::PatWildSingle;\n+use ast::{PatRegion, PatStruct, PatTup, PatVec, PatWild};\n use ast::{PolyTraitRef, QSelf};\n use ast::{Return, BiShl, BiShr, Stmt, StmtDecl};\n use ast::{StmtExpr, StmtSemi, StmtMac, VariantData, StructField};\n@@ -3078,7 +3077,7 @@ impl<'a> Parser<'a> {\n                             self.check(&token::CloseDelim(token::Bracket)) {\n                         slice = Some(P(ast::Pat {\n                             id: ast::DUMMY_NODE_ID,\n-                            node: PatWild(PatWildMulti),\n+                            node: PatWild,\n                             span: self.span,\n                         }));\n                         before_slice = false;\n@@ -3215,7 +3214,7 @@ impl<'a> Parser<'a> {\n           token::Underscore => {\n             // Parse _\n             try!(self.bump());\n-            pat = PatWild(PatWildSingle);\n+            pat = PatWild;\n           }\n           token::BinOp(token::And) | token::AndAnd => {\n             // Parse &pat / &mut pat"}, {"sha": "2ab94b41c74a26551ac96350b55dc9cdca64cd2b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -2406,8 +2406,7 @@ impl<'a> State<'a> {\n         /* Pat isn't normalized, but the beauty of it\n          is that it doesn't matter */\n         match pat.node {\n-            ast::PatWild(ast::PatWildSingle) => try!(word(&mut self.s, \"_\")),\n-            ast::PatWild(ast::PatWildMulti) => try!(word(&mut self.s, \"..\")),\n+            ast::PatWild => try!(word(&mut self.s, \"_\")),\n             ast::PatIdent(binding_mode, ref path1, ref sub) => {\n                 match binding_mode {\n                     ast::BindByRef(mutbl) => {\n@@ -2503,13 +2502,10 @@ impl<'a> State<'a> {\n                                    |s, p| s.print_pat(&**p)));\n                 if let Some(ref p) = *slice {\n                     if !before.is_empty() { try!(self.word_space(\",\")); }\n-                    try!(self.print_pat(&**p));\n-                    match **p {\n-                        ast::Pat { node: ast::PatWild(ast::PatWildMulti), .. } => {\n-                            // this case is handled by print_pat\n-                        }\n-                        _ => try!(word(&mut self.s, \"..\")),\n+                    if p.node != ast::PatWild {\n+                        try!(self.print_pat(&**p));\n                     }\n+                    try!(word(&mut self.s, \"..\"));\n                     if !after.is_empty() { try!(self.word_space(\",\")); }\n                 }\n                 try!(self.commasep(Inconsistent,"}, {"sha": "a35a1c1cffd28f3342c4ded7d31d5a1794b9db7f", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -451,7 +451,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n             visitor.visit_expr(lower_bound);\n             visitor.visit_expr(upper_bound)\n         }\n-        PatWild(_) => (),\n+        PatWild => (),\n         PatVec(ref prepatterns, ref slice_pattern, ref postpatterns) => {\n             walk_list!(visitor, visit_pat, prepatterns);\n             walk_list!(visitor, visit_pat, slice_pattern);"}, {"sha": "c60cd1cfd2774f9ae572f0ce62ed3a7081a11189", "filename": "src/test/run-make/graphviz-flowgraph/f07.dot-expected.dot", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/3468b8d42c0c5a8510a2810747221354dbbb8eff/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.dot-expected.dot?ref=3468b8d42c0c5a8510a2810747221354dbbb8eff", "patch": "@@ -10,7 +10,7 @@ digraph block {\n     N8[label=\"(dummy_node)\"];\n     N9[label=\"local x\"];\n     N10[label=\"local y\"];\n-    N11[label=\"pat ..\"];\n+    N11[label=\"pat _\"];\n     N12[label=\"pat [x, y, ..]\"];\n     N13[label=\"expr x\"];\n     N14[label=\"expr y\"];"}]}