{"sha": "9eb14e11706ebf9a60b0afbe9bc82a99a816bc02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYjE0ZTExNzA2ZWJmOWE2MGIwYWZiZTliYzgyYTk5YTgxNmJjMDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-10T19:12:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-10T19:22:57Z"}, "message": "cleanup expansion to item list", "tree": {"sha": "8b4a9d1ef764d82ccfdafdb2231a7813be09b01d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b4a9d1ef764d82ccfdafdb2231a7813be09b01d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eb14e11706ebf9a60b0afbe9bc82a99a816bc02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb14e11706ebf9a60b0afbe9bc82a99a816bc02", "html_url": "https://github.com/rust-lang/rust/commit/9eb14e11706ebf9a60b0afbe9bc82a99a816bc02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eb14e11706ebf9a60b0afbe9bc82a99a816bc02/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9d9db83d1ac85e83e018333f7aa4c5c5616e82b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d9db83d1ac85e83e018333f7aa4c5c5616e82b", "html_url": "https://github.com/rust-lang/rust/commit/b9d9db83d1ac85e83e018333f7aa4c5c5616e82b"}], "stats": {"total": 45, "additions": 11, "deletions": 34}, "files": [{"sha": "9ea4e695d9696d16c4bddc32b78b34b148dc918e", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9eb14e11706ebf9a60b0afbe9bc82a99a816bc02/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb14e11706ebf9a60b0afbe9bc82a99a816bc02/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=9eb14e11706ebf9a60b0afbe9bc82a99a816bc02", "patch": "@@ -90,7 +90,7 @@ impl HirFileId {\n             })\n             .ok()?;\n         match macro_file.macro_file_kind {\n-            MacroFileKind::Items => Some(Parse::to_syntax(mbe::token_tree_to_ast_item_list(&tt))),\n+            MacroFileKind::Items => mbe::token_tree_to_items(&tt).ok().map(Parse::to_syntax),\n             MacroFileKind::Expr => mbe::token_tree_to_expr(&tt).ok().map(Parse::to_syntax),\n         }\n     }"}, {"sha": "04b97cb90691024803d7acf83c1de39229d32784", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9eb14e11706ebf9a60b0afbe9bc82a99a816bc02/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb14e11706ebf9a60b0afbe9bc82a99a816bc02/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=9eb14e11706ebf9a60b0afbe9bc82a99a816bc02", "patch": "@@ -76,8 +76,10 @@ impl RawItems {\n             source_map: ImportSourceMap::default(),\n         };\n         if let Some(node) = db.parse_or_expand(file_id) {\n-            if let Some(source_file) = ast::SourceFile::cast(node) {\n+            if let Some(source_file) = ast::SourceFile::cast(node.clone()) {\n                 collector.process_module(None, source_file);\n+            } else if let Some(item_list) = ast::MacroItems::cast(node) {\n+                collector.process_module(None, item_list);\n             }\n         }\n         (Arc::new(collector.raw_items), Arc::new(collector.source_map))"}, {"sha": "f07f000ffe336543ea304d19434bb2a6186cd1a9", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9eb14e11706ebf9a60b0afbe9bc82a99a816bc02/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb14e11706ebf9a60b0afbe9bc82a99a816bc02/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=9eb14e11706ebf9a60b0afbe9bc82a99a816bc02", "patch": "@@ -41,8 +41,8 @@ pub enum ExpandError {\n }\n \n pub use crate::syntax_bridge::{\n-    ast_to_token_tree, syntax_node_to_token_tree, token_tree_to_ast_item_list, token_tree_to_expr,\n-    token_tree_to_macro_items, token_tree_to_macro_stmts, token_tree_to_pat, token_tree_to_ty,\n+    ast_to_token_tree, syntax_node_to_token_tree, token_tree_to_expr, token_tree_to_items,\n+    token_tree_to_macro_stmts, token_tree_to_pat, token_tree_to_ty,\n };\n \n /// This struct contains AST for a single `macro_rules` definition. What might"}, {"sha": "2d035307b1785bd328f92547b0ab4fcc5bba735f", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9eb14e11706ebf9a60b0afbe9bc82a99a816bc02/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb14e11706ebf9a60b0afbe9bc82a99a816bc02/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=9eb14e11706ebf9a60b0afbe9bc82a99a816bc02", "patch": "@@ -46,25 +46,6 @@ pub fn syntax_node_to_token_tree(node: &SyntaxNode) -> Option<(tt::Subtree, Toke\n // * TraitItems(SmallVec<[ast::TraitItem; 1]>)\n // * ImplItems(SmallVec<[ast::ImplItem; 1]>)\n // * ForeignItems(SmallVec<[ast::ForeignItem; 1]>\n-//\n-//\n-\n-fn token_tree_to_syntax_node<F>(tt: &tt::Subtree, f: F) -> Result<Parse<SyntaxNode>, ExpandError>\n-where\n-    F: Fn(&mut dyn ra_parser::TokenSource, &mut dyn ra_parser::TreeSink),\n-{\n-    let tokens = [tt.clone().into()];\n-    let buffer = TokenBuffer::new(&tokens);\n-    let mut token_source = SubtreeTokenSource::new(&buffer);\n-    let mut tree_sink = TtTreeSink::new(buffer.begin());\n-    f(&mut token_source, &mut tree_sink);\n-    if tree_sink.roots.len() != 1 {\n-        return Err(ExpandError::ConversionError);\n-    }\n-    //FIXME: would be cool to report errors\n-    let parse = tree_sink.inner.finish();\n-    Ok(parse)\n-}\n \n fn fragment_to_syntax_node(\n     tt: &tt::Subtree,\n@@ -115,17 +96,11 @@ pub fn token_tree_to_macro_stmts(tt: &tt::Subtree) -> Result<Parse<ast::MacroStm\n }\n \n /// Parses the token tree (result of macro expansion) as a sequence of items\n-pub fn token_tree_to_macro_items(tt: &tt::Subtree) -> Result<Parse<ast::MacroItems>, ExpandError> {\n+pub fn token_tree_to_items(tt: &tt::Subtree) -> Result<Parse<ast::MacroItems>, ExpandError> {\n     let parse = fragment_to_syntax_node(tt, Items)?;\n     parse.cast().ok_or_else(|| crate::ExpandError::ConversionError)\n }\n \n-/// Parses the token tree (result of macro expansion) as a sequence of items\n-pub fn token_tree_to_ast_item_list(tt: &tt::Subtree) -> Parse<ast::SourceFile> {\n-    let parse = token_tree_to_syntax_node(tt, ra_parser::parse).unwrap();\n-    parse.cast().unwrap()\n-}\n-\n impl TokenMap {\n     pub fn relative_range_of(&self, tt: tt::TokenId) -> Option<TextRange> {\n         let idx = tt.0 as usize;"}, {"sha": "312fa4626c6f5a7bca103d0bfef13c4e558d1a6e", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9eb14e11706ebf9a60b0afbe9bc82a99a816bc02/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb14e11706ebf9a60b0afbe9bc82a99a816bc02/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=9eb14e11706ebf9a60b0afbe9bc82a99a816bc02", "patch": "@@ -70,7 +70,7 @@ pub(crate) fn expand(rules: &MacroRules, invocation: &str) -> tt::Subtree {\n \n pub(crate) fn expand_to_items(rules: &MacroRules, invocation: &str) -> ast::MacroItems {\n     let expanded = expand(rules, invocation);\n-    token_tree_to_macro_items(&expanded).unwrap().tree()\n+    token_tree_to_items(&expanded).unwrap().tree()\n }\n \n #[allow(unused)]\n@@ -155,8 +155,8 @@ pub(crate) fn assert_expansion(\n     let expected = text_to_tokentree(&expected);\n     let (expanded_tree, expected_tree) = match kind {\n         MacroKind::Items => {\n-            let expanded_tree = token_tree_to_macro_items(&expanded).unwrap().tree();\n-            let expected_tree = token_tree_to_macro_items(&expected).unwrap().tree();\n+            let expanded_tree = token_tree_to_items(&expanded).unwrap().tree();\n+            let expected_tree = token_tree_to_items(&expected).unwrap().tree();\n \n             (\n                 debug_dump_ignore_spaces(expanded_tree.syntax()).trim().to_string(),\n@@ -410,7 +410,7 @@ fn test_expand_to_item_list() {\n             \",\n     );\n     let expansion = expand(&rules, \"structs!(Foo, Bar);\");\n-    let tree = token_tree_to_macro_items(&expansion).unwrap().tree();\n+    let tree = token_tree_to_items(&expansion).unwrap().tree();\n     assert_eq!(\n         format!(\"{:#?}\", tree.syntax()).trim(),\n         r#\""}]}