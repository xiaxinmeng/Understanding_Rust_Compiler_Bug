{"sha": "4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "node_id": "C_kwDOAAsO6NoAKDQ4Mzk4ODZmMGFiZTIwOGFiOGYyYmI3M2EzMDc2YTU5ZmUyYWI2MGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-30T22:55:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-30T22:55:51Z"}, "message": "Auto merge of #105058 - Nilstrieb:no-merge-commits-for-you-only-bors-is-allowed-to-do-that, r=jyn514\n\nAdd tidy check to deny merge commits\n\nThis will prevent users with the pre-push hook from pushing a merge commit.\n\nExceptions are added for subtree updates. These exceptions are a little hacky and may be non-exhaustive but can be extended in the future.\n\nI added a link to `@jyn514's` blog post for the error case because that's the best resource to solve merge commits. But it would probably be better if it was integrated into https://rustc-dev-guide.rust-lang.org/git.html#no-merge-policy, then we could link that instead.\n\nr? `@jyn514`", "tree": {"sha": "728a63d851443ca8da9351f6f0795d59c8bc83f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/728a63d851443ca8da9351f6f0795d59c8bc83f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "html_url": "https://github.com/rust-lang/rust/commit/4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce85c98575e3016cf2007d90a85be321e592aa96", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce85c98575e3016cf2007d90a85be321e592aa96", "html_url": "https://github.com/rust-lang/rust/commit/ce85c98575e3016cf2007d90a85be321e592aa96"}, {"sha": "878af66b53459659b3f53f1c26af1123e82d79a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/878af66b53459659b3f53f1c26af1123e82d79a0", "html_url": "https://github.com/rust-lang/rust/commit/878af66b53459659b3f53f1c26af1123e82d79a0"}], "stats": {"total": 255, "additions": 195, "deletions": 60}, "files": [{"sha": "2770bded30aec11990233250719a683d7bf3e81f", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -71,6 +71,11 @@ jobs:\n         uses: actions/checkout@v3\n         with:\n           fetch-depth: 2\n+      - name: \"checkout the `master` branch for tidy\"\n+        uses: actions/checkout@v3\n+        with:\n+          ref: master\n+          fetch-depth: 1\n       - name: configure the PR in which the error message will be posted\n         run: \"echo \\\"[CI_PR_NUMBER=$num]\\\"\"\n         env:\n@@ -485,6 +490,11 @@ jobs:\n         uses: actions/checkout@v3\n         with:\n           fetch-depth: 2\n+      - name: \"checkout the `master` branch for tidy\"\n+        uses: actions/checkout@v3\n+        with:\n+          ref: master\n+          fetch-depth: 1\n       - name: configure the PR in which the error message will be posted\n         run: \"echo \\\"[CI_PR_NUMBER=$num]\\\"\"\n         env:\n@@ -600,6 +610,11 @@ jobs:\n         uses: actions/checkout@v3\n         with:\n           fetch-depth: 2\n+      - name: \"checkout the `master` branch for tidy\"\n+        uses: actions/checkout@v3\n+        with:\n+          ref: master\n+          fetch-depth: 1\n       - name: configure the PR in which the error message will be posted\n         run: \"echo \\\"[CI_PR_NUMBER=$num]\\\"\"\n         env:"}, {"sha": "79c70ee31c718969ba717d8b32e166382b6d16b1", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -259,6 +259,10 @@ dependencies = [\n  \"toml\",\n ]\n \n+[[package]]\n+name = \"build_helper\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"bump-stage0\"\n version = \"0.1.0\"\n@@ -5304,6 +5308,7 @@ dependencies = [\n name = \"tidy\"\n version = \"0.1.0\"\n dependencies = [\n+ \"build_helper\",\n  \"cargo_metadata 0.14.0\",\n  \"ignore\",\n  \"lazy_static\","}, {"sha": "ce08d4edb567d05f1e108655c0fd56588913f00d", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -4,6 +4,7 @@ members = [\n   \"library/std\",\n   \"library/test\",\n   \"src/rustdoc-json-types\",\n+  \"src/tools/build_helper\",\n   \"src/tools/cargotest\",\n   \"src/tools/clippy\",\n   \"src/tools/clippy/clippy_dev\","}, {"sha": "4a0ba5925773e573e9862819ac10345f6c319cac", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -36,6 +36,7 @@ dependencies = [\n name = \"bootstrap\"\n version = \"0.0.0\"\n dependencies = [\n+ \"build_helper\",\n  \"cc\",\n  \"cmake\",\n  \"fd-lock\",\n@@ -70,6 +71,10 @@ dependencies = [\n  \"regex-automata\",\n ]\n \n+[[package]]\n+name = \"build_helper\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"cc\"\n version = \"1.0.73\""}, {"sha": "22ceeca941e932872474ce0a3f549de91eece093", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -30,6 +30,7 @@ path = \"bin/sccache-plus-cl.rs\"\n test = false\n \n [dependencies]\n+build_helper = { path = \"../tools/build_helper\" }\n cmake = \"0.1.38\"\n fd-lock = \"3.0.8\"\n filetime = \"0.2\""}, {"sha": "64ae3fe0db9144c647f710122102e34d6cef215c", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -2,6 +2,7 @@\n \n use crate::builder::Builder;\n use crate::util::{output, program_out_of_date, t};\n+use build_helper::git::get_rust_lang_rust_remote;\n use ignore::WalkBuilder;\n use std::collections::VecDeque;\n use std::path::{Path, PathBuf};\n@@ -100,35 +101,6 @@ fn get_modified_rs_files(build: &Builder<'_>) -> Option<Vec<String>> {\n     )\n }\n \n-/// Finds the remote for rust-lang/rust.\n-/// For example for these remotes it will return `upstream`.\n-/// ```text\n-/// origin  https://github.com/Nilstrieb/rust.git (fetch)\n-/// origin  https://github.com/Nilstrieb/rust.git (push)\n-/// upstream        https://github.com/rust-lang/rust (fetch)\n-/// upstream        https://github.com/rust-lang/rust (push)\n-/// ```\n-fn get_rust_lang_rust_remote() -> Result<String, String> {\n-    let mut git = Command::new(\"git\");\n-    git.args([\"config\", \"--local\", \"--get-regex\", \"remote\\\\..*\\\\.url\"]);\n-\n-    let output = git.output().map_err(|err| format!(\"{err:?}\"))?;\n-    if !output.status.success() {\n-        return Err(\"failed to execute git config command\".to_owned());\n-    }\n-\n-    let stdout = String::from_utf8(output.stdout).map_err(|err| format!(\"{err:?}\"))?;\n-\n-    let rust_lang_remote = stdout\n-        .lines()\n-        .find(|remote| remote.contains(\"rust-lang\"))\n-        .ok_or_else(|| \"rust-lang/rust remote not found\".to_owned())?;\n-\n-    let remote_name =\n-        rust_lang_remote.split('.').nth(1).ok_or_else(|| \"remote name not found\".to_owned())?;\n-    Ok(remote_name.into())\n-}\n-\n #[derive(serde::Deserialize)]\n struct RustfmtConfig {\n     ignore: Vec<String>,"}, {"sha": "d44b96cfb991ece07a53944f225a0624737b2921", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -113,6 +113,7 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str;\n \n+use build_helper::ci::CiEnv;\n use channel::GitInfo;\n use config::{DryRun, Target};\n use filetime::FileTime;\n@@ -121,7 +122,7 @@ use once_cell::sync::OnceCell;\n use crate::builder::Kind;\n use crate::config::{LlvmLibunwind, TargetSelection};\n use crate::util::{\n-    exe, libdir, mtime, output, run, run_suppressed, symlink_dir, try_run_suppressed, CiEnv,\n+    exe, libdir, mtime, output, run, run_suppressed, symlink_dir, try_run_suppressed,\n };\n \n mod bolt;"}, {"sha": "bdc81b07b8d546c36b887920261bc9e092fe5323", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -24,6 +24,8 @@ use crate::util::get_clang_cl_resource_dir;\n use crate::util::{self, exe, output, t, up_to_date};\n use crate::{CLang, GitRepo};\n \n+use build_helper::ci::CiEnv;\n+\n #[derive(Clone)]\n pub struct LlvmResult {\n     /// Path to llvm-config binary.\n@@ -217,7 +219,7 @@ pub(crate) fn is_ci_llvm_available(config: &Config, asserts: bool) -> bool {\n         return false;\n     }\n \n-    if crate::util::CiEnv::is_ci() {\n+    if CiEnv::is_ci() {\n         // We assume we have access to git, so it's okay to unconditionally pass\n         // `true` here.\n         let llvm_sha = detect_llvm_sha(config, true);"}, {"sha": "8ce9a9ce38cc5d6115266e9bbda00d72018bd7dc", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -255,35 +255,6 @@ pub enum CiEnv {\n     GitHubActions,\n }\n \n-impl CiEnv {\n-    /// Obtains the current CI environment.\n-    pub fn current() -> CiEnv {\n-        if env::var(\"TF_BUILD\").map_or(false, |e| e == \"True\") {\n-            CiEnv::AzurePipelines\n-        } else if env::var(\"GITHUB_ACTIONS\").map_or(false, |e| e == \"true\") {\n-            CiEnv::GitHubActions\n-        } else {\n-            CiEnv::None\n-        }\n-    }\n-\n-    pub fn is_ci() -> bool {\n-        Self::current() != CiEnv::None\n-    }\n-\n-    /// If in a CI environment, forces the command to run with colors.\n-    pub fn force_coloring_in_ci(self, cmd: &mut Command) {\n-        if self != CiEnv::None {\n-            // Due to use of stamp/docker, the output stream of rustbuild is not\n-            // a TTY in CI, so coloring is by-default turned off.\n-            // The explicit `TERM=xterm` environment is needed for\n-            // `--color always` to actually work. This env var was lost when\n-            // compiling through the Makefile. Very strange.\n-            cmd.env(\"TERM\", \"xterm\").args(&[\"--color\", \"always\"]);\n-        }\n-    }\n-}\n-\n pub fn forcing_clang_based_tests() -> bool {\n     if let Some(var) = env::var_os(\"RUSTBUILD_FORCE_CLANG_BASED_TESTS\") {\n         match &var.to_string_lossy().to_lowercase()[..] {"}, {"sha": "d3b07419486b2cdf4f15fec19cae420e80cf3196", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -103,6 +103,12 @@ x--expand-yaml-anchors--remove:\n         with:\n           fetch-depth: 2\n \n+      - name: checkout the `master` branch for tidy\n+        uses: actions/checkout@v3\n+        with:\n+          ref: master\n+          fetch-depth: 1\n+\n       # Rust Log Analyzer can't currently detect the PR number of a GitHub\n       # Actions build on its own, so a hint in the log message is needed to\n       # point it in the right direction."}, {"sha": "99f6fea2ecf997b8a3b47433466f5a7840714ab5", "filename": "src/tools/build_helper/Cargo.toml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Ftools%2Fbuild_helper%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Ftools%2Fbuild_helper%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild_helper%2FCargo.toml?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -0,0 +1,8 @@\n+[package]\n+name = \"build_helper\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+\n+# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n+\n+[dependencies]"}, {"sha": "9f113c72b9338be390922d45d14d7f1ef6cf7dc5", "filename": "src/tools/build_helper/src/ci.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Ftools%2Fbuild_helper%2Fsrc%2Fci.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Ftools%2Fbuild_helper%2Fsrc%2Fci.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild_helper%2Fsrc%2Fci.rs?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -0,0 +1,40 @@\n+use std::process::Command;\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub enum CiEnv {\n+    /// Not a CI environment.\n+    None,\n+    /// The Azure Pipelines environment, for Linux (including Docker), Windows, and macOS builds.\n+    AzurePipelines,\n+    /// The GitHub Actions environment, for Linux (including Docker), Windows and macOS builds.\n+    GitHubActions,\n+}\n+\n+impl CiEnv {\n+    /// Obtains the current CI environment.\n+    pub fn current() -> CiEnv {\n+        if std::env::var(\"TF_BUILD\").map_or(false, |e| e == \"True\") {\n+            CiEnv::AzurePipelines\n+        } else if std::env::var(\"GITHUB_ACTIONS\").map_or(false, |e| e == \"true\") {\n+            CiEnv::GitHubActions\n+        } else {\n+            CiEnv::None\n+        }\n+    }\n+\n+    pub fn is_ci() -> bool {\n+        Self::current() != CiEnv::None\n+    }\n+\n+    /// If in a CI environment, forces the command to run with colors.\n+    pub fn force_coloring_in_ci(self, cmd: &mut Command) {\n+        if self != CiEnv::None {\n+            // Due to use of stamp/docker, the output stream of rustbuild is not\n+            // a TTY in CI, so coloring is by-default turned off.\n+            // The explicit `TERM=xterm` environment is needed for\n+            // `--color always` to actually work. This env var was lost when\n+            // compiling through the Makefile. Very strange.\n+            cmd.env(\"TERM\", \"xterm\").args(&[\"--color\", \"always\"]);\n+        }\n+    }\n+}"}, {"sha": "e9638206e6729f561f4a2ee388bc90f6b2748e5c", "filename": "src/tools/build_helper/src/git.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Ftools%2Fbuild_helper%2Fsrc%2Fgit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Ftools%2Fbuild_helper%2Fsrc%2Fgit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild_helper%2Fsrc%2Fgit.rs?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -0,0 +1,30 @@\n+use std::process::Command;\n+\n+/// Finds the remote for rust-lang/rust.\n+/// For example for these remotes it will return `upstream`.\n+/// ```text\n+/// origin  https://github.com/Nilstrieb/rust.git (fetch)\n+/// origin  https://github.com/Nilstrieb/rust.git (push)\n+/// upstream        https://github.com/rust-lang/rust (fetch)\n+/// upstream        https://github.com/rust-lang/rust (push)\n+/// ```\n+pub fn get_rust_lang_rust_remote() -> Result<String, String> {\n+    let mut git = Command::new(\"git\");\n+    git.args([\"config\", \"--local\", \"--get-regex\", \"remote\\\\..*\\\\.url\"]);\n+\n+    let output = git.output().map_err(|err| format!(\"{err:?}\"))?;\n+    if !output.status.success() {\n+        return Err(\"failed to execute git config command\".to_owned());\n+    }\n+\n+    let stdout = String::from_utf8(output.stdout).map_err(|err| format!(\"{err:?}\"))?;\n+\n+    let rust_lang_remote = stdout\n+        .lines()\n+        .find(|remote| remote.contains(\"rust-lang\"))\n+        .ok_or_else(|| \"rust-lang/rust remote not found\".to_owned())?;\n+\n+    let remote_name =\n+        rust_lang_remote.split('.').nth(1).ok_or_else(|| \"remote name not found\".to_owned())?;\n+    Ok(remote_name.into())\n+}"}, {"sha": "d3d2323db853a0cfe735d80dbfe2b9d19a883f43", "filename": "src/tools/build_helper/src/lib.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Ftools%2Fbuild_helper%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Ftools%2Fbuild_helper%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild_helper%2Fsrc%2Flib.rs?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -0,0 +1,2 @@\n+pub mod ci;\n+pub mod git;"}, {"sha": "ffedb4d5eb8556c73d963d903c5632a46078050b", "filename": "src/tools/tidy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Ftools%2Ftidy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Ftools%2Ftidy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2FCargo.toml?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -5,6 +5,7 @@ edition = \"2021\"\n autobins = false\n \n [dependencies]\n+build_helper = { path = \"../build_helper\" }\n cargo_metadata = \"0.14\"\n regex = \"1\"\n miropt-test-tools = { path = \"../miropt-test-tools\" }"}, {"sha": "186cd9bb11b9af5c467cc694f8e527f71962eb72", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -48,6 +48,7 @@ pub mod errors;\n pub mod extdeps;\n pub mod features;\n pub mod mir_opt_tests;\n+pub mod no_merge;\n pub mod pal;\n pub mod primitive_docs;\n pub mod style;"}, {"sha": "65f0fe9743f80b5247111c8a78a7a86ce47f6bc8", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -107,6 +107,8 @@ fn main() {\n         check!(alphabetical, &compiler_path);\n         check!(alphabetical, &library_path);\n \n+        check!(no_merge, ());\n+\n         let collected = {\n             drain_handles(&mut handles);\n "}, {"sha": "362d6f6f4d77f858d4845c3e28b395e2900a33f0", "filename": "src/tools/tidy/src/no_merge.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Ftools%2Ftidy%2Fsrc%2Fno_merge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839886f0abe208ab8f2bb73a3076a59fe2ab60c/src%2Ftools%2Ftidy%2Fsrc%2Fno_merge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fno_merge.rs?ref=4839886f0abe208ab8f2bb73a3076a59fe2ab60c", "patch": "@@ -0,0 +1,72 @@\n+//! This check makes sure that no accidental merge commits are introduced to the repository.\n+//! It forbids all merge commits that are not caused by rollups/bors or subtree syncs.\n+\n+use std::process::Command;\n+\n+use build_helper::ci::CiEnv;\n+use build_helper::git::get_rust_lang_rust_remote;\n+\n+macro_rules! try_unwrap_in_ci {\n+    ($expr:expr) => {\n+        match $expr {\n+            Ok(value) => value,\n+            Err(err) if CiEnv::is_ci() => {\n+                panic!(\"Encountered error while testing Git status: {:?}\", err)\n+            }\n+            Err(_) => return,\n+        }\n+    };\n+}\n+\n+pub fn check(_: (), bad: &mut bool) {\n+    let remote = try_unwrap_in_ci!(get_rust_lang_rust_remote());\n+    let merge_commits = try_unwrap_in_ci!(find_merge_commits(&remote));\n+\n+    let mut bad_merge_commits = merge_commits.lines().filter(|commit| {\n+        !(\n+            // Bors is the ruler of merge commits.\n+            commit.starts_with(\"Auto merge of\") || commit.starts_with(\"Rollup merge of\")\n+        )\n+    });\n+\n+    if let Some(merge) = bad_merge_commits.next() {\n+        tidy_error!(\n+            bad,\n+            \"found a merge commit in the history: `{merge}`.\n+To resolve the issue, see this: https://rustc-dev-guide.rust-lang.org/git.html#i-made-a-merge-commit-by-accident.\n+If you're doing a subtree sync, add your tool to the list in the code that emitted this error.\"\n+        );\n+    }\n+}\n+\n+/// Runs `git log --merges --format=%s $REMOTE/master..HEAD` and returns all commits\n+fn find_merge_commits(remote: &str) -> Result<String, String> {\n+    let mut git = Command::new(\"git\");\n+    git.args([\n+        \"log\",\n+        \"--merges\",\n+        \"--format=%s\",\n+        &format!(\"{remote}/master..HEAD\"),\n+        // Ignore subtree syncs. Add your new subtrees here.\n+        \":!src/tools/miri\",\n+        \":!src/tools/rust-analyzer\",\n+        \":!compiler/rustc_smir\",\n+        \":!library/portable-simd\",\n+        \":!compiler/rustc_codegen_gcc\",\n+        \":!src/tools/rustfmt\",\n+        \":!compiler/rustc_codegen_cranelift\",\n+        \":!src/tools/clippy\",\n+    ]);\n+\n+    let output = git.output().map_err(|err| format!(\"{err:?}\"))?;\n+    if !output.status.success() {\n+        return Err(format!(\n+            \"failed to execute git log command: {}\",\n+            String::from_utf8_lossy(&output.stderr)\n+        ));\n+    }\n+\n+    let stdout = String::from_utf8(output.stdout).map_err(|err| format!(\"{err:?}\"))?;\n+\n+    Ok(stdout)\n+}"}]}