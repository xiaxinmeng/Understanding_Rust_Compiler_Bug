{"sha": "ba01ea3730025028affbf4ce56f29621861779c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMDFlYTM3MzAwMjUwMjhhZmZiZjRjZTU2ZjI5NjIxODYxNzc5YzY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-28T00:36:41Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-07T04:53:02Z"}, "message": "libserialize: remove unnecessary `to_string()` calls", "tree": {"sha": "09c5051da27ab070685f26ff8469eb7cd3039602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09c5051da27ab070685f26ff8469eb7cd3039602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba01ea3730025028affbf4ce56f29621861779c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba01ea3730025028affbf4ce56f29621861779c6", "html_url": "https://github.com/rust-lang/rust/commit/ba01ea3730025028affbf4ce56f29621861779c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba01ea3730025028affbf4ce56f29621861779c6/comments", "author": null, "committer": null, "parents": [{"sha": "71d8d578c6050fcef42caecb61b9d1bcba7716af", "url": "https://api.github.com/repos/rust-lang/rust/commits/71d8d578c6050fcef42caecb61b9d1bcba7716af", "html_url": "https://github.com/rust-lang/rust/commit/71d8d578c6050fcef42caecb61b9d1bcba7716af"}], "stats": {"total": 126, "additions": 63, "deletions": 63}, "files": [{"sha": "c8ec1700a1dae94df2d769430b3bbf1e8bf1026d", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ba01ea3730025028affbf4ce56f29621861779c6/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba01ea3730025028affbf4ce56f29621861779c6/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=ba01ea3730025028affbf4ce56f29621861779c6", "patch": "@@ -286,13 +286,13 @@ mod tests {\n \n     #[test]\n     fn test_to_base64_basic() {\n-        assert_eq!(\"\".as_bytes().to_base64(STANDARD), \"\".to_string());\n-        assert_eq!(\"f\".as_bytes().to_base64(STANDARD), \"Zg==\".to_string());\n-        assert_eq!(\"fo\".as_bytes().to_base64(STANDARD), \"Zm8=\".to_string());\n-        assert_eq!(\"foo\".as_bytes().to_base64(STANDARD), \"Zm9v\".to_string());\n-        assert_eq!(\"foob\".as_bytes().to_base64(STANDARD), \"Zm9vYg==\".to_string());\n-        assert_eq!(\"fooba\".as_bytes().to_base64(STANDARD), \"Zm9vYmE=\".to_string());\n-        assert_eq!(\"foobar\".as_bytes().to_base64(STANDARD), \"Zm9vYmFy\".to_string());\n+        assert_eq!(\"\".as_bytes().to_base64(STANDARD), \"\");\n+        assert_eq!(\"f\".as_bytes().to_base64(STANDARD), \"Zg==\");\n+        assert_eq!(\"fo\".as_bytes().to_base64(STANDARD), \"Zm8=\");\n+        assert_eq!(\"foo\".as_bytes().to_base64(STANDARD), \"Zm9v\");\n+        assert_eq!(\"foob\".as_bytes().to_base64(STANDARD), \"Zm9vYg==\");\n+        assert_eq!(\"fooba\".as_bytes().to_base64(STANDARD), \"Zm9vYmE=\");\n+        assert_eq!(\"foobar\".as_bytes().to_base64(STANDARD), \"Zm9vYmFy\");\n     }\n \n     #[test]\n@@ -301,19 +301,19 @@ mod tests {\n                               .contains(\"\\r\\n\"));\n         assert_eq!(\"foobar\".as_bytes().to_base64(Config {line_length: Some(4),\n                                                          ..STANDARD}),\n-                   \"Zm9v\\r\\nYmFy\".to_string());\n+                   \"Zm9v\\r\\nYmFy\");\n     }\n \n     #[test]\n     fn test_to_base64_padding() {\n-        assert_eq!(\"f\".as_bytes().to_base64(Config {pad: false, ..STANDARD}), \"Zg\".to_string());\n-        assert_eq!(\"fo\".as_bytes().to_base64(Config {pad: false, ..STANDARD}), \"Zm8\".to_string());\n+        assert_eq!(\"f\".as_bytes().to_base64(Config {pad: false, ..STANDARD}), \"Zg\");\n+        assert_eq!(\"fo\".as_bytes().to_base64(Config {pad: false, ..STANDARD}), \"Zm8\");\n     }\n \n     #[test]\n     fn test_to_base64_url_safe() {\n-        assert_eq!([251, 255].to_base64(URL_SAFE), \"-_8\".to_string());\n-        assert_eq!([251, 255].to_base64(STANDARD), \"+/8=\".to_string());\n+        assert_eq!([251, 255].to_base64(URL_SAFE), \"-_8\");\n+        assert_eq!([251, 255].to_base64(STANDARD), \"+/8=\");\n     }\n \n     #[test]"}, {"sha": "4c20f72cac5b1a4119367553e1fac8ab57286662", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba01ea3730025028affbf4ce56f29621861779c6/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba01ea3730025028affbf4ce56f29621861779c6/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=ba01ea3730025028affbf4ce56f29621861779c6", "patch": "@@ -158,7 +158,7 @@ mod tests {\n \n     #[test]\n     pub fn test_to_hex() {\n-        assert_eq!(\"foobar\".as_bytes().to_hex(), \"666f6f626172\".to_string());\n+        assert_eq!(\"foobar\".as_bytes().to_hex(), \"666f6f626172\");\n     }\n \n     #[test]"}, {"sha": "248d78236ad4b0d9c600e3fc48c4a8fd4caf4291", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/ba01ea3730025028affbf4ce56f29621861779c6/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba01ea3730025028affbf4ce56f29621861779c6/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=ba01ea3730025028affbf4ce56f29621861779c6", "patch": "@@ -2486,76 +2486,76 @@ mod tests {\n \n     #[test]\n     fn test_write_null() {\n-        assert_eq!(Null.to_string().into_string(), \"null\".to_string());\n-        assert_eq!(Null.to_pretty_str().into_string(), \"null\".to_string());\n+        assert_eq!(Null.to_string().into_string(), \"null\");\n+        assert_eq!(Null.to_pretty_str().into_string(), \"null\");\n     }\n \n     #[test]\n     fn test_write_i64() {\n-        assert_eq!(U64(0).to_string().into_string(), \"0\".to_string());\n-        assert_eq!(U64(0).to_pretty_str().into_string(), \"0\".to_string());\n+        assert_eq!(U64(0).to_string().into_string(), \"0\");\n+        assert_eq!(U64(0).to_pretty_str().into_string(), \"0\");\n \n-        assert_eq!(U64(1234).to_string().into_string(), \"1234\".to_string());\n-        assert_eq!(U64(1234).to_pretty_str().into_string(), \"1234\".to_string());\n+        assert_eq!(U64(1234).to_string().into_string(), \"1234\");\n+        assert_eq!(U64(1234).to_pretty_str().into_string(), \"1234\");\n \n-        assert_eq!(I64(-5678).to_string().into_string(), \"-5678\".to_string());\n-        assert_eq!(I64(-5678).to_pretty_str().into_string(), \"-5678\".to_string());\n+        assert_eq!(I64(-5678).to_string().into_string(), \"-5678\");\n+        assert_eq!(I64(-5678).to_pretty_str().into_string(), \"-5678\");\n     }\n \n     #[test]\n     fn test_write_f64() {\n-        assert_eq!(F64(3.0).to_string().into_string(), \"3\".to_string());\n-        assert_eq!(F64(3.0).to_pretty_str().into_string(), \"3\".to_string());\n+        assert_eq!(F64(3.0).to_string().into_string(), \"3\");\n+        assert_eq!(F64(3.0).to_pretty_str().into_string(), \"3\");\n \n-        assert_eq!(F64(3.1).to_string().into_string(), \"3.1\".to_string());\n-        assert_eq!(F64(3.1).to_pretty_str().into_string(), \"3.1\".to_string());\n+        assert_eq!(F64(3.1).to_string().into_string(), \"3.1\");\n+        assert_eq!(F64(3.1).to_pretty_str().into_string(), \"3.1\");\n \n-        assert_eq!(F64(-1.5).to_string().into_string(), \"-1.5\".to_string());\n-        assert_eq!(F64(-1.5).to_pretty_str().into_string(), \"-1.5\".to_string());\n+        assert_eq!(F64(-1.5).to_string().into_string(), \"-1.5\");\n+        assert_eq!(F64(-1.5).to_pretty_str().into_string(), \"-1.5\");\n \n-        assert_eq!(F64(0.5).to_string().into_string(), \"0.5\".to_string());\n-        assert_eq!(F64(0.5).to_pretty_str().into_string(), \"0.5\".to_string());\n+        assert_eq!(F64(0.5).to_string().into_string(), \"0.5\");\n+        assert_eq!(F64(0.5).to_pretty_str().into_string(), \"0.5\");\n \n-        assert_eq!(F64(f64::NAN).to_string().into_string(), \"null\".to_string());\n-        assert_eq!(F64(f64::NAN).to_pretty_str().into_string(), \"null\".to_string());\n+        assert_eq!(F64(f64::NAN).to_string().into_string(), \"null\");\n+        assert_eq!(F64(f64::NAN).to_pretty_str().into_string(), \"null\");\n \n-        assert_eq!(F64(f64::INFINITY).to_string().into_string(), \"null\".to_string());\n-        assert_eq!(F64(f64::INFINITY).to_pretty_str().into_string(), \"null\".to_string());\n+        assert_eq!(F64(f64::INFINITY).to_string().into_string(), \"null\");\n+        assert_eq!(F64(f64::INFINITY).to_pretty_str().into_string(), \"null\");\n \n-        assert_eq!(F64(f64::NEG_INFINITY).to_string().into_string(), \"null\".to_string());\n-        assert_eq!(F64(f64::NEG_INFINITY).to_pretty_str().into_string(), \"null\".to_string());\n+        assert_eq!(F64(f64::NEG_INFINITY).to_string().into_string(), \"null\");\n+        assert_eq!(F64(f64::NEG_INFINITY).to_pretty_str().into_string(), \"null\");\n     }\n \n     #[test]\n     fn test_write_str() {\n-        assert_eq!(String(\"\".to_string()).to_string().into_string(), \"\\\"\\\"\".to_string());\n-        assert_eq!(String(\"\".to_string()).to_pretty_str().into_string(), \"\\\"\\\"\".to_string());\n+        assert_eq!(String(\"\".to_string()).to_string().into_string(), \"\\\"\\\"\");\n+        assert_eq!(String(\"\".to_string()).to_pretty_str().into_string(), \"\\\"\\\"\");\n \n-        assert_eq!(String(\"foo\".to_string()).to_string().into_string(), \"\\\"foo\\\"\".to_string());\n-        assert_eq!(String(\"foo\".to_string()).to_pretty_str().into_string(), \"\\\"foo\\\"\".to_string());\n+        assert_eq!(String(\"foo\".to_string()).to_string().into_string(), \"\\\"foo\\\"\");\n+        assert_eq!(String(\"foo\".to_string()).to_pretty_str().into_string(), \"\\\"foo\\\"\");\n     }\n \n     #[test]\n     fn test_write_bool() {\n-        assert_eq!(Boolean(true).to_string().into_string(), \"true\".to_string());\n-        assert_eq!(Boolean(true).to_pretty_str().into_string(), \"true\".to_string());\n+        assert_eq!(Boolean(true).to_string().into_string(), \"true\");\n+        assert_eq!(Boolean(true).to_pretty_str().into_string(), \"true\");\n \n-        assert_eq!(Boolean(false).to_string().into_string(), \"false\".to_string());\n-        assert_eq!(Boolean(false).to_pretty_str().into_string(), \"false\".to_string());\n+        assert_eq!(Boolean(false).to_string().into_string(), \"false\");\n+        assert_eq!(Boolean(false).to_pretty_str().into_string(), \"false\");\n     }\n \n     #[test]\n     fn test_write_array() {\n-        assert_eq!(Array(vec![]).to_string().into_string(), \"[]\".to_string());\n-        assert_eq!(Array(vec![]).to_pretty_str().into_string(), \"[]\".to_string());\n+        assert_eq!(Array(vec![]).to_string().into_string(), \"[]\");\n+        assert_eq!(Array(vec![]).to_pretty_str().into_string(), \"[]\");\n \n-        assert_eq!(Array(vec![Boolean(true)]).to_string().into_string(), \"[true]\".to_string());\n+        assert_eq!(Array(vec![Boolean(true)]).to_string().into_string(), \"[true]\");\n         assert_eq!(\n             Array(vec![Boolean(true)]).to_pretty_str().into_string(),\n             \"\\\n             [\\n  \\\n                 true\\n\\\n-            ]\".to_string()\n+            ]\"\n         );\n \n         let long_test_array = Array(vec![\n@@ -2564,7 +2564,7 @@ mod tests {\n             Array(vec![String(\"foo\\nbar\".to_string()), F64(3.5)])]);\n \n         assert_eq!(long_test_array.to_string().into_string(),\n-            \"[false,null,[\\\"foo\\\\nbar\\\",3.5]]\".to_string());\n+            \"[false,null,[\\\"foo\\\\nbar\\\",3.5]]\");\n         assert_eq!(\n             long_test_array.to_pretty_str().into_string(),\n             \"\\\n@@ -2575,27 +2575,27 @@ mod tests {\n                     \\\"foo\\\\nbar\\\",\\n    \\\n                     3.5\\n  \\\n                 ]\\n\\\n-            ]\".to_string()\n+            ]\"\n         );\n     }\n \n     #[test]\n     fn test_write_object() {\n-        assert_eq!(mk_object(&[]).to_string().into_string(), \"{}\".to_string());\n-        assert_eq!(mk_object(&[]).to_pretty_str().into_string(), \"{}\".to_string());\n+        assert_eq!(mk_object(&[]).to_string().into_string(), \"{}\");\n+        assert_eq!(mk_object(&[]).to_pretty_str().into_string(), \"{}\");\n \n         assert_eq!(\n             mk_object(&[\n                 (\"a\".to_string(), Boolean(true))\n             ]).to_string().into_string(),\n-            \"{\\\"a\\\":true}\".to_string()\n+            \"{\\\"a\\\":true}\"\n         );\n         assert_eq!(\n             mk_object(&[(\"a\".to_string(), Boolean(true))]).to_pretty_str(),\n             \"\\\n             {\\n  \\\n                 \\\"a\\\": true\\n\\\n-            }\".to_string()\n+            }\"\n         );\n \n         let complex_obj = mk_object(&[\n@@ -2612,7 +2612,7 @@ mod tests {\n                     {\\\"c\\\":\\\"\\\\f\\\\r\\\"},\\\n                     {\\\"d\\\":\\\"\\\"}\\\n                 ]\\\n-            }\".to_string()\n+            }\"\n         );\n         assert_eq!(\n             complex_obj.to_pretty_str().into_string(),\n@@ -2626,7 +2626,7 @@ mod tests {\n                         \\\"d\\\": \\\"\\\"\\n    \\\n                     }\\n  \\\n                 ]\\n\\\n-            }\".to_string()\n+            }\"\n         );\n \n         let a = mk_object(&[\n@@ -2660,14 +2660,14 @@ mod tests {\n                 let mut encoder = Encoder::new(writer);\n                 animal.encode(&mut encoder).unwrap();\n             }),\n-            \"\\\"Dog\\\"\".to_string()\n+            \"\\\"Dog\\\"\"\n         );\n         assert_eq!(\n             with_str_writer(|writer| {\n                 let mut encoder = PrettyEncoder::new(writer);\n                 animal.encode(&mut encoder).unwrap();\n             }),\n-            \"\\\"Dog\\\"\".to_string()\n+            \"\\\"Dog\\\"\"\n         );\n \n         let animal = Frog(\"Henry\".to_string(), 349);\n@@ -2676,7 +2676,7 @@ mod tests {\n                 let mut encoder = Encoder::new(writer);\n                 animal.encode(&mut encoder).unwrap();\n             }),\n-            \"{\\\"variant\\\":\\\"Frog\\\",\\\"fields\\\":[\\\"Henry\\\",349]}\".to_string()\n+            \"{\\\"variant\\\":\\\"Frog\\\",\\\"fields\\\":[\\\"Henry\\\",349]}\"\n         );\n         assert_eq!(\n             with_str_writer(|writer| {\n@@ -2689,7 +2689,7 @@ mod tests {\n                  \\\"Henry\\\",\\n    \\\n                  349\\n  \\\n                ]\\n\\\n-             }\".to_string()\n+             }\"\n         );\n     }\n \n@@ -2700,14 +2700,14 @@ mod tests {\n             let mut encoder = Encoder::new(writer);\n             value.encode(&mut encoder).unwrap();\n         });\n-        assert_eq!(s, \"\\\"jodhpurs\\\"\".to_string());\n+        assert_eq!(s, \"\\\"jodhpurs\\\"\");\n \n         let value = Some(\"jodhpurs\".to_string());\n         let s = with_str_writer(|writer| {\n             let mut encoder = PrettyEncoder::new(writer);\n             value.encode(&mut encoder).unwrap();\n         });\n-        assert_eq!(s, \"\\\"jodhpurs\\\"\".to_string());\n+        assert_eq!(s, \"\\\"jodhpurs\\\"\");\n     }\n \n     #[test]\n@@ -2717,13 +2717,13 @@ mod tests {\n             let mut encoder = Encoder::new(writer);\n             value.encode(&mut encoder).unwrap();\n         });\n-        assert_eq!(s, \"null\".to_string());\n+        assert_eq!(s, \"null\");\n \n         let s = with_str_writer(|writer| {\n             let mut encoder = Encoder::new(writer);\n             value.encode(&mut encoder).unwrap();\n         });\n-        assert_eq!(s, \"null\".to_string());\n+        assert_eq!(s, \"null\");\n     }\n \n     #[test]"}]}