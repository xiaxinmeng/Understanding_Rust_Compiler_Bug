{"sha": "4dea3a295f99f166472ddec78ed9d590900436ff", "node_id": "C_kwDOAAsO6NoAKDRkZWEzYTI5NWY5OWYxNjY0NzJkZGVjNzhlZDlkNTkwOTAwNDM2ZmY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-21T08:49:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-21T08:49:58Z"}, "message": "Rollup merge of #108000 - y21:no-zero-init-for-uninhabited, r=jackh726\n\nlint: don't suggest MaybeUninit::assume_init for uninhabited types\n\nCreating a zeroed uninhabited type such as `!` or an empty enum with `mem::zeroed()` (or transmuting `()` to `!`) currently triggers this lint:\n```rs\nwarning: the type `!` does not permit zero-initialization\n --> test.rs:5:23\n  |\n5 |         let _val: ! = mem::zeroed();\n  |                       ^^^^^^^^^^^^^\n  |                       |\n  |                       this code causes undefined behavior when executed\n  |                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n  |\n  = note: the `!` type has no valid value\n```\nThe `MaybeUninit` suggestion in the help message seems confusing/useless for uninhabited types, as such a type cannot be fully initialized in the first place (as the note implies).\nThis PR limits this help message to inhabited types which can be initialized", "tree": {"sha": "34b05afe9d34eaa2e63798f6a1bd4d3491b2cffc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34b05afe9d34eaa2e63798f6a1bd4d3491b2cffc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dea3a295f99f166472ddec78ed9d590900436ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj9IW2CRBK7hj4Ov3rIwAAp9QIAAedpsoMiiyzZ+4EQWVw3Iv0\n8KVI27kwBS1ElHUI9TnNIwYfC+aKHk11V3jtyU4ZWY6cbbNC5rdMGXZvOyRrtrqA\nLv6VwZbM9myYGstzK90zQM7HmbgKje+BGgCXd29dmePJD9E87hElF6ElTwHZzJ+c\n1vbKlqjvMV05FNpnzjqK+PuCCWSUmo3CcqutRTAT6b9F37mpXqYXEWsX/QmUCwa5\nhVikpsQCjib9UBcmzQNh4Y3+vo0WQcPo+9CDzFjl8UwKPSM2wGToGN2dHukUjx5N\nUih7kLTTamo58CsgmXWHHE9n9aGJG83MhpDS2NM5NT6b4b0DdgFZTYHQrLeN+nQ=\n=InAU\n-----END PGP SIGNATURE-----\n", "payload": "tree 34b05afe9d34eaa2e63798f6a1bd4d3491b2cffc\nparent f715e430aac0de131e2ad21804013ea405722a66\nparent 0610df931449375a80bdd7ae03c2fd3116291c82\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1676969398 +0530\ncommitter GitHub <noreply@github.com> 1676969398 +0530\n\nRollup merge of #108000 - y21:no-zero-init-for-uninhabited, r=jackh726\n\nlint: don't suggest MaybeUninit::assume_init for uninhabited types\n\nCreating a zeroed uninhabited type such as `!` or an empty enum with `mem::zeroed()` (or transmuting `()` to `!`) currently triggers this lint:\n```rs\nwarning: the type `!` does not permit zero-initialization\n --> test.rs:5:23\n  |\n5 |         let _val: ! = mem::zeroed();\n  |                       ^^^^^^^^^^^^^\n  |                       |\n  |                       this code causes undefined behavior when executed\n  |                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n  |\n  = note: the `!` type has no valid value\n```\nThe `MaybeUninit` suggestion in the help message seems confusing/useless for uninhabited types, as such a type cannot be fully initialized in the first place (as the note implies).\nThis PR limits this help message to inhabited types which can be initialized\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dea3a295f99f166472ddec78ed9d590900436ff", "html_url": "https://github.com/rust-lang/rust/commit/4dea3a295f99f166472ddec78ed9d590900436ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dea3a295f99f166472ddec78ed9d590900436ff/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f715e430aac0de131e2ad21804013ea405722a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/f715e430aac0de131e2ad21804013ea405722a66", "html_url": "https://github.com/rust-lang/rust/commit/f715e430aac0de131e2ad21804013ea405722a66"}, {"sha": "0610df931449375a80bdd7ae03c2fd3116291c82", "url": "https://api.github.com/repos/rust-lang/rust/commits/0610df931449375a80bdd7ae03c2fd3116291c82", "html_url": "https://github.com/rust-lang/rust/commit/0610df931449375a80bdd7ae03c2fd3116291c82"}], "stats": {"total": 91, "additions": 32, "deletions": 59}, "files": [{"sha": "726042479e9b04647ac9ef7d61a460c1cfb323c8", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4dea3a295f99f166472ddec78ed9d590900436ff/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dea3a295f99f166472ddec78ed9d590900436ff/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=4dea3a295f99f166472ddec78ed9d590900436ff", "patch": "@@ -2635,7 +2635,13 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                 cx.emit_spanned_lint(\n                     INVALID_VALUE,\n                     expr.span,\n-                    BuiltinUnpermittedTypeInit { msg, ty: conjured_ty, label: expr.span, sub },\n+                    BuiltinUnpermittedTypeInit {\n+                        msg,\n+                        ty: conjured_ty,\n+                        label: expr.span,\n+                        sub,\n+                        tcx: cx.tcx,\n+                    },\n                 );\n             }\n         }"}, {"sha": "aa6e230dc6d6d7293c06ffaa48e0c7acc6c8d17f", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4dea3a295f99f166472ddec78ed9d590900436ff/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dea3a295f99f166472ddec78ed9d590900436ff/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=4dea3a295f99f166472ddec78ed9d590900436ff", "patch": "@@ -8,7 +8,9 @@ use rustc_errors::{\n };\n use rustc_hir::def_id::DefId;\n use rustc_macros::{LintDiagnostic, Subdiagnostic};\n-use rustc_middle::ty::{PolyExistentialTraitRef, Predicate, Ty, TyCtxt};\n+use rustc_middle::ty::{\n+    inhabitedness::InhabitedPredicate, PolyExistentialTraitRef, Predicate, Ty, TyCtxt,\n+};\n use rustc_session::parse::ParseSess;\n use rustc_span::{edition::Edition, sym, symbol::Ident, Span, Symbol};\n \n@@ -419,6 +421,7 @@ pub struct BuiltinUnpermittedTypeInit<'a> {\n     pub ty: Ty<'a>,\n     pub label: Span,\n     pub sub: BuiltinUnpermittedTypeInitSub,\n+    pub tcx: TyCtxt<'a>,\n }\n \n impl<'a> DecorateLint<'a, ()> for BuiltinUnpermittedTypeInit<'_> {\n@@ -428,7 +431,13 @@ impl<'a> DecorateLint<'a, ()> for BuiltinUnpermittedTypeInit<'_> {\n     ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n         diag.set_arg(\"ty\", self.ty);\n         diag.span_label(self.label, fluent::lint_builtin_unpermitted_type_init_label);\n-        diag.span_label(self.label, fluent::lint_builtin_unpermitted_type_init_label_suggestion);\n+        if let InhabitedPredicate::True = self.ty.inhabited_predicate(self.tcx) {\n+            // Only suggest late `MaybeUninit::assume_init` initialization if the type is inhabited.\n+            diag.span_label(\n+                self.label,\n+                fluent::lint_builtin_unpermitted_type_init_label_suggestion,\n+            );\n+        }\n         self.sub.add_to_diagnostic(diag);\n         diag\n     }"}, {"sha": "69fb1a59d4f39d284221fda381d9f992bd418ded", "filename": "tests/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4dea3a295f99f166472ddec78ed9d590900436ff/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4dea3a295f99f166472ddec78ed9d590900436ff/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=4dea3a295f99f166472ddec78ed9d590900436ff", "patch": "@@ -2,10 +2,7 @@ warning: the type `!` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:4:14\n    |\n LL |     unsafe { std::mem::transmute(()) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              this code causes undefined behavior when executed\n-   |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n    = note: the `!` type has no valid value\n    = note: `#[warn(invalid_value)]` on by default\n@@ -40,10 +37,7 @@ warning: the type `empty::Empty` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:21:42\n    |\n LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^\n-   |                                          |\n-   |                                          this code causes undefined behavior when executed\n-   |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n note: in this struct field\n   --> $DIR/validate_uninhabited_zsts.rs:16:22"}, {"sha": "69fb1a59d4f39d284221fda381d9f992bd418ded", "filename": "tests/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4dea3a295f99f166472ddec78ed9d590900436ff/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4dea3a295f99f166472ddec78ed9d590900436ff/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=4dea3a295f99f166472ddec78ed9d590900436ff", "patch": "@@ -2,10 +2,7 @@ warning: the type `!` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:4:14\n    |\n LL |     unsafe { std::mem::transmute(()) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              this code causes undefined behavior when executed\n-   |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n    = note: the `!` type has no valid value\n    = note: `#[warn(invalid_value)]` on by default\n@@ -40,10 +37,7 @@ warning: the type `empty::Empty` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:21:42\n    |\n LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^\n-   |                                          |\n-   |                                          this code causes undefined behavior when executed\n-   |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n note: in this struct field\n   --> $DIR/validate_uninhabited_zsts.rs:16:22"}, {"sha": "57531b0968f1ebe4ba82576847c2976f26dff093", "filename": "tests/ui/lint/invalid_value.stderr", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4dea3a295f99f166472ddec78ed9d590900436ff/tests%2Fui%2Flint%2Finvalid_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4dea3a295f99f166472ddec78ed9d590900436ff/tests%2Fui%2Flint%2Finvalid_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid_value.stderr?ref=4dea3a295f99f166472ddec78ed9d590900436ff", "patch": "@@ -61,54 +61,39 @@ error: the type `!` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:65:23\n    |\n LL |         let _val: ! = mem::zeroed();\n-   |                       ^^^^^^^^^^^^^\n-   |                       |\n-   |                       this code causes undefined behavior when executed\n-   |                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                       ^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n    = note: the `!` type has no valid value\n \n error: the type `!` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:66:23\n    |\n LL |         let _val: ! = mem::uninitialized();\n-   |                       ^^^^^^^^^^^^^^^^^^^^\n-   |                       |\n-   |                       this code causes undefined behavior when executed\n-   |                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                       ^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n    = note: the `!` type has no valid value\n \n error: the type `(i32, !)` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:68:30\n    |\n LL |         let _val: (i32, !) = mem::zeroed();\n-   |                              ^^^^^^^^^^^^^\n-   |                              |\n-   |                              this code causes undefined behavior when executed\n-   |                              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                              ^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n    = note: the `!` type has no valid value\n \n error: the type `(i32, !)` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:69:30\n    |\n LL |         let _val: (i32, !) = mem::uninitialized();\n-   |                              ^^^^^^^^^^^^^^^^^^^^\n-   |                              |\n-   |                              this code causes undefined behavior when executed\n-   |                              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                              ^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n    = note: integers must be initialized\n \n error: the type `Void` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:71:26\n    |\n LL |         let _val: Void = mem::zeroed();\n-   |                          ^^^^^^^^^^^^^\n-   |                          |\n-   |                          this code causes undefined behavior when executed\n-   |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                          ^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n note: enums with no inhabited variants have no valid value\n   --> $DIR/invalid_value.rs:12:1\n@@ -120,10 +105,7 @@ error: the type `Void` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:72:26\n    |\n LL |         let _val: Void = mem::uninitialized();\n-   |                          ^^^^^^^^^^^^^^^^^^^^\n-   |                          |\n-   |                          this code causes undefined behavior when executed\n-   |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                          ^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n note: enums with no inhabited variants have no valid value\n   --> $DIR/invalid_value.rs:12:1\n@@ -405,10 +387,7 @@ error: the type `TwoUninhabited` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:104:36\n    |\n LL |         let _val: TwoUninhabited = mem::zeroed();\n-   |                                    ^^^^^^^^^^^^^\n-   |                                    |\n-   |                                    this code causes undefined behavior when executed\n-   |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                                    ^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n note: enums with no inhabited variants have no valid value\n   --> $DIR/invalid_value.rs:42:1\n@@ -420,10 +399,7 @@ error: the type `TwoUninhabited` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:105:36\n    |\n LL |         let _val: TwoUninhabited = mem::uninitialized();\n-   |                                    ^^^^^^^^^^^^^^^^^^^^\n-   |                                    |\n-   |                                    this code causes undefined behavior when executed\n-   |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                                    ^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n note: enums with no inhabited variants have no valid value\n   --> $DIR/invalid_value.rs:42:1"}, {"sha": "437053a4476e18b8425f0af591508e2357a2a61f", "filename": "tests/ui/statics/uninhabited-static.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4dea3a295f99f166472ddec78ed9d590900436ff/tests%2Fui%2Fstatics%2Funinhabited-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4dea3a295f99f166472ddec78ed9d590900436ff/tests%2Fui%2Fstatics%2Funinhabited-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatics%2Funinhabited-static.stderr?ref=4dea3a295f99f166472ddec78ed9d590900436ff", "patch": "@@ -53,10 +53,7 @@ warning: the type `Void` does not permit zero-initialization\n   --> $DIR/uninhabited-static.rs:12:31\n    |\n LL | static VOID2: Void = unsafe { std::mem::transmute(()) };\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^\n-   |                               |\n-   |                               this code causes undefined behavior when executed\n-   |                               help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n note: enums with no inhabited variants have no valid value\n   --> $DIR/uninhabited-static.rs:4:1\n@@ -75,10 +72,7 @@ warning: the type `Void` does not permit zero-initialization\n   --> $DIR/uninhabited-static.rs:16:32\n    |\n LL | static NEVER2: Void = unsafe { std::mem::transmute(()) };\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^\n-   |                                |\n-   |                                this code causes undefined behavior when executed\n-   |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n note: enums with no inhabited variants have no valid value\n   --> $DIR/uninhabited-static.rs:4:1"}]}