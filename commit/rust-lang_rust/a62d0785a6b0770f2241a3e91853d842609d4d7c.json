{"sha": "a62d0785a6b0770f2241a3e91853d842609d4d7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MmQwNzg1YTZiMDc3MGYyMjQxYTNlOTE4NTNkODQyNjA5ZDRkN2M=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-01T03:08:04Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-03T04:09:35Z"}, "message": "Fixed unsoundness hole.", "tree": {"sha": "687eafcacf879cde77eba340fb1df82c0980db75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/687eafcacf879cde77eba340fb1df82c0980db75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a62d0785a6b0770f2241a3e91853d842609d4d7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a62d0785a6b0770f2241a3e91853d842609d4d7c", "html_url": "https://github.com/rust-lang/rust/commit/a62d0785a6b0770f2241a3e91853d842609d4d7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a62d0785a6b0770f2241a3e91853d842609d4d7c/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "469c3bf75b5768611f65c65c3bbafab3c315dcdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/469c3bf75b5768611f65c65c3bbafab3c315dcdf", "html_url": "https://github.com/rust-lang/rust/commit/469c3bf75b5768611f65c65c3bbafab3c315dcdf"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "49cd87e2dc54ecc665f64863bc8c55e3ba4f88e2", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62d0785a6b0770f2241a3e91853d842609d4d7c/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62d0785a6b0770f2241a3e91853d842609d4d7c/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=a62d0785a6b0770f2241a3e91853d842609d4d7c", "patch": "@@ -636,7 +636,7 @@ impl<'tcx> TraitRef<'tcx> {\n         TraitRef { def_id: def_id, substs: substs }\n     }\n \n-    /// Returns a TraitRef of the form `P0: Foo<P1..Pn>` where `Pi`\n+    /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n     /// are the parameters defined on trait.\n     pub fn identity<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>, def_id: DefId) -> TraitRef<'tcx> {\n         TraitRef {"}, {"sha": "e44cfec82ad642f624d224b6e7920c3f372b0977", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a62d0785a6b0770f2241a3e91853d842609d4d7c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62d0785a6b0770f2241a3e91853d842609d4d7c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a62d0785a6b0770f2241a3e91853d842609d4d7c", "patch": "@@ -974,9 +974,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         let principal = self.instantiate_poly_trait_ref(&trait_bounds[0],\n                                                         dummy_self,\n                                                         &mut projection_bounds);\n+        debug!(\"principal: {:?}\", principal);\n \n         for trait_bound in trait_bounds[1..].iter() {\n-            // Sanity check for non-principal trait bounds\n+            // sanity check for non-principal trait bounds\n             self.instantiate_poly_trait_ref(trait_bound,\n                                             dummy_self,\n                                             &mut vec![]);\n@@ -1008,9 +1009,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             })\n         });\n \n-        // check that there are no gross object safety violations,\n+        // Check that there are no gross object safety violations;\n         // most importantly, that the supertraits don't contain Self,\n-        // to avoid ICE-s.\n+        // to avoid ICEs.\n         let object_safety_violations =\n             tcx.astconv_object_safety_violations(principal.def_id());\n         if !object_safety_violations.is_empty() {\n@@ -1020,7 +1021,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             return tcx.types.err;\n         }\n \n-        // use a BTreeSet to keep output in a more consistent order\n+        // Use a BTreeSet to keep output in a more consistent order.\n         let mut associated_types = BTreeSet::default();\n \n         for tr in traits::supertraits(tcx, principal) {\n@@ -1059,7 +1060,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         v.sort_by(|a, b| a.stable_cmp(tcx, b));\n         let existential_predicates = ty::Binder::bind(tcx.mk_existential_predicates(v.into_iter()));\n \n-        // Explicitly specified region bound. Use that.\n+        // Use explicitly-specified region bound.\n         let region_bound = if !lifetime.is_elided() {\n             self.ast_region_to_region(lifetime, None)\n         } else {"}, {"sha": "917fb887e0b89be84b48cb38d6e7e722171bef29", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a62d0785a6b0770f2241a3e91853d842609d4d7c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62d0785a6b0770f2241a3e91853d842609d4d7c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a62d0785a6b0770f2241a3e91853d842609d4d7c", "patch": "@@ -319,7 +319,8 @@ fn type_param_predicates<'a, 'tcx>(\n     let icx = ItemCtxt::new(tcx, item_def_id);\n     result\n         .predicates\n-        .extend(icx.type_parameter_bounds_in_generics(ast_generics, param_id, ty, true));\n+        .extend(icx.type_parameter_bounds_in_generics(ast_generics, param_id, ty,\n+            OnlySelfBounds(true)));\n     result\n }\n \n@@ -716,7 +717,7 @@ fn super_predicates_of<'a, 'tcx>(\n     // as one of its \"superpredicates\".\n     let is_trait_alias = ty::is_trait_alias(tcx, trait_def_id);\n     let superbounds2 = icx.type_parameter_bounds_in_generics(\n-        generics, item.id, self_param_ty, !is_trait_alias);\n+        generics, item.id, self_param_ty, OnlySelfBounds(!is_trait_alias));\n \n     // Combine the two lists to form the complete set of superbounds:\n     let superbounds: Vec<_> = superbounds1.into_iter().chain(superbounds2).collect();\n@@ -1694,6 +1695,7 @@ fn explicit_predicates_of<'a, 'tcx>(\n \n     let icx = ItemCtxt::new(tcx, def_id);\n     let no_generics = hir::Generics::empty();\n+    let empty_trait_items = HirVec::new();\n \n     let mut predicates = UniquePredicates::new();\n \n@@ -1738,6 +1740,10 @@ fn explicit_predicates_of<'a, 'tcx>(\n                     is_trait = Some((ty::TraitRef::identity(tcx, def_id), items));\n                     generics\n                 }\n+                ItemKind::TraitAlias(ref generics, _) => {\n+                    is_trait = Some((ty::TraitRef::identity(tcx, def_id), &empty_trait_items));\n+                    generics\n+                }\n                 ItemKind::Existential(ExistTy {\n                     ref bounds,\n                     impl_trait_fn,"}]}