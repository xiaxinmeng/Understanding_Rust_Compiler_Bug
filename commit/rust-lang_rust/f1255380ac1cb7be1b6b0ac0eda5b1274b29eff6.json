{"sha": "f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "node_id": "C_kwDOAAsO6NoAKGYxMjU1MzgwYWMxY2I3YmUxYjZiMGFjMGVkYTViMTI3NGIyOWVmZjY", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-30T20:11:30Z"}, "committer": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-17T15:23:22Z"}, "message": "Add more codegen tests", "tree": {"sha": "4b0add72699a923fde3a2c7801330403a369c6ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b0add72699a923fde3a2c7801330403a369c6ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "html_url": "https://github.com/rust-lang/rust/commit/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af23ad93cd3309e90ccb2c49b7a7b2ac913e0d06", "url": "https://api.github.com/repos/rust-lang/rust/commits/af23ad93cd3309e90ccb2c49b7a7b2ac913e0d06", "html_url": "https://github.com/rust-lang/rust/commit/af23ad93cd3309e90ccb2c49b7a7b2ac913e0d06"}], "stats": {"total": 305, "additions": 166, "deletions": 139}, "files": [{"sha": "3c2d4e719d423f9a309064cb688d0419f9b25a59", "filename": "tests/codegen/abi-sysv64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fabi-sysv64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fabi-sysv64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fabi-sysv64.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -3,7 +3,7 @@\n // of the sysv64 abi.\n //\n // needs-llvm-components: x86\n-// compile-flags: -C no-prepopulate-passes --target=x86_64-unknown-linux-gnu\n+// compile-flags: -C no-prepopulate-passes --target=x86_64-unknown-linux-gnu -Copt-level=0\n \n #![crate_type = \"lib\"]\n #![no_core]\n@@ -15,7 +15,7 @@ trait Sized {}\n trait Copy {}\n impl Copy for i64 {}\n \n-// CHECK: define x86_64_sysvcc noundef i64 @has_sysv64_abi\n+// CHECK: define x86_64_sysvcc i64 @has_sysv64_abi\n #[no_mangle]\n pub extern \"sysv64\" fn has_sysv64_abi(a: i64) -> i64 {\n     a"}, {"sha": "928ad5a9bbd6376d493b902cbc6dabdb1c0ff909", "filename": "tests/codegen/abi-x86-interrupt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fabi-x86-interrupt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fabi-x86-interrupt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fabi-x86-interrupt.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -3,7 +3,7 @@\n // of the x86-interrupt abi.\n \n // needs-llvm-components: x86\n-// compile-flags: -C no-prepopulate-passes --target=x86_64-unknown-linux-gnu\n+// compile-flags: -C no-prepopulate-passes --target=x86_64-unknown-linux-gnu -Copt-level=0\n \n #![crate_type = \"lib\"]\n #![no_core]\n@@ -15,7 +15,7 @@ trait Sized {}\n trait Copy {}\n impl Copy for i64 {}\n \n-// CHECK: define x86_intrcc noundef i64 @has_x86_interrupt_abi\n+// CHECK: define x86_intrcc i64 @has_x86_interrupt_abi\n #[no_mangle]\n pub extern \"x86-interrupt\" fn has_x86_interrupt_abi(a: i64) -> i64 {\n     a"}, {"sha": "6d22475175270570f022bd0816bf3d18dd594007", "filename": "tests/codegen/adjustments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fadjustments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fadjustments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fadjustments.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,9 +1,9 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n \n #![crate_type = \"lib\"]\n \n // Hack to get the correct size for the length part in slices\n-// CHECK: @helper([[USIZE:i[0-9]+]] noundef %_1)\n+// CHECK: @helper([[USIZE:i[0-9]+]] %_1)\n #[no_mangle]\n pub fn helper(_: usize) {\n }"}, {"sha": "cab32652210d0a08188e870c3c893267fa29191f", "filename": "tests/codegen/c-variadic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fc-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fc-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fc-variadic.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,5 +1,5 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n //\n \n #![crate_type = \"lib\"]\n@@ -15,7 +15,7 @@ extern \"C\" {\n \n pub unsafe extern \"C\" fn use_foreign_c_variadic_0() {\n     // Ensure that we correctly call foreign C-variadic functions.\n-    // CHECK: call void (i32, ...) @foreign_c_variadic_0([[PARAM:i32 noundef( signext)?]] 0)\n+    // CHECK: call void (i32, ...) @foreign_c_variadic_0([[PARAM:i32( signext)?]] 0)\n     foreign_c_variadic_0(0);\n     // CHECK: call void (i32, ...) @foreign_c_variadic_0([[PARAM]] 0, [[PARAM]] 42)\n     foreign_c_variadic_0(0, 42i32);\n@@ -61,7 +61,7 @@ pub unsafe extern \"C\" fn c_variadic(n: i32, mut ap: ...) -> i32 {\n // Ensure that we generate the correct `call` signature when calling a Rust\n // defined C-variadic.\n pub unsafe fn test_c_variadic_call() {\n-    // CHECK: call [[RET:noundef( signext)? i32]] (i32, ...) @c_variadic([[PARAM]] 0)\n+    // CHECK: call [[RET:(signext )?i32]] (i32, ...) @c_variadic([[PARAM]] 0)\n     c_variadic(0);\n     // CHECK: call [[RET]] (i32, ...) @c_variadic([[PARAM]] 0, [[PARAM]] 42)\n     c_variadic(0, 42i32);"}, {"sha": "cb8abae198ee65b9315f9d1a1d827605f8512400", "filename": "tests/codegen/call-llvm-intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n \n // ignore-riscv64\n \n@@ -23,7 +23,7 @@ pub fn do_call() {\n \n     unsafe {\n         // Ensure that we `call` LLVM intrinsics instead of trying to `invoke` them\n-        // CHECK: call noundef float @llvm.sqrt.f32(float noundef 4.000000e+00\n+        // CHECK: call float @llvm.sqrt.f32(float 4.000000e+00\n         sqrt(4.0);\n     }\n }"}, {"sha": "383940e95906d1c6dad3db944243ae674e98cb35", "filename": "tests/codegen/dllimports/main.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fdllimports%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fdllimports%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fdllimports%2Fmain.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,4 +1,4 @@\n-// This test is for *-windows-msvc only.\n+ // This test is for *-windows-msvc only.\n // only-windows\n // ignore-gnu\n \n@@ -15,10 +15,10 @@ extern crate wrapper;\n // CHECK: @static_global1 = external local_unnamed_addr global i32\n // CHECK: @static_global2 = external local_unnamed_addr global i32\n \n-// CHECK: declare dllimport i32 @dylib_func1(i32)\n-// CHECK: declare dllimport i32 @dylib_func2(i32)\n-// CHECK: declare i32 @static_func1(i32)\n-// CHECK: declare i32 @static_func2(i32)\n+// CHECK: declare dllimport noundef i32 @dylib_func1(i32 noundef)\n+// CHECK: declare dllimport noundef i32 @dylib_func2(i32 noundef)\n+// CHECK: declare noundef i32 @static_func1(i32 noundef)\n+// CHECK: declare noundef i32 @static_func2(i32 noundef)\n \n #[link(name = \"dummy\", kind=\"dylib\")]\n extern \"C\" {"}, {"sha": "d8933262e528e98cc4522726d43b1fff87176257", "filename": "tests/codegen/frame-pointer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fframe-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fframe-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fframe-pointer.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: --crate-type=rlib\n+// compile-flags: --crate-type=rlib -Copt-level=0\n // revisions: aarch64-apple aarch64-linux force x64-apple x64-linux\n // [aarch64-apple] needs-llvm-components: aarch64\n // [aarch64-apple] compile-flags: --target=aarch64-apple-darwin\n@@ -20,7 +20,7 @@ trait Copy { }\n impl Copy for u32 {}\n \n \n-// CHECK: define noundef i32 @peach{{.*}}[[PEACH_ATTRS:\\#[0-9]+]] {\n+// CHECK: define i32 @peach{{.*}}[[PEACH_ATTRS:\\#[0-9]+]] {\n #[no_mangle]\n pub fn peach(x: u32) -> u32 {\n     x"}, {"sha": "1f979d7b90a70b08b7a5edd95028777218481772", "filename": "tests/codegen/function-arguments.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ffunction-arguments.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,11 +1,11 @@\n // compile-flags: -O -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n-#![feature(rustc_attrs)]\n \n use std::mem::MaybeUninit;\n use std::num::NonZeroU64;\n use std::marker::PhantomPinned;\n+use std::ptr::NonNull;\n \n pub struct S {\n   _field: [i32; 8],\n@@ -138,11 +138,27 @@ pub fn indirect_struct(_: S) {\n pub fn borrowed_struct(_: &S) {\n }\n \n+// CHECK: @option_borrow({{i32\\*|ptr}} noalias noundef readonly align 4 dereferenceable_or_null(4) %x)\n+#[no_mangle]\n+pub fn option_borrow(x: Option<&i32>) {\n+}\n+\n+// CHECK: @option_borrow_mut({{i32\\*|ptr}} noalias noundef align 4 dereferenceable_or_null(4) %x)\n+#[no_mangle]\n+pub fn option_borrow_mut(x: Option<&mut i32>) {\n+}\n+\n // CHECK: @raw_struct({{%S\\*|ptr}} noundef %_1)\n #[no_mangle]\n pub fn raw_struct(_: *const S) {\n }\n \n+// CHECK: @raw_option_nonnull_struct({{i32\\*|ptr}} noundef %_1)\n+#[no_mangle]\n+pub fn raw_option_nonnull_struct(_: Option<NonNull<S>>) {\n+}\n+\n+\n // `Box` can get deallocated during execution of the function, so it should\n // not get `dereferenceable`.\n // CHECK: noundef nonnull align 4 {{i32\\*|ptr}} @_box({{i32\\*|ptr}} noalias noundef nonnull align 4 %x)\n@@ -200,6 +216,16 @@ pub fn str(_: &[u8]) {\n pub fn trait_borrow(_: &dyn Drop) {\n }\n \n+// CHECK: @option_trait_borrow({{i8\\*|ptr}} noundef align 1 %x.0, {{i8\\*|ptr}} %x.1)\n+#[no_mangle]\n+pub fn option_trait_borrow(x: Option<&dyn Drop>) {\n+}\n+\n+// CHECK: @option_trait_borrow_mut({{i8\\*|ptr}} noundef align 1 %x.0, {{i8\\*|ptr}} %x.1)\n+#[no_mangle]\n+pub fn option_trait_borrow_mut(x: Option<&mut dyn Drop>) {\n+}\n+\n // CHECK: @trait_raw({{\\{\\}\\*|ptr}} noundef %_1.0, {{.+}} noalias noundef readonly align {{.*}} dereferenceable({{.*}}) %_1.1)\n #[no_mangle]\n pub fn trait_raw(_: *const dyn Drop) {"}, {"sha": "f3877dc6b96a68e2efe69158dcaad271eab83690", "filename": "tests/codegen/intrinsics/const_eval_select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n \n #![crate_type = \"lib\"]\n #![feature(const_eval_select)]\n@@ -13,6 +13,6 @@ pub fn hi(n: i32) -> i32 { n }\n \n #[no_mangle]\n pub unsafe fn hey() {\n-    // CHECK: call noundef i32 @hi(i32\n+    // CHECK: call i32 @hi(i32\n     const_eval_select((42,), foo, hi);\n }"}, {"sha": "8f93da2e5da437f616250d863f23d71b8c24c8de", "filename": "tests/codegen/intrinsics/mask.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fintrinsics%2Fmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fintrinsics%2Fmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fintrinsics%2Fmask.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,11 +1,12 @@\n+// compile-flags: -Copt-level=0\n #![crate_type = \"lib\"]\n #![feature(core_intrinsics)]\n \n // CHECK-LABEL: @mask_ptr\n-// CHECK-SAME: [[WORD:i[0-9]+]] noundef %mask\n+// CHECK-SAME: [[WORD:i[0-9]+]] %mask\n #[no_mangle]\n pub fn mask_ptr(ptr: *const u16, mask: usize) -> *const u16 {\n     // CHECK: call\n-    // CHECK-SAME: @llvm.ptrmask.{{p0|p0i8}}.[[WORD]]({{ptr|i8\\*}} {{%ptr|%0}}, [[WORD]] %mask)\n+    // CHECK-SAME: @llvm.ptrmask.{{p0|p0i8}}.[[WORD]]({{ptr|i8\\*}} {{%ptr|%1}}, [[WORD]] %mask)\n     core::intrinsics::ptr_mask(ptr, mask)\n }"}, {"sha": "abef92c19b610b612da29d6c5fbad049c2ddd695", "filename": "tests/codegen/issue-32031.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fissue-32031.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fissue-32031.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissue-32031.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,11 +1,11 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n \n #![crate_type = \"lib\"]\n \n #[no_mangle]\n pub struct F32(f32);\n \n-// CHECK: define{{.*}}float @add_newtype_f32(float noundef %a, float noundef %b)\n+// CHECK: define{{.*}}float @add_newtype_f32(float %a, float %b)\n #[inline(never)]\n #[no_mangle]\n pub fn add_newtype_f32(a: F32, b: F32) -> F32 {\n@@ -15,7 +15,7 @@ pub fn add_newtype_f32(a: F32, b: F32) -> F32 {\n #[no_mangle]\n pub struct F64(f64);\n \n-// CHECK: define{{.*}}double @add_newtype_f64(double noundef %a, double noundef %b)\n+// CHECK: define{{.*}}double @add_newtype_f64(double %a, double %b)\n #[inline(never)]\n #[no_mangle]\n pub fn add_newtype_f64(a: F64, b: F64) -> F64 {"}, {"sha": "00f8953d94952f1c1ec7a521f49510c09b1d8acb", "filename": "tests/codegen/issue-58881.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fissue-58881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fissue-58881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissue-58881.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n //\n // only-x86_64\n // ignore-windows\n@@ -16,6 +16,6 @@ struct Bar(u64, u64, u64);\n \n // Ensure that emit arguments of the correct type.\n pub unsafe fn test_call_variadic() {\n-    // CHECK: call void (i32, ...) @variadic_fn(i32 noundef 0, i8 {{.*}}, {{%Bar\\*|ptr}} {{.*}})\n+    // CHECK: call void (i32, ...) @variadic_fn(i32 0, i8 {{.*}}, {{%Bar\\*|ptr}} {{.*}})\n     variadic_fn(0, Foo(0), Bar(0, 0, 0))\n }"}, {"sha": "24059f190acf608944117454013e8a33d7ee1429", "filename": "tests/codegen/iter-repeat-n-trivial-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fiter-repeat-n-trivial-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fiter-repeat-n-trivial-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fiter-repeat-n-trivial-drop.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -46,7 +46,7 @@ pub fn iter_repeat_n_next(it: &mut std::iter::RepeatN<NotCopy>) -> Option<NotCop\n #[no_mangle]\n // CHECK-LABEL: @vec_extend_via_iter_repeat_n\n pub fn vec_extend_via_iter_repeat_n() -> Vec<u8> {\n-    // CHECK: %[[ADDR:.+]] = tail call dereferenceable_or_null(1234) ptr @__rust_alloc(i64 1234, i64 1)\n+    // CHECK: %[[ADDR:.+]] = tail call noundef dereferenceable_or_null(1234) ptr @__rust_alloc(i64 noundef 1234, i64 noundef 1)\n     // CHECK: tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(1234) %[[ADDR]], i8 42, i64 1234,\n \n     let n = 1234_usize;"}, {"sha": "f29a26596bfd5a8af36962e3e3ad6fa9e4244fc5", "filename": "tests/codegen/loads.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Floads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Floads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Floads.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -51,7 +51,7 @@ pub fn load_scalar_pair<'a>(x: &(&'a i32, &'a Align16)) -> (&'a i32, &'a Align16\n #[no_mangle]\n pub fn load_raw_pointer<'a>(x: &*const i32) -> *const i32 {\n     // loaded raw pointer should not have !nonnull or !align metadata\n-    // CHECK: load {{i32\\*|ptr}}, {{i32\\*\\*|ptr}} %x, align [[PTR_ALIGNMENT]], !noundef !2{{$}}\n+    // CHECK: load {{i32\\*|ptr}}, {{i32\\*\\*|ptr}} %x, align [[PTR_ALIGNMENT]], !noundef ![[NOUNDEF:[0-9]+]]{{$}}\n     *x\n }\n \n@@ -93,7 +93,7 @@ pub fn load_maybeuninit_enum_bool(x: &MaybeUninit<MyBool>) -> MaybeUninit<MyBool\n // CHECK-LABEL: @load_int\n #[no_mangle]\n pub fn load_int(x: &u16) -> u16 {\n-    // CHECK: load i16, {{i16\\*|ptr}} %x, align 2, !noundef !2{{$}}\n+    // CHECK: load i16, {{i16\\*|ptr}} %x, align 2, !noundef ![[NOUNDEF]]{{$}}\n     *x\n }\n \n@@ -107,7 +107,7 @@ pub fn load_nonzero_int(x: &NonZeroU16) -> NonZeroU16 {\n // CHECK-LABEL: @load_option_nonzero_int\n #[no_mangle]\n pub fn load_option_nonzero_int(x: &Option<NonZeroU16>) -> Option<NonZeroU16> {\n-    // CHECK: load i16, {{i16\\*|ptr}} %x, align 2, !noundef !2{{$}}\n+    // CHECK: load i16, {{i16\\*|ptr}} %x, align 2, !noundef ![[NOUNDEF]]{{$}}\n     *x\n }\n "}, {"sha": "e05bbc26e830c33d43db8295fb5a0709eab735ed", "filename": "tests/codegen/naked-functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fnaked-functions.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n // needs-asm-support\n // only-x86_64\n \n@@ -19,7 +19,7 @@ pub unsafe extern \"C\" fn naked_empty() {\n }\n \n // CHECK: Function Attrs: naked\n-// CHECK-NEXT: define{{.*}}i{{[0-9]+}} @naked_with_args_and_return(i64 noundef %a, i64 noundef %b)\n+// CHECK-NEXT: define{{.*}}i{{[0-9]+}} @naked_with_args_and_return(i64 %a, i64 %b)\n #[no_mangle]\n #[naked]\n pub unsafe extern \"C\" fn naked_with_args_and_return(a: isize, b: isize) -> isize {"}, {"sha": "518e949ffe34386cb1446ee1082eb6f1ea9de6d5", "filename": "tests/codegen/pic-relocation-model.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fpic-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fpic-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fpic-relocation-model.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,8 +1,8 @@\n-// compile-flags: -C relocation-model=pic\n+// compile-flags: -C relocation-model=pic -Copt-level=0\n \n #![crate_type = \"rlib\"]\n \n-// CHECK: define noundef i8 @call_foreign_fn()\n+// CHECK: define i8 @call_foreign_fn()\n #[no_mangle]\n pub fn call_foreign_fn() -> u8 {\n     unsafe {\n@@ -13,7 +13,7 @@ pub fn call_foreign_fn() -> u8 {\n // (Allow but do not require `zeroext` here, because it is not worth effort to\n // spell out which targets have it and which ones do not; see rust#97800.)\n \n-// CHECK: declare noundef{{( zeroext)?}} i8 @foreign_fn()\n+// CHECK: declare{{( zeroext)?}} i8 @foreign_fn()\n extern \"C\" {fn foreign_fn() -> u8;}\n \n // CHECK: !{i32 {{[78]}}, !\"PIC Level\", i32 2}"}, {"sha": "941cca922bd328de6f23e25aceea3d69128e7e6c", "filename": "tests/codegen/pie-relocation-model.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fpie-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fpie-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fpie-relocation-model.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,11 +1,11 @@\n-// compile-flags: -C relocation-model=pie\n+// compile-flags: -C relocation-model=pie -Copt-level=0\n // only-x86_64-unknown-linux-gnu\n \n #![crate_type = \"rlib\"]\n \n // With PIE we know local functions cannot be interpositioned, we can mark them\n // as dso_local.\n-// CHECK: define dso_local noundef i8 @call_foreign_fn()\n+// CHECK: define dso_local i8 @call_foreign_fn()\n #[no_mangle]\n pub fn call_foreign_fn() -> u8 {\n     unsafe {\n@@ -15,7 +15,7 @@ pub fn call_foreign_fn() -> u8 {\n \n // External functions are still marked as non-dso_local, since we don't know if the symbol\n // is defined in the binary or in the shared library.\n-// CHECK: declare noundef zeroext i8 @foreign_fn()\n+// CHECK: declare zeroext i8 @foreign_fn()\n extern \"C\" {fn foreign_fn() -> u8;}\n \n // CHECK: !{i32 {{[78]}}, !\"PIC Level\", i32 2}"}, {"sha": "a528976671110963852af8779e27dcaa8c2fda44", "filename": "tests/codegen/refs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Frefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Frefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Frefs.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,9 +1,9 @@\n-// compile-flags: -C no-prepopulate-passes -Zmir-opt-level=0\n+// compile-flags: -C no-prepopulate-passes -Zmir-opt-level=0 -Copt-level=0\n \n #![crate_type = \"lib\"]\n \n // Hack to get the correct size for the length part in slices\n-// CHECK: @helper([[USIZE:i[0-9]+]] noundef %_1)\n+// CHECK: @helper([[USIZE:i[0-9]+]] %_1)\n #[no_mangle]\n pub fn helper(_: usize) {\n }"}, {"sha": "597b867ebad143ade9660a48d6ed64ca08e0a8d9", "filename": "tests/codegen/sanitizer-cfi-emit-type-checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,7 +1,7 @@\n // Verifies that pointer type membership tests for indirect calls are emitted.\n //\n // needs-sanitizer-cfi\n-// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Copt-level=0\n \n #![crate_type=\"lib\"]\n \n@@ -11,7 +11,7 @@ pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n     // CHECK:       [[TT:%.+]] = call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"{{[[:print:]]+}}\")\n     // CHECK-NEXT:  br i1 [[TT]], label %type_test.pass, label %type_test.fail\n     // CHECK:       type_test.pass:\n-    // CHECK-NEXT:  {{%.+}} = call noundef i32 %f(i32 noundef %arg)\n+    // CHECK-NEXT:  {{%.+}} = call i32 %f(i32 %arg)\n     // CHECK-NEXT:  br label %bb1\n     // CHECK:       type_test.fail:\n     // CHECK-NEXT:  call void @llvm.trap()"}, {"sha": "2537df80a90b44b62f84d9e9aa037e0f9bc01e65", "filename": "tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -5,7 +5,7 @@\n // [aarch64] needs-llvm-components: aarch64\n // [x86_64] compile-flags: --target x86_64-unknown-none\n // [x86_64] needs-llvm-components:\n-// compile-flags: -Cno-prepopulate-passes -Zsanitizer=kcfi\n+// compile-flags: -Cno-prepopulate-passes -Zsanitizer=kcfi -Copt-level=0\n \n #![crate_type=\"lib\"]\n #![feature(no_core, lang_items)]\n@@ -21,21 +21,21 @@ impl Copy for i32 {}\n pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}foo\n     // CHECK-SAME: {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE1:[0-9]+]]\n-    // CHECK: call noundef i32 %f(i32 noundef %arg){{.*}}[ \"kcfi\"(i32 -1666898348) ]\n+    // CHECK: call i32 %f(i32 %arg){{.*}}[ \"kcfi\"(i32 -1666898348) ]\n     f(arg)\n }\n \n pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}bar\n     // CHECK-SAME: {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE2:[0-9]+]]\n-    // CHECK: call noundef i32 %f(i32 noundef %arg1, i32 noundef %arg2){{.*}}[ \"kcfi\"(i32 -1789026986) ]\n+    // CHECK: call i32 %f(i32 %arg1, i32 %arg2){{.*}}[ \"kcfi\"(i32 -1789026986) ]\n     f(arg1, arg2)\n }\n \n pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}baz\n     // CHECK-SAME: {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE3:[0-9]+]]\n-    // CHECK: call noundef i32 %f(i32 noundef %arg1, i32 noundef %arg2, i32 noundef %arg3){{.*}}[ \"kcfi\"(i32 1248878270) ]\n+    // CHECK: call i32 %f(i32 %arg1, i32 %arg2, i32 %arg3){{.*}}[ \"kcfi\"(i32 1248878270) ]\n     f(arg1, arg2, arg3)\n }\n "}, {"sha": "7b00fcf8e1bd743d6b7268b361626f0308574f60", "filename": "tests/codegen/sanitizer-recover.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fsanitizer-recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fsanitizer-recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-recover.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -6,8 +6,8 @@\n // revisions:ASAN ASAN-RECOVER MSAN MSAN-RECOVER MSAN-RECOVER-LTO\n // no-prefer-dynamic\n //\n-//[ASAN]             compile-flags: -Zsanitizer=address\n-//[ASAN-RECOVER]     compile-flags: -Zsanitizer=address -Zsanitizer-recover=address\n+//[ASAN]             compile-flags: -Zsanitizer=address -Copt-level=0\n+//[ASAN-RECOVER]     compile-flags: -Zsanitizer=address -Zsanitizer-recover=address -Copt-level=0\n //[MSAN]             compile-flags: -Zsanitizer=memory\n //[MSAN-RECOVER]     compile-flags: -Zsanitizer=memory  -Zsanitizer-recover=memory\n //[MSAN-RECOVER-LTO] compile-flags: -Zsanitizer=memory  -Zsanitizer-recover=memory -C lto=fat\n@@ -16,12 +16,12 @@\n // MSAN-RECOVER:     @__msan_keep_going = weak_odr {{.*}}constant i32 1\n // MSAN-RECOVER-LTO: @__msan_keep_going = weak_odr {{.*}}constant i32 1\n \n-// ASAN-LABEL: define dso_local noundef i32 @penguin(\n+// ASAN-LABEL: define dso_local i32 @penguin(\n // ASAN:         call void @__asan_report_load4(i64 %0)\n // ASAN:         unreachable\n // ASAN:       }\n //\n-// ASAN-RECOVER-LABEL: define dso_local noundef i32 @penguin(\n+// ASAN-RECOVER-LABEL: define dso_local i32 @penguin(\n // ASAN-RECOVER:         call void @__asan_report_load4_noabort(\n // ASAN-RECOVER-NOT:     unreachable\n // ASAN:               }"}, {"sha": "9f2d9d06524f0d65a30dd56432a01216570aa34a", "filename": "tests/codegen/some-abis-do-extend-params-to-32-bits.rs", "status": "modified", "additions": 75, "deletions": 75, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fsome-abis-do-extend-params-to-32-bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fsome-abis-do-extend-params-to-32-bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsome-abis-do-extend-params-to-32-bits.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Cno-prepopulate-passes\n+// compile-flags: -Cno-prepopulate-passes -Copt-level=0\n \n // revisions:x86_64 i686 aarch64-apple aarch64-windows aarch64-linux arm riscv\n \n@@ -31,148 +31,148 @@\n // The patterns in this file are written in the style of a table to make the\n // uniformities and distinctions more apparent.\n //\n-//                  ZERO/SIGN-EXTENDING TO 32 BITS                            NON-EXTENDING\n-//                  ======================================  ===============================\n-// x86_64:          void @c_arg_u8(i8 noundef zeroext %_a)\n-// i686:            void @c_arg_u8(i8 noundef zeroext %_a)\n-// aarch64-apple:   void @c_arg_u8(i8 noundef zeroext %_a)\n-// aarch64-windows:                                         void @c_arg_u8(i8 noundef %_a)\n-// aarch64-linux:                                           void @c_arg_u8(i8 noundef %_a)\n-// arm:             void @c_arg_u8(i8 noundef zeroext %_a)\n-// riscv:           void @c_arg_u8(i8 noundef zeroext %_a)\n+//                  ZERO/SIGN-EXTENDING TO 32 BITS            NON-EXTENDING\n+//                  ==============================  =======================\n+// x86_64:          void @c_arg_u8(i8 zeroext %_a)\n+// i686:            void @c_arg_u8(i8 zeroext %_a)\n+// aarch64-apple:   void @c_arg_u8(i8 zeroext %_a)\n+// aarch64-windows:                                  void @c_arg_u8(i8 %_a)\n+// aarch64-linux:                                    void @c_arg_u8(i8 %_a)\n+// arm:             void @c_arg_u8(i8 zeroext %_a)\n+// riscv:           void @c_arg_u8(i8 zeroext %_a)\n #[no_mangle] pub extern \"C\" fn c_arg_u8(_a: u8) { }\n \n-// x86_64:          void @c_arg_u16(i16 noundef zeroext %_a)\n-// i686:            void @c_arg_u16(i16 noundef zeroext %_a)\n-// aarch64-apple:   void @c_arg_u16(i16 noundef zeroext %_a)\n-// aarch64-windows:                                         void @c_arg_u16(i16 noundef %_a)\n-// aarch64-linux:                                           void @c_arg_u16(i16 noundef %_a)\n-// arm:             void @c_arg_u16(i16 noundef zeroext %_a)\n-// riscv:           void @c_arg_u16(i16 noundef zeroext %_a)\n+// x86_64:          void @c_arg_u16(i16 zeroext %_a)\n+// i686:            void @c_arg_u16(i16 zeroext %_a)\n+// aarch64-apple:   void @c_arg_u16(i16 zeroext %_a)\n+// aarch64-windows:                                 void @c_arg_u16(i16 %_a)\n+// aarch64-linux:                                   void @c_arg_u16(i16 %_a)\n+// arm:             void @c_arg_u16(i16 zeroext %_a)\n+// riscv:           void @c_arg_u16(i16 zeroext %_a)\n #[no_mangle] pub extern \"C\" fn c_arg_u16(_a: u16) { }\n \n-// x86_64:          void @c_arg_u32(i32 noundef %_a)\n-// i686:            void @c_arg_u32(i32 noundef %_a)\n-// aarch64-apple:   void @c_arg_u32(i32 noundef %_a)\n-// aarch64-windows:                                         void @c_arg_u32(i32 noundef %_a)\n-// aarch64-linux:                                           void @c_arg_u32(i32 noundef %_a)\n-// arm:             void @c_arg_u32(i32 noundef %_a)\n-// riscv:           void @c_arg_u32(i32 noundef signext %_a)\n+// x86_64:          void @c_arg_u32(i32 %_a)\n+// i686:            void @c_arg_u32(i32 %_a)\n+// aarch64-apple:   void @c_arg_u32(i32 %_a)\n+// aarch64-windows:                                 void @c_arg_u32(i32 %_a)\n+// aarch64-linux:                                   void @c_arg_u32(i32 %_a)\n+// arm:             void @c_arg_u32(i32 %_a)\n+// riscv:           void @c_arg_u32(i32 signext %_a)\n #[no_mangle] pub extern \"C\" fn c_arg_u32(_a: u32) { }\n \n-// x86_64:          void @c_arg_u64(i64 noundef %_a)\n-// i686:            void @c_arg_u64(i64 noundef %_a)\n-// aarch64-apple:   void @c_arg_u64(i64 noundef %_a)\n-// aarch64-windows:                                         void @c_arg_u64(i64 noundef %_a)\n-// aarch64-linux:                                           void @c_arg_u64(i64 noundef %_a)\n-// arm:             void @c_arg_u64(i64 noundef %_a)\n-// riscv:           void @c_arg_u64(i64 noundef %_a)\n+// x86_64:          void @c_arg_u64(i64 %_a)\n+// i686:            void @c_arg_u64(i64 %_a)\n+// aarch64-apple:   void @c_arg_u64(i64 %_a)\n+// aarch64-windows:                                 void @c_arg_u64(i64 %_a)\n+// aarch64-linux:                                   void @c_arg_u64(i64 %_a)\n+// arm:             void @c_arg_u64(i64 %_a)\n+// riscv:           void @c_arg_u64(i64 %_a)\n #[no_mangle] pub extern \"C\" fn c_arg_u64(_a: u64) { }\n \n-// x86_64:          void @c_arg_i8(i8 noundef signext %_a)\n-// i686:            void @c_arg_i8(i8 noundef signext %_a)\n-// aarch64-apple:   void @c_arg_i8(i8 noundef signext %_a)\n-// aarch64-windows:                                         void @c_arg_i8(i8 noundef %_a)\n-// aarch64-linux:                                           void @c_arg_i8(i8 noundef %_a)\n-// arm:             void @c_arg_i8(i8 noundef signext %_a)\n-// riscv:           void @c_arg_i8(i8 noundef signext %_a)\n+// x86_64:          void @c_arg_i8(i8 signext %_a)\n+// i686:            void @c_arg_i8(i8 signext %_a)\n+// aarch64-apple:   void @c_arg_i8(i8 signext %_a)\n+// aarch64-windows:                                  void @c_arg_i8(i8 %_a)\n+// aarch64-linux:                                    void @c_arg_i8(i8 %_a)\n+// arm:             void @c_arg_i8(i8 signext %_a)\n+// riscv:           void @c_arg_i8(i8 signext %_a)\n #[no_mangle] pub extern \"C\" fn c_arg_i8(_a: i8) { }\n \n-// x86_64:          void @c_arg_i16(i16 noundef signext %_a)\n-// i686:            void @c_arg_i16(i16 noundef signext %_a)\n-// aarch64-apple:   void @c_arg_i16(i16 noundef signext %_a)\n-// aarch64-windows:                                         void @c_arg_i16(i16 noundef %_a)\n-// aarch64-linux:                                           void @c_arg_i16(i16 noundef %_a)\n-// arm:             void @c_arg_i16(i16 noundef signext %_a)\n-// riscv:           void @c_arg_i16(i16 noundef signext %_a)\n+// x86_64:          void @c_arg_i16(i16 signext %_a)\n+// i686:            void @c_arg_i16(i16 signext %_a)\n+// aarch64-apple:   void @c_arg_i16(i16 signext %_a)\n+// aarch64-windows:                                 void @c_arg_i16(i16 %_a)\n+// aarch64-linux:                                   void @c_arg_i16(i16 %_a)\n+// arm:             void @c_arg_i16(i16 signext %_a)\n+// riscv:           void @c_arg_i16(i16 signext %_a)\n #[no_mangle] pub extern \"C\" fn c_arg_i16(_a: i16) { }\n \n-// x86_64:          void @c_arg_i32(i32 noundef %_a)\n-// i686:            void @c_arg_i32(i32 noundef %_a)\n-// aarch64-apple:   void @c_arg_i32(i32 noundef %_a)\n-// aarch64-windows:                                         void @c_arg_i32(i32 noundef %_a)\n-// aarch64-linux:                                           void @c_arg_i32(i32 noundef %_a)\n-// arm:             void @c_arg_i32(i32 noundef %_a)\n-// riscv:           void @c_arg_i32(i32 noundef signext %_a)\n+// x86_64:          void @c_arg_i32(i32 %_a)\n+// i686:            void @c_arg_i32(i32 %_a)\n+// aarch64-apple:   void @c_arg_i32(i32 %_a)\n+// aarch64-windows:                                 void @c_arg_i32(i32 %_a)\n+// aarch64-linux:                                   void @c_arg_i32(i32 %_a)\n+// arm:             void @c_arg_i32(i32 %_a)\n+// riscv:           void @c_arg_i32(i32 signext %_a)\n #[no_mangle] pub extern \"C\" fn c_arg_i32(_a: i32) { }\n \n-// x86_64:          void @c_arg_i64(i64 noundef %_a)\n-// i686:            void @c_arg_i64(i64 noundef %_a)\n-// aarch64-apple:   void @c_arg_i64(i64 noundef %_a)\n-// aarch64-windows:                                         void @c_arg_i64(i64 noundef %_a)\n-// aarch64-linux:                                           void @c_arg_i64(i64 noundef %_a)\n-// arm:             void @c_arg_i64(i64 noundef %_a)\n-// riscv:           void @c_arg_i64(i64 noundef %_a)\n+// x86_64:          void @c_arg_i64(i64 %_a)\n+// i686:            void @c_arg_i64(i64 %_a)\n+// aarch64-apple:   void @c_arg_i64(i64 %_a)\n+// aarch64-windows:                                 void @c_arg_i64(i64 %_a)\n+// aarch64-linux:                                   void @c_arg_i64(i64 %_a)\n+// arm:             void @c_arg_i64(i64 %_a)\n+// riscv:           void @c_arg_i64(i64 %_a)\n #[no_mangle] pub extern \"C\" fn c_arg_i64(_a: i64) { }\n \n // x86_64:          zeroext i8 @c_ret_u8()\n // i686:            zeroext i8 @c_ret_u8()\n // aarch64-apple:   zeroext i8 @c_ret_u8()\n-// aarch64-windows:                                         i8 @c_ret_u8()\n-// aarch64-linux:                                           i8 @c_ret_u8()\n+// aarch64-windows:                                 i8 @c_ret_u8()\n+// aarch64-linux:                                   i8 @c_ret_u8()\n // arm:             zeroext i8 @c_ret_u8()\n // riscv:           zeroext i8 @c_ret_u8()\n #[no_mangle] pub extern \"C\" fn c_ret_u8() -> u8 { 0 }\n \n // x86_64:          zeroext i16 @c_ret_u16()\n // i686:            zeroext i16 @c_ret_u16()\n // aarch64-apple:   zeroext i16 @c_ret_u16()\n-// aarch64-windows:                                         i16 @c_ret_u16()\n-// aarch64-linux:                                           i16 @c_ret_u16()\n+// aarch64-windows:                                 i16 @c_ret_u16()\n+// aarch64-linux:                                   i16 @c_ret_u16()\n // arm:             zeroext i16 @c_ret_u16()\n // riscv:           zeroext i16 @c_ret_u16()\n #[no_mangle] pub extern \"C\" fn c_ret_u16() -> u16 { 0 }\n \n // x86_64:          i32 @c_ret_u32()\n // i686:            i32 @c_ret_u32()\n // aarch64-apple:   i32 @c_ret_u32()\n-// aarch64-windows:                                         i32 @c_ret_u32()\n-// aarch64-linux:                                           i32 @c_ret_u32()\n+// aarch64-windows:                                 i32 @c_ret_u32()\n+// aarch64-linux:                                   i32 @c_ret_u32()\n // arm:             i32 @c_ret_u32()\n // riscv:           signext i32 @c_ret_u32()\n #[no_mangle] pub extern \"C\" fn c_ret_u32() -> u32 { 0 }\n \n // x86_64:          i64 @c_ret_u64()\n // i686:            i64 @c_ret_u64()\n // aarch64-apple:   i64 @c_ret_u64()\n-// aarch64-windows:                                         i64 @c_ret_u64()\n-// aarch64-linux:                                           i64 @c_ret_u64()\n+// aarch64-windows:                                 i64 @c_ret_u64()\n+// aarch64-linux:                                   i64 @c_ret_u64()\n // arm:             i64 @c_ret_u64()\n // riscv:           i64 @c_ret_u64()\n #[no_mangle] pub extern \"C\" fn c_ret_u64() -> u64 { 0 }\n \n // x86_64:          signext i8 @c_ret_i8()\n // i686:            signext i8 @c_ret_i8()\n // aarch64-apple:   signext i8 @c_ret_i8()\n-// aarch64-windows:                                         i8 @c_ret_i8()\n-// aarch64-linux:                                           i8 @c_ret_i8()\n+// aarch64-windows:                                 i8 @c_ret_i8()\n+// aarch64-linux:                                   i8 @c_ret_i8()\n // arm:             signext i8 @c_ret_i8()\n // riscv:           signext i8 @c_ret_i8()\n #[no_mangle] pub extern \"C\" fn c_ret_i8() -> i8 { 0 }\n \n // x86_64:          signext i16 @c_ret_i16()\n // i686:            signext i16 @c_ret_i16()\n // aarch64-apple:   signext i16 @c_ret_i16()\n-// aarch64-windows:                                         i16 @c_ret_i16()\n-// aarch64-linux:                                           i16 @c_ret_i16()\n+// aarch64-windows:                                 i16 @c_ret_i16()\n+// aarch64-linux:                                   i16 @c_ret_i16()\n // arm:             signext i16 @c_ret_i16()\n // riscv:           signext i16 @c_ret_i16()\n #[no_mangle] pub extern \"C\" fn c_ret_i16() -> i16 { 0 }\n \n // x86_64:          i32 @c_ret_i32()\n // i686:            i32 @c_ret_i32()\n // aarch64-apple:   i32 @c_ret_i32()\n-// aarch64-windows:                                         i32 @c_ret_i32()\n-// aarch64-linux:                                           i32 @c_ret_i32()\n+// aarch64-windows:                                 i32 @c_ret_i32()\n+// aarch64-linux:                                   i32 @c_ret_i32()\n // arm:             i32 @c_ret_i32()\n // riscv:           signext i32 @c_ret_i32()\n #[no_mangle] pub extern \"C\" fn c_ret_i32() -> i32 { 0 }\n \n // x86_64:          i64 @c_ret_i64()\n // i686:            i64 @c_ret_i64()\n // aarch64-apple:   i64 @c_ret_i64()\n-// aarch64-windows:                                         i64 @c_ret_i64()\n-// aarch64-linux:                                           i64 @c_ret_i64()\n+// aarch64-windows:                                 i64 @c_ret_i64()\n+// aarch64-linux:                                   i64 @c_ret_i64()\n // arm:             i64 @c_ret_i64()\n // riscv:           i64 @c_ret_i64()\n #[no_mangle] pub extern \"C\" fn c_ret_i64() -> i64 { 0 }"}, {"sha": "735ef7081c9566c057e9a9638b0c84d8e7731a81", "filename": "tests/codegen/static-relocation-model-msvc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fstatic-relocation-model-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fstatic-relocation-model-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fstatic-relocation-model-msvc.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -15,8 +15,8 @@ extern crate extern_decl;\n // it to be marked `dso_local` as well, given the static relocation model.\n //\n // CHECK: @extern_static = external dso_local local_unnamed_addr global i8\n-// CHECK: define dso_local i8 @access_extern() {{.*}}\n-// CHECK: declare dso_local i8 @extern_fn() {{.*}}\n+// CHECK: define dso_local noundef i8 @access_extern() {{.*}}\n+// CHECK: declare dso_local noundef i8 @extern_fn() {{.*}}\n \n #[no_mangle]\n pub fn access_extern() -> u8 {"}, {"sha": "35f760851451e108b124552924d048c32c7f23de", "filename": "tests/codegen/tuple-layout-opt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Ftuple-layout-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Ftuple-layout-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ftuple-layout-opt.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,36 +1,36 @@\n // ignore-emscripten\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n \n // Test that tuples get optimized layout, in particular with a ZST in the last field (#63244)\n \n #![crate_type=\"lib\"]\n \n type ScalarZstLast = (u128, ());\n-// CHECK: define noundef i128 @test_ScalarZstLast(i128 noundef %_1)\n+// CHECK: define i128 @test_ScalarZstLast(i128 %_1)\n #[no_mangle]\n pub fn test_ScalarZstLast(_: ScalarZstLast) -> ScalarZstLast { loop {} }\n \n type ScalarZstFirst = ((), u128);\n-// CHECK: define noundef i128 @test_ScalarZstFirst(i128 noundef %_1)\n+// CHECK: define i128 @test_ScalarZstFirst(i128 %_1)\n #[no_mangle]\n pub fn test_ScalarZstFirst(_: ScalarZstFirst) -> ScalarZstFirst { loop {} }\n \n type ScalarPairZstLast = (u8, u128, ());\n-// CHECK: define { i128, i8 } @test_ScalarPairZstLast(i128 noundef %_1.0, i8 noundef %_1.1)\n+// CHECK: define { i128, i8 } @test_ScalarPairZstLast(i128 %_1.0, i8 %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairZstLast(_: ScalarPairZstLast) -> ScalarPairZstLast { loop {} }\n \n type ScalarPairZstFirst = ((), u8, u128);\n-// CHECK: define { i8, i128 } @test_ScalarPairZstFirst(i8 noundef %_1.0, i128 noundef %_1.1)\n+// CHECK: define { i8, i128 } @test_ScalarPairZstFirst(i8 %_1.0, i128 %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairZstFirst(_: ScalarPairZstFirst) -> ScalarPairZstFirst { loop {} }\n \n type ScalarPairLotsOfZsts = ((), u8, (), u128, ());\n-// CHECK: define { i128, i8 } @test_ScalarPairLotsOfZsts(i128 noundef %_1.0, i8 noundef %_1.1)\n+// CHECK: define { i128, i8 } @test_ScalarPairLotsOfZsts(i128 %_1.0, i8 %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairLotsOfZsts(_: ScalarPairLotsOfZsts) -> ScalarPairLotsOfZsts { loop {} }\n \n type ScalarPairLottaNesting = (((), ((), u8, (), u128, ())), ());\n-// CHECK: define { i128, i8 } @test_ScalarPairLottaNesting(i128 noundef %_1.0, i8 noundef %_1.1)\n+// CHECK: define { i128, i8 } @test_ScalarPairLottaNesting(i128 %_1.0, i8 %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairLottaNesting(_: ScalarPairLottaNesting) -> ScalarPairLottaNesting { loop {} }"}, {"sha": "442cdd41dc66f866258aa800148300a571f300ed", "filename": "tests/codegen/vec-calloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fvec-calloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fvec-calloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvec-calloc.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -162,6 +162,6 @@ pub fn vec_option_bool(n: usize) -> Vec<Option<bool>> {\n }\n \n // Ensure that __rust_alloc_zeroed gets the right attributes for LLVM to optimize it away.\n-// CHECK: declare noalias ptr @__rust_alloc_zeroed(i64, i64 allocalign) unnamed_addr [[RUST_ALLOC_ZEROED_ATTRS:#[0-9]+]]\n+// CHECK: declare noalias noundef ptr @__rust_alloc_zeroed(i64 noundef, i64 allocalign noundef) unnamed_addr [[RUST_ALLOC_ZEROED_ATTRS:#[0-9]+]]\n \n // CHECK-DAG: attributes [[RUST_ALLOC_ZEROED_ATTRS]] = { {{.*}} allockind(\"alloc,zeroed,aligned\") allocsize(0) uwtable \"alloc-family\"=\"__rust_alloc\" {{.*}} }"}, {"sha": "cef4b9bdaaf0a2dc018ccd61cff0c3c0ab0d4f6c", "filename": "tests/codegen/zst-offset.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fzst-offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6/tests%2Fcodegen%2Fzst-offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fzst-offset.rs?ref=f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "patch": "@@ -1,10 +1,10 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n \n #![crate_type = \"lib\"]\n #![feature(repr_simd)]\n \n // Hack to get the correct size for the length part in slices\n-// CHECK: @helper([[USIZE:i[0-9]+]] noundef %_1)\n+// CHECK: @helper([[USIZE:i[0-9]+]] %_1)\n #[no_mangle]\n pub fn helper(_: usize) {\n }"}]}