{"sha": "1d4b988414e48f16c1aa44a79e6f4b11d929bb76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNGI5ODg0MTRlNDhmMTZjMWFhNDRhNzllNmY0YjExZDkyOWJiNzY=", "commit": {"author": {"name": "Mike Baker", "email": "mike.baker04@gmail.com", "date": "2018-04-14T09:21:54Z"}, "committer": {"name": "Mike Baker", "email": "mike.baker04@gmail.com", "date": "2018-06-24T23:53:15Z"}, "message": "Strip leading `|` in match arm patterns\n\nThis addresses issue #2621\n\nThis commit turns out to be a partial revert of\nea3c01e3374143912f048b22fda106ee8d5a1cd8\n\nThe rationale is that a `|` character preceding a match pattern is not\nsemantically relevant and therefore should be considered a\nstyle/formatting choice.\n\nA discussion concluded that the best way to emit consistent formatting\nhere was to strip the leading `|`\n\nThis removes the match_with_beginning_vert test because it was asserting\nthe old behaviour which has been changed, it adds a new test\n(issue_2621) which should be a more comprehensive check of the behavior\nof `|` in match arms.\n\nDiscussion at https://github.com/rust-lang-nursery/fmt-rfcs/issues/119", "tree": {"sha": "34e93ab36a14aea571149842f28e55f43b8d78b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34e93ab36a14aea571149842f28e55f43b8d78b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d4b988414e48f16c1aa44a79e6f4b11d929bb76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d4b988414e48f16c1aa44a79e6f4b11d929bb76", "html_url": "https://github.com/rust-lang/rust/commit/1d4b988414e48f16c1aa44a79e6f4b11d929bb76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d4b988414e48f16c1aa44a79e6f4b11d929bb76/comments", "author": {"login": "Mike-Baker", "id": 1233365, "node_id": "MDQ6VXNlcjEyMzMzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1233365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mike-Baker", "html_url": "https://github.com/Mike-Baker", "followers_url": "https://api.github.com/users/Mike-Baker/followers", "following_url": "https://api.github.com/users/Mike-Baker/following{/other_user}", "gists_url": "https://api.github.com/users/Mike-Baker/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mike-Baker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mike-Baker/subscriptions", "organizations_url": "https://api.github.com/users/Mike-Baker/orgs", "repos_url": "https://api.github.com/users/Mike-Baker/repos", "events_url": "https://api.github.com/users/Mike-Baker/events{/privacy}", "received_events_url": "https://api.github.com/users/Mike-Baker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mike-Baker", "id": 1233365, "node_id": "MDQ6VXNlcjEyMzMzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1233365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mike-Baker", "html_url": "https://github.com/Mike-Baker", "followers_url": "https://api.github.com/users/Mike-Baker/followers", "following_url": "https://api.github.com/users/Mike-Baker/following{/other_user}", "gists_url": "https://api.github.com/users/Mike-Baker/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mike-Baker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mike-Baker/subscriptions", "organizations_url": "https://api.github.com/users/Mike-Baker/orgs", "repos_url": "https://api.github.com/users/Mike-Baker/repos", "events_url": "https://api.github.com/users/Mike-Baker/events{/privacy}", "received_events_url": "https://api.github.com/users/Mike-Baker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87edd75ecf26c9084969f431bb5e363693a8a4ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/87edd75ecf26c9084969f431bb5e363693a8a4ca", "html_url": "https://github.com/rust-lang/rust/commit/87edd75ecf26c9084969f431bb5e363693a8a4ca"}], "stats": {"total": 93, "additions": 47, "deletions": 46}, "files": [{"sha": "d46b19be7234c12cc88e7c8776f0f1d5e276e072", "filename": "src/matches.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1d4b988414e48f16c1aa44a79e6f4b11d929bb76/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d4b988414e48f16c1aa44a79e6f4b11d929bb76/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=1d4b988414e48f16c1aa44a79e6f4b11d929bb76", "patch": "@@ -68,7 +68,7 @@ impl<'a> Spanned for ArmWrapper<'a> {\n \n impl<'a> Rewrite for ArmWrapper<'a> {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        rewrite_match_arm(context, self.arm, shape, self.is_last, self.beginning_vert)\n+        rewrite_match_arm(context, self.arm, shape, self.is_last)\n     }\n }\n \n@@ -236,7 +236,6 @@ fn rewrite_match_arm(\n     arm: &ast::Arm,\n     shape: Shape,\n     is_last: bool,\n-    beginning_vert: Option<BytePos>,\n ) -> Option<String> {\n     let (missing_span, attrs_str) = if !arm.attrs.is_empty() {\n         if contains_skip(&arm.attrs) {\n@@ -256,22 +255,18 @@ fn rewrite_match_arm(\n     } else {\n         (mk_sp(arm.span().lo(), arm.span().lo()), String::new())\n     };\n-    let pats_str = rewrite_match_pattern(\n-        context,\n-        &ptr_vec_to_ref_vec(&arm.pats),\n-        &arm.guard,\n-        beginning_vert.is_some(),\n-        shape,\n-    ).and_then(|pats_str| {\n-        combine_strs_with_missing_comments(\n-            context,\n-            &attrs_str,\n-            &pats_str,\n-            missing_span,\n-            shape,\n-            false,\n-        )\n-    })?;\n+    let pats_str =\n+        rewrite_match_pattern(context, &ptr_vec_to_ref_vec(&arm.pats), &arm.guard, shape)\n+            .and_then(|pats_str| {\n+                combine_strs_with_missing_comments(\n+                    context,\n+                    &attrs_str,\n+                    &pats_str,\n+                    missing_span,\n+                    shape,\n+                    false,\n+                )\n+            })?;\n     rewrite_match_body(\n         context,\n         &arm.body,\n@@ -286,22 +281,17 @@ fn rewrite_match_pattern(\n     context: &RewriteContext,\n     pats: &[&ast::Pat],\n     guard: &Option<ptr::P<ast::Expr>>,\n-    has_beginning_vert: bool,\n     shape: Shape,\n ) -> Option<String> {\n     // Patterns\n     // 5 = ` => {`\n-    // 2 = `| `\n-    let pat_shape = shape\n-        .sub_width(5)?\n-        .offset_left(if has_beginning_vert { 2 } else { 0 })?;\n+    let pat_shape = shape.sub_width(5)?;\n     let pats_str = rewrite_multiple_patterns(context, pats, pat_shape)?;\n-    let beginning_vert = if has_beginning_vert { \"| \" } else { \"\" };\n \n     // Guard\n     let guard_str = rewrite_guard(context, guard, shape, trimmed_last_line_width(&pats_str))?;\n \n-    Some(format!(\"{}{}{}\", beginning_vert, pats_str, guard_str))\n+    Some(format!(\"{}{}\", pats_str, guard_str))\n }\n \n // (extend, body)"}, {"sha": "244d0b45f258492d674faa8f90e1797596163999", "filename": "tests/source/match.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1d4b988414e48f16c1aa44a79e6f4b11d929bb76/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d4b988414e48f16c1aa44a79e6f4b11d929bb76/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=1d4b988414e48f16c1aa44a79e6f4b11d929bb76", "patch": "@@ -452,17 +452,6 @@ fn issue_2152() {\n     }\n }\n \n-// #2462\n-// Preserve a `|` at the beginning of a match arm.\n-fn match_with_beginning_vert() {\n-    let x = Foo::A;\n-    match x {\n-        | Foo::A\n-        | Foo::B => println!(\"AB\"),\n-        | Foo::C => println!(\"C\"),\n-    }\n-}\n-\n // #2376\n // Preserve block around expressions with condition.\n fn issue_2376() {\n@@ -485,3 +474,20 @@ fn issue_2376() {\n         }\n     }\n }\n+\n+// #2621\n+// Strip leading `|` in match arm patterns\n+fn issue_2621() {\n+    let x = Foo::A;\n+    match x {\n+        Foo::A => println!(\"No vert single condition\"),\n+        Foo::B | Foo::C => println!(\"Center vert two conditions\"),\n+        | Foo::D => println!(\"Preceding vert single condition\"),\n+        | Foo::E\n+        | Foo::F => println!(\"Preceding vert over two lines\"),\n+        Foo::G |\n+        Foo::H => println!(\"Trailing vert over two lines\"),\n+        // Comment on its own line\n+        | Foo::I => println!(\"With comment\"), // Comment after line\n+    }\n+}"}, {"sha": "be1ecb49535ce8cccd22463a6cb01b6974c87fd5", "filename": "tests/target/match.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1d4b988414e48f16c1aa44a79e6f4b11d929bb76/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d4b988414e48f16c1aa44a79e6f4b11d929bb76/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=1d4b988414e48f16c1aa44a79e6f4b11d929bb76", "patch": "@@ -481,16 +481,6 @@ fn issue_2152() {\n     }\n }\n \n-// #2462\n-// Preserve a `|` at the beginning of a match arm.\n-fn match_with_beginning_vert() {\n-    let x = Foo::A;\n-    match x {\n-        | Foo::A | Foo::B => println!(\"AB\"),\n-        | Foo::C => println!(\"C\"),\n-    }\n-}\n-\n // #2376\n // Preserve block around expressions with condition.\n fn issue_2376() {\n@@ -513,3 +503,18 @@ fn issue_2376() {\n         }\n     }\n }\n+\n+// #2621\n+// Strip leading `|` in match arm patterns\n+fn issue_2621() {\n+    let x = Foo::A;\n+    match x {\n+        Foo::A => println!(\"No vert single condition\"),\n+        Foo::B | Foo::C => println!(\"Center vert two conditions\"),\n+        Foo::D => println!(\"Preceding vert single condition\"),\n+        Foo::E | Foo::F => println!(\"Preceding vert over two lines\"),\n+        Foo::G | Foo::H => println!(\"Trailing vert over two lines\"),\n+        // Comment on its own line\n+        Foo::I => println!(\"With comment\"), // Comment after line\n+    }\n+}"}]}