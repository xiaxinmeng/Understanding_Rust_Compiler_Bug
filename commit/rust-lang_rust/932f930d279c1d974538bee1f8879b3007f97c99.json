{"sha": "932f930d279c1d974538bee1f8879b3007f97c99", "node_id": "C_kwDOAAsO6NoAKDkzMmY5MzBkMjc5YzFkOTc0NTM4YmVlMWY4ODc5YjMwMDdmOTdjOTk", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-26T10:41:12Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-26T10:48:28Z"}, "message": "remove outdated coherence hack", "tree": {"sha": "3e3a67e1d510084c6e4e9037bedec0e1caa7baf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e3a67e1d510084c6e4e9037bedec0e1caa7baf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/932f930d279c1d974538bee1f8879b3007f97c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/932f930d279c1d974538bee1f8879b3007f97c99", "html_url": "https://github.com/rust-lang/rust/commit/932f930d279c1d974538bee1f8879b3007f97c99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/932f930d279c1d974538bee1f8879b3007f97c99/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72f4923979979abb5d6b975353e9b3053d257e60", "url": "https://api.github.com/repos/rust-lang/rust/commits/72f4923979979abb5d6b975353e9b3053d257e60", "html_url": "https://github.com/rust-lang/rust/commit/72f4923979979abb5d6b975353e9b3053d257e60"}], "stats": {"total": 33, "additions": 0, "deletions": 33}, "files": [{"sha": "8d2a90503b6b47643b49fc44e1f5e7d816f6725d", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/932f930d279c1d974538bee1f8879b3007f97c99/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932f930d279c1d974538bee1f8879b3007f97c99/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=932f930d279c1d974538bee1f8879b3007f97c99", "patch": "@@ -35,7 +35,6 @@ use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::fold::BottomUpFolder;\n-use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n@@ -914,38 +913,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let unbound_input_types =\n             stack.fresh_trait_pred.skip_binder().trait_ref.substs.types().any(|ty| ty.is_fresh());\n \n-        if stack.obligation.polarity() != ty::ImplPolarity::Negative {\n-            // This check was an imperfect workaround for a bug in the old\n-            // intercrate mode; it should be removed when that goes away.\n-            if unbound_input_types && self.intercrate {\n-                debug!(\"evaluate_stack --> unbound argument, intercrate -->  ambiguous\",);\n-                // Heuristics: show the diagnostics when there are no candidates in crate.\n-                if self.intercrate_ambiguity_causes.is_some() {\n-                    debug!(\"evaluate_stack: intercrate_ambiguity_causes is some\");\n-                    if let Ok(candidate_set) = self.assemble_candidates(stack) {\n-                        if !candidate_set.ambiguous && candidate_set.vec.is_empty() {\n-                            let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n-                            let self_ty = trait_ref.self_ty();\n-                            let cause = with_no_trimmed_paths!({\n-                                IntercrateAmbiguityCause::DownstreamCrate {\n-                                    trait_desc: trait_ref.print_only_trait_path().to_string(),\n-                                    self_desc: if self_ty.has_concrete_skeleton() {\n-                                        Some(self_ty.to_string())\n-                                    } else {\n-                                        None\n-                                    },\n-                                }\n-                            });\n-\n-                            debug!(?cause, \"evaluate_stack: pushing cause\");\n-                            self.intercrate_ambiguity_causes.as_mut().unwrap().insert(cause);\n-                        }\n-                    }\n-                }\n-                return Ok(EvaluatedToAmbig);\n-            }\n-        }\n-\n         if unbound_input_types\n             && stack.iter().skip(1).any(|prev| {\n                 stack.obligation.param_env == prev.obligation.param_env"}]}