{"sha": "4c3ad48c4530e1033d9b74cf8a793e3d87f53c38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjM2FkNDhjNDUzMGUxMDMzZDliNzRjZjhhNzkzZTNkODdmNTNjMzg=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-11-06T07:24:44Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-11-19T04:24:35Z"}, "message": "rustc: fix fallout of making `Ty` an alias for `&TyS` instead of a wrapper.", "tree": {"sha": "0aa89201382eba51c3e6627b2a8b092669e12380", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aa89201382eba51c3e6627b2a8b092669e12380"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38", "html_url": "https://github.com/rust-lang/rust/commit/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bc98954d559385bae9d85cd5f160b9efd69a110", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bc98954d559385bae9d85cd5f160b9efd69a110", "html_url": "https://github.com/rust-lang/rust/commit/5bc98954d559385bae9d85cd5f160b9efd69a110"}], "stats": {"total": 165, "additions": 59, "deletions": 106}, "files": [{"sha": "cce5ce63c4dc9dc5880dac0ed100134533aa753d", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=4c3ad48c4530e1033d9b74cf8a793e3d87f53c38", "patch": "@@ -39,7 +39,7 @@ use middle::astencode;\n use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use middle::subst;\n use middle::weak_lang_items;\n-use middle::subst::Subst;\n+use middle::subst::{Subst, Substs};\n use middle::ty::{mod, Ty};\n use session::config::{mod, NoDebugInfo, FullDebugInfo};\n use session::Session;\n@@ -54,8 +54,8 @@ use trans::closure;\n use trans::common::{Block, C_bool, C_bytes_in_context, C_i32, C_integral};\n use trans::common::{C_null, C_struct_in_context, C_u64, C_u8, C_uint, C_undef};\n use trans::common::{CrateContext, ExternMap, FunctionContext};\n-use trans::common::{NodeInfo, Result, SubstP};\n-use trans::common::{node_id_type, param_substs, return_type_is_void};\n+use trans::common::{NodeInfo, Result};\n+use trans::common::{node_id_type, return_type_is_void};\n use trans::common::{tydesc_info, type_is_immediate};\n use trans::common::{type_is_zero_size, val_ty};\n use trans::common;\n@@ -1422,11 +1422,11 @@ pub fn new_fn_ctxt<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n                              id: ast::NodeId,\n                              has_env: bool,\n                              output_type: ty::FnOutput<'tcx>,\n-                             param_substs: &'a param_substs<'tcx>,\n+                             param_substs: &'a Substs<'tcx>,\n                              sp: Option<Span>,\n                              block_arena: &'a TypedArena<common::BlockS<'a, 'tcx>>)\n                              -> FunctionContext<'a, 'tcx> {\n-    param_substs.validate();\n+    common::validate_substs(param_substs);\n \n     debug!(\"new_fn_ctxt(path={}, id={}, param_substs={})\",\n            if id == -1 {\n@@ -1438,7 +1438,7 @@ pub fn new_fn_ctxt<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n \n     let uses_outptr = match output_type {\n         ty::FnConverging(output_type) => {\n-            let substd_output_type = output_type.substp(ccx.tcx(), param_substs);\n+            let substd_output_type = output_type.subst(ccx.tcx(), param_substs);\n             type_of::return_uses_outptr(ccx, substd_output_type)\n         }\n         ty::FnDiverging => false\n@@ -1491,7 +1491,7 @@ pub fn init_function<'a, 'tcx>(fcx: &'a FunctionContext<'a, 'tcx>,\n     if let ty::FnConverging(output_type) = output {\n         // This shouldn't need to recompute the return type,\n         // as new_fn_ctxt did it already.\n-        let substd_output_type = output_type.substp(fcx.ccx.tcx(), fcx.param_substs);\n+        let substd_output_type = output_type.subst(fcx.ccx.tcx(), fcx.param_substs);\n         if !return_type_is_void(fcx.ccx, substd_output_type) {\n             // If the function returns nil/bot, there is no real return\n             // value, so do not set `llretslotptr`.\n@@ -1712,7 +1712,7 @@ pub fn finish_fn<'blk, 'tcx>(fcx: &'blk FunctionContext<'blk, 'tcx>,\n \n     // This shouldn't need to recompute the return type,\n     // as new_fn_ctxt did it already.\n-    let substd_retty = retty.substp(fcx.ccx.tcx(), fcx.param_substs);\n+    let substd_retty = retty.subst(fcx.ccx.tcx(), fcx.param_substs);\n     build_return_block(fcx, ret_cx, substd_retty);\n \n     debuginfo::clear_source_location(fcx);\n@@ -1788,7 +1788,7 @@ pub fn trans_closure<'a, 'b, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                    decl: &ast::FnDecl,\n                                    body: &ast::Block,\n                                    llfndecl: ValueRef,\n-                                   param_substs: &param_substs<'tcx>,\n+                                   param_substs: &Substs<'tcx>,\n                                    fn_ast_id: ast::NodeId,\n                                    _attributes: &[ast::Attribute],\n                                    output_type: ty::FnOutput<'tcx>,\n@@ -1929,7 +1929,7 @@ pub fn trans_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                           decl: &ast::FnDecl,\n                           body: &ast::Block,\n                           llfndecl: ValueRef,\n-                          param_substs: &param_substs<'tcx>,\n+                          param_substs: &Substs<'tcx>,\n                           id: ast::NodeId,\n                           attrs: &[ast::Attribute]) {\n     let _s = StatRecorder::new(ccx, ccx.tcx().map.path_to_string(id).to_string());\n@@ -1955,7 +1955,7 @@ pub fn trans_enum_variant<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                     variant: &ast::Variant,\n                                     _args: &[ast::VariantArg],\n                                     disr: ty::Disr,\n-                                    param_substs: &param_substs<'tcx>,\n+                                    param_substs: &Substs<'tcx>,\n                                     llfndecl: ValueRef) {\n     let _icx = push_ctxt(\"trans_enum_variant\");\n \n@@ -2030,7 +2030,7 @@ pub fn trans_named_tuple_constructor<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n pub fn trans_tuple_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                     _fields: &[ast::StructField],\n                                     ctor_id: ast::NodeId,\n-                                    param_substs: &param_substs<'tcx>,\n+                                    param_substs: &Substs<'tcx>,\n                                     llfndecl: ValueRef) {\n     let _icx = push_ctxt(\"trans_tuple_struct\");\n \n@@ -2045,10 +2045,10 @@ pub fn trans_tuple_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n fn trans_enum_variant_or_tuple_like_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                                      ctor_id: ast::NodeId,\n                                                      disr: ty::Disr,\n-                                                     param_substs: &param_substs<'tcx>,\n+                                                     param_substs: &Substs<'tcx>,\n                                                      llfndecl: ValueRef) {\n     let ctor_ty = ty::node_id_to_type(ccx.tcx(), ctor_id);\n-    let ctor_ty = ctor_ty.substp(ccx.tcx(), param_substs);\n+    let ctor_ty = ctor_ty.subst(ccx.tcx(), param_substs);\n \n     let result_ty = match ty::get(ctor_ty).sty {\n         ty::ty_bare_fn(ref bft) => bft.sig.output,\n@@ -2264,15 +2264,15 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n                                                             &**body,\n                                                             item.attrs.as_slice(),\n                                                             llfn,\n-                                                            &param_substs::empty(),\n+                                                            &Substs::trans_empty(),\n                                                             item.id,\n                                                             None);\n                 } else {\n                     trans_fn(ccx,\n                              &**decl,\n                              &**body,\n                              llfn,\n-                             &param_substs::empty(),\n+                             &Substs::trans_empty(),\n                              item.id,\n                              item.attrs.as_slice());\n                 }"}, {"sha": "ae66d86b9941eacc82968080067b7e94e34b121d", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=4c3ad48c4530e1033d9b74cf8a793e3d87f53c38", "patch": "@@ -29,7 +29,7 @@ use llvm;\n use metadata::csearch;\n use middle::def;\n use middle::subst;\n-use middle::subst::{Subst};\n+use middle::subst::{Subst, Substs};\n use trans::adt;\n use trans::base;\n use trans::base::*;\n@@ -319,7 +319,7 @@ pub fn trans_unboxing_shim<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                      function_name.as_slice());\n \n     let block_arena = TypedArena::new();\n-    let empty_param_substs = param_substs::empty();\n+    let empty_param_substs = Substs::trans_empty();\n     let return_type = ty::ty_fn_ret(boxed_function_type);\n     let fcx = new_fn_ctxt(ccx,\n                           llfn,"}, {"sha": "a0ba3f4e226868dfc0dad8cb568ea13b8e5a0aea", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=4c3ad48c4530e1033d9b74cf8a793e3d87f53c38", "patch": "@@ -15,6 +15,7 @@ use back::link::mangle_internal_name_by_path_and_seq;\n use llvm::ValueRef;\n use middle::def;\n use middle::mem_categorization::Typer;\n+use middle::subst::Substs;\n use trans::adt;\n use trans::base::*;\n use trans::build::*;\n@@ -520,7 +521,7 @@ pub fn trans_unboxed_closure<'blk, 'tcx>(\n     let llfn = get_or_create_declaration_if_unboxed_closure(\n         bcx,\n         closure_id,\n-        bcx.fcx.param_substs.substs()).unwrap();\n+        bcx.fcx.param_substs).unwrap();\n \n     let function_type = (*bcx.tcx().unboxed_closures.borrow())[closure_id]\n                                                               .closure_type\n@@ -633,7 +634,7 @@ pub fn get_wrapper_for_bare_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let _icx = push_ctxt(\"closure::get_wrapper_for_bare_fn\");\n \n     let arena = TypedArena::new();\n-    let empty_param_substs = param_substs::empty();\n+    let empty_param_substs = Substs::trans_empty();\n     let fcx = new_fn_ctxt(ccx, llfn, ast::DUMMY_NODE_ID, true, f.sig.output,\n                           &empty_param_substs, None, &arena);\n     let bcx = init_function(&fcx, true, f.sig.output);"}, {"sha": "11d214e354902a68c0f58adc2b3c69e70036477d", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 6, "deletions": 48, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=4c3ad48c4530e1033d9b74cf8a793e3d87f53c38", "patch": "@@ -22,7 +22,7 @@ use middle::def;\n use middle::lang_items::LangItem;\n use middle::mem_categorization as mc;\n use middle::subst;\n-use middle::subst::Subst;\n+use middle::subst::{Subst, Substs};\n use trans::base;\n use trans::build;\n use trans::cleanup;\n@@ -189,50 +189,8 @@ pub fn BuilderRef_res(b: BuilderRef) -> BuilderRef_res {\n \n pub type ExternMap = FnvHashMap<String, ValueRef>;\n \n-// Here `self_ty` is the real type of the self parameter to this method. It\n-// will only be set in the case of default methods.\n-pub struct param_substs<'tcx> {\n-    substs: subst::Substs<'tcx>,\n-}\n-\n-impl<'tcx> param_substs<'tcx> {\n-    pub fn new(substs: subst::Substs<'tcx>) -> param_substs<'tcx> {\n-        assert!(substs.types.all(|t| !ty::type_needs_infer(*t)));\n-        assert!(substs.types.all(|t| !ty::type_has_params(*t)));\n-        assert!(substs.types.all(|t| !ty::type_has_escaping_regions(*t)));\n-        param_substs { substs: substs.erase_regions() }\n-    }\n-\n-    pub fn substs(&self) -> &subst::Substs<'tcx> {\n-        &self.substs\n-    }\n-\n-    pub fn empty() -> param_substs<'tcx> {\n-        param_substs {\n-            substs: subst::Substs::trans_empty(),\n-        }\n-    }\n-\n-    pub fn validate(&self) {\n-        assert!(self.substs.types.all(|t| !ty::type_needs_infer(*t)));\n-    }\n-}\n-\n-impl<'tcx> Repr<'tcx> for param_substs<'tcx> {\n-    fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n-        self.substs.repr(tcx)\n-    }\n-}\n-\n-pub trait SubstP<'tcx> {\n-    fn substp(&self, tcx: &ty::ctxt<'tcx>, param_substs: &param_substs<'tcx>)\n-              -> Self;\n-}\n-\n-impl<'tcx, T: Subst<'tcx> + Clone> SubstP<'tcx> for T {\n-    fn substp(&self, tcx: &ty::ctxt<'tcx>, substs: &param_substs<'tcx>) -> T {\n-        self.subst(tcx, &substs.substs)\n-    }\n+pub fn validate_substs(substs: &Substs) {\n+    assert!(substs.types.all(|t| !ty::type_needs_infer(*t)));\n }\n \n // work around bizarre resolve errors\n@@ -292,7 +250,7 @@ pub struct FunctionContext<'a, 'tcx: 'a> {\n \n     // If this function is being monomorphized, this contains the type\n     // substitutions used.\n-    pub param_substs: &'a param_substs<'tcx>,\n+    pub param_substs: &'a Substs<'tcx>,\n \n     // The source span and nesting context where this function comes from, for\n     // error reporting and symbol generation.\n@@ -792,7 +750,7 @@ pub fn is_null(val: ValueRef) -> bool {\n }\n \n pub fn monomorphize_type<'blk, 'tcx>(bcx: &BlockS<'blk, 'tcx>, t: Ty<'tcx>) -> Ty<'tcx> {\n-    t.subst(bcx.tcx(), &bcx.fcx.param_substs.substs)\n+    t.subst(bcx.tcx(), bcx.fcx.param_substs)\n }\n \n pub fn node_id_type<'blk, 'tcx>(bcx: &BlockS<'blk, 'tcx>, id: ast::NodeId) -> Ty<'tcx> {\n@@ -950,7 +908,7 @@ pub fn node_id_substs<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     }\n \n     let substs = substs.erase_regions();\n-    substs.substp(tcx, bcx.fcx.param_substs)\n+    substs.subst(tcx, bcx.fcx.param_substs)\n }\n \n pub fn langcall(bcx: Block,"}, {"sha": "5484f6f5653fe66f567f132a78a194926b6470b5", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=4c3ad48c4530e1033d9b74cf8a793e3d87f53c38", "patch": "@@ -196,7 +196,7 @@ use llvm;\n use llvm::{ModuleRef, ContextRef, ValueRef};\n use llvm::debuginfo::*;\n use metadata::csearch;\n-use middle::subst::{mod, Subst};\n+use middle::subst::{mod, Subst, Substs};\n use trans::adt;\n use trans::common::*;\n use trans::machine;\n@@ -1171,7 +1171,7 @@ pub fn start_emitting_source_locations(fcx: &FunctionContext) {\n /// for the function.\n pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                                fn_ast_id: ast::NodeId,\n-                                               param_substs: &param_substs<'tcx>,\n+                                               param_substs: &Substs<'tcx>,\n                                                llfn: ValueRef) -> FunctionDebugContext {\n     if cx.sess().opts.debuginfo == NoDebugInfo {\n         return FunctionDebugContext { repr: DebugInfoDisabled };\n@@ -1373,7 +1373,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     fn get_function_signature<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                         fn_ast_id: ast::NodeId,\n                                         fn_decl: &ast::FnDecl,\n-                                        param_substs: &param_substs<'tcx>,\n+                                        param_substs: &Substs<'tcx>,\n                                         error_reporting_span: Span) -> DIArray {\n         if cx.sess().opts.debuginfo == LimitedDebugInfo {\n             return create_DIArray(DIB(cx), &[]);\n@@ -1389,7 +1389,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 assert_type_for_node_id(cx, fn_ast_id, error_reporting_span);\n \n                 let return_type = ty::node_id_to_type(cx.tcx(), fn_ast_id);\n-                let return_type = return_type.substp(cx.tcx(), param_substs);\n+                let return_type = return_type.subst(cx.tcx(), param_substs);\n                 signature.push(type_metadata(cx, return_type, codemap::DUMMY_SP));\n             }\n         }\n@@ -1398,7 +1398,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         for arg in fn_decl.inputs.iter() {\n             assert_type_for_node_id(cx, arg.pat.id, arg.pat.span);\n             let arg_type = ty::node_id_to_type(cx.tcx(), arg.pat.id);\n-            let arg_type = arg_type.substp(cx.tcx(), param_substs);\n+            let arg_type = arg_type.subst(cx.tcx(), param_substs);\n             signature.push(type_metadata(cx, arg_type, codemap::DUMMY_SP));\n         }\n \n@@ -1407,11 +1407,11 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     fn get_template_parameters<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                          generics: &ast::Generics,\n-                                         param_substs: &param_substs<'tcx>,\n+                                         param_substs: &Substs<'tcx>,\n                                          file_metadata: DIFile,\n                                          name_to_append_suffix_to: &mut String)\n                                          -> DIArray {\n-        let self_type = param_substs.substs().self_ty();\n+        let self_type = param_substs.self_ty();\n \n         // Only true for static default methods:\n         let has_self_type = self_type.is_some();\n@@ -1468,7 +1468,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         }\n \n         // Handle other generic parameters\n-        let actual_types = param_substs.substs().types.get_slice(subst::FnSpace);\n+        let actual_types = param_substs.types.get_slice(subst::FnSpace);\n         for (index, &ast::TyParam{ ident, .. }) in generics.ty_params.iter().enumerate() {\n             let actual_type = actual_types[index];\n             // Add actual type name to <...> clause of function name"}, {"sha": "f9c6583c5ef4fbea6db7a2aab57eb98b4adf2caf", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=4c3ad48c4530e1033d9b74cf8a793e3d87f53c38", "patch": "@@ -333,8 +333,7 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 let trait_ref =\n                     Rc::new(ty::TraitRef { def_id: principal.def_id,\n                                            substs: substs });\n-                let trait_ref =\n-                    trait_ref.subst(bcx.tcx(), bcx.fcx.param_substs.substs());\n+                let trait_ref = trait_ref.subst(bcx.tcx(), bcx.fcx.param_substs);\n                 let box_ty = mk_ty(unsized_ty);\n                 PointerCast(bcx,\n                             meth::get_vtable(bcx, box_ty, trait_ref),\n@@ -1121,8 +1120,7 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                              .get(&expr.id)\n                                              .map(|t| (*t).clone())\n                                              .unwrap();\n-                let trait_ref =\n-                    trait_ref.subst(bcx.tcx(), bcx.fcx.param_substs.substs());\n+                let trait_ref = trait_ref.subst(bcx.tcx(), bcx.fcx.param_substs);\n                 let datum = unpack_datum!(bcx, trans(bcx, &**val));\n                 meth::trans_trait_cast(bcx, datum, expr.id,\n                                        trait_ref, dest)"}, {"sha": "a2f894bb0f17c9400724b186cd0980872cff97c0", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=4c3ad48c4530e1033d9b74cf8a793e3d87f53c38", "patch": "@@ -24,7 +24,7 @@ use trans::type_of::*;\n use trans::type_of;\n use middle::ty::FnSig;\n use middle::ty::{mod, Ty};\n-use middle::subst::Subst;\n+use middle::subst::{Subst, Substs};\n use std::cmp;\n use libc::c_uint;\n use syntax::abi::{Cdecl, Aapcs, C, Win64, Abi};\n@@ -531,13 +531,13 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                                 body: &ast::Block,\n                                                 attrs: &[ast::Attribute],\n                                                 llwrapfn: ValueRef,\n-                                                param_substs: &param_substs<'tcx>,\n+                                                param_substs: &Substs<'tcx>,\n                                                 id: ast::NodeId,\n                                                 hash: Option<&str>) {\n     let _icx = push_ctxt(\"foreign::build_foreign_fn\");\n \n     let fnty = ty::node_id_to_type(ccx.tcx(), id);\n-    let mty = fnty.subst(ccx.tcx(), param_substs.substs());\n+    let mty = fnty.subst(ccx.tcx(), param_substs);\n     let tys = foreign_types_for_fn_ty(ccx, mty);\n \n     unsafe { // unsafe because we call LLVM operations\n@@ -551,15 +551,14 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     fn build_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                decl: &ast::FnDecl,\n                                body: &ast::Block,\n-                               param_substs: &param_substs<'tcx>,\n+                               param_substs: &Substs<'tcx>,\n                                attrs: &[ast::Attribute],\n                                id: ast::NodeId,\n                                hash: Option<&str>)\n                                -> ValueRef {\n         let _icx = push_ctxt(\"foreign::foreign::build_rust_fn\");\n         let tcx = ccx.tcx();\n-        let t = ty::node_id_to_type(tcx, id).subst(\n-            ccx.tcx(), param_substs.substs());\n+        let t = ty::node_id_to_type(tcx, id).subst(ccx.tcx(), param_substs);\n \n         let ps = ccx.tcx().map.with_path(id, |path| {\n             let abi = Some(ast_map::PathName(special_idents::clownshoe_abi.name));"}, {"sha": "85369afa60243fac635371b484f84280f935247d", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=4c3ad48c4530e1033d9b74cf8a793e3d87f53c38", "patch": "@@ -19,7 +19,7 @@ use llvm::{ValueRef, True, get_param};\n use llvm;\n use middle::lang_items::ExchangeFreeFnLangItem;\n use middle::subst;\n-use middle::subst::Subst;\n+use middle::subst::{Subst, Substs};\n use trans::adt;\n use trans::base::*;\n use trans::build::*;\n@@ -541,7 +541,7 @@ fn make_generic_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let _s = StatRecorder::new(ccx, glue_name);\n \n     let arena = TypedArena::new();\n-    let empty_param_substs = param_substs::empty();\n+    let empty_param_substs = Substs::trans_empty();\n     let fcx = new_fn_ctxt(ccx, llfn, ast::DUMMY_NODE_ID, false,\n                           ty::FnConverging(ty::mk_nil(ccx.tcx())),\n                           &empty_param_substs, None, &arena);"}, {"sha": "bde9051ec74d6a65c5a95aaa07f81445a688fc87", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=4c3ad48c4530e1033d9b74cf8a793e3d87f53c38", "patch": "@@ -11,6 +11,7 @@\n use llvm::{AvailableExternallyLinkage, InternalLinkage, SetLinkage};\n use metadata::csearch;\n use middle::astencode;\n+use middle::subst::Substs;\n use trans::base::{push_ctxt, trans_item, get_item_val, trans_fn};\n use trans::common::*;\n use middle::ty;\n@@ -164,7 +165,7 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n                                  &*mth.pe_fn_decl(),\n                                  &*mth.pe_body(),\n                                  llfn,\n-                                 &param_substs::empty(),\n+                                 &Substs::trans_empty(),\n                                  mth.id,\n                                  &[]);\n                         // Use InternalLinkage so LLVM can optimize more"}, {"sha": "1b02b9588f5c317fa2dbb0fcceaa850e1afcc9b0", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=4c3ad48c4530e1033d9b74cf8a793e3d87f53c38", "patch": "@@ -87,7 +87,7 @@ pub fn trans_impl(ccx: &CrateContext,\n                                  method.pe_fn_decl(),\n                                  method.pe_body(),\n                                  llfn,\n-                                 &param_substs::empty(),\n+                                 &Substs::trans_empty(),\n                                  method.id,\n                                  &[]);\n                         update_linkage(ccx,\n@@ -136,8 +136,7 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             method_num\n         }) => {\n             let trait_ref =\n-                Rc::new(trait_ref.subst(bcx.tcx(),\n-                                        bcx.fcx.param_substs.substs()));\n+                Rc::new(trait_ref.subst(bcx.tcx(), bcx.fcx.param_substs));\n             let span = bcx.tcx().map.span(method_call.expr_id);\n             debug!(\"method_call={} trait_ref={}\",\n                    method_call,"}, {"sha": "bf7d560fdaa598ed01d0083ababa652f7032f58a", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3ad48c4530e1033d9b74cf8a793e3d87f53c38/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=4c3ad48c4530e1033d9b74cf8a793e3d87f53c38", "patch": "@@ -32,26 +32,26 @@ use std::hash::{sip, Hash};\n \n pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                 fn_id: ast::DefId,\n-                                real_substs: &subst::Substs<'tcx>,\n+                                psubsts: &subst::Substs<'tcx>,\n                                 ref_id: Option<ast::NodeId>)\n     -> (ValueRef, bool) {\n     debug!(\"monomorphic_fn(\\\n             fn_id={}, \\\n             real_substs={}, \\\n             ref_id={})\",\n            fn_id.repr(ccx.tcx()),\n-           real_substs.repr(ccx.tcx()),\n+           psubsts.repr(ccx.tcx()),\n            ref_id);\n \n-    assert!(real_substs.types.all(|t| {\n+    assert!(psubsts.types.all(|t| {\n         !ty::type_needs_infer(*t) && !ty::type_has_params(*t)\n     }));\n \n     let _icx = push_ctxt(\"monomorphic_fn\");\n \n     let hash_id = MonoId {\n         def: fn_id,\n-        params: real_substs.types.clone()\n+        params: psubsts.types.clone()\n     };\n \n     match ccx.monomorphized().borrow().get(&hash_id) {\n@@ -63,9 +63,6 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         None => ()\n     }\n \n-    debug!(\"creating param_substs with real_substs={}\", real_substs.repr(ccx.tcx()));\n-    let psubsts = param_substs::new((*real_substs).clone());\n-\n     debug!(\"monomorphic_fn(\\\n             fn_id={}, \\\n             psubsts={}, \\\n@@ -98,7 +95,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     }\n \n     debug!(\"monomorphic_fn about to subst into {}\", llitem_ty.repr(ccx.tcx()));\n-    let mono_ty = llitem_ty.subst(ccx.tcx(), real_substs);\n+    let mono_ty = llitem_ty.subst(ccx.tcx(), psubsts);\n \n     ccx.stats().n_monos.set(ccx.stats().n_monos.get() + 1);\n \n@@ -178,10 +175,10 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                   if needs_body {\n                       if abi != abi::Rust {\n                           foreign::trans_rust_fn_with_foreign_abi(\n-                              ccx, &**decl, &**body, &[], d, &psubsts, fn_id.node,\n+                              ccx, &**decl, &**body, &[], d, psubsts, fn_id.node,\n                               Some(hash.as_slice()));\n                       } else {\n-                          trans_fn(ccx, &**decl, &**body, d, &psubsts, fn_id.node, &[]);\n+                          trans_fn(ccx, &**decl, &**body, d, psubsts, fn_id.node, &[]);\n                       }\n                   }\n \n@@ -205,7 +202,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                        &*v,\n                                        args.as_slice(),\n                                        this_tv.disr_val,\n-                                       &psubsts,\n+                                       psubsts,\n                                        d);\n                 }\n                 ast::StructVariantKind(_) =>\n@@ -223,7 +220,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                  mth.pe_fn_decl(),\n                                  mth.pe_body(),\n                                  d,\n-                                 &psubsts,\n+                                 psubsts,\n                                  mth.id,\n                                  &[]);\n                     }\n@@ -241,7 +238,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                     let needs_body = setup_lldecl(d, mth.attrs.as_slice());\n                     if needs_body {\n                         trans_fn(ccx, mth.pe_fn_decl(), mth.pe_body(), d,\n-                                 &psubsts, mth.id, &[]);\n+                                 psubsts, mth.id, &[]);\n                     }\n                     d\n                 }\n@@ -258,7 +255,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                      struct_def.fields.as_slice(),\n                                      struct_def.ctor_id.expect(\"ast-mapped tuple struct \\\n                                                                 didn't have a ctor id\"),\n-                                     &psubsts,\n+                                     psubsts,\n                                      d);\n             d\n         }"}]}