{"sha": "16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ODgxMzkwZTFmMWQ3Y2JmMjczN2UwZDc4NTYwZDRlYWEzYmI4YzE=", "commit": {"author": {"name": "Grzegorz", "email": "grzegorz.bartoszek@thaumatec.com", "date": "2019-02-10T12:35:44Z"}, "committer": {"name": "Grzegorz", "email": "grzegorz.bartoszek@thaumatec.com", "date": "2019-02-10T12:35:44Z"}, "message": "removing redundant closures in the whole project", "tree": {"sha": "7c8ca236aae81f0d7be5a369ead1c0b1720ab527", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c8ca236aae81f0d7be5a369ead1c0b1720ab527"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "html_url": "https://github.com/rust-lang/rust/commit/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/comments", "author": null, "committer": null, "parents": [{"sha": "b38c587b98059d002babb3023820061d0e03c5cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b38c587b98059d002babb3023820061d0e03c5cf", "html_url": "https://github.com/rust-lang/rust/commit/b38c587b98059d002babb3023820061d0e03c5cf"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "7fad43029acab67eafbb3289c062bf5943ea571e", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "patch": "@@ -47,7 +47,7 @@ impl Lint {\n             name: name.to_lowercase(),\n             group: group.to_string(),\n             desc: NL_ESCAPE_RE.replace(&desc.replace(\"\\\\\\\"\", \"\\\"\"), \"\").to_string(),\n-            deprecation: deprecation.map(|d| d.to_string()),\n+            deprecation: deprecation.map(std::string::ToString::to_string),\n             module: module.to_string(),\n         }\n     }\n@@ -178,7 +178,7 @@ fn lint_files() -> impl Iterator<Item = walkdir::DirEntry> {\n     // Otherwise we would not collect all the lints, for example in `clippy_lints/src/methods/`.\n     WalkDir::new(\"../clippy_lints/src\")\n         .into_iter()\n-        .filter_map(|f| f.ok())\n+        .filter_map(std::result::Result::ok)\n         .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n }\n "}, {"sha": "a72944bbe028f8e518156d914dc0e9a557d9c347", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "patch": "@@ -326,7 +326,7 @@ fn check_clippy_lint_names(cx: &LateContext<'_, '_>, items: &[NestedMetaItem]) {\n                     lint.span,\n                     &format!(\"unknown clippy lint: clippy::{}\", name),\n                     |db| {\n-                        if name.as_str().chars().any(|c| c.is_uppercase()) {\n+                        if name.as_str().chars().any(char::is_uppercase) {\n                             let name_lower = name.as_str().to_lowercase();\n                             match lint_store.check_lint_name(\n                                 &name_lower,"}, {"sha": "1d37c03ff45459cff91fb293c159edfbf9299df7", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "patch": "@@ -53,7 +53,7 @@ fn is_empty_str(value: &Option<String>) -> bool {\n \n fn is_empty_vec(value: &[String]) -> bool {\n     // This works because empty iterators return true\n-    value.iter().all(|v| v.is_empty())\n+    value.iter().all(std::string::String::is_empty)\n }\n \n pub struct Pass;"}, {"sha": "759b31739781df8ff81fdd26236f1fb2068cba79", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "patch": "@@ -267,7 +267,7 @@ pub fn read_conf(reg: &rustc_plugin::Registry<'_>) -> Conf {\n                 }\n             });\n \n-            let (conf, errors) = utils::conf::read(file_name.as_ref().map(|p| p.as_ref()));\n+            let (conf, errors) = utils::conf::read(file_name.as_ref().map(std::convert::AsRef::as_ref));\n \n             // all conf errors are non-fatal, we just use the default conf in case of error\n             for error in errors {"}, {"sha": "c9b27ef161526c2500fa6969cd97ea18aa61fc56", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "patch": "@@ -829,7 +829,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n         let (method_names, arg_lists) = method_calls(expr, 2);\n         let method_names: Vec<LocalInternedString> = method_names.iter().map(|s| s.as_str()).collect();\n-        let method_names: Vec<&str> = method_names.iter().map(|s| s.as_ref()).collect();\n+        let method_names: Vec<&str> = method_names.iter().map(std::convert::AsRef::as_ref).collect();\n \n         match method_names.as_slice() {\n             [\"unwrap\", \"get\"] => lint_get_unwrap(cx, expr, arg_lists[1], false),\n@@ -1695,7 +1695,7 @@ fn derefs_to_slice(cx: &LateContext<'_, '_>, expr: &hir::Expr, ty: Ty<'_>) -> Op\n \n     if let hir::ExprKind::MethodCall(ref path, _, ref args) = expr.node {\n         if path.ident.name == \"iter\" && may_slice(cx, cx.tables.expr_ty(&args[0])) {\n-            sugg::Sugg::hir_opt(cx, &args[0]).map(|sugg| sugg.addr())\n+            sugg::Sugg::hir_opt(cx, &args[0]).map(sugg::Sugg::addr)\n         } else {\n             None\n         }"}, {"sha": "b1cd1910f5b131f973a21008725921b38f6bff3b", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "patch": "@@ -241,7 +241,7 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n                         // or too many chars differ (x_foo, y_boo) or (xfoo, yboo)\n                         continue;\n                     }\n-                    split_at = interned_name.chars().next().map(|c| c.len_utf8());\n+                    split_at = interned_name.chars().next().map(char::len_utf8);\n                 }\n             }\n             span_lint_and_then("}, {"sha": "ff802dbb3a8aa41759047ffeb00eb7cae481acfa", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "patch": "@@ -14,7 +14,7 @@ use toml;\n pub fn file_from_args(\n     args: &[source_map::Spanned<ast::NestedMetaItemKind>],\n ) -> Result<Option<path::PathBuf>, (&'static str, source_map::Span)> {\n-    for arg in args.iter().filter_map(|a| a.meta_item()) {\n+    for arg in args.iter().filter_map(syntax::source_map::Spanned::meta_item) {\n         if arg.name() == \"conf_file\" {\n             return match arg.node {\n                 ast::MetaItemKind::Word | ast::MetaItemKind::List(_) => {"}, {"sha": "b5221bca0073f73d42aa4625e53380cbf66809c7", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "patch": "@@ -142,7 +142,10 @@ pub fn match_def_path(tcx: TyCtxt<'_, '_, '_>, def_id: DefId, path: &[&str]) ->\n pub fn get_def_path(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Vec<&'static str> {\n     let mut apb = AbsolutePathBuffer { names: vec![] };\n     tcx.push_item_path(&mut apb, def_id, false);\n-    apb.names.iter().map(|n| n.get()).collect()\n+    apb.names\n+        .iter()\n+        .map(syntax_pos::symbol::LocalInternedString::get)\n+        .collect()\n }\n \n /// Check if type is struct, enum or union type with given def path."}, {"sha": "19c27754839e7fc22e3dfee804b16821b0bc999b", "filename": "rustc_tools_util/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/rustc_tools_util%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/rustc_tools_util%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tools_util%2Fsrc%2Flib.rs?ref=16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "patch": "@@ -9,8 +9,8 @@ macro_rules! get_version_info {\n         let crate_name = String::from(env!(\"CARGO_PKG_NAME\"));\n \n         let host_compiler = $crate::get_channel();\n-        let commit_hash = option_env!(\"GIT_HASH\").map(|s| s.to_string());\n-        let commit_date = option_env!(\"COMMIT_DATE\").map(|s| s.to_string());\n+        let commit_hash = option_env!(\"GIT_HASH\").map(str::to_string);\n+        let commit_date = option_env!(\"COMMIT_DATE\").map(str::to_string);\n \n         VersionInfo {\n             major,"}, {"sha": "34fc6fc7f9fb5e7511157110762b0b825f90f223", "filename": "src/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "patch": "@@ -47,7 +47,7 @@ fn arg_value<'a>(\n fn test_arg_value() {\n     let args: Vec<_> = [\"--bar=bar\", \"--foobar\", \"123\", \"--foo\"]\n         .iter()\n-        .map(|s| s.to_string())\n+        .map(std::string::ToString::to_string)\n         .collect();\n \n     assert_eq!(arg_value(None, \"--foobar\", |_| true), None);\n@@ -84,7 +84,7 @@ pub fn main() {\n             let sys_root_arg = arg_value(&orig_args, \"--sysroot\", |_| true);\n             let have_sys_root_arg = sys_root_arg.is_some();\n             let sys_root = sys_root_arg\n-                .map(|s| s.to_string())\n+                .map(std::string::ToString::to_string)\n                 .or_else(|| std::env::var(\"SYSROOT\").ok())\n                 .or_else(|| {\n                     let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));"}, {"sha": "d87bb4be3c3f976e26e94ddfad4135d6993cf45d", "filename": "tests/missing-test-files.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/tests%2Fmissing-test-files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/tests%2Fmissing-test-files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmissing-test-files.rs?ref=16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "patch": "@@ -32,7 +32,7 @@ fn explore_directory(dir: &Path) -> Vec<String> {\n     let mut missing_files: Vec<String> = Vec::new();\n     let mut current_file = String::new();\n     let mut files: Vec<DirEntry> = fs::read_dir(dir).unwrap().filter_map(Result::ok).collect();\n-    files.sort_by_key(|e| e.path());\n+    files.sort_by_key(std::fs::DirEntry::path);\n     for entry in &files {\n         let path = entry.path();\n         if path.is_dir() {"}, {"sha": "d804e838d5a68fbb1ed0c9dbfa49487bc5f1592e", "filename": "tests/ui/map_clone.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/tests%2Fui%2Fmap_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/tests%2Fui%2Fmap_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.fixed?ref=16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "patch": "@@ -3,6 +3,7 @@\n #![allow(clippy::iter_cloned_collect)]\n #![allow(clippy::clone_on_copy)]\n #![allow(clippy::missing_docs_in_private_items)]\n+#![allow(clippy::redundant_closure)]\n \n fn main() {\n     let _: Vec<i8> = vec![5_i8; 6].iter().cloned().collect();"}, {"sha": "d98cd939d8cc5f45a04e4cb0bf4c2c8406e718a3", "filename": "tests/ui/map_clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "patch": "@@ -3,6 +3,7 @@\n #![allow(clippy::iter_cloned_collect)]\n #![allow(clippy::clone_on_copy)]\n #![allow(clippy::missing_docs_in_private_items)]\n+#![allow(clippy::redundant_closure)]\n \n fn main() {\n     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();"}, {"sha": "db7fa4f52fce1eff3c396c1c559aed48630bc18d", "filename": "tests/ui/map_clone.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "patch": "@@ -1,25 +1,25 @@\n error: You are using an explicit closure for cloning elements\n-  --> $DIR/map_clone.rs:8:22\n+  --> $DIR/map_clone.rs:9:22\n    |\n LL |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![5_i8; 6].iter().cloned()`\n    |\n    = note: `-D clippy::map-clone` implied by `-D warnings`\n \n error: You are using an explicit closure for cloning elements\n-  --> $DIR/map_clone.rs:9:26\n+  --> $DIR/map_clone.rs:10:26\n    |\n LL |     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![String::new()].iter().cloned()`\n \n error: You are using an explicit closure for cloning elements\n-  --> $DIR/map_clone.rs:10:23\n+  --> $DIR/map_clone.rs:11:23\n    |\n LL |     let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![42, 43].iter().cloned()`\n \n error: You are needlessly cloning iterator elements\n-  --> $DIR/map_clone.rs:22:29\n+  --> $DIR/map_clone.rs:23:29\n    |\n LL |     let _ = std::env::args().map(|v| v.clone());\n    |                             ^^^^^^^^^^^^^^^^^^^ help: Remove the map call"}]}