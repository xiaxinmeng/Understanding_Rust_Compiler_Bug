{"sha": "42b548cf9d875d878a90e676894c957167796458", "node_id": "C_kwDOAAsO6NoAKDQyYjU0OGNmOWQ4NzVkODc4YTkwZTY3Njg5NGM5NTcxNjc3OTY0NTg", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-03-10T15:53:48Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-03-15T18:34:16Z"}, "message": "rustdoc-json: Add tests for generic fn args and returns", "tree": {"sha": "5c2f0ec61cc6e7af56e4e89901818594f00ddafb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c2f0ec61cc6e7af56e4e89901818594f00ddafb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42b548cf9d875d878a90e676894c957167796458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42b548cf9d875d878a90e676894c957167796458", "html_url": "https://github.com/rust-lang/rust/commit/42b548cf9d875d878a90e676894c957167796458", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42b548cf9d875d878a90e676894c957167796458/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccef93fb891ac2f3426d9f4a733841db256919a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccef93fb891ac2f3426d9f4a733841db256919a9", "html_url": "https://github.com/rust-lang/rust/commit/ccef93fb891ac2f3426d9f4a733841db256919a9"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "3b03724b040aea2bcb67882c9ded04d0ca0e8d4d", "filename": "src/test/rustdoc-json/fns/generic_args.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/42b548cf9d875d878a90e676894c957167796458/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b548cf9d875d878a90e676894c957167796458/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs?ref=42b548cf9d875d878a90e676894c957167796458", "patch": "@@ -0,0 +1,47 @@\n+// ignore-tidy-linelength\n+\n+#![feature(no_core)]\n+#![no_core]\n+\n+// @set foo = generic_args.json \"$.index[*][?(@.name=='Foo')].id\"\n+pub trait Foo {}\n+\n+// @is - \"$.index[*][?(@.name=='generics')].inner.generics.where_predicates\" \"[]\"\n+// @count - \"$.index[*][?(@.name=='generics')].inner.generics.params[*]\" 1\n+// @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].name\" '\"F\"'\n+// @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.default\" 'null'\n+// @count - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.bounds[*]\" 1\n+// @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.inner.id\" '$foo'\n+// @count - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[*]\" 1\n+// @is - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][0]\" '\"f\"'\n+// @is - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][1].kind\" '\"generic\"'\n+// @is - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][1].inner\" '\"F\"'\n+pub fn generics<F: Foo>(f: F) {}\n+\n+// @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.where_predicates\" \"[]\"\n+// @count - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[*]\" 1\n+// @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[0].name\" '\"impl Foo\"'\n+// @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.inner.id\" $foo\n+// @count - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[*]\" 1\n+// @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][0]\" '\"f\"'\n+// @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].kind\" '\"impl_trait\"'\n+// @count - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[*]\" 1\n+// @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.inner.id\" $foo\n+pub fn impl_trait(f: impl Foo) {}\n+\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[0].name\" '\"F\"'\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[0].kind\" '{\"type\": {\"bounds\": [], \"default\": null, \"synthetic\": false}}'\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][0]\" '\"f\"'\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][1].kind\" '\"generic\"'\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][1].inner\" '\"F\"'\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.type\" '{\"inner\": \"F\", \"kind\": \"generic\"}'\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $foo\n+pub fn where_clase<F>(f: F)\n+where\n+    F: Foo,\n+{\n+}"}, {"sha": "1a0f33fe3d28e50567b115b16e83526b873e9a61", "filename": "src/test/rustdoc-json/fns/generic_returns.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/42b548cf9d875d878a90e676894c957167796458/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b548cf9d875d878a90e676894c957167796458/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs?ref=42b548cf9d875d878a90e676894c957167796458", "patch": "@@ -0,0 +1,21 @@\n+// ignore-tidy-linelength\n+\n+#![feature(no_core)]\n+#![no_core]\n+\n+// @count generic_returns.json \"$.index[*][?(@.name=='generic_returns')].inner.items[*]\" 2\n+\n+// @set foo = - \"$.index[*][?(@.name=='Foo')].id\"\n+pub trait Foo {}\n+\n+// @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.inputs\" []\n+// @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.kind\" '\"impl_trait\"'\n+// @count - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.inner[*]\" 1\n+// @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.inner[0].trait_bound.trait.inner.id\" $foo\n+pub fn get_foo() -> impl Foo {\n+    Fooer {}\n+}\n+\n+struct Fooer {}\n+\n+impl Foo for Fooer {}"}]}