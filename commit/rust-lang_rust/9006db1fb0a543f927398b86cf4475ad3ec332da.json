{"sha": "9006db1fb0a543f927398b86cf4475ad3ec332da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMDZkYjFmYjBhNTQzZjkyNzM5OGI4NmNmNDQ3NWFkM2VjMzMyZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-06T08:38:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-06T08:38:50Z"}, "message": "Auto merge of #42436 - ollie27:win_spawn_name, r=alexcrichton\n\nAlways quote program name in Command::spawn on Windows\n\n[`CreateProcess`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682425.aspx) will interpret args as part of the binary name if it\ndoesn't find the binary using just the unquoted name. For example if\n`foo.exe` doesn't exist, `Command::new(\"foo\").arg(\"bar\").spawn()` will\ntry to launch `foo bar.exe` which is clearly not desired.", "tree": {"sha": "8cf9dfa1d75771d110424599dafe62880f6e1319", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cf9dfa1d75771d110424599dafe62880f6e1319"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9006db1fb0a543f927398b86cf4475ad3ec332da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9006db1fb0a543f927398b86cf4475ad3ec332da", "html_url": "https://github.com/rust-lang/rust/commit/9006db1fb0a543f927398b86cf4475ad3ec332da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9006db1fb0a543f927398b86cf4475ad3ec332da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17f493fffc4e7b7a4110d2528e9f1272470dda10", "url": "https://api.github.com/repos/rust-lang/rust/commits/17f493fffc4e7b7a4110d2528e9f1272470dda10", "html_url": "https://github.com/rust-lang/rust/commit/17f493fffc4e7b7a4110d2528e9f1272470dda10"}, {"sha": "02955f508e577d104bcd0f6b8b92e7a7b4657708", "url": "https://api.github.com/repos/rust-lang/rust/commits/02955f508e577d104bcd0f6b8b92e7a7b4657708", "html_url": "https://github.com/rust-lang/rust/commit/02955f508e577d104bcd0f6b8b92e7a7b4657708"}], "stats": {"total": 67, "additions": 59, "deletions": 8}, "files": [{"sha": "0bd0ce73138d6109224070ffffbffa097078804b", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9006db1fb0a543f927398b86cf4475ad3ec332da/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9006db1fb0a543f927398b86cf4475ad3ec332da/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=9006db1fb0a543f927398b86cf4475ad3ec332da", "patch": "@@ -427,20 +427,22 @@ fn make_command_line(prog: &OsStr, args: &[OsString]) -> io::Result<Vec<u16>> {\n     // Encode the command and arguments in a command line string such\n     // that the spawned process may recover them using CommandLineToArgvW.\n     let mut cmd: Vec<u16> = Vec::new();\n-    append_arg(&mut cmd, prog)?;\n+    // Always quote the program name so CreateProcess doesn't interpret args as\n+    // part of the name if the binary wasn't found first time.\n+    append_arg(&mut cmd, prog, true)?;\n     for arg in args {\n         cmd.push(' ' as u16);\n-        append_arg(&mut cmd, arg)?;\n+        append_arg(&mut cmd, arg, false)?;\n     }\n     return Ok(cmd);\n \n-    fn append_arg(cmd: &mut Vec<u16>, arg: &OsStr) -> io::Result<()> {\n+    fn append_arg(cmd: &mut Vec<u16>, arg: &OsStr, force_quotes: bool) -> io::Result<()> {\n         // If an argument has 0 characters then we need to quote it to ensure\n         // that it actually gets passed through on the command line or otherwise\n         // it will be dropped entirely when parsed on the other end.\n         ensure_no_nuls(arg)?;\n         let arg_bytes = &arg.as_inner().inner.as_inner();\n-        let quote = arg_bytes.iter().any(|c| *c == b' ' || *c == b'\\t')\n+        let quote = force_quotes || arg_bytes.iter().any(|c| *c == b' ' || *c == b'\\t')\n             || arg_bytes.is_empty();\n         if quote {\n             cmd.push('\"' as u16);\n@@ -526,7 +528,7 @@ mod tests {\n \n         assert_eq!(\n             test_wrapper(\"prog\", &[\"aaa\", \"bbb\", \"ccc\"]),\n-            \"prog aaa bbb ccc\"\n+            \"\\\"prog\\\" aaa bbb ccc\"\n         );\n \n         assert_eq!(\n@@ -539,15 +541,15 @@ mod tests {\n         );\n         assert_eq!(\n             test_wrapper(\"echo\", &[\"a b c\"]),\n-            \"echo \\\"a b c\\\"\"\n+            \"\\\"echo\\\" \\\"a b c\\\"\"\n         );\n         assert_eq!(\n             test_wrapper(\"echo\", &[\"\\\" \\\\\\\" \\\\\", \"\\\\\"]),\n-            \"echo \\\"\\\\\\\" \\\\\\\\\\\\\\\" \\\\\\\\\\\" \\\\\"\n+            \"\\\"echo\\\" \\\"\\\\\\\" \\\\\\\\\\\\\\\" \\\\\\\\\\\" \\\\\"\n         );\n         assert_eq!(\n             test_wrapper(\"\\u{03c0}\\u{042f}\\u{97f3}\\u{00e6}\\u{221e}\", &[]),\n-            \"\\u{03c0}\\u{042f}\\u{97f3}\\u{00e6}\\u{221e}\"\n+            \"\\\"\\u{03c0}\\u{042f}\\u{97f3}\\u{00e6}\\u{221e}\\\"\"\n         );\n     }\n }"}, {"sha": "f0d4242260fb5d3726b59ab7e84f1cfe326909cd", "filename": "src/test/run-make/windows-spawn/Makefile", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9006db1fb0a543f927398b86cf4475ad3ec332da/src%2Ftest%2Frun-make%2Fwindows-spawn%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9006db1fb0a543f927398b86cf4475ad3ec332da/src%2Ftest%2Frun-make%2Fwindows-spawn%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwindows-spawn%2FMakefile?ref=9006db1fb0a543f927398b86cf4475ad3ec332da", "patch": "@@ -0,0 +1,14 @@\n+-include ../tools.mk\n+\n+ifdef IS_WINDOWS\n+\n+all:\n+\t$(RUSTC) -o \"$(TMPDIR)/hopefullydoesntexist bar.exe\" hello.rs\n+\t$(RUSTC) spawn.rs\n+\t$(TMPDIR)/spawn.exe\n+\n+else\n+\n+all:\n+\n+endif"}, {"sha": "b177f41941d1bf712600994692372769ca73f355", "filename": "src/test/run-make/windows-spawn/hello.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9006db1fb0a543f927398b86cf4475ad3ec332da/src%2Ftest%2Frun-make%2Fwindows-spawn%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9006db1fb0a543f927398b86cf4475ad3ec332da/src%2Ftest%2Frun-make%2Fwindows-spawn%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwindows-spawn%2Fhello.rs?ref=9006db1fb0a543f927398b86cf4475ad3ec332da", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"Hello World!\");\n+}"}, {"sha": "2913cbe2260c18aba936caf12173f93f7c1afff8", "filename": "src/test/run-make/windows-spawn/spawn.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9006db1fb0a543f927398b86cf4475ad3ec332da/src%2Ftest%2Frun-make%2Fwindows-spawn%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9006db1fb0a543f927398b86cf4475ad3ec332da/src%2Ftest%2Frun-make%2Fwindows-spawn%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwindows-spawn%2Fspawn.rs?ref=9006db1fb0a543f927398b86cf4475ad3ec332da", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::io::ErrorKind;\n+use std::process::Command;\n+\n+fn main() {\n+    // Make sure it doesn't try to run \"hopefullydoesntexist bar.exe\".\n+    assert_eq!(Command::new(\"hopefullydoesntexist\")\n+                   .arg(\"bar\")\n+                   .spawn()\n+                   .unwrap_err()\n+                   .kind(),\n+               ErrorKind::NotFound);\n+}"}]}