{"sha": "a9985cf172e7cb8ab5c58ce2818752c3572754fc", "node_id": "C_kwDOAAsO6NoAKGE5OTg1Y2YxNzJlN2NiOGFiNWM1OGNlMjgxODc1MmMzNTcyNzU0ZmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-02T09:05:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-02T09:05:18Z"}, "message": "Auto merge of #107584 - matthiaskrgr:rollup-vav4ljz, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #107201 (Remove confusing 'while checking' note from opaque future type mismatches)\n - #107312 (Add Style Guide rules for let-else statements)\n - #107488 (Fix syntax in `-Zunpretty-expanded` output for derived `PartialEq`.)\n - #107531 (Inline CSS background images directly into the CSS)\n - #107576 (Add proc-macro boilerplate to crt-static test)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "dbb937247db20bbd75be7bde50d74213d674dbde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbb937247db20bbd75be7bde50d74213d674dbde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9985cf172e7cb8ab5c58ce2818752c3572754fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9985cf172e7cb8ab5c58ce2818752c3572754fc", "html_url": "https://github.com/rust-lang/rust/commit/a9985cf172e7cb8ab5c58ce2818752c3572754fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9985cf172e7cb8ab5c58ce2818752c3572754fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "821b2a8e39588fedda894d10b9b3abd7293f0383", "url": "https://api.github.com/repos/rust-lang/rust/commits/821b2a8e39588fedda894d10b9b3abd7293f0383", "html_url": "https://github.com/rust-lang/rust/commit/821b2a8e39588fedda894d10b9b3abd7293f0383"}, {"sha": "643fc97fd3b3f4f34eb2d66af1deac9218835527", "url": "https://api.github.com/repos/rust-lang/rust/commits/643fc97fd3b3f4f34eb2d66af1deac9218835527", "html_url": "https://github.com/rust-lang/rust/commit/643fc97fd3b3f4f34eb2d66af1deac9218835527"}], "stats": {"total": 409, "additions": 155, "deletions": 254}, "files": [{"sha": "bad47db0de1d4e16103d6724d786eb479d480ab7", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -29,16 +29,30 @@ pub fn expand_deriving_partial_eq(\n                         cx.span_bug(field.span, \"not exactly 2 arguments in `derive(PartialEq)`\");\n                     };\n \n-                    // We received `&T` arguments. Convert them to `T` by\n-                    // stripping `&` or adding `*`. This isn't necessary for\n-                    // type checking, but it results in much better error\n-                    // messages if something goes wrong.\n+                    // We received arguments of type `&T`. Convert them to type `T` by stripping\n+                    // any leading `&` or adding `*`. This isn't necessary for type checking, but\n+                    // it results in better error messages if something goes wrong.\n+                    //\n+                    // Note: for arguments that look like `&{ x }`, which occur with packed\n+                    // structs, this would cause expressions like `{ self.x } == { other.x }`,\n+                    // which isn't valid Rust syntax. This wouldn't break compilation because these\n+                    // AST nodes are constructed within the compiler. But it would mean that code\n+                    // printed by `-Zunpretty=expanded` (or `cargo expand`) would have invalid\n+                    // syntax, which would be suboptimal. So we wrap these in parens, giving\n+                    // `({ self.x }) == ({ other.x })`, which is valid syntax.\n                     let convert = |expr: &P<Expr>| {\n                         if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, inner) =\n                             &expr.kind\n                         {\n-                            inner.clone()\n+                            if let ExprKind::Block(..) = &inner.kind {\n+                                // `&{ x }` form: remove the `&`, add parens.\n+                                cx.expr_paren(field.span, inner.clone())\n+                            } else {\n+                                // `&x` form: remove the `&`.\n+                                inner.clone()\n+                            }\n                         } else {\n+                            // No leading `&`: add a leading `*`.\n                             cx.expr_deref(field.span, expr.clone())\n                         }\n                     };"}, {"sha": "6cd56852f9d686942633ce3b258358c310d56469", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -272,6 +272,10 @@ impl<'a> ExtCtxt<'a> {\n         self.expr(sp, ast::ExprKind::AddrOf(ast::BorrowKind::Ref, ast::Mutability::Not, e))\n     }\n \n+    pub fn expr_paren(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr> {\n+        self.expr(sp, ast::ExprKind::Paren(e))\n+    }\n+\n     pub fn expr_call(\n         &self,\n         span: Span,"}, {"sha": "b5c2d14e8d15b05a6e7dd54eaa894e6db8ac33e7", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 16, "deletions": 46, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -60,7 +60,7 @@ use crate::traits::{\n \n use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed, IntoDiagnosticArg};\n-use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString, MultiSpan};\n+use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -1470,51 +1470,17 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 for (key, values) in types.iter() {\n                     let count = values.len();\n                     let kind = key.descr();\n-                    let mut returned_async_output_error = false;\n                     for &sp in values {\n-                        if sp.is_desugaring(DesugaringKind::Async) && !returned_async_output_error {\n-                            if [sp] != err.span.primary_spans() {\n-                                let mut span: MultiSpan = sp.into();\n-                                span.push_span_label(\n-                                    sp,\n-                                    format!(\n-                                        \"checked the `Output` of this `async fn`, {}{} {}{}\",\n-                                        if count > 1 { \"one of the \" } else { \"\" },\n-                                        target,\n-                                        kind,\n-                                        pluralize!(count),\n-                                    ),\n-                                );\n-                                err.span_note(\n-                                    span,\n-                                    \"while checking the return type of the `async fn`\",\n-                                );\n-                            } else {\n-                                err.span_label(\n-                                    sp,\n-                                    format!(\n-                                        \"checked the `Output` of this `async fn`, {}{} {}{}\",\n-                                        if count > 1 { \"one of the \" } else { \"\" },\n-                                        target,\n-                                        kind,\n-                                        pluralize!(count),\n-                                    ),\n-                                );\n-                                err.note(\"while checking the return type of the `async fn`\");\n-                            }\n-                            returned_async_output_error = true;\n-                        } else {\n-                            err.span_label(\n-                                sp,\n-                                format!(\n-                                    \"{}{} {}{}\",\n-                                    if count == 1 { \"the \" } else { \"one of the \" },\n-                                    target,\n-                                    kind,\n-                                    pluralize!(count),\n-                                ),\n-                            );\n-                        }\n+                        err.span_label(\n+                            sp,\n+                            format!(\n+                                \"{}{} {}{}\",\n+                                if count == 1 { \"the \" } else { \"one of the \" },\n+                                target,\n+                                kind,\n+                                pluralize!(count),\n+                            ),\n+                        );\n                     }\n                 }\n             }\n@@ -1537,7 +1503,11 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     //    |\n                     //    = note: expected unit type `()`\n                     //                 found closure `[closure@$DIR/issue-20862.rs:2:5: 2:14 x:_]`\n-                    if !self.ignore_span.overlaps(span) {\n+                    //\n+                    // Also ignore opaque `Future`s that come from async fns.\n+                    if !self.ignore_span.overlaps(span)\n+                        && !span.is_desugaring(DesugaringKind::Async)\n+                    {\n                         self.types.entry(kind).or_default().insert(span);\n                     }\n                 }"}, {"sha": "4ab1c36f976525dfcfb3a44e568d11305b8e6efd", "filename": "src/doc/style-guide/src/statements.md", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fstatements.md", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fstatements.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fstatements.md?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -99,6 +99,84 @@ let Foo {\n );\n ```\n \n+#### else blocks (let-else statements)\n+\n+If a let statement contains an `else` component, also known as a let-else statement,\n+then the `else` component should be formatted according to the same rules as the `else` block\n+in [control flow expressions (i.e. if-else, and if-let-else expressions)](./expressions.md#control-flow-expressions).\n+Apply the same formatting rules to the components preceding\n+the `else` block (i.e. the `let pattern: Type = initializer_expr ...` portion)\n+as described [above](#let-statements)\n+\n+Similarly to if-else expressions, if the initializer\n+expression is multi-lined, then the `else` keyword and opening brace of the block (i.e. `else {`)\n+should be put on the same line as the end of the initializer\n+expression with a preceding space if all the following are true:\n+\n+* The initializer expression ends with one or more closing\n+  parentheses, square brackets, and/or braces\n+* There is nothing else on that line\n+* That line is not indented beyond the indent of the first line containing the `let` keyword\n+\n+For example:\n+\n+```rust\n+let Some(x) = y.foo(\n+    \"abc\",\n+    fairly_long_identifier,\n+    \"def\",\n+    \"123456\",\n+    \"string\",\n+    \"cheese\",\n+) else {\n+    bar()\n+}\n+```\n+\n+Otherwise, the `else` keyword and opening brace should be placed on the next line after the end of the initializer expression, and should not be indented (the `else` keyword should be aligned with the `let` keyword).\n+\n+For example:\n+\n+```rust\n+let Some(x) = abcdef()\n+    .foo(\n+        \"abc\",\n+        some_really_really_really_long_ident,\n+        \"ident\",\n+        \"123456\",\n+    )\n+    .bar()\n+    .baz()\n+    .qux(\"fffffffffffffffff\")\n+else {\n+    foo_bar()\n+}\n+```\n+\n+##### Single line let-else statements\n+\n+The entire let-else statement may be formatted on a single line if all the following are true:\n+\n+* the entire statement is *short*\n+* the `else` block contains a single-line expression and no statements\n+* the `else` block contains no comments\n+* the let statement components preceding the `else` block can be formatted on a single line\n+\n+```rust\n+let Some(1) = opt else { return };\n+\n+let Some(1) = opt else {\n+    return;\n+};\n+\n+let Some(1) = opt else {\n+    // nope\n+    return\n+};\n+```\n+\n+Formatters may allow users to configure the value of the threshold\n+used to determine whether a let-else statement is *short*.\n \n ### Macros in statement position\n "}, {"sha": "ee988090ca334e9ed2ea02dfebd308b43b113d5a", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -814,8 +814,11 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tbackground-repeat: no-repeat;\n \tbackground-size: 20px;\n \tbackground-position: calc(100% - 2px) 56%;\n-\t/* image is black color */\n-\tbackground-image: url(\"down-arrow-927217e04c7463ac.svg\");\n+\t/* down arrow (image is black color) */\n+\tbackground-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" \\\n+\twidth=\"128\" height=\"128\" viewBox=\"-30 -20 176 176\"><path d=\"M111,40.5L64,87.499L17,40.5\" \\\n+\tfill=\"none\" stroke=\"black\" strike-linecap=\"square\" stroke-miterlimit=\"10\" stroke-width=\"12\"/> \\\n+\t</svg>');\n \t/* changes the arrow image color */\n \tfilter: var(--crate-search-div-filter);\n }\n@@ -1444,7 +1447,10 @@ details.toggle > summary.hideme > span {\n }\n \n details.toggle > summary::before {\n-\tbackground: url(\"toggle-plus-1092eb4930d581b0.svg\") no-repeat top left;\n+\t/* toggle plus */\n+\tbackground: url('data:image/svg+xml,<svg width=\"17\" height=\"17\" \\\n+shape-rendering=\"crispEdges\" stroke=\"black\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path \\\n+d=\"M5 2.5H2.5v12H5m7-12h2.5v12H12M5 8.5h7M8.5 12V8.625v0V5\"/></svg>') no-repeat top left;\n \tcontent: \"\";\n \tcursor: pointer;\n \twidth: 16px;\n@@ -1522,7 +1528,10 @@ details.toggle[open] > summary.hideme > span {\n }\n \n details.toggle[open] > summary::before {\n-\tbackground: url(\"toggle-minus-31bbd6e4c77f5c96.svg\") no-repeat top left;\n+\t/* toggle minus */\n+\tbackground: url('data:image/svg+xml,<svg width=\"17\" height=\"17\" \\\n+shape-rendering=\"crispEdges\" stroke=\"black\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path \\\n+d=\"M5 2.5H2.5v12H5m7-12h2.5v12H12M5 8.5h7\"/></svg>') no-repeat top left;\n }\n \n details.toggle[open] > summary::after {"}, {"sha": "5d76a64e92c70ea2bf86b5010406e641aa680e79", "filename": "src/librustdoc/html/static/images/down-arrow.svg", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/821b2a8e39588fedda894d10b9b3abd7293f0383/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fdown-arrow.svg", "raw_url": "https://github.com/rust-lang/rust/raw/821b2a8e39588fedda894d10b9b3abd7293f0383/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fdown-arrow.svg", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fdown-arrow.svg?ref=821b2a8e39588fedda894d10b9b3abd7293f0383", "patch": "@@ -1 +0,0 @@\n-<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" id=\"Layer_1\" width=\"128\" height=\"128\" enable-background=\"new 0 0 128 128\" version=\"1.1\" viewBox=\"-30 -20 176 176\" xml:space=\"preserve\"><g><line x1=\"111\" x2=\"64\" y1=\"40.5\" y2=\"87.499\" fill=\"none\" stroke=\"#000000\" stroke-linecap=\"square\" stroke-miterlimit=\"10\" stroke-width=\"12\"/><line x1=\"64\" x2=\"17\" y1=\"87.499\" y2=\"40.5\" fill=\"none\" stroke=\"#000000\" stroke-linecap=\"square\" stroke-miterlimit=\"10\" stroke-width=\"12\"/></g></svg>\n\\ No newline at end of file"}, {"sha": "73154788a0e8ed4563843abf5da671263aa9571a", "filename": "src/librustdoc/html/static/images/toggle-minus.svg", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/821b2a8e39588fedda894d10b9b3abd7293f0383/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ftoggle-minus.svg", "raw_url": "https://github.com/rust-lang/rust/raw/821b2a8e39588fedda894d10b9b3abd7293f0383/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ftoggle-minus.svg", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ftoggle-minus.svg?ref=821b2a8e39588fedda894d10b9b3abd7293f0383", "patch": "@@ -1 +0,0 @@\n-<svg width=\"17\" height=\"17\" shape-rendering=\"crispEdges\" stroke=\"#000\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M5 2.5H2.5v12H5m7-12h2.5v12H12M5 8.5h7\"/></svg>\n\\ No newline at end of file"}, {"sha": "08b17033e164b15fb31decfbb5befc16209d697e", "filename": "src/librustdoc/html/static/images/toggle-plus.svg", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/821b2a8e39588fedda894d10b9b3abd7293f0383/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ftoggle-plus.svg", "raw_url": "https://github.com/rust-lang/rust/raw/821b2a8e39588fedda894d10b9b3abd7293f0383/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ftoggle-plus.svg", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ftoggle-plus.svg?ref=821b2a8e39588fedda894d10b9b3abd7293f0383", "patch": "@@ -1 +0,0 @@\n-<svg width=\"17\" height=\"17\" shape-rendering=\"crispEdges\" stroke=\"#000\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M5 2.5H2.5v12H5m7-12h2.5v12H12M5 8.5h7M8.5 12V8.625v0V5\"/></svg>\n\\ No newline at end of file"}, {"sha": "767b974cc9109f6c0c35fecf71a1bff09dde17b9", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -102,9 +102,6 @@ static_files! {\n     scrape_examples_js => \"static/js/scrape-examples.js\",\n     wheel_svg => \"static/images/wheel.svg\",\n     clipboard_svg => \"static/images/clipboard.svg\",\n-    down_arrow_svg => \"static/images/down-arrow.svg\",\n-    toggle_minus_png => \"static/images/toggle-minus.svg\",\n-    toggle_plus_png => \"static/images/toggle-plus.svg\",\n     copyright => \"static/COPYRIGHT.txt\",\n     license_apache => \"static/LICENSE-APACHE.txt\",\n     license_mit => \"static/LICENSE-MIT.txt\","}, {"sha": "8e2d42c8f138cff4bfb013fb22da8d3e96d44a58", "filename": "tests/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -6,11 +6,6 @@ LL |         take_u32(x)\n    |         |\n    |         arguments to this function are incorrect\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/dont-suggest-missing-await.rs:7:24\n-   |\n-LL | async fn make_u32() -> u32 {\n-   |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n            found opaque type `impl Future<Output = u32>`\n note: function defined here"}, {"sha": "9fdb1ce47d7bae8db1a1a042e9dd5e378140f399", "filename": "tests/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -21,16 +21,6 @@ LL |     fun(one(), two());\n    |     |\n    |     arguments to this function are incorrect\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/generator-desc.rs:5:16\n-   |\n-LL | async fn one() {}\n-   |                ^ checked the `Output` of this `async fn`, expected opaque type\n-note: while checking the return type of the `async fn`\n-  --> $DIR/generator-desc.rs:6:16\n-   |\n-LL | async fn two() {}\n-   |                ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:5:16>)\n               found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:6:16>)\n    = help: consider `await`ing on both `Future`s"}, {"sha": "9c4acbe0a5bf735857cd288d03589f97810518bd", "filename": "tests/ui/async-await/issue-61076.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-61076.rs?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -54,9 +54,6 @@ async fn struct_() -> Struct {\n }\n \n async fn tuple() -> Tuple {\n-    //~^ NOTE checked the `Output` of this `async fn`, expected opaque type\n-    //~| NOTE while checking the return type of the `async fn`\n-    //~| NOTE in this expansion of desugaring of `async` block or function\n     Tuple(1i32)\n }\n "}, {"sha": "b25b29bf50c174fd18b5db994a8b6bd8a6d808a9", "filename": "tests/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -11,7 +11,7 @@ LL |     foo().await?;\n    |          ++++++\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/issue-61076.rs:65:5\n+  --> $DIR/issue-61076.rs:62:5\n    |\n LL |     t?;\n    |     ^^ the `?` operator cannot be applied to type `T`\n@@ -23,7 +23,7 @@ LL |     t.await?;\n    |      ++++++\n \n error[E0609]: no field `0` on type `impl Future<Output = Tuple>`\n-  --> $DIR/issue-61076.rs:74:26\n+  --> $DIR/issue-61076.rs:71:26\n    |\n LL |     let _: i32 = tuple().0;\n    |                          ^ field not available in `impl Future`, but it is available in its `Output`\n@@ -34,7 +34,7 @@ LL |     let _: i32 = tuple().await.0;\n    |                         ++++++\n \n error[E0609]: no field `a` on type `impl Future<Output = Struct>`\n-  --> $DIR/issue-61076.rs:78:28\n+  --> $DIR/issue-61076.rs:75:28\n    |\n LL |     let _: i32 = struct_().a;\n    |                            ^ field not available in `impl Future`, but it is available in its `Output`\n@@ -45,7 +45,7 @@ LL |     let _: i32 = struct_().await.a;\n    |                           ++++++\n \n error[E0599]: no method named `method` found for opaque type `impl Future<Output = Struct>` in the current scope\n-  --> $DIR/issue-61076.rs:82:15\n+  --> $DIR/issue-61076.rs:79:15\n    |\n LL |     struct_().method();\n    |               ^^^^^^ method not found in `impl Future<Output = Struct>`\n@@ -56,19 +56,14 @@ LL |     struct_().await.method();\n    |               ++++++\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-61076.rs:91:9\n+  --> $DIR/issue-61076.rs:88:9\n    |\n LL |     match tuple() {\n    |           ------- this expression has type `impl Future<Output = Tuple>`\n LL |\n LL |         Tuple(_) => {}\n    |         ^^^^^^^^ expected opaque type, found `Tuple`\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/issue-61076.rs:56:21\n-   |\n-LL | async fn tuple() -> Tuple {\n-   |                     ^^^^^ checked the `Output` of this `async fn`, expected opaque type\n    = note: expected opaque type `impl Future<Output = Tuple>`\n                    found struct `Tuple`\n help: consider `await`ing on the `Future`"}, {"sha": "4c5dfeed9ba5c6e87992d40a0b9bb8350e9f56b3", "filename": "tests/ui/async-await/issue-98634.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fasync-await%2Fissue-98634.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fasync-await%2Fissue-98634.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-98634.stderr?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -4,11 +4,6 @@ error[E0271]: expected `callback` to be a fn item that returns `Pin<Box<dyn Futu\n LL |         StructAsync { callback }.await;\n    |                       ^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/issue-98634.rs:24:21\n-   |\n-LL | async fn callback() {}\n-   |                     ^ checked the `Output` of this `async fn`, found opaque type\n    = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n            found opaque type `impl Future<Output = ()>`\n note: required by a bound in `StructAsync`\n@@ -23,11 +18,6 @@ error[E0271]: expected `callback` to be a fn item that returns `Pin<Box<dyn Futu\n LL |         StructAsync { callback }.await;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/issue-98634.rs:24:21\n-   |\n-LL | async fn callback() {}\n-   |                     ^ checked the `Output` of this `async fn`, found opaque type\n    = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n            found opaque type `impl Future<Output = ()>`\n note: required by a bound in `StructAsync`\n@@ -42,11 +32,6 @@ error[E0271]: expected `callback` to be a fn item that returns `Pin<Box<dyn Futu\n LL |         StructAsync { callback }.await;\n    |                                 ^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/issue-98634.rs:24:21\n-   |\n-LL | async fn callback() {}\n-   |                     ^ checked the `Output` of this `async fn`, found opaque type\n    = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n            found opaque type `impl Future<Output = ()>`\n note: required by a bound in `StructAsync`"}, {"sha": "ebb80f6e07e74f21d7271e00cae744cbf90ea390", "filename": "tests/ui/async-await/issues/issue-102206.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -8,11 +8,6 @@ LL |     std::mem::size_of_val(foo());\n    |     |                     help: consider borrowing here: `&foo()`\n    |     arguments to this function are incorrect\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/issue-102206.rs:3:16\n-   |\n-LL | async fn foo() {}\n-   |                ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected reference `&_`\n             found opaque type `impl Future<Output = ()>`\n note: function defined here"}, {"sha": "e47325cb4aeaec6fcf5f3291a4d93fa0c30c8b74", "filename": "tests/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -6,11 +6,6 @@ LL |         take_u32(x)\n    |         |\n    |         arguments to this function are incorrect\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await-closure.rs:8:24\n-   |\n-LL | async fn make_u32() -> u32 {\n-   |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n            found opaque type `impl Future<Output = u32>`\n note: function defined here"}, {"sha": "4ed0272ac1a127b7ebd9b0c08948541ddfa21afa", "filename": "tests/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -6,11 +6,6 @@ LL |     take_u32(x)\n    |     |\n    |     arguments to this function are incorrect\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:5:24\n-   |\n-LL | async fn make_u32() -> u32 {\n-   |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n            found opaque type `impl Future<Output = u32>`\n note: function defined here\n@@ -29,11 +24,6 @@ error[E0308]: mismatched types\n LL |     dummy()\n    |     ^^^^^^^ expected `()`, found opaque type\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:18:18\n-   |\n-LL | async fn dummy() {}\n-   |                  ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected unit type `()`\n             found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n@@ -60,11 +50,6 @@ LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:18:18\n-   |\n-LL | async fn dummy() {}\n-   |                  ^ checked the `Output` of this `async fn`, expected opaque type\n    = note: expected opaque type `impl Future<Output = ()>`\n                 found unit type `()`\n help: consider `await`ing on the `Future`\n@@ -87,11 +72,6 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:18:18\n-   |\n-LL | async fn dummy() {}\n-   |                  ^ checked the `Output` of this `async fn`, expected opaque type\n    = note: expected opaque type `impl Future<Output = ()>`\n                 found unit type `()`\n help: consider `await`ing on the `Future`\n@@ -108,11 +88,6 @@ LL |     let _x = match dummy() {\n LL |         () => {}\n    |         ^^ expected opaque type, found `()`\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:18:18\n-   |\n-LL | async fn dummy() {}\n-   |                  ^ checked the `Output` of this `async fn`, expected opaque type\n    = note: expected opaque type `impl Future<Output = ()>`\n                 found unit type `()`\n help: consider `await`ing on the `Future`\n@@ -129,11 +104,6 @@ LL |     match dummy_result() {\n LL |         Ok(_) => {}\n    |         ^^^^^ expected opaque type, found `Result<_, _>`\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:57:28\n-   |\n-LL | async fn dummy_result() -> Result<(), ()> {\n-   |                            ^^^^^^^^^^^^^^ checked the `Output` of this `async fn`, expected opaque type\n    = note: expected opaque type `impl Future<Output = Result<(), ()>>`\n                      found enum `Result<_, _>`\n help: consider `await`ing on the `Future`\n@@ -150,11 +120,6 @@ LL |     match dummy_result() {\n LL |         Err(_) => {}\n    |         ^^^^^^ expected opaque type, found `Result<_, _>`\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:57:28\n-   |\n-LL | async fn dummy_result() -> Result<(), ()> {\n-   |                            ^^^^^^^^^^^^^^ checked the `Output` of this `async fn`, expected opaque type\n    = note: expected opaque type `impl Future<Output = Result<(), ()>>`\n                      found enum `Result<_, _>`\n help: consider `await`ing on the `Future`"}, {"sha": "8e238a509d2fd5193ac460241b91a1a763e4688c", "filename": "tests/ui/deriving/deriving-all-codegen.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -209,7 +209,7 @@ impl ::core::marker::StructuralPartialEq for PackedPoint { }\n impl ::core::cmp::PartialEq for PackedPoint {\n     #[inline]\n     fn eq(&self, other: &PackedPoint) -> bool {\n-        { self.x } == { other.x } && { self.y } == { other.y }\n+        ({ self.x }) == ({ other.x }) && ({ self.y }) == ({ other.y })\n     }\n }\n #[automatically_derived]\n@@ -718,8 +718,8 @@ impl<T: ::core::cmp::PartialEq + ::core::marker::Copy + Trait,\n     ::core::marker::Copy {\n     #[inline]\n     fn eq(&self, other: &PackedGeneric<T, U>) -> bool {\n-        { self.0 } == { other.0 } && { self.1 } == { other.1 } &&\n-            { self.2 } == { other.2 }\n+        ({ self.0 }) == ({ other.0 }) && ({ self.1 }) == ({ other.1 }) &&\n+            ({ self.2 }) == ({ other.2 })\n     }\n }\n #[automatically_derived]"}, {"sha": "3ec62020e6c89c41077a681f599a9856cc2cb05a", "filename": "tests/ui/impl-trait/in-trait/method-signature-matches.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.stderr?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -24,16 +24,6 @@ LL |     async fn owo(_: u8) {}\n    |                     expected `()`, found `u8`\n    |                     help: change the parameter type to match the trait: `()`\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/method-signature-matches.rs:20:25\n-   |\n-LL |     async fn owo(_: u8) {}\n-   |                         ^ checked the `Output` of this `async fn`, expected opaque type\n-note: while checking the return type of the `async fn`\n-  --> $DIR/method-signature-matches.rs:20:25\n-   |\n-LL |     async fn owo(_: u8) {}\n-   |                         ^ checked the `Output` of this `async fn`, found opaque type\n note: type in trait\n   --> $DIR/method-signature-matches.rs:16:21\n    |"}, {"sha": "8ff08968008bb31839eb5c65444e1044377671a3", "filename": "tests/ui/impl-trait/issue-102605.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -6,11 +6,6 @@ LL |     convert_result(foo())\n    |     |\n    |     arguments to this function are incorrect\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/issue-102605.rs:3:19\n-   |\n-LL | async fn foo() -> Result<(), String> {\n-   |                   ^^^^^^^^^^^^^^^^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected enum `Result<(), _>`\n            found opaque type `impl Future<Output = Result<(), String>>`\n note: function defined here"}, {"sha": "a4b7fc1f5bc75e6e62e932461e6e3c32c0c3a1dd", "filename": "tests/ui/impl-trait/issue-99914.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -4,11 +4,6 @@ error[E0308]: mismatched types\n LL |     t.and_then(|t| -> _ { bar(t) });\n    |                           ^^^^^^ expected `Result<_, Error>`, found opaque type\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/issue-99914.rs:13:23\n-   |\n-LL | async fn bar(t: Okay) {}\n-   |                       ^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected enum `Result<_, Error>`\n            found opaque type `impl Future<Output = ()>`\n help: try wrapping the expression in `Ok`"}, {"sha": "020128fa214460f0d2f6f574eb422d5314c7c5d1", "filename": "tests/ui/proc-macro/crt-static.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fproc-macro%2Fcrt-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fproc-macro%2Fcrt-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fcrt-static.rs?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -5,6 +5,9 @@\n // ignore-wasm32\n // ignore-sgx no support for proc-macro crate type\n // build-pass\n+// force-host\n+// no-prefer-dynamic\n+\n #![crate_type = \"proc-macro\"]\n \n // FIXME: This don't work when crate-type is specified by attribute"}, {"sha": "7be4312bfbacbdcf0ff2bf01bb10af78c303eb47", "filename": "tests/ui/suggestions/if-then-neeing-semi.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -15,18 +15,9 @@ fn extra_semicolon() {\n     };\n }\n \n-async fn async_dummy() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n-//~| NOTE checked the `Output` of this `async fn`, expected opaque type\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n-async fn async_dummy2() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n-//~| NOTE checked the `Output` of this `async fn`, found opaque type\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n+async fn async_dummy() {}\n+\n+async fn async_dummy2() {}\n \n async fn async_extra_semicolon_same() {\n     let _ = if true {"}, {"sha": "567deb405fccd98332c24019c511ffc642187a62", "filename": "tests/ui/suggestions/if-then-neeing-semi.stderr", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: `if` and `else` have incompatible types\n-  --> $DIR/if-then-neeing-semi.rs:37:9\n+  --> $DIR/if-then-neeing-semi.rs:28:9\n    |\n LL |       let _ = if true {\n    |  _____________-\n@@ -15,11 +15,6 @@ LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/if-then-neeing-semi.rs:18:24\n-   |\n-LL | async fn async_dummy() {}\n-   |                        ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected unit type `()`\n             found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n@@ -33,7 +28,7 @@ LL +         async_dummy()\n    |\n \n error[E0308]: `if` and `else` have incompatible types\n-  --> $DIR/if-then-neeing-semi.rs:50:9\n+  --> $DIR/if-then-neeing-semi.rs:41:9\n    |\n LL |       let _ = if true {\n    |  _____________-\n@@ -49,11 +44,6 @@ LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/if-then-neeing-semi.rs:24:25\n-   |\n-LL | async fn async_dummy2() {}\n-   |                         ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected unit type `()`\n             found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n@@ -69,7 +59,7 @@ LL ~         Box::new(async_dummy2())\n    |\n \n error[E0308]: `if` and `else` have incompatible types\n-  --> $DIR/if-then-neeing-semi.rs:63:9\n+  --> $DIR/if-then-neeing-semi.rs:54:9\n    |\n LL |       let _ = if true {\n    |  _____________-\n@@ -85,18 +75,8 @@ LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/if-then-neeing-semi.rs:18:24\n-   |\n-LL | async fn async_dummy() {}\n-   |                        ^ checked the `Output` of this `async fn`, expected opaque type\n-note: while checking the return type of the `async fn`\n-  --> $DIR/if-then-neeing-semi.rs:24:25\n-   |\n-LL | async fn async_dummy2() {}\n-   |                         ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/if-then-neeing-semi.rs:18:24>)\n-              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/if-then-neeing-semi.rs:24:25>)\n+              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/if-then-neeing-semi.rs:20:25>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "4af7cc9f8ec800c7a2b8b6fb50648acecf633df9", "filename": "tests/ui/suggestions/issue-81839.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fsuggestions%2Fissue-81839.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fsuggestions%2Fissue-81839.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-81839.stderr?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -14,11 +14,6 @@ LL | |         _ => cx.answer_str(\"hi\"),\n LL | |     }\n    | |_____- `match` arms have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/auxiliary/issue-81839.rs:6:49\n-   |\n-LL |     pub async fn answer_str(&self, _s: &str) -> Test {\n-   |                                                 ^^^^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected unit type `()`\n             found opaque type `impl Future<Output = Test>`\n "}, {"sha": "3f863cb104e0bfa48d99d5c63e4e49a60fdac892", "filename": "tests/ui/suggestions/match-prev-arm-needing-semi.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -13,18 +13,9 @@ fn extra_semicolon() {\n     };\n }\n \n-async fn async_dummy() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n-//~| NOTE checked the `Output` of this `async fn`, expected opaque type\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n-async fn async_dummy2() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n-//~| NOTE checked the `Output` of this `async fn`, found opaque type\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n+async fn async_dummy() {}\n+\n+async fn async_dummy2() {}\n \n async fn async_extra_semicolon_same() {\n     let _ = match true { //~ NOTE `match` arms have incompatible types"}, {"sha": "df18c7b0b23cceade1b2e6e8d4a47aeb0ff31ac4", "filename": "tests/ui/suggestions/match-prev-arm-needing-semi.stderr", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:35:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:26:18\n    |\n LL |       let _ = match true {\n    |  _____________-\n@@ -15,11 +15,6 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/match-prev-arm-needing-semi.rs:16:24\n-   |\n-LL | async fn async_dummy() {}\n-   |                        ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected unit type `()`\n             found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n@@ -33,7 +28,7 @@ LL +             async_dummy()\n    |\n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:48:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:39:18\n    |\n LL |       let _ = match true {\n    |  _____________-\n@@ -49,11 +44,6 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/match-prev-arm-needing-semi.rs:22:25\n-   |\n-LL | async fn async_dummy2() {}\n-   |                         ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected unit type `()`\n             found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n@@ -69,7 +59,7 @@ LL ~         false => Box::new(async_dummy2()),\n    |\n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:59:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:50:18\n    |\n LL |       let _ = match true {\n    |  _____________-\n@@ -83,18 +73,8 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/match-prev-arm-needing-semi.rs:16:24\n-   |\n-LL | async fn async_dummy() {}\n-   |                        ^ checked the `Output` of this `async fn`, expected opaque type\n-note: while checking the return type of the `async fn`\n-  --> $DIR/match-prev-arm-needing-semi.rs:22:25\n-   |\n-LL | async fn async_dummy2() {}\n-   |                         ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:16:24>)\n-              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:22:25>)\n+              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:18:25>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "bb9dd2365ea0d5de834978e859d5006c4fb3cd4f", "filename": "tests/ui/type-alias-impl-trait/issue-98604.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9985cf172e7cb8ab5c58ce2818752c3572754fc/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr?ref=a9985cf172e7cb8ab5c58ce2818752c3572754fc", "patch": "@@ -4,11 +4,6 @@ error[E0271]: expected `test` to be a fn item that returns `Pin<Box<dyn Future<O\n LL |     Box::new(test) as AsyncFnPtr;\n    |     ^^^^^^^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/issue-98604.rs:5:17\n-   |\n-LL | async fn test() {}\n-   |                 ^ checked the `Output` of this `async fn`, found opaque type\n    = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n            found opaque type `impl Future<Output = ()>`\n    = note: required for the cast from `fn() -> impl Future<Output = ()> {test}` to the object type `dyn Fn() -> Pin<Box<(dyn Future<Output = ()> + 'static)>>`"}]}