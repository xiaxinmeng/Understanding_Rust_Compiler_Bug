{"sha": "06d12f668ebb84b01c3e68a059fed9fa66b24246", "node_id": "C_kwDOAAsO6NoAKDA2ZDEyZjY2OGViYjg0YjAxYzNlNjhhMDU5ZmVkOWZhNjZiMjQyNDY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-17T16:13:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-17T16:13:33Z"}, "message": "Rollup merge of #110257 - lukas-code:why-would-anyone-write-code-like-that-anyway, r=oli-obk\n\nfix false positives for `unused_parens` around unary and binary operations\n\nfix https://github.com/rust-lang/rust/issues/110251", "tree": {"sha": "149ba366951c5e17d6db7a48293e8157605554ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/149ba366951c5e17d6db7a48293e8157605554ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06d12f668ebb84b01c3e68a059fed9fa66b24246", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkPXAtCRBK7hj4Ov3rIwAAw2wIABwm8JETk5hy3E8bdb9gL5yX\nLVHA4q6kyfOGkO/VcEP9LJeBJT8XIi6mD3M7QIOjBKYFIw2B+alu6IouTMXSunVX\nEZd9ztQvQawh5RoZ1RPlzgbKIoey8ECBwg5DCMMGOmDKfgS8k+ZrG4B+JGKfwH3y\nmJ+TLwj9KvNkRxCYvbqkR0qdwYE6dw/+8hZ6kWnt5KderdjXnzGwpM8pcBDIbGQS\n3mheh/DisOxY2TE4X5zQJZCySYBViecxzJGH40j645cqb1aaVmanJHyOE9/GAdMS\nTRBggCbItLH/0MHn+hpC2zKcFKuhSnGYm5oUKwTaNfjfUASSMTo6aMUqCAXKN8Y=\n=Kw0t\n-----END PGP SIGNATURE-----\n", "payload": "tree 149ba366951c5e17d6db7a48293e8157605554ee\nparent 91fe1174185c6914c4d5a746281ad9ef0f72f9cf\nparent 0d0949d87f00d677de679e25dc4ba374b68f8733\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681748013 +0200\ncommitter GitHub <noreply@github.com> 1681748013 +0200\n\nRollup merge of #110257 - lukas-code:why-would-anyone-write-code-like-that-anyway, r=oli-obk\n\nfix false positives for `unused_parens` around unary and binary operations\n\nfix https://github.com/rust-lang/rust/issues/110251\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06d12f668ebb84b01c3e68a059fed9fa66b24246", "html_url": "https://github.com/rust-lang/rust/commit/06d12f668ebb84b01c3e68a059fed9fa66b24246", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06d12f668ebb84b01c3e68a059fed9fa66b24246/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91fe1174185c6914c4d5a746281ad9ef0f72f9cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/91fe1174185c6914c4d5a746281ad9ef0f72f9cf", "html_url": "https://github.com/rust-lang/rust/commit/91fe1174185c6914c4d5a746281ad9ef0f72f9cf"}, {"sha": "0d0949d87f00d677de679e25dc4ba374b68f8733", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0949d87f00d677de679e25dc4ba374b68f8733", "html_url": "https://github.com/rust-lang/rust/commit/0d0949d87f00d677de679e25dc4ba374b68f8733"}], "stats": {"total": 150, "additions": 109, "deletions": 41}, "files": [{"sha": "d677d51881e0e9025c321bee7ed12f024ef70832", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/06d12f668ebb84b01c3e68a059fed9fa66b24246/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d12f668ebb84b01c3e68a059fed9fa66b24246/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=06d12f668ebb84b01c3e68a059fed9fa66b24246", "patch": "@@ -569,36 +569,50 @@ trait UnusedDelimLint {\n             }\n         }\n \n-        // Prevent false-positives in cases like `fn x() -> u8 { ({ 0 } + 1) }`\n-        let lhs_needs_parens = {\n+        // Check if LHS needs parens to prevent false-positives in cases like `fn x() -> u8 { ({ 0 } + 1) }`.\n+        {\n             let mut innermost = inner;\n             loop {\n                 innermost = match &innermost.kind {\n-                    ExprKind::Binary(_, lhs, _rhs) => lhs,\n+                    ExprKind::Binary(_op, lhs, _rhs) => lhs,\n                     ExprKind::Call(fn_, _params) => fn_,\n                     ExprKind::Cast(expr, _ty) => expr,\n                     ExprKind::Type(expr, _ty) => expr,\n                     ExprKind::Index(base, _subscript) => base,\n-                    _ => break false,\n+                    _ => break,\n                 };\n                 if !classify::expr_requires_semi_to_be_stmt(innermost) {\n-                    break true;\n+                    return true;\n                 }\n             }\n-        };\n+        }\n \n-        lhs_needs_parens\n-            || (followed_by_block\n-                && match &inner.kind {\n-                    ExprKind::Ret(_)\n-                    | ExprKind::Break(..)\n-                    | ExprKind::Yield(..)\n-                    | ExprKind::Yeet(..) => true,\n-                    ExprKind::Range(_lhs, Some(rhs), _limits) => {\n-                        matches!(rhs.kind, ExprKind::Block(..))\n-                    }\n-                    _ => parser::contains_exterior_struct_lit(&inner),\n-                })\n+        // Check if RHS needs parens to prevent false-positives in cases like `if (() == return) {}`.\n+        if !followed_by_block {\n+            return false;\n+        }\n+        let mut innermost = inner;\n+        loop {\n+            innermost = match &innermost.kind {\n+                ExprKind::Unary(_op, expr) => expr,\n+                ExprKind::Binary(_op, _lhs, rhs) => rhs,\n+                ExprKind::AssignOp(_op, _lhs, rhs) => rhs,\n+                ExprKind::Assign(_lhs, rhs, _span) => rhs,\n+\n+                ExprKind::Ret(_) | ExprKind::Yield(..) | ExprKind::Yeet(..) => return true,\n+\n+                ExprKind::Break(_label, None) => return false,\n+                ExprKind::Break(_label, Some(break_expr)) => {\n+                    return matches!(break_expr.kind, ExprKind::Block(..));\n+                }\n+\n+                ExprKind::Range(_lhs, Some(rhs), _limits) => {\n+                    return matches!(rhs.kind, ExprKind::Block(..));\n+                }\n+\n+                _ => return parser::contains_exterior_struct_lit(&inner),\n+            }\n+        }\n     }\n \n     fn emit_unused_delims_expr("}, {"sha": "9c52ca5577e4a705883cfd194b7f09d4472f91fb", "filename": "tests/ui/lint/unused/issue-54538-unused-parens-lint.fixed", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/06d12f668ebb84b01c3e68a059fed9fa66b24246/tests%2Fui%2Flint%2Funused%2Fissue-54538-unused-parens-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/06d12f668ebb84b01c3e68a059fed9fa66b24246/tests%2Fui%2Flint%2Funused%2Fissue-54538-unused-parens-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-54538-unused-parens-lint.fixed?ref=06d12f668ebb84b01c3e68a059fed9fa66b24246", "patch": "@@ -21,17 +21,32 @@ fn lint_on_top_level() {\n     let _ = |a: u8| 0; //~ ERROR unnecessary parentheses around pattern\n }\n \n-fn _no_lint_attr() {\n+fn no_lint_attr() {\n     let _x = #[allow(dead_code)] (1 + 2);\n }\n \n-fn _no_lint_yeet() -> Result<(), ()> {\n+fn no_lint_yeet() -> Result<(), ()> {\n     #[allow(unreachable_code)]\n     if (do yeet) {}\n \n     Ok(())\n }\n \n+fn no_lint_ops() {\n+    #![allow(unreachable_code, irrefutable_let_patterns)]\n+    if ((..{}) == ..{}) {}\n+    if (!return) {}\n+    loop { match (() = () = () = break {}) {} }\n+    while let () = (*&mut false |= true && return) {}\n+}\n+\n+fn lint_break_if_not_followed_by_block() {\n+    #![allow(unreachable_code)]\n+    loop { if break {} } //~ ERROR unnecessary parentheses\n+    loop { if break ({ println!(\"hello\") }) {} } //~ ERROR unnecessary parentheses\n+    loop { if (break { println!(\"hello\") }) {} }\n+}\n+\n // Don't lint in these cases (#64106).\n fn or_patterns_no_lint() {\n     match Box::new(0) {"}, {"sha": "196ecf0c1bb8512f5450b58ab97328459bbe1f2c", "filename": "tests/ui/lint/unused/issue-54538-unused-parens-lint.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/06d12f668ebb84b01c3e68a059fed9fa66b24246/tests%2Fui%2Flint%2Funused%2Fissue-54538-unused-parens-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d12f668ebb84b01c3e68a059fed9fa66b24246/tests%2Fui%2Flint%2Funused%2Fissue-54538-unused-parens-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-54538-unused-parens-lint.rs?ref=06d12f668ebb84b01c3e68a059fed9fa66b24246", "patch": "@@ -21,17 +21,32 @@ fn lint_on_top_level() {\n     let _ = |(a): u8| 0; //~ ERROR unnecessary parentheses around pattern\n }\n \n-fn _no_lint_attr() {\n+fn no_lint_attr() {\n     let _x = #[allow(dead_code)] (1 + 2);\n }\n \n-fn _no_lint_yeet() -> Result<(), ()> {\n+fn no_lint_yeet() -> Result<(), ()> {\n     #[allow(unreachable_code)]\n     if (do yeet) {}\n \n     Ok(())\n }\n \n+fn no_lint_ops() {\n+    #![allow(unreachable_code, irrefutable_let_patterns)]\n+    if ((..{}) == ..{}) {}\n+    if (!return) {}\n+    loop { match (() = () = () = break {}) {} }\n+    while let () = (*&mut false |= true && return) {}\n+}\n+\n+fn lint_break_if_not_followed_by_block() {\n+    #![allow(unreachable_code)]\n+    loop { if (break) {} } //~ ERROR unnecessary parentheses\n+    loop { if (break ({ println!(\"hello\") })) {} } //~ ERROR unnecessary parentheses\n+    loop { if (break { println!(\"hello\") }) {} }\n+}\n+\n // Don't lint in these cases (#64106).\n fn or_patterns_no_lint() {\n     match Box::new(0) {"}, {"sha": "f916bba8194ff30b7124a815b739ee739aa30726", "filename": "tests/ui/lint/unused/issue-54538-unused-parens-lint.stderr", "status": "modified", "additions": 43, "deletions": 19, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/06d12f668ebb84b01c3e68a059fed9fa66b24246/tests%2Fui%2Flint%2Funused%2Fissue-54538-unused-parens-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06d12f668ebb84b01c3e68a059fed9fa66b24246/tests%2Fui%2Flint%2Funused%2Fissue-54538-unused-parens-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-54538-unused-parens-lint.stderr?ref=06d12f668ebb84b01c3e68a059fed9fa66b24246", "patch": "@@ -75,8 +75,32 @@ LL -     let _ = |(a): u8| 0;\n LL +     let _ = |a: u8| 0;\n    |\n \n+error: unnecessary parentheses around `if` condition\n+  --> $DIR/issue-54538-unused-parens-lint.rs:45:15\n+   |\n+LL |     loop { if (break) {} }\n+   |               ^     ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     loop { if (break) {} }\n+LL +     loop { if break {} }\n+   |\n+\n+error: unnecessary parentheses around `if` condition\n+  --> $DIR/issue-54538-unused-parens-lint.rs:46:15\n+   |\n+LL |     loop { if (break ({ println!(\"hello\") })) {} }\n+   |               ^                             ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     loop { if (break ({ println!(\"hello\") })) {} }\n+LL +     loop { if break ({ println!(\"hello\") }) {} }\n+   |\n+\n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:56:12\n+  --> $DIR/issue-54538-unused-parens-lint.rs:71:12\n    |\n LL |     if let (0 | 1) = 0 {}\n    |            ^     ^\n@@ -88,7 +112,7 @@ LL +     if let 0 | 1 = 0 {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:57:13\n+  --> $DIR/issue-54538-unused-parens-lint.rs:72:13\n    |\n LL |     if let ((0 | 1),) = (0,) {}\n    |             ^     ^\n@@ -100,7 +124,7 @@ LL +     if let (0 | 1,) = (0,) {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:58:13\n+  --> $DIR/issue-54538-unused-parens-lint.rs:73:13\n    |\n LL |     if let [(0 | 1)] = [0] {}\n    |             ^     ^\n@@ -112,7 +136,7 @@ LL +     if let [0 | 1] = [0] {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:59:16\n+  --> $DIR/issue-54538-unused-parens-lint.rs:74:16\n    |\n LL |     if let 0 | (1 | 2) = 0 {}\n    |                ^     ^\n@@ -124,7 +148,7 @@ LL +     if let 0 | 1 | 2 = 0 {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:61:15\n+  --> $DIR/issue-54538-unused-parens-lint.rs:76:15\n    |\n LL |     if let TS((0 | 1)) = TS(0) {}\n    |               ^     ^\n@@ -136,7 +160,7 @@ LL +     if let TS(0 | 1) = TS(0) {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:63:20\n+  --> $DIR/issue-54538-unused-parens-lint.rs:78:20\n    |\n LL |     if let NS { f: (0 | 1) } = (NS { f: 0 }) {}\n    |                    ^     ^\n@@ -148,7 +172,7 @@ LL +     if let NS { f: 0 | 1 } = (NS { f: 0 }) {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:73:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:88:9\n    |\n LL |         (_) => {}\n    |         ^ ^\n@@ -160,7 +184,7 @@ LL +         _ => {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:74:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:89:9\n    |\n LL |         (y) => {}\n    |         ^ ^\n@@ -172,7 +196,7 @@ LL +         y => {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:75:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:90:9\n    |\n LL |         (ref r) => {}\n    |         ^     ^\n@@ -184,7 +208,7 @@ LL +         ref r => {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:76:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:91:9\n    |\n LL |         (e @ 1...2) => {}\n    |         ^         ^\n@@ -196,7 +220,7 @@ LL +         e @ 1...2 => {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:82:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:97:9\n    |\n LL |         (e @ &(1...2)) => {}\n    |         ^            ^\n@@ -208,7 +232,7 @@ LL +         e @ &(1...2) => {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:83:10\n+  --> $DIR/issue-54538-unused-parens-lint.rs:98:10\n    |\n LL |         &(_) => {}\n    |          ^ ^\n@@ -220,7 +244,7 @@ LL +         &_ => {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:94:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:109:9\n    |\n LL |         (_) => {}\n    |         ^ ^\n@@ -232,7 +256,7 @@ LL +         _ => {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:95:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:110:9\n    |\n LL |         (y) => {}\n    |         ^ ^\n@@ -244,7 +268,7 @@ LL +         y => {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:96:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:111:9\n    |\n LL |         (ref r) => {}\n    |         ^     ^\n@@ -256,7 +280,7 @@ LL +         ref r => {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:97:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:112:9\n    |\n LL |         (e @ 1..=2) => {}\n    |         ^         ^\n@@ -268,7 +292,7 @@ LL +         e @ 1..=2 => {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:103:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:118:9\n    |\n LL |         (e @ &(1..=2)) => {}\n    |         ^            ^\n@@ -280,7 +304,7 @@ LL +         e @ &(1..=2) => {}\n    |\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:104:10\n+  --> $DIR/issue-54538-unused-parens-lint.rs:119:10\n    |\n LL |         &(_) => {}\n    |          ^ ^\n@@ -291,5 +315,5 @@ LL -         &(_) => {}\n LL +         &_ => {}\n    |\n \n-error: aborting due to 24 previous errors\n+error: aborting due to 26 previous errors\n "}]}