{"sha": "1de6a9682f16a893cd5651db28e26a1cd92fd459", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZTZhOTY4MmYxNmE4OTNjZDU2NTFkYjI4ZTI2YTFjZDkyZmQ0NTk=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-08T12:15:23Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T19:51:53Z"}, "message": "mir: Don't use ConstVal kinds that contain local NodeId's.", "tree": {"sha": "bbbc103ad769bdf1bcaea0383a5eab240430a994", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbbc103ad769bdf1bcaea0383a5eab240430a994"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1de6a9682f16a893cd5651db28e26a1cd92fd459", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1de6a9682f16a893cd5651db28e26a1cd92fd459", "html_url": "https://github.com/rust-lang/rust/commit/1de6a9682f16a893cd5651db28e26a1cd92fd459", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1de6a9682f16a893cd5651db28e26a1cd92fd459/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b38627dafb534fc6773d3f4061d639a2c7b86f9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b38627dafb534fc6773d3f4061d639a2c7b86f9f", "html_url": "https://github.com/rust-lang/rust/commit/b38627dafb534fc6773d3f4061d639a2c7b86f9f"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "d29d895e11df3d9942877ed42c914791e2c84a11", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1de6a9682f16a893cd5651db28e26a1cd92fd459/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1de6a9682f16a893cd5651db28e26a1cd92fd459/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=1de6a9682f16a893cd5651db28e26a1cd92fd459", "patch": "@@ -84,9 +84,16 @@ impl<'a,'tcx:'a> Cx<'a, 'tcx> {\n \n     pub fn try_const_eval_literal(&mut self, e: &hir::Expr) -> Option<Literal<'tcx>> {\n         let hint = const_eval::EvalHint::ExprTypeChecked;\n-        const_eval::eval_const_expr_partial(self.tcx, e, hint, None)\n-            .ok()\n-            .map(|v| Literal::Value { value: v })\n+        const_eval::eval_const_expr_partial(self.tcx, e, hint, None).ok().and_then(|v| {\n+            match v {\n+                // All of these contain local IDs, unsuitable for storing in MIR.\n+                ConstVal::Struct(_) | ConstVal::Tuple(_) |\n+                ConstVal::Array(..) | ConstVal::Repeat(..) |\n+                ConstVal::Function(_) => None,\n+\n+                _ => Some(Literal::Value { value: v })\n+            }\n+        })\n     }\n \n     pub fn num_variants(&mut self, adt_def: ty::AdtDef<'tcx>) -> usize {"}, {"sha": "ba737bae4459c9a3831e52f2004ebb06997f1547", "filename": "src/librustc_trans/trans/mir/constant.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1de6a9682f16a893cd5651db28e26a1cd92fd459/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1de6a9682f16a893cd5651db28e26a1cd92fd459/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs?ref=1de6a9682f16a893cd5651db28e26a1cd92fd459", "patch": "@@ -15,7 +15,7 @@ use rustc_const_eval::ConstInt::*;\n use rustc::mir::repr as mir;\n use trans::abi;\n use trans::common::{self, BlockAndBuilder, C_bool, C_bytes, C_floating_f64, C_integral,\n-                    C_str_slice, C_nil, C_undef};\n+                    C_str_slice, C_undef};\n use trans::consts;\n use trans::expr;\n use trans::inline;\n@@ -85,16 +85,13 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n             ConstVal::Integral(InferSigned(v)) => C_integral(llty, v as u64, true),\n             ConstVal::Str(ref v) => C_str_slice(ccx, v.clone()),\n             ConstVal::ByteStr(ref v) => consts::addr_of(ccx, C_bytes(ccx, v), 1, \"byte_str\"),\n-            ConstVal::Struct(id) | ConstVal::Tuple(id) |\n-            ConstVal::Array(id, _) | ConstVal::Repeat(id, _) => {\n-                let expr = bcx.tcx().map.expect_expr(id);\n-                bcx.with_block(|bcx| {\n-                    expr::trans(bcx, expr).datum.val\n-                })\n-            },\n+            ConstVal::Struct(_) | ConstVal::Tuple(_) |\n+            ConstVal::Array(..) | ConstVal::Repeat(..) |\n+            ConstVal::Function(_) => {\n+                unreachable!(\"MIR must not use {:?} (which refers to a local ID)\", cv)\n+            }\n             ConstVal::Char(c) => C_integral(Type::char(ccx), c as u64, false),\n             ConstVal::Dummy => unreachable!(),\n-            ConstVal::Function(_) => C_nil(ccx)\n         }\n     }\n "}]}