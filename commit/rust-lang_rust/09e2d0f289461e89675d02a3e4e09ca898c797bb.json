{"sha": "09e2d0f289461e89675d02a3e4e09ca898c797bb", "node_id": "C_kwDOAAsO6NoAKDA5ZTJkMGYyODk0NjFlODk2NzVkMDJhM2U0ZTA5Y2E4OThjNzk3YmI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-02T20:22:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-02T20:22:50Z"}, "message": "Rollup merge of #105163 - compiler-errors:afit-lt-arity, r=jackh726\n\nCheck lifetime param count in `collect_trait_impl_trait_tys`\n\nWe checked the type and const generics count, but not the lifetimes, which were handled in a different function.\n\nFixes #105154", "tree": {"sha": "fe1fd431a83608b9279372139998166024c5645e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe1fd431a83608b9279372139998166024c5645e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09e2d0f289461e89675d02a3e4e09ca898c797bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjil6aCRBK7hj4Ov3rIwAAlUsIAJLbFVlUvh9As3ELY7zegbIV\ntfnHibPIFJbkppwHaFCJS2ekDk2cQora87ahpkDisaGNxVAbJRga9CYaijYdDgC2\no9ITqMU/vpfMqWkVT5sAYkmvE59O/jfdlbi1VvzlCj3MzD30HSKkhk2mrM1/JuHh\n5GxT+QNxggEhW/C1XqLda883g5xBzxSOfemUxJtejhqzNj0lQoiGPa2cUQd16HRQ\ndORKJz0pefnp4MQOxITf5X9MikS9rxbpmS+hulXyW1HxL5IAa4YojcbJo0wdUnjP\nIBTO1r6+FtBATVTdkNgZ7PaajH2Jz8f0HcL2h7PBm4nuF49CCgxwRAfDN5esosE=\n=D9Ma\n-----END PGP SIGNATURE-----\n", "payload": "tree fe1fd431a83608b9279372139998166024c5645e\nparent babdf86952d7670512f71d42ee6b9b2d65e05c35\nparent bd7ee07d028b47258ba20f496b6a974bd5334355\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670012570 +0100\ncommitter GitHub <noreply@github.com> 1670012570 +0100\n\nRollup merge of #105163 - compiler-errors:afit-lt-arity, r=jackh726\n\nCheck lifetime param count in `collect_trait_impl_trait_tys`\n\nWe checked the type and const generics count, but not the lifetimes, which were handled in a different function.\n\nFixes #105154\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09e2d0f289461e89675d02a3e4e09ca898c797bb", "html_url": "https://github.com/rust-lang/rust/commit/09e2d0f289461e89675d02a3e4e09ca898c797bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09e2d0f289461e89675d02a3e4e09ca898c797bb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "babdf86952d7670512f71d42ee6b9b2d65e05c35", "url": "https://api.github.com/repos/rust-lang/rust/commits/babdf86952d7670512f71d42ee6b9b2d65e05c35", "html_url": "https://github.com/rust-lang/rust/commit/babdf86952d7670512f71d42ee6b9b2d65e05c35"}, {"sha": "bd7ee07d028b47258ba20f496b6a974bd5334355", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7ee07d028b47258ba20f496b6a974bd5334355", "html_url": "https://github.com/rust-lang/rust/commit/bd7ee07d028b47258ba20f496b6a974bd5334355"}], "stats": {"total": 80, "additions": 59, "deletions": 21}, "files": [{"sha": "82a77416a190c44c60c0ffa92c3768233509b8e9", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/09e2d0f289461e89675d02a3e4e09ca898c797bb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e2d0f289461e89675d02a3e4e09ca898c797bb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=09e2d0f289461e89675d02a3e4e09ca898c797bb", "patch": "@@ -173,13 +173,11 @@ fn compare_predicate_entailment<'tcx>(\n         impl_to_placeholder_substs.rebase_onto(tcx, impl_m.container_id(tcx), trait_to_impl_substs);\n     debug!(\"compare_impl_method: trait_to_placeholder_substs={:?}\", trait_to_placeholder_substs);\n \n-    let impl_m_generics = tcx.generics_of(impl_m.def_id);\n-    let trait_m_generics = tcx.generics_of(trait_m.def_id);\n     let impl_m_predicates = tcx.predicates_of(impl_m.def_id);\n     let trait_m_predicates = tcx.predicates_of(trait_m.def_id);\n \n     // Check region bounds.\n-    check_region_bounds_on_impl_item(tcx, impl_m, trait_m, &trait_m_generics, &impl_m_generics)?;\n+    check_region_bounds_on_impl_item(tcx, impl_m, trait_m, false)?;\n \n     // Create obligations for each predicate declared by the impl\n     // definition in the context of the trait's parameter\n@@ -338,6 +336,7 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     // First, check a few of the same thing as `compare_impl_method`, just so we don't ICE during substitutions later.\n     compare_number_of_generics(tcx, impl_m, trait_m, tcx.hir().span_if_local(impl_m.def_id), true)?;\n     compare_generic_param_kinds(tcx, impl_m, trait_m, true)?;\n+    check_region_bounds_on_impl_item(tcx, impl_m, trait_m, true)?;\n \n     let trait_to_impl_substs = impl_trait_ref.substs;\n \n@@ -722,12 +721,14 @@ fn check_region_bounds_on_impl_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_m: &ty::AssocItem,\n     trait_m: &ty::AssocItem,\n-    trait_generics: &ty::Generics,\n-    impl_generics: &ty::Generics,\n+    delay: bool,\n ) -> Result<(), ErrorGuaranteed> {\n-    let trait_params = trait_generics.own_counts().lifetimes;\n+    let impl_generics = tcx.generics_of(impl_m.def_id);\n     let impl_params = impl_generics.own_counts().lifetimes;\n \n+    let trait_generics = tcx.generics_of(trait_m.def_id);\n+    let trait_params = trait_generics.own_counts().lifetimes;\n+\n     debug!(\n         \"check_region_bounds_on_impl_item: \\\n             trait_generics={:?} \\\n@@ -761,12 +762,16 @@ fn check_region_bounds_on_impl_item<'tcx>(\n             None\n         };\n \n-        let reported = tcx.sess.emit_err(LifetimesOrBoundsMismatchOnTrait {\n-            span,\n-            item_kind: assoc_item_kind_str(impl_m),\n-            ident: impl_m.ident(tcx),\n-            generics_span,\n-        });\n+        let reported = tcx\n+            .sess\n+            .create_err(LifetimesOrBoundsMismatchOnTrait {\n+                span,\n+                item_kind: assoc_item_kind_str(impl_m),\n+                ident: impl_m.ident(tcx),\n+                generics_span,\n+            })\n+            .emit_unless(delay);\n+\n         return Err(reported);\n     }\n \n@@ -1504,18 +1509,10 @@ fn compare_type_predicate_entailment<'tcx>(\n     let trait_to_impl_substs =\n         impl_substs.rebase_onto(tcx, impl_ty.container_id(tcx), impl_trait_ref.substs);\n \n-    let impl_ty_generics = tcx.generics_of(impl_ty.def_id);\n-    let trait_ty_generics = tcx.generics_of(trait_ty.def_id);\n     let impl_ty_predicates = tcx.predicates_of(impl_ty.def_id);\n     let trait_ty_predicates = tcx.predicates_of(trait_ty.def_id);\n \n-    check_region_bounds_on_impl_item(\n-        tcx,\n-        impl_ty,\n-        trait_ty,\n-        &trait_ty_generics,\n-        &impl_ty_generics,\n-    )?;\n+    check_region_bounds_on_impl_item(tcx, impl_ty, trait_ty, false)?;\n \n     let impl_ty_own_bounds = impl_ty_predicates.instantiate_own(tcx, impl_substs);\n "}, {"sha": "45ede193c0fc633bd3b8a4b56b359d664e81d244", "filename": "src/test/ui/async-await/in-trait/lifetime-mismatch.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/09e2d0f289461e89675d02a3e4e09ca898c797bb/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e2d0f289461e89675d02a3e4e09ca898c797bb/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs?ref=09e2d0f289461e89675d02a3e4e09ca898c797bb", "patch": "@@ -0,0 +1,20 @@\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+trait MyTrait {\n+    async fn foo<'a>(&self);\n+    async fn bar(&self);\n+}\n+\n+impl MyTrait for i32 {\n+    async fn foo(&self) {}\n+    //~^ ERROR lifetime parameters or bounds on method `foo` do not match the trait declaration\n+\n+    async fn bar(&self) {\n+        self.foo();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d87adcc78b6c8bb9fbb282eb57ae3a894e6c87db", "filename": "src/test/ui/async-await/in-trait/lifetime-mismatch.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/09e2d0f289461e89675d02a3e4e09ca898c797bb/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09e2d0f289461e89675d02a3e4e09ca898c797bb/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.stderr?ref=09e2d0f289461e89675d02a3e4e09ca898c797bb", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/lifetime-mismatch.rs:3:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0195]: lifetime parameters or bounds on method `foo` do not match the trait declaration\n+  --> $DIR/lifetime-mismatch.rs:12:17\n+   |\n+LL |     async fn foo<'a>(&self);\n+   |                 ---- lifetimes in impl do not match this method in trait\n+...\n+LL |     async fn foo(&self) {}\n+   |                 ^ lifetimes do not match method in trait\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0195`."}]}