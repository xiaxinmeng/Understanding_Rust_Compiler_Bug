{"sha": "b0f01727fe6b9c4dde10a7e6d62c0295dd5cadd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZjAxNzI3ZmU2YjljNGRkZTEwYTdlNmQ2MmMwMjk1ZGQ1Y2FkZDQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-07T20:48:01Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-07T20:48:35Z"}, "message": "Annotate FIXMEs in resolve\n\nAnd fix one FIXME (use fk_ctor to visit a constructor)", "tree": {"sha": "8d298c21b588c1094fcadae65232e1857ce788b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d298c21b588c1094fcadae65232e1857ce788b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0f01727fe6b9c4dde10a7e6d62c0295dd5cadd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f01727fe6b9c4dde10a7e6d62c0295dd5cadd4", "html_url": "https://github.com/rust-lang/rust/commit/b0f01727fe6b9c4dde10a7e6d62c0295dd5cadd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0f01727fe6b9c4dde10a7e6d62c0295dd5cadd4/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0a22fdd0d2e0fe4a3cb54d1a14b4ca23a4e8a0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0a22fdd0d2e0fe4a3cb54d1a14b4ca23a4e8a0e", "html_url": "https://github.com/rust-lang/rust/commit/e0a22fdd0d2e0fe4a3cb54d1a14b4ca23a4e8a0e"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "d8a47a5e3a080bc36677b9a7288868b403e0441f", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0f01727fe6b9c4dde10a7e6d62c0295dd5cadd4/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f01727fe6b9c4dde10a7e6d62c0295dd5cadd4/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=b0f01727fe6b9c4dde10a7e6d62c0295dd5cadd4", "patch": "@@ -157,7 +157,7 @@ fn resolve_crate(sess: session, amap: ast_map::map, crate: @ast::crate) ->\n     // don't complain if a pattern uses the same nullary enum twice\n     check_for_collisions(e, *crate);\n \n-    // FIXME: move this to the lint pass when rewriting resolve.\n+    // FIXME: move this to the lint pass when rewriting resolve. (#1634)\n     for sess.opts.lint_opts.each {|pair|\n         let (lint,level) = pair;\n         if lint == lint::unused_imports && level != lint::ignore {\n@@ -217,7 +217,7 @@ fn iter_effective_import_paths(vi: ast::view_item,\n           ast::view_path_simple(_, _, _) { }\n           // FIXME: support uniform ident-list exports eventually;\n           // at the moment they have half a meaning as reaching into\n-          // tags.\n+          // tags. (but also see #1893)\n           ast::view_path_list(_, _, _) {}\n           ast::view_path_glob(_,_) {\n             f(vp);\n@@ -580,8 +580,8 @@ fn visit_item_with_scope(e: @env, i: @ast::item,\n         for ifaces.each {|p|\n             visit::visit_path(p.path, class_scope, v);\n         }\n-        // FIXME: should be fk_ctor?\n-        visit_fn_with_scope(e, visit::fk_item_fn(i.ident, tps), ctor.node.dec,\n+        visit_fn_with_scope(e, visit::fk_ctor(i.ident, tps, ctor.node.self_id,\n+                                             local_def(i.id)), ctor.node.dec,\n                             ctor.node.body, ctor.span, ctor.node.id,\n                             ctor_scope, v);\n         option::iter(m_dtor) {|dtor|\n@@ -1065,8 +1065,6 @@ fn lookup_in_scope(e: env, &&sc: scopes, sp: span, name: ident, ns: namespace,\n                       ret some(ast::def_fn(local_def(ctor.node.id),\n                                            ast::impure_fn));\n                   }\n-                  // FIXME: AST allows other items to appear in a class,\n-                  // but that might not be wise\n               }\n               _ { }\n             }\n@@ -1940,7 +1938,7 @@ fn check_exports(e: @env) {\n         let defid = def_id_of_def(m);\n \n         if defid.crate != ast::local_crate {\n-            // FIXME: ought to support external export-globs eventually.\n+            // FIXME: ought to support external export-globs eventually. #2527\n             e.sess.span_unimpl(sp, \"glob-export of items in external crate\");\n         } else {\n "}]}