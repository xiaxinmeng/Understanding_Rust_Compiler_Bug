{"sha": "5b098109765f4198bdff016a856610f3425a2167", "node_id": "C_kwDOAAsO6NoAKDViMDk4MTA5NzY1ZjQxOThiZGZmMDE2YTg1NjYxMGYzNDI1YTIxNjc", "commit": {"author": {"name": "bohan", "email": "bohan-zhang@foxmail.com", "date": "2023-04-18T14:46:51Z"}, "committer": {"name": "bohan", "email": "bohan-zhang@foxmail.com", "date": "2023-05-18T01:29:48Z"}, "message": "fix(resolve): only disambiguate binding key during define", "tree": {"sha": "8cad928ea23d002f291e14a25eaa992717014519", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cad928ea23d002f291e14a25eaa992717014519"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b098109765f4198bdff016a856610f3425a2167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b098109765f4198bdff016a856610f3425a2167", "html_url": "https://github.com/rust-lang/rust/commit/5b098109765f4198bdff016a856610f3425a2167", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b098109765f4198bdff016a856610f3425a2167/comments", "author": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24c180c438b5ee9a150d20b9822bd7712bef8f62", "url": "https://api.github.com/repos/rust-lang/rust/commits/24c180c438b5ee9a150d20b9822bd7712bef8f62", "html_url": "https://github.com/rust-lang/rust/commit/24c180c438b5ee9a150d20b9822bd7712bef8f62"}], "stats": {"total": 130, "additions": 114, "deletions": 16}, "files": [{"sha": "08b73ebb69470e6535a2dcd7eeef5a8c6eeeec51", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b098109765f4198bdff016a856610f3425a2167/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b098109765f4198bdff016a856610f3425a2167/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=5b098109765f4198bdff016a856610f3425a2167", "patch": "@@ -9,12 +9,9 @@ use crate::def_collector::collect_definitions;\n use crate::imports::{Import, ImportKind};\n use crate::macros::{MacroRulesBinding, MacroRulesScope, MacroRulesScopeRef};\n use crate::Namespace::{self, MacroNS, TypeNS, ValueNS};\n-use crate::{\n-    errors, Determinacy, ExternPreludeEntry, Finalize, Module, ModuleKind, ModuleOrUniformRoot,\n-};\n-use crate::{\n-    MacroData, NameBinding, NameBindingKind, ParentScope, PathResult, PerNS, ResolutionError,\n-};\n+use crate::{errors, BindingKey, MacroData};\n+use crate::{Determinacy, ExternPreludeEntry, Finalize, Module, ModuleKind, ModuleOrUniformRoot};\n+use crate::{NameBinding, NameBindingKind, ParentScope, PathResult, PerNS, ResolutionError};\n use crate::{Resolver, ResolverArenas, Segment, ToNameBinding, VisResolutionError};\n \n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n@@ -72,7 +69,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         T: ToNameBinding<'a>,\n     {\n         let binding = def.to_name_binding(self.arenas);\n-        let key = self.new_key(ident, ns);\n+        let key = self.new_disambiguated_key(ident, ns);\n         if let Err(old_binding) = self.try_define(parent, key, binding) {\n             self.report_conflict(parent, ident, ns, old_binding, &binding);\n         }\n@@ -379,7 +376,7 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n             ImportKind::Single { target, type_ns_only, .. } => {\n                 self.r.per_ns(|this, ns| {\n                     if !type_ns_only || ns == TypeNS {\n-                        let key = this.new_key(target, ns);\n+                        let key = BindingKey::new(target, ns);\n                         let mut resolution = this.resolution(current_module, key).borrow_mut();\n                         resolution.add_single_import(import);\n                     }"}, {"sha": "3ed7580af051cdf33ebdfbe1ea534aabd2cf6d24", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b098109765f4198bdff016a856610f3425a2167/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b098109765f4198bdff016a856610f3425a2167/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=5b098109765f4198bdff016a856610f3425a2167", "patch": "@@ -28,10 +28,10 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Span, SyntaxContext};\n use thin_vec::ThinVec;\n \n-use crate::errors as errs;\n use crate::imports::{Import, ImportKind};\n use crate::late::{PatternSource, Rib};\n use crate::path_names_to_string;\n+use crate::{errors as errs, BindingKey};\n use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, BindingError, Finalize};\n use crate::{HasGenericParams, MacroRulesScope, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{LexicalScopeBinding, NameBinding, NameBindingKind, PrivacyError, VisResolutionError};\n@@ -2081,7 +2081,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n \n         let resolutions = self.resolutions(crate_module).borrow();\n-        let resolution = resolutions.get(&self.new_key(ident, MacroNS))?;\n+        let binding_key = BindingKey::new(ident, MacroNS);\n+        let resolution = resolutions.get(&binding_key)?;\n         let binding = resolution.borrow().binding()?;\n         if let Res::Def(DefKind::Macro(MacroKind::Bang), _) = binding.res() {\n             let module_name = crate_module.kind.name().unwrap();"}, {"sha": "945c7ce3a9b3276e73888f2f694acbedb4c09c14", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b098109765f4198bdff016a856610f3425a2167/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b098109765f4198bdff016a856610f3425a2167/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=5b098109765f4198bdff016a856610f3425a2167", "patch": "@@ -18,6 +18,7 @@ use crate::late::{\n     ConstantHasGenerics, HasGenericParams, NoConstantGenericsReason, PathSource, Rib, RibKind,\n };\n use crate::macros::{sub_namespace_match, MacroRulesScope};\n+use crate::BindingKey;\n use crate::{errors, AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy, Finalize};\n use crate::{Import, ImportKind, LexicalScopeBinding, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{NameBinding, NameBindingKind, ParentScope, PathResult, PrivacyError, Res};\n@@ -865,7 +866,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n         };\n \n-        let key = self.new_key(ident, ns);\n+        let key = BindingKey::new(ident, ns);\n         let resolution =\n             self.resolution(module, key).try_borrow_mut().map_err(|_| (Determined, Weak::No))?; // This happens when there is a cycle of imports.\n "}, {"sha": "0e90703faec003e4e020d563e1128a591076a7e0", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b098109765f4198bdff016a856610f3425a2167/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b098109765f4198bdff016a856610f3425a2167/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=5b098109765f4198bdff016a856610f3425a2167", "patch": "@@ -415,7 +415,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             let dummy_binding = self.dummy_binding;\n             let dummy_binding = self.import(dummy_binding, import);\n             self.per_ns(|this, ns| {\n-                let key = this.new_key(target, ns);\n+                let key = BindingKey::new(target, ns);\n                 let _ = this.try_define(import.parent_scope.module, key, dummy_binding);\n             });\n             self.record_use(target, dummy_binding, false);\n@@ -712,7 +712,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 .span_label(import.span, \"cannot be imported directly\")\n                                 .emit();\n                         }\n-                        let key = this.new_key(target, ns);\n+                        let key = BindingKey::new(target, ns);\n                         this.update_resolution(parent, key, |_, resolution| {\n                             resolution.single_imports.remove(&Interned::new_unchecked(import));\n                         });"}, {"sha": "a1077615d9593f8034e181cc3da30cd952e28289", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b098109765f4198bdff016a856610f3425a2167/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b098109765f4198bdff016a856610f3425a2167/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=5b098109765f4198bdff016a856610f3425a2167", "patch": "@@ -6,6 +6,7 @@\n //! If you wonder why there's no `early.rs`, that's because it's split into three files -\n //! `build_reduced_graph.rs`, `macros.rs` and `imports.rs`.\n \n+use crate::BindingKey;\n use crate::{path_names_to_string, rustdoc, BindingError, Finalize, LexicalScopeBinding};\n use crate::{Module, ModuleOrUniformRoot, NameBinding, ParentScope, PathResult};\n use crate::{ResolutionError, Resolver, Segment, UseError};\n@@ -2967,7 +2968,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         // If there is a TraitRef in scope for an impl, then the method must be in the trait.\n         let Some((module, _)) = &self.current_trait_ref else { return; };\n         ident.span.normalize_to_macros_2_0_and_adjust(module.expansion);\n-        let key = self.r.new_key(ident, ns);\n+        let key = BindingKey::new(ident, ns);\n         let mut binding = self.r.resolution(module, key).try_borrow().ok().and_then(|r| r.binding);\n         debug!(?binding);\n         if binding.is_none() {\n@@ -2978,7 +2979,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 TypeNS => ValueNS,\n                 _ => ns,\n             };\n-            let key = self.r.new_key(ident, ns);\n+            let key = BindingKey::new(ident, ns);\n             binding = self.r.resolution(module, key).try_borrow().ok().and_then(|r| r.binding);\n             debug!(?binding);\n         }"}, {"sha": "14a3671c01d0b55b591e6d1328f2beb7227bdca6", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b098109765f4198bdff016a856610f3425a2167/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b098109765f4198bdff016a856610f3425a2167/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=5b098109765f4198bdff016a856610f3425a2167", "patch": "@@ -469,6 +469,13 @@ struct BindingKey {\n     disambiguator: u32,\n }\n \n+impl BindingKey {\n+    fn new(ident: Ident, ns: Namespace) -> Self {\n+        let ident = ident.normalize_to_macros_2_0();\n+        BindingKey { ident, ns, disambiguator: 0 }\n+    }\n+}\n+\n type Resolutions<'a> = RefCell<FxIndexMap<BindingKey, &'a RefCell<NameResolution<'a>>>>;\n \n /// One node in the tree of modules.\n@@ -943,6 +950,7 @@ pub struct Resolver<'a, 'tcx> {\n     empty_module: Module<'a>,\n     module_map: FxHashMap<DefId, Module<'a>>,\n     binding_parent_modules: FxHashMap<Interned<'a, NameBinding<'a>>, Module<'a>>,\n+\n     underscore_disambiguator: u32,\n \n     /// Maps glob imports to the names of items actually imported.\n@@ -1595,7 +1603,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         import_ids\n     }\n \n-    fn new_key(&mut self, ident: Ident, ns: Namespace) -> BindingKey {\n+    fn new_disambiguated_key(&mut self, ident: Ident, ns: Namespace) -> BindingKey {\n         let ident = ident.normalize_to_macros_2_0();\n         let disambiguator = if ident.name == kw::Underscore {\n             self.underscore_disambiguator += 1;"}, {"sha": "6fd13414500da78aff247ae7a2e885889248c970", "filename": "tests/ui/underscore-imports/issue-110164.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5b098109765f4198bdff016a856610f3425a2167/tests%2Fui%2Funderscore-imports%2Fissue-110164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b098109765f4198bdff016a856610f3425a2167/tests%2Fui%2Funderscore-imports%2Fissue-110164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funderscore-imports%2Fissue-110164.rs?ref=5b098109765f4198bdff016a856610f3425a2167", "patch": "@@ -0,0 +1,19 @@\n+use self::*;\n+//~^ ERROR unresolved import `self::*`\n+use crate::*;\n+//~^ ERROR unresolved import `crate::*`\n+use _::a;\n+//~^ ERROR expected identifier, found reserved identifier `_`\n+//~| ERROR unresolved import `_`\n+use _::*;\n+//~^ ERROR expected identifier, found reserved identifier `_`\n+//~| ERROR unresolved import `_`\n+\n+fn main() {\n+    use _::a;\n+    //~^ ERROR expected identifier, found reserved identifier `_`\n+    //~| ERROR unresolved import `_`\n+    use _::*;\n+    //~^ ERROR expected identifier, found reserved identifier `_`\n+    //~| ERROR unresolved import `_`\n+}"}, {"sha": "5016c41e8a57940d69d2c7bf308f45578ea8e113", "filename": "tests/ui/underscore-imports/issue-110164.stderr", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/5b098109765f4198bdff016a856610f3425a2167/tests%2Fui%2Funderscore-imports%2Fissue-110164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b098109765f4198bdff016a856610f3425a2167/tests%2Fui%2Funderscore-imports%2Fissue-110164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funderscore-imports%2Fissue-110164.stderr?ref=5b098109765f4198bdff016a856610f3425a2167", "patch": "@@ -0,0 +1,71 @@\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/issue-110164.rs:5:5\n+   |\n+LL | use _::a;\n+   |     ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/issue-110164.rs:8:5\n+   |\n+LL | use _::*;\n+   |     ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/issue-110164.rs:13:9\n+   |\n+LL |     use _::a;\n+   |         ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/issue-110164.rs:16:9\n+   |\n+LL |     use _::*;\n+   |         ^ expected identifier, found reserved identifier\n+\n+error[E0432]: unresolved import `self::*`\n+  --> $DIR/issue-110164.rs:1:5\n+   |\n+LL | use self::*;\n+   |     ^^^^^^^ cannot glob-import a module into itself\n+\n+error[E0432]: unresolved import `crate::*`\n+  --> $DIR/issue-110164.rs:3:5\n+   |\n+LL | use crate::*;\n+   |     ^^^^^^^^ cannot glob-import a module into itself\n+\n+error[E0432]: unresolved import `_`\n+  --> $DIR/issue-110164.rs:8:5\n+   |\n+LL | use _::*;\n+   |     ^ maybe a missing crate `_`?\n+   |\n+   = help: consider adding `extern crate _` to use the `_` crate\n+\n+error[E0432]: unresolved import `_`\n+  --> $DIR/issue-110164.rs:5:5\n+   |\n+LL | use _::a;\n+   |     ^ maybe a missing crate `_`?\n+   |\n+   = help: consider adding `extern crate _` to use the `_` crate\n+\n+error[E0432]: unresolved import `_`\n+  --> $DIR/issue-110164.rs:13:9\n+   |\n+LL |     use _::a;\n+   |         ^ maybe a missing crate `_`?\n+   |\n+   = help: consider adding `extern crate _` to use the `_` crate\n+\n+error[E0432]: unresolved import `_`\n+  --> $DIR/issue-110164.rs:16:9\n+   |\n+LL |     use _::*;\n+   |         ^ maybe a missing crate `_`?\n+   |\n+   = help: consider adding `extern crate _` to use the `_` crate\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0432`."}]}