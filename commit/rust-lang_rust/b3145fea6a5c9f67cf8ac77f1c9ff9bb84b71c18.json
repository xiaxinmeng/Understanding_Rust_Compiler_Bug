{"sha": "b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18", "node_id": "C_kwDOAAsO6NoAKGIzMTQ1ZmVhNmE1YzlmNjdjZjhhYzc3ZjFjOWZmOWJiODRiNzFjMTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-19T12:44:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-19T12:44:23Z"}, "message": "Auto merge of #10099 - Niki4tap:null_fn_lints, r=llogiq\n\nNull fn lints\n\nAdds lints to check for code, that assumes nullable `fn()`.\n\n### Lint examples:\n\n`transmute_null_to_fn`:\n```rust\nerror: transmuting a known null pointer into a function pointer\n  --> $DIR/transmute_null_to_fn.rs:9:23\n   |\nLL |         let _: fn() = std::mem::transmute(std::ptr::null::<()>());\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this transmute results in undefined behavior\n   |\n   = help: try wrapping your function pointer type in `Option<T>` instead, and using `None` as a null pointer value\n```\n\n`fn_null_check`:\n```rust\nerror: function pointer assumed to be nullable, even though it isn't\n  --> $DIR/fn_null_check.rs:13:8\n   |\nLL |     if (fn_ptr as *mut ()).is_null() {}\n   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\n```\n\nCloses #1644\n\n---\n\nchangelog: Improvement: [`transmuting_null`]: Now detects `const` pointers to all types\n[#10099](https://github.com/rust-lang/rust-clippy/pull/10099)\nchangelog: New lint: [`transmute_null_to_fn`]\n[#10099](https://github.com/rust-lang/rust-clippy/pull/10099)\nchangelog: New lint: [`fn_null_check`]\n[#10099](https://github.com/rust-lang/rust-clippy/pull/10099)\n<!-- changelog_checked (This is just a flag for me, please don't add it manually) -->", "tree": {"sha": "8590419443b04c51ce8a0d4a4bb4722a2286d50f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8590419443b04c51ce8a0d4a4bb4722a2286d50f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18", "html_url": "https://github.com/rust-lang/rust/commit/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a6aca35b500841b4af1b4d6ec3392c2a4a9e2e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6aca35b500841b4af1b4d6ec3392c2a4a9e2e8", "html_url": "https://github.com/rust-lang/rust/commit/8a6aca35b500841b4af1b4d6ec3392c2a4a9e2e8"}, {"sha": "691df70bbcab3a22a961fe4df839857af19f8413", "url": "https://api.github.com/repos/rust-lang/rust/commits/691df70bbcab3a22a961fe4df839857af19f8413", "html_url": "https://github.com/rust-lang/rust/commit/691df70bbcab3a22a961fe4df839857af19f8413"}], "stats": {"total": 336, "additions": 328, "deletions": 8}, "files": [{"sha": "17ff182c7beebb1e6cbef5b5ba04081788a3cd81", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18", "patch": "@@ -4203,6 +4203,7 @@ Released 2018-09-13\n [`float_cmp_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp_const\n [`float_equality_without_abs`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_equality_without_abs\n [`fn_address_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_address_comparisons\n+[`fn_null_check`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_null_check\n [`fn_params_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_params_excessive_bools\n [`fn_to_numeric_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n [`fn_to_numeric_cast_any`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_any\n@@ -4590,6 +4591,7 @@ Released 2018-09-13\n [`transmute_int_to_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_bool\n [`transmute_int_to_char`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_char\n [`transmute_int_to_float`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_float\n+[`transmute_null_to_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_null_to_fn\n [`transmute_num_to_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_num_to_bytes\n [`transmute_ptr_to_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr\n [`transmute_ptr_to_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ref"}, {"sha": "480a65ac70ca2345ca760da44501b89e26754dd9", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18", "patch": "@@ -161,6 +161,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::float_literal::LOSSY_FLOAT_LITERAL_INFO,\n     crate::floating_point_arithmetic::IMPRECISE_FLOPS_INFO,\n     crate::floating_point_arithmetic::SUBOPTIMAL_FLOPS_INFO,\n+    crate::fn_null_check::FN_NULL_CHECK_INFO,\n     crate::format::USELESS_FORMAT_INFO,\n     crate::format_args::FORMAT_IN_FORMAT_ARGS_INFO,\n     crate::format_args::TO_STRING_IN_FORMAT_ARGS_INFO,\n@@ -568,6 +569,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::transmute::TRANSMUTE_INT_TO_BOOL_INFO,\n     crate::transmute::TRANSMUTE_INT_TO_CHAR_INFO,\n     crate::transmute::TRANSMUTE_INT_TO_FLOAT_INFO,\n+    crate::transmute::TRANSMUTE_NULL_TO_FN_INFO,\n     crate::transmute::TRANSMUTE_NUM_TO_BYTES_INFO,\n     crate::transmute::TRANSMUTE_PTR_TO_PTR_INFO,\n     crate::transmute::TRANSMUTE_PTR_TO_REF_INFO,"}, {"sha": "91c8c340ce28feb9cc84c473c8b0323762ab2cd2", "filename": "clippy_lints/src/fn_null_check.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/clippy_lints%2Fsrc%2Ffn_null_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/clippy_lints%2Fsrc%2Ffn_null_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffn_null_check.rs?ref=b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18", "patch": "@@ -0,0 +1,106 @@\n+use clippy_utils::consts::{constant, Constant};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::{is_integer_literal, is_path_diagnostic_item};\n+use rustc_hir::{BinOpKind, Expr, ExprKind, TyKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for comparing a function pointer to null.\n+    ///\n+    /// ### Why is this bad?\n+    /// Function pointers are assumed to not be null.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// let fn_ptr: fn() = /* somehow obtained nullable function pointer */\n+    ///\n+    /// if (fn_ptr as *const ()).is_null() { ... }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// let fn_ptr: Option<fn()> = /* somehow obtained nullable function pointer */\n+    ///\n+    /// if fn_ptr.is_none() { ... }\n+    /// ```\n+    #[clippy::version = \"1.67.0\"]\n+    pub FN_NULL_CHECK,\n+    correctness,\n+    \"`fn()` type assumed to be nullable\"\n+}\n+declare_lint_pass!(FnNullCheck => [FN_NULL_CHECK]);\n+\n+fn lint_expr(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+    span_lint_and_help(\n+        cx,\n+        FN_NULL_CHECK,\n+        expr.span,\n+        \"function pointer assumed to be nullable, even though it isn't\",\n+        None,\n+        \"try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\",\n+    );\n+}\n+\n+fn is_fn_ptr_cast(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    if let ExprKind::Cast(cast_expr, cast_ty) = expr.kind\n+        && let TyKind::Ptr(_) = cast_ty.kind\n+    {\n+        cx.typeck_results().expr_ty_adjusted(cast_expr).is_fn()\n+    } else {\n+        false\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for FnNullCheck {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        match expr.kind {\n+            // Catching:\n+            // (fn_ptr as *<const/mut> <ty>).is_null()\n+            ExprKind::MethodCall(method_name, receiver, _, _)\n+                if method_name.ident.as_str() == \"is_null\" && is_fn_ptr_cast(cx, receiver) =>\n+            {\n+                lint_expr(cx, expr);\n+            },\n+\n+            ExprKind::Binary(op, left, right) if matches!(op.node, BinOpKind::Eq) => {\n+                let to_check: &Expr<'_>;\n+                if is_fn_ptr_cast(cx, left) {\n+                    to_check = right;\n+                } else if is_fn_ptr_cast(cx, right) {\n+                    to_check = left;\n+                } else {\n+                    return;\n+                }\n+\n+                match to_check.kind {\n+                    // Catching:\n+                    // (fn_ptr as *<const/mut> <ty>) == (0 as <ty>)\n+                    ExprKind::Cast(cast_expr, _) if is_integer_literal(cast_expr, 0) => {\n+                        lint_expr(cx, expr);\n+                    },\n+\n+                    // Catching:\n+                    // (fn_ptr as *<const/mut> <ty>) == std::ptr::null()\n+                    ExprKind::Call(func, []) if is_path_diagnostic_item(cx, func, sym::ptr_null) => {\n+                        lint_expr(cx, expr);\n+                    },\n+\n+                    // Catching:\n+                    // (fn_ptr as *<const/mut> <ty>) == <const that evaluates to null_ptr>\n+                    _ if matches!(\n+                        constant(cx, cx.typeck_results(), to_check),\n+                        Some((Constant::RawPtr(0), _))\n+                    ) =>\n+                    {\n+                        lint_expr(cx, expr);\n+                    },\n+\n+                    _ => {},\n+                }\n+            },\n+            _ => {},\n+        }\n+    }\n+}"}, {"sha": "7f7d73339e4523cf3c069b8c4496b9ec7d9f4e65", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18", "patch": "@@ -125,6 +125,7 @@ mod explicit_write;\n mod fallible_impl_from;\n mod float_literal;\n mod floating_point_arithmetic;\n+mod fn_null_check;\n mod format;\n mod format_args;\n mod format_impl;\n@@ -902,6 +903,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(suspicious_xor_used_as_pow::ConfusingXorAndPow));\n     store.register_late_pass(move |_| Box::new(manual_is_ascii_check::ManualIsAsciiCheck::new(msrv())));\n     store.register_late_pass(|_| Box::new(semicolon_block::SemicolonBlock));\n+    store.register_late_pass(|_| Box::new(fn_null_check::FnNullCheck));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "691d759d7739dbea81c65ab12c1a12855cda657e", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18", "patch": "@@ -3,6 +3,7 @@ mod transmute_float_to_int;\n mod transmute_int_to_bool;\n mod transmute_int_to_char;\n mod transmute_int_to_float;\n+mod transmute_null_to_fn;\n mod transmute_num_to_bytes;\n mod transmute_ptr_to_ptr;\n mod transmute_ptr_to_ref;\n@@ -409,6 +410,34 @@ declare_clippy_lint! {\n     \"transmutes from a null pointer to a reference, which is undefined behavior\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for null function pointer creation through transmute.\n+    ///\n+    /// ### Why is this bad?\n+    /// Creating a null function pointer is undefined behavior.\n+    ///\n+    /// More info: https://doc.rust-lang.org/nomicon/ffi.html#the-nullable-pointer-optimization\n+    ///\n+    /// ### Known problems\n+    /// Not all cases can be detected at the moment of this writing.\n+    /// For example, variables which hold a null pointer and are then fed to a `transmute`\n+    /// call, aren't detectable yet.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let null_fn: fn() = unsafe { std::mem::transmute( std::ptr::null::<()>() ) };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let null_fn: Option<fn()> = None;\n+    /// ```\n+    #[clippy::version = \"1.67.0\"]\n+    pub TRANSMUTE_NULL_TO_FN,\n+    correctness,\n+    \"transmute results in a null function pointer, which is undefined behavior\"\n+}\n+\n pub struct Transmute {\n     msrv: Msrv,\n }\n@@ -428,6 +457,7 @@ impl_lint_pass!(Transmute => [\n     TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n     TRANSMUTE_UNDEFINED_REPR,\n     TRANSMUTING_NULL,\n+    TRANSMUTE_NULL_TO_FN,\n ]);\n impl Transmute {\n     #[must_use]\n@@ -461,6 +491,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 let linted = wrong_transmute::check(cx, e, from_ty, to_ty)\n                     | crosspointer_transmute::check(cx, e, from_ty, to_ty)\n                     | transmuting_null::check(cx, e, arg, to_ty)\n+                    | transmute_null_to_fn::check(cx, e, arg, to_ty)\n                     | transmute_ptr_to_ref::check(cx, e, from_ty, to_ty, arg, path, &self.msrv)\n                     | transmute_int_to_char::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | transmute_ref_to_ref::check(cx, e, from_ty, to_ty, arg, const_context)"}, {"sha": "e75d7f6bf1d5295eb4134622bcc38b85a2de98ed", "filename": "clippy_lints/src/transmute/transmute_null_to_fn.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs?ref=b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18", "patch": "@@ -0,0 +1,64 @@\n+use clippy_utils::consts::{constant, Constant};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::{is_integer_literal, is_path_diagnostic_item};\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::Ty;\n+use rustc_span::symbol::sym;\n+\n+use super::TRANSMUTE_NULL_TO_FN;\n+\n+fn lint_expr(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+    span_lint_and_then(\n+        cx,\n+        TRANSMUTE_NULL_TO_FN,\n+        expr.span,\n+        \"transmuting a known null pointer into a function pointer\",\n+        |diag| {\n+            diag.span_label(expr.span, \"this transmute results in undefined behavior\");\n+            diag.help(\n+               \"try wrapping your function pointer type in `Option<T>` instead, and using `None` as a null pointer value\"\n+            );\n+        },\n+    );\n+}\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arg: &'tcx Expr<'_>, to_ty: Ty<'tcx>) -> bool {\n+    if !to_ty.is_fn() {\n+        return false;\n+    }\n+\n+    match arg.kind {\n+        // Catching:\n+        // transmute over constants that resolve to `null`.\n+        ExprKind::Path(ref _qpath)\n+            if matches!(constant(cx, cx.typeck_results(), arg), Some((Constant::RawPtr(0), _))) =>\n+        {\n+            lint_expr(cx, expr);\n+            true\n+        },\n+\n+        // Catching:\n+        // `std::mem::transmute(0 as *const i32)`\n+        ExprKind::Cast(inner_expr, _cast_ty) if is_integer_literal(inner_expr, 0) => {\n+            lint_expr(cx, expr);\n+            true\n+        },\n+\n+        // Catching:\n+        // `std::mem::transmute(std::ptr::null::<i32>())`\n+        ExprKind::Call(func1, []) if is_path_diagnostic_item(cx, func1, sym::ptr_null) => {\n+            lint_expr(cx, expr);\n+            true\n+        },\n+\n+        _ => {\n+            // FIXME:\n+            // Also catch transmutations of variables which are known nulls.\n+            // To do this, MIR const propagation seems to be the better tool.\n+            // Whenever MIR const prop routines are more developed, this will\n+            // become available. As of this writing (25/03/19) it is not yet.\n+            false\n+        },\n+    }\n+}"}, {"sha": "1e407fc4138c1ecbcc184c611170b7c754e6c043", "filename": "clippy_lints/src/transmute/transmuting_null.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/clippy_lints%2Fsrc%2Ftransmute%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/clippy_lints%2Fsrc%2Ftransmute%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmuting_null.rs?ref=b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18", "patch": "@@ -18,8 +18,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arg: &'t\n     // Catching transmute over constants that resolve to `null`.\n     let mut const_eval_context = constant_context(cx, cx.typeck_results());\n     if let ExprKind::Path(ref _qpath) = arg.kind &&\n-        let Some(Constant::RawPtr(x)) = const_eval_context.expr(arg) &&\n-        x == 0\n+        let Some(Constant::RawPtr(0)) = const_eval_context.expr(arg)\n     {\n         span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG);\n         return true;"}, {"sha": "a67bd8d46006b7343be74e968ac9c5c30eb35ce6", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18", "patch": "@@ -620,12 +620,7 @@ pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: mir::ConstantKind<'tcx>) -\n                 ty::Float(FloatTy::F64) => Some(Constant::F64(f64::from_bits(\n                     int.try_into().expect(\"invalid f64 bit representation\"),\n                 ))),\n-                ty::RawPtr(type_and_mut) => {\n-                    if let ty::Uint(_) = type_and_mut.ty.kind() {\n-                        return Some(Constant::RawPtr(int.assert_bits(int.size())));\n-                    }\n-                    None\n-                },\n+                ty::RawPtr(_) => Some(Constant::RawPtr(int.assert_bits(int.size()))),\n                 // FIXME: implement other conversions.\n                 _ => None,\n             }"}, {"sha": "df5bc8420d57b4872241d06fba47dea030baa94f", "filename": "tests/ui/fn_null_check.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/tests%2Fui%2Ffn_null_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/tests%2Fui%2Ffn_null_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_null_check.rs?ref=b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18", "patch": "@@ -0,0 +1,21 @@\n+#![allow(unused)]\n+#![warn(clippy::fn_null_check)]\n+#![allow(clippy::cmp_null)]\n+#![allow(clippy::ptr_eq)]\n+#![allow(clippy::zero_ptr)]\n+\n+pub const ZPTR: *const () = 0 as *const _;\n+pub const NOT_ZPTR: *const () = 1 as *const _;\n+\n+fn main() {\n+    let fn_ptr = main;\n+\n+    if (fn_ptr as *mut ()).is_null() {}\n+    if (fn_ptr as *const u8).is_null() {}\n+    if (fn_ptr as *const ()) == std::ptr::null() {}\n+    if (fn_ptr as *const ()) == (0 as *const ()) {}\n+    if (fn_ptr as *const ()) == ZPTR {}\n+\n+    // no lint\n+    if (fn_ptr as *const ()) == NOT_ZPTR {}\n+}"}, {"sha": "660dd3239792205efd143d4389fb502e836cbdbf", "filename": "tests/ui/fn_null_check.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/tests%2Fui%2Ffn_null_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/tests%2Fui%2Ffn_null_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_null_check.stderr?ref=b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18", "patch": "@@ -0,0 +1,43 @@\n+error: function pointer assumed to be nullable, even though it isn't\n+  --> $DIR/fn_null_check.rs:13:8\n+   |\n+LL |     if (fn_ptr as *mut ()).is_null() {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\n+   = note: `-D clippy::fn-null-check` implied by `-D warnings`\n+\n+error: function pointer assumed to be nullable, even though it isn't\n+  --> $DIR/fn_null_check.rs:14:8\n+   |\n+LL |     if (fn_ptr as *const u8).is_null() {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\n+\n+error: function pointer assumed to be nullable, even though it isn't\n+  --> $DIR/fn_null_check.rs:15:8\n+   |\n+LL |     if (fn_ptr as *const ()) == std::ptr::null() {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\n+\n+error: function pointer assumed to be nullable, even though it isn't\n+  --> $DIR/fn_null_check.rs:16:8\n+   |\n+LL |     if (fn_ptr as *const ()) == (0 as *const ()) {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\n+\n+error: function pointer assumed to be nullable, even though it isn't\n+  --> $DIR/fn_null_check.rs:17:8\n+   |\n+LL |     if (fn_ptr as *const ()) == ZPTR {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "b3ea3d9039e088b7ec974a5f3abfd5358d64443b", "filename": "tests/ui/transmute_null_to_fn.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/tests%2Fui%2Ftransmute_null_to_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/tests%2Fui%2Ftransmute_null_to_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_null_to_fn.rs?ref=b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18", "patch": "@@ -0,0 +1,28 @@\n+#![allow(dead_code)]\n+#![warn(clippy::transmute_null_to_fn)]\n+#![allow(clippy::zero_ptr)]\n+\n+// Easy to lint because these only span one line.\n+fn one_liners() {\n+    unsafe {\n+        let _: fn() = std::mem::transmute(0 as *const ());\n+        let _: fn() = std::mem::transmute(std::ptr::null::<()>());\n+    }\n+}\n+\n+pub const ZPTR: *const usize = 0 as *const _;\n+pub const NOT_ZPTR: *const usize = 1 as *const _;\n+\n+fn transmute_const() {\n+    unsafe {\n+        // Should raise a lint.\n+        let _: fn() = std::mem::transmute(ZPTR);\n+        // Should NOT raise a lint.\n+        let _: fn() = std::mem::transmute(NOT_ZPTR);\n+    }\n+}\n+\n+fn main() {\n+    one_liners();\n+    transmute_const();\n+}"}, {"sha": "f0c65497d750edb32c01442443f3d2bfddba003c", "filename": "tests/ui/transmute_null_to_fn.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/tests%2Fui%2Ftransmute_null_to_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18/tests%2Fui%2Ftransmute_null_to_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_null_to_fn.stderr?ref=b3145fea6a5c9f67cf8ac77f1c9ff9bb84b71c18", "patch": "@@ -0,0 +1,27 @@\n+error: transmuting a known null pointer into a function pointer\n+  --> $DIR/transmute_null_to_fn.rs:8:23\n+   |\n+LL |         let _: fn() = std::mem::transmute(0 as *const ());\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this transmute results in undefined behavior\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `None` as a null pointer value\n+   = note: `-D clippy::transmute-null-to-fn` implied by `-D warnings`\n+\n+error: transmuting a known null pointer into a function pointer\n+  --> $DIR/transmute_null_to_fn.rs:9:23\n+   |\n+LL |         let _: fn() = std::mem::transmute(std::ptr::null::<()>());\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this transmute results in undefined behavior\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `None` as a null pointer value\n+\n+error: transmuting a known null pointer into a function pointer\n+  --> $DIR/transmute_null_to_fn.rs:19:23\n+   |\n+LL |         let _: fn() = std::mem::transmute(ZPTR);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ this transmute results in undefined behavior\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `None` as a null pointer value\n+\n+error: aborting due to 3 previous errors\n+"}]}