{"sha": "597b3fd03fa1213ede610088569decd390d2c2fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5N2IzZmQwM2ZhMTIxM2VkZTYxMDA4ODU2OWRlY2QzOTBkMmMyZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-07T13:56:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-07T13:56:19Z"}, "message": "auto merge of #8305 : huonw/rust/triage-fixes, r=cmr\n\nThe two deletions are because the test cases are very old (still using `class` and modes!), and, as far as I can tell (since they are so old), the areas they test are well tested by other rpass tests.", "tree": {"sha": "72f42fa9f322e815f120229fa93ad8efe4404e73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72f42fa9f322e815f120229fa93ad8efe4404e73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/597b3fd03fa1213ede610088569decd390d2c2fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/597b3fd03fa1213ede610088569decd390d2c2fb", "html_url": "https://github.com/rust-lang/rust/commit/597b3fd03fa1213ede610088569decd390d2c2fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/597b3fd03fa1213ede610088569decd390d2c2fb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54c8c23d0582037e525fba917fb865bfba0e9b78", "url": "https://api.github.com/repos/rust-lang/rust/commits/54c8c23d0582037e525fba917fb865bfba0e9b78", "html_url": "https://github.com/rust-lang/rust/commit/54c8c23d0582037e525fba917fb865bfba0e9b78"}, {"sha": "1ce5effac2ced66e44b4b7f320bf8810f654a319", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce5effac2ced66e44b4b7f320bf8810f654a319", "html_url": "https://github.com/rust-lang/rust/commit/1ce5effac2ced66e44b4b7f320bf8810f654a319"}], "stats": {"total": 259, "additions": 17, "deletions": 242}, "files": [{"sha": "cd7aac020edef4440212f4917aaa9756734e7862", "filename": "src/libstd/str.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/597b3fd03fa1213ede610088569decd390d2c2fb/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/597b3fd03fa1213ede610088569decd390d2c2fb/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=597b3fd03fa1213ede610088569decd390d2c2fb", "patch": "@@ -3304,19 +3304,22 @@ mod tests {\n     fn test_add() {\n         #[allow(unnecessary_allocation)];\n         macro_rules! t (\n-            ($s1:expr, $s2:expr, $e:expr) => {\n-                assert_eq!($s1 + $s2, $e);\n-                assert_eq!($s1.to_owned() + $s2, $e);\n-                assert_eq!($s1.to_managed() + $s2, $e);\n-            }\n+            ($s1:expr, $s2:expr, $e:expr) => { {\n+                let s1 = $s1;\n+                let s2 = $s2;\n+                let e = $e;\n+                assert_eq!(s1 + s2, e.to_owned());\n+                assert_eq!(s1.to_owned() + s2, e.to_owned());\n+                assert_eq!(s1.to_managed() + s2, e.to_owned());\n+            } }\n         );\n \n-        t!(\"foo\",  \"bar\", ~\"foobar\");\n-        t!(\"foo\", @\"bar\", ~\"foobar\");\n-        t!(\"foo\", ~\"bar\", ~\"foobar\");\n-        t!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\",  \"\u534eVi\u1ec7t Nam\", ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n-        t!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\", @\"\u534eVi\u1ec7t Nam\", ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n-        t!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\", ~\"\u534eVi\u1ec7t Nam\", ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n+        t!(\"foo\",  \"bar\", \"foobar\");\n+        t!(\"foo\", @\"bar\", \"foobar\");\n+        t!(\"foo\", ~\"bar\", \"foobar\");\n+        t!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\",  \"\u534eVi\u1ec7t Nam\", \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n+        t!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\", @\"\u534eVi\u1ec7t Nam\", \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n+        t!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\", ~\"\u534eVi\u1ec7t Nam\", \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n     }\n \n     #[test]"}, {"sha": "93e9eac1dd9dfb621bf1e76df52a5769d403ac30", "filename": "src/test/run-pass/class-impl-parameterized-trait.rs", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/54c8c23d0582037e525fba917fb865bfba0e9b78/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c8c23d0582037e525fba917fb865bfba0e9b78/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs?ref=54c8c23d0582037e525fba917fb865bfba0e9b78", "patch": "@@ -1,83 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test FIXME #7307\n-// xfail-fast\n-\n-extern mod extra;\n-use extra::oldmap::*;\n-\n-class cat : map<int, bool> {\n-  priv {\n-    // Yes, you can have negative meows\n-    let mut meows : int;\n-    fn meow() {\n-      self.meows += 1;\n-      error!(\"Meow %d\", self.meows);\n-      if self.meows % 5 == 0 {\n-          self.how_hungry += 1;\n-      }\n-    }\n-  }\n-\n-  let mut how_hungry : int;\n-  let name : str;\n-\n-  new(in_x : int, in_y : int, in_name: str)\n-    { self.meows = in_x; self.how_hungry = in_y; self.name = in_name; }\n-\n-  fn speak() { self.meow(); }\n-\n-  fn eat() -> bool {\n-    if self.how_hungry > 0 {\n-        error!(\"OM NOM NOM\");\n-        self.how_hungry -= 2;\n-        return true;\n-    }\n-    else {\n-        error!(\"Not hungry!\");\n-        return false;\n-    }\n-  }\n-\n-  fn size() -> uint { self.meows as uint }\n-  fn insert(+k: int, +v: bool) -> bool {\n-    if v { self.meows += k; } else { self.meows -= k; };\n-    true\n-  }\n-  fn contains_key(&&k: int) -> bool { k <= self.meows }\n-  fn get(&&k:int) -> bool { k <= self.meows }\n-  fn [](&&k:int) -> bool { k <= self.meows }\n-  fn find(&&k:int) -> Option<bool> { Some(self.get(k)) }\n-  fn remove(&&k:int) -> Option<bool> { self.meows -= k; Some(true) }\n-  fn each(f: &fn(&&int, &&bool) -> bool) {\n-    let mut n = num::abs(self.meows);\n-    while n > 0 {\n-        if !f(n, true) { break; }\n-        n -= 1;\n-    }\n-  }\n-  fn each_key(&&f: &fn(&&int) -> bool) {\n-    for self.each |k, _v| { if !f(k) { break; } again;};\n-  }\n-  fn each_value(&&f: &fn(&&bool) -> bool) {\n-    for self.each |_k, v| { if !f(v) { break; } again;};\n-  }\n-  fn clear() { }\n-}\n-\n-pub fn main() {\n-  let nyan : cat = cat(0, 2, \"nyan\");\n-  for _ in range(1u, 5u) { nyan.speak(); }\n-  // cat returns true if uint input is greater than\n-  // the number of meows so far\n-  assert!((nyan.get(1)));\n-  assert!((!nyan.get(10)));\n-}"}, {"sha": "4fccc45a75335cea0e23c96e9959cef68ecdf634", "filename": "src/test/run-pass/class-implements-multiple-traits.rs", "status": "removed", "additions": 0, "deletions": 129, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/54c8c23d0582037e525fba917fb865bfba0e9b78/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c8c23d0582037e525fba917fb865bfba0e9b78/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs?ref=54c8c23d0582037e525fba917fb865bfba0e9b78", "patch": "@@ -1,129 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test FIXME #7305\n-\n-extern mod extra;\n-use extra::oldmap::*;\n-use vec::*;\n-use dvec::{dvec, extensions};\n-\n-enum furniture { chair, couch, bed }\n-enum body_part { finger, toe, nose, ear }\n-\n-trait noisy {\n-  fn speak() -> int;\n-}\n-\n-trait scratchy {\n-  fn scratch() -> Option<furniture>;\n-}\n-\n-trait bitey {\n-  fn bite() -> body_part;\n-}\n-\n-fn vec_includes<T>(xs: ~[T], x: T) -> bool {\n-  for each(xs) |y| { if y == x { return true; }}\n-  return false;\n-}\n-\n-// vtables other than the 1st one don't seem to work\n-class cat : noisy, scratchy, bitey {\n-  priv {\n-    let meows : @mut uint;\n-    let scratched : dvec<furniture>;\n-    let bite_counts : hashmap<body_part, uint>;\n-\n-    fn meow() -> uint {\n-      info!(\"Meow: %u\", *self.meows);\n-      *self.meows += 1u;\n-      if *self.meows % 5u == 0u {\n-          *self.how_hungry += 1;\n-      }\n-      *self.meows\n-    }\n-  }\n-\n-  let how_hungry : @mut int;\n-  let name : str;\n-\n-  new(in_x : uint, in_y : int, in_name: str)\n-    { self.meows = @mut in_x; self.how_hungry = @mut in_y;\n-      self.name = in_name; self.scratched = dvec();\n-      let hsher: hashfn<body_part> = |p| int::hash(p as int);\n-      let eqer : eqfn<body_part> = |p, q| p == q;\n-      let t : hashmap<body_part, uint> =\n-        hashmap::<body_part, uint>(hsher, eqer);\n-      self.bite_counts = t;\n-     do iter(~[finger, toe, nose, ear]) |p| {\n-          self.bite_counts.insert(p, 0u);\n-      };\n-    }\n-\n-  fn speak() -> int { self.meow() as int }\n-  fn meow_count() -> uint { *self.meows }\n-  fn scratch() -> Option<furniture> {\n-    let all = ~[chair, couch, bed];\n-    log(error, self.scratched);\n-    let mut rslt = None;\n-    for each(all) |thing| { if !self.scratched.contains(thing) {\n-          self.scratched.push(thing);\n-          return Some(thing); }}\n-    rslt\n-  }\n-  fn bite() -> body_part {\n-    error!(\"In bite()\");\n-    let all = ~[toe, nose, ear];\n-    let mut min = finger;\n-    do iter(all) |next| {\n-      info!(\"min = %?\", min);\n-        if self.bite_counts.get(next) < self.bite_counts.get(min) {\n-            min = next;\n-          }};\n-    self.bite_counts.insert(min, self.bite_counts.get(min) + 1u);\n-    info!(\"Bit %?\", min);\n-    min\n-  }\n-}\n-\n-fn annoy_neighbors<T:noisy>(critter: T) {\n-  for i in range(0u, 10u) {\n-      let what = critter.speak();\n-      info!(\"%u %d\", i, what);\n-  }\n-}\n-\n-fn bite_everything<T:bitey>(critter: T) -> bool {\n-  let mut left : ~[body_part] = ~[finger, toe, nose, ear];\n-  while left.len() > 0u {\n-    let part = critter.bite();\n-    info!(\"%? %?\", left, part);\n-    if vec_includes(left, part) {\n-        left = vec::filter(left, |p| p != part );\n-    }\n-    else {\n-      return false;\n-    }\n-  }\n-  true\n-}\n-\n-fn scratched_something<T:scratchy>(critter: T) -> bool {\n-  option::is_some(critter.scratch())\n-}\n-\n-pub fn main() {\n-  let nyan : cat  = cat(0u, 2, \"nyan\");\n-  annoy_neighbors(nyan as noisy);\n-  assert_eq!(nyan.meow_count(), 10u);\n-  assert!((bite_everything(nyan as bitey)));\n-  assert!((scratched_something(nyan as scratchy)));\n-}"}, {"sha": "b31f0eab2e2239494bef52c7d1464ecfd0a982ad", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-arg.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/597b3fd03fa1213ede610088569decd390d2c2fb/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/597b3fd03fa1213ede610088569decd390d2c2fb/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs?ref=597b3fd03fa1213ede610088569decd390d2c2fb", "patch": "@@ -12,10 +12,4 @@ fn sum_imm(y: &[int]) -> int {\n     sum(y)\n }\n \n-/* FIXME #7304\n-fn sum_const(y: &const [int]) -> int {\n-    sum(y)\n-}\n-*/\n-\n pub fn main() {}"}, {"sha": "8a271a4d65f3c06f5ac728c3c24464bf00cef97b", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-rcvr.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/597b3fd03fa1213ede610088569decd390d2c2fb/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/597b3fd03fa1213ede610088569decd390d2c2fb/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=597b3fd03fa1213ede610088569decd390d2c2fb", "patch": "@@ -1,9 +1,3 @@\n-/* FIXME #7302\n-fn foo(v: &const [uint]) -> ~[uint] {\n-    v.to_owned()\n-}\n-*/\n-\n fn bar(v: &mut [uint]) -> ~[uint] {\n     v.to_owned()\n }\n@@ -14,7 +8,6 @@ fn bip(v: &[uint]) -> ~[uint] {\n \n pub fn main() {\n     let mut the_vec = ~[1u, 2, 3, 100];\n-//    assert_eq!(the_vec.clone(), foo(the_vec));\n     assert_eq!(the_vec.clone(), bar(the_vec));\n     assert_eq!(the_vec.clone(), bip(the_vec));\n }"}, {"sha": "46819027dad649719e9ab9da908260a5800ab863", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/597b3fd03fa1213ede610088569decd390d2c2fb/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/597b3fd03fa1213ede610088569decd390d2c2fb/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=597b3fd03fa1213ede610088569decd390d2c2fb", "patch": "@@ -12,7 +12,9 @@ trait get {\n     fn get(self) -> int;\n }\n \n-// FIXME #7302: Note: impl on a slice\n+// Note: impl on a slice; we're checking that the pointers below\n+// correctly get borrowed to `&`. (similar to impling for `int`, with\n+// `&self` instead of `self`.)\n impl<'self> get for &'self int {\n     fn get(self) -> int {\n         return *self;\n@@ -34,11 +36,6 @@ pub fn main() {\n     info!(\"y=%d\", y);\n     assert_eq!(y, 6);\n \n-    let x = ~6;\n-    let y = x.get();\n-    info!(\"y=%d\", y);\n-    assert_eq!(y, 6);\n-\n     let x = &6;\n     let y = x.get();\n     info!(\"y=%d\", y);"}]}