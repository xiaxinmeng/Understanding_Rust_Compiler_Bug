{"sha": "0121cc1e2977c215d7f5222b33a3aa1def664226", "node_id": "C_kwDOAAsO6NoAKDAxMjFjYzFlMjk3N2MyMTVkN2Y1MjIyYjMzYTNhYTFkZWY2NjQyMjY", "commit": {"author": {"name": "XFFXFF", "email": "1247714429@qq.com", "date": "2022-06-06T11:18:44Z"}, "committer": {"name": "XFFXFF", "email": "1247714429@qq.com", "date": "2022-06-10T23:11:56Z"}, "message": "make generated test pass and make tidy happy", "tree": {"sha": "78958a9e83fce2bf52481f9f957533dd0b568181", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78958a9e83fce2bf52481f9f957533dd0b568181"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0121cc1e2977c215d7f5222b33a3aa1def664226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0121cc1e2977c215d7f5222b33a3aa1def664226", "html_url": "https://github.com/rust-lang/rust/commit/0121cc1e2977c215d7f5222b33a3aa1def664226", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0121cc1e2977c215d7f5222b33a3aa1def664226/comments", "author": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb62180714925bca4b7f28a20984ec7624e0aa96", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb62180714925bca4b7f28a20984ec7624e0aa96", "html_url": "https://github.com/rust-lang/rust/commit/bb62180714925bca4b7f28a20984ec7624e0aa96"}], "stats": {"total": 96, "additions": 70, "deletions": 26}, "files": [{"sha": "5d7774af5bcbcb4e84ef9bf14ebe78e71f59f44c", "filename": "crates/ide-assists/src/handlers/add_label_to_loop.rs", "status": "modified", "additions": 47, "deletions": 26, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0121cc1e2977c215d7f5222b33a3aa1def664226/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_label_to_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0121cc1e2977c215d7f5222b33a3aa1def664226/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_label_to_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_label_to_loop.rs?ref=0121cc1e2977c215d7f5222b33a3aa1def664226", "patch": "@@ -8,20 +8,27 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Adds a label to a loop.\n //\n // ```\n-// loop$0 {\n-//     break;\n-//     continue;\n+// fn main() {\n+//     loop$0 {\n+//         break;\n+//         continue;\n+//     }\n // }\n // ```\n // ->\n // ```\n-// 'loop: loop {\n-//     break 'loop;\n-//     continue 'loop;\n+// fn main() {\n+//     'loop: loop {\n+//         break 'loop;\n+//         continue 'loop;\n+//     }\n // }\n // ```\n pub(crate) fn add_label_to_loop(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let loop_expr = ctx.find_node_at_offset::<ast::LoopExpr>()?;\n+    if loop_expr.label().is_some() {\n+        return None;\n+    }\n     let loop_body = loop_expr.loop_body().and_then(|it| it.stmt_list());\n     let mut related_exprs = vec![];\n     related_exprs.push(ast::Expr::LoopExpr(loop_expr.clone()));\n@@ -53,7 +60,7 @@ pub(crate) fn add_label_to_loop(acc: &mut Assists, ctx: &AssistContext) -> Optio\n                             builder.insert(loop_token.text_range().start(), \"'loop: \")\n                         }\n                     }\n-                    _ => todo!(),\n+                    _ => {}\n                 }\n             }\n         },\n@@ -62,7 +69,7 @@ pub(crate) fn add_label_to_loop(acc: &mut Assists, ctx: &AssistContext) -> Optio\n \n #[cfg(test)]\n mod tests {\n-    use crate::tests::check_assist;\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n \n@@ -72,16 +79,16 @@ mod tests {\n             add_label_to_loop,\n             r#\"\n fn main() {\n-    loop$0 { \n-        break; \n-        continue; \n+    loop$0 {\n+        break;\n+        continue;\n     }\n }\"#,\n             r#\"\n fn main() {\n-    'loop: loop { \n-        break 'loop; \n-        continue 'loop; \n+    'loop: loop {\n+        break 'loop;\n+        continue 'loop;\n     }\n }\"#,\n         );\n@@ -93,9 +100,9 @@ fn main() {\n             add_label_to_loop,\n             r#\"\n fn main() {\n-    loop$0 { \n-        break; \n-        continue; \n+    loop$0 {\n+        break;\n+        continue;\n         loop {\n             break;\n             continue;\n@@ -104,9 +111,9 @@ fn main() {\n }\"#,\n             r#\"\n fn main() {\n-    'loop: loop { \n-        break 'loop; \n-        continue 'loop; \n+    'loop: loop {\n+        break 'loop;\n+        continue 'loop;\n         loop {\n             break;\n             continue;\n@@ -122,9 +129,9 @@ fn main() {\n             add_label_to_loop,\n             r#\"\n fn main() {\n-    loop { \n-        break; \n-        continue; \n+    loop {\n+        break;\n+        continue;\n         loop$0 {\n             break;\n             continue;\n@@ -133,14 +140,28 @@ fn main() {\n }\"#,\n             r#\"\n fn main() {\n-    loop { \n-        break; \n-        continue; \n+    loop {\n+        break;\n+        continue;\n         'loop: loop {\n             break 'loop;\n             continue 'loop;\n         }\n     }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn do_not_add_label_if_exists() {\n+        check_assist_not_applicable(\n+            add_label_to_loop,\n+            r#\"\n+fn main() {\n+    'loop: loop$0 {\n+        break 'loop;\n+        continue 'loop;\n+    }\n }\"#,\n         );\n     }"}, {"sha": "a519c9b8253d6020f915e0953d3bb8fc97f943af", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0121cc1e2977c215d7f5222b33a3aa1def664226/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0121cc1e2977c215d7f5222b33a3aa1def664226/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=0121cc1e2977c215d7f5222b33a3aa1def664226", "patch": "@@ -102,6 +102,29 @@ impl Trait<u32> for () {\n     )\n }\n \n+#[test]\n+fn doctest_add_label_to_loop() {\n+    check_doc_test(\n+        \"add_label_to_loop\",\n+        r#####\"\n+fn main() {\n+    loop$0 {\n+        break;\n+        continue;\n+    }\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    'loop: loop {\n+        break 'loop;\n+        continue 'loop;\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_add_lifetime_to_type() {\n     check_doc_test("}]}