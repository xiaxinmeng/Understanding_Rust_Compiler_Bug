{"sha": "636de8313d27d459b36a208326f9907b41da1c16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNmRlODMxM2QyN2Q0NTliMzZhMjA4MzI2Zjk5MDdiNDFkYTFjMTY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-04-05T04:24:18Z"}, "committer": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-04-05T04:24:18Z"}, "message": "Put imports list on the next line if it exceeds max width", "tree": {"sha": "0b8a30b9c70d71487f3e3203e6bb21dc77662c37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b8a30b9c70d71487f3e3203e6bb21dc77662c37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/636de8313d27d459b36a208326f9907b41da1c16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/636de8313d27d459b36a208326f9907b41da1c16", "html_url": "https://github.com/rust-lang/rust/commit/636de8313d27d459b36a208326f9907b41da1c16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/636de8313d27d459b36a208326f9907b41da1c16/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f615af44ee399fc29db4e137214fec77b85f82f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f615af44ee399fc29db4e137214fec77b85f82f", "html_url": "https://github.com/rust-lang/rust/commit/8f615af44ee399fc29db4e137214fec77b85f82f"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "5b7c16ecc75aa2fdb13432c5f4ffbfec4901426d", "filename": "src/imports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/636de8313d27d459b36a208326f9907b41da1c16/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636de8313d27d459b36a208326f9907b41da1c16/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=636de8313d27d459b36a208326f9907b41da1c16", "patch": "@@ -366,7 +366,8 @@ fn rewrite_nested_use_tree(\n     };\n     let list_str = write_list(&items[first_index..], &fmt)?;\n \n-    let result = if list_str.contains('\\n') && context.config.imports_indent() == IndentStyle::Block\n+    let result = if (list_str.contains('\\n') || list_str.len() > remaining_width)\n+        && context.config.imports_indent() == IndentStyle::Block\n     {\n         format!(\n             \"{}{{\\n{}{}\\n{}}}\","}]}