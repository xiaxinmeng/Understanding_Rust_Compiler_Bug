{"sha": "29630cea47506125fb0b94318104b1b93a59b052", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NjMwY2VhNDc1MDYxMjVmYjBiOTQzMTgxMDRiMWI5M2E1OWIwNTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-08T01:19:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-08T01:19:24Z"}, "message": "Auto merge of #71992 - Dylan-DPC:rollup-29qjvpe, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #70733 (Add Arc::{incr,decr}_strong_count)\n - #71598 (improve Drop documentation)\n - #71783 (Detect errors caused by `async` block in 2015 edition)\n - #71903 (reword \"possible candidate\" import suggestion)\n - #71960 (Fix E0284 to not use incorrect wording)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "07ea865c749607ac15aa709e08b41953fc85adde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07ea865c749607ac15aa709e08b41953fc85adde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29630cea47506125fb0b94318104b1b93a59b052", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29630cea47506125fb0b94318104b1b93a59b052", "html_url": "https://github.com/rust-lang/rust/commit/29630cea47506125fb0b94318104b1b93a59b052", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29630cea47506125fb0b94318104b1b93a59b052/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eefa6783c0c5160ca20becf0c9bd2e73048a7db", "url": "https://api.github.com/repos/rust-lang/rust/commits/1eefa6783c0c5160ca20becf0c9bd2e73048a7db", "html_url": "https://github.com/rust-lang/rust/commit/1eefa6783c0c5160ca20becf0c9bd2e73048a7db"}, {"sha": "14cbbf382053ad0844aa9c867f68cc89d8f43ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/14cbbf382053ad0844aa9c867f68cc89d8f43ae1", "html_url": "https://github.com/rust-lang/rust/commit/14cbbf382053ad0844aa9c867f68cc89d8f43ae1"}], "stats": {"total": 714, "additions": 492, "deletions": 222}, "files": [{"sha": "19d289c87fd9f2839b810bb0c74f95a269599425", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -776,6 +776,79 @@ impl<T: ?Sized> Arc<T> {\n         this.inner().strong.load(SeqCst)\n     }\n \n+    /// Increments the strong reference count on the `Arc<T>` associated with the\n+    /// provided pointer by one.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The pointer must have been obtained through `Arc::into_raw`, and the\n+    /// associated `Arc` instance must be valid (i.e. the strong count must be at\n+    /// least 1) for the duration of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(arc_mutate_strong_count)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let five = Arc::new(5);\n+    ///\n+    /// unsafe {\n+    ///     let ptr = Arc::into_raw(five);\n+    ///     Arc::incr_strong_count(ptr);\n+    ///\n+    ///     // This assertion is deterministic because we haven't shared\n+    ///     // the `Arc` between threads.\n+    ///     let five = Arc::from_raw(ptr);\n+    ///     assert_eq!(2, Arc::strong_count(&five));\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"arc_mutate_strong_count\", issue = \"71983\")]\n+    pub unsafe fn incr_strong_count(ptr: *const T) {\n+        // Retain Arc, but don't touch refcount by wrapping in ManuallyDrop\n+        let arc = mem::ManuallyDrop::new(Arc::<T>::from_raw(ptr));\n+        // Now increase refcount, but don't drop new refcount either\n+        let _arc_clone: mem::ManuallyDrop<_> = arc.clone();\n+    }\n+\n+    /// Decrements the strong reference count on the `Arc<T>` associated with the\n+    /// provided pointer by one.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The pointer must have been obtained through `Arc::into_raw`, and the\n+    /// associated `Arc` instance must be valid (i.e. the strong count must be at\n+    /// least 1) when invoking this method. This method can be used to release the final\n+    /// `Arc` and backing storage, but **should not** be called after the final `Arc` has been\n+    /// released.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(arc_mutate_strong_count)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let five = Arc::new(5);\n+    ///\n+    /// unsafe {\n+    ///     let ptr = Arc::into_raw(five);\n+    ///     Arc::decr_strong_count(ptr);\n+    ///\n+    ///     // This assertion is deterministic because we haven't shared\n+    ///     // the `Arc` between threads.\n+    ///     let five = Arc::from_raw(ptr);\n+    ///     assert_eq!(0, Arc::strong_count(&five));\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"arc_mutate_strong_count\", issue = \"71983\")]\n+    pub unsafe fn decr_strong_count(ptr: *const T) {\n+        mem::drop(Arc::from_raw(ptr));\n+    }\n+\n     #[inline]\n     fn inner(&self) -> &ArcInner<T> {\n         // This unsafety is ok because while this arc is alive we're guaranteed"}, {"sha": "745444a152e1b737ba4b399ee3970e424430f9fe", "filename": "src/liballoc/task.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Fliballoc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Fliballoc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftask.rs?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -1,6 +1,6 @@\n #![unstable(feature = \"wake_trait\", issue = \"69912\")]\n //! Types and Traits for working with asynchronous tasks.\n-use core::mem::{self, ManuallyDrop};\n+use core::mem::ManuallyDrop;\n use core::task::{RawWaker, RawWakerVTable, Waker};\n \n use crate::sync::Arc;\n@@ -60,9 +60,11 @@ impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for RawWaker {\n fn raw_waker<W: Wake + Send + Sync + 'static>(waker: Arc<W>) -> RawWaker {\n     // Increment the reference count of the arc to clone it.\n     unsafe fn clone_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) -> RawWaker {\n-        let waker: Arc<W> = Arc::from_raw(waker as *const W);\n-        mem::forget(Arc::clone(&waker));\n-        raw_waker(waker)\n+        Arc::incr_strong_count(waker as *const W);\n+        RawWaker::new(\n+            waker as *const (),\n+            &RawWakerVTable::new(clone_waker::<W>, wake::<W>, wake_by_ref::<W>, drop_waker::<W>),\n+        )\n     }\n \n     // Wake by value, moving the Arc into the Wake::wake function\n@@ -79,7 +81,7 @@ fn raw_waker<W: Wake + Send + Sync + 'static>(waker: Arc<W>) -> RawWaker {\n \n     // Decrement the reference count of the Arc on drop\n     unsafe fn drop_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) {\n-        mem::drop(Arc::from_raw(waker as *const W));\n+        Arc::decr_strong_count(waker as *const W);\n     }\n \n     RawWaker::new("}, {"sha": "06cfc36363615ee56515bcb64e439bea37676484", "filename": "src/libcore/ops/drop.rs", "status": "modified", "additions": 98, "deletions": 44, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Flibcore%2Fops%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Flibcore%2Fops%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fdrop.rs?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -1,85 +1,139 @@\n-/// Used to run some code when a value goes out of scope.\n-/// This is sometimes called a 'destructor'.\n+/// Custom code within the destructor.\n ///\n-/// When a value goes out of scope, it will have its `drop` method called if\n-/// its type implements `Drop`. Then, any fields the value contains will also\n-/// be dropped recursively.\n+/// When a value is no longer needed, Rust will run a \"destructor\" on that value.\n+/// The most common way that a value is no longer needed is when it goes out of\n+/// scope. Destructors may still run in other circumstances, but we're going to\n+/// focus on scope for the examples here. To learn about some of those other cases,\n+/// please see [the reference] section on destructors.\n ///\n-/// Because of this recursive dropping, you do not need to implement this trait\n-/// unless your type needs its own destructor logic.\n+/// [the reference]: https://doc.rust-lang.org/reference/destructors.html\n ///\n-/// Refer to [the chapter on `Drop` in *The Rust Programming Language*][book]\n-/// for some more elaboration.\n+/// This destructor consists of two components:\n+/// - A call to `Drop::drop` for that value, if this special `Drop` trait is implemented for its type.\n+/// - The automatically generated \"drop glue\" which recursively calls the destructors\n+///     of the all fields of this value.\n ///\n-/// [book]: ../../book/ch15-03-drop.html\n+/// As Rust automatically calls the destructors of all contained fields,\n+/// you don't have to implement `Drop` in most cases. But there are some cases where\n+/// it is useful, for example for types which directly manage a resource.\n+/// That resource may be memory, it may be a file descriptor, it may be a network socket.\n+/// Once a value of that type is no longer going to be used, it should \"clean up\" its\n+/// resource by freeing the memory or closing the file or socket. This is\n+/// the job of a destructor, and therefore the job of `Drop::drop`.\n ///\n-/// # Examples\n+/// ## Examples\n ///\n-/// ## Implementing `Drop`\n+/// To see destructors in action, let's take a look at the following program:\n ///\n-/// The `drop` method is called when `_x` goes out of scope, and therefore\n-/// `main` prints `Dropping!`.\n-///\n-/// ```\n+/// ```rust\n /// struct HasDrop;\n ///\n /// impl Drop for HasDrop {\n ///     fn drop(&mut self) {\n-///         println!(\"Dropping!\");\n+///         println!(\"Dropping HasDrop!\");\n+///     }\n+/// }\n+///\n+/// struct HasTwoDrops {\n+///     one: HasDrop,\n+///     two: HasDrop,\n+/// }\n+///\n+/// impl Drop for HasTwoDrops {\n+///     fn drop(&mut self) {\n+///         println!(\"Dropping HasTwoDrops!\");\n ///     }\n /// }\n ///\n /// fn main() {\n-///     let _x = HasDrop;\n+///     let _x = HasTwoDrops { one: HasDrop, two: HasDrop };\n+///     println!(\"Running!\");\n /// }\n /// ```\n ///\n-/// ## Dropping is done recursively\n+/// Rust will first call `Drop::drop` for `_x` and then for both `_x.one` and `_x.two`,\n+/// meaning that running this will print\n ///\n-/// When `outer` goes out of scope, the `drop` method will be called first for\n-/// `Outer`, then for `Inner`. Therefore, `main` prints `Dropping Outer!` and\n-/// then `Dropping Inner!`.\n+/// ```text\n+/// Running!\n+/// Dropping HasTwoDrops!\n+/// Dropping HasDrop!\n+/// Dropping HasDrop!\n+/// ```\n+///\n+/// Even if we remove the implementation of `Drop` for `HasTwoDrop`, the destructors of its fields are still called.\n+/// This would result in\n ///\n+/// ```test\n+/// Running!\n+/// Dropping HasDrop!\n+/// Dropping HasDrop!\n /// ```\n-/// struct Inner;\n-/// struct Outer(Inner);\n ///\n-/// impl Drop for Inner {\n+/// ## You cannot call `Drop::drop` yourself\n+///\n+/// Because `Drop::drop` is used to clean up a value, it may be dangerous to use this value after\n+/// the method has been called. As `Drop::drop` does not take ownership of its input,\n+/// Rust prevents misuse by not allowing you to call `Drop::drop` directly.\n+///\n+/// In other words, if you tried to explicitly call `Drop::drop` in the above example, you'd get a compiler error.\n+///\n+/// If you'd like explicitly call the destructor of a value, [`std::mem::drop`] can be used instead.\n+///\n+/// [`std::mem::drop`]: ../../std/mem/fn.drop.html\n+///\n+/// ## Drop order\n+///\n+/// Which of our two `HasDrop` drops first, though? For structs, it's the same\n+/// order that they're declared: first `one`, then `two`. If you'd like to try\n+/// this yourself, you can modify `HasDrop` above to contain some data, like an\n+/// integer, and then use it in the `println!` inside of `Drop`. This behavior is\n+/// guaranteed by the language.\n+///\n+/// Unlike for structs, local variables are dropped in reverse order:\n+///\n+/// ```rust\n+/// struct Foo;\n+///\n+/// impl Drop for Foo {\n ///     fn drop(&mut self) {\n-///         println!(\"Dropping Inner!\");\n+///         println!(\"Dropping Foo!\")\n ///     }\n /// }\n ///\n-/// impl Drop for Outer {\n+/// struct Bar;\n+///\n+/// impl Drop for Bar {\n ///     fn drop(&mut self) {\n-///         println!(\"Dropping Outer!\");\n+///         println!(\"Dropping Bar!\")\n ///     }\n /// }\n ///\n /// fn main() {\n-///     let _x = Outer(Inner);\n+///     let _foo = Foo;\n+///     let _bar = Bar;\n /// }\n /// ```\n ///\n-/// ## Variables are dropped in reverse order of declaration\n-///\n-/// `_first` is declared first and `_second` is declared second, so `main` will\n-/// print `Declared second!` and then `Declared first!`.\n+/// This will print\n ///\n+/// ```text\n+/// Dropping Bar!\n+/// Dropping Foo!\n /// ```\n-/// struct PrintOnDrop(&'static str);\n ///\n-/// impl Drop for PrintOnDrop {\n-///     fn drop(&mut self) {\n-///         println!(\"{}\", self.0);\n-///     }\n-/// }\n+/// Please see [the reference] for the full rules.\n ///\n-/// fn main() {\n-///     let _first = PrintOnDrop(\"Declared first!\");\n-///     let _second = PrintOnDrop(\"Declared second!\");\n-/// }\n-/// ```\n+/// [the reference]: https://doc.rust-lang.org/reference/destructors.html\n+///\n+/// ## `Copy` and `Drop` are exclusive\n+///\n+/// You cannot implement both [`Copy`] and `Drop` on the same type. Types that\n+/// are `Copy` get implicitly duplicated by the compiler, making it very\n+/// hard to predict when, and how often destructors will be executed. As such,\n+/// these types cannot have destructors.\n+///\n+/// [`Copy`]: ../../std/marker/trait.Copy.html\n #[lang = \"drop\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Drop {"}, {"sha": "b3bb72554e9c4a985226164bcc6efcc53126787b", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::util::classify;\n use rustc_ast::util::literal::LitError;\n use rustc_ast::util::parser::{prec_let_scrutinee_needs_par, AssocOp, Fixity};\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{Applicability, PResult};\n+use rustc_errors::{Applicability, DiagnosticBuilder, PResult};\n use rustc_span::source_map::{self, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::mem;\n@@ -1068,8 +1068,8 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_path_start_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n-        let lo = self.token.span;\n         let path = self.parse_path(PathStyle::Expr)?;\n+        let lo = path.span;\n \n         // `!`, as an operator, is prefix, so we know this isn't that.\n         let (hi, kind) = if self.eat(&token::Not) {\n@@ -1081,7 +1081,7 @@ impl<'a> Parser<'a> {\n             };\n             (self.prev_token.span, ExprKind::MacCall(mac))\n         } else if self.check(&token::OpenDelim(token::Brace)) {\n-            if let Some(expr) = self.maybe_parse_struct_expr(lo, &path, &attrs) {\n+            if let Some(expr) = self.maybe_parse_struct_expr(&path, &attrs) {\n                 return expr;\n             } else {\n                 (path.span, ExprKind::Path(None, path))\n@@ -1895,16 +1895,15 @@ impl<'a> Parser<'a> {\n \n     fn maybe_parse_struct_expr(\n         &mut self,\n-        lo: Span,\n         path: &ast::Path,\n         attrs: &AttrVec,\n     ) -> Option<PResult<'a, P<Expr>>> {\n         let struct_allowed = !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL);\n         if struct_allowed || self.is_certainly_not_a_block() {\n             // This is a struct literal, but we don't can't accept them here.\n-            let expr = self.parse_struct_expr(lo, path.clone(), attrs.clone());\n+            let expr = self.parse_struct_expr(path.clone(), attrs.clone());\n             if let (Ok(expr), false) = (&expr, struct_allowed) {\n-                self.error_struct_lit_not_allowed_here(lo, expr.span);\n+                self.error_struct_lit_not_allowed_here(path.span, expr.span);\n             }\n             return Some(expr);\n         }\n@@ -1923,17 +1922,23 @@ impl<'a> Parser<'a> {\n \n     pub(super) fn parse_struct_expr(\n         &mut self,\n-        lo: Span,\n         pth: ast::Path,\n         mut attrs: AttrVec,\n     ) -> PResult<'a, P<Expr>> {\n-        let struct_sp = lo.to(self.prev_token.span);\n         self.bump();\n         let mut fields = Vec::new();\n         let mut base = None;\n+        let mut recover_async = false;\n \n         attrs.extend(self.parse_inner_attributes()?);\n \n+        let mut async_block_err = |e: &mut DiagnosticBuilder<'_>, span: Span| {\n+            recover_async = true;\n+            e.span_label(span, \"`async` blocks are only allowed in the 2018 edition\");\n+            e.help(\"set `edition = \\\"2018\\\"` in `Cargo.toml`\");\n+            e.note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\");\n+        };\n+\n         while self.token != token::CloseDelim(token::Brace) {\n             if self.eat(&token::DotDot) {\n                 let exp_span = self.prev_token.span;\n@@ -1952,7 +1957,11 @@ impl<'a> Parser<'a> {\n             let parsed_field = match self.parse_field() {\n                 Ok(f) => Some(f),\n                 Err(mut e) => {\n-                    e.span_label(struct_sp, \"while parsing this struct\");\n+                    if pth == kw::Async {\n+                        async_block_err(&mut e, pth.span);\n+                    } else {\n+                        e.span_label(pth.span, \"while parsing this struct\");\n+                    }\n                     e.emit();\n \n                     // If the next token is a comma, then try to parse\n@@ -1976,15 +1985,19 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n                 Err(mut e) => {\n-                    e.span_label(struct_sp, \"while parsing this struct\");\n-                    if let Some(f) = recovery_field {\n-                        fields.push(f);\n-                        e.span_suggestion(\n-                            self.prev_token.span.shrink_to_hi(),\n-                            \"try adding a comma\",\n-                            \",\".into(),\n-                            Applicability::MachineApplicable,\n-                        );\n+                    if pth == kw::Async {\n+                        async_block_err(&mut e, pth.span);\n+                    } else {\n+                        e.span_label(pth.span, \"while parsing this struct\");\n+                        if let Some(f) = recovery_field {\n+                            fields.push(f);\n+                            e.span_suggestion(\n+                                self.prev_token.span.shrink_to_hi(),\n+                                \"try adding a comma\",\n+                                \",\".into(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n                     }\n                     e.emit();\n                     self.recover_stmt_(SemiColonMode::Comma, BlockMode::Ignore);\n@@ -1993,9 +2006,10 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        let span = lo.to(self.token.span);\n+        let span = pth.span.to(self.token.span);\n         self.expect(&token::CloseDelim(token::Brace))?;\n-        Ok(self.mk_expr(span, ExprKind::Struct(pth, fields, base), attrs))\n+        let expr = if recover_async { ExprKind::Err } else { ExprKind::Struct(pth, fields, base) };\n+        Ok(self.mk_expr(span, expr, attrs))\n     }\n \n     /// Use in case of error after field-looking code: `S { foo: () with a }`."}, {"sha": "7fb814973e2504b51ea17bea1bb22711d5e7bbb0", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -1550,7 +1550,7 @@ impl<'a> Parser<'a> {\n         if span.rust_2015() {\n             let diag = self.diagnostic();\n             struct_span_err!(diag, span, E0670, \"`async fn` is not permitted in the 2015 edition\")\n-                .note(\"to use `async fn`, switch to Rust 2018\")\n+                .span_label(span, \"to use `async fn`, switch to Rust 2018\")\n                 .help(\"set `edition = \\\"2018\\\"` in `Cargo.toml`\")\n                 .note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\")\n                 .emit();"}, {"sha": "849193151c33567dbd15eef31b8b80fbd5a3495a", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -79,7 +79,7 @@ impl<'a> Parser<'a> {\n         }\n \n         let expr = if self.check(&token::OpenDelim(token::Brace)) {\n-            self.parse_struct_expr(lo, path, AttrVec::new())?\n+            self.parse_struct_expr(path, AttrVec::new())?\n         } else {\n             let hi = self.prev_token.span;\n             self.mk_expr(lo.to(hi), ExprKind::Path(None, path), AttrVec::new())"}, {"sha": "8e82480c6305d64ed11bfdf7b2a9256448cbd9ba", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -47,6 +47,7 @@ impl TypoSuggestion {\n /// A free importable items suggested in case of resolution failure.\n crate struct ImportSuggestion {\n     pub did: Option<DefId>,\n+    pub descr: &'static str,\n     pub path: Path,\n }\n \n@@ -652,7 +653,7 @@ impl<'a> Resolver<'a> {\n                                 Res::Def(DefKind::Ctor(..), did) => this.parent(did),\n                                 _ => res.opt_def_id(),\n                             };\n-                            candidates.push(ImportSuggestion { did, path });\n+                            candidates.push(ImportSuggestion { did, descr: res.descr(), path });\n                         }\n                     }\n                 }\n@@ -1445,29 +1446,31 @@ fn find_span_immediately_after_crate_name(\n crate fn show_candidates(\n     err: &mut DiagnosticBuilder<'_>,\n     // This is `None` if all placement locations are inside expansions\n-    span: Option<Span>,\n+    use_placement_span: Option<Span>,\n     candidates: &[ImportSuggestion],\n     better: bool,\n     found_use: bool,\n ) {\n     if candidates.is_empty() {\n         return;\n     }\n+\n     // we want consistent results across executions, but candidates are produced\n     // by iterating through a hash map, so make sure they are ordered:\n     let mut path_strings: Vec<_> =\n         candidates.iter().map(|c| path_names_to_string(&c.path)).collect();\n     path_strings.sort();\n     path_strings.dedup();\n \n-    let better = if better { \"better \" } else { \"\" };\n-    let msg_diff = match path_strings.len() {\n-        1 => \" is found in another module, you can import it\",\n-        _ => \"s are found in other modules, you can import them\",\n+    let (determiner, kind) = if candidates.len() == 1 {\n+        (\"this\", candidates[0].descr)\n+    } else {\n+        (\"one of these\", \"items\")\n     };\n-    let msg = format!(\"possible {}candidate{} into scope\", better, msg_diff);\n+    let instead = if better { \" instead\" } else { \"\" };\n+    let msg = format!(\"consider importing {} {}{}\", determiner, kind, instead);\n \n-    if let Some(span) = span {\n+    if let Some(span) = use_placement_span {\n         for candidate in &mut path_strings {\n             // produce an additional newline to separate the new use statement\n             // from the directly following item."}, {"sha": "6041a56d366d33666a9b2ff8d180ad8930f2a7c1", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -151,7 +151,11 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n             };\n             (\n                 format!(\"cannot find {} `{}` in {}{}\", expected, item_str, mod_prefix, mod_str),\n-                format!(\"not found in {}\", mod_str),\n+                if path_str == \"async\" && expected.starts_with(\"struct\") {\n+                    \"`async` blocks are only allowed in the 2018 edition\".to_string()\n+                } else {\n+                    format!(\"not found in {}\", mod_str)\n+                },\n                 item_span,\n                 false,\n             )\n@@ -873,7 +877,10 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                     let module_def_id = module.def_id().unwrap();\n                     if module_def_id == def_id {\n                         let path = Path { span: name_binding.span, segments: path_segments };\n-                        result = Some((module, ImportSuggestion { did: Some(def_id), path }));\n+                        result = Some((\n+                            module,\n+                            ImportSuggestion { did: Some(def_id), descr: \"module\", path },\n+                        ));\n                     } else {\n                         // add the module to the lookup\n                         if seen_modules.insert(module_def_id) {"}, {"sha": "6c51afa96605ea6aaf7d1740da2ebddb85602a92", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -1491,12 +1491,26 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ty::Predicate::Projection(ref data) => {\n                 let trait_ref = data.to_poly_trait_ref(self.tcx);\n                 let self_ty = trait_ref.self_ty();\n+                let ty = data.skip_binder().ty;\n                 if predicate.references_error() {\n                     return;\n                 }\n-                let mut err = self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0284);\n-                err.note(&format!(\"cannot satisfy `{}`\", predicate));\n-                err\n+                if self_ty.needs_infer() && ty.needs_infer() {\n+                    // We do this for the `foo.collect()?` case to produce a suggestion.\n+                    let mut err = self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0284);\n+                    err.note(&format!(\"cannot satisfy `{}`\", predicate));\n+                    err\n+                } else {\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess,\n+                        span,\n+                        E0284,\n+                        \"type annotations needed: cannot satisfy `{}`\",\n+                        predicate,\n+                    );\n+                    err.span_label(span, &format!(\"cannot satisfy `{}`\", predicate));\n+                    err\n+                }\n             }\n \n             _ => {"}, {"sha": "b8321ce5b25379121eb80601b6e91e069e7ac2f4", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -1,22 +1,18 @@\n-error[E0284]: type annotations needed\n+error[E0284]: type annotations needed: cannot satisfy `<Self as std::iter::Iterator>::Item == i32`\n   --> $DIR/associated-types-overridden-binding.rs:4:12\n    |\n LL | trait Foo: Iterator<Item = i32> {}\n    |                     ---------- required by this bound in `Foo`\n LL | trait Bar: Foo<Item = u32> {}\n-   |            ^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n-   |\n-   = note: cannot satisfy `<Self as std::iter::Iterator>::Item == i32`\n+   |            ^^^^^^^^^^^^^^^ cannot satisfy `<Self as std::iter::Iterator>::Item == i32`\n \n-error[E0284]: type annotations needed\n+error[E0284]: type annotations needed: cannot satisfy `<Self as std::iter::Iterator>::Item == i32`\n   --> $DIR/associated-types-overridden-binding.rs:7:21\n    |\n LL | trait I32Iterator = Iterator<Item = i32>;\n    |                              ---------- required by this bound in `I32Iterator`\n LL | trait U32Iterator = I32Iterator<Item = u32>;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n-   |\n-   = note: cannot satisfy `<Self as std::iter::Iterator>::Item == i32`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^ cannot satisfy `<Self as std::iter::Iterator>::Item == i32`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8bffeb2131dec0eaa12dfda85733e70d717409a2", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -2,89 +2,80 @@ error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:3:1\n    |\n LL | async fn foo() {}\n-   | ^^^^^\n+   | ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:5:12\n    |\n LL | fn baz() { async fn foo() {} }\n-   |            ^^^^^\n+   |            ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:7:1\n    |\n LL | async fn async_baz() {\n-   | ^^^^^\n+   | ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:8:5\n    |\n LL |     async fn bar() {}\n-   |     ^^^^^\n+   |     ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:14:5\n    |\n LL |     async fn foo() {}\n-   |     ^^^^^\n+   |     ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:18:5\n    |\n LL |     async fn foo() {}\n-   |     ^^^^^\n+   |     ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:36:9\n    |\n LL |         async fn bar() {}\n-   |         ^^^^^\n+   |         ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:26:9\n    |\n LL |         async fn foo() {}\n-   |         ^^^^^\n+   |         ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:31:13\n    |\n LL |             async fn bar() {}\n-   |             ^^^^^\n+   |             ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n "}, {"sha": "d501200d73cec9c2b536e277a58fdb1fc6a1c73e", "filename": "src/test/ui/class-missing-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fclass-missing-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fclass-missing-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-missing-self.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -10,7 +10,7 @@ error[E0425]: cannot find function `sleep` in this scope\n LL |       sleep();\n    |       ^^^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this function\n    |\n LL | use std::thread::sleep;\n    |"}, {"sha": "c3aa135f77d5b27d70b4678bf92337299f588d90", "filename": "src/test/ui/crate-in-paths.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fcrate-in-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fcrate-in-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-in-paths.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0425]: cannot find value `Foo` in this scope\n LL |     Foo;\n    |     ^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this unit struct\n    |\n LL | use crate::bar::Foo;\n    |"}, {"sha": "9429a0b576532e017c2d4307beabb4f8a9dfd536", "filename": "src/test/ui/did_you_mean/issue-56028-there-is-an-enum-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -22,7 +22,7 @@ error[E0425]: cannot find value `Set` in this scope\n LL | fn setup() -> Set { Set }\n    |                     ^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL | use AffixHeart::Set;\n    |"}, {"sha": "985606a6f254566e9fcccfd2821a16bc432a2dc2", "filename": "src/test/ui/editions/async-block-2015.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.rs?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -0,0 +1,30 @@\n+async fn foo() {\n+//~^ ERROR `async fn` is not permitted in the 2015 edition\n+//~| NOTE to use `async fn`, switch to Rust 2018\n+//~| HELP set `edition = \"2018\"` in `Cargo.toml`\n+//~| NOTE for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+    let x = async {};\n+    //~^ ERROR cannot find struct, variant or union type `async` in this scope\n+    //~| NOTE `async` blocks are only allowed in the 2018 edition\n+    let y = async { //~ NOTE `async` blocks are only allowed in the 2018 edition\n+        let x = 42;\n+        //~^ ERROR expected identifier, found keyword `let`\n+        //~| NOTE expected identifier, found keyword\n+        //~| HELP set `edition = \"2018\"` in `Cargo.toml`\n+        //~| NOTE for more on editions, read https://doc.rust-lang.org/edition-guide\n+        42\n+    };\n+    let z = async { //~ NOTE `async` blocks are only allowed in the 2018 edition\n+        42\n+        //~^ ERROR expected identifier, found `42`\n+        //~| NOTE expected identifier\n+        //~| HELP set `edition = \"2018\"` in `Cargo.toml`\n+        //~| NOTE for more on editions, read https://doc.rust-lang.org/edition-guide\n+    };\n+    y.await;\n+    z.await;\n+    x\n+}\n+\n+fn main() {}"}, {"sha": "8e5e5d8bfab9ac4787ac3ee3043ce540b3101d4f", "filename": "src/test/ui/editions/async-block-2015.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -0,0 +1,41 @@\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/async-block-2015.rs:1:1\n+   |\n+LL | async fn foo() {\n+   | ^^^^^ to use `async fn`, switch to Rust 2018\n+   |\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error: expected identifier, found keyword `let`\n+  --> $DIR/async-block-2015.rs:11:9\n+   |\n+LL |     let y = async {\n+   |             ----- `async` blocks are only allowed in the 2018 edition\n+LL |         let x = 42;\n+   |         ^^^ expected identifier, found keyword\n+   |\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error: expected identifier, found `42`\n+  --> $DIR/async-block-2015.rs:19:9\n+   |\n+LL |     let z = async {\n+   |             ----- `async` blocks are only allowed in the 2018 edition\n+LL |         42\n+   |         ^^ expected identifier\n+   |\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0422]: cannot find struct, variant or union type `async` in this scope\n+  --> $DIR/async-block-2015.rs:7:13\n+   |\n+LL |     let x = async {};\n+   |             ^^^^^ `async` blocks are only allowed in the 2018 edition\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0422, E0670.\n+For more information about an error, try `rustc --explain E0422`."}, {"sha": "995da6cc1f97591ed07fcd348edd2865d8082f9b", "filename": "src/test/ui/glob-resolve1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fglob-resolve1.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0425]: cannot find function `fpriv` in this scope\n LL |     fpriv();\n    |     ^^^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this function\n    |\n LL | use bar::fpriv;\n    |\n@@ -15,7 +15,7 @@ error[E0425]: cannot find function `epriv` in this scope\n LL |     epriv();\n    |     ^^^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this function\n    |\n LL | use bar::epriv;\n    |\n@@ -32,7 +32,7 @@ error[E0425]: cannot find value `C` in this scope\n LL |     C;\n    |     ^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this unit struct\n    |\n LL | use bar::C;\n    |\n@@ -56,7 +56,7 @@ help: an enum with a similar name exists\n    |\n LL |     foo::<B>();\n    |           ^\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this enum\n    |\n LL | use bar::A;\n    |\n@@ -74,7 +74,7 @@ help: an enum with a similar name exists\n    |\n LL |     foo::<B>();\n    |           ^\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this struct\n    |\n LL | use bar::C;\n    |\n@@ -92,7 +92,7 @@ help: an enum with a similar name exists\n    |\n LL |     foo::<B>();\n    |           ^\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this type alias\n    |\n LL | use bar::D;\n    |"}, {"sha": "8f6b7aca8fda8048e3b5892253e78a03d0c2fa7a", "filename": "src/test/ui/hygiene/globs.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0425]: cannot find function `f` in this scope\n LL |         f();\n    |         ^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing one of these items\n    |\n LL | use foo::f;\n    |\n@@ -23,7 +23,7 @@ LL | |     }\n    | |_____- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL | use bar::g;\n    |\n@@ -41,7 +41,7 @@ LL | n!(f);\n LL |         n!(f);\n    |            ^ not found in this scope\n    |\n-   = note: possible candidate is found in another module, you can import it into scope:\n+   = note: consider importing one of these items:\n            foo::f\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -54,7 +54,7 @@ LL | n!(f);\n LL |                 f\n    |                 ^ not found in this scope\n    |\n-   = note: possible candidate is found in another module, you can import it into scope:\n+   = note: consider importing one of these items:\n            foo::f\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "3b1a5e5f4ad0008e6c94a3fed663c0e9a989c7ad", "filename": "src/test/ui/impl-trait/universal_wrong_bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0404]: expected trait, found derive macro `Debug`\n LL | fn wants_debug(g: impl Debug) { }\n    |                        ^^^^^ not a trait\n    |\n-help: possible better candidate is found in another module, you can import it into scope\n+help: consider importing this trait instead\n    |\n LL | use std::fmt::Debug;\n    |\n@@ -15,7 +15,7 @@ error[E0404]: expected trait, found derive macro `Debug`\n LL | fn wants_display(g: impl Debug) { }\n    |                          ^^^^^ not a trait\n    |\n-help: possible better candidate is found in another module, you can import it into scope\n+help: consider importing this trait instead\n    |\n LL | use std::fmt::Debug;\n    |"}, {"sha": "30cb7a1df8071e388c1962399c374252f037c115", "filename": "src/test/ui/issues/issue-12028.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -1,10 +1,8 @@\n-error[E0284]: type annotations needed\n+error[E0284]: type annotations needed: cannot satisfy `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n   --> $DIR/issue-12028.rs:27:14\n    |\n LL |         self.input_stream(&mut stream);\n-   |              ^^^^^^^^^^^^ cannot infer type for type parameter `H` declared on the trait `StreamHash`\n-   |\n-   = note: cannot satisfy `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n+   |              ^^^^^^^^^^^^ cannot satisfy `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n \n error: aborting due to previous error\n "}, {"sha": "8bf40790f0b2492995d67acd2e9800899dba25ed", "filename": "src/test/ui/issues/issue-17546.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -24,7 +24,7 @@ error[E0573]: expected type, found variant `Result`\n LL |     fn new() -> Result<foo::MyEnum, String> {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a type\n    |\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL |     use std::fmt::Result;\n    |\n@@ -42,7 +42,7 @@ error[E0573]: expected type, found variant `Result`\n LL | fn new() -> Result<foo::MyEnum, String> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a type\n    |\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL | use std::fmt::Result;\n    |"}, {"sha": "8637e574c5ecb1b4dafdb523c348f05236daf9dd", "filename": "src/test/ui/issues/issue-35675.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -15,7 +15,7 @@ error[E0425]: cannot find function, tuple struct or tuple variant `Apple` in thi\n LL |     Apple(5)\n    |     ^^^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this tuple variant\n    |\n LL | use Fruit::Apple;\n    |\n@@ -35,7 +35,7 @@ error[E0425]: cannot find function, tuple struct or tuple variant `Apple` in thi\n LL |     Apple(5)\n    |     ^^^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this tuple variant\n    |\n LL | use Fruit::Apple;\n    |"}, {"sha": "5d008cf24dc903c8e43dacb53d91bf40898fa98b", "filename": "src/test/ui/issues/issue-37534.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0404]: expected trait, found derive macro `Hash`\n LL | struct Foo<T: ?Hash> { }\n    |                ^^^^ not a trait\n    |\n-help: possible better candidate is found in another module, you can import it into scope\n+help: consider importing this trait instead\n    |\n LL | use std::hash::Hash;\n    |"}, {"sha": "d2450ab125062b20131f638e608c53c1ad0fb7e8", "filename": "src/test/ui/issues/issue-38293.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-38293.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-38293.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38293.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -10,7 +10,7 @@ error[E0423]: expected function, found module `baz`\n LL |     baz();\n    |     ^^^ not a function\n    |\n-help: possible better candidate is found in another module, you can import it into scope\n+help: consider importing this function instead\n    |\n LL | use bar::baz;\n    |"}, {"sha": "e7e251e39c04fbcd02dea89abb726d4e2fc64ef0", "filename": "src/test/ui/issues/issue-42944.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -10,7 +10,7 @@ error[E0425]: cannot find function, tuple struct or tuple variant `B` in this sc\n LL |         B(());\n    |         ^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this tuple struct\n    |\n LL |     use foo::B;\n    |"}, {"sha": "ecee595d4ab6adb1b39526629fe4d31a8aa6d73e", "filename": "src/test/ui/issues/issue-4366-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0412]: cannot find type `Bar` in this scope\n LL |         fn sub() -> Bar { 1 }\n    |                     ^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this type alias\n    |\n LL |         use a::b::Bar;\n    |\n@@ -15,7 +15,7 @@ error[E0423]: expected function, found module `foo`\n LL |     foo();\n    |     ^^^ not a function\n    |\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL | use foo::foo;\n    |"}, {"sha": "a094180572daa702ec1d72c11b278bc4c0b9a69d", "filename": "src/test/ui/issues/issue-4366.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-4366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-4366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4366.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0425]: cannot find function `foo` in this scope\n LL |         fn sub() -> isize { foo(); 1 }\n    |                             ^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL |         use foo::foo;\n    |"}, {"sha": "7ec567a06f09dcf3694ddffca05188b708db21fe", "filename": "src/test/ui/issues/issue-50599.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50599.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0425]: cannot find value `LOG10_2` in module `std::f64`\n LL |     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize;\n    |                                                ^^^^^^^ not found in `std::f64`\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL | use std::f32::consts::LOG10_2;\n    |"}, {"sha": "f1935ae253463ced17157bb2ff23fa66682e3b42", "filename": "src/test/ui/issues/issue-69455.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-69455.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-69455.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69455.rs?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -26,5 +26,5 @@ impl Test<u64> for u64 {\n \n fn main() {\n     let xs: Vec<u64> = vec![1, 2, 3];\n-    println!(\"{}\", 23u64.test(xs.iter().sum())); //~ ERROR: type annotations needed [E0284]\n+    println!(\"{}\", 23u64.test(xs.iter().sum())); //~ ERROR: type annotations needed\n }"}, {"sha": "430bbcabf83e81ad976abad619e2fb5f989d63aa", "filename": "src/test/ui/issues/issue-69455.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -1,16 +1,8 @@\n-error[E0284]: type annotations needed\n+error[E0284]: type annotations needed: cannot satisfy `<u64 as Test<_>>::Output == _`\n   --> $DIR/issue-69455.rs:29:26\n    |\n-LL |     type Output;\n-   |     ------------ `<Self as Test<Rhs>>::Output` defined here\n-...\n LL |     println!(\"{}\", 23u64.test(xs.iter().sum()));\n-   |                    ------^^^^-----------------\n-   |                    |     |\n-   |                    |     cannot infer type for type `u64`\n-   |                    this method call resolves to `<Self as Test<Rhs>>::Output`\n-   |\n-   = note: cannot satisfy `<u64 as Test<_>>::Output == _`\n+   |                          ^^^^ cannot satisfy `<u64 as Test<_>>::Output == _`\n \n error: aborting due to previous error\n "}, {"sha": "cc7f1fa0f558056be74f56ba0475e22f822d2bd7", "filename": "src/test/ui/issues/issue-69683.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-69683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-69683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69683.rs?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -0,0 +1,32 @@\n+pub trait Element<S> {\n+    type Array;\n+}\n+\n+impl<T> Element<()> for T {\n+    type Array = T;\n+}\n+\n+impl<T: Element<S>, S> Element<[S; 3]> for T {\n+    type Array = [T::Array; 3];\n+}\n+\n+trait Foo<I>\n+where\n+    u8: Element<I>,\n+{\n+    fn foo(self, x: <u8 as Element<I>>::Array);\n+}\n+\n+impl<I> Foo<I> for u16\n+where\n+    u8: Element<I>,\n+{\n+    fn foo(self, _: <u8 as Element<I>>::Array) {}\n+}\n+\n+fn main() {\n+    let b: [u8; 3] = [0u8; 3];\n+\n+    0u16.foo(b); //~ ERROR type annotations needed\n+    //<u16 as Foo<[(); 3]>>::foo(0u16, b);\n+}"}, {"sha": "776370331a4c9193cd2c568ea14b0a3eab1e6b47", "filename": "src/test/ui/issues/issue-69683.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -0,0 +1,9 @@\n+error[E0284]: type annotations needed: cannot satisfy `<u8 as Element<_>>::Array == [u8; 3]`\n+  --> $DIR/issue-69683.rs:30:10\n+   |\n+LL |     0u16.foo(b);\n+   |          ^^^ cannot satisfy `<u8 as Element<_>>::Array == [u8; 3]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0284`."}, {"sha": "c96cd598f0ce067dab8619991fc3ad9a72767a1c", "filename": "src/test/ui/issues/issue-71584.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-71584.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-71584.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71584.rs?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let n: u32 = 1;\n+    let mut d: u64 = 2;\n+    d = d % n.into(); //~ ERROR type annotations needed\n+}"}, {"sha": "c162d338a93be8aa0b020e2511393e95c19c2be8", "filename": "src/test/ui/issues/issue-71584.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-71584.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fissues%2Fissue-71584.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71584.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -0,0 +1,9 @@\n+error[E0284]: type annotations needed: cannot satisfy `<u64 as std::ops::Rem<_>>::Output == u64`\n+  --> $DIR/issue-71584.rs:4:11\n+   |\n+LL |     d = d % n.into();\n+   |           ^ cannot satisfy `<u64 as std::ops::Rem<_>>::Output == u64`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0284`."}, {"sha": "dce70545170305bbd1fb219ffdacdc246382aa19", "filename": "src/test/ui/lexical-scopes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Flexical-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Flexical-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexical-scopes.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0574]: expected struct, variant or union type, found type parameter `T`\n LL |     let t = T { i: 0 };\n    |             ^ not a struct, variant or union type\n    |\n-help: possible better candidate is found in another module, you can import it into scope\n+help: consider importing this struct instead\n    |\n LL | use T;\n    |"}, {"sha": "d0d91bb61f45706a5c6d45edd8137eef37f32848", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -94,7 +94,7 @@ mod foo {\n   ],\n   \"children\": [\n     {\n-      \"message\": \"possible candidates are found in other modules, you can import them into scope\",\n+      \"message\": \"consider importing one of these items\",\n       \"code\": null,\n       \"level\": \"help\",\n       \"spans\": [\n@@ -385,7 +385,7 @@ mod foo {\n \\u001b[0m\\u001b[1m\\u001b[38;5;12mLL\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0m    let x: Iter;\\u001b[0m\n \\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0m           \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mnot found in this scope\\u001b[0m\n \\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\n-\\u001b[0m\\u001b[1m\\u001b[38;5;14mhelp\\u001b[0m\\u001b[0m: possible candidates are found in other modules, you can import them into scope\\u001b[0m\n+\\u001b[0m\\u001b[1m\\u001b[38;5;14mhelp\\u001b[0m\\u001b[0m: consider importing one of these items\\u001b[0m\n \\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\n \\u001b[0m\\u001b[1m\\u001b[38;5;12mLL\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0muse std::collections::binary_heap::Iter;\\u001b[0m\n \\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m"}, {"sha": "8e064d980afabc9be0ee2284753099299eedfe39", "filename": "src/test/ui/macros/macro-outer-attributes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0425]: cannot find function `bar` in module `a`\n LL |     a::bar();\n    |        ^^^ not found in `a`\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this function\n    |\n LL | use b::bar;\n    |"}, {"sha": "c80055f00d7d9ecafee88a26261870d34491caaa", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -12,7 +12,7 @@ help: a tuple struct with a similar name exists\n    |\n LL |     check(m1::TS);\n    |               ^^\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL | use m2::S;\n    |\n@@ -35,7 +35,7 @@ help: a tuple struct with a similar name exists\n    |\n LL |     check(xm1::TS);\n    |                ^^\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL | use m2::S;\n    |\n@@ -57,7 +57,7 @@ help: a tuple variant with a similar name exists\n    |\n LL |     check(m7::TV);\n    |               ^^\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL | use m8::V;\n    |\n@@ -79,7 +79,7 @@ help: a tuple variant with a similar name exists\n    |\n LL |     check(xm7::TV);\n    |                ^^\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL | use m8::V;\n    |"}, {"sha": "8a26366d751d334e9886d796825b7ae860031f40", "filename": "src/test/ui/no-implicit-prelude-nested.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fno-implicit-prelude-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fno-implicit-prelude-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-implicit-prelude-nested.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0405]: cannot find trait `Add` in this scope\n LL |         impl Add for Test {}\n    |              ^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this trait\n    |\n LL |         use std::ops::Add;\n    |\n@@ -15,7 +15,7 @@ error[E0404]: expected trait, found derive macro `Clone`\n LL |         impl Clone for Test {}\n    |              ^^^^^ not a trait\n    |\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL |         use std::clone::Clone;\n    |\n@@ -28,7 +28,7 @@ error[E0405]: cannot find trait `Iterator` in this scope\n LL |         impl Iterator for Test {}\n    |              ^^^^^^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL |         use std::iter::Iterator;\n    |\n@@ -41,7 +41,7 @@ error[E0405]: cannot find trait `ToString` in this scope\n LL |         impl ToString for Test {}\n    |              ^^^^^^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL |         use std::prelude::v1::ToString;\n    |\n@@ -60,7 +60,7 @@ error[E0425]: cannot find function `drop` in this scope\n LL |             drop(2)\n    |             ^^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL |         use std::mem::drop;\n    |\n@@ -73,7 +73,7 @@ error[E0405]: cannot find trait `Add` in this scope\n LL |     impl Add for Test {}\n    |          ^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this trait\n    |\n LL |     use std::ops::Add;\n    |\n@@ -84,7 +84,7 @@ error[E0404]: expected trait, found derive macro `Clone`\n LL |     impl Clone for Test {}\n    |          ^^^^^ not a trait\n    |\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL |     use std::clone::Clone;\n    |\n@@ -97,7 +97,7 @@ error[E0405]: cannot find trait `Iterator` in this scope\n LL |     impl Iterator for Test {}\n    |          ^^^^^^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL |     use std::iter::Iterator;\n    |\n@@ -110,7 +110,7 @@ error[E0405]: cannot find trait `ToString` in this scope\n LL |     impl ToString for Test {}\n    |          ^^^^^^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL |     use std::prelude::v1::ToString;\n    |\n@@ -129,7 +129,7 @@ error[E0425]: cannot find function `drop` in this scope\n LL |         drop(2)\n    |         ^^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL |     use std::mem::drop;\n    |\n@@ -142,7 +142,7 @@ error[E0405]: cannot find trait `Add` in this scope\n LL |         impl Add for Test {}\n    |              ^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this trait\n    |\n LL |         use std::ops::Add;\n    |\n@@ -153,7 +153,7 @@ error[E0404]: expected trait, found derive macro `Clone`\n LL |         impl Clone for Test {}\n    |              ^^^^^ not a trait\n    |\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL |         use std::clone::Clone;\n    |\n@@ -166,7 +166,7 @@ error[E0405]: cannot find trait `Iterator` in this scope\n LL |         impl Iterator for Test {}\n    |              ^^^^^^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL |         use std::iter::Iterator;\n    |\n@@ -179,7 +179,7 @@ error[E0405]: cannot find trait `ToString` in this scope\n LL |         impl ToString for Test {}\n    |              ^^^^^^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL |         use std::prelude::v1::ToString;\n    |\n@@ -198,7 +198,7 @@ error[E0425]: cannot find function `drop` in this scope\n LL |             drop(2)\n    |             ^^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL |         use std::mem::drop;\n    |"}, {"sha": "9cda4f64c79d0adfa8dd1eb2162ab556e6483adf", "filename": "src/test/ui/no-implicit-prelude.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fno-implicit-prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fno-implicit-prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-implicit-prelude.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0405]: cannot find trait `Add` in this scope\n LL | impl Add for Test {}\n    |      ^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this trait\n    |\n LL | use std::ops::Add;\n    |\n@@ -15,7 +15,7 @@ error[E0404]: expected trait, found derive macro `Clone`\n LL | impl Clone for Test {}\n    |      ^^^^^ not a trait\n    |\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL | use std::clone::Clone;\n    |\n@@ -28,7 +28,7 @@ error[E0405]: cannot find trait `Iterator` in this scope\n LL | impl Iterator for Test {}\n    |      ^^^^^^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL | use std::iter::Iterator;\n    |\n@@ -41,7 +41,7 @@ error[E0405]: cannot find trait `ToString` in this scope\n LL | impl ToString for Test {}\n    |      ^^^^^^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL | use std::prelude::v1::ToString;\n    |\n@@ -60,7 +60,7 @@ error[E0425]: cannot find function `drop` in this scope\n LL |     drop(2)\n    |     ^^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL | use std::mem::drop;\n    |"}, {"sha": "5d4db8c31a2c310e8bc8da5f20ec70a53802b3ec", "filename": "src/test/ui/parser/circular_modules_main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -10,7 +10,7 @@ error[E0425]: cannot find function `say_hello` in module `circular_modules_hello\n LL |     circular_modules_hello::say_hello();\n    |                             ^^^^^^^^^ not found in `circular_modules_hello`\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this function\n    |\n LL | use circular_modules_hello::say_hello;\n    |"}, {"sha": "4d2af735fa6b940d3ec2db9477b87c9e0e227e9f", "filename": "src/test/ui/privacy/privacy-ns1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -11,7 +11,7 @@ help: a unit struct with a similar name exists\n    |\n LL |     Baz();\n    |     ^^^\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL | use foo1::Bar;\n    |\n@@ -33,7 +33,7 @@ help: a unit struct with a similar name exists\n    |\n LL |     Baz();\n    |     ^^^\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL | use foo1::Bar;\n    |\n@@ -55,7 +55,7 @@ help: a struct with a similar name exists\n    |\n LL |     let _x: Box<Baz>;\n    |                 ^^^\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL | use foo1::Bar;\n    |"}, {"sha": "f1aa523742ae43857a4d59ba37c512fcba6d378b", "filename": "src/test/ui/privacy/privacy-ns2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0423]: expected function, tuple struct or tuple variant, found trait `Bar\n LL |     Bar();\n    |     ^^^ not a function, tuple struct or tuple variant\n    |\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL | use foo1::Bar;\n    |\n@@ -26,7 +26,7 @@ help: a unit struct with a similar name exists\n    |\n LL |     Baz();\n    |     ^^^\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL | use foo1::Bar;\n    |\n@@ -45,7 +45,7 @@ help: use `=` if you meant to assign\n    |\n LL |     let _x = Bar();\n    |            ^\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL | use foo1::Bar;\n    |"}, {"sha": "b37f1bd393c6fd290f49531b5bcd6aa2e66f219f", "filename": "src/test/ui/proc-macro/attributes-on-modules-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -50,7 +50,7 @@ help: a type alias with a similar name exists\n    |\n LL |     type A = A;\n    |              ^\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this struct\n    |\n LL |     use Y;\n    |\n@@ -65,7 +65,7 @@ help: a type alias with a similar name exists\n    |\n LL | type A = A;\n    |          ^\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this struct\n    |\n LL | use m::X;\n    |"}, {"sha": "9b946b5e2449e5fa82d52f1cab7d5c3d05c7e228", "filename": "src/test/ui/proc-macro/generate-mod.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0412]: cannot find type `FromOutside` in this scope\n LL | generate_mod::check!();\n    | ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: possible candidate is found in another module, you can import it into scope:\n+   = note: consider importing this struct:\n            FromOutside\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -14,7 +14,7 @@ error[E0412]: cannot find type `Outer` in this scope\n LL | generate_mod::check!();\n    | ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: possible candidate is found in another module, you can import it into scope:\n+   = note: consider importing this struct:\n            Outer\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -24,7 +24,7 @@ error[E0412]: cannot find type `FromOutside` in this scope\n LL | #[generate_mod::check_attr]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: possible candidate is found in another module, you can import it into scope:\n+   = note: consider importing this struct:\n            FromOutside\n    = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -34,7 +34,7 @@ error[E0412]: cannot find type `OuterAttr` in this scope\n LL | #[generate_mod::check_attr]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: possible candidate is found in another module, you can import it into scope:\n+   = note: consider importing this struct:\n            OuterAttr\n    = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "81d2113c3b2dfaaa9f7a1f015cc42c6165ba8d5c", "filename": "src/test/ui/proc-macro/mixed-site-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -27,7 +27,7 @@ LL | pass_dollar_crate!();\n    | ^^^^^^^^^^^^^^^^^^^^^ not found in `$crate`\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this struct\n    |\n LL | use ItemUse;\n    |"}, {"sha": "621686dd292d64b53023ae6850e1ad3af21c8c1e", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0425]: cannot find value `A` in crate `namespaced_enums`\n LL |     let _ = namespaced_enums::A;\n    |                               ^ not found in `namespaced_enums`\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this unit variant\n    |\n LL | use namespaced_enums::Foo::A;\n    |\n@@ -15,7 +15,7 @@ error[E0425]: cannot find function, tuple struct or tuple variant `B` in crate `\n LL |     let _ = namespaced_enums::B(10);\n    |                               ^ not found in `namespaced_enums`\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this tuple variant\n    |\n LL | use namespaced_enums::Foo::B;\n    |\n@@ -26,7 +26,7 @@ error[E0422]: cannot find struct, variant or union type `C` in crate `namespaced\n LL |     let _ = namespaced_enums::C { a: 10 };\n    |                               ^ not found in `namespaced_enums`\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this variant\n    |\n LL | use namespaced_enums::Foo::C;\n    |"}, {"sha": "c47d22cef5f6ccdfd9342394e94bff2bf05e3fa1", "filename": "src/test/ui/resolve/issue-16058.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0574]: expected struct, variant or union type, found enum `Result`\n LL |         Result {\n    |         ^^^^^^ not a struct, variant or union type\n    |\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL | use std::fmt::Result;\n    |"}, {"sha": "034d0d01bfb803a9fc04b6adfd0e0ab5f1914a92", "filename": "src/test/ui/resolve/issue-17518.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0422]: cannot find struct, variant or union type `E` in this scope\n LL |     E { name: \"foobar\" };\n    |     ^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this variant\n    |\n LL | use SomeEnum::E;\n    |"}, {"sha": "d3e1953435359487261a14f34b7edf8736cf458e", "filename": "src/test/ui/resolve/issue-21221-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0405]: cannot find trait `Mul` in this scope\n LL | impl Mul for Foo {\n    |      ^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL | use mul1::Mul;\n    |\n@@ -19,7 +19,7 @@ error[E0412]: cannot find type `Mul` in this scope\n LL | fn getMul() -> Mul {\n    |                ^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL | use mul1::Mul;\n    |\n@@ -43,7 +43,7 @@ error[E0405]: cannot find trait `Div` in this scope\n LL | impl Div for Foo {\n    |      ^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this trait\n    |\n LL | use std::ops::Div;\n    |"}, {"sha": "f9263d2af5026993d80a4b10ea48caca218b4def", "filename": "src/test/ui/resolve/issue-21221-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0405]: cannot find trait `T` in this scope\n LL | impl T for Foo { }\n    |      ^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this trait\n    |\n LL | use foo::bar::T;\n    |"}, {"sha": "f12e5b09bacd014d0a51d137721b177b66a149c3", "filename": "src/test/ui/resolve/issue-21221-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0405]: cannot find trait `OuterTrait` in this scope\n LL | impl OuterTrait for Foo {}\n    |      ^^^^^^^^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this trait\n    |\n LL | use issue_21221_3::outer::OuterTrait;\n    |"}, {"sha": "fc15444d0c0fb5a6c1f298230da49d8d88678fe4", "filename": "src/test/ui/resolve/issue-21221-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0405]: cannot find trait `T` in this scope\n LL | impl T for Foo {}\n    |      ^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this trait\n    |\n LL | use issue_21221_4::T;\n    |"}, {"sha": "4d0b0af58a320a17701742135315e0ef0aff037b", "filename": "src/test/ui/resolve/issue-3907.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -9,7 +9,7 @@ help: you might have meant to use `#![feature(trait_alias)]` instead of a `type`\n    |\n LL | type Foo = dyn issue_3907::Foo;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: possible better candidate is found in another module, you can import it into scope\n+help: consider importing this trait instead\n    |\n LL | use issue_3907::Foo;\n    |"}, {"sha": "d9b1b9c59558a7a1f48e55376bcb4cd0b27031ee", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -67,7 +67,7 @@ LL |     let _: E = E::Struct;\n    |                ^^^^^^^^^\n LL |     let _: E = E::Unit;\n    |                ^^^^^^^\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL | use std::f32::consts::E;\n    |\n@@ -99,7 +99,7 @@ LL |     let _: E = E::Struct;\n    |                ^^^^^^^^^\n LL |     let _: E = E::Unit;\n    |                ^^^^^^^\n-help: possible better candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items instead\n    |\n LL | use std::f32::consts::E;\n    |\n@@ -130,7 +130,7 @@ help: an enum with a similar name exists\n    |\n LL |     let _: E = m::n::Z;\n    |            ^\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this enum\n    |\n LL | use m::n::Z;\n    |\n@@ -163,7 +163,7 @@ help: an enum with a similar name exists\n    |\n LL |     let _: E = m::n::Z::Fn;\n    |            ^\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this enum\n    |\n LL | use m::n::Z;\n    |\n@@ -181,7 +181,7 @@ help: an enum with a similar name exists\n    |\n LL |     let _: E = m::n::Z::Struct;\n    |            ^\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this enum\n    |\n LL | use m::n::Z;\n    |\n@@ -210,7 +210,7 @@ help: an enum with a similar name exists\n    |\n LL |     let _: E = m::n::Z::Unit {};\n    |            ^\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this enum\n    |\n LL | use m::n::Z;\n    |"}, {"sha": "e0305b129a8816ccff926d2240b5f371bacbe5bf", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -33,7 +33,7 @@ error[E0423]: expected value, found struct `xcrate::S`\n LL |     xcrate::S;\n    |     ^^^^^^^^^ constructor is not visible here due to private fields\n    |\n-help: possible better candidate is found in another module, you can import it into scope\n+help: consider importing this tuple struct instead\n    |\n LL | use m::S;\n    |"}, {"sha": "8611306e82d0376c3fc5d50afc3c8c2b405ba66c", "filename": "src/test/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -10,7 +10,7 @@ error[E0412]: cannot find type `u8` in the crate root\n LL |     let _: ::u8;\n    |              ^^ not found in the crate root\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this builtin type\n    |\n LL | use std::primitive::u8;\n    |"}, {"sha": "9c337f515adbcd7eade90ff0d9d663ca1a7a9f37", "filename": "src/test/ui/resolve/use_suggestion_placement.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0412]: cannot find type `Path` in this scope\n LL |     type Bar = Path;\n    |                ^^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this struct\n    |\n LL |     use std::path::Path;\n    |\n@@ -15,7 +15,7 @@ error[E0425]: cannot find value `A` in this scope\n LL |     let _ = A;\n    |             ^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this constant\n    |\n LL | use m::A;\n    |\n@@ -26,7 +26,7 @@ error[E0412]: cannot find type `HashMap` in this scope\n LL |     type Dict<K, V> = HashMap<K, V>;\n    |                       ^^^^^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL | use std::collections::HashMap;\n    |"}, {"sha": "38cd9713d1a13b82955291cef19d2bd5aac19c9b", "filename": "src/test/ui/rust-2018/issue-52202-use-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0422]: cannot find struct, variant or union type `Drain` in this scope\n LL |     let _d = Drain {};\n    |              ^^^^^ not found in this scope\n    |\n-help: possible candidates are found in other modules, you can import them into scope\n+help: consider importing one of these items\n    |\n LL | use crate::plumbing::Drain;\n    |"}, {"sha": "7997cdc2957b4cd759e32e613e839a31296859ac", "filename": "src/test/ui/self/self_type_keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -66,7 +66,7 @@ error[E0531]: cannot find unit struct, unit variant or constant `Self` in this s\n LL |         mut Self => (),\n    |             ^^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this unit struct\n    |\n LL | use foo::Self;\n    |"}, {"sha": "2bc3ff4c3b619ad3ad70fc35a3c4c735c6d23657", "filename": "src/test/ui/span/issue-35987.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0404]: expected trait, found type parameter `Add`\n LL | impl<T: Clone, Add> Add for Foo<T> {\n    |                     ^^^ not a trait\n    |\n-help: possible better candidate is found in another module, you can import it into scope\n+help: consider importing this trait instead\n    |\n LL | use std::ops::Add;\n    |"}, {"sha": "876eef2b6249a271a0e223aef15515a690cbbb6f", "filename": "src/test/ui/suggestions/no-extern-crate-in-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -4,7 +4,7 @@ error[E0412]: cannot find type `Foo` in this scope\n LL | type Output = Option<Foo>;\n    |                      ^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this struct\n    |\n LL | use foo::Foo;\n    |"}, {"sha": "7447cf87ce1680efd763600e7865e8a575630e6e", "filename": "src/test/ui/suggestions/raw-name-use-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -26,7 +26,7 @@ error[E0425]: cannot find function `r#break` in this scope\n LL |     r#break();\n    |     ^^^^^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this function\n    |\n LL | use foo::r#break;\n    |"}, {"sha": "edde26c1fc15d77e3ec7a9ad212c3cb5205894e1", "filename": "src/test/ui/use/use-super-global-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29630cea47506125fb0b94318104b1b93a59b052/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.stderr?ref=29630cea47506125fb0b94318104b1b93a59b052", "patch": "@@ -22,7 +22,7 @@ error[E0425]: cannot find function `main` in this scope\n LL |         main();\n    |         ^^^^ not found in this scope\n    |\n-help: possible candidate is found in another module, you can import it into scope\n+help: consider importing this function\n    |\n LL |     use main;\n    |"}]}