{"sha": "f3e6d315386cebdd6679055d9350c258f2a51689", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZTZkMzE1Mzg2Y2ViZGQ2Njc5MDU1ZDkzNTBjMjU4ZjJhNTE2ODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-15T03:21:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-15T03:21:30Z"}, "message": "Auto merge of #28351 - jonas-schievink:macro-bt, r=nrc\n\nThe second commit in this PR will stop printing the macro definition site in backtraces, which cuts their length in half and increases readability (the definition site was only correct for local macros).\r\n\r\nThe third commit will not print an invocation if the last one printed occurred at the same place (span). This will make backtraces caused by a self-recursive macro much shorter.\r\n\r\n(A possible alternative would be to capture the backtrace first, then limit it to a few frames at the start and end of the chain and print `...` inbetween. This would also work with multiple macros calling each other, which is not addressed by this PR - although the backtrace will still be halved)\r\n\r\nExample:\r\n```rust\r\nmacro_rules! m {\r\n ( 0 $($t:tt)* ) => ( m!($($t)*); );\r\n () => ( fn main() {0} );\r\n}\r\n\r\nm!(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0);\r\n```\r\n\r\nOn a semi-recent nightly, this yields:\r\n```\r\ntest.rs:3:21: 3:22 error: mismatched types:\r\n expected `()`,\r\n    found `_`\r\n(expected (),\r\n    found integral variable) [E0308]\r\ntest.rs:3  () => ( fn main() {0} );\r\n                              ^\r\ntest.rs:1:1: 4:2 note: in expansion of m!\r\ntest.rs:2:23: 2:34 note: expansion site\r\ntest.rs:1:1: 4:2 note: in expansion of m!\r\ntest.rs:2:23: 2:34 note: expansion site\r\ntest.rs:1:1: 4:2 note: in expansion of m!\r\ntest.rs:2:23: 2:34 note: expansion site\r\ntest.rs:1:1: 4:2 note: in expansion of m!\r\ntest.rs:2:23: 2:34 note: expansion site\r\ntest.rs:1:1: 4:2 note: in expansion of m!\r\ntest.rs:2:23: 2:34 note: expansion site\r\ntest.rs:1:1: 4:2 note: in expansion of m!\r\ntest.rs:2:23: 2:34 note: expansion site\r\ntest.rs:1:1: 4:2 note: in expansion of m!\r\ntest.rs:2:23: 2:34 note: expansion site\r\ntest.rs:1:1: 4:2 note: in expansion of m!\r\ntest.rs:2:23: 2:34 note: expansion site\r\ntest.rs:1:1: 4:2 note: in expansion of m!\r\ntest.rs:2:23: 2:34 note: expansion site\r\ntest.rs:1:1: 4:2 note: in expansion of m!\r\ntest.rs:2:23: 2:34 note: expansion site\r\ntest.rs:1:1: 4:2 note: in expansion of m!\r\ntest.rs:2:23: 2:34 note: expansion site\r\ntest.rs:1:1: 4:2 note: in expansion of m!\r\ntest.rs:2:23: 2:34 note: expansion site\r\ntest.rs:1:1: 4:2 note: in expansion of m!\r\ntest.rs:2:23: 2:34 note: expansion site\r\ntest.rs:1:1: 4:2 note: in expansion of m!\r\ntest.rs:2:23: 2:34 note: expansion site\r\ntest.rs:1:1: 4:2 note: in expansion of m!\r\ntest.rs:2:23: 2:34 note: expansion site\r\ntest.rs:1:1: 4:2 note: in expansion of m!\r\ntest.rs:6:1: 6:35 note: expansion site\r\ntest.rs:3:21: 3:22 help: run `rustc --explain E0308` to see a detailed explanation\r\nerror: aborting due to previous error\r\n```\r\n\r\nAfter this patch:\r\n```\r\ntest.rs:3:21: 3:22 error: mismatched types:\r\n expected `()`,\r\n    found `_`\r\n(expected (),\r\n    found integral variable) [E0308]\r\ntest.rs:3  () => ( fn main() {0} );\r\n                              ^\r\ntest.rs:2:23: 2:34 note: in this expansion of m!\r\ntest.rs:6:1: 6:35 note: in this expansion of m!\r\ntest.rs:3:21: 3:22 help: run `rustc --explain E0308` to see a detailed explanation\r\nerror: aborting due to previous error\r\n```", "tree": {"sha": "c368a43c199c178e9e51766611197bebe4143eab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c368a43c199c178e9e51766611197bebe4143eab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3e6d315386cebdd6679055d9350c258f2a51689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e6d315386cebdd6679055d9350c258f2a51689", "html_url": "https://github.com/rust-lang/rust/commit/f3e6d315386cebdd6679055d9350c258f2a51689", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3e6d315386cebdd6679055d9350c258f2a51689/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1c96168821d70992157f55ee9f06190bf299ba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1c96168821d70992157f55ee9f06190bf299ba4", "html_url": "https://github.com/rust-lang/rust/commit/b1c96168821d70992157f55ee9f06190bf299ba4"}, {"sha": "0be755c24a81f3c7c07dcd50406c9f17bee0d6ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/0be755c24a81f3c7c07dcd50406c9f17bee0d6ac", "html_url": "https://github.com/rust-lang/rust/commit/0be755c24a81f3c7c07dcd50406c9f17bee0d6ac"}], "stats": {"total": 94, "additions": 56, "deletions": 38}, "files": [{"sha": "c177eb1f00bbd39fe7e994b67f79180f9ec998b5", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 37, "deletions": 22, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f3e6d315386cebdd6679055d9350c258f2a51689/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e6d315386cebdd6679055d9350c258f2a51689/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=f3e6d315386cebdd6679055d9350c258f2a51689", "patch": "@@ -727,30 +727,45 @@ impl EmitterWriter {\n                              cm: &codemap::CodeMap,\n                              sp: Span)\n                              -> io::Result<()> {\n-        let cs = try!(cm.with_expn_info(sp.expn_id, |expn_info| -> io::Result<_> {\n-            match expn_info {\n-                Some(ei) => {\n-                    let ss = ei.callee.span.map_or(String::new(),\n-                                                   |span| cm.span_to_string(span));\n-                    let (pre, post) = match ei.callee.format {\n-                        codemap::MacroAttribute(..) => (\"#[\", \"]\"),\n-                        codemap::MacroBang(..) => (\"\", \"!\"),\n-                        codemap::CompilerExpansion(..) => (\"\", \"\"),\n-                    };\n-                    try!(self.print_diagnostic(&ss, Note,\n-                                               &format!(\"in expansion of {}{}{}\",\n-                                                        pre,\n-                                                        ei.callee.name(),\n-                                                        post),\n-                                               None));\n-                    let ss = cm.span_to_string(ei.call_site);\n-                    try!(self.print_diagnostic(&ss, Note, \"expansion site\", None));\n-                    Ok(Some(ei.call_site))\n+        let mut last_span = codemap::DUMMY_SP;\n+        let mut sp_opt = Some(sp);\n+\n+        while let Some(sp) = sp_opt {\n+            sp_opt = try!(cm.with_expn_info(sp.expn_id, |expn_info| -> io::Result<_> {\n+                match expn_info {\n+                    Some(ei) => {\n+                        let (pre, post) = match ei.callee.format {\n+                            codemap::MacroAttribute(..) => (\"#[\", \"]\"),\n+                            codemap::MacroBang(..) => (\"\", \"!\"),\n+                            codemap::CompilerExpansion(..) => (\"\", \"\"),\n+                        };\n+                        // Don't print recursive invocations\n+                        if ei.call_site != last_span {\n+                            last_span = ei.call_site;\n+\n+                            let mut diag_string = format!(\"in this expansion of {}{}{}\",\n+                                                          pre,\n+                                                          ei.callee.name(),\n+                                                          post);\n+\n+                            if let Some(def_site_span) = ei.callee.span {\n+                                diag_string.push_str(&format!(\" (defined in {})\",\n+                                                              cm.span_to_filename(def_site_span)));\n+                            }\n+\n+                            try!(self.print_diagnostic(&cm.span_to_string(ei.call_site),\n+                                                       Note,\n+                                                       &diag_string,\n+                                                       None));\n+                        }\n+                        Ok(Some(ei.call_site))\n+                    }\n+                    None => Ok(None)\n                 }\n-                None => Ok(None)\n+            }));\n         }\n-        }));\n-        cs.map_or(Ok(()), |call_site| self.print_macro_backtrace(cm, call_site))\n+\n+        Ok(())\n     }\n }\n "}, {"sha": "ce2315f3a38d46e859cdb66a6992097db7c537cc", "filename": "src/test/compile-fail/for-expn-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3e6d315386cebdd6679055d9350c258f2a51689/src%2Ftest%2Fcompile-fail%2Ffor-expn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e6d315386cebdd6679055d9350c258f2a51689/src%2Ftest%2Fcompile-fail%2Ffor-expn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-expn-2.rs?ref=f3e6d315386cebdd6679055d9350c258f2a51689", "patch": "@@ -10,7 +10,7 @@\n \n // Test that we get an expansion stack for `for` loops.\n \n-// error-pattern:in expansion of for loop expansion\n+// error-pattern:in this expansion of for loop expansion\n \n fn main() {\n     for t in &foo {"}, {"sha": "5069ec7d2846ae80216e3db001d53209abff909b", "filename": "src/test/compile-fail/macro-backtrace-invalid-internals.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f3e6d315386cebdd6679055d9350c258f2a51689/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-invalid-internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e6d315386cebdd6679055d9350c258f2a51689/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-invalid-internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-invalid-internals.rs?ref=f3e6d315386cebdd6679055d9350c258f2a51689", "patch": "@@ -10,25 +10,25 @@\n \n // Macros in statement vs expression position handle backtraces differently.\n \n-macro_rules! fake_method_stmt { //~ NOTE in expansion of\n+macro_rules! fake_method_stmt {\n      () => {\n           1.fake() //~ ERROR no method named `fake` found\n      }\n }\n \n-macro_rules! fake_field_stmt { //~ NOTE in expansion of\n+macro_rules! fake_field_stmt {\n      () => {\n           1.fake //~ ERROR no field with that name\n      }\n }\n \n-macro_rules! fake_anon_field_stmt { //~ NOTE in expansion of\n+macro_rules! fake_anon_field_stmt {\n      () => {\n           (1).0 //~ ERROR type was not a tuple\n      }\n }\n \n-macro_rules! fake_method_expr { //~ NOTE in expansion of\n+macro_rules! fake_method_expr {\n      () => {\n           1.fake() //~ ERROR no method named `fake` found\n      }\n@@ -47,11 +47,13 @@ macro_rules! fake_anon_field_expr {\n }\n \n fn main() {\n-    fake_method_stmt!(); //~ NOTE expansion site\n-    fake_field_stmt!(); //~ NOTE expansion site\n-    fake_anon_field_stmt!(); //~ NOTE expansion site\n+    fake_method_stmt!(); //~ NOTE in this expansion of\n+    fake_field_stmt!(); //~ NOTE in this expansion of\n+    fake_anon_field_stmt!(); //~ NOTE in this expansion of\n \n-    let _ = fake_method_expr!(); //~ NOTE expansion site\n+    let _ = fake_method_expr!(); //~ NOTE in this expansion of\n     let _ = fake_field_expr!(); //~ ERROR no field with that name\n+                                //~^ NOTE in this expansion of\n     let _ = fake_anon_field_expr!(); //~ ERROR type was not a tuple\n+                                     //~^ NOTE in this expansion of\n }"}, {"sha": "a429681bb21815e2e6431b2fa52ac6f0dcef58ef", "filename": "src/test/compile-fail/macro-backtrace-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3e6d315386cebdd6679055d9350c258f2a51689/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e6d315386cebdd6679055d9350c258f2a51689/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-nested.rs?ref=f3e6d315386cebdd6679055d9350c258f2a51689", "patch": "@@ -19,11 +19,11 @@ macro_rules! call_nested_expr {\n     () => (nested_expr!())\n }\n \n-macro_rules! call_nested_expr_sum { //~ NOTE in expansion of\n+macro_rules! call_nested_expr_sum {\n     () => { 1 + nested_expr!(); } //~ ERROR unresolved name\n }\n \n fn main() {\n     1 + call_nested_expr!(); //~ ERROR unresolved name\n-    call_nested_expr_sum!(); //~ NOTE expansion site\n+    call_nested_expr_sum!(); //~ NOTE in this expansion of\n }"}, {"sha": "294892662d46480d24d383190fc3920214469243", "filename": "src/test/compile-fail/macro-backtrace-println.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f3e6d315386cebdd6679055d9350c258f2a51689/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-println.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e6d315386cebdd6679055d9350c258f2a51689/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-println.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-println.rs?ref=f3e6d315386cebdd6679055d9350c258f2a51689", "patch": "@@ -16,14 +16,15 @@\n \n fn print(_args: std::fmt::Arguments) {}\n \n-macro_rules! myprint { //~ NOTE in expansion of\n-    ($($arg:tt)*) => (print(format_args!($($arg)*)));\n+macro_rules! myprint {\n+    ($($arg:tt)*) => (print(format_args!($($arg)*)));   //~ NOTE in this expansion of\n }\n \n-macro_rules! myprintln { //~ NOTE in expansion of\n+macro_rules! myprintln {\n     ($fmt:expr) => (myprint!(concat!($fmt, \"\\n\"))); //~ ERROR invalid reference to argument `0`\n+                                                    //~^ NOTE in this expansion of\n }\n \n fn main() {\n-    myprintln!(\"{}\"); //~ NOTE expansion site\n+    myprintln!(\"{}\"); //~ NOTE in this expansion of\n }"}, {"sha": "967a8531b2c0afd0d4e3eebfd343a8fddad341a7", "filename": "src/test/compile-fail/method-macro-backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3e6d315386cebdd6679055d9350c258f2a51689/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e6d315386cebdd6679055d9350c258f2a51689/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs?ref=f3e6d315386cebdd6679055d9350c258f2a51689", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// forbid-output: in expansion of\n+// forbid-output: in this expansion of\n \n macro_rules! make_method {\n     ($name:ident) => ( fn $name(&self) { } )"}]}