{"sha": "138ebd19c696996a8f4c99586d207bf02f7eeaf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzOGViZDE5YzY5Njk5NmE4ZjRjOTk1ODZkMjA3YmYwMmY3ZWVhZjU=", "commit": {"author": {"name": "Falk H\u00fcffner", "email": "falk@hueffner.de", "date": "2021-09-07T06:49:47Z"}, "committer": {"name": "Falk H\u00fcffner", "email": "falk@hueffner.de", "date": "2021-09-07T06:53:48Z"}, "message": "Improve docs for int_log\n\n* Clarify rounding.\n* Avoid \"wrapping\" wording.\n* Omit wrong claim on 0 only being returned in error cases.\n* Typo fix for one_less_than_next_power_of_two.", "tree": {"sha": "73bf08fac46357012852c6207c91e2dcf49e3ed0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73bf08fac46357012852c6207c91e2dcf49e3ed0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/138ebd19c696996a8f4c99586d207bf02f7eeaf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/138ebd19c696996a8f4c99586d207bf02f7eeaf5", "html_url": "https://github.com/rust-lang/rust/commit/138ebd19c696996a8f4c99586d207bf02f7eeaf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/138ebd19c696996a8f4c99586d207bf02f7eeaf5/comments", "author": null, "committer": null, "parents": [{"sha": "b2d9bcda7ec267dbabfaef67f7af344ef71e002c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d9bcda7ec267dbabfaef67f7af344ef71e002c", "html_url": "https://github.com/rust-lang/rust/commit/b2d9bcda7ec267dbabfaef67f7af344ef71e002c"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "6fc188a27723d737cc17bd55c3bfa7a1bb525013", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/138ebd19c696996a8f4c99586d207bf02f7eeaf5/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/138ebd19c696996a8f4c99586d207bf02f7eeaf5/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=138ebd19c696996a8f4c99586d207bf02f7eeaf5", "patch": "@@ -2001,7 +2001,8 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the logarithm of the number with respect to an arbitrary base.\n+        /// Returns the logarithm of the number with respect to an arbitrary base,\n+        /// rounded down.\n         ///\n         /// This method might not be optimized owing to implementation details;\n         /// `log2` can produce results more efficiently for base 2, and `log10`\n@@ -2010,8 +2011,8 @@ macro_rules! int_impl {\n         /// # Panics\n         ///\n         /// When the number is zero, or if the base is not at least 2; it\n-        /// panics in debug mode and the return value is wrapped to 0 in release\n-        /// mode (the only situation in which the method can return 0).\n+        /// panics in debug mode and the return value is 0 in release\n+        /// mode.\n         ///\n         /// # Examples\n         ///\n@@ -2039,13 +2040,12 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the base 2 logarithm of the number.\n+        /// Returns the base 2 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n         /// When the number is zero it panics in debug mode and the return value\n-        /// is wrapped to 0 in release mode (the only situation in which the\n-        /// method can return 0).\n+        /// is 0 in release mode.\n         ///\n         /// # Examples\n         ///\n@@ -2073,13 +2073,12 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the base 10 logarithm of the number.\n+        /// Returns the base 10 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n         /// When the number is zero it panics in debug mode and the return value\n-        /// is wrapped to 0 in release mode (the only situation in which the\n-        /// method can return 0).\n+        /// is 0 in release mode.\n         ///\n         /// # Example\n         ///\n@@ -2107,7 +2106,8 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the logarithm of the number with respect to an arbitrary base.\n+        /// Returns the logarithm of the number with respect to an arbitrary base,\n+        /// rounded down.\n         ///\n         /// Returns `None` if the number is negative or zero, or if the base is not at least 2.\n         ///\n@@ -2147,7 +2147,7 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the base 2 logarithm of the number.\n+        /// Returns the base 2 logarithm of the number, rounded down.\n         ///\n         /// Returns `None` if the number is negative or zero.\n         ///\n@@ -2171,7 +2171,7 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Returns the base 10 logarithm of the number.\n+        /// Returns the base 10 logarithm of the number, rounded down.\n         ///\n         /// Returns `None` if the number is negative or zero.\n         ///"}, {"sha": "2a8cb83d7bf51d0476af151320204e059bbba4a0", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/138ebd19c696996a8f4c99586d207bf02f7eeaf5/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/138ebd19c696996a8f4c99586d207bf02f7eeaf5/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=138ebd19c696996a8f4c99586d207bf02f7eeaf5", "patch": "@@ -635,7 +635,8 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the logarithm of the number with respect to an arbitrary base.\n+        /// Returns the logarithm of the number with respect to an arbitrary base,\n+        /// rounded down.\n         ///\n         /// This method might not be optimized owing to implementation details;\n         /// `log2` can produce results more efficiently for base 2, and `log10`\n@@ -644,8 +645,7 @@ macro_rules! uint_impl {\n         /// # Panics\n         ///\n         /// When the number is negative, zero, or if the base is not at least 2;\n-        /// it panics in debug mode and the return value is wrapped to 0 in\n-        /// release mode (the only situation in which the method can return 0).\n+        /// it panics in debug mode and the return value is 0 in release mode.\n         ///\n         /// # Examples\n         ///\n@@ -673,13 +673,12 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the base 2 logarithm of the number.\n+        /// Returns the base 2 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n         /// When the number is negative or zero it panics in debug mode and\n-        /// the return value is wrapped to 0 in release mode (the only situation in\n-        /// which the method can return 0).\n+        /// the return value is 0 in release mode.\n         ///\n         /// # Examples\n         ///\n@@ -707,13 +706,12 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the base 10 logarithm of the number.\n+        /// Returns the base 10 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n         /// When the number is negative or zero it panics in debug mode and the\n-        /// return value is wrapped to 0 in release mode (the only situation in\n-        /// which the method can return 0).\n+        /// return value is 0 in release mode.\n         ///\n         /// # Example\n         ///\n@@ -741,7 +739,8 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the logarithm of the number with respect to an arbitrary base.\n+        /// Returns the logarithm of the number with respect to an arbitrary base,\n+        /// rounded down.\n         ///\n         /// Returns `None` if the number is zero, or if the base is not at least 2.\n         ///\n@@ -781,7 +780,7 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the base 2 logarithm of the number.\n+        /// Returns the base 2 logarithm of the number, rounded down.\n         ///\n         /// Returns `None` if the number is zero.\n         ///\n@@ -805,7 +804,7 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Returns the base 10 logarithm of the number.\n+        /// Returns the base 10 logarithm of the number, rounded down.\n         ///\n         /// Returns `None` if the number is zero.\n         ///\n@@ -1992,7 +1991,7 @@ macro_rules! uint_impl {\n         /// Returns the smallest power of two greater than or equal to `self`.\n         ///\n         /// When return value overflows (i.e., `self > (1 << (N-1))` for type\n-        /// `uN`), it panics in debug mode and return value is wrapped to 0 in\n+        /// `uN`), it panics in debug mode and the return value is wrapped to 0 in\n         /// release mode (the only situation in which method can return 0).\n         ///\n         /// # Examples"}]}