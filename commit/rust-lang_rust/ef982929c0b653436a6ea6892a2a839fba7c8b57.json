{"sha": "ef982929c0b653436a6ea6892a2a839fba7c8b57", "node_id": "C_kwDOAAsO6NoAKGVmOTgyOTI5YzBiNjUzNDM2YTZlYTY4OTJhMmE4MzlmYmE3YzhiNTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-27T17:49:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-27T17:49:56Z"}, "message": "Auto merge of #107372 - JohnTitor:rollup-zkl2ges, r=JohnTitor\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #106806 (Replace format flags u32 by enums and bools.)\n - #107194 (Remove dependency on slice_internals feature in rustc_ast)\n - #107234 (Revisit fix_is_ci_llvm_available logic)\n - #107316 (Update snap from `1.0.1` to `1.1.0`)\n - #107321 (solver comments + remove `TyCtxt::evaluate_goal`)\n - #107332 (Fix wording from `rustbuild` to `bootstrap`)\n - #107347 (reduce rightward-drift)\n - #107352 (compiler: Fix E0587 explanation)\n - #107357 (Fix infinite loop in rustdoc get_all_import_attributes function)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6902983da8c04d8a2ffd9779c84a1ea89f78366f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6902983da8c04d8a2ffd9779c84a1ea89f78366f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef982929c0b653436a6ea6892a2a839fba7c8b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef982929c0b653436a6ea6892a2a839fba7c8b57", "html_url": "https://github.com/rust-lang/rust/commit/ef982929c0b653436a6ea6892a2a839fba7c8b57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef982929c0b653436a6ea6892a2a839fba7c8b57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7919ef0ec5776c72dace7fec1c68551a617505ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7919ef0ec5776c72dace7fec1c68551a617505ad", "html_url": "https://github.com/rust-lang/rust/commit/7919ef0ec5776c72dace7fec1c68551a617505ad"}, {"sha": "c64f4c41f76581807bf7e063ded17f7da51b4478", "url": "https://api.github.com/repos/rust-lang/rust/commits/c64f4c41f76581807bf7e063ded17f7da51b4478", "html_url": "https://github.com/rust-lang/rust/commit/c64f4c41f76581807bf7e063ded17f7da51b4478"}], "stats": {"total": 383, "additions": 255, "deletions": 128}, "files": [{"sha": "46dd039728025d70bc10ad9e55ed926cec988c83", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -3672,6 +3672,7 @@ name = \"rustc_ast\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n+ \"memchr\",\n  \"rustc_data_structures\",\n  \"rustc_index\",\n  \"rustc_lexer\",\n@@ -5215,9 +5216,9 @@ checksum = \"cc88c725d61fc6c3132893370cac4a0200e3fedf5da8331c570664b1987f5ca2\"\n \n [[package]]\n name = \"snap\"\n-version = \"1.0.1\"\n+version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"da73c8f77aebc0e40c300b93f0a5f1bece7a248a36eee287d4e095f35c7b7d6e\"\n+checksum = \"5e9f0ab6ef7eb7353d9119c170a436d1bf248eea575ac42d19d12f4e34130831\"\n \n [[package]]\n name = \"snapbox\""}, {"sha": "10d7fa1db605a7dc7c5e70b53fe175c1f60ff185", "filename": "compiler/rustc_ast/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_ast%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_ast%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2FCargo.toml?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -7,6 +7,7 @@ edition = \"2021\"\n \n [dependencies]\n bitflags = \"1.2.1\"\n+memchr = \"2.5.0\"\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_lexer = { path = \"../rustc_lexer\" }"}, {"sha": "d021bea5ecacb94c7b616a8ffeca10a0c1369c87", "filename": "compiler/rustc_ast/src/format.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_ast%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_ast%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fformat.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -227,8 +227,30 @@ pub struct FormatOptions {\n     pub alignment: Option<FormatAlignment>,\n     /// The fill character. E.g. the `.` in `{:.>10}`.\n     pub fill: Option<char>,\n-    /// The `+`, `-`, `0`, `#`, `x?` and `X?` flags.\n-    pub flags: u32,\n+    /// The `+` or `-` flag.\n+    pub sign: Option<FormatSign>,\n+    /// The `#` flag.\n+    pub alternate: bool,\n+    /// The `0` flag. E.g. the `0` in `{:02x}`.\n+    pub zero_pad: bool,\n+    /// The `x` or `X` flag (for `Debug` only). E.g. the `x` in `{:x?}`.\n+    pub debug_hex: Option<FormatDebugHex>,\n+}\n+\n+#[derive(Copy, Clone, Encodable, Decodable, Debug, PartialEq, Eq)]\n+pub enum FormatSign {\n+    /// The `+` flag.\n+    Plus,\n+    /// The `-` flag.\n+    Minus,\n+}\n+\n+#[derive(Copy, Clone, Encodable, Decodable, Debug, PartialEq, Eq)]\n+pub enum FormatDebugHex {\n+    /// The `x` flag in `{:x?}`.\n+    Lower,\n+    /// The `X` flag in `{:X?}`.\n+    Upper,\n }\n \n #[derive(Copy, Clone, Encodable, Decodable, Debug, PartialEq, Eq)]"}, {"sha": "23c32fa96ca449e40f705596d897a9a6c0d14f87", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -16,7 +16,6 @@\n #![feature(let_chains)]\n #![feature(min_specialization)]\n #![feature(negative_impls)]\n-#![feature(slice_internals)]\n #![feature(stmt_expr_attributes)]\n #![recursion_limit = \"256\"]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "6f57d66b2273a2cf4421d42f8057c4290dfc653e", "filename": "compiler/rustc_ast/src/util/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_ast%2Fsrc%2Futil%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_ast%2Fsrc%2Futil%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Funicode.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -17,7 +17,7 @@ pub fn contains_text_flow_control_chars(s: &str) -> bool {\n     // U+2069 - E2 81 A9\n     let mut bytes = s.as_bytes();\n     loop {\n-        match core::slice::memchr::memchr(0xE2, bytes) {\n+        match memchr::memchr(0xE2, bytes) {\n             Some(idx) => {\n                 // bytes are valid UTF-8 -> E2 must be followed by two bytes\n                 let ch = &bytes[idx..idx + 3];"}, {"sha": "e7dd0b18a03b9adc0743c423611b2f758414e3e9", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -137,26 +137,43 @@ fn make_format_spec<'hir>(\n         }\n         Err(_) => ctx.expr(sp, hir::ExprKind::Err),\n     };\n-    let fill = ctx.expr_char(sp, placeholder.format_options.fill.unwrap_or(' '));\n+    let &FormatOptions {\n+        ref width,\n+        ref precision,\n+        alignment,\n+        fill,\n+        sign,\n+        alternate,\n+        zero_pad,\n+        debug_hex,\n+    } = &placeholder.format_options;\n+    let fill = ctx.expr_char(sp, fill.unwrap_or(' '));\n     let align = ctx.expr_lang_item_type_relative(\n         sp,\n         hir::LangItem::FormatAlignment,\n-        match placeholder.format_options.alignment {\n+        match alignment {\n             Some(FormatAlignment::Left) => sym::Left,\n             Some(FormatAlignment::Right) => sym::Right,\n             Some(FormatAlignment::Center) => sym::Center,\n             None => sym::Unknown,\n         },\n     );\n-    let flags = ctx.expr_u32(sp, placeholder.format_options.flags);\n-    let prec = make_count(ctx, sp, &placeholder.format_options.precision, argmap);\n-    let width = make_count(ctx, sp, &placeholder.format_options.width, argmap);\n+    // This needs to match `FlagV1` in library/core/src/fmt/mod.rs.\n+    let flags: u32 = ((sign == Some(FormatSign::Plus)) as u32)\n+        | ((sign == Some(FormatSign::Minus)) as u32) << 1\n+        | (alternate as u32) << 2\n+        | (zero_pad as u32) << 3\n+        | ((debug_hex == Some(FormatDebugHex::Lower)) as u32) << 4\n+        | ((debug_hex == Some(FormatDebugHex::Upper)) as u32) << 5;\n+    let flags = ctx.expr_u32(sp, flags);\n+    let precision = make_count(ctx, sp, &precision, argmap);\n+    let width = make_count(ctx, sp, &width, argmap);\n     let format_placeholder_new = ctx.arena.alloc(ctx.expr_lang_item_type_relative(\n         sp,\n         hir::LangItem::FormatPlaceholder,\n         sym::new,\n     ));\n-    let args = ctx.arena.alloc_from_iter([position, fill, align, flags, prec, width]);\n+    let args = ctx.arena.alloc_from_iter([position, fill, align, flags, precision, width]);\n     ctx.expr_call_mut(sp, format_placeholder_new, args)\n }\n "}, {"sha": "cacfe9eb2f10745f8add02cecd528b90ab3a5b0c", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -6,7 +6,10 @@ use rustc_ast::token;\n use rustc_ast::util::literal::escape_byte_str_symbol;\n use rustc_ast::util::parser::{self, AssocOp, Fixity};\n use rustc_ast::{self as ast, BlockCheckMode};\n-use rustc_ast::{FormatAlignment, FormatArgPosition, FormatArgsPiece, FormatCount, FormatTrait};\n+use rustc_ast::{\n+    FormatAlignment, FormatArgPosition, FormatArgsPiece, FormatCount, FormatDebugHex, FormatSign,\n+    FormatTrait,\n+};\n use std::fmt::Write;\n \n impl<'a> State<'a> {\n@@ -675,17 +678,15 @@ pub fn reconstruct_format_args_template_string(pieces: &[FormatArgsPiece]) -> St\n                     Some(FormatAlignment::Center) => template.push_str(\"^\"),\n                     None => {}\n                 }\n-                let flags = p.format_options.flags;\n-                if flags >> (rustc_parse_format::FlagSignPlus as usize) & 1 != 0 {\n-                    template.push('+');\n-                }\n-                if flags >> (rustc_parse_format::FlagSignMinus as usize) & 1 != 0 {\n-                    template.push('-');\n+                match p.format_options.sign {\n+                    Some(FormatSign::Plus) => template.push('+'),\n+                    Some(FormatSign::Minus) => template.push('-'),\n+                    None => {}\n                 }\n-                if flags >> (rustc_parse_format::FlagAlternate as usize) & 1 != 0 {\n+                if p.format_options.alternate {\n                     template.push('#');\n                 }\n-                if flags >> (rustc_parse_format::FlagSignAwareZeroPad as usize) & 1 != 0 {\n+                if p.format_options.zero_pad {\n                     template.push('0');\n                 }\n                 if let Some(width) = &p.format_options.width {\n@@ -709,11 +710,10 @@ pub fn reconstruct_format_args_template_string(pieces: &[FormatArgsPiece]) -> St\n                         }\n                     }\n                 }\n-                if flags >> (rustc_parse_format::FlagDebugLowerHex as usize) & 1 != 0 {\n-                    template.push('x');\n-                }\n-                if flags >> (rustc_parse_format::FlagDebugUpperHex as usize) & 1 != 0 {\n-                    template.push('X');\n+                match p.format_options.debug_hex {\n+                    Some(FormatDebugHex::Lower) => template.push('x'),\n+                    Some(FormatDebugHex::Upper) => template.push('X'),\n+                    None => {}\n                 }\n                 template.push_str(match p.format_trait {\n                     FormatTrait::Display => \"\","}, {"sha": "e93a23394c03ff9b9f74ea87e72c6d1ef27ee539", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -4,7 +4,7 @@ use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::{\n     Expr, ExprKind, FormatAlignment, FormatArgPosition, FormatArgPositionKind, FormatArgs,\n     FormatArgsPiece, FormatArgument, FormatArgumentKind, FormatArguments, FormatCount,\n-    FormatOptions, FormatPlaceholder, FormatTrait,\n+    FormatDebugHex, FormatOptions, FormatPlaceholder, FormatSign, FormatTrait,\n };\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, Applicability, MultiSpan, PResult};\n@@ -435,7 +435,16 @@ pub fn make_format_args(\n                     format_options: FormatOptions {\n                         fill: format.fill,\n                         alignment,\n-                        flags: format.flags,\n+                        sign: format.sign.map(|s| match s {\n+                            parse::Sign::Plus => FormatSign::Plus,\n+                            parse::Sign::Minus => FormatSign::Minus,\n+                        }),\n+                        alternate: format.alternate,\n+                        zero_pad: format.zero_pad,\n+                        debug_hex: format.debug_hex.map(|s| match s {\n+                            parse::DebugHex::Lower => FormatDebugHex::Lower,\n+                            parse::DebugHex::Upper => FormatDebugHex::Upper,\n+                        }),\n                         precision,\n                         width,\n                     },"}, {"sha": "240a9d2f37184aa8adecf82a837e5d78693e14c5", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -295,9 +295,8 @@ fn add_unused_functions(cx: &CodegenCx<'_, '_>) {\n                 DefKind::Fn | DefKind::AssocFn | DefKind::Closure | DefKind::Generator\n             ) {\n                 return None;\n-            } else if ignore_unused_generics\n-                && tcx.generics_of(def_id).requires_monomorphization(tcx)\n-            {\n+            }\n+            if ignore_unused_generics && tcx.generics_of(def_id).requires_monomorphization(tcx) {\n                 return None;\n             }\n             Some(local_def_id.to_def_id())"}, {"sha": "d7998af85b94fc71c9c142abe46b9bbb9c4a06e6", "filename": "compiler/rustc_error_codes/src/error_codes/E0587.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0587.md", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0587.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0587.md?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -11,6 +11,6 @@ You cannot use `packed` and `align` hints on a same type. If you want to pack a\n type to a given size, you should provide a size to packed:\n \n ```\n-#[repr(packed)] // ok!\n+#[repr(packed(8))] // ok!\n struct Umbrella(i32);\n ```"}, {"sha": "a6dfcd29762474933a31022e2f09f409d3e35865", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -16,7 +16,6 @@\n \n pub use Alignment::*;\n pub use Count::*;\n-pub use Flag::*;\n pub use Piece::*;\n pub use Position::*;\n \n@@ -111,8 +110,14 @@ pub struct FormatSpec<'a> {\n     pub fill: Option<char>,\n     /// Optionally specified alignment.\n     pub align: Alignment,\n-    /// Packed version of various flags provided.\n-    pub flags: u32,\n+    /// The `+` or `-` flag.\n+    pub sign: Option<Sign>,\n+    /// The `#` flag.\n+    pub alternate: bool,\n+    /// The `0` flag.\n+    pub zero_pad: bool,\n+    /// The `x` or `X` flag. (Only for `Debug`.)\n+    pub debug_hex: Option<DebugHex>,\n     /// The integer precision to use.\n     pub precision: Count<'a>,\n     /// The span of the precision formatting flag (for diagnostics).\n@@ -162,24 +167,22 @@ pub enum Alignment {\n     AlignUnknown,\n }\n \n-/// Various flags which can be applied to format strings. The meaning of these\n-/// flags is defined by the formatters themselves.\n+/// Enum for the sign flags.\n #[derive(Copy, Clone, Debug, PartialEq)]\n-pub enum Flag {\n-    /// A `+` will be used to denote positive numbers.\n-    FlagSignPlus,\n-    /// A `-` will be used to denote negative numbers. This is the default.\n-    FlagSignMinus,\n-    /// An alternate form will be used for the value. In the case of numbers,\n-    /// this means that the number will be prefixed with the supplied string.\n-    FlagAlternate,\n-    /// For numbers, this means that the number will be padded with zeroes,\n-    /// and the sign (`+` or `-`) will precede them.\n-    FlagSignAwareZeroPad,\n-    /// For Debug / `?`, format integers in lower-case hexadecimal.\n-    FlagDebugLowerHex,\n-    /// For Debug / `?`, format integers in upper-case hexadecimal.\n-    FlagDebugUpperHex,\n+pub enum Sign {\n+    /// The `+` flag.\n+    Plus,\n+    /// The `-` flag.\n+    Minus,\n+}\n+\n+/// Enum for the debug hex flags.\n+#[derive(Copy, Clone, Debug, PartialEq)]\n+pub enum DebugHex {\n+    /// The `x` flag in `{:x?}`.\n+    Lower,\n+    /// The `X` flag in `{:X?}`.\n+    Upper,\n }\n \n /// A count is used for the precision and width parameters of an integer, and\n@@ -597,7 +600,10 @@ impl<'a> Parser<'a> {\n         let mut spec = FormatSpec {\n             fill: None,\n             align: AlignUnknown,\n-            flags: 0,\n+            sign: None,\n+            alternate: false,\n+            zero_pad: false,\n+            debug_hex: None,\n             precision: CountImplied,\n             precision_span: None,\n             width: CountImplied,\n@@ -626,13 +632,13 @@ impl<'a> Parser<'a> {\n         }\n         // Sign flags\n         if self.consume('+') {\n-            spec.flags |= 1 << (FlagSignPlus as u32);\n+            spec.sign = Some(Sign::Plus);\n         } else if self.consume('-') {\n-            spec.flags |= 1 << (FlagSignMinus as u32);\n+            spec.sign = Some(Sign::Minus);\n         }\n         // Alternate marker\n         if self.consume('#') {\n-            spec.flags |= 1 << (FlagAlternate as u32);\n+            spec.alternate = true;\n         }\n         // Width and precision\n         let mut havewidth = false;\n@@ -647,7 +653,7 @@ impl<'a> Parser<'a> {\n                 spec.width_span = Some(self.span(end - 1, end + 1));\n                 havewidth = true;\n             } else {\n-                spec.flags |= 1 << (FlagSignAwareZeroPad as u32);\n+                spec.zero_pad = true;\n             }\n         }\n \n@@ -678,14 +684,14 @@ impl<'a> Parser<'a> {\n         // Optional radix followed by the actual format specifier\n         if self.consume('x') {\n             if self.consume('?') {\n-                spec.flags |= 1 << (FlagDebugLowerHex as u32);\n+                spec.debug_hex = Some(DebugHex::Lower);\n                 spec.ty = \"?\";\n             } else {\n                 spec.ty = \"x\";\n             }\n         } else if self.consume('X') {\n             if self.consume('?') {\n-                spec.flags |= 1 << (FlagDebugUpperHex as u32);\n+                spec.debug_hex = Some(DebugHex::Upper);\n                 spec.ty = \"?\";\n             } else {\n                 spec.ty = \"X\";\n@@ -708,7 +714,10 @@ impl<'a> Parser<'a> {\n         let mut spec = FormatSpec {\n             fill: None,\n             align: AlignUnknown,\n-            flags: 0,\n+            sign: None,\n+            alternate: false,\n+            zero_pad: false,\n+            debug_hex: None,\n             precision: CountImplied,\n             precision_span: None,\n             width: CountImplied,"}, {"sha": "45314e2fb5500ec4ebd395719e00d7ba68044a98", "filename": "compiler/rustc_parse_format/src/tests.rs", "status": "modified", "additions": 60, "deletions": 15, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -10,7 +10,10 @@ fn fmtdflt() -> FormatSpec<'static> {\n     return FormatSpec {\n         fill: None,\n         align: AlignUnknown,\n-        flags: 0,\n+        sign: None,\n+        alternate: false,\n+        zero_pad: false,\n+        debug_hex: None,\n         precision: CountImplied,\n         width: CountImplied,\n         precision_span: None,\n@@ -126,7 +129,10 @@ fn format_type() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountImplied,\n                 width: CountImplied,\n                 precision_span: None,\n@@ -147,7 +153,10 @@ fn format_align_fill() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignRight,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountImplied,\n                 width: CountImplied,\n                 precision_span: None,\n@@ -165,7 +174,10 @@ fn format_align_fill() {\n             format: FormatSpec {\n                 fill: Some('0'),\n                 align: AlignLeft,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountImplied,\n                 width: CountImplied,\n                 precision_span: None,\n@@ -183,7 +195,10 @@ fn format_align_fill() {\n             format: FormatSpec {\n                 fill: Some('*'),\n                 align: AlignLeft,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountImplied,\n                 width: CountImplied,\n                 precision_span: None,\n@@ -204,7 +219,10 @@ fn format_counts() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountImplied,\n                 precision_span: None,\n                 width: CountIs(10),\n@@ -222,7 +240,10 @@ fn format_counts() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountIs(10),\n                 precision_span: Some(InnerSpan { start: 6, end: 9 }),\n                 width: CountIsParam(10),\n@@ -240,7 +261,10 @@ fn format_counts() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountIs(10),\n                 precision_span: Some(InnerSpan { start: 6, end: 9 }),\n                 width: CountIsParam(0),\n@@ -258,7 +282,10 @@ fn format_counts() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountIsStar(0),\n                 precision_span: Some(InnerSpan { start: 3, end: 5 }),\n                 width: CountImplied,\n@@ -276,7 +303,10 @@ fn format_counts() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountIsParam(10),\n                 width: CountImplied,\n                 precision_span: Some(InnerSpan::new(3, 7)),\n@@ -294,7 +324,10 @@ fn format_counts() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountIsName(\"b\", InnerSpan { start: 6, end: 7 }),\n                 precision_span: Some(InnerSpan { start: 5, end: 8 }),\n                 width: CountIsName(\"a\", InnerSpan { start: 3, end: 4 }),\n@@ -312,7 +345,10 @@ fn format_counts() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountIs(4),\n                 precision_span: Some(InnerSpan { start: 3, end: 5 }),\n                 width: CountImplied,\n@@ -333,7 +369,10 @@ fn format_flags() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: (1 << FlagSignMinus as u32),\n+                sign: Some(Sign::Minus),\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountImplied,\n                 width: CountImplied,\n                 precision_span: None,\n@@ -351,7 +390,10 @@ fn format_flags() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: (1 << FlagSignPlus as u32) | (1 << FlagAlternate as u32),\n+                sign: Some(Sign::Plus),\n+                alternate: true,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountImplied,\n                 width: CountImplied,\n                 precision_span: None,\n@@ -374,7 +416,10 @@ fn format_mixture() {\n                 format: FormatSpec {\n                     fill: None,\n                     align: AlignUnknown,\n-                    flags: 0,\n+                    sign: None,\n+                    alternate: false,\n+                    zero_pad: false,\n+                    debug_hex: None,\n                     precision: CountImplied,\n                     width: CountImplied,\n                     precision_span: None,"}, {"sha": "7880cbad5fe0382ee1dfe44a27e91f42a9453a54", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -141,17 +141,6 @@ type CanonicalResponse<'tcx> = Canonical<'tcx, Response<'tcx>>;\n /// solver, merge the two responses again.\n pub type QueryResult<'tcx> = Result<CanonicalResponse<'tcx>, NoSolution>;\n \n-pub trait TyCtxtExt<'tcx> {\n-    fn evaluate_goal(self, goal: CanonicalGoal<'tcx>) -> QueryResult<'tcx>;\n-}\n-\n-impl<'tcx> TyCtxtExt<'tcx> for TyCtxt<'tcx> {\n-    fn evaluate_goal(self, goal: CanonicalGoal<'tcx>) -> QueryResult<'tcx> {\n-        let mut search_graph = search_graph::SearchGraph::new(self);\n-        EvalCtxt::evaluate_canonical_goal(self, &mut search_graph, goal)\n-    }\n-}\n-\n pub trait InferCtxtEvalExt<'tcx> {\n     /// Evaluates a goal from **outside** of the trait solver.\n     ///\n@@ -194,6 +183,15 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         self.infcx.tcx\n     }\n \n+    /// The entry point of the solver.\n+    ///\n+    /// This function deals with (coinductive) cycles, overflow, and caching\n+    /// and then calls [`EvalCtxt::compute_goal`] which contains the actual\n+    /// logic of the solver.\n+    ///\n+    /// Instead of calling this function directly, use either [EvalCtxt::evaluate_goal]\n+    /// if you're inside of the solver or [InferCtxtEvalExt::evaluate_root_goal] if you're\n+    /// outside of it.\n     #[instrument(level = \"debug\", skip(tcx, search_graph), ret)]\n     fn evaluate_canonical_goal(\n         tcx: TyCtxt<'tcx>,"}, {"sha": "30902c2bc4506cdf95b0209625d9fc645bf3ebb1", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -28,8 +28,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         // To only compute normalization once for each projection we only\n         // normalize if the expected term is an unconstrained inference variable.\n         //\n-        // E.g. for `<T as Trait>::Assoc = u32` we recursively compute the goal\n-        // `exists<U> <T as Trait>::Assoc = U` and then take the resulting type for\n+        // E.g. for `<T as Trait>::Assoc == u32` we recursively compute the goal\n+        // `exists<U> <T as Trait>::Assoc == U` and then take the resulting type for\n         // `U` and equate it with `u32`. This means that we don't need a separate\n         // projection cache in the solver.\n         if self.term_is_fully_unconstrained(goal) {"}, {"sha": "abdd12127d36659fdcd30e333deedb3a465a36e6", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -712,7 +712,7 @@ def bootstrap_binary(self):\n \n     def build_bootstrap(self, color):\n         \"\"\"Build bootstrap\"\"\"\n-        print(\"Building rustbuild\")\n+        print(\"Building bootstrap\")\n         build_dir = os.path.join(self.build_dir, \"bootstrap\")\n         if self.clean and os.path.exists(build_dir):\n             shutil.rmtree(build_dir)"}, {"sha": "fdd659c60ca7f51181fc0280a1b5309a0207ad03", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -965,6 +965,9 @@ impl Config {\n         config.changelog_seen = toml.changelog_seen;\n \n         let build = toml.build.unwrap_or_default();\n+        if let Some(file_build) = build.build {\n+            config.build = TargetSelection::from_user(&file_build);\n+        };\n \n         set(&mut config.out, flags.build_dir.or_else(|| build.build_dir.map(PathBuf::from)));\n         // NOTE: Bootstrap spawns various commands with different working directories."}, {"sha": "681ecbfeb5b8fca058a53948d10bee17ab8d8bd7", "filename": "src/bootstrap/config/tests.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/src%2Fbootstrap%2Fconfig%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/src%2Fbootstrap%2Fconfig%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig%2Ftests.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -19,6 +19,13 @@ fn download_ci_llvm() {\n     assert_eq!(parse_llvm(\"\"), if_available);\n     assert_eq!(parse_llvm(\"rust.channel = \\\"dev\\\"\"), if_available);\n     assert!(!parse_llvm(\"rust.channel = \\\"stable\\\"\"));\n+    assert!(parse_llvm(\"build.build = \\\"x86_64-unknown-linux-gnu\\\"\"));\n+    assert!(parse_llvm(\n+        \"llvm.assertions = true \\r\\n build.build = \\\"x86_64-unknown-linux-gnu\\\" \\r\\n llvm.download-ci-llvm = \\\"if-available\\\"\"\n+    ));\n+    assert!(!parse_llvm(\n+        \"llvm.assertions = true \\r\\n build.build = \\\"aarch64-apple-darwin\\\" \\r\\n llvm.download-ci-llvm = \\\"if-available\\\"\"\n+    ));\n }\n \n // FIXME: add test for detecting `src` and `out`"}, {"sha": "3acc2d4b5c4b1093a2ab204c1e3b2861d3e864bf", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -180,43 +180,40 @@ pub(crate) fn is_ci_llvm_available(config: &Config, asserts: bool) -> bool {\n     // https://doc.rust-lang.org/rustc/platform-support.html#tier-1\n     let supported_platforms = [\n         // tier 1\n-        \"aarch64-unknown-linux-gnu\",\n-        \"i686-pc-windows-gnu\",\n-        \"i686-pc-windows-msvc\",\n-        \"i686-unknown-linux-gnu\",\n-        \"x86_64-unknown-linux-gnu\",\n-        \"x86_64-apple-darwin\",\n-        \"x86_64-pc-windows-gnu\",\n-        \"x86_64-pc-windows-msvc\",\n+        (\"aarch64-unknown-linux-gnu\", false),\n+        (\"i686-pc-windows-gnu\", false),\n+        (\"i686-pc-windows-msvc\", false),\n+        (\"i686-unknown-linux-gnu\", false),\n+        (\"x86_64-unknown-linux-gnu\", true),\n+        (\"x86_64-apple-darwin\", true),\n+        (\"x86_64-pc-windows-gnu\", true),\n+        (\"x86_64-pc-windows-msvc\", true),\n         // tier 2 with host tools\n-        \"aarch64-apple-darwin\",\n-        \"aarch64-pc-windows-msvc\",\n-        \"aarch64-unknown-linux-musl\",\n-        \"arm-unknown-linux-gnueabi\",\n-        \"arm-unknown-linux-gnueabihf\",\n-        \"armv7-unknown-linux-gnueabihf\",\n-        \"mips-unknown-linux-gnu\",\n-        \"mips64-unknown-linux-gnuabi64\",\n-        \"mips64el-unknown-linux-gnuabi64\",\n-        \"mipsel-unknown-linux-gnu\",\n-        \"powerpc-unknown-linux-gnu\",\n-        \"powerpc64-unknown-linux-gnu\",\n-        \"powerpc64le-unknown-linux-gnu\",\n-        \"riscv64gc-unknown-linux-gnu\",\n-        \"s390x-unknown-linux-gnu\",\n-        \"x86_64-unknown-freebsd\",\n-        \"x86_64-unknown-illumos\",\n-        \"x86_64-unknown-linux-musl\",\n-        \"x86_64-unknown-netbsd\",\n+        (\"aarch64-apple-darwin\", false),\n+        (\"aarch64-pc-windows-msvc\", false),\n+        (\"aarch64-unknown-linux-musl\", false),\n+        (\"arm-unknown-linux-gnueabi\", false),\n+        (\"arm-unknown-linux-gnueabihf\", false),\n+        (\"armv7-unknown-linux-gnueabihf\", false),\n+        (\"mips-unknown-linux-gnu\", false),\n+        (\"mips64-unknown-linux-gnuabi64\", false),\n+        (\"mips64el-unknown-linux-gnuabi64\", false),\n+        (\"mipsel-unknown-linux-gnu\", false),\n+        (\"powerpc-unknown-linux-gnu\", false),\n+        (\"powerpc64-unknown-linux-gnu\", false),\n+        (\"powerpc64le-unknown-linux-gnu\", false),\n+        (\"riscv64gc-unknown-linux-gnu\", false),\n+        (\"s390x-unknown-linux-gnu\", false),\n+        (\"x86_64-unknown-freebsd\", false),\n+        (\"x86_64-unknown-illumos\", false),\n+        (\"x86_64-unknown-linux-musl\", false),\n+        (\"x86_64-unknown-netbsd\", false),\n     ];\n-    if !supported_platforms.contains(&&*config.build.triple) {\n-        return false;\n-    }\n \n-    let triple = &*config.build.triple;\n-    if (triple == \"aarch64-unknown-linux-gnu\" || triple.contains(\"i686\")) && asserts {\n-        // No alt builder for aarch64-unknown-linux-gnu today.\n-        return false;\n+    if !supported_platforms.contains(&(&*config.build.triple, asserts)) {\n+        if asserts == true || !supported_platforms.contains(&(&*config.build.triple, true)) {\n+            return false;\n+        }\n     }\n \n     if CiEnv::is_ci() {"}, {"sha": "d6a264f797a68725191134141d42a98683ff9aa3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -2112,10 +2112,12 @@ fn get_all_import_attributes<'hir>(\n ) {\n     let hir_map = tcx.hir();\n     let mut visitor = OneLevelVisitor::new(hir_map, target_def_id);\n+    let mut visited = FxHashSet::default();\n     // If the item is an import and has at least a path with two parts, we go into it.\n     while let hir::ItemKind::Use(path, _) = item.kind &&\n         path.segments.len() > 1 &&\n-        let hir::def::Res::Def(_, def_id) = path.segments[path.segments.len() - 2].res\n+        let hir::def::Res::Def(_, def_id) = path.segments[path.segments.len() - 2].res &&\n+        visited.insert(def_id)\n     {\n         if let Some(hir::Node::Item(parent_item)) = hir_map.get_if_local(def_id) {\n             // We add the attributes from this import into the list."}, {"sha": "659063b97e74a3559907622019f3ad85c4e38a5c", "filename": "src/tools/clippy/clippy_utils/src/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -711,8 +711,8 @@ pub struct FormatSpec<'tcx> {\n     pub fill: Option<char>,\n     /// Optionally specified alignment.\n     pub align: Alignment,\n-    /// Packed version of various flags provided, see [`rustc_parse_format::Flag`].\n-    pub flags: u32,\n+    /// Whether all flag options are set to default (no flags specified).\n+    pub no_flags: bool,\n     /// Represents either the maximum width or the integer precision.\n     pub precision: Count<'tcx>,\n     /// The minimum width, will be padded according to `width`/`align`\n@@ -728,7 +728,7 @@ impl<'tcx> FormatSpec<'tcx> {\n         Some(Self {\n             fill: spec.fill,\n             align: spec.align,\n-            flags: spec.flags,\n+            no_flags: spec.sign.is_none() && !spec.alternate && !spec.zero_pad && spec.debug_hex.is_none(),\n             precision: Count::new(\n                 FormatParamUsage::Precision,\n                 spec.precision,\n@@ -773,7 +773,7 @@ impl<'tcx> FormatSpec<'tcx> {\n         self.width.is_implied()\n             && self.precision.is_implied()\n             && self.align == Alignment::AlignUnknown\n-            && self.flags == 0\n+            && self.no_flags\n     }\n }\n "}, {"sha": "75f378ed2498022ec86af45af51007e73adf675c", "filename": "tests/rustdoc/issue-107350.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ef982929c0b653436a6ea6892a2a839fba7c8b57/tests%2Frustdoc%2Fissue-107350.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef982929c0b653436a6ea6892a2a839fba7c8b57/tests%2Frustdoc%2Fissue-107350.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-107350.rs?ref=ef982929c0b653436a6ea6892a2a839fba7c8b57", "patch": "@@ -0,0 +1,18 @@\n+// This is a regression test for <https://github.com/rust-lang/rust/issues/107350>.\n+// It shouldn't loop indefinitely.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/oops/enum.OhNo.html'\n+\n+pub mod oops {\n+    pub use crate::oops::OhNo;\n+\n+    mod inner {\n+        pub enum OhNo {\n+            Item = 1,\n+        }\n+    }\n+\n+    pub use self::inner::*;\n+}"}]}