{"sha": "463897fd399482bd99fa80871269139f13d740c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2Mzg5N2ZkMzk5NDgyYmQ5OWZhODA4NzEyNjkxMzlmMTNkNzQwYzg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-01T12:05:39Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-18T13:06:39Z"}, "message": "lint on too many single character bindings", "tree": {"sha": "abd7c672e8c1c89c95499ee2f2cf8f43d88b067d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abd7c672e8c1c89c95499ee2f2cf8f43d88b067d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/463897fd399482bd99fa80871269139f13d740c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/463897fd399482bd99fa80871269139f13d740c8", "html_url": "https://github.com/rust-lang/rust/commit/463897fd399482bd99fa80871269139f13d740c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/463897fd399482bd99fa80871269139f13d740c8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5373ffdeb85d55b39671b31fc15a8183d86ff662", "url": "https://api.github.com/repos/rust-lang/rust/commits/5373ffdeb85d55b39671b31fc15a8183d86ff662", "html_url": "https://github.com/rust-lang/rust/commit/5373ffdeb85d55b39671b31fc15a8183d86ff662"}], "stats": {"total": 103, "additions": 91, "deletions": 12}, "files": [{"sha": "65fc097af71366c89875dfb35d2049aaae207b5f", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/463897fd399482bd99fa80871269139f13d740c8/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/463897fd399482bd99fa80871269139f13d740c8/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=463897fd399482bd99fa80871269139f13d740c8", "patch": "@@ -74,6 +74,7 @@ name\n [let_unit_value](https://github.com/Manishearth/rust-clippy/wiki#let_unit_value)                                     | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n [linkedlist](https://github.com/Manishearth/rust-clippy/wiki#linkedlist)                                             | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a VecDeque\n [manual_swap](https://github.com/Manishearth/rust-clippy/wiki#manual_swap)                                           | warn    | manual swap\n+[many_single_char_names](https://github.com/Manishearth/rust-clippy/wiki#many_single_char_names)                     | warn    | too many single character bindings\n [map_clone](https://github.com/Manishearth/rust-clippy/wiki#map_clone)                                               | warn    | using `.map(|x| x.clone())` to clone an iterator or option's contents (recommends `.cloned()` instead)\n [map_entry](https://github.com/Manishearth/rust-clippy/wiki#map_entry)                                               | warn    | use of `contains_key` followed by `insert` on a `HashMap` or `BTreeMap`\n [match_bool](https://github.com/Manishearth/rust-clippy/wiki#match_bool)                                             | warn    | a match on boolean expression; recommends `if..else` block instead"}, {"sha": "82383e2b7a966846a84ff42a95ce6879c67b51ba", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/463897fd399482bd99fa80871269139f13d740c8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463897fd399482bd99fa80871269139f13d740c8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=463897fd399482bd99fa80871269139f13d740c8", "patch": "@@ -204,7 +204,10 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box types::CharLitAsU8);\n     reg.register_late_lint_pass(box print::PrintLint);\n     reg.register_late_lint_pass(box vec::UselessVec);\n-    reg.register_early_lint_pass(box non_expressive_names::SimilarNames(1));\n+    reg.register_early_lint_pass(box non_expressive_names::NonExpressiveNames {\n+        similarity_threshold: 1,\n+        max_single_char_names: 5,\n+    });\n     reg.register_late_lint_pass(box drop_ref::DropRefPass);\n     reg.register_late_lint_pass(box types::AbsurdExtremeComparisons);\n     reg.register_late_lint_pass(box regex::RegexPass::default());\n@@ -331,6 +334,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         needless_update::NEEDLESS_UPDATE,\n         new_without_default::NEW_WITHOUT_DEFAULT,\n         no_effect::NO_EFFECT,\n+        non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n         non_expressive_names::SIMILAR_NAMES,\n         open_options::NONSENSICAL_OPEN_OPTIONS,\n         overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,"}, {"sha": "7f2fc618ed625df7ee91da36dd43e450a748e13a", "filename": "src/non_expressive_names.rs", "status": "modified", "additions": 56, "deletions": 10, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/463897fd399482bd99fa80871269139f13d740c8/src%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463897fd399482bd99fa80871269139f13d740c8/src%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnon_expressive_names.rs?ref=463897fd399482bd99fa80871269139f13d740c8", "patch": "@@ -3,7 +3,7 @@ use syntax::codemap::Span;\n use syntax::parse::token::InternedString;\n use syntax::ast::*;\n use syntax::visit::{self, FnKind};\n-use utils::{span_lint_and_then, in_macro};\n+use utils::{span_lint_and_then, in_macro, span_lint};\n use strsim::levenshtein;\n \n /// **What it does:** This lint warns about names that are very similar and thus confusing\n@@ -19,18 +19,35 @@ declare_lint! {\n     \"similarly named items and bindings\"\n }\n \n-pub struct SimilarNames(pub usize);\n+/// **What it does:** This lint warns about having too many variables whose name consists of a single character\n+///\n+/// **Why is this bad?** It's hard to memorize what a variable means without a descriptive name.\n+///\n+/// **Known problems:** None?\n+///\n+/// **Example:** let (a, b, c, d, e, f, g) = (...);\n+declare_lint! {\n+    pub MANY_SINGLE_CHAR_NAMES,\n+    Warn,\n+    \"too many single character bindings\"\n+}\n+\n+pub struct NonExpressiveNames {\n+    pub similarity_threshold: usize,\n+    pub max_single_char_names: usize,\n+}\n \n-impl LintPass for SimilarNames {\n+impl LintPass for NonExpressiveNames {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(SIMILAR_NAMES)\n+        lint_array!(SIMILAR_NAMES, MANY_SINGLE_CHAR_NAMES)\n     }\n }\n \n struct SimilarNamesLocalVisitor<'a, 'b: 'a> {\n     names: Vec<(InternedString, Span)>,\n     cx: &'a EarlyContext<'b>,\n-    limit: usize,\n+    lint: &'a NonExpressiveNames,\n+    single_char_names: Vec<char>,\n }\n \n const WHITELIST: &'static [&'static str] = &[\n@@ -57,7 +74,15 @@ impl<'a, 'b, 'c> SimilarNamesNameVisitor<'a, 'b, 'c> {\n         if interned_name.chars().any(char::is_uppercase) {\n             return;\n         }\n-        if interned_name.chars().count() < 3 {\n+        let count = interned_name.chars().count();\n+        if count < 3 {\n+            if count == 1 {\n+                let c = interned_name.chars().next().expect(\"already checked\");\n+                // make sure we ignore shadowing\n+                if !self.0.single_char_names.contains(&c) {\n+                    self.0.single_char_names.push(c);\n+                }\n+            }\n             return;\n         }\n         for &allow in WHITELIST {\n@@ -85,7 +110,7 @@ impl<'a, 'b, 'c> SimilarNamesNameVisitor<'a, 'b, 'c> {\n                 continue;\n             }\n             // if they differ enough it's all good\n-            if dist > self.0.limit {\n+            if dist > self.0.lint.similarity_threshold {\n                 continue;\n             }\n             // are we doing stuff like `for item in items`?\n@@ -119,7 +144,8 @@ impl<'a, 'b, 'c> SimilarNamesNameVisitor<'a, 'b, 'c> {\n                                |diag| {\n                                    diag.span_note(sp, \"existing binding defined here\");\n                                    if let Some(split) = split_at {\n-                                       diag.span_help(span, &format!(\"separate the discriminating character by an underscore like: `{}_{}`\",\n+                                       diag.span_help(span, &format!(\"separate the discriminating character \\\n+                                                                      by an underscore like: `{}_{}`\",\n                                                                      &interned_name[..split],\n                                                                      &interned_name[split..]));\n                                    }\n@@ -130,33 +156,53 @@ impl<'a, 'b, 'c> SimilarNamesNameVisitor<'a, 'b, 'c> {\n     }\n }\n \n+impl<'a, 'b> SimilarNamesLocalVisitor<'a, 'b> {\n+    fn check_single_char_count(&self, span: Span) {\n+        if self.single_char_names.len() < self.lint.max_single_char_names {\n+            return;\n+        }\n+        span_lint(self.cx,\n+                  MANY_SINGLE_CHAR_NAMES,\n+                  span,\n+                  &format!(\"scope contains {} bindings whose name are just one char\",\n+                           self.single_char_names.len()));\n+    }\n+}\n+\n impl<'v, 'a, 'b> visit::Visitor<'v> for SimilarNamesLocalVisitor<'a, 'b> {\n     fn visit_local(&mut self, local: &'v Local) {\n         SimilarNamesNameVisitor(self).visit_local(local)\n     }\n     fn visit_block(&mut self, blk: &'v Block) {\n         // ensure scoping rules work\n         let n = self.names.len();\n+        let single_char_count = self.single_char_names.len();\n         visit::walk_block(self, blk);\n         self.names.truncate(n);\n+        self.check_single_char_count(blk.span);\n+        self.single_char_names.truncate(single_char_count);\n     }\n     fn visit_arm(&mut self, arm: &'v Arm) {\n         let n = self.names.len();\n+        let single_char_count = self.single_char_names.len();\n         // just go through the first pattern, as either all patterns bind the same bindings or rustc would have errored much earlier\n         SimilarNamesNameVisitor(self).visit_pat(&arm.pats[0]);\n         self.names.truncate(n);\n+        self.check_single_char_count(arm.body.span);\n+        self.single_char_names.truncate(single_char_count);\n     }\n     fn visit_item(&mut self, _: &'v Item) {\n         // do nothing\n     }\n }\n \n-impl EarlyLintPass for SimilarNames {\n+impl EarlyLintPass for NonExpressiveNames {\n     fn check_fn(&mut self, cx: &EarlyContext, _: FnKind, decl: &FnDecl, blk: &Block, _: Span, _: NodeId) {\n         let mut visitor = SimilarNamesLocalVisitor {\n             names: Vec::new(),\n             cx: cx,\n-            limit: self.0,\n+            lint: &self,\n+            single_char_names: Vec::new(),\n         };\n         // initialize with function arguments\n         for arg in &decl.inputs {"}, {"sha": "3fd089bf5883906a9436835666a2ea0078f91d10", "filename": "tests/compile-fail/eta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/463897fd399482bd99fa80871269139f13d740c8/tests%2Fcompile-fail%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463897fd399482bd99fa80871269139f13d740c8/tests%2Fcompile-fail%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Feta.rs?ref=463897fd399482bd99fa80871269139f13d740c8", "patch": "@@ -1,6 +1,6 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n-#![allow(unknown_lints, unused, no_effect, redundant_closure_call)]\n+#![allow(unknown_lints, unused, no_effect, redundant_closure_call, many_single_char_names)]\n #![deny(redundant_closure)]\n \n fn main() {"}, {"sha": "064f66537eb30255d5e2596cbff162f7611f24fd", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/463897fd399482bd99fa80871269139f13d740c8/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463897fd399482bd99fa80871269139f13d740c8/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=463897fd399482bd99fa80871269139f13d740c8", "patch": "@@ -89,6 +89,7 @@ impl Unrelated {\n #[deny(needless_range_loop, explicit_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop)]\n #[deny(unused_collect)]\n #[allow(linkedlist, shadow_unrelated, unnecessary_mut_passed, cyclomatic_complexity, similar_names)]\n+#[allow(many_single_char_names)]\n fn main() {\n     const MAX_LEN: usize = 42;\n "}, {"sha": "9c75b07356e83c635e13c158b4c08c0311532643", "filename": "tests/compile-fail/non_expressive_names.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/463897fd399482bd99fa80871269139f13d740c8/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463897fd399482bd99fa80871269139f13d740c8/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnon_expressive_names.rs?ref=463897fd399482bd99fa80871269139f13d740c8", "patch": "@@ -35,3 +35,30 @@ fn main() {\n     let cakes: i32;\n     let coke: i32; //~ ERROR: name is too similar\n }\n+\n+\n+fn bla() {\n+    let a: i32;\n+    let (b, c, d): (i32, i64, i16);\n+    {\n+        {\n+            let cdefg: i32;\n+            let blar: i32;\n+        }\n+        { //~ ERROR: scope contains 5 bindings whose name are just one char\n+            let e: i32;\n+        }\n+        { //~ ERROR: scope contains 6 bindings whose name are just one char\n+            let e: i32;\n+            let f: i32;\n+        }\n+        match 5 {\n+            1 => println!(\"\"),\n+            e => panic!(), //~ ERROR: scope contains 5 bindings whose name are just one char\n+        }\n+        match 5 {\n+            1 => println!(\"\"),\n+            _ => panic!(),\n+        }\n+    }\n+}"}]}