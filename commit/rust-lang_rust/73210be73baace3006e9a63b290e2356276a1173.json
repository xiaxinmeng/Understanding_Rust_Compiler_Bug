{"sha": "73210be73baace3006e9a63b290e2356276a1173", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMjEwYmU3M2JhYWNlMzAwNmU5YTYzYjI5MGUyMzU2Mjc2YTExNzM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-04T17:35:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-04T17:35:46Z"}, "message": "tweak README", "tree": {"sha": "f7c8a7f056d6c059dda9df7dfa4a44c1ad4de75b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7c8a7f056d6c059dda9df7dfa4a44c1ad4de75b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73210be73baace3006e9a63b290e2356276a1173", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73210be73baace3006e9a63b290e2356276a1173", "html_url": "https://github.com/rust-lang/rust/commit/73210be73baace3006e9a63b290e2356276a1173", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73210be73baace3006e9a63b290e2356276a1173/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e7180bf469867375cfe6de957caa920f40ec488", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7180bf469867375cfe6de957caa920f40ec488", "html_url": "https://github.com/rust-lang/rust/commit/5e7180bf469867375cfe6de957caa920f40ec488"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "1c2c885674a5d4ea50fc3b550785fb723312f442", "filename": "README.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/73210be73baace3006e9a63b290e2356276a1173/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/73210be73baace3006e9a63b290e2356276a1173/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=73210be73baace3006e9a63b290e2356276a1173", "patch": "@@ -87,8 +87,8 @@ miri run -- -Zmiri-disable-validation` runs the program without validation of\n basic type invariants and without checking the aliasing of references.\n \n When compiling code via `cargo miri`, the `miri` config flag is set.  You can\n-use this to ignore test cases that will fail under Miri because they do things\n-Miri does not support:\n+use this to ignore test cases that fail under Miri because they do things Miri\n+does not support:\n \n ```rust\n #[test]\n@@ -100,12 +100,11 @@ fn does_not_work_on_miri() {\n }\n ```\n \n-An exhaustive list of what `miri` does not support is not available, as this could be\n-an unbounded set with FFI and more. However `miri` will explicitly tell you when it finds\n-something unsupported with an error, containing a message such as:\n+There is no way to list all the infinite things Miri cannot do, but the\n+interpreter will explicitly tell you when it finds something unsupported:\n \n ```\n-error: unsupported operation: can't call foreign function: mach_timebase_info\n+error: unsupported operation: Miri does not support threading\n     ...\n     = help: this is likely not a bug in the program; it indicates that the program \\\n             performed an operation that the interpreter does not support"}]}