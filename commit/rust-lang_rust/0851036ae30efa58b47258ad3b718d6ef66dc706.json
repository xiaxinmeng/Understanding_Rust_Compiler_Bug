{"sha": "0851036ae30efa58b47258ad3b718d6ef66dc706", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NTEwMzZhZTMwZWZhNThiNDcyNThhZDNiNzE4ZDZlZjY2ZGM3MDY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-19T12:29:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-19T12:29:22Z"}, "message": "Rollup merge of #73044 - tmiasko:compiletest-san, r=nikomatsakis\n\ncompiletest: Add directives to detect sanitizer support\n\nAdd needs-sanitizer-{address,leak,memory,thread} directive indicating\nthat test requires target with support for specific sanitizer.\n\nThis is an addition to the existing needs-sanitizer-support directive\nindicating that test requires a sanitizer runtime library.\n\nThe existing needs-sanitizer-support directive could be incorporated into the\nnew ones, but I decided to retain it, since it enables running sanitizer\ncodegen tests even when building of sanitizer runtime libraries is disabled.", "tree": {"sha": "04f732fcf61a4ba689142e9329a0af1a0d99d2d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04f732fcf61a4ba689142e9329a0af1a0d99d2d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0851036ae30efa58b47258ad3b718d6ef66dc706", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7K+iCRBK7hj4Ov3rIwAAdHIIAG2aeRLcp58KwX9HxpkHJ7Oh\n79lL1/swGNnjKhXUnA6FQlwb4BDHayy02m54xInVEVO6w6m/VkQP/ejHrLsmC+g3\nQL43GPTtOzX10SwK2bLPne1/gwvYjqNzBSAKjfC094VSvlC5NLbWYimLRe9LP7b8\nVwDfZBjoQ7wNibExyISvcivw/cLHU/fXU5XqhWrHvn4PV1FYMdaGEYcDRtVFAnwJ\neB8DdCn/hDFx/MFVhq2/wqIyYGhX0HfISPUeJBGbFHPX5fkZghGgjAbfJdcM3/l4\na02jRpXcrvvKHylX5yaIDYM7LWNJIVGAKzUG35PEdc/k4FdL/V9FcDXSH3XH+2c=\n=mFSe\n-----END PGP SIGNATURE-----\n", "payload": "tree 04f732fcf61a4ba689142e9329a0af1a0d99d2d0\nparent 1dc6c3c4ad2d08cc8d8d414cd04cbf0350e2bb14\nparent d40e624a3625c7c2d68c949435fd883cd43dd065\nauthor Ralf Jung <post@ralfj.de> 1592569762 +0200\ncommitter GitHub <noreply@github.com> 1592569762 +0200\n\nRollup merge of #73044 - tmiasko:compiletest-san, r=nikomatsakis\n\ncompiletest: Add directives to detect sanitizer support\n\nAdd needs-sanitizer-{address,leak,memory,thread} directive indicating\nthat test requires target with support for specific sanitizer.\n\nThis is an addition to the existing needs-sanitizer-support directive\nindicating that test requires a sanitizer runtime library.\n\nThe existing needs-sanitizer-support directive could be incorporated into the\nnew ones, but I decided to retain it, since it enables running sanitizer\ncodegen tests even when building of sanitizer runtime libraries is disabled.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0851036ae30efa58b47258ad3b718d6ef66dc706", "html_url": "https://github.com/rust-lang/rust/commit/0851036ae30efa58b47258ad3b718d6ef66dc706", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0851036ae30efa58b47258ad3b718d6ef66dc706/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dc6c3c4ad2d08cc8d8d414cd04cbf0350e2bb14", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc6c3c4ad2d08cc8d8d414cd04cbf0350e2bb14", "html_url": "https://github.com/rust-lang/rust/commit/1dc6c3c4ad2d08cc8d8d414cd04cbf0350e2bb14"}, {"sha": "d40e624a3625c7c2d68c949435fd883cd43dd065", "url": "https://api.github.com/repos/rust-lang/rust/commits/d40e624a3625c7c2d68c949435fd883cd43dd065", "html_url": "https://github.com/rust-lang/rust/commit/d40e624a3625c7c2d68c949435fd883cd43dd065"}], "stats": {"total": 105, "additions": 75, "deletions": 30}, "files": [{"sha": "4bd50508d152056e13f7ecc21d80055ab00a6a45", "filename": "src/test/codegen/sanitizer-memory-track-orgins.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fcodegen%2Fsanitizer-memory-track-orgins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fcodegen%2Fsanitizer-memory-track-orgins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-memory-track-orgins.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -1,9 +1,7 @@\n // Verifies that MemorySanitizer track-origins level can be controlled\n // with -Zsanitizer-memory-track-origins option.\n //\n-// needs-sanitizer-support\n-// only-linux\n-// only-x86_64\n+// needs-sanitizer-memory\n // revisions:MSAN-0 MSAN-1 MSAN-2 MSAN-1-LTO MSAN-2-LTO\n //\n //[MSAN-0] compile-flags: -Zsanitizer=memory"}, {"sha": "be0547afa4cd5059432123f54ab40db0549d9e94", "filename": "src/test/codegen/sanitizer-no-sanitize-inlining.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fcodegen%2Fsanitizer-no-sanitize-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fcodegen%2Fsanitizer-no-sanitize-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-no-sanitize-inlining.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -1,11 +1,9 @@\n // Verifies that no_sanitize attribute prevents inlining when\n // given sanitizer is enabled, but has no effect on inlining otherwise.\n //\n-// needs-sanitizer-support\n-// only-x86_64\n-//\n+// needs-sanitizer-address\n+// needs-sanitizer-leak\n // revisions: ASAN LSAN\n-//\n //[ASAN] compile-flags: -Zsanitizer=address -C opt-level=3 -Z mir-opt-level=3\n //[LSAN] compile-flags: -Zsanitizer=leak    -C opt-level=3 -Z mir-opt-level=3\n "}, {"sha": "1b2b18822e63e8a8c673166bcb92bd0fdb99ac2f", "filename": "src/test/codegen/sanitizer-no-sanitize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fcodegen%2Fsanitizer-no-sanitize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fcodegen%2Fsanitizer-no-sanitize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-no-sanitize.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -1,7 +1,7 @@\n // Verifies that no_sanitze attribute can be used to\n // selectively disable sanitizer instrumentation.\n //\n-// needs-sanitizer-support\n+// needs-sanitizer-address\n // compile-flags: -Zsanitizer=address\n \n #![crate_type=\"lib\"]"}, {"sha": "719f219ce4ef1b9fe8cc0c1830309d352b9f142b", "filename": "src/test/codegen/sanitizer-recover.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -1,9 +1,8 @@\n // Verifies that AddressSanitizer and MemorySanitizer\n // recovery mode can be enabled with -Zsanitizer-recover.\n //\n-// needs-sanitizer-support\n-// only-linux\n-// only-x86_64\n+// needs-sanitizer-address\n+// needs-sanitizer-memory\n // revisions:ASAN ASAN-RECOVER MSAN MSAN-RECOVER MSAN-RECOVER-LTO\n // no-prefer-dynamic\n //"}, {"sha": "b11d4c4cab7cf54c5f1f5de18a50cf3b15372149", "filename": "src/test/run-make-fulldeps/sanitizer-cdylib-link/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -1,5 +1,5 @@\n # needs-sanitizer-support\n-# only-x86_64\n+# needs-sanitizer-address\n # only-linux\n \n -include ../tools.mk"}, {"sha": "c2ebd2a6d8cacbf49ad9c02f92ec1f3e8252b448", "filename": "src/test/run-make-fulldeps/sanitizer-dylib-link/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -1,5 +1,5 @@\n # needs-sanitizer-support\n-# only-x86_64\n+# needs-sanitizer-address\n # only-linux\n \n -include ../tools.mk"}, {"sha": "5ceff16471cee99fde034adabf0d53e8fadd9eeb", "filename": "src/test/run-make-fulldeps/sanitizer-staticlib-link/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2FMakefile?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -1,5 +1,5 @@\n # needs-sanitizer-support\n-# only-x86_64\n+# needs-sanitizer-address\n # only-linux\n \n -include ../tools.mk"}, {"sha": "a79b37ee08210717c27c9f278f7aac0402992e09", "filename": "src/test/rustdoc/sanitizer-option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Frustdoc%2Fsanitizer-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Frustdoc%2Fsanitizer-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsanitizer-option.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -1,4 +1,5 @@\n // needs-sanitizer-support\n+// needs-sanitizer-address\n // compile-flags: --test -Z sanitizer=address\n //\n // #43031: Verify that rustdoc passes `-Z` options to rustc. Use an extern"}, {"sha": "cee73b0425ad52210f7032b7e6b9262babad2b51", "filename": "src/test/ui/sanitize/address.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Faddress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Faddress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Faddress.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -1,5 +1,5 @@\n // needs-sanitizer-support\n-// only-x86_64\n+// needs-sanitizer-address\n //\n // compile-flags: -Z sanitizer=address -O -g\n //"}, {"sha": "095a6f4697b1c15a35a1e5139531b3ec5b4bfa46", "filename": "src/test/ui/sanitize/badfree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Fbadfree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Fbadfree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fbadfree.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -1,5 +1,5 @@\n // needs-sanitizer-support\n-// only-x86_64\n+// needs-sanitizer-address\n //\n // compile-flags: -Z sanitizer=address -O\n //"}, {"sha": "79dfe58f04d0b48274bac1512000aec19a327098", "filename": "src/test/ui/sanitize/cfg.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fcfg.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -2,8 +2,10 @@\n // the `#[cfg(sanitize = \"option\")]` attribute is configured.\n \n // needs-sanitizer-support\n-// only-linux\n-// only-x86_64\n+// needs-sanitizer-address\n+// needs-sanitizer-leak\n+// needs-sanitizer-memory\n+// needs-sanitizer-thread\n // check-pass\n // revisions: address leak memory thread\n //[address]compile-flags: -Zsanitizer=address --cfg address"}, {"sha": "b2e182238ce288803b0cd9116c8be6d8fb939d01", "filename": "src/test/ui/sanitize/issue-72154-lifetime-markers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Fissue-72154-lifetime-markers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Fissue-72154-lifetime-markers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fissue-72154-lifetime-markers.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -4,7 +4,7 @@\n // miscompilation which was subsequently detected by AddressSanitizer as UB.\n //\n // needs-sanitizer-support\n-// only-x86_64\n+// needs-sanitizer-address\n //\n // compile-flags: -Copt-level=0 -Zsanitizer=address\n // run-pass"}, {"sha": "c9f10fe4f467ed73c8bdc7a4a92944bcf49c788e", "filename": "src/test/ui/sanitize/leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Fleak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Fleak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fleak.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -1,5 +1,5 @@\n // needs-sanitizer-support\n-// only-x86_64\n+// needs-sanitizer-leak\n //\n // compile-flags: -Z sanitizer=leak -O\n //"}, {"sha": "a26649a5800131e20a6820ec72a123263552a84a", "filename": "src/test/ui/sanitize/memory.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -1,6 +1,5 @@\n // needs-sanitizer-support\n-// only-linux\n-// only-x86_64\n+// needs-sanitizer-memory\n //\n // compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins -O\n //"}, {"sha": "64d6ccf34091681d386c7c3f746c7e529e2d15fb", "filename": "src/test/ui/sanitize/new-llvm-pass-manager-thin-lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -4,7 +4,7 @@\n //\n // min-llvm-version 9.0\n // needs-sanitizer-support\n-// only-x86_64\n+// needs-sanitizer-address\n //\n // no-prefer-dynamic\n // revisions: opt0 opt1"}, {"sha": "c70cf5accc0776611cf557a43178b708e002708e", "filename": "src/test/ui/sanitize/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fthread.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -11,7 +11,7 @@\n // would occasionally fail, making test flaky.\n //\n // needs-sanitizer-support\n-// only-x86_64\n+// needs-sanitizer-thread\n //\n // compile-flags: -Z sanitizer=thread -O\n //"}, {"sha": "30be2ae6f090641e4bdacb7374f0940b521370fd", "filename": "src/test/ui/sanitize/use-after-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Fuse-after-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftest%2Fui%2Fsanitize%2Fuse-after-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fuse-after-scope.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -1,5 +1,5 @@\n // needs-sanitizer-support\n-// only-x86_64\n+// needs-sanitizer-address\n //\n // compile-flags: -Zsanitizer=address\n // run-fail"}, {"sha": "9614707433e13af4a0111db8a271c7aa8f9547c7", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -43,6 +43,10 @@ impl EarlyProps {\n         let mut props = EarlyProps::default();\n         let rustc_has_profiler_support = env::var_os(\"RUSTC_PROFILER_SUPPORT\").is_some();\n         let rustc_has_sanitizer_support = env::var_os(\"RUSTC_SANITIZER_SUPPORT\").is_some();\n+        let has_asan = util::ASAN_SUPPORTED_TARGETS.contains(&&*config.target);\n+        let has_lsan = util::LSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n+        let has_msan = util::MSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n+        let has_tsan = util::TSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n \n         iter_header(testfile, None, rdr, &mut |ln| {\n             // we should check if any only-<platform> exists and if it exists\n@@ -74,7 +78,25 @@ impl EarlyProps {\n                     props.ignore = true;\n                 }\n \n-                if !rustc_has_sanitizer_support && config.parse_needs_sanitizer_support(ln) {\n+                if !rustc_has_sanitizer_support\n+                    && config.parse_name_directive(ln, \"needs-sanitizer-support\")\n+                {\n+                    props.ignore = true;\n+                }\n+\n+                if !has_asan && config.parse_name_directive(ln, \"needs-sanitizer-address\") {\n+                    props.ignore = true;\n+                }\n+\n+                if !has_lsan && config.parse_name_directive(ln, \"needs-sanitizer-leak\") {\n+                    props.ignore = true;\n+                }\n+\n+                if !has_msan && config.parse_name_directive(ln, \"needs-sanitizer-memory\") {\n+                    props.ignore = true;\n+                }\n+\n+                if !has_tsan && config.parse_name_directive(ln, \"needs-sanitizer-thread\") {\n                     props.ignore = true;\n                 }\n \n@@ -829,10 +851,6 @@ impl Config {\n         self.parse_name_directive(line, \"needs-profiler-support\")\n     }\n \n-    fn parse_needs_sanitizer_support(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"needs-sanitizer-support\")\n-    }\n-\n     /// Parses a name-value directive which contains config-specific information, e.g., `ignore-x86`\n     /// or `normalize-stderr-32bit`.\n     fn parse_cfg_name_directive(&self, line: &str, prefix: &str) -> ParsedNameDirective {"}, {"sha": "72af34d78260ba6007a385300ba0c8be2aeb8622", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -201,3 +201,22 @@ fn debugger() {\n     config.debugger = Some(Debugger::Lldb);\n     assert!(parse_rs(&config, \"// ignore-lldb\").ignore);\n }\n+\n+#[test]\n+fn sanitizers() {\n+    let mut config = config();\n+\n+    // Target that supports all sanitizers:\n+    config.target = \"x86_64-unknown-linux-gnu\".to_owned();\n+    assert!(!parse_rs(&config, \"// needs-sanitizer-address\").ignore);\n+    assert!(!parse_rs(&config, \"// needs-sanitizer-leak\").ignore);\n+    assert!(!parse_rs(&config, \"// needs-sanitizer-memory\").ignore);\n+    assert!(!parse_rs(&config, \"// needs-sanitizer-thread\").ignore);\n+\n+    // Target that doesn't support sanitizers:\n+    config.target = \"wasm32-unknown-emscripten\".to_owned();\n+    assert!(parse_rs(&config, \"// needs-sanitizer-address\").ignore);\n+    assert!(parse_rs(&config, \"// needs-sanitizer-leak\").ignore);\n+    assert!(parse_rs(&config, \"// needs-sanitizer-memory\").ignore);\n+    assert!(parse_rs(&config, \"// needs-sanitizer-thread\").ignore);\n+}"}, {"sha": "0d56bf2d20fcbf8441da21523ced18faa79332d0", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0851036ae30efa58b47258ad3b718d6ef66dc706/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=0851036ae30efa58b47258ad3b718d6ef66dc706", "patch": "@@ -82,6 +82,17 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"xcore\", \"xcore\"),\n ];\n \n+pub const ASAN_SUPPORTED_TARGETS: &'static [&'static str] =\n+    &[\"aarch64-fuchsia\", \"x86_64-apple-darwin\", \"x86_64-fuchsia\", \"x86_64-unknown-linux-gnu\"];\n+\n+pub const LSAN_SUPPORTED_TARGETS: &'static [&'static str] =\n+    &[\"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n+\n+pub const MSAN_SUPPORTED_TARGETS: &'static [&'static str] = &[\"x86_64-unknown-linux-gnu\"];\n+\n+pub const TSAN_SUPPORTED_TARGETS: &'static [&'static str] =\n+    &[\"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n+\n pub fn matches_os(triple: &str, name: &str) -> bool {\n     // For the wasm32 bare target we ignore anything also ignored on emscripten\n     // and then we also recognize `wasm32-bare` as the os for the target"}]}