{"sha": "6973fd716b51b01debf39edd8e43f0059be3d053", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NzNmZDcxNmI1MWIwMWRlYmYzOWVkZDhlNDNmMDA1OWJlM2QwNTM=", "commit": {"author": {"name": "Pyry Kontio", "email": "pyry.kontio@drasa.eu", "date": "2020-05-25T19:50:53Z"}, "committer": {"name": "Pyry Kontio", "email": "pyry.kontio@drasa.eu", "date": "2020-05-25T20:07:00Z"}, "message": "Add bit twiddling", "tree": {"sha": "46e9a8aff1f2ae7a8fc1e3e9bdf317a067ca34cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46e9a8aff1f2ae7a8fc1e3e9bdf317a067ca34cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6973fd716b51b01debf39edd8e43f0059be3d053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6973fd716b51b01debf39edd8e43f0059be3d053", "html_url": "https://github.com/rust-lang/rust/commit/6973fd716b51b01debf39edd8e43f0059be3d053", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6973fd716b51b01debf39edd8e43f0059be3d053/comments", "author": {"login": "golddranks", "id": 2675542, "node_id": "MDQ6VXNlcjI2NzU1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2675542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/golddranks", "html_url": "https://github.com/golddranks", "followers_url": "https://api.github.com/users/golddranks/followers", "following_url": "https://api.github.com/users/golddranks/following{/other_user}", "gists_url": "https://api.github.com/users/golddranks/gists{/gist_id}", "starred_url": "https://api.github.com/users/golddranks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/golddranks/subscriptions", "organizations_url": "https://api.github.com/users/golddranks/orgs", "repos_url": "https://api.github.com/users/golddranks/repos", "events_url": "https://api.github.com/users/golddranks/events{/privacy}", "received_events_url": "https://api.github.com/users/golddranks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "golddranks", "id": 2675542, "node_id": "MDQ6VXNlcjI2NzU1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2675542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/golddranks", "html_url": "https://github.com/golddranks", "followers_url": "https://api.github.com/users/golddranks/followers", "following_url": "https://api.github.com/users/golddranks/following{/other_user}", "gists_url": "https://api.github.com/users/golddranks/gists{/gist_id}", "starred_url": "https://api.github.com/users/golddranks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/golddranks/subscriptions", "organizations_url": "https://api.github.com/users/golddranks/orgs", "repos_url": "https://api.github.com/users/golddranks/repos", "events_url": "https://api.github.com/users/golddranks/events{/privacy}", "received_events_url": "https://api.github.com/users/golddranks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd68de89b55d7f7d7adc41fdcd0a5bac1f805692", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd68de89b55d7f7d7adc41fdcd0a5bac1f805692", "html_url": "https://github.com/rust-lang/rust/commit/bd68de89b55d7f7d7adc41fdcd0a5bac1f805692"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "538cca712ca95ee4cddc5019dd0f42afd3c79742", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6973fd716b51b01debf39edd8e43f0059be3d053/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6973fd716b51b01debf39edd8e43f0059be3d053/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=6973fd716b51b01debf39edd8e43f0059be3d053", "patch": "@@ -857,7 +857,7 @@ impl f32 {\n         let mut left = self.to_bits() as i32;\n         let mut right = other.to_bits() as i32;\n \n-        // In case of negatives, flip all the bits except the sign\n+        // In case of negatives, flip all the bits expect the sign\n         // to achieve a similar layout as two's complement integers\n         //\n         // Why does this work? IEEE 754 floats consist of three fields:\n@@ -872,13 +872,15 @@ impl f32 {\n         // To easily compare the floats as signed integers, we need to\n         // flip the exponent and mantissa bits in case of negative numbers.\n         // We effectively convert the numbers to \"two's complement\" form.\n-        if left < 0 {\n-            // i32::MAX corresponds the bit pattern of \"all ones except for the sign bit\"\n-            left ^= i32::MAX\n-        };\n-        if right < 0 {\n-            right ^= i32::MAX\n-        };\n+        //\n+        // To do the flipping, we construct a mask and XOR against it.\n+        // We branchlessly calculate an \"all-ones expect for the sign bit\"\n+        // mask from negative-signed values: right shifting sign-extends\n+        // the integer, so we \"fill\" the mask with sign bits, and then\n+        // convert to unsigned to push one more zero bit.\n+        // On positive values, the mask is all zeros, so it's a no-op.\n+        left ^= (((left >> 31) as u32) >> 1) as i32;\n+        right ^= (((right >> 31) as u32) >> 1) as i32;\n \n         left.cmp(&right)\n     }"}, {"sha": "b3ebceb77c2e5e05240930b3549e40d52c19dace", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6973fd716b51b01debf39edd8e43f0059be3d053/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6973fd716b51b01debf39edd8e43f0059be3d053/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=6973fd716b51b01debf39edd8e43f0059be3d053", "patch": "@@ -886,13 +886,15 @@ impl f64 {\n         // To easily compare the floats as signed integers, we need to\n         // flip the exponent and mantissa bits in case of negative numbers.\n         // We effectively convert the numbers to \"two's complement\" form.\n-        if left < 0 {\n-            // i64::MAX corresponds the bit pattern of \"all ones expect for the sign bit\"\n-            left ^= i64::MAX\n-        };\n-        if right < 0 {\n-            right ^= i64::MAX\n-        };\n+        //\n+        // To do the flipping, we construct a mask and XOR against it.\n+        // We branchlessly calculate an \"all-ones expect for the sign bit\"\n+        // mask from negative-signed values: right shifting sign-extends\n+        // the integer, so we \"fill\" the mask with sign bits, and then\n+        // convert to unsigned to push one more zero bit.\n+        // On positive values, the mask is all zeros, so it's a no-op.\n+        left ^= (((left >> 63) as u64) >> 1) as i64;\n+        right ^= (((right >> 63) as u64) >> 1) as i64;\n \n         left.cmp(&right)\n     }"}]}