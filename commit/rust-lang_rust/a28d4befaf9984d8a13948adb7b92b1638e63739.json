{"sha": "a28d4befaf9984d8a13948adb7b92b1638e63739", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyOGQ0YmVmYWY5OTg0ZDhhMTM5NDhhZGI3YjkyYjE2MzhlNjM3Mzk=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-09T20:31:31Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-09T20:53:55Z"}, "message": "Fix another crash, and try harder to prevent stack overflows", "tree": {"sha": "10f85c89063b657098848e0310f2438ac032fd4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10f85c89063b657098848e0310f2438ac032fd4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a28d4befaf9984d8a13948adb7b92b1638e63739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a28d4befaf9984d8a13948adb7b92b1638e63739", "html_url": "https://github.com/rust-lang/rust/commit/a28d4befaf9984d8a13948adb7b92b1638e63739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a28d4befaf9984d8a13948adb7b92b1638e63739/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0c3b37255423b3547614d74311c4193c0717b56", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c3b37255423b3547614d74311c4193c0717b56", "html_url": "https://github.com/rust-lang/rust/commit/c0c3b37255423b3547614d74311c4193c0717b56"}], "stats": {"total": 82, "additions": 75, "deletions": 7}, "files": [{"sha": "5d5bde3050b0d676121945badfd9b4a07432651f", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a28d4befaf9984d8a13948adb7b92b1638e63739/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28d4befaf9984d8a13948adb7b92b1638e63739/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=a28d4befaf9984d8a13948adb7b92b1638e63739", "patch": "@@ -879,11 +879,22 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         ty\n     }\n \n-    fn unify_substs(&mut self, substs1: &Substs, substs2: &Substs) -> bool {\n-        substs1.0.iter().zip(substs2.0.iter()).all(|(t1, t2)| self.unify(t1, t2))\n+    fn unify_substs(&mut self, substs1: &Substs, substs2: &Substs, depth: usize) -> bool {\n+        substs1.0.iter().zip(substs2.0.iter()).all(|(t1, t2)| self.unify_inner(t1, t2, depth))\n     }\n \n     fn unify(&mut self, ty1: &Ty, ty2: &Ty) -> bool {\n+        self.unify_inner(ty1, ty2, 0)\n+    }\n+\n+    fn unify_inner(&mut self, ty1: &Ty, ty2: &Ty, depth: usize) -> bool {\n+        if depth > 1000 {\n+            // prevent stackoverflows\n+            panic!(\"infinite recursion in unification\");\n+        }\n+        if ty1 == ty2 {\n+            return true;\n+        }\n         // try to resolve type vars first\n         let ty1 = self.resolve_ty_shallow(ty1);\n         let ty2 = self.resolve_ty_shallow(ty2);\n@@ -904,13 +915,15 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             (\n                 Ty::Adt { def_id: def_id1, substs: substs1, .. },\n                 Ty::Adt { def_id: def_id2, substs: substs2, .. },\n-            ) if def_id1 == def_id2 => self.unify_substs(substs1, substs2),\n-            (Ty::Slice(t1), Ty::Slice(t2)) => self.unify(t1, t2),\n-            (Ty::RawPtr(t1, m1), Ty::RawPtr(t2, m2)) if m1 == m2 => self.unify(t1, t2),\n-            (Ty::Ref(t1, m1), Ty::Ref(t2, m2)) if m1 == m2 => self.unify(t1, t2),\n+            ) if def_id1 == def_id2 => self.unify_substs(substs1, substs2, depth + 1),\n+            (Ty::Slice(t1), Ty::Slice(t2)) => self.unify_inner(t1, t2, depth + 1),\n+            (Ty::RawPtr(t1, m1), Ty::RawPtr(t2, m2)) if m1 == m2 => {\n+                self.unify_inner(t1, t2, depth + 1)\n+            }\n+            (Ty::Ref(t1, m1), Ty::Ref(t2, m2)) if m1 == m2 => self.unify_inner(t1, t2, depth + 1),\n             (Ty::FnPtr(sig1), Ty::FnPtr(sig2)) if sig1 == sig2 => true,\n             (Ty::Tuple(ts1), Ty::Tuple(ts2)) if ts1.len() == ts2.len() => {\n-                ts1.iter().zip(ts2.iter()).all(|(t1, t2)| self.unify(t1, t2))\n+                ts1.iter().zip(ts2.iter()).all(|(t1, t2)| self.unify_inner(t1, t2, depth + 1))\n             }\n             (Ty::Infer(InferTy::TypeVar(tv1)), Ty::Infer(InferTy::TypeVar(tv2)))\n             | (Ty::Infer(InferTy::IntVar(tv1)), Ty::Infer(InferTy::IntVar(tv2)))"}, {"sha": "6bbf59fb6dc43e97f184376c996befb8720f665c", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_std_crash_5.snap", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a28d4befaf9984d8a13948adb7b92b1638e63739/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_5.snap", "raw_url": "https://github.com/rust-lang/rust/raw/a28d4befaf9984d8a13948adb7b92b1638e63739/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_5.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_5.snap?ref=a28d4befaf9984d8a13948adb7b92b1638e63739", "patch": "@@ -0,0 +1,30 @@\n+---\n+created: \"2019-02-09T20:28:37.294693728Z\"\n+creator: insta@0.6.1\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[27; 323) '{     ...   } }': ()\n+[33; 321) 'for co...     }': ()\n+[37; 44) 'content': &[unknown]\n+[48; 61) 'doesnt_matter': [unknown]\n+[62; 321) '{     ...     }': ()\n+[76; 80) 'name': &&[unknown]\n+[83; 167) 'if doe...     }': &&[unknown]\n+[86; 99) 'doesnt_matter': bool\n+[100; 129) '{     ...     }': &&[unknown]\n+[114; 119) 'first': &&[unknown]\n+[135; 167) '{     ...     }': &&[unknown]\n+[149; 157) '&content': &&[unknown]\n+[150; 157) 'content': &[unknown]\n+[182; 189) 'content': &&[unknown]\n+[192; 314) 'if ICE...     }': &&[unknown]\n+[195; 232) 'ICE_RE..._VALUE': [unknown]\n+[195; 248) 'ICE_RE...&name)': bool\n+[242; 247) '&name': &&&[unknown]\n+[243; 247) 'name': &&[unknown]\n+[249; 277) '{     ...     }': &&[unknown]\n+[263; 267) 'name': &&[unknown]\n+[283; 314) '{     ...     }': &[unknown]\n+[297; 304) 'content': &[unknown]\n+"}, {"sha": "8cc771084fe937fbb937854edd13520c4a6979bb", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a28d4befaf9984d8a13948adb7b92b1638e63739/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28d4befaf9984d8a13948adb7b92b1638e63739/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=a28d4befaf9984d8a13948adb7b92b1638e63739", "patch": "@@ -693,6 +693,31 @@ pub fn primitive_type() {\n     );\n }\n \n+#[test]\n+fn infer_std_crash_5() {\n+    // taken from rustc\n+    check_inference(\n+        \"infer_std_crash_5\",\n+        r#\"\n+fn extra_compiler_flags() {\n+    for content in doesnt_matter {\n+        let name = if doesnt_matter {\n+            first\n+        } else {\n+            &content\n+        };\n+\n+        let content = if ICE_REPORT_COMPILER_FLAGS_STRIP_VALUE.contains(&name) {\n+            name\n+        } else {\n+            content\n+        };\n+    }\n+}\n+\"#,\n+    );\n+}\n+\n fn infer(content: &str) -> String {\n     let (db, _, file_id) = MockDatabase::with_single_file(content);\n     let source_file = db.parse(file_id);"}]}