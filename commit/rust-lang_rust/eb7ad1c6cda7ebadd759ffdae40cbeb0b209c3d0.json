{"sha": "eb7ad1c6cda7ebadd759ffdae40cbeb0b209c3d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViN2FkMWM2Y2RhN2ViYWRkNzU5ZmZkYWU0MGNiZWIwYjIwOWMzZDA=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2020-04-17T06:09:09Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2020-04-17T06:09:09Z"}, "message": "cargo dev fmt", "tree": {"sha": "7577014b4a6dc94c60bb94e6fd1e101c00c1b37f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7577014b4a6dc94c60bb94e6fd1e101c00c1b37f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb7ad1c6cda7ebadd759ffdae40cbeb0b209c3d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE6VFioMHrom999LRAK0OZxL9Ny94FAl6ZSA8ACgkQK0OZxL9N\ny959uBAAxBf4zsPe4/rQ4CbYdca+4aDUCi4CgVdavelVU/qpHHC/57Pu2iV3J2Iu\nsIoOyQkXU+yT6rLVRRkhnRqQD7mGJPP3AN/PmSusvPLOOao2ME20Ck/n1hsCbcin\n9SfEbS7mAQWT6GG0y1eS3cS5Gei79eQMLez6Y2/FcJ2cR+6miY8YD8KAWD957RO1\nhYO0+aGjZYwn9scv/r3mFtml4G+CZKVp7S7eeKFUEPFo9LTq+CBDW+DLuY8tch1y\nijss8NVOABv1lo5p27oAcHNQho1hEi0VSJA8KEEnOk1Doez1XJuz+nIqdsMHqMZD\nO26ZEBL+Ol0UhMiIOAaWQL4jdIju5IdIRkvplOYrmOZ1DLjyiL2Ceg4ItA1MVyQ7\nUfV3JewrGvzapGA6o1bKdVU+7T1VzGJfN2sppwlWgQZT0dLqtSkEqS30InBGjc/P\ni6+B5bscNOXn6QZNf+f8vmfc4zyY8G4N3TvS9e3iAkrdoaF6barMr8BhtunwVOmq\nfEsDrRTQNqhTIlf+SMojN2Yz5wIxZdAPmHSXRuS+hEjXa/QGF9nQyTUz9rTeDl/j\nOkfSz470Qy+/StsyxDoZf+Je+9sHkAekZQSgn8twUxh75Skf9XljD2bYIZVS4bep\n5nultfoYTnmAwVzz54OvbkrtcXy5klVCK49TIk4f/Y6bAhBZXmo=\n=BMg5\n-----END PGP SIGNATURE-----", "payload": "tree 7577014b4a6dc94c60bb94e6fd1e101c00c1b37f\nparent 870ae36f853b560811399a56a1605523ab775743\nauthor Philipp Hansch <dev@phansch.net> 1587103749 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1587103749 +0200\n\ncargo dev fmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7ad1c6cda7ebadd759ffdae40cbeb0b209c3d0", "html_url": "https://github.com/rust-lang/rust/commit/eb7ad1c6cda7ebadd759ffdae40cbeb0b209c3d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb7ad1c6cda7ebadd759ffdae40cbeb0b209c3d0/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "870ae36f853b560811399a56a1605523ab775743", "url": "https://api.github.com/repos/rust-lang/rust/commits/870ae36f853b560811399a56a1605523ab775743", "html_url": "https://github.com/rust-lang/rust/commit/870ae36f853b560811399a56a1605523ab775743"}], "stats": {"total": 98, "additions": 61, "deletions": 37}, "files": [{"sha": "098d47bdd40cb10aba75123be872c7e28aeae5af", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/eb7ad1c6cda7ebadd759ffdae40cbeb0b209c3d0/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7ad1c6cda7ebadd759ffdae40cbeb0b209c3d0/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=eb7ad1c6cda7ebadd759ffdae40cbeb0b209c3d0", "patch": "@@ -124,15 +124,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                             && !rcpy\n                             && implements_trait(cx, lty, trait_id, &[cx.tables.expr_ty(right).into()])\n                         {\n-                            span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |diag| {\n-                                let lsnip = snippet(cx, l.span, \"...\").to_string();\n-                                diag.span_suggestion(\n-                                    left.span,\n-                                    \"use the left value directly\",\n-                                    lsnip,\n-                                    Applicability::MaybeIncorrect, // FIXME #2597\n-                                );\n-                            })\n+                            span_lint_and_then(\n+                                cx,\n+                                OP_REF,\n+                                e.span,\n+                                \"needlessly taken reference of left operand\",\n+                                |diag| {\n+                                    let lsnip = snippet(cx, l.span, \"...\").to_string();\n+                                    diag.span_suggestion(\n+                                        left.span,\n+                                        \"use the left value directly\",\n+                                        lsnip,\n+                                        Applicability::MaybeIncorrect, // FIXME #2597\n+                                    );\n+                                },\n+                            )\n                         } else if !lcpy\n                             && rcpy\n                             && implements_trait(cx, cx.tables.expr_ty(left), trait_id, &[rty.into()])\n@@ -161,15 +167,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         if (requires_ref || lcpy)\n                             && implements_trait(cx, lty, trait_id, &[cx.tables.expr_ty(right).into()])\n                         {\n-                            span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |diag| {\n-                                let lsnip = snippet(cx, l.span, \"...\").to_string();\n-                                diag.span_suggestion(\n-                                    left.span,\n-                                    \"use the left value directly\",\n-                                    lsnip,\n-                                    Applicability::MaybeIncorrect, // FIXME #2597\n-                                );\n-                            })\n+                            span_lint_and_then(\n+                                cx,\n+                                OP_REF,\n+                                e.span,\n+                                \"needlessly taken reference of left operand\",\n+                                |diag| {\n+                                    let lsnip = snippet(cx, l.span, \"...\").to_string();\n+                                    diag.span_suggestion(\n+                                        left.span,\n+                                        \"use the left value directly\",\n+                                        lsnip,\n+                                        Applicability::MaybeIncorrect, // FIXME #2597\n+                                    );\n+                                },\n+                            )\n                         }\n                     },\n                     // foo == &bar"}, {"sha": "c6f57298c2601a7287e8608fe2b536dff326bc78", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eb7ad1c6cda7ebadd759ffdae40cbeb0b209c3d0/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7ad1c6cda7ebadd759ffdae40cbeb0b209c3d0/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=eb7ad1c6cda7ebadd759ffdae40cbeb0b209c3d0", "patch": "@@ -53,14 +53,20 @@ impl RedundantStaticLifetimes {\n                             if lifetime.ident.name == rustc_span::symbol::kw::StaticLifetime {\n                                 let snip = snippet(cx, borrow_type.ty.span, \"<type>\");\n                                 let sugg = format!(\"&{}\", snip);\n-                                span_lint_and_then(cx, REDUNDANT_STATIC_LIFETIMES, lifetime.ident.span, reason, |diag| {\n-                                    diag.span_suggestion(\n-                                        ty.span,\n-                                        \"consider removing `'static`\",\n-                                        sugg,\n-                                        Applicability::MachineApplicable, //snippet\n-                                    );\n-                                });\n+                                span_lint_and_then(\n+                                    cx,\n+                                    REDUNDANT_STATIC_LIFETIMES,\n+                                    lifetime.ident.span,\n+                                    reason,\n+                                    |diag| {\n+                                        diag.span_suggestion(\n+                                            ty.span,\n+                                            \"consider removing `'static`\",\n+                                            sugg,\n+                                            Applicability::MachineApplicable, //snippet\n+                                        );\n+                                    },\n+                                );\n                             }\n                         },\n                         _ => {},"}, {"sha": "31d8daa2d97786f03cd35463db83396e1a3d8c4d", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eb7ad1c6cda7ebadd759ffdae40cbeb0b209c3d0/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7ad1c6cda7ebadd759ffdae40cbeb0b209c3d0/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=eb7ad1c6cda7ebadd759ffdae40cbeb0b209c3d0", "patch": "@@ -608,17 +608,23 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnitValue {\n                 if higher::is_from_for_desugar(local) {\n                     return;\n                 }\n-                span_lint_and_then(cx, LET_UNIT_VALUE, stmt.span, \"this let-binding has unit value\", |diag| {\n-                    if let Some(expr) = &local.init {\n-                        let snip = snippet_with_macro_callsite(cx, expr.span, \"()\");\n-                        diag.span_suggestion(\n-                            stmt.span,\n-                            \"omit the `let` binding\",\n-                            format!(\"{};\", snip),\n-                            Applicability::MachineApplicable, // snippet\n-                        );\n-                    }\n-                });\n+                span_lint_and_then(\n+                    cx,\n+                    LET_UNIT_VALUE,\n+                    stmt.span,\n+                    \"this let-binding has unit value\",\n+                    |diag| {\n+                        if let Some(expr) = &local.init {\n+                            let snip = snippet_with_macro_callsite(cx, expr.span, \"()\");\n+                            diag.span_suggestion(\n+                                stmt.span,\n+                                \"omit the `let` binding\",\n+                                format!(\"{};\", snip),\n+                                Applicability::MachineApplicable, // snippet\n+                            );\n+                        }\n+                    },\n+                );\n             }\n         }\n     }"}]}