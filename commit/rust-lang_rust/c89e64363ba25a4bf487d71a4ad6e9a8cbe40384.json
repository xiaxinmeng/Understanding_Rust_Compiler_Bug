{"sha": "c89e64363ba25a4bf487d71a4ad6e9a8cbe40384", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4OWU2NDM2M2JhMjVhNGJmNDg3ZDcxYTRhZDZlOWE4Y2JlNDAzODQ=", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-02-26T14:44:35Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-02-26T14:44:35Z"}, "message": "Fix invalid slice access in String::retain", "tree": {"sha": "84f9acf1f7c7d5c77948d248bb223558f1923f40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84f9acf1f7c7d5c77948d248bb223558f1923f40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c89e64363ba25a4bf487d71a4ad6e9a8cbe40384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c89e64363ba25a4bf487d71a4ad6e9a8cbe40384", "html_url": "https://github.com/rust-lang/rust/commit/c89e64363ba25a4bf487d71a4ad6e9a8cbe40384", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c89e64363ba25a4bf487d71a4ad6e9a8cbe40384/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d95d30486180387a875b14633aea4e4dd8f960da", "url": "https://api.github.com/repos/rust-lang/rust/commits/d95d30486180387a875b14633aea4e4dd8f960da", "html_url": "https://github.com/rust-lang/rust/commit/d95d30486180387a875b14633aea4e4dd8f960da"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "e8d83d3f18dad934287cbaef0613c423fd79eb96", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c89e64363ba25a4bf487d71a4ad6e9a8cbe40384/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89e64363ba25a4bf487d71a4ad6e9a8cbe40384/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=c89e64363ba25a4bf487d71a4ad6e9a8cbe40384", "patch": "@@ -1233,37 +1233,44 @@ impl String {\n     where\n         F: FnMut(char) -> bool,\n     {\n-        let len = self.len();\n-        let mut del_bytes = 0;\n-        let mut idx = 0;\n+        struct SetLenOnDrop<'a> {\n+            s: &'a mut String,\n+            idx: usize,\n+            del_bytes: usize,\n+        }\n \n-        unsafe {\n-            self.vec.set_len(0);\n+        impl<'a> Drop for SetLenOnDrop<'a> {\n+            fn drop(&mut self) {\n+                let new_len = self.idx - self.del_bytes;\n+                debug_assert!(new_len <= self.s.len());\n+                unsafe { self.s.vec.set_len(new_len) };\n+            }\n         }\n \n-        while idx < len {\n-            let ch = unsafe { self.get_unchecked(idx..len).chars().next().unwrap() };\n+        let len = self.len();\n+        let mut guard = SetLenOnDrop { s: self, idx: 0, del_bytes: 0 };\n+\n+        while guard.idx < len {\n+            let ch = unsafe { guard.s.get_unchecked(guard.idx..len).chars().next().unwrap() };\n             let ch_len = ch.len_utf8();\n \n             if !f(ch) {\n-                del_bytes += ch_len;\n-            } else if del_bytes > 0 {\n+                guard.del_bytes += ch_len;\n+            } else if guard.del_bytes > 0 {\n                 unsafe {\n                     ptr::copy(\n-                        self.vec.as_ptr().add(idx),\n-                        self.vec.as_mut_ptr().add(idx - del_bytes),\n+                        guard.s.vec.as_ptr().add(guard.idx),\n+                        guard.s.vec.as_mut_ptr().add(guard.idx - guard.del_bytes),\n                         ch_len,\n                     );\n                 }\n             }\n \n             // Point idx to the next char\n-            idx += ch_len;\n+            guard.idx += ch_len;\n         }\n \n-        unsafe {\n-            self.vec.set_len(len - del_bytes);\n-        }\n+        drop(guard);\n     }\n \n     /// Inserts a character into this `String` at a byte position."}]}