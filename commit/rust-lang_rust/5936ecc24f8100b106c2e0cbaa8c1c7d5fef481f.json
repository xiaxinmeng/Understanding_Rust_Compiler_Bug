{"sha": "5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MzZlY2MyNGY4MTAwYjEwNmMyZTBjYmFhOGMxYzdkNWZlZjQ4MWY=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-15T08:40:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-15T08:40:08Z"}, "message": "Rollup merge of #85608 - scottmcm:stabilize-control-flow-enum-basics, r=m-ou-se\n\nStabilize `ops::ControlFlow` (just the type)\n\nTracking issue: https://github.com/rust-lang/rust/issues/75744 (which also tracks items *not* closed by this PR).\n\nWith the new `?` desugar implemented, [it's no longer possible to mix `Result` and `ControlFlow`](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=13feec97f5c96a9d791d97f7de2d49a6).  (At the time of making this PR, godbolt was still on the 2021-05-01 nightly, where you can see that [the mixing example compiled](https://rust.godbolt.org/z/13Ke54j16).)  That resolves the only blocker I know of, so I'd like to propose that `ControlFlow` be considered for stabilization.\n\nIts basic existence was part of https://github.com/rust-lang/rfcs/pull/3058, where it got a bunch of positive comments (examples [1](https://github.com/rust-lang/rfcs/pull/3058#issuecomment-758277325) [2](https://github.com/rust-lang/rfcs/pull/3058#pullrequestreview-592106494) [3](https://github.com/rust-lang/rfcs/pull/3058#issuecomment-784444155) [4](https://github.com/rust-lang/rfcs/pull/3058#issuecomment-797031584)).  Its use in the compiler has been well received (https://github.com/rust-lang/rust/pull/78182#issuecomment-713695594), and there are ecosystem updates interested in using it (https://github.com/rust-itertools/itertools/issues/469#issuecomment-677729589, https://github.com/jonhoo/rust-imap/issues/194).\n\nAs this will need an FCP, picking a libs member manually:\nr? `@m-ou-se`\n\n## Stabilized APIs\n\n```rust\n#[derive(Debug, Clone, Copy, PartialEq)]\npub enum ControlFlow<B, C = ()> {\n    /// Exit the operation without running subsequent phases.\n    Break(B),\n    /// Move on to the next phase of the operation as normal.\n    Continue(C),\n}\n```\n\nAs well as using `?` on a `ControlFlow<B, _>` in a function returning `ControlFlow<B, _>`.  (Note, in particular, that there's no `From::from`-conversion on the `Break` value, the way there is for `Err`s.)\n\n## Existing APIs *not* stabilized here\n\nAll the associated methods and constants: `break_value`, `is_continue`, `map_break`, [`CONTINUE`](https://doc.rust-lang.org/nightly/std/ops/enum.ControlFlow.html#associatedconstant.CONTINUE), etc.\n\nSome of the existing methods in nightly seem reasonable, some seem like they should be removed, and some need more discussion to decide.  But none of them are *essential*, so [as in the RFC](https://rust-lang.github.io/rfcs/3058-try-trait-v2.html#methods-on-controlflow), they're all omitted from this PR.\n\nThey can be considered separately later, as further usage demonstrates which are important.", "tree": {"sha": "265486d16be19f4ba24d93f67af4ce78fee3bd28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/265486d16be19f4ba24d93f67af4ce78fee3bd28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgyGdoCRBK7hj4Ov3rIwAAAR4IAGlEhDgZ+pM+kxDfvodMKoqr\noTCY40OJ1Wse8DrqmKp7GQcETD8m3kP8yq7BVZCHAvc80QK3DWt6ymBtvnesMOvF\nqEuhdXQZzp5ukfPmMtcaN+xrZrT8oZK5wcqVICVS+oVtV8gKyuMYuBrgFZzx9sJ4\n/LoyityDpFZihNRsAgRKfCIEJChLSitZ+4XD9VAc5/4W4VsTvz/Yhlwo61MlKk60\ndWuaCqbaOw4sInX/ZMKrHSt+zQ2nx2onm73OjsBpLJTafVwRyflO6c14rKeL3LiM\n2e3medZk7cQ0pLQ1Aa4zX9w8TheAz3Hi0ox863gWBPGqo7rRIi7vgEItZVw28JM=\n=oL/H\n-----END PGP SIGNATURE-----\n", "payload": "tree 265486d16be19f4ba24d93f67af4ce78fee3bd28\nparent 1e14d397db323b037a22e6440f85293d938ce6a7\nparent 590d4526e91d77cc514deb58c3d87e30b3f74db6\nauthor Yuki Okushi <jtitor@2k36.org> 1623746408 +0900\ncommitter GitHub <noreply@github.com> 1623746408 +0900\n\nRollup merge of #85608 - scottmcm:stabilize-control-flow-enum-basics, r=m-ou-se\n\nStabilize `ops::ControlFlow` (just the type)\n\nTracking issue: https://github.com/rust-lang/rust/issues/75744 (which also tracks items *not* closed by this PR).\n\nWith the new `?` desugar implemented, [it's no longer possible to mix `Result` and `ControlFlow`](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=13feec97f5c96a9d791d97f7de2d49a6).  (At the time of making this PR, godbolt was still on the 2021-05-01 nightly, where you can see that [the mixing example compiled](https://rust.godbolt.org/z/13Ke54j16).)  That resolves the only blocker I know of, so I'd like to propose that `ControlFlow` be considered for stabilization.\n\nIts basic existence was part of https://github.com/rust-lang/rfcs/pull/3058, where it got a bunch of positive comments (examples [1](https://github.com/rust-lang/rfcs/pull/3058#issuecomment-758277325) [2](https://github.com/rust-lang/rfcs/pull/3058#pullrequestreview-592106494) [3](https://github.com/rust-lang/rfcs/pull/3058#issuecomment-784444155) [4](https://github.com/rust-lang/rfcs/pull/3058#issuecomment-797031584)).  Its use in the compiler has been well received (https://github.com/rust-lang/rust/pull/78182#issuecomment-713695594), and there are ecosystem updates interested in using it (https://github.com/rust-itertools/itertools/issues/469#issuecomment-677729589, https://github.com/jonhoo/rust-imap/issues/194).\n\nAs this will need an FCP, picking a libs member manually:\nr? `@m-ou-se`\n\n## Stabilized APIs\n\n```rust\n#[derive(Debug, Clone, Copy, PartialEq)]\npub enum ControlFlow<B, C = ()> {\n    /// Exit the operation without running subsequent phases.\n    Break(B),\n    /// Move on to the next phase of the operation as normal.\n    Continue(C),\n}\n```\n\nAs well as using `?` on a `ControlFlow<B, _>` in a function returning `ControlFlow<B, _>`.  (Note, in particular, that there's no `From::from`-conversion on the `Break` value, the way there is for `Err`s.)\n\n## Existing APIs *not* stabilized here\n\nAll the associated methods and constants: `break_value`, `is_continue`, `map_break`, [`CONTINUE`](https://doc.rust-lang.org/nightly/std/ops/enum.ControlFlow.html#associatedconstant.CONTINUE), etc.\n\nSome of the existing methods in nightly seem reasonable, some seem like they should be removed, and some need more discussion to decide.  But none of them are *essential*, so [as in the RFC](https://rust-lang.github.io/rfcs/3058-try-trait-v2.html#methods-on-controlflow), they're all omitted from this PR.\n\nThey can be considered separately later, as further usage demonstrates which are important.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f", "html_url": "https://github.com/rust-lang/rust/commit/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e14d397db323b037a22e6440f85293d938ce6a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e14d397db323b037a22e6440f85293d938ce6a7", "html_url": "https://github.com/rust-lang/rust/commit/1e14d397db323b037a22e6440f85293d938ce6a7"}, {"sha": "590d4526e91d77cc514deb58c3d87e30b3f74db6", "url": "https://api.github.com/repos/rust-lang/rust/commits/590d4526e91d77cc514deb58c3d87e30b3f74db6", "html_url": "https://github.com/rust-lang/rust/commit/590d4526e91d77cc514deb58c3d87e30b3f74db6"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "3e278a447f0b4d99fc09a4109af5540a31fbdd0f", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f", "patch": "@@ -331,7 +331,7 @@ pub fn lower_crate<'a, 'hir>(\n         lifetimes_to_define: Vec::new(),\n         is_collecting_in_band_lifetimes: false,\n         in_scope_lifetimes: Vec::new(),\n-        allow_try_trait: Some([sym::control_flow_enum, sym::try_trait_v2][..].into()),\n+        allow_try_trait: Some([sym::try_trait_v2][..].into()),\n         allow_gen_future: Some([sym::gen_future][..].into()),\n     }\n     .lower_crate(krate)"}, {"sha": "00f0fe4a2889413dddd5fc6933cb17637378e658", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f", "patch": "@@ -11,7 +11,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(box_patterns)]\n #![feature(bool_to_option)]\n-#![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n #![feature(format_args_capture)]\n #![feature(iter_zip)]"}, {"sha": "a96d37c652d12a94c14376256f1be5e2c5dd22dc", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f", "patch": "@@ -416,7 +416,6 @@ symbols! {\n         constructor,\n         contents,\n         context,\n-        control_flow_enum,\n         convert,\n         copy,\n         copy_closures,"}, {"sha": "d0b05beb4e63c86ee9ea23d25931a4a5c715acfc", "filename": "compiler/rustc_traits/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Flib.rs?ref=5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f", "patch": "@@ -4,7 +4,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(control_flow_enum)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "78d317096b4f6ee85df8490c138faa16c8711fa9", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f", "patch": "@@ -1959,6 +1959,31 @@ pub trait Iterator {\n     /// assert_eq!(it.len(), 2);\n     /// assert_eq!(it.next(), Some(&40));\n     /// ```\n+    ///\n+    /// While you cannot `break` from a closure, the [`crate::ops::ControlFlow`]\n+    /// type allows a similar idea:\n+    ///\n+    /// ```\n+    /// use std::ops::ControlFlow;\n+    ///\n+    /// let triangular = (1..30).try_fold(0_i8, |prev, x| {\n+    ///     if let Some(next) = prev.checked_add(x) {\n+    ///         ControlFlow::Continue(next)\n+    ///     } else {\n+    ///         ControlFlow::Break(prev)\n+    ///     }\n+    /// });\n+    /// assert_eq!(triangular, ControlFlow::Break(120));\n+    ///\n+    /// let triangular = (1..30).try_fold(0_u64, |prev, x| {\n+    ///     if let Some(next) = prev.checked_add(x) {\n+    ///         ControlFlow::Continue(next)\n+    ///     } else {\n+    ///         ControlFlow::Break(prev)\n+    ///     }\n+    /// });\n+    /// assert_eq!(triangular, ControlFlow::Continue(435));\n+    /// ```\n     #[inline]\n     #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n     fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R\n@@ -2001,6 +2026,22 @@ pub trait Iterator {\n     /// // It short-circuited, so the remaining items are still in the iterator:\n     /// assert_eq!(it.next(), Some(\"stale_bread.json\"));\n     /// ```\n+    ///\n+    /// The [`crate::ops::ControlFlow`] type can be used with this method for the\n+    /// situations in which you'd use `break` and `continue` in a normal loop:\n+    ///\n+    /// ```\n+    /// use std::ops::ControlFlow;\n+    ///\n+    /// let r = (2..100).try_for_each(|x| {\n+    ///     if 323 % x == 0 {\n+    ///         return ControlFlow::Break(x)\n+    ///     }\n+    ///\n+    ///     ControlFlow::Continue(())\n+    /// });\n+    /// assert_eq!(r, ControlFlow::Break(17));\n+    /// ```\n     #[inline]\n     #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n     fn try_for_each<F, R>(&mut self, f: F) -> R"}, {"sha": "c26b5c677105b54389c2b20513e0641f2631b496", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f", "patch": "@@ -11,7 +11,6 @@ use crate::{convert, ops};\n ///\n /// Early-exiting from [`Iterator::try_for_each`]:\n /// ```\n-/// #![feature(control_flow_enum)]\n /// use std::ops::ControlFlow;\n ///\n /// let r = (2..100).try_for_each(|x| {\n@@ -26,7 +25,6 @@ use crate::{convert, ops};\n ///\n /// A basic tree traversal:\n /// ```no_run\n-/// #![feature(control_flow_enum)]\n /// use std::ops::ControlFlow;\n ///\n /// pub struct TreeNode<T> {\n@@ -48,13 +46,15 @@ use crate::{convert, ops};\n ///     }\n /// }\n /// ```\n-#[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+#[stable(feature = \"control_flow_enum_type\", since = \"1.55.0\")]\n #[derive(Debug, Clone, Copy, PartialEq)]\n pub enum ControlFlow<B, C = ()> {\n     /// Move on to the next phase of the operation as normal.\n+    #[stable(feature = \"control_flow_enum_type\", since = \"1.55.0\")]\n     #[cfg_attr(not(bootstrap), lang = \"Continue\")]\n     Continue(C),\n     /// Exit the operation without running subsequent phases.\n+    #[stable(feature = \"control_flow_enum_type\", since = \"1.55.0\")]\n     #[cfg_attr(not(bootstrap), lang = \"Break\")]\n     Break(B),\n     // Yes, the order of the variants doesn't match the type parameters."}, {"sha": "0eec52a8701c7dbaa4cf4cd118f75cd724d1b1af", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f", "patch": "@@ -55,7 +55,6 @@ use crate::ops::ControlFlow;\n /// into the return type using [`Try::from_output`]:\n /// ```\n /// # #![feature(try_trait_v2)]\n-/// # #![feature(control_flow_enum)]\n /// # use std::ops::{ControlFlow, Try};\n /// fn simple_try_fold_2<A, T, R: Try<Output = A>>(\n ///     iter: impl Iterator<Item = T>,\n@@ -79,7 +78,6 @@ use crate::ops::ControlFlow;\n /// recreated from their corresponding residual, so we'll just call it:\n /// ```\n /// # #![feature(try_trait_v2)]\n-/// # #![feature(control_flow_enum)]\n /// # use std::ops::{ControlFlow, Try};\n /// pub fn simple_try_fold_3<A, T, R: Try<Output = A>>(\n ///     iter: impl Iterator<Item = T>,\n@@ -170,7 +168,6 @@ pub trait Try: FromResidual {\n     ///\n     /// ```\n     /// #![feature(try_trait_v2)]\n-    /// #![feature(control_flow_enum)]\n     /// use std::ops::Try;\n     ///\n     /// assert_eq!(<Result<_, String> as Try>::from_output(3), Ok(3));\n@@ -202,7 +199,6 @@ pub trait Try: FromResidual {\n     ///\n     /// ```\n     /// #![feature(try_trait_v2)]\n-    /// #![feature(control_flow_enum)]\n     /// use std::ops::{ControlFlow, Try};\n     ///\n     /// assert_eq!(Ok::<_, String>(3).branch(), ControlFlow::Continue(3));\n@@ -329,7 +325,6 @@ pub trait FromResidual<R = <Self as Try>::Residual> {\n     ///\n     /// ```\n     /// #![feature(try_trait_v2)]\n-    /// #![feature(control_flow_enum)]\n     /// use std::ops::{ControlFlow, FromResidual};\n     ///\n     /// assert_eq!(Result::<String, i64>::from_residual(Err(3_u8)), Err(3));"}, {"sha": "65fca67b4f290760deea01fc84cdbfc7becd3e10", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=5936ecc24f8100b106c2e0cbaa8c1c7d5fef481f", "patch": "@@ -15,7 +15,6 @@\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]\n #![feature(const_ptr_offset)]\n-#![feature(control_flow_enum)]\n #![feature(core_intrinsics)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]"}]}