{"sha": "9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNDE0YTQ0YTc0N2VkYzdkYzIyOWUwZWFmNmZiZGE1ZTZlYTEwZTE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-02-13T12:51:27Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-02-13T12:51:27Z"}, "message": "Split ast::PatKind::Enum into tuple struct and path patterns", "tree": {"sha": "50806db4794c6b9d8bd1c3b4e685db0322c0d007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50806db4794c6b9d8bd1c3b4e685db0322c0d007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1", "html_url": "https://github.com/rust-lang/rust/commit/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14adc9bb63998d552bff351ad2184244cbc952f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/14adc9bb63998d552bff351ad2184244cbc952f6", "html_url": "https://github.com/rust-lang/rust/commit/14adc9bb63998d552bff351ad2184244cbc952f6"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "bb113a7ad6a773444f547aa17ac20059274b892f", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1", "patch": "@@ -920,11 +920,14 @@ pub fn lower_pat(lctx: &LoweringContext, p: &Pat) -> P<hir::Pat> {\n                               sub.as_ref().map(|x| lower_pat(lctx, x)))\n             }\n             PatKind::Lit(ref e) => hir::PatLit(lower_expr(lctx, e)),\n-            PatKind::Enum(ref pth, ref pats) => {\n+            PatKind::TupleStruct(ref pth, ref pats) => {\n                 hir::PatEnum(lower_path(lctx, pth),\n                              pats.as_ref()\n                                  .map(|pats| pats.iter().map(|x| lower_pat(lctx, x)).collect()))\n             }\n+            PatKind::Path(ref pth) => {\n+                hir::PatEnum(lower_path(lctx, pth), Some(hir::HirVec::new()))\n+            }\n             PatKind::QPath(ref qself, ref pth) => {\n                 let qself = hir::QSelf {\n                     ty: lower_ty(lctx, &qself.ty),"}, {"sha": "9c529ccbe00672dc2b899d77b6c862180431e75b", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1", "patch": "@@ -762,7 +762,8 @@ impl<'v> Visitor<'v> for PathCollector {\n                 self.collected_paths.push((p.id, path.clone(),\n                                            ast::Mutability::Mutable, recorder::TypeRef));\n             }\n-            PatKind::Enum(ref path, _) |\n+            PatKind::TupleStruct(ref path, _) |\n+            PatKind::Path(ref path) |\n             PatKind::QPath(_, ref path) => {\n                 self.collected_paths.push((p.id, path.clone(),\n                                            ast::Mutability::Mutable, recorder::VarRef));"}, {"sha": "cb79c609c1bfc19f3208fbcb140cdb9c84f152cf", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1", "patch": "@@ -555,28 +555,34 @@ pub enum PatKind {\n     /// Represents a wildcard pattern (`_`)\n     Wild,\n \n-    /// A PatKind::Ident may either be a new bound variable,\n-    /// or a nullary enum (in which case the third field\n-    /// is None).\n+    /// A `PatKind::Ident` may either be a new bound variable,\n+    /// or a unit struct/variant pattern, or a const pattern (in the last two cases\n+    /// the third field must be `None`).\n     ///\n-    /// In the nullary enum case, the parser can't determine\n+    /// In the unit or const pattern case, the parser can't determine\n     /// which it is. The resolver determines this, and\n-    /// records this pattern's NodeId in an auxiliary\n-    /// set (of \"PatIdents that refer to nullary enums\")\n+    /// records this pattern's `NodeId` in an auxiliary\n+    /// set (of \"PatIdents that refer to unit patterns or constants\").\n     Ident(BindingMode, SpannedIdent, Option<P<Pat>>),\n \n+    /// A struct or struct variant pattern, e.g. `Variant {x, y, ..}`.\n+    /// The `bool` is `true` in the presence of a `..`.\n+    Struct(Path, Vec<Spanned<FieldPat>>, bool),\n+\n+    /// A tuple struct/variant pattern `Variant(x, y, z)`.\n     /// \"None\" means a `Variant(..)` pattern where we don't bind the fields to names.\n-    Enum(Path, Option<Vec<P<Pat>>>),\n+    TupleStruct(Path, Option<Vec<P<Pat>>>),\n+\n+    /// A path pattern.\n+    /// Such pattern can be resolved to a unit struct/variant or a constant.\n+    Path(Path),\n \n     /// An associated const named using the qualified path `<T>::CONST` or\n     /// `<T as Trait>::CONST`. Associated consts from inherent impls can be\n     /// referred to as simply `T::CONST`, in which case they will end up as\n     /// PatKind::Enum, and the resolver will have to sort that out.\n     QPath(QSelf, Path),\n \n-    /// Destructuring of a struct, e.g. `Foo {x, y, ..}`\n-    /// The `bool` is `true` in the presence of a `..`\n-    Struct(Path, Vec<Spanned<FieldPat>>, bool),\n     /// A tuple pattern `(a, b)`\n     Tup(Vec<P<Pat>>),\n     /// A `box` pattern"}, {"sha": "0eb42f17f68b41f59e054c1282308ef476a79eb4", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1", "patch": "@@ -827,7 +827,11 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.pat(span, pat)\n     }\n     fn pat_enum(&self, span: Span, path: ast::Path, subpats: Vec<P<ast::Pat>>) -> P<ast::Pat> {\n-        let pat = PatKind::Enum(path, Some(subpats));\n+        let pat = if subpats.is_empty() {\n+            PatKind::Path(path)\n+        } else {\n+            PatKind::TupleStruct(path, Some(subpats))\n+        };\n         self.pat(span, pat)\n     }\n     fn pat_struct(&self, span: Span,"}, {"sha": "d75e8f796ae891143d18c56ccfe6c4eb5cf0d996", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1", "patch": "@@ -1127,10 +1127,13 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n                         sub.map(|x| folder.fold_pat(x)))\n             }\n             PatKind::Lit(e) => PatKind::Lit(folder.fold_expr(e)),\n-            PatKind::Enum(pth, pats) => {\n-                PatKind::Enum(folder.fold_path(pth),\n+            PatKind::TupleStruct(pth, pats) => {\n+                PatKind::TupleStruct(folder.fold_path(pth),\n                         pats.map(|pats| pats.move_map(|x| folder.fold_pat(x))))\n             }\n+            PatKind::Path(pth) => {\n+                PatKind::Path(folder.fold_path(pth))\n+            }\n             PatKind::QPath(qself, pth) => {\n                 let qself = QSelf {ty: folder.fold_ty(qself.ty), .. qself};\n                 PatKind::QPath(qself, folder.fold_path(pth))"}, {"sha": "a8d35783c6f9b38a18f868136639b8ba36f255f5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1", "patch": "@@ -3534,22 +3534,22 @@ impl<'a> Parser<'a> {\n                             self.bump();\n                             self.bump();\n                             try!(self.expect(&token::CloseDelim(token::Paren)));\n-                            pat = PatKind::Enum(path, None);\n+                            pat = PatKind::TupleStruct(path, None);\n                         } else {\n                             let args = try!(self.parse_enum_variant_seq(\n                                     &token::OpenDelim(token::Paren),\n                                     &token::CloseDelim(token::Paren),\n                                     seq_sep_trailing_allowed(token::Comma),\n                                     |p| p.parse_pat()));\n-                            pat = PatKind::Enum(path, Some(args));\n+                            pat = PatKind::TupleStruct(path, Some(args));\n                         }\n                       }\n                       _ => {\n                         pat = match qself {\n                             // Parse qualified path\n                             Some(qself) => PatKind::QPath(qself, path),\n                             // Parse nullary enum\n-                            None => PatKind::Enum(path, Some(vec![]))\n+                            None => PatKind::Path(path)\n                         };\n                       }\n                     }"}, {"sha": "b4e08d65a0a8d7a228aeb0b39cedb1399325ed53", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1", "patch": "@@ -2478,20 +2478,21 @@ impl<'a> State<'a> {\n                     None => ()\n                 }\n             }\n-            PatKind::Enum(ref path, ref args_) => {\n+            PatKind::TupleStruct(ref path, ref args_) => {\n                 try!(self.print_path(path, true, 0));\n                 match *args_ {\n                     None => try!(word(&mut self.s, \"(..)\")),\n                     Some(ref args) => {\n-                        if !args.is_empty() {\n-                            try!(self.popen());\n-                            try!(self.commasep(Inconsistent, &args[..],\n-                                              |s, p| s.print_pat(&p)));\n-                            try!(self.pclose());\n-                        }\n+                        try!(self.popen());\n+                        try!(self.commasep(Inconsistent, &args[..],\n+                                          |s, p| s.print_pat(&p)));\n+                        try!(self.pclose());\n                     }\n                 }\n             }\n+            PatKind::Path(ref path) => {\n+                try!(self.print_path(path, true, 0));\n+            }\n             PatKind::QPath(ref qself, ref path) => {\n                 try!(self.print_qpath(path, qself, false));\n             }"}, {"sha": "f26610b8b8d14613ec1f237e168719f1840832e0", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=9f414a44a747edc7dc229e0eaf6fbda5e6ea10e1", "patch": "@@ -419,12 +419,15 @@ pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(visitor: &mut V,\n \n pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n     match pattern.node {\n-        PatKind::Enum(ref path, ref opt_children) => {\n+        PatKind::TupleStruct(ref path, ref opt_children) => {\n             visitor.visit_path(path, pattern.id);\n             if let Some(ref children) = *opt_children {\n                 walk_list!(visitor, visit_pat, children);\n             }\n         }\n+        PatKind::Path(ref path) => {\n+            visitor.visit_path(path, pattern.id);\n+        }\n         PatKind::QPath(ref qself, ref path) => {\n             visitor.visit_ty(&qself.ty);\n             visitor.visit_path(path, pattern.id)"}]}