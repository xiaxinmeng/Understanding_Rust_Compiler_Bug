{"sha": "84487b212daa3916b52ab1469afba161760e3081", "node_id": "C_kwDOAAsO6NoAKDg0NDg3YjIxMmRhYTM5MTZiNTJhYjE0NjlhZmJhMTYxNzYwZTMwODE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-19T10:00:27Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-28T18:04:19Z"}, "message": "Reformat codegen_fn_attrs.", "tree": {"sha": "c88f9380503c06225f476104863a2b99c0201dfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c88f9380503c06225f476104863a2b99c0201dfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84487b212daa3916b52ab1469afba161760e3081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84487b212daa3916b52ab1469afba161760e3081", "html_url": "https://github.com/rust-lang/rust/commit/84487b212daa3916b52ab1469afba161760e3081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84487b212daa3916b52ab1469afba161760e3081/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf57e8ada6dc62369d1cee7ab055fb4074bd2d10", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf57e8ada6dc62369d1cee7ab055fb4074bd2d10", "html_url": "https://github.com/rust-lang/rust/commit/bf57e8ada6dc62369d1cee7ab055fb4074bd2d10"}], "stats": {"total": 104, "additions": 33, "deletions": 71}, "files": [{"sha": "dac7d2e89b1cece3fa84ba019587ef57a0755f13", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 33, "deletions": 71, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/84487b212daa3916b52ab1469afba161760e3081/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84487b212daa3916b52ab1469afba161760e3081/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=84487b212daa3916b52ab1469afba161760e3081", "patch": "@@ -89,44 +89,24 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: LocalDefId) -> CodegenFnAttrs {\n         };\n \n         match name {\n-            sym::cold => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::COLD;\n-            }\n-            sym::rustc_allocator => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR;\n-            }\n+            sym::cold => codegen_fn_attrs.flags |= CodegenFnAttrFlags::COLD,\n+            sym::rustc_allocator => codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR,\n             sym::ffi_returns_twice => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_RETURNS_TWICE;\n-            }\n-            sym::ffi_pure => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_PURE;\n-            }\n-            sym::ffi_const => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_CONST;\n-            }\n-            sym::rustc_nounwind => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::NEVER_UNWIND;\n-            }\n-            sym::rustc_reallocator => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::REALLOCATOR;\n-            }\n-            sym::rustc_deallocator => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::DEALLOCATOR;\n+                codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_RETURNS_TWICE\n             }\n+            sym::ffi_pure => codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_PURE,\n+            sym::ffi_const => codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_CONST,\n+            sym::rustc_nounwind => codegen_fn_attrs.flags |= CodegenFnAttrFlags::NEVER_UNWIND,\n+            sym::rustc_reallocator => codegen_fn_attrs.flags |= CodegenFnAttrFlags::REALLOCATOR,\n+            sym::rustc_deallocator => codegen_fn_attrs.flags |= CodegenFnAttrFlags::DEALLOCATOR,\n             sym::rustc_allocator_zeroed => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR_ZEROED;\n-            }\n-            sym::naked => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::NAKED;\n-            }\n-            sym::no_mangle => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_MANGLE;\n-            }\n-            sym::no_coverage => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_COVERAGE;\n+                codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR_ZEROED\n             }\n+            sym::naked => codegen_fn_attrs.flags |= CodegenFnAttrFlags::NAKED,\n+            sym::no_mangle => codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_MANGLE,\n+            sym::no_coverage => codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_COVERAGE,\n             sym::rustc_std_internal_symbol => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n+                codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL\n             }\n             sym::used => {\n                 let inner = attr.meta_item_list();\n@@ -207,11 +187,9 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: LocalDefId) -> CodegenFnAttrs {\n                     struct_span_err!(tcx.sess, attr.span, E0775, \"`#[cmse_nonsecure_entry]` is only valid for targets with the TrustZone-M extension\")\n                     .emit();\n                 }\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::CMSE_NONSECURE_ENTRY;\n-            }\n-            sym::thread_local => {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::THREAD_LOCAL;\n+                codegen_fn_attrs.flags |= CodegenFnAttrFlags::CMSE_NONSECURE_ENTRY\n             }\n+            sym::thread_local => codegen_fn_attrs.flags |= CodegenFnAttrFlags::THREAD_LOCAL,\n             sym::track_caller => {\n                 if !tcx.is_closure(did.to_def_id())\n                     && let Some(fn_sig) = fn_sig()\n@@ -229,7 +207,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: LocalDefId) -> CodegenFnAttrs {\n                     )\n                     .emit();\n                 }\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;\n+                codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER\n             }\n             sym::export_name => {\n                 if let Some(s) = attr.value_str() {\n@@ -306,20 +284,14 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: LocalDefId) -> CodegenFnAttrs {\n             sym::link_section => {\n                 if let Some(val) = attr.value_str() {\n                     if val.as_str().bytes().any(|b| b == 0) {\n-                        let msg = format!(\n-                            \"illegal null byte in link_section \\\n-                             value: `{}`\",\n-                            &val\n-                        );\n+                        let msg = format!(\"illegal null byte in link_section value: `{}`\", &val);\n                         tcx.sess.span_err(attr.span, &msg);\n                     } else {\n                         codegen_fn_attrs.link_section = Some(val);\n                     }\n                 }\n             }\n-            sym::link_name => {\n-                codegen_fn_attrs.link_name = attr.value_str();\n-            }\n+            sym::link_name => codegen_fn_attrs.link_name = attr.value_str(),\n             sym::link_ordinal => {\n                 link_ordinal_span = Some(attr.span);\n                 if let ordinal @ Some(_) = check_link_ordinal(tcx, attr) {\n@@ -330,37 +302,27 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: LocalDefId) -> CodegenFnAttrs {\n                 no_sanitize_span = Some(attr.span);\n                 if let Some(list) = attr.meta_item_list() {\n                     for item in list.iter() {\n-                        match item.ident().map(|ident| ident.name) {\n-                            Some(sym::address) => {\n+                        match item.name_or_empty() {\n+                            sym::address => {\n                                 codegen_fn_attrs.no_sanitize |=\n-                                    SanitizerSet::ADDRESS | SanitizerSet::KERNELADDRESS;\n-                            }\n-                            Some(sym::cfi) => {\n-                                codegen_fn_attrs.no_sanitize |= SanitizerSet::CFI;\n-                            }\n-                            Some(sym::kcfi) => {\n-                                codegen_fn_attrs.no_sanitize |= SanitizerSet::KCFI;\n+                                    SanitizerSet::ADDRESS | SanitizerSet::KERNELADDRESS\n                             }\n-                            Some(sym::memory) => {\n-                                codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY;\n+                            sym::cfi => codegen_fn_attrs.no_sanitize |= SanitizerSet::CFI,\n+                            sym::kcfi => codegen_fn_attrs.no_sanitize |= SanitizerSet::KCFI,\n+                            sym::memory => codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY,\n+                            sym::memtag => codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMTAG,\n+                            sym::shadow_call_stack => {\n+                                codegen_fn_attrs.no_sanitize |= SanitizerSet::SHADOWCALLSTACK\n                             }\n-                            Some(sym::memtag) => {\n-                                codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMTAG;\n-                            }\n-                            Some(sym::shadow_call_stack) => {\n-                                codegen_fn_attrs.no_sanitize |= SanitizerSet::SHADOWCALLSTACK;\n-                            }\n-                            Some(sym::thread) => {\n-                                codegen_fn_attrs.no_sanitize |= SanitizerSet::THREAD;\n-                            }\n-                            Some(sym::hwaddress) => {\n-                                codegen_fn_attrs.no_sanitize |= SanitizerSet::HWADDRESS;\n+                            sym::thread => codegen_fn_attrs.no_sanitize |= SanitizerSet::THREAD,\n+                            sym::hwaddress => {\n+                                codegen_fn_attrs.no_sanitize |= SanitizerSet::HWADDRESS\n                             }\n                             _ => {\n                                 tcx.sess\n-                                .struct_span_err(item.span(), \"invalid argument for `no_sanitize`\")\n-                                .note(\"expected one of: `address`, `cfi`, `hwaddress`, `kcfi`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\")\n-                                .emit();\n+                                    .struct_span_err(item.span(), \"invalid argument for `no_sanitize`\")\n+                                    .note(\"expected one of: `address`, `cfi`, `hwaddress`, `kcfi`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\")\n+                                    .emit();\n                             }\n                         }\n                     }"}]}