{"sha": "6dd0c3a9e8f78ecff737fdcbaf73a70ff3e96e65", "node_id": "C_kwDOAAsO6NoAKDZkZDBjM2E5ZThmNzhlY2ZmNzM3ZmRjYmFmNzNhNzBmZjNlOTZlNjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-06T14:12:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-06T14:12:29Z"}, "message": "Auto merge of #9599 - nyurik:inline-crash, r=flip1995\n\nAdd a temporary workaround for  multiline formart arg inlining\n\nper suggestion in\nhttps://github.com/rust-lang/rust/pull/102729#discussion_r988990080\n\nworkaround for an internal crash when handling multi-line format argument inlining.\n\nchangelog: none\n\n(no point for changelog because it is still a new lint being introduced)", "tree": {"sha": "95e0e674704b4b5a358be29328347988681fb92f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95e0e674704b4b5a358be29328347988681fb92f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dd0c3a9e8f78ecff737fdcbaf73a70ff3e96e65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd0c3a9e8f78ecff737fdcbaf73a70ff3e96e65", "html_url": "https://github.com/rust-lang/rust/commit/6dd0c3a9e8f78ecff737fdcbaf73a70ff3e96e65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dd0c3a9e8f78ecff737fdcbaf73a70ff3e96e65/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45343e2bb8cbff3661586d4391e88dde90e5a276", "url": "https://api.github.com/repos/rust-lang/rust/commits/45343e2bb8cbff3661586d4391e88dde90e5a276", "html_url": "https://github.com/rust-lang/rust/commit/45343e2bb8cbff3661586d4391e88dde90e5a276"}, {"sha": "cfd6c8d19d1db6f2da66415dd60a82f2c706363e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd6c8d19d1db6f2da66415dd60a82f2c706363e", "html_url": "https://github.com/rust-lang/rust/commit/cfd6c8d19d1db6f2da66415dd60a82f2c706363e"}], "stats": {"total": 71, "additions": 15, "deletions": 56}, "files": [{"sha": "45ed21e066ad806b6920ab8ce8bf5deae7b59dd0", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6dd0c3a9e8f78ecff737fdcbaf73a70ff3e96e65/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd0c3a9e8f78ecff737fdcbaf73a70ff3e96e65/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=6dd0c3a9e8f78ecff737fdcbaf73a70ff3e96e65", "patch": "@@ -8,7 +8,7 @@ use if_chain::if_chain;\n use itertools::Itertools;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, HirId, QPath};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n use rustc_middle::ty::Ty;\n use rustc_semver::RustcVersion;\n@@ -173,6 +173,11 @@ fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_si\n         return;\n     }\n \n+    // Temporarily ignore multiline spans: https://github.com/rust-lang/rust/pull/102729#discussion_r988704308\n+    if fixes.iter().any(|(span, _)| cx.sess().source_map().is_multiline(*span)) {\n+        return;\n+    }\n+\n     span_lint_and_then(\n         cx,\n         UNINLINED_FORMAT_ARGS,"}, {"sha": "3ca7a401902530446a86f271af9946a2f8bebb57", "filename": "tests/ui/uninlined_format_args.fixed", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6dd0c3a9e8f78ecff737fdcbaf73a70ff3e96e65/tests%2Fui%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6dd0c3a9e8f78ecff737fdcbaf73a70ff3e96e65/tests%2Fui%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.fixed?ref=6dd0c3a9e8f78ecff737fdcbaf73a70ff3e96e65", "patch": "@@ -44,7 +44,9 @@ fn tester(fn_arg: i32) {\n     println!(\"val='{local_i32}'\"); // space+tab\n     println!(\"val='{local_i32}'\"); // tab+space\n     println!(\n-        \"val='{local_i32}'\"\n+        \"val='{\n+    }'\",\n+        local_i32\n     );\n     println!(\"{local_i32}\");\n     println!(\"{fn_arg}\");\n@@ -108,7 +110,8 @@ fn tester(fn_arg: i32) {\n     println!(\"{local_f64:width$.prec$}\");\n     println!(\"{local_f64:width$.prec$} {local_f64} {width} {prec}\");\n     println!(\n-        \"{local_i32:width$.prec$} {local_i32:prec$.width$} {width:local_i32$.prec$} {width:prec$.local_i32$} {prec:local_i32$.width$} {prec:width$.local_i32$}\",\n+        \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n+        local_i32, width, prec,\n     );\n     println!(\n         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$} {3}\",\n@@ -139,7 +142,9 @@ fn tester(fn_arg: i32) {\n     println!(no_param_str!(), local_i32);\n \n     println!(\n-        \"{val}\",\n+        \"{}\",\n+        // comment with a comma , in it\n+        val,\n     );\n     println!(\"{val}\");\n "}, {"sha": "d1a7749263429d5a7a5c9978e8087a05f5732224", "filename": "tests/ui/uninlined_format_args.stderr", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6dd0c3a9e8f78ecff737fdcbaf73a70ff3e96e65/tests%2Fui%2Funinlined_format_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dd0c3a9e8f78ecff737fdcbaf73a70ff3e96e65/tests%2Fui%2Funinlined_format_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.stderr?ref=6dd0c3a9e8f78ecff737fdcbaf73a70ff3e96e65", "patch": "@@ -59,22 +59,6 @@ LL -     println!(\"val='{     }'\", local_i32); // tab+space\n LL +     println!(\"val='{local_i32}'\"); // tab+space\n    |\n \n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:46:5\n-   |\n-LL | /     println!(\n-LL | |         \"val='{\n-LL | |     }'\",\n-LL | |         local_i32\n-LL | |     );\n-   | |_____^\n-   |\n-help: change this to\n-   |\n-LL -         \"val='{\n-LL +         \"val='{local_i32}'\"\n-   |\n-\n error: variables can be used directly in the `format!` string\n   --> $DIR/uninlined_format_args.rs:51:5\n    |\n@@ -783,25 +767,6 @@ LL -     println!(\"{:1$.2$} {0} {1} {2}\", local_f64, width, prec);\n LL +     println!(\"{local_f64:width$.prec$} {local_f64} {width} {prec}\");\n    |\n \n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:112:5\n-   |\n-LL | /     println!(\n-LL | |         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n-LL | |         local_i32, width, prec,\n-LL | |     );\n-   | |_____^\n-   |\n-help: change this to\n-   |\n-LL ~         \"{local_i32:width$.prec$} {local_i32:prec$.width$} {width:local_i32$.prec$} {width:prec$.local_i32$} {prec:local_i32$.width$} {prec:width$.local_i32$}\", width, prec,\n-LL ~         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\", width, prec,\n-LL ~         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\", width, prec,\n-LL ~         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\", width, prec,\n-LL ~         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\", width, prec,\n-LL ~         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n-   |\n-\n error: variables can be used directly in the `format!` string\n   --> $DIR/uninlined_format_args.rs:123:5\n    |\n@@ -850,22 +815,6 @@ LL -     println!(\"{}\", format!(\"{}\", local_i32));\n LL +     println!(\"{}\", format!(\"{local_i32}\"));\n    |\n \n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:144:5\n-   |\n-LL | /     println!(\n-LL | |         \"{}\",\n-LL | |         // comment with a comma , in it\n-LL | |         val,\n-LL | |     );\n-   | |_____^\n-   |\n-help: change this to\n-   |\n-LL -         \"{}\",\n-LL +         \"{val}\",\n-   |\n-\n error: variables can be used directly in the `format!` string\n   --> $DIR/uninlined_format_args.rs:149:5\n    |\n@@ -890,5 +839,5 @@ LL -     println!(\"expand='{}'\", local_i32);\n LL +     println!(\"expand='{local_i32}'\");\n    |\n \n-error: aborting due to 73 previous errors\n+error: aborting due to 70 previous errors\n "}]}