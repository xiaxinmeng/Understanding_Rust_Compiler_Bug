{"sha": "070c39ca1d4792a96f08d19c22378d5b5b019f02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MGMzOWNhMWQ0NzkyYTk2ZjA4ZDE5YzIyMzc4ZDViNWIwMTlmMDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-14T21:57:21Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T01:23:47Z"}, "message": "Split parsing of fn proto between types, items and anons\n\nThe meaning of various fn incantations is going to get temporarily confusing", "tree": {"sha": "2d7202d950e30fa3ca2f2738c56e78a9634cd90c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d7202d950e30fa3ca2f2738c56e78a9634cd90c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/070c39ca1d4792a96f08d19c22378d5b5b019f02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/070c39ca1d4792a96f08d19c22378d5b5b019f02", "html_url": "https://github.com/rust-lang/rust/commit/070c39ca1d4792a96f08d19c22378d5b5b019f02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/070c39ca1d4792a96f08d19c22378d5b5b019f02/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "html_url": "https://github.com/rust-lang/rust/commit/686d6a485f71b98fe9ea7dddd25de0c33efeea7a"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "01770aa8a6033517eef7dfbc36dba4d6551e7fc5", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/070c39ca1d4792a96f08d19c22378d5b5b019f02/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070c39ca1d4792a96f08d19c22378d5b5b019f02/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=070c39ca1d4792a96f08d19c22378d5b5b019f02", "patch": "@@ -569,7 +569,7 @@ fn parse_ty(p: parser, colons_before_params: bool) -> @ast::ty {\n         hi = p.get_hi_pos();\n         expect(p, token::RBRACKET);\n     } else if eat_word(p, \"fn\") {\n-        let proto = parse_fn_proto(p);\n+        let proto = parse_fn_ty_proto(p);\n         t = parse_ty_fn(proto, p);\n         alt t { ast::ty_fn(_, _, out, _, _) { hi = out.span.hi; } }\n     } else if eat_word(p, \"block\") {\n@@ -846,7 +846,7 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n                 ret parse_spawn_expr(p);\n         */\n     } else if eat_word(p, \"fn\") {\n-        let proto = parse_fn_proto(p);\n+        let proto = parse_fn_anon_proto(p);\n         ret parse_fn_expr(p, proto);\n     } else if eat_word(p, \"block\") {\n         ret parse_fn_expr(p, ast::proto_block);\n@@ -2143,7 +2143,31 @@ fn parse_auth(p: parser) -> ast::_auth {\n     } else { unexpected(p, p.peek()); }\n }\n \n-fn parse_fn_proto(p: parser) -> ast::proto {\n+fn parse_fn_item_proto(p: parser) -> ast::proto {\n+    if p.peek() == token::POUND {\n+        p.bump();\n+        ast::proto_bare\n+    } else if p.peek() == token::AT {\n+        p.bump();\n+        ast::proto_fn\n+    } else {\n+        ast::proto_fn\n+    }\n+}\n+\n+fn parse_fn_ty_proto(p: parser) -> ast::proto {\n+    if p.peek() == token::POUND {\n+        p.bump();\n+        ast::proto_bare\n+    } else if p.peek() == token::AT {\n+        p.bump();\n+        ast::proto_fn\n+    } else {\n+        ast::proto_fn\n+    }\n+}\n+\n+fn parse_fn_anon_proto(p: parser) -> ast::proto {\n     if p.peek() == token::POUND {\n         p.bump();\n         ast::proto_bare\n@@ -2160,17 +2184,17 @@ fn parse_item(p: parser, attrs: [ast::attribute]) -> option::t<@ast::item> {\n         ret some(parse_item_const(p, attrs));\n     } else if eat_word(p, \"inline\") {\n         expect_word(p, \"fn\");\n-        let proto = parse_fn_proto(p);\n+        let proto = parse_fn_item_proto(p);\n         ret some(parse_item_fn_or_iter(p, ast::impure_fn, proto,\n                                        attrs, ast::il_inline));\n     } else if is_word(p, \"fn\") && p.look_ahead(1u) != token::LPAREN {\n         p.bump();\n-        let proto = parse_fn_proto(p);\n+        let proto = parse_fn_item_proto(p);\n         ret some(parse_item_fn_or_iter(p, ast::impure_fn, proto,\n                                        attrs, ast::il_normal));\n     } else if eat_word(p, \"pure\") {\n         expect_word(p, \"fn\");\n-        let proto = parse_fn_proto(p);\n+        let proto = parse_fn_item_proto(p);\n         ret some(parse_item_fn_or_iter(p, ast::pure_fn, proto, attrs,\n                                        ast::il_normal));\n     } else if is_word(p, \"unsafe\") && p.look_ahead(1u) != token::LBRACE {"}]}