{"sha": "060deec4b1e94be6fbc640a027c1a935d970e33e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MGRlZWM0YjFlOTRiZTZmYmM2NDBhMDI3YzFhOTM1ZDk3MGUzM2U=", "commit": {"author": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-04-30T08:14:42Z"}, "committer": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-04-30T08:30:25Z"}, "message": "Move outer fields of enums into variant parts in debuginfo\n\nAll fields except the discriminant (including `outer_fields`)\nshould be put into structures inside the variant part, which gives\nan equivalent layout but offers us much better integration with\ndebuggers.", "tree": {"sha": "baba7561cafab114851560d686fc2e38268fcb21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baba7561cafab114851560d686fc2e38268fcb21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/060deec4b1e94be6fbc640a027c1a935d970e33e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/060deec4b1e94be6fbc640a027c1a935d970e33e", "html_url": "https://github.com/rust-lang/rust/commit/060deec4b1e94be6fbc640a027c1a935d970e33e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/060deec4b1e94be6fbc640a027c1a935d970e33e/comments", "author": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a45f0d724ed7116ed475fb0d628bc118418e7cbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a45f0d724ed7116ed475fb0d628bc118418e7cbf", "html_url": "https://github.com/rust-lang/rust/commit/a45f0d724ed7116ed475fb0d628bc118418e7cbf"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "800133b5f0fac732f9173ad725cb56df9613a3d9", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/060deec4b1e94be6fbc640a027c1a935d970e33e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060deec4b1e94be6fbc640a027c1a935d970e33e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=060deec4b1e94be6fbc640a027c1a935d970e33e", "patch": "@@ -309,6 +309,7 @@ impl RecursiveTypeDescription<'ll, 'tcx> {\n                     unfinished_type,\n                     member_holding_stub,\n                     member_descriptions,\n+                    None,\n                 );\n                 MetadataCreationResult::new(metadata_stub, true)\n             }\n@@ -1459,6 +1460,7 @@ struct EnumMemberDescriptionFactory<'ll, 'tcx> {\n     layout: TyAndLayout<'tcx>,\n     tag_type_metadata: Option<&'ll DIType>,\n     containing_scope: &'ll DIScope,\n+    common_members: Vec<Option<&'ll DIType>>,\n     span: Span,\n }\n \n@@ -1523,6 +1525,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     self.enum_type,\n                     variant_type_metadata,\n                     member_descriptions,\n+                    Some(&self.common_members),\n                 );\n                 vec![MemberDescription {\n                     name: if fallback { String::new() } else { variant_info.variant_name() },\n@@ -1572,6 +1575,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             self.enum_type,\n                             variant_type_metadata,\n                             member_descriptions,\n+                            Some(&self.common_members),\n                         );\n \n                         MemberDescription {\n@@ -1621,6 +1625,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         self.enum_type,\n                         variant_type_metadata,\n                         variant_member_descriptions,\n+                        Some(&self.common_members),\n                     );\n \n                     // Encode the information about the null variant in the union\n@@ -1695,6 +1700,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                 self.enum_type,\n                                 variant_type_metadata,\n                                 member_descriptions,\n+                                Some(&self.common_members),\n                             );\n \n                             let niche_value = if i == dataful_variant {\n@@ -2102,6 +2108,7 @@ fn prepare_enum_metadata(\n                 layout,\n                 tag_type_metadata: discriminant_type_metadata,\n                 containing_scope,\n+                common_members: vec![],\n                 span,\n             }),\n         );\n@@ -2171,7 +2178,7 @@ fn prepare_enum_metadata(\n         }\n     };\n \n-    let mut outer_fields = match layout.variants {\n+    let outer_fields = match layout.variants {\n         Variants::Single { .. } => vec![],\n         Variants::Multiple { .. } => {\n             let tuple_mdf = TupleMemberDescriptionFactory {\n@@ -2210,11 +2217,14 @@ fn prepare_enum_metadata(\n             variant_part_unique_type_id_str.len(),\n         )\n     };\n-    outer_fields.push(Some(variant_part));\n \n     let struct_wrapper = {\n         // The variant part must be wrapped in a struct according to DWARF.\n-        let type_array = create_DIArray(DIB(cx), &outer_fields);\n+        // All fields except the discriminant (including `outer_fields`)\n+        // should be put into structures inside the variant part, which gives\n+        // an equivalent layout but offers us much better integration with\n+        // debuggers.\n+        let type_array = create_DIArray(DIB(cx), &[Some(variant_part)]);\n \n         let type_map = debug_context(cx).type_map.borrow();\n         let unique_type_id_str = type_map.get_unique_type_id_as_string(unique_type_id);\n@@ -2251,6 +2261,7 @@ fn prepare_enum_metadata(\n             layout,\n             tag_type_metadata: None,\n             containing_scope,\n+            common_members: outer_fields,\n             span,\n         }),\n     )\n@@ -2283,7 +2294,13 @@ fn composite_type_metadata(\n         DIFlags::FlagZero,\n     );\n     // ... and immediately create and add the member descriptions.\n-    set_members_of_composite_type(cx, composite_type, composite_type_metadata, member_descriptions);\n+    set_members_of_composite_type(\n+        cx,\n+        composite_type,\n+        composite_type_metadata,\n+        member_descriptions,\n+        None,\n+    );\n \n     composite_type_metadata\n }\n@@ -2293,6 +2310,7 @@ fn set_members_of_composite_type(\n     composite_type: Ty<'tcx>,\n     composite_type_metadata: &'ll DICompositeType,\n     member_descriptions: Vec<MemberDescription<'ll>>,\n+    common_members: Option<&Vec<Option<&'ll DIType>>>,\n ) {\n     // In some rare cases LLVM metadata uniquing would lead to an existing type\n     // description being used instead of a new one created in\n@@ -2311,10 +2329,13 @@ fn set_members_of_composite_type(\n         }\n     }\n \n-    let member_metadata: Vec<_> = member_descriptions\n+    let mut member_metadata: Vec<_> = member_descriptions\n         .into_iter()\n         .map(|desc| Some(desc.into_metadata(cx, composite_type_metadata)))\n         .collect();\n+    if let Some(other_members) = common_members {\n+        member_metadata.extend(other_members.iter());\n+    }\n \n     let type_params = compute_type_parameters(cx, composite_type);\n     unsafe {"}, {"sha": "3437b295e6e9cb2362e77a219104f06b3d4b87c8", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/060deec4b1e94be6fbc640a027c1a935d970e33e/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060deec4b1e94be6fbc640a027c1a935d970e33e/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=060deec4b1e94be6fbc640a027c1a935d970e33e", "patch": "@@ -7,31 +7,31 @@\n \n // gdb-command:run\n // gdb-command:print b\n-// gdb-check:$1 = generator_objects::main::generator-0 {__0: 0x[...], <<variant>>: {__state: 0, 0: generator_objects::main::generator-0::Unresumed, 1: generator_objects::main::generator-0::Returned, 2: generator_objects::main::generator-0::Panicked, 3: generator_objects::main::generator-0::Suspend0 {[...]}, 4: generator_objects::main::generator-0::Suspend1 {[...]}}}\n+// gdb-check:$1 = <error reading variable>\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$2 = generator_objects::main::generator-0 {__0: 0x[...], <<variant>>: {__state: 3, 0: generator_objects::main::generator-0::Unresumed, 1: generator_objects::main::generator-0::Returned, 2: generator_objects::main::generator-0::Panicked, 3: generator_objects::main::generator-0::Suspend0 {c: 6, d: 7}, 4: generator_objects::main::generator-0::Suspend1 {[...]}}}\n+// gdb-check:$2 = <error reading variable>\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$3 = generator_objects::main::generator-0 {__0: 0x[...], <<variant>>: {__state: 4, 0: generator_objects::main::generator-0::Unresumed, 1: generator_objects::main::generator-0::Returned, 2: generator_objects::main::generator-0::Panicked, 3: generator_objects::main::generator-0::Suspend0 {[...]}, 4: generator_objects::main::generator-0::Suspend1 {c: 7, d: 8}}}\n+// gdb-check:$3 = <error reading variable>\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$4 = generator_objects::main::generator-0 {__0: 0x[...], <<variant>>: {__state: 1, 0: generator_objects::main::generator-0::Unresumed, 1: generator_objects::main::generator-0::Returned, 2: generator_objects::main::generator-0::Panicked, 3: generator_objects::main::generator-0::Suspend0 {[...]}, 4: generator_objects::main::generator-0::Suspend1 {[...]}}}\n+// gdb-check:$4 = <error reading variable>\n \n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $0 = { 0 = 0x[...] }\n+// lldbg-check:(generator_objects::main::generator-0) $0 =\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $1 = { 0 = 0x[...] }\n+// lldbg-check:(generator_objects::main::generator-0) $1 =\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $2 = { 0 = 0x[...] }\n+// lldbg-check:(generator_objects::main::generator-0) $2 =\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $3 = { 0 = 0x[...] }\n+// lldbg-check:(generator_objects::main::generator-0) $3 =\n \n #![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]\n #![omit_gdb_pretty_printer_section]"}, {"sha": "3a9eaecd5e75e6d46dcfc1c7653e4b972abacddd", "filename": "src/test/debuginfo/issue-57822.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/060deec4b1e94be6fbc640a027c1a935d970e33e/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060deec4b1e94be6fbc640a027c1a935d970e33e/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs?ref=060deec4b1e94be6fbc640a027c1a935d970e33e", "patch": "@@ -14,7 +14,7 @@\n // gdb-check:$1 = issue_57822::main::closure-1 (issue_57822::main::closure-0 (1))\n \n // gdb-command:print b\n-// gdb-check:$2 = issue_57822::main::generator-3 {__0: issue_57822::main::generator-2 {__0: 2, <<variant>>: {[...]}}, <<variant>>: {[...]}}\n+// gdb-check:$2 = <error reading variable>\n \n // === LLDB TESTS ==================================================================================\n \n@@ -24,7 +24,7 @@\n // lldbg-check:(issue_57822::main::closure-1) $0 = { 0 = { 0 = 1 } }\n \n // lldb-command:print b\n-// lldbg-check:(issue_57822::main::generator-3) $1 = { 0 = { 0 = 2 } }\n+// lldbg-check:(issue_57822::main::generator-3) $1 =\n \n #![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]\n #![omit_gdb_pretty_printer_section]"}]}