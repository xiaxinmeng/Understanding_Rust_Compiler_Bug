{"sha": "3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMmNhNDdhNzk5MTFkNDIyZmQ0N2VlMmEyM2RkMDhhOWZhNDJhYTk=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-06-30T18:17:07Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-03-08T07:17:48Z"}, "message": "Gate the printing on --json=unused-externs", "tree": {"sha": "66778428beafa9921f8ad91a7c928a71df23f4cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66778428beafa9921f8ad91a7c928a71df23f4cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9", "html_url": "https://github.com/rust-lang/rust/commit/3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aef1e35edc11b3e0ecf7f77bc70c197062023476", "url": "https://api.github.com/repos/rust-lang/rust/commits/aef1e35edc11b3e0ecf7f77bc70c197062023476", "html_url": "https://github.com/rust-lang/rust/commit/aef1e35edc11b3e0ecf7f77bc70c197062023476"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "7b34374032c918ab2fa61a3051280d3fa3eaf9af", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9", "patch": "@@ -931,8 +931,9 @@ impl<'a> CrateLoader<'a> {\n                     diag,\n                 );\n         }\n-        // FIXME: add gating\n-        self.sess.parse_sess.span_diagnostic.emit_unused_externs(&unused_externs);\n+        if self.sess.opts.json_unused_externs {\n+            self.sess.parse_sess.span_diagnostic.emit_unused_externs(&unused_externs);\n+        }\n     }\n \n     pub fn postprocess(&mut self, krate: &ast::Crate) {"}, {"sha": "a66201953d61125f18d030c38ae640874f02cbed", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9", "patch": "@@ -734,6 +734,7 @@ impl Default for Options {\n             remap_path_prefix: Vec::new(),\n             edition: DEFAULT_EDITION,\n             json_artifact_notifications: false,\n+            json_unused_externs: false,\n             pretty: None,\n         }\n     }\n@@ -1254,11 +1255,12 @@ pub fn parse_color(matches: &getopts::Matches) -> ColorConfig {\n ///\n /// The first value returned is how to render JSON diagnostics, and the second\n /// is whether or not artifact notifications are enabled.\n-pub fn parse_json(matches: &getopts::Matches) -> (HumanReadableErrorType, bool) {\n+pub fn parse_json(matches: &getopts::Matches) -> (HumanReadableErrorType, bool, bool) {\n     let mut json_rendered: fn(ColorConfig) -> HumanReadableErrorType =\n         HumanReadableErrorType::Default;\n     let mut json_color = ColorConfig::Never;\n     let mut json_artifact_notifications = false;\n+    let mut json_unused_externs = false;\n     for option in matches.opt_strs(\"json\") {\n         // For now conservatively forbid `--color` with `--json` since `--json`\n         // won't actually be emitting any colors and anything colorized is\n@@ -1275,14 +1277,15 @@ pub fn parse_json(matches: &getopts::Matches) -> (HumanReadableErrorType, bool)\n                 \"diagnostic-short\" => json_rendered = HumanReadableErrorType::Short,\n                 \"diagnostic-rendered-ansi\" => json_color = ColorConfig::Always,\n                 \"artifacts\" => json_artifact_notifications = true,\n+                \"unused-externs\" => json_unused_externs = true,\n                 s => early_error(\n                     ErrorOutputType::default(),\n                     &format!(\"unknown `--json` option `{}`\", s),\n                 ),\n             }\n         }\n     }\n-    (json_rendered(json_color), json_artifact_notifications)\n+    (json_rendered(json_color), json_artifact_notifications, json_unused_externs)\n }\n \n /// Parses the `--error-format` flag.\n@@ -1860,7 +1863,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let edition = parse_crate_edition(matches);\n \n-    let (json_rendered, json_artifact_notifications) = parse_json(matches);\n+    let (json_rendered, json_artifact_notifications, json_unused_externs) = parse_json(matches);\n \n     let error_format = parse_error_format(matches, color, json_rendered);\n \n@@ -1873,6 +1876,14 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let mut debugging_opts = build_debugging_options(matches, error_format);\n     check_debug_option_stability(&debugging_opts, error_format, json_rendered);\n \n+    if !debugging_opts.unstable_options && json_unused_externs {\n+        early_error(\n+            error_format,\n+            \"the `-Z unstable-options` flag must also be passed to enable \\\n+            the flag `--json=unused-externs`\",\n+        );\n+    }\n+\n     let output_types = parse_output_types(&debugging_opts, matches, error_format);\n \n     let mut cg = build_codegen_options(matches, error_format);\n@@ -2050,6 +2061,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         remap_path_prefix,\n         edition,\n         json_artifact_notifications,\n+        json_unused_externs,\n         pretty,\n     }\n }"}, {"sha": "cfe29d40b7460ad12a4861d40f7ad5004fb5c555", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9", "patch": "@@ -147,6 +147,9 @@ top_level_options!(\n         // by the compiler.\n         json_artifact_notifications: bool [TRACKED],\n \n+        // `true` if we're emitting a JSON blob containing the unused externs\n+        json_unused_externs: bool [UNTRACKED],\n+\n         pretty: Option<PpMode> [UNTRACKED],\n     }\n );"}, {"sha": "5d6d5aaec140427d9f61d45d8613242668cf7cdb", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9", "patch": "@@ -323,7 +323,7 @@ impl Options {\n         }\n \n         let color = config::parse_color(&matches);\n-        let (json_rendered, _artifacts) = config::parse_json(&matches);\n+        let (json_rendered, ..) = config::parse_json(&matches);\n         let error_format = config::parse_error_format(&matches, color, json_rendered);\n \n         let codegen_options = build_codegen_options(matches, error_format);"}]}