{"sha": "157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1N2UwYTBlOGY2OGFiOTk3YjMyMGEyZDYxYzJkOGFkMjBkNWNlODY=", "commit": {"author": {"name": "Nathaniel McCallum", "email": "nathaniel@congru.us", "date": "2021-08-02T19:03:43Z"}, "committer": {"name": "Nathaniel McCallum", "email": "nathaniel@congru.us", "date": "2021-08-03T01:49:51Z"}, "message": "Validate that naked functions are never inlined\n\nReject all uses of the inline attribute on naked functions.\n\nrust-lang/rfcs#2774\nrust-lang/rfcs#2972", "tree": {"sha": "7d397100e11380c2f4d0b2c2877c4e06e7ed160e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d397100e11380c2f4d0b2c2877c4e06e7ed160e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86", "html_url": "https://github.com/rust-lang/rust/commit/157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86/comments", "author": {"login": "npmccallum", "id": 288304, "node_id": "MDQ6VXNlcjI4ODMwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/288304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npmccallum", "html_url": "https://github.com/npmccallum", "followers_url": "https://api.github.com/users/npmccallum/followers", "following_url": "https://api.github.com/users/npmccallum/following{/other_user}", "gists_url": "https://api.github.com/users/npmccallum/gists{/gist_id}", "starred_url": "https://api.github.com/users/npmccallum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npmccallum/subscriptions", "organizations_url": "https://api.github.com/users/npmccallum/orgs", "repos_url": "https://api.github.com/users/npmccallum/repos", "events_url": "https://api.github.com/users/npmccallum/events{/privacy}", "received_events_url": "https://api.github.com/users/npmccallum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "npmccallum", "id": 288304, "node_id": "MDQ6VXNlcjI4ODMwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/288304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npmccallum", "html_url": "https://github.com/npmccallum", "followers_url": "https://api.github.com/users/npmccallum/followers", "following_url": "https://api.github.com/users/npmccallum/following{/other_user}", "gists_url": "https://api.github.com/users/npmccallum/gists{/gist_id}", "starred_url": "https://api.github.com/users/npmccallum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npmccallum/subscriptions", "organizations_url": "https://api.github.com/users/npmccallum/orgs", "repos_url": "https://api.github.com/users/npmccallum/repos", "events_url": "https://api.github.com/users/npmccallum/events{/privacy}", "received_events_url": "https://api.github.com/users/npmccallum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "url": "https://api.github.com/repos/rust-lang/rust/commits/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "html_url": "https://github.com/rust-lang/rust/commit/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93"}], "stats": {"total": 114, "additions": 112, "deletions": 2}, "files": [{"sha": "b1948ae072be987ef50dac5c86a21c8970500b68", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86", "patch": "@@ -2720,6 +2720,9 @@ declare_lint! {\n     /// The asm block must not contain any operands other than `const` and\n     /// `sym`. Additionally, naked function should specify a non-Rust ABI.\n     ///\n+    /// Naked functions cannot be inlined. All forms of the `inline` attribute\n+    /// are prohibited.\n+    ///\n     /// While other definitions of naked functions were previously accepted,\n     /// they are unsupported and might not work reliably. This is a\n     /// [future-incompatible] lint that will transition into hard error in"}, {"sha": "e05ec205b65b89ed78609cc4da9ae96b9cf7495d", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86", "patch": "@@ -1,6 +1,6 @@\n //! Checks validity of naked functions.\n \n-use rustc_ast::InlineAsmOptions;\n+use rustc_ast::{Attribute, InlineAsmOptions};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{ErasedMap, FnKind, NestedVisitorMap, Visitor};\n@@ -70,10 +70,20 @@ impl<'tcx> Visitor<'tcx> for CheckNakedFunctions<'tcx> {\n             check_no_patterns(self.tcx, body.params);\n             check_no_parameters_use(self.tcx, body);\n             check_asm(self.tcx, hir_id, body, span);\n+            check_inline(self.tcx, hir_id, attrs);\n         }\n     }\n }\n \n+/// Check that the function isn't inlined.\n+fn check_inline(tcx: TyCtxt<'_>, hir_id: HirId, attrs: &[Attribute]) {\n+    for attr in attrs.iter().filter(|attr| attr.has_name(sym::inline)) {\n+        tcx.struct_span_lint_hir(UNSUPPORTED_NAKED_FUNCTIONS, hir_id, attr.span, |lint| {\n+            lint.build(\"naked functions cannot be inlined\").emit();\n+        });\n+    }\n+}\n+\n /// Checks that function uses non-Rust ABI.\n fn check_abi(tcx: TyCtxt<'_>, hir_id: HirId, abi: Abi, fn_ident_span: Span) {\n     if abi == Abi::Rust {"}, {"sha": "7075995c2cfff5bd34568b0018c6ba2c40b0fe7b", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86", "patch": "@@ -167,3 +167,46 @@ pub unsafe extern \"C\" fn valid_c() {\n pub unsafe extern \"C\" fn valid_att_syntax() {\n     asm!(\"\", options(noreturn, att_syntax));\n }\n+\n+#[naked]\n+pub unsafe extern \"C\" fn inline_none() {\n+    asm!(\"\", options(noreturn));\n+}\n+\n+#[naked]\n+#[inline]\n+//~^ WARN naked functions cannot be inlined\n+//~| WARN this was previously accepted\n+pub unsafe extern \"C\" fn inline_hint() {\n+    asm!(\"\", options(noreturn));\n+}\n+\n+#[naked]\n+#[inline(always)]\n+//~^ WARN naked functions cannot be inlined\n+//~| WARN this was previously accepted\n+pub unsafe extern \"C\" fn inline_always() {\n+    asm!(\"\", options(noreturn));\n+}\n+\n+#[naked]\n+#[inline(never)]\n+//~^ WARN naked functions cannot be inlined\n+//~| WARN this was previously accepted\n+pub unsafe extern \"C\" fn inline_never() {\n+    asm!(\"\", options(noreturn));\n+}\n+\n+#[naked]\n+#[inline]\n+//~^ WARN naked functions cannot be inlined\n+//~| WARN this was previously accepted\n+#[inline(always)]\n+//~^ WARN naked functions cannot be inlined\n+//~| WARN this was previously accepted\n+#[inline(never)]\n+//~^ WARN naked functions cannot be inlined\n+//~| WARN this was previously accepted\n+pub unsafe extern \"C\" fn inline_all() {\n+    asm!(\"\", options(noreturn));\n+}"}, {"sha": "2a186a69ff4608b5ae6c4848d94f72c3350d90a0", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=157e0a0e8f68ab997b320a2d61c2d8ad20d5ce86", "patch": "@@ -296,5 +296,59 @@ LL | pub unsafe extern \"Rust\" fn rust_abi() {\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-error: aborting due to 8 previous errors; 19 warnings emitted\n+warning: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:177:1\n+   |\n+LL | #[inline]\n+   | ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:185:1\n+   |\n+LL | #[inline(always)]\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:193:1\n+   |\n+LL | #[inline(never)]\n+   | ^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:201:1\n+   |\n+LL | #[inline]\n+   | ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:204:1\n+   |\n+LL | #[inline(always)]\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:207:1\n+   |\n+LL | #[inline(never)]\n+   | ^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+error: aborting due to 8 previous errors; 25 warnings emitted\n "}]}