{"sha": "8950b124e9efb709d15149e3e916c366c7f5736e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NTBiMTI0ZTllZmI3MDlkMTUxNDllM2U5MTZjMzY2YzdmNTczNmU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-05-13T11:29:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-13T11:29:31Z"}, "message": "Merge pull request #167 from dwrensha/update-rustc\n\nupdate for latest rustc", "tree": {"sha": "3f7bd335f57deadd2861c0e212b1f6bb6dbeea5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f7bd335f57deadd2861c0e212b1f6bb6dbeea5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8950b124e9efb709d15149e3e916c366c7f5736e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8950b124e9efb709d15149e3e916c366c7f5736e", "html_url": "https://github.com/rust-lang/rust/commit/8950b124e9efb709d15149e3e916c366c7f5736e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8950b124e9efb709d15149e3e916c366c7f5736e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e44509e511170320f70cdb3b06213e1a6798611", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e44509e511170320f70cdb3b06213e1a6798611", "html_url": "https://github.com/rust-lang/rust/commit/9e44509e511170320f70cdb3b06213e1a6798611"}, {"sha": "2b84e176fb9ec23b4ebebb4d357f31d43dc4bf35", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b84e176fb9ec23b4ebebb4d357f31d43dc4bf35", "html_url": "https://github.com/rust-lang/rust/commit/2b84e176fb9ec23b4ebebb4d357f31d43dc4bf35"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "e3d62e33d64e1720cb075d5979a7640d939aaa46", "filename": "src/eval_context.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8950b124e9efb709d15149e3e916c366c7f5736e/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8950b124e9efb709d15149e3e916c366c7f5736e/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=8950b124e9efb709d15149e3e916c366c7f5736e", "patch": "@@ -137,13 +137,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     source_info,\n                     kind: mir::StatementKind::Assign(\n                         mir::Lvalue::Local(mir::Local::new(2)),\n-                        mir::Rvalue::Use(mir::Operand::Constant(mir::Constant {\n+                        mir::Rvalue::Use(mir::Operand::Constant(Box::new(mir::Constant {\n                             span: DUMMY_SP,\n                             ty: tcx.types.usize,\n                             literal: mir::Literal::Value {\n                                 value: ConstVal::Integral(ConstInt::Usize(ConstUsize::new(0, tcx.sess.target.uint_type).unwrap())),\n                             },\n-                        }))\n+                        })))\n                     )\n                 },\n                 mir::Statement {\n@@ -225,13 +225,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         mir::Rvalue::BinaryOp(\n                             mir::BinOp::Add,\n                             mir::Operand::Consume(mir::Lvalue::Local(mir::Local::new(2))),\n-                            mir::Operand::Constant(mir::Constant {\n+                            mir::Operand::Constant(Box::new(mir::Constant {\n                                 span: DUMMY_SP,\n                                 ty: tcx.types.usize,\n                                 literal: mir::Literal::Value {\n                                     value: ConstVal::Integral(ConstInt::Usize(ConstUsize::new(1, tcx.sess.target.uint_type).unwrap())),\n                                 },\n-                            }),\n+                            })),\n                         )\n                     )\n                 },\n@@ -636,7 +636,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n \n                     General { discr, ref variants, .. } => {\n-                        if let mir::AggregateKind::Adt(adt_def, variant, _, _) = *kind {\n+                        if let mir::AggregateKind::Adt(adt_def, variant, _, _) = **kind {\n                             let discr_val = adt_def.discriminants(self.tcx)\n                                 .nth(variant)\n                                 .expect(\"broken mir: Adt variant id invalid\")\n@@ -662,7 +662,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n \n                     RawNullablePointer { nndiscr, .. } => {\n-                        if let mir::AggregateKind::Adt(_, variant, _, _) = *kind {\n+                        if let mir::AggregateKind::Adt(_, variant, _, _) = **kind {\n                             if nndiscr == variant as u64 {\n                                 assert_eq!(operands.len(), 1);\n                                 let operand = &operands[0];\n@@ -683,7 +683,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n \n                     StructWrappedNullablePointer { nndiscr, ref nonnull, ref discrfield, .. } => {\n-                        if let mir::AggregateKind::Adt(_, variant, _, _) = *kind {\n+                        if let mir::AggregateKind::Adt(_, variant, _, _) = **kind {\n                             if nonnull.packed {\n                                 let ptr = self.force_allocation(dest)?.to_ptr_and_extra().0;\n                                 self.memory.mark_packed(ptr, nonnull.stride().bytes());\n@@ -712,7 +712,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                     CEnum { .. } => {\n                         assert_eq!(operands.len(), 0);\n-                        if let mir::AggregateKind::Adt(adt_def, variant, _, _) = *kind {\n+                        if let mir::AggregateKind::Adt(adt_def, variant, _, _) = **kind {\n                             let n = adt_def.discriminants(self.tcx)\n                                 .nth(variant)\n                                 .expect(\"broken mir: Adt variant index invalid\")\n@@ -997,8 +997,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         match *op {\n             Consume(ref lvalue) => self.eval_and_read_lvalue(lvalue),\n \n-            Constant(mir::Constant { ref literal, .. }) => {\n+            Constant(ref constant) => {\n                 use rustc::mir::Literal;\n+                let mir::Constant { ref literal, .. } = **constant;\n                 let value = match *literal {\n                     Literal::Value { ref value } => self.const_to_value(value)?,\n "}, {"sha": "e51c6012896971537d52f8733ac2a30958ffc554", "filename": "tests/run-pass/union.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8950b124e9efb709d15149e3e916c366c7f5736e/tests%2Frun-pass%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8950b124e9efb709d15149e3e916c366c7f5736e/tests%2Frun-pass%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Funion.rs?ref=8950b124e9efb709d15149e3e916c366c7f5736e", "patch": "@@ -62,7 +62,7 @@ fn c() {\n         unsafe {\n             match v {\n                 Value { tag: Tag::I, u: U { i: 0 } } => true,\n-                Value { tag: Tag::F, u: U { f: 0.0 } } => true,\n+                Value { tag: Tag::F, u: U { f } } if f == 0.0 => true,\n                 _ => false,\n             }\n         }"}]}