{"sha": "92c5036a7cf9dc32fccdf3c831af05b74550a3e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYzUwMzZhN2NmOWRjMzJmY2NkZjNjODMxYWYwNWI3NDU1MGEzZTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-14T12:39:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-14T12:39:46Z"}, "message": "Merge pull request #5370 from matklad/parens\n\nDon't duplicate parens in patterns", "tree": {"sha": "5cca1699e7cb195bc7b40b8feaa204ed1309f7fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cca1699e7cb195bc7b40b8feaa204ed1309f7fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92c5036a7cf9dc32fccdf3c831af05b74550a3e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfDaeSCRBK7hj4Ov3rIwAAdHIIAGEQ7ULE2vOLr9UG6d6AgHzH\nZpg/PTOv14ADJmB96AubX9cNeIaQfdYlsT4rWwUjGRnczPaVfMrMBwEOBGc9XZhY\ntEcDC0BYDiv2t11/aZds17immd63RCgNnu5XAIBdoyncGvaxISRwu6UR26ptPuuD\nQB46FUGfemsoy4xxKK+O3E05AQH1mX86VtJOEH8vK11i2V7Kxu70C0hseg6WS4fa\nTYaJw5dkFr97vPGXXovw3uO0OKlJgYIkSty9tQJGPehkYVa9FlfwF7EVqTImUWZ5\nwRbgZfxShmZuv8ZZaZwwRTYKu9RJMUrcp8s1wZhednzVnywUEWAF0mQzDqWyAjw=\n=AkJo\n-----END PGP SIGNATURE-----\n", "payload": "tree 5cca1699e7cb195bc7b40b8feaa204ed1309f7fe\nparent 83271f9b9977267492a59c4264fbd7dff9f7ea02\nparent f7f4ea633b974cf90fb69120ff23908990a24bda\nauthor Aleksey Kladov <aleksey.kladov@gmail.com> 1594730386 +0200\ncommitter GitHub <noreply@github.com> 1594730386 +0200\n\nMerge pull request #5370 from matklad/parens\n\nDon't duplicate parens in patterns"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92c5036a7cf9dc32fccdf3c831af05b74550a3e1", "html_url": "https://github.com/rust-lang/rust/commit/92c5036a7cf9dc32fccdf3c831af05b74550a3e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92c5036a7cf9dc32fccdf3c831af05b74550a3e1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83271f9b9977267492a59c4264fbd7dff9f7ea02", "url": "https://api.github.com/repos/rust-lang/rust/commits/83271f9b9977267492a59c4264fbd7dff9f7ea02", "html_url": "https://github.com/rust-lang/rust/commit/83271f9b9977267492a59c4264fbd7dff9f7ea02"}, {"sha": "f7f4ea633b974cf90fb69120ff23908990a24bda", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f4ea633b974cf90fb69120ff23908990a24bda", "html_url": "https://github.com/rust-lang/rust/commit/f7f4ea633b974cf90fb69120ff23908990a24bda"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "9e82d6854156daea1408917acf2246f7221a2200", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/92c5036a7cf9dc32fccdf3c831af05b74550a3e1/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c5036a7cf9dc32fccdf3c831af05b74550a3e1/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=92c5036a7cf9dc32fccdf3c831af05b74550a3e1", "patch": "@@ -63,6 +63,8 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) dot_receiver_is_ambiguous_float_literal: bool,\n     /// If this is a call (method or function) in particular, i.e. the () are already there.\n     pub(super) is_call: bool,\n+    /// Like `is_call`, but for tuple patterns.\n+    pub(super) is_pattern_call: bool,\n     /// If this is a macro call, i.e. the () are already there.\n     pub(super) is_macro_call: bool,\n     pub(super) is_path_type: bool,\n@@ -136,6 +138,7 @@ impl<'a> CompletionContext<'a> {\n             is_new_item: false,\n             dot_receiver: None,\n             is_call: false,\n+            is_pattern_call: false,\n             is_macro_call: false,\n             is_path_type: false,\n             has_type_args: false,\n@@ -370,6 +373,8 @@ impl<'a> CompletionContext<'a> {\n                 .and_then(|it| it.syntax().parent().and_then(ast::CallExpr::cast))\n                 .is_some();\n             self.is_macro_call = path.syntax().parent().and_then(ast::MacroCall::cast).is_some();\n+            self.is_pattern_call =\n+                path.syntax().parent().and_then(ast::TupleStructPat::cast).is_some();\n \n             self.is_path_type = path.syntax().parent().and_then(ast::PathType::cast).is_some();\n             self.has_type_args = segment.type_arg_list().is_some();"}, {"sha": "64349dcb83c0a5c343fa909f9d420d25c14f3548", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/92c5036a7cf9dc32fccdf3c831af05b74550a3e1/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c5036a7cf9dc32fccdf3c831af05b74550a3e1/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=92c5036a7cf9dc32fccdf3c831af05b74550a3e1", "patch": "@@ -315,6 +315,7 @@ impl Completions {\n         }\n \n         if variant_kind == StructKind::Tuple {\n+            mark::hit!(inserts_parens_for_tuple_enums);\n             let params = Params::Anonymous(variant.fields(ctx.db).len());\n             res = res.add_call_parens(ctx, qualified_name, params)\n         }\n@@ -383,10 +384,17 @@ impl Builder {\n         if !ctx.config.add_call_parenthesis {\n             return self;\n         }\n-        if ctx.use_item_syntax.is_some() || ctx.is_call {\n+        if ctx.use_item_syntax.is_some() {\n             mark::hit!(no_parens_in_use_item);\n             return self;\n         }\n+        if ctx.is_pattern_call {\n+            mark::hit!(dont_duplicate_pattern_parens);\n+            return self;\n+        }\n+        if ctx.is_call {\n+            return self;\n+        }\n \n         // Don't add parentheses if the expected type is some function reference.\n         if let Some(ty) = &ctx.expected_type {\n@@ -865,6 +873,7 @@ fn main() { foo(${1:foo}, ${2:bar}, ${3:ho_ge_})$0 }\n \n     #[test]\n     fn inserts_parens_for_tuple_enums() {\n+        mark::check!(inserts_parens_for_tuple_enums);\n         check_edit(\n             \"Some\",\n             r#\"\n@@ -905,6 +914,30 @@ fn main(value: Option<i32>) {\n         );\n     }\n \n+    #[test]\n+    fn dont_duplicate_pattern_parens() {\n+        mark::check!(dont_duplicate_pattern_parens);\n+        check_edit(\n+            \"Var\",\n+            r#\"\n+enum E { Var(i32) }\n+fn main() {\n+    match E::Var(92) {\n+        E::<|>(92) => (),\n+    }\n+}\n+\"#,\n+            r#\"\n+enum E { Var(i32) }\n+fn main() {\n+    match E::Var(92) {\n+        E::Var(92) => (),\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn no_call_parens_if_fn_ptr_needed() {\n         mark::check!(no_call_parens_if_fn_ptr_needed);"}]}