{"sha": "3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYjliMzlkZDQ3ZDk5ZmZkOTdmNDg1YzI3ZjM4Yjg5NDRlMTJhM2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-18T14:38:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-18T14:38:04Z"}, "message": "Merge #8087\n\n8087: Make MacroDefId's `AstId` mandatory when possible r=jonas-schievink a=jonas-schievink\n\nThis makes it clearer (in the type definition) which macros have or don't have an `AstId`\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "308ffffd0b61517f13aedad9621430f4c41014e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/308ffffd0b61517f13aedad9621430f4c41014e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgU2XMCRBK7hj4Ov3rIwAAdHIIABp3P84Lf3foXMYrrqmZ2iM6\nPo8EGuwdrfSm/6v6HOf3kQMbJWGfhpJPYgDu7pOsDRedoMxDPrcWxDkC2aIjlo62\nv9FpKpzvKwviQ46rOd36uzxeGZcs/2osywPsXYFHdkhoKlQ/cZeyqfAhCadokjzB\n9o+ud6AMfjl7yu5SwcTzxbTYgRftfYim7UEiLJFdMdabSbUunk2Myuktb59QUrgP\nRc9LGUhO09RH7eTHpqKqiwlg5XRP7Uh5EmpuGZY9QrdHe3+Mawk8Ed7nvuRfD6m2\nsUaKyxjdw8JFco1hLfOGLcaFBuin+27/Xtb0z3KSQoVvhGk5gphCK9IOTo8cN+8=\n=K8Fk\n-----END PGP SIGNATURE-----\n", "payload": "tree 308ffffd0b61517f13aedad9621430f4c41014e3\nparent 816bc7389516dda1eb4821f2ac4d5993cd5611dd\nparent b84efbaacfc980ba167edc145aa7ca5d738448ff\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616078284 +0000\ncommitter GitHub <noreply@github.com> 1616078284 +0000\n\nMerge #8087\n\n8087: Make MacroDefId's `AstId` mandatory when possible r=jonas-schievink a=jonas-schievink\n\nThis makes it clearer (in the type definition) which macros have or don't have an `AstId`\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "html_url": "https://github.com/rust-lang/rust/commit/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "816bc7389516dda1eb4821f2ac4d5993cd5611dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/816bc7389516dda1eb4821f2ac4d5993cd5611dd", "html_url": "https://github.com/rust-lang/rust/commit/816bc7389516dda1eb4821f2ac4d5993cd5611dd"}, {"sha": "b84efbaacfc980ba167edc145aa7ca5d738448ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/b84efbaacfc980ba167edc145aa7ca5d738448ff", "html_url": "https://github.com/rust-lang/rust/commit/b84efbaacfc980ba167edc145aa7ca5d738448ff"}], "stats": {"total": 113, "additions": 58, "deletions": 55}, "files": [{"sha": "5b22ab58bcd6ccacc4e308dff987810782b912eb", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "patch": "@@ -113,7 +113,7 @@ impl HasSource for TypeAlias {\n impl HasSource for MacroDef {\n     type Ast = ast::Macro;\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n-        let ast_id = self.id.ast_id?;\n+        let ast_id = self.id.ast_id()?;\n         Some(InFile { file_id: ast_id.file_id, value: ast_id.to_node(db.upcast()) })\n     }\n }"}, {"sha": "b860cbf3c46a349f1fd4109595d1ee6688502cae", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "patch": "@@ -1154,7 +1154,8 @@ impl MacroDef {\n \n     /// Indicate it is a derive macro\n     pub fn is_derive_macro(&self) -> bool {\n-        matches!(self.id.kind, MacroDefKind::ProcMacro(_) | MacroDefKind::BuiltInDerive(_))\n+        // FIXME: wrong for `ProcMacro`\n+        matches!(self.id.kind, MacroDefKind::ProcMacro(..) | MacroDefKind::BuiltInDerive(..))\n     }\n }\n "}, {"sha": "762809fcd0731b050fe85f9601f88e10b91c6414", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "patch": "@@ -195,12 +195,12 @@ impl SourceToDefCtx<'_, '_> {\n         &mut self,\n         src: InFile<ast::MacroRules>,\n     ) -> Option<MacroDefId> {\n-        let kind = MacroDefKind::Declarative;\n+        let file_ast_id = self.db.ast_id_map(src.file_id).ast_id(&src.value);\n+        let ast_id = AstId::new(src.file_id, file_ast_id.upcast());\n+        let kind = MacroDefKind::Declarative(ast_id);\n         let file_id = src.file_id.original_file(self.db.upcast());\n         let krate = self.file_to_def(file_id).get(0).copied()?.krate();\n-        let file_ast_id = self.db.ast_id_map(src.file_id).ast_id(&src.value);\n-        let ast_id = Some(AstId::new(src.file_id, file_ast_id.upcast()));\n-        Some(MacroDefId { krate, ast_id, kind, local_inner: false })\n+        Some(MacroDefId { krate, kind, local_inner: false })\n     }\n \n     pub(super) fn find_container(&mut self, src: InFile<&SyntaxNode>) -> Option<ChildContainer> {"}, {"sha": "8d925c0c19d25688bd498e280a1db9338aa11761", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "patch": "@@ -209,7 +209,7 @@ impl Attrs {\n             },\n             AttrDefId::TraitId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n             AttrDefId::MacroDefId(it) => {\n-                it.ast_id.map_or_else(Default::default, |ast_id| attrs_from_ast(ast_id, db))\n+                it.ast_id().map_or_else(Default::default, |ast_id| attrs_from_ast(ast_id, db))\n             }\n             AttrDefId::ImplId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n             AttrDefId::ConstId(it) => attrs_from_item_tree(it.lookup(db).id, db),"}, {"sha": "960cabb5fd480ea82261a34b1e9d46d03060d639", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "patch": "@@ -912,10 +912,10 @@ mod tests {\n                 dep::fmt (t)\n                 dep::format (f)\n                 dep::Fmt (v)\n-                dep::fmt::Display (t)\n+                dep::Fmt (m)\n                 dep::Fmt (t)\n                 dep::fmt::Display::fmt (a)\n-                dep::Fmt (m)\n+                dep::fmt::Display (t)\n             \"#]],\n         );\n \n@@ -926,9 +926,9 @@ mod tests {\n             expect![[r#\"\n                 dep::fmt (t)\n                 dep::Fmt (v)\n+                dep::Fmt (m)\n                 dep::Fmt (t)\n                 dep::fmt::Display::fmt (a)\n-                dep::Fmt (m)\n             \"#]],\n         );\n \n@@ -939,10 +939,10 @@ mod tests {\n             expect![[r#\"\n                 dep::fmt (t)\n                 dep::Fmt (v)\n-                dep::fmt::Display (t)\n+                dep::Fmt (m)\n                 dep::Fmt (t)\n                 dep::fmt::Display::fmt (a)\n-                dep::Fmt (m)\n+                dep::fmt::Display (t)\n             \"#]],\n         );\n     }\n@@ -980,10 +980,10 @@ mod tests {\n             expect![[r#\"\n                 dep::fmt (t)\n                 dep::Fmt (v)\n-                dep::fmt::Display (t)\n+                dep::Fmt (m)\n                 dep::Fmt (t)\n                 dep::fmt::Display::fmt (a)\n-                dep::Fmt (m)\n+                dep::fmt::Display (t)\n             \"#]],\n         );\n \n@@ -994,9 +994,9 @@ mod tests {\n             expect![[r#\"\n                 dep::fmt (t)\n                 dep::Fmt (v)\n+                dep::Fmt (m)\n                 dep::Fmt (t)\n                 dep::fmt::Display::fmt (a)\n-                dep::Fmt (m)\n             \"#]],\n         );\n     }\n@@ -1058,8 +1058,8 @@ mod tests {\n             Query::new(\"\".to_string()).limit(2),\n             expect![[r#\"\n                 dep::fmt (t)\n-                dep::Fmt (t)\n                 dep::Fmt (m)\n+                dep::Fmt (t)\n                 dep::Fmt (v)\n             \"#]],\n         );"}, {"sha": "21add086d076e97f2da13d9056337dcbac92a9ce", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "patch": "@@ -650,7 +650,7 @@ fn macro_call_as_call_id(\n ) -> Result<Result<MacroCallId, ErrorEmitted>, UnresolvedMacro> {\n     let def: MacroDefId = resolver(call.path.clone()).ok_or(UnresolvedMacro)?;\n \n-    let res = if let MacroDefKind::BuiltInEager(_) = def.kind {\n+    let res = if let MacroDefKind::BuiltInEager(..) = def.kind {\n         let macro_call = InFile::new(call.ast_id.file_id, call.ast_id.to_node(db.upcast()));\n         let hygiene = Hygiene::new(db.upcast(), call.ast_id.file_id);\n "}, {"sha": "45a79e896e6e684b10f62a0228b0268615c8fffc", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "patch": "@@ -357,13 +357,11 @@ impl DefCollector<'_> {\n         self.exports_proc_macros = true;\n         let macro_def = match self.proc_macros.iter().find(|(n, _)| n == name) {\n             Some((_, expander)) => MacroDefId {\n-                ast_id: None,\n                 krate: self.def_map.krate,\n                 kind: MacroDefKind::ProcMacro(*expander),\n                 local_inner: false,\n             },\n             None => MacroDefId {\n-                ast_id: None,\n                 krate: self.def_map.krate,\n                 kind: MacroDefKind::ProcMacro(ProcMacroExpander::dummy(self.def_map.krate)),\n                 local_inner: false,\n@@ -1445,9 +1443,8 @@ impl ModCollector<'_, '_> {\n \n         // Case 2: normal `macro_rules!` macro\n         let macro_id = MacroDefId {\n-            ast_id: Some(ast_id),\n             krate: self.def_collector.def_map.krate,\n-            kind: MacroDefKind::Declarative,\n+            kind: MacroDefKind::Declarative(ast_id),\n             local_inner: is_local_inner,\n         };\n         self.def_collector.define_macro(self.module_id, mac.name.clone(), macro_id, is_export);"}, {"sha": "60fd2ebdd42f21b8be2c87e1898f7bbb0fe7cad0", "filename": "crates/hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "patch": "@@ -61,8 +61,7 @@ pub fn find_builtin_derive(\n     let expander = BuiltinDeriveExpander::find_by_name(ident)?;\n     Some(MacroDefId {\n         krate,\n-        ast_id: Some(ast_id),\n-        kind: MacroDefKind::BuiltInDerive(expander),\n+        kind: MacroDefKind::BuiltInDerive(expander, ast_id),\n         local_inner: false,\n     })\n }\n@@ -314,8 +313,7 @@ $0\n         let loc = MacroCallLoc {\n             def: MacroDefId {\n                 krate: CrateId(0),\n-                ast_id: Some(macro_ast_id),\n-                kind: MacroDefKind::BuiltInDerive(expander),\n+                kind: MacroDefKind::BuiltInDerive(expander, macro_ast_id),\n                 local_inner: false,\n             },\n             krate: CrateId(0),"}, {"sha": "8529b43b6d396542b535f6fe50d27428a6d1262d", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "patch": "@@ -71,14 +71,12 @@ pub fn find_builtin_macro(\n     match kind {\n         Either::Left(kind) => Some(MacroDefId {\n             krate,\n-            ast_id: Some(ast_id),\n-            kind: MacroDefKind::BuiltIn(kind),\n+            kind: MacroDefKind::BuiltIn(kind, ast_id),\n             local_inner: false,\n         }),\n         Either::Right(kind) => Some(MacroDefId {\n             krate,\n-            ast_id: Some(ast_id),\n-            kind: MacroDefKind::BuiltInEager(kind),\n+            kind: MacroDefKind::BuiltInEager(kind, ast_id),\n             local_inner: false,\n         }),\n     }\n@@ -512,15 +510,15 @@ mod tests {\n         let macro_call = macro_calls.pop().unwrap();\n \n         let expander = find_by_name(&macro_rules.name().unwrap().as_name()).unwrap();\n+        let ast_id = AstId::new(file_id.into(), ast_id_map.ast_id(&macro_rules));\n \n         let krate = CrateId(0);\n         let file_id = match expander {\n             Either::Left(expander) => {\n                 // the first one should be a macro_rules\n                 let def = MacroDefId {\n                     krate: CrateId(0),\n-                    ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_rules))),\n-                    kind: MacroDefKind::BuiltIn(expander),\n+                    kind: MacroDefKind::BuiltIn(expander, ast_id),\n                     local_inner: false,\n                 };\n \n@@ -540,8 +538,7 @@ mod tests {\n                 // the first one should be a macro_rules\n                 let def = MacroDefId {\n                     krate,\n-                    ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_rules))),\n-                    kind: MacroDefKind::BuiltInEager(expander),\n+                    kind: MacroDefKind::BuiltInEager(expander, ast_id),\n                     local_inner: false,\n                 };\n "}, {"sha": "4107d778149c585e0875f384f9604949fb753678", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "patch": "@@ -130,8 +130,8 @@ fn ast_id_map(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n \n fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<(TokenExpander, mbe::TokenMap)>> {\n     match id.kind {\n-        MacroDefKind::Declarative => {\n-            let macro_rules = match id.ast_id?.to_node(db) {\n+        MacroDefKind::Declarative(ast_id) => {\n+            let macro_rules = match ast_id.to_node(db) {\n                 syntax::ast::Macro::MacroRules(mac) => mac,\n                 syntax::ast::Macro::MacroDef(_) => return None,\n             };\n@@ -150,13 +150,13 @@ fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<(TokenExpander,\n             };\n             Some(Arc::new((TokenExpander::MacroRules(rules), tmap)))\n         }\n-        MacroDefKind::BuiltIn(expander) => {\n+        MacroDefKind::BuiltIn(expander, _) => {\n             Some(Arc::new((TokenExpander::Builtin(expander), mbe::TokenMap::default())))\n         }\n-        MacroDefKind::BuiltInDerive(expander) => {\n+        MacroDefKind::BuiltInDerive(expander, _) => {\n             Some(Arc::new((TokenExpander::BuiltinDerive(expander), mbe::TokenMap::default())))\n         }\n-        MacroDefKind::BuiltInEager(_) => None,\n+        MacroDefKind::BuiltInEager(..) => None,\n         MacroDefKind::ProcMacro(expander) => {\n             Some(Arc::new((TokenExpander::ProcMacro(expander), mbe::TokenMap::default())))\n         }"}, {"sha": "ddadaffd3730ebb9be6f5567abcc39bdd7a18658", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "patch": "@@ -140,7 +140,7 @@ pub fn expand_eager_macro(\n     let subtree =\n         diagnostic_sink.option(to_subtree(&result), || err(\"failed to parse macro result\"))?;\n \n-    if let MacroDefKind::BuiltInEager(eager) = def.kind {\n+    if let MacroDefKind::BuiltInEager(eager, _) = def.kind {\n         let res = eager.expand(db, arg_id, &subtree);\n \n         let (subtree, fragment) = diagnostic_sink.expand_result_option(res)?;\n@@ -193,7 +193,7 @@ fn eager_macro_recur(\n         let def = diagnostic_sink\n             .option_with(|| macro_resolver(child.path()?), || err(\"failed to resolve macro\"))?;\n         let insert = match def.kind {\n-            MacroDefKind::BuiltInEager(_) => {\n+            MacroDefKind::BuiltInEager(..) => {\n                 let id: MacroCallId = expand_eager_macro(\n                     db,\n                     krate,\n@@ -206,9 +206,9 @@ fn eager_macro_recur(\n                 db.parse_or_expand(id.as_file())\n                     .expect(\"successful macro expansion should be parseable\")\n             }\n-            MacroDefKind::Declarative\n-            | MacroDefKind::BuiltIn(_)\n-            | MacroDefKind::BuiltInDerive(_)\n+            MacroDefKind::Declarative(_)\n+            | MacroDefKind::BuiltIn(..)\n+            | MacroDefKind::BuiltInDerive(..)\n             | MacroDefKind::ProcMacro(_) => {\n                 let res = lazy_expand(db, &def, curr.with_value(child.clone()), krate);\n                 let val = diagnostic_sink.expand_result_option(res)?;"}, {"sha": "e758b3c0ae8512e6605f487a94de1a003840ac6d", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "patch": "@@ -145,7 +145,7 @@ fn make_hygiene_info(\n ) -> Option<HygieneInfo> {\n     let arg_tt = loc.kind.arg(db)?;\n \n-    let def_offset = loc.def.ast_id.and_then(|id| {\n+    let def_offset = loc.def.ast_id().and_then(|id| {\n         let def_tt = match id.to_node(db) {\n             ast::Macro::MacroRules(mac) => mac.token_tree()?.syntax().text_range().start(),\n             ast::Macro::MacroDef(_) => return None,\n@@ -176,12 +176,12 @@ impl HygieneFrame {\n                     let loc = db.lookup_intern_macro(id);\n                     let info = make_hygiene_info(db, macro_file, &loc);\n                     match loc.def.kind {\n-                        MacroDefKind::Declarative => {\n+                        MacroDefKind::Declarative(_) => {\n                             (info, Some(loc.def.krate), loc.def.local_inner)\n                         }\n-                        MacroDefKind::BuiltIn(_) => (info, Some(loc.def.krate), false),\n-                        MacroDefKind::BuiltInDerive(_) => (info, None, false),\n-                        MacroDefKind::BuiltInEager(_) => (info, None, false),\n+                        MacroDefKind::BuiltIn(..) => (info, Some(loc.def.krate), false),\n+                        MacroDefKind::BuiltInDerive(..) => (info, None, false),\n+                        MacroDefKind::BuiltInEager(..) => (info, None, false),\n                         MacroDefKind::ProcMacro(_) => (info, None, false),\n                     }\n                 }"}, {"sha": "83e11019fd1c378450b1fac1df9463abdbaadcb9", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "patch": "@@ -143,7 +143,7 @@ impl HirFileId {\n \n                 let arg_tt = loc.kind.arg(db)?;\n \n-                let def = loc.def.ast_id.and_then(|id| {\n+                let def = loc.def.ast_id().and_then(|id| {\n                     let def_tt = match id.to_node(db) {\n                         ast::Macro::MacroRules(mac) => mac.token_tree()?,\n                         ast::Macro::MacroDef(_) => return None,\n@@ -180,7 +180,7 @@ impl HirFileId {\n                 };\n                 let loc: MacroCallLoc = db.lookup_intern_macro(lazy_id);\n                 let item = match loc.def.kind {\n-                    MacroDefKind::BuiltInDerive(_) => loc.kind.node(db),\n+                    MacroDefKind::BuiltInDerive(..) => loc.kind.node(db),\n                     _ => return None,\n                 };\n                 Some(item.with_value(ast::Item::cast(item.value.clone())?))\n@@ -224,7 +224,6 @@ impl From<EagerMacroId> for MacroCallId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct MacroDefId {\n     pub krate: CrateId,\n-    pub ast_id: Option<AstId<ast::Macro>>,\n     pub kind: MacroDefKind,\n \n     pub local_inner: bool,\n@@ -239,15 +238,26 @@ impl MacroDefId {\n     ) -> LazyMacroId {\n         db.intern_macro(MacroCallLoc { def: self, krate, kind })\n     }\n+\n+    pub fn ast_id(&self) -> Option<AstId<ast::Macro>> {\n+        let id = match &self.kind {\n+            MacroDefKind::Declarative(id) => id,\n+            MacroDefKind::BuiltIn(_, id) => id,\n+            MacroDefKind::BuiltInDerive(_, id) => id,\n+            MacroDefKind::BuiltInEager(_, id) => id,\n+            MacroDefKind::ProcMacro(_) => return None,\n+        };\n+        Some(*id)\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum MacroDefKind {\n-    Declarative,\n-    BuiltIn(BuiltinFnLikeExpander),\n+    Declarative(AstId<ast::Macro>),\n+    BuiltIn(BuiltinFnLikeExpander, AstId<ast::Macro>),\n     // FIXME: maybe just Builtin and rename BuiltinFnLikeExpander to BuiltinExpander\n-    BuiltInDerive(BuiltinDeriveExpander),\n-    BuiltInEager(EagerExpander),\n+    BuiltInDerive(BuiltinDeriveExpander, AstId<ast::Macro>),\n+    BuiltInEager(EagerExpander, AstId<ast::Macro>),\n     ProcMacro(ProcMacroExpander),\n }\n "}]}