{"sha": "c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "node_id": "C_kwDOAAsO6NoAKGM4YThlN2QxMTZmNGQyMDU4ZjhiMDI5MDRkZTU2Y2E2ZGFjNjYzZDg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-12T05:41:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-12T05:41:26Z"}, "message": "Rollup merge of #102890 - camsteffen:adt-sized-representability, r=cjgillot\n\nCheck representability in adt_sized_constraint\n\nNow that representability is a query, we can use it to preemptively avoid a cycle in `adt_sized_constraint`.\n\nI moved the representability check into `check_mod_type_wf` to avoid a scenario where rustc quits before checking all the types for representability. This also removes the check from rustdoc, which is alright AFAIK.\n\nr? ``@cjgillot``", "tree": {"sha": "4031b6f3159da4ced0e3160a11b0f62f15cab57f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4031b6f3159da4ced0e3160a11b0f62f15cab57f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjRlOGCRBK7hj4Ov3rIwAAisYIAGeGz8tzIZe37SbQr5hayjhF\n584rkoPRnlmqDieFoQR0s0i7jVK1+DhqLpx51h+dL1L4xiKIAiNMun6ucYMJ0LLh\nEWHoly6HctgKtZTlP4sYNhkhagEZf9F160GwKLd1dfGRXjdLCaFkBuITXPyp1R3z\n1zYB8zy0W8j3LQdqrjfDH4dRTsy0uR9jxSuRpdxmazyu0AD8sJot+4LZMxrJg8AW\n2ywDiyRS6Xs3PalMg5t9uV3mMOkgT95q25/2B+iVwtVryKxxwjjlO2T7mRJU316z\nz9uETV8qkyX99tFouic/HgZcOIiJyNbEEu3ThrNc4nw3BFd1bC9nui93jbpNuHI=\n=+hYX\n-----END PGP SIGNATURE-----\n", "payload": "tree 4031b6f3159da4ced0e3160a11b0f62f15cab57f\nparent 658169b7db0c09cb7d67d906b1caa68c0c4b020d\nparent d933092dc507b11a7e5013616128161a76c6f113\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1665553286 +0530\ncommitter GitHub <noreply@github.com> 1665553286 +0530\n\nRollup merge of #102890 - camsteffen:adt-sized-representability, r=cjgillot\n\nCheck representability in adt_sized_constraint\n\nNow that representability is a query, we can use it to preemptively avoid a cycle in `adt_sized_constraint`.\n\nI moved the representability check into `check_mod_type_wf` to avoid a scenario where rustc quits before checking all the types for representability. This also removes the check from rustdoc, which is alright AFAIK.\n\nr? ``@cjgillot``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "html_url": "https://github.com/rust-lang/rust/commit/c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "658169b7db0c09cb7d67d906b1caa68c0c4b020d", "url": "https://api.github.com/repos/rust-lang/rust/commits/658169b7db0c09cb7d67d906b1caa68c0c4b020d", "html_url": "https://github.com/rust-lang/rust/commit/658169b7db0c09cb7d67d906b1caa68c0c4b020d"}, {"sha": "d933092dc507b11a7e5013616128161a76c6f113", "url": "https://api.github.com/repos/rust-lang/rust/commits/d933092dc507b11a7e5013616128161a76c6f113", "html_url": "https://github.com/rust-lang/rust/commit/d933092dc507b11a7e5013616128161a76c6f113"}], "stats": {"total": 141, "additions": 50, "deletions": 91}, "files": [{"sha": "f6f25603581b25a7b6d1a46004cd2e20ab0b6a57", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "patch": "@@ -380,7 +380,6 @@ fn check_struct(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let def = tcx.adt_def(def_id);\n     let span = tcx.def_span(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n-    let _ = tcx.representability(def_id);\n \n     if def.repr().simd() {\n         check_simd(tcx, span, def_id);\n@@ -394,7 +393,6 @@ fn check_union(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let def = tcx.adt_def(def_id);\n     let span = tcx.def_span(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n-    let _ = tcx.representability(def_id);\n     check_transparent(tcx, span, def);\n     check_union_fields(tcx, span, def_id);\n     check_packed(tcx, span, def);\n@@ -1489,7 +1487,6 @@ fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, vs: &'tcx [hir::Variant<'tcx>], def_id: L\n \n     detect_discriminant_duplicate(tcx, def.discriminants(tcx).collect(), vs, sp);\n \n-    let _ = tcx.representability(def_id);\n     check_transparent(tcx, sp, def);\n }\n "}, {"sha": "0a8a1bec9b8a3be020e802f79bd056f8be3752d2", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "patch": "@@ -1041,6 +1041,8 @@ fn check_type_defn<'tcx, F>(\n ) where\n     F: FnMut(&WfCheckingCtxt<'_, 'tcx>) -> Vec<AdtVariant<'tcx>>,\n {\n+    let _ = tcx.representability(item.def_id.def_id);\n+\n     enter_wf_checking_ctxt(tcx, item.span, item.def_id.def_id, |wfcx| {\n         let variants = lookup_fields(wfcx);\n         let packed = tcx.adt_def(item.def_id).repr().packed();"}, {"sha": "06eb10c9137a12f73bf1027fd9ba15267a1bd0c5", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "patch": "@@ -613,16 +613,8 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    // The cycle error here should be reported as an error by `check_representable`.\n-    // We consider the type as Sized in the meanwhile to avoid\n-    // further errors (done in impl Value for AdtSizedConstraint).\n-    // Use `cycle_delay_bug` to delay the cycle error here to be emitted later\n-    // in case we accidentally otherwise don't emit an error.\n-    query adt_sized_constraint(\n-        key: DefId\n-    ) -> AdtSizedConstraint<'tcx> {\n+    query adt_sized_constraint(key: DefId) -> &'tcx [Ty<'tcx>] {\n         desc { |tcx| \"computing `Sized` constraints for `{}`\", tcx.def_path_str(key) }\n-        cycle_delay_bug\n     }\n \n     query adt_dtorck_constraint("}, {"sha": "b0a2412ab153f88c5f96eb0194e60786220a4023", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "patch": "@@ -26,9 +26,6 @@ use super::{\n     Destructor, FieldDef, GenericPredicates, ReprOptions, Ty, TyCtxt, VariantDef, VariantDiscr,\n };\n \n-#[derive(Copy, Clone, HashStable, Debug)]\n-pub struct AdtSizedConstraint<'tcx>(pub &'tcx [Ty<'tcx>]);\n-\n bitflags! {\n     #[derive(HashStable, TyEncodable, TyDecodable)]\n     pub struct AdtFlags: u32 {\n@@ -563,7 +560,7 @@ impl<'tcx> AdtDef<'tcx> {\n     /// Due to normalization being eager, this applies even if\n     /// the associated type is behind a pointer (e.g., issue #31299).\n     pub fn sized_constraint(self, tcx: TyCtxt<'tcx>) -> ty::EarlyBinder<&'tcx [Ty<'tcx>]> {\n-        ty::EarlyBinder(tcx.adt_sized_constraint(self.did()).0)\n+        ty::EarlyBinder(tcx.adt_sized_constraint(self.did()))\n     }\n }\n "}, {"sha": "ce1b69935f27a7d0fe6b74860f50c8e454aa9dfb", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "patch": "@@ -32,7 +32,7 @@ use crate::ty::layout::TyAndLayout;\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::GeneratorDiagnosticData;\n-use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n+use crate::ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_attr as attr;"}, {"sha": "f4b4c3fb05a7cb9e666741851661948f101a5215", "filename": "compiler/rustc_middle/src/values.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs?ref=c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "patch": "@@ -3,7 +3,7 @@ use rustc_errors::{pluralize, struct_span_err, Applicability, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_middle::ty::Representability;\n-use rustc_middle::ty::{self, AdtSizedConstraint, DefIdTree, Ty, TyCtxt};\n+use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt};\n use rustc_query_system::query::QueryInfo;\n use rustc_query_system::Value;\n use rustc_span::def_id::LocalDefId;\n@@ -31,18 +31,6 @@ impl<'tcx> Value<TyCtxt<'tcx>> for ty::SymbolName<'_> {\n     }\n }\n \n-impl<'tcx> Value<TyCtxt<'tcx>> for AdtSizedConstraint<'_> {\n-    fn from_cycle_error(tcx: TyCtxt<'tcx>, _: &[QueryInfo]) -> Self {\n-        // SAFETY: This is never called when `Self` is not `AdtSizedConstraint<'tcx>`.\n-        // FIXME: Represent the above fact in the trait system somehow.\n-        unsafe {\n-            std::mem::transmute::<AdtSizedConstraint<'tcx>, AdtSizedConstraint<'_>>(\n-                AdtSizedConstraint(tcx.intern_type_list(&[tcx.ty_error()])),\n-            )\n-        }\n-    }\n-}\n-\n impl<'tcx> Value<TyCtxt<'tcx>> for ty::Binder<'_, ty::FnSig<'_>> {\n     fn from_cycle_error(tcx: TyCtxt<'tcx>, _: &[QueryInfo]) -> Self {\n         let err = tcx.ty_error();"}, {"sha": "cd9d229640571e08a65902f690fe860aab67ea0f", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "patch": "@@ -85,9 +85,13 @@ fn impl_defaultness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Defaultness {\n ///     - a type parameter or projection whose Sizedness can't be known\n ///     - a tuple of type parameters or projections, if there are multiple\n ///       such.\n-///     - an Error, if a type contained itself. The representability\n-///       check should catch this case.\n-fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AdtSizedConstraint<'_> {\n+///     - an Error, if a type is infinitely sized\n+fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> &[Ty<'_>] {\n+    if let Some(def_id) = def_id.as_local() {\n+        if matches!(tcx.representability(def_id), ty::Representability::Infinite) {\n+            return tcx.intern_type_list(&[tcx.ty_error()]);\n+        }\n+    }\n     let def = tcx.adt_def(def_id);\n \n     let result = tcx.mk_type_list(\n@@ -99,7 +103,7 @@ fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AdtSizedConstrain\n \n     debug!(\"adt_sized_constraint: {:?} => {:?}\", def, result);\n \n-    ty::AdtSizedConstraint(result)\n+    result\n }\n \n /// See `ParamEnv` struct definition for details."}, {"sha": "4b1e04234c870594bcaaf458bb9b2fbe39507c8c", "filename": "src/test/rustdoc-ui/infinite-recursive-type-impl-trait-return.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.rs?ref=c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "patch": "@@ -1,11 +1,12 @@\n+// check-pass\n // normalize-stderr-test: \"`.*`\" -> \"`DEF_ID`\"\n // normalize-stdout-test: \"`.*`\" -> \"`DEF_ID`\"\n // edition:2018\n \n pub async fn f() -> impl std::fmt::Debug {\n+    // rustdoc doesn't care that this is infinitely sized\n     #[derive(Debug)]\n     enum E {\n-    //~^ ERROR recursive type `f::{closure#0}::E` has infinite size\n         This(E),\n         Unit,\n     }"}, {"sha": "e6ab67d59ce5818e55fcc7c93e84b3a8c3ebaddf", "filename": "src/test/rustdoc-ui/infinite-recursive-type-impl-trait-return.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/658169b7db0c09cb7d67d906b1caa68c0c4b020d/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/658169b7db0c09cb7d67d906b1caa68c0c4b020d/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.stderr?ref=658169b7db0c09cb7d67d906b1caa68c0c4b020d", "patch": "@@ -1,17 +0,0 @@\n-error[E0072]: recursive type `DEF_ID` has infinite size\n-  --> $DIR/infinite-recursive-type-impl-trait-return.rs:7:5\n-   |\n-LL |     enum E {\n-   |     ^^^^^^\n-LL |\n-LL |         This(E),\n-   |              - recursive without indirection\n-   |\n-help: insert some indirection (e.g., a `DEF_ID`) to break the cycle\n-   |\n-LL |         This(Box<E>),\n-   |              ++++ +\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `DEF_ID`."}, {"sha": "ac79582fb3f0df48e75c11cc1101e0d9f99ac5bc", "filename": "src/test/rustdoc-ui/infinite-recursive-type-impl-trait.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.rs?ref=c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "patch": "@@ -1,6 +1,8 @@\n+// check-pass\n+\n fn f() -> impl Sized {\n+    // rustdoc doesn't care that this is infinitely sized\n     enum E {\n-    //~^ ERROR recursive type `f::E` has infinite size\n         V(E),\n     }\n     unimplemented!()"}, {"sha": "165ff6783724417adf64e0b8a1d0760924198bb3", "filename": "src/test/rustdoc-ui/infinite-recursive-type-impl-trait.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/658169b7db0c09cb7d67d906b1caa68c0c4b020d/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/658169b7db0c09cb7d67d906b1caa68c0c4b020d/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr?ref=658169b7db0c09cb7d67d906b1caa68c0c4b020d", "patch": "@@ -1,17 +0,0 @@\n-error[E0072]: recursive type `f::E` has infinite size\n-  --> $DIR/infinite-recursive-type-impl-trait.rs:2:5\n-   |\n-LL |     enum E {\n-   |     ^^^^^^\n-LL |\n-LL |         V(E),\n-   |           - recursive without indirection\n-   |\n-help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to break the cycle\n-   |\n-LL |         V(Box<E>),\n-   |           ++++ +\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0072`."}, {"sha": "54f7e9ac592eb536813361a295cc4f8408a70f3c", "filename": "src/test/ui/issues/issue-72554.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/src%2Ftest%2Fui%2Fissues%2Fissue-72554.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/src%2Ftest%2Fui%2Fissues%2Fissue-72554.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72554.rs?ref=c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "patch": "@@ -3,7 +3,6 @@ use std::collections::BTreeSet;\n #[derive(Hash)]\n pub enum ElemDerived {\n     //~^ ERROR recursive type `ElemDerived` has infinite size\n-    //~| ERROR cycle detected when computing drop-check constraints for `ElemDerived`\n     A(ElemDerived)\n }\n "}, {"sha": "d12be539f7c1733c7748069f6b30cadf400f2c0d", "filename": "src/test/ui/issues/issue-72554.stderr", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/src%2Ftest%2Fui%2Fissues%2Fissue-72554.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/src%2Ftest%2Fui%2Fissues%2Fissue-72554.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72554.stderr?ref=c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "patch": "@@ -3,7 +3,7 @@ error[E0072]: recursive type `ElemDerived` has infinite size\n    |\n LL | pub enum ElemDerived {\n    | ^^^^^^^^^^^^^^^^^^^^\n-...\n+LL |\n LL |     A(ElemDerived)\n    |       ----------- recursive without indirection\n    |\n@@ -12,20 +12,6 @@ help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to break the cycle\n LL |     A(Box<ElemDerived>)\n    |       ++++           +\n \n-error[E0391]: cycle detected when computing drop-check constraints for `ElemDerived`\n-  --> $DIR/issue-72554.rs:4:1\n-   |\n-LL | pub enum ElemDerived {\n-   | ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: ...which immediately requires computing drop-check constraints for `ElemDerived` again\n-note: cycle used when computing drop-check constraints for `Elem`\n-  --> $DIR/issue-72554.rs:11:1\n-   |\n-LL | pub enum Elem {\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0072, E0391.\n-For more information about an error, try `rustc --explain E0072`.\n+For more information about this error, try `rustc --explain E0072`."}, {"sha": "6c2c24ddbc7283a9f79d636724835a5e32a56d52", "filename": "src/test/ui/variance/variance-regions-unused-indirect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-indirect.rs?ref=c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "patch": "@@ -1,6 +1,7 @@\n // Test that disallow lifetime parameters that are unused.\n \n enum Foo<'a> { //~ ERROR parameter `'a` is never used\n+    //~^ ERROR recursive types `Foo` and `Bar` have infinite size\n     Foo1(Bar<'a>)\n }\n "}, {"sha": "14fdd849294b10e4476fb037226948e988aceabe", "filename": "src/test/ui/variance/variance-regions-unused-indirect.stderr", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8a8e7d116f4d2058f8b02904de56ca6dac663d8/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-indirect.stderr?ref=c8a8e7d116f4d2058f8b02904de56ca6dac663d8", "patch": "@@ -1,3 +1,26 @@\n+error[E0072]: recursive types `Foo` and `Bar` have infinite size\n+  --> $DIR/variance-regions-unused-indirect.rs:3:1\n+   |\n+LL | enum Foo<'a> {\n+   | ^^^^^^^^^^^^\n+LL |\n+LL |     Foo1(Bar<'a>)\n+   |          ------- recursive without indirection\n+...\n+LL | enum Bar<'a> {\n+   | ^^^^^^^^^^^^\n+LL |     Bar1(Foo<'a>)\n+   |          ------- recursive without indirection\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to break the cycle\n+   |\n+LL ~     Foo1(Box<Bar<'a>>)\n+LL | }\n+LL | \n+LL | enum Bar<'a> {\n+LL ~     Bar1(Box<Foo<'a>>)\n+   |\n+\n error[E0392]: parameter `'a` is never used\n   --> $DIR/variance-regions-unused-indirect.rs:3:10\n    |\n@@ -7,13 +30,14 @@ LL | enum Foo<'a> {\n    = help: consider removing `'a`, referring to it in a field, or using a marker such as `PhantomData`\n \n error[E0392]: parameter `'a` is never used\n-  --> $DIR/variance-regions-unused-indirect.rs:7:10\n+  --> $DIR/variance-regions-unused-indirect.rs:8:10\n    |\n LL | enum Bar<'a> {\n    |          ^^ unused parameter\n    |\n    = help: consider removing `'a`, referring to it in a field, or using a marker such as `PhantomData`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0392`.\n+Some errors have detailed explanations: E0072, E0392.\n+For more information about an error, try `rustc --explain E0072`."}]}