{"sha": "88c6d3de95cee8525b40adbb49446f89ad339e4d", "node_id": "C_kwDOAAsO6NoAKDg4YzZkM2RlOTVjZWU4NTI1YjQwYWRiYjQ5NDQ2Zjg5YWQzMzllNGQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-08-24T18:12:17Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-20T16:24:16Z"}, "message": "Avoid trivial lambdas.", "tree": {"sha": "e32814c4ed7ee99efb9435cbfd3b2fcb92455f74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e32814c4ed7ee99efb9435cbfd3b2fcb92455f74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88c6d3de95cee8525b40adbb49446f89ad339e4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88c6d3de95cee8525b40adbb49446f89ad339e4d", "html_url": "https://github.com/rust-lang/rust/commit/88c6d3de95cee8525b40adbb49446f89ad339e4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88c6d3de95cee8525b40adbb49446f89ad339e4d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6162529a01473bbb2427fa27354cbafc3c514eee", "url": "https://api.github.com/repos/rust-lang/rust/commits/6162529a01473bbb2427fa27354cbafc3c514eee", "html_url": "https://github.com/rust-lang/rust/commit/6162529a01473bbb2427fa27354cbafc3c514eee"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "6c1175ebdb4ee8b60115d25d15a2114eff8652e9", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88c6d3de95cee8525b40adbb49446f89ad339e4d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c6d3de95cee8525b40adbb49446f89ad339e4d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=88c6d3de95cee8525b40adbb49446f89ad339e4d", "patch": "@@ -102,6 +102,10 @@ impl TyCtxt<'tcx> {\n     }\n }\n \n+/// Helper for `TyCtxtEnsure` to avoid a closure.\n+#[inline(always)]\n+fn noop<T>(_: &T) {}\n+\n macro_rules! query_helper_param_ty {\n     (DefId) => { impl IntoQueryParam<DefId> };\n     ($K:ty) => { $K };\n@@ -165,7 +169,7 @@ macro_rules! define_callbacks {\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n                 let key = key.into_query_param();\n-                let cached = try_get_cached(self.tcx, &self.tcx.query_caches.$name, &key, |_| {});\n+                let cached = try_get_cached(self.tcx, &self.tcx.query_caches.$name, &key, noop);\n \n                 let lookup = match cached {\n                     Ok(()) => return,\n@@ -192,9 +196,7 @@ macro_rules! define_callbacks {\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<$tcx>\n             {\n                 let key = key.into_query_param();\n-                let cached = try_get_cached(self.tcx, &self.tcx.query_caches.$name, &key, |value| {\n-                    value.clone()\n-                });\n+                let cached = try_get_cached(self.tcx, &self.tcx.query_caches.$name, &key, Clone::clone);\n \n                 let lookup = match cached {\n                     Ok(value) => return value,"}]}