{"sha": "68bc387925e25e1168ade10d3a7c10c64ece406b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YmMzODc5MjVlMjVlMTE2OGFkZTEwZDNhN2MxMGM2NGVjZTQwNmI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-11-26T04:59:22Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-11-26T04:59:22Z"}, "message": "Merge pull request #655 from kyeah/impl-comments\n\nKeep comments in empty impl body", "tree": {"sha": "c80ada75e352a1ce3a160df2a19c45a2c6117aa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c80ada75e352a1ce3a160df2a19c45a2c6117aa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68bc387925e25e1168ade10d3a7c10c64ece406b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68bc387925e25e1168ade10d3a7c10c64ece406b", "html_url": "https://github.com/rust-lang/rust/commit/68bc387925e25e1168ade10d3a7c10c64ece406b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68bc387925e25e1168ade10d3a7c10c64ece406b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b1002da81ce5ea8bf60cfad5a27645cc1537ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1002da81ce5ea8bf60cfad5a27645cc1537ace", "html_url": "https://github.com/rust-lang/rust/commit/6b1002da81ce5ea8bf60cfad5a27645cc1537ace"}, {"sha": "314aff1a33c2174e8b52a7a80fc9104dd0686237", "url": "https://api.github.com/repos/rust-lang/rust/commits/314aff1a33c2174e8b52a7a80fc9104dd0686237", "html_url": "https://github.com/rust-lang/rust/commit/314aff1a33c2174e8b52a7a80fc9104dd0686237"}], "stats": {"total": 71, "additions": 58, "deletions": 13}, "files": [{"sha": "9de91307b27f945eaa9277fbcbb0856e29176717", "filename": "src/items.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/68bc387925e25e1168ade10d3a7c10c64ece406b/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bc387925e25e1168ade10d3a7c10c64ece406b/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=68bc387925e25e1168ade10d3a7c10c64ece406b", "patch": "@@ -16,7 +16,7 @@ use utils::{format_mutability, format_visibility, contains_skip, span_after, end\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n             DefinitiveListTactic, definitive_tactic, format_item_list};\n use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs};\n-use comment::FindUncommented;\n+use comment::{FindUncommented, contains_comment};\n use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n use config::{Config, BlockIndentStyle, Density, ReturnIndent, BraceStyle, StructLitStyle};\n@@ -505,27 +505,31 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n         }\n         result.push('{');\n \n-        if !items.is_empty() {\n+        let snippet = context.snippet(item.span);\n+        let open_pos = try_opt!(snippet.find_uncommented(\"{\")) + 1;\n+\n+        if !items.is_empty() || contains_comment(&snippet[open_pos..]) {\n             let mut visitor = FmtVisitor::from_codemap(context.parse_session, context.config, None);\n             visitor.block_indent = context.block_indent.block_indent(context.config);\n-\n-            let snippet = context.snippet(item.span);\n-            let open_pos = try_opt!(snippet.find_uncommented(\"{\")) + 1;\n             visitor.last_pos = item.span.lo + BytePos(open_pos as u32);\n \n             for item in items {\n                 visitor.visit_impl_item(&item);\n             }\n \n+            visitor.format_missing(item.span.hi - BytePos(1));\n+\n+            let inner_indent_str = visitor.block_indent.to_string(context.config);\n+            let outer_indent_str = context.block_indent.to_string(context.config);\n+\n             result.push('\\n');\n-            result.push_str(trim_newlines(&visitor.buffer.to_string()));\n+            result.push_str(&inner_indent_str);\n+            result.push_str(&trim_newlines(&visitor.buffer.to_string().trim()));\n             result.push('\\n');\n-\n-            let indent_str = context.block_indent.to_string(context.config);\n-            result.push_str(&indent_str);\n+            result.push_str(&outer_indent_str);\n         }\n-        result.push('}');\n \n+        result.push('}');\n         Some(result)\n     } else {\n         unreachable!();"}, {"sha": "b1bbb860edb72b7e2bb24ae4e2304ea3fc58f7f0", "filename": "src/utils.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68bc387925e25e1168ade10d3a7c10c64ece406b/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bc387925e25e1168ade10d3a7c10c64ece406b/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=68bc387925e25e1168ade10d3a7c10c64ece406b", "patch": "@@ -144,9 +144,13 @@ pub fn semicolon_for_stmt(stmt: &ast::Stmt) -> bool {\n \n #[inline]\n pub fn trim_newlines(input: &str) -> &str {\n-    let start = input.find(|c| c != '\\n' && c != '\\r').unwrap_or(0);\n-    let end = input.rfind(|c| c != '\\n' && c != '\\r').unwrap_or(0) + 1;\n-    &input[start..end]\n+    match input.find(|c| c != '\\n' && c != '\\r') {\n+        Some(start) => {\n+            let end = input.rfind(|c| c != '\\n' && c != '\\r').unwrap_or(0) + 1;\n+            &input[start..end]\n+        }\n+        None => \"\",\n+    }\n }\n \n #[inline]"}, {"sha": "4382c4fd0e61899464945e284321945caf20babb", "filename": "tests/source/impls.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/68bc387925e25e1168ade10d3a7c10c64ece406b/tests%2Fsource%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bc387925e25e1168ade10d3a7c10c64ece406b/tests%2Fsource%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimpls.rs?ref=68bc387925e25e1168ade10d3a7c10c64ece406b", "patch": "@@ -26,6 +26,16 @@ impl Foo {\n     fn foo() {}\n }\n \n+impl Boo {\n+\n+    // BOO\n+    fn boo() {}\n+    // FOO\n+\n+    \n+    \n+}\n+\n mod a {\n     impl Foo {\n         // Hello!\n@@ -41,3 +51,10 @@ mod b {\n         }\n     }\n }\n+\n+impl Foo { add_fun!(); }\n+\n+impl Blah {\n+    fn boop() {}\n+    add_fun!();\n+}"}, {"sha": "5dde5ee73826d9d6c4c2f4471c41f363ad5980ff", "filename": "tests/target/impl.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68bc387925e25e1168ade10d3a7c10c64ece406b/tests%2Ftarget%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bc387925e25e1168ade10d3a7c10c64ece406b/tests%2Ftarget%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpl.rs?ref=68bc387925e25e1168ade10d3a7c10c64ece406b", "patch": "@@ -1,3 +1,7 @@\n // Test impls\n \n impl<T> JSTraceable for SmallVec<[T; 1]> {}\n+\n+impl<K, V, NodeRef: Deref<Target = Node<K, V>>> Handle<NodeRef, handle::Edge, handle::Internal> {\n+    // Keep this.\n+}"}, {"sha": "35ddc23a20a5e669ee19566fca1598e913f87247", "filename": "tests/target/impls.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68bc387925e25e1168ade10d3a7c10c64ece406b/tests%2Ftarget%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bc387925e25e1168ade10d3a7c10c64ece406b/tests%2Ftarget%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpls.rs?ref=68bc387925e25e1168ade10d3a7c10c64ece406b", "patch": "@@ -13,6 +13,7 @@ pub impl Foo for Bar {\n     fn foo() {\n         \"hi\"\n     }\n+    // Comment 3\n }\n \n pub unsafe impl<'a, 'b, X, Y: Foo<Bar>> !Foo<'a, X> for Bar<'b, Y> where X: Foo<'a, Z>\n@@ -41,6 +42,12 @@ impl Foo {\n     fn foo() {}\n }\n \n+impl Boo {\n+    // BOO\n+    fn boo() {}\n+    // FOO\n+}\n+\n mod a {\n     impl Foo {\n         // Hello!\n@@ -56,3 +63,12 @@ mod b {\n         }\n     }\n }\n+\n+impl Foo {\n+    add_fun!();\n+}\n+\n+impl Blah {\n+    fn boop() {}\n+    add_fun!();\n+}"}]}