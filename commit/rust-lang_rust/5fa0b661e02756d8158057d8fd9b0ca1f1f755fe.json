{"sha": "5fa0b661e02756d8158057d8fd9b0ca1f1f755fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYTBiNjYxZTAyNzU2ZDgxNTgwNTdkOGZkOWIwY2ExZjFmNzU1ZmU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-08-31T11:32:52Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-09-13T10:55:03Z"}, "message": "Test case illustrating some destruction code extent stuff.", "tree": {"sha": "ae1b4412e3c013d471ba136a5215339ad80a9645", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae1b4412e3c013d471ba136a5215339ad80a9645"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fa0b661e02756d8158057d8fd9b0ca1f1f755fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa0b661e02756d8158057d8fd9b0ca1f1f755fe", "html_url": "https://github.com/rust-lang/rust/commit/5fa0b661e02756d8158057d8fd9b0ca1f1f755fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fa0b661e02756d8158057d8fd9b0ca1f1f755fe/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88080bd56a62cac418d245482f461bdcfe8e01ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/88080bd56a62cac418d245482f461bdcfe8e01ab", "html_url": "https://github.com/rust-lang/rust/commit/88080bd56a62cac418d245482f461bdcfe8e01ab"}], "stats": {"total": 161, "additions": 161, "deletions": 0}, "files": [{"sha": "1f9ad988acc0b90dd0687221bff1ea72a6334307", "filename": "src/test/mir-opt/end_region_destruction_extents_1.rs", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/5fa0b661e02756d8158057d8fd9b0ca1f1f755fe/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa0b661e02756d8158057d8fd9b0ca1f1f755fe/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs?ref=5fa0b661e02756d8158057d8fd9b0ca1f1f755fe", "patch": "@@ -0,0 +1,161 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z span_free_formats -Z emit-end-regions\n+// ignore-tidy-linelength\n+\n+// A scenario with significant destruction code extents (which have\n+// suffix \"dce\" in current `-Z identify_regions` rendering).\n+\n+#![feature(generic_param_attrs)]\n+#![feature(dropck_eyepatch)]\n+\n+fn main() {\n+    // Since the second param to `D1` is may_dangle, it is legal for\n+    // the region of that parameter to end before the drop code for D1\n+    // is executed.\n+    (D1(&S1(\"ex1\"), &S1(\"dang1\"))).0;\n+}\n+\n+#[derive(Debug)]\n+struct S1(&'static str);\n+\n+#[derive(Debug)]\n+struct D1<'a, 'b>(&'a S1, &'b S1);\n+\n+// The `#[may_dangle]` means that references of type `&'b _` may be\n+// invalid during the execution of this destructor; i.e. in this case\n+// the destructor code is not allowed to read or write `*self.1`, while\n+// it can read/write `*self.0`.\n+unsafe impl<'a, #[may_dangle] 'b> Drop for D1<'a, 'b> {\n+    fn drop(&mut self) {\n+        println!(\"D1({:?}, _)\", self.0);\n+    }\n+}\n+\n+// Notes on the MIR output below:\n+//\n+// 1. The `EndRegion('10s)` is allowed to precede the `drop(_3)`\n+//    solely because of the #[may_dangle] mentioned above.\n+//\n+// 2. Regarding the occurrence of `EndRegion('12ds)` *after* `StorageDead(_6)`\n+//    (where we have borrows `&'12ds _6`): Eventually:\n+//\n+//    i. this code should be rejected (by mir-borrowck), or\n+//\n+//    ii. the MIR code generation should be changed so that the\n+//        EndRegion('12ds)` precedes `StorageDead(_6)` in the\n+//        control-flow.  (Note: arielb1 views drop+storagedead as one\n+//        unit, and does not see this option as a useful avenue to\n+//        explore.), or\n+//\n+//    iii. the presence of EndRegion should be made irrelevant by a\n+//        transformation encoding the effects of rvalue-promotion.\n+//        This may be the simplest and most-likely option; note in\n+//        particular that `StorageDead(_6)` goes away below in\n+//        rustc.node4.QualifyAndPromoteConstants.after.mir\n+\n+// END RUST SOURCE\n+\n+// START rustc.node4.QualifyAndPromoteConstants.before.mir\n+// fn main() -> () {\n+//     let mut _0: ();\n+//     let mut _1: &'12ds S1;\n+//     let mut _2: &'12ds S1;\n+//     let mut _3: D1<'12ds, '10s>;\n+//     let mut _4: &'12ds S1;\n+//     let mut _5: &'12ds S1;\n+//     let mut _6: S1;\n+//     let mut _7: &'10s S1;\n+//     let mut _8: &'10s S1;\n+//     let mut _9: S1;\n+//\n+//     bb0: {\n+//         StorageLive(_2);\n+//         StorageLive(_3);\n+//         StorageLive(_4);\n+//         StorageLive(_5);\n+//         StorageLive(_6);\n+//         _6 = S1::{{constructor}}(const \"ex1\",);\n+//         _5 = &'12ds _6;\n+//         _4 = &'12ds (*_5);\n+//         StorageLive(_7);\n+//         StorageLive(_8);\n+//         StorageLive(_9);\n+//         _9 = S1::{{constructor}}(const \"dang1\",);\n+//         _8 = &'10s _9;\n+//         _7 = &'10s (*_8);\n+//         _3 = D1<'12ds, '10s>::{{constructor}}(_4, _7);\n+//         EndRegion('10s);\n+//         StorageDead(_7);\n+//         StorageDead(_4);\n+//         _2 = (_3.0: &'12ds S1);\n+//         _1 = _2;\n+//         StorageDead(_2);\n+//         drop(_3) -> bb1;\n+//     }\n+//\n+//     bb1: {\n+//         StorageDead(_3);\n+//         StorageDead(_8);\n+//         StorageDead(_9);\n+//         StorageDead(_5);\n+//         StorageDead(_6);\n+//         EndRegion('12ds);\n+//         _0 = ();\n+//         return;\n+//     }\n+// }\n+// END rustc.node4.QualifyAndPromoteConstants.before.mir\n+\n+// START rustc.node4.QualifyAndPromoteConstants.after.mir\n+// fn main() -> () {\n+//     let mut _0: ();\n+//     let mut _1: &'12ds S1;\n+//     let mut _2: &'12ds S1;\n+//     let mut _3: D1<'12ds, '10s>;\n+//     let mut _4: &'12ds S1;\n+//     let mut _5: &'12ds S1;\n+//     let mut _6: S1;\n+//     let mut _7: &'10s S1;\n+//     let mut _8: &'10s S1;\n+//     let mut _9: S1;\n+//\n+//     bb0: {\n+//         StorageLive(_2);\n+//         StorageLive(_3);\n+//         StorageLive(_4);\n+//         StorageLive(_5);\n+//         _5 = promoted1;\n+//         _4 = &'12ds (*_5);\n+//         StorageLive(_7);\n+//         StorageLive(_8);\n+//         _8 = promoted0;\n+//         _7 = &'10s (*_8);\n+//         _3 = D1<'12ds, '10s>::{{constructor}}(_4, _7);\n+//         EndRegion('10s);\n+//         StorageDead(_7);\n+//         StorageDead(_4);\n+//         _2 = (_3.0: &'12ds S1);\n+//         _1 = _2;\n+//         StorageDead(_2);\n+//         drop(_3) -> bb1;\n+//     }\n+//\n+//     bb1: {\n+//         StorageDead(_3);\n+//         StorageDead(_8);\n+//         StorageDead(_5);\n+//         EndRegion('12ds);\n+//         _0 = ();\n+//         return;\n+//     }\n+// }\n+// END rustc.node4.QualifyAndPromoteConstants.after.mir"}]}