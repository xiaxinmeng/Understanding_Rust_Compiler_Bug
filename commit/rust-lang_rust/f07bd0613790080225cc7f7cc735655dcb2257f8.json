{"sha": "f07bd0613790080225cc7f7cc735655dcb2257f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwN2JkMDYxMzc5MDA4MDIyNWNjN2Y3Y2M3MzU2NTVkY2IyMjU3Zjg=", "commit": {"author": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2019-11-21T18:01:14Z"}, "committer": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2019-11-29T14:30:21Z"}, "message": "allow customising ty::TraitRef's printing behavior\n\nfix clippy\n\nallow customising ty::TraitRef's printing behavior\n\nfix clippy\n\nstylistic fix", "tree": {"sha": "39d982215eab1f4a6cef2e5b3bbe97efaae4cc19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39d982215eab1f4a6cef2e5b3bbe97efaae4cc19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f07bd0613790080225cc7f7cc735655dcb2257f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f07bd0613790080225cc7f7cc735655dcb2257f8", "html_url": "https://github.com/rust-lang/rust/commit/f07bd0613790080225cc7f7cc735655dcb2257f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f07bd0613790080225cc7f7cc735655dcb2257f8/comments", "author": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe969f4ec67a5bd317818cbc7a648c5795af15fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe969f4ec67a5bd317818cbc7a648c5795af15fa", "html_url": "https://github.com/rust-lang/rust/commit/fe969f4ec67a5bd317818cbc7a648c5795af15fa"}], "stats": {"total": 134, "additions": 92, "deletions": 42}, "files": [{"sha": "5a940f2f80aa2a70bbd98ba455b1e9f982cd1356", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f07bd0613790080225cc7f7cc735655dcb2257f8", "patch": "@@ -1545,8 +1545,20 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             infer::Types(ref exp_found) => self.expected_found_str_ty(exp_found),\n             infer::Regions(ref exp_found) => self.expected_found_str(exp_found),\n             infer::Consts(ref exp_found) => self.expected_found_str(exp_found),\n-            infer::TraitRefs(ref exp_found) => self.expected_found_str(exp_found),\n-            infer::PolyTraitRefs(ref exp_found) => self.expected_found_str(exp_found),\n+            infer::TraitRefs(ref exp_found) => {\n+                let pretty_exp_found = ty::error::ExpectedFound {\n+                    expected: exp_found.expected.print_only_trait_path(),\n+                    found: exp_found.found.print_only_trait_path()\n+                };\n+                self.expected_found_str(&pretty_exp_found)\n+            },\n+            infer::PolyTraitRefs(ref exp_found) => {\n+                let pretty_exp_found = ty::error::ExpectedFound {\n+                    expected: exp_found.expected.print_only_trait_path(),\n+                    found: exp_found.found.print_only_trait_path()\n+                };\n+                self.expected_found_str(&pretty_exp_found)\n+            },\n         }\n     }\n "}, {"sha": "3b4d06aab27ef6827334fab02e3049b2739831b8", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=f07bd0613790080225cc7f7cc735655dcb2257f8", "patch": "@@ -401,15 +401,15 @@ impl NiceRegionError<'me, 'tcx> {\n                 format!(\n                     \"{}`{}` would have to be implemented for the type `{}`\",\n                     if leading_ellipsis { \"...\" } else { \"\" },\n-                    expected_trait_ref,\n+                    expected_trait_ref.map(|tr| tr.print_only_trait_path()),\n                     expected_trait_ref.map(|tr| tr.self_ty()),\n                 )\n             } else {\n                 format!(\n                     \"{}`{}` must implement `{}`\",\n                     if leading_ellipsis { \"...\" } else { \"\" },\n                     expected_trait_ref.map(|tr| tr.self_ty()),\n-                    expected_trait_ref,\n+                    expected_trait_ref.map(|tr| tr.print_only_trait_path()),\n                 )\n             };\n \n@@ -449,14 +449,14 @@ impl NiceRegionError<'me, 'tcx> {\n             let mut note = if passive_voice {\n                 format!(\n                     \"...but `{}` is actually implemented for the type `{}`\",\n-                    actual_trait_ref,\n+                    actual_trait_ref.map(|tr| tr.print_only_trait_path()),\n                     actual_trait_ref.map(|tr| tr.self_ty()),\n                 )\n             } else {\n                 format!(\n                     \"...but `{}` actually implements `{}`\",\n                     actual_trait_ref.map(|tr| tr.self_ty()),\n-                    actual_trait_ref,\n+                    actual_trait_ref.map(|tr| tr.print_only_trait_path()),\n                 )\n             };\n "}, {"sha": "b3ddffc8b12f1e782629aa45c9026d2f76163e23", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=f07bd0613790080225cc7f7cc735655dcb2257f8", "patch": "@@ -1292,7 +1292,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     pub fn trait_ref_to_string(&self, t: &ty::TraitRef<'tcx>) -> String {\n-        self.resolve_vars_if_possible(t).to_string()\n+        self.resolve_vars_if_possible(t).print_only_trait_path().to_string()\n     }\n \n     /// If `TyVar(vid)` resolves to a type, return that type. Else, return the"}, {"sha": "05543f1d2ef7339e3e80adf8d5ee9e89eec64360", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=f07bd0613790080225cc7f7cc735655dcb2257f8", "patch": "@@ -800,8 +800,13 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n                 // This shouldn't ever be needed, but just in case:\n                 path.push(match trait_ref {\n                     Some(trait_ref) => {\n-                        Symbol::intern(&format!(\"<impl {} for {}>\", trait_ref,\n-                                                    self_ty))\n+                        Symbol::intern(\n+                            &format!(\n+                                \"<impl {} for {}>\",\n+                                trait_ref.print_only_trait_path(),\n+                                self_ty\n+                            )\n+                        )\n                     },\n                     None => Symbol::intern(&format!(\"<impl {}>\", self_ty)),\n                 });"}, {"sha": "90db1fe319556fc1bab17c373f1a4b3d817743bb", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=f07bd0613790080225cc7f7cc735655dcb2257f8", "patch": "@@ -737,7 +737,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         let is_try = self.tcx.sess.source_map().span_to_snippet(span)\n                             .map(|s| &s == \"?\")\n                             .unwrap_or(false);\n-                        let is_from = format!(\"{}\", trait_ref).starts_with(\"std::convert::From<\");\n+                        let is_from =\n+                            format!(\"{}\", trait_ref.print_only_trait_path())\n+                            .starts_with(\"std::convert::From<\");\n                         let (message, note) = if is_try && is_from {\n                             (Some(format!(\n                                 \"`?` couldn't convert the error to `{}`\",\n@@ -768,7 +770,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                 format!(\n                                     \"{}the trait `{}` is not implemented for `{}`\",\n                                     pre_message,\n-                                    trait_ref,\n+                                    trait_ref.print_only_trait_path(),\n                                     trait_ref.self_ty(),\n                                 )\n                             };\n@@ -1189,7 +1191,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if param_ty => {\n                     // Missing generic type parameter bound.\n                     let param_name = self_ty.to_string();\n-                    let constraint = trait_ref.to_string();\n+                    let constraint = trait_ref.print_only_trait_path().to_string();\n                     if suggest_constraining_type_param(\n                         generics,\n                         &mut err,\n@@ -1416,7 +1418,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let msg = format!(\n                         \"the trait bound `{}: {}` is not satisfied\",\n                         found,\n-                        obligation.parent_trait_ref.skip_binder(),\n+                        obligation.parent_trait_ref.skip_binder().print_only_trait_path(),\n                     );\n                     if has_custom_message {\n                         err.note(&msg);\n@@ -1430,7 +1432,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n                     err.span_label(span, &format!(\n                         \"expected an implementor of trait `{}`\",\n-                        obligation.parent_trait_ref.skip_binder(),\n+                        obligation.parent_trait_ref.skip_binder().print_only_trait_path(),\n                     ));\n                     err.span_suggestion(\n                         span,\n@@ -1562,7 +1564,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     } else {\n                         err.note(&format!(\n                             \"`{}` is implemented for `{:?}`, but not for `{:?}`\",\n-                            trait_ref,\n+                            trait_ref.print_only_trait_path(),\n                             trait_type,\n                             trait_ref.skip_binder().self_ty(),\n                         ));\n@@ -2226,7 +2228,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n             err.span_note(span, &format!(\n                 \"future does not implement `{}` as this value is used across an await\",\n-                trait_ref,\n+                trait_ref.print_only_trait_path(),\n             ));\n \n             // Add a note for the item obligation that remains - normally a note pointing to the\n@@ -2409,7 +2411,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 let parent_trait_ref = self.resolve_vars_if_possible(&data.parent_trait_ref);\n                 err.note(\n                     &format!(\"required because of the requirements on the impl of `{}` for `{}`\",\n-                             parent_trait_ref,\n+                             parent_trait_ref.print_only_trait_path(),\n                              parent_trait_ref.skip_binder().self_ty()));\n                 let parent_predicate = parent_trait_ref.to_predicate();\n                 self.note_obligation_cause_code(err,"}, {"sha": "5f324527a2725b3d1aa65b095c9128cf7b1b106e", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=f07bd0613790080225cc7f7cc735655dcb2257f8", "patch": "@@ -1044,7 +1044,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n                         let self_ty = trait_ref.self_ty();\n                         let cause = IntercrateAmbiguityCause::DownstreamCrate {\n-                            trait_desc: trait_ref.to_string(),\n+                            trait_desc: trait_ref.print_only_trait_path().to_string(),\n                             self_desc: if self_ty.has_concrete_skeleton() {\n                                 Some(self_ty.to_string())\n                             } else {\n@@ -1386,7 +1386,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     if !candidate_set.ambiguous && no_candidates_apply {\n                         let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n                         let self_ty = trait_ref.self_ty();\n-                        let trait_desc = trait_ref.to_string();\n+                        let trait_desc = trait_ref.print_only_trait_path().to_string();\n                         let self_desc = if self_ty.has_concrete_skeleton() {\n                             Some(self_ty.to_string())\n                         } else {"}, {"sha": "88a2db3dc622399516848966b5790bf316ea6bb4", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=f07bd0613790080225cc7f7cc735655dcb2257f8", "patch": "@@ -417,7 +417,7 @@ fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<String>\n         w.push('>');\n     }\n \n-    write!(w, \" {} for {}\", trait_ref, tcx.type_of(impl_def_id)).unwrap();\n+    write!(w, \" {} for {}\", trait_ref.print_only_trait_path(), tcx.type_of(impl_def_id)).unwrap();\n \n     // The predicates will contain default bounds like `T: Sized`. We need to\n     // remove these bounds, and add `T: ?Sized` to any untouched type parameters."}, {"sha": "b8ddf6078bda6e1d20aabb978a6529afeadeed96", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=f07bd0613790080225cc7f7cc735655dcb2257f8", "patch": "@@ -146,7 +146,7 @@ impl<'tcx> Children {\n                 let self_ty = trait_ref.self_ty();\n                 OverlapError {\n                     with_impl: possible_sibling,\n-                    trait_desc: trait_ref.to_string(),\n+                    trait_desc: trait_ref.print_only_trait_path().to_string(),\n                     // Only report the `Self` type if it has at least\n                     // some outer concrete shell; otherwise, it's\n                     // not adding much information."}, {"sha": "c941b3e5e4be98bba0b8f0e149e880351a26769e", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=f07bd0613790080225cc7f7cc735655dcb2257f8", "patch": "@@ -449,7 +449,7 @@ pub trait PrettyPrinter<'tcx>:\n \n             p!(print(self_ty));\n             if let Some(trait_ref) = trait_ref {\n-                p!(write(\" as \"), print(trait_ref));\n+                p!(write(\" as \"), print(trait_ref.print_only_trait_path()));\n             }\n             Ok(cx)\n         })\n@@ -468,7 +468,7 @@ pub trait PrettyPrinter<'tcx>:\n \n             p!(write(\"impl \"));\n             if let Some(trait_ref) = trait_ref {\n-                p!(print(trait_ref), write(\" for \"));\n+                p!(print(trait_ref.print_only_trait_path()), write(\" for \"));\n             }\n             p!(print(self_ty));\n \n@@ -619,7 +619,7 @@ pub trait PrettyPrinter<'tcx>:\n \n                             p!(\n                                     write(\"{}\", if first { \" \" } else { \"+\" }),\n-                                    print(trait_ref));\n+                                    print(trait_ref.print_only_trait_path()));\n                             first = false;\n                         }\n                     }\n@@ -1696,6 +1696,30 @@ impl fmt::Display for ty::RegionKind {\n     }\n }\n \n+/// Wrapper type for `ty::TraitRef` which opts-in to pretty printing only\n+/// the trait path. That is, it will print `Trait<U>` instead of\n+/// `<T as Trait<U>>`.\n+#[derive(Copy, Clone, TypeFoldable, Lift)]\n+pub struct TraitRefPrintOnlyTraitPath<'tcx>(ty::TraitRef<'tcx>);\n+\n+impl fmt::Debug for TraitRefPrintOnlyTraitPath<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(self, f)\n+    }\n+}\n+\n+impl ty::TraitRef<'tcx> {\n+    pub fn print_only_trait_path(self) -> TraitRefPrintOnlyTraitPath<'tcx> {\n+        TraitRefPrintOnlyTraitPath(self)\n+    }\n+}\n+\n+impl ty::Binder<ty::TraitRef<'tcx>> {\n+    pub fn print_only_trait_path(self) -> ty::Binder<TraitRefPrintOnlyTraitPath<'tcx>> {\n+        self.map_bound(|tr| tr.print_only_trait_path())\n+    }\n+}\n+\n forward_display_to_print! {\n     Ty<'tcx>,\n     &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n@@ -1705,6 +1729,7 @@ forward_display_to_print! {\n     // because `for<'tcx>` isn't possible yet.\n     ty::Binder<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>,\n     ty::Binder<ty::TraitRef<'tcx>>,\n+    ty::Binder<TraitRefPrintOnlyTraitPath<'tcx>>,\n     ty::Binder<ty::FnSig<'tcx>>,\n     ty::Binder<ty::TraitPredicate<'tcx>>,\n     ty::Binder<ty::SubtypePredicate<'tcx>>,\n@@ -1739,7 +1764,7 @@ define_print_and_forward_display! {\n         // Use a type that can't appear in defaults of type parameters.\n         let dummy_self = cx.tcx().mk_ty_infer(ty::FreshTy(0));\n         let trait_ref = self.with_self_ty(cx.tcx(), dummy_self);\n-        p!(print(trait_ref))\n+        p!(print(trait_ref.print_only_trait_path()))\n     }\n \n     ty::ExistentialProjection<'tcx> {\n@@ -1783,7 +1808,11 @@ define_print_and_forward_display! {\n     }\n \n     ty::TraitRef<'tcx> {\n-        p!(print_def_path(self.def_id, self.substs));\n+        p!(write(\"<{} as {}>\", self.self_ty(), self.print_only_trait_path()))\n+    }\n+\n+    TraitRefPrintOnlyTraitPath<'tcx> {\n+        p!(print_def_path(self.0.def_id, self.0.substs));\n     }\n \n     ty::ParamTy {\n@@ -1799,7 +1828,8 @@ define_print_and_forward_display! {\n     }\n \n     ty::TraitPredicate<'tcx> {\n-        p!(print(self.trait_ref.self_ty()), write(\": \"), print(self.trait_ref))\n+        p!(print(self.trait_ref.self_ty()), write(\": \"),\n+           print(self.trait_ref.print_only_trait_path()))\n     }\n \n     ty::ProjectionPredicate<'tcx> {"}, {"sha": "ffbf8813d309d4a58b760a3f98d846caa6288dd0", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=f07bd0613790080225cc7f7cc735655dcb2257f8", "patch": "@@ -223,10 +223,7 @@ impl fmt::Debug for ty::FloatVarValue {\n \n impl fmt::Debug for ty::TraitRef<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        // FIXME(#59188) this is used across the compiler to print\n-        // a `TraitRef` qualified (with the Self type explicit),\n-        // instead of having a different way to make that choice.\n-        write!(f, \"<{} as {}>\", self.self_ty(), self)\n+        fmt::Display::fmt(self, f)\n     }\n }\n "}, {"sha": "fcbc2a3301ad1ef82849fecb35563460f41c89a4", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=f07bd0613790080225cc7f7cc735655dcb2257f8", "patch": "@@ -84,7 +84,7 @@ where\n {\n     fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> bool {\n         let TraitRef { def_id, substs } = trait_ref;\n-        self.def_id_visitor.visit_def_id(def_id, \"trait\", &trait_ref) ||\n+        self.def_id_visitor.visit_def_id(def_id, \"trait\", &trait_ref.print_only_trait_path()) ||\n         (!self.def_id_visitor.shallow() && substs.visit_with(self))\n     }\n "}, {"sha": "fdbf729a773aa2520e4d8d45aa5c5bb7c213b7ba", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f07bd0613790080225cc7f7cc735655dcb2257f8", "patch": "@@ -1149,8 +1149,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let candidates = traits::supertraits(tcx, trait_ref).filter(|r| {\n                 self.trait_defines_associated_type_named(r.def_id(), binding.item_name)\n             });\n-            self.one_bound_for_assoc_type(candidates, &trait_ref.to_string(),\n-                                          binding.item_name, binding.span)\n+            self.one_bound_for_assoc_type(\n+                candidates,\n+                &trait_ref.print_only_trait_path().to_string(),\n+                binding.item_name,\n+                binding.span\n+            )\n         }?;\n \n         let (assoc_ident, def_scope) =\n@@ -1589,12 +1593,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 if let Some(span) = bound_span {\n                     err.span_label(span, format!(\"ambiguous `{}` from `{}`\",\n                                                  assoc_name,\n-                                                 bound));\n+                                                 bound.print_only_trait_path()));\n                 } else {\n                     span_note!(&mut err, span,\n                                \"associated type `{}` could derive from `{}`\",\n                                ty_param_name,\n-                               bound);\n+                               bound.print_only_trait_path());\n                 }\n             }\n             err.emit();"}, {"sha": "f4b53b4d10604c97e2bec40acce6e9a1887645d1", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f07bd0613790080225cc7f7cc735655dcb2257f8", "patch": "@@ -502,7 +502,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 if !unsatisfied_predicates.is_empty() {\n                     let mut bound_list = unsatisfied_predicates.iter()\n-                        .map(|p| format!(\"`{} : {}`\", p.self_ty(), p))\n+                        .map(|p| format!(\"`{} : {}`\", p.self_ty(), p.print_only_trait_path()))\n                         .collect::<Vec<_>>();\n                     bound_list.sort();\n                     bound_list.dedup();  // #35677"}, {"sha": "3a4a4a50bf27318f85b0fb844d8a48cd8181eef8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f07bd0613790080225cc7f7cc735655dcb2257f8", "patch": "@@ -2002,7 +2002,7 @@ fn check_impl_items_against_trait<'tcx>(\n                              \"item `{}` is an associated const, \\\n                               which doesn't match its trait `{}`\",\n                              ty_impl_item.ident,\n-                             impl_trait_ref);\n+                             impl_trait_ref.print_only_trait_path());\n                          err.span_label(impl_item.span, \"does not match trait\");\n                          // We can only get the spans from local trait definition\n                          // Same for E0324 and E0325\n@@ -2026,7 +2026,7 @@ fn check_impl_items_against_trait<'tcx>(\n                             \"item `{}` is an associated method, \\\n                              which doesn't match its trait `{}`\",\n                             ty_impl_item.ident,\n-                            impl_trait_ref);\n+                            impl_trait_ref.print_only_trait_path());\n                          err.span_label(impl_item.span, \"does not match trait\");\n                          if let Some(trait_span) = tcx.hir().span_if_local(ty_trait_item.def_id) {\n                             err.span_label(trait_span, \"item in trait\");\n@@ -2045,7 +2045,7 @@ fn check_impl_items_against_trait<'tcx>(\n                             \"item `{}` is an associated type, \\\n                              which doesn't match its trait `{}`\",\n                             ty_impl_item.ident,\n-                            impl_trait_ref);\n+                            impl_trait_ref.print_only_trait_path());\n                          err.span_label(impl_item.span, \"does not match trait\");\n                          if let Some(trait_span) = tcx.hir().span_if_local(ty_trait_item.def_id) {\n                             err.span_label(trait_span, \"item in trait\");"}, {"sha": "650e15ea8a7c864c206841f5c353e47c38b27d02", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07bd0613790080225cc7f7cc735655dcb2257f8/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=f07bd0613790080225cc7f7cc735655dcb2257f8", "patch": "@@ -35,15 +35,15 @@ impl UnsafetyChecker<'tcx> {\n                               item.span,\n                               E0199,\n                               \"implementing the trait `{}` is not unsafe\",\n-                              trait_ref);\n+                              trait_ref.print_only_trait_path());\n                 }\n \n                 (Unsafety::Unsafe, _, Unsafety::Normal, hir::ImplPolarity::Positive) => {\n                     span_err!(self.tcx.sess,\n                               item.span,\n                               E0200,\n                               \"the trait `{}` requires an `unsafe impl` declaration\",\n-                              trait_ref);\n+                              trait_ref.print_only_trait_path());\n                 }\n \n                 (Unsafety::Normal, Some(attr_name), Unsafety::Normal,"}]}