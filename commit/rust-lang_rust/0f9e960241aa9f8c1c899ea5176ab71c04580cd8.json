{"sha": "0f9e960241aa9f8c1c899ea5176ab71c04580cd8", "node_id": "C_kwDOAAsO6NoAKDBmOWU5NjAyNDFhYTlmOGMxYzg5OWVhNTE3NmFiNzFjMDQ1ODBjZDg", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-04T06:13:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-04T06:13:16Z"}, "message": "Rollup merge of #87679 - ssomers:btree_comments, r=joshtriplett\n\nBTree: refine some comments", "tree": {"sha": "94767d9cb7c097e858f38b5939042201ffec3e34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94767d9cb7c097e858f38b5939042201ffec3e34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f9e960241aa9f8c1c899ea5176ab71c04580cd8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhWpt9CRBK7hj4Ov3rIwAA76UIAFiZlf0hfGS3MkBxTqaZdmw4\n7Apf8UWNmim3FQVYdyPt/iMY3QKX5n9BskSdtnagddxfH1nF4Wd3hEK0pJM1TzNn\nRSCWh7Xm0fjyeyx8qkXtqZSYpDVX/s/383BhPuG+qwRmW5Cpoeb6ui1z7FL4sI1P\n3YtDgBnak5Rfs3SPnLCFf0MWnlHLJqQcWSTUZAp4HUaiDL70Vg6SRIEsdfWEBlH/\nGVY+LAdMqtDfmgV+5odrX5qTOI2QKv88+n0Utybsf7fz9pSmR+0gUV2ikP9G7qHF\nfC6QzuIQ2Q/yRncPE3mMUbq5uRMOYxvEld4iGrzST+LDIYELElpMiOS3YC2FwIw=\n=TaMI\n-----END PGP SIGNATURE-----\n", "payload": "tree 94767d9cb7c097e858f38b5939042201ffec3e34\nparent 287af0403a0cf0f9594b4eb2159235751487fba9\nparent e394bb763be932c6748a16ddb49688e60464274a\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633327996 -0700\ncommitter GitHub <noreply@github.com> 1633327996 -0700\n\nRollup merge of #87679 - ssomers:btree_comments, r=joshtriplett\n\nBTree: refine some comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f9e960241aa9f8c1c899ea5176ab71c04580cd8", "html_url": "https://github.com/rust-lang/rust/commit/0f9e960241aa9f8c1c899ea5176ab71c04580cd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f9e960241aa9f8c1c899ea5176ab71c04580cd8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "287af0403a0cf0f9594b4eb2159235751487fba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/287af0403a0cf0f9594b4eb2159235751487fba9", "html_url": "https://github.com/rust-lang/rust/commit/287af0403a0cf0f9594b4eb2159235751487fba9"}, {"sha": "e394bb763be932c6748a16ddb49688e60464274a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e394bb763be932c6748a16ddb49688e60464274a", "html_url": "https://github.com/rust-lang/rust/commit/e394bb763be932c6748a16ddb49688e60464274a"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "11b0ca4b421a7301c5dcb9e7718297c0b43ce857", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f9e960241aa9f8c1c899ea5176ab71c04580cd8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9e960241aa9f8c1c899ea5176ab71c04580cd8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=0f9e960241aa9f8c1c899ea5176ab71c04580cd8", "patch": "@@ -19,16 +19,16 @@ mod entry;\n pub use entry::{Entry, OccupiedEntry, OccupiedError, VacantEntry};\n use Entry::*;\n \n-/// Minimum number of elements in nodes that are not a root.\n+/// Minimum number of elements in a node that is not a root.\n /// We might temporarily have fewer elements during methods.\n pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n \n // A tree in a `BTreeMap` is a tree in the `node` module with additional invariants:\n // - Keys must appear in ascending order (according to the key's type).\n-// - If the root node is internal, it must contain at least 1 element.\n+// - Every non-leaf node contains at least 1 element (has at least 2 children).\n // - Every non-root node contains at least MIN_LEN elements.\n //\n-// An empty map may be represented both by the absence of a root node or by a\n+// An empty map is represented either by the absence of a root node or by a\n // root node that is an empty leaf.\n \n /// A map based on a [B-Tree].\n@@ -1735,8 +1735,8 @@ impl<'a, K: 'a, V: 'a> DrainFilterInner<'a, K, V> {\n     pub(super) fn size_hint(&self) -> (usize, Option<usize>) {\n         // In most of the btree iterators, `self.length` is the number of elements\n         // yet to be visited. Here, it includes elements that were visited and that\n-        // the predicate decided not to drain. Making this upper bound more accurate\n-        // requires maintaining an extra field and is not worth while.\n+        // the predicate decided not to drain. Making this upper bound more tight\n+        // during iteration would require an extra field.\n         (0, Some(*self.length))\n     }\n }"}, {"sha": "9d0db345009459e3d8eae92336251a1d5a941d58", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f9e960241aa9f8c1c899ea5176ab71c04580cd8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9e960241aa9f8c1c899ea5176ab71c04580cd8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=0f9e960241aa9f8c1c899ea5176ab71c04580cd8", "patch": "@@ -440,8 +440,7 @@ impl<K, V> Handle<NodeRef<marker::Dying, K, V, marker::Leaf>, marker::Edge> {\n     /// - The given edge must not have been previously returned by counterpart\n     ///   `deallocating_next_back`.\n     /// - The returned KV handle is only valid to access the key and value,\n-    ///   and only valid until the next call to this method or counterpart\n-    ///   `deallocating_next_back`.\n+    ///   and only valid until the next call to a `deallocating_` method.\n     unsafe fn deallocating_next(\n         self,\n     ) -> Option<(Self, Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>)>\n@@ -470,8 +469,7 @@ impl<K, V> Handle<NodeRef<marker::Dying, K, V, marker::Leaf>, marker::Edge> {\n     /// - The given edge must not have been previously returned by counterpart\n     ///   `deallocating_next`.\n     /// - The returned KV handle is only valid to access the key and value,\n-    ///   and only valid until the next call to this method or counterpart\n-    ///   `deallocating_next`.\n+    ///   and only valid until the next call to a `deallocating_` method.\n     unsafe fn deallocating_next_back(\n         self,\n     ) -> Option<(Self, Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>)>"}, {"sha": "dfce98f97bd4496f280e2dab003a8891fed80f86", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9e960241aa9f8c1c899ea5176ab71c04580cd8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9e960241aa9f8c1c899ea5176ab71c04580cd8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=0f9e960241aa9f8c1c899ea5176ab71c04580cd8", "patch": "@@ -574,7 +574,7 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n     /// no cleanup is done on any of the keys, values and other children.\n     /// This decreases the height by 1 and is the opposite of `push_internal_level`.\n     ///\n-    /// Requires exclusive access to the `Root` object but not to the root node;\n+    /// Requires exclusive access to the `NodeRef` object but not to the root node;\n     /// it will not invalidate other handles or references to the root node.\n     ///\n     /// Panics if there is no internal level, i.e., if the root node is a leaf."}]}