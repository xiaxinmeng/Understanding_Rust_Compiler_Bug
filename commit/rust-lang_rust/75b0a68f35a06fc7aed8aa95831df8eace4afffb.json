{"sha": "75b0a68f35a06fc7aed8aa95831df8eace4afffb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YjBhNjhmMzVhMDZmYzdhZWQ4YWE5NTgzMWRmOGVhY2U0YWZmZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-23T07:18:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-23T07:18:17Z"}, "message": "Auto merge of #72478 - Dylan-DPC:rollup-vval8du, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #71289 (Allow using `Self::` in doc)\n - #72375 (Improve E0599 explanation)\n - #72385 (Add some teams to prioritization exclude_labels)\n - #72395 (Allow rust-highfive to label issues it creates.)\n - #72453 (Add flag to open docs:  x.py doc --open)\n - #72459 (Add core::future::IntoFuture)\n - #72461 (Clean up E0600 explanation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "ac84646e72ebb56c8a979e4f7c4b9a0b1ea08bb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac84646e72ebb56c8a979e4f7c4b9a0b1ea08bb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75b0a68f35a06fc7aed8aa95831df8eace4afffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75b0a68f35a06fc7aed8aa95831df8eace4afffb", "html_url": "https://github.com/rust-lang/rust/commit/75b0a68f35a06fc7aed8aa95831df8eace4afffb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75b0a68f35a06fc7aed8aa95831df8eace4afffb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f940ef5d91b53e889f111f27e00849f2f5ae4a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f940ef5d91b53e889f111f27e00849f2f5ae4a2", "html_url": "https://github.com/rust-lang/rust/commit/7f940ef5d91b53e889f111f27e00849f2f5ae4a2"}, {"sha": "bf1b998be6be2b3b8dee46acd5a3e6261457bdc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1b998be6be2b3b8dee46acd5a3e6261457bdc2", "html_url": "https://github.com/rust-lang/rust/commit/bf1b998be6be2b3b8dee46acd5a3e6261457bdc2"}], "stats": {"total": 307, "additions": 296, "deletions": 11}, "files": [{"sha": "6ce5458ed7a5d15c946ab15ff4ba35b44be2bb59", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75b0a68f35a06fc7aed8aa95831df8eace4afffb/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/75b0a68f35a06fc7aed8aa95831df8eace4afffb/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=75b0a68f35a06fc7aed8aa95831df8eace4afffb", "patch": "@@ -213,6 +213,7 @@ dependencies = [\n  \"lazy_static 1.4.0\",\n  \"libc\",\n  \"num_cpus\",\n+ \"opener\",\n  \"pretty_assertions\",\n  \"serde\",\n  \"serde_json\","}, {"sha": "c4918d7f2e7146795f0d5fdf5ea485dc2d6386bc", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=75b0a68f35a06fc7aed8aa95831df8eace4afffb", "patch": "@@ -48,6 +48,7 @@ toml = \"0.5\"\n lazy_static = \"1.3.0\"\n time = \"0.1\"\n ignore = \"0.4.10\"\n+opener = \"0.4\"\n \n [target.'cfg(windows)'.dependencies.winapi]\n version = \"0.3\""}, {"sha": "5489b1bc66b64f6984fcfddecb845c73ab3c7e71", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=75b0a68f35a06fc7aed8aa95831df8eace4afffb", "patch": "@@ -503,7 +503,7 @@ impl<'a> Builder<'a> {\n             Subcommand::Check { ref paths } => (Kind::Check, &paths[..]),\n             Subcommand::Clippy { ref paths } => (Kind::Clippy, &paths[..]),\n             Subcommand::Fix { ref paths } => (Kind::Fix, &paths[..]),\n-            Subcommand::Doc { ref paths } => (Kind::Doc, &paths[..]),\n+            Subcommand::Doc { ref paths, .. } => (Kind::Doc, &paths[..]),\n             Subcommand::Test { ref paths, .. } => (Kind::Test, &paths[..]),\n             Subcommand::Bench { ref paths, .. } => (Kind::Bench, &paths[..]),\n             Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),"}, {"sha": "5c01c5e852c48caf781a96be2d71a6f0c10e767a", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=75b0a68f35a06fc7aed8aa95831df8eace4afffb", "patch": "@@ -70,6 +70,35 @@ book!(\n     RustdocBook, \"src/doc/rustdoc\", \"rustdoc\";\n );\n \n+fn open(builder: &Builder<'_>, path: impl AsRef<Path>) {\n+    if builder.config.dry_run || !builder.config.cmd.open() {\n+        return;\n+    }\n+\n+    let path = path.as_ref();\n+    builder.info(&format!(\"Opening doc {}\", path.display()));\n+    if let Err(err) = opener::open(path) {\n+        builder.info(&format!(\"{}\\n\", err));\n+    }\n+}\n+\n+// \"src/libstd\" -> [\"src\", \"libstd\"]\n+//\n+// Used for deciding whether a particular step is one requested by the user on\n+// the `x.py doc` command line, which determines whether `--open` will open that\n+// page.\n+fn components_simplified(path: &PathBuf) -> Vec<&str> {\n+    path.iter().map(|component| component.to_str().unwrap_or(\"???\")).collect()\n+}\n+\n+fn is_explicit_request(builder: &Builder<'_>, path: &str) -> bool {\n+    builder\n+        .paths\n+        .iter()\n+        .map(components_simplified)\n+        .any(|requested| requested.iter().copied().eq(path.split(\"/\")))\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct UnstableBook {\n     target: Interned<String>,\n@@ -200,6 +229,12 @@ impl Step for TheBook {\n \n             invoke_rustdoc(builder, compiler, target, path);\n         }\n+\n+        if is_explicit_request(builder, \"src/doc/book\") {\n+            let out = builder.doc_out(target);\n+            let index = out.join(\"book\").join(\"index.html\");\n+            open(builder, &index);\n+        }\n     }\n }\n \n@@ -338,6 +373,13 @@ impl Step for Standalone {\n             }\n             builder.run(&mut cmd);\n         }\n+\n+        // We open doc/index.html as the default if invoked as `x.py doc --open`\n+        // with no particular explicit doc requested (e.g. src/libcore).\n+        if builder.paths.is_empty() || is_explicit_request(builder, \"src/doc\") {\n+            let index = out.join(\"index.html\");\n+            open(builder, &index);\n+        }\n     }\n }\n \n@@ -418,10 +460,25 @@ impl Step for Std {\n \n             builder.run(&mut cargo.into());\n         };\n-        for krate in &[\"alloc\", \"core\", \"std\", \"proc_macro\", \"test\"] {\n+        let krates = [\"alloc\", \"core\", \"std\", \"proc_macro\", \"test\"];\n+        for krate in &krates {\n             run_cargo_rustdoc_for(krate);\n         }\n         builder.cp_r(&my_out, &out);\n+\n+        // Look for src/libstd, src/libcore etc in the `x.py doc` arguments and\n+        // open the corresponding rendered docs.\n+        for path in builder.paths.iter().map(components_simplified) {\n+            if path.get(0) == Some(&\"src\")\n+                && path.get(1).map_or(false, |dir| dir.starts_with(\"lib\"))\n+            {\n+                let requested_crate = &path[1][3..];\n+                if krates.contains(&requested_crate) {\n+                    let index = out.join(requested_crate).join(\"index.html\");\n+                    open(builder, &index);\n+                }\n+            }\n+        }\n     }\n }\n "}, {"sha": "cfaa43f397095c30a4cf4046f28ca2ac8f2d62d7", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=75b0a68f35a06fc7aed8aa95831df8eace4afffb", "patch": "@@ -61,6 +61,7 @@ pub enum Subcommand {\n     },\n     Doc {\n         paths: Vec<PathBuf>,\n+        open: bool,\n     },\n     Test {\n         paths: Vec<PathBuf>,\n@@ -248,6 +249,9 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             \"bench\" => {\n                 opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n             }\n+            \"doc\" => {\n+                opts.optflag(\"\", \"open\", \"open the docs in a browser\");\n+            }\n             \"clean\" => {\n                 opts.optflag(\"\", \"all\", \"clean all build artifacts\");\n             }\n@@ -404,6 +408,7 @@ Arguments:\n         ./x.py doc src/doc/book\n         ./x.py doc src/doc/nomicon\n         ./x.py doc src/doc/book src/libstd\n+        ./x.py doc src/libstd --open\n \n     If no arguments are passed then everything is documented:\n \n@@ -479,7 +484,7 @@ Arguments:\n                 },\n             },\n             \"bench\" => Subcommand::Bench { paths, test_args: matches.opt_strs(\"test-args\") },\n-            \"doc\" => Subcommand::Doc { paths },\n+            \"doc\" => Subcommand::Doc { paths, open: matches.opt_present(\"open\") },\n             \"clean\" => {\n                 if !paths.is_empty() {\n                     println!(\"\\nclean does not take a path argument\\n\");\n@@ -613,6 +618,13 @@ impl Subcommand {\n             _ => None,\n         }\n     }\n+\n+    pub fn open(&self) -> bool {\n+        match *self {\n+            Subcommand::Doc { open, .. } => open,\n+            _ => false,\n+        }\n+    }\n }\n \n fn split(s: &[String]) -> Vec<String> {"}, {"sha": "4020c254446e3eb2c10dcf878810467df5e753c3", "filename": "src/libcore/future/into_future.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Flibcore%2Ffuture%2Finto_future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Flibcore%2Ffuture%2Finto_future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Finto_future.rs?ref=75b0a68f35a06fc7aed8aa95831df8eace4afffb", "patch": "@@ -0,0 +1,27 @@\n+use crate::future::Future;\n+\n+/// Conversion into a `Future`.\n+#[unstable(feature = \"into_future\", issue = \"67644\")]\n+pub trait IntoFuture {\n+    /// The output that the future will produce on completion.\n+    #[unstable(feature = \"into_future\", issue = \"67644\")]\n+    type Output;\n+\n+    /// Which kind of future are we turning this into?\n+    #[unstable(feature = \"into_future\", issue = \"67644\")]\n+    type Future: Future<Output = Self::Output>;\n+\n+    /// Creates a future from a value.\n+    #[unstable(feature = \"into_future\", issue = \"67644\")]\n+    fn into_future(self) -> Self::Future;\n+}\n+\n+#[unstable(feature = \"into_future\", issue = \"67644\")]\n+impl<F: Future> IntoFuture for F {\n+    type Output = F::Output;\n+    type Future = F;\n+\n+    fn into_future(self) -> Self::Future {\n+        self\n+    }\n+}"}, {"sha": "6f6009b47e67246f73740900c81f011a8609d9b1", "filename": "src/libcore/future/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Flibcore%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Flibcore%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fmod.rs?ref=75b0a68f35a06fc7aed8aa95831df8eace4afffb", "patch": "@@ -10,12 +10,16 @@ use crate::{\n };\n \n mod future;\n+mod into_future;\n mod pending;\n mod ready;\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub use self::future::Future;\n \n+#[unstable(feature = \"into_future\", issue = \"67644\")]\n+pub use into_future::IntoFuture;\n+\n #[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n pub use pending::{pending, Pending};\n #[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]"}, {"sha": "5b1590b29998f489c07b8e6af17b3f5434b3c1c2", "filename": "src/librustc_error_codes/error_codes/E0599.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Flibrustc_error_codes%2Ferror_codes%2FE0599.md", "raw_url": "https://github.com/rust-lang/rust/raw/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Flibrustc_error_codes%2Ferror_codes%2FE0599.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0599.md?ref=75b0a68f35a06fc7aed8aa95831df8eace4afffb", "patch": "@@ -9,3 +9,18 @@ let x = Mouth;\n x.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n                //        in the current scope\n ```\n+\n+In this case, you need to implement the `chocolate` method to fix the error:\n+\n+```\n+struct Mouth;\n+\n+impl Mouth {\n+    fn chocolate(&self) { // We implement the `chocolate` method here.\n+        println!(\"Hmmm! I love chocolate!\");\n+    }\n+}\n+\n+let x = Mouth;\n+x.chocolate(); // ok!\n+```"}, {"sha": "356006c72f3d1d74a180143ee2cd864269270bda", "filename": "src/librustc_error_codes/error_codes/E0600.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Flibrustc_error_codes%2Ferror_codes%2FE0600.md", "raw_url": "https://github.com/rust-lang/rust/raw/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Flibrustc_error_codes%2Ferror_codes%2FE0600.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0600.md?ref=75b0a68f35a06fc7aed8aa95831df8eace4afffb", "patch": "@@ -1,6 +1,6 @@\n An unary operator was used on a type which doesn't implement it.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0600\n enum Question {"}, {"sha": "adb7fc3eb9cff8f827a51acfb34061fc2ee4b156", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=75b0a68f35a06fc7aed8aa95831df8eace4afffb", "patch": "@@ -431,6 +431,43 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n \n         look_for_tests(&cx, &dox, &item, true);\n \n+        // find item's parent to resolve `Self` in item's docs below\n+        let parent_name = self.cx.as_local_hir_id(item.def_id).and_then(|item_hir| {\n+            let parent_hir = self.cx.tcx.hir().get_parent_item(item_hir);\n+            let item_parent = self.cx.tcx.hir().find(parent_hir);\n+            match item_parent {\n+                Some(hir::Node::Item(hir::Item {\n+                    kind:\n+                        hir::ItemKind::Impl {\n+                            self_ty:\n+                                hir::Ty {\n+                                    kind:\n+                                        hir::TyKind::Path(hir::QPath::Resolved(\n+                                            _,\n+                                            hir::Path { segments, .. },\n+                                        )),\n+                                    ..\n+                                },\n+                            ..\n+                        },\n+                    ..\n+                })) => segments.first().and_then(|seg| Some(seg.ident.to_string())),\n+                Some(hir::Node::Item(hir::Item {\n+                    ident, kind: hir::ItemKind::Enum(..), ..\n+                }))\n+                | Some(hir::Node::Item(hir::Item {\n+                    ident, kind: hir::ItemKind::Struct(..), ..\n+                }))\n+                | Some(hir::Node::Item(hir::Item {\n+                    ident, kind: hir::ItemKind::Union(..), ..\n+                }))\n+                | Some(hir::Node::Item(hir::Item {\n+                    ident, kind: hir::ItemKind::Trait(..), ..\n+                })) => Some(ident.to_string()),\n+                _ => None,\n+            }\n+        });\n+\n         for (ori_link, link_range) in markdown_links(&dox) {\n             // Bail early for real links.\n             if ori_link.contains('/') {\n@@ -467,7 +504,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             };\n             let (res, fragment) = {\n                 let mut kind = None;\n-                let path_str = if let Some(prefix) =\n+                let mut path_str = if let Some(prefix) =\n                     [\"struct@\", \"enum@\", \"type@\", \"trait@\", \"union@\"]\n                         .iter()\n                         .find(|p| link.starts_with(**p))\n@@ -521,6 +558,15 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                 let base_node =\n                     if item.is_mod() && item.attrs.inner_docs { None } else { parent_node };\n \n+                let resolved_self;\n+                // replace `Self` with suitable item's parent name\n+                if path_str.starts_with(\"Self::\") {\n+                    if let Some(ref name) = parent_name {\n+                        resolved_self = format!(\"{}::{}\", name, &path_str[6..]);\n+                        path_str = &resolved_self;\n+                    }\n+                }\n+\n                 match kind {\n                     Some(ns @ ValueNS) => {\n                         match self.resolve(\n@@ -529,7 +575,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                             &current_item,\n                             base_node,\n                             &extra_fragment,\n-                            None,\n+                            Some(&item),\n                         ) {\n                             Ok(res) => res,\n                             Err(ErrorKind::ResolutionFailure) => {\n@@ -552,7 +598,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                             &current_item,\n                             base_node,\n                             &extra_fragment,\n-                            None,\n+                            Some(&item),\n                         ) {\n                             Ok(res) => res,\n                             Err(ErrorKind::ResolutionFailure) => {\n@@ -577,7 +623,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                                 &current_item,\n                                 base_node,\n                                 &extra_fragment,\n-                                None,\n+                                Some(&item),\n                             ) {\n                                 Err(ErrorKind::AnchorFailure(msg)) => {\n                                     anchor_failure(cx, &item, &ori_link, &dox, link_range, msg);"}, {"sha": "89dd9fb9b2cd56f8d19c5187d49a1f9aaf1e15ee", "filename": "src/libstd/future.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=75b0a68f35a06fc7aed8aa95831df8eace4afffb", "patch": "@@ -2,4 +2,16 @@\n \n #[doc(inline)]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-pub use core::future::*;\n+pub use core::future::Future;\n+\n+#[doc(inline)]\n+#[unstable(feature = \"gen_future\", issue = \"50547\")]\n+pub use core::future::{from_generator, get_context, ResumeTy};\n+\n+#[doc(inline)]\n+#[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n+pub use core::future::{pending, ready, Pending, Ready};\n+\n+#[doc(inline)]\n+#[unstable(feature = \"into_future\", issue = \"67644\")]\n+pub use core::future::IntoFuture;"}, {"sha": "cc3e613fa3d6037df1a4122f26e99b9ece3d6c03", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=75b0a68f35a06fc7aed8aa95831df8eace4afffb", "patch": "@@ -266,12 +266,15 @@\n #![feature(external_doc)]\n #![feature(fn_traits)]\n #![feature(format_args_nl)]\n+#![feature(future_readiness_fns)]\n+#![feature(gen_future)]\n #![feature(generator_trait)]\n #![feature(global_asm)]\n #![feature(hash_raw_entry)]\n #![feature(hashmap_internals)]\n #![feature(int_error_internals)]\n #![feature(int_error_matching)]\n+#![feature(into_future)]\n #![feature(integer_atomics)]\n #![feature(lang_items)]\n #![feature(libc)]"}, {"sha": "97752d5cfcb5c96d29e81fc020c4231d70102594", "filename": "src/test/rustdoc/intra-link-self.rs", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Ftest%2Frustdoc%2Fintra-link-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Ftest%2Frustdoc%2Fintra-link-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-self.rs?ref=75b0a68f35a06fc7aed8aa95831df8eace4afffb", "patch": "@@ -1,5 +1,7 @@\n #![crate_name = \"foo\"]\n \n+// ignore-tidy-linelength\n+\n // @has foo/index.html '//a/@href' '../foo/struct.Foo.html#method.new'\n // @has foo/struct.Foo.html '//a/@href' '../foo/struct.Foo.html#method.new'\n \n@@ -27,3 +29,89 @@ impl Bar {\n         unimplemented!()\n     }\n }\n+\n+pub struct MyStruct {\n+    // @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#structfield.struct_field'\n+\n+    /// [`struct_field`]\n+    ///\n+    /// [`struct_field`]: Self::struct_field\n+    pub struct_field: u8,\n+}\n+\n+pub enum MyEnum {\n+    // @has foo/enum.MyEnum.html '//a/@href' '../foo/enum.MyEnum.html#EnumVariant.v'\n+\n+    /// [`EnumVariant`]\n+    ///\n+    /// [`EnumVariant`]: Self::EnumVariant\n+    EnumVariant,\n+}\n+\n+pub union MyUnion {\n+    // @has foo/union.MyUnion.html '//a/@href' '../foo/union.MyUnion.html#structfield.union_field'\n+\n+    /// [`union_field`]\n+    ///\n+    /// [`union_field`]: Self::union_field\n+    pub union_field: f32,\n+}\n+\n+pub trait MyTrait {\n+    // @has foo/trait.MyTrait.html '//a/@href' '../foo/trait.MyTrait.html#associatedtype.AssoType'\n+\n+    /// [`AssoType`]\n+    ///\n+    /// [`AssoType`]: Self::AssoType\n+    type AssoType;\n+\n+    // @has foo/trait.MyTrait.html '//a/@href' '../foo/trait.MyTrait.html#associatedconstant.ASSO_CONST'\n+\n+    /// [`ASSO_CONST`]\n+    ///\n+    /// [`ASSO_CONST`]: Self::ASSO_CONST\n+    const ASSO_CONST: i32 = 1;\n+\n+    // @has foo/trait.MyTrait.html '//a/@href' '../foo/trait.MyTrait.html#method.asso_fn'\n+\n+    /// [`asso_fn`]\n+    ///\n+    /// [`asso_fn`]: Self::asso_fn\n+    fn asso_fn() {}\n+}\n+\n+impl MyStruct {\n+    // @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#method.for_impl'\n+\n+    /// [`for_impl`]\n+    ///\n+    /// [`for_impl`]: Self::for_impl\n+    pub fn for_impl() {\n+        unimplemented!()\n+    }\n+}\n+\n+impl MyTrait for MyStruct {\n+    // @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#associatedtype.AssoType'\n+\n+    /// [`AssoType`]\n+    ///\n+    /// [`AssoType`]: Self::AssoType\n+    type AssoType = u32;\n+\n+    // @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#associatedconstant.ASSO_CONST'\n+\n+    /// [`ASSO_CONST`]\n+    ///\n+    /// [`ASSO_CONST`]: Self::ASSO_CONST\n+    const ASSO_CONST: i32 = 10;\n+\n+    // @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#method.asso_fn'\n+\n+    /// [`asso_fn`]\n+    ///\n+    /// [`asso_fn`]: Self::asso_fn\n+    fn asso_fn() {\n+        unimplemented!()\n+    }\n+}"}, {"sha": "72437e070044ce7aaf173136309d4fce87136a6f", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/75b0a68f35a06fc7aed8aa95831df8eace4afffb/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=75b0a68f35a06fc7aed8aa95831df8eace4afffb", "patch": "@@ -39,6 +39,19 @@\n     'rustc-dev-guide': {'mark-i-m', 'spastorino', 'amanjeev', 'JohnTitor'},\n }\n \n+LABELS = {\n+    'miri': ['A-miri', 'C-bug'],\n+    'rls': ['A-rls', 'C-bug'],\n+    'rustfmt': ['C-bug'],\n+    'book': ['C-bug'],\n+    'nomicon': ['C-bug'],\n+    'reference': ['C-bug'],\n+    'rust-by-example': ['C-bug'],\n+    'embedded-book': ['C-bug'],\n+    'edition-guide': ['C-bug'],\n+    'rustc-dev-guide': ['C-bug'],\n+}\n+\n REPOS = {\n     'miri': 'https://github.com/rust-lang/miri',\n     'rls': 'https://github.com/rust-lang/rls',\n@@ -132,6 +145,7 @@ def issue(\n     assignees,\n     relevant_pr_number,\n     relevant_pr_user,\n+    labels,\n ):\n     # Open an issue about the toolstate failure.\n     if status == 'test-fail':\n@@ -155,6 +169,7 @@ def issue(\n         )),\n         'title': '`{}` no longer builds after {}'.format(tool, relevant_pr_number),\n         'assignees': list(assignees),\n+        'labels': labels,\n     })\n     print(\"Creating issue:\\n{}\".format(request))\n     response = urllib2.urlopen(urllib2.Request(\n@@ -235,7 +250,7 @@ def update_latest(\n                 try:\n                     issue(\n                         tool, create_issue_for_status, MAINTAINERS.get(tool, ''),\n-                        relevant_pr_number, relevant_pr_user,\n+                        relevant_pr_number, relevant_pr_user, LABELS.get(tool, ''),\n                     )\n                 except urllib2.HTTPError as e:\n                     # network errors will simply end up not creating an issue, but that's better"}, {"sha": "f12d51637632240332a166455538f5845575e6b2", "filename": "triagebot.toml", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75b0a68f35a06fc7aed8aa95831df8eace4afffb/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/75b0a68f35a06fc7aed8aa95831df8eace4afffb/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=75b0a68f35a06fc7aed8aa95831df8eace4afffb", "patch": "@@ -37,5 +37,9 @@ label = \"ICEBreaker-Cleanup-Crew\"\n [prioritize]\n label = \"I-prioritize\"\n prioritize_on = [\"regression-from-stable-to-stable\", \"regression-from-stable-to-beta\", \"regression-from-stable-to-nightly\"]\n-priority_labels = \"P-*\"\n+exclude_labels = [\n+    \"P-*\",\n+    \"T-infra\",\n+    \"T-release\",\n+]\n zulip_stream = 227806"}]}