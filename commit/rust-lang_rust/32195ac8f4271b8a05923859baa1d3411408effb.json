{"sha": "32195ac8f4271b8a05923859baa1d3411408effb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMTk1YWM4ZjQyNzFiOGEwNTkyMzg1OWJhYTFkMzQxMTQwOGVmZmI=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-26T08:28:15Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-26T08:28:15Z"}, "message": "rename functions", "tree": {"sha": "03fd2ba529dd85edc1fbf63a7628dfdac65536a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03fd2ba529dd85edc1fbf63a7628dfdac65536a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32195ac8f4271b8a05923859baa1d3411408effb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32195ac8f4271b8a05923859baa1d3411408effb", "html_url": "https://github.com/rust-lang/rust/commit/32195ac8f4271b8a05923859baa1d3411408effb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32195ac8f4271b8a05923859baa1d3411408effb/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff7009a4d279c1e5ce1248ca373b91678ad6709c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff7009a4d279c1e5ce1248ca373b91678ad6709c", "html_url": "https://github.com/rust-lang/rust/commit/ff7009a4d279c1e5ce1248ca373b91678ad6709c"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "6302139c27d820345f2c028f1c99c7c542bc8f91", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32195ac8f4271b8a05923859baa1d3411408effb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32195ac8f4271b8a05923859baa1d3411408effb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=32195ac8f4271b8a05923859baa1d3411408effb", "patch": "@@ -221,7 +221,7 @@ impl Into<rustc_errors::DiagnosticId> for TypeAnnotationNeeded {\n }\n \n /// Information about a constant or a type containing inference variables.\n-pub struct InferDiagnosticsData {\n+pub struct InferenceDiagnosticsData {\n     pub name: String,\n     pub span: Option<Span>,\n     pub description: Cow<'static, str>,\n@@ -232,11 +232,11 @@ pub struct InferDiagnosticsData {\n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// Extracts data used by diagnostic for either types or constants\n     /// which were stuck during inference.\n-    pub fn extract_infer_data(\n+    pub fn extract_inference_diagnostics_data(\n         &self,\n         arg: GenericArg<'tcx>,\n         highlight: Option<ty::print::RegionHighlightMode>,\n-    ) -> InferDiagnosticsData {\n+    ) -> InferenceDiagnosticsData {\n         match arg.unpack() {\n             GenericArgKind::Type(ty) => {\n                 if let ty::Infer(ty::TyVar(ty_vid)) = *ty.kind() {\n@@ -266,7 +266,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             };\n \n                         if name != kw::SelfUpper {\n-                            return InferDiagnosticsData {\n+                            return InferenceDiagnosticsData {\n                                 name: name.to_string(),\n                                 span: Some(var_origin.span),\n                                 description: \"type parameter\".into(),\n@@ -283,7 +283,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     printer.region_highlight_mode = highlight;\n                 }\n                 let _ = ty.print(printer);\n-                InferDiagnosticsData {\n+                InferenceDiagnosticsData {\n                     name: s,\n                     span: None,\n                     description: ty.prefix_string(),\n@@ -317,7 +317,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                 (None, None)\n                             };\n \n-                        return InferDiagnosticsData {\n+                        return InferenceDiagnosticsData {\n                             name: name.to_string(),\n                             span: Some(origin.span),\n                             description: \"const parameter\".into(),\n@@ -334,7 +334,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         printer.region_highlight_mode = highlight;\n                     }\n                     let _ = ct.print(printer);\n-                    InferDiagnosticsData {\n+                    InferenceDiagnosticsData {\n                         name: s,\n                         span: Some(origin.span),\n                         description: \"the constant\".into(),\n@@ -349,16 +349,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    pub fn need_type_info_err(\n+    pub fn emit_inference_failure_err(\n         &self,\n         body_id: Option<hir::BodyId>,\n         span: Span,\n         arg: GenericArg<'tcx>,\n         error_code: TypeAnnotationNeeded,\n     ) -> DiagnosticBuilder<'tcx> {\n-        let ty = self.resolve_vars_if_possible(&arg);\n-        let arg_data = self.extract_infer_data(arg, None);\n-        let kind_str = match ty.unpack() {\n+        let arg = self.resolve_vars_if_possible(&arg);\n+        let arg_data = self.extract_inference_diagnostics_data(arg, None);\n+        let kind_str = match arg.unpack() {\n             GenericArgKind::Type(_) => \"type\",\n             GenericArgKind::Const(_) => \"the value\",\n             GenericArgKind::Lifetime(_) => bug!(\"unexpected lifetime\"),\n@@ -700,7 +700,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         ty: Ty<'tcx>,\n     ) -> DiagnosticBuilder<'tcx> {\n         let ty = self.resolve_vars_if_possible(&ty);\n-        let data = self.extract_infer_data(ty.into(), None);\n+        let data = self.extract_inference_diagnostics_data(ty.into(), None);\n \n         let mut err = struct_span_err!(\n             self.tcx.sess,"}, {"sha": "5f64eb3dba8ac4b4b442db830657404bb5af144a", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32195ac8f4271b8a05923859baa1d3411408effb/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32195ac8f4271b8a05923859baa1d3411408effb/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=32195ac8f4271b8a05923859baa1d3411408effb", "patch": "@@ -396,7 +396,8 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     ) -> Option<RegionNameHighlight> {\n         let mut highlight = RegionHighlightMode::default();\n         highlight.highlighting_region_vid(needle_fr, counter);\n-        let type_name = self.infcx.extract_infer_data(ty.into(), Some(highlight)).name;\n+        let type_name =\n+            self.infcx.extract_inference_diagnostics_data(ty.into(), Some(highlight)).name;\n \n         debug!(\n             \"highlight_if_we_cannot_match_hir_ty: type_name={:?} needle_fr={:?}\",\n@@ -645,7 +646,8 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         let mut highlight = RegionHighlightMode::default();\n         highlight.highlighting_region_vid(fr, *self.next_region_name.try_borrow().unwrap());\n-        let type_name = self.infcx.extract_infer_data(return_ty.into(), Some(highlight)).name;\n+        let type_name =\n+            self.infcx.extract_inference_diagnostics_data(return_ty.into(), Some(highlight)).name;\n \n         let mir_hir_id = tcx.hir().local_def_id_to_hir_id(self.mir_def_id);\n \n@@ -697,7 +699,8 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         let mut highlight = RegionHighlightMode::default();\n         highlight.highlighting_region_vid(fr, *self.next_region_name.try_borrow().unwrap());\n-        let type_name = self.infcx.extract_infer_data(yield_ty.into(), Some(highlight)).name;\n+        let type_name =\n+            self.infcx.extract_inference_diagnostics_data(yield_ty.into(), Some(highlight)).name;\n \n         let mir_hir_id = tcx.hir().local_def_id_to_hir_id(self.mir_def_id);\n "}, {"sha": "1b234a1535c978be426d12666fbc7b9bd67863e0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/32195ac8f4271b8a05923859baa1d3411408effb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32195ac8f4271b8a05923859baa1d3411408effb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=32195ac8f4271b8a05923859baa1d3411408effb", "patch": "@@ -1512,11 +1512,21 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 // check upstream for type errors and don't add the obligations to\n                 // begin with in those cases.\n                 if self.tcx.lang_items().sized_trait() == Some(trait_ref.def_id()) {\n-                    self.need_type_info_err(body_id, span, self_ty.into(), ErrorCode::E0282).emit();\n+                    self.emit_inference_failure_err(\n+                        body_id,\n+                        span,\n+                        self_ty.into(),\n+                        ErrorCode::E0282,\n+                    )\n+                    .emit();\n                     return;\n                 }\n-                let mut err =\n-                    self.need_type_info_err(body_id, span, self_ty.into(), ErrorCode::E0283);\n+                let mut err = self.emit_inference_failure_err(\n+                    body_id,\n+                    span,\n+                    self_ty.into(),\n+                    ErrorCode::E0283,\n+                );\n                 err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                 if let ObligationCauseCode::ItemObligation(def_id) = obligation.cause.code {\n                     self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n@@ -1580,7 +1590,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                self.need_type_info_err(body_id, span, arg, ErrorCode::E0282)\n+                self.emit_inference_failure_err(body_id, span, arg, ErrorCode::E0282)\n             }\n \n             ty::PredicateAtom::Subtype(data) => {\n@@ -1591,7 +1601,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let SubtypePredicate { a_is_expected: _, a, b } = data;\n                 // both must be type variables, or the other would've been instantiated\n                 assert!(a.is_ty_var() && b.is_ty_var());\n-                self.need_type_info_err(body_id, span, a.into(), ErrorCode::E0282)\n+                self.emit_inference_failure_err(body_id, span, a.into(), ErrorCode::E0282)\n             }\n             ty::PredicateAtom::Projection(data) => {\n                 let trait_ref = ty::Binder::bind(data).to_poly_trait_ref(self.tcx);\n@@ -1602,8 +1612,12 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n                 if self_ty.needs_infer() && ty.needs_infer() {\n                     // We do this for the `foo.collect()?` case to produce a suggestion.\n-                    let mut err =\n-                        self.need_type_info_err(body_id, span, self_ty.into(), ErrorCode::E0284);\n+                    let mut err = self.emit_inference_failure_err(\n+                        body_id,\n+                        span,\n+                        self_ty.into(),\n+                        ErrorCode::E0284,\n+                    );\n                     err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                     err\n                 } else {"}, {"sha": "79d6c7dbfdae264e980b88b96c498bb6fb5e4ddf", "filename": "compiler/rustc_typeck/src/check/fn_ctxt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32195ac8f4271b8a05923859baa1d3411408effb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32195ac8f4271b8a05923859baa1d3411408effb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt.rs?ref=32195ac8f4271b8a05923859baa1d3411408effb", "patch": "@@ -2991,7 +2991,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty\n         } else {\n             if !self.is_tainted_by_errors() {\n-                self.need_type_info_err((**self).body_id, sp, ty.into(), E0282)\n+                self.emit_inference_failure_err((**self).body_id, sp, ty.into(), E0282)\n                     .note(\"type must be known at this point\")\n                     .emit();\n             }"}, {"sha": "6fd7277a1c332df50cfed0aef3b7d1482f9c498e", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32195ac8f4271b8a05923859baa1d3411408effb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32195ac8f4271b8a05923859baa1d3411408effb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=32195ac8f4271b8a05923859baa1d3411408effb", "patch": "@@ -653,7 +653,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n     fn report_type_error(&self, t: Ty<'tcx>) {\n         if !self.tcx.sess.has_errors() {\n             self.infcx\n-                .need_type_info_err(\n+                .emit_inference_failure_err(\n                     Some(self.body.id()),\n                     self.span.to_span(self.tcx),\n                     t.into(),\n@@ -666,7 +666,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n     fn report_const_error(&self, c: &'tcx ty::Const<'tcx>) {\n         if !self.tcx.sess.has_errors() {\n             self.infcx\n-                .need_type_info_err(\n+                .emit_inference_failure_err(\n                     Some(self.body.id()),\n                     self.span.to_span(self.tcx),\n                     c.into(),"}]}