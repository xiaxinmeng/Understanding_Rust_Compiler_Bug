{"sha": "2816c110e01846dd737207f19ba3db11a20b887d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MTZjMTEwZTAxODQ2ZGQ3MzcyMDdmMTliYTNkYjExYTIwYjg4N2Q=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-15T15:23:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-15T15:23:00Z"}, "message": "Rollup merge of #83144 - hyd-dev:parse-sess-created, r=oli-obk\n\nIntroduce `rustc_interface::interface::Config::parse_sess_created` callback\n\nResolves #82900.\n\ncc `@oli-obk`", "tree": {"sha": "407134d0127b6a7d759851a2a032f5b172ca845a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/407134d0127b6a7d759851a2a032f5b172ca845a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2816c110e01846dd737207f19ba3db11a20b887d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgT3vUCRBK7hj4Ov3rIwAAdHIIAJxQFVAqVfprjm60j+qbSOYR\nC4qcya/hQvVxVevi0UXzl1JL9po/oRk70mMGJ2EuZRPvZPc2MNP3hkXbrS+jj38Y\nL7CJ60Ob45eQ+Y/0NUtXqC5MmHHeAiPIDPH4hSmU9fsol+UFx0Uy4ysRbSMFWlTC\ne5d6biZJv5twk4uQwdYDqbY/WzQbNqhXXFD6ZMytWRSEf8HnbjGW4T341OeQ3JbL\ngitQRp/XRkpVf7nGJGlpsBy5EcArE7iC+ffmqDoaGDjWt/y7AxGqkz+vr5lirGmT\nL+MoqAbhQGZCjOJg8CIx7OnKA7xnngEnoosrQ2y/ECCbS6jsWCGVm+jBeR+I1sI=\n=vVM8\n-----END PGP SIGNATURE-----\n", "payload": "tree 407134d0127b6a7d759851a2a032f5b172ca845a\nparent 13eac5b2364d31b7bf41717bee69e994048efe00\nparent 0bbfd548ecf48e17c9db43160aa3784caa2fcd47\nauthor Dylan DPC <dylan.dpc@gmail.com> 1615821780 +0100\ncommitter GitHub <noreply@github.com> 1615821780 +0100\n\nRollup merge of #83144 - hyd-dev:parse-sess-created, r=oli-obk\n\nIntroduce `rustc_interface::interface::Config::parse_sess_created` callback\n\nResolves #82900.\n\ncc `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2816c110e01846dd737207f19ba3db11a20b887d", "html_url": "https://github.com/rust-lang/rust/commit/2816c110e01846dd737207f19ba3db11a20b887d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2816c110e01846dd737207f19ba3db11a20b887d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13eac5b2364d31b7bf41717bee69e994048efe00", "url": "https://api.github.com/repos/rust-lang/rust/commits/13eac5b2364d31b7bf41717bee69e994048efe00", "html_url": "https://github.com/rust-lang/rust/commit/13eac5b2364d31b7bf41717bee69e994048efe00"}, {"sha": "0bbfd548ecf48e17c9db43160aa3784caa2fcd47", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bbfd548ecf48e17c9db43160aa3784caa2fcd47", "html_url": "https://github.com/rust-lang/rust/commit/0bbfd548ecf48e17c9db43160aa3784caa2fcd47"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "25a78041c0007bf4269efdb4dc62267e4b698e50", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2816c110e01846dd737207f19ba3db11a20b887d/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2816c110e01846dd737207f19ba3db11a20b887d/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=2816c110e01846dd737207f19ba3db11a20b887d", "patch": "@@ -215,6 +215,7 @@ fn run_compiler(\n             diagnostic_output,\n             stderr: None,\n             lint_caps: Default::default(),\n+            parse_sess_created: None,\n             register_lints: None,\n             override_queries: None,\n             make_codegen_backend: make_codegen_backend.take().unwrap(),\n@@ -298,6 +299,7 @@ fn run_compiler(\n         diagnostic_output,\n         stderr: None,\n         lint_caps: Default::default(),\n+        parse_sess_created: None,\n         register_lints: None,\n         override_queries: None,\n         make_codegen_backend: make_codegen_backend.unwrap(),"}, {"sha": "a1090ee316db48881a508485b2d1f31dd052f7ba", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2816c110e01846dd737207f19ba3db11a20b887d/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2816c110e01846dd737207f19ba3db11a20b887d/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=2816c110e01846dd737207f19ba3db11a20b887d", "patch": "@@ -142,6 +142,9 @@ pub struct Config {\n \n     pub lint_caps: FxHashMap<lint::LintId, lint::Level>,\n \n+    /// This is a callback from the driver that is called when [`ParseSess`] is created.\n+    pub parse_sess_created: Option<Box<dyn FnOnce(&mut ParseSess) + Send>>,\n+\n     /// This is a callback from the driver that is called when we're registering lints;\n     /// it is called during plugin registration when we have the LintStore in a non-shared state.\n     ///\n@@ -166,7 +169,7 @@ pub struct Config {\n \n pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R) -> R {\n     let registry = &config.registry;\n-    let (sess, codegen_backend) = util::create_session(\n+    let (mut sess, codegen_backend) = util::create_session(\n         config.opts,\n         config.crate_cfg,\n         config.diagnostic_output,\n@@ -177,6 +180,14 @@ pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R\n         registry.clone(),\n     );\n \n+    if let Some(parse_sess_created) = config.parse_sess_created {\n+        parse_sess_created(\n+            &mut Lrc::get_mut(&mut sess)\n+                .expect(\"create_session() should never share the returned session\")\n+                .parse_sess,\n+        );\n+    }\n+\n     let compiler = Compiler {\n         sess,\n         codegen_backend,"}, {"sha": "c5b5ab0f3d0ac4a72fd48a9b73fad87f7fc347a0", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2816c110e01846dd737207f19ba3db11a20b887d/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2816c110e01846dd737207f19ba3db11a20b887d/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=2816c110e01846dd737207f19ba3db11a20b887d", "patch": "@@ -311,6 +311,7 @@ crate fn create_config(\n         diagnostic_output: DiagnosticOutput::Default,\n         stderr: None,\n         lint_caps,\n+        parse_sess_created: None,\n         register_lints: Some(box crate::lint::register_lints),\n         override_queries: Some(|_sess, providers, _external_providers| {\n             // Most lints will require typechecking, so just don't run them."}, {"sha": "80e2e23eadde9b64fa680609d300bfa5813034e7", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2816c110e01846dd737207f19ba3db11a20b887d/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2816c110e01846dd737207f19ba3db11a20b887d/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=2816c110e01846dd737207f19ba3db11a20b887d", "patch": "@@ -95,6 +95,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         diagnostic_output: DiagnosticOutput::Default,\n         stderr: None,\n         lint_caps,\n+        parse_sess_created: None,\n         register_lints: Some(box crate::lint::register_lints),\n         override_queries: None,\n         make_codegen_backend: None,"}, {"sha": "4acabbb70ede20672e52f9e7bd8690a8c5e79c69", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2816c110e01846dd737207f19ba3db11a20b887d/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2816c110e01846dd737207f19ba3db11a20b887d/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=2816c110e01846dd737207f19ba3db11a20b887d", "patch": "@@ -57,6 +57,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         diagnostic_output: DiagnosticOutput::Default,\n         stderr: None,\n         lint_caps: Default::default(),\n+        parse_sess_created: None,\n         register_lints: None,\n         override_queries: None,\n         make_codegen_backend: None,"}, {"sha": "b6aed862e895fde53dfdeb385932acfda624cc76", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2816c110e01846dd737207f19ba3db11a20b887d/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2816c110e01846dd737207f19ba3db11a20b887d/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=2816c110e01846dd737207f19ba3db11a20b887d", "patch": "@@ -15,7 +15,7 @@ extern crate rustc_session;\n extern crate rustc_span;\n \n use rustc_interface::interface;\n-use rustc_session::Session;\n+use rustc_session::parse::ParseSess;\n use rustc_span::symbol::Symbol;\n use rustc_tools_util::VersionInfo;\n \n@@ -63,8 +63,8 @@ fn test_arg_value() {\n     assert_eq!(arg_value(args, \"--foo\", |_| true), None);\n }\n \n-fn track_clippy_args(sess: &Session, args_env_var: &Option<String>) {\n-    sess.parse_sess.env_depinfo.borrow_mut().insert((\n+fn track_clippy_args(parse_sess: &mut ParseSess, args_env_var: &Option<String>) {\n+    parse_sess.env_depinfo.get_mut().insert((\n         Symbol::intern(\"CLIPPY_ARGS\"),\n         args_env_var.as_deref().map(Symbol::intern),\n     ));\n@@ -81,14 +81,9 @@ struct RustcCallbacks {\n \n impl rustc_driver::Callbacks for RustcCallbacks {\n     fn config(&mut self, config: &mut interface::Config) {\n-        let previous = config.register_lints.take();\n         let clippy_args_var = self.clippy_args_var.take();\n-        config.register_lints = Some(Box::new(move |sess, lint_store| {\n-            if let Some(ref previous) = previous {\n-                (previous)(sess, lint_store);\n-            }\n-\n-            track_clippy_args(sess, &clippy_args_var);\n+        config.parse_sess_created = Some(Box::new(move |parse_sess| {\n+            track_clippy_args(parse_sess, &clippy_args_var);\n         }));\n     }\n }\n@@ -101,15 +96,16 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n     fn config(&mut self, config: &mut interface::Config) {\n         let previous = config.register_lints.take();\n         let clippy_args_var = self.clippy_args_var.take();\n+        config.parse_sess_created = Some(Box::new(move |parse_sess| {\n+            track_clippy_args(parse_sess, &clippy_args_var);\n+        }));\n         config.register_lints = Some(Box::new(move |sess, mut lint_store| {\n             // technically we're ~guaranteed that this is none but might as well call anything that\n             // is there already. Certainly it can't hurt.\n             if let Some(previous) = &previous {\n                 (previous)(sess, lint_store);\n             }\n \n-            track_clippy_args(sess, &clippy_args_var);\n-\n             let conf = clippy_lints::read_conf(&[], &sess);\n             clippy_lints::register_plugins(&mut lint_store, &sess, &conf);\n             clippy_lints::register_pre_expansion_lints(&mut lint_store);"}]}