{"sha": "3e1fb112af3968110704125301646d6a3fc20c8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMWZiMTEyYWYzOTY4MTEwNzA0MTI1MzAxNjQ2ZDZhM2ZjMjBjOGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-02T13:25:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-02T13:25:54Z"}, "message": "Merge #6698\n\n6698: Attach macro expansion errors to the right file r=jonas-schievink a=jonas-schievink\n\nPreviously it attached them to the result of the macro expansion (or, if no result was produced, to the file containing the invocation). Always use the file containing the invocation.\r\n\r\nThis doesn't seem to have any observable difference, but seems better in theory.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "6f2051a39485da5766aecb2bc13e890b107fc0dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f2051a39485da5766aecb2bc13e890b107fc0dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e1fb112af3968110704125301646d6a3fc20c8c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfx5XiCRBK7hj4Ov3rIwAAdHIIAJYJQ11yIsZ1RnWmwL6x3SeN\nDObsLABAOSIGEeqb39ehMDoIFvzi9Z3niTo1FbMi2B7CuAHS8IykBS3KT4c3owL0\n9SMqAtORfqLYZ3p6gkVt1XH7DaMtXEblnHm7KdmdicuAkjdLj0Ev59lNBs2Zu8Uz\nrLgmSYWh/JcUjDEy2e04+NGcwnScoHWsZCWWMnexdibVIEWZrW32gvgz4D4cfZna\n4YmrIQ/Nq+42JsJaYE0KMGYaJ0VnzhzciJN15wmapE9s1r7GkUppr5bQmF9/dufh\nWEL7bD2ccGVdPFOj4aul2GdexcfmNxKw4q2TZSScsWhSvwZlUfY9mRV85hKmC3Q=\n=stqT\n-----END PGP SIGNATURE-----\n", "payload": "tree 6f2051a39485da5766aecb2bc13e890b107fc0dc\nparent dc09d97fb2f4c7f938a76b4ba7b0b483f96ceb5d\nparent 319fcd01ac768c05f24c1d3d306ab68632c8de3e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606915554 +0000\ncommitter GitHub <noreply@github.com> 1606915554 +0000\n\nMerge #6698\n\n6698: Attach macro expansion errors to the right file r=jonas-schievink a=jonas-schievink\n\nPreviously it attached them to the result of the macro expansion (or, if no result was produced, to the file containing the invocation). Always use the file containing the invocation.\r\n\r\nThis doesn't seem to have any observable difference, but seems better in theory.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e1fb112af3968110704125301646d6a3fc20c8c", "html_url": "https://github.com/rust-lang/rust/commit/3e1fb112af3968110704125301646d6a3fc20c8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e1fb112af3968110704125301646d6a3fc20c8c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc09d97fb2f4c7f938a76b4ba7b0b483f96ceb5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc09d97fb2f4c7f938a76b4ba7b0b483f96ceb5d", "html_url": "https://github.com/rust-lang/rust/commit/dc09d97fb2f4c7f938a76b4ba7b0b483f96ceb5d"}, {"sha": "319fcd01ac768c05f24c1d3d306ab68632c8de3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/319fcd01ac768c05f24c1d3d306ab68632c8de3e", "html_url": "https://github.com/rust-lang/rust/commit/319fcd01ac768c05f24c1d3d306ab68632c8de3e"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "689a3274c793a507785ae43e17a75904f7c04651", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e1fb112af3968110704125301646d6a3fc20c8c/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1fb112af3968110704125301646d6a3fc20c8c/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=3e1fb112af3968110704125301646d6a3fc20c8c", "patch": "@@ -560,14 +560,17 @@ impl ExprCollector<'_> {\n                     // FIXME: do we still need to allocate this as missing ?\n                     self.alloc_expr(Expr::Missing, syntax_ptr)\n                 } else {\n+                    // File containing the macro call. Expansion errors will be attached here.\n+                    let outer_file = self.expander.current_file_id;\n+\n                     let macro_call = self.expander.to_source(AstPtr::new(&e));\n                     let res = self.expander.enter_expand(self.db, Some(&self.body.item_scope), e);\n \n                     match res.err {\n                         Some(ExpandError::UnresolvedProcMacro) => {\n                             self.source_map.diagnostics.push(BodyDiagnostic::UnresolvedProcMacro(\n                                 UnresolvedProcMacro {\n-                                    file: self.expander.current_file_id,\n+                                    file: outer_file,\n                                     node: syntax_ptr.clone().into(),\n                                     precise_location: None,\n                                     macro_name: None,\n@@ -577,7 +580,7 @@ impl ExprCollector<'_> {\n                         Some(err) => {\n                             self.source_map.diagnostics.push(BodyDiagnostic::MacroError(\n                                 MacroError {\n-                                    file: self.expander.current_file_id,\n+                                    file: outer_file,\n                                     node: syntax_ptr.clone().into(),\n                                     message: err.to_string(),\n                                 },"}]}