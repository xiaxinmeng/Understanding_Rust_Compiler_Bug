{"sha": "87c110506dcdb4cd5b4a10e2114832cc130a59c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YzExMDUwNmRjZGI0Y2Q1YjRhMTBlMjExNDgzMmNjMTMwYTU5Yzk=", "commit": {"author": {"name": "Joris Rehm", "email": "joris.rehm@wakusei.fr", "date": "2013-06-19T19:58:08Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-21T04:53:10Z"}, "message": "fix text of tutorials", "tree": {"sha": "22134920b9a6f0aeffca94391cefd2973fa21eb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22134920b9a6f0aeffca94391cefd2973fa21eb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87c110506dcdb4cd5b4a10e2114832cc130a59c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87c110506dcdb4cd5b4a10e2114832cc130a59c9", "html_url": "https://github.com/rust-lang/rust/commit/87c110506dcdb4cd5b4a10e2114832cc130a59c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87c110506dcdb4cd5b4a10e2114832cc130a59c9/comments", "author": {"login": "joris-r", "id": 4741917, "node_id": "MDQ6VXNlcjQ3NDE5MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4741917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joris-r", "html_url": "https://github.com/joris-r", "followers_url": "https://api.github.com/users/joris-r/followers", "following_url": "https://api.github.com/users/joris-r/following{/other_user}", "gists_url": "https://api.github.com/users/joris-r/gists{/gist_id}", "starred_url": "https://api.github.com/users/joris-r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joris-r/subscriptions", "organizations_url": "https://api.github.com/users/joris-r/orgs", "repos_url": "https://api.github.com/users/joris-r/repos", "events_url": "https://api.github.com/users/joris-r/events{/privacy}", "received_events_url": "https://api.github.com/users/joris-r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "525933d0a3444ca05f29f8777bf2bd1c5a2d92e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/525933d0a3444ca05f29f8777bf2bd1c5a2d92e3", "html_url": "https://github.com/rust-lang/rust/commit/525933d0a3444ca05f29f8777bf2bd1c5a2d92e3"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "1da1d046878a71f9eac9d7afc5b50755523419d6", "filename": "doc/tutorial-borrowed-ptr.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c110506dcdb4cd5b4a10e2114832cc130a59c9/doc%2Ftutorial-borrowed-ptr.md", "raw_url": "https://github.com/rust-lang/rust/raw/87c110506dcdb4cd5b4a10e2114832cc130a59c9/doc%2Ftutorial-borrowed-ptr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-borrowed-ptr.md?ref=87c110506dcdb4cd5b4a10e2114832cc130a59c9", "patch": "@@ -234,7 +234,7 @@ would therefore be subject to garbage collection. A heap box that is\n unrooted is one such that no pointer values in the heap point to\n it. It would violate memory safety for the box that was originally\n assigned to `x` to be garbage-collected, since a non-heap\n-pointer---`y`---still points into it.\n+pointer *`y`* still points into it.\n \n > ***Note:*** Our current implementation implements the garbage collector\n > using reference counting and cycle detection.\n@@ -475,7 +475,7 @@ but otherwise it requires that the data reside in immutable memory.\n \n # Returning borrowed pointers\n \n-So far, all of the examples we've looked at use borrowed pointers in a\n+So far, all of the examples we have looked at, use borrowed pointers in a\n \u201cdownward\u201d direction. That is, a method or code block creates a\n borrowed pointer, then uses it within the same scope. It is also\n possible to return borrowed pointers as the result of a function, but\n@@ -509,7 +509,7 @@ guaranteed to refer to a distinct lifetime from the lifetimes of all\n other parameters.\n \n Named lifetimes that appear in function signatures are conceptually\n-the same as the other lifetimes we've seen before, but they are a bit\n+the same as the other lifetimes we have seen before, but they are a bit\n abstract: they don\u2019t refer to a specific expression within `get_x()`,\n but rather to some expression within the *caller of `get_x()`*.  The\n lifetime `r` is actually a kind of *lifetime parameter*: it is defined"}, {"sha": "28ade2826b89e56cad64da425531dc795d197de2", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c110506dcdb4cd5b4a10e2114832cc130a59c9/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/87c110506dcdb4cd5b4a10e2114832cc130a59c9/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=87c110506dcdb4cd5b4a10e2114832cc130a59c9", "patch": "@@ -481,7 +481,7 @@ an `Error` result.\n TODO: Need discussion of `future_result` in order to make failure\n modes useful.\n \n-But not all failure is created equal. In some cases you might need to\n+But not all failures are created equal. In some cases you might need to\n abort the entire program (perhaps you're writing an assert which, if\n it trips, indicates an unrecoverable logic error); in other cases you\n might want to contain the failure at a certain boundary (perhaps a"}, {"sha": "92d88be6c94917589b08d8b0ae40e69c98982828", "filename": "doc/tutorial.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87c110506dcdb4cd5b4a10e2114832cc130a59c9/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/87c110506dcdb4cd5b4a10e2114832cc130a59c9/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=87c110506dcdb4cd5b4a10e2114832cc130a59c9", "patch": "@@ -1084,8 +1084,8 @@ let managed_box  : @Point = @Point { x: 5.0, y: 1.0 };\n let owned_box    : ~Point = ~Point { x: 7.0, y: 9.0 };\n ~~~\n \n-Suppose we wanted to write a procedure that computed the distance\n-between any two points, no matter where they were stored. For example,\n+Suppose we want to write a procedure that computes the distance\n+between any two points, no matter where they are stored. For example,\n we might like to compute the distance between `on_the_stack` and\n `managed_box`, or between `managed_box` and `owned_box`. One option is\n to define a function that takes two arguments of type point\u2014that is,\n@@ -1230,7 +1230,7 @@ let area = rect.area();\n ~~~\n \n You can write an expression that dereferences any number of pointers\n-automatically. For example, if you felt inclined, you could write\n+automatically. For example, if you feel inclined, you could write\n something silly like\n \n ~~~\n@@ -1808,7 +1808,7 @@ s.draw_borrowed();\n ~~~\n \n Implementations may also define standalone (sometimes called \"static\")\n-methods. The absence of a `self` paramater distinguishes such methods.\n+methods. The absence of a `self` parameter distinguishes such methods.\n These methods are the preferred way to define constructor functions.\n \n ~~~~ {.xfail-test}\n@@ -2522,7 +2522,7 @@ will not be compiled successfully.\n \n ## A minimal example\n \n-Now for something that you can actually compile yourself. We have\n+Now for something that you can actually compile yourself, we have\n these two files:\n \n ~~~~"}]}