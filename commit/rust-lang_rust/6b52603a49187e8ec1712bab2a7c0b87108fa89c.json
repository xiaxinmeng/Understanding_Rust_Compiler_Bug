{"sha": "6b52603a49187e8ec1712bab2a7c0b87108fa89c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNTI2MDNhNDkxODdlOGVjMTcxMmJhYjJhN2MwYjg3MTA4ZmE4OWM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-10-04T23:28:05Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-10-21T20:05:38Z"}, "message": "Support signed integers and `char` in v0 mangling", "tree": {"sha": "10cb5f3c4b7171e7048c66ef5bf74b22933c4933", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10cb5f3c4b7171e7048c66ef5bf74b22933c4933"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b52603a49187e8ec1712bab2a7c0b87108fa89c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b52603a49187e8ec1712bab2a7c0b87108fa89c", "html_url": "https://github.com/rust-lang/rust/commit/6b52603a49187e8ec1712bab2a7c0b87108fa89c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b52603a49187e8ec1712bab2a7c0b87108fa89c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d2726726f8f3128e98191e4c6cb94bd76d0ddd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d2726726f8f3128e98191e4c6cb94bd76d0ddd4", "html_url": "https://github.com/rust-lang/rust/commit/1d2726726f8f3128e98191e4c6cb94bd76d0ddd4"}], "stats": {"total": 113, "additions": 107, "deletions": 6}, "files": [{"sha": "8c6ed7bd1407197d83a0ee3761104ef0aa3fff14", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6b52603a49187e8ec1712bab2a7c0b87108fa89c/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b52603a49187e8ec1712bab2a7c0b87108fa89c/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=6b52603a49187e8ec1712bab2a7c0b87108fa89c", "patch": "@@ -4,6 +4,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n+use rustc_middle::mir::interpret::sign_extend;\n use rustc_middle::ty::print::{Print, Printer};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt, TypeFoldable};\n@@ -527,17 +528,30 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         }\n         let start = self.out.len();\n \n-        match ct.ty.kind() {\n-            ty::Uint(_) => {}\n-            ty::Bool => {}\n+        let mut neg = false;\n+        let val = match ct.ty.kind() {\n+            ty::Uint(_) | ty::Bool | ty::Char => {\n+                ct.try_eval_bits(self.tcx, ty::ParamEnv::reveal_all(), ct.ty)\n+            }\n+            ty::Int(_) => {\n+                let param_env = ty::ParamEnv::reveal_all();\n+                ct.try_eval_bits(self.tcx, param_env, ct.ty).and_then(|b| {\n+                    let sz = self.tcx.layout_of(param_env.and(ct.ty)).ok()?.size;\n+                    let val = sign_extend(b, sz) as i128;\n+                    if val < 0 {\n+                        neg = true;\n+                    }\n+                    Some(val.wrapping_abs() as u128)\n+                })\n+            }\n             _ => {\n                 bug!(\"symbol_names: unsupported constant of type `{}` ({:?})\", ct.ty, ct);\n             }\n-        }\n+        };\n         self = ct.ty.print(self)?;\n \n-        if let Some(bits) = ct.try_eval_bits(self.tcx, ty::ParamEnv::reveal_all(), ct.ty) {\n-            let _ = write!(self.out, \"{:x}_\", bits);\n+        if let Some(bits) = val {\n+            let _ = write!(self.out, \"{}{:x}_\", if neg { \"n\" } else { \"\" }, bits);\n         } else {\n             // NOTE(eddyb) despite having the path, we need to\n             // encode a placeholder, as the path could refer"}, {"sha": "ad87000228d04ac0a98fbdd0f178a3a3c2ea50db", "filename": "src/test/ui/symbol-names/const-generics.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/6b52603a49187e8ec1712bab2a7c0b87108fa89c/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b52603a49187e8ec1712bab2a7c0b87108fa89c/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics.rs?ref=6b52603a49187e8ec1712bab2a7c0b87108fa89c", "patch": "@@ -0,0 +1,87 @@\n+// check-pass\n+// revisions: legacy v0\n+//[legacy]compile-flags: -Z symbol-mangling-version=legacy --crate-type=lib\n+    //[v0]compile-flags: -Z symbol-mangling-version=v0 --crate-type=lib\n+\n+    #![feature(min_const_generics)]\n+\n+    // `char`\n+    pub struct Char<const F: char>;\n+\n+    impl Char<'A'> {\n+        pub fn foo() {}\n+    }\n+\n+    impl<const F: char> Char<F> {\n+        pub fn bar() {}\n+    }\n+\n+    // `i8`\n+    pub struct I8<const F: i8>;\n+\n+    impl I8<{std::i8::MIN}> {\n+        pub fn foo() {}\n+    }\n+\n+    impl I8<{std::i8::MAX}> {\n+        pub fn foo() {}\n+    }\n+\n+    impl<const F: i8> I8<F> {\n+        pub fn bar() {}\n+    }\n+\n+    // `i16`\n+    pub struct I16<const F: i16>;\n+\n+    impl I16<{std::i16::MIN}> {\n+        pub fn foo() {}\n+    }\n+\n+    impl<const F: i16> I16<F> {\n+        pub fn bar() {}\n+    }\n+\n+    // `i32`\n+    pub struct I32<const F: i32>;\n+\n+    impl I32<{std::i32::MIN}> {\n+        pub fn foo() {}\n+    }\n+\n+    impl<const F: i32> I32<F> {\n+        pub fn bar() {}\n+    }\n+\n+    // `i64`\n+    pub struct I64<const F: i64>;\n+\n+    impl I64<{std::i64::MIN}> {\n+        pub fn foo() {}\n+    }\n+\n+    impl<const F: i64> I64<F> {\n+        pub fn bar() {}\n+    }\n+\n+    // `i128`\n+    pub struct I128<const F: i128>;\n+\n+    impl I128<{std::i128::MIN}> {\n+        pub fn foo() {}\n+    }\n+\n+    impl<const F: i128> I128<F> {\n+        pub fn bar() {}\n+    }\n+\n+    // `isize`\n+    pub struct ISize<const F: isize>;\n+\n+    impl ISize<3> {\n+        pub fn foo() {}\n+    }\n+\n+    impl<const F: isize> ISize<F> {\n+        pub fn bar() {}\n+    }"}]}