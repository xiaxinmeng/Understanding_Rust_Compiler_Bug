{"sha": "3da576804af9c1fb141c94d28efc63919200e046", "node_id": "C_kwDOAAsO6NoAKDNkYTU3NjgwNGFmOWMxZmIxNDFjOTRkMjhlZmM2MzkxOTIwMGUwNDY", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-05T19:26:41Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-06T12:10:35Z"}, "message": "Rename `incremental_verify_ich_cold` to `incremental_verify_ich_failed`", "tree": {"sha": "9b7fb3eb4408c2ce8386428f7174e6141278f79e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b7fb3eb4408c2ce8386428f7174e6141278f79e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3da576804af9c1fb141c94d28efc63919200e046", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgbSfWKRQb2tiqhuHtakDJeupmrF\nChDbM0msU+PXaBOk8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQFAbwxPb3BNXpD+bQtDKl80YiG8hircc1tubmTyYoIPvUywc/4rSyG8v1KLmCpgxQK\nib/UPrSJLZQpRMK7fHEgc=\n-----END SSH SIGNATURE-----", "payload": "tree 9b7fb3eb4408c2ce8386428f7174e6141278f79e\nparent df3187260fdcd71d46da7b02b1a1488ae939abbd\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1667676401 +0100\ncommitter Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1667736635 +0100\n\nRename `incremental_verify_ich_cold` to `incremental_verify_ich_failed`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3da576804af9c1fb141c94d28efc63919200e046", "html_url": "https://github.com/rust-lang/rust/commit/3da576804af9c1fb141c94d28efc63919200e046", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3da576804af9c1fb141c94d28efc63919200e046/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df3187260fdcd71d46da7b02b1a1488ae939abbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/df3187260fdcd71d46da7b02b1a1488ae939abbd", "html_url": "https://github.com/rust-lang/rust/commit/df3187260fdcd71d46da7b02b1a1488ae939abbd"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "f2abbdae5837f32164165459353b34619197c98d", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3da576804af9c1fb141c94d28efc63919200e046/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da576804af9c1fb141c94d28efc63919200e046/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=3da576804af9c1fb141c94d28efc63919200e046", "patch": "@@ -585,7 +585,11 @@ fn incremental_verify_ich<CTX, K, V: Debug>(\n     debug!(\"END verify_ich({:?})\", dep_node);\n \n     if Some(new_hash) != old_hash {\n-        incremental_verify_ich_cold(tcx.sess(), DebugArg::from(&dep_node), DebugArg::from(&result));\n+        incremental_verify_ich_failed(\n+            tcx.sess(),\n+            DebugArg::from(&dep_node),\n+            DebugArg::from(&result),\n+        );\n     }\n }\n \n@@ -631,13 +635,7 @@ impl std::fmt::Debug for DebugArg<'_> {\n // different implementations for LLVM to chew on (and filling up the final\n // binary, too).\n #[cold]\n-fn incremental_verify_ich_cold(sess: &Session, dep_node: DebugArg<'_>, result: DebugArg<'_>) {\n-    let run_cmd = if let Some(crate_name) = &sess.opts.crate_name {\n-        format!(\"`cargo clean -p {}` or `cargo clean`\", crate_name)\n-    } else {\n-        \"`cargo clean`\".to_string()\n-    };\n-\n+fn incremental_verify_ich_failed(sess: &Session, dep_node: DebugArg<'_>, result: DebugArg<'_>) {\n     // When we emit an error message and panic, we try to debug-print the `DepNode`\n     // and query result. Unfortunately, this can cause us to run additional queries,\n     // which may result in another fingerprint mismatch while we're in the middle\n@@ -653,6 +651,12 @@ fn incremental_verify_ich_cold(sess: &Session, dep_node: DebugArg<'_>, result: D\n     if old_in_panic {\n         sess.emit_err(crate::error::Reentrant);\n     } else {\n+        let run_cmd = if let Some(crate_name) = &sess.opts.crate_name {\n+            format!(\"`cargo clean -p {}` or `cargo clean`\", crate_name)\n+        } else {\n+            \"`cargo clean`\".to_string()\n+        };\n+\n         sess.emit_err(crate::error::IncrementCompilation {\n             run_cmd,\n             dep_node: format!(\"{:?}\", dep_node),"}]}