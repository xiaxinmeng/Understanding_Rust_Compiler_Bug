{"sha": "edc1324e7e665080e6695625ba6a5ede3e32f5a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYzEzMjRlN2U2NjUwODBlNjY5NTYyNWJhNmE1ZWRlM2UzMmY1YTg=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-04-22T15:49:21Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-04-22T15:51:34Z"}, "message": "Add some tests for nullable-pointer enums", "tree": {"sha": "b9d16935f5b0ea5e4485d2e736b55cbaeb1ff0e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9d16935f5b0ea5e4485d2e736b55cbaeb1ff0e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edc1324e7e665080e6695625ba6a5ede3e32f5a8", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edc1324e7e665080e6695625ba6a5ede3e32f5a8", "html_url": "https://github.com/rust-lang/rust/commit/edc1324e7e665080e6695625ba6a5ede3e32f5a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edc1324e7e665080e6695625ba6a5ede3e32f5a8/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22f751f0f398c508be6966b9d6d1a498cd05baac", "url": "https://api.github.com/repos/rust-lang/rust/commits/22f751f0f398c508be6966b9d6d1a498cd05baac", "html_url": "https://github.com/rust-lang/rust/commit/22f751f0f398c508be6966b9d6d1a498cd05baac"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "0c4d297403cfb8d3996e49b7e73347cdc2a199d3", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/edc1324e7e665080e6695625ba6a5ede3e32f5a8/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc1324e7e665080e6695625ba6a5ede3e32f5a8/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=edc1324e7e665080e6695625ba6a5ede3e32f5a8", "patch": "@@ -0,0 +1,87 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use core::{option, cast};\n+\n+// Iota-reduction is a rule in the Calculus of (Co-)Inductive Constructions,\n+// which \"says that a destructor applied to an object built from a constructor\n+// behaves as expected\".  -- http://coq.inria.fr/doc/Reference-Manual006.html\n+//\n+// It's a little more complicated here, because of pointers and regions and\n+// trying to get assert failure messages that at least identify which case\n+// failed.\n+\n+enum E<T> { Thing(int, T), Nothing((), ((), ()), [i8, ..0]) }\n+impl<T> E<T> {\n+    fn is_none(&self) -> bool { \n+        match *self {\n+            Thing(*) => false,\n+            Nothing(*) => true\n+        }\n+    }\n+    fn get_ref<'r>(&'r self) -> (int, &'r T) {\n+        match *self {\n+            Nothing(*) => fail!(fmt!(\"E::get_ref(Nothing::<%s>)\",  stringify!($T))),\n+            Thing(x, ref y) => (x, y)\n+        }\n+    }\n+}\n+\n+macro_rules! check_option {\n+    ($e:expr: $T:ty) => {{\n+        // FIXME #6000: remove the copy\n+        check_option!(copy $e: $T, |ptr| assert!(*ptr == $e));\n+    }};\n+    ($e:expr: $T:ty, |$v:ident| $chk:expr) => {{\n+        assert!(option::None::<$T>.is_none());\n+        let s_ = option::Some::<$T>($e);\n+        let $v = s_.get_ref();\n+        $chk\n+    }}\n+}\n+\n+macro_rules! check_fancy {\n+    ($e:expr: $T:ty) => {{\n+        // FIXME #6000: remove the copy\n+        check_fancy!(copy $e: $T, |ptr| assert!(*ptr == $e));\n+    }};\n+    ($e:expr: $T:ty, |$v:ident| $chk:expr) => {{\n+        assert!(Nothing::<$T>((), ((), ()), [23i8, ..0]).is_none());\n+        let t_ = Thing::<$T>(23, $e);\n+        match t_.get_ref() {\n+            (23, $v) => { $chk }\n+            _ => fail!(fmt!(\"Thing::<%s>(23, %s).get_ref() != (23, _)\",\n+                            stringify!($T), stringify!($e)))\n+        }\n+    }}\n+}\n+\n+macro_rules! check_type {\n+    ($($a:tt)*) => {{\n+        check_option!($($a)*);\n+        check_fancy!($($a)*);\n+    }}\n+}\n+\n+pub fn main() {\n+    check_type!(&17: &int);\n+    check_type!(~18: ~int);\n+    check_type!(@19: @int);\n+    check_type!(~\"foo\": ~str);\n+    check_type!(@\"bar\": @str);\n+    check_type!(~[]: ~[int]);\n+    check_type!(~[20, 22]: ~[int]);\n+    check_type!(@[]: @[int]);\n+    check_type!(@[24, 26]: @[int]);\n+    let mint: uint = unsafe { cast::transmute(main) };\n+    check_type!(main: extern fn(), |pthing| {\n+        assert!(mint == unsafe { cast::transmute(*pthing) })\n+    });\n+}"}, {"sha": "246fc4e304df383420b25317055a790629fff4e1", "filename": "src/test/run-pass/nullable-pointer-size.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/edc1324e7e665080e6695625ba6a5ede3e32f5a8/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc1324e7e665080e6695625ba6a5ede3e32f5a8/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs?ref=edc1324e7e665080e6695625ba6a5ede3e32f5a8", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum E<T> { Thing(int, T), Nothing((), ((), ()), [i8, ..0]) }\n+struct S<T>(int, T);\n+\n+// These are macros so we get useful assert messages.\n+\n+macro_rules! check_option {\n+    ($T:ty) => {\n+        assert!(sys::size_of::<Option<$T>>() == sys::size_of::<$T>());\n+    }\n+}\n+\n+macro_rules! check_fancy {\n+    ($T:ty) => {\n+        assert!(sys::size_of::<E<$T>>() == sys::size_of::<S<$T>>());\n+    }\n+}\n+\n+macro_rules! check_type {\n+    ($T:ty) => {{\n+        check_option!($T);\n+        check_fancy!($T);\n+    }}\n+}\n+\n+pub fn main() {\n+    check_type!(&'static int);\n+    check_type!(~int);\n+    check_type!(@int);\n+    check_type!(~str);\n+    check_type!(@str);\n+    check_type!(~[int]);\n+    check_type!(@[int]);\n+    check_type!(extern fn());\n+}"}]}