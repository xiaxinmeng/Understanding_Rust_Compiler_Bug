{"sha": "22d554657d08cff395911c5128be297e366899ec", "node_id": "C_kwDOAAsO6NoAKDIyZDU1NDY1N2QwOGNmZjM5NTkxMWM1MTI4YmUyOTdlMzY2ODk5ZWM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-16T17:42:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-16T17:42:00Z"}, "message": "Rollup merge of #94985 - dtolnay:constattr, r=pnkfelix\n\nParse inner attributes on inline const block\n\nAccording to https://github.com/rust-lang/rust/pull/84414#issuecomment-826150936, inner attributes are intended to be supported *\"in all containers for statements (or some subset of statements)\"*.\n\nThis PR adds inner attribute parsing and pretty-printing for inline const blocks (https://github.com/rust-lang/rust/issues/76001), which contain statements just like an unsafe block or a loop body.\n\n```rust\nlet _ = const {\n    #![allow(...)]\n\n    let x = ();\n    x\n};\n```", "tree": {"sha": "55a1bf31efb53cb0f7cd0a8fa4beb0fec8851ba9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55a1bf31efb53cb0f7cd0a8fa4beb0fec8851ba9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22d554657d08cff395911c5128be297e366899ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiWv/oCRBK7hj4Ov3rIwAA6t0IACFPgF61AGD6StuDXISNcG4B\nBBwWBZwirVR6NoEy3IUj4LQQH9KbmDMGzW65pC8JyFLsNu90eTrIOYAVyDDbrIwC\nfkwfn6kmcw6dyNCFdWmpZZcSrs87I81SYCRiiy0ASm37bqtWN79Dh2pQ9zOS/dTX\nF2hsRaznPojZemqEPImeYNuRqtVlXNqd3RJtYu/6oxBY0SK4PuiZE5ebyxUx5Pam\nhGd8f6mp8JHrrUcVSSDw9JZE2XQQtQF7UlH+hRavcbevrKlwNH7gBFQUhibKx719\nkI1zENy6RUJ1sQysFpIH4gH3+B7985IXMLSr5oH0Xo/V4KM/fL1HUbRPT/GryNM=\n=CNj0\n-----END PGP SIGNATURE-----\n", "payload": "tree 55a1bf31efb53cb0f7cd0a8fa4beb0fec8851ba9\nparent d9b3ff7d34335c5bc0b2afed640b65d64a85fe03\nparent f427698c03a74b961dbc5f28bc7a9801a77d0d44\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650130920 +0200\ncommitter GitHub <noreply@github.com> 1650130920 +0200\n\nRollup merge of #94985 - dtolnay:constattr, r=pnkfelix\n\nParse inner attributes on inline const block\n\nAccording to https://github.com/rust-lang/rust/pull/84414#issuecomment-826150936, inner attributes are intended to be supported *\"in all containers for statements (or some subset of statements)\"*.\n\nThis PR adds inner attribute parsing and pretty-printing for inline const blocks (https://github.com/rust-lang/rust/issues/76001), which contain statements just like an unsafe block or a loop body.\n\n```rust\nlet _ = const {\n    #![allow(...)]\n\n    let x = ();\n    x\n};\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22d554657d08cff395911c5128be297e366899ec", "html_url": "https://github.com/rust-lang/rust/commit/22d554657d08cff395911c5128be297e366899ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22d554657d08cff395911c5128be297e366899ec/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "html_url": "https://github.com/rust-lang/rust/commit/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03"}, {"sha": "f427698c03a74b961dbc5f28bc7a9801a77d0d44", "url": "https://api.github.com/repos/rust-lang/rust/commits/f427698c03a74b961dbc5f28bc7a9801a77d0d44", "html_url": "https://github.com/rust-lang/rust/commit/f427698c03a74b961dbc5f28bc7a9801a77d0d44"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "3c9bb81bedb1c64aec042148a23823b03ccd1ef0", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d554657d08cff395911c5128be297e366899ec/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d554657d08cff395911c5128be297e366899ec/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=22d554657d08cff395911c5128be297e366899ec", "patch": "@@ -959,7 +959,7 @@ impl<'a> State<'a> {\n                 self.word_space(\"=\");\n                 match term {\n                     Term::Ty(ty) => self.print_type(ty),\n-                    Term::Const(c) => self.print_expr_anon_const(c),\n+                    Term::Const(c) => self.print_expr_anon_const(c, &[]),\n                 }\n             }\n             ast::AssocConstraintKind::Bound { bounds } => self.print_type_bounds(\":\", &*bounds),"}, {"sha": "9de4cbbee13f068e483d0fa0ae26d055358f4e1a", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/22d554657d08cff395911c5128be297e366899ec/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d554657d08cff395911c5128be297e366899ec/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=22d554657d08cff395911c5128be297e366899ec", "patch": "@@ -88,10 +88,21 @@ impl<'a> State<'a> {\n         self.end();\n     }\n \n-    pub(super) fn print_expr_anon_const(&mut self, expr: &ast::AnonConst) {\n+    pub(super) fn print_expr_anon_const(\n+        &mut self,\n+        expr: &ast::AnonConst,\n+        attrs: &[ast::Attribute],\n+    ) {\n         self.ibox(INDENT_UNIT);\n         self.word(\"const\");\n-        self.print_expr(&expr.value);\n+        self.nbsp();\n+        if let ast::ExprKind::Block(block, None) = &expr.value.kind {\n+            self.cbox(0);\n+            self.ibox(0);\n+            self.print_block_with_attrs(block, attrs);\n+        } else {\n+            self.print_expr(&expr.value);\n+        }\n         self.end();\n     }\n \n@@ -275,7 +286,7 @@ impl<'a> State<'a> {\n                 self.print_expr_vec(exprs);\n             }\n             ast::ExprKind::ConstBlock(ref anon_const) => {\n-                self.print_expr_anon_const(anon_const);\n+                self.print_expr_anon_const(anon_const, attrs);\n             }\n             ast::ExprKind::Repeat(ref element, ref count) => {\n                 self.print_expr_repeat(element, count);"}, {"sha": "cb6be8f412cf54cf7cd9d2ddb4deecae119f9f14", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22d554657d08cff395911c5128be297e366899ec/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d554657d08cff395911c5128be297e366899ec/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=22d554657d08cff395911c5128be297e366899ec", "patch": "@@ -1125,13 +1125,13 @@ impl<'a> Parser<'a> {\n             self.sess.gated_spans.gate(sym::inline_const, span);\n         }\n         self.eat_keyword(kw::Const);\n-        let blk = self.parse_block()?;\n+        let (attrs, blk) = self.parse_inner_attrs_and_block()?;\n         let anon_const = AnonConst {\n             id: DUMMY_NODE_ID,\n             value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),\n         };\n         let blk_span = anon_const.value.span;\n-        Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))\n+        Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::from(attrs)))\n     }\n \n     /// Parses mutability (`mut` or nothing)."}, {"sha": "c01379065d1cd5ded2faa70b9e0daedce9ec065e", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/22d554657d08cff395911c5128be297e366899ec/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d554657d08cff395911c5128be297e366899ec/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=22d554657d08cff395911c5128be297e366899ec", "patch": "@@ -1,6 +1,8 @@\n // pp-exact\n \n #![feature(box_syntax)]\n+#![feature(inline_const)]\n+#![feature(inline_const_pat)]\n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n \n@@ -16,6 +18,7 @@ fn _1() {\n \n     #[rustc_dummy]\n     unsafe {\n+        #![rustc_dummy]\n         // code\n     }\n }\n@@ -206,6 +209,12 @@ fn _11() {\n             let _ = ();\n             ()\n         };\n+    let const {\n+                    #![rustc_dummy]\n+                } =\n+        #[rustc_dummy] const {\n+                #![rustc_dummy]\n+            };\n     let mut x = 0;\n     let _ = #[rustc_dummy] x = 15;\n     let _ = #[rustc_dummy] x += 15;"}]}