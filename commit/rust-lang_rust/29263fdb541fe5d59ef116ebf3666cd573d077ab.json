{"sha": "29263fdb541fe5d59ef116ebf3666cd573d077ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MjYzZmRiNTQxZmU1ZDU5ZWYxMTZlYmYzNjY2Y2Q1NzNkMDc3YWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-28T10:00:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T18:01:34Z"}, "message": "introduce idea of \"stealable\" MIR\n\nThis is a more principled version of the `RefCell` we were using\nbefore. We now allocate a `Steal<Mir<'tcx>>` for each intermediate MIR\npass; when the next pass steals the entry, any later attempts to use it\nwill panic (there is no way to *test* if MIR is stolen, you're just\nsupposed to *know*).", "tree": {"sha": "5c35cb4184f23070d267088ca46c6647a18a2e7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c35cb4184f23070d267088ca46c6647a18a2e7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29263fdb541fe5d59ef116ebf3666cd573d077ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29263fdb541fe5d59ef116ebf3666cd573d077ab", "html_url": "https://github.com/rust-lang/rust/commit/29263fdb541fe5d59ef116ebf3666cd573d077ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29263fdb541fe5d59ef116ebf3666cd573d077ab/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e89a321dff569fcc04b9249f7dac589c307e36ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/e89a321dff569fcc04b9249f7dac589c307e36ed", "html_url": "https://github.com/rust-lang/rust/commit/e89a321dff569fcc04b9249f7dac589c307e36ed"}], "stats": {"total": 159, "additions": 93, "deletions": 66}, "files": [{"sha": "80a4d9a9ff15b0008017811a0c9ff8e686fedf5b", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=29263fdb541fe5d59ef116ebf3666cd573d077ab", "patch": "@@ -13,7 +13,7 @@ use hir::def_id::DefId;\n use hir::map::DefPathData;\n use mir::{Mir, Promoted};\n use ty::TyCtxt;\n-use std::cell::{Ref, RefCell};\n+use std::cell::Ref;\n use std::rc::Rc;\n use syntax::ast::NodeId;\n \n@@ -98,7 +98,7 @@ pub trait MirCtxt<'a, 'tcx: 'a> {\n     fn pass_num(&self) -> MirPassIndex;\n     fn source(&self) -> MirSource;\n     fn read_previous_mir(&self) -> Ref<'tcx, Mir<'tcx>>;\n-    fn steal_previous_mir(&self) -> &'tcx RefCell<Mir<'tcx>>;\n+    fn steal_previous_mir(&self) -> Mir<'tcx>;\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n@@ -132,7 +132,7 @@ pub trait DefIdPass {\n         default_name::<Self>()\n     }\n \n-    fn run_pass<'a, 'tcx: 'a>(&self, mir_cx: &MirCtxt<'a, 'tcx>) -> &'tcx RefCell<Mir<'tcx>>;\n+    fn run_pass<'a, 'tcx: 'a>(&self, mir_cx: &MirCtxt<'a, 'tcx>) -> Mir<'tcx>;\n }\n \n /// A streamlined trait that you can implement to create a pass; the\n@@ -154,14 +154,14 @@ impl<T: MirPass> DefIdPass for T {\n         MirPass::name(self)\n     }\n \n-    fn run_pass<'a, 'tcx: 'a>(&self, mir_cx: &MirCtxt<'a, 'tcx>) -> &'tcx RefCell<Mir<'tcx>> {\n+    fn run_pass<'a, 'tcx: 'a>(&self, mir_cx: &MirCtxt<'a, 'tcx>) -> Mir<'tcx> {\n         let tcx = mir_cx.tcx();\n         let source = mir_cx.source();\n-        let mir = mir_cx.steal_previous_mir();\n-        MirPass::run_pass(self, tcx, source, &mut mir.borrow_mut());\n+        let mut mir = mir_cx.steal_previous_mir();\n+        MirPass::run_pass(self, tcx, source, &mut mir);\n \n         let item_id = source.item_id();\n-        for (promoted_index, promoted_mir) in mir.borrow_mut().promoted.iter_enumerated_mut() {\n+        for (promoted_index, promoted_mir) in mir.promoted.iter_enumerated_mut() {\n             let promoted_source = MirSource::Promoted(item_id, promoted_index);\n             MirPass::run_pass(self, tcx, promoted_source, promoted_mir);\n         }"}, {"sha": "0dd23eb7e700ca192106a3d8691dacfc2ff21fe8", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=29263fdb541fe5d59ef116ebf3666cd573d077ab", "patch": "@@ -40,6 +40,7 @@ use ty::TypeVariants::*;\n use ty::layout::{Layout, TargetDataLayout};\n use ty::inhabitedness::DefIdForest;\n use ty::maps;\n+use ty::steal::Steal;\n use util::nodemap::{NodeMap, NodeSet, DefIdMap, DefIdSet};\n use util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n@@ -70,7 +71,8 @@ pub struct GlobalArenas<'tcx> {\n     generics: TypedArena<ty::Generics>,\n     trait_def: TypedArena<ty::TraitDef>,\n     adt_def: TypedArena<ty::AdtDef>,\n-    mir: TypedArena<RefCell<Mir<'tcx>>>,\n+    steal_mir: TypedArena<Steal<Mir<'tcx>>>,\n+    mir: TypedArena<Mir<'tcx>>,\n     tables: TypedArena<ty::TypeckTables<'tcx>>,\n }\n \n@@ -81,6 +83,7 @@ impl<'tcx> GlobalArenas<'tcx> {\n             generics: TypedArena::new(),\n             trait_def: TypedArena::new(),\n             adt_def: TypedArena::new(),\n+            steal_mir: TypedArena::new(),\n             mir: TypedArena::new(),\n             tables: TypedArena::new(),\n         }\n@@ -622,8 +625,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.global_arenas.generics.alloc(generics)\n     }\n \n-    pub fn alloc_mir(self, mir: Mir<'gcx>) -> &'gcx RefCell<Mir<'gcx>> {\n-        self.global_arenas.mir.alloc(RefCell::new(mir))\n+    pub fn alloc_steal_mir(self, mir: Mir<'gcx>) -> &'gcx Steal<Mir<'gcx>> {\n+        self.global_arenas.steal_mir.alloc(Steal::new(mir))\n+    }\n+\n+    pub fn alloc_mir(self, mir: Mir<'gcx>) -> &'gcx Mir<'gcx> {\n+        self.global_arenas.mir.alloc(mir)\n     }\n \n     pub fn alloc_tables(self, tables: ty::TypeckTables<'gcx>) -> &'gcx ty::TypeckTables<'gcx> {"}, {"sha": "09bdca4915a18e8bf0a556689296cee724d3ba05", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=29263fdb541fe5d59ef116ebf3666cd573d077ab", "patch": "@@ -20,6 +20,7 @@ use mir::transform::{MirSuite, MirPassIndex};\n use session::CompileResult;\n use ty::{self, CrateInherentImpls, Ty, TyCtxt};\n use ty::item_path;\n+use ty::steal::Steal;\n use ty::subst::Substs;\n use util::nodemap::{DefIdSet, NodeSet};\n \n@@ -32,7 +33,7 @@ use std::rc::Rc;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax::symbol::Symbol;\n \n-trait Key {\n+trait Key: Clone {\n     fn map_crate(&self) -> CrateNum;\n     fn default_span(&self, tcx: TyCtxt) -> Span;\n }\n@@ -339,13 +340,13 @@ impl<'tcx> QueryDescription for queries::is_item_mir_available<'tcx> {\n \n impl<'tcx> QueryDescription for queries::mir_suite<'tcx> {\n     fn describe(_: TyCtxt, (suite, _): (MirSuite, DefId)) -> String {\n-        format!(\"MIR passes #{}.*\", suite.0)\n+        format!(\"MIR suite #{}.*\", suite.0)\n     }\n }\n \n impl<'tcx> QueryDescription for queries::mir_pass<'tcx> {\n-    fn describe(_: TyCtxt, (pass_set, pass_num, _): (MirSuite, MirPassIndex, DefId)) -> String {\n-        format!(\"MIR pass #{}.{}\", pass_set.0, pass_num.0)\n+    fn describe(_: TyCtxt, (suite, pass_num, _): (MirSuite, MirPassIndex, DefId)) -> String {\n+        format!(\"MIR pass #{}.{}\", suite.0, pass_num.0)\n     }\n }\n \n@@ -586,22 +587,22 @@ define_maps! { <'tcx>\n     /// Performs the initial MIR construction. You almost certainly do not\n     /// want to use this query, because its output is intended to be stolen\n     /// immediately by the MIR passes below. Consider `optimized_mir` instead.\n-    [] mir_build: Mir(DefId) -> &'tcx RefCell<mir::Mir<'tcx>>,\n+    [] mir_build: Mir(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\n \n     /// Fetch the MIR for a given def-id after the given set of passes has ben\n     /// applied to it. This is mostly an \"intermediate\" query. Normally, you would\n     /// prefer to use `optimized_mir(def_id)`, which will fetch the MIR after all\n     /// optimizations and so forth.\n-    [] mir_suite: mir_suite((MirSuite, DefId)) -> &'tcx RefCell<mir::Mir<'tcx>>,\n+    [] mir_suite: mir_suite((MirSuite, DefId)) -> &'tcx Steal<mir::Mir<'tcx>>,\n \n     /// Fetch the MIR for a given def-id after a given pass has been executed. This is\n     /// **only** intended to be used by the `mir_suite` provider -- if you are using it\n     /// manually, you're doing it wrong.\n-    [] mir_pass: mir_pass((MirSuite, MirPassIndex, DefId)) -> &'tcx RefCell<mir::Mir<'tcx>>,\n+    [] mir_pass: mir_pass((MirSuite, MirPassIndex, DefId)) -> &'tcx Steal<mir::Mir<'tcx>>,\n \n     /// MIR after our optimization passes have run. This is MIR that is ready\n     /// for trans. This is also the only query that can fetch non-local MIR, at present.\n-    [] optimized_mir: Mir(DefId) -> &'tcx RefCell<mir::Mir<'tcx>>,\n+    [] optimized_mir: Mir(DefId) -> &'tcx mir::Mir<'tcx>,\n \n     /// Records the type of each closure. The def ID is the ID of the\n     /// expression defining the closure.\n@@ -650,7 +651,7 @@ define_maps! { <'tcx>\n     /// fn item.\n     [] region_maps: RegionMaps(DefId) -> Rc<RegionMaps<'tcx>>,\n \n-    [] mir_shims: mir_shim_dep_node(ty::InstanceDef<'tcx>) -> &'tcx RefCell<mir::Mir<'tcx>>,\n+    [] mir_shims: mir_shim_dep_node(ty::InstanceDef<'tcx>) -> &'tcx mir::Mir<'tcx>,\n \n     [] def_symbol_name: SymbolName(DefId) -> ty::SymbolName,\n     [] symbol_name: symbol_name_dep_node(ty::Instance<'tcx>) -> ty::SymbolName,"}, {"sha": "537846bc0f477c2aed396d7c673c753052c10ac7", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=29263fdb541fe5d59ef116ebf3666cd573d077ab", "patch": "@@ -35,7 +35,7 @@ use util::common::ErrorReported;\n use util::nodemap::{NodeSet, DefIdMap, FxHashMap, FxHashSet};\n \n use serialize::{self, Encodable, Encoder};\n-use std::cell::{Cell, RefCell, Ref};\n+use std::cell::{Cell, RefCell};\n use std::collections::BTreeMap;\n use std::cmp;\n use std::fmt;\n@@ -96,6 +96,7 @@ pub mod _match;\n pub mod maps;\n pub mod outlives;\n pub mod relate;\n+pub mod steal;\n pub mod subst;\n pub mod trait_def;\n pub mod walk;\n@@ -2324,13 +2325,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Given the did of an item, returns its (optimized) MIR, borrowed immutably.\n-    pub fn item_mir(self, did: DefId) -> Ref<'gcx, Mir<'gcx>> {\n-        self.optimized_mir(did).borrow()\n+    pub fn item_mir(self, did: DefId) -> &'gcx Mir<'gcx> {\n+        self.optimized_mir(did)\n     }\n \n     /// Return the possibly-auto-generated MIR of a (DefId, Subst) pair.\n     pub fn instance_mir(self, instance: ty::InstanceDef<'gcx>)\n-                        -> Ref<'gcx, Mir<'gcx>>\n+                        -> &'gcx Mir<'gcx>\n     {\n         match instance {\n             ty::InstanceDef::Item(did) => {\n@@ -2341,14 +2342,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ty::InstanceDef::Virtual(..) |\n             ty::InstanceDef::ClosureOnceShim { .. } |\n             ty::InstanceDef::DropGlue(..) => {\n-                self.mir_shims(instance).borrow()\n+                self.mir_shims(instance)\n             }\n         }\n     }\n \n     /// Given the DefId of an item, returns its MIR, borrowed immutably.\n     /// Returns None if there is no MIR for the DefId\n-    pub fn maybe_item_mir(self, did: DefId) -> Option<Ref<'gcx, Mir<'gcx>>> {\n+    pub fn maybe_item_mir(self, did: DefId) -> Option<&'gcx Mir<'gcx>> {\n         if did.is_local() && !self.mir_keys(LOCAL_CRATE).contains(&did) {\n             return None;\n         }"}, {"sha": "0da937d036648b836e0b94c5c516e5a4069d1001", "filename": "src/librustc/ty/steal.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc%2Fty%2Fsteal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc%2Fty%2Fsteal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsteal.rs?ref=29263fdb541fe5d59ef116ebf3666cd573d077ab", "patch": "@@ -0,0 +1,27 @@\n+use std::cell::{Ref, RefCell};\n+use std::mem;\n+\n+pub struct Steal<T> {\n+    value: RefCell<Option<T>>\n+}\n+\n+impl<T> Steal<T> {\n+    pub fn new(value: T) -> Self {\n+        Steal {\n+            value: RefCell::new(Some(value))\n+        }\n+    }\n+\n+    pub fn borrow(&self) -> Ref<T> {\n+        Ref::map(self.value.borrow(), |opt| match *opt {\n+            None => panic!(\"attempted to read from stolen value\"),\n+            Some(ref v) => v\n+        })\n+    }\n+\n+    pub fn steal(&self) -> T {\n+        let value_ref = &mut *self.value.borrow_mut();\n+        let value = mem::replace(value_ref, None);\n+        value.expect(\"attempt to read from stolen value\")\n+    }\n+}"}, {"sha": "7bc27596e40e79acf6a32414f05b117e0acc9643", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=29263fdb541fe5d59ef116ebf3666cd573d077ab", "patch": "@@ -30,7 +30,6 @@ use rustc::util::nodemap::{NodeSet, DefIdMap};\n use rustc_back::PanicStrategy;\n \n use std::any::Any;\n-use std::mem;\n use std::rc::Rc;\n \n use syntax::ast;\n@@ -102,9 +101,6 @@ provide! { <'tcx> tcx, def_id, cdata\n \n         let mir = tcx.alloc_mir(mir);\n \n-        // Perma-borrow MIR from extern crates to prevent mutation.\n-        mem::forget(mir.borrow());\n-\n         mir\n     }\n     mir_const_qualif => { cdata.mir_const_qualif(def_id.index) }"}, {"sha": "e51a7a410e026ab46692016f74f2b0f2cb28b9a3", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=29263fdb541fe5d59ef116ebf3666cd573d077ab", "patch": "@@ -29,6 +29,7 @@ use util as mir_util;\n use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n+use rustc::ty::steal::Steal;\n use rustc::ty::subst::Substs;\n use rustc::hir;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n@@ -37,7 +38,6 @@ use syntax::abi::Abi;\n use syntax::ast;\n use syntax_pos::Span;\n \n-use std::cell::RefCell;\n use std::mem;\n use std::rc::Rc;\n \n@@ -98,7 +98,7 @@ fn mir_keys<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, krate: CrateNum)\n     Rc::new(set)\n }\n \n-fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx RefCell<Mir<'tcx>> {\n+fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Mir<'tcx>> {\n     let id = tcx.hir.as_local_node_id(def_id).unwrap();\n     let unsupported = || {\n         span_bug!(tcx.hir.span(id), \"can't build MIR for {:?}\", def_id);\n@@ -196,7 +196,7 @@ fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx RefC\n \n         mir_util::dump_mir(tcx, None, \"mir_map\", &0, src, &mir);\n \n-        tcx.alloc_mir(mir)\n+        tcx.alloc_steal_mir(mir)\n     })\n }\n \n@@ -233,7 +233,7 @@ impl<'a, 'gcx: 'tcx, 'tcx> MutVisitor<'tcx> for GlobalizeMir<'a, 'gcx> {\n fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                      ctor_id: ast::NodeId,\n                                      v: &'tcx hir::VariantData)\n-                                     -> &'tcx RefCell<Mir<'tcx>>\n+                                     -> &'tcx Steal<Mir<'tcx>>\n {\n     let span = tcx.hir.span(ctor_id);\n     if let hir::VariantData::Tuple(ref fields, ctor_id) = *v {\n@@ -255,7 +255,7 @@ fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             mir_util::dump_mir(tcx, None, \"mir_map\", &0, src, &mir);\n \n-            tcx.alloc_mir(mir)\n+            tcx.alloc_steal_mir(mir)\n         })\n     } else {\n         span_bug!(span, \"attempting to create MIR for non-tuple variant {:?}\", v);"}, {"sha": "a899c69ca150acad42fc4f524dda2667e2687281", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=29263fdb541fe5d59ef116ebf3666cd573d077ab", "patch": "@@ -24,10 +24,8 @@ use syntax::abi::Abi;\n use syntax::ast;\n use syntax_pos::Span;\n \n-use std::cell::RefCell;\n use std::fmt;\n use std::iter;\n-use std::mem;\n \n use transform::{add_call_guards, no_landing_pads, simplify};\n use util::elaborate_drops::{self, DropElaborator, DropStyle, DropFlagMode};\n@@ -39,7 +37,7 @@ pub fn provide(providers: &mut Providers) {\n \n fn make_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n                        instance: ty::InstanceDef<'tcx>)\n-                       -> &'tcx RefCell<Mir<'tcx>>\n+                       -> &'tcx Mir<'tcx>\n {\n     debug!(\"make_shim({:?})\", instance);\n     let did = instance.def_id();\n@@ -117,8 +115,6 @@ fn make_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"make_shim({:?}) = {:?}\", instance, result);\n \n     let result = tcx.alloc_mir(result);\n-    // Perma-borrow MIR from shims to prevent mutation.\n-    mem::forget(result.borrow());\n     result\n }\n "}, {"sha": "c00817f9179a6648695c9d2deca3f5d888a7cf79", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=29263fdb541fe5d59ef116ebf3666cd573d077ab", "patch": "@@ -11,7 +11,6 @@\n //! This pass just dumps MIR at a specified point.\n \n use std::borrow::Cow;\n-use std::cell::RefCell;\n use std::fmt;\n use std::fs::File;\n use std::io;\n@@ -29,7 +28,7 @@ impl DefIdPass for Marker {\n         Cow::Borrowed(self.0)\n     }\n \n-    fn run_pass<'a, 'tcx: 'a>(&self, mir_cx: &MirCtxt<'a, 'tcx>) -> &'tcx RefCell<Mir<'tcx>> {\n+    fn run_pass<'a, 'tcx: 'a>(&self, mir_cx: &MirCtxt<'a, 'tcx>) -> Mir<'tcx> {\n         mir_cx.steal_previous_mir()\n     }\n }\n@@ -53,9 +52,9 @@ impl PassHook for DumpMir {\n                              mir: Option<&Mir<'tcx>>)\n     {\n         let tcx = mir_cx.tcx();\n-        let pass_set = mir_cx.pass_set();\n+        let suite = mir_cx.suite();\n         let pass_num = mir_cx.pass_num();\n-        let pass = tcx.mir_passes.pass(pass_set, pass_num);\n+        let pass = tcx.mir_passes.pass(suite, pass_num);\n         let name = &pass.name();\n         let source = mir_cx.source();\n         if mir_util::dump_enabled(tcx, name, source) {\n@@ -68,7 +67,7 @@ impl PassHook for DumpMir {\n                 }\n             };\n             mir_util::dump_mir(tcx,\n-                               Some((pass_set, pass_num)),\n+                               Some((suite, pass_num)),\n                                name,\n                                &Disambiguator { is_after: mir.is_some() },\n                                source,"}, {"sha": "d30495efab571a4d9cb3cdabfe93fd1f6d06d294", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=29263fdb541fe5d59ef116ebf3666cd573d077ab", "patch": "@@ -11,10 +11,10 @@\n use rustc::hir::def_id::DefId;\n use rustc::mir::Mir;\n use rustc::mir::transform::{MirCtxt, MirPassIndex, MirSuite, MirSource, MIR_OPTIMIZED};\n+use rustc::ty::steal::Steal;\n use rustc::ty::TyCtxt;\n use rustc::ty::maps::Providers;\n-use std::cell::{Ref, RefCell};\n-use std::mem;\n+use std::cell::Ref;\n \n pub mod simplify_branches;\n pub mod simplify;\n@@ -40,19 +40,14 @@ pub fn provide(providers: &mut Providers) {\n     };\n }\n \n-fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx RefCell<Mir<'tcx>> {\n-    let mir = tcx.mir_suite((MIR_OPTIMIZED, def_id));\n-\n-    // \"lock\" the ref cell into read mode; after this point,\n-    // there ought to be no more changes to the MIR.\n-    mem::drop(mir.borrow());\n-\n-    mir\n+fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Mir<'tcx> {\n+    let mir = tcx.mir_suite((MIR_OPTIMIZED, def_id)).steal();\n+    tcx.alloc_mir(mir)\n }\n \n fn mir_suite<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                        (suite, def_id): (MirSuite, DefId))\n-                       -> &'tcx RefCell<Mir<'tcx>>\n+                       -> &'tcx Steal<Mir<'tcx>>\n {\n     let passes = &tcx.mir_passes;\n     let len = passes.len_passes(suite);\n@@ -62,7 +57,7 @@ fn mir_suite<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n fn mir_pass<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                       (suite, pass_num, def_id): (MirSuite, MirPassIndex, DefId))\n-                      -> &'tcx RefCell<Mir<'tcx>>\n+                      -> &'tcx Steal<Mir<'tcx>>\n {\n     let passes = &tcx.mir_passes;\n     let pass = passes.pass(suite, pass_num);\n@@ -75,10 +70,10 @@ fn mir_pass<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mir = pass.run_pass(&mir_ctxt);\n \n     for hook in passes.hooks() {\n-        hook.on_mir_pass(&mir_ctxt, Some(&mir.borrow()));\n+        hook.on_mir_pass(&mir_ctxt, Some(&mir));\n     }\n \n-    mir\n+    tcx.alloc_steal_mir(mir)\n }\n \n struct MirCtxtImpl<'a, 'tcx: 'a> {\n@@ -112,10 +107,16 @@ impl<'a, 'tcx> MirCtxt<'a, 'tcx> for MirCtxtImpl<'a, 'tcx> {\n     }\n \n     fn read_previous_mir(&self) -> Ref<'tcx, Mir<'tcx>> {\n-        self.steal_previous_mir().borrow()\n+        self.previous_mir().borrow()\n     }\n \n-    fn steal_previous_mir(&self) -> &'tcx RefCell<Mir<'tcx>> {\n+    fn steal_previous_mir(&self) -> Mir<'tcx> {\n+        self.previous_mir().steal()\n+    }\n+}\n+\n+impl<'a, 'tcx> MirCtxtImpl<'a, 'tcx> {\n+    fn previous_mir(&self) -> &'tcx Steal<Mir<'tcx>> {\n         let MirSuite(suite) = self.suite;\n         let MirPassIndex(pass_num) = self.pass_num;\n         if pass_num > 0 {"}, {"sha": "8fc264ac1d49b70a5f0e346536d69d7203d4ff3a", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=29263fdb541fe5d59ef116ebf3666cd573d077ab", "patch": "@@ -33,7 +33,6 @@ use syntax::abi::Abi;\n use syntax::feature_gate::UnstableFeatures;\n use syntax_pos::{Span, DUMMY_SP};\n \n-use std::cell::RefCell;\n use std::fmt;\n use std::usize;\n \n@@ -925,7 +924,7 @@ pub fn provide(providers: &mut Providers) {\n fn qualify_const_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 def_id: DefId)\n                                 -> u8 {\n-    let mir = &tcx.mir_pass_set((MIR_CONST, def_id)).borrow();\n+    let mir = &tcx.mir_suite((MIR_CONST, def_id)).borrow();\n     if mir.return_ty.references_error() {\n         return Qualif::NOT_CONST.bits();\n     }\n@@ -940,7 +939,7 @@ fn qualify_const_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n pub struct QualifyAndPromoteConstants;\n \n impl DefIdPass for QualifyAndPromoteConstants {\n-    fn run_pass<'a, 'tcx: 'a>(&self, mir_cx: &MirCtxt<'a, 'tcx>) -> &'tcx RefCell<Mir<'tcx>> {\n+    fn run_pass<'a, 'tcx: 'a>(&self, mir_cx: &MirCtxt<'a, 'tcx>) -> Mir<'tcx> {\n         let tcx = mir_cx.tcx();\n         match mir_cx.source() {\n             MirSource::Const(_) => {\n@@ -953,8 +952,8 @@ impl DefIdPass for QualifyAndPromoteConstants {\n             }\n \n             src => {\n-                let mir = mir_cx.steal_previous_mir();\n-                self.run_pass(tcx, src, &mut mir.borrow_mut());\n+                let mut mir = mir_cx.steal_previous_mir();\n+                self.run_pass(tcx, src, &mut mir);\n                 mir\n             }\n         }"}, {"sha": "4f94c4d122badfd2f82198018c947bb4fec15dfe", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29263fdb541fe5d59ef116ebf3666cd573d077ab/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=29263fdb541fe5d59ef116ebf3666cd573d077ab", "patch": "@@ -93,7 +93,7 @@ fn dump_matched_mir_node<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     } else {\n         match pass_num {\n             None => format!(\".-------\"),\n-            Some((pass_set, pass_num)) => format!(\".{:03}-{:03}\", pass_set.0, pass_num.0),\n+            Some((suite, pass_num)) => format!(\".{:03}-{:03}\", suite.0, pass_num.0),\n         }\n     };\n "}]}