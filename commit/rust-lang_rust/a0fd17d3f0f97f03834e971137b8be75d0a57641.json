{"sha": "a0fd17d3f0f97f03834e971137b8be75d0a57641", "node_id": "C_kwDOAAsO6NoAKGEwZmQxN2QzZjBmOTdmMDM4MzRlOTcxMTM3YjhiZTc1ZDBhNTc2NDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-23T21:40:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-23T21:40:50Z"}, "message": "Auto merge of #10779 - Centri3:ptr_cast_constness, r=llogiq\n\nAdd new lint `ptr_cast_constness`\n\nThis adds a new lint which functions as the opposite side of the coin to `ptr_as_ptr`. Rather than linting only as casts that don't change constness, this lints only constness; suggesting to use `pointer::cast_const` or `pointer::cast_mut` instead.\n\nchangelog: new lint [`ptr_cast_constness`]", "tree": {"sha": "eada6a95bd3f4558bd125b9e8eca8b9acb4d2cab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eada6a95bd3f4558bd125b9e8eca8b9acb4d2cab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0fd17d3f0f97f03834e971137b8be75d0a57641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0fd17d3f0f97f03834e971137b8be75d0a57641", "html_url": "https://github.com/rust-lang/rust/commit/a0fd17d3f0f97f03834e971137b8be75d0a57641", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0fd17d3f0f97f03834e971137b8be75d0a57641/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97598e9e8ffb2e5e211ae5ce9cf1fc96f643710a", "url": "https://api.github.com/repos/rust-lang/rust/commits/97598e9e8ffb2e5e211ae5ce9cf1fc96f643710a", "html_url": "https://github.com/rust-lang/rust/commit/97598e9e8ffb2e5e211ae5ce9cf1fc96f643710a"}, {"sha": "97467e4aa39d20273014195bb7362d6bace047ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/97467e4aa39d20273014195bb7362d6bace047ea", "html_url": "https://github.com/rust-lang/rust/commit/97467e4aa39d20273014195bb7362d6bace047ea"}], "stats": {"total": 225, "additions": 223, "deletions": 2}, "files": [{"sha": "a2648d9faa6d76ce8d3f192532894f2bb520e70f", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0fd17d3f0f97f03834e971137b8be75d0a57641/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a0fd17d3f0f97f03834e971137b8be75d0a57641/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a0fd17d3f0f97f03834e971137b8be75d0a57641", "patch": "@@ -4950,6 +4950,7 @@ Released 2018-09-13\n [`println_empty_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#println_empty_string\n [`ptr_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg\n [`ptr_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr\n+[`ptr_cast_constness`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_cast_constness\n [`ptr_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_eq\n [`ptr_offset_with_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast\n [`pub_enum_variant_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#pub_enum_variant_names"}, {"sha": "d62639caca1b636d584a91ed04ab44299e0e08cf", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a0fd17d3f0f97f03834e971137b8be75d0a57641/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0fd17d3f0f97f03834e971137b8be75d0a57641/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=a0fd17d3f0f97f03834e971137b8be75d0a57641", "patch": "@@ -18,6 +18,7 @@ mod fn_to_numeric_cast;\n mod fn_to_numeric_cast_any;\n mod fn_to_numeric_cast_with_truncation;\n mod ptr_as_ptr;\n+mod ptr_cast_constness;\n mod unnecessary_cast;\n mod utils;\n \n@@ -399,7 +400,7 @@ declare_clippy_lint! {\n     /// namely `*const T` to `*const U` and `*mut T` to `*mut U`.\n     ///\n     /// ### Why is this bad?\n-    /// Though `as` casts between raw pointers is not terrible, `pointer::cast` is safer because\n+    /// Though `as` casts between raw pointers are not terrible, `pointer::cast` is safer because\n     /// it cannot accidentally change the pointer's mutability nor cast the pointer to other types like `usize`.\n     ///\n     /// ### Example\n@@ -422,6 +423,34 @@ declare_clippy_lint! {\n     \"casting using `as` from and to raw pointers that doesn't change its mutability, where `pointer::cast` could take the place of `as`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `as` casts between raw pointers which change its constness, namely `*const T` to\n+    /// `*mut T` and `*mut T` to `*const T`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Though `as` casts between raw pointers are not terrible, `pointer::cast_mut` and\n+    /// `pointer::cast_const` are safer because they cannot accidentally cast the pointer to another\n+    /// type.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let ptr: *const u32 = &42_u32;\n+    /// let mut_ptr = ptr as *mut u32;\n+    /// let ptr = mut_ptr as *const u32;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let ptr: *const u32 = &42_u32;\n+    /// let mut_ptr = ptr.cast_mut();\n+    /// let ptr = mut_ptr.cast_const();\n+    /// ```\n+    #[clippy::version = \"1.71.0\"]\n+    pub PTR_CAST_CONSTNESS,\n+    pedantic,\n+    \"casting using `as` from and to raw pointers to change constness when specialized methods apply\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for casts from an enum type to an integral type which will definitely truncate the\n@@ -689,6 +718,7 @@ impl_lint_pass!(Casts => [\n     FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n     CHAR_LIT_AS_U8,\n     PTR_AS_PTR,\n+    PTR_CAST_CONSTNESS,\n     CAST_ENUM_TRUNCATION,\n     CAST_ENUM_CONSTRUCTOR,\n     CAST_ABS_TO_UNSIGNED,\n@@ -722,6 +752,7 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                 return;\n             }\n             cast_slice_from_raw_parts::check(cx, expr, cast_expr, cast_to, &self.msrv);\n+            ptr_cast_constness::check(cx, expr, cast_expr, cast_from, cast_to, &self.msrv);\n             as_ptr_cast_mut::check(cx, expr, cast_expr, cast_to);\n             fn_to_numeric_cast_any::check(cx, expr, cast_expr, cast_from, cast_to);\n             fn_to_numeric_cast::check(cx, expr, cast_expr, cast_from, cast_to);"}, {"sha": "ab015f8822e1b13b79b0b0f7cd7de9b7b4a42f25", "filename": "clippy_lints/src/casts/ptr_cast_constness.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a0fd17d3f0f97f03834e971137b8be75d0a57641/clippy_lints%2Fsrc%2Fcasts%2Fptr_cast_constness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0fd17d3f0f97f03834e971137b8be75d0a57641/clippy_lints%2Fsrc%2Fcasts%2Fptr_cast_constness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fptr_cast_constness.rs?ref=a0fd17d3f0f97f03834e971137b8be75d0a57641", "patch": "@@ -0,0 +1,44 @@\n+use clippy_utils::msrvs::POINTER_CAST_CONSTNESS;\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::{diagnostics::span_lint_and_sugg, msrvs::Msrv};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, Mutability};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, Ty, TypeAndMut};\n+\n+use super::PTR_CAST_CONSTNESS;\n+\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n+    cast_expr: &Expr<'_>,\n+    cast_from: Ty<'_>,\n+    cast_to: Ty<'_>,\n+    msrv: &Msrv,\n+) {\n+    if_chain! {\n+        if msrv.meets(POINTER_CAST_CONSTNESS);\n+        if let ty::RawPtr(TypeAndMut { mutbl: from_mutbl, .. }) = cast_from.kind();\n+        if let ty::RawPtr(TypeAndMut { mutbl: to_mutbl, .. }) = cast_to.kind();\n+        if matches!((from_mutbl, to_mutbl),\n+            (Mutability::Not, Mutability::Mut) | (Mutability::Mut, Mutability::Not));\n+        then {\n+            let sugg = Sugg::hir(cx, cast_expr, \"_\");\n+            let constness = match *to_mutbl {\n+                Mutability::Not => \"const\",\n+                Mutability::Mut => \"mut\",\n+            };\n+\n+            span_lint_and_sugg(\n+                cx,\n+                PTR_CAST_CONSTNESS,\n+                expr.span,\n+                \"`as` casting between raw pointers while changing its constness\",\n+                &format!(\"try `pointer::cast_{constness}`, a safer alternative\"),\n+                format!(\"{}.cast_{constness}()\", sugg.maybe_par()),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}"}, {"sha": "4ade25e1257e086901b9af9e786203211ab033c9", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0fd17d3f0f97f03834e971137b8be75d0a57641/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0fd17d3f0f97f03834e971137b8be75d0a57641/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=a0fd17d3f0f97f03834e971137b8be75d0a57641", "patch": "@@ -90,6 +90,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::casts::FN_TO_NUMERIC_CAST_ANY_INFO,\n     crate::casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION_INFO,\n     crate::casts::PTR_AS_PTR_INFO,\n+    crate::casts::PTR_CAST_CONSTNESS_INFO,\n     crate::casts::UNNECESSARY_CAST_INFO,\n     crate::checked_conversions::CHECKED_CONVERSIONS_INFO,\n     crate::cognitive_complexity::COGNITIVE_COMPLEXITY_INFO,"}, {"sha": "6f102308f0bf6d38196fbf9f2a2e9ee99f2d8fe0", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0fd17d3f0f97f03834e971137b8be75d0a57641/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0fd17d3f0f97f03834e971137b8be75d0a57641/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=a0fd17d3f0f97f03834e971137b8be75d0a57641", "patch": "@@ -20,7 +20,7 @@ macro_rules! msrv_aliases {\n // names may refer to stabilized feature flags or library items\n msrv_aliases! {\n     1,68,0 { PATH_MAIN_SEPARATOR_STR }\n-    1,65,0 { LET_ELSE }\n+    1,65,0 { LET_ELSE, POINTER_CAST_CONSTNESS }\n     1,62,0 { BOOL_THEN_SOME, DEFAULT_ENUM_ATTRIBUTE }\n     1,58,0 { FORMAT_ARGS_CAPTURE, PATTERN_TRAIT_CHAR_ARRAY }\n     1,55,0 { SEEK_REWIND }"}, {"sha": "24de573d0838e56f600eb18b685e188796b27a32", "filename": "tests/ui/ptr_cast_constness.fixed", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a0fd17d3f0f97f03834e971137b8be75d0a57641/tests%2Fui%2Fptr_cast_constness.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a0fd17d3f0f97f03834e971137b8be75d0a57641/tests%2Fui%2Fptr_cast_constness.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_cast_constness.fixed?ref=a0fd17d3f0f97f03834e971137b8be75d0a57641", "patch": "@@ -0,0 +1,55 @@\n+//@run-rustfix\n+//@aux-build:proc_macros.rs\n+\n+#![warn(clippy::ptr_cast_constness)]\n+\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n+\n+#[inline_macros]\n+fn main() {\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    let _ = ptr as *const i32;\n+    let _ = mut_ptr as *mut i32;\n+\n+    // Make sure the lint can handle the difference in their operator precedences.\n+    unsafe {\n+        let ptr_ptr: *const *const u32 = &ptr;\n+        let _ = (*ptr_ptr).cast_mut();\n+    }\n+\n+    let _ = ptr.cast_mut();\n+    let _ = mut_ptr.cast_const();\n+\n+    // Lint this, since pointer::cast_mut and pointer::cast_const have ?Sized\n+    let ptr_of_array: *const [u32; 4] = &[1, 2, 3, 4];\n+    let _ = ptr_of_array as *const [u32];\n+    let _ = ptr_of_array as *const dyn std::fmt::Debug;\n+\n+    // Make sure the lint is triggered inside a macro\n+    let _ = inline!($ptr as *const i32);\n+\n+    // Do not lint inside macros from external crates\n+    let _ = external!($ptr as *const i32);\n+}\n+\n+#[clippy::msrv = \"1.64\"]\n+fn _msrv_1_64() {\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    // `pointer::cast_const` and `pointer::cast_mut` were stabilized in 1.65. Do not lint this\n+    let _ = ptr as *mut i32;\n+    let _ = mut_ptr as *const i32;\n+}\n+\n+#[clippy::msrv = \"1.65\"]\n+fn _msrv_1_65() {\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    let _ = ptr.cast_mut();\n+    let _ = mut_ptr.cast_const();\n+}"}, {"sha": "63d973a9fca87dacca5da4410b2aed9d89364624", "filename": "tests/ui/ptr_cast_constness.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a0fd17d3f0f97f03834e971137b8be75d0a57641/tests%2Fui%2Fptr_cast_constness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0fd17d3f0f97f03834e971137b8be75d0a57641/tests%2Fui%2Fptr_cast_constness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_cast_constness.rs?ref=a0fd17d3f0f97f03834e971137b8be75d0a57641", "patch": "@@ -0,0 +1,55 @@\n+//@run-rustfix\n+//@aux-build:proc_macros.rs\n+\n+#![warn(clippy::ptr_cast_constness)]\n+\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n+\n+#[inline_macros]\n+fn main() {\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    let _ = ptr as *const i32;\n+    let _ = mut_ptr as *mut i32;\n+\n+    // Make sure the lint can handle the difference in their operator precedences.\n+    unsafe {\n+        let ptr_ptr: *const *const u32 = &ptr;\n+        let _ = *ptr_ptr as *mut i32;\n+    }\n+\n+    let _ = ptr as *mut i32;\n+    let _ = mut_ptr as *const i32;\n+\n+    // Lint this, since pointer::cast_mut and pointer::cast_const have ?Sized\n+    let ptr_of_array: *const [u32; 4] = &[1, 2, 3, 4];\n+    let _ = ptr_of_array as *const [u32];\n+    let _ = ptr_of_array as *const dyn std::fmt::Debug;\n+\n+    // Make sure the lint is triggered inside a macro\n+    let _ = inline!($ptr as *const i32);\n+\n+    // Do not lint inside macros from external crates\n+    let _ = external!($ptr as *const i32);\n+}\n+\n+#[clippy::msrv = \"1.64\"]\n+fn _msrv_1_64() {\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    // `pointer::cast_const` and `pointer::cast_mut` were stabilized in 1.65. Do not lint this\n+    let _ = ptr as *mut i32;\n+    let _ = mut_ptr as *const i32;\n+}\n+\n+#[clippy::msrv = \"1.65\"]\n+fn _msrv_1_65() {\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    let _ = ptr as *mut i32;\n+    let _ = mut_ptr as *const i32;\n+}"}, {"sha": "43816c87c19071cbd7bb8a0abfcb32c2f6ad721b", "filename": "tests/ui/ptr_cast_constness.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a0fd17d3f0f97f03834e971137b8be75d0a57641/tests%2Fui%2Fptr_cast_constness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0fd17d3f0f97f03834e971137b8be75d0a57641/tests%2Fui%2Fptr_cast_constness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_cast_constness.stderr?ref=a0fd17d3f0f97f03834e971137b8be75d0a57641", "patch": "@@ -0,0 +1,34 @@\n+error: `as` casting between raw pointers while changing its constness\n+  --> $DIR/ptr_cast_constness.rs:20:17\n+   |\n+LL |         let _ = *ptr_ptr as *mut i32;\n+   |                 ^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast_mut`, a safer alternative: `(*ptr_ptr).cast_mut()`\n+   |\n+   = note: `-D clippy::ptr-cast-constness` implied by `-D warnings`\n+\n+error: `as` casting between raw pointers while changing its constness\n+  --> $DIR/ptr_cast_constness.rs:23:13\n+   |\n+LL |     let _ = ptr as *mut i32;\n+   |             ^^^^^^^^^^^^^^^ help: try `pointer::cast_mut`, a safer alternative: `ptr.cast_mut()`\n+\n+error: `as` casting between raw pointers while changing its constness\n+  --> $DIR/ptr_cast_constness.rs:24:13\n+   |\n+LL |     let _ = mut_ptr as *const i32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast_const`, a safer alternative: `mut_ptr.cast_const()`\n+\n+error: `as` casting between raw pointers while changing its constness\n+  --> $DIR/ptr_cast_constness.rs:53:13\n+   |\n+LL |     let _ = ptr as *mut i32;\n+   |             ^^^^^^^^^^^^^^^ help: try `pointer::cast_mut`, a safer alternative: `ptr.cast_mut()`\n+\n+error: `as` casting between raw pointers while changing its constness\n+  --> $DIR/ptr_cast_constness.rs:54:13\n+   |\n+LL |     let _ = mut_ptr as *const i32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast_const`, a safer alternative: `mut_ptr.cast_const()`\n+\n+error: aborting due to 5 previous errors\n+"}]}