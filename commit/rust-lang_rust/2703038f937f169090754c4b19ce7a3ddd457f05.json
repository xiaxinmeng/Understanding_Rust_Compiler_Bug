{"sha": "2703038f937f169090754c4b19ce7a3ddd457f05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MDMwMzhmOTM3ZjE2OTA5MDc1NGM0YjE5Y2U3YTNkZGQ0NTdmMDU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-12-15T14:53:45Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-12-15T19:16:39Z"}, "message": "Add seanmonstar's StrToString lint", "tree": {"sha": "1a341164c72b21c5a9ed8642d63d09d17c674722", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a341164c72b21c5a9ed8642d63d09d17c674722"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2703038f937f169090754c4b19ce7a3ddd457f05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2703038f937f169090754c4b19ce7a3ddd457f05", "html_url": "https://github.com/rust-lang/rust/commit/2703038f937f169090754c4b19ce7a3ddd457f05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2703038f937f169090754c4b19ce7a3ddd457f05/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98d88e7eb415000160b9c3f9c96b1b1907f638cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/98d88e7eb415000160b9c3f9c96b1b1907f638cb", "html_url": "https://github.com/rust-lang/rust/commit/98d88e7eb415000160b9c3f9c96b1b1907f638cb"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "91caaeba41a9e622620a737ac67648e67f8827b7", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2703038f937f169090754c4b19ce7a3ddd457f05/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2703038f937f169090754c4b19ce7a3ddd457f05/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2703038f937f169090754c4b19ce7a3ddd457f05", "patch": "@@ -9,6 +9,7 @@ Lints included in this crate:\n  - `clippy_single_match`: Warns when a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used, and recommends `if let` instead.\n  - `clippy_box_vec`: Warns on usage of `Box<Vec<T>>`\n  - `clippy_dlist`: Warns on usage of `DList`\n+ - `clippy_str_to_string`: Warns on usage of `str::to_string()`\n \n More to come, please [file an issue](https://github.com/Manishearth/rust-clippy/issues) if you have ideas!\n "}, {"sha": "386e8180c22d232866efb7dd7614c17e82c81c51", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2703038f937f169090754c4b19ce7a3ddd457f05/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2703038f937f169090754c4b19ce7a3ddd457f05/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2703038f937f169090754c4b19ce7a3ddd457f05", "patch": "@@ -20,4 +20,5 @@ pub mod misc;\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box types::TypePass as LintPassObject);\n     reg.register_lint_pass(box misc::MiscPass as LintPassObject);\n+    reg.register_lint_pass(box misc::StrToStringPass as LintPassObject);\n }"}, {"sha": "2a77ecc3467bd57ff94875baf3b3dfc7c1415434", "filename": "src/misc.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2703038f937f169090754c4b19ce7a3ddd457f05/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2703038f937f169090754c4b19ce7a3ddd457f05/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=2703038f937f169090754c4b19ce7a3ddd457f05", "patch": "@@ -2,6 +2,7 @@ use syntax::ptr::P;\n use syntax::ast;\n use syntax::ast::*;\n use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n+use rustc::middle::ty::{mod, expr_ty, ty_str, ty_ptr, ty_rptr};\n use syntax::codemap::Span;\n \n use types::span_note_and_lint;\n@@ -44,3 +45,39 @@ impl LintPass for MiscPass {\n         }\n     }\n }\n+\n+\n+declare_lint!(CLIPPY_STR_TO_STRING, Warn, \"Warn when a String could use into_string() instead of to_string()\")\n+\n+pub struct StrToStringPass;\n+\n+impl LintPass for StrToStringPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(CLIPPY_STR_TO_STRING)\n+    }\n+\n+    fn check_expr(&mut self, cx: &Context, expr: &ast::Expr) {\n+        match expr.node {\n+            ast::ExprMethodCall(ref method, _, ref args)\n+                if method.node.as_str() == \"to_string\"\n+                && is_str(cx, &*args[0]) => {\n+                cx.span_lint(CLIPPY_STR_TO_STRING, expr.span, \"str.into_string() is faster\");\n+            },\n+            _ => ()\n+        }\n+\n+        fn is_str(cx: &Context, expr: &ast::Expr) -> bool {\n+            fn walk_ty<'t>(ty: ty::Ty<'t>) -> ty::Ty<'t> {\n+                //println!(\"{}: -> {}\", depth, ty);\n+                match ty.sty {\n+                    ty_ptr(ref tm) | ty_rptr(_, ref tm) => walk_ty(tm.ty),\n+                    _ => ty\n+                }\n+            }\n+            match walk_ty(expr_ty(cx.tcx, expr)).sty {\n+                ty_str => true,\n+                _ => false\n+            }\n+        }\n+    }\n+}"}]}