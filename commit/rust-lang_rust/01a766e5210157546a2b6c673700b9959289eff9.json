{"sha": "01a766e5210157546a2b6c673700b9959289eff9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYTc2NmU1MjEwMTU3NTQ2YTJiNmM2NzM3MDBiOTk1OTI4OWVmZjk=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-08-07T14:08:40Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-08-11T20:49:01Z"}, "message": "Introduce `as_mut_slice` method on `std::vec::IntoIter` struct.", "tree": {"sha": "80e9a6c7fa413fa80a9e762279192bc0541020d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80e9a6c7fa413fa80a9e762279192bc0541020d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01a766e5210157546a2b6c673700b9959289eff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01a766e5210157546a2b6c673700b9959289eff9", "html_url": "https://github.com/rust-lang/rust/commit/01a766e5210157546a2b6c673700b9959289eff9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01a766e5210157546a2b6c673700b9959289eff9/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d099e30e48a20eea36a76ab968b8bd9001e0e1fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d099e30e48a20eea36a76ab968b8bd9001e0e1fa", "html_url": "https://github.com/rust-lang/rust/commit/d099e30e48a20eea36a76ab968b8bd9001e0e1fa"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "a6f817a89624cfeb0c9e9cff55b3ed3c0f9227c9", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/01a766e5210157546a2b6c673700b9959289eff9/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a766e5210157546a2b6c673700b9959289eff9/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=01a766e5210157546a2b6c673700b9959289eff9", "patch": "@@ -1446,13 +1446,12 @@ impl<T> IntoIterator for Vec<T> {\n     #[inline]\n     fn into_iter(mut self) -> IntoIter<T> {\n         unsafe {\n-            let ptr = self.as_mut_ptr();\n-            assume(!ptr.is_null());\n-            let begin = ptr as *const T;\n+            let begin = self.as_mut_ptr();\n+            assume(!begin.is_null());\n             let end = if mem::size_of::<T>() == 0 {\n-                arith_offset(ptr as *const i8, self.len() as isize) as *const T\n+                arith_offset(begin as *const i8, self.len() as isize) as *const T\n             } else {\n-                ptr.offset(self.len() as isize) as *const T\n+                begin.offset(self.len() as isize) as *const T\n             };\n             let buf = ptr::read(&self.buf);\n             mem::forget(self);\n@@ -1710,7 +1709,7 @@ impl<'a, T> FromIterator<T> for Cow<'a, [T]> where T: Clone {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {\n     _buf: RawVec<T>,\n-    ptr: *const T,\n+    ptr: *mut T,\n     end: *const T,\n }\n \n@@ -1733,6 +1732,27 @@ impl<T> IntoIter<T> {\n             slice::from_raw_parts(self.ptr, self.len())\n         }\n     }\n+\n+    /// Returns the remaining items of this iterator as a mutable slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// # #![feature(vec_into_iter_as_slice)]\n+    /// let vec = vec!['a', 'b', 'c'];\n+    /// let mut into_iter = vec.into_iter();\n+    /// assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\n+    /// into_iter.as_mut_slice()[2] = 'z';\n+    /// assert_eq!(into_iter.next().unwrap(), 'a');\n+    /// assert_eq!(into_iter.next().unwrap(), 'b');\n+    /// assert_eq!(into_iter.next().unwrap(), 'z');\n+    /// ```\n+    #[unstable(feature = \"vec_into_iter_as_slice\", issue = \"35601\")]\n+    pub fn as_mut_slice(&self) -> &mut [T] {\n+        unsafe {\n+            slice::from_raw_parts_mut(self.ptr, self.len())\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1747,14 +1767,14 @@ impl<T> Iterator for IntoIter<T> {\n     #[inline]\n     fn next(&mut self) -> Option<T> {\n         unsafe {\n-            if self.ptr == self.end {\n+            if self.ptr as *const _ == self.end {\n                 None\n             } else {\n                 if mem::size_of::<T>() == 0 {\n                     // purposefully don't use 'ptr.offset' because for\n                     // vectors with 0-size elements this would return the\n                     // same pointer.\n-                    self.ptr = arith_offset(self.ptr as *const i8, 1) as *const T;\n+                    self.ptr = arith_offset(self.ptr as *const i8, 1) as *mut T;\n \n                     // Use a non-null pointer value\n                     Some(ptr::read(EMPTY as *mut T))\n@@ -1797,7 +1817,7 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n             } else {\n                 if mem::size_of::<T>() == 0 {\n                     // See above for why 'ptr.offset' isn't used\n-                    self.end = arith_offset(self.end as *const i8, -1) as *const T;\n+                    self.end = arith_offset(self.end as *const i8, -1) as *mut T;\n \n                     // Use a non-null pointer value\n                     Some(ptr::read(EMPTY as *mut T))"}, {"sha": "9556174bd2294dadef86b45edaa6d220d87f2be9", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01a766e5210157546a2b6c673700b9959289eff9/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a766e5210157546a2b6c673700b9959289eff9/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=01a766e5210157546a2b6c673700b9959289eff9", "patch": "@@ -490,6 +490,17 @@ fn test_into_iter_as_slice() {\n     assert_eq!(into_iter.as_slice(), &[]);\n }\n \n+#[test]\n+fn test_into_iter_as_mut_slice() {\n+    let vec = vec!['a', 'b', 'c'];\n+    let mut into_iter = vec.into_iter();\n+    assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\n+    into_iter.as_mut_slice()[0] = 'x';\n+    into_iter.as_mut_slice()[1] = 'y';\n+    assert_eq!(into_iter.next().unwrap(), 'x');\n+    assert_eq!(into_iter.as_slice(), &['y', 'c']);\n+}\n+\n #[test]\n fn test_into_iter_count() {\n     assert_eq!(vec![1, 2, 3].into_iter().count(), 3);"}]}