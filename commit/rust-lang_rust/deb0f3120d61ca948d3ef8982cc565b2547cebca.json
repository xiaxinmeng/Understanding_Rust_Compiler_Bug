{"sha": "deb0f3120d61ca948d3ef8982cc565b2547cebca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYjBmMzEyMGQ2MWNhOTQ4ZDNlZjg5ODJjYzU2NWIyNTQ3Y2ViY2E=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-03-24T23:59:47Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-03-24T23:59:47Z"}, "message": "Merge pull request #797 from cramertj/master\n\nAdded crosspointer transmute error and tests", "tree": {"sha": "cdddbb4924ac03e2e38b076ec8ebadc8410f6fff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdddbb4924ac03e2e38b076ec8ebadc8410f6fff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deb0f3120d61ca948d3ef8982cc565b2547cebca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deb0f3120d61ca948d3ef8982cc565b2547cebca", "html_url": "https://github.com/rust-lang/rust/commit/deb0f3120d61ca948d3ef8982cc565b2547cebca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deb0f3120d61ca948d3ef8982cc565b2547cebca/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd22a57d0ebbc06dfa9356d80dd70add6439308f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd22a57d0ebbc06dfa9356d80dd70add6439308f", "html_url": "https://github.com/rust-lang/rust/commit/cd22a57d0ebbc06dfa9356d80dd70add6439308f"}, {"sha": "bafffbd624c25bdec62df6655ee6b1786da0e11d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bafffbd624c25bdec62df6655ee6b1786da0e11d", "html_url": "https://github.com/rust-lang/rust/commit/bafffbd624c25bdec62df6655ee6b1786da0e11d"}], "stats": {"total": 96, "additions": 92, "deletions": 4}, "files": [{"sha": "6199ccd8e8fab99c8bfbd18d38a6497c833c192c", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/deb0f3120d61ca948d3ef8982cc565b2547cebca/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/deb0f3120d61ca948d3ef8982cc565b2547cebca/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=deb0f3120d61ca948d3ef8982cc565b2547cebca", "patch": "@@ -14,7 +14,7 @@ Table of contents:\n * [License](#license)\n \n ##Lints\n-There are 134 lints included in this crate:\n+There are 135 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -39,6 +39,7 @@ name\n [cmp_nan](https://github.com/Manishearth/rust-clippy/wiki#cmp_nan)                                                   | deny    | comparisons to NAN (which will always return false, which is probably not intended)\n [cmp_owned](https://github.com/Manishearth/rust-clippy/wiki#cmp_owned)                                               | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n [collapsible_if](https://github.com/Manishearth/rust-clippy/wiki#collapsible_if)                                     | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }` and an `else { if .. } expression can be collapsed to `else if`\n+[crosspointer_transmute](https://github.com/Manishearth/rust-clippy/wiki#crosspointer_transmute)                     | warn    | transmutes that have to or from types that are a pointer to the other\n [cyclomatic_complexity](https://github.com/Manishearth/rust-clippy/wiki#cyclomatic_complexity)                       | warn    | finds functions that should be split up into multiple functions\n [deprecated_semver](https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver)                               | warn    | `Warn` on `#[deprecated(since = \"x\")]` where x is not semver\n [derive_hash_xor_eq](https://github.com/Manishearth/rust-clippy/wiki#derive_hash_xor_eq)                             | warn    | deriving `Hash` but implementing `PartialEq` explicitly"}, {"sha": "8a4a84f5ddee84caa79ade439579f6e0a3dda1e9", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deb0f3120d61ca948d3ef8982cc565b2547cebca/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb0f3120d61ca948d3ef8982cc565b2547cebca/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=deb0f3120d61ca948d3ef8982cc565b2547cebca", "patch": "@@ -195,6 +195,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box no_effect::NoEffectPass);\n     reg.register_late_lint_pass(box map_clone::MapClonePass);\n     reg.register_late_lint_pass(box temporary_assignment::TemporaryAssignmentPass);\n+    reg.register_late_lint_pass(box transmute::CrosspointerTransmute);\n     reg.register_late_lint_pass(box transmute::UselessTransmute);\n     reg.register_late_lint_pass(box cyclomatic_complexity::CyclomaticComplexity::new(conf.cyclomatic_complexity_threshold));\n     reg.register_late_lint_pass(box escape::EscapePass);\n@@ -350,6 +351,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         swap::ALMOST_SWAPPED,\n         swap::MANUAL_SWAP,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,\n+        transmute::CROSSPOINTER_TRANSMUTE,\n         transmute::USELESS_TRANSMUTE,\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::BOX_VEC,"}, {"sha": "488d214b21f0f13e47b16537da7301b5bc61da29", "filename": "src/transmute.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/deb0f3120d61ca948d3ef8982cc565b2547cebca/src%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb0f3120d61ca948d3ef8982cc565b2547cebca/src%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftransmute.rs?ref=deb0f3120d61ca948d3ef8982cc565b2547cebca", "patch": "@@ -1,6 +1,9 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n+use rustc::middle::ty::TyS;\n+use rustc::middle::ty::TypeVariants::TyRawPtr;\n use utils;\n+use utils::TRANSMUTE_PATH;\n \n /// **What it does:** This lint checks for transmutes to the original type of the object.\n ///\n@@ -15,6 +18,19 @@ declare_lint! {\n     \"transmutes that have the same to and from types\"\n }\n \n+/// **What it does:*** This lint checks for transmutes between a type `T` and `*T`.\n+///\n+/// **Why is this bad?** It's easy to mistakenly transmute between a type and a pointer to that type.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `core::intrinsics::transmute(t)` where the result type is the same as `*t` or `&t`'s.\n+declare_lint! {\n+    pub CROSSPOINTER_TRANSMUTE,\n+    Warn,\n+    \"transmutes that have to or from types that are a pointer to the other\"\n+}\n+\n pub struct UselessTransmute;\n \n impl LintPass for UselessTransmute {\n@@ -29,7 +45,7 @@ impl LateLintPass for UselessTransmute {\n             if let ExprPath(None, _) = path_expr.node {\n                 let def_id = cx.tcx.def_map.borrow()[&path_expr.id].def_id();\n \n-                if utils::match_def_path(cx, def_id, &[\"core\", \"intrinsics\", \"transmute\"]) {\n+                if utils::match_def_path(cx, def_id, &TRANSMUTE_PATH) {\n                     let from_ty = cx.tcx.expr_ty(&args[0]);\n                     let to_ty = cx.tcx.expr_ty(e);\n \n@@ -43,3 +59,44 @@ impl LateLintPass for UselessTransmute {\n         }\n     }\n }\n+\n+pub struct CrosspointerTransmute;\n+\n+impl LintPass for CrosspointerTransmute {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(CROSSPOINTER_TRANSMUTE)\n+    }\n+}\n+\n+fn is_ptr_to(from: &TyS, to: &TyS) -> bool {\n+    if let TyRawPtr(from_ptr) = from.sty {\n+        from_ptr.ty == to\n+    } else {\n+        false\n+    }\n+}\n+\n+impl LateLintPass for CrosspointerTransmute {\n+    fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n+        if let ExprCall(ref path_expr, ref args) = e.node {\n+            if let ExprPath(None, _) = path_expr.node {\n+                let def_id = cx.tcx.def_map.borrow()[&path_expr.id].def_id();\n+\n+                if utils::match_def_path(cx, def_id, &TRANSMUTE_PATH) {\n+                    let from_ty = cx.tcx.expr_ty(&args[0]);\n+                    let to_ty = cx.tcx.expr_ty(e);\n+\n+                    if is_ptr_to(to_ty, from_ty) {\n+                        cx.span_lint(CROSSPOINTER_TRANSMUTE,\n+                                     e.span,\n+                                     &format!(\"transmute from a type (`{}`) to a pointer to that type (`{}`)\", from_ty, to_ty));\n+                    } else if is_ptr_to(from_ty, to_ty) {\n+                        cx.span_lint(CROSSPOINTER_TRANSMUTE,\n+                                     e.span,\n+                                     &format!(\"transmute from a type (`{}`) to the type that it points to (`{}`)\", from_ty, to_ty));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "e7b2a9d5210f01d1727bd138f608425a5718a3be", "filename": "src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/deb0f3120d61ca948d3ef8982cc565b2547cebca/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb0f3120d61ca948d3ef8982cc565b2547cebca/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=deb0f3120d61ca948d3ef8982cc565b2547cebca", "patch": "@@ -51,6 +51,7 @@ pub const RANGE_TO_PATH: [&'static str; 3] = [\"std\", \"ops\", \"RangeTo\"];\n pub const REGEX_NEW_PATH: [&'static str; 3] = [\"regex\", \"Regex\", \"new\"];\n pub const RESULT_PATH: [&'static str; 3] = [\"core\", \"result\", \"Result\"];\n pub const STRING_PATH: [&'static str; 3] = [\"collections\", \"string\", \"String\"];\n+pub const TRANSMUTE_PATH: [&'static str; 3] = [\"core\", \"intrinsics\", \"transmute\"];\n pub const VEC_FROM_ELEM_PATH: [&'static str; 3] = [\"std\", \"vec\", \"from_elem\"];\n pub const VEC_PATH: [&'static str; 3] = [\"collections\", \"vec\", \"Vec\"];\n "}, {"sha": "b875500808666a14dfb36865dfa8a769df096595", "filename": "tests/compile-fail/transmute.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/deb0f3120d61ca948d3ef8982cc565b2547cebca/tests%2Fcompile-fail%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb0f3120d61ca948d3ef8982cc565b2547cebca/tests%2Fcompile-fail%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute.rs?ref=deb0f3120d61ca948d3ef8982cc565b2547cebca", "patch": "@@ -1,6 +1,5 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n-#![deny(useless_transmute)]\n \n extern crate core;\n \n@@ -12,14 +11,16 @@ fn my_vec() -> MyVec<i32> {\n }\n \n #[allow(needless_lifetimes)]\n+#[deny(useless_transmute)]\n unsafe fn _generic<'a, T, U: 'a>(t: &'a T) {\n     let _: &'a T = core::intrinsics::transmute(t);\n     //~^ ERROR transmute from a type (`&'a T`) to itself\n \n     let _: &'a U = core::intrinsics::transmute(t);\n }\n \n-fn main() {\n+#[deny(useless_transmute)]\n+fn useless() {\n     unsafe {\n         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n         //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to itself\n@@ -43,3 +44,29 @@ fn main() {\n         let _: Vec<u32> = my_transmute(my_vec());\n     }\n }\n+\n+#[deny(crosspointer_transmute)]\n+fn crosspointer() {\n+    let mut vec: Vec<i32> = vec![];\n+    let vec_const_ptr: *const Vec<i32> = &vec as *const Vec<i32>;\n+    let vec_mut_ptr: *mut Vec<i32> = &mut vec as *mut Vec<i32>;\n+\n+    unsafe {\n+        let _: Vec<i32> = core::intrinsics::transmute(vec_const_ptr);\n+        //~^ ERROR transmute from a type (`*const collections::vec::Vec<i32>`) to the type that it points to (`collections::vec::Vec<i32>`)\n+\n+        let _: Vec<i32> = core::intrinsics::transmute(vec_mut_ptr);\n+        //~^ ERROR transmute from a type (`*mut collections::vec::Vec<i32>`) to the type that it points to (`collections::vec::Vec<i32>`)\n+\n+        let _: *const Vec<i32> = core::intrinsics::transmute(my_vec());\n+        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to a pointer to that type (`*const collections::vec::Vec<i32>`)\n+\n+        let _: *mut Vec<i32> = core::intrinsics::transmute(my_vec());\n+        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to a pointer to that type (`*mut collections::vec::Vec<i32>`)\n+    }\n+}\n+\n+fn main() {\n+    useless();\n+    crosspointer();\n+}"}]}