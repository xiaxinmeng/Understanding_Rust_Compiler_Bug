{"sha": "a695b62118ffd1ed1df5e4898cb34d7d58b91bc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2OTViNjIxMThmZmQxZWQxZGY1ZTQ4OThjYjM0ZDdkNThiOTFiYzE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-02-01T00:03:55Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:49Z"}, "message": "librustc: Remove uses of `interner_get` in librustc", "tree": {"sha": "b62778512cbb2f8b040f83a3d5aaa5c57dc07884", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b62778512cbb2f8b040f83a3d5aaa5c57dc07884"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1", "html_url": "https://github.com/rust-lang/rust/commit/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d0a3dad68fe03b45ab779e0565e33689edc1c0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0a3dad68fe03b45ab779e0565e33689edc1c0b", "html_url": "https://github.com/rust-lang/rust/commit/0d0a3dad68fe03b45ab779e0565e33689edc1c0b"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "68e205ebb6ec61c03b1cf0be68e0c685c2880beb", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=a695b62118ffd1ed1df5e4898cb34d7d58b91bc1", "patch": "@@ -796,8 +796,9 @@ impl BorrowckCtxt {\n                 self.append_loan_path_to_str_from_interior(lp_base, out);\n                 match fname {\n                     mc::NamedField(ref fname) => {\n+                        let string = token::get_ident(*fname);\n                         out.push_char('.');\n-                        out.push_str(token::interner_get(*fname));\n+                        out.push_str(string.get());\n                     }\n                     mc::PositionalField(idx) => {\n                         out.push_char('#'); // invent a notation here"}, {"sha": "d98cf9795b22ce29a78d4ae1c2e5d342127f304a", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=a695b62118ffd1ed1df5e4898cb34d7d58b91bc1", "patch": "@@ -1233,7 +1233,10 @@ pub fn ptr_sigil(ptr: PointerKind) -> ~str {\n impl Repr for InteriorKind {\n     fn repr(&self, _tcx: ty::ctxt) -> ~str {\n         match *self {\n-            InteriorField(NamedField(fld)) => token::interner_get(fld).to_owned(),\n+            InteriorField(NamedField(fld)) => {\n+                let string = token::get_ident(fld);\n+                string.get().to_owned()\n+            }\n             InteriorField(PositionalField(i)) => format!(\"\\\\#{:?}\", i),\n             InteriorElement(_) => ~\"[]\",\n         }"}, {"sha": "066be142f2499dd9d3b8f8036678b50aa39800eb", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a695b62118ffd1ed1df5e4898cb34d7d58b91bc1", "patch": "@@ -3344,9 +3344,10 @@ pub fn field_idx_strict(tcx: ty::ctxt, name: ast::Name, fields: &[field])\n                      -> uint {\n     let mut i = 0u;\n     for f in fields.iter() { if f.ident.name == name { return i; } i += 1u; }\n+    let string = token::get_ident(name);\n     tcx.sess.bug(format!(\n         \"No field named `{}` found in the list of fields `{:?}`\",\n-        token::interner_get(name),\n+        string.get(),\n         fields.map(|f| tcx.sess.str_of(f.ident))));\n }\n "}, {"sha": "37862943dd7d5edaac01bbe9e1b1e8ae0663b598", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=a695b62118ffd1ed1df5e4898cb34d7d58b91bc1", "patch": "@@ -339,9 +339,11 @@ pub fn check_struct_pat_fields(pcx: &pat_ctxt,\n             if found_fields.contains(&i) {\n                 continue;\n             }\n+\n+            let string = token::get_ident(field.name);\n             tcx.sess.span_err(span,\n                               format!(\"pattern does not mention field `{}`\",\n-                                   token::interner_get(field.name)));\n+                                      string.get()));\n         }\n     }\n }"}, {"sha": "09d04753def2249d93eaf6886baff272f76ae78d", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=a695b62118ffd1ed1df5e4898cb34d7d58b91bc1", "patch": "@@ -555,8 +555,10 @@ impl<'a> LookupContext<'a> {\n                 return; // already visited\n             }\n         }\n+\n+        let method_name = token::get_ident(self.m_name);\n         debug!(\"push_candidates_from_impl: {} {} {}\",\n-               token::interner_get(self.m_name),\n+               method_name.get(),\n                impl_info.ident.repr(self.tcx()),\n                impl_info.methods.map(|m| m.ident).repr(self.tcx()));\n "}, {"sha": "121b0486fb1d9bee9ce87f988ea1158dc53f25cc", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=a695b62118ffd1ed1df5e4898cb34d7d58b91bc1", "patch": "@@ -2335,9 +2335,11 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n                 fcx.type_error_message(\n                     expr.span,\n                     |actual| {\n+                        let string = token::get_ident(field);\n                         format!(\"attempted to take value of method `{}` on type `{}` \\\n-                              (try writing an anonymous function)\",\n-                             token::interner_get(field), actual)\n+                                 (try writing an anonymous function)\",\n+                                string.get(),\n+                                actual)\n                     },\n                     expr_t, None);\n             }\n@@ -2346,9 +2348,11 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n                 fcx.type_error_message(\n                     expr.span,\n                     |actual| {\n+                        let string = token::get_ident(field);\n                         format!(\"attempted access of field `{}` on type `{}`, \\\n-                              but no field with that name was found\",\n-                             token::interner_get(field), actual)\n+                                 but no field with that name was found\",\n+                                string.get(),\n+                                actual)\n                     },\n                     expr_t, None);\n             }\n@@ -2428,8 +2432,8 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n                     let name = class_field.name;\n                     let (_, seen) = *class_field_map.get(&name);\n                     if !seen {\n-                        missing_fields.push(\n-                            ~\"`\" + token::interner_get(name) + \"`\");\n+                        let string = token::get_ident(name);\n+                        missing_fields.push(~\"`\" + string.get() + \"`\");\n                     }\n                 }\n "}]}