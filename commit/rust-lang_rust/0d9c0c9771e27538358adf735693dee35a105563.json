{"sha": "0d9c0c9771e27538358adf735693dee35a105563", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkOWMwYzk3NzFlMjc1MzgzNThhZGY3MzU2OTNkZWUzNWExMDU1NjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-10T11:16:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-10T11:16:37Z"}, "message": "auto merge of #10822 : ezyang/rust/master, r=huonw\n\nSigned-off-by: Edward Z. Yang <ezyang@cs.stanford.edu>", "tree": {"sha": "35d9d92700664eb8655a87667814d1ef20c5a05b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35d9d92700664eb8655a87667814d1ef20c5a05b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d9c0c9771e27538358adf735693dee35a105563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d9c0c9771e27538358adf735693dee35a105563", "html_url": "https://github.com/rust-lang/rust/commit/0d9c0c9771e27538358adf735693dee35a105563", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d9c0c9771e27538358adf735693dee35a105563/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c399f613dc6878dee3c251452f9c0c532480fc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c399f613dc6878dee3c251452f9c0c532480fc1", "html_url": "https://github.com/rust-lang/rust/commit/3c399f613dc6878dee3c251452f9c0c532480fc1"}, {"sha": "b3e54d59911a82330adb63afdea58873e426e67e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3e54d59911a82330adb63afdea58873e426e67e", "html_url": "https://github.com/rust-lang/rust/commit/b3e54d59911a82330adb63afdea58873e426e67e"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "0746728a0f5b35c7ede07374f776290d0d9ae86f", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0d9c0c9771e27538358adf735693dee35a105563/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d9c0c9771e27538358adf735693dee35a105563/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=0d9c0c9771e27538358adf735693dee35a105563", "patch": "@@ -152,7 +152,7 @@ for the rust task is plenty for the C function to have.\n \n A planned future improvement (net yet implemented at the time of this writing)\n is to have a guard page at the end of every rust stack. No rust function will\n-hit this guard page (due to rust's usage of LLVM's __morestack). The intention\n+hit this guard page (due to Rust's usage of LLVM's `__morestack`). The intention\n for this unmapped page is to prevent infinite recursion in C from overflowing\n onto other rust stacks. If the guard page is hit, then the process will be\n terminated with a message saying that the guard page was hit.\n@@ -166,30 +166,39 @@ the stack of the task which is spawned.\n \n # Destructors\n \n-Foreign libraries often hand off ownership of resources to the calling code,\n-which should be wrapped in a destructor to provide safety and guarantee their\n-release.\n+Foreign libraries often hand off ownership of resources to the calling code.\n+When this occurs, we must use Rust's destructors to provide safety and guarantee\n+the release of these resources (especially in the case of failure).\n \n-A type with the same functionality as owned boxes can be implemented by\n-wrapping `malloc` and `free`:\n+As an example, we give a reimplementation of owned boxes by wrapping `malloc`\n+and `free`:\n \n ~~~~\n use std::cast;\n use std::libc::{c_void, size_t, malloc, free};\n use std::ptr;\n use std::unstable::intrinsics;\n \n-// a wrapper around the handle returned by the foreign code\n+// Define a wrapper around the handle returned by the foreign code.\n+// Unique<T> has the same semantics as ~T\n pub struct Unique<T> {\n+    // It contains a single raw, mutable pointer to the object in question.\n     priv ptr: *mut T\n }\n \n+// Implement methods for creating and using the values in the box.\n+// NB: For simplicity and correctness, we require that T has kind Send\n+// (owned boxes relax this restriction, and can contain managed (GC) boxes).\n+// This is because, as implemented, the garbage collector would not know\n+// about any shared boxes stored in the malloc'd region of memory.\n impl<T: Send> Unique<T> {\n     pub fn new(value: T) -> Unique<T> {\n         unsafe {\n             let ptr = malloc(std::mem::size_of::<T>() as size_t) as *mut T;\n             assert!(!ptr::is_null(ptr));\n             // `*ptr` is uninitialized, and `*ptr = value` would attempt to destroy it\n+            // move_val_init moves a value into this memory without\n+            // attempting to drop the original value.\n             intrinsics::move_val_init(&mut *ptr, value);\n             Unique{ptr: ptr}\n         }\n@@ -206,12 +215,20 @@ impl<T: Send> Unique<T> {\n     }\n }\n \n+// The key ingredient for safety, we associate a destructor with\n+// Unique<T>, making the struct manage the raw pointer: when the\n+// struct goes out of scope, it will automatically free the raw pointer.\n+// NB: This is an unsafe destructor, because rustc will not normally\n+// allow destructors to be associated with parametrized types, due to\n+// bad interaction with managed boxes. (With the Send restriction,\n+// we don't have this problem.)\n #[unsafe_destructor]\n impl<T: Send> Drop for Unique<T> {\n     fn drop(&mut self) {\n         unsafe {\n-            let x = intrinsics::init(); // dummy value to swap in\n-            // moving the object out is needed to call the destructor\n+            let x = intrinsics::uninit(); // dummy value to swap in\n+            // We need to move the object out of the box, so that\n+            // the destructor is called (at the end of this scope.)\n             ptr::replace_ptr(self.ptr, x);\n             free(self.ptr as *c_void)\n         }"}]}