{"sha": "7770ea706b2ba10ebf9112b38af9aaad5cc6f24c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NzBlYTcwNmIyYmExMGViZjkxMTJiMzhhZjlhYWFkNWNjNmYyNGM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-03-16T00:54:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-03-23T21:40:25Z"}, "message": "rustdoc: Add #[doc(test(no_inject_crate))] attribute\n\nSo that collections doctests don't automatically fail themselves\nby injecting `extern crate collections` when they are mostly\nusing the std facade.", "tree": {"sha": "1d073b563d6f152cd7ec69cd9625f8de026b51d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d073b563d6f152cd7ec69cd9625f8de026b51d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7770ea706b2ba10ebf9112b38af9aaad5cc6f24c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7770ea706b2ba10ebf9112b38af9aaad5cc6f24c", "html_url": "https://github.com/rust-lang/rust/commit/7770ea706b2ba10ebf9112b38af9aaad5cc6f24c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7770ea706b2ba10ebf9112b38af9aaad5cc6f24c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d365f6a01c4ebd7847ef7ec64afdcc54129a055", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d365f6a01c4ebd7847ef7ec64afdcc54129a055", "html_url": "https://github.com/rust-lang/rust/commit/3d365f6a01c4ebd7847ef7ec64afdcc54129a055"}], "stats": {"total": 60, "additions": 49, "deletions": 11}, "files": [{"sha": "cdd8457687ac60d1b6cf9866303cb34083453d44", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7770ea706b2ba10ebf9112b38af9aaad5cc6f24c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7770ea706b2ba10ebf9112b38af9aaad5cc6f24c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=7770ea706b2ba10ebf9112b38af9aaad5cc6f24c", "patch": "@@ -230,7 +230,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n                         stripped_filtered_line(l).unwrap_or(l)\n                     }).collect::<Vec<&str>>().connect(\"\\n\");\n                     let krate = krate.as_ref().map(|s| &**s);\n-                    let test = test::maketest(&test, krate, false, false);\n+                    let test = test::maketest(&test, krate, false, false, true);\n                     s.push_str(&format!(\"<span class='rusttest'>{}</span>\", Escape(&test)));\n                 });\n                 s.push_str(&highlight::highlight(&text,"}, {"sha": "f3d7ae19f4d3c1f978000636c5bf765381698e6e", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7770ea706b2ba10ebf9112b38af9aaad5cc6f24c/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7770ea706b2ba10ebf9112b38af9aaad5cc6f24c/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=7770ea706b2ba10ebf9112b38af9aaad5cc6f24c", "patch": "@@ -143,7 +143,7 @@ pub fn test(input: &str, libs: SearchPaths, externs: core::Externs,\n             mut test_args: Vec<String>) -> int {\n     let input_str = load_or_return!(input, 1, 2);\n \n-    let mut collector = Collector::new(input.to_string(), libs, externs, true);\n+    let mut collector = Collector::new(input.to_string(), libs, externs, true, false);\n     find_testable_code(&input_str, &mut collector);\n     test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&test_args, collector.tests);"}, {"sha": "1b596e65a784fa6451821f9ae6e048654dae7564", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7770ea706b2ba10ebf9112b38af9aaad5cc6f24c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7770ea706b2ba10ebf9112b38af9aaad5cc6f24c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=7770ea706b2ba10ebf9112b38af9aaad5cc6f24c", "patch": "@@ -76,6 +76,8 @@ pub fn run(input: &str,\n                                                      \"rustdoc-test\", None)\n         .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n \n+    let inject_crate = should_inject_crate(&krate);\n+\n     let ctx = core::DocContext {\n         krate: &krate,\n         maybe_typed: core::NotTyped(sess),\n@@ -100,7 +102,8 @@ pub fn run(input: &str,\n     let mut collector = Collector::new(krate.name.to_string(),\n                                        libs,\n                                        externs,\n-                                       false);\n+                                       false,\n+                                       inject_crate);\n     collector.fold_crate(krate);\n \n     test_args.insert(0, \"rustdoctest\".to_string());\n@@ -110,13 +113,42 @@ pub fn run(input: &str,\n     0\n }\n \n+// Look for #![doc(test(no_crate_inject))], used by crates in the std facade\n+fn should_inject_crate(krate: &::syntax::ast::Crate) -> bool {\n+    use syntax::attr::AttrMetaMethods;\n+\n+    let mut inject_crate = true;\n+\n+    for attr in &krate.attrs {\n+        if attr.check_name(\"doc\") {\n+            for list in attr.meta_item_list().into_iter() {\n+                for attr in list {\n+                    if attr.check_name(\"test\") {\n+                        for list in attr.meta_item_list().into_iter() {\n+                            for attr in list {\n+                                if attr.check_name(\"no_crate_inject\") {\n+                                    inject_crate = false;\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    return inject_crate;\n+}\n+\n #[allow(deprecated)]\n fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n            externs: core::Externs,\n-           should_panic: bool, no_run: bool, as_test_harness: bool) {\n+           should_panic: bool, no_run: bool, as_test_harness: bool,\n+           inject_crate: bool) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n-    let test = maketest(test, Some(cratename), true, as_test_harness);\n+    let test = maketest(test, Some(cratename), true, as_test_harness,\n+                        inject_crate);\n     let input = config::Input::Str(test.to_string());\n \n     let sessopts = config::Options {\n@@ -218,7 +250,8 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n     }\n }\n \n-pub fn maketest(s: &str, cratename: Option<&str>, lints: bool, dont_insert_main: bool) -> String {\n+pub fn maketest(s: &str, cratename: Option<&str>, lints: bool,\n+                dont_insert_main: bool, inject_crate: bool) -> String {\n     let (crate_attrs, everything_else) = partition_source(s);\n \n     let mut prog = String::new();\n@@ -235,7 +268,7 @@ pub fn maketest(s: &str, cratename: Option<&str>, lints: bool, dont_insert_main:\n \n     // Don't inject `extern crate std` because it's already injected by the\n     // compiler.\n-    if !s.contains(\"extern crate\") && cratename != Some(\"std\") {\n+    if !s.contains(\"extern crate\") && cratename != Some(\"std\") && inject_crate {\n         match cratename {\n             Some(cratename) => {\n                 if s.contains(cratename) {\n@@ -267,7 +300,7 @@ fn partition_source(s: &str) -> (String, String) {\n     let mut after = String::new();\n \n     for line in s.lines() {\n-        let trimline = StrExt::trim(line);\n+        let trimline = line.trim();\n         let header = trimline.is_whitespace() ||\n             trimline.starts_with(\"#![feature\");\n         if !header || after_header {\n@@ -292,11 +325,12 @@ pub struct Collector {\n     use_headers: bool,\n     current_header: Option<String>,\n     cratename: String,\n+    inject_crate: bool\n }\n \n impl Collector {\n     pub fn new(cratename: String, libs: SearchPaths, externs: core::Externs,\n-               use_headers: bool) -> Collector {\n+               use_headers: bool, inject_crate: bool) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n@@ -306,11 +340,13 @@ impl Collector {\n             use_headers: use_headers,\n             current_header: None,\n             cratename: cratename,\n+            inject_crate: inject_crate\n         }\n     }\n \n     pub fn add_test(&mut self, test: String,\n-                    should_panic: bool, no_run: bool, should_ignore: bool, as_test_harness: bool) {\n+                    should_panic: bool, no_run: bool, should_ignore: bool,\n+                    as_test_harness: bool) {\n         let name = if self.use_headers {\n             let s = self.current_header.as_ref().map(|s| &**s).unwrap_or(\"\");\n             format!(\"{}_{}\", s, self.cnt)\n@@ -321,6 +357,7 @@ impl Collector {\n         let libs = self.libs.clone();\n         let externs = self.externs.clone();\n         let cratename = self.cratename.to_string();\n+        let inject_crate = self.inject_crate;\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n@@ -335,7 +372,8 @@ impl Collector {\n                         externs,\n                         should_panic,\n                         no_run,\n-                        as_test_harness);\n+                        as_test_harness,\n+                        inject_crate);\n             }))\n         });\n     }"}]}