{"sha": "18576e55f72b9bdcb0998870377e09b02b033f8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NTc2ZTU1ZjcyYjliZGNiMDk5ODg3MDM3N2UwOWIwMmIwMzNmOGI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-24T01:09:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-24T01:55:37Z"}, "message": "Resolve a number of FIXMEs", "tree": {"sha": "1a7d6f1d2c8c56340380a32c01c75747bfda47d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a7d6f1d2c8c56340380a32c01c75747bfda47d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18576e55f72b9bdcb0998870377e09b02b033f8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18576e55f72b9bdcb0998870377e09b02b033f8b", "html_url": "https://github.com/rust-lang/rust/commit/18576e55f72b9bdcb0998870377e09b02b033f8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18576e55f72b9bdcb0998870377e09b02b033f8b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1f239424534af38fd1dfab861fab6813c1c9c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f239424534af38fd1dfab861fab6813c1c9c97", "html_url": "https://github.com/rust-lang/rust/commit/c1f239424534af38fd1dfab861fab6813c1c9c97"}], "stats": {"total": 59, "additions": 10, "deletions": 49}, "files": [{"sha": "b2d767293616369e05cf3a48b8e4de0842266902", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18576e55f72b9bdcb0998870377e09b02b033f8b/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18576e55f72b9bdcb0998870377e09b02b033f8b/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=18576e55f72b9bdcb0998870377e09b02b033f8b", "patch": "@@ -202,7 +202,7 @@ fn encode_type(ecx: &@encode_ctxt, ebml_w: &ebml::writer, typ: ty::t) {\n         @{ds: f,\n           tcx: ecx.ccx.tcx,\n           abbrevs: tyencode::ac_use_abbrevs(ecx.type_abbrevs)};\n-    tyencode::enc_ty(io::new_writer_(ebml_w.writer), ty_str_ctxt, typ);\n+    tyencode::enc_ty(io::new_writer(ebml_w.writer), ty_str_ctxt, typ);\n     ebml::end_tag(ebml_w);\n }\n \n@@ -413,7 +413,7 @@ fn create_index<T>(index: &[entry<T>], hash_fn: fn(&T) -> uint) ->\n \n fn encode_index<T>(ebml_w: &ebml::writer, buckets: &[@[entry<T>]],\n                    write_fn: fn(&io::writer, &T)) {\n-    let writer = io::new_writer_(ebml_w.writer);\n+    let writer = io::new_writer(ebml_w.writer);\n     ebml::start_tag(ebml_w, tag_index);\n     let bucket_locs: [uint] = [];\n     ebml::start_tag(ebml_w, tag_index_buckets);"}, {"sha": "76608e5e956a711310a4e2c025137c7ba62e9d4e", "filename": "src/lib/io.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/18576e55f72b9bdcb0998870377e09b02b033f8b/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18576e55f72b9bdcb0998870377e09b02b033f8b/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=18576e55f72b9bdcb0998870377e09b02b033f8b", "patch": "@@ -179,10 +179,6 @@ fn file_reader(path: str) -> reader {\n }\n \n \n-// FIXME: Remove me once objects are exported.\n-fn new_reader_(bufr: buf_reader) -> reader { ret new_reader(bufr); }\n-\n-\n // Byte buffer readers\n \n // TODO: mutable? u8, but this fails with rustboot.\n@@ -355,10 +351,6 @@ obj new_writer(out: buf_writer) {\n     }\n }\n \n-\n-// FIXME: Remove me once objects are exported.\n-fn new_writer_(out: buf_writer) -> writer { ret new_writer(out); }\n-\n fn file_writer(path: str, flags: &[fileflag]) -> writer {\n     ret new_writer(file_buf_writer(path, flags));\n }"}, {"sha": "09ea61dc5d7401b3a2d0e717d719809aa513d4c1", "filename": "src/lib/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18576e55f72b9bdcb0998870377e09b02b033f8b/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18576e55f72b9bdcb0998870377e09b02b033f8b/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=18576e55f72b9bdcb0998870377e09b02b033f8b", "patch": "@@ -66,8 +66,6 @@ type opt_res = either::t<test_opts, str>;\n // Parses command line arguments into test options\n fn parse_opts(args: &[str]) : vec::is_not_empty(args) -> opt_res {\n \n-    // FIXME (#649): Shouldn't have to check here\n-    check (vec::is_not_empty(args));\n     let args_ = vec::tail(args);\n     let opts = [getopts::optflag(\"ignored\")];\n     let match ="}, {"sha": "657138cea9c8c3a1c253acb7d1ae9fd2e9ae1998", "filename": "src/lib/uint.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18576e55f72b9bdcb0998870377e09b02b033f8b/src%2Flib%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18576e55f72b9bdcb0998870377e09b02b033f8b/src%2Flib%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fuint.rs?ref=18576e55f72b9bdcb0998870377e09b02b033f8b", "patch": "@@ -32,9 +32,6 @@ iter range(lo: uint, hi: uint) -> uint {\n }\n \n fn next_power_of_two(n: uint) -> uint {\n-    // FIXME change |* uint(4)| below to |* uint(8) / uint(2)| and watch the\n-    // world explode.\n-\n     let halfbits: uint = sys::rustrt::size_of::<uint>() * 4u;\n     let tmp: uint = n - 1u;\n     let shift: uint = 1u;"}, {"sha": "93e54d56bc9758cbe6c9a9e44813724224c6ebb3", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18576e55f72b9bdcb0998870377e09b02b033f8b/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18576e55f72b9bdcb0998870377e09b02b033f8b/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=18576e55f72b9bdcb0998870377e09b02b033f8b", "patch": "@@ -201,8 +201,7 @@ mod test_literals {\n     #[mach_int = 100u32];\n     #[float = 1.0];\n     #[mach_float = 1.0f32];\n-    // FIXME (#622): Can't parse a nil literal here\n-    //#[nil = ()];\n+    #[nil = ()];\n     #[bool = true];\n     mod m { }\n }"}, {"sha": "12ac2614efe11966ed80000bcfe15391afe1b254", "filename": "src/test/run-pass/tag.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18576e55f72b9bdcb0998870377e09b02b033f8b/src%2Ftest%2Frun-pass%2Ftag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18576e55f72b9bdcb0998870377e09b02b033f8b/src%2Ftest%2Frun-pass%2Ftag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag.rs?ref=18576e55f72b9bdcb0998870377e09b02b033f8b", "patch": "@@ -7,9 +7,7 @@ tag colour { red(int, int); green; }\n fn f() {\n     let x = red(1, 2);\n     let y = green;\n-    // FIXME: needs structural equality test working.\n-    // assert (x != y);\n-\n+    assert (x != y);\n }\n \n fn main() { f(); }"}, {"sha": "348ee3955dc29e959f55b3e0b289b0a97e4d55e1", "filename": "src/test/stdtest/bitv.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18576e55f72b9bdcb0998870377e09b02b033f8b/src%2Ftest%2Fstdtest%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18576e55f72b9bdcb0998870377e09b02b033f8b/src%2Ftest%2Fstdtest%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fbitv.rs?ref=18576e55f72b9bdcb0998870377e09b02b033f8b", "patch": "@@ -9,8 +9,6 @@ fn test_0_elements() {\n     let exp;\n     act = bitv::create(0u, false);\n     exp = vec::init_elt::<uint>(0u, 0u);\n-    // FIXME: why can't I write vec::<uint>()?\n-\n     assert (bitv::eq_vec(act, exp));\n }\n "}, {"sha": "aef78448d56964c31c7d5c238cda6ad01ec5e045", "filename": "src/test/stdtest/map.rs", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/18576e55f72b9bdcb0998870377e09b02b033f8b/src%2Ftest%2Fstdtest%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18576e55f72b9bdcb0998870377e09b02b033f8b/src%2Ftest%2Fstdtest%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fmap.rs?ref=18576e55f72b9bdcb0998870377e09b02b033f8b", "patch": "@@ -6,18 +6,13 @@ import std::map;\n import std::str;\n import std::uint;\n import std::util;\n+import std::option;\n \n #[test]\n fn test_simple() {\n     log \"*** starting test_simple\";\n     fn eq_uint(x: &uint, y: &uint) -> bool { ret x == y; }\n-    fn hash_uint(u: &uint) -> uint {\n-        // FIXME: can't use std::util::id since we'd be capturing a type\n-        // param, and presently we can't close items over type params.\n-\n-        ret u;\n-    }\n-    let hasher_uint: map::hashfn<uint> = hash_uint;\n+    let hasher_uint: map::hashfn<uint> = util::id;\n     let eqer_uint: map::eqfn<uint> = eq_uint;\n     let hasher_str: map::hashfn<str> = str::hash;\n     let eqer_str: map::eqfn<str> = str::eq;\n@@ -89,14 +84,8 @@ fn test_growth() {\n     log \"*** starting test_growth\";\n     let num_to_insert: uint = 64u;\n     fn eq_uint(x: &uint, y: &uint) -> bool { ret x == y; }\n-    fn hash_uint(u: &uint) -> uint {\n-        // FIXME: can't use std::util::id since we'd be capturing a type\n-        // param, and presently we can't close items over type params.\n-\n-        ret u;\n-    }\n     log \"uint -> uint\";\n-    let hasher_uint: map::hashfn<uint> = hash_uint;\n+    let hasher_uint: map::hashfn<uint> = util::id;\n     let eqer_uint: map::eqfn<uint> = eq_uint;\n     let hm_uu: map::hashmap<uint, uint> =\n         map::mk_hashmap::<uint, uint>(hasher_uint, eqer_uint);\n@@ -194,23 +183,13 @@ fn test_removal() {\n     log \"removing evens\";\n     i = 0u;\n     while i < num_to_insert {\n-        /**\n-         * FIXME (issue #150): we want to check the removed value as in the\n-         * following:\n-\n-        let v: util.option<uint> = hm.remove(i);\n+        let v = hm.remove(i);\n         alt (v) {\n-          case (util.some::<uint>(u)) {\n+          option::some(u) {\n             assert (u == (i * i));\n           }\n-          case (util.none::<uint>()) { fail; }\n+          option::none. { fail; }\n         }\n-\n-         * but we util.option is a tag type so util.some and util.none are\n-         * off limits until we parse the dwarf for tag types.\n-         */\n-\n-        hm.remove(i);\n         i += 2u;\n     }\n     assert (hm.size() == num_to_insert / 2u);"}]}