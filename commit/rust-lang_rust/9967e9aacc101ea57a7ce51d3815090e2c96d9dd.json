{"sha": "9967e9aacc101ea57a7ce51d3815090e2c96d9dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NjdlOWFhY2MxMDFlYTU3YTdjZTUxZDM4MTUwOTBlMmM5NmQ5ZGQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-31T10:37:38Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-31T10:37:38Z"}, "message": "Update to latest master", "tree": {"sha": "27cbed0a85d208ad4cc42cf989c4cc6b98015517", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27cbed0a85d208ad4cc42cf989c4cc6b98015517"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9967e9aacc101ea57a7ce51d3815090e2c96d9dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9967e9aacc101ea57a7ce51d3815090e2c96d9dd", "html_url": "https://github.com/rust-lang/rust/commit/9967e9aacc101ea57a7ce51d3815090e2c96d9dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c518847c8a0f21debc82e9d6e32d3cfc15bab61d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c518847c8a0f21debc82e9d6e32d3cfc15bab61d", "html_url": "https://github.com/rust-lang/rust/commit/c518847c8a0f21debc82e9d6e32d3cfc15bab61d"}], "stats": {"total": 78, "additions": 61, "deletions": 17}, "files": [{"sha": "baac8d790ba5386349f25e9238715021aa9258af", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=9967e9aacc101ea57a7ce51d3815090e2c96d9dd", "patch": "@@ -1,6 +1,7 @@\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty;\n+use rustc::ty::subst::Substs;\n use rustc_const_eval::ConstContext;\n use rustc_const_math::{ConstUsize, ConstIsize, ConstInt};\n use rustc::hir;\n@@ -62,7 +63,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n             if let ty::TyArray(_, size) = ty.sty {\n                 let size = ConstInt::Usize(ConstUsize::new(size as u64, cx.sess().target.uint_type)\n                     .expect(\"array size is invalid\"));\n-                let constcx = ConstContext::with_tables(cx.tcx, cx.tables);\n+                let parent_item = cx.tcx.hir.get_parent(e.id);\n+                let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+                let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+                let constcx = ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables);\n \n                 // Index is a constant uint\n                 let const_index = constcx.eval(index);"}, {"sha": "c1fbd33b2a5ea48834c62c69c91c288566466c93", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=9967e9aacc101ea57a7ce51d3815090e2c96d9dd", "patch": "@@ -249,7 +249,7 @@ fn fetch_int_literal(cx: &LateContext, lit: &Expr) -> Option<u128> {\n         ExprPath(ref qpath) => {\n             let def = cx.tables.qpath_def(qpath, lit.id);\n             if let Def::Const(def_id) = def {\n-                lookup_const_by_id(cx.tcx, def_id, Substs::empty()).and_then(|(l, _ty)| {\n+                lookup_const_by_id(cx.tcx, cx.param_env.and((def_id, Substs::empty()))).and_then(|(l, _ty)| {\n                     let body = if let Some(id) = cx.tcx.hir.as_local_node_id(l) {\n                         cx.tcx.mir_const_qualif(def_id);\n                         cx.tcx.hir.body(cx.tcx.hir.body_owned_by(id))"}, {"sha": "54b297d588d56b47e96c7b397935b0c4cd2e9240", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=9967e9aacc101ea57a7ce51d3815090e2c96d9dd", "patch": "@@ -225,6 +225,7 @@ pub fn constant(lcx: &LateContext, e: &Expr) -> Option<(Constant, bool)> {\n     let mut cx = ConstEvalLateContext {\n         tcx: lcx.tcx,\n         tables: lcx.tables,\n+        param_env: lcx.param_env,\n         needed_resolution: false,\n         substs: lcx.tcx.intern_substs(&[]),\n     };\n@@ -238,6 +239,7 @@ pub fn constant_simple(lcx: &LateContext, e: &Expr) -> Option<Constant> {\n struct ConstEvalLateContext<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     needed_resolution: bool,\n     substs: &'tcx Substs<'tcx>,\n }\n@@ -292,12 +294,14 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                 } else {\n                     substs.subst(self.tcx, self.substs)\n                 };\n-                if let Some((def_id, substs)) = lookup_const_by_id(self.tcx, def_id, substs) {\n+                let param_env = self.param_env.and((def_id, substs));\n+                if let Some((def_id, substs)) = lookup_const_by_id(self.tcx, param_env) {\n                     let mut cx = ConstEvalLateContext {\n                         tcx: self.tcx,\n                         tables: self.tcx.typeck_tables_of(def_id),\n                         needed_resolution: false,\n                         substs: substs,\n+                        param_env: param_env.param_env,\n                     };\n                     let body = if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n                         self.tcx.mir_const_qualif(def_id);"}, {"sha": "3741b3934bdf5f59b1c652d21dca61e502ecc7fe", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=9967e9aacc101ea57a7ce51d3815090e2c96d9dd", "patch": "@@ -4,6 +4,9 @@ use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc_const_math::*;\n use rustc::hir::*;\n+use rustc::ty;\n+use rustc::traits::Reveal;\n+use rustc::ty::subst::Substs;\n use utils::span_lint;\n \n /// **What it does:** Checks for C-like enumerations that are\n@@ -43,9 +46,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n             for var in &def.variants {\n                 let variant = &var.node;\n                 if let Some(body_id) = variant.disr_expr {\n-                    use rustc_const_eval::*;\n-                    let constcx = ConstContext::with_tables(cx.tcx, cx.tcx.body_tables(body_id));\n-                    let bad = match constcx.eval(&cx.tcx.hir.body(body_id).value) {\n+                    let expr = &cx.tcx.hir.body(body_id).value;\n+                    let did = cx.tcx.hir.body_owner_def_id(body_id);\n+                    let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n+                    let substs = Substs::identity_for_item(cx.tcx.global_tcx(), did);\n+                    let bad = match cx.tcx.at(expr.span).const_eval(param_env.and((did, substs))) {\n                         Ok(ConstVal::Integral(Usize(Us64(i)))) => i as u32 as u64 != i,\n                         Ok(ConstVal::Integral(Isize(Is64(i)))) => i as i32 as i64 != i,\n                         _ => false,"}, {"sha": "8b31969d2549643587efdeb52ed9d1f79098bced", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=9967e9aacc101ea57a7ce51d3815090e2c96d9dd", "patch": "@@ -8,7 +8,7 @@ use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::region::CodeExtent;\n use rustc::ty::{self, Ty};\n-use rustc::ty::subst::Subst;\n+use rustc::ty::subst::{Subst, Substs};\n use rustc_const_eval::ConstContext;\n use std::collections::{HashMap, HashSet};\n use syntax::ast;\n@@ -685,7 +685,10 @@ fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n     // if this for loop is iterating over a two-sided range...\n     if let Some(higher::Range { start: Some(start), end: Some(end), limits }) = higher::range(arg) {\n         // ...and both sides are compile-time constant integers...\n-        let constcx = ConstContext::with_tables(cx.tcx, cx.tables);\n+        let parent_item = cx.tcx.hir.get_parent(arg.id);\n+        let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+        let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+        let constcx = ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables);\n         if let Ok(start_idx) = constcx.eval(start) {\n             if let Ok(end_idx) = constcx.eval(end) {\n                 // ...and the start index is greater than the end index,"}, {"sha": "5f92ca7b19ae8d10c51bdd04be331b7ebe51940c", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=9967e9aacc101ea57a7ce51d3815090e2c96d9dd", "patch": "@@ -2,11 +2,13 @@ use rustc::hir::*;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{self, Ty};\n+use rustc::ty::subst::Substs;\n use rustc_const_eval::ConstContext;\n use rustc_const_math::ConstInt;\n use std::cmp::Ordering;\n use std::collections::Bound;\n use syntax::ast::LitKind;\n+use syntax::ast::NodeId;\n use syntax::codemap::Span;\n use utils::paths;\n use utils::{match_type, snippet, span_note_and_lint, span_lint_and_then, span_lint_and_sugg, in_external_macro,\n@@ -307,7 +309,7 @@ fn check_match_bool(cx: &LateContext, ex: &Expr, arms: &[Arm], expr: &Expr) {\n \n fn check_overlapping_arms(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n     if arms.len() >= 2 && cx.tables.expr_ty(ex).is_integral() {\n-        let ranges = all_ranges(cx, arms);\n+        let ranges = all_ranges(cx, arms, ex.id);\n         let type_ranges = type_ranges(&ranges);\n         if !type_ranges.is_empty() {\n             if let Some((start, end)) = overlapping(&type_ranges) {\n@@ -390,8 +392,11 @@ fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: Match\n }\n \n /// Get all arms that are unbounded `PatRange`s.\n-fn all_ranges<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arms: &[Arm]) -> Vec<SpannedRange<ConstVal<'tcx>>> {\n-    let constcx = ConstContext::with_tables(cx.tcx, cx.tables);\n+fn all_ranges<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arms: &[Arm], id: NodeId) -> Vec<SpannedRange<ConstVal<'tcx>>> {\n+    let parent_item = cx.tcx.hir.get_parent(id);\n+    let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+    let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+    let constcx = ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables);\n     arms.iter()\n         .flat_map(|arm| {\n             if let Arm { ref pats, guard: None, .. } = *arm {"}, {"sha": "1c6f7dd214ed0261e066c3df45a01e07ed6009a0", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=9967e9aacc101ea57a7ce51d3815090e2c96d9dd", "patch": "@@ -3,6 +3,7 @@ use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{self, Ty};\n use rustc::hir::def::Def;\n+use rustc::ty::subst::Substs;\n use rustc_const_eval::ConstContext;\n use std::borrow::Cow;\n use std::fmt;\n@@ -1226,7 +1227,10 @@ fn lint_chars_next(cx: &LateContext, expr: &hir::Expr, chain: &hir::Expr, other:\n \n /// lint for length-1 `str`s for methods in `PATTERN_METHODS`\n fn lint_single_char_pattern(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr) {\n-    if let Ok(ConstVal::Str(r)) = ConstContext::with_tables(cx.tcx, cx.tables).eval(arg) {\n+    let parent_item = cx.tcx.hir.get_parent(arg.id);\n+    let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+    let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+    if let Ok(ConstVal::Str(r)) = ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(arg) {\n         if r.len() == 1 {\n             let hint = snippet(cx, expr.span, \"..\").replace(&format!(\"\\\"{}\\\"\", r), &format!(\"'{}'\", r));\n             span_lint_and_then(cx,"}, {"sha": "dfdf00cb4e7571488135114fd6dfb8e5f1fcf80f", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=9967e9aacc101ea57a7ce51d3815090e2c96d9dd", "patch": "@@ -4,6 +4,7 @@ use rustc::hir::intravisit::FnKind;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty;\n+use rustc::ty::subst::Substs;\n use rustc_const_eval::ConstContext;\n use rustc_const_math::ConstFloat;\n use syntax::codemap::{Span, ExpnFormat};\n@@ -389,7 +390,10 @@ fn check_nan(cx: &LateContext, path: &Path, expr: &Expr) {\n }\n \n fn is_allowed(cx: &LateContext, expr: &Expr) -> bool {\n-    let res = ConstContext::with_tables(cx.tcx, cx.tables).eval(expr);\n+    let parent_item = cx.tcx.hir.get_parent(expr.id);\n+    let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+    let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+    let res = ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(expr);\n     if let Ok(ConstVal::Float(val)) = res {\n         use std::cmp::Ordering;\n         match val {"}, {"sha": "f022559157113b5229e28b8ad43108b505a40f48", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=9967e9aacc101ea57a7ce51d3815090e2c96d9dd", "patch": "@@ -3,6 +3,7 @@ use rustc::hir::*;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc_const_eval::ConstContext;\n+use rustc::ty::subst::Substs;\n use std::collections::HashSet;\n use std::error::Error;\n use syntax::ast::{LitKind, NodeId};\n@@ -150,7 +151,10 @@ fn str_span(base: Span, s: &str, c: usize) -> Span {\n }\n \n fn const_str(cx: &LateContext, e: &Expr) -> Option<InternedString> {\n-    match ConstContext::with_tables(cx.tcx, cx.tables).eval(e) {\n+    let parent_item = cx.tcx.hir.get_parent(e.id);\n+    let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+    let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+    match ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(e) {\n         Ok(ConstVal::Str(r)) => Some(r),\n         _ => None,\n     }"}, {"sha": "66cb5671c775a3157187cac2961a3c6c5b10c3b3", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=9967e9aacc101ea57a7ce51d3815090e2c96d9dd", "patch": "@@ -4,6 +4,7 @@ use rustc::hir::*;\n use rustc::hir::intravisit::{FnKind, Visitor, walk_ty, NestedVisitorMap};\n use rustc::lint::*;\n use rustc::ty::{self, Ty};\n+use rustc::ty::subst::Substs;\n use std::cmp::Ordering;\n use syntax::ast::{IntTy, UintTy, FloatTy};\n use syntax::attr::IntType;\n@@ -977,7 +978,10 @@ fn detect_extreme_expr<'a>(cx: &LateContext, expr: &'a Expr) -> Option<ExtremeEx\n         _ => return None,\n     };\n \n-    let cv = match ConstContext::with_tables(cx.tcx, cx.tables).eval(expr) {\n+    let parent_item = cx.tcx.hir.get_parent(expr.id);\n+    let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+    let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+    let cv = match ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(expr) {\n         Ok(val) => val,\n         Err(_) => return None,\n     };\n@@ -1174,7 +1178,10 @@ fn node_as_const_fullint(cx: &LateContext, expr: &Expr) -> Option<FullInt> {\n     use rustc::middle::const_val::ConstVal::*;\n     use rustc_const_eval::ConstContext;\n \n-    match ConstContext::with_tables(cx.tcx, cx.tables).eval(expr) {\n+    let parent_item = cx.tcx.hir.get_parent(expr.id);\n+    let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+    let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+    match ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(expr) {\n         Ok(val) => {\n             if let Integral(const_int) = val {\n                 match const_int.int_type() {"}, {"sha": "059f4e36a035ea6ede311f51fe134fd6f9d6aaa5", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9aacc101ea57a7ce51d3815090e2c96d9dd/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=9967e9aacc101ea57a7ce51d3815090e2c96d9dd", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir::*;\n use rustc::lint::*;\n use rustc::ty::{self, Ty};\n+use rustc::ty::subst::Substs;\n use rustc_const_eval::ConstContext;\n use syntax::codemap::Span;\n use utils::{higher, is_copy, snippet, span_lint_and_sugg};\n@@ -59,7 +60,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n fn check_vec_macro(cx: &LateContext, vec_args: &higher::VecArgs, span: Span) {\n     let snippet = match *vec_args {\n         higher::VecArgs::Repeat(elem, len) => {\n-            if ConstContext::with_tables(cx.tcx, cx.tables).eval(len).is_ok() {\n+            let parent_item = cx.tcx.hir.get_parent(len.id);\n+            let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+            let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+            if ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(len).is_ok() {\n                 format!(\"&[{}; {}]\", snippet(cx, elem.span, \"elem\"), snippet(cx, len.span, \"len\")).into()\n             } else {\n                 return;"}]}