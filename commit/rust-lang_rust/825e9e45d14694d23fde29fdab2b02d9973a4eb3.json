{"sha": "825e9e45d14694d23fde29fdab2b02d9973a4eb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNWU5ZTQ1ZDE0Njk0ZDIzZmRlMjlmZGFiMmIwMmQ5OTczYTRlYjM=", "commit": {"author": {"name": "Roxane Fruytier", "email": "roxane.fruytier@hotmail.com", "date": "2020-10-28T03:41:52Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-11T01:58:55Z"}, "message": "Reduce verbosity of capture analysis logs\n\nCo-authored-by: Jenny Wills <wills.jenniferg@gmail.com>\nCo-authored-by: Aman Arora <me@aman-arora.com>", "tree": {"sha": "2abe5e662ca1ad9064ead909a55d9395e9eba73c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2abe5e662ca1ad9064ead909a55d9395e9eba73c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/825e9e45d14694d23fde29fdab2b02d9973a4eb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/825e9e45d14694d23fde29fdab2b02d9973a4eb3", "html_url": "https://github.com/rust-lang/rust/commit/825e9e45d14694d23fde29fdab2b02d9973a4eb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/825e9e45d14694d23fde29fdab2b02d9973a4eb3/comments", "author": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b16815b58d2f584b0a337a3456c1238a96b3f443", "url": "https://api.github.com/repos/rust-lang/rust/commits/b16815b58d2f584b0a337a3456c1238a96b3f443", "html_url": "https://github.com/rust-lang/rust/commit/b16815b58d2f584b0a337a3456c1238a96b3f443"}], "stats": {"total": 1206, "additions": 297, "deletions": 909}, "files": [{"sha": "a01aa8531ca9ceb99110763d9f870f3ff580412b", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 79, "deletions": 33, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -46,22 +46,6 @@ use rustc_span::{Span, Symbol};\n \n use std::env;\n \n-macro_rules! log_capture_analysis {\n-    ($fcx:expr, $closure_def_id:expr, $fmt:literal) => {\n-        if $fcx.should_log_capture_analysis($closure_def_id) {\n-            print!(\"For closure={:?}: \", $closure_def_id);\n-            println!($fmt);\n-        }\n-    };\n-\n-    ($fcx:expr, $closure_def_id:expr, $fmt:literal, $($args:expr),*) => {\n-        if $fcx.should_log_capture_analysis($closure_def_id) {\n-            print!(\"For closure={:?}: \", $closure_def_id);\n-            println!($fmt, $($args),*);\n-        }\n-    };\n-}\n-\n /// Describe the relationship between the paths of two places\n /// eg:\n /// - foo is ancestor of foo.bar.baz\n@@ -144,9 +128,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let mut capture_information = FxIndexMap::<Place<'tcx>, ty::CaptureInfo<'tcx>>::default();\n         if self.tcx.features().capture_disjoint_fields || matches!(env::var(\"SG_NEW\"), Ok(_)) {\n-            log_capture_analysis!(self, closure_def_id, \"Using new-style capture analysis\");\n         } else {\n-            log_capture_analysis!(self, closure_def_id, \"Using old-style capture analysis\");\n             if let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) {\n                 for (&var_hir_id, _) in upvars.iter() {\n                     let place = self.place_for_root_variable(local_def_id, var_hir_id);\n@@ -182,12 +164,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         )\n         .consume_body(body);\n \n-        log_capture_analysis!(\n-            self,\n-            closure_def_id,\n-            \"capture information: {:#?}\",\n-            delegate.capture_information\n+        debug!(\n+            \"For closure={:?}, capture_information={:#?}\",\n+            closure_def_id, delegate.capture_information\n         );\n+        self.log_closure_capture_info(closure_def_id, &delegate.capture_information, span);\n \n         if let Some(closure_substs) = infer_kind {\n             // Unify the (as yet unbound) type variable in the closure\n@@ -206,6 +187,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         self.compute_min_captures(closure_def_id, delegate);\n+        self.log_closure_min_capture_info(closure_def_id, span);\n+\n         self.set_closure_captures(closure_def_id);\n \n         // Now that we've analyzed the closure, we know how each\n@@ -333,10 +316,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n         }\n-        debug!(\n-            \"For closure_def_id={:?}, set_closure_captures={:#?}\",\n-            closure_def_id, closure_captures\n-        );\n+        debug!(\"For closure_def_id={:?}, closure_captures={:#?}\", closure_def_id, closure_captures);\n         debug!(\n             \"For closure_def_id={:?}, upvar_capture_map={:#?}\",\n             closure_def_id, upvar_capture_map\n@@ -478,12 +458,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        log_capture_analysis!(\n-            self,\n-            closure_def_id,\n-            \"min_captures={:#?}\",\n-            root_var_min_capture_list\n-        );\n+        debug!(\"For closure={:?}, min_captures={:#?}\", closure_def_id, root_var_min_capture_list);\n \n         if !root_var_min_capture_list.is_empty() {\n             self.typeck_results\n@@ -581,6 +556,46 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    fn log_closure_capture_info(\n+        &self,\n+        closure_def_id: rustc_hir::def_id::DefId,\n+        capture_information: &FxIndexMap<Place<'tcx>, ty::CaptureInfo<'tcx>>,\n+        closure_span: Span,\n+    ) {\n+        if self.should_log_capture_analysis(closure_def_id) {\n+            for (place, capture_info) in capture_information {\n+                let capture_str = construct_capture_info_string(self.tcx, place, capture_info);\n+                let output_str = format!(\"Capturing {}\", capture_str);\n+\n+                let span = capture_info.expr_id.map_or(closure_span, |e| self.tcx.hir().span(e));\n+                self.tcx.sess.span_err(span, &output_str);\n+            }\n+        }\n+    }\n+\n+    fn log_closure_min_capture_info(&self, closure_def_id: DefId, closure_span: Span) {\n+        if self.should_log_capture_analysis(closure_def_id) {\n+            if let Some(min_captures) =\n+                self.typeck_results.borrow().closure_min_captures.get(&closure_def_id)\n+            {\n+                for (_, min_captures_for_var) in min_captures {\n+                    for capture in min_captures_for_var {\n+                        let place = &capture.place;\n+                        let capture_info = &capture.info;\n+\n+                        let capture_str =\n+                            construct_capture_info_string(self.tcx, place, capture_info);\n+                        let output_str = format!(\"Min Capture {}\", capture_str);\n+\n+                        let span =\n+                            capture_info.expr_id.map_or(closure_span, |e| self.tcx.hir().span(e));\n+                        self.tcx.sess.span_err(span, &output_str);\n+                    }\n+                }\n+            }\n+        }\n+    }\n }\n \n struct InferBorrowKind<'a, 'tcx> {\n@@ -917,6 +932,37 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n     }\n }\n \n+fn construct_capture_info_string(\n+    tcx: TyCtxt<'_>,\n+    place: &Place<'tcx>,\n+    capture_info: &ty::CaptureInfo<'tcx>,\n+) -> String {\n+    let variable_name = match place.base {\n+        PlaceBase::Upvar(upvar_id) => var_name(tcx, upvar_id.var_path.hir_id).to_string(),\n+        _ => bug!(\"Capture_information should only contain upvars\"),\n+    };\n+\n+    let mut projections_str = String::new();\n+    for (i, item) in place.projections.iter().enumerate() {\n+        let proj = match item.kind {\n+            ProjectionKind::Field(a, b) => format!(\"({:?}, {:?})\", a, b),\n+            ProjectionKind::Deref => String::from(\"Deref\"),\n+            ProjectionKind::Index => String::from(\"Index\"),\n+            ProjectionKind::Subslice => String::from(\"Subslice\"),\n+        };\n+        if i != 0 {\n+            projections_str.push_str(\",\");\n+        }\n+        projections_str.push_str(proj.as_str());\n+    }\n+\n+    let capture_kind_str = match capture_info.capture_kind {\n+        ty::UpvarCapture::ByValue(_) => \"ByValue\".into(),\n+        ty::UpvarCapture::ByRef(borrow) => format!(\"{:?}\", borrow.kind),\n+    };\n+    format!(\"{}[{}] -> {}\", variable_name, projections_str, capture_kind_str)\n+}\n+\n fn var_name(tcx: TyCtxt<'_>, var_hir_id: hir::HirId) -> Symbol {\n     tcx.hir().name(var_hir_id)\n }"}, {"sha": "e144cce54ec2229c039d5de6e5df404b5531b2eb", "filename": "src/test/ui/closures/2229_closure_analysis/arrays-completely-captured.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.rs?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -10,6 +10,8 @@ fn main() {\n     //~^ ERROR: attributes on expressions are experimental\n     || {\n         m[0] += 10;\n+        //~^ ERROR: Capturing m[] -> MutBorrow\n+        //~^^ ERROR: Min Capture m[] -> MutBorrow\n         m[1] += 40;\n     };\n "}, {"sha": "228682caad78c1c1d4b14288f2340d33bd40fb8e", "filename": "src/test/ui/closures/2229_closure_analysis/arrays-completely-captured.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stderr?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -16,6 +16,18 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: aborting due to previous error; 1 warning emitted\n+error: Capturing m[] -> MutBorrow\n+  --> $DIR/arrays-completely-captured.rs:12:9\n+   |\n+LL |         m[0] += 10;\n+   |         ^\n+\n+error: Min Capture m[] -> MutBorrow\n+  --> $DIR/arrays-completely-captured.rs:12:9\n+   |\n+LL |         m[0] += 10;\n+   |         ^\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "e0cd06f765e077e52e92d16a9a33e036df59b441", "filename": "src/test/ui/closures/2229_closure_analysis/arrays-completely-captured.stdout", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -1,47 +0,0 @@\n-For closure=DefId(0:4 ~ arrays_completely_captured[317d]::main::{closure#0}): Using new-style capture analysis\n-For closure=DefId(0:4 ~ arrays_completely_captured[317d]::main::{closure#0}): capture information: {\n-    Place {\n-        base_ty: [i32; 5],\n-        base: Upvar(\n-            UpvarId(HirId { owner: DefId(0:3 ~ arrays_completely_captured[317d]::main), local_id: 1 };`m`;DefId(0:4 ~ arrays_completely_captured[317d]::main::{closure#0})),\n-        ),\n-        projections: [],\n-    }: CaptureInfo {\n-        expr_id: Some(\n-            HirId {\n-                owner: DefId(0:3 ~ arrays_completely_captured[317d]::main),\n-                local_id: 12,\n-            },\n-        ),\n-        capture_kind: ByRef(\n-            UpvarBorrow(MutBorrow, '_#6r),\n-        ),\n-    },\n-}\n-For closure=DefId(0:4 ~ arrays_completely_captured[317d]::main::{closure#0}): min_captures={\n-    HirId {\n-        owner: DefId(0:3 ~ arrays_completely_captured[317d]::main),\n-        local_id: 1,\n-    }: [\n-        CapturedPlace {\n-            place: Place {\n-                base_ty: [i32; 5],\n-                base: Upvar(\n-                    UpvarId(HirId { owner: DefId(0:3 ~ arrays_completely_captured[317d]::main), local_id: 1 };`m`;DefId(0:4 ~ arrays_completely_captured[317d]::main::{closure#0})),\n-                ),\n-                projections: [],\n-            },\n-            info: CaptureInfo {\n-                expr_id: Some(\n-                    HirId {\n-                        owner: DefId(0:3 ~ arrays_completely_captured[317d]::main),\n-                        local_id: 12,\n-                    },\n-                ),\n-                capture_kind: ByRef(\n-                    UpvarBorrow(MutBorrow, '_#6r),\n-                ),\n-            },\n-        },\n-    ],\n-}"}, {"sha": "3f2e16725dc38b1abbe68e69dae5359b4f048fde", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.rs?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -16,6 +16,8 @@ fn main() {\n     //~^ ERROR: attributes on expressions are experimental\n     || {\n         println!(\"{}\", p.x);\n+        //~^ ERROR: Capturing p[(0, 0)] -> ImmBorrow\n+        //~^^ ERROR: Min Capture p[(0, 0)] -> ImmBorrow\n     };\n \n     // `c` should only capture `p.x`, therefore mutating `p.y` is allowed."}, {"sha": "41e641f356418e8db1f8befc3d75f4bacb58b9c0", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-struct.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stderr?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -16,6 +16,18 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: aborting due to previous error; 1 warning emitted\n+error: Capturing p[(0, 0)] -> ImmBorrow\n+  --> $DIR/capture-disjoint-field-struct.rs:18:24\n+   |\n+LL |         println!(\"{}\", p.x);\n+   |                        ^^^\n+\n+error: Min Capture p[(0, 0)] -> ImmBorrow\n+  --> $DIR/capture-disjoint-field-struct.rs:18:24\n+   |\n+LL |         println!(\"{}\", p.x);\n+   |                        ^^^\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "d378b12a235006b02553ab7da1ba0af83583bcb4", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-struct.stdout", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -1,63 +0,0 @@\n-For closure=DefId(0:7 ~ capture_disjoint_field_struct[317d]::main::{closure#0}): Using new-style capture analysis\n-For closure=DefId(0:7 ~ capture_disjoint_field_struct[317d]::main::{closure#0}): capture information: {\n-    Place {\n-        base_ty: Point,\n-        base: Upvar(\n-            UpvarId(HirId { owner: DefId(0:6 ~ capture_disjoint_field_struct[317d]::main), local_id: 1 };`p`;DefId(0:7 ~ capture_disjoint_field_struct[317d]::main::{closure#0})),\n-        ),\n-        projections: [\n-            Projection {\n-                ty: i32,\n-                kind: Field(\n-                    0,\n-                    0,\n-                ),\n-            },\n-        ],\n-    }: CaptureInfo {\n-        expr_id: Some(\n-            HirId {\n-                owner: DefId(0:6 ~ capture_disjoint_field_struct[317d]::main),\n-                local_id: 31,\n-            },\n-        ),\n-        capture_kind: ByRef(\n-            UpvarBorrow(ImmBorrow, '_#35r),\n-        ),\n-    },\n-}\n-For closure=DefId(0:7 ~ capture_disjoint_field_struct[317d]::main::{closure#0}): min_captures={\n-    HirId {\n-        owner: DefId(0:6 ~ capture_disjoint_field_struct[317d]::main),\n-        local_id: 1,\n-    }: [\n-        CapturedPlace {\n-            place: Place {\n-                base_ty: Point,\n-                base: Upvar(\n-                    UpvarId(HirId { owner: DefId(0:6 ~ capture_disjoint_field_struct[317d]::main), local_id: 1 };`p`;DefId(0:7 ~ capture_disjoint_field_struct[317d]::main::{closure#0})),\n-                ),\n-                projections: [\n-                    Projection {\n-                        ty: i32,\n-                        kind: Field(\n-                            0,\n-                            0,\n-                        ),\n-                    },\n-                ],\n-            },\n-            info: CaptureInfo {\n-                expr_id: Some(\n-                    HirId {\n-                        owner: DefId(0:6 ~ capture_disjoint_field_struct[317d]::main),\n-                        local_id: 31,\n-                    },\n-                ),\n-                capture_kind: ByRef(\n-                    UpvarBorrow(ImmBorrow, '_#35r),\n-                ),\n-            },\n-        },\n-    ],\n-}"}, {"sha": "5db1c9c0683ec8ac7e75cfb7ae71bccfe22fa88a", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-tuple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.rs?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -11,6 +11,8 @@ fn main() {\n     //~^ ERROR: attributes on expressions are experimental\n     || {\n         println!(\"{}\", t.0);\n+        //~^ ERROR: Capturing t[(0, 0)] -> ImmBorrow\n+        //~^^ ERROR: Min Capture t[(0, 0)] -> ImmBorrow\n     };\n \n     // `c` only captures t.0, therefore mutating t.1 is allowed."}, {"sha": "47470bb9646ea037e118b6b41c51a795e712459c", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-tuple.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stderr?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/capture-disjoint-field-tuple.rs:8:13\n+  --> $DIR/capture-disjoint-field-tuple.rs:10:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,14 +8,26 @@ LL |     let c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/capture-disjoint-field-tuple.rs:1:12\n+  --> $DIR/capture-disjoint-field-tuple.rs:3:12\n    |\n LL | #![feature(capture_disjoint_fields)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: aborting due to previous error; 1 warning emitted\n+error: Capturing t[(0, 0)] -> ImmBorrow\n+  --> $DIR/capture-disjoint-field-tuple.rs:13:24\n+   |\n+LL |         println!(\"{}\", t.0);\n+   |                        ^^^\n+\n+error: Min Capture t[(0, 0)] -> ImmBorrow\n+  --> $DIR/capture-disjoint-field-tuple.rs:13:24\n+   |\n+LL |         println!(\"{}\", t.0);\n+   |                        ^^^\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "9a080c28d4ebf7844691f938a206b9abe2138e50", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-tuple.stdout", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -1,63 +0,0 @@\n-For closure=DefId(0:4 ~ capture_disjoint_field_tuple[317d]::main::{closure#0}): Using new-style capture analysis\n-For closure=DefId(0:4 ~ capture_disjoint_field_tuple[317d]::main::{closure#0}): capture information: {\n-    Place {\n-        base_ty: (i32, i32),\n-        base: Upvar(\n-            UpvarId(HirId { owner: DefId(0:3 ~ capture_disjoint_field_tuple[317d]::main), local_id: 1 };`t`;DefId(0:4 ~ capture_disjoint_field_tuple[317d]::main::{closure#0})),\n-        ),\n-        projections: [\n-            Projection {\n-                ty: i32,\n-                kind: Field(\n-                    0,\n-                    0,\n-                ),\n-            },\n-        ],\n-    }: CaptureInfo {\n-        expr_id: Some(\n-            HirId {\n-                owner: DefId(0:3 ~ capture_disjoint_field_tuple[317d]::main),\n-                local_id: 28,\n-            },\n-        ),\n-        capture_kind: ByRef(\n-            UpvarBorrow(ImmBorrow, '_#35r),\n-        ),\n-    },\n-}\n-For closure=DefId(0:4 ~ capture_disjoint_field_tuple[317d]::main::{closure#0}): min_captures={\n-    HirId {\n-        owner: DefId(0:3 ~ capture_disjoint_field_tuple[317d]::main),\n-        local_id: 1,\n-    }: [\n-        CapturedPlace {\n-            place: Place {\n-                base_ty: (i32, i32),\n-                base: Upvar(\n-                    UpvarId(HirId { owner: DefId(0:3 ~ capture_disjoint_field_tuple[317d]::main), local_id: 1 };`t`;DefId(0:4 ~ capture_disjoint_field_tuple[317d]::main::{closure#0})),\n-                ),\n-                projections: [\n-                    Projection {\n-                        ty: i32,\n-                        kind: Field(\n-                            0,\n-                            0,\n-                        ),\n-                    },\n-                ],\n-            },\n-            info: CaptureInfo {\n-                expr_id: Some(\n-                    HirId {\n-                        owner: DefId(0:3 ~ capture_disjoint_field_tuple[317d]::main),\n-                        local_id: 28,\n-                    },\n-                ),\n-                capture_kind: ByRef(\n-                    UpvarBorrow(ImmBorrow, '_#35r),\n-                ),\n-            },\n-        },\n-    ],\n-}"}, {"sha": "3713abe52df209c0f060db728ddc05d1d341d81b", "filename": "src/test/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -9,5 +9,7 @@ fn main() {\n     //~^ ERROR: attributes on expressions are experimental\n     || {\n         println!(\"This uses new capture analyysis to capture s={}\", s);\n+        //~^ ERROR: Capturing s[] -> ImmBorrow\n+        //~^^ ERROR: Min Capture s[] -> ImmBorrow\n     };\n }"}, {"sha": "6d4d7ee5fbeb4c1930bac00e4f53429586ac8d94", "filename": "src/test/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stderr?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -16,6 +16,18 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: aborting due to previous error; 1 warning emitted\n+error: Capturing s[] -> ImmBorrow\n+  --> $DIR/feature-gate-capture_disjoint_fields.rs:11:69\n+   |\n+LL |         println!(\"This uses new capture analyysis to capture s={}\", s);\n+   |                                                                     ^\n+\n+error: Min Capture s[] -> ImmBorrow\n+  --> $DIR/feature-gate-capture_disjoint_fields.rs:11:69\n+   |\n+LL |         println!(\"This uses new capture analyysis to capture s={}\", s);\n+   |                                                                     ^\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "69722f9d21ec243cf0fbe271f4561abfee109085", "filename": "src/test/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.stdout", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -1,47 +0,0 @@\n-For closure=DefId(0:4 ~ feature_gate_capture_disjoint_fields[317d]::main::{closure#0}): Using new-style capture analysis\n-For closure=DefId(0:4 ~ feature_gate_capture_disjoint_fields[317d]::main::{closure#0}): capture information: {\n-    Place {\n-        base_ty: std::string::String,\n-        base: Upvar(\n-            UpvarId(HirId { owner: DefId(0:3 ~ feature_gate_capture_disjoint_fields[317d]::main), local_id: 1 };`s`;DefId(0:4 ~ feature_gate_capture_disjoint_fields[317d]::main::{closure#0})),\n-        ),\n-        projections: [],\n-    }: CaptureInfo {\n-        expr_id: Some(\n-            HirId {\n-                owner: DefId(0:3 ~ feature_gate_capture_disjoint_fields[317d]::main),\n-                local_id: 52,\n-            },\n-        ),\n-        capture_kind: ByRef(\n-            UpvarBorrow(ImmBorrow, '_#50r),\n-        ),\n-    },\n-}\n-For closure=DefId(0:4 ~ feature_gate_capture_disjoint_fields[317d]::main::{closure#0}): min_captures={\n-    HirId {\n-        owner: DefId(0:3 ~ feature_gate_capture_disjoint_fields[317d]::main),\n-        local_id: 1,\n-    }: [\n-        CapturedPlace {\n-            place: Place {\n-                base_ty: std::string::String,\n-                base: Upvar(\n-                    UpvarId(HirId { owner: DefId(0:3 ~ feature_gate_capture_disjoint_fields[317d]::main), local_id: 1 };`s`;DefId(0:4 ~ feature_gate_capture_disjoint_fields[317d]::main::{closure#0})),\n-                ),\n-                projections: [],\n-            },\n-            info: CaptureInfo {\n-                expr_id: Some(\n-                    HirId {\n-                        owner: DefId(0:3 ~ feature_gate_capture_disjoint_fields[317d]::main),\n-                        local_id: 52,\n-                    },\n-                ),\n-                capture_kind: ByRef(\n-                    UpvarBorrow(ImmBorrow, '_#50r),\n-                ),\n-            },\n-        },\n-    ],\n-}"}, {"sha": "3ef8b4acf9782cdc9cc48644b0a761b4fd5fa245", "filename": "src/test/ui/closures/2229_closure_analysis/filter-on-struct-member.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.rs?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -22,9 +22,10 @@ impl Data {\n         // The closure passed to filter only captures self.filter,\n         // therefore mutating self.list is allowed.\n         self.list.retain(\n-        //~^ cannot borrow `self.list` as mutable because it is also borrowed as immutable\n             #[rustc_capture_analysis]\n             |v| self.filter.allowed(*v),\n+            //~^ ERROR: Capturing self[Deref,(0, 0)] -> ImmBorrow\n+            //~^^ ERROR: Min Capture self[Deref,(0, 0)] -> ImmBorrow\n         );\n     }\n }"}, {"sha": "452ba5c654516ef319f5769e2c0fb06f07af06a9", "filename": "src/test/ui/closures/2229_closure_analysis/filter-on-struct-member.stderr", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stderr?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -1,28 +1,23 @@\n warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/filter-on-struct-member.rs:1:12\n+  --> $DIR/filter-on-struct-member.rs:3:12\n    |\n LL | #![feature(capture_disjoint_fields)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error[E0502]: cannot borrow `self.list` as mutable because it is also borrowed as immutable\n-  --> $DIR/filter-on-struct-member.rs:22:9\n+error: Capturing self[Deref,(0, 0)] -> ImmBorrow\n+  --> $DIR/filter-on-struct-member.rs:26:17\n    |\n-LL |           self.list.retain(\n-   |           ^         ------ immutable borrow later used by call\n-   |  _________|\n-   | |\n-LL | |\n-LL | |             #[rustc_capture_analysis]\n-LL | |             |v| self.filter.allowed(*v),\n-   | |             --- ---- first borrow occurs due to use of `self` in closure\n-   | |             |\n-   | |             immutable borrow occurs here\n-LL | |         );\n-   | |_________^ mutable borrow occurs here\n+LL |             |v| self.filter.allowed(*v),\n+   |                 ^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: Min Capture self[Deref,(0, 0)] -> ImmBorrow\n+  --> $DIR/filter-on-struct-member.rs:26:17\n+   |\n+LL |             |v| self.filter.allowed(*v),\n+   |                 ^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "44fb88e1520c429d6cb1971f5e00f3958a324ba0", "filename": "src/test/ui/closures/2229_closure_analysis/filter-on-struct-member.stdout", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -1,71 +0,0 @@\n-For closure=DefId(0:12 ~ filter_on_struct_member[317d]::{impl#1}::update::{closure#0}): Using new-style capture analysis\n-For closure=DefId(0:12 ~ filter_on_struct_member[317d]::{impl#1}::update::{closure#0}): capture information: {\n-    Place {\n-        base_ty: &mut Data,\n-        base: Upvar(\n-            UpvarId(HirId { owner: DefId(0:11 ~ filter_on_struct_member[317d]::{impl#1}::update), local_id: 1 };`self`;DefId(0:12 ~ filter_on_struct_member[317d]::{impl#1}::update::{closure#0})),\n-        ),\n-        projections: [\n-            Projection {\n-                ty: Data,\n-                kind: Deref,\n-            },\n-            Projection {\n-                ty: Filter,\n-                kind: Field(\n-                    0,\n-                    0,\n-                ),\n-            },\n-        ],\n-    }: CaptureInfo {\n-        expr_id: Some(\n-            HirId {\n-                owner: DefId(0:11 ~ filter_on_struct_member[317d]::{impl#1}::update),\n-                local_id: 13,\n-            },\n-        ),\n-        capture_kind: ByRef(\n-            UpvarBorrow(ImmBorrow, '_#7r),\n-        ),\n-    },\n-}\n-For closure=DefId(0:12 ~ filter_on_struct_member[317d]::{impl#1}::update::{closure#0}): min_captures={\n-    HirId {\n-        owner: DefId(0:11 ~ filter_on_struct_member[317d]::{impl#1}::update),\n-        local_id: 1,\n-    }: [\n-        CapturedPlace {\n-            place: Place {\n-                base_ty: &mut Data,\n-                base: Upvar(\n-                    UpvarId(HirId { owner: DefId(0:11 ~ filter_on_struct_member[317d]::{impl#1}::update), local_id: 1 };`self`;DefId(0:12 ~ filter_on_struct_member[317d]::{impl#1}::update::{closure#0})),\n-                ),\n-                projections: [\n-                    Projection {\n-                        ty: Data,\n-                        kind: Deref,\n-                    },\n-                    Projection {\n-                        ty: Filter,\n-                        kind: Field(\n-                            0,\n-                            0,\n-                        ),\n-                    },\n-                ],\n-            },\n-            info: CaptureInfo {\n-                expr_id: Some(\n-                    HirId {\n-                        owner: DefId(0:11 ~ filter_on_struct_member[317d]::{impl#1}::update),\n-                        local_id: 13,\n-                    },\n-                ),\n-                capture_kind: ByRef(\n-                    UpvarBorrow(ImmBorrow, '_#7r),\n-                ),\n-            },\n-        },\n-    ],\n-}"}, {"sha": "a6793a43488e82de2e2429f9467f1f34e69d6e7e", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.rs?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -23,6 +23,8 @@ fn main() {\n     //~^ ERROR: attributes on expressions are experimental\n     || {\n         let wp = &w.p;\n+        //~^ ERROR: Capturing w[(0, 0)] -> ImmBorrow\n+        //~^^ ERROR: Min Capture w[(0, 0)] -> ImmBorrow\n         println!(\"{}\", wp.x);\n     };\n "}, {"sha": "e8368201ede91e68fe6cd152063fb7df0ec69b4d", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-1.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stderr?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -16,6 +16,18 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: aborting due to previous error; 1 warning emitted\n+error: Capturing w[(0, 0)] -> ImmBorrow\n+  --> $DIR/multilevel-path-1.rs:25:19\n+   |\n+LL |         let wp = &w.p;\n+   |                   ^^^\n+\n+error: Min Capture w[(0, 0)] -> ImmBorrow\n+  --> $DIR/multilevel-path-1.rs:25:19\n+   |\n+LL |         let wp = &w.p;\n+   |                   ^^^\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "63a3669d0a76dcc35257839d2091c0ed3e7dffb3", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-1.stdout", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -1,63 +0,0 @@\n-For closure=DefId(0:9 ~ multilevel_path_1[317d]::main::{closure#0}): Using new-style capture analysis\n-For closure=DefId(0:9 ~ multilevel_path_1[317d]::main::{closure#0}): capture information: {\n-    Place {\n-        base_ty: Wrapper,\n-        base: Upvar(\n-            UpvarId(HirId { owner: DefId(0:8 ~ multilevel_path_1[317d]::main), local_id: 1 };`w`;DefId(0:9 ~ multilevel_path_1[317d]::main::{closure#0})),\n-        ),\n-        projections: [\n-            Projection {\n-                ty: Point,\n-                kind: Field(\n-                    0,\n-                    0,\n-                ),\n-            },\n-        ],\n-    }: CaptureInfo {\n-        expr_id: Some(\n-            HirId {\n-                owner: DefId(0:8 ~ multilevel_path_1[317d]::main),\n-                local_id: 20,\n-            },\n-        ),\n-        capture_kind: ByRef(\n-            UpvarBorrow(ImmBorrow, '_#37r),\n-        ),\n-    },\n-}\n-For closure=DefId(0:9 ~ multilevel_path_1[317d]::main::{closure#0}): min_captures={\n-    HirId {\n-        owner: DefId(0:8 ~ multilevel_path_1[317d]::main),\n-        local_id: 1,\n-    }: [\n-        CapturedPlace {\n-            place: Place {\n-                base_ty: Wrapper,\n-                base: Upvar(\n-                    UpvarId(HirId { owner: DefId(0:8 ~ multilevel_path_1[317d]::main), local_id: 1 };`w`;DefId(0:9 ~ multilevel_path_1[317d]::main::{closure#0})),\n-                ),\n-                projections: [\n-                    Projection {\n-                        ty: Point,\n-                        kind: Field(\n-                            0,\n-                            0,\n-                        ),\n-                    },\n-                ],\n-            },\n-            info: CaptureInfo {\n-                expr_id: Some(\n-                    HirId {\n-                        owner: DefId(0:8 ~ multilevel_path_1[317d]::main),\n-                        local_id: 20,\n-                    },\n-                ),\n-                capture_kind: ByRef(\n-                    UpvarBorrow(ImmBorrow, '_#37r),\n-                ),\n-            },\n-        },\n-    ],\n-}"}, {"sha": "994e2530f7825bdea3c829efb12e48b7927e6201", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.rs?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -20,6 +20,8 @@ fn main() {\n         //~^ ERROR: attributes on expressions are experimental\n     || {\n         println!(\"{}\", w.p.x);\n+        //~^ ERROR: Capturing w[(0, 0),(0, 0)] -> ImmBorrow\n+        //~^^ ERROR: Min Capture w[(0, 0),(0, 0)] -> ImmBorrow\n     };\n \n     // `c` only captures `w.p.x`, therefore it's safe to mutate `w.p.y`."}, {"sha": "dfcd2c7a0887420a1d474c6423c4920de72d97d5", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-2.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stderr?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -16,6 +16,18 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: aborting due to previous error; 1 warning emitted\n+error: Capturing w[(0, 0),(0, 0)] -> ImmBorrow\n+  --> $DIR/multilevel-path-2.rs:22:24\n+   |\n+LL |         println!(\"{}\", w.p.x);\n+   |                        ^^^^^\n+\n+error: Min Capture w[(0, 0),(0, 0)] -> ImmBorrow\n+  --> $DIR/multilevel-path-2.rs:22:24\n+   |\n+LL |         println!(\"{}\", w.p.x);\n+   |                        ^^^^^\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "576d2c36b6f25b819a1fe5d3da03ba0d172817e3", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-2.stdout", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -1,77 +0,0 @@\n-For closure=DefId(0:9 ~ multilevel_path_2[317d]::main::{closure#0}): Using new-style capture analysis\n-For closure=DefId(0:9 ~ multilevel_path_2[317d]::main::{closure#0}): capture information: {\n-    Place {\n-        base_ty: Wrapper,\n-        base: Upvar(\n-            UpvarId(HirId { owner: DefId(0:8 ~ multilevel_path_2[317d]::main), local_id: 1 };`w`;DefId(0:9 ~ multilevel_path_2[317d]::main::{closure#0})),\n-        ),\n-        projections: [\n-            Projection {\n-                ty: Point,\n-                kind: Field(\n-                    0,\n-                    0,\n-                ),\n-            },\n-            Projection {\n-                ty: i32,\n-                kind: Field(\n-                    0,\n-                    0,\n-                ),\n-            },\n-        ],\n-    }: CaptureInfo {\n-        expr_id: Some(\n-            HirId {\n-                owner: DefId(0:8 ~ multilevel_path_2[317d]::main),\n-                local_id: 35,\n-            },\n-        ),\n-        capture_kind: ByRef(\n-            UpvarBorrow(ImmBorrow, '_#35r),\n-        ),\n-    },\n-}\n-For closure=DefId(0:9 ~ multilevel_path_2[317d]::main::{closure#0}): min_captures={\n-    HirId {\n-        owner: DefId(0:8 ~ multilevel_path_2[317d]::main),\n-        local_id: 1,\n-    }: [\n-        CapturedPlace {\n-            place: Place {\n-                base_ty: Wrapper,\n-                base: Upvar(\n-                    UpvarId(HirId { owner: DefId(0:8 ~ multilevel_path_2[317d]::main), local_id: 1 };`w`;DefId(0:9 ~ multilevel_path_2[317d]::main::{closure#0})),\n-                ),\n-                projections: [\n-                    Projection {\n-                        ty: Point,\n-                        kind: Field(\n-                            0,\n-                            0,\n-                        ),\n-                    },\n-                    Projection {\n-                        ty: i32,\n-                        kind: Field(\n-                            0,\n-                            0,\n-                        ),\n-                    },\n-                ],\n-            },\n-            info: CaptureInfo {\n-                expr_id: Some(\n-                    HirId {\n-                        owner: DefId(0:8 ~ multilevel_path_2[317d]::main),\n-                        local_id: 35,\n-                    },\n-                ),\n-                capture_kind: ByRef(\n-                    UpvarBorrow(ImmBorrow, '_#35r),\n-                ),\n-            },\n-        },\n-    ],\n-}"}, {"sha": "8641d6b4f59fb599c85e400fd5eb1bc6b51edab1", "filename": "src/test/ui/closures/2229_closure_analysis/nested-closure.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.rs?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -22,10 +22,18 @@ fn main() {\n         //~^ ERROR: attributes on expressions are experimental\n     || {\n         println!(\"{}\", p.x);\n+        //~^ ERROR: Capturing p[(0, 0)] -> ImmBorrow\n+        //~^^ ERROR: Min Capture p[(0, 0)] -> ImmBorrow\n         let incr = 10;\n         let mut c2 = #[rustc_capture_analysis]\n         //~^ ERROR: attributes on expressions are experimental\n         || p.y += incr;\n+        //~^ ERROR: Capturing p[(1, 0)] -> MutBorrow\n+        //~^^ ERROR: Capturing incr[] -> ImmBorrow\n+        //~^^^ ERROR: Min Capture p[(1, 0)] -> MutBorrow\n+        //~^^^^ ERROR: Min Capture incr[] -> ImmBorrow\n+        //~^^^^^ ERROR: Capturing p[(1, 0)] -> MutBorrow\n+        //~^^^^^^ ERROR: Min Capture p[(1, 0)] -> MutBorrow\n         c2();\n         println!(\"{}\", p.y);\n     };"}, {"sha": "2368a450bc6fb69678861d57bc270a6b5b165c45", "filename": "src/test/ui/closures/2229_closure_analysis/nested-closure.stderr", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stderr?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/nested-closure.rs:19:18\n+  --> $DIR/nested-closure.rs:21:18\n    |\n LL |     let mut c1 = #[rustc_capture_analysis]\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     let mut c1 = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/nested-closure.rs:24:22\n+  --> $DIR/nested-closure.rs:28:22\n    |\n LL |         let mut c2 = #[rustc_capture_analysis]\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,14 +17,62 @@ LL |         let mut c2 = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/nested-closure.rs:1:12\n+  --> $DIR/nested-closure.rs:3:12\n    |\n LL | #![feature(capture_disjoint_fields)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: Capturing p[(1, 0)] -> MutBorrow\n+  --> $DIR/nested-closure.rs:30:12\n+   |\n+LL |         || p.y += incr;\n+   |            ^^^\n+\n+error: Capturing incr[] -> ImmBorrow\n+  --> $DIR/nested-closure.rs:30:19\n+   |\n+LL |         || p.y += incr;\n+   |                   ^^^^\n+\n+error: Min Capture p[(1, 0)] -> MutBorrow\n+  --> $DIR/nested-closure.rs:30:12\n+   |\n+LL |         || p.y += incr;\n+   |            ^^^\n+\n+error: Min Capture incr[] -> ImmBorrow\n+  --> $DIR/nested-closure.rs:30:19\n+   |\n+LL |         || p.y += incr;\n+   |                   ^^^^\n+\n+error: Capturing p[(0, 0)] -> ImmBorrow\n+  --> $DIR/nested-closure.rs:24:24\n+   |\n+LL |         println!(\"{}\", p.x);\n+   |                        ^^^\n+\n+error: Capturing p[(1, 0)] -> MutBorrow\n+  --> $DIR/nested-closure.rs:30:12\n+   |\n+LL |         || p.y += incr;\n+   |            ^^^\n+\n+error: Min Capture p[(0, 0)] -> ImmBorrow\n+  --> $DIR/nested-closure.rs:24:24\n+   |\n+LL |         println!(\"{}\", p.x);\n+   |                        ^^^\n+\n+error: Min Capture p[(1, 0)] -> MutBorrow\n+  --> $DIR/nested-closure.rs:30:12\n+   |\n+LL |         || p.y += incr;\n+   |            ^^^\n+\n+error: aborting due to 10 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "446419c75f5eb6f2fe9d7d0962954ff818564170", "filename": "src/test/ui/closures/2229_closure_analysis/nested-closure.stdout", "status": "removed", "additions": 0, "deletions": 221, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -1,221 +0,0 @@\n-For closure=DefId(0:8 ~ nested_closure[317d]::main::{closure#0}::{closure#0}): Using new-style capture analysis\n-For closure=DefId(0:8 ~ nested_closure[317d]::main::{closure#0}::{closure#0}): capture information: {\n-    Place {\n-        base_ty: Point,\n-        base: Upvar(\n-            UpvarId(HirId { owner: DefId(0:6 ~ nested_closure[317d]::main), local_id: 1 };`p`;DefId(0:8 ~ nested_closure[317d]::main::{closure#0}::{closure#0})),\n-        ),\n-        projections: [\n-            Projection {\n-                ty: i32,\n-                kind: Field(\n-                    1,\n-                    0,\n-                ),\n-            },\n-        ],\n-    }: CaptureInfo {\n-        expr_id: Some(\n-            HirId {\n-                owner: DefId(0:6 ~ nested_closure[317d]::main),\n-                local_id: 70,\n-            },\n-        ),\n-        capture_kind: ByRef(\n-            UpvarBorrow(MutBorrow, '_#109r),\n-        ),\n-    },\n-    Place {\n-        base_ty: i32,\n-        base: Upvar(\n-            UpvarId(HirId { owner: DefId(0:6 ~ nested_closure[317d]::main), local_id: 5 };`incr`;DefId(0:8 ~ nested_closure[317d]::main::{closure#0}::{closure#0})),\n-        ),\n-        projections: [],\n-    }: CaptureInfo {\n-        expr_id: Some(\n-            HirId {\n-                owner: DefId(0:6 ~ nested_closure[317d]::main),\n-                local_id: 72,\n-            },\n-        ),\n-        capture_kind: ByRef(\n-            UpvarBorrow(ImmBorrow, '_#110r),\n-        ),\n-    },\n-}\n-For closure=DefId(0:8 ~ nested_closure[317d]::main::{closure#0}::{closure#0}): min_captures={\n-    HirId {\n-        owner: DefId(0:6 ~ nested_closure[317d]::main),\n-        local_id: 1,\n-    }: [\n-        CapturedPlace {\n-            place: Place {\n-                base_ty: Point,\n-                base: Upvar(\n-                    UpvarId(HirId { owner: DefId(0:6 ~ nested_closure[317d]::main), local_id: 1 };`p`;DefId(0:8 ~ nested_closure[317d]::main::{closure#0}::{closure#0})),\n-                ),\n-                projections: [\n-                    Projection {\n-                        ty: i32,\n-                        kind: Field(\n-                            1,\n-                            0,\n-                        ),\n-                    },\n-                ],\n-            },\n-            info: CaptureInfo {\n-                expr_id: Some(\n-                    HirId {\n-                        owner: DefId(0:6 ~ nested_closure[317d]::main),\n-                        local_id: 70,\n-                    },\n-                ),\n-                capture_kind: ByRef(\n-                    UpvarBorrow(MutBorrow, '_#109r),\n-                ),\n-            },\n-        },\n-    ],\n-    HirId {\n-        owner: DefId(0:6 ~ nested_closure[317d]::main),\n-        local_id: 5,\n-    }: [\n-        CapturedPlace {\n-            place: Place {\n-                base_ty: i32,\n-                base: Upvar(\n-                    UpvarId(HirId { owner: DefId(0:6 ~ nested_closure[317d]::main), local_id: 5 };`incr`;DefId(0:8 ~ nested_closure[317d]::main::{closure#0}::{closure#0})),\n-                ),\n-                projections: [],\n-            },\n-            info: CaptureInfo {\n-                expr_id: Some(\n-                    HirId {\n-                        owner: DefId(0:6 ~ nested_closure[317d]::main),\n-                        local_id: 72,\n-                    },\n-                ),\n-                capture_kind: ByRef(\n-                    UpvarBorrow(ImmBorrow, '_#110r),\n-                ),\n-            },\n-        },\n-    ],\n-}\n-For closure=DefId(0:7 ~ nested_closure[317d]::main::{closure#0}): Using new-style capture analysis\n-For closure=DefId(0:7 ~ nested_closure[317d]::main::{closure#0}): capture information: {\n-    Place {\n-        base_ty: Point,\n-        base: Upvar(\n-            UpvarId(HirId { owner: DefId(0:6 ~ nested_closure[317d]::main), local_id: 1 };`p`;DefId(0:7 ~ nested_closure[317d]::main::{closure#0})),\n-        ),\n-        projections: [\n-            Projection {\n-                ty: i32,\n-                kind: Field(\n-                    0,\n-                    0,\n-                ),\n-            },\n-        ],\n-    }: CaptureInfo {\n-        expr_id: Some(\n-            HirId {\n-                owner: DefId(0:6 ~ nested_closure[317d]::main),\n-                local_id: 37,\n-            },\n-        ),\n-        capture_kind: ByRef(\n-            UpvarBorrow(ImmBorrow, '_#114r),\n-        ),\n-    },\n-    Place {\n-        base_ty: Point,\n-        base: Upvar(\n-            UpvarId(HirId { owner: DefId(0:6 ~ nested_closure[317d]::main), local_id: 1 };`p`;DefId(0:7 ~ nested_closure[317d]::main::{closure#0})),\n-        ),\n-        projections: [\n-            Projection {\n-                ty: i32,\n-                kind: Field(\n-                    1,\n-                    0,\n-                ),\n-            },\n-        ],\n-    }: CaptureInfo {\n-        expr_id: Some(\n-            HirId {\n-                owner: DefId(0:6 ~ nested_closure[317d]::main),\n-                local_id: 70,\n-            },\n-        ),\n-        capture_kind: ByRef(\n-            UpvarBorrow(MutBorrow, '_#115r),\n-        ),\n-    },\n-}\n-For closure=DefId(0:7 ~ nested_closure[317d]::main::{closure#0}): min_captures={\n-    HirId {\n-        owner: DefId(0:6 ~ nested_closure[317d]::main),\n-        local_id: 1,\n-    }: [\n-        CapturedPlace {\n-            place: Place {\n-                base_ty: Point,\n-                base: Upvar(\n-                    UpvarId(HirId { owner: DefId(0:6 ~ nested_closure[317d]::main), local_id: 1 };`p`;DefId(0:7 ~ nested_closure[317d]::main::{closure#0})),\n-                ),\n-                projections: [\n-                    Projection {\n-                        ty: i32,\n-                        kind: Field(\n-                            0,\n-                            0,\n-                        ),\n-                    },\n-                ],\n-            },\n-            info: CaptureInfo {\n-                expr_id: Some(\n-                    HirId {\n-                        owner: DefId(0:6 ~ nested_closure[317d]::main),\n-                        local_id: 37,\n-                    },\n-                ),\n-                capture_kind: ByRef(\n-                    UpvarBorrow(ImmBorrow, '_#114r),\n-                ),\n-            },\n-        },\n-        CapturedPlace {\n-            place: Place {\n-                base_ty: Point,\n-                base: Upvar(\n-                    UpvarId(HirId { owner: DefId(0:6 ~ nested_closure[317d]::main), local_id: 1 };`p`;DefId(0:7 ~ nested_closure[317d]::main::{closure#0})),\n-                ),\n-                projections: [\n-                    Projection {\n-                        ty: i32,\n-                        kind: Field(\n-                            1,\n-                            0,\n-                        ),\n-                    },\n-                ],\n-            },\n-            info: CaptureInfo {\n-                expr_id: Some(\n-                    HirId {\n-                        owner: DefId(0:6 ~ nested_closure[317d]::main),\n-                        local_id: 70,\n-                    },\n-                ),\n-                capture_kind: ByRef(\n-                    UpvarBorrow(MutBorrow, '_#115r),\n-                ),\n-            },\n-        },\n-    ],\n-}"}, {"sha": "48e0698b4a750e4861ea4389fc77a3826837d76e", "filename": "src/test/ui/closures/2229_closure_analysis/path-with-array-access.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.rs?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -24,5 +24,7 @@ fn main() {\n     //~^ ERROR: attributes on expressions are experimental\n     || {\n         println!(\"{}\", pent.points[5].x);\n+        //~^ ERROR: Capturing pent[(0, 0)] -> ImmBorrow\n+        //~^^ ERROR: Min Capture pent[(0, 0)] -> ImmBorrow\n     };\n }"}, {"sha": "7507e550adeb8fa9394f8a67051dbe4547f62ef8", "filename": "src/test/ui/closures/2229_closure_analysis/path-with-array-access.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stderr?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -16,6 +16,18 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: aborting due to previous error; 1 warning emitted\n+error: Capturing pent[(0, 0)] -> ImmBorrow\n+  --> $DIR/path-with-array-access.rs:26:24\n+   |\n+LL |         println!(\"{}\", pent.points[5].x);\n+   |                        ^^^^^^^^^^^\n+\n+error: Min Capture pent[(0, 0)] -> ImmBorrow\n+  --> $DIR/path-with-array-access.rs:26:24\n+   |\n+LL |         println!(\"{}\", pent.points[5].x);\n+   |                        ^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "73f880c155afd905e25bd47fc94b2128099e3c19", "filename": "src/test/ui/closures/2229_closure_analysis/path-with-array-access.stdout", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -1,63 +0,0 @@\n-For closure=DefId(0:10 ~ path_with_array_access[317d]::main::{closure#0}): Using new-style capture analysis\n-For closure=DefId(0:10 ~ path_with_array_access[317d]::main::{closure#0}): capture information: {\n-    Place {\n-        base_ty: Pentagon,\n-        base: Upvar(\n-            UpvarId(HirId { owner: DefId(0:9 ~ path_with_array_access[317d]::main), local_id: 6 };`pent`;DefId(0:10 ~ path_with_array_access[317d]::main::{closure#0})),\n-        ),\n-        projections: [\n-            Projection {\n-                ty: [Point; 5],\n-                kind: Field(\n-                    0,\n-                    0,\n-                ),\n-            },\n-        ],\n-    }: CaptureInfo {\n-        expr_id: Some(\n-            HirId {\n-                owner: DefId(0:9 ~ path_with_array_access[317d]::main),\n-                local_id: 83,\n-            },\n-        ),\n-        capture_kind: ByRef(\n-            UpvarBorrow(ImmBorrow, '_#34r),\n-        ),\n-    },\n-}\n-For closure=DefId(0:10 ~ path_with_array_access[317d]::main::{closure#0}): min_captures={\n-    HirId {\n-        owner: DefId(0:9 ~ path_with_array_access[317d]::main),\n-        local_id: 6,\n-    }: [\n-        CapturedPlace {\n-            place: Place {\n-                base_ty: Pentagon,\n-                base: Upvar(\n-                    UpvarId(HirId { owner: DefId(0:9 ~ path_with_array_access[317d]::main), local_id: 6 };`pent`;DefId(0:10 ~ path_with_array_access[317d]::main::{closure#0})),\n-                ),\n-                projections: [\n-                    Projection {\n-                        ty: [Point; 5],\n-                        kind: Field(\n-                            0,\n-                            0,\n-                        ),\n-                    },\n-                ],\n-            },\n-            info: CaptureInfo {\n-                expr_id: Some(\n-                    HirId {\n-                        owner: DefId(0:9 ~ path_with_array_access[317d]::main),\n-                        local_id: 83,\n-                    },\n-                ),\n-                capture_kind: ByRef(\n-                    UpvarBorrow(ImmBorrow, '_#34r),\n-                ),\n-            },\n-        },\n-    ],\n-}"}, {"sha": "3d5a08344b72a19abc0fcc8c5150a6d30fa34fe5", "filename": "src/test/ui/closures/2229_closure_analysis/simple-struct-min-capture.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.rs?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -26,7 +26,10 @@ fn main() {\n         //~^ ERROR: attributes on expressions are experimental\n     || {\n         p.x += 10;\n+        //~^ ERROR: Capturing p[(0, 0)] -> MutBorrow\n+        //~^^ ERROR: Min Capture p[] -> MutBorrow\n         println!(\"{:?}\", p);\n+        //~^ ERROR: Capturing p[] -> ImmBorrow\n     };\n \n     c();"}, {"sha": "53cc681969ad04d166a1d77364fa903c0ace7dcd", "filename": "src/test/ui/closures/2229_closure_analysis/simple-struct-min-capture.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stderr?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -16,6 +16,24 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: aborting due to previous error; 1 warning emitted\n+error: Capturing p[(0, 0)] -> MutBorrow\n+  --> $DIR/simple-struct-min-capture.rs:28:9\n+   |\n+LL |         p.x += 10;\n+   |         ^^^\n+\n+error: Capturing p[] -> ImmBorrow\n+  --> $DIR/simple-struct-min-capture.rs:31:26\n+   |\n+LL |         println!(\"{:?}\", p);\n+   |                          ^\n+\n+error: Min Capture p[] -> MutBorrow\n+  --> $DIR/simple-struct-min-capture.rs:28:9\n+   |\n+LL |         p.x += 10;\n+   |         ^^^\n+\n+error: aborting due to 4 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "c0421852d93d8580dba9081ff32a1183d20874cc", "filename": "src/test/ui/closures/2229_closure_analysis/simple-struct-min-capture.stdout", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -1,72 +0,0 @@\n-For closure=DefId(0:4 ~ simple_struct_min_capture[317d]::main::{closure#0}): Using new-style capture analysis\n-For closure=DefId(0:4 ~ simple_struct_min_capture[317d]::main::{closure#0}): capture information: {\n-    Place {\n-        base_ty: Point,\n-        base: Upvar(\n-            UpvarId(HirId { owner: DefId(0:3 ~ simple_struct_min_capture[317d]::main), local_id: 1 };`p`;DefId(0:4 ~ simple_struct_min_capture[317d]::main::{closure#0})),\n-        ),\n-        projections: [\n-            Projection {\n-                ty: i32,\n-                kind: Field(\n-                    0,\n-                    0,\n-                ),\n-            },\n-        ],\n-    }: CaptureInfo {\n-        expr_id: Some(\n-            HirId {\n-                owner: DefId(0:3 ~ simple_struct_min_capture[317d]::main),\n-                local_id: 15,\n-            },\n-        ),\n-        capture_kind: ByRef(\n-            UpvarBorrow(MutBorrow, '_#34r),\n-        ),\n-    },\n-    Place {\n-        base_ty: Point,\n-        base: Upvar(\n-            UpvarId(HirId { owner: DefId(0:3 ~ simple_struct_min_capture[317d]::main), local_id: 1 };`p`;DefId(0:4 ~ simple_struct_min_capture[317d]::main::{closure#0})),\n-        ),\n-        projections: [],\n-    }: CaptureInfo {\n-        expr_id: Some(\n-            HirId {\n-                owner: DefId(0:3 ~ simple_struct_min_capture[317d]::main),\n-                local_id: 35,\n-            },\n-        ),\n-        capture_kind: ByRef(\n-            UpvarBorrow(ImmBorrow, '_#35r),\n-        ),\n-    },\n-}\n-For closure=DefId(0:4 ~ simple_struct_min_capture[317d]::main::{closure#0}): min_captures={\n-    HirId {\n-        owner: DefId(0:3 ~ simple_struct_min_capture[317d]::main),\n-        local_id: 1,\n-    }: [\n-        CapturedPlace {\n-            place: Place {\n-                base_ty: Point,\n-                base: Upvar(\n-                    UpvarId(HirId { owner: DefId(0:3 ~ simple_struct_min_capture[317d]::main), local_id: 1 };`p`;DefId(0:4 ~ simple_struct_min_capture[317d]::main::{closure#0})),\n-                ),\n-                projections: [],\n-            },\n-            info: CaptureInfo {\n-                expr_id: Some(\n-                    HirId {\n-                        owner: DefId(0:3 ~ simple_struct_min_capture[317d]::main),\n-                        local_id: 15,\n-                    },\n-                ),\n-                capture_kind: ByRef(\n-                    UpvarBorrow(MutBorrow, '_#34r),\n-                ),\n-            },\n-        },\n-    ],\n-}"}, {"sha": "4e30194b17e480659b365d9c7b78c248bc5b90ca", "filename": "src/test/ui/closures/2229_closure_analysis/slice-pat.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.rs?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -19,6 +19,8 @@ fn main() {\n     //~^ ERROR: attributes on expressions are experimental\n         || {\n             let [a, b, .., e] = arr;\n+            //~^ ERROR: Capturing arr[Index] -> ByValue\n+            //~^^ ERROR: Min Capture arr[] -> ByValue\n             assert_eq!(a, \"A\");\n             assert_eq!(b, \"B\");\n             assert_eq!(e, \"E\");"}, {"sha": "2547322a8abf25948dc5270dcbbff6e01b7bddd6", "filename": "src/test/ui/closures/2229_closure_analysis/slice-pat.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/825e9e45d14694d23fde29fdab2b02d9973a4eb3/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stderr?ref=825e9e45d14694d23fde29fdab2b02d9973a4eb3", "patch": "@@ -16,6 +16,18 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: aborting due to previous error; 1 warning emitted\n+error: Capturing arr[Index] -> ByValue\n+  --> $DIR/slice-pat.rs:21:33\n+   |\n+LL |             let [a, b, .., e] = arr;\n+   |                                 ^^^\n+\n+error: Min Capture arr[] -> ByValue\n+  --> $DIR/slice-pat.rs:21:33\n+   |\n+LL |             let [a, b, .., e] = arr;\n+   |                                 ^^^\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "43c43015134ae927c092935e41c3880ccf36008d", "filename": "src/test/ui/closures/2229_closure_analysis/slice-pat.stdout", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -1,56 +0,0 @@\n-For closure=DefId(0:5 ~ slice_pat[317d]::main::{closure#0}): Using new-style capture analysis\n-For closure=DefId(0:5 ~ slice_pat[317d]::main::{closure#0}): capture information: {\n-    Place {\n-        base_ty: [std::string::String; 5],\n-        base: Upvar(\n-            UpvarId(HirId { owner: DefId(0:3 ~ slice_pat[317d]::main), local_id: 1 };`arr`;DefId(0:5 ~ slice_pat[317d]::main::{closure#0})),\n-        ),\n-        projections: [\n-            Projection {\n-                ty: std::string::String,\n-                kind: Index,\n-            },\n-        ],\n-    }: CaptureInfo {\n-        expr_id: Some(\n-            HirId {\n-                owner: DefId(0:3 ~ slice_pat[317d]::main),\n-                local_id: 179,\n-            },\n-        ),\n-        capture_kind: ByValue(\n-            Some(\n-                $DIR/slice-pat.rs:21:33: 21:36 (#0),\n-            ),\n-        ),\n-    },\n-}\n-For closure=DefId(0:5 ~ slice_pat[317d]::main::{closure#0}): min_captures={\n-    HirId {\n-        owner: DefId(0:3 ~ slice_pat[317d]::main),\n-        local_id: 1,\n-    }: [\n-        CapturedPlace {\n-            place: Place {\n-                base_ty: [std::string::String; 5],\n-                base: Upvar(\n-                    UpvarId(HirId { owner: DefId(0:3 ~ slice_pat[317d]::main), local_id: 1 };`arr`;DefId(0:5 ~ slice_pat[317d]::main::{closure#0})),\n-                ),\n-                projections: [],\n-            },\n-            info: CaptureInfo {\n-                expr_id: Some(\n-                    HirId {\n-                        owner: DefId(0:3 ~ slice_pat[317d]::main),\n-                        local_id: 179,\n-                    },\n-                ),\n-                capture_kind: ByValue(\n-                    Some(\n-                        $DIR/slice-pat.rs:21:33: 21:36 (#0),\n-                    ),\n-                ),\n-            },\n-        },\n-    ],\n-}"}]}