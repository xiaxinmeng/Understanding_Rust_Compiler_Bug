{"sha": "c998057770737a6419880b9177317f5fced75912", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5OTgwNTc3NzA3MzdhNjQxOTg4MGI5MTc3MzE3ZjVmY2VkNzU5MTI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-10-21T11:50:38Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-11-15T17:22:32Z"}, "message": "add a global evaluation cache", "tree": {"sha": "c73cb81641a6524cc0478bacaec79b8fd3e95aad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c73cb81641a6524cc0478bacaec79b8fd3e95aad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c998057770737a6419880b9177317f5fced75912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c998057770737a6419880b9177317f5fced75912", "html_url": "https://github.com/rust-lang/rust/commit/c998057770737a6419880b9177317f5fced75912", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c998057770737a6419880b9177317f5fced75912/comments", "author": null, "committer": null, "parents": [{"sha": "8943d5a4a43c2c48474c8061b9eb2cfd6d8c0f22", "url": "https://api.github.com/repos/rust-lang/rust/commits/8943d5a4a43c2c48474c8061b9eb2cfd6d8c0f22", "html_url": "https://github.com/rust-lang/rust/commit/8943d5a4a43c2c48474c8061b9eb2cfd6d8c0f22"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "2bc1e8faddb23a3957aaae0ad357b669e3eb76d3", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c998057770737a6419880b9177317f5fced75912/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c998057770737a6419880b9177317f5fced75912/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=c998057770737a6419880b9177317f5fced75912", "patch": "@@ -659,7 +659,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn pick_evaluation_cache(&self) -> &EvaluationCache<'tcx> {\n-        &self.param_env().evaluation_cache\n+        // see comment in `pick_candidate_cache`\n+        if self.intercrate ||\n+            !self.param_env().caller_bounds.is_empty()\n+        {\n+            &self.param_env().evaluation_cache\n+        } else\n+        {\n+            &self.tcx().evaluation_cache\n+        }\n     }\n \n     fn check_evaluation_cache(&self, trait_ref: ty::PolyTraitRef<'tcx>)"}, {"sha": "e02a120a5c60fa04cb07bc73d5fa9c463ee8293a", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c998057770737a6419880b9177317f5fced75912/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c998057770737a6419880b9177317f5fced75912/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=c998057770737a6419880b9177317f5fced75912", "patch": "@@ -332,6 +332,11 @@ pub struct ctxt<'tcx> {\n     /// for things that do not have to do with the parameters in scope.\n     pub selection_cache: traits::SelectionCache<'tcx>,\n \n+    /// Caches the results of trait evaluation. This cache is used\n+    /// for things that do not have to do with the parameters in scope.\n+    /// Merge this with `selection_cache`?\n+    pub evaluation_cache: traits::EvaluationCache<'tcx>,\n+\n     /// A set of predicates that have been fulfilled *somewhere*.\n     /// This is used to avoid duplicate work. Predicates are only\n     /// added to this set when they mention only \"global\" names\n@@ -512,6 +517,7 @@ impl<'tcx> ctxt<'tcx> {\n             transmute_restrictions: RefCell::new(Vec::new()),\n             stability: RefCell::new(stability),\n             selection_cache: traits::SelectionCache::new(),\n+            evaluation_cache: traits::EvaluationCache::new(),\n             repr_hint_cache: RefCell::new(DefIdMap()),\n             const_qualif_map: RefCell::new(NodeMap()),\n             custom_coerce_unsized_kinds: RefCell::new(DefIdMap()),"}]}