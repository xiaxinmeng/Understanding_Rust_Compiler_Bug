{"sha": "309f437e1d20ce93597eec0514a9cb80150d8861", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOWY0MzdlMWQyMGNlOTM1OTdlZWMwNTE0YTljYjgwMTUwZDg4NjE=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-21T15:27:58Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-21T15:27:58Z"}, "message": "Change results to options", "tree": {"sha": "54ce99a44ab2f2f6e7280b1d18bf490470b832b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54ce99a44ab2f2f6e7280b1d18bf490470b832b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/309f437e1d20ce93597eec0514a9cb80150d8861", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niI4EABYIADYWIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXf45/hgcZ2l0QGNocmlz\ndGlhbnBvdmVkYS54eXoACgkQJ1Je9edCClA4JQEA435SA8ZUK1HKmVxmRJfTAugY\nN6jfKbmeR/jj7GT52HwBAKxTfMxpu5ug/2XgQOBPa5S9aD7ieYfN8ujiw/wldsQH\n=EL1S\n-----END PGP SIGNATURE-----", "payload": "tree 54ce99a44ab2f2f6e7280b1d18bf490470b832b4\nparent 90686ded25ee4f7f6676141a0413c066a2a4d393\nauthor Christian Poveda <git@christianpoveda.xyz> 1576942078 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1576942078 -0500\n\nChange results to options\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/309f437e1d20ce93597eec0514a9cb80150d8861", "html_url": "https://github.com/rust-lang/rust/commit/309f437e1d20ce93597eec0514a9cb80150d8861", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/309f437e1d20ce93597eec0514a9cb80150d8861/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90686ded25ee4f7f6676141a0413c066a2a4d393", "url": "https://api.github.com/repos/rust-lang/rust/commits/90686ded25ee4f7f6676141a0413c066a2a4d393", "html_url": "https://github.com/rust-lang/rust/commit/90686ded25ee4f7f6676141a0413c066a2a4d393"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "8f5fab4b002916db4a0c831ba055e027242152a5", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/309f437e1d20ce93597eec0514a9cb80150d8861/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309f437e1d20ce93597eec0514a9cb80150d8861/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=309f437e1d20ce93597eec0514a9cb80150d8861", "patch": "@@ -237,12 +237,12 @@ impl<'tcx, Tag> Scalar<Tag> {\n     }\n \n     #[inline]\n-    pub fn try_from_uint(i: impl Into<u128>, size: Size) -> InterpResult<'tcx, Self> {\n+    pub fn try_from_uint(i: impl Into<u128>, size: Size) -> Option<Self> {\n         let i = i.into();\n         if truncate(i, size) == i {\n-            Ok(Scalar::Raw { data: i, size: size.bytes() as u8 })\n+            Some(Scalar::Raw { data: i, size: size.bytes() as u8 })\n         } else {\n-            throw_unsup_format!(\"Unsigned value {:#x} does not fit in {} bits\", i, size.bits())\n+            None\n         }\n     }\n \n@@ -272,14 +272,14 @@ impl<'tcx, Tag> Scalar<Tag> {\n     }\n \n     #[inline]\n-    pub fn try_from_int(i: impl Into<i128>, size: Size) -> InterpResult<'tcx, Self> {\n+    pub fn try_from_int(i: impl Into<i128>, size: Size) -> Option<Self> {\n         let i = i.into();\n         // `into` performed sign extension, we have to truncate\n         let truncated = truncate(i as u128, size);\n         if sign_extend(truncated, size) as i128 == i {\n-            Ok(Scalar::Raw { data: truncated, size: size.bytes() as u8 })\n+            Some(Scalar::Raw { data: truncated, size: size.bytes() as u8 })\n         } else {\n-            throw_unsup_format!(\"Signed value {:#x} does not fit in {} bits\", i, size.bits())\n+            None\n         }\n     }\n "}, {"sha": "8dd50958350bbf1edbc2b7763265efa115d7b485", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/309f437e1d20ce93597eec0514a9cb80150d8861/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309f437e1d20ce93597eec0514a9cb80150d8861/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=309f437e1d20ce93597eec0514a9cb80150d8861", "patch": "@@ -219,17 +219,17 @@ impl<'tcx, Tag: Copy> ImmTy<'tcx, Tag> {\n     }\n \n     #[inline]\n-    pub fn try_from_uint(i: impl Into<u128>, layout: TyLayout<'tcx>) -> InterpResult<'tcx, Self> {\n-        Ok(Self::from_scalar(Scalar::try_from_uint(i, layout.size)?, layout))\n+    pub fn try_from_uint(i: impl Into<u128>, layout: TyLayout<'tcx>) -> Option<Self> {\n+        Some(Self::from_scalar(Scalar::try_from_uint(i, layout.size)?, layout))\n     }\n     #[inline]\n     pub fn from_uint(i: impl Into<u128>, layout: TyLayout<'tcx>) -> Self {\n         Self::try_from_uint(i, layout).unwrap()\n     }\n \n     #[inline]\n-    pub fn try_from_int(i: impl Into<i128>, layout: TyLayout<'tcx>) -> InterpResult<'tcx, Self> {\n-        Ok(Self::from_scalar(Scalar::try_from_int(i, layout.size)?, layout))\n+    pub fn try_from_int(i: impl Into<i128>, layout: TyLayout<'tcx>) -> Option<Self> {\n+        Some(Self::from_scalar(Scalar::try_from_int(i, layout.size)?, layout))\n     }\n \n     #[inline]"}]}