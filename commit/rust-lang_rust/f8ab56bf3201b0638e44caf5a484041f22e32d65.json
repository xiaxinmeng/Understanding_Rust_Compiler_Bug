{"sha": "f8ab56bf3201b0638e44caf5a484041f22e32d65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YWI1NmJmMzIwMWIwNjM4ZTQ0Y2FmNWE0ODQwNDFmMjJlMzJkNjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-01T03:41:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-01T03:41:31Z"}, "message": "Auto merge of #79576 - m-ou-se:2021, r=Mark-Simulacrum\n\nAdd edition 2021.\n\n:fireworks: Happy new ~~year~~ Rust. :champagne:\n\nThis adds --edition=2021, and updates suggestions about 2018 to say \"2018 *or later*\".\n\nRelated Cargo PR: https://github.com/rust-lang/cargo/pull/8922\n\n---\n\nEdit: This adds the new edition as *unstable*. Without `-Z unstable-options`, `--edition=2021` results in:\n```\n$ rustc --edition=2021\nerror: edition 2021 is unstable and only available with -Z unstable-options.\n```", "tree": {"sha": "2db271db195f182297ed2c2858426c43ec578f86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2db271db195f182297ed2c2858426c43ec578f86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8ab56bf3201b0638e44caf5a484041f22e32d65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ab56bf3201b0638e44caf5a484041f22e32d65", "html_url": "https://github.com/rust-lang/rust/commit/f8ab56bf3201b0638e44caf5a484041f22e32d65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8ab56bf3201b0638e44caf5a484041f22e32d65/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99ad5a1a2824fea1ecf60068fd3636beae7ea2da", "url": "https://api.github.com/repos/rust-lang/rust/commits/99ad5a1a2824fea1ecf60068fd3636beae7ea2da", "html_url": "https://github.com/rust-lang/rust/commit/99ad5a1a2824fea1ecf60068fd3636beae7ea2da"}, {"sha": "3cbdbe8dcd6a61154b7b5a74707e9e4274df5ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cbdbe8dcd6a61154b7b5a74707e9e4274df5ed8", "html_url": "https://github.com/rust-lang/rust/commit/3cbdbe8dcd6a61154b7b5a74707e9e4274df5ed8"}], "stats": {"total": 146, "additions": 87, "deletions": 59}, "files": [{"sha": "b311f9fdcb966bc420c33367a1b35a06371a2e00", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -726,8 +726,7 @@ impl NonterminalKind {\n                 Edition::Edition2015 | Edition::Edition2018 => {\n                     NonterminalKind::Pat2018 { inferred: true }\n                 }\n-                // FIXME(mark-i-m): uncomment when 2021 machinery is available.\n-                //Edition::Edition2021 => NonterminalKind::Pat2021{inferred:true},\n+                Edition::Edition2021 => NonterminalKind::Pat2021 { inferred: true },\n             },\n             sym::pat2018 => NonterminalKind::Pat2018 { inferred: false },\n             sym::pat2021 => NonterminalKind::Pat2021 { inferred: false },"}, {"sha": "d11db74a3bd22dab0ff3030702b67840409febd4", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -15,6 +15,7 @@ use rustc_ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, MacCall, Param, Ty\n use rustc_ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{Applicability, DiagnosticBuilder, PResult};\n+use rustc_span::edition::LATEST_STABLE_EDITION;\n use rustc_span::source_map::{self, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Pos};\n@@ -2108,8 +2109,8 @@ impl<'a> Parser<'a> {\n \n         let mut async_block_err = |e: &mut DiagnosticBuilder<'_>, span: Span| {\n             recover_async = true;\n-            e.span_label(span, \"`async` blocks are only allowed in the 2018 edition\");\n-            e.help(\"set `edition = \\\"2018\\\"` in `Cargo.toml`\");\n+            e.span_label(span, \"`async` blocks are only allowed in Rust 2018 or later\");\n+            e.help(&format!(\"set `edition = \\\"{}\\\"` in `Cargo.toml`\", LATEST_STABLE_EDITION));\n             e.note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\");\n         };\n "}, {"sha": "e49b1a54e9b123113ba6af7c0ec6e5ec5f8f09eb", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -16,7 +16,7 @@ use rustc_ast::{FnHeader, ForeignItem, Path, PathSegment, Visibility, Visibility\n use rustc_ast::{MacArgs, MacCall, MacDelimiter};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, PResult, StashKey};\n-use rustc_span::edition::Edition;\n+use rustc_span::edition::{Edition, LATEST_STABLE_EDITION};\n use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n \n@@ -1667,9 +1667,9 @@ impl<'a> Parser<'a> {\n     fn ban_async_in_2015(&self, span: Span) {\n         if span.rust_2015() {\n             let diag = self.diagnostic();\n-            struct_span_err!(diag, span, E0670, \"`async fn` is not permitted in the 2015 edition\")\n-                .span_label(span, \"to use `async fn`, switch to Rust 2018\")\n-                .help(\"set `edition = \\\"2018\\\"` in `Cargo.toml`\")\n+            struct_span_err!(diag, span, E0670, \"`async fn` is not permitted in Rust 2015\")\n+                .span_label(span, \"to use `async fn`, switch to Rust 2018 or later\")\n+                .help(&format!(\"set `edition = \\\"{}\\\"` in `Cargo.toml`\", LATEST_STABLE_EDITION))\n                 .note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\")\n                 .emit();\n         }"}, {"sha": "55623c9bd9cf66f07ec1c70c6ce8222b144376af", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -180,7 +180,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             (\n                 format!(\"cannot find {} `{}` in {}{}\", expected, item_str, mod_prefix, mod_str),\n                 if path_str == \"async\" && expected.starts_with(\"struct\") {\n-                    \"`async` blocks are only allowed in the 2018 edition\".to_string()\n+                    \"`async` blocks are only allowed in Rust 2018 or later\".to_string()\n                 } else {\n                     format!(\"not found in {}\", mod_str)\n                 },\n@@ -904,7 +904,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     Applicability::MaybeIncorrect,\n                 );\n                 if path_str == \"try\" && span.rust_2015() {\n-                    err.note(\"if you want the `try` keyword, you need to be in the 2018 edition\");\n+                    err.note(\"if you want the `try` keyword, you need Rust 2018 or later\");\n                 }\n             }\n             (Res::Def(DefKind::TyAlias, def_id), PathSource::Trait(_)) => {"}, {"sha": "62859f4bef430ab70db3c8857ef24426f155168a", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -1308,12 +1308,11 @@ fn parse_crate_edition(matches: &getopts::Matches) -> Edition {\n         None => DEFAULT_EDITION,\n     };\n \n-    if !edition.is_stable() && !nightly_options::match_is_nightly_build(matches) {\n+    if !edition.is_stable() && !nightly_options::is_unstable_enabled(matches) {\n         early_error(\n             ErrorOutputType::default(),\n             &format!(\n-                \"edition {} is unstable and only \\\n-                     available for nightly builds of rustc.\",\n+                \"edition {} is unstable and only available with -Z unstable-options.\",\n                 edition,\n             ),\n         )"}, {"sha": "3a420f5f9def7a8412abecac921150060b3f7efd", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -1076,6 +1076,11 @@ impl Session {\n         self.opts.edition >= Edition::Edition2018\n     }\n \n+    /// Are we allowed to use features from the Rust 2021 edition?\n+    pub fn rust_2021(&self) -> bool {\n+        self.opts.edition >= Edition::Edition2021\n+    }\n+\n     pub fn edition(&self) -> Edition {\n         self.opts.edition\n     }"}, {"sha": "a9200dd7dfd6e196e417d6def64c5e39d6ea20af", "filename": "compiler/rustc_span/src/edition.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fedition.rs?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -20,20 +20,26 @@ pub enum Edition {\n     Edition2015,\n     /// The 2018 edition\n     Edition2018,\n+    /// The 2021 ediiton\n+    Edition2021,\n }\n \n // Must be in order from oldest to newest.\n-pub const ALL_EDITIONS: &[Edition] = &[Edition::Edition2015, Edition::Edition2018];\n+pub const ALL_EDITIONS: &[Edition] =\n+    &[Edition::Edition2015, Edition::Edition2018, Edition::Edition2021];\n \n-pub const EDITION_NAME_LIST: &str = \"2015|2018\";\n+pub const EDITION_NAME_LIST: &str = \"2015|2018|2021\";\n \n pub const DEFAULT_EDITION: Edition = Edition::Edition2015;\n \n+pub const LATEST_STABLE_EDITION: Edition = Edition::Edition2018;\n+\n impl fmt::Display for Edition {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let s = match *self {\n             Edition::Edition2015 => \"2015\",\n             Edition::Edition2018 => \"2018\",\n+            Edition::Edition2021 => \"2021\",\n         };\n         write!(f, \"{}\", s)\n     }\n@@ -44,20 +50,23 @@ impl Edition {\n         match *self {\n             Edition::Edition2015 => \"rust_2015_compatibility\",\n             Edition::Edition2018 => \"rust_2018_compatibility\",\n+            Edition::Edition2021 => \"rust_2021_compatibility\",\n         }\n     }\n \n     pub fn feature_name(&self) -> Symbol {\n         match *self {\n             Edition::Edition2015 => sym::rust_2015_preview,\n             Edition::Edition2018 => sym::rust_2018_preview,\n+            Edition::Edition2021 => sym::rust_2021_preview,\n         }\n     }\n \n     pub fn is_stable(&self) -> bool {\n         match *self {\n             Edition::Edition2015 => true,\n             Edition::Edition2018 => true,\n+            Edition::Edition2021 => false,\n         }\n     }\n }\n@@ -68,6 +77,7 @@ impl FromStr for Edition {\n         match s {\n             \"2015\" => Ok(Edition::Edition2015),\n             \"2018\" => Ok(Edition::Edition2018),\n+            \"2021\" => Ok(Edition::Edition2021),\n             _ => Err(()),\n         }\n     }"}, {"sha": "99f01062545a76906b764679388405d5aa702412", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -481,6 +481,11 @@ impl Span {\n         self.edition() >= edition::Edition::Edition2018\n     }\n \n+    #[inline]\n+    pub fn rust_2021(&self) -> bool {\n+        self.edition() >= edition::Edition::Edition2021\n+    }\n+\n     /// Returns the source callee.\n     ///\n     /// Returns `None` if the supplied span has no expansion trace,"}, {"sha": "b040a70437d9ea300cc64dcbf8b3759dc37e508a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -923,6 +923,7 @@ symbols! {\n         rust,\n         rust_2015_preview,\n         rust_2018_preview,\n+        rust_2021_preview,\n         rust_begin_unwind,\n         rust_eh_catch_typeinfo,\n         rust_eh_personality,"}, {"sha": "8197d02ec594b2332fd81bd4aa5b812062235baf", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -38,6 +38,7 @@ use rustc_middle::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase};\n use rustc_middle::ty::Ty;\n use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{AdtKind, Visibility};\n+use rustc_span::edition::LATEST_STABLE_EDITION;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::Span;\n@@ -1637,8 +1638,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if field.name == kw::Await {\n             // We know by construction that `<expr>.await` is either on Rust 2015\n             // or results in `ExprKind::Await`. Suggest switching the edition to 2018.\n-            err.note(\"to `.await` a `Future`, switch to Rust 2018\");\n-            err.help(\"set `edition = \\\"2018\\\"` in `Cargo.toml`\");\n+            err.note(\"to `.await` a `Future`, switch to Rust 2018 or later\");\n+            err.help(&format!(\"set `edition = \\\"{}\\\"` in `Cargo.toml`\", LATEST_STABLE_EDITION));\n             err.note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\");\n         }\n "}, {"sha": "e5dc9c8a5fee8bee0aaafc2528c9b22e494065e3", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -1,38 +1,38 @@\n // edition:2015\n \n-async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+async fn foo() {} //~ ERROR `async fn` is not permitted in Rust 2015\n \n-fn baz() { async fn foo() {} } //~ ERROR `async fn` is not permitted in the 2015 edition\n+fn baz() { async fn foo() {} } //~ ERROR `async fn` is not permitted in Rust 2015\n \n-async fn async_baz() { //~ ERROR `async fn` is not permitted in the 2015 edition\n-    async fn bar() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+async fn async_baz() { //~ ERROR `async fn` is not permitted in Rust 2015\n+    async fn bar() {} //~ ERROR `async fn` is not permitted in Rust 2015\n }\n \n struct Foo {}\n \n impl Foo {\n-    async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+    async fn foo() {} //~ ERROR `async fn` is not permitted in Rust 2015\n }\n \n trait Bar {\n-    async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+    async fn foo() {} //~ ERROR `async fn` is not permitted in Rust 2015\n                       //~^ ERROR functions in traits cannot be declared `async`\n }\n \n fn main() {\n     macro_rules! accept_item { ($x:item) => {} }\n \n     accept_item! {\n-        async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+        async fn foo() {} //~ ERROR `async fn` is not permitted in Rust 2015\n     }\n \n     accept_item! {\n         impl Foo {\n-            async fn bar() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+            async fn bar() {} //~ ERROR `async fn` is not permitted in Rust 2015\n         }\n     }\n \n     let inside_closure = || {\n-        async fn bar() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+        async fn bar() {} //~ ERROR `async fn` is not permitted in Rust 2015\n     };\n }"}, {"sha": "43364a8e85896071df82add403f150d1c053855c", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -1,80 +1,80 @@\n-error[E0670]: `async fn` is not permitted in the 2015 edition\n+error[E0670]: `async fn` is not permitted in Rust 2015\n   --> $DIR/edition-deny-async-fns-2015.rs:3:1\n    |\n LL | async fn foo() {}\n-   | ^^^^^ to use `async fn`, switch to Rust 2018\n+   | ^^^^^ to use `async fn`, switch to Rust 2018 or later\n    |\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0670]: `async fn` is not permitted in the 2015 edition\n+error[E0670]: `async fn` is not permitted in Rust 2015\n   --> $DIR/edition-deny-async-fns-2015.rs:5:12\n    |\n LL | fn baz() { async fn foo() {} }\n-   |            ^^^^^ to use `async fn`, switch to Rust 2018\n+   |            ^^^^^ to use `async fn`, switch to Rust 2018 or later\n    |\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0670]: `async fn` is not permitted in the 2015 edition\n+error[E0670]: `async fn` is not permitted in Rust 2015\n   --> $DIR/edition-deny-async-fns-2015.rs:7:1\n    |\n LL | async fn async_baz() {\n-   | ^^^^^ to use `async fn`, switch to Rust 2018\n+   | ^^^^^ to use `async fn`, switch to Rust 2018 or later\n    |\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0670]: `async fn` is not permitted in the 2015 edition\n+error[E0670]: `async fn` is not permitted in Rust 2015\n   --> $DIR/edition-deny-async-fns-2015.rs:8:5\n    |\n LL |     async fn bar() {}\n-   |     ^^^^^ to use `async fn`, switch to Rust 2018\n+   |     ^^^^^ to use `async fn`, switch to Rust 2018 or later\n    |\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0670]: `async fn` is not permitted in the 2015 edition\n+error[E0670]: `async fn` is not permitted in Rust 2015\n   --> $DIR/edition-deny-async-fns-2015.rs:14:5\n    |\n LL |     async fn foo() {}\n-   |     ^^^^^ to use `async fn`, switch to Rust 2018\n+   |     ^^^^^ to use `async fn`, switch to Rust 2018 or later\n    |\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0670]: `async fn` is not permitted in the 2015 edition\n+error[E0670]: `async fn` is not permitted in Rust 2015\n   --> $DIR/edition-deny-async-fns-2015.rs:18:5\n    |\n LL |     async fn foo() {}\n-   |     ^^^^^ to use `async fn`, switch to Rust 2018\n+   |     ^^^^^ to use `async fn`, switch to Rust 2018 or later\n    |\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0670]: `async fn` is not permitted in the 2015 edition\n+error[E0670]: `async fn` is not permitted in Rust 2015\n   --> $DIR/edition-deny-async-fns-2015.rs:36:9\n    |\n LL |         async fn bar() {}\n-   |         ^^^^^ to use `async fn`, switch to Rust 2018\n+   |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n    |\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0670]: `async fn` is not permitted in the 2015 edition\n+error[E0670]: `async fn` is not permitted in Rust 2015\n   --> $DIR/edition-deny-async-fns-2015.rs:26:9\n    |\n LL |         async fn foo() {}\n-   |         ^^^^^ to use `async fn`, switch to Rust 2018\n+   |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n    |\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0670]: `async fn` is not permitted in the 2015 edition\n+error[E0670]: `async fn` is not permitted in Rust 2015\n   --> $DIR/edition-deny-async-fns-2015.rs:31:13\n    |\n LL |             async fn bar() {}\n-   |             ^^^^^ to use `async fn`, switch to Rust 2018\n+   |             ^^^^^ to use `async fn`, switch to Rust 2018 or later\n    |\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide"}, {"sha": "9ac2bc5cc89648f34f1d58d2b0a5694baf8640a5", "filename": "src/test/ui/async-await/suggest-switching-edition-on-await.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-switching-edition-on-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-switching-edition-on-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-switching-edition-on-await.stderr?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -4,7 +4,7 @@ error[E0609]: no field `await` on type `await_on_struct_missing::S`\n LL |     x.await;\n    |       ^^^^^ unknown field\n    |\n-   = note: to `.await` a `Future`, switch to Rust 2018\n+   = note: to `.await` a `Future`, switch to Rust 2018 or later\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n@@ -14,7 +14,7 @@ error[E0609]: no field `await` on type `await_on_struct_similar::S`\n LL |     x.await;\n    |       ^^^^^ help: a field with a similar name exists: `awai`\n    |\n-   = note: to `.await` a `Future`, switch to Rust 2018\n+   = note: to `.await` a `Future`, switch to Rust 2018 or later\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n@@ -24,7 +24,7 @@ error[E0609]: no field `await` on type `Pin<&mut dyn Future<Output = ()>>`\n LL |     x.await;\n    |       ^^^^^ unknown field\n    |\n-   = note: to `.await` a `Future`, switch to Rust 2018\n+   = note: to `.await` a `Future`, switch to Rust 2018 or later\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n@@ -34,7 +34,7 @@ error[E0609]: no field `await` on type `impl Future<Output = ()>`\n LL |     x.await;\n    |       ^^^^^\n    |\n-   = note: to `.await` a `Future`, switch to Rust 2018\n+   = note: to `.await` a `Future`, switch to Rust 2018 or later\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n "}, {"sha": "92eae9e3c14f8ca4df0e01a23a461fff82cd65bf", "filename": "src/test/ui/editions/async-block-2015.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.rs?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -1,21 +1,21 @@\n async fn foo() {\n-//~^ ERROR `async fn` is not permitted in the 2015 edition\n-//~| NOTE to use `async fn`, switch to Rust 2018\n+//~^ ERROR `async fn` is not permitted in Rust 2015\n+//~| NOTE to use `async fn`, switch to Rust 2018 or later\n //~| HELP set `edition = \"2018\"` in `Cargo.toml`\n //~| NOTE for more on editions, read https://doc.rust-lang.org/edition-guide\n \n     let x = async {};\n     //~^ ERROR cannot find struct, variant or union type `async` in this scope\n-    //~| NOTE `async` blocks are only allowed in the 2018 edition\n-    let y = async { //~ NOTE `async` blocks are only allowed in the 2018 edition\n+    //~| NOTE `async` blocks are only allowed in Rust 2018 or later\n+    let y = async { //~ NOTE `async` blocks are only allowed in Rust 2018 or later\n         let x = 42;\n         //~^ ERROR expected identifier, found keyword `let`\n         //~| NOTE expected identifier, found keyword\n         //~| HELP set `edition = \"2018\"` in `Cargo.toml`\n         //~| NOTE for more on editions, read https://doc.rust-lang.org/edition-guide\n         42\n     };\n-    let z = async { //~ NOTE `async` blocks are only allowed in the 2018 edition\n+    let z = async { //~ NOTE `async` blocks are only allowed in Rust 2018 or later\n         42\n         //~^ ERROR expected identifier, found `42`\n         //~| NOTE expected identifier"}, {"sha": "e42747c804c714c0ceb98052838b4562d53926f2", "filename": "src/test/ui/editions/async-block-2015.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.stderr?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -1,8 +1,8 @@\n-error[E0670]: `async fn` is not permitted in the 2015 edition\n+error[E0670]: `async fn` is not permitted in Rust 2015\n   --> $DIR/async-block-2015.rs:1:1\n    |\n LL | async fn foo() {\n-   | ^^^^^ to use `async fn`, switch to Rust 2018\n+   | ^^^^^ to use `async fn`, switch to Rust 2018 or later\n    |\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n@@ -11,7 +11,7 @@ error: expected identifier, found keyword `let`\n   --> $DIR/async-block-2015.rs:11:9\n    |\n LL |     let y = async {\n-   |             ----- `async` blocks are only allowed in the 2018 edition\n+   |             ----- `async` blocks are only allowed in Rust 2018 or later\n LL |         let x = 42;\n    |         ^^^ expected identifier, found keyword\n    |\n@@ -22,7 +22,7 @@ error: expected identifier, found `42`\n   --> $DIR/async-block-2015.rs:19:9\n    |\n LL |     let z = async {\n-   |             ----- `async` blocks are only allowed in the 2018 edition\n+   |             ----- `async` blocks are only allowed in Rust 2018 or later\n LL |         42\n    |         ^^ expected identifier\n    |\n@@ -33,7 +33,7 @@ error[E0422]: cannot find struct, variant or union type `async` in this scope\n   --> $DIR/async-block-2015.rs:7:13\n    |\n LL |     let x = async {};\n-   |             ^^^^^ `async` blocks are only allowed in the 2018 edition\n+   |             ^^^^^ `async` blocks are only allowed in Rust 2018 or later\n \n error: aborting due to 4 previous errors\n "}, {"sha": "738f151b0f60b17c8aee1845f5123bb30114a8b2", "filename": "src/test/ui/hello2021.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/src%2Ftest%2Fui%2Fhello2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/src%2Ftest%2Fui%2Fhello2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhello2021.rs?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -0,0 +1,7 @@\n+// run-pass\n+// edition:2021\n+// compile-flags: -Zunstable-options\n+\n+fn main() {\n+    println!(\"hello, 2021\");\n+}"}, {"sha": "0f3c14b1386e79bdc24d38e08f997e612c2d59d3", "filename": "src/test/ui/try-block/try-block-in-edition2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8ab56bf3201b0638e44caf5a484041f22e32d65/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8ab56bf3201b0638e44caf5a484041f22e32d65/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr?ref=f8ab56bf3201b0638e44caf5a484041f22e32d65", "patch": "@@ -13,7 +13,7 @@ error[E0574]: expected struct, variant or union type, found macro `try`\n LL |     let try_result: Option<_> = try {\n    |                                 ^^^ not a struct, variant or union type\n    |\n-   = note: if you want the `try` keyword, you need to be in the 2018 edition\n+   = note: if you want the `try` keyword, you need Rust 2018 or later\n help: use `!` to invoke the macro\n    |\n LL |     let try_result: Option<_> = try! {"}]}