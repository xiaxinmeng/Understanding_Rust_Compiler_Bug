{"sha": "69bd13f233d2cf5ceaf358f69c8e0902f79be73c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YmQxM2YyMzNkMmNmNWNlYWYzNThmNjljOGUwOTAyZjc5YmU3M2M=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-06-07T03:06:21Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-16T22:26:57Z"}, "message": "Use DefId for modules", "tree": {"sha": "9ef70e3055b868a856a2ad68e4e6a665d87b9370", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ef70e3055b868a856a2ad68e4e6a665d87b9370"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69bd13f233d2cf5ceaf358f69c8e0902f79be73c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69bd13f233d2cf5ceaf358f69c8e0902f79be73c", "html_url": "https://github.com/rust-lang/rust/commit/69bd13f233d2cf5ceaf358f69c8e0902f79be73c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69bd13f233d2cf5ceaf358f69c8e0902f79be73c/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "848a766e24b799d27e7ae7479cd1f8c07047a53e", "url": "https://api.github.com/repos/rust-lang/rust/commits/848a766e24b799d27e7ae7479cd1f8c07047a53e", "html_url": "https://github.com/rust-lang/rust/commit/848a766e24b799d27e7ae7479cd1f8c07047a53e"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "3c2e3eabf9f24f9e10bc9957ff9d409ec3839db8", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/69bd13f233d2cf5ceaf358f69c8e0902f79be73c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bd13f233d2cf5ceaf358f69c8e0902f79be73c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=69bd13f233d2cf5ceaf358f69c8e0902f79be73c", "patch": "@@ -167,7 +167,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         disambiguator: Option<&str>,\n         ns: Namespace,\n         current_item: &Option<String>,\n-        mut parent_id: Option<hir::HirId>,\n+        mut parent_id: Option<DefId>,\n         extra_fragment: &Option<String>,\n         item_opt: Option<&Item>,\n     ) -> Result<(Res, Option<String>), ErrorKind> {\n@@ -178,8 +178,10 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         // In case this is a re-export, try to resolve the docs relative to the original module.\n         // Since we don't document `use` statements,\n         // we don't have to consider the case where an item is documented in both the original module and the current module.\n+        /*\n         let mut module_id = None;\n         if let Some(item) = item_opt {\n+            debug!(\"resolving {:?} with item kind {:?}\", path_str, item.inner);\n             if let ItemEnum::ImportItem(import) = &item.inner {\n                 if let Import::Simple(_, source) = import {\n                     if let Some(def_id) = source.did {\n@@ -214,6 +216,8 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 } else {\n                     debug!(\"glob imports not handled for intra-doc links\");\n                 }\n+            } else {\n+                //debug!(\"item.inner not an import ({:?})\", item.inner);\n             }\n             /*\n             if let Some(reexport) = item.reexport {\n@@ -257,13 +261,14 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             }\n             */\n         }\n+        */\n \n         // In case we're in a module, try to resolve the relative path.\n-        if module_id.is_none() {\n-            let id = parent_id.or(self.mod_ids.last().cloned());\n-            module_id = id.map(|id| cx.tcx.hir().local_def_id(id).to_def_id());\n+        if parent_id.is_none() {\n+            let id = self.mod_ids.last().cloned();\n+            parent_id = id.map(|id| cx.tcx.hir().local_def_id(id).to_def_id());\n         }\n-        if let Some(module_id) = module_id {\n+        if let Some(module_id) = parent_id {\n             let result = cx.enter_resolver(|resolver| {\n                 resolver.resolve_str_path_error(DUMMY_SP, &path_str, ns, module_id)\n             });\n@@ -545,6 +550,9 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n         };\n \n         // FIXME: get the resolver to work with non-local resolve scopes.\n+        use rustc_middle::ty::DefIdTree;\n+        let parent_node = self.cx.tcx.parent(item.def_id);\n+        /*\n         let parent_node = self.cx.as_local_hir_id(item.def_id).and_then(|hir_id| {\n             // FIXME: this fails hard for impls in non-module scope, but is necessary for the\n             // current `resolve()` implementation.\n@@ -553,6 +561,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                 _ => None,\n             }\n         });\n+        */\n \n         if parent_node.is_some() {\n             debug!(\"got parent node for {:?} {:?}, id {:?}\", item.type_(), item.name, item.def_id);\n@@ -563,10 +572,10 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                 if item.attrs.inner_docs {\n                     if item_hir_id.unwrap() != hir::CRATE_HIR_ID { item.name.clone() } else { None }\n                 } else {\n-                    match parent_node.or(self.mod_ids.last().cloned()) {\n-                        Some(parent) if parent != hir::CRATE_HIR_ID => {\n+                    match parent_node.or(self.mod_ids.last().map(|&local| self.cx.tcx.hir().local_def_id(local).to_def_id())) {\n+                        Some(parent) if !parent.is_top_level_module() => {\n                             // FIXME: can we pull the parent module's name from elsewhere?\n-                            Some(self.cx.tcx.hir().name(parent).to_string())\n+                            Some(self.cx.tcx.item_name(parent).to_string())\n                         }\n                         _ => None,\n                     }"}]}