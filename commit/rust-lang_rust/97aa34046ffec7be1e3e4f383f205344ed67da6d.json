{"sha": "97aa34046ffec7be1e3e4f383f205344ed67da6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YWEzNDA0NmZmZWM3YmUxZTNlNGYzODNmMjA1MzQ0ZWQ2N2RhNmQ=", "commit": {"author": {"name": "Alexis", "email": "a.beingessner@gmail.com", "date": "2015-02-19T17:57:25Z"}, "committer": {"name": "Alexis", "email": "a.beingessner@gmail.com", "date": "2015-02-21T00:55:00Z"}, "message": "try to reduce bajillion warnings", "tree": {"sha": "f61920dd16a5230660e02e053afe91513f118ee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f61920dd16a5230660e02e053afe91513f118ee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97aa34046ffec7be1e3e4f383f205344ed67da6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97aa34046ffec7be1e3e4f383f205344ed67da6d", "html_url": "https://github.com/rust-lang/rust/commit/97aa34046ffec7be1e3e4f383f205344ed67da6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97aa34046ffec7be1e3e4f383f205344ed67da6d/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "html_url": "https://github.com/rust-lang/rust/commit/522d09dfecbeca1595f25ac58c6d0178bbd21d7d"}], "stats": {"total": 109, "additions": 58, "deletions": 51}, "files": [{"sha": "0cdc71b6f604f68bf88e988af72988a9aa8c9ca9", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -73,6 +73,7 @@\n #![feature(unboxed_closures)]\n #![feature(unsafe_no_drop_flag)]\n #![feature(core)]\n+#![cfg_attr(test, feature(test, alloc, rustc_private))]\n #![cfg_attr(all(not(feature = \"external_funcs\"), not(feature = \"external_crate\")),\n             feature(libc))]\n "}, {"sha": "bc3995439a0173c782f158f56daa1c835dd3b7ac", "filename": "src/libcoretest/fmt/num.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibcoretest%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibcoretest%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fnum.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -170,84 +170,84 @@ mod u32 {\n     use test::Bencher;\n     use core::fmt::radix;\n     use std::rand::{weak_rng, Rng};\n-    use std::old_io::util::NullWriter;\n+    use std::io::{Write, sink};\n \n     #[bench]\n     fn format_bin(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{:b}\", rng.gen::<u32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{:b}\", rng.gen::<u32>()) })\n     }\n \n     #[bench]\n     fn format_oct(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{:o}\", rng.gen::<u32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{:o}\", rng.gen::<u32>()) })\n     }\n \n     #[bench]\n     fn format_dec(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{}\", rng.gen::<u32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{}\", rng.gen::<u32>()) })\n     }\n \n     #[bench]\n     fn format_hex(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{:x}\", rng.gen::<u32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{:x}\", rng.gen::<u32>()) })\n     }\n \n     #[bench]\n     fn format_show(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{:?}\", rng.gen::<u32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{:?}\", rng.gen::<u32>()) })\n     }\n \n     #[bench]\n     fn format_base_36(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{}\", radix(rng.gen::<u32>(), 36)) })\n+        b.iter(|| { write!(&mut sink(), \"{}\", radix(rng.gen::<u32>(), 36)) })\n     }\n }\n \n mod i32 {\n     use test::Bencher;\n     use core::fmt::radix;\n     use std::rand::{weak_rng, Rng};\n-    use std::old_io::util::NullWriter;\n+    use std::io::{Write, sink};\n \n     #[bench]\n     fn format_bin(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{:b}\", rng.gen::<i32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{:b}\", rng.gen::<i32>()) })\n     }\n \n     #[bench]\n     fn format_oct(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{:o}\", rng.gen::<i32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{:o}\", rng.gen::<i32>()) })\n     }\n \n     #[bench]\n     fn format_dec(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{}\", rng.gen::<i32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{}\", rng.gen::<i32>()) })\n     }\n \n     #[bench]\n     fn format_hex(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{:x}\", rng.gen::<i32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{:x}\", rng.gen::<i32>()) })\n     }\n \n     #[bench]\n     fn format_show(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{:?}\", rng.gen::<i32>()) })\n+        b.iter(|| { write!(&mut sink(), \"{:?}\", rng.gen::<i32>()) })\n     }\n \n     #[bench]\n     fn format_base_36(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { write!(&mut NullWriter, \"{}\", radix(rng.gen::<i32>(), 36)) })\n+        b.iter(|| { write!(&mut sink(), \"{}\", radix(rng.gen::<i32>(), 36)) })\n     }\n }"}, {"sha": "6cbc7bf1bbc51a72b3e34a5a98e2a545b54b2094", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -82,7 +82,7 @@ fn test_iterator_chain() {\n     let xs = [0, 1, 2, 3, 4, 5];\n     let ys = [30, 40, 50, 60];\n     let expected = [0, 1, 2, 3, 4, 5, 30, 40, 50, 60];\n-    let mut it = xs.iter().chain(ys.iter());\n+    let it = xs.iter().chain(ys.iter());\n     let mut i = 0;\n     for &x in it {\n         assert_eq!(x, expected[i]);\n@@ -91,7 +91,7 @@ fn test_iterator_chain() {\n     assert_eq!(i, expected.len());\n \n     let ys = count(30, 10).take(4);\n-    let mut it = xs.iter().cloned().chain(ys);\n+    let it = xs.iter().cloned().chain(ys);\n     let mut i = 0;\n     for x in it {\n         assert_eq!(x, expected[i]);\n@@ -110,7 +110,7 @@ fn test_filter_map() {\n #[test]\n fn test_iterator_enumerate() {\n     let xs = [0, 1, 2, 3, 4, 5];\n-    let mut it = xs.iter().enumerate();\n+    let it = xs.iter().enumerate();\n     for (i, &x) in it {\n         assert_eq!(i, x);\n     }\n@@ -152,7 +152,7 @@ fn test_iterator_peekable() {\n fn test_iterator_take_while() {\n     let xs = [0, 1, 2, 3, 5, 13, 15, 16, 17, 19];\n     let ys = [0, 1, 2, 3, 5, 13];\n-    let mut it = xs.iter().take_while(|&x| *x < 15);\n+    let it = xs.iter().take_while(|&x| *x < 15);\n     let mut i = 0;\n     for x in it {\n         assert_eq!(*x, ys[i]);\n@@ -165,7 +165,7 @@ fn test_iterator_take_while() {\n fn test_iterator_skip_while() {\n     let xs = [0, 1, 2, 3, 5, 13, 15, 16, 17, 19];\n     let ys = [15, 16, 17, 19];\n-    let mut it = xs.iter().skip_while(|&x| *x < 15);\n+    let it = xs.iter().skip_while(|&x| *x < 15);\n     let mut i = 0;\n     for x in it {\n         assert_eq!(*x, ys[i]);\n@@ -231,7 +231,7 @@ fn test_iterator_scan() {\n     let xs = [0, 1, 2, 3, 4];\n     let ys = [0f64, 1.0, 3.0, 6.0, 10.0];\n \n-    let mut it = xs.iter().scan(0, add);\n+    let it = xs.iter().scan(0, add);\n     let mut i = 0;\n     for x in it {\n         assert_eq!(x, ys[i]);\n@@ -244,7 +244,7 @@ fn test_iterator_scan() {\n fn test_iterator_flat_map() {\n     let xs = [0, 3, 6];\n     let ys = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n-    let mut it = xs.iter().flat_map(|&x| count(x, 1).take(3));\n+    let it = xs.iter().flat_map(|&x| count(x, 1).take(3));\n     let mut i = 0;\n     for x in it {\n         assert_eq!(x, ys[i]);\n@@ -279,7 +279,7 @@ fn test_unfoldr() {\n         }\n     }\n \n-    let mut it = Unfold::new(0, count);\n+    let it = Unfold::new(0, count);\n     let mut i = 0;\n     for counted in it {\n         assert_eq!(counted, i);"}, {"sha": "03924910e0485d12acf5f4c86798842dacac6fe6", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -12,6 +12,15 @@\n #![feature(int_uint)]\n #![feature(unboxed_closures)]\n #![feature(unsafe_destructor)]\n+#![feature(core)]\n+#![feature(test)]\n+#![feature(rand)]\n+#![feature(unicode)]\n+#![feature(std_misc)]\n+#![feature(libc)]\n+#![feature(hash)]\n+#![feature(io)]\n+#![feature(collections)]\n #![allow(deprecated)] // rand\n \n extern crate core;"}, {"sha": "583c658dfe0582f3b02847e71aab3d4770620237", "filename": "src/librand/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -32,6 +32,8 @@\n #![deprecated(reason = \"use the crates.io `rand` library instead\",\n               since = \"1.0.0-alpha\")]\n \n+#![cfg_attr(test, feature(test, rand))]\n+\n #![allow(deprecated)]\n \n #[macro_use]"}, {"sha": "c48dd7a6ee89406fe26a978264a17ba81dd6c9f3", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -32,6 +32,8 @@\n #![feature(rustc_private)]\n #![feature(staged_api)]\n \n+#![cfg_attr(test, feature(test))]\n+\n extern crate serialize;\n #[macro_use] extern crate log;\n "}, {"sha": "f5d2b8aed29df340567b370b8b93743fd886b247", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -88,7 +88,6 @@ impl DefaultResizePolicy {\n \n #[test]\n fn test_resize_policy() {\n-    use prelude::v1::*;\n     let rp = DefaultResizePolicy;\n     for n in 0..1000 {\n         assert!(rp.min_capacity(rp.usable_capacity(n)) <= n);\n@@ -2256,6 +2255,7 @@ mod test_map {\n \n     #[test]\n     fn test_entry_take_doesnt_corrupt() {\n+        #![allow(deprecated)] //rand\n         // Test for #19292\n         fn check(m: &HashMap<isize, ()>) {\n             for k in m.keys() {"}, {"sha": "98c1b50a9bf14e2885ef371a5bdc08398349498f", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -744,6 +744,8 @@ pub fn set_permissions<P: AsPath + ?Sized>(path: &P, perm: Permissions)\n \n #[cfg(test)]\n mod tests {\n+    #![allow(deprecated)] //rand\n+\n     use prelude::v1::*;\n     use io::prelude::*;\n \n@@ -1035,7 +1037,7 @@ mod tests {\n             let msg = msg_str.as_bytes();\n             check!(w.write(msg));\n         }\n-        let mut files = check!(fs::read_dir(dir));\n+        let files = check!(fs::read_dir(dir));\n         let mut mem = [0u8; 4];\n         for f in files {\n             let f = f.unwrap().path();\n@@ -1065,7 +1067,7 @@ mod tests {\n         check!(fs::create_dir_all(dir2));\n         check!(File::create(&dir2.join(\"14\")));\n \n-        let mut files = check!(fs::walk_dir(dir));\n+        let files = check!(fs::walk_dir(dir));\n         let mut cur = [0u8; 2];\n         for f in files {\n             let f = f.unwrap().path();"}, {"sha": "9ef319782369d7090506bddfcb676b0e30f8640b", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -497,7 +497,6 @@ mod tests {\n         assert_eq!(*writer.get_ref(), [0, 1, 2, 3, 4, 5, 6, 7, 8]);\n \n         writer.write(&[9, 10, 11]).unwrap();\n-        let a: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n         assert_eq!(*writer.get_ref(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\n \n         writer.flush().unwrap();\n@@ -593,7 +592,7 @@ mod tests {\n     #[test]\n     fn test_lines() {\n         let in_buf = b\"a\\nb\\nc\";\n-        let mut reader = BufReader::with_capacity(2, in_buf);\n+        let reader = BufReader::with_capacity(2, in_buf);\n         let mut it = reader.lines();\n         assert_eq!(it.next(), Some(Ok(\"a\".to_string())));\n         assert_eq!(it.next(), Some(Ok(\"b\".to_string())));\n@@ -618,14 +617,14 @@ mod tests {\n     #[test]\n     fn read_char_buffered() {\n         let buf = [195u8, 159u8];\n-        let mut reader = BufReader::with_capacity(1, &buf[..]);\n+        let reader = BufReader::with_capacity(1, &buf[..]);\n         assert_eq!(reader.chars().next(), Some(Ok('\u00df')));\n     }\n \n     #[test]\n     fn test_chars() {\n         let buf = [195u8, 159u8, b'a'];\n-        let mut reader = BufReader::with_capacity(1, &buf[..]);\n+        let reader = BufReader::with_capacity(1, &buf[..]);\n         let mut it = reader.chars();\n         assert_eq!(it.next(), Some(Ok('\u00df')));\n         assert_eq!(it.next(), Some(Ok('a')));"}, {"sha": "8ec0e4fe4e4d5a02cae7d8085fa7c79c5ca781cb", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -869,12 +869,12 @@ mod tests {\n \n     #[test]\n     fn split() {\n-        let mut buf = Cursor::new(b\"12\");\n+        let buf = Cursor::new(b\"12\");\n         let mut s = buf.split(b'3');\n         assert_eq!(s.next(), Some(Ok(vec![b'1', b'2'])));\n         assert_eq!(s.next(), None);\n \n-        let mut buf = Cursor::new(b\"1233\");\n+        let buf = Cursor::new(b\"1233\");\n         let mut s = buf.split(b'3');\n         assert_eq!(s.next(), Some(Ok(vec![b'1', b'2'])));\n         assert_eq!(s.next(), Some(Ok(vec![])));\n@@ -902,12 +902,12 @@ mod tests {\n \n     #[test]\n     fn lines() {\n-        let mut buf = Cursor::new(b\"12\");\n+        let buf = Cursor::new(b\"12\");\n         let mut s = buf.lines();\n         assert_eq!(s.next(), Some(Ok(\"12\".to_string())));\n         assert_eq!(s.next(), None);\n \n-        let mut buf = Cursor::new(b\"12\\n\\n\");\n+        let buf = Cursor::new(b\"12\\n\\n\");\n         let mut s = buf.lines();\n         assert_eq!(s.next(), Some(Ok(\"12\".to_string())));\n         assert_eq!(s.next(), Some(Ok(String::new())));"}, {"sha": "7ce545bbcf09741c0eae9625be9908c5b2d8c855", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -109,7 +109,6 @@\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n-#![feature(hash)]\n #![feature(int_uint)]\n #![feature(lang_items)]\n #![feature(libc)]\n@@ -123,7 +122,7 @@\n #![feature(unsafe_destructor)]\n #![feature(unsafe_no_drop_flag)]\n #![feature(macro_reexport)]\n-#![cfg_attr(test, feature(test))]\n+#![cfg_attr(test, feature(test, rustc_private, env))]\n \n // Don't link to std. We are std.\n #![feature(no_std)]"}, {"sha": "f99cd2b1d1be9eeb59887f081817a4787236af95", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -456,12 +456,6 @@ mod tests {\n         }\n     }\n \n-    pub fn socket_name(addr: SocketAddr) {\n-    }\n-\n-    pub fn peer_name(addr: SocketAddr) {\n-    }\n-\n     #[test]\n     fn socket_and_peer_name_ip4() {\n         each_ip(&mut |addr| {"}, {"sha": "c70e92884ac653749ea3d9915323fe760b65b6aa", "filename": "src/libstd/net/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fnet%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fnet%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftest.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -33,7 +33,7 @@ fn base_port() -> u16 {\n     let cwd = env::current_dir().unwrap();\n     let dirs = [\"32-opt\", \"32-nopt\", \"64-opt\", \"64-nopt\", \"64-opt-vg\",\n                 \"all-opt\", \"snap3\", \"dist\"];\n-    dirs.iter().enumerate().find(|&(i, dir)| {\n+    dirs.iter().enumerate().find(|&(_, dir)| {\n         cwd.as_str().unwrap().contains(dir)\n     }).map(|p| p.0).unwrap_or(0) as u16 * 1000 + 19600\n }"}, {"sha": "b82572fc08957380c68f439b2ae1919d7ccca064", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -240,6 +240,8 @@\n \n #![unstable(feature = \"old_io\")]\n #![deny(unused_must_use)]\n+#![allow(deprecated)] // seriously this is all deprecated\n+#![allow(unused_imports)]\n \n pub use self::SeekStyle::*;\n pub use self::FileMode::*;"}, {"sha": "4f8976fb2ecda2e18faf75c8f5098e9929d43a17", "filename": "src/libstd/old_path/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fold_path%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fold_path%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fmod.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -60,6 +60,8 @@\n //! ```\n \n #![unstable(feature = \"old_path\")]\n+#![allow(deprecated)] // seriously this is all deprecated\n+#![allow(unused_imports)]\n \n use core::marker::Sized;\n use ffi::CString;"}, {"sha": "88543ad85ed116e78326c1dbc83d392733637745", "filename": "src/libstd/path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -1324,7 +1324,6 @@ impl<T: AsOsStr + ?Sized> AsPath for T {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use ffi::OsStr;\n     use core::prelude::*;\n     use string::{ToString, String};\n     use vec::Vec;"}, {"sha": "86604f62171ef073369a56646de779961ba80c38", "filename": "src/libstd/process.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -489,18 +489,14 @@ impl Child {\n mod tests {\n     use io::ErrorKind;\n     use io::prelude::*;\n-    use prelude::v1::{Ok, Err, range, drop, Some, None, Vec};\n+    use prelude::v1::{Ok, Err, drop, Some, Vec};\n     use prelude::v1::{String, Clone};\n     use prelude::v1::{SliceExt, Str, StrExt, AsSlice, ToString, GenericPath};\n-    use path::Path;\n     use old_path;\n     use old_io::fs::PathExtensions;\n     use rt::running_on_valgrind;\n     use str;\n-    use super::{Child, Command, Output, ExitStatus, Stdio};\n-    use sync::mpsc::channel;\n-    use thread;\n-    use time::Duration;\n+    use super::{Command, Output, Stdio};\n \n     // FIXME(#10380) these tests should not all be ignored on android.\n "}, {"sha": "b6f45eea377658e19d01f5d922aa6138f66f8ceb", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa34046ffec7be1e3e4f383f205344ed67da6d/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=97aa34046ffec7be1e3e4f383f205344ed67da6d", "patch": "@@ -702,7 +702,7 @@ mod test {\n     use boxed::BoxAny;\n     use result;\n     use std::old_io::{ChanReader, ChanWriter};\n-    use super::{Thread, Builder};\n+    use super::{Builder};\n     use thread;\n     use thunk::Thunk;\n     use time::Duration;\n@@ -767,7 +767,7 @@ mod test {\n     #[test]\n     #[should_fail]\n     fn test_scoped_implicit_panic() {\n-        thread::scoped(|| panic!());\n+        let _ = thread::scoped(|| panic!());\n     }\n \n     #[test]"}]}