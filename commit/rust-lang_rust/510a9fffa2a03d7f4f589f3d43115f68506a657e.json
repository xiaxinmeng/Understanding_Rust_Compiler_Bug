{"sha": "510a9fffa2a03d7f4f589f3d43115f68506a657e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMGE5ZmZmYTJhMDNkN2Y0ZjU4OWYzZDQzMTE1ZjY4NTA2YTY1N2U=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-12-10T23:28:54Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-12-11T11:16:53Z"}, "message": "Fix irrefutable matches on integer ranges", "tree": {"sha": "fa758529c2cd5bf6bf2a0114d8a2ceb33579c9b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa758529c2cd5bf6bf2a0114d8a2ceb33579c9b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/510a9fffa2a03d7f4f589f3d43115f68506a657e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/510a9fffa2a03d7f4f589f3d43115f68506a657e", "html_url": "https://github.com/rust-lang/rust/commit/510a9fffa2a03d7f4f589f3d43115f68506a657e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/510a9fffa2a03d7f4f589f3d43115f68506a657e/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1137d29d5e551e377579c5a601fe7c444057d00c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1137d29d5e551e377579c5a601fe7c444057d00c", "html_url": "https://github.com/rust-lang/rust/commit/1137d29d5e551e377579c5a601fe7c444057d00c"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "328b330f762dc14135cb9c4aad51f402f672fbcf", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/510a9fffa2a03d7f4f589f3d43115f68506a657e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510a9fffa2a03d7f4f589f3d43115f68506a657e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=510a9fffa2a03d7f4f589f3d43115f68506a657e", "patch": "@@ -26,6 +26,10 @@ use build::{BlockAnd, BlockAndExtension, Builder};\n use build::matches::{Ascription, Binding, MatchPair, Candidate};\n use hair::*;\n use rustc::mir::*;\n+use rustc::ty;\n+use rustc::ty::layout::{Integer, IntegerExt, Size};\n+use syntax::attr::{SignedInt, UnsignedInt};\n+use rustc::hir::RangeEnd;\n \n use std::mem;\n \n@@ -62,6 +66,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                  match_pair: MatchPair<'pat, 'tcx>,\n                                  candidate: &mut Candidate<'pat, 'tcx>)\n                                  -> Result<(), MatchPair<'pat, 'tcx>> {\n+        let tcx = self.hir.tcx();\n         match *match_pair.pattern.kind {\n             PatternKind::AscribeUserType { ref subpattern, ref user_ty, user_ty_span } => {\n                 candidate.ascriptions.push(Ascription {\n@@ -104,7 +109,34 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 Err(match_pair)\n             }\n \n-            PatternKind::Range { .. } => {\n+            PatternKind::Range { lo, hi, ty, end } => {\n+                let range = match ty.sty {\n+                    ty::Char => {\n+                        Some(('\\u{0000}' as u128, '\\u{10FFFF}' as u128, Size::from_bits(32)))\n+                    }\n+                    ty::Int(ity) => {\n+                        // FIXME(49937): refactor these bit manipulations into interpret.\n+                        let size = Integer::from_attr(&tcx, SignedInt(ity)).size();\n+                        let min = 1u128 << (size.bits() - 1);\n+                        let max = (1u128 << (size.bits() - 1)) - 1;\n+                        Some((min, max, size))\n+                    }\n+                    ty::Uint(uty) => {\n+                        // FIXME(49937): refactor these bit manipulations into interpret.\n+                        let size = Integer::from_attr(&tcx, UnsignedInt(uty)).size();\n+                        let max = !0u128 >> (128 - size.bits());\n+                        Some((0, max, size))\n+                    }\n+                    _ => None,\n+                };\n+                if let Some((min, max, sz)) = range {\n+                    if let (Some(lo), Some(hi)) = (lo.val.try_to_bits(sz), hi.val.try_to_bits(sz)) {\n+                        if lo <= min && (hi > max || hi == max && end == RangeEnd::Included) {\n+                            // Irrefutable pattern match.\n+                            return Ok(());\n+                        }\n+                    }\n+                }\n                 Err(match_pair)\n             }\n "}, {"sha": "ff065882d96e291407dab5eb429d67dc3e8959d5", "filename": "src/test/ui/pattern/irrefutable-exhaustive-integer-binding.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/510a9fffa2a03d7f4f589f3d43115f68506a657e/src%2Ftest%2Fui%2Fpattern%2Firrefutable-exhaustive-integer-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510a9fffa2a03d7f4f589f3d43115f68506a657e/src%2Ftest%2Fui%2Fpattern%2Firrefutable-exhaustive-integer-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Firrefutable-exhaustive-integer-binding.rs?ref=510a9fffa2a03d7f4f589f3d43115f68506a657e", "patch": "@@ -0,0 +1,8 @@\n+// run-pass\n+\n+fn main() {\n+    let -2147483648..=2147483647 = 1;\n+    let 0..=255 = 0u8;\n+    let -128..=127 = 0i8;\n+    let '\\u{0000}'..='\\u{10FFFF}' = 'v';\n+}"}]}