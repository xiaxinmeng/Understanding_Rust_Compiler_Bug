{"sha": "be01d54f07b9c56d2426ddaebaea499575479b38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMDFkNTRmMDdiOWM1NmQyNDI2ZGRhZWJhZWE0OTk1NzU0NzliMzg=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-10-29T19:51:39Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-10-29T19:51:39Z"}, "message": "BTreeMap: document a curious assumption in test cases", "tree": {"sha": "a239699c303b9ef3b9bec55218ee3da579146248", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a239699c303b9ef3b9bec55218ee3da579146248"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be01d54f07b9c56d2426ddaebaea499575479b38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be01d54f07b9c56d2426ddaebaea499575479b38", "html_url": "https://github.com/rust-lang/rust/commit/be01d54f07b9c56d2426ddaebaea499575479b38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be01d54f07b9c56d2426ddaebaea499575479b38/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a53fb30e3bf2655b0563da6d561c23cda5f3ec11", "url": "https://api.github.com/repos/rust-lang/rust/commits/a53fb30e3bf2655b0563da6d561c23cda5f3ec11", "html_url": "https://github.com/rust-lang/rust/commit/a53fb30e3bf2655b0563da6d561c23cda5f3ec11"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "710aa2adfecbddf78975bc671cb5418c230dcc54", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be01d54f07b9c56d2426ddaebaea499575479b38/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be01d54f07b9c56d2426ddaebaea499575479b38/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=be01d54f07b9c56d2426ddaebaea499575479b38", "patch": "@@ -1661,6 +1661,7 @@ create_append_test!(test_append_239, 239);\n create_append_test!(test_append_1700, 1700);\n \n fn rand_data(len: usize) -> Vec<(u32, u32)> {\n+    assert!(len * 2 <= 70029); // from that point on numbers repeat\n     let mut rng = DeterministicRng::new();\n     Vec::from_iter((0..len).map(|_| (rng.next(), rng.next())))\n }"}, {"sha": "7bf1706dd6d57b828d5879804f69460ddd83cb0d", "filename": "library/alloc/src/collections/btree/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be01d54f07b9c56d2426ddaebaea499575479b38/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be01d54f07b9c56d2426ddaebaea499575479b38/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs?ref=be01d54f07b9c56d2426ddaebaea499575479b38", "patch": "@@ -49,6 +49,7 @@ impl DeterministicRng {\n         DeterministicRng { x: 0x193a6754, y: 0xa8a7d469, z: 0x97830e05, w: 0x113ba7bb }\n     }\n \n+    /// Guarantees that the first 70029 results are unique.\n     fn next(&mut self) -> u32 {\n         let x = self.x;\n         let t = x ^ (x << 11);"}, {"sha": "eb3feef09e51ea3bdd9c81a0d1c53b06820f6486", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be01d54f07b9c56d2426ddaebaea499575479b38/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be01d54f07b9c56d2426ddaebaea499575479b38/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=be01d54f07b9c56d2426ddaebaea499575479b38", "patch": "@@ -680,6 +680,7 @@ fn test_first_last() {\n }\n \n fn rand_data(len: usize) -> Vec<u32> {\n+    assert!(len <= 70029); // from that point on numbers repeat\n     let mut rng = DeterministicRng::new();\n     Vec::from_iter((0..len).map(|_| rng.next()))\n }"}]}