{"sha": "47bfc62b5be28d1861a15099787be20f83163dbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YmZjNjJiNWJlMjhkMTg2MWExNTA5OTc4N2JlMjBmODMxNjNkYmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-05T06:37:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-06T09:01:07Z"}, "message": "use Memory::read_c_str, avoid a few to_ptr", "tree": {"sha": "1b094500e04690875f04005c3bee9e458f8825ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b094500e04690875f04005c3bee9e458f8825ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47bfc62b5be28d1861a15099787be20f83163dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47bfc62b5be28d1861a15099787be20f83163dbc", "html_url": "https://github.com/rust-lang/rust/commit/47bfc62b5be28d1861a15099787be20f83163dbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47bfc62b5be28d1861a15099787be20f83163dbc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "226156f673ecf52cf1bc337c92a1b79a98252d36", "url": "https://api.github.com/repos/rust-lang/rust/commits/226156f673ecf52cf1bc337c92a1b79a98252d36", "html_url": "https://github.com/rust-lang/rust/commit/226156f673ecf52cf1bc337c92a1b79a98252d36"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "41966c5f0d9cb91c935c0862969ea1a4661810d9", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/47bfc62b5be28d1861a15099787be20f83163dbc/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47bfc62b5be28d1861a15099787be20f83163dbc/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=47bfc62b5be28d1861a15099787be20f83163dbc", "patch": "@@ -318,8 +318,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             \"dlsym\" => {\n                 let _handle = this.read_scalar(args[0])?;\n-                let symbol = this.read_scalar(args[1])?.to_ptr()?;\n-                let symbol_name = this.memory().get(symbol.alloc_id)?.read_c_str(tcx, symbol)?;\n+                let symbol = this.read_scalar(args[1])?.not_undef()?;\n+                let symbol_name = this.memory().read_c_str(symbol)?;\n                 let err = format!(\"bad c unicode symbol: {:?}\", symbol_name);\n                 let symbol_name = ::std::str::from_utf8(symbol_name).unwrap_or(&err);\n                 if let Some(dlsym) = Dlsym::from_str(symbol_name)? {\n@@ -433,8 +433,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             \"getenv\" => {\n                 let result = {\n-                    let name_ptr = this.read_scalar(args[0])?.to_ptr()?;\n-                    let name = this.memory().get(name_ptr.alloc_id)?.read_c_str(tcx, name_ptr)?;\n+                    let name_ptr = this.read_scalar(args[0])?.not_undef()?;\n+                    let name = this.memory().read_c_str(name_ptr)?;\n                     match this.machine.env_vars.get(name) {\n                         Some(&var) => Scalar::Ptr(var),\n                         None => Scalar::ptr_null(&*this.tcx),\n@@ -448,12 +448,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 {\n                     let name_ptr = this.read_scalar(args[0])?.not_undef()?;\n                     if !this.is_null(name_ptr)? {\n-                        let name_ptr = name_ptr.to_ptr()?;\n-                        let name = this\n-                            .memory()\n-                            .get(name_ptr.alloc_id)?\n-                            .read_c_str(tcx, name_ptr)?\n-                            .to_owned();\n+                        let name = this.memory().read_c_str(name_ptr)?.to_owned();\n                         if !name.is_empty() && !name.contains(&b'=') {\n                             success = Some(this.machine.env_vars.remove(&name));\n                         }\n@@ -473,11 +468,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let mut new = None;\n                 {\n                     let name_ptr = this.read_scalar(args[0])?.not_undef()?;\n-                    let value_ptr = this.read_scalar(args[1])?.to_ptr()?;\n-                    let value = this.memory().get(value_ptr.alloc_id)?.read_c_str(tcx, value_ptr)?;\n+                    let value_ptr = this.read_scalar(args[1])?.not_undef()?;\n+                    let value = this.memory().read_c_str(value_ptr)?;\n                     if !this.is_null(name_ptr)? {\n-                        let name_ptr = name_ptr.to_ptr()?;\n-                        let name = this.memory().get(name_ptr.alloc_id)?.read_c_str(tcx, name_ptr)?;\n+                        let name = this.memory().read_c_str(name_ptr)?;\n                         if !name.is_empty() && !name.contains(&b'=') {\n                             new = Some((name.to_owned(), value.to_owned()));\n                         }\n@@ -552,8 +546,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             \"strlen\" => {\n-                let ptr = this.read_scalar(args[0])?.to_ptr()?;\n-                let n = this.memory().get(ptr.alloc_id)?.read_c_str(tcx, ptr)?.len();\n+                let ptr = this.read_scalar(args[0])?.not_undef()?;\n+                let n = this.memory().read_c_str(ptr)?.len();\n                 this.write_scalar(Scalar::from_uint(n as u64, dest.layout.size), dest)?;\n             }\n "}]}