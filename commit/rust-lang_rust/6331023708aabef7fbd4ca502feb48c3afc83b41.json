{"sha": "6331023708aabef7fbd4ca502feb48c3afc83b41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMzEwMjM3MDhhYWJlZjdmYmQ0Y2E1MDJmZWI0OGMzYWZjODNiNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-24T09:17:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-24T09:17:33Z"}, "message": "Auto merge of #79294 - petrochenkov:determ, r=varkor\n\nresolve: Do not put macros into `module.unexpanded_invocations` unless necessary\n\nMacro invocations in modules <sup>(*)</sup> need to be tracked because they can produce named items when expanded.\nWe cannot give definite answer to queries like \"does this module declare name `n`?\" until all macro calls in that module are expanded.\n\nPreviously we marked too many macros as potentially producing named items.\nE.g. in this example\n```rust\nmod m {\n    const C: u32 = line!();\n}\n```\n`line!()` cannot emit any items into module `m`, but it was still marked.\nThis PR fixes that and marks macro calls as \"unexpanded in module\" only if they can actually emit named items into that module.\n\nDiagnostics in UI test outputs have different order now because this change affects macro expansion order.\n\n<sup>*</sup> Any containers for named items are called modules in resolve (that includes blocks, traits and enums in addition to `mod` items).", "tree": {"sha": "1566cb3d5f96e3bf433107ebb1244176ab8bfb81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1566cb3d5f96e3bf433107ebb1244176ab8bfb81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6331023708aabef7fbd4ca502feb48c3afc83b41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6331023708aabef7fbd4ca502feb48c3afc83b41", "html_url": "https://github.com/rust-lang/rust/commit/6331023708aabef7fbd4ca502feb48c3afc83b41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6331023708aabef7fbd4ca502feb48c3afc83b41/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "238994f3b1d6b05ed5c26c1b3af03723a2421700", "url": "https://api.github.com/repos/rust-lang/rust/commits/238994f3b1d6b05ed5c26c1b3af03723a2421700", "html_url": "https://github.com/rust-lang/rust/commit/238994f3b1d6b05ed5c26c1b3af03723a2421700"}, {"sha": "27af650a0df2975fba5a8ae3e1a42eada0ff7bd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/27af650a0df2975fba5a8ae3e1a42eada0ff7bd4", "html_url": "https://github.com/rust-lang/rust/commit/27af650a0df2975fba5a8ae3e1a42eada0ff7bd4"}], "stats": {"total": 212, "additions": 115, "deletions": 97}, "files": [{"sha": "6d7e4ebc253bd3dc75f1cd8713a79ed83d8e60b7", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6331023708aabef7fbd4ca502feb48c3afc83b41/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6331023708aabef7fbd4ca502feb48c3afc83b41/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=6331023708aabef7fbd4ca502feb48c3afc83b41", "patch": "@@ -1155,14 +1155,18 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         false\n     }\n \n-    fn visit_invoc(&mut self, id: NodeId) -> MacroRulesScopeRef<'a> {\n+    fn visit_invoc(&mut self, id: NodeId) -> ExpnId {\n         let invoc_id = id.placeholder_to_expn_id();\n-\n-        self.parent_scope.module.unexpanded_invocations.borrow_mut().insert(invoc_id);\n-\n         let old_parent_scope = self.r.invocation_parent_scopes.insert(invoc_id, self.parent_scope);\n         assert!(old_parent_scope.is_none(), \"invocation data is reset for an invocation\");\n+        invoc_id\n+    }\n \n+    /// Visit invocation in context in which it can emit a named item (possibly `macro_rules`)\n+    /// directly into its parent scope's module.\n+    fn visit_invoc_in_module(&mut self, id: NodeId) -> MacroRulesScopeRef<'a> {\n+        let invoc_id = self.visit_invoc(id);\n+        self.parent_scope.module.unexpanded_invocations.borrow_mut().insert(invoc_id);\n         self.r.arenas.alloc_macro_rules_scope(MacroRulesScope::Invocation(invoc_id))\n     }\n \n@@ -1291,7 +1295,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n                 return;\n             }\n             ItemKind::MacCall(..) => {\n-                self.parent_scope.macro_rules = self.visit_invoc(item.id);\n+                self.parent_scope.macro_rules = self.visit_invoc_in_module(item.id);\n                 return;\n             }\n             ItemKind::Mod(..) => self.contains_macro_use(&item.attrs),\n@@ -1309,15 +1313,15 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n \n     fn visit_stmt(&mut self, stmt: &'b ast::Stmt) {\n         if let ast::StmtKind::MacCall(..) = stmt.kind {\n-            self.parent_scope.macro_rules = self.visit_invoc(stmt.id);\n+            self.parent_scope.macro_rules = self.visit_invoc_in_module(stmt.id);\n         } else {\n             visit::walk_stmt(self, stmt);\n         }\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &'b ForeignItem) {\n         if let ForeignItemKind::MacCall(_) = foreign_item.kind {\n-            self.visit_invoc(foreign_item.id);\n+            self.visit_invoc_in_module(foreign_item.id);\n             return;\n         }\n \n@@ -1336,7 +1340,14 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n \n     fn visit_assoc_item(&mut self, item: &'b AssocItem, ctxt: AssocCtxt) {\n         if let AssocItemKind::MacCall(_) = item.kind {\n-            self.visit_invoc(item.id);\n+            match ctxt {\n+                AssocCtxt::Trait => {\n+                    self.visit_invoc_in_module(item.id);\n+                }\n+                AssocCtxt::Impl => {\n+                    self.visit_invoc(item.id);\n+                }\n+            }\n             return;\n         }\n \n@@ -1460,7 +1471,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n     // type and value namespaces.\n     fn visit_variant(&mut self, variant: &'b ast::Variant) {\n         if variant.is_placeholder {\n-            self.visit_invoc(variant.id);\n+            self.visit_invoc_in_module(variant.id);\n             return;\n         }\n "}, {"sha": "4d6560e96e513ef967eb5fd629d5e3f703d4ee4d", "filename": "src/test/ui/conditional-compilation/cfg-generic-params.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6331023708aabef7fbd4ca502feb48c3afc83b41/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6331023708aabef7fbd4ca502feb48c3afc83b41/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr?ref=6331023708aabef7fbd4ca502feb48c3afc83b41", "patch": "@@ -17,16 +17,16 @@ LL | struct WhereBad where for<#[cfg(no)] 'a, #[cfg(yes)] T> u8: Copy;\n    |                                                      ^\n \n error: cannot find attribute `unknown` in this scope\n-  --> $DIR/cfg-generic-params.rs:34:43\n+  --> $DIR/cfg-generic-params.rs:19:29\n    |\n-LL | struct WhereYes where for<#[cfg_attr(yes, unknown)] 'a> u8: Copy;\n-   |                                           ^^^^^^^\n+LL | fn f_lt_yes<#[cfg_attr(yes, unknown)] 'a>() {}\n+   |                             ^^^^^^^\n \n error: cannot find attribute `unknown` in this scope\n-  --> $DIR/cfg-generic-params.rs:30:40\n+  --> $DIR/cfg-generic-params.rs:22:29\n    |\n-LL | type PolyYes = dyn for<#[cfg_attr(yes, unknown)] 'a> Copy;\n-   |                                        ^^^^^^^\n+LL | fn f_ty_yes<#[cfg_attr(yes, unknown)] T>() {}\n+   |                             ^^^^^^^\n \n error: cannot find attribute `unknown` in this scope\n   --> $DIR/cfg-generic-params.rs:26:34\n@@ -35,16 +35,16 @@ LL | type FnYes = for<#[cfg_attr(yes, unknown)] 'a> fn();\n    |                                  ^^^^^^^\n \n error: cannot find attribute `unknown` in this scope\n-  --> $DIR/cfg-generic-params.rs:22:29\n+  --> $DIR/cfg-generic-params.rs:30:40\n    |\n-LL | fn f_ty_yes<#[cfg_attr(yes, unknown)] T>() {}\n-   |                             ^^^^^^^\n+LL | type PolyYes = dyn for<#[cfg_attr(yes, unknown)] 'a> Copy;\n+   |                                        ^^^^^^^\n \n error: cannot find attribute `unknown` in this scope\n-  --> $DIR/cfg-generic-params.rs:19:29\n+  --> $DIR/cfg-generic-params.rs:34:43\n    |\n-LL | fn f_lt_yes<#[cfg_attr(yes, unknown)] 'a>() {}\n-   |                             ^^^^^^^\n+LL | struct WhereYes where for<#[cfg_attr(yes, unknown)] 'a> u8: Copy;\n+   |                                           ^^^^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "f2287111719bcca3183c778e4781dd766ebc9193", "filename": "src/test/ui/feature-gates/feature-gate-custom_attribute2.stderr", "status": "modified", "additions": 64, "deletions": 64, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/6331023708aabef7fbd4ca502feb48c3afc83b41/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6331023708aabef7fbd4ca502feb48c3afc83b41/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr?ref=6331023708aabef7fbd4ca502feb48c3afc83b41", "patch": "@@ -1,104 +1,104 @@\n-error: cannot find attribute `lt_hof` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:51:21\n+error: cannot find attribute `lt_struct` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:4:15\n    |\n-LL |     where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n-   |                     ^^^^^^\n+LL | struct StLt<#[lt_struct] 'a>(&'a u32);\n+   |               ^^^^^^^^^\n \n-error: cannot find attribute `ty_meth` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:46:15\n+error: cannot find attribute `ty_struct` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:6:15\n    |\n-LL |     fn m_ty<#[ty_meth] P>(_: P) { }\n-   |               ^^^^^^^\n+LL | struct StTy<#[ty_struct] I>(I);\n+   |               ^^^^^^^^^\n \n-error: cannot find attribute `lt_meth` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:44:15\n+error: cannot find attribute `lt_enum` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:9:13\n    |\n-LL |     fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n-   |               ^^^^^^^\n+LL | enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n+   |             ^^^^^^^\n \n-error: cannot find attribute `ty_fn` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:40:11\n+error: cannot find attribute `ty_enum` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:11:13\n    |\n-LL | fn f_ty<#[ty_fn] O>(_: O) { }\n-   |           ^^^^^\n+LL | enum EnTy<#[ty_enum] J> { A(J), B }\n+   |             ^^^^^^^\n \n-error: cannot find attribute `lt_fn` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:38:11\n+error: cannot find attribute `lt_trait` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:14:14\n    |\n-LL | fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n-   |           ^^^^^\n+LL | trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n+   |              ^^^^^^^^\n \n-error: cannot find attribute `ty_impl_for` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:33:8\n+error: cannot find attribute `ty_trait` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:16:14\n    |\n-LL | impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n-   |        ^^^^^^^^^^^\n+LL | trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n+   |              ^^^^^^^^\n \n-error: cannot find attribute `lt_impl_for` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:29:8\n+error: cannot find attribute `lt_type` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:19:13\n    |\n-LL | impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n-   |        ^^^^^^^^^^^\n+LL | type TyLt<#[lt_type] 'd> = &'d u32;\n+   |             ^^^^^^^\n \n-error: cannot find attribute `ty_inherent` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:26:8\n+error: cannot find attribute `ty_type` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:21:13\n    |\n-LL | impl<#[ty_inherent] M> StTy<M> { }\n-   |        ^^^^^^^^^^^\n+LL | type TyTy<#[ty_type] L> = (L, );\n+   |             ^^^^^^^\n \n error: cannot find attribute `lt_inherent` in this scope\n   --> $DIR/feature-gate-custom_attribute2.rs:24:8\n    |\n LL | impl<#[lt_inherent] 'e> StLt<'e> { }\n    |        ^^^^^^^^^^^\n \n-error: cannot find attribute `ty_type` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:21:13\n+error: cannot find attribute `ty_inherent` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:26:8\n    |\n-LL | type TyTy<#[ty_type] L> = (L, );\n-   |             ^^^^^^^\n+LL | impl<#[ty_inherent] M> StTy<M> { }\n+   |        ^^^^^^^^^^^\n \n-error: cannot find attribute `lt_type` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:19:13\n+error: cannot find attribute `lt_impl_for` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:29:8\n    |\n-LL | type TyLt<#[lt_type] 'd> = &'d u32;\n-   |             ^^^^^^^\n+LL | impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n+   |        ^^^^^^^^^^^\n \n-error: cannot find attribute `ty_trait` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:16:14\n+error: cannot find attribute `ty_impl_for` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:33:8\n    |\n-LL | trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n-   |              ^^^^^^^^\n+LL | impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n+   |        ^^^^^^^^^^^\n \n-error: cannot find attribute `lt_trait` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:14:14\n+error: cannot find attribute `lt_fn` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:38:11\n    |\n-LL | trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n-   |              ^^^^^^^^\n+LL | fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n+   |           ^^^^^\n \n-error: cannot find attribute `ty_enum` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:11:13\n+error: cannot find attribute `ty_fn` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:40:11\n    |\n-LL | enum EnTy<#[ty_enum] J> { A(J), B }\n-   |             ^^^^^^^\n+LL | fn f_ty<#[ty_fn] O>(_: O) { }\n+   |           ^^^^^\n \n-error: cannot find attribute `lt_enum` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:9:13\n+error: cannot find attribute `lt_meth` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:44:15\n    |\n-LL | enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n-   |             ^^^^^^^\n+LL |     fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n+   |               ^^^^^^^\n \n-error: cannot find attribute `ty_struct` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:6:15\n+error: cannot find attribute `ty_meth` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:46:15\n    |\n-LL | struct StTy<#[ty_struct] I>(I);\n-   |               ^^^^^^^^^\n+LL |     fn m_ty<#[ty_meth] P>(_: P) { }\n+   |               ^^^^^^^\n \n-error: cannot find attribute `lt_struct` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:4:15\n+error: cannot find attribute `lt_hof` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:51:21\n    |\n-LL | struct StLt<#[lt_struct] 'a>(&'a u32);\n-   |               ^^^^^^^^^\n+LL |     where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n+   |                     ^^^^^^\n \n error: aborting due to 17 previous errors\n "}, {"sha": "66bf053204c088e621b60a504dc81cc37c73aae8", "filename": "src/test/ui/issues/issue-40845.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6331023708aabef7fbd4ca502feb48c3afc83b41/src%2Ftest%2Fui%2Fissues%2Fissue-40845.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6331023708aabef7fbd4ca502feb48c3afc83b41/src%2Ftest%2Fui%2Fissues%2Fissue-40845.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40845.stderr?ref=6331023708aabef7fbd4ca502feb48c3afc83b41", "patch": "@@ -1,14 +1,14 @@\n-error: cannot find macro `m` in this scope\n-  --> $DIR/issue-40845.rs:4:10\n-   |\n-LL | impl S { m!(); }\n-   |          ^\n-\n error: cannot find macro `m` in this scope\n   --> $DIR/issue-40845.rs:1:11\n    |\n LL | trait T { m!(); }\n    |           ^\n \n+error: cannot find macro `m` in this scope\n+  --> $DIR/issue-40845.rs:4:10\n+   |\n+LL | impl S { m!(); }\n+   |          ^\n+\n error: aborting due to 2 previous errors\n "}, {"sha": "ee35fded99ec971d799e25388f220fd7f76a331e", "filename": "src/test/ui/parser/default-unmatched-assoc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6331023708aabef7fbd4ca502feb48c3afc83b41/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6331023708aabef7fbd4ca502feb48c3afc83b41/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.stderr?ref=6331023708aabef7fbd4ca502feb48c3afc83b41", "patch": "@@ -39,13 +39,13 @@ LL | }\n    | - item list ends here\n \n error: cannot find macro `default` in this scope\n-  --> $DIR/default-unmatched-assoc.rs:12:5\n+  --> $DIR/default-unmatched-assoc.rs:4:5\n    |\n LL |     default!();\n    |     ^^^^^^^\n \n error: cannot find macro `default` in this scope\n-  --> $DIR/default-unmatched-assoc.rs:4:5\n+  --> $DIR/default-unmatched-assoc.rs:12:5\n    |\n LL |     default!();\n    |     ^^^^^^^"}, {"sha": "16a08b9b85607cb582f410aded39dcac4dc4a275", "filename": "src/test/ui/parser/issue-65122-mac-invoc-in-mut-patterns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6331023708aabef7fbd4ca502feb48c3afc83b41/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6331023708aabef7fbd4ca502feb48c3afc83b41/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.stderr?ref=6331023708aabef7fbd4ca502feb48c3afc83b41", "patch": "@@ -34,15 +34,15 @@ LL |     mac2! { does_not_exist!() }\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot find macro `does_not_exist` in this scope\n-  --> $DIR/issue-65122-mac-invoc-in-mut-patterns.rs:20:13\n+  --> $DIR/issue-65122-mac-invoc-in-mut-patterns.rs:22:13\n    |\n-LL |     mac1! { does_not_exist!() }\n+LL |     mac2! { does_not_exist!() }\n    |             ^^^^^^^^^^^^^^\n \n error: cannot find macro `does_not_exist` in this scope\n-  --> $DIR/issue-65122-mac-invoc-in-mut-patterns.rs:22:13\n+  --> $DIR/issue-65122-mac-invoc-in-mut-patterns.rs:20:13\n    |\n-LL |     mac2! { does_not_exist!() }\n+LL |     mac1! { does_not_exist!() }\n    |             ^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors"}, {"sha": "3215e0cd34605ec152978b4a54cdd2ae519dd1d1", "filename": "src/test/ui/resolve/macro-determinacy-non-module.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6331023708aabef7fbd4ca502feb48c3afc83b41/src%2Ftest%2Fui%2Fresolve%2Fmacro-determinacy-non-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6331023708aabef7fbd4ca502feb48c3afc83b41/src%2Ftest%2Fui%2Fresolve%2Fmacro-determinacy-non-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fmacro-determinacy-non-module.rs?ref=6331023708aabef7fbd4ca502feb48c3afc83b41", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+\n+use std as line;\n+\n+const C: u32 = line!();\n+\n+fn main() {}"}]}