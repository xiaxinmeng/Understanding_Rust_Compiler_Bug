{"sha": "1617ec4ad2b12b34b22e2d78bb96a27448fce04c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MTdlYzRhZDJiMTJiMzRiMjJlMmQ3OGJiOTZhMjc0NDhmY2UwNGM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-22T15:09:17Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-03-01T21:42:34Z"}, "message": "Clean up TypeFlags\n\n* Reorder flags to group similar ones together\n* Make some flags more granular\n* Compute `HAS_FREE_LOCAL_NAMES` from the other flags\n* Remove `HAS_TY_CLOSURE`\n* Add some more doc comments", "tree": {"sha": "f917d4127977bfbbcc828e4cb906967919fabd4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f917d4127977bfbbcc828e4cb906967919fabd4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1617ec4ad2b12b34b22e2d78bb96a27448fce04c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1617ec4ad2b12b34b22e2d78bb96a27448fce04c", "html_url": "https://github.com/rust-lang/rust/commit/1617ec4ad2b12b34b22e2d78bb96a27448fce04c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1617ec4ad2b12b34b22e2d78bb96a27448fce04c/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebc86b441d7122465c355e5f08b36664c6957aa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc86b441d7122465c355e5f08b36664c6957aa7", "html_url": "https://github.com/rust-lang/rust/commit/ebc86b441d7122465c355e5f08b36664c6957aa7"}], "stats": {"total": 186, "additions": 99, "deletions": 87}, "files": [{"sha": "5243e1fbf579b70cff52847ceadd1a135b41191a", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1617ec4ad2b12b34b22e2d78bb96a27448fce04c/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1617ec4ad2b12b34b22e2d78bb96a27448fce04c/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=1617ec4ad2b12b34b22e2d78bb96a27448fce04c", "patch": "@@ -80,13 +80,10 @@ impl FlagComputation {\n             &ty::Error => self.add_flags(TypeFlags::HAS_TY_ERR),\n \n             &ty::Param(_) => {\n-                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n-                self.add_flags(TypeFlags::HAS_PARAMS);\n+                self.add_flags(TypeFlags::HAS_TY_PARAM);\n             }\n \n             &ty::Generator(_, ref substs, _) => {\n-                self.add_flags(TypeFlags::HAS_TY_CLOSURE);\n-                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n                 self.add_substs(substs);\n             }\n \n@@ -97,8 +94,6 @@ impl FlagComputation {\n             }\n \n             &ty::Closure(_, ref substs) => {\n-                self.add_flags(TypeFlags::HAS_TY_CLOSURE);\n-                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n                 self.add_substs(substs);\n             }\n \n@@ -107,12 +102,10 @@ impl FlagComputation {\n             }\n \n             &ty::Placeholder(..) => {\n-                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n                 self.add_flags(TypeFlags::HAS_TY_PLACEHOLDER);\n             }\n \n             &ty::Infer(infer) => {\n-                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES); // it might, right?\n                 self.add_flags(TypeFlags::HAS_TY_INFER);\n                 match infer {\n                     ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_) => {}\n@@ -128,17 +121,17 @@ impl FlagComputation {\n             }\n \n             &ty::Projection(ref data) => {\n-                self.add_flags(TypeFlags::HAS_PROJECTION);\n+                self.add_flags(TypeFlags::HAS_TY_PROJECTION);\n                 self.add_projection_ty(data);\n             }\n \n             &ty::UnnormalizedProjection(ref data) => {\n-                self.add_flags(TypeFlags::HAS_PROJECTION);\n+                self.add_flags(TypeFlags::HAS_TY_PROJECTION);\n                 self.add_projection_ty(data);\n             }\n \n             &ty::Opaque(_, substs) => {\n-                self.add_flags(TypeFlags::HAS_PROJECTION | TypeFlags::HAS_TY_OPAQUE);\n+                self.add_flags(TypeFlags::HAS_TY_OPAQUE);\n                 self.add_substs(substs);\n             }\n \n@@ -221,22 +214,20 @@ impl FlagComputation {\n         match c.val {\n             ty::ConstKind::Unevaluated(_, substs, _) => {\n                 self.add_substs(substs);\n-                self.add_flags(TypeFlags::HAS_PROJECTION);\n+                self.add_flags(TypeFlags::HAS_CT_PROJECTION);\n             }\n             ty::ConstKind::Infer(infer) => {\n-                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES | TypeFlags::HAS_CT_INFER);\n+                self.add_flags(TypeFlags::HAS_CT_INFER);\n                 match infer {\n                     InferConst::Fresh(_) => {}\n                     InferConst::Var(_) => self.add_flags(TypeFlags::KEEP_IN_LOCAL_TCX),\n                 }\n             }\n             ty::ConstKind::Bound(debruijn, _) => self.add_binder(debruijn),\n             ty::ConstKind::Param(_) => {\n-                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n-                self.add_flags(TypeFlags::HAS_PARAMS);\n+                self.add_flags(TypeFlags::HAS_CT_PARAM);\n             }\n             ty::ConstKind::Placeholder(_) => {\n-                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n                 self.add_flags(TypeFlags::HAS_CT_PLACEHOLDER);\n             }\n             ty::ConstKind::Value(_) => {}"}, {"sha": "4adca6c7d97723fc9da8bd663744ee4ff4a38b36", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1617ec4ad2b12b34b22e2d78bb96a27448fce04c/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1617ec4ad2b12b34b22e2d78bb96a27448fce04c/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=1617ec4ad2b12b34b22e2d78bb96a27448fce04c", "patch": "@@ -85,7 +85,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.has_type_flags(TypeFlags::HAS_TY_ERR)\n     }\n     fn has_param_types(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_PARAMS)\n+        self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)\n     }\n     fn has_infer_types(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_INFER)\n@@ -100,9 +100,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.has_type_flags(TypeFlags::KEEP_IN_LOCAL_TCX)\n     }\n     fn needs_infer(&self) -> bool {\n-        self.has_type_flags(\n-            TypeFlags::HAS_TY_INFER | TypeFlags::HAS_RE_INFER | TypeFlags::HAS_CT_INFER,\n-        )\n+        self.has_type_flags(TypeFlags::NEEDS_INFER)\n     }\n     fn has_placeholders(&self) -> bool {\n         self.has_type_flags("}, {"sha": "b25fd3c61fd5d24f93dd1556a6d3a1e7889b8fc8", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 89, "deletions": 61, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/1617ec4ad2b12b34b22e2d78bb96a27448fce04c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1617ec4ad2b12b34b22e2d78bb96a27448fce04c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1617ec4ad2b12b34b22e2d78bb96a27448fce04c", "patch": "@@ -515,79 +515,107 @@ pub struct CReaderCacheKey {\n     pub pos: usize,\n }\n \n-// Flags that we track on types. These flags are propagated upwards\n-// through the type during type construction, so that we can quickly\n-// check whether the type has various kinds of types in it without\n-// recursing over the type itself.\n bitflags! {\n+    /// Flags that we track on types. These flags are propagated upwards\n+    /// through the type during type construction, so that we can quickly check\n+    /// whether the type has various kinds of types in it without recursing\n+    /// over the type itself.\n     pub struct TypeFlags: u32 {\n-        const HAS_PARAMS         = 1 << 0;\n-        const HAS_TY_INFER       = 1 << 1;\n-        const HAS_RE_INFER       = 1 << 2;\n-        const HAS_RE_PLACEHOLDER = 1 << 3;\n-\n-        /// Does this have any `ReEarlyBound` regions? Used to\n-        /// determine whether substitition is required, since those\n-        /// represent regions that are bound in a `ty::Generics` and\n-        /// hence may be substituted.\n-        const HAS_RE_EARLY_BOUND = 1 << 4;\n-\n-        /// Does this have any region that \"appears free\" in the type?\n-        /// Basically anything but `ReLateBound` and `ReErased`.\n-        const HAS_FREE_REGIONS   = 1 << 5;\n-\n-        /// Is an error type reachable?\n-        const HAS_TY_ERR         = 1 << 6;\n-        const HAS_PROJECTION     = 1 << 7;\n-\n-        // FIXME: Rename this to the actual property since it's used for generators too\n-        const HAS_TY_CLOSURE     = 1 << 8;\n+        // Does this have parameters? Used to determine whether substitution is\n+        // required.\n+        /// Does this have [Param]?\n+        const HAS_TY_PARAM              = 1 << 0;\n+        /// Does this have [ReEarlyBound]?\n+        const HAS_RE_PARAM              = 1 << 1;\n+        /// Does this have [ConstKind::Param]?\n+        const HAS_CT_PARAM              = 1 << 2;\n+\n+        const NEEDS_SUBST               = TypeFlags::HAS_TY_PARAM.bits\n+                                        | TypeFlags::HAS_RE_PARAM.bits\n+                                        | TypeFlags::HAS_CT_PARAM.bits;\n+\n+        /// Does this have [Infer]?\n+        const HAS_TY_INFER              = 1 << 3;\n+        /// Does this have [ReVar]?\n+        const HAS_RE_INFER              = 1 << 4;\n+        /// Does this have [ConstKind::Infer]?\n+        const HAS_CT_INFER              = 1 << 5;\n+\n+        /// Does this have inference variables? Used to determine whether\n+        /// inference is required.\n+        const NEEDS_INFER               = TypeFlags::HAS_TY_INFER.bits\n+                                        | TypeFlags::HAS_RE_INFER.bits\n+                                        | TypeFlags::HAS_CT_INFER.bits;\n+\n+        /// Does this have [Placeholder]?\n+        const HAS_TY_PLACEHOLDER        = 1 << 6;\n+        /// Does this have [RePlaceholder]?\n+        const HAS_RE_PLACEHOLDER        = 1 << 7;\n+        /// Does this have [ConstKind::Placeholder]?\n+        const HAS_CT_PLACEHOLDER        = 1 << 8;\n \n         /// `true` if there are \"names\" of types and regions and so forth\n         /// that are local to a particular fn\n-        const HAS_FREE_LOCAL_NAMES = 1 << 9;\n+        const HAS_FREE_LOCAL_NAMES      = TypeFlags::HAS_TY_PARAM.bits\n+                                        | TypeFlags::HAS_RE_PARAM.bits\n+                                        | TypeFlags::HAS_CT_PARAM.bits\n+                                        | TypeFlags::HAS_TY_INFER.bits\n+                                        | TypeFlags::HAS_RE_INFER.bits\n+                                        | TypeFlags::HAS_CT_INFER.bits\n+                                        | TypeFlags::HAS_TY_PLACEHOLDER.bits\n+                                        | TypeFlags::HAS_RE_PLACEHOLDER.bits\n+                                        | TypeFlags::HAS_CT_PLACEHOLDER.bits;\n+\n+        /// Does this have [Projection] or [UnnormalizedProjection]?\n+        const HAS_TY_PROJECTION         = 1 << 9;\n+        /// Does this have [Opaque]?\n+        const HAS_TY_OPAQUE             = 1 << 10;\n+        /// Does this have [ConstKind::Unevaluated]?\n+        const HAS_CT_PROJECTION         = 1 << 11;\n+\n+        /// Could this type be normalized further?\n+        const HAS_PROJECTION            = TypeFlags::HAS_TY_PROJECTION.bits\n+                                        | TypeFlags::HAS_TY_OPAQUE.bits\n+                                        | TypeFlags::HAS_CT_PROJECTION.bits;\n \n         /// Present if the type belongs in a local type context.\n-        /// Only set for Infer other than Fresh.\n-        const KEEP_IN_LOCAL_TCX  = 1 << 10;\n-\n-        /// Does this have any `ReLateBound` regions? Used to check\n-        /// if a global bound is safe to evaluate.\n-        const HAS_RE_LATE_BOUND  = 1 << 11;\n+        /// Set for placeholders and inference variables that are not \"Fresh\".\n+        const KEEP_IN_LOCAL_TCX         = 1 << 12;\n \n-        /// Does this have any `ReErased` regions?\n-        const HAS_RE_ERASED  = 1 << 12;\n+        /// Is an error type reachable?\n+        const HAS_TY_ERR                = 1 << 13;\n \n-        const HAS_TY_PLACEHOLDER = 1 << 13;\n+        /// Does this have any region that \"appears free\" in the type?\n+        /// Basically anything but [ReLateBound] and [ReErased].\n+        const HAS_FREE_REGIONS          = 1 << 14;\n \n-        const HAS_CT_INFER       = 1 << 14;\n-        const HAS_CT_PLACEHOLDER = 1 << 15;\n-        /// Does this have any [Opaque] types.\n-        const HAS_TY_OPAQUE      = 1 << 16;\n+        /// Does this have any [ReLateBound] regions? Used to check\n+        /// if a global bound is safe to evaluate.\n+        const HAS_RE_LATE_BOUND         = 1 << 15;\n \n-        const NEEDS_SUBST        = TypeFlags::HAS_PARAMS.bits |\n-                                   TypeFlags::HAS_RE_EARLY_BOUND.bits;\n+        /// Does this have any [ReErased] regions?\n+        const HAS_RE_ERASED             = 1 << 16;\n \n         /// Flags representing the nominal content of a type,\n         /// computed by FlagsComputation. If you add a new nominal\n         /// flag, it should be added here too.\n-        const NOMINAL_FLAGS     = TypeFlags::HAS_PARAMS.bits |\n-                                  TypeFlags::HAS_TY_INFER.bits |\n-                                  TypeFlags::HAS_RE_INFER.bits |\n-                                  TypeFlags::HAS_RE_PLACEHOLDER.bits |\n-                                  TypeFlags::HAS_RE_EARLY_BOUND.bits |\n-                                  TypeFlags::HAS_FREE_REGIONS.bits |\n-                                  TypeFlags::HAS_TY_ERR.bits |\n-                                  TypeFlags::HAS_PROJECTION.bits |\n-                                  TypeFlags::HAS_TY_CLOSURE.bits |\n-                                  TypeFlags::HAS_FREE_LOCAL_NAMES.bits |\n-                                  TypeFlags::KEEP_IN_LOCAL_TCX.bits |\n-                                  TypeFlags::HAS_RE_LATE_BOUND.bits |\n-                                  TypeFlags::HAS_RE_ERASED.bits |\n-                                  TypeFlags::HAS_TY_PLACEHOLDER.bits |\n-                                  TypeFlags::HAS_CT_INFER.bits |\n-                                  TypeFlags::HAS_CT_PLACEHOLDER.bits |\n-                                  TypeFlags::HAS_TY_OPAQUE.bits;\n+        const NOMINAL_FLAGS             = TypeFlags::HAS_TY_PARAM.bits\n+                                        | TypeFlags::HAS_RE_PARAM.bits\n+                                        | TypeFlags::HAS_CT_PARAM.bits\n+                                        | TypeFlags::HAS_TY_INFER.bits\n+                                        | TypeFlags::HAS_RE_INFER.bits\n+                                        | TypeFlags::HAS_CT_INFER.bits\n+                                        | TypeFlags::HAS_TY_PLACEHOLDER.bits\n+                                        | TypeFlags::HAS_RE_PLACEHOLDER.bits\n+                                        | TypeFlags::HAS_CT_PLACEHOLDER.bits\n+                                        | TypeFlags::HAS_TY_PROJECTION.bits\n+                                        | TypeFlags::HAS_TY_OPAQUE.bits\n+                                        | TypeFlags::HAS_CT_PROJECTION.bits\n+                                        | TypeFlags::KEEP_IN_LOCAL_TCX.bits\n+                                        | TypeFlags::HAS_TY_ERR.bits\n+                                        | TypeFlags::HAS_FREE_REGIONS.bits\n+                                        | TypeFlags::HAS_RE_LATE_BOUND.bits\n+                                        | TypeFlags::HAS_RE_ERASED.bits;\n     }\n }\n \n@@ -1816,10 +1844,10 @@ impl<'tcx> ParamEnv<'tcx> {\n             Reveal::UserFacing => ParamEnvAnd { param_env: self, value },\n \n             Reveal::All => {\n-                if value.has_placeholders() || value.needs_infer() || value.has_param_types() {\n-                    ParamEnvAnd { param_env: self, value }\n-                } else {\n+                if value.is_global() {\n                     ParamEnvAnd { param_env: self.without_caller_bounds(), value }\n+                } else {\n+                    ParamEnvAnd { param_env: self, value }\n                 }\n             }\n         }"}, {"sha": "9f60c9cdbcc54c40430b6046f1c6a981098fc1eb", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1617ec4ad2b12b34b22e2d78bb96a27448fce04c/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1617ec4ad2b12b34b22e2d78bb96a27448fce04c/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=1617ec4ad2b12b34b22e2d78bb96a27448fce04c", "patch": "@@ -1768,7 +1768,7 @@ impl RegionKind {\n             }\n             ty::ReEarlyBound(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n-                flags = flags | TypeFlags::HAS_RE_EARLY_BOUND;\n+                flags = flags | TypeFlags::HAS_RE_PARAM;\n             }\n             ty::ReEmpty(_) | ty::ReStatic | ty::ReFree { .. } | ty::ReScope { .. } => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n@@ -1781,11 +1781,6 @@ impl RegionKind {\n             }\n         }\n \n-        match *self {\n-            ty::ReStatic | ty::ReEmpty(_) | ty::ReErased | ty::ReLateBound(..) => (),\n-            _ => flags = flags | TypeFlags::HAS_FREE_LOCAL_NAMES,\n-        }\n-\n         debug!(\"type_flags({:?}) = {:?}\", self, flags);\n \n         flags"}]}