{"sha": "4753fad99f12b4dc3160ff5e65cd459104ee204f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NTNmYWQ5OWYxMmI0ZGMzMTYwZmY1ZTY1Y2Q0NTkxMDRlZTIwNGY=", "commit": {"author": {"name": "Eduard Bopp", "email": "eduard.bopp@aepsil0n.de", "date": "2015-06-10T18:16:37Z"}, "committer": {"name": "Eduard Bopp", "email": "eduard.bopp@aepsil0n.de", "date": "2015-06-10T18:28:51Z"}, "message": "Add error explanation for E0057, E0059\u2013E0061\n\nThese errors all relate to type checking, specifically the number of function\narguments, and occur in librustc_typeck::check::check_argument_types.", "tree": {"sha": "afe90df2f5812d9a3f1e3c8b19be1353588dc4b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afe90df2f5812d9a3f1e3c8b19be1353588dc4b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4753fad99f12b4dc3160ff5e65cd459104ee204f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4753fad99f12b4dc3160ff5e65cd459104ee204f", "html_url": "https://github.com/rust-lang/rust/commit/4753fad99f12b4dc3160ff5e65cd459104ee204f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4753fad99f12b4dc3160ff5e65cd459104ee204f/comments", "author": {"login": "milibopp", "id": 3098430, "node_id": "MDQ6VXNlcjMwOTg0MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/3098430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milibopp", "html_url": "https://github.com/milibopp", "followers_url": "https://api.github.com/users/milibopp/followers", "following_url": "https://api.github.com/users/milibopp/following{/other_user}", "gists_url": "https://api.github.com/users/milibopp/gists{/gist_id}", "starred_url": "https://api.github.com/users/milibopp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milibopp/subscriptions", "organizations_url": "https://api.github.com/users/milibopp/orgs", "repos_url": "https://api.github.com/users/milibopp/repos", "events_url": "https://api.github.com/users/milibopp/events{/privacy}", "received_events_url": "https://api.github.com/users/milibopp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "milibopp", "id": 3098430, "node_id": "MDQ6VXNlcjMwOTg0MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/3098430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milibopp", "html_url": "https://github.com/milibopp", "followers_url": "https://api.github.com/users/milibopp/followers", "following_url": "https://api.github.com/users/milibopp/following{/other_user}", "gists_url": "https://api.github.com/users/milibopp/gists{/gist_id}", "starred_url": "https://api.github.com/users/milibopp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milibopp/subscriptions", "organizations_url": "https://api.github.com/users/milibopp/orgs", "repos_url": "https://api.github.com/users/milibopp/repos", "events_url": "https://api.github.com/users/milibopp/events{/privacy}", "received_events_url": "https://api.github.com/users/milibopp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8025bc964c0f31726636811d97f9f46cd0d4c40f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8025bc964c0f31726636811d97f9f46cd0d4c40f", "html_url": "https://github.com/rust-lang/rust/commit/8025bc964c0f31726636811d97f9f46cd0d4c40f"}], "stats": {"total": 95, "additions": 91, "deletions": 4}, "files": [{"sha": "0f6d5f249df7d46ceb67416f8159b0a393e06ab3", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 91, "deletions": 4, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/4753fad99f12b4dc3160ff5e65cd459104ee204f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4753fad99f12b4dc3160ff5e65cd459104ee204f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=4753fad99f12b4dc3160ff5e65cd459104ee204f", "patch": "@@ -358,6 +358,97 @@ create an infinite recursion of dereferencing, in which case the only fix is to\n somehow break the recursion.\n \"##,\n \n+E0057: r##\"\n+When invoking closures or other implementations of the function traits `Fn`,\n+`FnMut` or `FnOnce` using call notation, the number of parameters passed to the\n+function must match its definition.\n+\n+An example using a closure:\n+\n+```\n+let f = |x| x * 3;\n+let a = f();        // invalid, too few parameters\n+let b = f(4);       // this works!\n+let c = f(2, 3);    // invalid, too many parameters\n+```\n+\n+A generic function must be treated similarly:\n+\n+```\n+fn foo<F: Fn()>(f: F) {\n+    f(); // this is valid, but f(3) would not work\n+}\n+```\n+\"##,\n+\n+E0059: r##\"\n+The built-in function traits are generic over a tuple of the function arguments.\n+If one uses angle-bracket notation (`Fn<(T,), Output=U>`) instead of parentheses\n+(`Fn(T) -> U`) to denote the function trait, the type parameter should be a\n+tuple. Otherwise function call notation cannot be used and the trait will not be\n+implemented by closures.\n+\n+The most likely source of this error is using angle-bracket notation without\n+wrapping the function argument type into a tuple, for example:\n+\n+```\n+fn foo<F: Fn<i32>>(f: F) -> F::Output { f(3) }\n+```\n+\n+It can be fixed by adjusting the trait bound like this:\n+\n+```\n+fn foo<F: Fn<(i32,)>>(f: F) -> F::Output { f(3) }\n+```\n+\n+Note that `(T,)` always denotes the type of a 1-tuple containing an element of\n+type `T`. The comma is necessary for syntactic disambiguation.\n+\"##,\n+\n+E0060: r##\"\n+External C functions are allowed to be variadic. However, a variadic function\n+takes a minimum number of arguments. For example, consider C's variadic `printf`\n+function:\n+\n+```\n+extern crate libc;\n+use libc::{ c_char, c_int };\n+\n+extern \"C\" {\n+    fn printf(_: *const c_char, ...) -> c_int;\n+}\n+```\n+\n+Using this declaration, it must be called with at least one argument, so\n+simply calling `printf()` is illegal. But the following uses are allowed:\n+\n+```\n+unsafe {\n+    use std::ffi::CString;\n+\n+    printf(CString::new(\"test\\n\").unwrap().as_ptr());\n+    printf(CString::new(\"number = %d\\n\").unwrap().as_ptr(), 3);\n+    printf(CString::new(\"%d, %d\\n\").unwrap().as_ptr(), 10, 5);\n+}\n+```\n+\"##,\n+\n+E0061: r##\"\n+The number of arguments passed to a function must match the number of arguments\n+specified in the function signature.\n+\n+For example, a function like\n+\n+```\n+fn f(a: u16, b: &str) {}\n+```\n+\n+must always be called with exactly two arguments, e.g. `f(2, \"test\")`.\n+\n+Note, that Rust does not have a notion of optional function arguments or\n+variadic functions (except for its C-FFI).\n+\"##,\n+\n E0062: r##\"\n This error indicates that during an attempt to build a struct or struct-like\n enum variant, one of the fields was specified more than once. Each field should\n@@ -1210,10 +1301,6 @@ register_diagnostics! {\n     E0036, // incorrect number of type parameters given for this method\n     E0044, // foreign items may not have type parameters\n     E0045, // variadic function must have C calling convention\n-    E0057, // method has an incompatible type for trait\n-    E0059,\n-    E0060,\n-    E0061,\n     E0068,\n     E0071,\n     E0074,"}]}