{"sha": "d98100b9679609516c9cbf67eac3ec35e0e5d5fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ODEwMGI5Njc5NjA5NTE2YzljYmY2N2VhYzNlYzM1ZTBlNWQ1ZmM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-04-29T14:58:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-05-01T12:58:42Z"}, "message": "Give removal reasons to removed features", "tree": {"sha": "91cf77f6ef9aef9ddde91d488ca01376769a2ad0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91cf77f6ef9aef9ddde91d488ca01376769a2ad0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d98100b9679609516c9cbf67eac3ec35e0e5d5fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d98100b9679609516c9cbf67eac3ec35e0e5d5fc", "html_url": "https://github.com/rust-lang/rust/commit/d98100b9679609516c9cbf67eac3ec35e0e5d5fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d98100b9679609516c9cbf67eac3ec35e0e5d5fc/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "300b6bb41784d63b04bf621a3290fe1c247f873f", "url": "https://api.github.com/repos/rust-lang/rust/commits/300b6bb41784d63b04bf621a3290fe1c247f873f", "html_url": "https://github.com/rust-lang/rust/commit/300b6bb41784d63b04bf621a3290fe1c247f873f"}], "stats": {"total": 82, "additions": 46, "deletions": 36}, "files": [{"sha": "4d4d1e10535ce8948e4bf4d1e260925450340aef", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/d98100b9679609516c9cbf67eac3ec35e0e5d5fc/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98100b9679609516c9cbf67eac3ec35e0e5d5fc/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d98100b9679609516c9cbf67eac3ec35e0e5d5fc", "patch": "@@ -90,24 +90,24 @@ macro_rules! declare_features {\n         }\n     };\n \n-    ($((removed, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n+    ($((removed, $feature: ident, $ver: expr, $issue: expr, None, $reason: expr),)+) => {\n         /// Represents unstable features which have since been removed (it was once Active)\n-        const REMOVED_FEATURES: &'static [(&'static str, &'static str, Option<u32>)] = &[\n-            $((stringify!($feature), $ver, $issue)),+\n+        const REMOVED_FEATURES: &[(&str, &str, Option<u32>, Option<&str>)] = &[\n+            $((stringify!($feature), $ver, $issue, $reason)),+\n         ];\n     };\n \n     ($((stable_removed, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n         /// Represents stable features which have since been removed (it was once Accepted)\n-        const STABLE_REMOVED_FEATURES: &'static [(&'static str, &'static str, Option<u32>)] = &[\n-            $((stringify!($feature), $ver, $issue)),+\n+        const STABLE_REMOVED_FEATURES: &[(&str, &str, Option<u32>, Option<&str>)] = &[\n+            $((stringify!($feature), $ver, $issue, None)),+\n         ];\n     };\n \n     ($((accepted, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n         /// Those language feature has since been Accepted (it was once Active)\n-        const ACCEPTED_FEATURES: &'static [(&'static str, &'static str, Option<u32>)] = &[\n-            $((stringify!($feature), $ver, $issue)),+\n+        const ACCEPTED_FEATURES: &[(&str, &str, Option<u32>, Option<&str>)] = &[\n+            $((stringify!($feature), $ver, $issue, None)),+\n         ];\n     }\n }\n@@ -460,29 +460,29 @@ declare_features! (\n );\n \n declare_features! (\n-    (removed, import_shadowing, \"1.0.0\", None, None),\n-    (removed, managed_boxes, \"1.0.0\", None, None),\n+    (removed, import_shadowing, \"1.0.0\", None, None, None),\n+    (removed, managed_boxes, \"1.0.0\", None, None, None),\n     // Allows use of unary negate on unsigned integers, e.g. -e for e: u8\n-    (removed, negate_unsigned, \"1.0.0\", Some(29645), None),\n-    (removed, reflect, \"1.0.0\", Some(27749), None),\n+    (removed, negate_unsigned, \"1.0.0\", Some(29645), None, None),\n+    (removed, reflect, \"1.0.0\", Some(27749), None, None),\n     // A way to temporarily opt out of opt in copy. This will *never* be accepted.\n-    (removed, opt_out_copy, \"1.0.0\", None, None),\n-    (removed, quad_precision_float, \"1.0.0\", None, None),\n-    (removed, struct_inherit, \"1.0.0\", None, None),\n-    (removed, test_removed_feature, \"1.0.0\", None, None),\n-    (removed, visible_private_types, \"1.0.0\", None, None),\n-    (removed, unsafe_no_drop_flag, \"1.0.0\", None, None),\n+    (removed, opt_out_copy, \"1.0.0\", None, None, None),\n+    (removed, quad_precision_float, \"1.0.0\", None, None, None),\n+    (removed, struct_inherit, \"1.0.0\", None, None, None),\n+    (removed, test_removed_feature, \"1.0.0\", None, None, None),\n+    (removed, visible_private_types, \"1.0.0\", None, None, None),\n+    (removed, unsafe_no_drop_flag, \"1.0.0\", None, None, None),\n     // Allows using items which are missing stability attributes\n     // rustc internal\n-    (removed, unmarked_api, \"1.0.0\", None, None),\n-    (removed, pushpop_unsafe, \"1.2.0\", None, None),\n-    (removed, allocator, \"1.0.0\", None, None),\n-    // Allows the `#[simd]` attribute -- removed in favor of `#[repr(simd)]`\n-    (removed, simd, \"1.0.0\", Some(27731), None),\n-    // Merged into `slice_patterns`\n-    (removed, advanced_slice_patterns, \"1.0.0\", Some(23121), None),\n-    // Subsumed by `use`\n-    (removed, macro_reexport, \"1.0.0\", Some(29638), None),\n+    (removed, unmarked_api, \"1.0.0\", None, None, None),\n+    (removed, pushpop_unsafe, \"1.2.0\", None, None, None),\n+    (removed, allocator, \"1.0.0\", None, None, None),\n+    (removed, simd, \"1.0.0\", Some(27731), None,\n+     Some(\"removed in favor of `#[repr(simd)]`\")),\n+    (removed, advanced_slice_patterns, \"1.0.0\", Some(23121), None,\n+     Some(\"merged into `#![feature(slice_patterns)]`\")),\n+    (removed, macro_reexport, \"1.0.0\", Some(29638), None,\n+     Some(\"subsumed by `#![feature(use_extern_macros)]` and `pub use`\")),\n );\n \n declare_features! (\n@@ -1200,7 +1200,7 @@ fn find_lang_feature_issue(feature: &str) -> Option<u32> {\n         let found = ACCEPTED_FEATURES.iter().chain(REMOVED_FEATURES).chain(STABLE_REMOVED_FEATURES)\n             .find(|t| t.0 == feature);\n         match found {\n-            Some(&(_, _, issue)) => issue,\n+            Some(&(_, _, issue, _)) => issue,\n             None => panic!(\"Feature `{}` is not declared anywhere\", feature),\n         }\n     }\n@@ -1814,8 +1814,12 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                     crate_edition: Edition) -> Features {\n-    fn feature_removed(span_handler: &Handler, span: Span) {\n-        span_err!(span_handler, span, E0557, \"feature has been removed\");\n+    fn feature_removed(span_handler: &Handler, span: Span, reason: Option<&str>) {\n+        let mut err = struct_span_err!(span_handler, span, E0557, \"feature has been removed\");\n+        if let Some(reason) = reason {\n+            err.span_note(span, reason);\n+        }\n+        err.emit();\n     }\n \n     let mut features = Features::new();\n@@ -1848,19 +1852,19 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                         set(&mut features, mi.span);\n                         feature_checker.collect(&features, mi.span);\n                     }\n-                    else if let Some(&(_, _, _)) = REMOVED_FEATURES.iter()\n-                            .find(|& &(n, _, _)| name == n)\n+                    else if let Some(&(.., reason)) = REMOVED_FEATURES.iter()\n+                            .find(|& &(n, ..)| name == n)\n                         .or_else(|| STABLE_REMOVED_FEATURES.iter()\n-                            .find(|& &(n, _, _)| name == n)) {\n-                        feature_removed(span_handler, mi.span);\n+                            .find(|& &(n, ..)| name == n)) {\n+                        feature_removed(span_handler, mi.span, reason);\n                     }\n-                    else if let Some(&(_, _, _)) = ACCEPTED_FEATURES.iter()\n-                        .find(|& &(n, _, _)| name == n) {\n+                    else if let Some(&(..)) = ACCEPTED_FEATURES.iter()\n+                        .find(|& &(n, ..)| name == n) {\n                         features.declared_stable_lang_features.push((name, mi.span));\n                     } else if let Some(&edition) = ALL_EDITIONS.iter()\n                                                               .find(|e| name == e.feature_name()) {\n                         if edition <= crate_edition {\n-                            feature_removed(span_handler, mi.span);\n+                            feature_removed(span_handler, mi.span, None);\n                         } else {\n                             for &(.., f_edition, set) in ACTIVE_FEATURES.iter() {\n                                 if let Some(f_edition) = f_edition {"}, {"sha": "ba0ab232e8648eb6d37275be4f69aeeeae96bdc7", "filename": "src/test/ui/macro-reexport-removed.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d98100b9679609516c9cbf67eac3ec35e0e5d5fc/src%2Ftest%2Fui%2Fmacro-reexport-removed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d98100b9679609516c9cbf67eac3ec35e0e5d5fc/src%2Ftest%2Fui%2Fmacro-reexport-removed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-reexport-removed.stderr?ref=d98100b9679609516c9cbf67eac3ec35e0e5d5fc", "patch": "@@ -1,6 +1,12 @@\n error[E0557]: feature has been removed\n   --> $DIR/macro-reexport-removed.rs:13:12\n    |\n+LL | #![feature(macro_reexport)] //~ ERROR feature has been removed\n+   |            ^^^^^^^^^^^^^^\n+   |\n+note: subsumed by `#![feature(use_extern_macros)]` and `pub use`\n+  --> $DIR/macro-reexport-removed.rs:13:12\n+   |\n LL | #![feature(macro_reexport)] //~ ERROR feature has been removed\n    |            ^^^^^^^^^^^^^^\n "}]}