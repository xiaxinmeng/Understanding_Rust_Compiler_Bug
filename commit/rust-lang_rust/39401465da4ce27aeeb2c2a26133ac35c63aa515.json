{"sha": "39401465da4ce27aeeb2c2a26133ac35c63aa515", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NDAxNDY1ZGE0Y2UyN2FlZWIyYzJhMjYxMzNhYzM1YzYzYWE1MTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-17T10:14:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-17T10:14:19Z"}, "message": "Auto merge of #60892 - davidtwco:issue-60622, r=oli-obk\n\nChecking generic args after late bound region err.\n\nFixes #60622.\n\nThis PR fixes an ICE that occurs when a late bound region error is\nemitted and that resulted in the rest of the generic arguments of a\nfunction not being checked.\n\nFor example, you could specify a generic type parameter `T` in a function\ncall `foo<'_, T>()` to a function that doesn't have a generic type\nparameter.\n\nSince an error wasn't emitted from the function, compilation\ncontinued to parts of typeck that didn't expect a generic type argument\nin a call for a function that didn't have any generic type arguments.", "tree": {"sha": "e81c6ded74306f2cbcbfe02476638f06bc096182", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e81c6ded74306f2cbcbfe02476638f06bc096182"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39401465da4ce27aeeb2c2a26133ac35c63aa515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39401465da4ce27aeeb2c2a26133ac35c63aa515", "html_url": "https://github.com/rust-lang/rust/commit/39401465da4ce27aeeb2c2a26133ac35c63aa515", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39401465da4ce27aeeb2c2a26133ac35c63aa515/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68fd80fa1efb74863bda050b21edcd44125ee85b", "url": "https://api.github.com/repos/rust-lang/rust/commits/68fd80fa1efb74863bda050b21edcd44125ee85b", "html_url": "https://github.com/rust-lang/rust/commit/68fd80fa1efb74863bda050b21edcd44125ee85b"}, {"sha": "bff8a86698195ba2d2798405d3535efdce2fccef", "url": "https://api.github.com/repos/rust-lang/rust/commits/bff8a86698195ba2d2798405d3535efdce2fccef", "html_url": "https://github.com/rust-lang/rust/commit/bff8a86698195ba2d2798405d3535efdce2fccef"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "4b052aec5fc2f3be0472421fb253bd40a803d394", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39401465da4ce27aeeb2c2a26133ac35c63aa515/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39401465da4ce27aeeb2c2a26133ac35c63aa515/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=39401465da4ce27aeeb2c2a26133ac35c63aa515", "patch": "@@ -290,6 +290,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         }\n \n         // Prohibit explicit lifetime arguments if late-bound lifetime parameters are present.\n+        let mut reported_late_bound_region_err = None;\n         if !infer_lifetimes {\n             if let Some(span_late) = def.has_late_bound_regions {\n                 let msg = \"cannot specify lifetime arguments explicitly \\\n@@ -301,13 +302,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                     let mut err = tcx.sess.struct_span_err(span, msg);\n                     err.span_note(span_late, note);\n                     err.emit();\n-                    return (true, None);\n+                    reported_late_bound_region_err = Some(true);\n                 } else {\n                     let mut multispan = MultiSpan::from_span(span);\n                     multispan.push_span_label(span_late, note.to_string());\n                     tcx.lint_hir(lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS,\n                                  args.args[0].id(), multispan, msg);\n-                    return (false, None);\n+                    reported_late_bound_region_err = Some(false);\n                 }\n             }\n         }\n@@ -325,7 +326,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             // For kinds without defaults (i.e., lifetimes), `required == permitted`.\n             // For other kinds (i.e., types), `permitted` may be greater than `required`.\n             if required <= provided && provided <= permitted {\n-                return (false, None);\n+                return (reported_late_bound_region_err.unwrap_or(false), None);\n             }\n \n             // Unfortunately lifetime and type parameter mismatches are typically styled\n@@ -380,7 +381,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n              potential_assoc_types)\n         };\n \n-        if !infer_lifetimes || arg_counts.lifetimes > param_counts.lifetimes {\n+        if reported_late_bound_region_err.is_none()\n+            && (!infer_lifetimes || arg_counts.lifetimes > param_counts.lifetimes) {\n             check_kind_count(\n                 \"lifetime\",\n                 param_counts.lifetimes,\n@@ -410,7 +412,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 arg_counts.lifetimes,\n             )\n         } else {\n-            (false, None)\n+            (reported_late_bound_region_err.unwrap_or(false), None)\n         }\n     }\n "}, {"sha": "d6a0189c3e042230787819ca6512c6f621bd91bc", "filename": "src/test/ui/issue-60622.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39401465da4ce27aeeb2c2a26133ac35c63aa515/src%2Ftest%2Fui%2Fissue-60622.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39401465da4ce27aeeb2c2a26133ac35c63aa515/src%2Ftest%2Fui%2Fissue-60622.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-60622.rs?ref=39401465da4ce27aeeb2c2a26133ac35c63aa515", "patch": "@@ -0,0 +1,18 @@\n+// ignore-tidy-linelength\n+\n+#![deny(warnings)]\n+\n+struct Borked {}\n+\n+impl Borked {\n+    fn a(&self) {}\n+}\n+\n+fn run_wild<T>(b: &Borked) {\n+    b.a::<'_, T>();\n+    //~^ ERROR cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+    //~^^ ERROR wrong number of type arguments: expected 0, found 1\n+    //~^^^ WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+}\n+\n+fn main() {}"}, {"sha": "0c337c315f161741f5c796d11261491de8a32224", "filename": "src/test/ui/issue-60622.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/39401465da4ce27aeeb2c2a26133ac35c63aa515/src%2Ftest%2Fui%2Fissue-60622.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39401465da4ce27aeeb2c2a26133ac35c63aa515/src%2Ftest%2Fui%2Fissue-60622.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-60622.stderr?ref=39401465da4ce27aeeb2c2a26133ac35c63aa515", "patch": "@@ -0,0 +1,27 @@\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/issue-60622.rs:12:11\n+   |\n+LL |     fn a(&self) {}\n+   |          - the late bound lifetime parameter is introduced here\n+...\n+LL |     b.a::<'_, T>();\n+   |           ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-60622.rs:3:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: #[deny(late_bound_lifetime_arguments)] implied by #[deny(warnings)]\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n+\n+error[E0107]: wrong number of type arguments: expected 0, found 1\n+  --> $DIR/issue-60622.rs:12:15\n+   |\n+LL |     b.a::<'_, T>();\n+   |               ^ unexpected type argument\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0107`."}]}