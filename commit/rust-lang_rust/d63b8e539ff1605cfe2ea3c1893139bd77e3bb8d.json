{"sha": "d63b8e539ff1605cfe2ea3c1893139bd77e3bb8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2M2I4ZTUzOWZmMTYwNWNmZTJlYTNjMTg5MzEzOWJkNzdlM2JiOGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-23T00:33:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-23T00:33:23Z"}, "message": "Auto merge of #31116 - bluss:expect-out-cold, r=alexcrichton\n\nUse cold functions for panic formatting Option::expect, Result::unwrap, expect\n\nThese methods are marked inline, but insert a big chunk of formatting\ncode, as well as other error path related code, such as\ndeallocating a std::io::Error if you have one.\n\nWe can explicitly separate out that code path into a function that is\nnever inline, since the panicking case should always be rare.", "tree": {"sha": "bb8ebf89ac6a196ab35e9dfc05cfece1841be41a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb8ebf89ac6a196ab35e9dfc05cfece1841be41a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d63b8e539ff1605cfe2ea3c1893139bd77e3bb8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d63b8e539ff1605cfe2ea3c1893139bd77e3bb8d", "html_url": "https://github.com/rust-lang/rust/commit/d63b8e539ff1605cfe2ea3c1893139bd77e3bb8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d63b8e539ff1605cfe2ea3c1893139bd77e3bb8d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2740b6adbd219a17efb66a3f75d78404ab715b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2740b6adbd219a17efb66a3f75d78404ab715b6", "html_url": "https://github.com/rust-lang/rust/commit/c2740b6adbd219a17efb66a3f75d78404ab715b6"}, {"sha": "257bff3192e2c7313a4f8cfcac8839a573b42f6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/257bff3192e2c7313a4f8cfcac8839a573b42f6b", "html_url": "https://github.com/rust-lang/rust/commit/257bff3192e2c7313a4f8cfcac8839a573b42f6b"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "eeb0c173b9b7b8238f872abdc042402b572f9a74", "filename": "src/libcore/option.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d63b8e539ff1605cfe2ea3c1893139bd77e3bb8d/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d63b8e539ff1605cfe2ea3c1893139bd77e3bb8d/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=d63b8e539ff1605cfe2ea3c1893139bd77e3bb8d", "patch": "@@ -295,7 +295,7 @@ impl<T> Option<T> {\n     pub fn expect(self, msg: &str) -> T {\n         match self {\n             Some(val) => val,\n-            None => panic!(\"{}\", msg),\n+            None => expect_failed(msg),\n         }\n     }\n \n@@ -697,6 +697,14 @@ impl<T: Default> Option<T> {\n     }\n }\n \n+// This is a separate function to reduce the code size of .expect() itself.\n+#[inline(never)]\n+#[cold]\n+fn expect_failed(msg: &str) -> ! {\n+    panic!(\"{}\", msg)\n+}\n+\n+\n /////////////////////////////////////////////////////////////////////////////\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "9bd6ed12798a5efc58703e91519ce5696e5c26f5", "filename": "src/libcore/result.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d63b8e539ff1605cfe2ea3c1893139bd77e3bb8d/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d63b8e539ff1605cfe2ea3c1893139bd77e3bb8d/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=d63b8e539ff1605cfe2ea3c1893139bd77e3bb8d", "patch": "@@ -684,8 +684,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     pub fn unwrap(self) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(e) =>\n-                panic!(\"called `Result::unwrap()` on an `Err` value: {:?}\", e)\n+            Err(e) => unwrap_failed(\"called `Result::unwrap()` on an `Err` value\", e),\n         }\n     }\n \n@@ -706,7 +705,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     pub fn expect(self, msg: &str) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(e) => panic!(\"{}: {:?}\", msg, e),\n+            Err(e) => unwrap_failed(msg, e),\n         }\n     }\n }\n@@ -734,13 +733,19 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unwrap_err(self) -> E {\n         match self {\n-            Ok(t) =>\n-                panic!(\"called `Result::unwrap_err()` on an `Ok` value: {:?}\", t),\n-            Err(e) => e\n+            Ok(t) => unwrap_failed(\"called `Result::unwrap_err()` on an `Ok` value\", t),\n+            Err(e) => e,\n         }\n     }\n }\n \n+// This is a separate function to reduce the code size of the methods\n+#[inline(never)]\n+#[cold]\n+fn unwrap_failed<E: fmt::Debug>(msg: &str, error: E) -> ! {\n+    panic!(\"{}: {:?}\", msg, error)\n+}\n+\n /////////////////////////////////////////////////////////////////////////////\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////"}]}