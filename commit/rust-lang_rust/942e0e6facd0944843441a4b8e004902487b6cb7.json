{"sha": "942e0e6facd0944843441a4b8e004902487b6cb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MmUwZTZmYWNkMDk0NDg0MzQ0MWE0YjhlMDA0OTAyNDg3YjZjYjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-19T22:54:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-19T22:54:29Z"}, "message": "Auto merge of #5800 - montrivo:bugfix/redundant_closure, r=matthiaskrgr\n\nredundant_closure_call - don't lint when used more than once\n\nFixes #3354.\n\nchangelog: fix redundant_closure_call false positive when closure called more than once", "tree": {"sha": "8b86c8cd97a72608a2fc9e02599f64a6c0ce7aa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b86c8cd97a72608a2fc9e02599f64a6c0ce7aa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/942e0e6facd0944843441a4b8e004902487b6cb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/942e0e6facd0944843441a4b8e004902487b6cb7", "html_url": "https://github.com/rust-lang/rust/commit/942e0e6facd0944843441a4b8e004902487b6cb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/942e0e6facd0944843441a4b8e004902487b6cb7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cf4219c1673533eb5caf304237bffaa8e847067", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf4219c1673533eb5caf304237bffaa8e847067", "html_url": "https://github.com/rust-lang/rust/commit/8cf4219c1673533eb5caf304237bffaa8e847067"}, {"sha": "1ac8b85c9fd38ff0a14061cae0b4d31e9bfafd56", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac8b85c9fd38ff0a14061cae0b4d31e9bfafd56", "html_url": "https://github.com/rust-lang/rust/commit/1ac8b85c9fd38ff0a14061cae0b4d31e9bfafd56"}], "stats": {"total": 379, "additions": 233, "deletions": 146}, "files": [{"sha": "f371942dbeec57056ca35176bbda2f005d9d8084", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/942e0e6facd0944843441a4b8e004902487b6cb7/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942e0e6facd0944843441a4b8e004902487b6cb7/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=942e0e6facd0944843441a4b8e004902487b6cb7", "patch": "@@ -276,6 +276,7 @@ mod ptr_offset_with_cast;\n mod question_mark;\n mod ranges;\n mod redundant_clone;\n+mod redundant_closure_call;\n mod redundant_field_names;\n mod redundant_pub_crate;\n mod redundant_static_lifetimes;\n@@ -702,7 +703,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &misc_early::DOUBLE_NEG,\n         &misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n         &misc_early::MIXED_CASE_HEX_LITERALS,\n-        &misc_early::REDUNDANT_CLOSURE_CALL,\n         &misc_early::REDUNDANT_PATTERN,\n         &misc_early::UNNEEDED_FIELD_PATTERN,\n         &misc_early::UNNEEDED_WILDCARD_PATTERN,\n@@ -759,6 +759,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &ranges::RANGE_ZIP_WITH_LEN,\n         &ranges::REVERSED_EMPTY_RANGES,\n         &redundant_clone::REDUNDANT_CLONE,\n+        &redundant_closure_call::REDUNDANT_CLOSURE_CALL,\n         &redundant_field_names::REDUNDANT_FIELD_NAMES,\n         &redundant_pub_crate::REDUNDANT_PUB_CRATE,\n         &redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n@@ -1018,6 +1019,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box int_plus_one::IntPlusOne);\n     store.register_early_pass(|| box formatting::Formatting);\n     store.register_early_pass(|| box misc_early::MiscEarlyLints);\n+    store.register_early_pass(|| box redundant_closure_call::RedundantClosureCall);\n+    store.register_late_pass(|| box redundant_closure_call::RedundantClosureCall);\n     store.register_early_pass(|| box returns::Return);\n     store.register_late_pass(|| box let_and_return::LetReturn);\n     store.register_early_pass(|| box collapsible_if::CollapsibleIf);\n@@ -1359,7 +1362,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&misc_early::DOUBLE_NEG),\n         LintId::of(&misc_early::DUPLICATE_UNDERSCORE_ARGUMENT),\n         LintId::of(&misc_early::MIXED_CASE_HEX_LITERALS),\n-        LintId::of(&misc_early::REDUNDANT_CLOSURE_CALL),\n         LintId::of(&misc_early::REDUNDANT_PATTERN),\n         LintId::of(&misc_early::UNNEEDED_WILDCARD_PATTERN),\n         LintId::of(&misc_early::ZERO_PREFIXED_LITERAL),\n@@ -1393,6 +1395,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&ranges::RANGE_ZIP_WITH_LEN),\n         LintId::of(&ranges::REVERSED_EMPTY_RANGES),\n         LintId::of(&redundant_clone::REDUNDANT_CLONE),\n+        LintId::of(&redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n         LintId::of(&redundant_field_names::REDUNDANT_FIELD_NAMES),\n         LintId::of(&redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n         LintId::of(&reference::DEREF_ADDROF),\n@@ -1593,7 +1596,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::UNNECESSARY_FILTER_MAP),\n         LintId::of(&methods::USELESS_ASREF),\n         LintId::of(&misc::SHORT_CIRCUIT_STATEMENT),\n-        LintId::of(&misc_early::REDUNDANT_CLOSURE_CALL),\n         LintId::of(&misc_early::UNNEEDED_WILDCARD_PATTERN),\n         LintId::of(&misc_early::ZERO_PREFIXED_LITERAL),\n         LintId::of(&needless_bool::BOOL_COMPARISON),\n@@ -1608,6 +1610,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&precedence::PRECEDENCE),\n         LintId::of(&ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n         LintId::of(&ranges::RANGE_ZIP_WITH_LEN),\n+        LintId::of(&redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n         LintId::of(&reference::DEREF_ADDROF),\n         LintId::of(&reference::REF_IN_DEREF),\n         LintId::of(&repeat_once::REPEAT_ONCE),"}, {"sha": "29aba7c121873bbd6c57aa3d24d2758942040ba3", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 4, "deletions": 104, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/942e0e6facd0944843441a4b8e004902487b6cb7/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942e0e6facd0944843441a4b8e004902487b6cb7/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=942e0e6facd0944843441a4b8e004902487b6cb7", "patch": "@@ -1,13 +1,9 @@\n-use crate::utils::{\n-    constants, snippet_opt, snippet_with_applicability, span_lint, span_lint_and_help, span_lint_and_sugg,\n-    span_lint_and_then,\n-};\n-use if_chain::if_chain;\n+use crate::utils::{constants, snippet_opt, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n use rustc_ast::ast::{\n-    BindingMode, Block, Expr, ExprKind, GenericParamKind, Generics, Lit, LitFloatType, LitIntType, LitKind, Mutability,\n-    NodeId, Pat, PatKind, StmtKind, UnOp,\n+    BindingMode, Expr, ExprKind, GenericParamKind, Generics, Lit, LitFloatType, LitIntType, LitKind, Mutability,\n+    NodeId, Pat, PatKind, UnOp,\n };\n-use rustc_ast::visit::{walk_expr, FnKind, Visitor};\n+use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n@@ -70,28 +66,6 @@ declare_clippy_lint! {\n     \"function arguments having names which only differ by an underscore\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Detects closures called in the same expression where they\n-    /// are defined.\n-    ///\n-    /// **Why is this bad?** It is unnecessarily adding to the expression's\n-    /// complexity.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust,ignore\n-    /// // Bad\n-    /// let a = (|| 42)()\n-    ///\n-    /// // Good\n-    /// let a = 42\n-    /// ```\n-    pub REDUNDANT_CLOSURE_CALL,\n-    complexity,\n-    \"throwaway closures called in the expression they are defined\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Detects expressions of the form `--x`.\n     ///\n@@ -278,7 +252,6 @@ declare_clippy_lint! {\n declare_lint_pass!(MiscEarlyLints => [\n     UNNEEDED_FIELD_PATTERN,\n     DUPLICATE_UNDERSCORE_ARGUMENT,\n-    REDUNDANT_CLOSURE_CALL,\n     DOUBLE_NEG,\n     MIXED_CASE_HEX_LITERALS,\n     UNSEPARATED_LITERAL_SUFFIX,\n@@ -288,30 +261,6 @@ declare_lint_pass!(MiscEarlyLints => [\n     UNNEEDED_WILDCARD_PATTERN,\n ]);\n \n-// Used to find `return` statements or equivalents e.g., `?`\n-struct ReturnVisitor {\n-    found_return: bool,\n-}\n-\n-impl ReturnVisitor {\n-    #[must_use]\n-    fn new() -> Self {\n-        Self { found_return: false }\n-    }\n-}\n-\n-impl<'ast> Visitor<'ast> for ReturnVisitor {\n-    fn visit_expr(&mut self, ex: &'ast Expr) {\n-        if let ExprKind::Ret(_) = ex.kind {\n-            self.found_return = true;\n-        } else if let ExprKind::Try(_) = ex.kind {\n-            self.found_return = true;\n-        }\n-\n-        walk_expr(self, ex)\n-    }\n-}\n-\n impl EarlyLintPass for MiscEarlyLints {\n     fn check_generics(&mut self, cx: &EarlyContext<'_>, gen: &Generics) {\n         for param in &gen.params {\n@@ -453,30 +402,6 @@ impl EarlyLintPass for MiscEarlyLints {\n             return;\n         }\n         match expr.kind {\n-            ExprKind::Call(ref paren, _) => {\n-                if let ExprKind::Paren(ref closure) = paren.kind {\n-                    if let ExprKind::Closure(_, _, _, ref decl, ref block, _) = closure.kind {\n-                        let mut visitor = ReturnVisitor::new();\n-                        visitor.visit_expr(block);\n-                        if !visitor.found_return {\n-                            span_lint_and_then(\n-                                cx,\n-                                REDUNDANT_CLOSURE_CALL,\n-                                expr.span,\n-                                \"Try not to call a closure in the expression where it is declared.\",\n-                                |diag| {\n-                                    if decl.inputs.is_empty() {\n-                                        let mut app = Applicability::MachineApplicable;\n-                                        let hint =\n-                                            snippet_with_applicability(cx, block.span, \"..\", &mut app).into_owned();\n-                                        diag.span_suggestion(expr.span, \"Try doing something like: \", hint, app);\n-                                    }\n-                                },\n-                            );\n-                        }\n-                    }\n-                }\n-            },\n             ExprKind::Unary(UnOp::Neg, ref inner) => {\n                 if let ExprKind::Unary(UnOp::Neg, _) = inner.kind {\n                     span_lint(\n@@ -491,31 +416,6 @@ impl EarlyLintPass for MiscEarlyLints {\n             _ => (),\n         }\n     }\n-\n-    fn check_block(&mut self, cx: &EarlyContext<'_>, block: &Block) {\n-        for w in block.stmts.windows(2) {\n-            if_chain! {\n-                if let StmtKind::Local(ref local) = w[0].kind;\n-                if let Option::Some(ref t) = local.init;\n-                if let ExprKind::Closure(..) = t.kind;\n-                if let PatKind::Ident(_, ident, _) = local.pat.kind;\n-                if let StmtKind::Semi(ref second) = w[1].kind;\n-                if let ExprKind::Assign(_, ref call, _) = second.kind;\n-                if let ExprKind::Call(ref closure, _) = call.kind;\n-                if let ExprKind::Path(_, ref path) = closure.kind;\n-                then {\n-                    if ident == path.segments[0].ident {\n-                        span_lint(\n-                            cx,\n-                            REDUNDANT_CLOSURE_CALL,\n-                            second.span,\n-                            \"Closure called just once immediately after it was declared\",\n-                        );\n-                    }\n-                }\n-            }\n-        }\n-    }\n }\n \n impl MiscEarlyLints {"}, {"sha": "8aa478ea2d69f41aa77253cc4696827820fa2a7e", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/942e0e6facd0944843441a4b8e004902487b6cb7/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942e0e6facd0944843441a4b8e004902487b6cb7/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=942e0e6facd0944843441a4b8e004902487b6cb7", "patch": "@@ -0,0 +1,151 @@\n+use crate::utils::{snippet_with_applicability, span_lint, span_lint_and_then};\n+use if_chain::if_chain;\n+use rustc_ast::ast;\n+use rustc_ast::visit as ast_visit;\n+use rustc_ast::visit::Visitor as AstVisitor;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_hir::intravisit as hir_visit;\n+use rustc_hir::intravisit::Visitor as HirVisitor;\n+use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Detects closures called in the same expression where they\n+    /// are defined.\n+    ///\n+    /// **Why is this bad?** It is unnecessarily adding to the expression's\n+    /// complexity.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    /// // Bad\n+    /// let a = (|| 42)()\n+    ///\n+    /// // Good\n+    /// let a = 42\n+    /// ```\n+    pub REDUNDANT_CLOSURE_CALL,\n+    complexity,\n+    \"throwaway closures called in the expression they are defined\"\n+}\n+\n+declare_lint_pass!(RedundantClosureCall => [REDUNDANT_CLOSURE_CALL]);\n+\n+// Used to find `return` statements or equivalents e.g., `?`\n+struct ReturnVisitor {\n+    found_return: bool,\n+}\n+\n+impl ReturnVisitor {\n+    #[must_use]\n+    fn new() -> Self {\n+        Self { found_return: false }\n+    }\n+}\n+\n+impl<'ast> ast_visit::Visitor<'ast> for ReturnVisitor {\n+    fn visit_expr(&mut self, ex: &'ast ast::Expr) {\n+        if let ast::ExprKind::Ret(_) = ex.kind {\n+            self.found_return = true;\n+        } else if let ast::ExprKind::Try(_) = ex.kind {\n+            self.found_return = true;\n+        }\n+\n+        ast_visit::walk_expr(self, ex)\n+    }\n+}\n+\n+impl EarlyLintPass for RedundantClosureCall {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n+        if in_external_macro(cx.sess(), expr.span) {\n+            return;\n+        }\n+        if_chain! {\n+            if let ast::ExprKind::Call(ref paren, _) = expr.kind;\n+            if let ast::ExprKind::Paren(ref closure) = paren.kind;\n+            if let ast::ExprKind::Closure(_, _, _, ref decl, ref block, _) = closure.kind;\n+            then {\n+                let mut visitor = ReturnVisitor::new();\n+                visitor.visit_expr(block);\n+                if !visitor.found_return {\n+                    span_lint_and_then(\n+                        cx,\n+                        REDUNDANT_CLOSURE_CALL,\n+                        expr.span,\n+                        \"try not to call a closure in the expression where it is declared.\",\n+                        |diag| {\n+                            if decl.inputs.is_empty() {\n+                                let mut app = Applicability::MachineApplicable;\n+                                let hint =\n+                                    snippet_with_applicability(cx, block.span, \"..\", &mut app).into_owned();\n+                                diag.span_suggestion(expr.span, \"try doing something like\", hint, app);\n+                            }\n+                        },\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n+    fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx hir::Block<'_>) {\n+        fn count_closure_usage<'tcx>(block: &'tcx hir::Block<'_>, path: &'tcx hir::Path<'tcx>) -> usize {\n+            struct ClosureUsageCount<'tcx> {\n+                path: &'tcx hir::Path<'tcx>,\n+                count: usize,\n+            };\n+            impl<'tcx> hir_visit::Visitor<'tcx> for ClosureUsageCount<'tcx> {\n+                type Map = Map<'tcx>;\n+\n+                fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n+                    if_chain! {\n+                        if let hir::ExprKind::Call(ref closure, _) = expr.kind;\n+                        if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = closure.kind;\n+                        if self.path.segments[0].ident == path.segments[0].ident\n+                            && self.path.res == path.res;\n+                        then {\n+                            self.count += 1;\n+                        }\n+                    }\n+                    hir_visit::walk_expr(self, expr);\n+                }\n+\n+                fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<Self::Map> {\n+                    hir_visit::NestedVisitorMap::None\n+                }\n+            };\n+            let mut closure_usage_count = ClosureUsageCount { path, count: 0 };\n+            closure_usage_count.visit_block(block);\n+            closure_usage_count.count\n+        }\n+\n+        for w in block.stmts.windows(2) {\n+            if_chain! {\n+                if let hir::StmtKind::Local(ref local) = w[0].kind;\n+                if let Option::Some(ref t) = local.init;\n+                if let hir::ExprKind::Closure(..) = t.kind;\n+                if let hir::PatKind::Binding(_, _, ident, _) = local.pat.kind;\n+                if let hir::StmtKind::Semi(ref second) = w[1].kind;\n+                if let hir::ExprKind::Assign(_, ref call, _) = second.kind;\n+                if let hir::ExprKind::Call(ref closure, _) = call.kind;\n+                if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = closure.kind;\n+                if ident == path.segments[0].ident;\n+                if count_closure_usage(block, path) == 1;\n+                then {\n+                    span_lint(\n+                        cx,\n+                        REDUNDANT_CLOSURE_CALL,\n+                        second.span,\n+                        \"closure called just once immediately after it was declared\",\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "1879aae77fb650783301cd1bc8500cca8551bdb7", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/942e0e6facd0944843441a4b8e004902487b6cb7/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942e0e6facd0944843441a4b8e004902487b6cb7/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=942e0e6facd0944843441a4b8e004902487b6cb7", "patch": "@@ -1835,7 +1835,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         group: \"complexity\",\n         desc: \"throwaway closures called in the expression they are defined\",\n         deprecation: None,\n-        module: \"misc_early\",\n+        module: \"redundant_closure_call\",\n     },\n     Lint {\n         name: \"redundant_closure_for_method_calls\","}, {"sha": "68c1416bb6b1a33ff731f9fa9895116248011966", "filename": "tests/ui/redundant_closure_call.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8cf4219c1673533eb5caf304237bffaa8e847067/tests%2Fui%2Fredundant_closure_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cf4219c1673533eb5caf304237bffaa8e847067/tests%2Fui%2Fredundant_closure_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.stderr?ref=8cf4219c1673533eb5caf304237bffaa8e847067", "patch": "@@ -1,28 +0,0 @@\n-error: Closure called just once immediately after it was declared\n-  --> $DIR/redundant_closure_call.rs:12:5\n-   |\n-LL |     i = closure();\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::redundant-closure-call` implied by `-D warnings`\n-\n-error: Closure called just once immediately after it was declared\n-  --> $DIR/redundant_closure_call.rs:15:5\n-   |\n-LL |     i = closure(3);\n-   |     ^^^^^^^^^^^^^^\n-\n-error: Try not to call a closure in the expression where it is declared.\n-  --> $DIR/redundant_closure_call.rs:7:17\n-   |\n-LL |     let mut k = (|m| m + 1)(i);\n-   |                 ^^^^^^^^^^^^^^\n-\n-error: Try not to call a closure in the expression where it is declared.\n-  --> $DIR/redundant_closure_call.rs:9:9\n-   |\n-LL |     k = (|a, b| a * b)(1, 5);\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "3dd365620ccbf1b4f4eef131819ce9da695f84dd", "filename": "tests/ui/redundant_closure_call_early.rs", "status": "renamed", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/942e0e6facd0944843441a4b8e004902487b6cb7/tests%2Fui%2Fredundant_closure_call_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942e0e6facd0944843441a4b8e004902487b6cb7/tests%2Fui%2Fredundant_closure_call_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_early.rs?ref=942e0e6facd0944843441a4b8e004902487b6cb7", "patch": "@@ -4,18 +4,14 @@\n \n fn main() {\n     let mut i = 1;\n+\n+    // lint here\n     let mut k = (|m| m + 1)(i);\n \n+    // lint here\n     k = (|a, b| a * b)(1, 5);\n \n-    let closure = || 32;\n-    i = closure();\n-\n-    let closure = |i| i + 1;\n-    i = closure(3);\n-\n-    i = closure(4);\n-\n+    // don't lint these\n     #[allow(clippy::needless_return)]\n     (|| return 2)();\n     (|| -> Option<i32> { None? })();", "previous_filename": "tests/ui/redundant_closure_call.rs"}, {"sha": "79f276634619e277c24cef3069afe85953948210", "filename": "tests/ui/redundant_closure_call_early.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/942e0e6facd0944843441a4b8e004902487b6cb7/tests%2Fui%2Fredundant_closure_call_early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/942e0e6facd0944843441a4b8e004902487b6cb7/tests%2Fui%2Fredundant_closure_call_early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_early.stderr?ref=942e0e6facd0944843441a4b8e004902487b6cb7", "patch": "@@ -0,0 +1,16 @@\n+error: try not to call a closure in the expression where it is declared.\n+  --> $DIR/redundant_closure_call_early.rs:9:17\n+   |\n+LL |     let mut k = (|m| m + 1)(i);\n+   |                 ^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::redundant-closure-call` implied by `-D warnings`\n+\n+error: try not to call a closure in the expression where it is declared.\n+  --> $DIR/redundant_closure_call_early.rs:12:9\n+   |\n+LL |     k = (|a, b| a * b)(1, 5);\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "644161d9f5d885eb24da0c187bfcd5e63ffa1352", "filename": "tests/ui/redundant_closure_call_fixable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/942e0e6facd0944843441a4b8e004902487b6cb7/tests%2Fui%2Fredundant_closure_call_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/942e0e6facd0944843441a4b8e004902487b6cb7/tests%2Fui%2Fredundant_closure_call_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.stderr?ref=942e0e6facd0944843441a4b8e004902487b6cb7", "patch": "@@ -1,8 +1,8 @@\n-error: Try not to call a closure in the expression where it is declared.\n+error: try not to call a closure in the expression where it is declared.\n   --> $DIR/redundant_closure_call_fixable.rs:7:13\n    |\n LL |     let a = (|| 42)();\n-   |             ^^^^^^^^^ help: Try doing something like: : `42`\n+   |             ^^^^^^^^^ help: try doing something like: `42`\n    |\n    = note: `-D clippy::redundant-closure-call` implied by `-D warnings`\n "}, {"sha": "e29a1dce0c7e8f040f7dd3f262e505fbf4d21d9a", "filename": "tests/ui/redundant_closure_call_late.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/942e0e6facd0944843441a4b8e004902487b6cb7/tests%2Fui%2Fredundant_closure_call_late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942e0e6facd0944843441a4b8e004902487b6cb7/tests%2Fui%2Fredundant_closure_call_late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_late.rs?ref=942e0e6facd0944843441a4b8e004902487b6cb7", "patch": "@@ -0,0 +1,27 @@\n+// non rustfixable, see redundant_closure_call_fixable.rs\n+\n+#![warn(clippy::redundant_closure_call)]\n+\n+fn main() {\n+    let mut i = 1;\n+\n+    // don't lint here, the closure is used more than once\n+    let closure = |i| i + 1;\n+    i = closure(3);\n+    i = closure(4);\n+\n+    // lint here\n+    let redun_closure = || 1;\n+    i = redun_closure();\n+\n+    // shadowed closures are supported, lint here\n+    let shadowed_closure = || 1;\n+    i = shadowed_closure();\n+    let shadowed_closure = || 2;\n+    i = shadowed_closure();\n+\n+    // don't lint here\n+    let shadowed_closure = || 2;\n+    i = shadowed_closure();\n+    i = shadowed_closure();\n+}"}, {"sha": "7c8865f1bd375e02a14c5ab99fadd78c88c0f83e", "filename": "tests/ui/redundant_closure_call_late.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/942e0e6facd0944843441a4b8e004902487b6cb7/tests%2Fui%2Fredundant_closure_call_late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/942e0e6facd0944843441a4b8e004902487b6cb7/tests%2Fui%2Fredundant_closure_call_late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_late.stderr?ref=942e0e6facd0944843441a4b8e004902487b6cb7", "patch": "@@ -0,0 +1,22 @@\n+error: closure called just once immediately after it was declared\n+  --> $DIR/redundant_closure_call_late.rs:15:5\n+   |\n+LL |     i = redun_closure();\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::redundant-closure-call` implied by `-D warnings`\n+\n+error: closure called just once immediately after it was declared\n+  --> $DIR/redundant_closure_call_late.rs:19:5\n+   |\n+LL |     i = shadowed_closure();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: closure called just once immediately after it was declared\n+  --> $DIR/redundant_closure_call_late.rs:21:5\n+   |\n+LL |     i = shadowed_closure();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}